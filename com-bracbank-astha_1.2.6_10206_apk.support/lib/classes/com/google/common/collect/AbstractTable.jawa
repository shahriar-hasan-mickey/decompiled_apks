record `com.google.common.collect.AbstractTable` @kind class @AccessFlag ABSTRACT extends `com.google.common.collect.Table` @kind interface {
  `java.util.Set` `com.google.common.collect.AbstractTable.cellSet` @AccessFlag PRIVATE_TRANSIENT;
  `java.util.Collection` `com.google.common.collect.AbstractTable.values` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`com.google.common.collect.AbstractTable` v0 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.Iterator` `cellIterator`() @signature `Lcom/google/common/collect/AbstractTable;.cellIterator:()Ljava/util/Iterator;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Set` `cellSet`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.cellSet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `clear`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Set` `columnKeySet`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.columnKeySet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.AbstractTable` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.contains:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsColumn`(`com.google.common.collect.AbstractTable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.containsColumn:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsRow`(`com.google.common.collect.AbstractTable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.containsRow:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsValue`(`com.google.common.collect.AbstractTable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Set` `createCellSet`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.createCellSet:()Ljava/util/Set;` @AccessFlag  {

  # return;
}
procedure `java.util.Collection` `createValues`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.createValues:()Ljava/util/Collection;` @AccessFlag  {

  # return;
}
procedure `boolean` `equals`(`com.google.common.collect.AbstractTable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.collect.AbstractTable` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.get:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `put`(`com.google.common.collect.AbstractTable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.put:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `putAll`(`com.google.common.collect.AbstractTable` v3 @kind this, `com.google.common.collect.Table` v4 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.putAll:(Lcom/google/common/collect/Table;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `remove`(`com.google.common.collect.AbstractTable` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractTable;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Set` `rowKeySet`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.rowKeySet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Collection` `values`(`com.google.common.collect.AbstractTable` v1 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `valuesIterator`(`com.google.common.collect.AbstractTable` v2 @kind this) @signature `Lcom/google/common/collect/AbstractTable;.valuesIterator:()Ljava/util/Iterator;` @AccessFlag  {

  # return;
}
