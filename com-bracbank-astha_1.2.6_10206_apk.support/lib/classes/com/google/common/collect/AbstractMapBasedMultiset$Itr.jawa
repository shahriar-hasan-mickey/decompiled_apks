record `com.google.common.collect.AbstractMapBasedMultiset$Itr` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface {
  `int` `com.google.common.collect.AbstractMapBasedMultiset$Itr.entryIndex` @AccessFlag ;
  `int` `com.google.common.collect.AbstractMapBasedMultiset$Itr.expectedModCount` @AccessFlag ;
  `com.google.common.collect.AbstractMapBasedMultiset` `com.google.common.collect.AbstractMapBasedMultiset$Itr.this$0` @AccessFlag FINAL_SYNTHETIC;
  `int` `com.google.common.collect.AbstractMapBasedMultiset$Itr.toRemove` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.collect.AbstractMapBasedMultiset$Itr` v1 @kind this, `com.google.common.collect.AbstractMapBasedMultiset` v2 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.<init>:(Lcom/google/common/collect/AbstractMapBasedMultiset;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `checkForConcurrentModification`(`com.google.common.collect.AbstractMapBasedMultiset$Itr` v2 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.checkForConcurrentModification:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `hasNext`(`com.google.common.collect.AbstractMapBasedMultiset$Itr` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.common.collect.AbstractMapBasedMultiset$Itr` v3 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.common.collect.AbstractMapBasedMultiset$Itr` v6 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `result`(`int` v0 ) @signature `Lcom/google/common/collect/AbstractMapBasedMultiset$Itr;.result:(I)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
