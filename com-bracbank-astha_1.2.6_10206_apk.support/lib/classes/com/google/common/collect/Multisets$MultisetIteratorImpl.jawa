record `com.google.common.collect.Multisets$MultisetIteratorImpl` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `boolean` `com.google.common.collect.Multisets$MultisetIteratorImpl.canRemove` @AccessFlag PRIVATE;
  `com.google.common.collect.Multiset$Entry` `com.google.common.collect.Multisets$MultisetIteratorImpl.currentEntry` @AccessFlag PRIVATE;
  `java.util.Iterator` `com.google.common.collect.Multisets$MultisetIteratorImpl.entryIterator` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.collect.Multisets$MultisetIteratorImpl.laterCount` @AccessFlag PRIVATE;
  `com.google.common.collect.Multiset` `com.google.common.collect.Multisets$MultisetIteratorImpl.multiset` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.collect.Multisets$MultisetIteratorImpl.totalCount` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.collect.Multisets$MultisetIteratorImpl` v0 @kind this, `com.google.common.collect.Multiset` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lcom/google/common/collect/Multisets$MultisetIteratorImpl;.<init>:(Lcom/google/common/collect/Multiset;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.common.collect.Multisets$MultisetIteratorImpl` v1 @kind this) @signature `Lcom/google/common/collect/Multisets$MultisetIteratorImpl;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.common.collect.Multisets$MultisetIteratorImpl` v2 @kind this) @signature `Lcom/google/common/collect/Multisets$MultisetIteratorImpl;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.common.collect.Multisets$MultisetIteratorImpl` v3 @kind this) @signature `Lcom/google/common/collect/Multisets$MultisetIteratorImpl;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
