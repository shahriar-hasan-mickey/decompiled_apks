record `com.google.common.collect.RegularImmutableTable` @kind class @AccessFlag ABSTRACT extends `com.google.common.collect.ImmutableTable` @kind class {
}
procedure `void` `<init>`(`com.google.common.collect.RegularImmutableTable` v0 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `a`(`java.util.Comparator` v0 @kind object, `java.util.Comparator` v1 @kind object, `com.google.common.collect.Table$Cell` v2 @kind object, `com.google.common.collect.Table$Cell` v3 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.a:(Ljava/util/Comparator;Ljava/util/Comparator;Lcom/google/common/collect/Table$Cell;Lcom/google/common/collect/Table$Cell;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.collect.RegularImmutableTable` `forCells`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.forCells:(Ljava/lang/Iterable;)Lcom/google/common/collect/RegularImmutableTable;` @AccessFlag STATIC {

  # return;
}
procedure `com.google.common.collect.RegularImmutableTable` `forCells`(`java.util.List` v1 @kind object, `java.util.Comparator` v2 @kind object, `java.util.Comparator` v3 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.forCells:(Ljava/util/List;Ljava/util/Comparator;Ljava/util/Comparator;)Lcom/google/common/collect/RegularImmutableTable;` @AccessFlag STATIC {

  # return;
}
procedure `com.google.common.collect.RegularImmutableTable` `forCellsInternal`(`java.lang.Iterable` v5 @kind object, `java.util.Comparator` v6 @kind object, `java.util.Comparator` v7 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.forCellsInternal:(Ljava/lang/Iterable;Ljava/util/Comparator;Ljava/util/Comparator;)Lcom/google/common/collect/RegularImmutableTable;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.collect.RegularImmutableTable` `forOrderedComponents`(`com.google.common.collect.ImmutableList` v6 @kind object, `com.google.common.collect.ImmutableSet` v7 @kind object, `com.google.common.collect.ImmutableSet` v8 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.forOrderedComponents:(Lcom/google/common/collect/ImmutableList;Lcom/google/common/collect/ImmutableSet;Lcom/google/common/collect/ImmutableSet;)Lcom/google/common/collect/RegularImmutableTable;` @AccessFlag STATIC {

  # return;
}
procedure `int` `lambda$forCells$0`(`java.util.Comparator` v3 @kind object, `java.util.Comparator` v4 @kind object, `com.google.common.collect.Table$Cell` v5 @kind object, `com.google.common.collect.Table$Cell` v6 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.lambda$forCells$0:(Ljava/util/Comparator;Ljava/util/Comparator;Lcom/google/common/collect/Table$Cell;Lcom/google/common/collect/Table$Cell;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `checkNoDuplicate`(`com.google.common.collect.RegularImmutableTable` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable;.checkNoDuplicate:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag FINAL {

  # return;
}
procedure `com.google.common.collect.ImmutableSet` `createCellSet`(`com.google.common.collect.RegularImmutableTable` v2 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable;.createCellSet:()Lcom/google/common/collect/ImmutableSet;` @AccessFlag FINAL {

  # return;
}
procedure `java.util.Set` `createCellSet`(`com.google.common.collect.RegularImmutableTable` v1 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable;.createCellSet:()Ljava/util/Set;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `com.google.common.collect.ImmutableCollection` `createValues`(`com.google.common.collect.RegularImmutableTable` v2 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable;.createValues:()Lcom/google/common/collect/ImmutableCollection;` @AccessFlag FINAL {

  # return;
}
procedure `java.util.Collection` `createValues`(`com.google.common.collect.RegularImmutableTable` v1 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable;.createValues:()Ljava/util/Collection;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `com.google.common.collect.Table$Cell` `getCell`(`int` v0 ) @signature `Lcom/google/common/collect/RegularImmutableTable;.getCell:(I)Lcom/google/common/collect/Table$Cell;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`(`int` v0 ) @signature `Lcom/google/common/collect/RegularImmutableTable;.getValue:(I)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
