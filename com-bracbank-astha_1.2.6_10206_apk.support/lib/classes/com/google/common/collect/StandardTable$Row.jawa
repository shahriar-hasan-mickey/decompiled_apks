record `com.google.common.collect.StandardTable$Row` @kind class @AccessFlag  extends `com.google.common.collect.Maps$IteratorBasedAbstractMap` @kind class {
  `java.util.Map` `com.google.common.collect.StandardTable$Row.backingRowMap` @AccessFlag ;
  `java.lang.Object` `com.google.common.collect.StandardTable$Row.rowKey` @AccessFlag FINAL;
  `com.google.common.collect.StandardTable` `com.google.common.collect.StandardTable$Row.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.StandardTable$Row` v0 @kind this, `com.google.common.collect.StandardTable` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.<init>:(Lcom/google/common/collect/StandardTable;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `clear`(`com.google.common.collect.StandardTable$Row` v1 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Map` `computeBackingRowMap`(`com.google.common.collect.StandardTable$Row` v2 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.computeBackingRowMap:()Ljava/util/Map;` @AccessFlag  {

  # return;
}
procedure `boolean` `containsKey`(`com.google.common.collect.StandardTable$Row` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `entryIterator`(`com.google.common.collect.StandardTable$Row` v2 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.entryIterator:()Ljava/util/Iterator;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.collect.StandardTable$Row` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `maintainEmptyInvariant`(`com.google.common.collect.StandardTable$Row` v2 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.maintainEmptyInvariant:()V` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `put`(`com.google.common.collect.StandardTable$Row` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `remove`(`com.google.common.collect.StandardTable$Row` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`com.google.common.collect.StandardTable$Row` v1 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateBackingRowMapField`(`com.google.common.collect.StandardTable$Row` v2 @kind this) @signature `Lcom/google/common/collect/StandardTable$Row;.updateBackingRowMapField:()V` @AccessFlag FINAL {

  # return;
}
procedure `java.util.Map$Entry` `wrapEntry`(`com.google.common.collect.StandardTable$Row` v1 @kind this, `java.util.Map$Entry` v2 @kind object) @signature `Lcom/google/common/collect/StandardTable$Row;.wrapEntry:(Ljava/util/Map$Entry;)Ljava/util/Map$Entry;` @AccessFlag  {

  # return;
}
