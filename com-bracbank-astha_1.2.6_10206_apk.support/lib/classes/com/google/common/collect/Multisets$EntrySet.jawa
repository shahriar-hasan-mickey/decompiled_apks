record `com.google.common.collect.Multisets$EntrySet` @kind class @AccessFlag ABSTRACT extends `com.google.common.collect.Sets$ImprovedAbstractSet` @kind class {
}
procedure `void` `<init>`(`com.google.common.collect.Multisets$EntrySet` v0 @kind this) @signature `Lcom/google/common/collect/Multisets$EntrySet;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `clear`(`com.google.common.collect.Multisets$EntrySet` v1 @kind this) @signature `Lcom/google/common/collect/Multisets$EntrySet;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.Multisets$EntrySet` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/collect/Multisets$EntrySet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.collect.Multiset` `multiset`() @signature `Lcom/google/common/collect/Multisets$EntrySet;.multiset:()Lcom/google/common/collect/Multiset;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`com.google.common.collect.Multisets$EntrySet` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/collect/Multisets$EntrySet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
