record `com.google.common.collect.ConcurrentHashMultiset$1` @kind class @AccessFlag  extends `com.google.common.collect.ForwardingSet` @kind class {
  `java.util.Set` `com.google.common.collect.ConcurrentHashMultiset$1.val$delegate` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.ConcurrentHashMultiset$1` v0 @kind this, `com.google.common.collect.ConcurrentHashMultiset` v1 @kind object, `java.util.Set` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.<init>:(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Set;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.ConcurrentHashMultiset$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsAll`(`com.google.common.collect.ConcurrentHashMultiset$1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `delegate`(`com.google.common.collect.ConcurrentHashMultiset$1` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.Collection` `delegate`(`com.google.common.collect.ConcurrentHashMultiset$1` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.delegate:()Ljava/util/Collection;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.Set` `delegate`(`com.google.common.collect.ConcurrentHashMultiset$1` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.delegate:()Ljava/util/Set;` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `remove`(`com.google.common.collect.ConcurrentHashMultiset$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `removeAll`(`com.google.common.collect.ConcurrentHashMultiset$1` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$1;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {

  # return;
}
