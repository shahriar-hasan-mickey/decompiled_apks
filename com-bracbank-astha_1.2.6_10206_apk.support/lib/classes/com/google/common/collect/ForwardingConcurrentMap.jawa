record `com.google.common.collect.ForwardingConcurrentMap` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.google.common.collect.ForwardingMap` @kind class, `java.util.concurrent.ConcurrentMap` @kind interface {
}
procedure `void` `<init>`(`com.google.common.collect.ForwardingConcurrentMap` v0 @kind this) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `delegate`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.Map` `delegate`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.delegate:()Ljava/util/Map;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.ConcurrentMap` `delegate`() @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.delegate:()Ljava/util/concurrent/ConcurrentMap;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `putIfAbsent`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `remove`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `replace`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.replace:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `replace`(`com.google.common.collect.ForwardingConcurrentMap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/collect/ForwardingConcurrentMap;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
