record `com.google.common.collect.Collections2` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.common.collect.Collections2` v0 @kind this) @signature `Lcom/google/common/collect/Collections2;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `boolean` `access$000`(`java.util.List` v0 @kind object, `java.util.List` v1 @kind object) @signature `Lcom/google/common/collect/Collections2;.access$000:(Ljava/util/List;Ljava/util/List;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `containsAllImpl`(`java.util.Collection` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lcom/google/common/collect/Collections2;.containsAllImpl:(Ljava/util/Collection;Ljava/util/Collection;)Z` @AccessFlag STATIC {

  # return;
}
procedure `com.google.common.collect.ObjectCountHashMap` `counts`(`java.util.Collection` v3 @kind object) @signature `Lcom/google/common/collect/Collections2;.counts:(Ljava/util/Collection;)Lcom/google/common/collect/ObjectCountHashMap;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Collection` `filter`(`java.util.Collection` v1 @kind object, `com.google.common.base.Predicate` v2 @kind object) @signature `Lcom/google/common/collect/Collections2;.filter:(Ljava/util/Collection;Lcom/google/common/base/Predicate;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPermutation`(`java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/google/common/collect/Collections2;.isPermutation:(Ljava/util/List;Ljava/util/List;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.StringBuilder` `newStringBuilderForCollection`(`int` v5 ) @signature `Lcom/google/common/collect/Collections2;.newStringBuilderForCollection:(I)Ljava/lang/StringBuilder;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.Collection` `orderedPermutations`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/collect/Collections2;.orderedPermutations:(Ljava/lang/Iterable;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Collection` `orderedPermutations`(`java.lang.Iterable` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lcom/google/common/collect/Collections2;.orderedPermutations:(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Collection` `permutations`(`java.util.Collection` v1 @kind object) @signature `Lcom/google/common/collect/Collections2;.permutations:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `safeContains`(`java.util.Collection` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/Collections2;.safeContains:(Ljava/util/Collection;Ljava/lang/Object;)Z` @AccessFlag STATIC {

  # return;
}
procedure `boolean` `safeRemove`(`java.util.Collection` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/Collections2;.safeRemove:(Ljava/util/Collection;Ljava/lang/Object;)Z` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.String` `toStringImpl`(`java.util.Collection` v4 @kind object) @signature `Lcom/google/common/collect/Collections2;.toStringImpl:(Ljava/util/Collection;)Ljava/lang/String;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.Collection` `transform`(`java.util.Collection` v1 @kind object, `com.google.common.base.Function` v2 @kind object) @signature `Lcom/google/common/collect/Collections2;.transform:(Ljava/util/Collection;Lcom/google/common/base/Function;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {

  # return;
}
