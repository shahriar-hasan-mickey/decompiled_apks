record `com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1` @kind class @AccessFlag  extends `com.google.common.collect.UnmodifiableIterator` @kind class {
  `java.util.Iterator` `com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.val$backingIterator` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1` v0 @kind this, `com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lcom/google/common/collect/ImmutableMap$MapViewOfValuesAsSingletonSets$1;.<init>:(Lcom/google/common/collect/ImmutableMap$MapViewOfValuesAsSingletonSets;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1` v1 @kind this) @signature `Lcom/google/common/collect/ImmutableMap$MapViewOfValuesAsSingletonSets$1;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1` v1 @kind this) @signature `Lcom/google/common/collect/ImmutableMap$MapViewOfValuesAsSingletonSets$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Map$Entry` `next`(`com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1` v2 @kind this) @signature `Lcom/google/common/collect/ImmutableMap$MapViewOfValuesAsSingletonSets$1;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {

  # return;
}
