record `com.google.common.collect.LinkedHashMultiset` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.collect.AbstractMapBasedMultiset` @kind class {
}
procedure `void` `<init>`(`com.google.common.collect.LinkedHashMultiset` v0 @kind this, `int` v1 ) @signature `Lcom/google/common/collect/LinkedHashMultiset;.<init>:(I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.collect.LinkedHashMultiset` `create`() @signature `Lcom/google/common/collect/LinkedHashMultiset;.create:()Lcom/google/common/collect/LinkedHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.collect.LinkedHashMultiset` `create`(`int` v1 ) @signature `Lcom/google/common/collect/LinkedHashMultiset;.create:(I)Lcom/google/common/collect/LinkedHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.collect.LinkedHashMultiset` `create`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/collect/LinkedHashMultiset;.create:(Ljava/lang/Iterable;)Lcom/google/common/collect/LinkedHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.LinkedHashMultiset` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/LinkedHashMultiset;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Set` `elementSet`(`com.google.common.collect.LinkedHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/LinkedHashMultiset;.elementSet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Set` `entrySet`(`com.google.common.collect.LinkedHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/LinkedHashMultiset;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.common.collect.LinkedHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/LinkedHashMultiset;.isEmpty:()Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.collect.ObjectCountHashMap` `newBackingMap`(`com.google.common.collect.LinkedHashMultiset` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/collect/LinkedHashMultiset;.newBackingMap:(I)Lcom/google/common/collect/ObjectCountHashMap;` @AccessFlag  {

  # return;
}
