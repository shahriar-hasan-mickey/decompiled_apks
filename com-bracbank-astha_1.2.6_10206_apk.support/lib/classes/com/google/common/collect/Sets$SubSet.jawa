record `com.google.common.collect.Sets$SubSet` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `com.google.common.collect.ImmutableMap` `com.google.common.collect.Sets$SubSet.inputSet` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.collect.Sets$SubSet.mask` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.collect.Sets$SubSet` v0 @kind this, `com.google.common.collect.ImmutableMap` v1 @kind object, `int` v2 ) @signature `Lcom/google/common/collect/Sets$SubSet;.<init>:(Lcom/google/common/collect/ImmutableMap;I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.collect.ImmutableMap` `access$100`(`com.google.common.collect.Sets$SubSet` v0 @kind object) @signature `Lcom/google/common/collect/Sets$SubSet;.access$100:(Lcom/google/common/collect/Sets$SubSet;)Lcom/google/common/collect/ImmutableMap;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$200`(`com.google.common.collect.Sets$SubSet` v0 @kind object) @signature `Lcom/google/common/collect/Sets$SubSet;.access$200:(Lcom/google/common/collect/Sets$SubSet;)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.Sets$SubSet` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/Sets$SubSet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.common.collect.Sets$SubSet` v1 @kind this) @signature `Lcom/google/common/collect/Sets$SubSet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`com.google.common.collect.Sets$SubSet` v1 @kind this) @signature `Lcom/google/common/collect/Sets$SubSet;.size:()I` @AccessFlag PUBLIC {

  # return;
}
