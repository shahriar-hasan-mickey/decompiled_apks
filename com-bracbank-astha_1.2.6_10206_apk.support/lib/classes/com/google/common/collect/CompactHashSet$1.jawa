record `com.google.common.collect.CompactHashSet$1` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `int` `com.google.common.collect.CompactHashSet$1.currentIndex` @AccessFlag ;
  `int` `com.google.common.collect.CompactHashSet$1.expectedMetadata` @AccessFlag ;
  `int` `com.google.common.collect.CompactHashSet$1.indexToRemove` @AccessFlag ;
  `com.google.common.collect.CompactHashSet` `com.google.common.collect.CompactHashSet$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.CompactHashSet$1` v1 @kind this, `com.google.common.collect.CompactHashSet` v2 @kind object) @signature `Lcom/google/common/collect/CompactHashSet$1;.<init>:(Lcom/google/common/collect/CompactHashSet;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `checkForConcurrentModification`(`com.google.common.collect.CompactHashSet$1` v2 @kind this) @signature `Lcom/google/common/collect/CompactHashSet$1;.checkForConcurrentModification:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `hasNext`(`com.google.common.collect.CompactHashSet$1` v1 @kind this) @signature `Lcom/google/common/collect/CompactHashSet$1;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `incrementExpectedModCount`(`com.google.common.collect.CompactHashSet$1` v1 @kind this) @signature `Lcom/google/common/collect/CompactHashSet$1;.incrementExpectedModCount:()V` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.common.collect.CompactHashSet$1` v3 @kind this) @signature `Lcom/google/common/collect/CompactHashSet$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.common.collect.CompactHashSet$1` v3 @kind this) @signature `Lcom/google/common/collect/CompactHashSet$1;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
