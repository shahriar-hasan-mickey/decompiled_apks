record `com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` @kind class @AccessFlag  extends `com.google.common.collect.ForwardingMapEntry` @kind class {
  `com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1` `com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.this$1` @AccessFlag FINAL_SYNTHETIC;
  `java.util.Map$Entry` `com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.val$entry` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` v0 @kind this, `com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1` v1 @kind object, `java.util.Map$Entry` v2 @kind object) @signature `Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1$1;.<init>:(Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1;Ljava/util/Map$Entry;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `delegate`(`com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` v1 @kind this) @signature `Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1$1;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.Map$Entry` `delegate`(`com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` v1 @kind this) @signature `Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1$1;.delegate:()Ljava/util/Map$Entry;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `getValue`(`com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` v1 @kind this) @signature `Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1$1;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Collection` `getValue`(`com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1` v2 @kind this) @signature `Lcom/google/common/collect/Synchronized$SynchronizedAsMapEntries$1$1;.getValue:()Ljava/util/Collection;` @AccessFlag PUBLIC {

  # return;
}
