record `com.google.common.collect.ConcurrentHashMultiset$EntrySet` @kind class @AccessFlag  extends `com.google.common.collect.AbstractMultiset$EntrySet` @kind class {
  `com.google.common.collect.ConcurrentHashMultiset` `com.google.common.collect.ConcurrentHashMultiset$EntrySet.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v0 @kind this, `com.google.common.collect.ConcurrentHashMultiset` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.<init>:(Lcom/google/common/collect/ConcurrentHashMultiset;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v0 @kind this, `com.google.common.collect.ConcurrentHashMultiset` v1 @kind object, `com.google.common.collect.ConcurrentHashMultiset$1` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.<init>:(Lcom/google/common/collect/ConcurrentHashMultiset;Lcom/google/common/collect/ConcurrentHashMultiset$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.List` `snapshot`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v2 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.snapshot:()Ljava/util/List;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.collect.ConcurrentHashMultiset` `multiset`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.multiset:()Lcom/google/common/collect/ConcurrentHashMultiset;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.Multiset` `multiset`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.multiset:()Lcom/google/common/collect/Multiset;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `java.lang.Object`[] `toArray`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object`[] `toArray`(`com.google.common.collect.ConcurrentHashMultiset$EntrySet` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
