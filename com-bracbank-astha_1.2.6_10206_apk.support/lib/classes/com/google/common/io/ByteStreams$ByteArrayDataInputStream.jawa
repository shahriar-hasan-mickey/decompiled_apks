record `com.google.common.io.ByteStreams$ByteArrayDataInputStream` @kind class @AccessFlag  extends `com.google.common.io.ByteArrayDataInput` @kind interface {
  `java.io.DataInput` `com.google.common.io.ByteStreams$ByteArrayDataInputStream.input` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v1 @kind this, `java.io.ByteArrayInputStream` v2 @kind object) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.<init>:(Ljava/io/ByteArrayInputStream;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `readBoolean`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readBoolean:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `byte` `readByte`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readByte:()B` @AccessFlag PUBLIC {

  # return;
}
procedure `char` `readChar`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readChar:()C` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `readDouble`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readDouble:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `float` `readFloat`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readFloat:()F` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `readFully`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readFully:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `readFully`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readFully:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `readInt`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readInt:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `readLine`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `readLong`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readLong:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `short` `readShort`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readShort:()S` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `readUTF`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readUTF:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `readUnsignedByte`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readUnsignedByte:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `readUnsignedShort`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v2 @kind this) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.readUnsignedShort:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `skipBytes`(`com.google.common.io.ByteStreams$ByteArrayDataInputStream` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/io/ByteStreams$ByteArrayDataInputStream;.skipBytes:(I)I` @AccessFlag PUBLIC {

  # return;
}
