record `com.google.common.io.MultiInputStream` @kind class @AccessFlag FINAL extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `com.google.common.io.MultiInputStream.in` @AccessFlag PRIVATE;
  `java.util.Iterator` `com.google.common.io.MultiInputStream.it` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.io.MultiInputStream` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lcom/google/common/io/MultiInputStream;.<init>:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `advance`(`com.google.common.io.MultiInputStream` v1 @kind this) @signature `Lcom/google/common/io/MultiInputStream;.advance:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `available`(`com.google.common.io.MultiInputStream` v1 @kind this) @signature `Lcom/google/common/io/MultiInputStream;.available:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `close`(`com.google.common.io.MultiInputStream` v2 @kind this) @signature `Lcom/google/common/io/MultiInputStream;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `markSupported`(`com.google.common.io.MultiInputStream` v1 @kind this) @signature `Lcom/google/common/io/MultiInputStream;.markSupported:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`com.google.common.io.MultiInputStream` v2 @kind this) @signature `Lcom/google/common/io/MultiInputStream;.read:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`com.google.common.io.MultiInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/google/common/io/MultiInputStream;.read:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `skip`(`com.google.common.io.MultiInputStream` v5 @kind this, `long` v6 ) @signature `Lcom/google/common/io/MultiInputStream;.skip:(J)J` @AccessFlag PUBLIC {

  # return;
}
