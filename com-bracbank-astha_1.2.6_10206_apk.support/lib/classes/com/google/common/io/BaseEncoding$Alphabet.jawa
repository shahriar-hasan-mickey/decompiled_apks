record `com.google.common.io.BaseEncoding$Alphabet` @kind class @AccessFlag FINAL {
  `int` `com.google.common.io.BaseEncoding$Alphabet.bitsPerChar` @AccessFlag FINAL;
  `int` `com.google.common.io.BaseEncoding$Alphabet.bytesPerChunk` @AccessFlag FINAL;
  `char`[] `com.google.common.io.BaseEncoding$Alphabet.chars` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.io.BaseEncoding$Alphabet.charsPerChunk` @AccessFlag FINAL;
  `byte`[] `com.google.common.io.BaseEncoding$Alphabet.decodabet` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.io.BaseEncoding$Alphabet.mask` @AccessFlag FINAL;
  `java.lang.String` `com.google.common.io.BaseEncoding$Alphabet.name` @AccessFlag PRIVATE_FINAL;
  `boolean`[] `com.google.common.io.BaseEncoding$Alphabet.validPadding` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.io.BaseEncoding$Alphabet` v8 @kind this, `java.lang.String` v9 @kind object, `char`[] v10 @kind object) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.<init>:(Ljava/lang/String;[C)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `char`[] `access$000`(`com.google.common.io.BaseEncoding$Alphabet` v0 @kind object) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.access$000:(Lcom/google/common/io/BaseEncoding$Alphabet;)[C` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `hasLowerCase`(`com.google.common.io.BaseEncoding$Alphabet` v5 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.hasLowerCase:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `hasUpperCase`(`com.google.common.io.BaseEncoding$Alphabet` v5 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.hasUpperCase:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `canDecode`(`com.google.common.io.BaseEncoding$Alphabet` v1 @kind this, `char` v2 ) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.canDecode:(C)Z` @AccessFlag  {

  # return;
}
procedure `int` `decode`(`com.google.common.io.BaseEncoding$Alphabet` v4 @kind this, `char` v5 ) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.decode:(C)I` @AccessFlag  {

  # return;
}
procedure `char` `encode`(`com.google.common.io.BaseEncoding$Alphabet` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.encode:(I)C` @AccessFlag  {

  # return;
}
procedure `boolean` `equals`(`com.google.common.io.BaseEncoding$Alphabet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.io.BaseEncoding$Alphabet` v1 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isValidPaddingStartPosition`(`com.google.common.io.BaseEncoding$Alphabet` v2 @kind this, `int` v3 ) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.isValidPaddingStartPosition:(I)Z` @AccessFlag  {

  # return;
}
procedure `com.google.common.io.BaseEncoding$Alphabet` `lowerCase`(`com.google.common.io.BaseEncoding$Alphabet` v4 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.lowerCase:()Lcom/google/common/io/BaseEncoding$Alphabet;` @AccessFlag  {

  # return;
}
procedure `boolean` `matches`(`com.google.common.io.BaseEncoding$Alphabet` v2 @kind this, `char` v3 ) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.matches:(C)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.io.BaseEncoding$Alphabet` v1 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.io.BaseEncoding$Alphabet` `upperCase`(`com.google.common.io.BaseEncoding$Alphabet` v4 @kind this) @signature `Lcom/google/common/io/BaseEncoding$Alphabet;.upperCase:()Lcom/google/common/io/BaseEncoding$Alphabet;` @AccessFlag  {

  # return;
}
