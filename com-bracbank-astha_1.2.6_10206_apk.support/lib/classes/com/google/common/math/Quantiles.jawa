record `com.google.common.math.Quantiles` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.common.math.Quantiles` v0 @kind this) @signature `Lcom/google/common/math/Quantiles;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `access$300`(`int` v0 , `int` v1 ) @signature `Lcom/google/common/math/Quantiles;.access$300:(II)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `double`[] `access$400`(`long`[] v0 @kind object) @signature `Lcom/google/common/math/Quantiles;.access$400:([J)[D` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `double`[] `access$500`(`int`[] v0 @kind object) @signature `Lcom/google/common/math/Quantiles;.access$500:([I)[D` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$600`(`double`[] v0 @kind object) @signature `Lcom/google/common/math/Quantiles;.access$600:([D)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$700`(`int` v0 , `double`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/common/math/Quantiles;.access$700:(I[DII)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `double` `access$800`(`double` v0 , `double` v2 , `double` v4 , `double` v6 ) @signature `Lcom/google/common/math/Quantiles;.access$800:(DDDD)D` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$900`(`int`[] v0 @kind object, `int` v1 , `int` v2 , `double`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/google/common/math/Quantiles;.access$900:([III[DII)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `checkIndex`(`int` v2 , `int` v3 ) @signature `Lcom/google/common/math/Quantiles;.checkIndex:(II)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `chooseNextSelection`(`int`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/common/math/Quantiles;.chooseNextSelection:([IIIII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `containsNaN`(`double`[] v5 @kind object) @signature `Lcom/google/common/math/Quantiles;.containsNaN:([D)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `double` `interpolate`(`double` v5 , `double` v7 , `double` v9 , `double` v11 ) @signature `Lcom/google/common/math/Quantiles;.interpolate:(DDDD)D` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `double`[] `intsToDoubles`(`int`[] v5 @kind object) @signature `Lcom/google/common/math/Quantiles;.intsToDoubles:([I)[D` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `double`[] `longsToDoubles`(`long`[] v5 @kind object) @signature `Lcom/google/common/math/Quantiles;.longsToDoubles:([J)[D` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.math.Quantiles$ScaleAndIndex` `median`() @signature `Lcom/google/common/math/Quantiles;.median:()Lcom/google/common/math/Quantiles$ScaleAndIndex;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `movePivotToStartOfSlice`(`double`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lcom/google/common/math/Quantiles;.movePivotToStartOfSlice:([DII)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `partition`(`double`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/google/common/math/Quantiles;.partition:([DII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.math.Quantiles$Scale` `percentiles`() @signature `Lcom/google/common/math/Quantiles;.percentiles:()Lcom/google/common/math/Quantiles$Scale;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.Quantiles$Scale` `quartiles`() @signature `Lcom/google/common/math/Quantiles;.quartiles:()Lcom/google/common/math/Quantiles$Scale;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.Quantiles$Scale` `scale`(`int` v2 ) @signature `Lcom/google/common/math/Quantiles;.scale:(I)Lcom/google/common/math/Quantiles$Scale;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `selectAllInPlace`(`int`[] v9 @kind object, `int` v10 , `int` v11 , `double`[] v12 @kind object, `int` v13 , `int` v14 ) @signature `Lcom/google/common/math/Quantiles;.selectAllInPlace:([III[DII)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `selectInPlace`(`int` v6 , `double`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lcom/google/common/math/Quantiles;.selectInPlace:(I[DII)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `swap`(`double`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/math/Quantiles;.swap:([DII)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
