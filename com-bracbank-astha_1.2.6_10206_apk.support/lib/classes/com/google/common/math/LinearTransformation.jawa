record `com.google.common.math.LinearTransformation` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.math.LinearTransformation` v0 @kind this) @signature `Lcom/google/common/math/LinearTransformation;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `forNaN`() @signature `Lcom/google/common/math/LinearTransformation;.forNaN:()Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `horizontal`(`double` v3 ) @signature `Lcom/google/common/math/LinearTransformation;.horizontal:(D)Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.LinearTransformation$LinearTransformationBuilder` `mapping`(`double` v7 , `double` v9 ) @signature `Lcom/google/common/math/LinearTransformation;.mapping:(DD)Lcom/google/common/math/LinearTransformation$LinearTransformationBuilder;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `vertical`(`double` v1 ) @signature `Lcom/google/common/math/LinearTransformation;.vertical:(D)Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `inverse`() @signature `Lcom/google/common/math/LinearTransformation;.inverse:()Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isHorizontal`() @signature `Lcom/google/common/math/LinearTransformation;.isHorizontal:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isVertical`() @signature `Lcom/google/common/math/LinearTransformation;.isVertical:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double` `slope`() @signature `Lcom/google/common/math/LinearTransformation;.slope:()D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double` `transform`(`double` v0 ) @signature `Lcom/google/common/math/LinearTransformation;.transform:(D)D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
