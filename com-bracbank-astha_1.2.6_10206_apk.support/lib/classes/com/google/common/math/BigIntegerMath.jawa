record `com.google.common.math.BigIntegerMath` @kind class @AccessFlag PUBLIC_FINAL {
}
global `double` `@@com.google.common.math.BigIntegerMath.LN_10` @AccessFlag PRIVATE_STATIC_FINAL;
global `double` `@@com.google.common.math.BigIntegerMath.LN_2` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@com.google.common.math.BigIntegerMath.SQRT2_PRECOMPUTED_BITS` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.common.math.BigIntegerMath.SQRT2_PRECOMPUTE_THRESHOLD` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/BigIntegerMath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.BigIntegerMath` v0 @kind this) @signature `Lcom/google/common/math/BigIntegerMath;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `binomial`(`int` v10 , `int` v11 ) @signature `Lcom/google/common/math/BigIntegerMath;.binomial:(II)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `ceilingPowerOfTwo`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.ceilingPowerOfTwo:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `divide`(`java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object, `java.math.RoundingMode` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.divide:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/RoundingMode;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `factorial`(`int` v19 ) @signature `Lcom/google/common/math/BigIntegerMath;.factorial:(I)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `fitsInLong`(`java.math.BigInteger` v1 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.fitsInLong:(Ljava/math/BigInteger;)Z` @AccessFlag STATIC {

  # return;
}
procedure `java.math.BigInteger` `floorPowerOfTwo`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.floorPowerOfTwo:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPowerOfTwo`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.isPowerOfTwo:(Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `listProduct`(`java.util.List` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.listProduct:(Ljava/util/List;)Ljava/math/BigInteger;` @AccessFlag STATIC {

  # return;
}
procedure `java.math.BigInteger` `listProduct`(`java.util.List` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/math/BigIntegerMath;.listProduct:(Ljava/util/List;II)Ljava/math/BigInteger;` @AccessFlag STATIC {

  # return;
}
procedure `int` `log10`(`java.math.BigInteger` v7 @kind object, `java.math.RoundingMode` v8 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.log10:(Ljava/math/BigInteger;Ljava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `log2`(`java.math.BigInteger` v2 @kind object, `java.math.RoundingMode` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.log2:(Ljava/math/BigInteger;Ljava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `roundToDouble`(`java.math.BigInteger` v1 @kind object, `java.math.RoundingMode` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.roundToDouble:(Ljava/math/BigInteger;Ljava/math/RoundingMode;)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `sqrt`(`java.math.BigInteger` v3 @kind object, `java.math.RoundingMode` v4 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.sqrt:(Ljava/math/BigInteger;Ljava/math/RoundingMode;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `sqrtApproxWithDoubles`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.sqrtApproxWithDoubles:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `sqrtFloor`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/common/math/BigIntegerMath;.sqrtFloor:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
