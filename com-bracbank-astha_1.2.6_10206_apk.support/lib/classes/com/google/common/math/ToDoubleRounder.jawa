record `com.google.common.math.ToDoubleRounder` @kind class @AccessFlag ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.math.ToDoubleRounder` v0 @kind this) @signature `Lcom/google/common/math/ToDoubleRounder;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Number` `minus`(`java.lang.Number` v0 @kind object, `java.lang.Number` v1 @kind object) @signature `Lcom/google/common/math/ToDoubleRounder;.minus:(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;` @AccessFlag ABSTRACT {

  # return;
}
procedure `double` `roundToDouble`(`com.google.common.math.ToDoubleRounder` v13 @kind this, `java.lang.Number` v14 @kind object, `java.math.RoundingMode` v15 @kind object) @signature `Lcom/google/common/math/ToDoubleRounder;.roundToDouble:(Ljava/lang/Number;Ljava/math/RoundingMode;)D` @AccessFlag FINAL {

  # return;
}
procedure `double` `roundToDoubleArbitrarily`(`java.lang.Number` v0 @kind object) @signature `Lcom/google/common/math/ToDoubleRounder;.roundToDoubleArbitrarily:(Ljava/lang/Number;)D` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `sign`(`java.lang.Number` v0 @kind object) @signature `Lcom/google/common/math/ToDoubleRounder;.sign:(Ljava/lang/Number;)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Number` `toX`(`double` v0 , `java.math.RoundingMode` v2 @kind object) @signature `Lcom/google/common/math/ToDoubleRounder;.toX:(DLjava/math/RoundingMode;)Ljava/lang/Number;` @AccessFlag ABSTRACT {

  # return;
}
