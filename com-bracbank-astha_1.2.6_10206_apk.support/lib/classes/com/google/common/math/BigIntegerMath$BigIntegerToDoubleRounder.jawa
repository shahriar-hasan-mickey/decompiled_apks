record `com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` @kind class @AccessFlag  extends `com.google.common.math.ToDoubleRounder` @kind class {
}
global `com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` `@@com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Number` `minus`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `java.lang.Number` v1 @kind object, `java.lang.Number` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.minus:(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `java.math.BigInteger` `minus`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.minus:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag  {

  # return;
}
procedure `double` `roundToDoubleArbitrarily`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v2 @kind this, `java.lang.Number` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.roundToDoubleArbitrarily:(Ljava/lang/Number;)D` @AccessFlag SYNTHETIC {

  # return;
}
procedure `double` `roundToDoubleArbitrarily`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v2 @kind this, `java.math.BigInteger` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.roundToDoubleArbitrarily:(Ljava/math/BigInteger;)D` @AccessFlag  {

  # return;
}
procedure `int` `sign`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `java.lang.Number` v1 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.sign:(Ljava/lang/Number;)I` @AccessFlag SYNTHETIC {

  # return;
}
procedure `int` `sign`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `java.math.BigInteger` v1 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.sign:(Ljava/math/BigInteger;)I` @AccessFlag  {

  # return;
}
procedure `java.lang.Number` `toX`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `double` v1 , `java.math.RoundingMode` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.toX:(DLjava/math/RoundingMode;)Ljava/lang/Number;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `java.math.BigInteger` `toX`(`com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder` v0 @kind this, `double` v1 , `java.math.RoundingMode` v3 @kind object) @signature `Lcom/google/common/math/BigIntegerMath$BigIntegerToDoubleRounder;.toX:(DLjava/math/RoundingMode;)Ljava/math/BigInteger;` @AccessFlag  {

  # return;
}
