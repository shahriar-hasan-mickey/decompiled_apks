record `com.google.common.math.LinearTransformation$RegularLinearTransformation` @kind class @AccessFlag FINAL extends `com.google.common.math.LinearTransformation` @kind class {
  `com.google.common.math.LinearTransformation` `com.google.common.math.LinearTransformation$RegularLinearTransformation.inverse` @AccessFlag ;
  `double` `com.google.common.math.LinearTransformation$RegularLinearTransformation.slope` @AccessFlag FINAL;
  `double` `com.google.common.math.LinearTransformation$RegularLinearTransformation.yIntercept` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v0 @kind this, `double` v1 , `double` v3 ) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.<init>:(DD)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v0 @kind this, `double` v1 , `double` v3 , `com.google.common.math.LinearTransformation` v5 @kind object) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.<init>:(DDLcom/google/common/math/LinearTransformation;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `createInverse`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v11 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.createInverse:()Lcom/google/common/math/LinearTransformation;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `inverse`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v1 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.inverse:()Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isHorizontal`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v5 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.isHorizontal:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isVertical`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v1 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.isVertical:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `slope`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v2 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.slope:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v3 @kind this) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `transform`(`com.google.common.math.LinearTransformation$RegularLinearTransformation` v2 @kind this, `double` v3 ) @signature `Lcom/google/common/math/LinearTransformation$RegularLinearTransformation;.transform:(D)D` @AccessFlag PUBLIC {

  # return;
}
