record `com.google.common.math.DoubleMath` @kind class @AccessFlag PUBLIC_FINAL {
}
global `double` `@@com.google.common.math.DoubleMath.LN_2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.common.math.DoubleMath.MAX_FACTORIAL` @AccessFlag STATIC_FINAL;
global `double` `@@com.google.common.math.DoubleMath.MAX_INT_AS_DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `double` `@@com.google.common.math.DoubleMath.MAX_LONG_AS_DOUBLE_PLUS_ONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `double` `@@com.google.common.math.DoubleMath.MIN_INT_AS_DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `double` `@@com.google.common.math.DoubleMath.MIN_LONG_AS_DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `double`[] `@@com.google.common.math.DoubleMath.everySixteenthFactorial` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/DoubleMath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.DoubleMath` v0 @kind this) @signature `Lcom/google/common/math/DoubleMath;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `double` `checkFinite`(`double` v1 ) @signature `Lcom/google/common/math/DoubleMath;.checkFinite:(D)D` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `double` `factorial`(`int` v5 ) @signature `Lcom/google/common/math/DoubleMath;.factorial:(I)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `fuzzyCompare`(`double` v0 , `double` v2 , `double` v4 ) @signature `Lcom/google/common/math/DoubleMath;.fuzzyCompare:(DDD)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `fuzzyEquals`(`double` v4 , `double` v6 , `double` v8 ) @signature `Lcom/google/common/math/DoubleMath;.fuzzyEquals:(DDD)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isMathematicalInteger`(`double` v3 ) @signature `Lcom/google/common/math/DoubleMath;.isMathematicalInteger:(D)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPowerOfTwo`(`double` v4 ) @signature `Lcom/google/common/math/DoubleMath;.isPowerOfTwo:(D)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `log2`(`double` v2 ) @signature `Lcom/google/common/math/DoubleMath;.log2:(D)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `log2`(`double` v5 , `java.math.RoundingMode` v7 @kind object) @signature `Lcom/google/common/math/DoubleMath;.log2:(DLjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `mean`(`java.lang.Iterable` v2 @kind object) @signature `Lcom/google/common/math/DoubleMath;.mean:(Ljava/lang/Iterable;)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `mean`(`java.util.Iterator` v10 @kind object) @signature `Lcom/google/common/math/DoubleMath;.mean:(Ljava/util/Iterator;)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `mean`(`double`[] v11 @kind object) @signature `Lcom/google/common/math/DoubleMath;.mean:([D)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `mean`(`int`[] v6 @kind object) @signature `Lcom/google/common/math/DoubleMath;.mean:([I)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `mean`(`long`[] v11 @kind object) @signature `Lcom/google/common/math/DoubleMath;.mean:([J)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `roundIntermediate`(`double` v6 , `java.math.RoundingMode` v8 @kind object) @signature `Lcom/google/common/math/DoubleMath;.roundIntermediate:(DLjava/math/RoundingMode;)D` @AccessFlag STATIC {

  # return;
}
procedure `java.math.BigInteger` `roundToBigInteger`(`double` v6 , `java.math.RoundingMode` v8 @kind object) @signature `Lcom/google/common/math/DoubleMath;.roundToBigInteger:(DLjava/math/RoundingMode;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `roundToInt`(`double` v8 , `java.math.RoundingMode` v10 @kind object) @signature `Lcom/google/common/math/DoubleMath;.roundToInt:(DLjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `roundToLong`(`double` v9 , `java.math.RoundingMode` v11 @kind object) @signature `Lcom/google/common/math/DoubleMath;.roundToLong:(DLjava/math/RoundingMode;)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
