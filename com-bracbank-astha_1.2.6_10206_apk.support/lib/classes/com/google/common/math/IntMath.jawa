record `com.google.common.math.IntMath` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@com.google.common.math.IntMath.FLOOR_SQRT_MAX_INT` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.common.math.IntMath.MAX_POWER_OF_SQRT2_UNSIGNED` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.common.math.IntMath.MAX_SIGNED_POWER_OF_TWO` @AccessFlag STATIC_FINAL;
global `int`[] `@@com.google.common.math.IntMath.biggestBinomials` @AccessFlag STATIC;
global `int`[] `@@com.google.common.math.IntMath.factorials` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.common.math.IntMath.halfPowersOf10` @AccessFlag STATIC_FINAL;
global `byte`[] `@@com.google.common.math.IntMath.maxLog10ForLeadingZeros` @AccessFlag STATIC_FINAL;
global `int`[] `@@com.google.common.math.IntMath.powersOf10` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/IntMath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.IntMath` v0 @kind this) @signature `Lcom/google/common/math/IntMath;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `binomial`(`int` v5 , `int` v6 ) @signature `Lcom/google/common/math/IntMath;.binomial:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `ceilingPowerOfTwo`(`int` v3 ) @signature `Lcom/google/common/math/IntMath;.ceilingPowerOfTwo:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkedAdd`(`int` v6 , `int` v7 ) @signature `Lcom/google/common/math/IntMath;.checkedAdd:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkedMultiply`(`int` v6 , `int` v7 ) @signature `Lcom/google/common/math/IntMath;.checkedMultiply:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkedPow`(`int` v6 , `int` v7 ) @signature `Lcom/google/common/math/IntMath;.checkedPow:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkedSubtract`(`int` v6 , `int` v7 ) @signature `Lcom/google/common/math/IntMath;.checkedSubtract:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `divide`(`int` v5 , `int` v6 , `java.math.RoundingMode` v7 @kind object) @signature `Lcom/google/common/math/IntMath;.divide:(IILjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `factorial`(`int` v2 ) @signature `Lcom/google/common/math/IntMath;.factorial:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `floorPowerOfTwo`(`int` v1 ) @signature `Lcom/google/common/math/IntMath;.floorPowerOfTwo:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `gcd`(`int` v3 , `int` v4 ) @signature `Lcom/google/common/math/IntMath;.gcd:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPowerOfTwo`(`int` v4 ) @signature `Lcom/google/common/math/IntMath;.isPowerOfTwo:(I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPrime`(`int` v2 ) @signature `Lcom/google/common/math/IntMath;.isPrime:(I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lessThanBranchFree`(`int` v0 , `int` v1 ) @signature `Lcom/google/common/math/IntMath;.lessThanBranchFree:(II)I` @AccessFlag STATIC {

  # return;
}
procedure `int` `log10`(`int` v3 , `java.math.RoundingMode` v4 @kind object) @signature `Lcom/google/common/math/IntMath;.log10:(ILjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `log10Floor`(`int` v2 ) @signature `Lcom/google/common/math/IntMath;.log10Floor:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `log2`(`int` v1 , `java.math.RoundingMode` v2 @kind object) @signature `Lcom/google/common/math/IntMath;.log2:(ILjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mean`(`int` v1 , `int` v2 ) @signature `Lcom/google/common/math/IntMath;.mean:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mod`(`int` v2 , `int` v3 ) @signature `Lcom/google/common/math/IntMath;.mod:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `pow`(`int` v4 , `int` v5 ) @signature `Lcom/google/common/math/IntMath;.pow:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `saturatedAdd`(`int` v2 , `int` v3 ) @signature `Lcom/google/common/math/IntMath;.saturatedAdd:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `saturatedMultiply`(`int` v2 , `int` v3 ) @signature `Lcom/google/common/math/IntMath;.saturatedMultiply:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `saturatedPow`(`int` v6 , `int` v7 ) @signature `Lcom/google/common/math/IntMath;.saturatedPow:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `saturatedSubtract`(`int` v2 , `int` v3 ) @signature `Lcom/google/common/math/IntMath;.saturatedSubtract:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sqrt`(`int` v2 , `java.math.RoundingMode` v3 @kind object) @signature `Lcom/google/common/math/IntMath;.sqrt:(ILjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sqrtFloor`(`int` v2 ) @signature `Lcom/google/common/math/IntMath;.sqrtFloor:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
