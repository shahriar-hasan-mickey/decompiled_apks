record `com.google.common.math.MathPreconditions` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`com.google.common.math.MathPreconditions` v0 @kind this) @signature `Lcom/google/common/math/MathPreconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `checkInRangeForRoundingInputs`(`boolean` v2 , `double` v3 , `java.math.RoundingMode` v5 @kind object) @signature `Lcom/google/common/math/MathPreconditions;.checkInRangeForRoundingInputs:(ZDLjava/math/RoundingMode;)V` @AccessFlag STATIC {

  # return;
}
procedure `void` `checkNoOverflow`(`boolean` v2 , `java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/google/common/math/MathPreconditions;.checkNoOverflow:(ZLjava/lang/String;II)V` @AccessFlag STATIC {

  # return;
}
procedure `void` `checkNoOverflow`(`boolean` v2 , `java.lang.String` v3 @kind object, `long` v4 , `long` v6 ) @signature `Lcom/google/common/math/MathPreconditions;.checkNoOverflow:(ZLjava/lang/String;JJ)V` @AccessFlag STATIC {

  # return;
}
procedure `double` `checkNonNegative`(`java.lang.String` v3 @kind object, `double` v4 ) @signature `Lcom/google/common/math/MathPreconditions;.checkNonNegative:(Ljava/lang/String;D)D` @AccessFlag STATIC {

  # return;
}
procedure `int` `checkNonNegative`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/common/math/MathPreconditions;.checkNonNegative:(Ljava/lang/String;I)I` @AccessFlag STATIC {

  # return;
}
procedure `long` `checkNonNegative`(`java.lang.String` v3 @kind object, `long` v4 ) @signature `Lcom/google/common/math/MathPreconditions;.checkNonNegative:(Ljava/lang/String;J)J` @AccessFlag STATIC {

  # return;
}
procedure `java.math.BigInteger` `checkNonNegative`(`java.lang.String` v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lcom/google/common/math/MathPreconditions;.checkNonNegative:(Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag STATIC {

  # return;
}
procedure `int` `checkPositive`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/common/math/MathPreconditions;.checkPositive:(Ljava/lang/String;I)I` @AccessFlag STATIC {

  # return;
}
procedure `long` `checkPositive`(`java.lang.String` v3 @kind object, `long` v4 ) @signature `Lcom/google/common/math/MathPreconditions;.checkPositive:(Ljava/lang/String;J)J` @AccessFlag STATIC {

  # return;
}
procedure `java.math.BigInteger` `checkPositive`(`java.lang.String` v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lcom/google/common/math/MathPreconditions;.checkPositive:(Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag STATIC {

  # return;
}
procedure `void` `checkRoundingUnnecessary`(`boolean` v1 ) @signature `Lcom/google/common/math/MathPreconditions;.checkRoundingUnnecessary:(Z)V` @AccessFlag STATIC {

  # return;
}
