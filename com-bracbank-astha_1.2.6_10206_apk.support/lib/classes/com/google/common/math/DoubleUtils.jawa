record `com.google.common.math.DoubleUtils` @kind class @AccessFlag FINAL {
}
global `int` `@@com.google.common.math.DoubleUtils.EXPONENT_BIAS` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.DoubleUtils.EXPONENT_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.DoubleUtils.IMPLICIT_BIT` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.DoubleUtils.ONE_BITS` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.common.math.DoubleUtils.SIGNIFICAND_BITS` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.DoubleUtils.SIGNIFICAND_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.DoubleUtils.SIGN_MASK` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.math.DoubleUtils` v0 @kind this) @signature `Lcom/google/common/math/DoubleUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `double` `bigToDouble`(`java.math.BigInteger` v14 @kind object) @signature `Lcom/google/common/math/DoubleUtils;.bigToDouble:(Ljava/math/BigInteger;)D` @AccessFlag STATIC {

  # return;
}
procedure `double` `ensureNonNegative`(`double` v2 ) @signature `Lcom/google/common/math/DoubleUtils;.ensureNonNegative:(D)D` @AccessFlag STATIC {

  # return;
}
procedure `long` `getSignificand`(`double` v3 ) @signature `Lcom/google/common/math/DoubleUtils;.getSignificand:(D)J` @AccessFlag STATIC {

  # return;
}
procedure `boolean` `isFinite`(`double` v0 ) @signature `Lcom/google/common/math/DoubleUtils;.isFinite:(D)Z` @AccessFlag STATIC {

  # return;
}
procedure `boolean` `isNormal`(`double` v0 ) @signature `Lcom/google/common/math/DoubleUtils;.isNormal:(D)Z` @AccessFlag STATIC {

  # return;
}
procedure `double` `nextDown`(`double` v0 ) @signature `Lcom/google/common/math/DoubleUtils;.nextDown:(D)D` @AccessFlag STATIC {

  # return;
}
procedure `double` `scaleNormalize`(`double` v2 ) @signature `Lcom/google/common/math/DoubleUtils;.scaleNormalize:(D)D` @AccessFlag STATIC {

  # return;
}
