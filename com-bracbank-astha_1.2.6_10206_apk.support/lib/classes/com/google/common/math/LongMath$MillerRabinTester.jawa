record `com.google.common.math.LongMath$MillerRabinTester` @kind class @AccessFlag ABSTRACT_ENUM extends `java.lang.Enum` @kind class {
}
global `com.google.common.math.LongMath$MillerRabinTester`[] `@@com.google.common.math.LongMath$MillerRabinTester.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `com.google.common.math.LongMath$MillerRabinTester` `@@com.google.common.math.LongMath$MillerRabinTester.LARGE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.google.common.math.LongMath$MillerRabinTester` `@@com.google.common.math.LongMath$MillerRabinTester.SMALL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `com.google.common.math.LongMath$MillerRabinTester`[] `$values`() @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.$values:()[Lcom/google/common/math/LongMath$MillerRabinTester;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.LongMath$MillerRabinTester` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.LongMath$MillerRabinTester` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `com.google.common.math.LongMath$1` v3 @kind object) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.<init>:(Ljava/lang/String;ILcom/google/common/math/LongMath$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `long` `powMod`(`com.google.common.math.LongMath$MillerRabinTester` v9 @kind this, `long` v10 , `long` v12 , `long` v14 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.powMod:(JJJ)J` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `test`(`long` v3 , `long` v5 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.test:(JJ)Z` @AccessFlag STATIC {

  # return;
}
procedure `boolean` `testWitness`(`com.google.common.math.LongMath$MillerRabinTester` v15 @kind this, `long` v16 , `long` v18 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.testWitness:(JJ)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.math.LongMath$MillerRabinTester` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.valueOf:(Ljava/lang/String;)Lcom/google/common/math/LongMath$MillerRabinTester;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.math.LongMath$MillerRabinTester`[] `values`() @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.values:()[Lcom/google/common/math/LongMath$MillerRabinTester;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `mulMod`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.mulMod:(JJJ)J` @AccessFlag ABSTRACT {

  # return;
}
procedure `long` `squareMod`(`long` v0 , `long` v2 ) @signature `Lcom/google/common/math/LongMath$MillerRabinTester;.squareMod:(JJ)J` @AccessFlag ABSTRACT {

  # return;
}
