record `com.google.common.math.LinearTransformation$NaNLinearTransformation` @kind class @AccessFlag FINAL extends `com.google.common.math.LinearTransformation` @kind class {
}
global `com.google.common.math.LinearTransformation$NaNLinearTransformation` `@@com.google.common.math.LinearTransformation$NaNLinearTransformation.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v0 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.math.LinearTransformation` `inverse`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v0 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.inverse:()Lcom/google/common/math/LinearTransformation;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isHorizontal`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v1 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.isHorizontal:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isVertical`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v1 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.isVertical:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `slope`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v2 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.slope:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v1 @kind this) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `transform`(`com.google.common.math.LinearTransformation$NaNLinearTransformation` v0 @kind this, `double` v1 ) @signature `Lcom/google/common/math/LinearTransformation$NaNLinearTransformation;.transform:(D)D` @AccessFlag PUBLIC {

  # return;
}
