record `com.google.common.math.LongMath` @kind class @AccessFlag PUBLIC_FINAL {
}
global `long` `@@com.google.common.math.LongMath.FLOOR_SQRT_MAX_LONG` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.LongMath.MAX_POWER_OF_SQRT2_UNSIGNED` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.math.LongMath.MAX_SIGNED_POWER_OF_TWO` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.common.math.LongMath.SIEVE_30` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.common.math.LongMath.biggestBinomials` @AccessFlag STATIC_FINAL;
global `int`[] `@@com.google.common.math.LongMath.biggestSimpleBinomials` @AccessFlag STATIC_FINAL;
global `long`[] `@@com.google.common.math.LongMath.factorials` @AccessFlag STATIC_FINAL;
global `long`[] `@@com.google.common.math.LongMath.halfPowersOf10` @AccessFlag STATIC_FINAL;
global `byte`[] `@@com.google.common.math.LongMath.maxLog10ForLeadingZeros` @AccessFlag STATIC_FINAL;
global `long`[][] `@@com.google.common.math.LongMath.millerRabinBaseSets` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@com.google.common.math.LongMath.powersOf10` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/math/LongMath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.math.LongMath` v0 @kind this) @signature `Lcom/google/common/math/LongMath;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `long` `binomial`(`int` v11 , `int` v12 ) @signature `Lcom/google/common/math/LongMath;.binomial:(II)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `ceilingPowerOfTwo`(`long` v3 ) @signature `Lcom/google/common/math/LongMath;.ceilingPowerOfTwo:(J)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `checkedAdd`(`long` v11 , `long` v13 ) @signature `Lcom/google/common/math/LongMath;.checkedAdd:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `checkedMultiply`(`long` v15 , `long` v17 ) @signature `Lcom/google/common/math/LongMath;.checkedMultiply:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `checkedPow`(`long` v15 , `int` v17 ) @signature `Lcom/google/common/math/LongMath;.checkedPow:(JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `checkedSubtract`(`long` v11 , `long` v13 ) @signature `Lcom/google/common/math/LongMath;.checkedSubtract:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `divide`(`long` v9 , `long` v11 , `java.math.RoundingMode` v13 @kind object) @signature `Lcom/google/common/math/LongMath;.divide:(JJLjava/math/RoundingMode;)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `factorial`(`int` v3 ) @signature `Lcom/google/common/math/LongMath;.factorial:(I)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `fitsInInt`(`long` v3 ) @signature `Lcom/google/common/math/LongMath;.fitsInInt:(J)Z` @AccessFlag STATIC {

  # return;
}
procedure `long` `floorPowerOfTwo`(`long` v2 ) @signature `Lcom/google/common/math/LongMath;.floorPowerOfTwo:(J)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `gcd`(`long` v4 , `long` v6 ) @signature `Lcom/google/common/math/LongMath;.gcd:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPowerOfTwo`(`long` v7 ) @signature `Lcom/google/common/math/LongMath;.isPowerOfTwo:(J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPrime`(`long` v9 ) @signature `Lcom/google/common/math/LongMath;.isPrime:(J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lessThanBranchFree`(`long` v0 , `long` v2 ) @signature `Lcom/google/common/math/LongMath;.lessThanBranchFree:(JJ)I` @AccessFlag STATIC {

  # return;
}
procedure `int` `log10`(`long` v4 , `java.math.RoundingMode` v6 @kind object) @signature `Lcom/google/common/math/LongMath;.log10:(JLjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `log10Floor`(`long` v4 ) @signature `Lcom/google/common/math/LongMath;.log10Floor:(J)I` @AccessFlag STATIC {

  # return;
}
procedure `int` `log2`(`long` v2 , `java.math.RoundingMode` v4 @kind object) @signature `Lcom/google/common/math/LongMath;.log2:(JLjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `mean`(`long` v2 , `long` v4 ) @signature `Lcom/google/common/math/LongMath;.mean:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mod`(`long` v2 , `int` v4 ) @signature `Lcom/google/common/math/LongMath;.mod:(JI)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `mod`(`long` v3 , `long` v5 ) @signature `Lcom/google/common/math/LongMath;.mod:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `multiplyFraction`(`long` v3 , `long` v5 , `long` v7 ) @signature `Lcom/google/common/math/LongMath;.multiplyFraction:(JJJ)J` @AccessFlag STATIC {

  # return;
}
procedure `long` `pow`(`long` v7 , `int` v9 ) @signature `Lcom/google/common/math/LongMath;.pow:(JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `roundToDouble`(`long` v22 , `java.math.RoundingMode` v24 @kind object) @signature `Lcom/google/common/math/LongMath;.roundToDouble:(JLjava/math/RoundingMode;)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `saturatedAdd`(`long` v7 , `long` v9 ) @signature `Lcom/google/common/math/LongMath;.saturatedAdd:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `saturatedMultiply`(`long` v10 , `long` v12 ) @signature `Lcom/google/common/math/LongMath;.saturatedMultiply:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `saturatedPow`(`long` v10 , `int` v12 ) @signature `Lcom/google/common/math/LongMath;.saturatedPow:(JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `saturatedSubtract`(`long` v7 , `long` v9 ) @signature `Lcom/google/common/math/LongMath;.saturatedSubtract:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `sqrt`(`long` v8 , `java.math.RoundingMode` v10 @kind object) @signature `Lcom/google/common/math/LongMath;.sqrt:(JLjava/math/RoundingMode;)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
