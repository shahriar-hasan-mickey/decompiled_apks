record `com.google.common.base.CharMatcher$IsEither` @kind class @AccessFlag FINAL extends `com.google.common.base.CharMatcher$FastMatcher` @kind class {
  `char` `com.google.common.base.CharMatcher$IsEither.match1` @AccessFlag PRIVATE_FINAL;
  `char` `com.google.common.base.CharMatcher$IsEither.match2` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.base.CharMatcher$IsEither` v0 @kind this, `char` v1 , `char` v2 ) @signature `Lcom/google/common/base/CharMatcher$IsEither;.<init>:(CC)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `matches`(`com.google.common.base.CharMatcher$IsEither` v1 @kind this, `char` v2 ) @signature `Lcom/google/common/base/CharMatcher$IsEither;.matches:(C)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setBits`(`com.google.common.base.CharMatcher$IsEither` v1 @kind this, `java.util.BitSet` v2 @kind object) @signature `Lcom/google/common/base/CharMatcher$IsEither;.setBits:(Ljava/util/BitSet;)V` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.CharMatcher$IsEither` v4 @kind this) @signature `Lcom/google/common/base/CharMatcher$IsEither;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
