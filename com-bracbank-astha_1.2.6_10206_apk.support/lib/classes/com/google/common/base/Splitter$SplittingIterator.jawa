record `com.google.common.base.Splitter$SplittingIterator` @kind class @AccessFlag ABSTRACT extends `com.google.common.base.AbstractIterator` @kind class {
  `int` `com.google.common.base.Splitter$SplittingIterator.limit` @AccessFlag ;
  `int` `com.google.common.base.Splitter$SplittingIterator.offset` @AccessFlag ;
  `boolean` `com.google.common.base.Splitter$SplittingIterator.omitEmptyStrings` @AccessFlag FINAL;
  `java.lang.CharSequence` `com.google.common.base.Splitter$SplittingIterator.toSplit` @AccessFlag FINAL;
  `com.google.common.base.CharMatcher` `com.google.common.base.Splitter$SplittingIterator.trimmer` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.base.Splitter$SplittingIterator` v1 @kind this, `com.google.common.base.Splitter` v2 @kind object, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/google/common/base/Splitter$SplittingIterator;.<init>:(Lcom/google/common/base/Splitter;Ljava/lang/CharSequence;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `computeNext`(`com.google.common.base.Splitter$SplittingIterator` v1 @kind this) @signature `Lcom/google/common/base/Splitter$SplittingIterator;.computeNext:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.lang.String` `computeNext`(`com.google.common.base.Splitter$SplittingIterator` v6 @kind this) @signature `Lcom/google/common/base/Splitter$SplittingIterator;.computeNext:()Ljava/lang/String;` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `separatorEnd`(`int` v0 ) @signature `Lcom/google/common/base/Splitter$SplittingIterator;.separatorEnd:(I)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `separatorStart`(`int` v0 ) @signature `Lcom/google/common/base/Splitter$SplittingIterator;.separatorStart:(I)I` @AccessFlag ABSTRACT {

  # return;
}
