record `com.google.common.base.CharMatcher$And` @kind class @AccessFlag FINAL extends `com.google.common.base.CharMatcher` @kind class {
  `com.google.common.base.CharMatcher` `com.google.common.base.CharMatcher$And.first` @AccessFlag FINAL;
  `com.google.common.base.CharMatcher` `com.google.common.base.CharMatcher$And.second` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.base.CharMatcher$And` v0 @kind this, `com.google.common.base.CharMatcher` v1 @kind object, `com.google.common.base.CharMatcher` v2 @kind object) @signature `Lcom/google/common/base/CharMatcher$And;.<init>:(Lcom/google/common/base/CharMatcher;Lcom/google/common/base/CharMatcher;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `apply`(`com.google.common.base.CharMatcher$And` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/CharMatcher$And;.apply:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `matches`(`com.google.common.base.CharMatcher$And` v1 @kind this, `char` v2 ) @signature `Lcom/google/common/base/CharMatcher$And;.matches:(C)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setBits`(`com.google.common.base.CharMatcher$And` v3 @kind this, `java.util.BitSet` v4 @kind object) @signature `Lcom/google/common/base/CharMatcher$And;.setBits:(Ljava/util/BitSet;)V` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.CharMatcher$And` v4 @kind this) @signature `Lcom/google/common/base/CharMatcher$And;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
