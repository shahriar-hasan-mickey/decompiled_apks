record `com.google.common.base.Predicates` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.common.base.Predicates` v0 @kind this) @signature `Lcom/google/common/base/Predicates;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `access$800`(`java.lang.String` v0 @kind object, `java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/base/Predicates;.access$800:(Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.base.Predicate` `alwaysFalse`() @signature `Lcom/google/common/base/Predicates;.alwaysFalse:()Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `alwaysTrue`() @signature `Lcom/google/common/base/Predicates;.alwaysTrue:()Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `and`(`com.google.common.base.Predicate` v1 @kind object, `com.google.common.base.Predicate` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.and:(Lcom/google/common/base/Predicate;Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `and`(`java.lang.Iterable` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.and:(Ljava/lang/Iterable;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `and`(`com.google.common.base.Predicate`[] v2 @kind object) @signature `Lcom/google/common/base/Predicates;.and:([Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.List` `asList`(`com.google.common.base.Predicate` v2 @kind object, `com.google.common.base.Predicate` v3 @kind object) @signature `Lcom/google/common/base/Predicates;.asList:(Lcom/google/common/base/Predicate;Lcom/google/common/base/Predicate;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `compose`(`com.google.common.base.Predicate` v2 @kind object, `com.google.common.base.Function` v3 @kind object) @signature `Lcom/google/common/base/Predicates;.compose:(Lcom/google/common/base/Predicate;Lcom/google/common/base/Function;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `contains`(`java.util.regex.Pattern` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.contains:(Ljava/util/regex/Pattern;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `containsPattern`(`java.lang.String` v1 @kind object) @signature `Lcom/google/common/base/Predicates;.containsPattern:(Ljava/lang/String;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.List` `defensiveCopy`(`java.lang.Iterable` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.defensiveCopy:(Ljava/lang/Iterable;)Ljava/util/List;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.List` `defensiveCopy`(`java.lang.Object`[] v0 @kind object) @signature `Lcom/google/common/base/Predicates;.defensiveCopy:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `equalTo`(`java.lang.Object` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.equalTo:(Ljava/lang/Object;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `in`(`java.util.Collection` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.in:(Ljava/util/Collection;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `instanceOf`(`java.lang.Class` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.instanceOf:(Ljava/lang/Class;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `isNull`() @signature `Lcom/google/common/base/Predicates;.isNull:()Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `not`(`com.google.common.base.Predicate` v1 @kind object) @signature `Lcom/google/common/base/Predicates;.not:(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `notNull`() @signature `Lcom/google/common/base/Predicates;.notNull:()Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `or`(`com.google.common.base.Predicate` v1 @kind object, `com.google.common.base.Predicate` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.or:(Lcom/google/common/base/Predicate;Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `or`(`java.lang.Iterable` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.or:(Ljava/lang/Iterable;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `or`(`com.google.common.base.Predicate`[] v2 @kind object) @signature `Lcom/google/common/base/Predicates;.or:([Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Predicate` `subtypeOf`(`java.lang.Class` v2 @kind object) @signature `Lcom/google/common/base/Predicates;.subtypeOf:(Ljava/lang/Class;)Lcom/google/common/base/Predicate;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toStringHelper`(`java.lang.String` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lcom/google/common/base/Predicates;.toStringHelper:(Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
