record `com.google.common.base.Throwables` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@com.google.common.base.Throwables.JAVA_LANG_ACCESS_CLASSNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.common.base.Throwables.SHARED_SECRETS_CLASSNAME` @AccessFlag STATIC_FINAL;
global `java.lang.reflect.Method` `@@com.google.common.base.Throwables.getStackTraceDepthMethod` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Method` `@@com.google.common.base.Throwables.getStackTraceElementMethod` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.google.common.base.Throwables.jla` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/base/Throwables;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.base.Throwables` v0 @kind this) @signature `Lcom/google/common/base/Throwables;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.reflect.Method` `access$000`() @signature `Lcom/google/common/base/Throwables;.access$000:()Ljava/lang/reflect/Method;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `access$100`() @signature `Lcom/google/common/base/Throwables;.access$100:()Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `access$200`(`java.lang.reflect.Method` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/base/Throwables;.access$200:(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.reflect.Method` `access$300`() @signature `Lcom/google/common/base/Throwables;.access$300:()Ljava/lang/reflect/Method;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `getCausalChain`(`java.lang.Throwable` v3 @kind object) @signature `Lcom/google/common/base/Throwables;.getCausalChain:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Throwable` `getCauseAs`(`java.lang.Throwable` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/base/Throwables;.getCauseAs:(Ljava/lang/Throwable;Ljava/lang/Class;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Method` `getGetMethod`() @signature `Lcom/google/common/base/Throwables;.getGetMethod:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Object` `getJLA`() @signature `Lcom/google/common/base/Throwables;.getJLA:()Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Method` `getJlaMethod`(`java.lang.String` v3 @kind object, `java.lang.Class`[] v4 @kind object) @signature `Lcom/google/common/base/Throwables;.getJlaMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Throwable` `getRootCause`(`java.lang.Throwable` v3 @kind object) @signature `Lcom/google/common/base/Throwables;.getRootCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Method` `getSizeMethod`(`java.lang.Object` v6 @kind object) @signature `Lcom/google/common/base/Throwables;.getSizeMethod:(Ljava/lang/Object;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `getStackTraceAsString`(`java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/base/Throwables;.getStackTraceAsString:(Ljava/lang/Throwable;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `invokeAccessibleNonThrowingMethod`(`java.lang.reflect.Method` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/base/Throwables;.invokeAccessibleNonThrowingMethod:(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.List` `jlaStackTrace`(`java.lang.Throwable` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.jlaStackTrace:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.List` `lazyStackTrace`(`java.lang.Throwable` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.lazyStackTrace:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `lazyStackTraceIsLazy`() @signature `Lcom/google/common/base/Throwables;.lazyStackTraceIsLazy:()Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.RuntimeException` `propagate`(`java.lang.Throwable` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `propagateIfInstanceOf`(`java.lang.Throwable` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.propagateIfInstanceOf:(Ljava/lang/Throwable;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `propagateIfPossible`(`java.lang.Throwable` v0 @kind object) @signature `Lcom/google/common/base/Throwables;.propagateIfPossible:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `propagateIfPossible`(`java.lang.Throwable` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.propagateIfPossible:(Ljava/lang/Throwable;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `propagateIfPossible`(`java.lang.Throwable` v0 @kind object, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/base/Throwables;.propagateIfPossible:(Ljava/lang/Throwable;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `throwIfInstanceOf`(`java.lang.Throwable` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/base/Throwables;.throwIfInstanceOf:(Ljava/lang/Throwable;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `throwIfUnchecked`(`java.lang.Throwable` v1 @kind object) @signature `Lcom/google/common/base/Throwables;.throwIfUnchecked:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
