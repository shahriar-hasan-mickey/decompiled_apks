record `com.google.common.base.Joiner$2` @kind class @AccessFlag  extends `com.google.common.base.Joiner` @kind class {
  `com.google.common.base.Joiner` `com.google.common.base.Joiner$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.base.Joiner$2` v0 @kind this, `com.google.common.base.Joiner` v1 @kind object, `com.google.common.base.Joiner` v2 @kind object) @signature `Lcom/google/common/base/Joiner$2;.<init>:(Lcom/google/common/base/Joiner;Lcom/google/common/base/Joiner;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Appendable` `appendTo`(`com.google.common.base.Joiner$2` v2 @kind this, `java.lang.Appendable` v3 @kind object, `java.util.Iterator` v4 @kind object) @signature `Lcom/google/common/base/Joiner$2;.appendTo:(Ljava/lang/Appendable;Ljava/util/Iterator;)Ljava/lang/Appendable;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Joiner` `useForNull`(`com.google.common.base.Joiner$2` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/base/Joiner$2;.useForNull:(Ljava/lang/String;)Lcom/google/common/base/Joiner;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Joiner$MapJoiner` `withKeyValueSeparator`(`com.google.common.base.Joiner$2` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/base/Joiner$2;.withKeyValueSeparator:(Ljava/lang/String;)Lcom/google/common/base/Joiner$MapJoiner;` @AccessFlag PUBLIC {

  # return;
}
