record `com.google.common.base.CharMatcher$Negated` @kind class @AccessFlag  extends `com.google.common.base.CharMatcher` @kind class {
  `com.google.common.base.CharMatcher` `com.google.common.base.CharMatcher$Negated.original` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.base.CharMatcher$Negated` v0 @kind this, `com.google.common.base.CharMatcher` v1 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.<init>:(Lcom/google/common/base/CharMatcher;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `apply`(`com.google.common.base.CharMatcher$Negated` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.apply:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `countIn`(`com.google.common.base.CharMatcher$Negated` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.countIn:(Ljava/lang/CharSequence;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `matches`(`com.google.common.base.CharMatcher$Negated` v1 @kind this, `char` v2 ) @signature `Lcom/google/common/base/CharMatcher$Negated;.matches:(C)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `matchesAllOf`(`com.google.common.base.CharMatcher$Negated` v1 @kind this, `java.lang.CharSequence` v2 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.matchesAllOf:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `matchesNoneOf`(`com.google.common.base.CharMatcher$Negated` v1 @kind this, `java.lang.CharSequence` v2 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.matchesNoneOf:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.CharMatcher` `negate`(`com.google.common.base.CharMatcher$Negated` v1 @kind this) @signature `Lcom/google/common/base/CharMatcher$Negated;.negate:()Lcom/google/common/base/CharMatcher;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setBits`(`com.google.common.base.CharMatcher$Negated` v3 @kind this, `java.util.BitSet` v4 @kind object) @signature `Lcom/google/common/base/CharMatcher$Negated;.setBits:(Ljava/util/BitSet;)V` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.CharMatcher$Negated` v3 @kind this) @signature `Lcom/google/common/base/CharMatcher$Negated;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
