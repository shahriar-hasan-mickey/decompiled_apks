record `com.google.common.base.Splitter` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `com.google.common.base.Splitter.limit` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.common.base.Splitter.omitEmptyStrings` @AccessFlag PRIVATE_FINAL;
  `com.google.common.base.Splitter$Strategy` `com.google.common.base.Splitter.strategy` @AccessFlag PRIVATE_FINAL;
  `com.google.common.base.CharMatcher` `com.google.common.base.Splitter.trimmer` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.base.Splitter` v3 @kind this, `com.google.common.base.Splitter$Strategy` v4 @kind object) @signature `Lcom/google/common/base/Splitter;.<init>:(Lcom/google/common/base/Splitter$Strategy;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.base.Splitter` v0 @kind this, `com.google.common.base.Splitter$Strategy` v1 @kind object, `boolean` v2 , `com.google.common.base.CharMatcher` v3 @kind object, `int` v4 ) @signature `Lcom/google/common/base/Splitter;.<init>:(Lcom/google/common/base/Splitter$Strategy;ZLcom/google/common/base/CharMatcher;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.util.Iterator` `access$000`(`com.google.common.base.Splitter` v0 @kind object, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/google/common/base/Splitter;.access$000:(Lcom/google/common/base/Splitter;Ljava/lang/CharSequence;)Ljava/util/Iterator;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.base.CharMatcher` `access$200`(`com.google.common.base.Splitter` v0 @kind object) @signature `Lcom/google/common/base/Splitter;.access$200:(Lcom/google/common/base/Splitter;)Lcom/google/common/base/CharMatcher;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$300`(`com.google.common.base.Splitter` v0 @kind object) @signature `Lcom/google/common/base/Splitter;.access$300:(Lcom/google/common/base/Splitter;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$400`(`com.google.common.base.Splitter` v0 @kind object) @signature `Lcom/google/common/base/Splitter;.access$400:(Lcom/google/common/base/Splitter;)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.base.Splitter` `fixedLength`(`int` v2 ) @signature `Lcom/google/common/base/Splitter;.fixedLength:(I)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `on`(`char` v0 ) @signature `Lcom/google/common/base/Splitter;.on:(C)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `on`(`com.google.common.base.CharMatcher` v2 @kind object) @signature `Lcom/google/common/base/Splitter;.on:(Lcom/google/common/base/CharMatcher;)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `on`(`com.google.common.base.CommonPattern` v2 @kind object) @signature `Lcom/google/common/base/Splitter;.on:(Lcom/google/common/base/CommonPattern;)Lcom/google/common/base/Splitter;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `on`(`java.lang.String` v4 @kind object) @signature `Lcom/google/common/base/Splitter;.on:(Ljava/lang/String;)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `on`(`java.util.regex.Pattern` v1 @kind object) @signature `Lcom/google/common/base/Splitter;.on:(Ljava/util/regex/Pattern;)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Splitter` `onPattern`(`java.lang.String` v0 @kind object) @signature `Lcom/google/common/base/Splitter;.onPattern:(Ljava/lang/String;)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Iterator` `splittingIterator`(`com.google.common.base.Splitter` v1 @kind this, `java.lang.CharSequence` v2 @kind object) @signature `Lcom/google/common/base/Splitter;.splittingIterator:(Ljava/lang/CharSequence;)Ljava/util/Iterator;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.base.Splitter` `limit`(`com.google.common.base.Splitter` v4 @kind this, `int` v5 ) @signature `Lcom/google/common/base/Splitter;.limit:(I)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter` `omitEmptyStrings`(`com.google.common.base.Splitter` v5 @kind this) @signature `Lcom/google/common/base/Splitter;.omitEmptyStrings:()Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Iterable` `split`(`com.google.common.base.Splitter` v1 @kind this, `java.lang.CharSequence` v2 @kind object) @signature `Lcom/google/common/base/Splitter;.split:(Ljava/lang/CharSequence;)Ljava/lang/Iterable;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `splitToList`(`com.google.common.base.Splitter` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/google/common/base/Splitter;.splitToList:(Ljava/lang/CharSequence;)Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter` `trimResults`(`com.google.common.base.Splitter` v1 @kind this) @signature `Lcom/google/common/base/Splitter;.trimResults:()Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter` `trimResults`(`com.google.common.base.Splitter` v4 @kind this, `com.google.common.base.CharMatcher` v5 @kind object) @signature `Lcom/google/common/base/Splitter;.trimResults:(Lcom/google/common/base/CharMatcher;)Lcom/google/common/base/Splitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter$MapSplitter` `withKeyValueSeparator`(`com.google.common.base.Splitter` v0 @kind this, `char` v1 ) @signature `Lcom/google/common/base/Splitter;.withKeyValueSeparator:(C)Lcom/google/common/base/Splitter$MapSplitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter$MapSplitter` `withKeyValueSeparator`(`com.google.common.base.Splitter` v2 @kind this, `com.google.common.base.Splitter` v3 @kind object) @signature `Lcom/google/common/base/Splitter;.withKeyValueSeparator:(Lcom/google/common/base/Splitter;)Lcom/google/common/base/Splitter$MapSplitter;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Splitter$MapSplitter` `withKeyValueSeparator`(`com.google.common.base.Splitter` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/google/common/base/Splitter;.withKeyValueSeparator:(Ljava/lang/String;)Lcom/google/common/base/Splitter$MapSplitter;` @AccessFlag PUBLIC {

  # return;
}
