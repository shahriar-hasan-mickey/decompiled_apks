record `com.google.common.base.CharMatcher$JavaLetterOrDigit` @kind class @AccessFlag FINAL extends `com.google.common.base.CharMatcher` @kind class {
}
global `com.google.common.base.CharMatcher$JavaLetterOrDigit` `@@com.google.common.base.CharMatcher$JavaLetterOrDigit.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/base/CharMatcher$JavaLetterOrDigit;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.base.CharMatcher$JavaLetterOrDigit` v0 @kind this) @signature `Lcom/google/common/base/CharMatcher$JavaLetterOrDigit;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `boolean` `apply`(`com.google.common.base.CharMatcher$JavaLetterOrDigit` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/CharMatcher$JavaLetterOrDigit;.apply:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `matches`(`com.google.common.base.CharMatcher$JavaLetterOrDigit` v0 @kind this, `char` v1 ) @signature `Lcom/google/common/base/CharMatcher$JavaLetterOrDigit;.matches:(C)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.CharMatcher$JavaLetterOrDigit` v1 @kind this) @signature `Lcom/google/common/base/CharMatcher$JavaLetterOrDigit;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
