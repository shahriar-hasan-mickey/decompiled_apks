record `com.google.common.base.JdkPattern$JdkMatcher` @kind class @AccessFlag FINAL extends `com.google.common.base.CommonMatcher` @kind class {
  `java.util.regex.Matcher` `com.google.common.base.JdkPattern$JdkMatcher.matcher` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.base.JdkPattern$JdkMatcher` v0 @kind this, `java.util.regex.Matcher` v1 @kind object) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.<init>:(Ljava/util/regex/Matcher;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `end`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.end:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `find`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.find:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `find`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.find:(I)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `matches`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.matches:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `replaceAll`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.replaceAll:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `start`(`com.google.common.base.JdkPattern$JdkMatcher` v1 @kind this) @signature `Lcom/google/common/base/JdkPattern$JdkMatcher;.start:()I` @AccessFlag PUBLIC {

  # return;
}
