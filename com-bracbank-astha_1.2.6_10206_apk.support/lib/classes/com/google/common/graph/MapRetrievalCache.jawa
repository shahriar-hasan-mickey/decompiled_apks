record `com.google.common.graph.MapRetrievalCache` @kind class @AccessFlag FINAL extends `com.google.common.graph.MapIteratorCache` @kind class {
  `com.google.common.graph.MapRetrievalCache$CacheEntry` `com.google.common.graph.MapRetrievalCache.cacheEntry1` @AccessFlag PRIVATE_TRANSIENT_VOLATILE;
  `com.google.common.graph.MapRetrievalCache$CacheEntry` `com.google.common.graph.MapRetrievalCache.cacheEntry2` @AccessFlag PRIVATE_TRANSIENT_VOLATILE;
}
procedure `void` `<init>`(`com.google.common.graph.MapRetrievalCache` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcom/google/common/graph/MapRetrievalCache;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `addToCache`(`com.google.common.graph.MapRetrievalCache` v1 @kind this, `com.google.common.graph.MapRetrievalCache$CacheEntry` v2 @kind object) @signature `Lcom/google/common/graph/MapRetrievalCache;.addToCache:(Lcom/google/common/graph/MapRetrievalCache$CacheEntry;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addToCache`(`com.google.common.graph.MapRetrievalCache` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/graph/MapRetrievalCache;.addToCache:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `clearCache`(`com.google.common.graph.MapRetrievalCache` v1 @kind this) @signature `Lcom/google/common/graph/MapRetrievalCache;.clearCache:()V` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.graph.MapRetrievalCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/graph/MapRetrievalCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `getIfCached`(`com.google.common.graph.MapRetrievalCache` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/graph/MapRetrievalCache;.getIfCached:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {

  # return;
}
