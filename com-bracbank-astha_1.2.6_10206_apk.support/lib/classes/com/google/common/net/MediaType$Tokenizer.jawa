record `com.google.common.net.MediaType$Tokenizer` @kind class @AccessFlag FINAL {
  `java.lang.String` `com.google.common.net.MediaType$Tokenizer.input` @AccessFlag FINAL;
  `int` `com.google.common.net.MediaType$Tokenizer.position` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.net.MediaType$Tokenizer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/net/MediaType$Tokenizer;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `char` `consumeCharacter`(`com.google.common.net.MediaType$Tokenizer` v2 @kind this, `char` v3 ) @signature `Lcom/google/common/net/MediaType$Tokenizer;.consumeCharacter:(C)C` @AccessFlag  {

  # return;
}
procedure `char` `consumeCharacter`(`com.google.common.net.MediaType$Tokenizer` v1 @kind this, `com.google.common.base.CharMatcher` v2 @kind object) @signature `Lcom/google/common/net/MediaType$Tokenizer;.consumeCharacter:(Lcom/google/common/base/CharMatcher;)C` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `consumeToken`(`com.google.common.net.MediaType$Tokenizer` v2 @kind this, `com.google.common.base.CharMatcher` v3 @kind object) @signature `Lcom/google/common/net/MediaType$Tokenizer;.consumeToken:(Lcom/google/common/base/CharMatcher;)Ljava/lang/String;` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `consumeTokenIfPresent`(`com.google.common.net.MediaType$Tokenizer` v2 @kind this, `com.google.common.base.CharMatcher` v3 @kind object) @signature `Lcom/google/common/net/MediaType$Tokenizer;.consumeTokenIfPresent:(Lcom/google/common/base/CharMatcher;)Ljava/lang/String;` @AccessFlag  {

  # return;
}
procedure `boolean` `hasMore`(`com.google.common.net.MediaType$Tokenizer` v2 @kind this) @signature `Lcom/google/common/net/MediaType$Tokenizer;.hasMore:()Z` @AccessFlag  {

  # return;
}
procedure `char` `previewChar`(`com.google.common.net.MediaType$Tokenizer` v2 @kind this) @signature `Lcom/google/common/net/MediaType$Tokenizer;.previewChar:()C` @AccessFlag  {

  # return;
}
