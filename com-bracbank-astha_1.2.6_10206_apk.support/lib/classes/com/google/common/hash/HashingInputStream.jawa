record `com.google.common.hash.HashingInputStream` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `com.google.common.hash.Hasher` `com.google.common.hash.HashingInputStream.hasher` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.hash.HashingInputStream` v0 @kind this, `com.google.common.hash.HashFunction` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/common/hash/HashingInputStream;.<init>:(Lcom/google/common/hash/HashFunction;Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.hash.HashCode` `hash`(`com.google.common.hash.HashingInputStream` v1 @kind this) @signature `Lcom/google/common/hash/HashingInputStream;.hash:()Lcom/google/common/hash/HashCode;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mark`(`com.google.common.hash.HashingInputStream` v0 @kind this, `int` v1 ) @signature `Lcom/google/common/hash/HashingInputStream;.mark:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `markSupported`(`com.google.common.hash.HashingInputStream` v1 @kind this) @signature `Lcom/google/common/hash/HashingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`com.google.common.hash.HashingInputStream` v3 @kind this) @signature `Lcom/google/common/hash/HashingInputStream;.read:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`com.google.common.hash.HashingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/common/hash/HashingInputStream;.read:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`com.google.common.hash.HashingInputStream` v2 @kind this) @signature `Lcom/google/common/hash/HashingInputStream;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
