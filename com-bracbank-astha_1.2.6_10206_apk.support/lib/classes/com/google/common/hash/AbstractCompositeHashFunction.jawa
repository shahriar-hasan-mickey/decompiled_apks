record `com.google.common.hash.AbstractCompositeHashFunction` @kind class @AccessFlag ABSTRACT extends `com.google.common.hash.AbstractHashFunction` @kind class {
  `com.google.common.hash.HashFunction`[] `com.google.common.hash.AbstractCompositeHashFunction.functions` @AccessFlag FINAL;
}
global `long` `@@com.google.common.hash.AbstractCompositeHashFunction.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.hash.AbstractCompositeHashFunction` v3 @kind this, `com.google.common.hash.HashFunction`[] v4 @kind object) @signature `Lcom/google/common/hash/AbstractCompositeHashFunction;.<init>:([Lcom/google/common/hash/HashFunction;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.hash.Hasher` `fromHashers`(`com.google.common.hash.AbstractCompositeHashFunction` v1 @kind this, `com.google.common.hash.Hasher`[] v2 @kind object) @signature `Lcom/google/common/hash/AbstractCompositeHashFunction;.fromHashers:([Lcom/google/common/hash/Hasher;)Lcom/google/common/hash/Hasher;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.hash.HashCode` `makeHash`(`com.google.common.hash.Hasher`[] v0 @kind object) @signature `Lcom/google/common/hash/AbstractCompositeHashFunction;.makeHash:([Lcom/google/common/hash/Hasher;)Lcom/google/common/hash/HashCode;` @AccessFlag ABSTRACT {

  # return;
}
procedure `com.google.common.hash.Hasher` `newHasher`(`com.google.common.hash.AbstractCompositeHashFunction` v4 @kind this) @signature `Lcom/google/common/hash/AbstractCompositeHashFunction;.newHasher:()Lcom/google/common/hash/Hasher;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.hash.Hasher` `newHasher`(`com.google.common.hash.AbstractCompositeHashFunction` v4 @kind this, `int` v5 ) @signature `Lcom/google/common/hash/AbstractCompositeHashFunction;.newHasher:(I)Lcom/google/common/hash/Hasher;` @AccessFlag PUBLIC {

  # return;
}
