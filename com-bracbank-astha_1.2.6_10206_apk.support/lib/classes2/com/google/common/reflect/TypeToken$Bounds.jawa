record `com.google.common.reflect.TypeToken$Bounds` @kind class @AccessFlag  {
  `java.lang.reflect.Type`[] `com.google.common.reflect.TypeToken$Bounds.bounds` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.common.reflect.TypeToken$Bounds.target` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeToken$Bounds` v0 @kind this, `java.lang.reflect.Type`[] v1 @kind object, `boolean` v2 ) @signature `Lcom/google/common/reflect/TypeToken$Bounds;.<init>:([Ljava/lang/reflect/Type;Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `isSubtypeOf`(`com.google.common.reflect.TypeToken$Bounds` v5 @kind this, `java.lang.reflect.Type` v6 @kind object) @signature `Lcom/google/common/reflect/TypeToken$Bounds;.isSubtypeOf:(Ljava/lang/reflect/Type;)Z` @AccessFlag  {

  # return;
}
procedure `boolean` `isSupertypeOf`(`com.google.common.reflect.TypeToken$Bounds` v5 @kind this, `java.lang.reflect.Type` v6 @kind object) @signature `Lcom/google/common/reflect/TypeToken$Bounds;.isSupertypeOf:(Ljava/lang/reflect/Type;)Z` @AccessFlag  {

  # return;
}
