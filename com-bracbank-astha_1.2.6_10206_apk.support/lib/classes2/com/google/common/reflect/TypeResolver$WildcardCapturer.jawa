record `com.google.common.reflect.TypeResolver$WildcardCapturer` @kind class @AccessFlag  {
  `java.util.concurrent.atomic.AtomicInteger` `com.google.common.reflect.TypeResolver$WildcardCapturer.id` @AccessFlag PRIVATE_FINAL;
}
global `com.google.common.reflect.TypeResolver$WildcardCapturer` `@@com.google.common.reflect.TypeResolver$WildcardCapturer.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v1 @kind this) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v0 @kind this, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.<init>:(Ljava/util/concurrent/atomic/AtomicInteger;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v0 @kind this, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `com.google.common.reflect.TypeResolver$1` v2 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.<init>:(Ljava/util/concurrent/atomic/AtomicInteger;Lcom/google/common/reflect/TypeResolver$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.reflect.Type` `captureNullable`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v0 @kind this, `java.lang.reflect.Type` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.captureNullable:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.reflect.TypeResolver$WildcardCapturer` `forTypeVariable`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v2 @kind this, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.forTypeVariable:(Ljava/lang/reflect/TypeVariable;)Lcom/google/common/reflect/TypeResolver$WildcardCapturer;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.reflect.TypeResolver$WildcardCapturer` `notForTypeVariable`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v2 @kind this) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.notForTypeVariable:()Lcom/google/common/reflect/TypeResolver$WildcardCapturer;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.reflect.Type` `capture`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v6 @kind this, `java.lang.reflect.Type` v7 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.capture:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag FINAL {

  # return;
}
procedure `java.lang.reflect.TypeVariable` `captureAsTypeVariable`(`com.google.common.reflect.TypeResolver$WildcardCapturer` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$WildcardCapturer;.captureAsTypeVariable:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/TypeVariable;` @AccessFlag  {

  # return;
}
