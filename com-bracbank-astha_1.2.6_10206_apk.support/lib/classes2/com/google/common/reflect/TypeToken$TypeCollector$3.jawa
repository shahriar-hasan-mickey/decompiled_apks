record `com.google.common.reflect.TypeToken$TypeCollector$3` @kind class @AccessFlag  extends `com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector` @kind class {
}
procedure `void` `<init>`(`com.google.common.reflect.TypeToken$TypeCollector$3` v0 @kind this, `com.google.common.reflect.TypeToken$TypeCollector` v1 @kind object, `com.google.common.reflect.TypeToken$TypeCollector` v2 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$3;.<init>:(Lcom/google/common/reflect/TypeToken$TypeCollector;Lcom/google/common/reflect/TypeToken$TypeCollector;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.collect.ImmutableList` `collectTypes`(`com.google.common.reflect.TypeToken$TypeCollector$3` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$3;.collectTypes:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList;` @AccessFlag  {

  # return;
}
procedure `java.lang.Iterable` `getInterfaces`(`com.google.common.reflect.TypeToken$TypeCollector$3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$3;.getInterfaces:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag  {

  # return;
}
