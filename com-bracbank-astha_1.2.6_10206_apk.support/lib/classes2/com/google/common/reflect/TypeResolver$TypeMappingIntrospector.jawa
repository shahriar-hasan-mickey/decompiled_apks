record `com.google.common.reflect.TypeResolver$TypeMappingIntrospector` @kind class @AccessFlag FINAL extends `com.google.common.reflect.TypeVisitor` @kind class {
  `java.util.Map` `com.google.common.reflect.TypeResolver$TypeMappingIntrospector.mappings` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v1 @kind this) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.collect.ImmutableMap` `getTypeMappings`(`java.lang.reflect.Type` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.getTypeMappings:(Ljava/lang/reflect/Type;)Lcom/google/common/collect/ImmutableMap;` @AccessFlag STATIC {

  # return;
}
procedure `void` `map`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v2 @kind this, `com.google.common.reflect.TypeResolver$TypeVariableKey` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.map:(Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `visitClass`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.visitClass:(Ljava/lang/Class;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitParameterizedType`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v8 @kind this, `java.lang.reflect.ParameterizedType` v9 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.visitParameterizedType:(Ljava/lang/reflect/ParameterizedType;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitTypeVariable`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v0 @kind this, `java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.visitTypeVariable:(Ljava/lang/reflect/TypeVariable;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitWildcardType`(`com.google.common.reflect.TypeResolver$TypeMappingIntrospector` v0 @kind this, `java.lang.reflect.WildcardType` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$TypeMappingIntrospector;.visitWildcardType:(Ljava/lang/reflect/WildcardType;)V` @AccessFlag  {

  # return;
}
