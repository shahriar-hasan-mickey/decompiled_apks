record `com.google.common.reflect.TypeToken$TypeCollector$1` @kind class @AccessFlag  extends `com.google.common.reflect.TypeToken$TypeCollector` @kind class {
}
procedure `void` `<init>`(`com.google.common.reflect.TypeToken$TypeCollector$1` v1 @kind this) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Iterable` `getInterfaces`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `com.google.common.reflect.TypeToken` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getInterfaces:(Lcom/google/common/reflect/TypeToken;)Ljava/lang/Iterable;` @AccessFlag  {

  # return;
}
procedure `java.lang.Iterable` `getInterfaces`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getInterfaces:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `java.lang.Class` `getRawType`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `com.google.common.reflect.TypeToken` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getRawType:(Lcom/google/common/reflect/TypeToken;)Ljava/lang/Class;` @AccessFlag  {

  # return;
}
procedure `java.lang.Class` `getRawType`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getRawType:(Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `com.google.common.reflect.TypeToken` `getSuperclass`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `com.google.common.reflect.TypeToken` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getSuperclass:(Lcom/google/common/reflect/TypeToken;)Lcom/google/common/reflect/TypeToken;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `getSuperclass`(`com.google.common.reflect.TypeToken$TypeCollector$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector$1;.getSuperclass:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag SYNTHETIC {

  # return;
}
