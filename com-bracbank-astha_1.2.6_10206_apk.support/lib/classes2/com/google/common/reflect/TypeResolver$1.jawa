record `com.google.common.reflect.TypeResolver$1` @kind class @AccessFlag  extends `com.google.common.reflect.TypeVisitor` @kind class {
  `java.util.Map` `com.google.common.reflect.TypeResolver$1.val$mappings` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.reflect.Type` `com.google.common.reflect.TypeResolver$1.val$to` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver$1` v0 @kind this, `java.util.Map` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.<init>:(Ljava/util/Map;Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `visitClass`(`com.google.common.reflect.TypeResolver$1` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.visitClass:(Ljava/lang/Class;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitGenericArrayType`(`com.google.common.reflect.TypeResolver$1` v4 @kind this, `java.lang.reflect.GenericArrayType` v5 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.visitGenericArrayType:(Ljava/lang/reflect/GenericArrayType;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitParameterizedType`(`com.google.common.reflect.TypeResolver$1` v6 @kind this, `java.lang.reflect.ParameterizedType` v7 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.visitParameterizedType:(Ljava/lang/reflect/ParameterizedType;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitTypeVariable`(`com.google.common.reflect.TypeResolver$1` v2 @kind this, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.visitTypeVariable:(Ljava/lang/reflect/TypeVariable;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitWildcardType`(`com.google.common.reflect.TypeResolver$1` v8 @kind this, `java.lang.reflect.WildcardType` v9 @kind object) @signature `Lcom/google/common/reflect/TypeResolver$1;.visitWildcardType:(Ljava/lang/reflect/WildcardType;)V` @AccessFlag  {

  # return;
}
