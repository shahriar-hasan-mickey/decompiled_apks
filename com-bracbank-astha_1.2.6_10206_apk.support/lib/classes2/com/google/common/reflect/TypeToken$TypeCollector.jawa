record `com.google.common.reflect.TypeToken$TypeCollector` @kind class @AccessFlag ABSTRACT {
}
global `com.google.common.reflect.TypeToken$TypeCollector` `@@com.google.common.reflect.TypeToken$TypeCollector.FOR_GENERIC_TYPE` @AccessFlag STATIC_FINAL;
global `com.google.common.reflect.TypeToken$TypeCollector` `@@com.google.common.reflect.TypeToken$TypeCollector.FOR_RAW_TYPE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeToken$TypeCollector` v0 @kind this) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeToken$TypeCollector` v0 @kind this, `com.google.common.reflect.TypeToken$1` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.<init>:(Lcom/google/common/reflect/TypeToken$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `int` `collectTypes`(`com.google.common.reflect.TypeToken$TypeCollector` v3 @kind this, `java.lang.Object` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.collectTypes:(Ljava/lang/Object;Ljava/util/Map;)I` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.collect.ImmutableList` `sortKeysByValue`(`java.util.Map` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.sortKeysByValue:(Ljava/util/Map;Ljava/util/Comparator;)Lcom/google/common/collect/ImmutableList;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.reflect.TypeToken$TypeCollector` `classesOnly`(`com.google.common.reflect.TypeToken$TypeCollector` v1 @kind this) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.classesOnly:()Lcom/google/common/reflect/TypeToken$TypeCollector;` @AccessFlag FINAL {

  # return;
}
procedure `com.google.common.collect.ImmutableList` `collectTypes`(`com.google.common.reflect.TypeToken$TypeCollector` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.collectTypes:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.ImmutableList` `collectTypes`(`com.google.common.reflect.TypeToken$TypeCollector` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.collectTypes:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;` @AccessFlag FINAL {

  # return;
}
procedure `java.lang.Iterable` `getInterfaces`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.getInterfaces:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Class` `getRawType`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.getRawType:(Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getSuperclass`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/reflect/TypeToken$TypeCollector;.getSuperclass:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
