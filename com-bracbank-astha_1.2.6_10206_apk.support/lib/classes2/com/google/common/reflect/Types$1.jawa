record `com.google.common.reflect.Types$1` @kind class @AccessFlag  extends `com.google.common.reflect.TypeVisitor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `com.google.common.reflect.Types$1.val$result` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.reflect.Types$1` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lcom/google/common/reflect/Types$1;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `visitClass`(`com.google.common.reflect.Types$1` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/reflect/Types$1;.visitClass:(Ljava/lang/Class;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitGenericArrayType`(`com.google.common.reflect.Types$1` v1 @kind this, `java.lang.reflect.GenericArrayType` v2 @kind object) @signature `Lcom/google/common/reflect/Types$1;.visitGenericArrayType:(Ljava/lang/reflect/GenericArrayType;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitTypeVariable`(`com.google.common.reflect.Types$1` v1 @kind this, `java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lcom/google/common/reflect/Types$1;.visitTypeVariable:(Ljava/lang/reflect/TypeVariable;)V` @AccessFlag  {

  # return;
}
procedure `void` `visitWildcardType`(`com.google.common.reflect.Types$1` v1 @kind this, `java.lang.reflect.WildcardType` v2 @kind object) @signature `Lcom/google/common/reflect/Types$1;.visitWildcardType:(Ljava/lang/reflect/WildcardType;)V` @AccessFlag  {

  # return;
}
