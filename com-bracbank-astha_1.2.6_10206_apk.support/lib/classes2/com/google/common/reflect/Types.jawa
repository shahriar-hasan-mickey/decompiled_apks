record `com.google.common.reflect.Types` @kind class @AccessFlag FINAL {
}
global `com.google.common.base.Joiner` `@@com.google.common.reflect.Types.COMMA_JOINER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/reflect/Types;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.Types` v0 @kind this) @signature `Lcom/google/common/reflect/Types;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.reflect.Type` `access$100`(`java.lang.reflect.Type`[] v0 @kind object) @signature `Lcom/google/common/reflect/Types;.access$100:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$200`(`java.lang.reflect.Type`[] v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/google/common/reflect/Types;.access$200:([Ljava/lang/reflect/Type;Ljava/lang/String;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `access$300`(`java.util.Collection` v0 @kind object) @signature `Lcom/google/common/reflect/Types;.access$300:(Ljava/util/Collection;)[Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.base.Joiner` `access$400`() @signature `Lcom/google/common/reflect/Types;.access$400:()Lcom/google/common/base/Joiner;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Iterable` `access$600`(`java.lang.Iterable` v0 @kind object) @signature `Lcom/google/common/reflect/Types;.access$600:(Ljava/lang/Iterable;)Ljava/lang/Iterable;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `disallowPrimitiveType`(`java.lang.reflect.Type`[] v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/google/common/reflect/Types;.disallowPrimitiveType:([Ljava/lang/reflect/Type;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Iterable` `filterUpperBounds`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/reflect/Types;.filterUpperBounds:(Ljava/lang/Iterable;)Ljava/lang/Iterable;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Class` `getArrayClass`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/common/reflect/Types;.getArrayClass:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `getComponentType`(`java.lang.reflect.Type` v4 @kind object) @signature `Lcom/google/common/reflect/Types;.getComponentType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `newArrayType`(`java.lang.reflect.Type` v5 @kind object) @signature `Lcom/google/common/reflect/Types;.newArrayType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.TypeVariable` `newArtificialTypeVariable`(`java.lang.reflect.GenericDeclaration` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.reflect.Type`[] v4 @kind object) @signature `Lcom/google/common/reflect/Types;.newArtificialTypeVariable:(Ljava/lang/reflect/GenericDeclaration;Ljava/lang/String;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/TypeVariable;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `newParameterizedType`(`java.lang.Class` v2 @kind object, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lcom/google/common/reflect/Types;.newParameterizedType:(Ljava/lang/Class;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `newParameterizedTypeWithOwner`(`java.lang.reflect.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.reflect.Type`[] v4 @kind object) @signature `Lcom/google/common/reflect/Types;.newParameterizedTypeWithOwner:(Ljava/lang/reflect/Type;Ljava/lang/Class;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.TypeVariable` `newTypeVariableImpl`(`java.lang.reflect.GenericDeclaration` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lcom/google/common/reflect/Types;.newTypeVariableImpl:(Ljava/lang/reflect/GenericDeclaration;Ljava/lang/String;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/TypeVariable;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.WildcardType` `subtypeOf`(`java.lang.reflect.Type` v4 @kind object) @signature `Lcom/google/common/reflect/Types;.subtypeOf:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `subtypeOfComponentType`(`java.lang.reflect.Type`[] v3 @kind object) @signature `Lcom/google/common/reflect/Types;.subtypeOfComponentType:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.WildcardType` `supertypeOf`(`java.lang.reflect.Type` v4 @kind object) @signature `Lcom/google/common/reflect/Types;.supertypeOf:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `toArray`(`java.util.Collection` v1 @kind object) @signature `Lcom/google/common/reflect/Types;.toArray:(Ljava/util/Collection;)[Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `toString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/google/common/reflect/Types;.toString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {

  # return;
}
