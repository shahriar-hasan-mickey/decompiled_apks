record `com.google.common.reflect.TypeResolver` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.common.reflect.TypeResolver$TypeTable` `com.google.common.reflect.TypeResolver.typeTable` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver` v1 @kind this) @signature `Lcom/google/common/reflect/TypeResolver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver` v0 @kind this, `com.google.common.reflect.TypeResolver$TypeTable` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.<init>:(Lcom/google/common/reflect/TypeResolver$TypeTable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.TypeResolver` v0 @kind this, `com.google.common.reflect.TypeResolver$TypeTable` v1 @kind object, `com.google.common.reflect.TypeResolver$1` v2 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.<init>:(Lcom/google/common/reflect/TypeResolver$TypeTable;Lcom/google/common/reflect/TypeResolver$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `access$000`(`java.util.Map` v0 @kind object, `java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.access$000:(Ljava/util/Map;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `access$100`(`java.lang.Class` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.access$100:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `access$300`(`com.google.common.reflect.TypeResolver` v0 @kind object, `java.lang.reflect.Type`[] v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.access$300:(Lcom/google/common/reflect/TypeResolver;[Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.reflect.TypeResolver` `covariantly`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.covariantly:(Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeResolver;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `expectArgument`(`java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.expectArgument:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.reflect.TypeResolver` `invariantly`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.invariantly:(Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeResolver;` @AccessFlag STATIC {

  # return;
}
procedure `void` `populateTypeMappings`(`java.util.Map` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.populateTypeMappings:(Ljava/util/Map;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `resolveGenericArrayType`(`com.google.common.reflect.TypeResolver` v0 @kind this, `java.lang.reflect.GenericArrayType` v1 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveGenericArrayType:(Ljava/lang/reflect/GenericArrayType;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `resolveParameterizedType`(`com.google.common.reflect.TypeResolver` v2 @kind this, `java.lang.reflect.ParameterizedType` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveParameterizedType:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.reflect.Type`[] `resolveTypes`(`com.google.common.reflect.TypeResolver` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveTypes:([Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.reflect.WildcardType` `resolveWildcardType`(`com.google.common.reflect.TypeResolver` v2 @kind this, `java.lang.reflect.WildcardType` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveWildcardType:(Ljava/lang/reflect/WildcardType;)Ljava/lang/reflect/WildcardType;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.reflect.Type` `resolveType`(`com.google.common.reflect.TypeResolver` v1 @kind this, `java.lang.reflect.Type` v2 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `resolveTypesInPlace`(`com.google.common.reflect.TypeResolver` v2 @kind this, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.resolveTypesInPlace:([Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag  {

  # return;
}
procedure `com.google.common.reflect.TypeResolver` `where`(`com.google.common.reflect.TypeResolver` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.where:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Lcom/google/common/reflect/TypeResolver;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.reflect.TypeResolver` `where`(`com.google.common.reflect.TypeResolver` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/google/common/reflect/TypeResolver;.where:(Ljava/util/Map;)Lcom/google/common/reflect/TypeResolver;` @AccessFlag  {

  # return;
}
