record `com.google.common.primitives.Floats` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.primitives.FloatsMethodsForWeb` @kind class {
}
global `int` `@@com.google.common.primitives.Floats.BYTES` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.primitives.Floats` v0 @kind this) @signature `Lcom/google/common/primitives/Floats;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `access$000`(`float`[] v0 @kind object, `float` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Floats;.access$000:([FFII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$100`(`float`[] v0 @kind object, `float` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Floats;.access$100:([FFII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `asList`(`float`[] v1 @kind object) @signature `Lcom/google/common/primitives/Floats;.asList:([F)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compare`(`float` v0 , `float` v1 ) @signature `Lcom/google/common/primitives/Floats;.compare:(FF)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float`[] `concat`(`float`[][] v7 @kind object) @signature `Lcom/google/common/primitives/Floats;.concat:([[F)[F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `constrainToRange`(`float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/google/common/primitives/Floats;.constrainToRange:(FFF)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`float`[] v4 @kind object, `float` v5 ) @signature `Lcom/google/common/primitives/Floats;.contains:([FF)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float`[] `ensureCapacity`(`float`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/primitives/Floats;.ensureCapacity:([FII)[F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`float` v0 ) @signature `Lcom/google/common/primitives/Floats;.hashCode:(F)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`float`[] v2 @kind object, `float` v3 ) @signature `Lcom/google/common/primitives/Floats;.indexOf:([FF)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`float`[] v1 @kind object, `float` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Floats;.indexOf:([FFII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `indexOf`(`float`[] v5 @kind object, `float`[] v6 @kind object) @signature `Lcom/google/common/primitives/Floats;.indexOf:([F[F)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isFinite`(`float` v1 ) @signature `Lcom/google/common/primitives/Floats;.isFinite:(F)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `join`(`java.lang.String` v3 @kind object, `float`[] v4 @kind object) @signature `Lcom/google/common/primitives/Floats;.join:(Ljava/lang/String;[F)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`float`[] v2 @kind object, `float` v3 ) @signature `Lcom/google/common/primitives/Floats;.lastIndexOf:([FF)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`float`[] v1 @kind object, `float` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Floats;.lastIndexOf:([FFII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Comparator` `lexicographicalComparator`() @signature `Lcom/google/common/primitives/Floats;.lexicographicalComparator:()Ljava/util/Comparator;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `max`(`float`[] v3 @kind object) @signature `Lcom/google/common/primitives/Floats;.max:([F)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `min`(`float`[] v3 @kind object) @signature `Lcom/google/common/primitives/Floats;.min:([F)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`float`[] v2 @kind object) @signature `Lcom/google/common/primitives/Floats;.reverse:([F)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`float`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Floats;.reverse:([FII)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`float`[] v2 @kind object) @signature `Lcom/google/common/primitives/Floats;.sortDescending:([F)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`float`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Floats;.sortDescending:([FII)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Converter` `stringConverter`() @signature `Lcom/google/common/primitives/Floats;.stringConverter:()Lcom/google/common/base/Converter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float`[] `toArray`(`java.util.Collection` v4 @kind object) @signature `Lcom/google/common/primitives/Floats;.toArray:(Ljava/util/Collection;)[F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Float` `tryParse`(`java.lang.String` v1 @kind object) @signature `Lcom/google/common/primitives/Floats;.tryParse:(Ljava/lang/String;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC {

  # return;
}
