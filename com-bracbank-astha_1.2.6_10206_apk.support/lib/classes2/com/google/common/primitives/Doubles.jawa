record `com.google.common.primitives.Doubles` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.primitives.DoublesMethodsForWeb` @kind class {
}
global `int` `@@com.google.common.primitives.Doubles.BYTES` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.regex.Pattern` `@@com.google.common.primitives.Doubles.FLOATING_POINT_PATTERN` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/primitives/Doubles;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.primitives.Doubles` v0 @kind this) @signature `Lcom/google/common/primitives/Doubles;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `access$000`(`double`[] v0 @kind object, `double` v1 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Doubles;.access$000:([DDII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$100`(`double`[] v0 @kind object, `double` v1 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Doubles;.access$100:([DDII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `asList`(`double`[] v1 @kind object) @signature `Lcom/google/common/primitives/Doubles;.asList:([D)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compare`(`double` v0 , `double` v2 ) @signature `Lcom/google/common/primitives/Doubles;.compare:(DD)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double`[] `concat`(`double`[][] v7 @kind object) @signature `Lcom/google/common/primitives/Doubles;.concat:([[D)[D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `constrainToRange`(`double` v1 , `double` v3 , `double` v5 ) @signature `Lcom/google/common/primitives/Doubles;.constrainToRange:(DDD)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`double`[] v6 @kind object, `double` v7 ) @signature `Lcom/google/common/primitives/Doubles;.contains:([DD)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double`[] `ensureCapacity`(`double`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/primitives/Doubles;.ensureCapacity:([DII)[D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.regex.Pattern` `fpPattern`() @signature `Lcom/google/common/primitives/Doubles;.fpPattern:()Ljava/util/regex/Pattern;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `hashCode`(`double` v0 ) @signature `Lcom/google/common/primitives/Doubles;.hashCode:(D)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`double`[] v2 @kind object, `double` v3 ) @signature `Lcom/google/common/primitives/Doubles;.indexOf:([DD)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`double`[] v3 @kind object, `double` v4 , `int` v6 , `int` v7 ) @signature `Lcom/google/common/primitives/Doubles;.indexOf:([DDII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `indexOf`(`double`[] v8 @kind object, `double`[] v9 @kind object) @signature `Lcom/google/common/primitives/Doubles;.indexOf:([D[D)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isFinite`(`double` v3 ) @signature `Lcom/google/common/primitives/Doubles;.isFinite:(D)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `join`(`java.lang.String` v4 @kind object, `double`[] v5 @kind object) @signature `Lcom/google/common/primitives/Doubles;.join:(Ljava/lang/String;[D)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`double`[] v2 @kind object, `double` v3 ) @signature `Lcom/google/common/primitives/Doubles;.lastIndexOf:([DD)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`double`[] v3 @kind object, `double` v4 , `int` v6 , `int` v7 ) @signature `Lcom/google/common/primitives/Doubles;.lastIndexOf:([DDII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Comparator` `lexicographicalComparator`() @signature `Lcom/google/common/primitives/Doubles;.lexicographicalComparator:()Ljava/util/Comparator;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `max`(`double`[] v5 @kind object) @signature `Lcom/google/common/primitives/Doubles;.max:([D)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `min`(`double`[] v5 @kind object) @signature `Lcom/google/common/primitives/Doubles;.min:([D)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`double`[] v2 @kind object) @signature `Lcom/google/common/primitives/Doubles;.reverse:([D)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`double`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/primitives/Doubles;.reverse:([DII)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`double`[] v2 @kind object) @signature `Lcom/google/common/primitives/Doubles;.sortDescending:([D)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`double`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Doubles;.sortDescending:([DII)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Converter` `stringConverter`() @signature `Lcom/google/common/primitives/Doubles;.stringConverter:()Lcom/google/common/base/Converter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double`[] `toArray`(`java.util.Collection` v5 @kind object) @signature `Lcom/google/common/primitives/Doubles;.toArray:(Ljava/util/Collection;)[D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Double` `tryParse`(`java.lang.String` v2 @kind object) @signature `Lcom/google/common/primitives/Doubles;.tryParse:(Ljava/lang/String;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC {

  # return;
}
