record `com.google.common.primitives.Ints` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.primitives.IntsMethodsForWeb` @kind class {
}
global `int` `@@com.google.common.primitives.Ints.BYTES` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.common.primitives.Ints.MAX_POWER_OF_TWO` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.primitives.Ints` v0 @kind this) @signature `Lcom/google/common/primitives/Ints;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `access$000`(`int`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Ints;.access$000:([IIII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$100`(`int`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Ints;.access$100:([IIII)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `asList`(`int`[] v1 @kind object) @signature `Lcom/google/common/primitives/Ints;.asList:([I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkedCast`(`long` v4 ) @signature `Lcom/google/common/primitives/Ints;.checkedCast:(J)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compare`(`int` v0 , `int` v1 ) @signature `Lcom/google/common/primitives/Ints;.compare:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `concat`(`int`[][] v7 @kind object) @signature `Lcom/google/common/primitives/Ints;.concat:([[I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `constrainToRange`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Ints;.constrainToRange:(III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`int`[] v4 @kind object, `int` v5 ) @signature `Lcom/google/common/primitives/Ints;.contains:([II)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `ensureCapacity`(`int`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/common/primitives/Ints;.ensureCapacity:([III)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `fromByteArray`(`byte`[] v6 @kind object) @signature `Lcom/google/common/primitives/Ints;.fromByteArray:([B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `fromBytes`(`byte` v0 , `byte` v1 , `byte` v2 , `byte` v3 ) @signature `Lcom/google/common/primitives/Ints;.fromBytes:(BBBB)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`int` v0 ) @signature `Lcom/google/common/primitives/Ints;.hashCode:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`int`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/common/primitives/Ints;.indexOf:([II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `indexOf`(`int`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Ints;.indexOf:([IIII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `indexOf`(`int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lcom/google/common/primitives/Ints;.indexOf:([I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `join`(`java.lang.String` v3 @kind object, `int`[] v4 @kind object) @signature `Lcom/google/common/primitives/Ints;.join:(Ljava/lang/String;[I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`int`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/common/primitives/Ints;.lastIndexOf:([II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `lastIndexOf`(`int`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Ints;.lastIndexOf:([IIII)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Comparator` `lexicographicalComparator`() @signature `Lcom/google/common/primitives/Ints;.lexicographicalComparator:()Ljava/util/Comparator;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `max`(`int`[] v3 @kind object) @signature `Lcom/google/common/primitives/Ints;.max:([I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `min`(`int`[] v3 @kind object) @signature `Lcom/google/common/primitives/Ints;.min:([I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`int`[] v2 @kind object) @signature `Lcom/google/common/primitives/Ints;.reverse:([I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reverse`(`int`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/common/primitives/Ints;.reverse:([III)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `saturatedCast`(`long` v3 ) @signature `Lcom/google/common/primitives/Ints;.saturatedCast:(J)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`int`[] v2 @kind object) @signature `Lcom/google/common/primitives/Ints;.sortDescending:([I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `sortDescending`(`int`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/common/primitives/Ints;.sortDescending:([III)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Converter` `stringConverter`() @signature `Lcom/google/common/primitives/Ints;.stringConverter:()Lcom/google/common/base/Converter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `toArray`(`java.util.Collection` v4 @kind object) @signature `Lcom/google/common/primitives/Ints;.toArray:(Ljava/util/Collection;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `toByteArray`(`int` v3 ) @signature `Lcom/google/common/primitives/Ints;.toByteArray:(I)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Integer` `tryParse`(`java.lang.String` v1 @kind object) @signature `Lcom/google/common/primitives/Ints;.tryParse:(Ljava/lang/String;)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Integer` `tryParse`(`java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/google/common/primitives/Ints;.tryParse:(Ljava/lang/String;I)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC {

  # return;
}
