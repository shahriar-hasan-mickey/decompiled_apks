record `com.google.common.util.concurrent.SmoothRateLimiter` @kind class @AccessFlag ABSTRACT extends `com.google.common.util.concurrent.RateLimiter` @kind class {
  `double` `com.google.common.util.concurrent.SmoothRateLimiter.maxPermits` @AccessFlag ;
  `long` `com.google.common.util.concurrent.SmoothRateLimiter.nextFreeTicketMicros` @AccessFlag PRIVATE;
  `double` `com.google.common.util.concurrent.SmoothRateLimiter.stableIntervalMicros` @AccessFlag ;
  `double` `com.google.common.util.concurrent.SmoothRateLimiter.storedPermits` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.SmoothRateLimiter` v2 @kind this, `com.google.common.util.concurrent.RateLimiter$SleepingStopwatch` v3 @kind object) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.<init>:(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.SmoothRateLimiter` v0 @kind this, `com.google.common.util.concurrent.RateLimiter$SleepingStopwatch` v1 @kind object, `com.google.common.util.concurrent.SmoothRateLimiter$1` v2 @kind object) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.<init>:(Lcom/google/common/util/concurrent/RateLimiter$SleepingStopwatch;Lcom/google/common/util/concurrent/SmoothRateLimiter$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `double` `coolDownIntervalMicros`() @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.coolDownIntervalMicros:()D` @AccessFlag ABSTRACT {

  # return;
}
procedure `double` `doGetRate`(`com.google.common.util.concurrent.SmoothRateLimiter` v4 @kind this) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.doGetRate:()D` @AccessFlag FINAL {

  # return;
}
procedure `void` `doSetRate`(`double` v0 , `double` v2 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.doSetRate:(DD)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `doSetRate`(`com.google.common.util.concurrent.SmoothRateLimiter` v2 @kind this, `double` v3 , `long` v5 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.doSetRate:(DJ)V` @AccessFlag FINAL {

  # return;
}
procedure `long` `queryEarliestAvailable`(`com.google.common.util.concurrent.SmoothRateLimiter` v0 @kind this, `long` v1 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.queryEarliestAvailable:(J)J` @AccessFlag FINAL {

  # return;
}
procedure `long` `reserveEarliestAvailable`(`com.google.common.util.concurrent.SmoothRateLimiter` v8 @kind this, `int` v9 , `long` v10 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.reserveEarliestAvailable:(IJ)J` @AccessFlag FINAL {

  # return;
}
procedure `void` `resync`(`com.google.common.util.concurrent.SmoothRateLimiter` v6 @kind this, `long` v7 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.resync:(J)V` @AccessFlag  {

  # return;
}
procedure `long` `storedPermitsToWaitTime`(`double` v0 , `double` v2 ) @signature `Lcom/google/common/util/concurrent/SmoothRateLimiter;.storedPermitsToWaitTime:(DD)J` @AccessFlag ABSTRACT {

  # return;
}
