record `com.google.common.util.concurrent.Atomics` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Atomics` v0 @kind this) @signature `Lcom/google/common/util/concurrent/Atomics;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.atomic.AtomicReference` `newReference`() @signature `Lcom/google/common/util/concurrent/Atomics;.newReference:()Ljava/util/concurrent/atomic/AtomicReference;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.concurrent.atomic.AtomicReference` `newReference`(`java.lang.Object` v1 @kind object) @signature `Lcom/google/common/util/concurrent/Atomics;.newReference:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicReference;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `newReferenceArray`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Atomics;.newReferenceArray:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `newReferenceArray`(`java.lang.Object`[] v1 @kind object) @signature `Lcom/google/common/util/concurrent/Atomics;.newReferenceArray:([Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PUBLIC_STATIC {

  # return;
}
