record `com.google.common.util.concurrent.Striped$WeakSafeCondition` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.ForwardingCondition` @kind class {
  `java.util.concurrent.locks.Condition` `com.google.common.util.concurrent.Striped$WeakSafeCondition.delegate` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` `com.google.common.util.concurrent.Striped$WeakSafeCondition.strongReference` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped$WeakSafeCondition` v0 @kind this, `java.util.concurrent.locks.Condition` v1 @kind object, `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeCondition;.<init>:(Ljava/util/concurrent/locks/Condition;Lcom/google/common/util/concurrent/Striped$WeakSafeReadWriteLock;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.Condition` `delegate`(`com.google.common.util.concurrent.Striped$WeakSafeCondition` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeCondition;.delegate:()Ljava/util/concurrent/locks/Condition;` @AccessFlag  {

  # return;
}
