record `com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace` @kind class @AccessFlag  extends `java.lang.IllegalStateException` @kind class {
}
global `java.lang.StackTraceElement`[] `@@com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace.EMPTY_STACK_TRACE` @AccessFlag STATIC_FINAL;
global `com.google.common.collect.ImmutableSet` `@@com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace.EXCLUDED_CLASS_NAMES` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace` v3 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v4 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v5 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
