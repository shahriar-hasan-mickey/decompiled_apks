record `com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.util.concurrent.CycleDetectingLockFactory` @kind class {
  `java.util.Map` `com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.lockGraphNodes` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` v1 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantLock` `newReentrantLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` v1 @kind this, `java.lang.Enum` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;.newReentrantLock:(Ljava/lang/Enum;)Ljava/util/concurrent/locks/ReentrantLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantLock` `newReentrantLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` v2 @kind this, `java.lang.Enum` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;.newReentrantLock:(Ljava/lang/Enum;Z)Ljava/util/concurrent/locks/ReentrantLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock` `newReentrantReadWriteLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` v1 @kind this, `java.lang.Enum` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;.newReentrantReadWriteLock:(Ljava/lang/Enum;)Ljava/util/concurrent/locks/ReentrantReadWriteLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock` `newReentrantReadWriteLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` v2 @kind this, `java.lang.Enum` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;.newReentrantReadWriteLock:(Ljava/lang/Enum;Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;` @AccessFlag PUBLIC {

  # return;
}
