record `com.google.common.util.concurrent.ForwardingFuture` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.google.common.collect.ForwardingObject` @kind class, `java.util.concurrent.Future` @kind interface {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ForwardingFuture` v0 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `boolean` `cancel`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.cancel:(Z)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `delegate`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Future` `delegate`() @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.delegate:()Ljava/util/concurrent/Future;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.isCancelled:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDone`(`com.google.common.util.concurrent.ForwardingFuture` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingFuture;.isDone:()Z` @AccessFlag PUBLIC {

  # return;
}
