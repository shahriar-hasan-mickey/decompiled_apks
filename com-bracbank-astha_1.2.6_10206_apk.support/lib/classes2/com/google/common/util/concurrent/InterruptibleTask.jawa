record `com.google.common.util.concurrent.InterruptibleTask` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface {
}
global `java.lang.Runnable` `@@com.google.common.util.concurrent.InterruptibleTask.DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.common.util.concurrent.InterruptibleTask.MAX_BUSY_WAIT_SPINS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Runnable` `@@com.google.common.util.concurrent.InterruptibleTask.PARKED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.InterruptibleTask` v0 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `waitForInterrupt`(`com.google.common.util.concurrent.InterruptibleTask` v7 @kind this, `java.lang.Thread` v8 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.waitForInterrupt:(Ljava/lang/Thread;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `afterRanInterruptiblyFailure`(`java.lang.Throwable` v0 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.afterRanInterruptiblyFailure:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `afterRanInterruptiblySuccess`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.afterRanInterruptiblySuccess:(Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `interruptTask`(`com.google.common.util.concurrent.InterruptibleTask` v4 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.interruptTask:()V` @AccessFlag FINAL {

  # return;
}
procedure `boolean` `isDone`() @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.isDone:()Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `run`(`com.google.common.util.concurrent.InterruptibleTask` v4 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.run:()V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.Object` `runInterruptibly`() @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.runInterruptibly:()Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.String` `toPendingString`() @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.toPendingString:()Ljava/lang/String;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.util.concurrent.InterruptibleTask` v4 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {

  # return;
}
