record `com.google.common.util.concurrent.ForwardingLock` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.locks.Lock` @kind interface {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ForwardingLock` v0 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `delegate`() @signature `Lcom/google/common/util/concurrent/ForwardingLock;.delegate:()Ljava/util/concurrent/locks/Lock;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `lock`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.lock:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lockInterruptibly`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.lockInterruptibly:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.Condition` `newCondition`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.tryLock:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.tryLock:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `unlock`(`com.google.common.util.concurrent.ForwardingLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingLock;.unlock:()V` @AccessFlag PUBLIC {

  # return;
}
