record `com.google.common.util.concurrent.AbstractFuture$AtomicHelper` @kind class @AccessFlag ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractFuture$AtomicHelper` v0 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractFuture$AtomicHelper` v0 @kind this, `com.google.common.util.concurrent.AbstractFuture$1` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.<init>:(Lcom/google/common/util/concurrent/AbstractFuture$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `casListeners`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.AbstractFuture$Listener` v1 @kind object, `com.google.common.util.concurrent.AbstractFuture$Listener` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.casListeners:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Listener;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `casValue`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.casValue:(Lcom/google/common/util/concurrent/AbstractFuture;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `casWaiters`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.AbstractFuture$Waiter` v1 @kind object, `com.google.common.util.concurrent.AbstractFuture$Waiter` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.casWaiters:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `com.google.common.util.concurrent.AbstractFuture$Listener` `gasListeners`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.AbstractFuture$Listener` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.gasListeners:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Lcom/google/common/util/concurrent/AbstractFuture$Listener;` @AccessFlag ABSTRACT {

  # return;
}
procedure `com.google.common.util.concurrent.AbstractFuture$Waiter` `gasWaiters`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.AbstractFuture$Waiter` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.gasWaiters:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Lcom/google/common/util/concurrent/AbstractFuture$Waiter;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `putNext`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v0 @kind object, `com.google.common.util.concurrent.AbstractFuture$Waiter` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.putNext:(Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `putThread`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v0 @kind object, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$AtomicHelper;.putThread:(Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Ljava/lang/Thread;)V` @AccessFlag ABSTRACT {

  # return;
}
