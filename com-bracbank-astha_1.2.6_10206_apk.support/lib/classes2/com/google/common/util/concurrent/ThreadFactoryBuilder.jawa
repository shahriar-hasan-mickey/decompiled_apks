record `com.google.common.util.concurrent.ThreadFactoryBuilder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.ThreadFactory` `com.google.common.util.concurrent.ThreadFactoryBuilder.backingThreadFactory` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.google.common.util.concurrent.ThreadFactoryBuilder.daemon` @AccessFlag PRIVATE;
  `java.lang.String` `com.google.common.util.concurrent.ThreadFactoryBuilder.nameFormat` @AccessFlag PRIVATE;
  `java.lang.Integer` `com.google.common.util.concurrent.ThreadFactoryBuilder.priority` @AccessFlag PRIVATE;
  `java.lang.Thread$UncaughtExceptionHandler` `com.google.common.util.concurrent.ThreadFactoryBuilder.uncaughtExceptionHandler` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `access$000`(`java.lang.String` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.access$000:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `doBuild`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v9 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.doBuild:(Lcom/google/common/util/concurrent/ThreadFactoryBuilder;)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `format`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `build`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.build:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ThreadFactoryBuilder` `setDaemon`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.setDaemon:(Z)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ThreadFactoryBuilder` `setNameFormat`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.setNameFormat:(Ljava/lang/String;)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ThreadFactoryBuilder` `setPriority`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v4 @kind this, `int` v5 ) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.setPriority:(I)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ThreadFactoryBuilder` `setThreadFactory`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.setThreadFactory:(Ljava/util/concurrent/ThreadFactory;)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ThreadFactoryBuilder` `setUncaughtExceptionHandler`(`com.google.common.util.concurrent.ThreadFactoryBuilder` v0 @kind this, `java.lang.Thread$UncaughtExceptionHandler` v1 @kind object) @signature `Lcom/google/common/util/concurrent/ThreadFactoryBuilder;.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;` @AccessFlag PUBLIC {

  # return;
}
