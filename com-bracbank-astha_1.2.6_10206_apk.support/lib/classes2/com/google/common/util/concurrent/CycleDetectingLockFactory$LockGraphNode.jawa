record `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` @kind class @AccessFlag  {
  `java.util.Map` `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.allowedPriorLocks` @AccessFlag FINAL;
  `java.util.Map` `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.disallowedPriorLocks` @AccessFlag FINAL;
  `java.lang.String` `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.lockName` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace` `findPathTo`(`com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v5 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v6 @kind object, `java.util.Set` v7 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;.findPathTo:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Ljava/util/Set;)Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `checkAcquiredLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v3 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v4 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v5 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;.checkAcquiredLock:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;)V` @AccessFlag  {

  # return;
}
procedure `void` `checkAcquiredLocks`(`com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v1 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;.checkAcquiredLocks:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/List;)V` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `getLockName`(`com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;.getLockName:()Ljava/lang/String;` @AccessFlag  {

  # return;
}
