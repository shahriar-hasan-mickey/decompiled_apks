record `com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.AbstractScheduledService$Cancellable` @kind interface {
  `java.util.concurrent.Future` `com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture.currentFuture` @AccessFlag PRIVATE;
  `java.util.concurrent.locks.ReentrantLock` `com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture.lock` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` v0 @kind this, `java.util.concurrent.locks.ReentrantLock` v1 @kind object, `java.util.concurrent.Future` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;.<init>:(Ljava/util/concurrent/locks/ReentrantLock;Ljava/util/concurrent/Future;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.Future` `access$800`(`com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` v0 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;.access$800:(Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;)Ljava/util/concurrent/Future;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Future` `access$802`(`com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` v0 @kind object, `java.util.concurrent.Future` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;.access$802:(Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;Ljava/util/concurrent/Future;)Ljava/util/concurrent/Future;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `cancel`(`com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;.cancel:(Z)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$SupplantableFuture` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$CustomScheduler$SupplantableFuture;.isCancelled:()Z` @AccessFlag PUBLIC {

  # return;
}
