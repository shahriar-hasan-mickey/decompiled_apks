record `com.google.common.util.concurrent.AggregateFuture` @kind class @AccessFlag ABSTRACT extends `com.google.common.util.concurrent.AggregateFutureState` @kind class {
  `boolean` `com.google.common.util.concurrent.AggregateFuture.allMustSucceed` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.common.util.concurrent.AggregateFuture.collectsValues` @AccessFlag PRIVATE_FINAL;
  `com.google.common.collect.ImmutableCollection` `com.google.common.util.concurrent.AggregateFuture.futures` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@com.google.common.util.concurrent.AggregateFuture.logger` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/AggregateFuture;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AggregateFuture` v1 @kind this, `com.google.common.collect.ImmutableCollection` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.<init>:(Lcom/google/common/collect/ImmutableCollection;ZZ)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`com.google.common.util.concurrent.AggregateFuture` v0 @kind object, `com.google.common.util.concurrent.ListenableFuture` v1 @kind object, `int` v2 ) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.a:(Lcom/google/common/util/concurrent/AggregateFuture;Lcom/google/common/util/concurrent/ListenableFuture;I)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `addCausalChain`(`java.util.Set` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.addCausalChain:(Ljava/util/Set;Ljava/lang/Throwable;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `b`(`com.google.common.util.concurrent.AggregateFuture` v0 @kind object, `com.google.common.collect.ImmutableCollection` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.b:(Lcom/google/common/util/concurrent/AggregateFuture;Lcom/google/common/collect/ImmutableCollection;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `collectValueFromNonCancelledFuture`(`com.google.common.util.concurrent.AggregateFuture` v0 @kind this, `int` v1 , `java.util.concurrent.Future` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.collectValueFromNonCancelledFuture:(ILjava/util/concurrent/Future;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `decrementCountAndMaybeComplete`(`com.google.common.util.concurrent.AggregateFuture` v3 @kind this, `com.google.common.collect.ImmutableCollection` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.decrementCountAndMaybeComplete:(Lcom/google/common/collect/ImmutableCollection;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `handleException`(`com.google.common.util.concurrent.AggregateFuture` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.handleException:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `lambda$init$0`(`com.google.common.util.concurrent.AggregateFuture` v2 @kind this, `com.google.common.util.concurrent.ListenableFuture` v3 @kind object, `int` v4 ) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.lambda$init$0:(Lcom/google/common/util/concurrent/ListenableFuture;I)V` @AccessFlag PRIVATE_SYNTHETIC {

  # return;
}
procedure `void` `lambda$init$1`(`com.google.common.util.concurrent.AggregateFuture` v0 @kind this, `com.google.common.collect.ImmutableCollection` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.lambda$init$1:(Lcom/google/common/collect/ImmutableCollection;)V` @AccessFlag PRIVATE_SYNTHETIC {

  # return;
}
procedure `void` `log`(`java.lang.Throwable` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.log:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `processCompleted`(`com.google.common.util.concurrent.AggregateFuture` v3 @kind this, `com.google.common.collect.ImmutableCollection` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.processCompleted:(Lcom/google/common/collect/ImmutableCollection;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addInitialException`(`com.google.common.util.concurrent.AggregateFuture` v2 @kind this, `java.util.Set` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.addInitialException:(Ljava/util/Set;)V` @AccessFlag FINAL {

  # return;
}
procedure `void` `afterDone`(`com.google.common.util.concurrent.AggregateFuture` v3 @kind this) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.afterDone:()V` @AccessFlag PROTECTED_FINAL {

  # return;
}
procedure `void` `collectOneValue`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.collectOneValue:(ILjava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `handleAllCompleted`() @signature `Lcom/google/common/util/concurrent/AggregateFuture;.handleAllCompleted:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `init`(`com.google.common.util.concurrent.AggregateFuture` v5 @kind this) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.init:()V` @AccessFlag FINAL {

  # return;
}
procedure `java.lang.String` `pendingToString`(`com.google.common.util.concurrent.AggregateFuture` v3 @kind this) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.pendingToString:()Ljava/lang/String;` @AccessFlag PROTECTED_FINAL {

  # return;
}
procedure `void` `releaseResources`(`com.google.common.util.concurrent.AggregateFuture` v0 @kind this, `com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFuture;.releaseResources:(Lcom/google/common/util/concurrent/AggregateFuture$ReleaseResourcesReason;)V` @AccessFlag  {

  # return;
}
