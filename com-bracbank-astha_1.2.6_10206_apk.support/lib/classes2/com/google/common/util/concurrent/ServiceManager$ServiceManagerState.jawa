record `com.google.common.util.concurrent.ServiceManager$ServiceManagerState` @kind class @AccessFlag FINAL {
  `com.google.common.util.concurrent.Monitor$Guard` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.awaitHealthGuard` @AccessFlag FINAL;
  `com.google.common.util.concurrent.ListenerCallQueue` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.listeners` @AccessFlag FINAL;
  `com.google.common.util.concurrent.Monitor` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.monitor` @AccessFlag FINAL;
  `int` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.numberOfServices` @AccessFlag FINAL;
  `boolean` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.ready` @AccessFlag ;
  `com.google.common.collect.SetMultimap` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.servicesByState` @AccessFlag FINAL;
  `java.util.Map` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.startupTimers` @AccessFlag FINAL;
  `com.google.common.collect.Multiset` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.states` @AccessFlag FINAL;
  `com.google.common.util.concurrent.Monitor$Guard` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.stoppedGuard` @AccessFlag FINAL;
  `boolean` `com.google.common.util.concurrent.ServiceManager$ServiceManagerState.transitioned` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this, `com.google.common.collect.ImmutableCollection` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.<init>:(Lcom/google/common/collect/ImmutableCollection;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `addListener`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v1 @kind this, `com.google.common.util.concurrent.ServiceManager$Listener` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.addListener:(Lcom/google/common/util/concurrent/ServiceManager$Listener;Ljava/util/concurrent/Executor;)V` @AccessFlag  {

  # return;
}
procedure `void` `awaitHealthy`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.awaitHealthy:()V` @AccessFlag  {

  # return;
}
procedure `void` `awaitHealthy`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.awaitHealthy:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag  {

  # return;
}
procedure `void` `awaitStopped`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.awaitStopped:()V` @AccessFlag  {

  # return;
}
procedure `void` `awaitStopped`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.awaitStopped:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag  {

  # return;
}
procedure `void` `checkHealthy`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v4 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.checkHealthy:()V` @AccessFlag  {

  # return;
}
procedure `void` `dispatchListenerEvents`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.dispatchListenerEvents:()V` @AccessFlag  {

  # return;
}
procedure `void` `enqueueFailedEvent`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this, `com.google.common.util.concurrent.Service` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.enqueueFailedEvent:(Lcom/google/common/util/concurrent/Service;)V` @AccessFlag  {

  # return;
}
procedure `void` `enqueueHealthyEvent`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.enqueueHealthyEvent:()V` @AccessFlag  {

  # return;
}
procedure `void` `enqueueStoppedEvent`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.enqueueStoppedEvent:()V` @AccessFlag  {

  # return;
}
procedure `void` `markReady`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v5 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.markReady:()V` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.ImmutableSetMultimap` `servicesByState`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v4 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.servicesByState:()Lcom/google/common/collect/ImmutableSetMultimap;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.ImmutableMap` `startupTimes`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v6 @kind this) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.startupTimes:()Lcom/google/common/collect/ImmutableMap;` @AccessFlag  {

  # return;
}
procedure `void` `transitionService`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v7 @kind this, `com.google.common.util.concurrent.Service` v8 @kind object, `com.google.common.util.concurrent.Service$State` v9 @kind object, `com.google.common.util.concurrent.Service$State` v10 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.transitionService:(Lcom/google/common/util/concurrent/Service;Lcom/google/common/util/concurrent/Service$State;Lcom/google/common/util/concurrent/Service$State;)V` @AccessFlag  {

  # return;
}
procedure `void` `tryStartTiming`(`com.google.common.util.concurrent.ServiceManager$ServiceManagerState` v2 @kind this, `com.google.common.util.concurrent.Service` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;.tryStartTiming:(Lcom/google/common/util/concurrent/Service;)V` @AccessFlag  {

  # return;
}
