record `com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.util.concurrent.Executor` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Executor` `com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.delegate` @AccessFlag ;
  `com.google.common.util.concurrent.ExecutionSequencer` `com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.sequencer` @AccessFlag ;
  `java.lang.Thread` `com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.submitting` @AccessFlag ;
  `java.lang.Runnable` `com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor.task` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `com.google.common.util.concurrent.ExecutionSequencer` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.<init>:(Ljava/util/concurrent/Executor;Lcom/google/common/util/concurrent/ExecutionSequencer;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object, `com.google.common.util.concurrent.ExecutionSequencer` v2 @kind object, `com.google.common.util.concurrent.ExecutionSequencer$1` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.<init>:(Ljava/util/concurrent/Executor;Lcom/google/common/util/concurrent/ExecutionSequencer;Lcom/google/common/util/concurrent/ExecutionSequencer$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `access$200`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v0 @kind object) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.access$200:(Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$400`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v0 @kind object) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.access$400:(Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `trySetCancelled`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.trySetCancelled:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `trySetStarted`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.trySetStarted:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `execute`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v4 @kind this, `java.lang.Runnable` v5 @kind object) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `run`(`com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor` v4 @kind this) @signature `Lcom/google/common/util/concurrent/ExecutionSequencer$TaskNonReentrantExecutor;.run:()V` @AccessFlag PUBLIC {

  # return;
}
