record `com.google.common.util.concurrent.Striped$WeakSafeLock` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.ForwardingLock` @kind class {
  `java.util.concurrent.locks.Lock` `com.google.common.util.concurrent.Striped$WeakSafeLock.delegate` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` `com.google.common.util.concurrent.Striped$WeakSafeLock.strongReference` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped$WeakSafeLock` v0 @kind this, `java.util.concurrent.locks.Lock` v1 @kind object, `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeLock;.<init>:(Ljava/util/concurrent/locks/Lock;Lcom/google/common/util/concurrent/Striped$WeakSafeReadWriteLock;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `delegate`(`com.google.common.util.concurrent.Striped$WeakSafeLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeLock;.delegate:()Ljava/util/concurrent/locks/Lock;` @AccessFlag  {

  # return;
}
procedure `java.util.concurrent.locks.Condition` `newCondition`(`com.google.common.util.concurrent.Striped$WeakSafeLock` v3 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeLock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @AccessFlag PUBLIC {

  # return;
}
