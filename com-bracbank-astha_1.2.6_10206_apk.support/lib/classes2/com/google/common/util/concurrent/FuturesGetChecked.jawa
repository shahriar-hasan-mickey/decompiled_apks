record `com.google.common.util.concurrent.FuturesGetChecked` @kind class @AccessFlag FINAL {
}
global `com.google.common.collect.Ordering` `@@com.google.common.util.concurrent.FuturesGetChecked.WITH_STRING_PARAM_FIRST` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.FuturesGetChecked` v0 @kind this) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator` `bestGetCheckedTypeValidator`() @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.bestGetCheckedTypeValidator:()Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidator;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `checkExceptionClassValidity`(`java.lang.Class` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.checkExceptionClassValidity:(Ljava/lang/Class;)V` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `getChecked`(`com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator` v0 @kind object, `java.util.concurrent.Future` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.getChecked:(Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidator;Ljava/util/concurrent/Future;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `getChecked`(`java.util.concurrent.Future` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.getChecked:(Ljava/util/concurrent/Future;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `getChecked`(`java.util.concurrent.Future` v1 @kind object, `java.lang.Class` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.getChecked:(Ljava/util/concurrent/Future;Ljava/lang/Class;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag STATIC {

  # return;
}
procedure `boolean` `hasConstructorUsableByGetChecked`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.hasConstructorUsableByGetChecked:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isCheckedException`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.isCheckedException:(Ljava/lang/Class;)Z` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `newFromConstructor`(`java.lang.reflect.Constructor` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.newFromConstructor:(Ljava/lang/reflect/Constructor;Ljava/lang/Throwable;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Exception` `newWithCause`(`java.lang.Class` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.newWithCause:(Ljava/lang/Class;Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.List` `preferringStrings`(`java.util.List` v1 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.preferringStrings:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator` `weakSetValidator`() @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.weakSetValidator:()Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidator;` @AccessFlag STATIC {

  # return;
}
procedure `void` `wrapAndThrowExceptionOrError`(`java.lang.Throwable` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FuturesGetChecked;.wrapAndThrowExceptionOrError:(Ljava/lang/Throwable;Ljava/lang/Class;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
