record `com.google.common.util.concurrent.Monitor$Guard` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.util.concurrent.locks.Condition` `com.google.common.util.concurrent.Monitor$Guard.condition` @AccessFlag FINAL;
  `com.google.common.util.concurrent.Monitor` `com.google.common.util.concurrent.Monitor$Guard.monitor` @AccessFlag FINAL;
  `com.google.common.util.concurrent.Monitor$Guard` `com.google.common.util.concurrent.Monitor$Guard.next` @AccessFlag ;
  `int` `com.google.common.util.concurrent.Monitor$Guard.waiterCount` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Monitor$Guard` v1 @kind this, `com.google.common.util.concurrent.Monitor` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor$Guard;.<init>:(Lcom/google/common/util/concurrent/Monitor;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `boolean` `isSatisfied`() @signature `Lcom/google/common/util/concurrent/Monitor$Guard;.isSatisfied:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
