record `com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.AbstractCatchingFuture` @kind class {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` v0 @kind this, `com.google.common.util.concurrent.ListenableFuture` v1 @kind object, `java.lang.Class` v2 @kind object, `com.google.common.util.concurrent.AsyncFunction` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture$AsyncCatchingFuture;.<init>:(Lcom/google/common/util/concurrent/ListenableFuture;Ljava/lang/Class;Lcom/google/common/util/concurrent/AsyncFunction;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `doFallback`(`com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` v1 @kind this, `com.google.common.util.concurrent.AsyncFunction` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture$AsyncCatchingFuture;.doFallback:(Lcom/google/common/util/concurrent/AsyncFunction;Ljava/lang/Throwable;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `doFallback`(`com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture$AsyncCatchingFuture;.doFallback:(Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `void` `setResult`(`com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` v0 @kind this, `com.google.common.util.concurrent.ListenableFuture` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture$AsyncCatchingFuture;.setResult:(Lcom/google/common/util/concurrent/ListenableFuture;)V` @AccessFlag  {

  # return;
}
procedure `void` `setResult`(`com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture$AsyncCatchingFuture;.setResult:(Ljava/lang/Object;)V` @AccessFlag SYNTHETIC {

  # return;
}
