record `com.google.common.util.concurrent.Futures$InCompletionOrderState` @kind class @AccessFlag FINAL {
  `int` `com.google.common.util.concurrent.Futures$InCompletionOrderState.delegateIndex` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `com.google.common.util.concurrent.Futures$InCompletionOrderState.incompleteOutputCount` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.ListenableFuture`[] `com.google.common.util.concurrent.Futures$InCompletionOrderState.inputFutures` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.common.util.concurrent.Futures$InCompletionOrderState.shouldInterrupt` @AccessFlag PRIVATE;
  `boolean` `com.google.common.util.concurrent.Futures$InCompletionOrderState.wasCancelled` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v2 @kind this, `com.google.common.util.concurrent.ListenableFuture`[] v3 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.<init>:([Lcom/google/common/util/concurrent/ListenableFuture;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v0 @kind this, `com.google.common.util.concurrent.ListenableFuture`[] v1 @kind object, `com.google.common.util.concurrent.Futures$1` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.<init>:([Lcom/google/common/util/concurrent/ListenableFuture;Lcom/google/common/util/concurrent/Futures$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `access$300`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v0 @kind object, `com.google.common.collect.ImmutableList` v1 @kind object, `int` v2 ) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.access$300:(Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;Lcom/google/common/collect/ImmutableList;I)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$400`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v0 @kind object, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.access$400:(Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;Z)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture`[] `access$500`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v0 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.access$500:(Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;)[Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.atomic.AtomicInteger` `access$600`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v0 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.access$600:(Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;)Ljava/util/concurrent/atomic/AtomicInteger;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `recordCompletion`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v5 @kind this) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.recordCompletion:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `recordInputCompletion`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v3 @kind this, `com.google.common.collect.ImmutableList` v4 @kind object, `int` v5 ) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.recordInputCompletion:(Lcom/google/common/collect/ImmutableList;I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `recordOutputCancellation`(`com.google.common.util.concurrent.Futures$InCompletionOrderState` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/Futures$InCompletionOrderState;.recordOutputCancellation:(Z)V` @AccessFlag PRIVATE {

  # return;
}
