record `com.google.common.util.concurrent.CycleDetectingLockFactory` @kind class @AccessFlag PUBLIC {
  `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` `com.google.common.util.concurrent.CycleDetectingLockFactory.policy` @AccessFlag FINAL;
}
global `java.lang.ThreadLocal` `@@com.google.common.util.concurrent.CycleDetectingLockFactory.acquiredLocks` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.common.util.concurrent.CycleDetectingLockFactory.lockGraphNodesPerType` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.logging.Logger` `@@com.google.common.util.concurrent.CycleDetectingLockFactory.logger` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v1 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$1` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `aboutToAcquire`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v2 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock` v3 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.aboutToAcquire:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.logging.Logger` `access$100`() @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.access$100:()Ljava/util/logging/Logger;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$600`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v0 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock` v1 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.access$600:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$700`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock` v0 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.access$700:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.Map` `createNodes`(`java.lang.Class` v9 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.createNodes:(Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.String` `getLockName`(`java.lang.Enum` v3 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.getLockName:(Ljava/lang/Enum;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `getOrCreateNodes`(`java.lang.Class` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.getOrCreateNodes:(Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `lockStateChanged`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock` v3 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.lockStateChanged:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.CycleDetectingLockFactory` `newInstance`(`com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v1 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newInstance:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)Lcom/google/common/util/concurrent/CycleDetectingLockFactory;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering` `newInstanceWithExplicitOrdering`(`java.lang.Class` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$Policy` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newInstanceWithExplicitOrdering:(Ljava/lang/Class;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantLock` `newReentrantLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newReentrantLock:(Ljava/lang/String;)Ljava/util/concurrent/locks/ReentrantLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantLock` `newReentrantLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v2 @kind this, `java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newReentrantLock:(Ljava/lang/String;Z)Ljava/util/concurrent/locks/ReentrantLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock` `newReentrantReadWriteLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newReentrantReadWriteLock:(Ljava/lang/String;)Ljava/util/concurrent/locks/ReentrantReadWriteLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock` `newReentrantReadWriteLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory` v2 @kind this, `java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory;.newReentrantReadWriteLock:(Ljava/lang/String;Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;` @AccessFlag PUBLIC {

  # return;
}
