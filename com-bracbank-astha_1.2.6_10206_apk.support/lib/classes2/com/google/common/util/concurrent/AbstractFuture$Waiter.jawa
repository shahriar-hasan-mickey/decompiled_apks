record `com.google.common.util.concurrent.AbstractFuture$Waiter` @kind class @AccessFlag FINAL {
  `com.google.common.util.concurrent.AbstractFuture$Waiter` `com.google.common.util.concurrent.AbstractFuture$Waiter.next` @AccessFlag VOLATILE;
  `java.lang.Thread` `com.google.common.util.concurrent.AbstractFuture$Waiter.thread` @AccessFlag VOLATILE;
}
global `com.google.common.util.concurrent.AbstractFuture$Waiter` `@@com.google.common.util.concurrent.AbstractFuture$Waiter.TOMBSTONE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/AbstractFuture$Waiter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractFuture$Waiter;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/AbstractFuture$Waiter;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `setNext`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v1 @kind this, `com.google.common.util.concurrent.AbstractFuture$Waiter` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractFuture$Waiter;.setNext:(Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)V` @AccessFlag  {

  # return;
}
procedure `void` `unpark`(`com.google.common.util.concurrent.AbstractFuture$Waiter` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractFuture$Waiter;.unpark:()V` @AccessFlag  {

  # return;
}
