record `com.google.common.util.concurrent.AbstractCatchingFuture` @kind class @AccessFlag ABSTRACT extends `com.google.common.util.concurrent.FluentFuture$TrustedFuture` @kind class, `java.lang.Runnable` @kind interface {
  `java.lang.Class` `com.google.common.util.concurrent.AbstractCatchingFuture.exceptionType` @AccessFlag ;
  `java.lang.Object` `com.google.common.util.concurrent.AbstractCatchingFuture.fallback` @AccessFlag ;
  `com.google.common.util.concurrent.ListenableFuture` `com.google.common.util.concurrent.AbstractCatchingFuture.inputFuture` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractCatchingFuture` v0 @kind this, `com.google.common.util.concurrent.ListenableFuture` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.<init>:(Lcom/google/common/util/concurrent/ListenableFuture;Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `create`(`com.google.common.util.concurrent.ListenableFuture` v1 @kind object, `java.lang.Class` v2 @kind object, `com.google.common.base.Function` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.create:(Lcom/google/common/util/concurrent/ListenableFuture;Ljava/lang/Class;Lcom/google/common/base/Function;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `create`(`com.google.common.util.concurrent.ListenableFuture` v1 @kind object, `java.lang.Class` v2 @kind object, `com.google.common.util.concurrent.AsyncFunction` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.create:(Lcom/google/common/util/concurrent/ListenableFuture;Ljava/lang/Class;Lcom/google/common/util/concurrent/AsyncFunction;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag STATIC {

  # return;
}
procedure `void` `afterDone`(`com.google.common.util.concurrent.AbstractCatchingFuture` v1 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.afterDone:()V` @AccessFlag PROTECTED_FINAL {

  # return;
}
procedure `java.lang.Object` `doFallback`(`java.lang.Object` v0 @kind object, `java.lang.Throwable` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.doFallback:(Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.lang.String` `pendingToString`(`com.google.common.util.concurrent.AbstractCatchingFuture` v6 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.pendingToString:()Ljava/lang/String;` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `run`(`com.google.common.util.concurrent.AbstractCatchingFuture` v9 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.run:()V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `void` `setResult`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractCatchingFuture;.setResult:(Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
