record `com.google.common.util.concurrent.AtomicDoubleArray` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface {
  `java.util.concurrent.atomic.AtomicLongArray` `com.google.common.util.concurrent.AtomicDoubleArray.longs` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@com.google.common.util.concurrent.AtomicDoubleArray.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.util.concurrent.AtomicDoubleArray` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AtomicDoubleArray` v5 @kind this, `double`[] v6 @kind object) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.<init>:([D)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `readObject`(`com.google.common.util.concurrent.AtomicDoubleArray` v5 @kind this, `java.io.ObjectInputStream` v6 @kind object) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `writeObject`(`com.google.common.util.concurrent.AtomicDoubleArray` v4 @kind this, `java.io.ObjectOutputStream` v5 @kind object) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `double` `addAndGet`(`com.google.common.util.concurrent.AtomicDoubleArray` v9 @kind this, `int` v10 , `double` v11 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.addAndGet:(ID)D` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `compareAndSet`(`com.google.common.util.concurrent.AtomicDoubleArray` v6 @kind this, `int` v7 , `double` v8 , `double` v10 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.compareAndSet:(IDD)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `get`(`com.google.common.util.concurrent.AtomicDoubleArray` v2 @kind this, `int` v3 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.get:(I)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `getAndAdd`(`com.google.common.util.concurrent.AtomicDoubleArray` v9 @kind this, `int` v10 , `double` v11 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.getAndAdd:(ID)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `getAndSet`(`com.google.common.util.concurrent.AtomicDoubleArray` v1 @kind this, `int` v2 , `double` v3 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.getAndSet:(ID)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `void` `lazySet`(`com.google.common.util.concurrent.AtomicDoubleArray` v1 @kind this, `int` v2 , `double` v3 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.lazySet:(ID)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `int` `length`(`com.google.common.util.concurrent.AtomicDoubleArray` v1 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.length:()I` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `void` `set`(`com.google.common.util.concurrent.AtomicDoubleArray` v1 @kind this, `int` v2 , `double` v3 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.set:(ID)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.util.concurrent.AtomicDoubleArray` v5 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `weakCompareAndSet`(`com.google.common.util.concurrent.AtomicDoubleArray` v6 @kind this, `int` v7 , `double` v8 , `double` v10 ) @signature `Lcom/google/common/util/concurrent/AtomicDoubleArray;.weakCompareAndSet:(IDD)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
