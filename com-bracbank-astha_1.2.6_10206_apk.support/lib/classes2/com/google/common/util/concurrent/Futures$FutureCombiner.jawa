record `com.google.common.util.concurrent.Futures$FutureCombiner` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.google.common.util.concurrent.Futures$FutureCombiner.allMustSucceed` @AccessFlag PRIVATE_FINAL;
  `com.google.common.collect.ImmutableList` `com.google.common.util.concurrent.Futures$FutureCombiner.futures` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Futures$FutureCombiner` v0 @kind this, `boolean` v1 , `com.google.common.collect.ImmutableList` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$FutureCombiner;.<init>:(ZLcom/google/common/collect/ImmutableList;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Futures$FutureCombiner` v0 @kind this, `boolean` v1 , `com.google.common.collect.ImmutableList` v2 @kind object, `com.google.common.util.concurrent.Futures$1` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$FutureCombiner;.<init>:(ZLcom/google/common/collect/ImmutableList;Lcom/google/common/util/concurrent/Futures$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `call`(`com.google.common.util.concurrent.Futures$FutureCombiner` v3 @kind this, `java.util.concurrent.Callable` v4 @kind object, `java.util.concurrent.Executor` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$FutureCombiner;.call:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `callAsync`(`com.google.common.util.concurrent.Futures$FutureCombiner` v3 @kind this, `com.google.common.util.concurrent.AsyncCallable` v4 @kind object, `java.util.concurrent.Executor` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$FutureCombiner;.callAsync:(Lcom/google/common/util/concurrent/AsyncCallable;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `run`(`com.google.common.util.concurrent.Futures$FutureCombiner` v1 @kind this, `java.lang.Runnable` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$FutureCombiner;.run:(Ljava/lang/Runnable;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag PUBLIC {

  # return;
}
