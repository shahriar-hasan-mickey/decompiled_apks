record `com.google.common.util.concurrent.ForwardingCondition` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.locks.Condition` @kind interface {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ForwardingCondition` v0 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `await`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.await:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `await`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `awaitNanos`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this, `long` v2 ) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.awaitNanos:(J)J` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `awaitUninterruptibly`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.awaitUninterruptibly:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `awaitUntil`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this, `java.util.Date` v2 @kind object) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.awaitUntil:(Ljava/util/Date;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.Condition` `delegate`() @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.delegate:()Ljava/util/concurrent/locks/Condition;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `signal`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.signal:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `signalAll`(`com.google.common.util.concurrent.ForwardingCondition` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ForwardingCondition;.signalAll:()V` @AccessFlag PUBLIC {

  # return;
}
