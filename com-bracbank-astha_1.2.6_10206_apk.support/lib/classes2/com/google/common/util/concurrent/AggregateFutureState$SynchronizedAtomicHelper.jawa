record `com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.AggregateFutureState$AtomicHelper` @kind class {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper` v1 @kind this) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SynchronizedAtomicHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper` v0 @kind this, `com.google.common.util.concurrent.AggregateFutureState$1` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SynchronizedAtomicHelper;.<init>:(Lcom/google/common/util/concurrent/AggregateFutureState$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `compareAndSetSeenExceptions`(`com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper` v1 @kind this, `com.google.common.util.concurrent.AggregateFutureState` v2 @kind object, `java.util.Set` v3 @kind object, `java.util.Set` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SynchronizedAtomicHelper;.compareAndSetSeenExceptions:(Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set;Ljava/util/Set;)V` @AccessFlag  {

  # return;
}
procedure `int` `decrementAndGetRemainingCount`(`com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper` v1 @kind this, `com.google.common.util.concurrent.AggregateFutureState` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SynchronizedAtomicHelper;.decrementAndGetRemainingCount:(Lcom/google/common/util/concurrent/AggregateFutureState;)I` @AccessFlag  {

  # return;
}
