record `com.google.common.util.concurrent.InterruptibleTask$Blocker` @kind class @AccessFlag FINAL extends `java.util.concurrent.locks.AbstractOwnableSynchronizer` @kind class, `java.lang.Runnable` @kind interface {
  `com.google.common.util.concurrent.InterruptibleTask` `com.google.common.util.concurrent.InterruptibleTask$Blocker.task` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v0 @kind this, `com.google.common.util.concurrent.InterruptibleTask` v1 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.<init>:(Lcom/google/common/util/concurrent/InterruptibleTask;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v0 @kind this, `com.google.common.util.concurrent.InterruptibleTask` v1 @kind object, `com.google.common.util.concurrent.InterruptibleTask$1` v2 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.<init>:(Lcom/google/common/util/concurrent/InterruptibleTask;Lcom/google/common/util/concurrent/InterruptibleTask$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `access$200`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v0 @kind object, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.access$200:(Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;Ljava/lang/Thread;)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `setOwner`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v0 @kind this, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.setOwner:(Ljava/lang/Thread;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `run`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v0 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.run:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.util.concurrent.InterruptibleTask$Blocker` v1 @kind this) @signature `Lcom/google/common/util/concurrent/InterruptibleTask$Blocker;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
