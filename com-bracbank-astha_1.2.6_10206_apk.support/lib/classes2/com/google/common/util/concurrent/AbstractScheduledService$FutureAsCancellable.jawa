record `com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.AbstractScheduledService$Cancellable` @kind interface {
  `java.util.concurrent.Future` `com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable.delegate` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable` v0 @kind this, `java.util.concurrent.Future` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$FutureAsCancellable;.<init>:(Ljava/util/concurrent/Future;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `cancel`(`com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$FutureAsCancellable;.cancel:(Z)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`com.google.common.util.concurrent.AbstractScheduledService$FutureAsCancellable` v1 @kind this) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$FutureAsCancellable;.isCancelled:()Z` @AccessFlag PUBLIC {

  # return;
}
