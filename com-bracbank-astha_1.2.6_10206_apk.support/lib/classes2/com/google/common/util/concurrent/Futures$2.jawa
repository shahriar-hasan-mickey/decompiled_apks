record `com.google.common.util.concurrent.Futures$2` @kind class @AccessFlag  extends `java.util.concurrent.Future` @kind interface {
  `com.google.common.base.Function` `com.google.common.util.concurrent.Futures$2.val$function` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.Future` `com.google.common.util.concurrent.Futures$2.val$input` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Futures$2` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `com.google.common.base.Function` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$2;.<init>:(Ljava/util/concurrent/Future;Lcom/google/common/base/Function;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `applyTransformation`(`com.google.common.util.concurrent.Futures$2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$2;.applyTransformation:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `cancel`(`com.google.common.util.concurrent.Futures$2` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/Futures$2;.cancel:(Z)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.util.concurrent.Futures$2` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Futures$2;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.util.concurrent.Futures$2` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/Futures$2;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`com.google.common.util.concurrent.Futures$2` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Futures$2;.isCancelled:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDone`(`com.google.common.util.concurrent.Futures$2` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Futures$2;.isDone:()Z` @AccessFlag PUBLIC {

  # return;
}
