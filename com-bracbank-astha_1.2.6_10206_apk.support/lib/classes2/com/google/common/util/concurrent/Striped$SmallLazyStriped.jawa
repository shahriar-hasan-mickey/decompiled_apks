record `com.google.common.util.concurrent.Striped$SmallLazyStriped` @kind class @AccessFlag  extends `com.google.common.util.concurrent.Striped$PowerOfTwoStriped` @kind class {
  `java.util.concurrent.atomic.AtomicReferenceArray` `com.google.common.util.concurrent.Striped$SmallLazyStriped.locks` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.google.common.util.concurrent.Striped$SmallLazyStriped.queue` @AccessFlag FINAL;
  `int` `com.google.common.util.concurrent.Striped$SmallLazyStriped.size` @AccessFlag FINAL;
  `com.google.common.base.Supplier` `com.google.common.util.concurrent.Striped$SmallLazyStriped.supplier` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped$SmallLazyStriped` v1 @kind this, `int` v2 , `com.google.common.base.Supplier` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Striped$SmallLazyStriped;.<init>:(ILcom/google/common/base/Supplier;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `drainQueue`(`com.google.common.util.concurrent.Striped$SmallLazyStriped` v4 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$SmallLazyStriped;.drainQueue:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Object` `getAt`(`com.google.common.util.concurrent.Striped$SmallLazyStriped` v5 @kind this, `int` v6 ) @signature `Lcom/google/common/util/concurrent/Striped$SmallLazyStriped;.getAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`com.google.common.util.concurrent.Striped$SmallLazyStriped` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$SmallLazyStriped;.size:()I` @AccessFlag PUBLIC {

  # return;
}
