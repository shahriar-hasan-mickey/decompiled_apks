record `com.google.common.util.concurrent.ClosingFuture$Combiner` @kind class @AccessFlag PUBLIC {
  `boolean` `com.google.common.util.concurrent.ClosingFuture$Combiner.allMustSucceed` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.ClosingFuture$CloseableList` `com.google.common.util.concurrent.ClosingFuture$Combiner.closeables` @AccessFlag PRIVATE_FINAL;
  `com.google.common.collect.ImmutableList` `com.google.common.util.concurrent.ClosingFuture$Combiner.inputs` @AccessFlag PROTECTED_FINAL;
}
global `com.google.common.base.Function` `@@com.google.common.util.concurrent.ClosingFuture$Combiner.INNER_FUTURE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v2 @kind this, `boolean` v3 , `java.lang.Iterable` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.<init>:(ZLjava/lang/Iterable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v0 @kind this, `boolean` v1 , `java.lang.Iterable` v2 @kind object, `com.google.common.util.concurrent.ClosingFuture$1` v3 @kind object) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.<init>:(ZLjava/lang/Iterable;Lcom/google/common/util/concurrent/ClosingFuture$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.ClosingFuture$CloseableList` `access$1300`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v0 @kind object) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.access$1300:(Lcom/google/common/util/concurrent/ClosingFuture$Combiner;)Lcom/google/common/util/concurrent/ClosingFuture$CloseableList;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.util.concurrent.Futures$FutureCombiner` `futureCombiner`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v1 @kind this) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.futureCombiner:()Lcom/google/common/util/concurrent/Futures$FutureCombiner;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.collect.ImmutableList` `inputFutures`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v2 @kind this) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.inputFutures:()Lcom/google/common/collect/ImmutableList;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.util.concurrent.ClosingFuture` `call`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v2 @kind this, `com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.call:(Lcom/google/common/util/concurrent/ClosingFuture$Combiner$CombiningCallable;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ClosingFuture;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.ClosingFuture` `callAsync`(`com.google.common.util.concurrent.ClosingFuture$Combiner` v2 @kind this, `com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/google/common/util/concurrent/ClosingFuture$Combiner;.callAsync:(Lcom/google/common/util/concurrent/ClosingFuture$Combiner$AsyncCombiningCallable;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ClosingFuture;` @AccessFlag PUBLIC {

  # return;
}
