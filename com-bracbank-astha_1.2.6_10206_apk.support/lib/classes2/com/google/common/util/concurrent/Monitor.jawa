record `com.google.common.util.concurrent.Monitor` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.common.util.concurrent.Monitor$Guard` `com.google.common.util.concurrent.Monitor.activeGuards` @AccessFlag PRIVATE;
  `boolean` `com.google.common.util.concurrent.Monitor.fair` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.ReentrantLock` `com.google.common.util.concurrent.Monitor.lock` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/Monitor;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantLock` `access$000`(`com.google.common.util.concurrent.Monitor` v0 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.access$000:(Lcom/google/common/util/concurrent/Monitor;)Ljava/util/concurrent/locks/ReentrantLock;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `await`(`com.google.common.util.concurrent.Monitor` v0 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v1 @kind object, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/Monitor;.await:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `awaitNanos`(`com.google.common.util.concurrent.Monitor` v6 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v7 @kind object, `long` v8 , `boolean` v10 ) @signature `Lcom/google/common/util/concurrent/Monitor;.awaitNanos:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `awaitUninterruptibly`(`com.google.common.util.concurrent.Monitor` v0 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v1 @kind object, `boolean` v2 ) @signature `Lcom/google/common/util/concurrent/Monitor;.awaitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `beginWaitingFor`(`com.google.common.util.concurrent.Monitor` v2 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.beginWaitingFor:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `endWaitingFor`(`com.google.common.util.concurrent.Monitor` v4 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.endWaitingFor:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `initNanoTime`(`long` v3 ) @signature `Lcom/google/common/util/concurrent/Monitor;.initNanoTime:(J)J` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isSatisfied`(`com.google.common.util.concurrent.Monitor` v0 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v1 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.isSatisfied:(Lcom/google/common/util/concurrent/Monitor$Guard;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `remainingNanos`(`long` v3 , `long` v5 ) @signature `Lcom/google/common/util/concurrent/Monitor;.remainingNanos:(JJ)J` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `signalAllWaiters`(`com.google.common.util.concurrent.Monitor` v2 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.signalAllWaiters:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `signalNextWaiter`(`com.google.common.util.concurrent.Monitor` v2 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.signalNextWaiter:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `toSafeNanos`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.toSafeNanos:(JLjava/util/concurrent/TimeUnit;)J` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `enter`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.enter:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enter`(`com.google.common.util.concurrent.Monitor` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enter:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterIf`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterIf:(Lcom/google/common/util/concurrent/Monitor$Guard;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterIf`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterIf:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterIfInterruptibly`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterIfInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterIfInterruptibly`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterIfInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `enterInterruptibly`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.enterInterruptibly:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterInterruptibly`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterInterruptibly:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `enterWhen`(`com.google.common.util.concurrent.Monitor` v2 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterWhen:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterWhen`(`com.google.common.util.concurrent.Monitor` v10 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v11 @kind object, `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterWhen:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `enterWhenUninterruptibly`(`com.google.common.util.concurrent.Monitor` v2 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterWhenUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `enterWhenUninterruptibly`(`com.google.common.util.concurrent.Monitor` v11 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v12 @kind object, `long` v13 , `java.util.concurrent.TimeUnit` v15 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.enterWhenUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOccupiedDepth`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.getOccupiedDepth:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getQueueLength`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.getQueueLength:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getWaitQueueLength`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.getWaitQueueLength:(Lcom/google/common/util/concurrent/Monitor$Guard;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasQueuedThread`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `java.lang.Thread` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.hasQueuedThread:(Ljava/lang/Thread;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasQueuedThreads`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.hasQueuedThreads:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasWaiters`(`com.google.common.util.concurrent.Monitor` v0 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v1 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.hasWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isFair`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.isFair:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isOccupied`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.isOccupied:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isOccupiedByCurrentThread`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.isOccupiedByCurrentThread:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `leave`(`com.google.common.util.concurrent.Monitor` v3 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.leave:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryEnter`(`com.google.common.util.concurrent.Monitor` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Monitor;.tryEnter:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryEnterIf`(`com.google.common.util.concurrent.Monitor` v2 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.tryEnterIf:(Lcom/google/common/util/concurrent/Monitor$Guard;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `waitFor`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.waitFor:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `waitFor`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.waitFor:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `waitForUninterruptibly`(`com.google.common.util.concurrent.Monitor` v1 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.waitForUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `waitForUninterruptibly`(`com.google.common.util.concurrent.Monitor` v6 @kind this, `com.google.common.util.concurrent.Monitor$Guard` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lcom/google/common/util/concurrent/Monitor;.waitForUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
