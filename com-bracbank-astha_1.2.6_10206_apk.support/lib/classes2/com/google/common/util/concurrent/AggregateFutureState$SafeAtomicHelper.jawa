record `com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper` @kind class @AccessFlag FINAL extends `com.google.common.util.concurrent.AggregateFutureState$AtomicHelper` @kind class {
  `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper.remainingCountUpdater` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper.seenExceptionsUpdater` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v2 @kind object, `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SafeAtomicHelper;.<init>:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `compareAndSetSeenExceptions`(`com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper` v1 @kind this, `com.google.common.util.concurrent.AggregateFutureState` v2 @kind object, `java.util.Set` v3 @kind object, `java.util.Set` v4 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SafeAtomicHelper;.compareAndSetSeenExceptions:(Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set;Ljava/util/Set;)V` @AccessFlag  {

  # return;
}
procedure `int` `decrementAndGetRemainingCount`(`com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper` v1 @kind this, `com.google.common.util.concurrent.AggregateFutureState` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AggregateFutureState$SafeAtomicHelper;.decrementAndGetRemainingCount:(Lcom/google/common/util/concurrent/AggregateFutureState;)I` @AccessFlag  {

  # return;
}
