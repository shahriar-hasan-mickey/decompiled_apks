record `com.google.common.util.concurrent.SimpleTimeLimiter` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.util.concurrent.TimeLimiter` @kind interface {
  `java.util.concurrent.ExecutorService` `com.google.common.util.concurrent.SimpleTimeLimiter.executor` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.SimpleTimeLimiter` v0 @kind this, `java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `access$000`(`com.google.common.util.concurrent.SimpleTimeLimiter` v0 @kind object, `java.util.concurrent.Callable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `boolean` v5 ) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.access$000:(Lcom/google/common/util/concurrent/SimpleTimeLimiter;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Z)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Exception` `access$100`(`java.lang.Exception` v0 @kind object, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.access$100:(Ljava/lang/Exception;Z)Ljava/lang/Exception;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `callWithTimeout`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `boolean` v6 ) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.callWithTimeout:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Z)Ljava/lang/Object;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `checkPositiveTimeout`(`long` v3 ) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.checkPositiveTimeout:(J)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.SimpleTimeLimiter` `create`(`java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.create:(Ljava/util/concurrent/ExecutorService;)Lcom/google/common/util/concurrent/SimpleTimeLimiter;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `declaresInterruptedEx`(`java.lang.reflect.Method` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.declaresInterruptedEx:(Ljava/lang/reflect/Method;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Set` `findInterruptibleMethods`(`java.lang.Class` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.findInterruptibleMethods:(Ljava/lang/Class;)Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Object` `newProxy`(`java.lang.Class` v3 @kind object, `java.lang.reflect.InvocationHandler` v4 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.newProxy:(Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Exception` `throwCause`(`java.lang.Exception` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.throwCause:(Ljava/lang/Exception;Z)Ljava/lang/Exception;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `wrapAndThrowExecutionExceptionOrError`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.wrapAndThrowExecutionExceptionOrError:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `wrapAndThrowRuntimeExecutionExceptionOrError`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.wrapAndThrowRuntimeExecutionExceptionOrError:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Object` `callUninterruptiblyWithTimeout`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.callUninterruptiblyWithTimeout:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `callWithTimeout`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.callWithTimeout:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `newProxy`(`com.google.common.util.concurrent.SimpleTimeLimiter` v9 @kind this, `java.lang.Object` v10 @kind object, `java.lang.Class` v11 @kind object, `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.newProxy:(Ljava/lang/Object;Ljava/lang/Class;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `runUninterruptiblyWithTimeout`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.runUninterruptiblyWithTimeout:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `runWithTimeout`(`com.google.common.util.concurrent.SimpleTimeLimiter` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/SimpleTimeLimiter;.runWithTimeout:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {

  # return;
}
