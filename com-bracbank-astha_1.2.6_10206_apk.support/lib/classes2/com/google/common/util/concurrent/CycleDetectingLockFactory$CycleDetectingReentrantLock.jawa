record `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` @kind class @AccessFlag FINAL extends `java.util.concurrent.locks.ReentrantLock` @kind class, `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock` @kind interface {
  `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockGraphNode` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.CycleDetectingLockFactory` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v2 @kind object, `boolean` v3 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` v2 @kind object, `boolean` v3 , `com.google.common.util.concurrent.CycleDetectingLockFactory$1` v4 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode` `getLockGraphNode`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.getLockGraphNode:()Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isAcquiredByCurrentThread`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.isAcquiredByCurrentThread:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.lock:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lockInterruptibly`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.lockInterruptibly:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.tryLock:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.tryLock:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `unlock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock;.unlock:()V` @AccessFlag PUBLIC {

  # return;
}
