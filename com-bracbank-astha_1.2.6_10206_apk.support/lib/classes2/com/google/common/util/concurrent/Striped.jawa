record `com.google.common.util.concurrent.Striped` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `int` `@@com.google.common.util.concurrent.Striped.ALL_SET` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.common.util.concurrent.Striped.LARGE_LAZY_CUTOFF` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped` v0 @kind this) @signature `Lcom/google/common/util/concurrent/Striped;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped` v0 @kind this, `com.google.common.util.concurrent.Striped$1` v1 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.<init>:(Lcom/google/common/util/concurrent/Striped$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.Semaphore` `a`(`int` v0 ) @signature `Lcom/google/common/util/concurrent/Striped;.a:(I)Ljava/util/concurrent/Semaphore;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$200`(`int` v0 ) @signature `Lcom/google/common/util/concurrent/Striped;.access$200:(I)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `int` `access$300`(`int` v0 ) @signature `Lcom/google/common/util/concurrent/Striped;.access$300:(I)I` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `b`() @signature `Lcom/google/common/util/concurrent/Striped;.b:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Semaphore` `c`(`int` v0 ) @signature `Lcom/google/common/util/concurrent/Striped;.c:(I)Ljava/util/concurrent/Semaphore;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `int` `ceilToPowerOfTwo`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.ceilToPowerOfTwo:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `custom`(`int` v2 , `com.google.common.base.Supplier` v3 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.custom:(ILcom/google/common/base/Supplier;)Lcom/google/common/util/concurrent/Striped;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `lambda$lazyWeakLock$0`() @signature `Lcom/google/common/util/concurrent/Striped;.lambda$lazyWeakLock$0:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Semaphore` `lambda$lazyWeakSemaphore$2`(`int` v2 ) @signature `Lcom/google/common/util/concurrent/Striped;.lambda$lazyWeakSemaphore$2:(I)Ljava/util/concurrent/Semaphore;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Semaphore` `lambda$semaphore$1`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.lambda$semaphore$1:(I)Ljava/util/concurrent/Semaphore;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `lazy`(`int` v1 , `com.google.common.base.Supplier` v2 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.lazy:(ILcom/google/common/base/Supplier;)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `lazyWeakLock`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.lazyWeakLock:(I)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `lazyWeakReadWriteLock`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.lazyWeakReadWriteLock:(I)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `lazyWeakSemaphore`(`int` v1 , `int` v2 ) @signature `Lcom/google/common/util/concurrent/Striped;.lazyWeakSemaphore:(II)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `lock`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.lock:(I)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `readWriteLock`(`int` v1 ) @signature `Lcom/google/common/util/concurrent/Striped;.readWriteLock:(I)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.Striped` `semaphore`(`int` v1 , `int` v2 ) @signature `Lcom/google/common/util/concurrent/Striped;.semaphore:(II)Lcom/google/common/util/concurrent/Striped;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `smear`(`int` v2 ) @signature `Lcom/google/common/util/concurrent/Striped;.smear:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Iterable` `bulkGet`(`com.google.common.util.concurrent.Striped` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.bulkGet:(Ljava/lang/Iterable;)Ljava/lang/Iterable;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getAt`(`int` v0 ) @signature `Lcom/google/common/util/concurrent/Striped;.getAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `indexFor`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/util/concurrent/Striped;.indexFor:(Ljava/lang/Object;)I` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `size`() @signature `Lcom/google/common/util/concurrent/Striped;.size:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
