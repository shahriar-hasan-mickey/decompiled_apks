record `com.google.common.util.concurrent.FluentFuture` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization` @kind class {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this) @signature `Lcom/google/common/util/concurrent/FluentFuture;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `from`(`com.google.common.util.concurrent.FluentFuture` v0 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.from:(Lcom/google/common/util/concurrent/FluentFuture;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `from`(`com.google.common.util.concurrent.ListenableFuture` v1 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.from:(Lcom/google/common/util/concurrent/ListenableFuture;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `addCallback`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `com.google.common.util.concurrent.FutureCallback` v1 @kind object, `java.util.concurrent.Executor` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.addCallback:(Lcom/google/common/util/concurrent/FutureCallback;Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `catching`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `java.lang.Class` v1 @kind object, `com.google.common.base.Function` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.catching:(Ljava/lang/Class;Lcom/google/common/base/Function;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `catchingAsync`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `java.lang.Class` v1 @kind object, `com.google.common.util.concurrent.AsyncFunction` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.catchingAsync:(Ljava/lang/Class;Lcom/google/common/util/concurrent/AsyncFunction;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `transform`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `com.google.common.base.Function` v1 @kind object, `java.util.concurrent.Executor` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.transform:(Lcom/google/common/base/Function;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `transformAsync`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `com.google.common.util.concurrent.AsyncFunction` v1 @kind object, `java.util.concurrent.Executor` v2 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.transformAsync:(Lcom/google/common/util/concurrent/AsyncFunction;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.util.concurrent.FluentFuture` `withTimeout`(`com.google.common.util.concurrent.FluentFuture` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `java.util.concurrent.ScheduledExecutorService` v4 @kind object) @signature `Lcom/google/common/util/concurrent/FluentFuture;.withTimeout:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ScheduledExecutorService;)Lcom/google/common/util/concurrent/FluentFuture;` @AccessFlag PUBLIC_FINAL {

  # return;
}
