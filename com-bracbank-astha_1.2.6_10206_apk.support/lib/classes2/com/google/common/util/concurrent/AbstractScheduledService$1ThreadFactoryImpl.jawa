record `com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `com.google.common.util.concurrent.AbstractScheduledService` `com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl` v0 @kind this, `com.google.common.util.concurrent.AbstractScheduledService` v1 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$1ThreadFactoryImpl;.<init>:(Lcom/google/common/util/concurrent/AbstractScheduledService;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Thread` `newThread`(`com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/AbstractScheduledService$1ThreadFactoryImpl;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {

  # return;
}
