record `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` @kind class @AccessFlag FINAL extends `java.util.concurrent.locks.ReadWriteLock` @kind interface {
  `java.util.concurrent.locks.ReadWriteLock` `com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock.delegate` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeReadWriteLock;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `readLock`(`com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `writeLock`(`com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/Striped$WeakSafeReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PUBLIC {

  # return;
}
