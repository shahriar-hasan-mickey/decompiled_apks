record `com.google.common.util.concurrent.MoreExecutors$4` @kind class @AccessFlag  extends `com.google.common.util.concurrent.WrappingScheduledExecutorService` @kind class {
  `com.google.common.base.Supplier` `com.google.common.util.concurrent.MoreExecutors$4.val$nameSupplier` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.MoreExecutors$4` v0 @kind this, `java.util.concurrent.ScheduledExecutorService` v1 @kind object, `com.google.common.base.Supplier` v2 @kind object) @signature `Lcom/google/common/util/concurrent/MoreExecutors$4;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;Lcom/google/common/base/Supplier;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Runnable` `wrapTask`(`com.google.common.util.concurrent.MoreExecutors$4` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/MoreExecutors$4;.wrapTask:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.util.concurrent.Callable` `wrapTask`(`com.google.common.util.concurrent.MoreExecutors$4` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lcom/google/common/util/concurrent/MoreExecutors$4;.wrapTask:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;` @AccessFlag PROTECTED {

  # return;
}
