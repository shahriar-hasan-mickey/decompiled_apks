record `com.google.protobuf.Utf8$DecodeUtil` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`com.google.protobuf.Utf8$DecodeUtil` v0 @kind this) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `access$1000`(`byte` v0 , `byte` v1 , `byte` v2 , `byte` v3 , `char`[] v4 @kind object, `int` v5 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$1000:(BBBB[CI)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$400`(`byte` v0 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$400:(B)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$500`(`byte` v0 , `char`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$500:(B[CI)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$600`(`byte` v0 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$600:(B)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$700`(`byte` v0 , `byte` v1 , `char`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$700:(BB[CI)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `access$800`(`byte` v0 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$800:(B)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `access$900`(`byte` v0 , `byte` v1 , `byte` v2 , `char`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.access$900:(BBB[CI)V` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `handleFourBytes`(`byte` v2 , `byte` v3 , `byte` v4 , `byte` v5 , `char`[] v6 @kind object, `int` v7 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.handleFourBytes:(BBBB[CI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `handleOneByte`(`byte` v0 , `char`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.handleOneByte:(B[CI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `handleThreeBytes`(`byte` v2 , `byte` v3 , `byte` v4 , `char`[] v5 @kind object, `int` v6 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.handleThreeBytes:(BBB[CI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `handleTwoBytes`(`byte` v1 , `byte` v2 , `char`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.handleTwoBytes:(BB[CI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `char` `highSurrogate`(`int` v1 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.highSurrogate:(I)C` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isNotTrailingByte`(`byte` v1 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.isNotTrailingByte:(B)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isOneByte`(`byte` v0 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.isOneByte:(B)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isThreeBytes`(`byte` v1 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.isThreeBytes:(B)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isTwoBytes`(`byte` v1 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.isTwoBytes:(B)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `char` `lowSurrogate`(`int` v1 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.lowSurrogate:(I)C` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `trailingByteValue`(`byte` v0 ) @signature `Lcom/google/protobuf/Utf8$DecodeUtil;.trailingByteValue:(B)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
