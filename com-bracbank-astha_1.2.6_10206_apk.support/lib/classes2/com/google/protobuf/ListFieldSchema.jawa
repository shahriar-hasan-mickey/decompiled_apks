record `com.google.protobuf.ListFieldSchema` @kind class @AccessFlag ABSTRACT {
}
global `com.google.protobuf.ListFieldSchema` `@@com.google.protobuf.ListFieldSchema.FULL_INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.protobuf.ListFieldSchema` `@@com.google.protobuf.ListFieldSchema.LITE_INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/protobuf/ListFieldSchema;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.protobuf.ListFieldSchema` v0 @kind this) @signature `Lcom/google/protobuf/ListFieldSchema;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.protobuf.ListFieldSchema` v0 @kind this, `com.google.protobuf.ListFieldSchema$1` v1 @kind object) @signature `Lcom/google/protobuf/ListFieldSchema;.<init>:(Lcom/google/protobuf/ListFieldSchema$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.protobuf.ListFieldSchema` `full`() @signature `Lcom/google/protobuf/ListFieldSchema;.full:()Lcom/google/protobuf/ListFieldSchema;` @AccessFlag STATIC {

  # return;
}
procedure `com.google.protobuf.ListFieldSchema` `lite`() @signature `Lcom/google/protobuf/ListFieldSchema;.lite:()Lcom/google/protobuf/ListFieldSchema;` @AccessFlag STATIC {

  # return;
}
procedure `void` `makeImmutableListAt`(`java.lang.Object` v0 @kind object, `long` v1 ) @signature `Lcom/google/protobuf/ListFieldSchema;.makeImmutableListAt:(Ljava/lang/Object;J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `mergeListsAt`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object, `long` v2 ) @signature `Lcom/google/protobuf/ListFieldSchema;.mergeListsAt:(Ljava/lang/Object;Ljava/lang/Object;J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.List` `mutableListAt`(`java.lang.Object` v0 @kind object, `long` v1 ) @signature `Lcom/google/protobuf/ListFieldSchema;.mutableListAt:(Ljava/lang/Object;J)Ljava/util/List;` @AccessFlag ABSTRACT {

  # return;
}
