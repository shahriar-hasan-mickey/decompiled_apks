record `com.google.firebase.firestore.core.CompositeFilter` @kind class @AccessFlag PUBLIC extends `com.google.firebase.firestore.core.Filter` @kind class {
  `java.util.List` `com.google.firebase.firestore.core.CompositeFilter.filters` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.google.firebase.firestore.core.CompositeFilter.memoizedFlattenedFilters` @AccessFlag PRIVATE;
  `com.google.firebase.firestore.core.CompositeFilter$Operator` `com.google.firebase.firestore.core.CompositeFilter.operator` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this, `java.util.List` v2 @kind object, `com.google.firebase.firestore.core.CompositeFilter$Operator` v3 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.<init>:(Ljava/util/List;Lcom/google/firebase/firestore/core/CompositeFilter$Operator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Boolean` `a`(`com.google.firebase.firestore.core.FieldFilter` v0 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.a:(Lcom/google/firebase/firestore/core/FieldFilter;)Ljava/lang/Boolean;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.firebase.firestore.core.FieldFilter` `findFirstMatchingFilter`(`com.google.firebase.firestore.core.CompositeFilter` v3 @kind this, `com.google.firebase.firestore.util.Function` v4 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.findFirstMatchingFilter:(Lcom/google/firebase/firestore/util/Function;)Lcom/google/firebase/firestore/core/FieldFilter;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Boolean` `lambda$getFirstInequalityField$0`(`com.google.firebase.firestore.core.FieldFilter` v0 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.lambda$getFirstInequalityField$0:(Lcom/google/firebase/firestore/core/FieldFilter;)Ljava/lang/Boolean;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.firestore.core.CompositeFilter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getCanonicalId`(`com.google.firebase.firestore.core.CompositeFilter` v3 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.getCanonicalId:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `getFilters`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.getFilters:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.firestore.model.FieldPath` `getFirstInequalityField`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.getFirstInequalityField:()Lcom/google/firebase/firestore/model/FieldPath;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `getFlattenedFilters`(`com.google.firebase.firestore.core.CompositeFilter` v3 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.getFlattenedFilters:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.firestore.core.CompositeFilter$Operator` `getOperator`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.getOperator:()Lcom/google/firebase/firestore/core/CompositeFilter$Operator;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.firestore.core.CompositeFilter` v2 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isConjunction`(`com.google.firebase.firestore.core.CompositeFilter` v2 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.isConjunction:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDisjunction`(`com.google.firebase.firestore.core.CompositeFilter` v2 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.isDisjunction:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isFlat`(`com.google.firebase.firestore.core.CompositeFilter` v2 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.isFlat:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isFlatConjunction`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.isFlatConjunction:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `matches`(`com.google.firebase.firestore.core.CompositeFilter` v4 @kind this, `com.google.firebase.firestore.model.Document` v5 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.matches:(Lcom/google/firebase/firestore/model/Document;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.firestore.core.CompositeFilter` v1 @kind this) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.firestore.core.CompositeFilter` `withAddedFilters`(`com.google.firebase.firestore.core.CompositeFilter` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/google/firebase/firestore/core/CompositeFilter;.withAddedFilters:(Ljava/util/List;)Lcom/google/firebase/firestore/core/CompositeFilter;` @AccessFlag PUBLIC {

  # return;
}
