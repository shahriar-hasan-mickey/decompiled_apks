record `com.google.firebase.firestore.remote.RemoteStore$RemoteStoreCallback` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `getRemoteKeysForTarget`(`int` v0 ) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.getRemoteKeysForTarget:(I)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `handleOnlineStateChange`(`com.google.firebase.firestore.core.OnlineState` v0 @kind object) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.handleOnlineStateChange:(Lcom/google/firebase/firestore/core/OnlineState;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `handleRejectedListen`(`int` v0 , `io.grpc.Status` v1 @kind object) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.handleRejectedListen:(ILio/grpc/Status;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `handleRejectedWrite`(`int` v0 , `io.grpc.Status` v1 @kind object) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.handleRejectedWrite:(ILio/grpc/Status;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `handleRemoteEvent`(`com.google.firebase.firestore.remote.RemoteEvent` v0 @kind object) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.handleRemoteEvent:(Lcom/google/firebase/firestore/remote/RemoteEvent;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `handleSuccessfulWrite`(`com.google.firebase.firestore.model.mutation.MutationBatchResult` v0 @kind object) @signature `Lcom/google/firebase/firestore/remote/RemoteStore$RemoteStoreCallback;.handleSuccessfulWrite:(Lcom/google/firebase/firestore/model/mutation/MutationBatchResult;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
