record `com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator.it` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.firestore.QuerySnapshot` `com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` v0 @kind this, `com.google.firebase.firestore.QuerySnapshot` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lcom/google/firebase/firestore/QuerySnapshot$QuerySnapshotIterator;.<init>:(Lcom/google/firebase/firestore/QuerySnapshot;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` v1 @kind this) @signature `Lcom/google/firebase/firestore/QuerySnapshot$QuerySnapshotIterator;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.firestore.QueryDocumentSnapshot` `next`(`com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` v2 @kind this) @signature `Lcom/google/firebase/firestore/QuerySnapshot$QuerySnapshotIterator;.next:()Lcom/google/firebase/firestore/QueryDocumentSnapshot;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` v1 @kind this) @signature `Lcom/google/firebase/firestore/QuerySnapshot$QuerySnapshotIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `remove`(`com.google.firebase.firestore.QuerySnapshot$QuerySnapshotIterator` v2 @kind this) @signature `Lcom/google/firebase/firestore/QuerySnapshot$QuerySnapshotIterator;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
