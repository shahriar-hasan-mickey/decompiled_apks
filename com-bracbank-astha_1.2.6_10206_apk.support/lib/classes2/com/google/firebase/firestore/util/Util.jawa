record `com.google.firebase.firestore.util.Util` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.google.firebase.firestore.util.Util.AUTO_ID_ALPHABET` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.firebase.firestore.util.Util.AUTO_ID_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.gms.tasks.Continuation` `@@com.google.firebase.firestore.util.Util.VOID_ERROR_TRANSFORMER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Random` `@@com.google.firebase.firestore.util.Util.rand` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/firebase/firestore/util/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.firestore.util.Util` v0 @kind this) @signature `Lcom/google/firebase/firestore/util/Util;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`java.lang.RuntimeException` v0 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.a:(Ljava/lang/RuntimeException;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `advanceIterator`(`java.util.Iterator` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.advanceIterator:(Ljava/util/Iterator;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `autoId`() @signature `Lcom/google/firebase/firestore/util/Util;.autoId:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `b`(`java.lang.Comparable` v0 @kind object, `java.lang.Comparable` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.b:(Ljava/lang/Comparable;Ljava/lang/Comparable;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `int` `c`(`java.util.Comparator` v0 @kind object, `java.util.Map$Entry` v1 @kind object, `java.util.Map$Entry` v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.c:(Ljava/util/Comparator;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `collectUpdateArguments`(`int` v3 , `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.collectUpdateArguments:(ILjava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Comparator` `comparator`() @signature `Lcom/google/firebase/firestore/util/Util;.comparator:()Ljava/util/Comparator;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareBooleans`(`boolean` v0 , `boolean` v1 ) @signature `Lcom/google/firebase/firestore/util/Util;.compareBooleans:(ZZ)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareByteArrays`(`byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.compareByteArrays:([B[B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareByteStrings`(`com.google.protobuf.ByteString` v4 @kind object, `com.google.protobuf.ByteString` v5 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.compareByteStrings:(Lcom/google/protobuf/ByteString;Lcom/google/protobuf/ByteString;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareDoubles`(`double` v0 , `double` v2 ) @signature `Lcom/google/firebase/firestore/util/Util;.compareDoubles:(DD)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareIntegers`(`int` v0 , `int` v1 ) @signature `Lcom/google/firebase/firestore/util/Util;.compareIntegers:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareLongs`(`long` v0 , `long` v2 ) @signature `Lcom/google/firebase/firestore/util/Util;.compareLongs:(JJ)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareMixed`(`double` v0 , `long` v2 ) @signature `Lcom/google/firebase/firestore/util/Util;.compareMixed:(DJ)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Exception` `convertStatusException`(`java.lang.Exception` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.convertStatusException:(Ljava/lang/Exception;)Ljava/lang/Exception;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Exception` `convertThrowableToException`(`java.lang.Throwable` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.convertThrowableToException:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `crashMainThread`(`java.lang.RuntimeException` v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.crashMainThread:(Ljava/lang/RuntimeException;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Iterator` `d`(`java.lang.Iterable` v0 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.d:(Ljava/lang/Iterable;)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `diffCollections`(`java.util.Collection` v1 @kind object, `java.util.Collection` v2 @kind object, `java.util.Comparator` v3 @kind object, `com.google.firebase.firestore.util.Consumer` v4 @kind object, `com.google.firebase.firestore.util.Consumer` v5 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.diffCollections:(Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Comparator;Lcom/google/firebase/firestore/util/Consumer;Lcom/google/firebase/firestore/util/Consumer;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `diffCollections`(`java.util.Iterator` v5 @kind object, `java.util.Iterator` v6 @kind object, `java.util.Comparator` v7 @kind object, `com.google.firebase.firestore.util.Consumer` v8 @kind object, `com.google.firebase.firestore.util.Consumer` v9 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.diffCollections:(Ljava/util/Iterator;Ljava/util/Iterator;Ljava/util/Comparator;Lcom/google/firebase/firestore/util/Consumer;Lcom/google/firebase/firestore/util/Consumer;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `diffCollections`(`java.util.SortedSet` v2 @kind object, `java.util.SortedSet` v3 @kind object, `com.google.firebase.firestore.util.Consumer` v4 @kind object, `com.google.firebase.firestore.util.Consumer` v5 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.diffCollections:(Ljava/util/SortedSet;Ljava/util/SortedSet;Lcom/google/firebase/firestore/util/Consumer;Lcom/google/firebase/firestore/util/Consumer;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Void` `e`(`com.google.android.gms.tasks.Task` v0 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.e:(Lcom/google/android/gms/tasks/Task;)Ljava/lang/Void;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.firebase.firestore.FirebaseFirestoreException` `exceptionFromStatus`(`io.grpc.Status` v3 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.exceptionFromStatus:(Lio/grpc/Status;)Lcom/google/firebase/firestore/FirebaseFirestoreException;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `firstNEntries`(`java.util.Map` v3 @kind object, `int` v4 , `java.util.Comparator` v5 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.firstNEntries:(Ljava/util/Map;ILjava/util/Comparator;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `lambda$crashMainThread$1`(`java.lang.RuntimeException` v0 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.lambda$crashMainThread$1:(Ljava/lang/RuntimeException;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `int` `lambda$diffCollections$2`(`java.lang.Comparable` v0 @kind object, `java.lang.Comparable` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.lambda$diffCollections$2:(Ljava/lang/Comparable;Ljava/lang/Comparable;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `int` `lambda$firstNEntries$4`(`java.util.Comparator` v0 @kind object, `java.util.Map$Entry` v1 @kind object, `java.util.Map$Entry` v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.lambda$firstNEntries$4:(Ljava/util/Comparator;Ljava/util/Map$Entry;Ljava/util/Map$Entry;)I` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Void` `lambda$static$0`(`com.google.android.gms.tasks.Task` v3 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.lambda$static$0:(Lcom/google/android/gms/tasks/Task;)Ljava/lang/Void;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.Iterator` `lambda$values$3`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.lambda$values$3:(Ljava/lang/Iterable;)Ljava/util/Iterator;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.StringBuilder` `repeatSequence`(`java.lang.CharSequence` v2 @kind object, `int` v3 , `java.lang.CharSequence` v4 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.repeatSequence:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toDebugString`(`com.google.protobuf.ByteString` v6 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.toDebugString:(Lcom/google/protobuf/ByteString;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `typeName`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.typeName:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Iterable` `values`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/firebase/firestore/util/Util;.values:(Ljava/lang/Iterable;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.android.gms.tasks.Continuation` `voidErrorTransformer`() @signature `Lcom/google/firebase/firestore/util/Util;.voidErrorTransformer:()Lcom/google/android/gms/tasks/Continuation;` @AccessFlag PUBLIC_STATIC {

  # return;
}
