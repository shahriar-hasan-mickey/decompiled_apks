record `com.google.firebase.firestore.util.Assert` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.google.firebase.firestore.util.Assert` v0 @kind this) @signature `Lcom/google/firebase/firestore/util/Assert;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.AssertionError` `fail`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Assert;.fail:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/AssertionError;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.AssertionError` `fail`(`java.lang.Throwable` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Assert;.fail:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/AssertionError;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `format`(`java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lcom/google/firebase/firestore/util/Assert;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `hardAssert`(`boolean` v0 , `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Assert;.hardAssert:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `hardAssertNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/firebase/firestore/util/Assert;.hardAssertNonNull:(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
