record `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` @kind class @AccessFlag PUBLIC extends `com.google.firebase.firestore.local.Scheduler` @kind interface {
  `com.google.firebase.firestore.util.AsyncQueue` `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler.asyncQueue` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.firestore.util.AsyncQueue$DelayedTask` `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler.gcTask` @AccessFlag PRIVATE;
  `boolean` `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler.hasRun` @AccessFlag PRIVATE;
  `com.google.firebase.firestore.local.LocalStore` `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler.localStore` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.firestore.local.LruGarbageCollector` `com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v0 @kind this, `com.google.firebase.firestore.local.LruGarbageCollector` v1 @kind object, `com.google.firebase.firestore.util.AsyncQueue` v2 @kind object, `com.google.firebase.firestore.local.LocalStore` v3 @kind object) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.<init>:(Lcom/google/firebase/firestore/local/LruGarbageCollector;Lcom/google/firebase/firestore/util/AsyncQueue;Lcom/google/firebase/firestore/local/LocalStore;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.a:(Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `lambda$scheduleGC$0`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v2 @kind this) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.lambda$scheduleGC$0:()V` @AccessFlag PRIVATE_SYNTHETIC {

  # return;
}
procedure `void` `scheduleGC`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v5 @kind this) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.scheduleGC:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `start`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v5 @kind this) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.start:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `stop`(`com.google.firebase.firestore.local.LruGarbageCollector$GCScheduler` v1 @kind this) @signature `Lcom/google/firebase/firestore/local/LruGarbageCollector$GCScheduler;.stop:()V` @AccessFlag PUBLIC {

  # return;
}
