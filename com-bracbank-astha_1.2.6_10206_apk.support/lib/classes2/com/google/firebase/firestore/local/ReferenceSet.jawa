record `com.google.firebase.firestore.local.ReferenceSet` @kind class @AccessFlag PUBLIC {
  `com.google.firebase.database.collection.ImmutableSortedSet` `com.google.firebase.firestore.local.ReferenceSet.referencesByKey` @AccessFlag PRIVATE;
  `com.google.firebase.database.collection.ImmutableSortedSet` `com.google.firebase.firestore.local.ReferenceSet.referencesByTarget` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.firebase.firestore.local.ReferenceSet` v3 @kind this) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `removeReference`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this, `com.google.firebase.firestore.local.DocumentReference` v2 @kind object) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.removeReference:(Lcom/google/firebase/firestore/local/DocumentReference;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addReference`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this, `com.google.firebase.firestore.model.DocumentKey` v2 @kind object, `int` v3 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.addReference:(Lcom/google/firebase/firestore/model/DocumentKey;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `addReferences`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this, `com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind object, `int` v3 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.addReferences:(Lcom/google/firebase/database/collection/ImmutableSortedSet;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsKey`(`com.google.firebase.firestore.local.ReferenceSet` v3 @kind this, `com.google.firebase.firestore.model.DocumentKey` v4 @kind object) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.containsKey:(Lcom/google/firebase/firestore/model/DocumentKey;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `referencesForId`(`com.google.firebase.firestore.local.ReferenceSet` v4 @kind this, `int` v5 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.referencesForId:(I)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeAllReferences`(`com.google.firebase.firestore.local.ReferenceSet` v2 @kind this) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.removeAllReferences:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeReference`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this, `com.google.firebase.firestore.model.DocumentKey` v2 @kind object, `int` v3 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.removeReference:(Lcom/google/firebase/firestore/model/DocumentKey;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeReferences`(`com.google.firebase.firestore.local.ReferenceSet` v1 @kind this, `com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind object, `int` v3 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.removeReferences:(Lcom/google/firebase/database/collection/ImmutableSortedSet;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `removeReferencesForId`(`com.google.firebase.firestore.local.ReferenceSet` v4 @kind this, `int` v5 ) @signature `Lcom/google/firebase/firestore/local/ReferenceSet;.removeReferencesForId:(I)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC {

  # return;
}
