record `com.google.firebase.firestore.local.TargetCache` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `void` `addMatchingKeys`(`com.google.firebase.database.collection.ImmutableSortedSet` v0 @kind object, `int` v1 ) @signature `Lcom/google/firebase/firestore/local/TargetCache;.addMatchingKeys:(Lcom/google/firebase/database/collection/ImmutableSortedSet;I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `addTargetData`(`com.google.firebase.firestore.local.TargetData` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.addTargetData:(Lcom/google/firebase/firestore/local/TargetData;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `containsKey`(`com.google.firebase.firestore.model.DocumentKey` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.containsKey:(Lcom/google/firebase/firestore/model/DocumentKey;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `forEachTarget`(`com.google.firebase.firestore.util.Consumer` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.forEachTarget:(Lcom/google/firebase/firestore/util/Consumer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `getHighestListenSequenceNumber`() @signature `Lcom/google/firebase/firestore/local/TargetCache;.getHighestListenSequenceNumber:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getHighestTargetId`() @signature `Lcom/google/firebase/firestore/local/TargetCache;.getHighestTargetId:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.firebase.firestore.model.SnapshotVersion` `getLastRemoteSnapshotVersion`() @signature `Lcom/google/firebase/firestore/local/TargetCache;.getLastRemoteSnapshotVersion:()Lcom/google/firebase/firestore/model/SnapshotVersion;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `getMatchingKeysForTargetId`(`int` v0 ) @signature `Lcom/google/firebase/firestore/local/TargetCache;.getMatchingKeysForTargetId:(I)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `getTargetCount`() @signature `Lcom/google/firebase/firestore/local/TargetCache;.getTargetCount:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.firebase.firestore.local.TargetData` `getTargetData`(`com.google.firebase.firestore.core.Target` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.getTargetData:(Lcom/google/firebase/firestore/core/Target;)Lcom/google/firebase/firestore/local/TargetData;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `removeMatchingKeys`(`com.google.firebase.database.collection.ImmutableSortedSet` v0 @kind object, `int` v1 ) @signature `Lcom/google/firebase/firestore/local/TargetCache;.removeMatchingKeys:(Lcom/google/firebase/database/collection/ImmutableSortedSet;I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `removeMatchingKeysForTargetId`(`int` v0 ) @signature `Lcom/google/firebase/firestore/local/TargetCache;.removeMatchingKeysForTargetId:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `removeTargetData`(`com.google.firebase.firestore.local.TargetData` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.removeTargetData:(Lcom/google/firebase/firestore/local/TargetData;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setLastRemoteSnapshotVersion`(`com.google.firebase.firestore.model.SnapshotVersion` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.setLastRemoteSnapshotVersion:(Lcom/google/firebase/firestore/model/SnapshotVersion;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `updateTargetData`(`com.google.firebase.firestore.local.TargetData` v0 @kind object) @signature `Lcom/google/firebase/firestore/local/TargetCache;.updateTargetData:(Lcom/google/firebase/firestore/local/TargetData;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
