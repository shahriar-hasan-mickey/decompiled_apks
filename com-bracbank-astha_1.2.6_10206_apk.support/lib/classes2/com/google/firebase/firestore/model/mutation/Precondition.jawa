record `com.google.firebase.firestore.model.mutation.Precondition` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Boolean` `com.google.firebase.firestore.model.mutation.Precondition.exists` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.firestore.model.SnapshotVersion` `com.google.firebase.firestore.model.mutation.Precondition.updateTime` @AccessFlag PRIVATE_FINAL;
}
global `com.google.firebase.firestore.model.mutation.Precondition` `@@com.google.firebase.firestore.model.mutation.Precondition.NONE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.firestore.model.mutation.Precondition` v3 @kind this, `com.google.firebase.firestore.model.SnapshotVersion` v4 @kind object, `java.lang.Boolean` v5 @kind object) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.<init>:(Lcom/google/firebase/firestore/model/SnapshotVersion;Ljava/lang/Boolean;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.firebase.firestore.model.mutation.Precondition` `exists`(`boolean` v2 ) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.exists:(Z)Lcom/google/firebase/firestore/model/mutation/Precondition;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.firebase.firestore.model.mutation.Precondition` `updateTime`(`com.google.firebase.firestore.model.SnapshotVersion` v2 @kind object) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.updateTime:(Lcom/google/firebase/firestore/model/SnapshotVersion;)Lcom/google/firebase/firestore/model/mutation/Precondition;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.firestore.model.mutation.Precondition` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Boolean` `getExists`(`com.google.firebase.firestore.model.mutation.Precondition` v1 @kind this) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.getExists:()Ljava/lang/Boolean;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.firestore.model.SnapshotVersion` `getUpdateTime`(`com.google.firebase.firestore.model.mutation.Precondition` v1 @kind this) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.getUpdateTime:()Lcom/google/firebase/firestore/model/SnapshotVersion;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.firestore.model.mutation.Precondition` v3 @kind this) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isNone`(`com.google.firebase.firestore.model.mutation.Precondition` v1 @kind this) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.isNone:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isValidFor`(`com.google.firebase.firestore.model.mutation.Precondition` v3 @kind this, `com.google.firebase.firestore.model.MutableDocument` v4 @kind object) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.isValidFor:(Lcom/google/firebase/firestore/model/MutableDocument;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.firestore.model.mutation.Precondition` v3 @kind this) @signature `Lcom/google/firebase/firestore/model/mutation/Precondition;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
