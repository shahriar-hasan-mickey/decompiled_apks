record `com.google.firebase.database.collection.ImmutableSortedMapIterator` @kind class @AccessFlag PUBLIC extends `java.util.Iterator` @kind interface {
  `boolean` `com.google.firebase.database.collection.ImmutableSortedMapIterator.isReverse` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `com.google.firebase.database.collection.ImmutableSortedMapIterator.nodeStack` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.ImmutableSortedMapIterator` v2 @kind this, `com.google.firebase.database.collection.LLRBNode` v3 @kind object, `java.lang.Object` v4 @kind object, `java.util.Comparator` v5 @kind object, `boolean` v6 ) @signature `Lcom/google/firebase/database/collection/ImmutableSortedMapIterator;.<init>:(Lcom/google/firebase/database/collection/LLRBNode;Ljava/lang/Object;Ljava/util/Comparator;Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.firebase.database.collection.ImmutableSortedMapIterator` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedMapIterator;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.firebase.database.collection.ImmutableSortedMapIterator` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedMapIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Map$Entry` `next`(`com.google.firebase.database.collection.ImmutableSortedMapIterator` v4 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedMapIterator;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.firebase.database.collection.ImmutableSortedMapIterator` v2 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedMapIterator;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
