record `com.google.firebase.database.collection.ArraySortedMap$1` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `int` `com.google.firebase.database.collection.ArraySortedMap$1.currentPos` @AccessFlag ;
  `com.google.firebase.database.collection.ArraySortedMap` `com.google.firebase.database.collection.ArraySortedMap$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `int` `com.google.firebase.database.collection.ArraySortedMap$1.val$pos` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `com.google.firebase.database.collection.ArraySortedMap$1.val$reverse` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.ArraySortedMap$1` v0 @kind this, `com.google.firebase.database.collection.ArraySortedMap` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lcom/google/firebase/database/collection/ArraySortedMap$1;.<init>:(Lcom/google/firebase/database/collection/ArraySortedMap;IZ)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.firebase.database.collection.ArraySortedMap$1` v4 @kind this) @signature `Lcom/google/firebase/database/collection/ArraySortedMap$1;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.firebase.database.collection.ArraySortedMap$1` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ArraySortedMap$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Map$Entry` `next`(`com.google.firebase.database.collection.ArraySortedMap$1` v4 @kind this) @signature `Lcom/google/firebase/database/collection/ArraySortedMap$1;.next:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.firebase.database.collection.ArraySortedMap$1` v2 @kind this) @signature `Lcom/google/firebase/database/collection/ArraySortedMap$1;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
