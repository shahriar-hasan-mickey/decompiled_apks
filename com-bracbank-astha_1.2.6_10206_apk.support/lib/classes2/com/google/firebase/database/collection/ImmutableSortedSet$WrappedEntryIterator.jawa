record `com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator.iterator` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet$WrappedEntryIterator;.<init>:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `hasNext`(`com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet$WrappedEntryIterator;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet$WrappedEntryIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `remove`(`com.google.firebase.database.collection.ImmutableSortedSet$WrappedEntryIterator` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet$WrappedEntryIterator;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
