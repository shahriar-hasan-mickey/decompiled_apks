record `com.google.firebase.abt.FirebaseABTesting` @kind class @AccessFlag PUBLIC {
  `com.google.firebase.inject.Provider` `com.google.firebase.abt.FirebaseABTesting.analyticsConnector` @AccessFlag PRIVATE_FINAL;
  `java.lang.Integer` `com.google.firebase.abt.FirebaseABTesting.maxUserProperties` @AccessFlag PRIVATE;
  `java.lang.String` `com.google.firebase.abt.FirebaseABTesting.originService` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.google.firebase.abt.FirebaseABTesting.ABT_PREFERENCES` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@com.google.firebase.abt.FirebaseABTesting.ORIGIN_LAST_KNOWN_START_TIME_KEY_FORMAT` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`com.google.firebase.abt.FirebaseABTesting` v0 @kind this, `android.content.Context` v1 @kind object, `com.google.firebase.inject.Provider` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.<init>:(Landroid/content/Context;Lcom/google/firebase/inject/Provider;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `addExperimentToAnalytics`(`com.google.firebase.abt.FirebaseABTesting` v1 @kind this, `com.google.firebase.analytics.connector.AnalyticsConnector$ConditionalUserProperty` v2 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.addExperimentToAnalytics:(Lcom/google/firebase/analytics/connector/AnalyticsConnector$ConditionalUserProperty;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addExperiments`(`com.google.firebase.abt.FirebaseABTesting` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.addExperiments:(Ljava/util/List;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.List` `convertMapsToExperimentInfos`(`java.util.List` v2 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.convertMapsToExperimentInfos:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.List` `getAllExperimentsInAnalytics`(`com.google.firebase.abt.FirebaseABTesting` v3 @kind this) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.getAllExperimentsInAnalytics:()Ljava/util/List;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.ArrayList` `getExperimentsToAdd`(`com.google.firebase.abt.FirebaseABTesting` v3 @kind this, `java.util.List` v4 @kind object, `java.util.Set` v5 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.getExperimentsToAdd:(Ljava/util/List;Ljava/util/Set;)Ljava/util/ArrayList;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.ArrayList` `getExperimentsToRemove`(`com.google.firebase.abt.FirebaseABTesting` v3 @kind this, `java.util.List` v4 @kind object, `java.util.Set` v5 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.getExperimentsToRemove:(Ljava/util/List;Ljava/util/Set;)Ljava/util/ArrayList;` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `getMaxUserPropertiesInAnalytics`(`com.google.firebase.abt.FirebaseABTesting` v2 @kind this) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.getMaxUserPropertiesInAnalytics:()I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `removeExperimentFromAnalytics`(`com.google.firebase.abt.FirebaseABTesting` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.removeExperimentFromAnalytics:(Ljava/lang/String;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `removeExperiments`(`com.google.firebase.abt.FirebaseABTesting` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.removeExperiments:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `replaceAllExperimentsWith`(`com.google.firebase.abt.FirebaseABTesting` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.replaceAllExperimentsWith:(Ljava/util/List;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `throwAbtExceptionIfAnalyticsIsNull`(`com.google.firebase.abt.FirebaseABTesting` v2 @kind this) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.throwAbtExceptionIfAnalyticsIsNull:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.List` `getAllExperiments`(`com.google.firebase.abt.FirebaseABTesting` v3 @kind this) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.getAllExperiments:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeAllExperiments`(`com.google.firebase.abt.FirebaseABTesting` v1 @kind this) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.removeAllExperiments:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `replaceAllExperiments`(`com.google.firebase.abt.FirebaseABTesting` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.replaceAllExperiments:(Ljava/util/List;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reportActiveExperiment`(`com.google.firebase.abt.FirebaseABTesting` v2 @kind this, `com.google.firebase.abt.AbtExperimentInfo` v3 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.reportActiveExperiment:(Lcom/google/firebase/abt/AbtExperimentInfo;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `validateRunningExperiments`(`com.google.firebase.abt.FirebaseABTesting` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/google/firebase/abt/FirebaseABTesting;.validateRunningExperiments:(Ljava/util/List;)V` @AccessFlag PUBLIC {

  # return;
}
