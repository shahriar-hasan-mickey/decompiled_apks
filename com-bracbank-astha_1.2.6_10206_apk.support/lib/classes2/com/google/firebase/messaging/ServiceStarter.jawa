record `com.google.firebase.messaging.ServiceStarter` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.google.firebase.messaging.ServiceStarter.firebaseMessagingServiceClassName` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.google.firebase.messaging.ServiceStarter.hasAccessNetworkStatePermission` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.google.firebase.messaging.ServiceStarter.hasWakeLockPermission` @AccessFlag PRIVATE;
  `java.util.Queue` `com.google.firebase.messaging.ServiceStarter.messagingEvents` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.google.firebase.messaging.ServiceStarter.ACTION_MESSAGING_EVENT` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.ERROR_ILLEGAL_STATE_EXCEPTION` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.ERROR_ILLEGAL_STATE_EXCEPTION_FALLBACK_TO_BIND` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.ERROR_NOT_FOUND` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.ERROR_SECURITY_EXCEPTION` @AccessFlag STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.ERROR_UNKNOWN` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@com.google.firebase.messaging.ServiceStarter.EXTRA_WRAPPED_INTENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.firebase.messaging.ServiceStarter.PERMISSIONS_MISSING_HINT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.firebase.messaging.ServiceStarter.SUCCESS` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.google.firebase.messaging.ServiceStarter` `@@com.google.firebase.messaging.ServiceStarter.instance` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.google.firebase.messaging.ServiceStarter` v1 @kind this) @signature `Lcom/google/firebase/messaging/ServiceStarter;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `doStartService`(`com.google.firebase.messaging.ServiceStarter` v4 @kind this, `android.content.Context` v5 @kind object, `android.content.Intent` v6 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.doStartService:(Landroid/content/Context;Landroid/content/Intent;)I` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.firebase.messaging.ServiceStarter` `getInstance`() @signature `Lcom/google/firebase/messaging/ServiceStarter;.getInstance:()Lcom/google/firebase/messaging/ServiceStarter;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.String` `resolveServiceClassName`(`com.google.firebase.messaging.ServiceStarter` v3 @kind this, `android.content.Context` v4 @kind object, `android.content.Intent` v5 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.resolveServiceClassName:(Landroid/content/Context;Landroid/content/Intent;)Ljava/lang/String;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setForTesting`(`com.google.firebase.messaging.ServiceStarter` v0 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.setForTesting:(Lcom/google/firebase/messaging/ServiceStarter;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `android.content.Intent` `getMessagingEvent`(`com.google.firebase.messaging.ServiceStarter` v1 @kind this) @signature `Lcom/google/firebase/messaging/ServiceStarter;.getMessagingEvent:()Landroid/content/Intent;` @AccessFlag  {

  # return;
}
procedure `boolean` `hasAccessNetworkStatePermission`(`com.google.firebase.messaging.ServiceStarter` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.hasAccessNetworkStatePermission:(Landroid/content/Context;)Z` @AccessFlag  {

  # return;
}
procedure `boolean` `hasWakeLockPermission`(`com.google.firebase.messaging.ServiceStarter` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.hasWakeLockPermission:(Landroid/content/Context;)Z` @AccessFlag  {

  # return;
}
procedure `int` `startMessagingService`(`com.google.firebase.messaging.ServiceStarter` v2 @kind this, `android.content.Context` v3 @kind object, `android.content.Intent` v4 @kind object) @signature `Lcom/google/firebase/messaging/ServiceStarter;.startMessagingService:(Landroid/content/Context;Landroid/content/Intent;)I` @AccessFlag PUBLIC {

  # return;
}
