record `j2.a$a` @kind class @AccessFlag FINAL extends `h2.e` @kind interface {
  `h2.b` `j2.a$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`j2.a$a` v0 @kind this, `h2.b` v1 @kind object) @signature `Lj2/a$a;.<init>:(Lh2/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39f570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39f576.  v0.`j2.a$a.a` @type ^`h2.b` := v1 @kind object;
  #L39f57a.  return @kind void;
}
procedure `java.lang.Object` `a`(`j2.a$a` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lj2/a$a;.a:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39f50c.  v0:= length @variable v4;
  #L39f50e.  v1:= 2I;
  #L39f510.  if v0 != v1 then goto L39f52e;
  #L39f514.  v0:= v3.`j2.a$a.a` @type ^`h2.b` @kind object;
  #L39f518.  v1:= 0I;
  #L39f51a.  v1:= v4[v1] @kind object;
  #L39f51e.  v2:= 1I;
  #L39f520.  v4:= v4[v2] @kind object;
  #L39f524.  call temp:= `a`(v0, v1, v4) @signature `Lh2/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L39f52a.  v4:= temp @kind object;
  #L39f52c.  return v4 @kind object;
  #L39f52e.  v0:= new `java.lang.IllegalArgumentException`;
  #L39f532.  v1:= new `java.lang.StringBuilder`;
  #L39f536.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39f53c.  v2:= "Array of size 2 expected but got " @kind object;
  #L39f540.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39f546.  v4:= length @variable v4;
  #L39f548.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39f54e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39f554.  v4:= temp @kind object;
  #L39f556.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39f55c.  throw v0;
}
procedure `java.lang.Object` `apply`(`j2.a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lj2/a$a;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L39f4ec.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L39f4f0.  call temp:= `a`(v0, v1) @signature `Lj2/a$a;.a:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39f4f6.  v1:= temp @kind object;
  #L39f4f8.  return v1 @kind object;
}
