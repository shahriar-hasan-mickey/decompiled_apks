record `j2.b` @kind class @AccessFlag PUBLIC_FINAL {
}
global `h2.c` `@@j2.b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj2/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L39fbc4.  v0:= new `j2.b$a`;
  #L39fbc8.  call `<init>`(v0) @signature `Lj2/b$a;.<init>:()V` @kind direct;
  #L39fbce.  `@@j2.b.a` @type ^`h2.c` := v0 @kind object;
  #L39fbd2.  return @kind void;
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lj2/b;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L39fb14.  if v0 >= v1 then goto L39fb1c;
  #L39fb18.  v0:= -1I;
  #L39fb1a.  goto L39fb26;
  #L39fb1c.  if v0 <= v1 then goto L39fb24;
  #L39fb20.  v0:= 1I;
  #L39fb22.  goto L39fb26;
  #L39fb24.  v0:= 0I;
  #L39fb26.  return v0;
}
procedure `int` `b`(`long` v1 , `long` v3 ) @signature `Lj2/b;.b:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39fb38.  v0:= lcmp(v1, v3);
  #L39fb3c.  if v0 >= 0 then goto L39fb44;
  #L39fb40.  v1:= -1I;
  #L39fb42.  goto L39fb4e;
  #L39fb44.  if v0 <= 0 then goto L39fb4c;
  #L39fb48.  v1:= 1I;
  #L39fb4a.  goto L39fb4e;
  #L39fb4c.  v1:= 0I;
  #L39fb4e.  return v1;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lj2/b;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L39fae4.  if v0 == v1 then goto L39fafe;
  #L39fae8.  if v0 == 0 then goto L39fafa;
  #L39faec.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39faf2.  v0:= temp;
  #L39faf4.  if v0 == 0 then goto L39fafa;
  #L39faf8.  goto L39fafe;
  #L39fafa.  v0:= 0I;
  #L39fafc.  goto L39fb00;
  #L39fafe.  v0:= 1I;
  #L39fb00.  return v0;
}
procedure `java.lang.Object` `d`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L39fbac.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39fbb2.  return v0 @kind object;
}
procedure `int` `e`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39fb60.  if v2 <= 0 then goto L39fb66;
  #L39fb64.  return v2;
  #L39fb66.  v0:= new `java.lang.IllegalArgumentException`;
  #L39fb6a.  v1:= new `java.lang.StringBuilder`;
  #L39fb6e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39fb74.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39fb7a.  v3:= " > 0 required but it was " @kind object;
  #L39fb7e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39fb84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L39fb8a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39fb90.  v2:= temp @kind object;
  #L39fb92.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39fb98.  throw v0;
}
