record `p2.a` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `p2.a.a` @AccessFlag PRIVATE_FINAL;
  `int` `p2.a.b` @AccessFlag PRIVATE_FINAL;
  `int` `p2.a.c` @AccessFlag PRIVATE_FINAL;
  `int` `p2.a.d` @AccessFlag PRIVATE_FINAL;
}
global `p2.a$a` `@@p2.a.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `p2.a` `@@p2.a.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lp2/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f9c9c.  v0:= new `p2.a$a`;
  #L3f9ca0.  v1:= 0I;
  #L3f9ca2.  call `<init>`(v0, v1) @signature `Lp2/a$a;.<init>:(Lr2/a;)V` @kind direct;
  #L3f9ca8.  `@@p2.a.e` @type ^`p2.a$a` := v0 @kind object;
  #L3f9cac.  call temp:= `a`() @signature `Lp2/b;.a:()Lp2/a;` @kind static;
  #L3f9cb2.  v0:= temp @kind object;
  #L3f9cb4.  `@@p2.a.f` @type ^`p2.a` := v0 @kind object;
  #L3f9cb8.  return @kind void;
}
procedure `void` `<init>`(`p2.a` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lp2/a;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f9ccc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f9cd2.  v0.`p2.a.a` @type ^`int` := v1;
  #L3f9cd6.  v0.`p2.a.b` @type ^`int` := v2;
  #L3f9cda.  v0.`p2.a.c` @type ^`int` := v3;
  #L3f9cde.  call temp:= `b`(v0, v1, v2, v3) @signature `Lp2/a;.b:(III)I` @kind direct;
  #L3f9ce4.  v1:= temp;
  #L3f9ce6.  v0.`p2.a.d` @type ^`int` := v1;
  #L3f9cea.  return @kind void;
}
procedure `int` `b`(`p2.a` v4 @kind this, `int` v5 , `int` v6 , `int` v7 ) @signature `Lp2/a;.b:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f9b90.  v0:= 256I;
  #L3f9b94.  v1:= 1I;
  #L3f9b96.  v2:= 0I;
  #L3f9b98.  if v5 < 0 then goto L3f9ba4;
  #L3f9b9c.  if v5 >= v0 then goto L3f9ba4;
  #L3f9ba0.  v3:= 1I;
  #L3f9ba2.  goto L3f9ba6;
  #L3f9ba4.  v3:= 0I;
  #L3f9ba6.  if v3 == 0 then goto L3f9bd0;
  #L3f9baa.  if v6 < 0 then goto L3f9bb6;
  #L3f9bae.  if v6 >= v0 then goto L3f9bb6;
  #L3f9bb2.  v3:= 1I;
  #L3f9bb4.  goto L3f9bb8;
  #L3f9bb6.  v3:= 0I;
  #L3f9bb8.  if v3 == 0 then goto L3f9bd0;
  #L3f9bbc.  if v7 < 0 then goto L3f9bc8;
  #L3f9bc0.  if v7 >= v0 then goto L3f9bc8;
  #L3f9bc4.  v0:= 1I;
  #L3f9bc6.  goto L3f9bca;
  #L3f9bc8.  v0:= 0I;
  #L3f9bca.  if v0 == 0 then goto L3f9bd0;
  #L3f9bce.  goto L3f9bd2;
  #L3f9bd0.  v1:= 0I;
  #L3f9bd2.  if v1 == 0 then goto L3f9be4;
  #L3f9bd6.  v5:= v5 ^< 16;
  #L3f9bda.  v6:= v6 ^< 8;
  #L3f9bde.  v5:= v5 + v6 @kind int;
  #L3f9be0.  v5:= v5 + v7 @kind int;
  #L3f9be2.  return v5;
  #L3f9be4.  v0:= new `java.lang.StringBuilder`;
  #L3f9be8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f9bee.  v1:= "Version components are out of range: " @kind object;
  #L3f9bf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9bf8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9bfe.  v5:= 46I;
  #L3f9c02.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c08.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c0e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c14.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c1a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f9c20.  v5:= temp @kind object;
  #L3f9c22.  v6:= new `java.lang.IllegalArgumentException`;
  #L3f9c26.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f9c2c.  v5:= temp @kind object;
  #L3f9c2e.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f9c34.  throw v6;
}
procedure `int` `a`(`p2.a` v1 @kind this, `p2.a` v2 @kind object) @signature `Lp2/a;.a:(Lp2/a;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9b50.  v0:= "other" @kind object;
  #L3f9b54.  call `c`(v2, v0) @signature `Lr2/c;.c:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3f9b5a.  v0:= v1.`p2.a.d` @type ^`int`;
  #L3f9b5e.  v2:= v2.`p2.a.d` @type ^`int`;
  #L3f9b62.  v0:= v0 - v2 @kind int;
  #L3f9b64.  return v0;
}
procedure `int` `compareTo`(`p2.a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lp2/a;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f9b30.  v1:= (`p2.a`) v1 @kind object;
  #L3f9b34.  call temp:= `a`(v0, v1) @signature `Lp2/a;.a:(Lp2/a;)I` @kind virtual;
  #L3f9b3a.  v1:= temp;
  #L3f9b3c.  return v1;
}
procedure `boolean` `equals`(`p2.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lp2/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f9aec.  v0:= 1I;
  #L3f9aee.  if v3 != v4 then goto L3f9af4;
  #L3f9af2.  return v0;
  #L3f9af4.  v1:= instanceof @variable v4 @type ^`p2.a` @kind boolean;
  #L3f9af8.  if v1 == 0 then goto L3f9b02;
  #L3f9afc.  v4:= (`p2.a`) v4 @kind object;
  #L3f9b00.  goto L3f9b04;
  #L3f9b02.  v4:= 0I;
  #L3f9b04.  v1:= 0I;
  #L3f9b06.  if v4 != 0 then goto L3f9b0c;
  #L3f9b0a.  return v1;
  #L3f9b0c.  v2:= v3.`p2.a.d` @type ^`int`;
  #L3f9b10.  v4:= v4.`p2.a.d` @type ^`int`;
  #L3f9b14.  if v2 != v4 then goto L3f9b1a;
  #L3f9b18.  goto L3f9b1c;
  #L3f9b1a.  v0:= 0I;
  #L3f9b1c.  return v0;
}
procedure `int` `hashCode`(`p2.a` v1 @kind this) @signature `Lp2/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9b78.  v0:= v1.`p2.a.d` @type ^`int`;
  #L3f9b7c.  return v0;
}
procedure `java.lang.String` `toString`(`p2.a` v3 @kind this) @signature `Lp2/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f9c48.  v0:= new `java.lang.StringBuilder`;
  #L3f9c4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f9c52.  v1:= v3.`p2.a.a` @type ^`int`;
  #L3f9c56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c5c.  v1:= 46I;
  #L3f9c60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c66.  v2:= v3.`p2.a.b` @type ^`int`;
  #L3f9c6a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c76.  v1:= v3.`p2.a.c` @type ^`int`;
  #L3f9c7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f9c80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f9c86.  v0:= temp @kind object;
  #L3f9c88.  return v0 @kind object;
}
