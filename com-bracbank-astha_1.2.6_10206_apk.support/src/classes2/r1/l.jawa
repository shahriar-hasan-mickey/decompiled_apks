record `r1.l` @kind class @AccessFlag PUBLIC extends `java.lang.Comparable` @kind interface {
  `int` `r1.l.a` @AccessFlag PUBLIC_FINAL;
  `int` `r1.l.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`r1.l` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lr1/l;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fa928.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fa92e.  v0.`r1.l.a` @type ^`int` := v1;
  #L3fa932.  v0.`r1.l.b` @type ^`int` := v2;
  #L3fa936.  return @kind void;
}
procedure `int` `a`(`r1.l` v2 @kind this, `r1.l` v3 @kind object) @signature `Lr1/l;.a:(Lr1/l;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fa7c4.  v0:= v2.`r1.l.b` @type ^`int`;
  #L3fa7c8.  v1:= v2.`r1.l.a` @type ^`int`;
  #L3fa7cc.  v0:= v0 * v1 @kind int;
  #L3fa7d0.  v1:= v3.`r1.l.b` @type ^`int`;
  #L3fa7d4.  v3:= v3.`r1.l.a` @type ^`int`;
  #L3fa7d8.  v1:= v1 * v3 @kind int;
  #L3fa7dc.  if v1 >= v0 then goto L3fa7e4;
  #L3fa7e0.  v3:= 1I;
  #L3fa7e2.  return v3;
  #L3fa7e4.  if v1 <= v0 then goto L3fa7ec;
  #L3fa7e8.  v3:= -1I;
  #L3fa7ea.  return v3;
  #L3fa7ec.  v3:= 0I;
  #L3fa7ee.  return v3;
}
procedure `r1.l` `b`(`r1.l` v3 @kind this) @signature `Lr1/l;.b:()Lr1/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fa864.  v0:= new `r1.l`;
  #L3fa868.  v1:= v3.`r1.l.b` @type ^`int`;
  #L3fa86c.  v2:= v3.`r1.l.a` @type ^`int`;
  #L3fa870.  call `<init>`(v0, v1, v2) @signature `Lr1/l;.<init>:(II)V` @kind direct;
  #L3fa876.  return v0 @kind object;
}
procedure `r1.l` `c`(`r1.l` v5 @kind this, `r1.l` v6 @kind object) @signature `Lr1/l;.c:(Lr1/l;)Lr1/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fa888.  v0:= v5.`r1.l.a` @type ^`int`;
  #L3fa88c.  v1:= v6.`r1.l.b` @type ^`int`;
  #L3fa890.  v2:= v0 * v1 @kind int;
  #L3fa894.  v6:= v6.`r1.l.a` @type ^`int`;
  #L3fa898.  v3:= v5.`r1.l.b` @type ^`int`;
  #L3fa89c.  v4:= v6 * v3 @kind int;
  #L3fa8a0.  if v2 > v4 then goto L3fa8b6;
  #L3fa8a4.  v1:= new `r1.l`;
  #L3fa8a8.  v3:= v3 * v6 @kind int;
  #L3fa8ac.  v3:= v3 / v0 @kind int;
  #L3fa8ae.  call `<init>`(v1, v6, v3) @signature `Lr1/l;.<init>:(II)V` @kind direct;
  #L3fa8b4.  return v1 @kind object;
  #L3fa8b6.  v6:= new `r1.l`;
  #L3fa8ba.  v0:= v0 * v1 @kind int;
  #L3fa8be.  v0:= v0 / v3 @kind int;
  #L3fa8c0.  call `<init>`(v6, v0, v1) @signature `Lr1/l;.<init>:(II)V` @kind direct;
  #L3fa8c6.  return v6 @kind object;
}
procedure `int` `compareTo`(`r1.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr1/l;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3fa7a4.  v1:= (`r1.l`) v1 @kind object;
  #L3fa7a8.  call temp:= `a`(v0, v1) @signature `Lr1/l;.a:(Lr1/l;)I` @kind virtual;
  #L3fa7ae.  v1:= temp;
  #L3fa7b0.  return v1;
}
procedure `r1.l` `d`(`r1.l` v5 @kind this, `r1.l` v6 @kind object) @signature `Lr1/l;.d:(Lr1/l;)Lr1/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fa8d8.  v0:= v5.`r1.l.a` @type ^`int`;
  #L3fa8dc.  v1:= v6.`r1.l.b` @type ^`int`;
  #L3fa8e0.  v2:= v0 * v1 @kind int;
  #L3fa8e4.  v6:= v6.`r1.l.a` @type ^`int`;
  #L3fa8e8.  v3:= v5.`r1.l.b` @type ^`int`;
  #L3fa8ec.  v4:= v6 * v3 @kind int;
  #L3fa8f0.  if v2 < v4 then goto L3fa906;
  #L3fa8f4.  v1:= new `r1.l`;
  #L3fa8f8.  v3:= v3 * v6 @kind int;
  #L3fa8fc.  v3:= v3 / v0 @kind int;
  #L3fa8fe.  call `<init>`(v1, v6, v3) @signature `Lr1/l;.<init>:(II)V` @kind direct;
  #L3fa904.  return v1 @kind object;
  #L3fa906.  v6:= new `r1.l`;
  #L3fa90a.  v0:= v0 * v1 @kind int;
  #L3fa90e.  v0:= v0 / v3 @kind int;
  #L3fa910.  call `<init>`(v6, v0, v1) @signature `Lr1/l;.<init>:(II)V` @kind direct;
  #L3fa916.  return v6 @kind object;
}
procedure `boolean` `equals`(`r1.l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lr1/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fa74c.  v0:= 1I;
  #L3fa74e.  if v4 != v5 then goto L3fa754;
  #L3fa752.  return v0;
  #L3fa754.  v1:= 0I;
  #L3fa756.  if v5 == 0 then goto L3fa792;
  #L3fa75a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3fa760.  v2:= temp @kind object;
  #L3fa762.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3fa768.  v3:= temp @kind object;
  #L3fa76a.  if v2 == v3 then goto L3fa770;
  #L3fa76e.  goto L3fa792;
  #L3fa770.  v5:= (`r1.l`) v5 @kind object;
  #L3fa774.  v2:= v4.`r1.l.a` @type ^`int`;
  #L3fa778.  v3:= v5.`r1.l.a` @type ^`int`;
  #L3fa77c.  if v2 != v3 then goto L3fa78e;
  #L3fa780.  v2:= v4.`r1.l.b` @type ^`int`;
  #L3fa784.  v5:= v5.`r1.l.b` @type ^`int`;
  #L3fa788.  if v2 != v5 then goto L3fa78e;
  #L3fa78c.  goto L3fa790;
  #L3fa78e.  v0:= 0I;
  #L3fa790.  return v0;
  #L3fa792.  return v1;
}
procedure `int` `hashCode`(`r1.l` v2 @kind this) @signature `Lr1/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fa800.  v0:= v2.`r1.l.a` @type ^`int`;
  #L3fa804.  v0:= v0 * 31;
  #L3fa808.  v1:= v2.`r1.l.b` @type ^`int`;
  #L3fa80c.  v0:= v0 + v1 @kind int;
  #L3fa80e.  return v0;
}
procedure `java.lang.String` `toString`(`r1.l` v2 @kind this) @signature `Lr1/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fa820.  v0:= new `java.lang.StringBuilder`;
  #L3fa824.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fa82a.  v1:= v2.`r1.l.a` @type ^`int`;
  #L3fa82e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fa834.  v1:= "x" @kind object;
  #L3fa838.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fa83e.  v1:= v2.`r1.l.b` @type ^`int`;
  #L3fa842.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fa848.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fa84e.  v0:= temp @kind object;
  #L3fa850.  return v0 @kind object;
}
