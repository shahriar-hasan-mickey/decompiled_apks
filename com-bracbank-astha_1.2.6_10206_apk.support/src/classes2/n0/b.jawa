record `n0.b` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v8 , `long` v10 ) @signature `Ln0/b;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a0864.  v0:= 0L;
  #L3a0868.  v2:= -9223372036854775808L;
  #L3a086c.  v4:= lcmp(v10, v0);
  #L3a0870.  if v4 >= 0 then goto L3a0888;
  #L3a0874.  v8:= v8 ^~ v2 @kind long;
  #L3a0876.  v10:= v10 ^~ v2 @kind long;
  #L3a0878.  v2:= lcmp(v8, v10);
  #L3a087c.  if v2 >= 0 then goto L3a0882;
  #L3a0880.  return v0 @kind wide;
  #L3a0882.  v8:= 1L;
  #L3a0886.  return v8 @kind wide;
  #L3a0888.  v4:= lcmp(v8, v0);
  #L3a088c.  if v4 < 0 then goto L3a0894;
  #L3a0890.  v8:= v8 / v10 @kind long;
  #L3a0892.  return v8 @kind wide;
  #L3a0894.  v0:= 1I;
  #L3a0896.  v4:= v8 ^>> v0 @kind long;
  #L3a089a.  v4:= v4 / v10 @kind long;
  #L3a089c.  v4:= v4 ^< v0 @kind long;
  #L3a089e.  v6:= v4 * v10 @kind long;
  #L3a08a2.  v8:= v8 - v6 @kind long;
  #L3a08a4.  v8:= v8 ^~ v2 @kind long;
  #L3a08a6.  v10:= v10 ^~ v2 @kind long;
  #L3a08a8.  v1:= lcmp(v8, v10);
  #L3a08ac.  if v1 < 0 then goto L3a08b2;
  #L3a08b0.  goto L3a08b4;
  #L3a08b2.  v0:= 0I;
  #L3a08b4.  v8:= (`long`) v0 @kind i2l;
  #L3a08b6.  v4:= v4 + v8 @kind long;
  #L3a08b8.  return v4 @kind wide;
}
