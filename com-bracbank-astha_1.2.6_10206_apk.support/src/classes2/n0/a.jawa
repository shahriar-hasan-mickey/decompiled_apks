record `n0.a` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Ln0/a;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a07fc.  v0:= 0L;
  #L3a0800.  v2:= -9223372036854775808L;
  #L3a0804.  v4:= lcmp(v9, v0);
  #L3a0808.  if v4 >= 0 then goto L3a0820;
  #L3a080c.  v0:= v7 ^~ v2 @kind long;
  #L3a0810.  v2:= v2 ^~ v9 @kind long;
  #L3a0812.  v4:= lcmp(v0, v2);
  #L3a0816.  if v4 >= 0 then goto L3a081c;
  #L3a081a.  return v7 @kind wide;
  #L3a081c.  v7:= v7 - v9 @kind long;
  #L3a081e.  return v7 @kind wide;
  #L3a0820.  v4:= lcmp(v7, v0);
  #L3a0824.  if v4 < 0 then goto L3a082c;
  #L3a0828.  v7:= v7 %% v9 @kind long;
  #L3a082a.  return v7 @kind wide;
  #L3a082c.  v4:= 1I;
  #L3a082e.  v5:= v7 ^>> v4 @kind long;
  #L3a0832.  v5:= v5 / v9 @kind long;
  #L3a0834.  v4:= v5 ^< v4 @kind long;
  #L3a0838.  v4:= v4 * v9 @kind long;
  #L3a083c.  v7:= v7 - v4 @kind long;
  #L3a083e.  v4:= v7 ^~ v2 @kind long;
  #L3a0842.  v2:= v2 ^~ v9 @kind long;
  #L3a0844.  v6:= lcmp(v4, v2);
  #L3a0848.  if v6 < 0 then goto L3a084e;
  #L3a084c.  goto L3a0850;
  #L3a084e.  v9:= v0 @kind wide;
  #L3a0850.  v7:= v7 - v9 @kind long;
  #L3a0852.  return v7 @kind wide;
}
