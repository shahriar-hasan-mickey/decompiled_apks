record `n0.c` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`java.lang.CharSequence` v16 @kind object, `int` v17 , `int` v18 , `int` v19 ) @signature `Ln0/c;.a:(Ljava/lang/CharSequence;III)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3a08cc.  v0:= v18;
  #L3a08d0.  v1:= v19;
  #L3a08d4.  v2:= v0 - v17 @kind int;
  #L3a08d8.  if v2 == 0 then goto L3a09c6;
  #L3a08dc.  v3:= 2I;
  #L3a08de.  if v1 < v3 then goto L3a09a6;
  #L3a08e2.  v3:= 36I;
  #L3a08e6.  if v1 > v3 then goto L3a09a6;
  #L3a08ea.  v3:= (`long`) v1 @kind i2l;
  #L3a08ec.  v5:= -1L;
  #L3a08f0.  call temp:= `a`(v5, v3) @signature `Ln0/b;.a:(JJ)J` @kind static;
  #L3a08f6.  v7:= temp @kind wide;
  #L3a08f8.  call temp:= `charAt`(v16, v17) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3a08fe.  v9:= temp;
  #L3a0900.  v10:= 43I;
  #L3a0904.  if v9 != v10 then goto L3a0914;
  #L3a0908.  v9:= 1I;
  #L3a090a.  if v2 <= v9 then goto L3a0914;
  #L3a090e.  v2:= v17 + 1;
  #L3a0912.  goto L3a0918;
  #L3a0914.  v2:= v17;
  #L3a0918.  v9:= 0L;
  #L3a091c.  v11:= v9 @kind wide;
  #L3a091e.  if v2 >= v0 then goto L3a09a4;
  #L3a0922.  v13:= v16 @kind object;
  #L3a0926.  call temp:= `charAt`(v13, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3a092c.  v14:= temp;
  #L3a092e.  call temp:= `digit`(v14, v1) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L3a0934.  v14:= temp;
  #L3a0936.  v15:= -1I;
  #L3a0938.  if v14 == v15 then goto L3a0990;
  #L3a093c.  v15:= lcmp(v11, v9);
  #L3a0940.  if v15 < 0 then goto L3a0970;
  #L3a0944.  v15:= lcmp(v11, v7);
  #L3a0948.  if v15 > 0 then goto L3a0970;
  #L3a094c.  if v15 != 0 then goto L3a095e;
  #L3a0950.  call temp:= `a`(v5, v3) @signature `Ln0/a;.a:(JJ)J` @kind static;
  #L3a0956.  v9:= temp @kind wide;
  #L3a0958.  v10:= (`int`) v9 @kind l2i;
  #L3a095a.  if v14 > v10 then goto L3a0970;
  #L3a095e.  v11:= v11 * v3 @kind long;
  #L3a0962.  v9:= (`long`) v14 @kind i2l;
  #L3a0964.  v11:= v11 + v9 @kind long;
  #L3a0966.  v2:= v2 + 1;
  #L3a096a.  v9:= 0L;
  #L3a096e.  goto L3a091e;
  #L3a0970.  v0:= new `java.lang.NumberFormatException`;
  #L3a0974.  call temp:= `toString`(v16) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3a097a.  v1:= temp @kind object;
  #L3a097c.  v2:= "Too large for unsigned long: " @kind object;
  #L3a0980.  call temp:= `concat`(v2, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3a0986.  v1:= temp @kind object;
  #L3a0988.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a098e.  throw v0;
  #L3a0990.  v0:= new `java.lang.NumberFormatException`;
  #L3a0994.  call temp:= `toString`(v16) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3a099a.  v1:= temp @kind object;
  #L3a099c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a09a2.  throw v0;
  #L3a09a4.  return v11 @kind wide;
  #L3a09a6.  v0:= new `java.lang.NumberFormatException`;
  #L3a09aa.  call temp:= `valueOf`(v19) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3a09b0.  v1:= temp @kind object;
  #L3a09b2.  v2:= "illegal radix: " @kind object;
  #L3a09b6.  call temp:= `concat`(v2, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3a09bc.  v1:= temp @kind object;
  #L3a09be.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a09c4.  throw v0;
  #L3a09c6.  v0:= new `java.lang.NumberFormatException`;
  #L3a09ca.  v1:= "empty string" @kind object;
  #L3a09ce.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a09d4.  throw v0;
}
