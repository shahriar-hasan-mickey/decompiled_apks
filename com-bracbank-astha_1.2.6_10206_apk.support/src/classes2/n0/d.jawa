record `n0.d` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`java.lang.CharSequence` v16 @kind object, `int` v17 , `int` v18 , `int` v19 ) @signature `Ln0/d;.a:(Ljava/lang/CharSequence;III)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3a09e8.  v0:= v18;
  #L3a09ec.  v1:= v19;
  #L3a09f0.  v2:= v0 - v17 @kind int;
  #L3a09f4.  if v2 == 0 then goto L3a0ae2;
  #L3a09f8.  v3:= 2I;
  #L3a09fa.  if v1 < v3 then goto L3a0ac2;
  #L3a09fe.  v3:= 36I;
  #L3a0a02.  if v1 > v3 then goto L3a0ac2;
  #L3a0a06.  v3:= (`long`) v1 @kind i2l;
  #L3a0a08.  v5:= -1L;
  #L3a0a0c.  call temp:= `a`(v5, v3) @signature `Ln0/b;.a:(JJ)J` @kind static;
  #L3a0a12.  v7:= temp @kind wide;
  #L3a0a14.  call temp:= `charAt`(v16, v17) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3a0a1a.  v9:= temp;
  #L3a0a1c.  v10:= 43I;
  #L3a0a20.  if v9 != v10 then goto L3a0a30;
  #L3a0a24.  v9:= 1I;
  #L3a0a26.  if v2 <= v9 then goto L3a0a30;
  #L3a0a2a.  v2:= v17 + 1;
  #L3a0a2e.  goto L3a0a34;
  #L3a0a30.  v2:= v17;
  #L3a0a34.  v9:= 0L;
  #L3a0a38.  v11:= v9 @kind wide;
  #L3a0a3a.  if v2 >= v0 then goto L3a0ac0;
  #L3a0a3e.  v13:= v16 @kind object;
  #L3a0a42.  call temp:= `charAt`(v13, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3a0a48.  v14:= temp;
  #L3a0a4a.  call temp:= `digit`(v14, v1) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L3a0a50.  v14:= temp;
  #L3a0a52.  v15:= -1I;
  #L3a0a54.  if v14 == v15 then goto L3a0aac;
  #L3a0a58.  v15:= lcmp(v11, v9);
  #L3a0a5c.  if v15 < 0 then goto L3a0a8c;
  #L3a0a60.  v15:= lcmp(v11, v7);
  #L3a0a64.  if v15 > 0 then goto L3a0a8c;
  #L3a0a68.  if v15 != 0 then goto L3a0a7a;
  #L3a0a6c.  call temp:= `a`(v5, v3) @signature `Ln0/a;.a:(JJ)J` @kind static;
  #L3a0a72.  v9:= temp @kind wide;
  #L3a0a74.  v10:= (`int`) v9 @kind l2i;
  #L3a0a76.  if v14 > v10 then goto L3a0a8c;
  #L3a0a7a.  v11:= v11 * v3 @kind long;
  #L3a0a7e.  v9:= (`long`) v14 @kind i2l;
  #L3a0a80.  v11:= v11 + v9 @kind long;
  #L3a0a82.  v2:= v2 + 1;
  #L3a0a86.  v9:= 0L;
  #L3a0a8a.  goto L3a0a3a;
  #L3a0a8c.  v0:= new `java.lang.NumberFormatException`;
  #L3a0a90.  call temp:= `toString`(v16) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3a0a96.  v1:= temp @kind object;
  #L3a0a98.  v2:= "Too large for unsigned long: " @kind object;
  #L3a0a9c.  call temp:= `concat`(v2, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3a0aa2.  v1:= temp @kind object;
  #L3a0aa4.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a0aaa.  throw v0;
  #L3a0aac.  v0:= new `java.lang.NumberFormatException`;
  #L3a0ab0.  call temp:= `toString`(v16) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3a0ab6.  v1:= temp @kind object;
  #L3a0ab8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a0abe.  throw v0;
  #L3a0ac0.  return v11 @kind wide;
  #L3a0ac2.  v0:= new `java.lang.NumberFormatException`;
  #L3a0ac6.  call temp:= `valueOf`(v19) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3a0acc.  v1:= temp @kind object;
  #L3a0ace.  v2:= "illegal radix: " @kind object;
  #L3a0ad2.  call temp:= `concat`(v2, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3a0ad8.  v1:= temp @kind object;
  #L3a0ada.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a0ae0.  throw v0;
  #L3a0ae2.  v0:= new `java.lang.NumberFormatException`;
  #L3a0ae6.  v1:= "empty string" @kind object;
  #L3a0aea.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a0af0.  throw v0;
}
