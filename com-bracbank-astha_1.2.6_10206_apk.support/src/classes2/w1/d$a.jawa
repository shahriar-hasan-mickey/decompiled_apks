record `w1.d$a` @kind class @AccessFlag FINAL {
  `java.util.List` `w1.d$a.a` @AccessFlag PRIVATE_FINAL;
  `okio.e` `w1.d$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `w1.d$a.c` @AccessFlag PRIVATE;
  `int` `w1.d$a.d` @AccessFlag PRIVATE;
  `w1.c`[] `w1.d$a.e` @AccessFlag ;
  `int` `w1.d$a.f` @AccessFlag ;
  `int` `w1.d$a.g` @AccessFlag ;
  `int` `w1.d$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`w1.d$a` v1 @kind this, `int` v2 , `int` v3 , `okio.q` v4 @kind object) @signature `Lw1/d$a;.<init>:(IILokio/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L401424.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40142a.  v0:= new `java.util.ArrayList`;
  #L40142e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L401434.  v1.`w1.d$a.a` @type ^`java.util.List` := v0 @kind object;
  #L401438.  v0:= 8I;
  #L40143c.  v0:= new `w1.c`[v0];
  #L401440.  v1.`w1.d$a.e` @type ^`w1.c`[] := v0 @kind object;
  #L401444.  v0:= length @variable v0;
  #L401446.  v0:= v0 + -1;
  #L40144a.  v1.`w1.d$a.f` @type ^`int` := v0;
  #L40144e.  v0:= 0I;
  #L401450.  v1.`w1.d$a.g` @type ^`int` := v0;
  #L401454.  v1.`w1.d$a.h` @type ^`int` := v0;
  #L401458.  v1.`w1.d$a.c` @type ^`int` := v2;
  #L40145c.  v1.`w1.d$a.d` @type ^`int` := v3;
  #L401460.  call temp:= `b`(v4) @signature `Lokio/k;.b:(Lokio/q;)Lokio/e;` @kind static;
  #L401466.  v2:= temp @kind object;
  #L401468.  v1.`w1.d$a.b` @type ^`okio.e` := v2 @kind object;
  #L40146c.  return @kind void;
}
procedure `void` `<init>`(`w1.d$a` v0 @kind this, `int` v1 , `okio.q` v2 @kind object) @signature `Lw1/d$a;.<init>:(ILokio/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L401480.  call `<init>`(v0, v1, v1, v2) @signature `Lw1/d$a;.<init>:(IILokio/q;)V` @kind direct;
  #L401486.  return @kind void;
}
procedure `void` `a`(`w1.d$a` v2 @kind this) @signature `Lw1/d$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L401498.  v0:= v2.`w1.d$a.d` @type ^`int`;
  #L40149c.  v1:= v2.`w1.d$a.h` @type ^`int`;
  #L4014a0.  if v0 >= v1 then goto L4014b8;
  #L4014a4.  if v0 != 0 then goto L4014b0;
  #L4014a8.  call `b`(v2) @signature `Lw1/d$a;.b:()V` @kind direct;
  #L4014ae.  goto L4014b8;
  #L4014b0.  v1:= v1 - v0 @kind int;
  #L4014b2.  call temp:= `d`(v2, v1) @signature `Lw1/d$a;.d:(I)I` @kind direct;
  #L4014b8.  return @kind void;
}
procedure `void` `b`(`w1.d$a` v2 @kind this) @signature `Lw1/d$a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4014cc.  v0:= v2.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L4014d0.  v1:= 0I;
  #L4014d2.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4014d8.  v0:= v2.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L4014dc.  v0:= length @variable v0;
  #L4014de.  v0:= v0 + -1;
  #L4014e2.  v2.`w1.d$a.f` @type ^`int` := v0;
  #L4014e6.  v0:= 0I;
  #L4014e8.  v2.`w1.d$a.g` @type ^`int` := v0;
  #L4014ec.  v2.`w1.d$a.h` @type ^`int` := v0;
  #L4014f0.  return @kind void;
}
procedure `int` `c`(`w1.d$a` v1 @kind this, `int` v2 ) @signature `Lw1/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4011ec.  v0:= v1.`w1.d$a.f` @type ^`int`;
  #L4011f0.  v0:= v0 + 1;
  #L4011f4.  v0:= v0 + v2 @kind int;
  #L4011f6.  return v0;
}
procedure `int` `d`(`w1.d$a` v4 @kind this, `int` v5 ) @signature `Lw1/d$a;.d:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L401208.  v0:= 0I;
  #L40120a.  if v5 <= 0 then goto L40127c;
  #L40120e.  v1:= v4.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L401212.  v1:= length @variable v1;
  #L401214.  v1:= v1 + -1;
  #L401218.  v2:= v4.`w1.d$a.f` @type ^`int`;
  #L40121c.  if v1 < v2 then goto L40125a;
  #L401220.  if v5 <= 0 then goto L40125a;
  #L401224.  v2:= v4.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L401228.  v3:= v2[v1] @kind object;
  #L40122c.  v3:= v3.`w1.c.c` @type ^`int`;
  #L401230.  v5:= v5 - v3 @kind int;
  #L401232.  v3:= v4.`w1.d$a.h` @type ^`int`;
  #L401236.  v2:= v2[v1] @kind object;
  #L40123a.  v2:= v2.`w1.c.c` @type ^`int`;
  #L40123e.  v3:= v3 - v2 @kind int;
  #L401240.  v4.`w1.d$a.h` @type ^`int` := v3;
  #L401244.  v2:= v4.`w1.d$a.g` @type ^`int`;
  #L401248.  v2:= v2 + -1;
  #L40124c.  v4.`w1.d$a.g` @type ^`int` := v2;
  #L401250.  v0:= v0 + 1;
  #L401254.  v1:= v1 + -1;
  #L401258.  goto L401218;
  #L40125a.  v5:= v4.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40125e.  v1:= v2 + 1;
  #L401262.  v2:= v2 + 1;
  #L401266.  v2:= v2 + v0 @kind int;
  #L401268.  v3:= v4.`w1.d$a.g` @type ^`int`;
  #L40126c.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L401272.  v5:= v4.`w1.d$a.f` @type ^`int`;
  #L401276.  v5:= v5 + v0 @kind int;
  #L401278.  v4.`w1.d$a.f` @type ^`int` := v5;
  #L40127c.  return v0;
}
procedure `okio.ByteString` `f`(`w1.d$a` v3 @kind this, `int` v4 ) @signature `Lw1/d$a;.f:(I)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L401320.  call temp:= `i`(v3, v4) @signature `Lw1/d$a;.i:(I)Z` @kind direct;
  #L401326.  v0:= temp;
  #L401328.  if v0 == 0 then goto L40133e;
  #L40132c.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401332.  v0:= temp @kind object;
  #L401334.  v4:= v0[v4] @kind object;
  #L401338.  v4:= v4.`w1.c.a` @type ^`okio.ByteString` @kind object;
  #L40133c.  return v4 @kind object;
  #L40133e.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401344.  v0:= temp @kind object;
  #L401346.  v0:= length @variable v0;
  #L401348.  v0:= v4 - v0 @kind int;
  #L40134c.  call temp:= `c`(v3, v0) @signature `Lw1/d$a;.c:(I)I` @kind direct;
  #L401352.  v0:= temp;
  #L401354.  if v0 < 0 then goto L40136c;
  #L401358.  v1:= v3.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40135c.  v2:= length @variable v1;
  #L40135e.  if v0 >= v2 then goto L40136c;
  #L401362.  v4:= v1[v0] @kind object;
  #L401366.  v4:= v4.`w1.c.a` @type ^`okio.ByteString` @kind object;
  #L40136a.  return v4 @kind object;
  #L40136c.  v0:= new `java.io.IOException`;
  #L401370.  v1:= new `java.lang.StringBuilder`;
  #L401374.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40137a.  v2:= "Header index too large " @kind object;
  #L40137e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L401384.  v4:= v4 + 1;
  #L401388.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40138e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L401394.  v4:= temp @kind object;
  #L401396.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40139c.  throw v0;
}
procedure `void` `h`(`w1.d$a` v5 @kind this, `int` v6 , `w1.c` v7 @kind object) @signature `Lw1/d$a;.h:(ILw1/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L401524.  v0:= v5.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L401528.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40152e.  v0:= v7.`w1.c.c` @type ^`int`;
  #L401532.  v1:= -1I;
  #L401534.  if v6 == v1 then goto L40154e;
  #L401538.  v2:= v5.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40153c.  call temp:= `c`(v5, v6) @signature `Lw1/d$a;.c:(I)I` @kind direct;
  #L401542.  v3:= temp;
  #L401544.  v2:= v2[v3] @kind object;
  #L401548.  v2:= v2.`w1.c.c` @type ^`int`;
  #L40154c.  v0:= v0 - v2 @kind int;
  #L40154e.  v2:= v5.`w1.d$a.d` @type ^`int`;
  #L401552.  if v0 <= v2 then goto L40155e;
  #L401556.  call `b`(v5) @signature `Lw1/d$a;.b:()V` @kind direct;
  #L40155c.  return @kind void;
  #L40155e.  v3:= v5.`w1.d$a.h` @type ^`int`;
  #L401562.  v3:= v3 + v0 @kind int;
  #L401564.  v3:= v3 - v2 @kind int;
  #L401566.  call temp:= `d`(v5, v3) @signature `Lw1/d$a;.d:(I)I` @kind direct;
  #L40156c.  v2:= temp;
  #L40156e.  if v6 != v1 then goto L4015ce;
  #L401572.  v6:= v5.`w1.d$a.g` @type ^`int`;
  #L401576.  v6:= v6 + 1;
  #L40157a.  v1:= v5.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40157e.  v2:= length @variable v1;
  #L401580.  if v6 <= v2 then goto L4015ac;
  #L401584.  v6:= length @variable v1;
  #L401586.  v6:= v6 * 2;
  #L40158a.  v6:= new `w1.c`[v6];
  #L40158e.  v2:= 0I;
  #L401590.  v3:= length @variable v1;
  #L401592.  v4:= length @variable v1;
  #L401594.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40159a.  v1:= v5.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40159e.  v1:= length @variable v1;
  #L4015a0.  v1:= v1 + -1;
  #L4015a4.  v5.`w1.d$a.f` @type ^`int` := v1;
  #L4015a8.  v5.`w1.d$a.e` @type ^`w1.c`[] := v6 @kind object;
  #L4015ac.  v6:= v5.`w1.d$a.f` @type ^`int`;
  #L4015b0.  v1:= v6 + -1;
  #L4015b4.  v5.`w1.d$a.f` @type ^`int` := v1;
  #L4015b8.  v1:= v5.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L4015bc.  v1[v6]:= v7 @kind object;
  #L4015c0.  v6:= v5.`w1.d$a.g` @type ^`int`;
  #L4015c4.  v6:= v6 + 1;
  #L4015c8.  v5.`w1.d$a.g` @type ^`int` := v6;
  #L4015cc.  goto L4015e2;
  #L4015ce.  call temp:= `c`(v5, v6) @signature `Lw1/d$a;.c:(I)I` @kind direct;
  #L4015d4.  v1:= temp;
  #L4015d6.  v1:= v1 + v2 @kind int;
  #L4015d8.  v6:= v6 + v1 @kind int;
  #L4015da.  v1:= v5.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L4015de.  v1[v6]:= v7 @kind object;
  #L4015e2.  v6:= v5.`w1.d$a.h` @type ^`int`;
  #L4015e6.  v6:= v6 + v0 @kind int;
  #L4015e8.  v5.`w1.d$a.h` @type ^`int` := v6;
  #L4015ec.  return @kind void;
}
procedure `boolean` `i`(`w1.d$a` v2 @kind this, `int` v3 ) @signature `Lw1/d$a;.i:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4011c0.  v0:= 1I;
  #L4011c2.  if v3 < 0 then goto L4011d8;
  #L4011c6.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L4011cc.  v1:= temp @kind object;
  #L4011ce.  v1:= length @variable v1;
  #L4011d0.  v1:= v1 - v0 @kind int;
  #L4011d2.  if v3 > v1 then goto L4011d8;
  #L4011d6.  goto L4011da;
  #L4011d8.  v0:= 0I;
  #L4011da.  return v0;
}
procedure `int` `j`(`w1.d$a` v1 @kind this) @signature `Lw1/d$a;.j:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L401290.  v0:= v1.`w1.d$a.b` @type ^`okio.e` @kind object;
  #L401294.  call temp:= `readByte`(v0) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L40129a.  v0:= temp;
  #L40129c.  v0:= v0 ^& 255;
  #L4012a0.  return v0;
}
procedure `void` `m`(`w1.d$a` v3 @kind this, `int` v4 ) @signature `Lw1/d$a;.m:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L40172c.  call temp:= `i`(v3, v4) @signature `Lw1/d$a;.i:(I)Z` @kind direct;
  #L401732.  v0:= temp;
  #L401734.  if v0 == 0 then goto L401750;
  #L401738.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L40173e.  v0:= temp @kind object;
  #L401740.  v4:= v0[v4] @kind object;
  #L401744.  v0:= v3.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L401748.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40174e.  goto L401786;
  #L401750.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401756.  v0:= temp @kind object;
  #L401758.  v0:= length @variable v0;
  #L40175a.  v0:= v4 - v0 @kind int;
  #L40175e.  call temp:= `c`(v3, v0) @signature `Lw1/d$a;.c:(I)I` @kind direct;
  #L401764.  v0:= temp;
  #L401766.  if v0 < 0 then goto L401788;
  #L40176a.  v1:= v3.`w1.d$a.e` @type ^`w1.c`[] @kind object;
  #L40176e.  v2:= length @variable v1;
  #L401770.  v2:= v2 + -1;
  #L401774.  if v0 > v2 then goto L401788;
  #L401778.  v4:= v3.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L40177c.  v0:= v1[v0] @kind object;
  #L401780.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L401786.  return @kind void;
  #L401788.  v0:= new `java.io.IOException`;
  #L40178c.  v1:= new `java.lang.StringBuilder`;
  #L401790.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L401796.  v2:= "Header index too large " @kind object;
  #L40179a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4017a0.  v4:= v4 + 1;
  #L4017a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4017aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4017b0.  v4:= temp @kind object;
  #L4017b2.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4017b8.  throw v0;
}
procedure `void` `o`(`w1.d$a` v2 @kind this, `int` v3 ) @signature `Lw1/d$a;.o:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4017cc.  call temp:= `f`(v2, v3) @signature `Lw1/d$a;.f:(I)Lokio/ByteString;` @kind direct;
  #L4017d2.  v3:= temp @kind object;
  #L4017d4.  call temp:= `k`(v2) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L4017da.  v0:= temp @kind object;
  #L4017dc.  v1:= new `w1.c`;
  #L4017e0.  call `<init>`(v1, v3, v0) @signature `Lw1/c;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L4017e6.  v3:= -1I;
  #L4017e8.  call `h`(v2, v3, v1) @signature `Lw1/d$a;.h:(ILw1/c;)V` @kind direct;
  #L4017ee.  return @kind void;
}
procedure `void` `p`(`w1.d$a` v3 @kind this) @signature `Lw1/d$a;.p:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L401800.  call temp:= `k`(v3) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L401806.  v0:= temp @kind object;
  #L401808.  call temp:= `b`(v0) @signature `Lw1/d;.b:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L40180e.  v0:= temp @kind object;
  #L401810.  call temp:= `k`(v3) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L401816.  v1:= temp @kind object;
  #L401818.  v2:= new `w1.c`;
  #L40181c.  call `<init>`(v2, v0, v1) @signature `Lw1/c;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L401822.  v0:= -1I;
  #L401824.  call `h`(v3, v0, v2) @signature `Lw1/d$a;.h:(ILw1/c;)V` @kind direct;
  #L40182a.  return @kind void;
}
procedure `void` `q`(`w1.d$a` v3 @kind this, `int` v4 ) @signature `Lw1/d$a;.q:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L40183c.  call temp:= `f`(v3, v4) @signature `Lw1/d$a;.f:(I)Lokio/ByteString;` @kind direct;
  #L401842.  v4:= temp @kind object;
  #L401844.  call temp:= `k`(v3) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L40184a.  v0:= temp @kind object;
  #L40184c.  v1:= v3.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L401850.  v2:= new `w1.c`;
  #L401854.  call `<init>`(v2, v4, v0) @signature `Lw1/c;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L40185a.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L401860.  return @kind void;
}
procedure `void` `r`(`w1.d$a` v4 @kind this) @signature `Lw1/d$a;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L401874.  call temp:= `k`(v4) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L40187a.  v0:= temp @kind object;
  #L40187c.  call temp:= `b`(v0) @signature `Lw1/d;.b:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L401882.  v0:= temp @kind object;
  #L401884.  call temp:= `k`(v4) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @kind virtual;
  #L40188a.  v1:= temp @kind object;
  #L40188c.  v2:= v4.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L401890.  v3:= new `w1.c`;
  #L401894.  call `<init>`(v3, v0, v1) @signature `Lw1/c;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L40189a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4018a0.  return @kind void;
}
procedure `java.util.List` `e`(`w1.d$a` v2 @kind this) @signature `Lw1/d$a;.e:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4012f4.  v0:= new `java.util.ArrayList`;
  #L4012f8.  v1:= v2.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L4012fc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L401302.  v1:= v2.`w1.d$a.a` @type ^`java.util.List` @kind object;
  #L401306.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L40130c.  return v0 @kind object;
}
procedure `void` `g`(`w1.d$a` v0 @kind this, `int` v1 ) @signature `Lw1/d$a;.g:(I)V` @AccessFlag  {
    temp;

  #L401504.  v0.`w1.d$a.c` @type ^`int` := v1;
  #L401508.  v0.`w1.d$a.d` @type ^`int` := v1;
  #L40150c.  call `a`(v0) @signature `Lw1/d$a;.a:()V` @kind direct;
  #L401512.  return @kind void;
}
procedure `okio.ByteString` `k`(`w1.d$a` v5 @kind this) @signature `Lw1/d$a;.k:()Lokio/ByteString;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4013b0.  call temp:= `j`(v5) @signature `Lw1/d$a;.j:()I` @kind direct;
  #L4013b6.  v0:= temp;
  #L4013b8.  v1:= v0 ^& 128;
  #L4013bc.  v2:= 128I;
  #L4013c0.  if v1 != v2 then goto L4013c8;
  #L4013c4.  v1:= 1I;
  #L4013c6.  goto L4013ca;
  #L4013c8.  v1:= 0I;
  #L4013ca.  v2:= 127I;
  #L4013ce.  call temp:= `n`(v5, v0, v2) @signature `Lw1/d$a;.n:(II)I` @kind virtual;
  #L4013d4.  v0:= temp;
  #L4013d6.  if v1 == 0 then goto L401402;
  #L4013da.  call temp:= `f`() @signature `Lw1/f;.f:()Lw1/f;` @kind static;
  #L4013e0.  v1:= temp @kind object;
  #L4013e2.  v2:= v5.`w1.d$a.b` @type ^`okio.e` @kind object;
  #L4013e6.  v3:= (`long`) v0 @kind i2l;
  #L4013e8.  call temp:= `F`(v2, v3) @signature `Lokio/e;.F:(J)[B` @kind interface;
  #L4013ee.  v0:= temp @kind object;
  #L4013f0.  call temp:= `c`(v1, v0) @signature `Lw1/f;.c:([B)[B` @kind virtual;
  #L4013f6.  v0:= temp @kind object;
  #L4013f8.  call temp:= `j`(v0) @signature `Lokio/ByteString;.j:([B)Lokio/ByteString;` @kind static;
  #L4013fe.  v0:= temp @kind object;
  #L401400.  return v0 @kind object;
  #L401402.  v1:= v5.`w1.d$a.b` @type ^`okio.e` @kind object;
  #L401406.  v2:= (`long`) v0 @kind i2l;
  #L401408.  call temp:= `k`(v1, v2) @signature `Lokio/e;.k:(J)Lokio/ByteString;` @kind interface;
  #L40140e.  v0:= temp @kind object;
  #L401410.  return v0 @kind object;
}
procedure `void` `l`(`w1.d$a` v3 @kind this) @signature `Lw1/d$a;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L401600.  v0:= v3.`w1.d$a.b` @type ^`okio.e` @kind object;
  #L401604.  call temp:= `n`(v0) @signature `Lokio/e;.n:()Z` @kind interface;
  #L40160a.  v0:= temp;
  #L40160c.  if v0 != 0 then goto L40171a;
  #L401610.  v0:= v3.`w1.d$a.b` @type ^`okio.e` @kind object;
  #L401614.  call temp:= `readByte`(v0) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L40161a.  v0:= temp;
  #L40161c.  v0:= v0 ^& 255;
  #L401620.  v1:= 128I;
  #L401624.  if v0 == v1 then goto L40170a;
  #L401628.  v2:= v0 ^& 128;
  #L40162c.  if v2 != v1 then goto L401648;
  #L401630.  v1:= 127I;
  #L401634.  call temp:= `n`(v3, v0, v1) @signature `Lw1/d$a;.n:(II)I` @kind virtual;
  #L40163a.  v0:= temp;
  #L40163c.  v0:= v0 + -1;
  #L401640.  call `m`(v3, v0) @signature `Lw1/d$a;.m:(I)V` @kind direct;
  #L401646.  goto L401600;
  #L401648.  v1:= 64I;
  #L40164c.  if v0 != v1 then goto L401658;
  #L401650.  call `p`(v3) @signature `Lw1/d$a;.p:()V` @kind direct;
  #L401656.  goto L401600;
  #L401658.  v2:= v0 ^& 64;
  #L40165c.  if v2 != v1 then goto L401678;
  #L401660.  v1:= 63I;
  #L401664.  call temp:= `n`(v3, v0, v1) @signature `Lw1/d$a;.n:(II)I` @kind virtual;
  #L40166a.  v0:= temp;
  #L40166c.  v0:= v0 + -1;
  #L401670.  call `o`(v3, v0) @signature `Lw1/d$a;.o:(I)V` @kind direct;
  #L401676.  goto L401600;
  #L401678.  v1:= v0 ^& 32;
  #L40167c.  v2:= 32I;
  #L401680.  if v1 != v2 then goto L4016da;
  #L401684.  v1:= 31I;
  #L401688.  call temp:= `n`(v3, v0, v1) @signature `Lw1/d$a;.n:(II)I` @kind virtual;
  #L40168e.  v0:= temp;
  #L401690.  v3.`w1.d$a.d` @type ^`int` := v0;
  #L401694.  if v0 < 0 then goto L4016a8;
  #L401698.  v1:= v3.`w1.d$a.c` @type ^`int`;
  #L40169c.  if v0 > v1 then goto L4016a8;
  #L4016a0.  call `a`(v3) @signature `Lw1/d$a;.a:()V` @kind direct;
  #L4016a6.  goto L401600;
  #L4016a8.  v0:= new `java.io.IOException`;
  #L4016ac.  v1:= new `java.lang.StringBuilder`;
  #L4016b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4016b6.  v2:= "Invalid dynamic table size update " @kind object;
  #L4016ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4016c0.  v2:= v3.`w1.d$a.d` @type ^`int`;
  #L4016c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4016ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4016d0.  v1:= temp @kind object;
  #L4016d2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4016d8.  throw v0;
  #L4016da.  v1:= 16I;
  #L4016de.  if v0 == v1 then goto L401700;
  #L4016e2.  if v0 != 0 then goto L4016e8;
  #L4016e6.  goto L401700;
  #L4016e8.  v1:= 15I;
  #L4016ec.  call temp:= `n`(v3, v0, v1) @signature `Lw1/d$a;.n:(II)I` @kind virtual;
  #L4016f2.  v0:= temp;
  #L4016f4.  v0:= v0 + -1;
  #L4016f8.  call `q`(v3, v0) @signature `Lw1/d$a;.q:(I)V` @kind direct;
  #L4016fe.  goto L401600;
  #L401700.  call `r`(v3) @signature `Lw1/d$a;.r:()V` @kind direct;
  #L401706.  goto L401600;
  #L40170a.  v0:= new `java.io.IOException`;
  #L40170e.  v1:= "index == 0" @kind object;
  #L401712.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401718.  throw v0;
  #L40171a.  return @kind void;
}
procedure `int` `n`(`w1.d$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lw1/d$a;.n:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4012b4.  v3:= v3 ^& v4 @kind int;
  #L4012b6.  if v3 >= v4 then goto L4012bc;
  #L4012ba.  return v3;
  #L4012bc.  v3:= 0I;
  #L4012be.  call temp:= `j`(v2) @signature `Lw1/d$a;.j:()I` @kind direct;
  #L4012c4.  v0:= temp;
  #L4012c6.  v1:= v0 ^& 128;
  #L4012ca.  if v1 == 0 then goto L4012dc;
  #L4012ce.  v0:= v0 ^& 127;
  #L4012d2.  v0:= v0 ^< v3 @kind int;
  #L4012d4.  v4:= v4 + v0 @kind int;
  #L4012d6.  v3:= v3 + 7;
  #L4012da.  goto L4012be;
  #L4012dc.  v3:= v0 ^< v3 @kind int;
  #L4012e0.  v4:= v4 + v3 @kind int;
  #L4012e2.  return v4;
}
