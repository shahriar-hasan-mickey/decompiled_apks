record `w1.d$b` @kind class @AccessFlag FINAL {
  `okio.c` `w1.d$b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `w1.d$b.b` @AccessFlag PRIVATE;
  `int` `w1.d$b.c` @AccessFlag ;
  `int` `w1.d$b.d` @AccessFlag PRIVATE;
  `boolean` `w1.d$b.e` @AccessFlag PRIVATE;
  `int` `w1.d$b.f` @AccessFlag PRIVATE;
  `w1.c`[] `w1.d$b.g` @AccessFlag ;
  `int` `w1.d$b.h` @AccessFlag ;
  `int` `w1.d$b.i` @AccessFlag PRIVATE;
  `int` `w1.d$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`w1.d$b` v1 @kind this, `int` v2 , `boolean` v3 , `okio.c` v4 @kind object) @signature `Lw1/d$b;.<init>:(IZLokio/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40193c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L401942.  v0:= 2147483647I;
  #L401948.  v1.`w1.d$b.d` @type ^`int` := v0;
  #L40194c.  v0:= 8I;
  #L401950.  v0:= new `w1.c`[v0];
  #L401954.  v1.`w1.d$b.g` @type ^`w1.c`[] := v0 @kind object;
  #L401958.  v0:= length @variable v0;
  #L40195a.  v0:= v0 + -1;
  #L40195e.  v1.`w1.d$b.i` @type ^`int` := v0;
  #L401962.  v1.`w1.d$b.c` @type ^`int` := v2;
  #L401966.  v1.`w1.d$b.f` @type ^`int` := v2;
  #L40196a.  v1.`w1.d$b.b` @type ^`boolean` := v3 @kind boolean;
  #L40196e.  v1.`w1.d$b.a` @type ^`okio.c` := v4 @kind object;
  #L401972.  return @kind void;
}
procedure `void` `<init>`(`w1.d$b` v2 @kind this, `okio.c` v3 @kind object) @signature `Lw1/d$b;.<init>:(Lokio/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L401984.  v0:= 4096I;
  #L401988.  v1:= 0I;
  #L40198a.  call `<init>`(v2, v0, v1, v3) @signature `Lw1/d$b;.<init>:(IZLokio/c;)V` @kind direct;
  #L401990.  return @kind void;
}
procedure `void` `a`(`w1.d$b` v2 @kind this) @signature `Lw1/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4019a4.  v0:= v2.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L4019a8.  v1:= 0I;
  #L4019aa.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4019b0.  v0:= v2.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L4019b4.  v0:= length @variable v0;
  #L4019b6.  v0:= v0 + -1;
  #L4019ba.  v2.`w1.d$b.i` @type ^`int` := v0;
  #L4019be.  v0:= 0I;
  #L4019c0.  v2.`w1.d$b.h` @type ^`int` := v0;
  #L4019c4.  v2.`w1.d$b.j` @type ^`int` := v0;
  #L4019c8.  return @kind void;
}
procedure `int` `b`(`w1.d$b` v4 @kind this, `int` v5 ) @signature `Lw1/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4018b4.  v0:= 0I;
  #L4018b6.  if v5 <= 0 then goto L401928;
  #L4018ba.  v1:= v4.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L4018be.  v1:= length @variable v1;
  #L4018c0.  v1:= v1 + -1;
  #L4018c4.  v2:= v4.`w1.d$b.i` @type ^`int`;
  #L4018c8.  if v1 < v2 then goto L401906;
  #L4018cc.  if v5 <= 0 then goto L401906;
  #L4018d0.  v2:= v4.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L4018d4.  v3:= v2[v1] @kind object;
  #L4018d8.  v3:= v3.`w1.c.c` @type ^`int`;
  #L4018dc.  v5:= v5 - v3 @kind int;
  #L4018de.  v3:= v4.`w1.d$b.j` @type ^`int`;
  #L4018e2.  v2:= v2[v1] @kind object;
  #L4018e6.  v2:= v2.`w1.c.c` @type ^`int`;
  #L4018ea.  v3:= v3 - v2 @kind int;
  #L4018ec.  v4.`w1.d$b.j` @type ^`int` := v3;
  #L4018f0.  v2:= v4.`w1.d$b.h` @type ^`int`;
  #L4018f4.  v2:= v2 + -1;
  #L4018f8.  v4.`w1.d$b.h` @type ^`int` := v2;
  #L4018fc.  v0:= v0 + 1;
  #L401900.  v1:= v1 + -1;
  #L401904.  goto L4018c4;
  #L401906.  v5:= v4.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L40190a.  v1:= v2 + 1;
  #L40190e.  v2:= v2 + 1;
  #L401912.  v2:= v2 + v0 @kind int;
  #L401914.  v3:= v4.`w1.d$b.h` @type ^`int`;
  #L401918.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40191e.  v5:= v4.`w1.d$b.i` @type ^`int`;
  #L401922.  v5:= v5 + v0 @kind int;
  #L401924.  v4.`w1.d$b.i` @type ^`int` := v5;
  #L401928.  return v0;
}
procedure `void` `c`(`w1.d$b` v6 @kind this, `w1.c` v7 @kind object) @signature `Lw1/d$b;.c:(Lw1/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4019dc.  v0:= v7.`w1.c.c` @type ^`int`;
  #L4019e0.  v1:= v6.`w1.d$b.f` @type ^`int`;
  #L4019e4.  if v0 <= v1 then goto L4019f0;
  #L4019e8.  call `a`(v6) @signature `Lw1/d$b;.a:()V` @kind direct;
  #L4019ee.  return @kind void;
  #L4019f0.  v2:= v6.`w1.d$b.j` @type ^`int`;
  #L4019f4.  v2:= v2 + v0 @kind int;
  #L4019f6.  v2:= v2 - v1 @kind int;
  #L4019f8.  call temp:= `b`(v6, v2) @signature `Lw1/d$b;.b:(I)I` @kind direct;
  #L4019fe.  v1:= v6.`w1.d$b.h` @type ^`int`;
  #L401a02.  v1:= v1 + 1;
  #L401a06.  v2:= v6.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L401a0a.  v3:= length @variable v2;
  #L401a0c.  if v1 <= v3 then goto L401a38;
  #L401a10.  v1:= length @variable v2;
  #L401a12.  v1:= v1 * 2;
  #L401a16.  v1:= new `w1.c`[v1];
  #L401a1a.  v3:= 0I;
  #L401a1c.  v4:= length @variable v2;
  #L401a1e.  v5:= length @variable v2;
  #L401a20.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L401a26.  v2:= v6.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L401a2a.  v2:= length @variable v2;
  #L401a2c.  v2:= v2 + -1;
  #L401a30.  v6.`w1.d$b.i` @type ^`int` := v2;
  #L401a34.  v6.`w1.d$b.g` @type ^`w1.c`[] := v1 @kind object;
  #L401a38.  v1:= v6.`w1.d$b.i` @type ^`int`;
  #L401a3c.  v2:= v1 + -1;
  #L401a40.  v6.`w1.d$b.i` @type ^`int` := v2;
  #L401a44.  v2:= v6.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L401a48.  v2[v1]:= v7 @kind object;
  #L401a4c.  v7:= v6.`w1.d$b.h` @type ^`int`;
  #L401a50.  v7:= v7 + 1;
  #L401a54.  v6.`w1.d$b.h` @type ^`int` := v7;
  #L401a58.  v7:= v6.`w1.d$b.j` @type ^`int`;
  #L401a5c.  v7:= v7 + v0 @kind int;
  #L401a5e.  v6.`w1.d$b.j` @type ^`int` := v7;
  #L401a62.  return @kind void;
}
procedure `void` `d`(`w1.d$b` v4 @kind this, `okio.ByteString` v5 @kind object) @signature `Lw1/d$b;.d:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L401a74.  v0:= v4.`w1.d$b.b` @type ^`boolean` @kind boolean;
  #L401a78.  v1:= 127I;
  #L401a7c.  if v0 == 0 then goto L401af2;
  #L401a80.  call temp:= `f`() @signature `Lw1/f;.f:()Lw1/f;` @kind static;
  #L401a86.  v0:= temp @kind object;
  #L401a88.  call temp:= `t`(v5) @signature `Lokio/ByteString;.t:()[B` @kind virtual;
  #L401a8e.  v2:= temp @kind object;
  #L401a90.  call temp:= `e`(v0, v2) @signature `Lw1/f;.e:([B)I` @kind virtual;
  #L401a96.  v0:= temp;
  #L401a98.  call temp:= `p`(v5) @signature `Lokio/ByteString;.p:()I` @kind virtual;
  #L401a9e.  v2:= temp;
  #L401aa0.  if v0 >= v2 then goto L401af2;
  #L401aa4.  v0:= new `okio.c`;
  #L401aa8.  call `<init>`(v0) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L401aae.  call temp:= `f`() @signature `Lw1/f;.f:()Lw1/f;` @kind static;
  #L401ab4.  v2:= temp @kind object;
  #L401ab6.  call temp:= `t`(v5) @signature `Lokio/ByteString;.t:()[B` @kind virtual;
  #L401abc.  v5:= temp @kind object;
  #L401abe.  call temp:= `X`(v0) @signature `Lokio/c;.X:()Ljava/io/OutputStream;` @kind virtual;
  #L401ac4.  v3:= temp @kind object;
  #L401ac6.  call `d`(v2, v5, v3) @signature `Lw1/f;.d:([BLjava/io/OutputStream;)V` @kind virtual;
  #L401acc.  call temp:= `b0`(v0) @signature `Lokio/c;.b0:()Lokio/ByteString;` @kind virtual;
  #L401ad2.  v5:= temp @kind object;
  #L401ad4.  call temp:= `p`(v5) @signature `Lokio/ByteString;.p:()I` @kind virtual;
  #L401ada.  v0:= temp;
  #L401adc.  v2:= 128I;
  #L401ae0.  call `f`(v4, v0, v1, v2) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401ae6.  v0:= v4.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401aea.  call temp:= `k0`(v0, v5) @signature `Lokio/c;.k0:(Lokio/ByteString;)Lokio/c;` @kind virtual;
  #L401af0.  goto L401b0c;
  #L401af2.  call temp:= `p`(v5) @signature `Lokio/ByteString;.p:()I` @kind virtual;
  #L401af8.  v0:= temp;
  #L401afa.  v2:= 0I;
  #L401afc.  call `f`(v4, v0, v1, v2) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401b02.  v0:= v4.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401b06.  call temp:= `k0`(v0, v5) @signature `Lokio/c;.k0:(Lokio/ByteString;)Lokio/c;` @kind virtual;
  #L401b0c.  return @kind void;
}
procedure `void` `e`(`w1.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lw1/d$b;.e:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L401b20.  v0:= v13.`w1.d$b.e` @type ^`boolean` @kind boolean;
  #L401b24.  v1:= 0I;
  #L401b26.  if v0 == 0 then goto L401b5c;
  #L401b2a.  v0:= v13.`w1.d$b.d` @type ^`int`;
  #L401b2e.  v2:= v13.`w1.d$b.f` @type ^`int`;
  #L401b32.  v3:= 32I;
  #L401b36.  v4:= 31I;
  #L401b3a.  if v0 >= v2 then goto L401b44;
  #L401b3e.  call `f`(v13, v0, v4, v3) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401b44.  v13.`w1.d$b.e` @type ^`boolean` := v1 @kind boolean;
  #L401b48.  v0:= 2147483647I;
  #L401b4e.  v13.`w1.d$b.d` @type ^`int` := v0;
  #L401b52.  v0:= v13.`w1.d$b.f` @type ^`int`;
  #L401b56.  call `f`(v13, v0, v4, v3) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401b5c.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L401b62.  v0:= temp;
  #L401b64.  v2:= 0I;
  #L401b66.  if v2 >= v0 then goto L401d0c;
  #L401b6a.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L401b70.  v3:= temp @kind object;
  #L401b72.  v3:= (`w1.c`) v3 @kind object;
  #L401b76.  v4:= v3.`w1.c.a` @type ^`okio.ByteString` @kind object;
  #L401b7a.  call temp:= `s`(v4) @signature `Lokio/ByteString;.s:()Lokio/ByteString;` @kind virtual;
  #L401b80.  v4:= temp @kind object;
  #L401b82.  v5:= v3.`w1.c.b` @type ^`okio.ByteString` @kind object;
  #L401b86.  call temp:= `c`() @signature `Lw1/d;.c:()Ljava/util/Map;` @kind static;
  #L401b8c.  v6:= temp @kind object;
  #L401b8e.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L401b94.  v6:= temp @kind object;
  #L401b96.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L401b9a.  v7:= -1I;
  #L401b9c.  if v6 == 0 then goto L401c0a;
  #L401ba0.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L401ba6.  v6:= temp;
  #L401ba8.  v6:= v6 + 1;
  #L401bac.  v8:= 2I;
  #L401bae.  if v6 < v8 then goto L401c04;
  #L401bb2.  v8:= 7I;
  #L401bb4.  if v6 > v8 then goto L401c04;
  #L401bb8.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401bbe.  v8:= temp @kind object;
  #L401bc0.  v9:= v6 + -1;
  #L401bc4.  v8:= v8[v9] @kind object;
  #L401bc8.  v8:= v8.`w1.c.b` @type ^`okio.ByteString` @kind object;
  #L401bcc.  call temp:= `equals`(v8, v5) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401bd2.  v8:= temp;
  #L401bd4.  if v8 == 0 then goto L401bdc;
  #L401bd8.  v8:= v6;
  #L401bda.  goto L401c0e;
  #L401bdc.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401be2.  v8:= temp @kind object;
  #L401be4.  v8:= v8[v6] @kind object;
  #L401be8.  v8:= v8.`w1.c.b` @type ^`okio.ByteString` @kind object;
  #L401bec.  call temp:= `equals`(v8, v5) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401bf2.  v8:= temp;
  #L401bf4.  if v8 == 0 then goto L401c04;
  #L401bf8.  v8:= v6 + 1;
  #L401bfc.  v12:= v8;
  #L401bfe.  v8:= v6;
  #L401c00.  v6:= v12;
  #L401c02.  goto L401c0e;
  #L401c04.  v8:= v6;
  #L401c06.  v6:= -1I;
  #L401c08.  goto L401c0e;
  #L401c0a.  v6:= -1I;
  #L401c0c.  v8:= -1I;
  #L401c0e.  if v6 != v7 then goto L401c7e;
  #L401c12.  v9:= v13.`w1.d$b.i` @type ^`int`;
  #L401c16.  v9:= v9 + 1;
  #L401c1a.  v10:= v13.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L401c1e.  v11:= length @variable v10;
  #L401c20.  if v9 >= v11 then goto L401c7e;
  #L401c24.  v10:= v10[v9] @kind object;
  #L401c28.  v10:= v10.`w1.c.a` @type ^`okio.ByteString` @kind object;
  #L401c2c.  call temp:= `equals`(v10, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401c32.  v10:= temp;
  #L401c34.  if v10 == 0 then goto L401c7c;
  #L401c38.  v10:= v13.`w1.d$b.g` @type ^`w1.c`[] @kind object;
  #L401c3c.  v10:= v10[v9] @kind object;
  #L401c40.  v10:= v10.`w1.c.b` @type ^`okio.ByteString` @kind object;
  #L401c44.  call temp:= `equals`(v10, v5) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401c4a.  v10:= temp;
  #L401c4c.  if v10 == 0 then goto L401c64;
  #L401c50.  v6:= v13.`w1.d$b.i` @type ^`int`;
  #L401c54.  v9:= v9 - v6 @kind int;
  #L401c56.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401c5c.  v6:= temp @kind object;
  #L401c5e.  v6:= length @variable v6;
  #L401c60.  v6:= v6 + v9 @kind int;
  #L401c62.  goto L401c7e;
  #L401c64.  if v8 != v7 then goto L401c7c;
  #L401c68.  v8:= v13.`w1.d$b.i` @type ^`int`;
  #L401c6c.  v8:= v9 - v8 @kind int;
  #L401c70.  call temp:= `a`() @signature `Lw1/d;.a:()[Lw1/c;` @kind static;
  #L401c76.  v10:= temp @kind object;
  #L401c78.  v10:= length @variable v10;
  #L401c7a.  v8:= v8 + v10 @kind int;
  #L401c7c.  goto L401c16;
  #L401c7e.  if v6 == v7 then goto L401c92;
  #L401c82.  v3:= 127I;
  #L401c86.  v4:= 128I;
  #L401c8a.  call `f`(v13, v6, v3, v4) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401c90.  goto L401d04;
  #L401c92.  v6:= 64I;
  #L401c96.  if v8 != v7 then goto L401cb8;
  #L401c9a.  v7:= v13.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401c9e.  call temp:= `o0`(v7, v6) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L401ca4.  call `d`(v13, v4) @signature `Lw1/d$b;.d:(Lokio/ByteString;)V` @kind virtual;
  #L401caa.  call `d`(v13, v5) @signature `Lw1/d$b;.d:(Lokio/ByteString;)V` @kind virtual;
  #L401cb0.  call `c`(v13, v3) @signature `Lw1/d$b;.c:(Lw1/c;)V` @kind direct;
  #L401cb6.  goto L401d04;
  #L401cb8.  call temp:= `d`() @signature `Lw1/d;.d:()Lokio/ByteString;` @kind static;
  #L401cbe.  v7:= temp @kind object;
  #L401cc0.  call temp:= `q`(v4, v7) @signature `Lokio/ByteString;.q:(Lokio/ByteString;)Z` @kind virtual;
  #L401cc6.  v7:= temp;
  #L401cc8.  if v7 == 0 then goto L401cee;
  #L401ccc.  v7:= `@@w1.c.h` @type ^`okio.ByteString` @kind object;
  #L401cd0.  call temp:= `equals`(v7, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401cd6.  v4:= temp;
  #L401cd8.  if v4 != 0 then goto L401cee;
  #L401cdc.  v3:= 15I;
  #L401ce0.  call `f`(v13, v8, v3, v1) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401ce6.  call `d`(v13, v5) @signature `Lw1/d$b;.d:(Lokio/ByteString;)V` @kind virtual;
  #L401cec.  goto L401d04;
  #L401cee.  v4:= 63I;
  #L401cf2.  call `f`(v13, v8, v4, v6) @signature `Lw1/d$b;.f:(III)V` @kind virtual;
  #L401cf8.  call `d`(v13, v5) @signature `Lw1/d$b;.d:(Lokio/ByteString;)V` @kind virtual;
  #L401cfe.  call `c`(v13, v3) @signature `Lw1/d$b;.c:(Lw1/c;)V` @kind direct;
  #L401d04.  v2:= v2 + 1;
  #L401d08.  goto L401b66;
  #L401d0c.  return @kind void;
}
procedure `void` `f`(`w1.d$b` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lw1/d$b;.f:(III)V` @AccessFlag  {
    temp;
    v0;

  #L401d20.  if v2 >= v3 then goto L401d32;
  #L401d24.  v3:= v1.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401d28.  v2:= v2 ^| v4 @kind int;
  #L401d2a.  call temp:= `o0`(v3, v2) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L401d30.  return @kind void;
  #L401d32.  v0:= v1.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401d36.  v4:= v4 ^| v3 @kind int;
  #L401d38.  call temp:= `o0`(v0, v4) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L401d3e.  v2:= v2 - v3 @kind int;
  #L401d40.  v3:= 128I;
  #L401d44.  if v2 < v3 then goto L401d5e;
  #L401d48.  v4:= v2 ^& 127;
  #L401d4c.  v0:= v1.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401d50.  v3:= v3 ^| v4 @kind int;
  #L401d52.  call temp:= `o0`(v0, v3) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L401d58.  v2:= v2 ^>> 7;
  #L401d5c.  goto L401d40;
  #L401d5e.  v3:= v1.`w1.d$b.a` @type ^`okio.c` @kind object;
  #L401d62.  call temp:= `o0`(v3, v2) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L401d68.  return @kind void;
}
