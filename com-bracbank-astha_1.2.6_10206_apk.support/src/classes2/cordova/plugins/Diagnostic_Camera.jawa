record `cordova.plugins.Diagnostic_Camera` @kind class @AccessFlag PUBLIC extends `org.apache.cordova.CordovaPlugin` @kind class {
  `cordova.plugins.Diagnostic` `cordova.plugins.Diagnostic_Camera.a` @AccessFlag PRIVATE;
  `org.apache.cordova.CallbackContext` `cordova.plugins.Diagnostic_Camera.b` @AccessFlag PROTECTED;
}
global `cordova.plugins.Diagnostic_Camera` `@@cordova.plugins.Diagnostic_Camera.c` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lcordova/plugins/Diagnostic_Camera;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L35740c.  return @kind void;
}
procedure `void` `<init>`(`cordova.plugins.Diagnostic_Camera` v0 @kind this) @signature `Lcordova/plugins/Diagnostic_Camera;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L357420.  call `<init>`(v0) @signature `Lorg/apache/cordova/CordovaPlugin;.<init>:()V` @kind direct;
  #L357426.  return @kind void;
}
procedure `boolean` `a`(`cordova.plugins.Diagnostic_Camera` v3 @kind this) @signature `Lcordova/plugins/Diagnostic_Camera;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3573c4.  call temp:= `getNumberOfCameras`() @signature `Landroid/hardware/Camera;.getNumberOfCameras:()I` @kind static;
  #L3573ca.  v0:= temp;
  #L3573cc.  v1:= v3.`org.apache.cordova.CordovaPlugin.cordova` @type ^`org.apache.cordova.CordovaInterface` @kind object;
  #L3573d0.  call temp:= `getActivity`(v1) @signature `Lorg/apache/cordova/CordovaInterface;.getActivity:()Landroidx/appcompat/app/d;` @kind interface;
  #L3573d6.  v1:= temp @kind object;
  #L3573d8.  call temp:= `getPackageManager`(v1) @signature `Landroid/app/Activity;.getPackageManager:()Landroid/content/pm/PackageManager;` @kind virtual;
  #L3573de.  v1:= temp @kind object;
  #L3573e0.  v2:= "android.hardware.camera" @kind object;
  #L3573e4.  call temp:= `hasSystemFeature`(v1, v2) @signature `Landroid/content/pm/PackageManager;.hasSystemFeature:(Ljava/lang/String;)Z` @kind virtual;
  #L3573ea.  v1:= temp;
  #L3573ec.  if v1 == 0 then goto L3573f8;
  #L3573f0.  if v0 <= 0 then goto L3573f8;
  #L3573f4.  v0:= 1I;
  #L3573f6.  goto L3573fa;
  #L3573f8.  v0:= 0I;
  #L3573fa.  return v0;
}
procedure `boolean` `execute`(`cordova.plugins.Diagnostic_Camera` v1 @kind this, `java.lang.String` v2 @kind object, `org.json.JSONArray` v3 @kind object, `org.apache.cordova.CallbackContext` v4 @kind object) @signature `Lcordova/plugins/Diagnostic_Camera;.execute:(Ljava/lang/String;Lorg/json/JSONArray;Lorg/apache/cordova/CallbackContext;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L357338.  v3:= `@@cordova.plugins.Diagnostic.j` @type ^`cordova.plugins.Diagnostic` @kind object;
  #L35733c.  v1.`cordova.plugins.Diagnostic_Camera.b` @type ^`org.apache.cordova.CallbackContext` := v4 @kind object;
  #L357340.  v3.`cordova.plugins.Diagnostic.d` @type ^`org.apache.cordova.CallbackContext` := v4 @kind object;
  #L357344.  v3:= 0I;
  #L357346.  v0:= "isCameraPresent" @kind object;
  #L35734a.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L357350.  v2:= temp;
  #L357352.  if v2 == 0 then goto L357372;
  #L357356.  call temp:= `a`(v1) @signature `Lcordova/plugins/Diagnostic_Camera;.a:()Z` @kind virtual;
  #L35735c.  v2:= temp;
  #L35735e.  v0:= 1I;
  #L357360.  if v2 == 0 then goto L357368;
  #L357364.  v2:= 1I;
  #L357366.  goto L35736a;
  #L357368.  v2:= 0I;
  #L35736a.  call `success`(v4, v2) @signature `Lorg/apache/cordova/CallbackContext;.success:(I)V` @kind virtual;
  #L357370.  return v0;
  #L357372.  v2:= v1.`cordova.plugins.Diagnostic_Camera.a` @type ^`cordova.plugins.Diagnostic` @kind object;
  #L357376.  v4:= "Invalid action" @kind object;
  #L35737a.  call `t`(v2, v4) @signature `Lcordova/plugins/Diagnostic;.t:(Ljava/lang/String;)V` @kind virtual;
  #L357380.  return v3;
  #L357382.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L357384.  v4:= v1.`cordova.plugins.Diagnostic_Camera.a` @type ^`cordova.plugins.Diagnostic` @kind object;
  #L357388.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Exception;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L35738e.  v2:= temp @kind object;
  #L357390.  v0:= "Exception occurred: " @kind object;
  #L357394.  call temp:= `concat`(v0, v2) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L35739a.  v2:= temp @kind object;
  #L35739c.  call `t`(v4, v2) @signature `Lcordova/plugins/Diagnostic;.t:(Ljava/lang/String;)V` @kind virtual;
  #L3573a2.  return v3;
  catch `java.lang.Exception` @[L357346..L357380] goto L357382;
}
procedure `void` `initialize`(`cordova.plugins.Diagnostic_Camera` v1 @kind this, `org.apache.cordova.CordovaInterface` v2 @kind object, `org.apache.cordova.CordovaWebView` v3 @kind object) @signature `Lcordova/plugins/Diagnostic_Camera;.initialize:(Lorg/apache/cordova/CordovaInterface;Lorg/apache/cordova/CordovaWebView;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L357438.  `@@cordova.plugins.Diagnostic_Camera.c` @type ^`cordova.plugins.Diagnostic_Camera` := v1 @kind object;
  #L35743c.  call temp:= `p`() @signature `Lcordova/plugins/Diagnostic;.p:()Lcordova/plugins/Diagnostic;` @kind static;
  #L357442.  v0:= temp @kind object;
  #L357444.  v1.`cordova.plugins.Diagnostic_Camera.a` @type ^`cordova.plugins.Diagnostic` := v0 @kind object;
  #L357448.  call `initialize`(v1, v2, v3) @signature `Lorg/apache/cordova/CordovaPlugin;.initialize:(Lorg/apache/cordova/CordovaInterface;Lorg/apache/cordova/CordovaWebView;)V` @kind super;
  #L35744e.  return @kind void;
}
