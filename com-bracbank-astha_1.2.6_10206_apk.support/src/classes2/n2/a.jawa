record `n2.a` @kind class @AccessFlag PUBLIC_FINAL extends `n2.b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `n2.a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `n2.a.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `n2.a.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `n2.a.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `n2.a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `n2.a.f` @AccessFlag FINAL;
  `long` `n2.a.g` @AccessFlag ;
}
global `java.lang.Object`[] `@@n2.a.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `n2.a$a`[] `@@n2.a.i` @AccessFlag STATIC_FINAL;
global `n2.a$a`[] `@@n2.a.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln2/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a0e60.  v0:= 0I;
  #L3a0e62.  v1:= new `java.lang.Object`[v0];
  #L3a0e66.  `@@n2.a.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3a0e6a.  v1:= new `n2.a$a`[v0];
  #L3a0e6e.  `@@n2.a.i` @type ^`n2.a$a`[] := v1 @kind object;
  #L3a0e72.  v0:= new `n2.a$a`[v0];
  #L3a0e76.  `@@n2.a.j` @type ^`n2.a$a`[] := v0 @kind object;
  #L3a0e7a.  return @kind void;
}
procedure `void` `<init>`(`n2.a` v2 @kind this) @signature `Ln2/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a0e8c.  call `<init>`(v2) @signature `Ln2/b;.<init>:()V` @kind direct;
  #L3a0e92.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L3a0e96.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L3a0e9c.  v2.`n2.a.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L3a0ea0.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L3a0ea6.  v1:= temp @kind object;
  #L3a0ea8.  v2.`n2.a.d` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L3a0eac.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L3a0eb2.  v0:= temp @kind object;
  #L3a0eb4.  v2.`n2.a.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L3a0eb8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3a0ebc.  v1:= `@@n2.a.i` @type ^`n2.a$a`[] @kind object;
  #L3a0ec0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3a0ec6.  v2.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3a0eca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3a0ece.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3a0ed4.  v2.`n2.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3a0ed8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3a0edc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3a0ee2.  v2.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3a0ee6.  return @kind void;
}
procedure `n2.a` `v`() @signature `Ln2/a;.v:()Ln2/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a0e14.  v0:= new `n2.a`;
  #L3a0e18.  call `<init>`(v0) @signature `Ln2/a;.<init>:()V` @kind direct;
  #L3a0e1e.  return v0 @kind object;
}
procedure `void` `a`(`n2.a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Ln2/a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a0f50.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3a0f54.  call temp:= `d`(v7, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3a0f5a.  v0:= v6.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0f5e.  v1:= 0I;
  #L3a0f60.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3a0f66.  v0:= temp;
  #L3a0f68.  if v0 != 0 then goto L3a0f74;
  #L3a0f6c.  call `q`(v7) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L3a0f72.  return @kind void;
  #L3a0f74.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.c:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L3a0f7a.  v7:= temp @kind object;
  #L3a0f7c.  call temp:= `y`(v6, v7) @signature `Ln2/a;.y:(Ljava/lang/Object;)[Ln2/a$a;` @kind virtual;
  #L3a0f82.  v0:= temp @kind object;
  #L3a0f84.  v1:= length @variable v0;
  #L3a0f86.  v2:= 0I;
  #L3a0f88.  if v2 >= v1 then goto L3a0fa0;
  #L3a0f8c.  v3:= v0[v2] @kind object;
  #L3a0f90.  v4:= v6.`n2.a.g` @type ^`long` @kind wide;
  #L3a0f94.  call `f`(v3, v7, v4) @signature `Ln2/a$a;.f:(Ljava/lang/Object;J)V` @kind virtual;
  #L3a0f9a.  v2:= v2 + 1;
  #L3a0f9e.  goto L3a0f88;
  #L3a0fa0.  return @kind void;
}
procedure `void` `b`(`n2.a` v1 @kind this, `e2.b` v2 @kind object) @signature `Ln2/a;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a101c.  v0:= v1.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a1020.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a1026.  v0:= temp @kind object;
  #L3a1028.  if v0 == 0 then goto L3a1032;
  #L3a102c.  call `e`(v2) @signature `Le2/b;.e:()V` @kind interface;
  #L3a1032.  return @kind void;
}
procedure `void` `onComplete`(`n2.a` v7 @kind this) @signature `Ln2/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a0ef8.  v0:= v7.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0efc.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L3a0f00.  v2:= 0I;
  #L3a0f02.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3a0f08.  v0:= temp;
  #L3a0f0a.  if v0 != 0 then goto L3a0f10;
  #L3a0f0e.  return @kind void;
  #L3a0f10.  call temp:= `b`() @signature `Lio/reactivex/internal/util/NotificationLite;.b:()Ljava/lang/Object;` @kind static;
  #L3a0f16.  v0:= temp @kind object;
  #L3a0f18.  call temp:= `y`(v7, v0) @signature `Ln2/a;.y:(Ljava/lang/Object;)[Ln2/a$a;` @kind virtual;
  #L3a0f1e.  v1:= temp @kind object;
  #L3a0f20.  v2:= length @variable v1;
  #L3a0f22.  v3:= 0I;
  #L3a0f24.  if v3 >= v2 then goto L3a0f3c;
  #L3a0f28.  v4:= v1[v3] @kind object;
  #L3a0f2c.  v5:= v7.`n2.a.g` @type ^`long` @kind wide;
  #L3a0f30.  call `f`(v4, v0, v5) @signature `Ln2/a$a;.f:(Ljava/lang/Object;J)V` @kind virtual;
  #L3a0f36.  v3:= v3 + 1;
  #L3a0f3a.  goto L3a0f24;
  #L3a0f3c.  return @kind void;
}
procedure `void` `onNext`(`n2.a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Ln2/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a0fb4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3a0fb8.  call temp:= `d`(v7, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3a0fbe.  v0:= v6.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0fc2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a0fc8.  v0:= temp @kind object;
  #L3a0fca.  if v0 == 0 then goto L3a0fd0;
  #L3a0fce.  return @kind void;
  #L3a0fd0.  call temp:= `g`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3a0fd6.  v7:= temp @kind object;
  #L3a0fd8.  call `x`(v6, v7) @signature `Ln2/a;.x:(Ljava/lang/Object;)V` @kind virtual;
  #L3a0fde.  v0:= v6.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0fe2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a0fe8.  v0:= temp @kind object;
  #L3a0fea.  v0:= (`n2.a$a`[]) v0 @kind object;
  #L3a0fee.  v1:= length @variable v0;
  #L3a0ff0.  v2:= 0I;
  #L3a0ff2.  if v2 >= v1 then goto L3a100a;
  #L3a0ff6.  v3:= v0[v2] @kind object;
  #L3a0ffa.  v4:= v6.`n2.a.g` @type ^`long` @kind wide;
  #L3a0ffe.  call `f`(v3, v7, v4) @signature `Ln2/a$a;.f:(Ljava/lang/Object;J)V` @kind virtual;
  #L3a1004.  v2:= v2 + 1;
  #L3a1008.  goto L3a0ff2;
  #L3a100a.  return @kind void;
}
procedure `void` `r`(`n2.a` v2 @kind this, `b2.p` v3 @kind object) @signature `Ln2/a;.r:(Lb2/p;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3a110c.  v0:= new `n2.a$a`;
  #L3a1110.  call `<init>`(v0, v3, v2) @signature `Ln2/a$a;.<init>:(Lb2/p;Ln2/a;)V` @kind direct;
  #L3a1116.  call `b`(v3, v0) @signature `Lb2/p;.b:(Le2/b;)V` @kind interface;
  #L3a111c.  call temp:= `u`(v2, v0) @signature `Ln2/a;.u:(Ln2/a$a;)Z` @kind virtual;
  #L3a1122.  v1:= temp;
  #L3a1124.  if v1 == 0 then goto L3a1140;
  #L3a1128.  v3:= v0.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a112c.  if v3 == 0 then goto L3a1138;
  #L3a1130.  call `w`(v2, v0) @signature `Ln2/a;.w:(Ln2/a$a;)V` @kind virtual;
  #L3a1136.  goto L3a1166;
  #L3a1138.  call `b`(v0) @signature `Ln2/a$a;.b:()V` @kind virtual;
  #L3a113e.  goto L3a1166;
  #L3a1140.  v0:= v2.`n2.a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a1144.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a114a.  v0:= temp @kind object;
  #L3a114c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3a1150.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L3a1154.  if v0 != v1 then goto L3a1160;
  #L3a1158.  call `onComplete`(v3) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L3a115e.  goto L3a1166;
  #L3a1160.  call `a`(v3, v0) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3a1166.  return @kind void;
}
procedure `boolean` `u`(`n2.a` v4 @kind this, `n2.a$a` v5 @kind object) @signature `Ln2/a;.u:(Ln2/a$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a0dc0.  v0:= v4.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0dc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a0dca.  v0:= temp @kind object;
  #L3a0dcc.  v0:= (`n2.a$a`[]) v0 @kind object;
  #L3a0dd0.  v1:= `@@n2.a.j` @type ^`n2.a$a`[] @kind object;
  #L3a0dd4.  v2:= 0I;
  #L3a0dd6.  if v0 != v1 then goto L3a0ddc;
  #L3a0dda.  return v2;
  #L3a0ddc.  v1:= length @variable v0;
  #L3a0dde.  v3:= v1 + 1;
  #L3a0de2.  v3:= new `n2.a$a`[v3];
  #L3a0de6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a0dec.  v3[v1]:= v5 @kind object;
  #L3a0df0.  v1:= v4.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0df4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3a0dfa.  v0:= temp;
  #L3a0dfc.  if v0 == 0 then goto L3a0dc0;
  #L3a0e00.  v5:= 1I;
  #L3a0e02.  return v5;
}
procedure `void` `w`(`n2.a` v6 @kind this, `n2.a$a` v7 @kind object) @signature `Ln2/a;.w:(Ln2/a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a1044.  v0:= v6.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a1048.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a104e.  v0:= temp @kind object;
  #L3a1050.  v0:= (`n2.a$a`[]) v0 @kind object;
  #L3a1054.  v1:= length @variable v0;
  #L3a1056.  if v1 != 0 then goto L3a105c;
  #L3a105a.  return @kind void;
  #L3a105c.  v2:= -1I;
  #L3a105e.  v3:= 0I;
  #L3a1060.  v4:= 0I;
  #L3a1062.  if v4 >= v1 then goto L3a1078;
  #L3a1066.  v5:= v0[v4] @kind object;
  #L3a106a.  if v5 != v7 then goto L3a1072;
  #L3a106e.  v2:= v4;
  #L3a1070.  goto L3a1078;
  #L3a1072.  v4:= v4 + 1;
  #L3a1076.  goto L3a1062;
  #L3a1078.  if v2 >= 0 then goto L3a107e;
  #L3a107c.  return @kind void;
  #L3a107e.  v4:= 1I;
  #L3a1080.  if v1 != v4 then goto L3a108a;
  #L3a1084.  v1:= `@@n2.a.i` @type ^`n2.a$a`[] @kind object;
  #L3a1088.  goto L3a10a8;
  #L3a108a.  v5:= v1 + -1;
  #L3a108e.  v5:= new `n2.a$a`[v5];
  #L3a1092.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a1098.  v3:= v2 + 1;
  #L3a109c.  v1:= v1 - v2 @kind int;
  #L3a109e.  v1:= v1 - v4 @kind int;
  #L3a10a0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a10a6.  v1:= v5 @kind object;
  #L3a10a8.  v2:= v6.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a10ac.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3a10b2.  v0:= temp;
  #L3a10b4.  if v0 == 0 then goto L3a1044;
  #L3a10b8.  return @kind void;
}
procedure `void` `x`(`n2.a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln2/a;.x:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a10cc.  v0:= v4.`n2.a.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3a10d0.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L3a10d6.  v0:= v4.`n2.a.g` @type ^`long` @kind wide;
  #L3a10da.  v2:= 1L;
  #L3a10de.  v0:= v0 + v2 @kind long;
  #L3a10e0.  v4.`n2.a.g` @type ^`long` := v0 @kind wide;
  #L3a10e4.  v0:= v4.`n2.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a10e8.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3a10ee.  v5:= v4.`n2.a.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3a10f2.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3a10f8.  return @kind void;
}
procedure `n2.a$a`[] `y`(`n2.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ln2/a;.y:(Ljava/lang/Object;)[Ln2/a$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3a0e30.  v0:= v2.`n2.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0e34.  v1:= `@@n2.a.j` @type ^`n2.a$a`[] @kind object;
  #L3a0e38.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3a0e3e.  v0:= temp @kind object;
  #L3a0e40.  v0:= (`n2.a$a`[]) v0 @kind object;
  #L3a0e44.  if v0 == v1 then goto L3a0e4e;
  #L3a0e48.  call `x`(v2, v3) @signature `Ln2/a;.x:(Ljava/lang/Object;)V` @kind virtual;
  #L3a0e4e.  return v0 @kind object;
}
