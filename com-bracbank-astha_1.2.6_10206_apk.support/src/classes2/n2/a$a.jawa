record `n2.a$a` @kind class @AccessFlag FINAL extends `e2.b` @kind interface, `io.reactivex.internal.util.a$a` @kind interface {
  `b2.p` `n2.a$a.a` @AccessFlag FINAL;
  `n2.a` `n2.a$a.b` @AccessFlag FINAL;
  `boolean` `n2.a$a.c` @AccessFlag ;
  `boolean` `n2.a$a.d` @AccessFlag ;
  `io.reactivex.internal.util.a` `n2.a$a.e` @AccessFlag ;
  `boolean` `n2.a$a.f` @AccessFlag ;
  `boolean` `n2.a$a.g` @AccessFlag VOLATILE;
  `long` `n2.a$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`n2.a$a` v0 @kind this, `b2.p` v1 @kind object, `n2.a` v2 @kind object) @signature `Ln2/a$a;.<init>:(Lb2/p;Ln2/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a0bd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a0bde.  v0.`n2.a$a.a` @type ^`b2.p` := v1 @kind object;
  #L3a0be2.  v0.`n2.a$a.b` @type ^`n2.a` := v2 @kind object;
  #L3a0be6.  return @kind void;
}
procedure `boolean` `a`(`n2.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln2/a$a;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0ba4.  v0:= v1.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0ba8.  if v0 != 0 then goto L3a0bc2;
  #L3a0bac.  v0:= v1.`n2.a$a.a` @type ^`b2.p` @kind object;
  #L3a0bb0.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.a:(Ljava/lang/Object;Lb2/p;)Z` @kind static;
  #L3a0bb6.  v2:= temp;
  #L3a0bb8.  if v2 == 0 then goto L3a0bbe;
  #L3a0bbc.  goto L3a0bc2;
  #L3a0bbe.  v2:= 0I;
  #L3a0bc0.  goto L3a0bc4;
  #L3a0bc2.  v2:= 1I;
  #L3a0bc4.  return v2;
}
procedure `void` `b`(`n2.a$a` v4 @kind this) @signature `Ln2/a$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a0c24.  v0:= v4.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0c28.  if v0 == 0 then goto L3a0c2e;
  #L3a0c2c.  return @kind void;
  #L3a0c2e.  @monitorenter v4
  #L3a0c30.  v0:= v4.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0c34.  if v0 == 0 then goto L3a0c3c;
  #L3a0c38.  @monitorexit v4
  #L3a0c3a.  return @kind void;
  #L3a0c3c.  v0:= v4.`n2.a$a.c` @type ^`boolean` @kind boolean;
  #L3a0c40.  if v0 == 0 then goto L3a0c48;
  #L3a0c44.  @monitorexit v4
  #L3a0c46.  return @kind void;
  #L3a0c48.  v0:= v4.`n2.a$a.b` @type ^`n2.a` @kind object;
  #L3a0c4c.  v1:= v0.`n2.a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L3a0c50.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L3a0c56.  v2:= v0.`n2.a.g` @type ^`long` @kind wide;
  #L3a0c5a.  v4.`n2.a$a.h` @type ^`long` := v2 @kind wide;
  #L3a0c5e.  v0:= v0.`n2.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3a0c62.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a0c68.  v0:= temp @kind object;
  #L3a0c6a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L3a0c70.  v1:= 1I;
  #L3a0c72.  if v0 == 0 then goto L3a0c7a;
  #L3a0c76.  v2:= 1I;
  #L3a0c78.  goto L3a0c7c;
  #L3a0c7a.  v2:= 0I;
  #L3a0c7c.  v4.`n2.a$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3a0c80.  v4.`n2.a$a.c` @type ^`boolean` := v1 @kind boolean;
  #L3a0c84.  @monitorexit v4
  #L3a0c86.  if v0 == 0 then goto L3a0c9e;
  #L3a0c8a.  call temp:= `a`(v4, v0) @signature `Ln2/a$a;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L3a0c90.  v0:= temp;
  #L3a0c92.  if v0 == 0 then goto L3a0c98;
  #L3a0c96.  return @kind void;
  #L3a0c98.  call `c`(v4) @signature `Ln2/a$a;.c:()V` @kind virtual;
  #L3a0c9e.  return @kind void;
  #L3a0ca0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3a0ca2.  @monitorexit v4
  #L3a0ca4.  throw v0;
  catch `java.lang.Throwable` @[L3a0c30..L3a0c86] goto L3a0ca0;
  catch `java.lang.Throwable` @[L3a0ca2..L3a0ca4] goto L3a0ca0;
}
procedure `void` `c`(`n2.a$a` v2 @kind this) @signature `Ln2/a$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3a0ccc.  v0:= v2.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0cd0.  if v0 == 0 then goto L3a0cd6;
  #L3a0cd4.  return @kind void;
  #L3a0cd6.  @monitorenter v2
  #L3a0cd8.  v0:= v2.`n2.a$a.e` @type ^`io.reactivex.internal.util.a` @kind object;
  #L3a0cdc.  if v0 != 0 then goto L3a0cea;
  #L3a0ce0.  v0:= 0I;
  #L3a0ce2.  v2.`n2.a$a.d` @type ^`boolean` := v0 @kind boolean;
  #L3a0ce6.  @monitorexit v2
  #L3a0ce8.  return @kind void;
  #L3a0cea.  v1:= 0I;
  #L3a0cec.  v2.`n2.a$a.e` @type ^`io.reactivex.internal.util.a` := v1 @kind object;
  #L3a0cf0.  @monitorexit v2
  #L3a0cf2.  call `b`(v0, v2) @signature `Lio/reactivex/internal/util/a;.b:(Lio/reactivex/internal/util/a$a;)V` @kind virtual;
  #L3a0cf8.  goto L3a0ccc;
  #L3a0cfa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3a0cfc.  @monitorexit v2
  #L3a0cfe.  throw v0;
  catch `java.lang.Throwable` @[L3a0cd8..L3a0cf2] goto L3a0cfa;
  catch `java.lang.Throwable` @[L3a0cfc..L3a0cfe] goto L3a0cfa;
}
procedure `boolean` `d`(`n2.a$a` v1 @kind this) @signature `Ln2/a$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0b8c.  v0:= v1.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0b90.  return v0;
}
procedure `void` `e`(`n2.a$a` v1 @kind this) @signature `Ln2/a$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a0bf8.  v0:= v1.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0bfc.  if v0 != 0 then goto L3a0c10;
  #L3a0c00.  v0:= 1I;
  #L3a0c02.  v1.`n2.a$a.g` @type ^`boolean` := v0 @kind boolean;
  #L3a0c06.  v0:= v1.`n2.a$a.b` @type ^`n2.a` @kind object;
  #L3a0c0a.  call `w`(v0, v1) @signature `Ln2/a;.w:(Ln2/a$a;)V` @kind virtual;
  #L3a0c10.  return @kind void;
}
procedure `void` `f`(`n2.a$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Ln2/a$a;.f:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3a0d24.  v0:= v3.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0d28.  if v0 == 0 then goto L3a0d2e;
  #L3a0d2c.  return @kind void;
  #L3a0d2e.  v0:= v3.`n2.a$a.f` @type ^`boolean` @kind boolean;
  #L3a0d32.  if v0 != 0 then goto L3a0d92;
  #L3a0d36.  @monitorenter v3
  #L3a0d38.  v0:= v3.`n2.a$a.g` @type ^`boolean` @kind boolean;
  #L3a0d3c.  if v0 == 0 then goto L3a0d44;
  #L3a0d40.  @monitorexit v3
  #L3a0d42.  return @kind void;
  #L3a0d44.  v0:= v3.`n2.a$a.h` @type ^`long` @kind wide;
  #L3a0d48.  v2:= lcmp(v0, v5);
  #L3a0d4c.  if v2 != 0 then goto L3a0d54;
  #L3a0d50.  @monitorexit v3
  #L3a0d52.  return @kind void;
  #L3a0d54.  v5:= v3.`n2.a$a.d` @type ^`boolean` @kind boolean;
  #L3a0d58.  if v5 == 0 then goto L3a0d7e;
  #L3a0d5c.  v5:= v3.`n2.a$a.e` @type ^`io.reactivex.internal.util.a` @kind object;
  #L3a0d60.  if v5 != 0 then goto L3a0d74;
  #L3a0d64.  v5:= new `io.reactivex.internal.util.a`;
  #L3a0d68.  v6:= 4I;
  #L3a0d6a.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/a;.<init>:(I)V` @kind direct;
  #L3a0d70.  v3.`n2.a$a.e` @type ^`io.reactivex.internal.util.a` := v5 @kind object;
  #L3a0d74.  call `a`(v5, v4) @signature `Lio/reactivex/internal/util/a;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L3a0d7a.  @monitorexit v3
  #L3a0d7c.  return @kind void;
  #L3a0d7e.  v5:= 1I;
  #L3a0d80.  v3.`n2.a$a.c` @type ^`boolean` := v5 @kind boolean;
  #L3a0d84.  @monitorexit v3
  #L3a0d86.  v3.`n2.a$a.f` @type ^`boolean` := v5 @kind boolean;
  #L3a0d8a.  goto L3a0d92;
  #L3a0d8c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3a0d8e.  @monitorexit v3
  #L3a0d90.  throw v4;
  #L3a0d92.  call temp:= `a`(v3, v4) @signature `Ln2/a$a;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L3a0d98.  return @kind void;
  catch `java.lang.Throwable` @[L3a0d38..L3a0d86] goto L3a0d8c;
  catch `java.lang.Throwable` @[L3a0d8e..L3a0d90] goto L3a0d8c;
}
