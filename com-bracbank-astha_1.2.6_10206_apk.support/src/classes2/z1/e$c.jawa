record `z1.e$c` @kind class @AccessFlag  extends `com.google.common.collect.ForwardingMap` @kind class {
  `java.util.Map` `z1.e$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z1.e$c` v1 @kind this) @signature `Lz1/e$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L40ecac.  call `<init>`(v1) @signature `Lcom/google/common/collect/ForwardingMap;.<init>:()V` @kind direct;
  #L40ecb2.  v0:= new `java.util.HashMap`;
  #L40ecb6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L40ecbc.  v1.`z1.e$c.a` @type ^`java.util.Map` := v0 @kind object;
  #L40ecc0.  return @kind void;
}
procedure `void` `a`(`z1.e$c` v3 @kind this) @signature `Lz1/e$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40ecd4.  v0:= v3.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ecd8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ecde.  v0:= temp @kind object;
  #L40ece0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ece6.  v0:= temp @kind object;
  #L40ece8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ecee.  v1:= temp;
  #L40ecf0.  if v1 == 0 then goto L40ed1a;
  #L40ecf4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ecfa.  v1:= temp @kind object;
  #L40ecfc.  v1:= (`z1.e$b`) v1 @kind object;
  #L40ed00.  call temp:= `m`(v1) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40ed06.  v2:= temp;
  #L40ed08.  if v2 == 0 then goto L40ed12;
  #L40ed0c.  call `p`(v1) @signature `Lz1/e$b;.p:()V` @kind virtual;
  #L40ed12.  call `k`(v1) @signature `Lz1/e$b;.k:()V` @kind virtual;
  #L40ed18.  goto L40ece8;
  #L40ed1a.  return @kind void;
}
procedure `double` `b`(`z1.e$c` v4 @kind this) @signature `Lz1/e$c;.b:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40ebfc.  v0:= v4.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ec00.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L40ec06.  v0:= temp;
  #L40ec08.  if v0 == 0 then goto L40ec12;
  #L40ec0c.  v0:= 0L;
  #L40ec10.  return v0 @kind wide;
  #L40ec12.  v0:= v4.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ec16.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ec1c.  v0:= temp @kind object;
  #L40ec1e.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ec24.  v0:= temp @kind object;
  #L40ec26.  v1:= 0I;
  #L40ec28.  v2:= 0I;
  #L40ec2a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ec30.  v3:= temp;
  #L40ec32.  if v3 == 0 then goto L40ec58;
  #L40ec36.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ec3c.  v3:= temp @kind object;
  #L40ec3e.  v3:= (`z1.e$b`) v3 @kind object;
  #L40ec42.  v2:= v2 + 1;
  #L40ec46.  call temp:= `m`(v3) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40ec4c.  v3:= temp;
  #L40ec4e.  if v3 == 0 then goto L40ec2a;
  #L40ec52.  v1:= v1 + 1;
  #L40ec56.  goto L40ec2a;
  #L40ec58.  v0:= (`double`) v1 @kind i2d;
  #L40ec5a.  v2:= (`double`) v2 @kind i2d;
  #L40ec5c.  v0:= v0 / v2 @kind double;
  #L40ec5e.  v2:= 100.0D;
  #L40ec62.  v0:= v0 * v2 @kind double;
  #L40ec66.  return v0 @kind wide;
}
procedure `void` `c`(`z1.e$c` v4 @kind this, `java.lang.Long` v5 @kind object) @signature `Lz1/e$c;.c:(Ljava/lang/Long;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40ed2c.  v0:= v4.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ed30.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ed36.  v0:= temp @kind object;
  #L40ed38.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ed3e.  v0:= temp @kind object;
  #L40ed40.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ed46.  v1:= temp;
  #L40ed48.  if v1 == 0 then goto L40ed92;
  #L40ed4c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ed52.  v1:= temp @kind object;
  #L40ed54.  v1:= (`z1.e$b`) v1 @kind object;
  #L40ed58.  call temp:= `m`(v1) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40ed5e.  v2:= temp;
  #L40ed60.  if v2 != 0 then goto L40ed6a;
  #L40ed64.  call `c`(v1) @signature `Lz1/e$b;.c:()V` @kind virtual;
  #L40ed6a.  call temp:= `m`(v1) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40ed70.  v2:= temp;
  #L40ed72.  if v2 == 0 then goto L40ed40;
  #L40ed76.  call temp:= `longValue`(v5) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L40ed7c.  v2:= temp @kind wide;
  #L40ed7e.  call temp:= `h`(v1, v2) @signature `Lz1/e$b;.h:(J)Z` @kind virtual;
  #L40ed84.  v2:= temp;
  #L40ed86.  if v2 == 0 then goto L40ed40;
  #L40ed8a.  call `p`(v1) @signature `Lz1/e$b;.p:()V` @kind virtual;
  #L40ed90.  goto L40ed40;
  #L40ed92.  return @kind void;
}
procedure `void` `d`(`z1.e$c` v3 @kind this, `z1.e$g` v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lz1/e$c;.d:(Lz1/e$g;Ljava/util/Collection;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40eda4.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40edaa.  v5:= temp @kind object;
  #L40edac.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40edb2.  v0:= temp;
  #L40edb4.  if v0 == 0 then goto L40edea;
  #L40edb8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40edbe.  v0:= temp @kind object;
  #L40edc0.  v0:= (`java.net.SocketAddress`) v0 @kind object;
  #L40edc4.  v1:= v3.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40edc8.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L40edce.  v1:= temp;
  #L40edd0.  if v1 != 0 then goto L40edac;
  #L40edd4.  v1:= v3.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40edd8.  v2:= new `z1.e$b`;
  #L40eddc.  call `<init>`(v2, v4) @signature `Lz1/e$b;.<init>:(Lz1/e$g;)V` @kind direct;
  #L40ede2.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40ede8.  goto L40edac;
  #L40edea.  return @kind void;
}
procedure `java.lang.Object` `delegate`(`z1.e$c` v1 @kind this) @signature `Lz1/e$c;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L40ec78.  call temp:= `delegate`(v1) @signature `Lz1/e$c;.delegate:()Ljava/util/Map;` @kind virtual;
  #L40ec7e.  v0:= temp @kind object;
  #L40ec80.  return v0 @kind object;
}
procedure `java.util.Map` `delegate`(`z1.e$c` v1 @kind this) @signature `Lz1/e$c;.delegate:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L40ec94.  v0:= v1.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ec98.  return v0 @kind object;
}
procedure `void` `e`(`z1.e$c` v2 @kind this) @signature `Lz1/e$c;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40edfc.  v0:= v2.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ee00.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ee06.  v0:= temp @kind object;
  #L40ee08.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ee0e.  v0:= temp @kind object;
  #L40ee10.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ee16.  v1:= temp;
  #L40ee18.  if v1 == 0 then goto L40ee30;
  #L40ee1c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ee22.  v1:= temp @kind object;
  #L40ee24.  v1:= (`z1.e$b`) v1 @kind object;
  #L40ee28.  call `j`(v1) @signature `Lz1/e$b;.j:()V` @kind virtual;
  #L40ee2e.  goto L40ee10;
  #L40ee30.  return @kind void;
}
procedure `void` `f`(`z1.e$c` v2 @kind this) @signature `Lz1/e$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40ee44.  v0:= v2.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ee48.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ee4e.  v0:= temp @kind object;
  #L40ee50.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ee56.  v0:= temp @kind object;
  #L40ee58.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40ee5e.  v1:= temp;
  #L40ee60.  if v1 == 0 then goto L40ee78;
  #L40ee64.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40ee6a.  v1:= temp @kind object;
  #L40ee6c.  v1:= (`z1.e$b`) v1 @kind object;
  #L40ee70.  call `o`(v1) @signature `Lz1/e$b;.o:()V` @kind virtual;
  #L40ee76.  goto L40ee58;
  #L40ee78.  return @kind void;
}
procedure `void` `g`(`z1.e$c` v2 @kind this, `z1.e$g` v3 @kind object) @signature `Lz1/e$c;.g:(Lz1/e$g;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40ee8c.  v0:= v2.`z1.e$c.a` @type ^`java.util.Map` @kind object;
  #L40ee90.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L40ee96.  v0:= temp @kind object;
  #L40ee98.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40ee9e.  v0:= temp @kind object;
  #L40eea0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40eea6.  v1:= temp;
  #L40eea8.  if v1 == 0 then goto L40eec0;
  #L40eeac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40eeb2.  v1:= temp @kind object;
  #L40eeb4.  v1:= (`z1.e$b`) v1 @kind object;
  #L40eeb8.  call `l`(v1, v3) @signature `Lz1/e$b;.l:(Lz1/e$g;)V` @kind virtual;
  #L40eebe.  goto L40eea0;
  #L40eec0.  return @kind void;
}
