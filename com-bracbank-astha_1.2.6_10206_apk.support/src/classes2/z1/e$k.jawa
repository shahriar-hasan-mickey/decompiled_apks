record `z1.e$k` @kind class @AccessFlag  extends `z1.e$j` @kind interface {
  `z1.e$g` `z1.e$k.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z1.e$k` v2 @kind this, `z1.e$g` v3 @kind object) @signature `Lz1/e$k;.<init>:(Lz1/e$g;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4100c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4100ce.  v0:= v3.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L4100d2.  if v0 == 0 then goto L4100da;
  #L4100d6.  v0:= 1I;
  #L4100d8.  goto L4100dc;
  #L4100da.  v0:= 0I;
  #L4100dc.  v1:= "success rate ejection config is null" @kind object;
  #L4100e0.  call `checkArgument`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L4100e6.  v2.`z1.e$k.a` @type ^`z1.e$g` := v3 @kind object;
  #L4100ea.  return @kind void;
}
procedure `double` `b`(`java.util.Collection` v5 @kind object) @signature `Lz1/e$k;.b:(Ljava/util/Collection;)D` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41001c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L410022.  v0:= temp @kind object;
  #L410024.  v1:= 0L;
  #L410028.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41002e.  v3:= temp;
  #L410030.  if v3 == 0 then goto L41004c;
  #L410034.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41003a.  v3:= temp @kind object;
  #L41003c.  v3:= (`java.lang.Double`) v3 @kind object;
  #L410040.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L410046.  v3:= temp @kind wide;
  #L410048.  v1:= v1 + v3 @kind double;
  #L41004a.  goto L410028;
  #L41004c.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L410052.  v5:= temp;
  #L410054.  v3:= (`double`) v5 @kind i2d;
  #L410056.  v1:= v1 / v3 @kind double;
  #L410058.  return v1 @kind wide;
}
procedure `double` `c`(`java.util.Collection` v5 @kind object, `double` v6 ) @signature `Lz1/e$k;.c:(Ljava/util/Collection;D)D` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41006c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L410072.  v0:= temp @kind object;
  #L410074.  v1:= 0L;
  #L410078.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41007e.  v3:= temp;
  #L410080.  if v3 == 0 then goto L4100a2;
  #L410084.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41008a.  v3:= temp @kind object;
  #L41008c.  v3:= (`java.lang.Double`) v3 @kind object;
  #L410090.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L410096.  v3:= temp @kind wide;
  #L410098.  v3:= v3 - v6 @kind double;
  #L41009a.  v3:= v3 * v3 @kind double;
  #L41009e.  v1:= v1 + v3 @kind double;
  #L4100a0.  goto L410078;
  #L4100a2.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4100a8.  v5:= temp;
  #L4100aa.  v5:= (`double`) v5 @kind i2d;
  #L4100ac.  v1:= v1 / v5 @kind double;
  #L4100ae.  call temp:= `sqrt`(v1) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4100b4.  v5:= temp @kind wide;
  #L4100b6.  return v5 @kind wide;
}
procedure `void` `a`(`z1.e$k` v9 @kind this, `z1.e$c` v10 @kind object, `long` v11 ) @signature `Lz1/e$k;.a:(Lz1/e$c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4100fc.  v0:= v9.`z1.e$k.a` @type ^`z1.e$g` @kind object;
  #L410100.  v0:= v0.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L410104.  v0:= v0.`z1.e$g$c.d` @type ^`java.lang.Integer` @kind object;
  #L410108.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L41010e.  v0:= temp;
  #L410110.  call temp:= `l`(v10, v0) @signature `Lz1/e;.l:(Lz1/e$c;I)Ljava/util/List;` @kind static;
  #L410116.  v0:= temp @kind object;
  #L410118.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L41011e.  v1:= temp;
  #L410120.  v2:= v9.`z1.e$k.a` @type ^`z1.e$g` @kind object;
  #L410124.  v2:= v2.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L410128.  v2:= v2.`z1.e$g$c.c` @type ^`java.lang.Integer` @kind object;
  #L41012c.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L410132.  v2:= temp;
  #L410134.  if v1 < v2 then goto L410248;
  #L410138.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L41013e.  v1:= temp;
  #L410140.  if v1 != 0 then goto L410148;
  #L410144.  goto L410248;
  #L410148.  v1:= new `java.util.ArrayList`;
  #L41014c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L410152.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L410158.  v2:= temp @kind object;
  #L41015a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L410160.  v3:= temp;
  #L410162.  if v3 == 0 then goto L41018a;
  #L410166.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41016c.  v3:= temp @kind object;
  #L41016e.  v3:= (`z1.e$b`) v3 @kind object;
  #L410172.  call temp:= `n`(v3) @signature `Lz1/e$b;.n:()D` @kind virtual;
  #L410178.  v3:= temp @kind wide;
  #L41017a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L410180.  v3:= temp @kind object;
  #L410182.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L410188.  goto L41015a;
  #L41018a.  call temp:= `b`(v1) @signature `Lz1/e$k;.b:(Ljava/util/Collection;)D` @kind static;
  #L410190.  v2:= temp @kind wide;
  #L410192.  call temp:= `c`(v1, v2) @signature `Lz1/e$k;.c:(Ljava/util/Collection;D)D` @kind static;
  #L410198.  v4:= temp @kind wide;
  #L41019a.  v1:= v9.`z1.e$k.a` @type ^`z1.e$g` @kind object;
  #L41019e.  v1:= v1.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L4101a2.  v1:= v1.`z1.e$g$c.a` @type ^`java.lang.Integer` @kind object;
  #L4101a6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4101ac.  v1:= temp;
  #L4101ae.  v1:= (`float`) v1 @kind i2f;
  #L4101b0.  v6:= 1000.0F;
  #L4101b4.  v1:= v1 / v6 @kind float;
  #L4101b6.  v6:= (`double`) v1 @kind f2d;
  #L4101b8.  v4:= v4 * v6 @kind double;
  #L4101bc.  v2:= v2 - v4 @kind double;
  #L4101be.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4101c4.  v0:= temp @kind object;
  #L4101c6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4101cc.  v1:= temp;
  #L4101ce.  if v1 == 0 then goto L410248;
  #L4101d2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4101d8.  v1:= temp @kind object;
  #L4101da.  v1:= (`z1.e$b`) v1 @kind object;
  #L4101de.  call temp:= `b`(v10) @signature `Lz1/e$c;.b:()D` @kind virtual;
  #L4101e4.  v4:= temp @kind wide;
  #L4101e6.  v6:= v9.`z1.e$k.a` @type ^`z1.e$g` @kind object;
  #L4101ea.  v6:= v6.`z1.e$g.d` @type ^`java.lang.Integer` @kind object;
  #L4101ee.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4101f4.  v6:= temp;
  #L4101f6.  v6:= (`double`) v6 @kind i2d;
  #L4101f8.  v8:= dcmpl(v4, v6);
  #L4101fc.  if v8 < 0 then goto L410202;
  #L410200.  return @kind void;
  #L410202.  call temp:= `n`(v1) @signature `Lz1/e$b;.n:()D` @kind virtual;
  #L410208.  v4:= temp @kind wide;
  #L41020a.  v6:= dcmpg(v4, v2);
  #L41020e.  if v6 >= 0 then goto L4101c6;
  #L410212.  v4:= new `java.util.Random`;
  #L410216.  call `<init>`(v4) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L41021c.  v5:= 100I;
  #L410220.  call temp:= `nextInt`(v4, v5) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L410226.  v4:= temp;
  #L410228.  v5:= v9.`z1.e$k.a` @type ^`z1.e$g` @kind object;
  #L41022c.  v5:= v5.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L410230.  v5:= v5.`z1.e$g$c.b` @type ^`java.lang.Integer` @kind object;
  #L410234.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L41023a.  v5:= temp;
  #L41023c.  if v4 >= v5 then goto L4101c6;
  #L410240.  call `d`(v1, v11) @signature `Lz1/e$b;.d:(J)V` @kind virtual;
  #L410246.  goto L4101c6;
  #L410248.  return @kind void;
}
