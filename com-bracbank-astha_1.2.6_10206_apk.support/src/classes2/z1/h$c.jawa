record `z1.h$c` @kind class @AccessFlag FINAL extends `z1.h$e` @kind class {
  `java.util.List` `z1.h$c.a` @AccessFlag PRIVATE_FINAL;
  `int` `z1.h$c.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@z1.h$c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lz1/h$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L410ae4.  v0:= constclass @type ^`z1.h$c` @kind object;
  #L410ae8.  v1:= "b" @kind object;
  #L410aec.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L410af2.  v0:= temp @kind object;
  #L410af4.  `@@z1.h$c.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L410af8.  return @kind void;
}
procedure `void` `<init>`(`z1.h$c` v2 @kind this, `java.util.List` v3 @kind object, `int` v4 ) @signature `Lz1/h$c;.<init>:(Ljava/util/List;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L410b0c.  v0:= 0I;
  #L410b0e.  call `<init>`(v2, v0) @signature `Lz1/h$e;.<init>:(Lz1/h$a;)V` @kind direct;
  #L410b14.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L410b1a.  v0:= temp;
  #L410b1c.  v0:= v0 ^~ 1;
  #L410b20.  v1:= "empty list" @kind object;
  #L410b24.  call `checkArgument`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L410b2a.  v2.`z1.h$c.a` @type ^`java.util.List` := v3 @kind object;
  #L410b2e.  v4:= v4 + -1;
  #L410b32.  v2.`z1.h$c.b` @type ^`int` := v4;
  #L410b36.  return @kind void;
}
procedure `io.grpc.n0$h` `d`(`z1.h$c` v3 @kind this) @signature `Lz1/h$c;.d:()Lio/grpc/n0$h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L410a60.  v0:= v3.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L410a64.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L410a6a.  v0:= temp;
  #L410a6c.  v1:= `@@z1.h$c.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L410a70.  call temp:= `incrementAndGet`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L410a76.  v2:= temp;
  #L410a78.  if v2 < v0 then goto L410a88;
  #L410a7c.  v0:= v2 %% v0 @kind int;
  #L410a80.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L410a86.  v2:= v0;
  #L410a88.  v0:= v3.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L410a8c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L410a92.  v0:= temp @kind object;
  #L410a94.  v0:= (`io.grpc.n0$h`) v0 @kind object;
  #L410a98.  return v0 @kind object;
}
procedure `io.grpc.n0$e` `a`(`z1.h$c` v0 @kind this, `io.grpc.n0$f` v1 @kind object) @signature `Lz1/h$c;.a:(Lio/grpc/n0$f;)Lio/grpc/n0$e;` @AccessFlag PUBLIC {
    temp;

  #L410a3c.  call temp:= `d`(v0) @signature `Lz1/h$c;.d:()Lio/grpc/n0$h;` @kind direct;
  #L410a42.  v1:= temp @kind object;
  #L410a44.  call temp:= `h`(v1) @signature `Lio/grpc/n0$e;.h:(Lio/grpc/n0$h;)Lio/grpc/n0$e;` @kind static;
  #L410a4a.  v1:= temp @kind object;
  #L410a4c.  return v1 @kind object;
}
procedure `boolean` `c`(`z1.h$c` v3 @kind this, `z1.h$e` v4 @kind object) @signature `Lz1/h$c;.c:(Lz1/h$e;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4109d8.  v0:= instanceof @variable v4 @type ^`z1.h$c` @kind boolean;
  #L4109dc.  v1:= 0I;
  #L4109de.  if v0 != 0 then goto L4109e4;
  #L4109e2.  return v1;
  #L4109e4.  v4:= (`z1.h$c`) v4 @kind object;
  #L4109e8.  if v4 == v3 then goto L410a26;
  #L4109ec.  v0:= v3.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L4109f0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4109f6.  v0:= temp;
  #L4109f8.  v2:= v4.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L4109fc.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L410a02.  v2:= temp;
  #L410a04.  if v0 != v2 then goto L410a28;
  #L410a08.  v0:= new `java.util.HashSet`;
  #L410a0c.  v2:= v3.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L410a10.  call `<init>`(v0, v2) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L410a16.  v4:= v4.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L410a1a.  call temp:= `containsAll`(v0, v4) @signature `Ljava/util/HashSet;.containsAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L410a20.  v4:= temp;
  #L410a22.  if v4 == 0 then goto L410a28;
  #L410a26.  v1:= 1I;
  #L410a28.  return v1;
}
procedure `java.lang.String` `toString`(`z1.h$c` v3 @kind this) @signature `Lz1/h$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L410aac.  v0:= constclass @type ^`z1.h$c` @kind object;
  #L410ab0.  call temp:= `toStringHelper`(v0) @signature `Lcom/google/common/base/MoreObjects;.toStringHelper:(Ljava/lang/Class;)Lcom/google/common/base/MoreObjects$ToStringHelper;` @kind static;
  #L410ab6.  v0:= temp @kind object;
  #L410ab8.  v1:= v3.`z1.h$c.a` @type ^`java.util.List` @kind object;
  #L410abc.  v2:= "list" @kind object;
  #L410ac0.  call temp:= `add`(v0, v2, v1) @signature `Lcom/google/common/base/MoreObjects$ToStringHelper;.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;` @kind virtual;
  #L410ac6.  v0:= temp @kind object;
  #L410ac8.  call temp:= `toString`(v0) @signature `Lcom/google/common/base/MoreObjects$ToStringHelper;.toString:()Ljava/lang/String;` @kind virtual;
  #L410ace.  v0:= temp @kind object;
  #L410ad0.  return v0 @kind object;
}
