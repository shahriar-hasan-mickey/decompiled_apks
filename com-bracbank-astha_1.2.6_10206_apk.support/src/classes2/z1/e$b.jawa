record `z1.e$b` @kind class @AccessFlag  {
  `z1.e$g` `z1.e$b.a` @AccessFlag PRIVATE;
  `z1.e$b$a` `z1.e$b.b` @AccessFlag PRIVATE_VOLATILE;
  `z1.e$b$a` `z1.e$b.c` @AccessFlag PRIVATE;
  `java.lang.Long` `z1.e$b.d` @AccessFlag PRIVATE;
  `int` `z1.e$b.e` @AccessFlag PRIVATE;
  `java.util.Set` `z1.e$b.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z1.e$b` v2 @kind this, `z1.e$g` v3 @kind object) @signature `Lz1/e$b;.<init>:(Lz1/e$g;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40f0a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40f0a6.  v0:= new `z1.e$b$a`;
  #L40f0aa.  v1:= 0I;
  #L40f0ac.  call `<init>`(v0, v1) @signature `Lz1/e$b$a;.<init>:(Lz1/e$a;)V` @kind direct;
  #L40f0b2.  v2.`z1.e$b.b` @type ^`z1.e$b$a` := v0 @kind object;
  #L40f0b6.  v0:= new `z1.e$b$a`;
  #L40f0ba.  call `<init>`(v0, v1) @signature `Lz1/e$b$a;.<init>:(Lz1/e$a;)V` @kind direct;
  #L40f0c0.  v2.`z1.e$b.c` @type ^`z1.e$b$a` := v0 @kind object;
  #L40f0c4.  v0:= new `java.util.HashSet`;
  #L40f0c8.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L40f0ce.  v2.`z1.e$b.f` @type ^`java.util.Set` := v0 @kind object;
  #L40f0d2.  v2.`z1.e$b.a` @type ^`z1.e$g` := v3 @kind object;
  #L40f0d6.  return @kind void;
}
procedure `java.lang.Long` `a`(`z1.e$b` v0 @kind object) @signature `Lz1/e$b;.a:(Lz1/e$b;)Ljava/lang/Long;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L40f054.  v0:= v0.`z1.e$b.d` @type ^`java.lang.Long` @kind object;
  #L40f058.  return v0 @kind object;
}
procedure `boolean` `b`(`z1.e$b` v1 @kind this, `z1.e$i` v2 @kind object) @signature `Lz1/e$b;.b:(Lz1/e$i;)Z` @AccessFlag  {
    temp;
    v0;

  #L40eed4.  call temp:= `m`(v1) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40eeda.  v0:= temp;
  #L40eedc.  if v0 == 0 then goto L40eef4;
  #L40eee0.  call temp:= `n`(v2) @signature `Lz1/e$i;.n:()Z` @kind virtual;
  #L40eee6.  v0:= temp;
  #L40eee8.  if v0 != 0 then goto L40eef4;
  #L40eeec.  call `m`(v2) @signature `Lz1/e$i;.m:()V` @kind virtual;
  #L40eef2.  goto L40ef12;
  #L40eef4.  call temp:= `m`(v1) @signature `Lz1/e$b;.m:()Z` @kind virtual;
  #L40eefa.  v0:= temp;
  #L40eefc.  if v0 != 0 then goto L40ef12;
  #L40ef00.  call temp:= `n`(v2) @signature `Lz1/e$i;.n:()Z` @kind virtual;
  #L40ef06.  v0:= temp;
  #L40ef08.  if v0 == 0 then goto L40ef12;
  #L40ef0c.  call `p`(v2) @signature `Lz1/e$i;.p:()V` @kind virtual;
  #L40ef12.  call `o`(v2, v1) @signature `Lz1/e$i;.o:(Lz1/e$b;)V` @kind virtual;
  #L40ef18.  v0:= v1.`z1.e$b.f` @type ^`java.util.Set` @kind object;
  #L40ef1c.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40ef22.  v2:= temp;
  #L40ef24.  return v2;
}
procedure `void` `c`(`z1.e$b` v1 @kind this) @signature `Lz1/e$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L40f0e8.  v0:= v1.`z1.e$b.e` @type ^`int`;
  #L40f0ec.  if v0 != 0 then goto L40f0f4;
  #L40f0f0.  v0:= 0I;
  #L40f0f2.  goto L40f0f8;
  #L40f0f4.  v0:= v0 + -1;
  #L40f0f8.  v1.`z1.e$b.e` @type ^`int` := v0;
  #L40f0fc.  return @kind void;
}
procedure `void` `d`(`z1.e$b` v0 @kind this, `long` v1 ) @signature `Lz1/e$b;.d:(J)V` @AccessFlag  {
    temp;

  #L40f110.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L40f116.  v1:= temp @kind object;
  #L40f118.  v0.`z1.e$b.d` @type ^`java.lang.Long` := v1 @kind object;
  #L40f11c.  v1:= v0.`z1.e$b.e` @type ^`int`;
  #L40f120.  v1:= v1 + 1;
  #L40f124.  v0.`z1.e$b.e` @type ^`int` := v1;
  #L40f128.  v1:= v0.`z1.e$b.f` @type ^`java.util.Set` @kind object;
  #L40f12c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40f132.  v1:= temp @kind object;
  #L40f134.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40f13a.  v2:= temp;
  #L40f13c.  if v2 == 0 then goto L40f154;
  #L40f140.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40f146.  v2:= temp @kind object;
  #L40f148.  v2:= (`z1.e$i`) v2 @kind object;
  #L40f14c.  call `m`(v2) @signature `Lz1/e$i;.m:()V` @kind virtual;
  #L40f152.  goto L40f134;
  #L40f154.  return @kind void;
}
procedure `double` `e`(`z1.e$b` v4 @kind this) @signature `Lz1/e$b;.e:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40eff4.  v0:= v4.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40eff8.  v0:= v0.`z1.e$b$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40effc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f002.  v0:= temp @kind wide;
  #L40f004.  v0:= (`double`) v0 @kind l2d;
  #L40f006.  call temp:= `f`(v4) @signature `Lz1/e$b;.f:()J` @kind virtual;
  #L40f00c.  v2:= temp @kind wide;
  #L40f00e.  v2:= (`double`) v2 @kind l2d;
  #L40f010.  v0:= v0 / v2 @kind double;
  #L40f012.  return v0 @kind wide;
}
procedure `long` `f`(`z1.e$b` v4 @kind this) @signature `Lz1/e$b;.f:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40f06c.  v0:= v4.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f070.  v0:= v0.`z1.e$b$a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f074.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f07a.  v0:= temp @kind wide;
  #L40f07c.  v2:= v4.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f080.  v2:= v2.`z1.e$b$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f084.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f08a.  v2:= temp @kind wide;
  #L40f08c.  v0:= v0 + v2 @kind long;
  #L40f08e.  return v0 @kind wide;
}
procedure `void` `g`(`z1.e$b` v2 @kind this, `boolean` v3 ) @signature `Lz1/e$b;.g:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40f168.  v0:= v2.`z1.e$b.a` @type ^`z1.e$g` @kind object;
  #L40f16c.  v1:= v0.`z1.e$g.e` @type ^`z1.e$g$c` @kind object;
  #L40f170.  if v1 != 0 then goto L40f17e;
  #L40f174.  v0:= v0.`z1.e$g.f` @type ^`z1.e$g$b` @kind object;
  #L40f178.  if v0 != 0 then goto L40f17e;
  #L40f17c.  return @kind void;
  #L40f17e.  if v3 == 0 then goto L40f192;
  #L40f182.  v3:= v2.`z1.e$b.b` @type ^`z1.e$b$a` @kind object;
  #L40f186.  v3:= v3.`z1.e$b$a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f18a.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L40f190.  goto L40f1a0;
  #L40f192.  v3:= v2.`z1.e$b.b` @type ^`z1.e$b$a` @kind object;
  #L40f196.  v3:= v3.`z1.e$b$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f19a.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L40f1a0.  return @kind void;
}
procedure `boolean` `h`(`z1.e$b` v8 @kind this, `long` v9 ) @signature `Lz1/e$b;.h:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L40ef38.  v0:= v8.`z1.e$b.a` @type ^`z1.e$g` @kind object;
  #L40ef3c.  v0:= v0.`z1.e$g.b` @type ^`java.lang.Long` @kind object;
  #L40ef40.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L40ef46.  v0:= temp @kind wide;
  #L40ef48.  v2:= v8.`z1.e$b.a` @type ^`z1.e$g` @kind object;
  #L40ef4c.  v2:= v2.`z1.e$g.c` @type ^`java.lang.Long` @kind object;
  #L40ef50.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L40ef56.  v2:= temp @kind wide;
  #L40ef58.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L40ef5e.  v0:= temp @kind wide;
  #L40ef60.  v2:= v8.`z1.e$b.d` @type ^`java.lang.Long` @kind object;
  #L40ef64.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L40ef6a.  v2:= temp @kind wide;
  #L40ef6c.  v4:= v8.`z1.e$b.a` @type ^`z1.e$g` @kind object;
  #L40ef70.  v4:= v4.`z1.e$g.b` @type ^`java.lang.Long` @kind object;
  #L40ef74.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L40ef7a.  v4:= temp @kind wide;
  #L40ef7c.  v6:= v8.`z1.e$b.e` @type ^`int`;
  #L40ef80.  v6:= (`long`) v6 @kind i2l;
  #L40ef82.  v4:= v4 * v6 @kind long;
  #L40ef86.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L40ef8c.  v0:= temp @kind wide;
  #L40ef8e.  v2:= v2 + v0 @kind long;
  #L40ef90.  v0:= lcmp(v9, v2);
  #L40ef94.  if v0 <= 0 then goto L40ef9c;
  #L40ef98.  v9:= 1I;
  #L40ef9a.  goto L40ef9e;
  #L40ef9c.  v9:= 0I;
  #L40ef9e.  return v9;
}
procedure `boolean` `i`(`z1.e$b` v1 @kind this, `z1.e$i` v2 @kind object) @signature `Lz1/e$b;.i:(Lz1/e$i;)Z` @AccessFlag  {
    temp;
    v0;

  #L40efb0.  call `l`(v2) @signature `Lz1/e$i;.l:()V` @kind virtual;
  #L40efb6.  v0:= v1.`z1.e$b.f` @type ^`java.util.Set` @kind object;
  #L40efba.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L40efc0.  v2:= temp;
  #L40efc2.  return v2;
}
procedure `void` `j`(`z1.e$b` v1 @kind this) @signature `Lz1/e$b;.j:()V` @AccessFlag  {
    temp;
    v0;

  #L40f1b4.  v0:= v1.`z1.e$b.b` @type ^`z1.e$b$a` @kind object;
  #L40f1b8.  call `a`(v0) @signature `Lz1/e$b$a;.a:()V` @kind virtual;
  #L40f1be.  v0:= v1.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f1c2.  call `a`(v0) @signature `Lz1/e$b$a;.a:()V` @kind virtual;
  #L40f1c8.  return @kind void;
}
procedure `void` `k`(`z1.e$b` v1 @kind this) @signature `Lz1/e$b;.k:()V` @AccessFlag  {
    temp;
    v0;

  #L40f1dc.  v0:= 0I;
  #L40f1de.  v1.`z1.e$b.e` @type ^`int` := v0;
  #L40f1e2.  return @kind void;
}
procedure `void` `l`(`z1.e$b` v0 @kind this, `z1.e$g` v1 @kind object) @signature `Lz1/e$b;.l:(Lz1/e$g;)V` @AccessFlag  {
    temp;

  #L40f1f4.  v0.`z1.e$b.a` @type ^`z1.e$g` := v1 @kind object;
  #L40f1f8.  return @kind void;
}
procedure `boolean` `m`(`z1.e$b` v1 @kind this) @signature `Lz1/e$b;.m:()Z` @AccessFlag  {
    temp;
    v0;

  #L40efd4.  v0:= v1.`z1.e$b.d` @type ^`java.lang.Long` @kind object;
  #L40efd8.  if v0 == 0 then goto L40efe0;
  #L40efdc.  v0:= 1I;
  #L40efde.  goto L40efe2;
  #L40efe0.  v0:= 0I;
  #L40efe2.  return v0;
}
procedure `double` `n`(`z1.e$b` v4 @kind this) @signature `Lz1/e$b;.n:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40f024.  v0:= v4.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f028.  v0:= v0.`z1.e$b$a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L40f02c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L40f032.  v0:= temp @kind wide;
  #L40f034.  v0:= (`double`) v0 @kind l2d;
  #L40f036.  call temp:= `f`(v4) @signature `Lz1/e$b;.f:()J` @kind virtual;
  #L40f03c.  v2:= temp @kind wide;
  #L40f03e.  v2:= (`double`) v2 @kind l2d;
  #L40f040.  v0:= v0 / v2 @kind double;
  #L40f042.  return v0 @kind wide;
}
procedure `void` `o`(`z1.e$b` v2 @kind this) @signature `Lz1/e$b;.o:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40f20c.  v0:= v2.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f210.  call `a`(v0) @signature `Lz1/e$b$a;.a:()V` @kind virtual;
  #L40f216.  v0:= v2.`z1.e$b.b` @type ^`z1.e$b$a` @kind object;
  #L40f21a.  v1:= v2.`z1.e$b.c` @type ^`z1.e$b$a` @kind object;
  #L40f21e.  v2.`z1.e$b.b` @type ^`z1.e$b$a` := v1 @kind object;
  #L40f222.  v2.`z1.e$b.c` @type ^`z1.e$b$a` := v0 @kind object;
  #L40f226.  return @kind void;
}
procedure `void` `p`(`z1.e$b` v2 @kind this) @signature `Lz1/e$b;.p:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40f238.  v0:= v2.`z1.e$b.d` @type ^`java.lang.Long` @kind object;
  #L40f23c.  if v0 == 0 then goto L40f244;
  #L40f240.  v0:= 1I;
  #L40f242.  goto L40f246;
  #L40f244.  v0:= 0I;
  #L40f246.  v1:= "not currently ejected" @kind object;
  #L40f24a.  call `checkState`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L40f250.  v0:= 0I;
  #L40f252.  v2.`z1.e$b.d` @type ^`java.lang.Long` := v0 @kind object;
  #L40f256.  v0:= v2.`z1.e$b.f` @type ^`java.util.Set` @kind object;
  #L40f25a.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L40f260.  v0:= temp @kind object;
  #L40f262.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L40f268.  v1:= temp;
  #L40f26a.  if v1 == 0 then goto L40f282;
  #L40f26e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L40f274.  v1:= temp @kind object;
  #L40f276.  v1:= (`z1.e$i`) v1 @kind object;
  #L40f27a.  call `p`(v1) @signature `Lz1/e$i;.p:()V` @kind virtual;
  #L40f280.  goto L40f262;
  #L40f282.  return @kind void;
}
