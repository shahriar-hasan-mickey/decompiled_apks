record `i2.b` @kind class @AccessFlag PUBLIC_FINAL extends `e2.b` @kind interface, `i2.a` @kind interface {
  `java.util.List` `i2.b.a` @AccessFlag ;
  `boolean` `i2.b.b` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`i2.b` v0 @kind this) @signature `Li2/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L35c528.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35c52e.  return @kind void;
}
procedure `boolean` `a`(`i2.b` v2 @kind this, `e2.b` v3 @kind object) @signature `Li2/b;.a:(Le2/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35c47c.  v0:= "Disposable item is null" @kind object;
  #L35c480.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L35c486.  v0:= v2.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c48a.  v1:= 0I;
  #L35c48c.  if v0 == 0 then goto L35c492;
  #L35c490.  return v1;
  #L35c492.  @monitorenter v2
  #L35c494.  v0:= v2.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c498.  if v0 == 0 then goto L35c4a0;
  #L35c49c.  @monitorexit v2
  #L35c49e.  return v1;
  #L35c4a0.  v0:= v2.`i2.b.a` @type ^`java.util.List` @kind object;
  #L35c4a4.  if v0 == 0 then goto L35c4bc;
  #L35c4a8.  call temp:= `remove`(v0, v3) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L35c4ae.  v3:= temp;
  #L35c4b0.  if v3 != 0 then goto L35c4b6;
  #L35c4b4.  goto L35c4bc;
  #L35c4b6.  @monitorexit v2
  #L35c4b8.  v3:= 1I;
  #L35c4ba.  return v3;
  #L35c4bc.  @monitorexit v2
  #L35c4be.  return v1;
  #L35c4c0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35c4c2.  @monitorexit v2
  #L35c4c4.  throw v3;
  catch `java.lang.Throwable` @[L35c494..L35c4c4] goto L35c4c0;
}
procedure `boolean` `b`(`i2.b` v1 @kind this, `e2.b` v2 @kind object) @signature `Li2/b;.b:(Le2/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35c40c.  v0:= "d is null" @kind object;
  #L35c410.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L35c416.  v0:= v1.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c41a.  if v0 != 0 then goto L35c454;
  #L35c41e.  @monitorenter v1
  #L35c420.  v0:= v1.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c424.  if v0 != 0 then goto L35c44a;
  #L35c428.  v0:= v1.`i2.b.a` @type ^`java.util.List` @kind object;
  #L35c42c.  if v0 != 0 then goto L35c43e;
  #L35c430.  v0:= new `java.util.LinkedList`;
  #L35c434.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L35c43a.  v1.`i2.b.a` @type ^`java.util.List` := v0 @kind object;
  #L35c43e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L35c444.  v2:= 1I;
  #L35c446.  @monitorexit v1
  #L35c448.  return v2;
  #L35c44a.  @monitorexit v1
  #L35c44c.  goto L35c454;
  #L35c44e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35c450.  @monitorexit v1
  #L35c452.  throw v2;
  #L35c454.  call `e`(v2) @signature `Le2/b;.e:()V` @kind interface;
  #L35c45a.  v2:= 0I;
  #L35c45c.  return v2;
  catch `java.lang.Throwable` @[L35c420..L35c452] goto L35c44e;
}
procedure `boolean` `c`(`i2.b` v1 @kind this, `e2.b` v2 @kind object) @signature `Li2/b;.c:(Le2/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35c4fc.  call temp:= `a`(v1, v2) @signature `Li2/b;.a:(Le2/b;)Z` @kind virtual;
  #L35c502.  v0:= temp;
  #L35c504.  if v0 == 0 then goto L35c512;
  #L35c508.  call `e`(v2) @signature `Le2/b;.e:()V` @kind interface;
  #L35c50e.  v2:= 1I;
  #L35c510.  return v2;
  #L35c512.  v2:= 0I;
  #L35c514.  return v2;
}
procedure `boolean` `d`(`i2.b` v1 @kind this) @signature `Li2/b;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35c4e4.  v0:= v1.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c4e8.  return v0;
}
procedure `void` `e`(`i2.b` v2 @kind this) @signature `Li2/b;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35c540.  v0:= v2.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c544.  if v0 == 0 then goto L35c54a;
  #L35c548.  return @kind void;
  #L35c54a.  @monitorenter v2
  #L35c54c.  v0:= v2.`i2.b.b` @type ^`boolean` @kind boolean;
  #L35c550.  if v0 == 0 then goto L35c558;
  #L35c554.  @monitorexit v2
  #L35c556.  return @kind void;
  #L35c558.  v0:= 1I;
  #L35c55a.  v2.`i2.b.b` @type ^`boolean` := v0 @kind boolean;
  #L35c55e.  v0:= v2.`i2.b.a` @type ^`java.util.List` @kind object;
  #L35c562.  v1:= 0I;
  #L35c564.  v2.`i2.b.a` @type ^`java.util.List` := v1 @kind object;
  #L35c568.  @monitorexit v2
  #L35c56a.  call `f`(v2, v0) @signature `Li2/b;.f:(Ljava/util/List;)V` @kind virtual;
  #L35c570.  return @kind void;
  #L35c572.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35c574.  @monitorexit v2
  #L35c576.  throw v0;
  catch `java.lang.Throwable` @[L35c54c..L35c56a] goto L35c572;
  catch `java.lang.Throwable` @[L35c574..L35c576] goto L35c572;
}
procedure `void` `f`(`i2.b` v2 @kind this, `java.util.List` v3 @kind object) @signature `Li2/b;.f:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L35c59c.  if v3 != 0 then goto L35c5a2;
  #L35c5a0.  return @kind void;
  #L35c5a2.  v0:= 0I;
  #L35c5a4.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L35c5aa.  v3:= temp @kind object;
  #L35c5ac.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L35c5b2.  v1:= temp;
  #L35c5b4.  if v1 == 0 then goto L35c5ea;
  #L35c5b8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L35c5be.  v1:= temp @kind object;
  #L35c5c0.  v1:= (`e2.b`) v1 @kind object;
  #L35c5c4.  call `e`(v1) @signature `Le2/b;.e:()V` @kind interface;
  #L35c5ca.  goto L35c5ac;
  #L35c5cc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L35c5ce.  call `b`(v1) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L35c5d4.  if v0 != 0 then goto L35c5e2;
  #L35c5d8.  v0:= new `java.util.ArrayList`;
  #L35c5dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L35c5e2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L35c5e8.  goto L35c5ac;
  #L35c5ea.  if v0 == 0 then goto L35c620;
  #L35c5ee.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L35c5f4.  v3:= temp;
  #L35c5f6.  v1:= 1I;
  #L35c5f8.  if v3 != v1 then goto L35c614;
  #L35c5fc.  v3:= 0I;
  #L35c5fe.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L35c604.  v3:= temp @kind object;
  #L35c606.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L35c60a.  call temp:= `d`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L35c610.  v3:= temp @kind object;
  #L35c612.  throw v3;
  #L35c614.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L35c618.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L35c61e.  throw v3;
  #L35c620.  return @kind void;
  catch `java.lang.Throwable` @[L35c5c4..L35c5ca] goto L35c5cc;
}
