record `okio.SegmentedByteString` @kind class @AccessFlag FINAL extends `okio.ByteString` @kind class {
  `byte`[][] `okio.SegmentedByteString.e` @AccessFlag FINAL_TRANSIENT;
  `int`[] `okio.SegmentedByteString.f` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v7 @kind this, `okio.c` v8 @kind object, `int` v9 ) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b1a0c.  v0:= 0I;
  #L3b1a0e.  call `<init>`(v7, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L3b1a14.  v1:= v8.`okio.c.b` @type ^`long` @kind wide;
  #L3b1a18.  v5:= (`long`) v9 @kind i2l;
  #L3b1a1a.  v3:= 0L;
  #L3b1a1e.  call `b`(v1, v3, v5) @signature `Lokio/s;.b:(JJJ)V` @kind static;
  #L3b1a24.  v0:= v8.`okio.c.a` @type ^`okio.n` @kind object;
  #L3b1a28.  v1:= 0I;
  #L3b1a2a.  v2:= 0I;
  #L3b1a2c.  v3:= 0I;
  #L3b1a2e.  if v2 >= v9 then goto L3b1a5c;
  #L3b1a32.  v4:= v0.`okio.n.c` @type ^`int`;
  #L3b1a36.  v5:= v0.`okio.n.b` @type ^`int`;
  #L3b1a3a.  if v4 == v5 then goto L3b1a4c;
  #L3b1a3e.  v4:= v4 - v5 @kind int;
  #L3b1a40.  v2:= v2 + v4 @kind int;
  #L3b1a42.  v3:= v3 + 1;
  #L3b1a46.  v0:= v0.`okio.n.f` @type ^`okio.n` @kind object;
  #L3b1a4a.  goto L3b1a2e;
  #L3b1a4c.  v8:= new `java.lang.AssertionError`;
  #L3b1a50.  v9:= "s.limit == s.pos" @kind object;
  #L3b1a54.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3b1a5a.  throw v8;
  #L3b1a5c.  v0:= new `byte`[][v3];
  #L3b1a60.  v7.`okio.SegmentedByteString.e` @type ^`byte`[][] := v0 @kind object;
  #L3b1a64.  v3:= v3 * 2;
  #L3b1a68.  v0:= new `int`[v3];
  #L3b1a6c.  v7.`okio.SegmentedByteString.f` @type ^`int`[] := v0 @kind object;
  #L3b1a70.  v8:= v8.`okio.c.a` @type ^`okio.n` @kind object;
  #L3b1a74.  v0:= 0I;
  #L3b1a76.  if v1 >= v9 then goto L3b1ab8;
  #L3b1a7a.  v2:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1a7e.  v3:= v8.`okio.n.a` @type ^`byte`[] @kind object;
  #L3b1a82.  v2[v0]:= v3 @kind object;
  #L3b1a86.  v3:= v8.`okio.n.c` @type ^`int`;
  #L3b1a8a.  v4:= v8.`okio.n.b` @type ^`int`;
  #L3b1a8e.  v3:= v3 - v4 @kind int;
  #L3b1a90.  v1:= v1 + v3 @kind int;
  #L3b1a92.  if v1 <= v9 then goto L3b1a98;
  #L3b1a96.  v1:= v9;
  #L3b1a98.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1a9c.  v3[v0]:= v1;
  #L3b1aa0.  v2:= length @variable v2;
  #L3b1aa2.  v2:= v2 + v0 @kind int;
  #L3b1aa4.  v3[v2]:= v4;
  #L3b1aa8.  v2:= 1I;
  #L3b1aaa.  v8.`okio.n.d` @type ^`boolean` := v2 @kind boolean;
  #L3b1aae.  v0:= v0 + 1;
  #L3b1ab2.  v8:= v8.`okio.n.f` @type ^`okio.n` @kind object;
  #L3b1ab6.  goto L3b1a76;
  #L3b1ab8.  return @kind void;
}
procedure `int` `w`(`okio.SegmentedByteString` v3 @kind this, `int` v4 ) @signature `Lokio/SegmentedByteString;.w:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3b1854.  v0:= v3.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1858.  v1:= v3.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b185c.  v1:= length @variable v1;
  #L3b185e.  v4:= v4 + 1;
  #L3b1862.  v2:= 0I;
  #L3b1864.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L3b186a.  v4:= temp;
  #L3b186c.  if v4 < 0 then goto L3b1872;
  #L3b1870.  goto L3b1874;
  #L3b1872.  v4:= ~v4 @kind int;
  #L3b1874.  return v4;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b18ac.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b18b2.  v0:= temp @kind object;
  #L3b18b4.  return v0 @kind object;
}
procedure `okio.ByteString` `x`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3b19e8.  v0:= new `okio.ByteString`;
  #L3b19ec.  call temp:= `t`(v2) @signature `Lokio/SegmentedByteString;.t:()[B` @kind virtual;
  #L3b19f2.  v1:= temp @kind object;
  #L3b19f4.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L3b19fa.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b18c8.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b18ce.  v0:= temp @kind object;
  #L3b18d0.  call temp:= `a`(v0) @signature `Lokio/ByteString;.a:()Ljava/lang/String;` @kind virtual;
  #L3b18d6.  v0:= temp @kind object;
  #L3b18d8.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1590.  v0:= 1I;
  #L3b1592.  if v5 != v4 then goto L3b1598;
  #L3b1596.  return v0;
  #L3b1598.  v1:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L3b159c.  v2:= 0I;
  #L3b159e.  if v1 == 0 then goto L3b15d0;
  #L3b15a2.  v5:= (`okio.ByteString`) v5 @kind object;
  #L3b15a6.  call temp:= `p`(v5) @signature `Lokio/ByteString;.p:()I` @kind virtual;
  #L3b15ac.  v1:= temp;
  #L3b15ae.  call temp:= `p`(v4) @signature `Lokio/SegmentedByteString;.p:()I` @kind virtual;
  #L3b15b4.  v3:= temp;
  #L3b15b6.  if v1 != v3 then goto L3b15d0;
  #L3b15ba.  call temp:= `p`(v4) @signature `Lokio/SegmentedByteString;.p:()I` @kind virtual;
  #L3b15c0.  v1:= temp;
  #L3b15c2.  call temp:= `k`(v4, v2, v5, v2, v1) @signature `Lokio/SegmentedByteString;.k:(ILokio/ByteString;II)Z` @kind virtual;
  #L3b15c8.  v5:= temp;
  #L3b15ca.  if v5 == 0 then goto L3b15d0;
  #L3b15ce.  goto L3b15d2;
  #L3b15d0.  v0:= 0I;
  #L3b15d2.  return v0;
}
procedure `byte` `h`(`okio.SegmentedByteString` v7 @kind this, `int` v8 ) @signature `Lokio/SegmentedByteString;.h:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b1720.  v0:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1724.  v1:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1728.  v1:= length @variable v1;
  #L3b172a.  v1:= v1 + -1;
  #L3b172e.  v0:= v0[v1];
  #L3b1732.  v1:= (`long`) v0 @kind i2l;
  #L3b1734.  v3:= (`long`) v8 @kind i2l;
  #L3b1736.  v5:= 1L;
  #L3b173a.  call `b`(v1, v3, v5) @signature `Lokio/s;.b:(JJJ)V` @kind static;
  #L3b1740.  call temp:= `w`(v7, v8) @signature `Lokio/SegmentedByteString;.w:(I)I` @kind direct;
  #L3b1746.  v0:= temp;
  #L3b1748.  if v0 != 0 then goto L3b1750;
  #L3b174c.  v1:= 0I;
  #L3b174e.  goto L3b175c;
  #L3b1750.  v1:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1754.  v2:= v0 + -1;
  #L3b1758.  v1:= v1[v2];
  #L3b175c.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1760.  v3:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1764.  v4:= length @variable v3;
  #L3b1766.  v4:= v4 + v0 @kind int;
  #L3b1768.  v2:= v2[v4];
  #L3b176c.  v0:= v3[v0] @kind object;
  #L3b1770.  v8:= v8 - v1 @kind int;
  #L3b1772.  v8:= v8 + v2 @kind int;
  #L3b1774.  v8:= v0[v8] @kind byte;
  #L3b1778.  return v8;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b17e8.  v0:= v8.`okio.ByteString.a` @type ^`int`;
  #L3b17ec.  if v0 == 0 then goto L3b17f2;
  #L3b17f0.  return v0;
  #L3b17f2.  v0:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b17f6.  v0:= length @variable v0;
  #L3b17f8.  v1:= 0I;
  #L3b17fa.  v2:= 1I;
  #L3b17fc.  v2:= 0I;
  #L3b17fe.  v3:= 1I;
  #L3b1800.  if v1 >= v0 then goto L3b183e;
  #L3b1804.  v4:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1808.  v4:= v4[v1] @kind object;
  #L3b180c.  v5:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1810.  v6:= v0 + v1 @kind int;
  #L3b1814.  v6:= v5[v6];
  #L3b1818.  v5:= v5[v1];
  #L3b181c.  v2:= v5 - v2 @kind int;
  #L3b1820.  v2:= v2 + v6 @kind int;
  #L3b1822.  if v6 >= v2 then goto L3b1836;
  #L3b1826.  v3:= v3 * 31;
  #L3b182a.  v7:= v4[v6] @kind byte;
  #L3b182e.  v3:= v3 + v7 @kind int;
  #L3b1830.  v6:= v6 + 1;
  #L3b1834.  goto L3b1822;
  #L3b1836.  v1:= v1 + 1;
  #L3b183a.  v2:= v5;
  #L3b183c.  goto L3b1800;
  #L3b183e.  v8.`okio.ByteString.a` @type ^`int` := v3;
  #L3b1842.  return v3;
}
procedure `java.lang.String` `i`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.i:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b18ec.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b18f2.  v0:= temp @kind object;
  #L3b18f4.  call temp:= `i`(v0) @signature `Lokio/ByteString;.i:()Ljava/lang/String;` @kind virtual;
  #L3b18fa.  v0:= temp @kind object;
  #L3b18fc.  return v0 @kind object;
}
procedure `boolean` `k`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.k:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b1688.  v0:= 0I;
  #L3b168a.  if v8 < 0 then goto L3b170c;
  #L3b168e.  call temp:= `p`(v7) @signature `Lokio/SegmentedByteString;.p:()I` @kind virtual;
  #L3b1694.  v1:= temp;
  #L3b1696.  v1:= v1 - v11 @kind int;
  #L3b1698.  if v8 <= v1 then goto L3b169e;
  #L3b169c.  goto L3b170c;
  #L3b169e.  call temp:= `w`(v7, v8) @signature `Lokio/SegmentedByteString;.w:(I)I` @kind direct;
  #L3b16a4.  v1:= temp;
  #L3b16a6.  if v11 <= 0 then goto L3b1708;
  #L3b16aa.  if v1 != 0 then goto L3b16b2;
  #L3b16ae.  v2:= 0I;
  #L3b16b0.  goto L3b16be;
  #L3b16b2.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b16b6.  v3:= v1 + -1;
  #L3b16ba.  v2:= v2[v3];
  #L3b16be.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b16c2.  v3:= v3[v1];
  #L3b16c6.  v3:= v3 - v2 @kind int;
  #L3b16c8.  v3:= v3 + v2 @kind int;
  #L3b16ca.  v3:= v3 - v8 @kind int;
  #L3b16cc.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3b16d2.  v3:= temp;
  #L3b16d4.  v4:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b16d8.  v5:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b16dc.  v6:= length @variable v5;
  #L3b16de.  v6:= v6 + v1 @kind int;
  #L3b16e0.  v4:= v4[v6];
  #L3b16e4.  v2:= v8 - v2 @kind int;
  #L3b16e8.  v2:= v2 + v4 @kind int;
  #L3b16ea.  v4:= v5[v1] @kind object;
  #L3b16ee.  call temp:= `l`(v9, v10, v4, v2, v3) @signature `Lokio/ByteString;.l:(I[BII)Z` @kind virtual;
  #L3b16f4.  v2:= temp;
  #L3b16f6.  if v2 != 0 then goto L3b16fc;
  #L3b16fa.  return v0;
  #L3b16fc.  v8:= v8 + v3 @kind int;
  #L3b16fe.  v10:= v10 + v3 @kind int;
  #L3b1700.  v11:= v11 - v3 @kind int;
  #L3b1702.  v1:= v1 + 1;
  #L3b1706.  goto L3b16a6;
  #L3b1708.  v8:= 1I;
  #L3b170a.  return v8;
  #L3b170c.  return v0;
}
procedure `boolean` `l`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.l:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b15e4.  v0:= 0I;
  #L3b15e6.  if v8 < 0 then goto L3b1674;
  #L3b15ea.  call temp:= `p`(v7) @signature `Lokio/SegmentedByteString;.p:()I` @kind virtual;
  #L3b15f0.  v1:= temp;
  #L3b15f2.  v1:= v1 - v11 @kind int;
  #L3b15f4.  if v8 > v1 then goto L3b1674;
  #L3b15f8.  if v10 < 0 then goto L3b1674;
  #L3b15fc.  v1:= length @variable v9;
  #L3b15fe.  v1:= v1 - v11 @kind int;
  #L3b1600.  if v10 <= v1 then goto L3b1606;
  #L3b1604.  goto L3b1674;
  #L3b1606.  call temp:= `w`(v7, v8) @signature `Lokio/SegmentedByteString;.w:(I)I` @kind direct;
  #L3b160c.  v1:= temp;
  #L3b160e.  if v11 <= 0 then goto L3b1670;
  #L3b1612.  if v1 != 0 then goto L3b161a;
  #L3b1616.  v2:= 0I;
  #L3b1618.  goto L3b1626;
  #L3b161a.  v2:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b161e.  v3:= v1 + -1;
  #L3b1622.  v2:= v2[v3];
  #L3b1626.  v3:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b162a.  v3:= v3[v1];
  #L3b162e.  v3:= v3 - v2 @kind int;
  #L3b1630.  v3:= v3 + v2 @kind int;
  #L3b1632.  v3:= v3 - v8 @kind int;
  #L3b1634.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3b163a.  v3:= temp;
  #L3b163c.  v4:= v7.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1640.  v5:= v7.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1644.  v6:= length @variable v5;
  #L3b1646.  v6:= v6 + v1 @kind int;
  #L3b1648.  v4:= v4[v6];
  #L3b164c.  v2:= v8 - v2 @kind int;
  #L3b1650.  v2:= v2 + v4 @kind int;
  #L3b1652.  v4:= v5[v1] @kind object;
  #L3b1656.  call temp:= `a`(v4, v2, v9, v10, v3) @signature `Lokio/s;.a:([BI[BII)Z` @kind static;
  #L3b165c.  v2:= temp;
  #L3b165e.  if v2 != 0 then goto L3b1664;
  #L3b1662.  return v0;
  #L3b1664.  v8:= v8 + v3 @kind int;
  #L3b1666.  v10:= v10 + v3 @kind int;
  #L3b1668.  v11:= v11 - v3 @kind int;
  #L3b166a.  v1:= v1 + 1;
  #L3b166e.  goto L3b160e;
  #L3b1670.  v8:= 1I;
  #L3b1672.  return v8;
  #L3b1674.  return v0;
}
procedure `okio.ByteString` `n`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.n:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1958.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b195e.  v0:= temp @kind object;
  #L3b1960.  call temp:= `n`(v0) @signature `Lokio/ByteString;.n:()Lokio/ByteString;` @kind virtual;
  #L3b1966.  v0:= temp @kind object;
  #L3b1968.  return v0 @kind object;
}
procedure `okio.ByteString` `o`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.o:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b197c.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b1982.  v0:= temp @kind object;
  #L3b1984.  call temp:= `o`(v0) @signature `Lokio/ByteString;.o:()Lokio/ByteString;` @kind virtual;
  #L3b198a.  v0:= temp @kind object;
  #L3b198c.  return v0 @kind object;
}
procedure `int` `p`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1888.  v0:= v2.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b188c.  v1:= v2.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1890.  v1:= length @variable v1;
  #L3b1892.  v1:= v1 + -1;
  #L3b1896.  v0:= v0[v1];
  #L3b189a.  return v0;
}
procedure `okio.ByteString` `r`(`okio.SegmentedByteString` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lokio/SegmentedByteString;.r:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b19a0.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b19a6.  v0:= temp @kind object;
  #L3b19a8.  call temp:= `r`(v0, v2, v3) @signature `Lokio/ByteString;.r:(II)Lokio/ByteString;` @kind virtual;
  #L3b19ae.  v2:= temp @kind object;
  #L3b19b0.  return v2 @kind object;
}
procedure `okio.ByteString` `s`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.s:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b19c4.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b19ca.  v0:= temp @kind object;
  #L3b19cc.  call temp:= `s`(v0) @signature `Lokio/ByteString;.s:()Lokio/ByteString;` @kind virtual;
  #L3b19d2.  v0:= temp @kind object;
  #L3b19d4.  return v0 @kind object;
}
procedure `byte`[] `t`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.t:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b178c.  v0:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1790.  v1:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1794.  v2:= length @variable v1;
  #L3b1796.  v2:= v2 + -1;
  #L3b179a.  v0:= v0[v2];
  #L3b179e.  v0:= new `byte`[v0];
  #L3b17a2.  v1:= length @variable v1;
  #L3b17a4.  v2:= 0I;
  #L3b17a6.  v3:= 0I;
  #L3b17a8.  if v2 >= v1 then goto L3b17d6;
  #L3b17ac.  v4:= v8.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b17b0.  v5:= v1 + v2 @kind int;
  #L3b17b4.  v5:= v4[v5];
  #L3b17b8.  v4:= v4[v2];
  #L3b17bc.  v6:= v8.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b17c0.  v6:= v6[v2] @kind object;
  #L3b17c4.  v7:= v4 - v3 @kind int;
  #L3b17c8.  call `arraycopy`(v6, v5, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b17ce.  v2:= v2 + 1;
  #L3b17d2.  v3:= v4;
  #L3b17d4.  goto L3b17a8;
  #L3b17d6.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1910.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b1916.  v0:= temp @kind object;
  #L3b1918.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b191e.  v0:= temp @kind object;
  #L3b1920.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.u:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1934.  call temp:= `x`(v1) @signature `Lokio/SegmentedByteString;.x:()Lokio/ByteString;` @kind direct;
  #L3b193a.  v0:= temp @kind object;
  #L3b193c.  call temp:= `u`(v0) @signature `Lokio/ByteString;.u:()Ljava/lang/String;` @kind virtual;
  #L3b1942.  v0:= temp @kind object;
  #L3b1944.  return v0 @kind object;
}
procedure `void` `v`(`okio.SegmentedByteString` v11 @kind this, `okio.c` v12 @kind object) @signature `Lokio/SegmentedByteString;.v:(Lokio/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3b1acc.  v0:= v11.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1ad0.  v0:= length @variable v0;
  #L3b1ad2.  v1:= 0I;
  #L3b1ad4.  v2:= 0I;
  #L3b1ad6.  if v1 >= v0 then goto L3b1b32;
  #L3b1ada.  v3:= v11.`okio.SegmentedByteString.f` @type ^`int`[] @kind object;
  #L3b1ade.  v4:= v0 + v1 @kind int;
  #L3b1ae2.  v7:= v3[v4];
  #L3b1ae6.  v3:= v3[v1];
  #L3b1aea.  v4:= new `okio.n`;
  #L3b1aee.  v5:= v11.`okio.SegmentedByteString.e` @type ^`byte`[][] @kind object;
  #L3b1af2.  v6:= v5[v1] @kind object;
  #L3b1af6.  v5:= v7 + v3 @kind int;
  #L3b1afa.  v8:= v5 - v2 @kind int;
  #L3b1afe.  v9:= 1I;
  #L3b1b00.  v10:= 0I;
  #L3b1b02.  v5:= v4 @kind object;
  #L3b1b04.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/n;.<init>:([BIIZZ)V` @kind direct;
  #L3b1b0a.  v2:= v12.`okio.c.a` @type ^`okio.n` @kind object;
  #L3b1b0e.  if v2 != 0 then goto L3b1b20;
  #L3b1b12.  v4.`okio.n.g` @type ^`okio.n` := v4 @kind object;
  #L3b1b16.  v4.`okio.n.f` @type ^`okio.n` := v4 @kind object;
  #L3b1b1a.  v12.`okio.c.a` @type ^`okio.n` := v4 @kind object;
  #L3b1b1e.  goto L3b1b2a;
  #L3b1b20.  v2:= v2.`okio.n.g` @type ^`okio.n` @kind object;
  #L3b1b24.  call temp:= `c`(v2, v4) @signature `Lokio/n;.c:(Lokio/n;)Lokio/n;` @kind virtual;
  #L3b1b2a.  v1:= v1 + 1;
  #L3b1b2e.  v2:= v3;
  #L3b1b30.  goto L3b1ad6;
  #L3b1b32.  v0:= v12.`okio.c.b` @type ^`long` @kind wide;
  #L3b1b36.  v2:= (`long`) v2 @kind i2l;
  #L3b1b38.  v0:= v0 + v2 @kind long;
  #L3b1b3a.  v12.`okio.c.b` @type ^`long` := v0 @kind wide;
  #L3b1b3e.  return @kind void;
}
