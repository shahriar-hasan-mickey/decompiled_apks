record `okio.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@okio.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okio.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3acccc.  v0:= 64I;
  #L3accd0.  v1:= new `byte`[v0];
  #L3accd4.  goto L3accf0;
  #L3accda.  `@@okio.b.a` @type ^`byte`[] := v1 @kind object;
  #L3accde.  v0:= new `byte`[v0];
  #L3acce2.  goto L3acd38;
  #L3acce8.  `@@okio.b.b` @type ^`byte`[] := v0 @kind object;
  #L3accec.  return @kind void;
  #L3accee.  
  #L3accf0.  v1:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L3acd37.  goto L3accda;
  #L3acd38.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L3acd7f.  goto L3acce8;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lokio/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3acb1c.  v0:= `@@okio.b.a` @type ^`byte`[] @kind object;
  #L3acb20.  call temp:= `b`(v1, v0) @signature `Lokio/b;.b:([B[B)Ljava/lang/String;` @kind static;
  #L3acb26.  v1:= temp @kind object;
  #L3acb28.  return v1 @kind object;
}
procedure `java.lang.String` `b`(`byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lokio/b;.b:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3acb3c.  v0:= length @variable v9;
  #L3acb3e.  v1:= 2I;
  #L3acb40.  v0:= v0 + v1 @kind int;
  #L3acb42.  v0:= v0 / 3;
  #L3acb46.  v0:= v0 * 4;
  #L3acb4a.  v0:= new `byte`[v0];
  #L3acb4e.  v2:= length @variable v9;
  #L3acb50.  v3:= length @variable v9;
  #L3acb52.  v3:= v3 %% 3;
  #L3acb56.  v2:= v2 - v3 @kind int;
  #L3acb58.  v3:= 0I;
  #L3acb5a.  v4:= 0I;
  #L3acb5c.  if v3 >= v2 then goto L3acbe2;
  #L3acb60.  v5:= v4 + 1;
  #L3acb64.  v6:= v9[v3] @kind byte;
  #L3acb68.  v6:= v6 ^& 255;
  #L3acb6c.  v6:= v6 ^> v1 @kind int;
  #L3acb6e.  v6:= v10[v6] @kind byte;
  #L3acb72.  v0[v4]:= v6 @kind byte;
  #L3acb76.  v4:= v5 + 1;
  #L3acb7a.  v6:= v9[v3] @kind byte;
  #L3acb7e.  v6:= v6 ^& 3;
  #L3acb82.  v6:= v6 ^< 4;
  #L3acb86.  v7:= v3 + 1;
  #L3acb8a.  v8:= v9[v7] @kind byte;
  #L3acb8e.  v8:= v8 ^& 255;
  #L3acb92.  v8:= v8 ^> 4;
  #L3acb96.  v6:= v6 ^| v8 @kind int;
  #L3acb98.  v6:= v10[v6] @kind byte;
  #L3acb9c.  v0[v5]:= v6 @kind byte;
  #L3acba0.  v5:= v4 + 1;
  #L3acba4.  v6:= v9[v7] @kind byte;
  #L3acba8.  v6:= v6 ^& 15;
  #L3acbac.  v6:= v6 ^< v1 @kind int;
  #L3acbae.  v7:= v3 + 2;
  #L3acbb2.  v8:= v9[v7] @kind byte;
  #L3acbb6.  v8:= v8 ^& 255;
  #L3acbba.  v8:= v8 ^> 6;
  #L3acbbe.  v6:= v6 ^| v8 @kind int;
  #L3acbc0.  v6:= v10[v6] @kind byte;
  #L3acbc4.  v0[v4]:= v6 @kind byte;
  #L3acbc8.  v4:= v5 + 1;
  #L3acbcc.  v6:= v9[v7] @kind byte;
  #L3acbd0.  v6:= v6 ^& 63;
  #L3acbd4.  v6:= v10[v6] @kind byte;
  #L3acbd8.  v0[v5]:= v6 @kind byte;
  #L3acbdc.  v3:= v3 + 3;
  #L3acbe0.  goto L3acb5c;
  #L3acbe2.  v3:= length @variable v9;
  #L3acbe4.  v3:= v3 %% 3;
  #L3acbe8.  v5:= 61I;
  #L3acbec.  v6:= 1I;
  #L3acbee.  if v3 == v6 then goto L3acc52;
  #L3acbf2.  if v3 == v1 then goto L3acbf8;
  #L3acbf6.  goto L3acc8e;
  #L3acbf8.  v3:= v4 + 1;
  #L3acbfc.  v7:= v9[v2] @kind byte;
  #L3acc00.  v7:= v7 ^& 255;
  #L3acc04.  v7:= v7 ^> v1 @kind int;
  #L3acc06.  v7:= v10[v7] @kind byte;
  #L3acc0a.  v0[v4]:= v7 @kind byte;
  #L3acc0e.  v4:= v3 + 1;
  #L3acc12.  v7:= v9[v2] @kind byte;
  #L3acc16.  v7:= v7 ^& 3;
  #L3acc1a.  v7:= v7 ^< 4;
  #L3acc1e.  v2:= v2 + v6 @kind int;
  #L3acc20.  v6:= v9[v2] @kind byte;
  #L3acc24.  v6:= v6 ^& 255;
  #L3acc28.  v6:= v6 ^> 4;
  #L3acc2c.  v6:= v6 ^| v7 @kind int;
  #L3acc2e.  v6:= v10[v6] @kind byte;
  #L3acc32.  v0[v3]:= v6 @kind byte;
  #L3acc36.  v3:= v4 + 1;
  #L3acc3a.  v9:= v9[v2] @kind byte;
  #L3acc3e.  v9:= v9 ^& 15;
  #L3acc42.  v9:= v9 ^< v1 @kind int;
  #L3acc44.  v9:= v10[v9] @kind byte;
  #L3acc48.  v0[v4]:= v9 @kind byte;
  #L3acc4c.  v0[v3]:= v5 @kind byte;
  #L3acc50.  goto L3acc8e;
  #L3acc52.  v3:= v4 + 1;
  #L3acc56.  v6:= v9[v2] @kind byte;
  #L3acc5a.  v6:= v6 ^& 255;
  #L3acc5e.  v1:= v6 ^> 2;
  #L3acc62.  v1:= v10[v1] @kind byte;
  #L3acc66.  v0[v4]:= v1 @kind byte;
  #L3acc6a.  v1:= v3 + 1;
  #L3acc6e.  v9:= v9[v2] @kind byte;
  #L3acc72.  v9:= v9 ^& 3;
  #L3acc76.  v9:= v9 ^< 4;
  #L3acc7a.  v9:= v10[v9] @kind byte;
  #L3acc7e.  v0[v3]:= v9 @kind byte;
  #L3acc82.  v9:= v1 + 1;
  #L3acc86.  v0[v1]:= v5 @kind byte;
  #L3acc8a.  v0[v9]:= v5 @kind byte;
  #L3acc8e.  v9:= new `java.lang.String`;
  #L3acc92.  v10:= "US-ASCII" @kind object;
  #L3acc96.  call `<init>`(v9, v0, v10) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L3acc9c.  return v9 @kind object;
  #L3acc9e.  v9:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L3acca0.  v10:= new `java.lang.AssertionError`;
  #L3acca4.  call `<init>`(v10, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3accaa.  throw v10;
  catch `java.io.UnsupportedEncodingException` @[L3acc8e..L3acc9c] goto L3acc9e;
}
