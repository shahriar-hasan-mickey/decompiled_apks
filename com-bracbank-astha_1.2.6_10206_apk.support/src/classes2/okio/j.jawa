record `okio.j` @kind class @AccessFlag PUBLIC_FINAL extends `okio.q` @kind interface {
  `okio.e` `okio.j.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `okio.j.c` @AccessFlag PRIVATE;
  `boolean` `okio.j.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okio.j` v0 @kind this, `okio.e` v1 @kind object, `java.util.zip.Inflater` v2 @kind object) @signature `Lokio/j;.<init>:(Lokio/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3affc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3affca.  if v1 == 0 then goto L3affec;
  #L3affce.  if v2 == 0 then goto L3affdc;
  #L3affd2.  v0.`okio.j.a` @type ^`okio.e` := v1 @kind object;
  #L3affd6.  v0.`okio.j.b` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L3affda.  return @kind void;
  #L3affdc.  v1:= new `java.lang.IllegalArgumentException`;
  #L3affe0.  v2:= "inflater == null" @kind object;
  #L3affe4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3affea.  throw v1;
  #L3affec.  v1:= new `java.lang.IllegalArgumentException`;
  #L3afff0.  v2:= "source == null" @kind object;
  #L3afff4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3afffa.  throw v1;
}
procedure `void` `h`(`okio.j` v4 @kind this) @signature `Lokio/j;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b0044.  v0:= v4.`okio.j.c` @type ^`int`;
  #L3b0048.  if v0 != 0 then goto L3b004e;
  #L3b004c.  return @kind void;
  #L3b004e.  v1:= v4.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3b0052.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3b0058.  v1:= temp;
  #L3b005a.  v0:= v0 - v1 @kind int;
  #L3b005c.  v1:= v4.`okio.j.c` @type ^`int`;
  #L3b0060.  v1:= v1 - v0 @kind int;
  #L3b0062.  v4.`okio.j.c` @type ^`int` := v1;
  #L3b0066.  v1:= v4.`okio.j.a` @type ^`okio.e` @kind object;
  #L3b006a.  v2:= (`long`) v0 @kind i2l;
  #L3b006c.  call `f`(v1, v2) @signature `Lokio/e;.f:(J)V` @kind interface;
  #L3b0072.  return @kind void;
}
procedure `long` `I`(`okio.j` v6 @kind this, `okio.c` v7 @kind object, `long` v8 ) @signature `Lokio/j;.I:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3afe64.  v0:= 0L;
  #L3afe68.  v2:= lcmp(v8, v0);
  #L3afe6c.  if v2 < 0 then goto L3aff54;
  #L3afe70.  v3:= v6.`okio.j.d` @type ^`boolean` @kind boolean;
  #L3afe74.  if v3 != 0 then goto L3aff44;
  #L3afe78.  if v2 != 0 then goto L3afe7e;
  #L3afe7c.  return v0 @kind wide;
  #L3afe7e.  call temp:= `g`(v6) @signature `Lokio/j;.g:()Z` @kind virtual;
  #L3afe84.  v0:= temp;
  #L3afe86.  v1:= 1I;
  #L3afe88.  call temp:= `j0`(v7, v1) @signature `Lokio/c;.j0:(I)Lokio/n;` @kind virtual;
  #L3afe8e.  v1:= temp @kind object;
  #L3afe90.  v2:= v1.`okio.n.c` @type ^`int`;
  #L3afe94.  v2:= v2 - 8192;
  #L3afe98.  v2:= (`long`) v2 @kind i2l;
  #L3afe9a.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3afea0.  v2:= temp @kind wide;
  #L3afea2.  v3:= (`int`) v2 @kind l2i;
  #L3afea4.  v2:= v6.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afea8.  v4:= v1.`okio.n.a` @type ^`byte`[] @kind object;
  #L3afeac.  v5:= v1.`okio.n.c` @type ^`int`;
  #L3afeb0.  call temp:= `inflate`(v2, v4, v5, v3) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L3afeb6.  v2:= temp;
  #L3afeb8.  if v2 <= 0 then goto L3afed4;
  #L3afebc.  v8:= v1.`okio.n.c` @type ^`int`;
  #L3afec0.  v8:= v8 + v2 @kind int;
  #L3afec2.  v1.`okio.n.c` @type ^`int` := v8;
  #L3afec6.  v8:= v7.`okio.c.b` @type ^`long` @kind wide;
  #L3afeca.  v0:= (`long`) v2 @kind i2l;
  #L3afecc.  v8:= v8 + v0 @kind long;
  #L3afece.  v7.`okio.c.b` @type ^`long` := v8 @kind wide;
  #L3afed2.  return v0 @kind wide;
  #L3afed4.  v2:= v6.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afed8.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L3afede.  v2:= temp;
  #L3afee0.  if v2 != 0 then goto L3aff0c;
  #L3afee4.  v2:= v6.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afee8.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L3afeee.  v2:= temp;
  #L3afef0.  if v2 == 0 then goto L3afef6;
  #L3afef4.  goto L3aff0c;
  #L3afef6.  if v0 != 0 then goto L3afefc;
  #L3afefa.  goto L3afe7e;
  #L3afefc.  v7:= new `java.io.EOFException`;
  #L3aff00.  v8:= "source exhausted prematurely" @kind object;
  #L3aff04.  call `<init>`(v7, v8) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aff0a.  throw v7;
  #L3aff0c.  call `h`(v6) @signature `Lokio/j;.h:()V` @kind direct;
  #L3aff12.  v8:= v1.`okio.n.b` @type ^`int`;
  #L3aff16.  v9:= v1.`okio.n.c` @type ^`int`;
  #L3aff1a.  if v8 != v9 then goto L3aff30;
  #L3aff1e.  call temp:= `b`(v1) @signature `Lokio/n;.b:()Lokio/n;` @kind virtual;
  #L3aff24.  v8:= temp @kind object;
  #L3aff26.  v7.`okio.c.a` @type ^`okio.n` := v8 @kind object;
  #L3aff2a.  call `a`(v1) @signature `Lokio/o;.a:(Lokio/n;)V` @kind static;
  #L3aff30.  v7:= -1L;
  #L3aff34.  return v7 @kind wide;
  #L3aff36.  v7:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L3aff38.  v8:= new `java.io.IOException`;
  #L3aff3c.  call `<init>`(v8, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3aff42.  throw v8;
  #L3aff44.  v7:= new `java.lang.IllegalStateException`;
  #L3aff48.  v8:= "closed" @kind object;
  #L3aff4c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aff52.  throw v7;
  #L3aff54.  v7:= new `java.lang.IllegalArgumentException`;
  #L3aff58.  v0:= new `java.lang.StringBuilder`;
  #L3aff5c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3aff62.  v1:= "byteCount < 0: " @kind object;
  #L3aff66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3aff6c.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3aff72.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3aff78.  v8:= temp @kind object;
  #L3aff7a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aff80.  throw v7;
  catch `java.util.zip.DataFormatException` @[L3afe88..L3aff30] goto L3aff36;
}
procedure `void` `close`(`okio.j` v1 @kind this) @signature `Lokio/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b000c.  v0:= v1.`okio.j.d` @type ^`boolean` @kind boolean;
  #L3b0010.  if v0 == 0 then goto L3b0016;
  #L3b0014.  return @kind void;
  #L3b0016.  v0:= v1.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3b001a.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L3b0020.  v0:= 1I;
  #L3b0022.  v1.`okio.j.d` @type ^`boolean` := v0 @kind boolean;
  #L3b0026.  v0:= v1.`okio.j.a` @type ^`okio.e` @kind object;
  #L3b002a.  call `close`(v0) @signature `Lokio/q;.close:()V` @kind interface;
  #L3b0030.  return @kind void;
}
procedure `okio.r` `e`(`okio.j` v1 @kind this) @signature `Lokio/j;.e:()Lokio/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3affa4.  v0:= v1.`okio.j.a` @type ^`okio.e` @kind object;
  #L3affa8.  call temp:= `e`(v0) @signature `Lokio/q;.e:()Lokio/r;` @kind interface;
  #L3affae.  v0:= temp @kind object;
  #L3affb0.  return v0 @kind object;
}
procedure `boolean` `g`(`okio.j` v5 @kind this) @signature `Lokio/j;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3afdd8.  v0:= v5.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afddc.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L3afde2.  v0:= temp;
  #L3afde4.  v1:= 0I;
  #L3afde6.  if v0 != 0 then goto L3afdec;
  #L3afdea.  return v1;
  #L3afdec.  call `h`(v5) @signature `Lokio/j;.h:()V` @kind direct;
  #L3afdf2.  v0:= v5.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afdf6.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3afdfc.  v0:= temp;
  #L3afdfe.  if v0 != 0 then goto L3afe44;
  #L3afe02.  v0:= v5.`okio.j.a` @type ^`okio.e` @kind object;
  #L3afe06.  call temp:= `n`(v0) @signature `Lokio/e;.n:()Z` @kind interface;
  #L3afe0c.  v0:= temp;
  #L3afe0e.  if v0 == 0 then goto L3afe16;
  #L3afe12.  v0:= 1I;
  #L3afe14.  return v0;
  #L3afe16.  v0:= v5.`okio.j.a` @type ^`okio.e` @kind object;
  #L3afe1a.  call temp:= `c`(v0) @signature `Lokio/e;.c:()Lokio/c;` @kind interface;
  #L3afe20.  v0:= temp @kind object;
  #L3afe22.  v0:= v0.`okio.c.a` @type ^`okio.n` @kind object;
  #L3afe26.  v2:= v0.`okio.n.c` @type ^`int`;
  #L3afe2a.  v3:= v0.`okio.n.b` @type ^`int`;
  #L3afe2e.  v2:= v2 - v3 @kind int;
  #L3afe30.  v5.`okio.j.c` @type ^`int` := v2;
  #L3afe34.  v4:= v5.`okio.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3afe38.  v0:= v0.`okio.n.a` @type ^`byte`[] @kind object;
  #L3afe3c.  call `setInput`(v4, v0, v3, v2) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L3afe42.  return v1;
  #L3afe44.  v0:= new `java.lang.IllegalStateException`;
  #L3afe48.  v1:= "?" @kind object;
  #L3afe4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3afe52.  throw v0;
}
