record `okhttp3.j$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.j$a.a` @AccessFlag ;
  `java.lang.String`[] `okhttp3.j$a.b` @AccessFlag ;
  `java.lang.String`[] `okhttp3.j$a.c` @AccessFlag ;
  `boolean` `okhttp3.j$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.j$a` v1 @kind this, `okhttp3.j` v2 @kind object) @signature `Lokhttp3/j$a;.<init>:(Lokhttp3/j;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a5b84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a5b8a.  v0:= v2.`okhttp3.j.a` @type ^`boolean` @kind boolean;
  #L3a5b8e.  v1.`okhttp3.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L3a5b92.  v0:= v2.`okhttp3.j.c` @type ^`java.lang.String`[] @kind object;
  #L3a5b96.  v1.`okhttp3.j$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L3a5b9a.  v0:= v2.`okhttp3.j.d` @type ^`java.lang.String`[] @kind object;
  #L3a5b9e.  v1.`okhttp3.j$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L3a5ba2.  v2:= v2.`okhttp3.j.b` @type ^`boolean` @kind boolean;
  #L3a5ba6.  v1.`okhttp3.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3a5baa.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.j$a` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/j$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a5b68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a5b6e.  v0.`okhttp3.j$a.a` @type ^`boolean` := v1 @kind boolean;
  #L3a5b72.  return @kind void;
}
procedure `okhttp3.j` `a`(`okhttp3.j$a` v1 @kind this) @signature `Lokhttp3/j$a;.a:()Lokhttp3/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a59d4.  v0:= new `okhttp3.j`;
  #L3a59d8.  call `<init>`(v0, v1) @signature `Lokhttp3/j;.<init>:(Lokhttp3/j$a;)V` @kind direct;
  #L3a59de.  return v0 @kind object;
}
procedure `okhttp3.j$a` `b`(`okhttp3.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/j$a;.b:([Ljava/lang/String;)Lokhttp3/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a59f0.  v0:= v1.`okhttp3.j$a.a` @type ^`boolean` @kind boolean;
  #L3a59f4.  if v0 == 0 then goto L3a5a20;
  #L3a59f8.  v0:= length @variable v2;
  #L3a59fa.  if v0 == 0 then goto L3a5a10;
  #L3a59fe.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a5a04.  v2:= temp @kind object;
  #L3a5a06.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L3a5a0a.  v1.`okhttp3.j$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L3a5a0e.  return v1 @kind object;
  #L3a5a10.  v2:= new `java.lang.IllegalArgumentException`;
  #L3a5a14.  v0:= "At least one cipher suite is required" @kind object;
  #L3a5a18.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5a1e.  throw v2;
  #L3a5a20.  v2:= new `java.lang.IllegalStateException`;
  #L3a5a24.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L3a5a28.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5a2e.  throw v2;
}
procedure `okhttp3.j$a` `c`(`okhttp3.j$a` v3 @kind this, `okhttp3.g`[] v4 @kind object) @signature `Lokhttp3/j$a;.c:([Lokhttp3/g;)Lokhttp3/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5a40.  v0:= v3.`okhttp3.j$a.a` @type ^`boolean` @kind boolean;
  #L3a5a44.  if v0 == 0 then goto L3a5a72;
  #L3a5a48.  v0:= length @variable v4;
  #L3a5a4a.  v0:= new `java.lang.String`[v0];
  #L3a5a4e.  v1:= 0I;
  #L3a5a50.  v2:= length @variable v4;
  #L3a5a52.  if v1 >= v2 then goto L3a5a68;
  #L3a5a56.  v2:= v4[v1] @kind object;
  #L3a5a5a.  v2:= v2.`okhttp3.g.a` @type ^`java.lang.String` @kind object;
  #L3a5a5e.  v0[v1]:= v2 @kind object;
  #L3a5a62.  v1:= v1 + 1;
  #L3a5a66.  goto L3a5a50;
  #L3a5a68.  call temp:= `b`(v3, v0) @signature `Lokhttp3/j$a;.b:([Ljava/lang/String;)Lokhttp3/j$a;` @kind virtual;
  #L3a5a6e.  v4:= temp @kind object;
  #L3a5a70.  return v4 @kind object;
  #L3a5a72.  v4:= new `java.lang.IllegalStateException`;
  #L3a5a76.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L3a5a7a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5a80.  throw v4;
}
procedure `okhttp3.j$a` `d`(`okhttp3.j$a` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/j$a;.d:(Z)Lokhttp3/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5a94.  v0:= v1.`okhttp3.j$a.a` @type ^`boolean` @kind boolean;
  #L3a5a98.  if v0 == 0 then goto L3a5aa2;
  #L3a5a9c.  v1.`okhttp3.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L3a5aa0.  return v1 @kind object;
  #L3a5aa2.  v2:= new `java.lang.IllegalStateException`;
  #L3a5aa6.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L3a5aaa.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5ab0.  throw v2;
}
procedure `okhttp3.j$a` `e`(`okhttp3.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/j$a;.e:([Ljava/lang/String;)Lokhttp3/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a5ac4.  v0:= v1.`okhttp3.j$a.a` @type ^`boolean` @kind boolean;
  #L3a5ac8.  if v0 == 0 then goto L3a5af4;
  #L3a5acc.  v0:= length @variable v2;
  #L3a5ace.  if v0 == 0 then goto L3a5ae4;
  #L3a5ad2.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a5ad8.  v2:= temp @kind object;
  #L3a5ada.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L3a5ade.  v1.`okhttp3.j$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L3a5ae2.  return v1 @kind object;
  #L3a5ae4.  v2:= new `java.lang.IllegalArgumentException`;
  #L3a5ae8.  v0:= "At least one TLS version is required" @kind object;
  #L3a5aec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5af2.  throw v2;
  #L3a5af4.  v2:= new `java.lang.IllegalStateException`;
  #L3a5af8.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L3a5afc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5b02.  throw v2;
}
procedure `okhttp3.j$a` `f`(`okhttp3.j$a` v3 @kind this, `okhttp3.TlsVersion`[] v4 @kind object) @signature `Lokhttp3/j$a;.f:([Lokhttp3/TlsVersion;)Lokhttp3/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5b14.  v0:= v3.`okhttp3.j$a.a` @type ^`boolean` @kind boolean;
  #L3a5b18.  if v0 == 0 then goto L3a5b46;
  #L3a5b1c.  v0:= length @variable v4;
  #L3a5b1e.  v0:= new `java.lang.String`[v0];
  #L3a5b22.  v1:= 0I;
  #L3a5b24.  v2:= length @variable v4;
  #L3a5b26.  if v1 >= v2 then goto L3a5b3c;
  #L3a5b2a.  v2:= v4[v1] @kind object;
  #L3a5b2e.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L3a5b32.  v0[v1]:= v2 @kind object;
  #L3a5b36.  v1:= v1 + 1;
  #L3a5b3a.  goto L3a5b24;
  #L3a5b3c.  call temp:= `e`(v3, v0) @signature `Lokhttp3/j$a;.e:([Ljava/lang/String;)Lokhttp3/j$a;` @kind virtual;
  #L3a5b42.  v4:= temp @kind object;
  #L3a5b44.  return v4 @kind object;
  #L3a5b46.  v4:= new `java.lang.IllegalStateException`;
  #L3a5b4a.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L3a5b4e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5b54.  throw v4;
}
