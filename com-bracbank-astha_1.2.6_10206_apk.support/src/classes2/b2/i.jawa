record `b2.i` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b2.m` @kind interface {
}
procedure `void` `<init>`(`b2.i` v0 @kind this) @signature `Lb2/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13c58c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13c592.  return @kind void;
}
procedure `b2.i` `A`(`b2.m` v2 @kind object, `b2.m` v3 @kind object, `h2.b` v4 @kind object) @signature `Lb2/i;.A:(Lb2/m;Lb2/m;Lh2/b;)Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L13c3ec.  v0:= "source1 is null" @kind object;
  #L13c3f0.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c3f6.  v0:= "source2 is null" @kind object;
  #L13c3fa.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c400.  call temp:= `g`(v4) @signature `Lj2/a;.g:(Lh2/b;)Lh2/e;` @kind static;
  #L13c406.  v4:= temp @kind object;
  #L13c408.  v0:= 2I;
  #L13c40a.  v0:= new `b2.m`[v0];
  #L13c40e.  v1:= 0I;
  #L13c410.  v0[v1]:= v2 @kind object;
  #L13c414.  v2:= 1I;
  #L13c416.  v0[v2]:= v3 @kind object;
  #L13c41a.  call temp:= `B`(v4, v0) @signature `Lb2/i;.B:(Lh2/e;[Lb2/m;)Lb2/i;` @kind static;
  #L13c420.  v2:= temp @kind object;
  #L13c422.  return v2 @kind object;
}
procedure `b2.i` `B`(`h2.e` v1 @kind object, `b2.m`[] v2 @kind object) @signature `Lb2/i;.B:(Lh2/e;[Lb2/m;)Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c434.  v0:= "sources is null" @kind object;
  #L13c438.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c43e.  v0:= length @variable v2;
  #L13c440.  if v0 != 0 then goto L13c44e;
  #L13c444.  call temp:= `g`() @signature `Lb2/i;.g:()Lb2/i;` @kind static;
  #L13c44a.  v1:= temp @kind object;
  #L13c44c.  return v1 @kind object;
  #L13c44e.  v0:= "zipper is null" @kind object;
  #L13c452.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c458.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray`;
  #L13c45c.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lb2/m;Lh2/e;)V` @kind direct;
  #L13c462.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c468.  v1:= temp @kind object;
  #L13c46a.  return v1 @kind object;
}
procedure `b2.i` `b`(`b2.l` v1 @kind object) @signature `Lb2/i;.b:(Lb2/l;)Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c0ec.  v0:= "onSubscribe is null" @kind object;
  #L13c0f0.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c0f6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate`;
  #L13c0fa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lb2/l;)V` @kind direct;
  #L13c100.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c106.  v1:= temp @kind object;
  #L13c108.  return v1 @kind object;
}
procedure `b2.i` `g`() @signature `Lb2/i;.g:()Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c1f0.  v0:= `@@io.reactivex.internal.operators.maybe.b.a` @type ^`io.reactivex.internal.operators.maybe.b` @kind object;
  #L13c1f4.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c1fa.  v0:= temp @kind object;
  #L13c1fc.  return v0 @kind object;
}
procedure `b2.i` `l`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lb2/i;.l:(Ljava/util/concurrent/Callable;)Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c270.  v0:= "callable is null" @kind object;
  #L13c274.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c27a.  v0:= new `io.reactivex.internal.operators.maybe.e`;
  #L13c27e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/e;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L13c284.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c28a.  v1:= temp @kind object;
  #L13c28c.  return v1 @kind object;
}
procedure `b2.i` `n`(`java.lang.Object` v1 @kind object) @signature `Lb2/i;.n:(Ljava/lang/Object;)Lb2/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c2a0.  v0:= "item is null" @kind object;
  #L13c2a4.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c2aa.  v0:= new `io.reactivex.internal.operators.maybe.i`;
  #L13c2ae.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/i;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13c2b4.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c2ba.  v1:= temp @kind object;
  #L13c2bc.  return v1 @kind object;
}
procedure `void` `a`(`b2.i` v2 @kind this, `b2.k` v3 @kind object) @signature `Lb2/i;.a:(Lb2/k;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c5a4.  v0:= "observer is null" @kind object;
  #L13c5a8.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c5ae.  call temp:= `u`(v2, v3) @signature `Ll2/a;.u:(Lb2/i;Lb2/k;)Lb2/k;` @kind static;
  #L13c5b4.  v3:= temp @kind object;
  #L13c5b6.  v0:= "observer returned by the RxJavaPlugins hook is null" @kind object;
  #L13c5ba.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c5c0.  call `u`(v2, v3) @signature `Lb2/i;.u:(Lb2/k;)V` @kind virtual;
  #L13c5c6.  return @kind void;
  #L13c5c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L13c5ca.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L13c5d0.  v0:= new `java.lang.NullPointerException`;
  #L13c5d4.  v1:= "subscribeActual failed" @kind object;
  #L13c5d8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c5de.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L13c5e4.  throw v0;
  #L13c5e6.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L13c5e8.  throw v3;
  catch `java.lang.NullPointerException` @[L13c5c0..L13c5c6] goto L13c5e6;
  catch `java.lang.Throwable` @[L13c5c0..L13c5c6] goto L13c5c8;
}
procedure `b2.i` `c`(`b2.i` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb2/i;.c:(Ljava/lang/Object;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c11c.  v0:= "item is null" @kind object;
  #L13c120.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c126.  call temp:= `n`(v2) @signature `Lb2/i;.n:(Ljava/lang/Object;)Lb2/i;` @kind static;
  #L13c12c.  v2:= temp @kind object;
  #L13c12e.  call temp:= `x`(v1, v2) @signature `Lb2/i;.x:(Lb2/m;)Lb2/i;` @kind virtual;
  #L13c134.  v2:= temp @kind object;
  #L13c136.  return v2 @kind object;
}
procedure `b2.i` `e`(`b2.i` v9 @kind this, `h2.d` v10 @kind object) @signature `Lb2/i;.e:(Lh2/d;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L13c148.  v8:= new `io.reactivex.internal.operators.maybe.k`;
  #L13c14c.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13c152.  v2:= temp @kind object;
  #L13c154.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13c15a.  v3:= temp @kind object;
  #L13c15c.  v0:= "onError is null" @kind object;
  #L13c160.  call temp:= `d`(v10, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c166.  v10:= temp @kind object;
  #L13c168.  v4:= v10 @kind object;
  #L13c16a.  v4:= (`h2.d`) v4 @kind object;
  #L13c16e.  v7:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13c172.  v0:= v8 @kind object;
  #L13c174.  v1:= v9 @kind object;
  #L13c176.  v5:= v7 @kind object;
  #L13c178.  v6:= v7 @kind object;
  #L13c17a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/k;.<init>:(Lb2/m;Lh2/d;Lh2/d;Lh2/d;Lh2/a;Lh2/a;Lh2/a;)V` @kind direct;
  #L13c180.  call temp:= `l`(v8) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c186.  v10:= temp @kind object;
  #L13c188.  return v10 @kind object;
}
procedure `b2.i` `f`(`b2.i` v9 @kind this, `h2.d` v10 @kind object) @signature `Lb2/i;.f:(Lh2/d;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L13c19c.  v8:= new `io.reactivex.internal.operators.maybe.k`;
  #L13c1a0.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13c1a6.  v2:= temp @kind object;
  #L13c1a8.  v0:= "onSubscribe is null" @kind object;
  #L13c1ac.  call temp:= `d`(v10, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c1b2.  v10:= temp @kind object;
  #L13c1b4.  v3:= v10 @kind object;
  #L13c1b6.  v3:= (`h2.d`) v3 @kind object;
  #L13c1ba.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13c1c0.  v4:= temp @kind object;
  #L13c1c2.  v7:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13c1c6.  v0:= v8 @kind object;
  #L13c1c8.  v1:= v9 @kind object;
  #L13c1ca.  v5:= v7 @kind object;
  #L13c1cc.  v6:= v7 @kind object;
  #L13c1ce.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/k;.<init>:(Lb2/m;Lh2/d;Lh2/d;Lh2/d;Lh2/a;Lh2/a;Lh2/a;)V` @kind direct;
  #L13c1d4.  call temp:= `l`(v8) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c1da.  v10:= temp @kind object;
  #L13c1dc.  return v10 @kind object;
}
procedure `b2.i` `h`(`b2.i` v1 @kind this, `h2.g` v2 @kind object) @signature `Lb2/i;.h:(Lh2/g;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c210.  v0:= "predicate is null" @kind object;
  #L13c214.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c21a.  v0:= new `io.reactivex.internal.operators.maybe.c`;
  #L13c21e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/c;.<init>:(Lb2/m;Lh2/g;)V` @kind direct;
  #L13c224.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c22a.  v2:= temp @kind object;
  #L13c22c.  return v2 @kind object;
}
procedure `b2.i` `i`(`b2.i` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/i;.i:(Lh2/e;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c240.  v0:= "mapper is null" @kind object;
  #L13c244.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c24a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L13c24e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lb2/m;Lh2/e;)V` @kind direct;
  #L13c254.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c25a.  v2:= temp @kind object;
  #L13c25c.  return v2 @kind object;
}
procedure `b2.a` `j`(`b2.i` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/i;.j:(Lh2/e;)Lb2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c080.  v0:= "mapper is null" @kind object;
  #L13c084.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c08a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable`;
  #L13c08e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable;.<init>:(Lb2/m;Lh2/e;)V` @kind direct;
  #L13c094.  call temp:= `j`(v0) @signature `Ll2/a;.j:(Lb2/a;)Lb2/a;` @kind static;
  #L13c09a.  v2:= temp @kind object;
  #L13c09c.  return v2 @kind object;
}
procedure `b2.n` `k`(`b2.i` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/i;.k:(Lh2/e;)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c494.  call temp:= `z`(v1) @signature `Lb2/i;.z:()Lb2/n;` @kind virtual;
  #L13c49a.  v0:= temp @kind object;
  #L13c49c.  call temp:= `i`(v0, v2) @signature `Lb2/n;.i:(Lh2/e;)Lb2/n;` @kind virtual;
  #L13c4a2.  v2:= temp @kind object;
  #L13c4a4.  return v2 @kind object;
}
procedure `b2.r` `m`(`b2.i` v1 @kind this) @signature `Lb2/i;.m:()Lb2/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c4f4.  v0:= new `io.reactivex.internal.operators.maybe.h`;
  #L13c4f8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/h;.<init>:(Lb2/m;)V` @kind direct;
  #L13c4fe.  call temp:= `n`(v0) @signature `Ll2/a;.n:(Lb2/r;)Lb2/r;` @kind static;
  #L13c504.  v0:= temp @kind object;
  #L13c506.  return v0 @kind object;
}
procedure `b2.i` `o`(`b2.i` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/i;.o:(Lh2/e;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c2d0.  v0:= "mapper is null" @kind object;
  #L13c2d4.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c2da.  v0:= new `io.reactivex.internal.operators.maybe.j`;
  #L13c2de.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/j;.<init>:(Lb2/m;Lh2/e;)V` @kind direct;
  #L13c2e4.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c2ea.  v2:= temp @kind object;
  #L13c2ec.  return v2 @kind object;
}
procedure `b2.i` `p`(`b2.i` v1 @kind this, `b2.q` v2 @kind object) @signature `Lb2/i;.p:(Lb2/q;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c300.  v0:= "scheduler is null" @kind object;
  #L13c304.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c30a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeObserveOn`;
  #L13c30e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.<init>:(Lb2/m;Lb2/q;)V` @kind direct;
  #L13c314.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c31a.  v2:= temp @kind object;
  #L13c31c.  return v2 @kind object;
}
procedure `b2.i` `q`(`b2.i` v1 @kind this, `b2.m` v2 @kind object) @signature `Lb2/i;.q:(Lb2/m;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c330.  v0:= "next is null" @kind object;
  #L13c334.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c33a.  call temp:= `e`(v2) @signature `Lj2/a;.e:(Ljava/lang/Object;)Lh2/e;` @kind static;
  #L13c340.  v2:= temp @kind object;
  #L13c342.  call temp:= `r`(v1, v2) @signature `Lb2/i;.r:(Lh2/e;)Lb2/i;` @kind virtual;
  #L13c348.  v2:= temp @kind object;
  #L13c34a.  return v2 @kind object;
}
procedure `b2.i` `r`(`b2.i` v2 @kind this, `h2.e` v3 @kind object) @signature `Lb2/i;.r:(Lh2/e;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c35c.  v0:= "resumeFunction is null" @kind object;
  #L13c360.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c366.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L13c36a.  v1:= 1I;
  #L13c36c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lb2/m;Lh2/e;Z)V` @kind direct;
  #L13c372.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c378.  v3:= temp @kind object;
  #L13c37a.  return v3 @kind object;
}
procedure `e2.b` `s`(`b2.i` v3 @kind this) @signature `Lb2/i;.s:()Le2/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13c518.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13c51e.  v0:= temp @kind object;
  #L13c520.  v1:= `@@j2.a.f` @type ^`h2.d` @kind object;
  #L13c524.  v2:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13c528.  call temp:= `t`(v3, v0, v1, v2) @signature `Lb2/i;.t:(Lh2/d;Lh2/d;Lh2/a;)Le2/b;` @kind virtual;
  #L13c52e.  v0:= temp @kind object;
  #L13c530.  return v0 @kind object;
}
procedure `e2.b` `t`(`b2.i` v1 @kind this, `h2.d` v2 @kind object, `h2.d` v3 @kind object, `h2.a` v4 @kind object) @signature `Lb2/i;.t:(Lh2/d;Lh2/d;Lh2/a;)Le2/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c544.  v0:= "onSuccess is null" @kind object;
  #L13c548.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c54e.  v0:= "onError is null" @kind object;
  #L13c552.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c558.  v0:= "onComplete is null" @kind object;
  #L13c55c.  call temp:= `d`(v4, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c562.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCallbackObserver`;
  #L13c566.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lh2/d;Lh2/d;Lh2/a;)V` @kind direct;
  #L13c56c.  call temp:= `w`(v1, v0) @signature `Lb2/i;.w:(Lb2/k;)Lb2/k;` @kind virtual;
  #L13c572.  v2:= temp @kind object;
  #L13c574.  v2:= (`e2.b`) v2 @kind object;
  #L13c578.  return v2 @kind object;
}
procedure `void` `u`(`b2.k` v0 @kind object) @signature `Lb2/i;.u:(Lb2/k;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `b2.i` `v`(`b2.i` v1 @kind this, `b2.q` v2 @kind object) @signature `Lb2/i;.v:(Lb2/q;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c38c.  v0:= "scheduler is null" @kind object;
  #L13c390.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c396.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSubscribeOn`;
  #L13c39a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn;.<init>:(Lb2/m;Lb2/q;)V` @kind direct;
  #L13c3a0.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c3a6.  v2:= temp @kind object;
  #L13c3a8.  return v2 @kind object;
}
procedure `b2.k` `w`(`b2.i` v0 @kind this, `b2.k` v1 @kind object) @signature `Lb2/i;.w:(Lb2/k;)Lb2/k;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c47c.  call `a`(v0, v1) @signature `Lb2/i;.a:(Lb2/k;)V` @kind virtual;
  #L13c482.  return v1 @kind object;
}
procedure `b2.i` `x`(`b2.i` v1 @kind this, `b2.m` v2 @kind object) @signature `Lb2/i;.x:(Lb2/m;)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c3bc.  v0:= "other is null" @kind object;
  #L13c3c0.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c3c6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty`;
  #L13c3ca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lb2/m;Lb2/m;)V` @kind direct;
  #L13c3d0.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13c3d6.  v2:= temp @kind object;
  #L13c3d8.  return v2 @kind object;
}
procedure `b2.e` `y`(`b2.i` v1 @kind this) @signature `Lb2/i;.y:()Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c0b0.  v0:= instanceof @variable v1 @type ^`k2.b` @kind boolean;
  #L13c0b4.  if v0 == 0 then goto L13c0c8;
  #L13c0b8.  v0:= v1 @kind object;
  #L13c0ba.  v0:= (`k2.b`) v0 @kind object;
  #L13c0be.  call temp:= `d`(v0) @signature `Lk2/b;.d:()Lb2/e;` @kind interface;
  #L13c0c4.  v0:= temp @kind object;
  #L13c0c6.  return v0 @kind object;
  #L13c0c8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L13c0cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lb2/m;)V` @kind direct;
  #L13c0d2.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13c0d8.  v0:= temp @kind object;
  #L13c0da.  return v0 @kind object;
}
procedure `b2.n` `z`(`b2.i` v1 @kind this) @signature `Lb2/i;.z:()Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c4b8.  v0:= instanceof @variable v1 @type ^`k2.d` @kind boolean;
  #L13c4bc.  if v0 == 0 then goto L13c4d0;
  #L13c4c0.  v0:= v1 @kind object;
  #L13c4c2.  v0:= (`k2.d`) v0 @kind object;
  #L13c4c6.  call temp:= `a`(v0) @signature `Lk2/d;.a:()Lb2/n;` @kind interface;
  #L13c4cc.  v0:= temp @kind object;
  #L13c4ce.  return v0 @kind object;
  #L13c4d0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToObservable`;
  #L13c4d4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.<init>:(Lb2/m;)V` @kind direct;
  #L13c4da.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c4e0.  v0:= temp @kind object;
  #L13c4e2.  return v0 @kind object;
}
