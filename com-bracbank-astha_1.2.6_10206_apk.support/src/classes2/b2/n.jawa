record `b2.n` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b2.o` @kind interface {
}
procedure `void` `<init>`(`b2.n` v0 @kind this) @signature `Lb2/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13c9e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13c9e6.  return @kind void;
}
procedure `int` `e`() @signature `Lb2/n;.e:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c9c4.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13c9ca.  v0:= temp;
  #L13c9cc.  return v0;
}
procedure `b2.n` `g`() @signature `Lb2/n;.g:()Lb2/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c77c.  v0:= `@@io.reactivex.internal.operators.observable.d.a` @type ^`b2.n` @kind object;
  #L13c780.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c786.  v0:= temp @kind object;
  #L13c788.  return v0 @kind object;
}
procedure `b2.n` `o`(`java.lang.Iterable` v1 @kind object) @signature `Lb2/n;.o:(Ljava/lang/Iterable;)Lb2/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c8a8.  v0:= "source is null" @kind object;
  #L13c8ac.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c8b2.  v0:= new `io.reactivex.internal.operators.observable.f`;
  #L13c8b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/f;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L13c8bc.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c8c2.  v1:= temp @kind object;
  #L13c8c4.  return v1 @kind object;
}
procedure `b2.n` `p`(`java.lang.Object` v1 @kind object) @signature `Lb2/n;.p:(Ljava/lang/Object;)Lb2/n;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13c8d8.  v0:= "The item is null" @kind object;
  #L13c8dc.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c8e2.  v0:= new `io.reactivex.internal.operators.observable.g`;
  #L13c8e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/g;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13c8ec.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c8f2.  v1:= temp @kind object;
  #L13c8f4.  return v1 @kind object;
}
procedure `void` `c`(`b2.n` v2 @kind this, `b2.p` v3 @kind object) @signature `Lb2/n;.c:(Lb2/p;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c9f8.  v0:= "observer is null" @kind object;
  #L13c9fc.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13ca02.  call temp:= `v`(v2, v3) @signature `Ll2/a;.v:(Lb2/n;Lb2/p;)Lb2/p;` @kind static;
  #L13ca08.  v3:= temp @kind object;
  #L13ca0a.  v0:= "Plugin returned null Observer" @kind object;
  #L13ca0e.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13ca14.  call `r`(v2, v3) @signature `Lb2/n;.r:(Lb2/p;)V` @kind virtual;
  #L13ca1a.  return @kind void;
  #L13ca1c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L13ca1e.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L13ca24.  call `q`(v3) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L13ca2a.  v0:= new `java.lang.NullPointerException`;
  #L13ca2e.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L13ca32.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13ca38.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L13ca3e.  throw v0;
  #L13ca40.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L13ca42.  throw v3;
  catch `java.lang.NullPointerException` @[L13ca02..L13ca1a] goto L13ca40;
  catch `java.lang.Throwable` @[L13ca02..L13ca1a] goto L13ca1c;
}
procedure `b2.r` `d`(`b2.n` v1 @kind this, `h2.g` v2 @kind object) @signature `Lb2/n;.d:(Lh2/g;)Lb2/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c968.  v0:= "predicate is null" @kind object;
  #L13c96c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c972.  v0:= new `io.reactivex.internal.operators.observable.c`;
  #L13c976.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/c;.<init>:(Lb2/o;Lh2/g;)V` @kind direct;
  #L13c97c.  call temp:= `n`(v0) @signature `Ll2/a;.n:(Lb2/r;)Lb2/r;` @kind static;
  #L13c982.  v2:= temp @kind object;
  #L13c984.  return v2 @kind object;
}
procedure `b2.r` `f`(`b2.n` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb2/n;.f:(Ljava/lang/Object;)Lb2/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c998.  v0:= "element is null" @kind object;
  #L13c99c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c9a2.  call temp:= `c`(v2) @signature `Lj2/a;.c:(Ljava/lang/Object;)Lh2/g;` @kind static;
  #L13c9a8.  v2:= temp @kind object;
  #L13c9aa.  call temp:= `d`(v1, v2) @signature `Lb2/n;.d:(Lh2/g;)Lb2/r;` @kind virtual;
  #L13c9b0.  v2:= temp @kind object;
  #L13c9b2.  return v2 @kind object;
}
procedure `b2.n` `h`(`b2.n` v1 @kind this, `h2.g` v2 @kind object) @signature `Lb2/n;.h:(Lh2/g;)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c79c.  v0:= "predicate is null" @kind object;
  #L13c7a0.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c7a6.  v0:= new `io.reactivex.internal.operators.observable.e`;
  #L13c7aa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/e;.<init>:(Lb2/o;Lh2/g;)V` @kind direct;
  #L13c7b0.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c7b6.  v2:= temp @kind object;
  #L13c7b8.  return v2 @kind object;
}
procedure `b2.n` `i`(`b2.n` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/n;.i:(Lh2/e;)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c7cc.  v0:= 0I;
  #L13c7ce.  call temp:= `j`(v1, v2, v0) @signature `Lb2/n;.j:(Lh2/e;Z)Lb2/n;` @kind virtual;
  #L13c7d4.  v2:= temp @kind object;
  #L13c7d6.  return v2 @kind object;
}
procedure `b2.n` `j`(`b2.n` v1 @kind this, `h2.e` v2 @kind object, `boolean` v3 ) @signature `Lb2/n;.j:(Lh2/e;Z)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c7e8.  v0:= 2147483647I;
  #L13c7ee.  call temp:= `k`(v1, v2, v3, v0) @signature `Lb2/n;.k:(Lh2/e;ZI)Lb2/n;` @kind virtual;
  #L13c7f4.  v2:= temp @kind object;
  #L13c7f6.  return v2 @kind object;
}
procedure `b2.n` `k`(`b2.n` v1 @kind this, `h2.e` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lb2/n;.k:(Lh2/e;ZI)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c808.  call temp:= `e`() @signature `Lb2/n;.e:()I` @kind static;
  #L13c80e.  v0:= temp;
  #L13c810.  call temp:= `l`(v1, v2, v3, v4, v0) @signature `Lb2/n;.l:(Lh2/e;ZII)Lb2/n;` @kind virtual;
  #L13c816.  v2:= temp @kind object;
  #L13c818.  return v2 @kind object;
}
procedure `b2.n` `l`(`b2.n` v7 @kind this, `h2.e` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lb2/n;.l:(Lh2/e;ZII)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13c82c.  v0:= "mapper is null" @kind object;
  #L13c830.  call temp:= `d`(v8, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c836.  v0:= "maxConcurrency" @kind object;
  #L13c83a.  call temp:= `e`(v10, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13c840.  v0:= "bufferSize" @kind object;
  #L13c844.  call temp:= `e`(v11, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13c84a.  v0:= instanceof @variable v7 @type ^`k2.h` @kind boolean;
  #L13c84e.  if v0 == 0 then goto L13c878;
  #L13c852.  v9:= v7 @kind object;
  #L13c854.  v9:= (`k2.h`) v9 @kind object;
  #L13c858.  call temp:= `call`(v9) @signature `Lk2/h;.call:()Ljava/lang/Object;` @kind interface;
  #L13c85e.  v9:= temp @kind object;
  #L13c860.  if v9 != 0 then goto L13c86e;
  #L13c864.  call temp:= `g`() @signature `Lb2/n;.g:()Lb2/n;` @kind static;
  #L13c86a.  v8:= temp @kind object;
  #L13c86c.  return v8 @kind object;
  #L13c86e.  call temp:= `a`(v9, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.a:(Ljava/lang/Object;Lh2/e;)Lb2/n;` @kind static;
  #L13c874.  v8:= temp @kind object;
  #L13c876.  return v8 @kind object;
  #L13c878.  v6:= new `io.reactivex.internal.operators.observable.ObservableFlatMap`;
  #L13c87c.  v0:= v6 @kind object;
  #L13c87e.  v1:= v7 @kind object;
  #L13c880.  v2:= v8 @kind object;
  #L13c882.  v3:= v9;
  #L13c884.  v4:= v10;
  #L13c886.  v5:= v11;
  #L13c888.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap;.<init>:(Lb2/o;Lh2/e;ZII)V` @kind direct;
  #L13c88e.  call temp:= `m`(v6) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c894.  v8:= temp @kind object;
  #L13c896.  return v8 @kind object;
}
procedure `b2.a` `m`(`b2.n` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/n;.m:(Lh2/e;)Lb2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c6b8.  v0:= 0I;
  #L13c6ba.  call temp:= `n`(v1, v2, v0) @signature `Lb2/n;.n:(Lh2/e;Z)Lb2/a;` @kind virtual;
  #L13c6c0.  v2:= temp @kind object;
  #L13c6c2.  return v2 @kind object;
}
procedure `b2.a` `n`(`b2.n` v1 @kind this, `h2.e` v2 @kind object, `boolean` v3 ) @signature `Lb2/n;.n:(Lh2/e;Z)Lb2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c6d4.  v0:= "mapper is null" @kind object;
  #L13c6d8.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c6de.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable`;
  #L13c6e2.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable;.<init>:(Lb2/o;Lh2/e;Z)V` @kind direct;
  #L13c6e8.  call temp:= `j`(v0) @signature `Ll2/a;.j:(Lb2/a;)Lb2/a;` @kind static;
  #L13c6ee.  v2:= temp @kind object;
  #L13c6f0.  return v2 @kind object;
}
procedure `b2.n` `q`(`b2.n` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/n;.q:(Lh2/e;)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c908.  v0:= "mapper is null" @kind object;
  #L13c90c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c912.  v0:= new `io.reactivex.internal.operators.observable.h`;
  #L13c916.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/h;.<init>:(Lb2/o;Lh2/e;)V` @kind direct;
  #L13c91c.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c922.  v2:= temp @kind object;
  #L13c924.  return v2 @kind object;
}
procedure `void` `r`(`b2.p` v0 @kind object) @signature `Lb2/n;.r:(Lb2/p;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `b2.n` `s`(`b2.n` v1 @kind this, `b2.o` v2 @kind object) @signature `Lb2/n;.s:(Lb2/o;)Lb2/n;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c938.  v0:= "other is null" @kind object;
  #L13c93c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c942.  v0:= new `io.reactivex.internal.operators.observable.i`;
  #L13c946.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/i;.<init>:(Lb2/o;Lb2/o;)V` @kind direct;
  #L13c94c.  call temp:= `m`(v0) @signature `Ll2/a;.m:(Lb2/n;)Lb2/n;` @kind static;
  #L13c952.  v2:= temp @kind object;
  #L13c954.  return v2 @kind object;
}
procedure `b2.e` `t`(`b2.n` v2 @kind this, `io.reactivex.BackpressureStrategy` v3 @kind object) @signature `Lb2/n;.t:(Lio/reactivex/BackpressureStrategy;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c704.  v0:= new `io.reactivex.internal.operators.flowable.f`;
  #L13c708.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/f;.<init>:(Lb2/n;)V` @kind direct;
  #L13c70e.  v1:= `@@b2.n$a.a` @type ^`int`[] @kind object;
  #L13c712.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L13c718.  v3:= temp;
  #L13c71a.  v3:= v1[v3];
  #L13c71e.  v1:= 1I;
  #L13c720.  if v3 == v1 then goto L13c760;
  #L13c724.  v1:= 2I;
  #L13c726.  if v3 == v1 then goto L13c756;
  #L13c72a.  v1:= 3I;
  #L13c72c.  if v3 == v1 then goto L13c754;
  #L13c730.  v1:= 4I;
  #L13c732.  if v3 == v1 then goto L13c740;
  #L13c736.  call temp:= `y`(v0) @signature `Lb2/e;.y:()Lb2/e;` @kind virtual;
  #L13c73c.  v3:= temp @kind object;
  #L13c73e.  return v3 @kind object;
  #L13c740.  v3:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError`;
  #L13c744.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError;.<init>:(Lb2/e;)V` @kind direct;
  #L13c74a.  call temp:= `k`(v3) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13c750.  v3:= temp @kind object;
  #L13c752.  return v3 @kind object;
  #L13c754.  return v0 @kind object;
  #L13c756.  call temp:= `B`(v0) @signature `Lb2/e;.B:()Lb2/e;` @kind virtual;
  #L13c75c.  v3:= temp @kind object;
  #L13c75e.  return v3 @kind object;
  #L13c760.  call temp:= `A`(v0) @signature `Lb2/e;.A:()Lb2/e;` @kind virtual;
  #L13c766.  v3:= temp @kind object;
  #L13c768.  return v3 @kind object;
}
