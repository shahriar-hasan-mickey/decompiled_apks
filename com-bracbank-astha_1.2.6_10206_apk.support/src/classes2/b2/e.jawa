record `b2.e` @kind class @AccessFlag PUBLIC_ABSTRACT extends `d3.a` @kind interface {
}
global `int` `@@b2.e.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb2/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13bf84.  v0:= "rx2.buffer-size" @kind object;
  #L13bf88.  v1:= 128I;
  #L13bf8c.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L13bf92.  v0:= temp @kind object;
  #L13bf94.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L13bf9a.  v0:= temp;
  #L13bf9c.  v1:= 1I;
  #L13bf9e.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13bfa4.  v0:= temp;
  #L13bfa6.  `@@b2.e.a` @type ^`int` := v0;
  #L13bfaa.  return @kind void;
}
procedure `void` `<init>`(`b2.e` v0 @kind this) @signature `Lb2/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13bfbc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13bfc2.  return @kind void;
}
procedure `int` `b`() @signature `Lb2/e;.b:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13bf6c.  v0:= `@@b2.e.a` @type ^`int`;
  #L13bf70.  return v0;
}
procedure `b2.e` `e`(`b2.g` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lb2/e;.e:(Lb2/g;Lio/reactivex/BackpressureStrategy;)Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13b910.  v0:= "source is null" @kind object;
  #L13b914.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b91a.  v0:= "mode is null" @kind object;
  #L13b91e.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b924.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate`;
  #L13b928.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lb2/g;Lio/reactivex/BackpressureStrategy;)V` @kind direct;
  #L13b92e.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13b934.  v1:= temp @kind object;
  #L13b936.  return v1 @kind object;
}
procedure `b2.e` `f`(`b2.e` v7 @kind this, `h2.d` v8 @kind object, `h2.d` v9 @kind object, `h2.a` v10 @kind object, `h2.a` v11 @kind object) @signature `Lb2/e;.f:(Lh2/d;Lh2/d;Lh2/a;Lh2/a;)Lb2/e;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13b948.  v0:= "onNext is null" @kind object;
  #L13b94c.  call temp:= `d`(v8, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b952.  v0:= "onError is null" @kind object;
  #L13b956.  call temp:= `d`(v9, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b95c.  v0:= "onComplete is null" @kind object;
  #L13b960.  call temp:= `d`(v10, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b966.  v0:= "onAfterTerminate is null" @kind object;
  #L13b96a.  call temp:= `d`(v11, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b970.  v0:= new `io.reactivex.internal.operators.flowable.b`;
  #L13b974.  v1:= v0 @kind object;
  #L13b976.  v2:= v7 @kind object;
  #L13b978.  v3:= v8 @kind object;
  #L13b97a.  v4:= v9 @kind object;
  #L13b97c.  v5:= v10 @kind object;
  #L13b97e.  v6:= v11 @kind object;
  #L13b980.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/b;.<init>:(Lb2/e;Lh2/d;Lh2/d;Lh2/a;Lh2/a;)V` @kind direct;
  #L13b986.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13b98c.  v8:= temp @kind object;
  #L13b98e.  return v8 @kind object;
}
procedure `b2.e` `i`() @signature `Lb2/e;.i:()Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13b9c8.  v0:= `@@io.reactivex.internal.operators.flowable.d.b` @type ^`b2.e` @kind object;
  #L13b9cc.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13b9d2.  v0:= temp @kind object;
  #L13b9d4.  return v0 @kind object;
}
procedure `b2.e` `r`(`java.lang.Object`[] v2 @kind object) @signature `Lb2/e;.r:([Ljava/lang/Object;)Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L13bb70.  v0:= "items is null" @kind object;
  #L13bb74.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bb7a.  v0:= length @variable v2;
  #L13bb7c.  if v0 != 0 then goto L13bb8a;
  #L13bb80.  call temp:= `i`() @signature `Lb2/e;.i:()Lb2/e;` @kind static;
  #L13bb86.  v2:= temp @kind object;
  #L13bb88.  return v2 @kind object;
  #L13bb8a.  v0:= length @variable v2;
  #L13bb8c.  v1:= 1I;
  #L13bb8e.  if v0 != v1 then goto L13bba2;
  #L13bb92.  v0:= 0I;
  #L13bb94.  v2:= v2[v0] @kind object;
  #L13bb98.  call temp:= `t`(v2) @signature `Lb2/e;.t:(Ljava/lang/Object;)Lb2/e;` @kind static;
  #L13bb9e.  v2:= temp @kind object;
  #L13bba0.  return v2 @kind object;
  #L13bba2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L13bba6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L13bbac.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bbb2.  v2:= temp @kind object;
  #L13bbb4.  return v2 @kind object;
}
procedure `b2.e` `s`(`java.lang.Iterable` v1 @kind object) @signature `Lb2/e;.s:(Ljava/lang/Iterable;)Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13bbc8.  v0:= "source is null" @kind object;
  #L13bbcc.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bbd2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L13bbd6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L13bbdc.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bbe2.  v1:= temp @kind object;
  #L13bbe4.  return v1 @kind object;
}
procedure `b2.e` `t`(`java.lang.Object` v1 @kind object) @signature `Lb2/e;.t:(Ljava/lang/Object;)Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13bbf8.  v0:= "item is null" @kind object;
  #L13bbfc.  call temp:= `d`(v1, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bc02.  v0:= new `io.reactivex.internal.operators.flowable.g`;
  #L13bc06.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/g;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13bc0c.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bc12.  v1:= temp @kind object;
  #L13bc14.  return v1 @kind object;
}
procedure `b2.e` `v`(`d3.a` v3 @kind object, `d3.a` v4 @kind object, `d3.a` v5 @kind object) @signature `Lb2/e;.v:(Ld3/a;Ld3/a;Ld3/a;)Lb2/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L13bc58.  v0:= "source1 is null" @kind object;
  #L13bc5c.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bc62.  v0:= "source2 is null" @kind object;
  #L13bc66.  call temp:= `d`(v4, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bc6c.  v0:= "source3 is null" @kind object;
  #L13bc70.  call temp:= `d`(v5, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bc76.  v0:= 3I;
  #L13bc78.  v1:= new `d3.a`[v0];
  #L13bc7c.  v2:= 0I;
  #L13bc7e.  v1[v2]:= v3 @kind object;
  #L13bc82.  v3:= 1I;
  #L13bc84.  v1[v3]:= v4 @kind object;
  #L13bc88.  v3:= 2I;
  #L13bc8a.  v1[v3]:= v5 @kind object;
  #L13bc8e.  call temp:= `r`(v1) @signature `Lb2/e;.r:([Ljava/lang/Object;)Lb2/e;` @kind static;
  #L13bc94.  v3:= temp @kind object;
  #L13bc96.  call temp:= `d`() @signature `Lj2/a;.d:()Lh2/e;` @kind static;
  #L13bc9c.  v4:= temp @kind object;
  #L13bc9e.  call temp:= `l`(v3, v4, v2, v0) @signature `Lb2/e;.l:(Lh2/e;ZI)Lb2/e;` @kind virtual;
  #L13bca4.  v3:= temp @kind object;
  #L13bca6.  return v3 @kind object;
}
procedure `b2.e` `A`(`b2.e` v1 @kind this) @signature `Lb2/e;.A:()Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bd78.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L13bd7c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lb2/e;)V` @kind direct;
  #L13bd82.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bd88.  v0:= temp @kind object;
  #L13bd8a.  return v0 @kind object;
}
procedure `b2.e` `B`(`b2.e` v1 @kind this) @signature `Lb2/e;.B:()Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bd9c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest`;
  #L13bda0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest;.<init>:(Lb2/e;)V` @kind direct;
  #L13bda6.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bdac.  v0:= temp @kind object;
  #L13bdae.  return v0 @kind object;
}
procedure `g2.a` `C`(`b2.e` v1 @kind this) @signature `Lb2/e;.C:()Lg2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bf24.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13bf2a.  v0:= temp;
  #L13bf2c.  call temp:= `D`(v1, v0) @signature `Lb2/e;.D:(I)Lg2/a;` @kind virtual;
  #L13bf32.  v0:= temp @kind object;
  #L13bf34.  return v0 @kind object;
}
procedure `g2.a` `D`(`b2.e` v1 @kind this, `int` v2 ) @signature `Lb2/e;.D:(I)Lg2/a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bf48.  v0:= "bufferSize" @kind object;
  #L13bf4c.  call temp:= `e`(v2, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13bf52.  call temp:= `M`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.M:(Lb2/e;I)Lg2/a;` @kind static;
  #L13bf58.  v2:= temp @kind object;
  #L13bf5a.  return v2 @kind object;
}
procedure `b2.e` `E`(`b2.e` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lb2/e;.E:(Ljava/util/Comparator;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bdc0.  v0:= "sortFunction" @kind object;
  #L13bdc4.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bdca.  call temp:= `J`(v1) @signature `Lb2/e;.J:()Lb2/r;` @kind virtual;
  #L13bdd0.  v0:= temp @kind object;
  #L13bdd2.  call temp:= `l`(v0) @signature `Lb2/r;.l:()Lb2/e;` @kind virtual;
  #L13bdd8.  v0:= temp @kind object;
  #L13bdda.  call temp:= `f`(v2) @signature `Lj2/a;.f:(Ljava/util/Comparator;)Lh2/e;` @kind static;
  #L13bde0.  v2:= temp @kind object;
  #L13bde2.  call temp:= `u`(v0, v2) @signature `Lb2/e;.u:(Lh2/e;)Lb2/e;` @kind virtual;
  #L13bde8.  v2:= temp @kind object;
  #L13bdea.  call temp:= `d`() @signature `Lj2/a;.d:()Lh2/e;` @kind static;
  #L13bdf0.  v0:= temp @kind object;
  #L13bdf2.  call temp:= `n`(v2, v0) @signature `Lb2/e;.n:(Lh2/e;)Lb2/e;` @kind virtual;
  #L13bdf8.  v2:= temp @kind object;
  #L13bdfa.  return v2 @kind object;
}
procedure `e2.b` `F`(`b2.e` v3 @kind this, `h2.d` v4 @kind object) @signature `Lb2/e;.F:(Lh2/d;)Le2/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13beb0.  v0:= `@@j2.a.f` @type ^`h2.d` @kind object;
  #L13beb4.  v1:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13beb8.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.a` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L13bebc.  call temp:= `G`(v3, v4, v0, v1, v2) @signature `Lb2/e;.G:(Lh2/d;Lh2/d;Lh2/a;Lh2/d;)Le2/b;` @kind virtual;
  #L13bec2.  v4:= temp @kind object;
  #L13bec4.  return v4 @kind object;
}
procedure `e2.b` `G`(`b2.e` v1 @kind this, `h2.d` v2 @kind object, `h2.d` v3 @kind object, `h2.a` v4 @kind object, `h2.d` v5 @kind object) @signature `Lb2/e;.G:(Lh2/d;Lh2/d;Lh2/a;Lh2/d;)Le2/b;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bed8.  v0:= "onNext is null" @kind object;
  #L13bedc.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bee2.  v0:= "onError is null" @kind object;
  #L13bee6.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13beec.  v0:= "onComplete is null" @kind object;
  #L13bef0.  call temp:= `d`(v4, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bef6.  v0:= "onSubscribe is null" @kind object;
  #L13befa.  call temp:= `d`(v5, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bf00.  v0:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L13bf04.  call `<init>`(v0, v2, v3, v4, v5) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lh2/d;Lh2/d;Lh2/a;Lh2/d;)V` @kind direct;
  #L13bf0a.  call `H`(v1, v0) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L13bf10.  return v0 @kind object;
}
procedure `void` `H`(`b2.e` v2 @kind this, `b2.h` v3 @kind object) @signature `Lb2/e;.H:(Lb2/h;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13bfd4.  v0:= "s is null" @kind object;
  #L13bfd8.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bfde.  call temp:= `x`(v2, v3) @signature `Ll2/a;.x:(Lb2/e;Ld3/b;)Ld3/b;` @kind static;
  #L13bfe4.  v3:= temp @kind object;
  #L13bfe6.  v0:= "Plugin returned null Subscriber" @kind object;
  #L13bfea.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bff0.  call `I`(v2, v3) @signature `Lb2/e;.I:(Ld3/b;)V` @kind virtual;
  #L13bff6.  return @kind void;
  #L13bff8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L13bffa.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L13c000.  call `q`(v3) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L13c006.  v0:= new `java.lang.NullPointerException`;
  #L13c00a.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L13c00e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c014.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L13c01a.  throw v0;
  #L13c01c.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L13c01e.  throw v3;
  catch `java.lang.NullPointerException` @[L13bfde..L13bff6] goto L13c01c;
  catch `java.lang.Throwable` @[L13bfde..L13bff6] goto L13bff8;
}
procedure `void` `I`(`d3.b` v0 @kind object) @signature `Lb2/e;.I:(Ld3/b;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `b2.r` `J`(`b2.e` v1 @kind this) @signature `Lb2/e;.J:()Lb2/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13be8c.  v0:= new `io.reactivex.internal.operators.flowable.j`;
  #L13be90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/j;.<init>:(Lb2/e;)V` @kind direct;
  #L13be96.  call temp:= `n`(v0) @signature `Ll2/a;.n:(Lb2/r;)Lb2/r;` @kind static;
  #L13be9c.  v0:= temp @kind object;
  #L13be9e.  return v0 @kind object;
}
procedure `void` `a`(`b2.e` v1 @kind this, `d3.b` v2 @kind object) @signature `Lb2/e;.a:(Ld3/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c040.  v0:= instanceof @variable v2 @type ^`b2.h` @kind boolean;
  #L13c044.  if v0 == 0 then goto L13c054;
  #L13c048.  v2:= (`b2.h`) v2 @kind object;
  #L13c04c.  call `H`(v1, v2) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L13c052.  goto L13c06e;
  #L13c054.  v0:= "s is null" @kind object;
  #L13c058.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13c05e.  v0:= new `io.reactivex.internal.subscribers.StrictSubscriber`;
  #L13c062.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Ld3/b;)V` @kind direct;
  #L13c068.  call `H`(v1, v0) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L13c06e.  return @kind void;
}
procedure `b2.e` `c`(`b2.e` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/e;.c:(Lh2/e;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b888.  v0:= 2I;
  #L13b88a.  call temp:= `d`(v1, v2, v0) @signature `Lb2/e;.d:(Lh2/e;I)Lb2/e;` @kind virtual;
  #L13b890.  v2:= temp @kind object;
  #L13b892.  return v2 @kind object;
}
procedure `b2.e` `d`(`b2.e` v2 @kind this, `h2.e` v3 @kind object, `int` v4 ) @signature `Lb2/e;.d:(Lh2/e;I)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13b8a4.  v0:= "mapper is null" @kind object;
  #L13b8a8.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b8ae.  v0:= "prefetch" @kind object;
  #L13b8b2.  call temp:= `e`(v4, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13b8b8.  v0:= instanceof @variable v2 @type ^`k2.h` @kind boolean;
  #L13b8bc.  if v0 == 0 then goto L13b8e6;
  #L13b8c0.  v4:= v2 @kind object;
  #L13b8c2.  v4:= (`k2.h`) v4 @kind object;
  #L13b8c6.  call temp:= `call`(v4) @signature `Lk2/h;.call:()Ljava/lang/Object;` @kind interface;
  #L13b8cc.  v4:= temp @kind object;
  #L13b8ce.  if v4 != 0 then goto L13b8dc;
  #L13b8d2.  call temp:= `i`() @signature `Lb2/e;.i:()Lb2/e;` @kind static;
  #L13b8d8.  v3:= temp @kind object;
  #L13b8da.  return v3 @kind object;
  #L13b8dc.  call temp:= `a`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/i;.a:(Ljava/lang/Object;Lh2/e;)Lb2/e;` @kind static;
  #L13b8e2.  v3:= temp @kind object;
  #L13b8e4.  return v3 @kind object;
  #L13b8e6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L13b8ea.  v1:= `@@io.reactivex.internal.util.ErrorMode.a` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L13b8ee.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lb2/e;Lh2/e;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L13b8f4.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13b8fa.  v3:= temp @kind object;
  #L13b8fc.  return v3 @kind object;
}
procedure `b2.e` `g`(`b2.e` v2 @kind this, `h2.d` v3 @kind object) @signature `Lb2/e;.g:(Lh2/d;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13b9a0.  call temp:= `b`() @signature `Lj2/a;.b:()Lh2/d;` @kind static;
  #L13b9a6.  v0:= temp @kind object;
  #L13b9a8.  v1:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13b9ac.  call temp:= `f`(v2, v3, v0, v1, v1) @signature `Lb2/e;.f:(Lh2/d;Lh2/d;Lh2/a;Lh2/a;)Lb2/e;` @kind direct;
  #L13b9b2.  v3:= temp @kind object;
  #L13b9b4.  return v3 @kind object;
}
procedure `b2.i` `h`(`b2.e` v3 @kind this, `long` v4 ) @signature `Lb2/e;.h:(J)Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13be0c.  v0:= 0L;
  #L13be10.  v2:= lcmp(v4, v0);
  #L13be14.  if v2 < 0 then goto L13be2c;
  #L13be18.  v0:= new `io.reactivex.internal.operators.flowable.c`;
  #L13be1c.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/c;.<init>:(Lb2/e;J)V` @kind direct;
  #L13be22.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L13be28.  v4:= temp @kind object;
  #L13be2a.  return v4 @kind object;
  #L13be2c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L13be30.  v1:= new `java.lang.StringBuilder`;
  #L13be34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13be3a.  v2:= "index >= 0 required but it was " @kind object;
  #L13be3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13be44.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L13be4a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13be50.  v4:= temp @kind object;
  #L13be52.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13be58.  throw v0;
}
procedure `b2.e` `j`(`b2.e` v1 @kind this, `h2.g` v2 @kind object) @signature `Lb2/e;.j:(Lh2/g;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b9e8.  v0:= "predicate is null" @kind object;
  #L13b9ec.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13b9f2.  v0:= new `io.reactivex.internal.operators.flowable.e`;
  #L13b9f6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/e;.<init>:(Lb2/e;Lh2/g;)V` @kind direct;
  #L13b9fc.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13ba02.  v2:= temp @kind object;
  #L13ba04.  return v2 @kind object;
}
procedure `b2.i` `k`(`b2.e` v2 @kind this) @signature `Lb2/e;.k:()Lb2/i;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13be6c.  v0:= 0L;
  #L13be70.  call temp:= `h`(v2, v0) @signature `Lb2/e;.h:(J)Lb2/i;` @kind virtual;
  #L13be76.  v0:= temp @kind object;
  #L13be78.  return v0 @kind object;
}
procedure `b2.e` `l`(`b2.e` v1 @kind this, `h2.e` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lb2/e;.l:(Lh2/e;ZI)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13ba18.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13ba1e.  v0:= temp;
  #L13ba20.  call temp:= `m`(v1, v2, v3, v4, v0) @signature `Lb2/e;.m:(Lh2/e;ZII)Lb2/e;` @kind virtual;
  #L13ba26.  v2:= temp @kind object;
  #L13ba28.  return v2 @kind object;
}
procedure `b2.e` `m`(`b2.e` v7 @kind this, `h2.e` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lb2/e;.m:(Lh2/e;ZII)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13ba3c.  v0:= "mapper is null" @kind object;
  #L13ba40.  call temp:= `d`(v8, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13ba46.  v0:= "maxConcurrency" @kind object;
  #L13ba4a.  call temp:= `e`(v10, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13ba50.  v0:= "bufferSize" @kind object;
  #L13ba54.  call temp:= `e`(v11, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13ba5a.  v0:= instanceof @variable v7 @type ^`k2.h` @kind boolean;
  #L13ba5e.  if v0 == 0 then goto L13ba88;
  #L13ba62.  v9:= v7 @kind object;
  #L13ba64.  v9:= (`k2.h`) v9 @kind object;
  #L13ba68.  call temp:= `call`(v9) @signature `Lk2/h;.call:()Ljava/lang/Object;` @kind interface;
  #L13ba6e.  v9:= temp @kind object;
  #L13ba70.  if v9 != 0 then goto L13ba7e;
  #L13ba74.  call temp:= `i`() @signature `Lb2/e;.i:()Lb2/e;` @kind static;
  #L13ba7a.  v8:= temp @kind object;
  #L13ba7c.  return v8 @kind object;
  #L13ba7e.  call temp:= `a`(v9, v8) @signature `Lio/reactivex/internal/operators/flowable/i;.a:(Ljava/lang/Object;Lh2/e;)Lb2/e;` @kind static;
  #L13ba84.  v8:= temp @kind object;
  #L13ba86.  return v8 @kind object;
  #L13ba88.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap`;
  #L13ba8c.  v0:= v6 @kind object;
  #L13ba8e.  v1:= v7 @kind object;
  #L13ba90.  v2:= v8 @kind object;
  #L13ba92.  v3:= v9;
  #L13ba94.  v4:= v10;
  #L13ba96.  v5:= v11;
  #L13ba98.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lb2/e;Lh2/e;ZII)V` @kind direct;
  #L13ba9e.  call temp:= `k`(v6) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13baa4.  v8:= temp @kind object;
  #L13baa6.  return v8 @kind object;
}
procedure `b2.e` `n`(`b2.e` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/e;.n:(Lh2/e;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bab8.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13babe.  v0:= temp;
  #L13bac0.  call temp:= `o`(v1, v2, v0) @signature `Lb2/e;.o:(Lh2/e;I)Lb2/e;` @kind virtual;
  #L13bac6.  v2:= temp @kind object;
  #L13bac8.  return v2 @kind object;
}
procedure `b2.e` `o`(`b2.e` v1 @kind this, `h2.e` v2 @kind object, `int` v3 ) @signature `Lb2/e;.o:(Lh2/e;I)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13badc.  v0:= "mapper is null" @kind object;
  #L13bae0.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bae6.  v0:= "bufferSize" @kind object;
  #L13baea.  call temp:= `e`(v3, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13baf0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L13baf4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lb2/e;Lh2/e;I)V` @kind direct;
  #L13bafa.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bb00.  v2:= temp @kind object;
  #L13bb02.  return v2 @kind object;
}
procedure `b2.e` `p`(`b2.e` v2 @kind this, `h2.e` v3 @kind object) @signature `Lb2/e;.p:(Lh2/e;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13bb14.  v0:= 0I;
  #L13bb16.  v1:= 2147483647I;
  #L13bb1c.  call temp:= `q`(v2, v3, v0, v1) @signature `Lb2/e;.q:(Lh2/e;ZI)Lb2/e;` @kind virtual;
  #L13bb22.  v3:= temp @kind object;
  #L13bb24.  return v3 @kind object;
}
procedure `b2.e` `q`(`b2.e` v1 @kind this, `h2.e` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lb2/e;.q:(Lh2/e;ZI)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bb38.  v0:= "mapper is null" @kind object;
  #L13bb3c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bb42.  v0:= "maxConcurrency" @kind object;
  #L13bb46.  call temp:= `e`(v4, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13bb4c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe`;
  #L13bb50.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.<init>:(Lb2/e;Lh2/e;ZI)V` @kind direct;
  #L13bb56.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bb5c.  v2:= temp @kind object;
  #L13bb5e.  return v2 @kind object;
}
procedure `b2.e` `u`(`b2.e` v1 @kind this, `h2.e` v2 @kind object) @signature `Lb2/e;.u:(Lh2/e;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bc28.  v0:= "mapper is null" @kind object;
  #L13bc2c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bc32.  v0:= new `io.reactivex.internal.operators.flowable.h`;
  #L13bc36.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/h;.<init>:(Lb2/e;Lh2/e;)V` @kind direct;
  #L13bc3c.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bc42.  v2:= temp @kind object;
  #L13bc44.  return v2 @kind object;
}
procedure `b2.e` `w`(`b2.e` v2 @kind this, `b2.q` v3 @kind object) @signature `Lb2/e;.w:(Lb2/q;)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13bcb8.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13bcbe.  v0:= temp;
  #L13bcc0.  v1:= 0I;
  #L13bcc2.  call temp:= `x`(v2, v3, v1, v0) @signature `Lb2/e;.x:(Lb2/q;ZI)Lb2/e;` @kind virtual;
  #L13bcc8.  v3:= temp @kind object;
  #L13bcca.  return v3 @kind object;
}
procedure `b2.e` `x`(`b2.e` v1 @kind this, `b2.q` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lb2/e;.x:(Lb2/q;ZI)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13bcdc.  v0:= "scheduler is null" @kind object;
  #L13bce0.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L13bce6.  v0:= "bufferSize" @kind object;
  #L13bcea.  call temp:= `e`(v4, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13bcf0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn`;
  #L13bcf4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lb2/e;Lb2/q;ZI)V` @kind direct;
  #L13bcfa.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bd00.  v2:= temp @kind object;
  #L13bd02.  return v2 @kind object;
}
procedure `b2.e` `y`(`b2.e` v3 @kind this) @signature `Lb2/e;.y:()Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13bd14.  call temp:= `b`() @signature `Lb2/e;.b:()I` @kind static;
  #L13bd1a.  v0:= temp;
  #L13bd1c.  v1:= 0I;
  #L13bd1e.  v2:= 1I;
  #L13bd20.  call temp:= `z`(v3, v0, v1, v2) @signature `Lb2/e;.z:(IZZ)Lb2/e;` @kind virtual;
  #L13bd26.  v0:= temp @kind object;
  #L13bd28.  return v0 @kind object;
}
procedure `b2.e` `z`(`b2.e` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 ) @signature `Lb2/e;.z:(IZZ)Lb2/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13bd3c.  v0:= "bufferSize" @kind object;
  #L13bd40.  call temp:= `e`(v8, v0) @signature `Lj2/b;.e:(ILjava/lang/String;)I` @kind static;
  #L13bd46.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L13bd4a.  v6:= `@@j2.a.c` @type ^`h2.a` @kind object;
  #L13bd4e.  v1:= v0 @kind object;
  #L13bd50.  v2:= v7 @kind object;
  #L13bd52.  v3:= v8;
  #L13bd54.  v4:= v10;
  #L13bd56.  v5:= v9;
  #L13bd58.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lb2/e;IZZLh2/a;)V` @kind direct;
  #L13bd5e.  call temp:= `k`(v0) @signature `Ll2/a;.k:(Lb2/e;)Lb2/e;` @kind static;
  #L13bd64.  v8:= temp @kind object;
  #L13bd66.  return v8 @kind object;
}
