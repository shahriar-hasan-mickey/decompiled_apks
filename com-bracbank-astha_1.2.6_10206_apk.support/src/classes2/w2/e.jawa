record `w2.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `okio.ByteString` `@@w2.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@w2.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lw2/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L404f80.  v0:= "\"\\" @kind object;
  #L404f84.  call temp:= `g`(v0) @signature `Lokio/ByteString;.g:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L404f8a.  v0:= temp @kind object;
  #L404f8c.  `@@w2.e.a` @type ^`okio.ByteString` := v0 @kind object;
  #L404f90.  v0:= "\t ,=" @kind object;
  #L404f94.  call temp:= `g`(v0) @signature `Lokio/ByteString;.g:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L404f9a.  v0:= temp @kind object;
  #L404f9c.  `@@w2.e.b` @type ^`okio.ByteString` := v0 @kind object;
  #L404fa0.  return @kind void;
}
procedure `long` `a`(`okhttp3.q` v2 @kind object) @signature `Lw2/e;.a:(Lokhttp3/q;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L404f00.  v0:= "Content-Length" @kind object;
  #L404f04.  call temp:= `c`(v2, v0) @signature `Lokhttp3/q;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L404f0a.  v2:= temp @kind object;
  #L404f0c.  call temp:= `h`(v2) @signature `Lw2/e;.h:(Ljava/lang/String;)J` @kind static;
  #L404f12.  v0:= temp @kind wide;
  #L404f14.  return v0 @kind wide;
}
procedure `long` `b`(`okhttp3.y` v2 @kind object) @signature `Lw2/e;.b:(Lokhttp3/y;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L404f28.  call temp:= `U`(v2) @signature `Lokhttp3/y;.U:()Lokhttp3/q;` @kind virtual;
  #L404f2e.  v2:= temp @kind object;
  #L404f30.  call temp:= `a`(v2) @signature `Lw2/e;.a:(Lokhttp3/q;)J` @kind static;
  #L404f36.  v0:= temp @kind wide;
  #L404f38.  return v0 @kind wide;
}
procedure `boolean` `c`(`okhttp3.y` v8 @kind object) @signature `Lw2/e;.c:(Lokhttp3/y;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L404d98.  call temp:= `Y`(v8) @signature `Lokhttp3/y;.Y:()Lokhttp3/w;` @kind virtual;
  #L404d9e.  v0:= temp @kind object;
  #L404da0.  call temp:= `f`(v0) @signature `Lokhttp3/w;.f:()Ljava/lang/String;` @kind virtual;
  #L404da6.  v0:= temp @kind object;
  #L404da8.  v1:= "HEAD" @kind object;
  #L404dac.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L404db2.  v0:= temp;
  #L404db4.  v1:= 0I;
  #L404db6.  if v0 == 0 then goto L404dbc;
  #L404dba.  return v1;
  #L404dbc.  call temp:= `s`(v8) @signature `Lokhttp3/y;.s:()I` @kind virtual;
  #L404dc2.  v0:= temp;
  #L404dc4.  v2:= 100I;
  #L404dc8.  v3:= 1I;
  #L404dca.  if v0 < v2 then goto L404dd6;
  #L404dce.  v2:= 200I;
  #L404dd2.  if v0 < v2 then goto L404de8;
  #L404dd6.  v2:= 204I;
  #L404dda.  if v0 == v2 then goto L404de8;
  #L404dde.  v2:= 304I;
  #L404de2.  if v0 == v2 then goto L404de8;
  #L404de6.  return v3;
  #L404de8.  call temp:= `b`(v8) @signature `Lw2/e;.b:(Lokhttp3/y;)J` @kind static;
  #L404dee.  v4:= temp @kind wide;
  #L404df0.  v6:= -1L;
  #L404df4.  v0:= lcmp(v4, v6);
  #L404df8.  if v0 != 0 then goto L404e1c;
  #L404dfc.  v0:= "Transfer-Encoding" @kind object;
  #L404e00.  call temp:= `R`(v8, v0) @signature `Lokhttp3/y;.R:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L404e06.  v8:= temp @kind object;
  #L404e08.  v0:= "chunked" @kind object;
  #L404e0c.  call temp:= `equalsIgnoreCase`(v0, v8) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L404e12.  v8:= temp;
  #L404e14.  if v8 == 0 then goto L404e1a;
  #L404e18.  goto L404e1c;
  #L404e1a.  return v1;
  #L404e1c.  return v3;
}
procedure `int` `d`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lw2/e;.d:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L404e30.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L404e36.  v3:= temp @kind wide;
  #L404e38.  v0:= 2147483647L;
  #L404e3e.  v2:= lcmp(v3, v0);
  #L404e42.  if v2 <= 0 then goto L404e4e;
  #L404e46.  v3:= 2147483647I;
  #L404e4c.  return v3;
  #L404e4e.  v0:= 0L;
  #L404e52.  v2:= lcmp(v3, v0);
  #L404e56.  if v2 >= 0 then goto L404e5e;
  #L404e5a.  v3:= 0I;
  #L404e5c.  return v3;
  #L404e5e.  v4:= (`int`) v3 @kind l2i;
  #L404e60.  return v4;
  catch `java.lang.NumberFormatException` @[L404e30..L404e38] goto L404e60;
}
procedure `void` `e`(`okhttp3.l` v1 @kind object, `okhttp3.r` v2 @kind object, `okhttp3.q` v3 @kind object) @signature `Lw2/e;.e:(Lokhttp3/l;Lokhttp3/r;Lokhttp3/q;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L404fb4.  v0:= `@@okhttp3.l.a` @type ^`okhttp3.l` @kind object;
  #L404fb8.  if v1 != v0 then goto L404fbe;
  #L404fbc.  return @kind void;
  #L404fbe.  call temp:= `f`(v2, v3) @signature `Lokhttp3/k;.f:(Lokhttp3/r;Lokhttp3/q;)Ljava/util/List;` @kind static;
  #L404fc4.  v3:= temp @kind object;
  #L404fc6.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L404fcc.  v0:= temp;
  #L404fce.  if v0 == 0 then goto L404fd4;
  #L404fd2.  return @kind void;
  #L404fd4.  call `a`(v1, v2, v3) @signature `Lokhttp3/l;.a:(Lokhttp3/r;Ljava/util/List;)V` @kind interface;
  #L404fda.  return @kind void;
}
procedure `int` `f`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `Lw2/e;.f:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L404e84.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L404e8a.  v0:= temp;
  #L404e8c.  if v3 >= v0 then goto L404eae;
  #L404e90.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L404e96.  v0:= temp;
  #L404e98.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L404e9e.  v0:= temp;
  #L404ea0.  v1:= -1I;
  #L404ea2.  if v0 == v1 then goto L404ea8;
  #L404ea6.  goto L404eae;
  #L404ea8.  v3:= v3 + 1;
  #L404eac.  goto L404e84;
  #L404eae.  return v3;
}
procedure `int` `g`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lw2/e;.g:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L404ec0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L404ec6.  v0:= temp;
  #L404ec8.  if v3 >= v0 then goto L404eec;
  #L404ecc.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L404ed2.  v0:= temp;
  #L404ed4.  v1:= 32I;
  #L404ed8.  if v0 == v1 then goto L404ee6;
  #L404edc.  v1:= 9I;
  #L404ee0.  if v0 == v1 then goto L404ee6;
  #L404ee4.  goto L404eec;
  #L404ee6.  v3:= v3 + 1;
  #L404eea.  goto L404ec0;
  #L404eec.  return v3;
}
procedure `long` `h`(`java.lang.String` v2 @kind object) @signature `Lw2/e;.h:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L404f4c.  v0:= -1L;
  #L404f50.  if v2 != 0 then goto L404f56;
  #L404f54.  return v0 @kind wide;
  #L404f56.  call temp:= `parseLong`(v2) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L404f5c.  v0:= temp @kind wide;
  #L404f5e.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L404f56..L404f5e] goto L404f5e;
}
