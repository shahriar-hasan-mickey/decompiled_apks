record `t1.a` @kind class @AccessFlag PUBLIC_FINAL extends `o2.a` @kind interface {
  `o2.a` `t1.a.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `t1.a.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@t1.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lt1/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fc4e8.  v0:= new `java.lang.Object`;
  #L3fc4ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fc4f2.  `@@t1.a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L3fc4f6.  return @kind void;
}
procedure `void` `<init>`(`t1.a` v1 @kind this, `o2.a` v2 @kind object) @signature `Lt1/a;.<init>:(Lo2/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3fc508.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fc50e.  v0:= `@@t1.a.c` @type ^`java.lang.Object` @kind object;
  #L3fc512.  v1.`t1.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3fc516.  v1.`t1.a.a` @type ^`o2.a` := v2 @kind object;
  #L3fc51a.  return @kind void;
}
procedure `o2.a` `a`(`o2.a` v1 @kind object) @signature `Lt1/a;.a:(Lo2/a;)Lo2/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fc4bc.  call temp:= `b`(v1) @signature `Lt1/b;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3fc4c2.  v0:= instanceof @variable v1 @type ^`t1.a` @kind boolean;
  #L3fc4c6.  if v0 == 0 then goto L3fc4cc;
  #L3fc4ca.  return v1 @kind object;
  #L3fc4cc.  v0:= new `t1.a`;
  #L3fc4d0.  call `<init>`(v0, v1) @signature `Lt1/a;.<init>:(Lo2/a;)V` @kind direct;
  #L3fc4d6.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lt1/a;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fc448.  v0:= `@@t1.a.c` @type ^`java.lang.Object` @kind object;
  #L3fc44c.  if v3 == v0 then goto L3fc454;
  #L3fc450.  v0:= 1I;
  #L3fc452.  goto L3fc456;
  #L3fc454.  v0:= 0I;
  #L3fc456.  if v0 == 0 then goto L3fc4a8;
  #L3fc45a.  if v3 != v4 then goto L3fc460;
  #L3fc45e.  goto L3fc4a8;
  #L3fc460.  v0:= new `java.lang.IllegalStateException`;
  #L3fc464.  v1:= new `java.lang.StringBuilder`;
  #L3fc468.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fc46e.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L3fc472.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc478.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc47e.  v3:= " & " @kind object;
  #L3fc482.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc488.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc48e.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L3fc492.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc498.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fc49e.  v3:= temp @kind object;
  #L3fc4a0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc4a6.  throw v0;
  #L3fc4a8.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`t1.a` v2 @kind this) @signature `Lt1/a;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc3e8.  v0:= v2.`t1.a.b` @type ^`java.lang.Object` @kind object;
  #L3fc3ec.  v1:= `@@t1.a.c` @type ^`java.lang.Object` @kind object;
  #L3fc3f0.  if v0 != v1 then goto L3fc42a;
  #L3fc3f4.  @monitorenter v2
  #L3fc3f6.  v0:= v2.`t1.a.b` @type ^`java.lang.Object` @kind object;
  #L3fc3fa.  if v0 != v1 then goto L3fc420;
  #L3fc3fe.  v0:= v2.`t1.a.a` @type ^`o2.a` @kind object;
  #L3fc402.  call temp:= `get`(v0) @signature `Lo2/a;.get:()Ljava/lang/Object;` @kind interface;
  #L3fc408.  v0:= temp @kind object;
  #L3fc40a.  v1:= v2.`t1.a.b` @type ^`java.lang.Object` @kind object;
  #L3fc40e.  call temp:= `b`(v1, v0) @signature `Lt1/a;.b:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3fc414.  v1:= temp @kind object;
  #L3fc416.  v2.`t1.a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L3fc41a.  v1:= 0I;
  #L3fc41c.  v2.`t1.a.a` @type ^`o2.a` := v1 @kind object;
  #L3fc420.  @monitorexit v2
  #L3fc422.  goto L3fc42a;
  #L3fc424.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fc426.  @monitorexit v2
  #L3fc428.  throw v0;
  #L3fc42a.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3fc3f6..L3fc428] goto L3fc424;
}
