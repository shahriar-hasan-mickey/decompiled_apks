record `v2.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `v2.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `v2.b.b` @AccessFlag PRIVATE;
  `boolean` `v2.b.c` @AccessFlag PRIVATE;
  `boolean` `v2.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v2.b` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lv2/b;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fed98.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fed9e.  v0:= 0I;
  #L3feda0.  v1.`v2.b.b` @type ^`int` := v0;
  #L3feda4.  v1.`v2.b.a` @type ^`java.util.List` := v2 @kind object;
  #L3feda8.  return @kind void;
}
procedure `boolean` `c`(`v2.b` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lv2/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3fec70.  v0:= v2.`v2.b.b` @type ^`int`;
  #L3fec74.  v1:= v2.`v2.b.a` @type ^`java.util.List` @kind object;
  #L3fec78.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3fec7e.  v1:= temp;
  #L3fec80.  if v0 >= v1 then goto L3fecaa;
  #L3fec84.  v1:= v2.`v2.b.a` @type ^`java.util.List` @kind object;
  #L3fec88.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3fec8e.  v1:= temp @kind object;
  #L3fec90.  v1:= (`okhttp3.j`) v1 @kind object;
  #L3fec94.  call temp:= `c`(v1, v3) @signature `Lokhttp3/j;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L3fec9a.  v1:= temp;
  #L3fec9c.  if v1 == 0 then goto L3feca4;
  #L3feca0.  v3:= 1I;
  #L3feca2.  return v3;
  #L3feca4.  v0:= v0 + 1;
  #L3feca8.  goto L3fec74;
  #L3fecaa.  v3:= 0I;
  #L3fecac.  return v3;
}
procedure `okhttp3.j` `a`(`v2.b` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lv2/b;.a:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fecc0.  v0:= v4.`v2.b.b` @type ^`int`;
  #L3fecc4.  v1:= v4.`v2.b.a` @type ^`java.util.List` @kind object;
  #L3fecc8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3fecce.  v1:= temp;
  #L3fecd0.  if v0 >= v1 then goto L3fed00;
  #L3fecd4.  v2:= v4.`v2.b.a` @type ^`java.util.List` @kind object;
  #L3fecd8.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3fecde.  v2:= temp @kind object;
  #L3fece0.  v2:= (`okhttp3.j`) v2 @kind object;
  #L3fece4.  call temp:= `c`(v2, v5) @signature `Lokhttp3/j;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L3fecea.  v3:= temp;
  #L3fecec.  if v3 == 0 then goto L3fecfa;
  #L3fecf0.  v0:= v0 + 1;
  #L3fecf4.  v4.`v2.b.b` @type ^`int` := v0;
  #L3fecf8.  goto L3fed02;
  #L3fecfa.  v0:= v0 + 1;
  #L3fecfe.  goto L3fecd0;
  #L3fed00.  v2:= 0I;
  #L3fed02.  if v2 == 0 then goto L3fed22;
  #L3fed06.  call temp:= `c`(v4, v5) @signature `Lv2/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L3fed0c.  v0:= temp;
  #L3fed0e.  v4.`v2.b.c` @type ^`boolean` := v0 @kind boolean;
  #L3fed12.  v0:= `@@t2.a.a` @type ^`t2.a` @kind object;
  #L3fed16.  v1:= v4.`v2.b.d` @type ^`boolean` @kind boolean;
  #L3fed1a.  call `c`(v0, v2, v5, v1) @signature `Lt2/a;.c:(Lokhttp3/j;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L3fed20.  return v2 @kind object;
  #L3fed22.  v0:= new `java.net.UnknownServiceException`;
  #L3fed26.  v1:= new `java.lang.StringBuilder`;
  #L3fed2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fed30.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L3fed34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed3a.  v2:= v4.`v2.b.d` @type ^`boolean` @kind boolean;
  #L3fed3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed44.  v2:= ", modes=" @kind object;
  #L3fed48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed4e.  v2:= v4.`v2.b.a` @type ^`java.util.List` @kind object;
  #L3fed52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed58.  v2:= ", supported protocols=" @kind object;
  #L3fed5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed62.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L3fed68.  v5:= temp @kind object;
  #L3fed6a.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3fed70.  v5:= temp @kind object;
  #L3fed72.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fed78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fed7e.  v5:= temp @kind object;
  #L3fed80.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fed86.  throw v0;
}
procedure `boolean` `b`(`v2.b` v4 @kind this, `java.io.IOException` v5 @kind object) @signature `Lv2/b;.b:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3febfc.  v0:= 1I;
  #L3febfe.  v4.`v2.b.d` @type ^`boolean` := v0 @kind boolean;
  #L3fec02.  v1:= v4.`v2.b.c` @type ^`boolean` @kind boolean;
  #L3fec06.  v2:= 0I;
  #L3fec08.  if v1 != 0 then goto L3fec0e;
  #L3fec0c.  return v2;
  #L3fec0e.  v1:= instanceof @variable v5 @type ^`java.net.ProtocolException` @kind boolean;
  #L3fec12.  if v1 == 0 then goto L3fec18;
  #L3fec16.  return v2;
  #L3fec18.  v1:= instanceof @variable v5 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L3fec1c.  if v1 == 0 then goto L3fec22;
  #L3fec20.  return v2;
  #L3fec22.  v1:= instanceof @variable v5 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L3fec26.  if v1 == 0 then goto L3fec3c;
  #L3fec2a.  call temp:= `getCause`(v5) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3fec30.  v3:= temp @kind object;
  #L3fec32.  v3:= instanceof @variable v3 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L3fec36.  if v3 == 0 then goto L3fec3c;
  #L3fec3a.  return v2;
  #L3fec3c.  v3:= instanceof @variable v5 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L3fec40.  if v3 == 0 then goto L3fec46;
  #L3fec44.  return v2;
  #L3fec46.  if v1 != 0 then goto L3fec5e;
  #L3fec4a.  v1:= instanceof @variable v5 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L3fec4e.  if v1 != 0 then goto L3fec5e;
  #L3fec52.  v5:= instanceof @variable v5 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L3fec56.  if v5 == 0 then goto L3fec5c;
  #L3fec5a.  goto L3fec5e;
  #L3fec5c.  v0:= 0I;
  #L3fec5e.  return v0;
}
