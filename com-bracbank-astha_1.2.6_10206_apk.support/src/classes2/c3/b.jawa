record `c3.b` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String`[] `@@c3.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@c3.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc3/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L13d898.  v0:= 128I;
  #L13d89c.  v0:= new `java.lang.String`[v0];
  #L13d8a0.  `@@c3.b.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L13d8a4.  v0:= 16I;
  #L13d8a8.  v0:= new `char`[v0];
  #L13d8ac.  goto L13d8d8;
  #L13d8b2.  `@@c3.b.b` @type ^`char`[] := v0 @kind object;
  #L13d8b6.  v0:= 0I;
  #L13d8b8.  v1:= `@@c3.b.a` @type ^`java.lang.String`[] @kind object;
  #L13d8bc.  v2:= length @variable v1;
  #L13d8be.  if v0 >= v2 then goto L13d8d6;
  #L13d8c2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L13d8c8.  v2:= temp @kind object;
  #L13d8ca.  v1[v0]:= v2 @kind object;
  #L13d8ce.  v0:= v0 + 1;
  #L13d8d2.  v0:= (`char`) v0 @kind i2c;
  #L13d8d4.  goto L13d8b8;
  #L13d8d6.  return @kind void;
  #L13d8d8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L13d8ff.  goto L13d8b2;
}
procedure `boolean` `a`(`char` v1 ) @signature `Lc3/b;.a:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13d870.  v0:= 32I;
  #L13d874.  if v1 < v0 then goto L13d884;
  #L13d878.  v0:= 127I;
  #L13d87c.  if v1 >= v0 then goto L13d884;
  #L13d880.  v1:= 1I;
  #L13d882.  goto L13d886;
  #L13d884.  v1:= 0I;
  #L13d886.  return v1;
}
