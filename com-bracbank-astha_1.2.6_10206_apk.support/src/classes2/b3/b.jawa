record `b3.b` @kind class @AccessFlag PUBLIC_FINAL extends `b3.e` @kind interface {
  `java.util.Map` `b3.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b3.b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lb3/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13d100.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13d106.  v0:= new `java.util.LinkedHashMap`;
  #L13d10a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L13d110.  v6.`b3.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L13d114.  v0:= length @variable v7;
  #L13d116.  v1:= 0I;
  #L13d118.  if v1 >= v0 then goto L13d15e;
  #L13d11c.  v2:= v7[v1] @kind object;
  #L13d120.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L13d126.  v3:= temp @kind object;
  #L13d128.  v4:= v6.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d12c.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13d132.  v4:= temp @kind object;
  #L13d134.  v4:= (`java.util.Set`) v4 @kind object;
  #L13d138.  if v4 != 0 then goto L13d152;
  #L13d13c.  v4:= new `java.util.LinkedHashSet`;
  #L13d140.  v5:= 1I;
  #L13d142.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L13d148.  v5:= v6.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d14c.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13d152.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13d158.  v1:= v1 + 1;
  #L13d15c.  goto L13d118;
  #L13d15e.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`b3.b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lb3/b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d088.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L13d08e.  v0:= temp @kind object;
  #L13d090.  v1:= v4.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d094.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13d09a.  v0:= temp @kind object;
  #L13d09c.  v0:= (`java.util.Set`) v0 @kind object;
  #L13d0a0.  v1:= 0I;
  #L13d0a2.  if v0 != 0 then goto L13d0a8;
  #L13d0a6.  return v1 @kind object;
  #L13d0a8.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13d0ae.  v0:= temp @kind object;
  #L13d0b0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13d0b6.  v2:= temp;
  #L13d0b8.  if v2 == 0 then goto L13d0dc;
  #L13d0bc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13d0c2.  v2:= temp @kind object;
  #L13d0c4.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L13d0c8.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L13d0ce.  v3:= temp @kind object;
  #L13d0d0.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L13d0d6.  return v2 @kind object;
  #L13d0d8.  
  #L13d0da.  goto L13d0b0;
  #L13d0dc.  return v1 @kind object;
  catch `java.lang.Exception` @[L13d0d0..L13d0d6] goto L13d0d8;
}
procedure `boolean` `equals`(`b3.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lb3/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13d028.  v0:= 1I;
  #L13d02a.  if v3 != v2 then goto L13d030;
  #L13d02e.  return v0;
  #L13d030.  v1:= instanceof @variable v3 @type ^`b3.b` @kind boolean;
  #L13d034.  if v1 == 0 then goto L13d052;
  #L13d038.  v3:= (`b3.b`) v3 @kind object;
  #L13d03c.  v3:= v3.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d040.  v1:= v2.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d044.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L13d04a.  v3:= temp;
  #L13d04c.  if v3 == 0 then goto L13d052;
  #L13d050.  goto L13d054;
  #L13d052.  v0:= 0I;
  #L13d054.  return v0;
}
procedure `int` `hashCode`(`b3.b` v1 @kind this) @signature `Lb3/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13d068.  v0:= v1.`b3.b.a` @type ^`java.util.Map` @kind object;
  #L13d06c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L13d072.  v0:= temp;
  #L13d074.  return v0;
}
