record `b3.a` @kind class @AccessFlag PUBLIC_FINAL extends `b3.c` @kind class {
  `b3.e` `b3.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b3.a` v0 @kind this, `b3.e` v1 @kind object) @signature `Lb3/a;.<init>:(Lb3/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13d00c.  call `<init>`(v0) @signature `Lb3/c;.<init>:()V` @kind direct;
  #L13d012.  v0.`b3.a.a` @type ^`b3.e` := v1 @kind object;
  #L13d016.  return @kind void;
}
procedure `boolean` `c`(`b3.a` v2 @kind this, `java.security.cert.X509Certificate` v3 @kind object, `java.security.cert.X509Certificate` v4 @kind object) @signature `Lb3/a;.c:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13ce60.  call temp:= `getIssuerDN`(v3) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L13ce66.  v0:= temp @kind object;
  #L13ce68.  call temp:= `getSubjectDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L13ce6e.  v1:= temp @kind object;
  #L13ce70.  call temp:= `equals`(v0, v1) @signature `Ljava/security/Principal;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L13ce76.  v0:= temp;
  #L13ce78.  v1:= 0I;
  #L13ce7a.  if v0 != 0 then goto L13ce80;
  #L13ce7e.  return v1;
  #L13ce80.  call temp:= `getPublicKey`(v4) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L13ce86.  v4:= temp @kind object;
  #L13ce88.  call `verify`(v3, v4) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L13ce8e.  v3:= 1I;
  #L13ce90.  return v3;
  #L13ce92.  return v1;
  catch `java.security.GeneralSecurityException` @[L13ce80..L13ce8e] goto L13ce92;
}
procedure `java.util.List` `a`(`b3.a` v6 @kind this, `java.util.List` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lb3/a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13ced4.  v8:= new `java.util.ArrayDeque`;
  #L13ced8.  call `<init>`(v8, v7) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L13cede.  v7:= new `java.util.ArrayList`;
  #L13cee2.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13cee8.  call temp:= `removeFirst`(v8) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L13ceee.  v0:= temp @kind object;
  #L13cef0.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13cef6.  v0:= 0I;
  #L13cef8.  v1:= 0I;
  #L13cefa.  v2:= 9I;
  #L13cefe.  if v0 >= v2 then goto L13cfcc;
  #L13cf02.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13cf08.  v2:= temp;
  #L13cf0a.  v3:= 1I;
  #L13cf0c.  v2:= v2 - v3 @kind int;
  #L13cf0e.  call temp:= `get`(v7, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13cf14.  v2:= temp @kind object;
  #L13cf16.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L13cf1a.  v4:= v6.`b3.a.a` @type ^`b3.e` @kind object;
  #L13cf1e.  call temp:= `a`(v4, v2) @signature `Lb3/e;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind interface;
  #L13cf24.  v4:= temp @kind object;
  #L13cf26.  if v4 == 0 then goto L13cf5a;
  #L13cf2a.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13cf30.  v1:= temp;
  #L13cf32.  if v1 > v3 then goto L13cf42;
  #L13cf36.  call temp:= `equals`(v2, v4) @signature `Ljava/security/cert/X509Certificate;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13cf3c.  v1:= temp;
  #L13cf3e.  if v1 != 0 then goto L13cf48;
  #L13cf42.  call temp:= `add`(v7, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13cf48.  call temp:= `c`(v6, v4, v4) @signature `Lb3/a;.c:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L13cf4e.  v1:= temp;
  #L13cf50.  if v1 == 0 then goto L13cf56;
  #L13cf54.  return v7 @kind object;
  #L13cf56.  v1:= 1I;
  #L13cf58.  goto L13cf92;
  #L13cf5a.  call temp:= `iterator`(v8) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13cf60.  v3:= temp @kind object;
  #L13cf62.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13cf68.  v4:= temp;
  #L13cf6a.  if v4 == 0 then goto L13cf98;
  #L13cf6e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13cf74.  v4:= temp @kind object;
  #L13cf76.  v4:= (`java.security.cert.X509Certificate`) v4 @kind object;
  #L13cf7a.  call temp:= `c`(v6, v2, v4) @signature `Lb3/a;.c:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L13cf80.  v5:= temp;
  #L13cf82.  if v5 == 0 then goto L13cf62;
  #L13cf86.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L13cf8c.  call temp:= `add`(v7, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13cf92.  v0:= v0 + 1;
  #L13cf96.  goto L13cefa;
  #L13cf98.  if v1 == 0 then goto L13cf9e;
  #L13cf9c.  return v7 @kind object;
  #L13cf9e.  v7:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L13cfa2.  v8:= new `java.lang.StringBuilder`;
  #L13cfa6.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13cfac.  v0:= "Failed to find a trusted cert that signed " @kind object;
  #L13cfb0.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cfb6.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cfbc.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13cfc2.  v8:= temp @kind object;
  #L13cfc4.  call `<init>`(v7, v8) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13cfca.  throw v7;
  #L13cfcc.  v8:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L13cfd0.  v0:= new `java.lang.StringBuilder`;
  #L13cfd4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13cfda.  v1:= "Certificate chain too long: " @kind object;
  #L13cfde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cfe4.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cfea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13cff0.  v7:= temp @kind object;
  #L13cff2.  call `<init>`(v8, v7) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13cff8.  throw v8;
}
procedure `boolean` `equals`(`b3.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lb3/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ce20.  v0:= 1I;
  #L13ce22.  if v3 != v2 then goto L13ce28;
  #L13ce26.  return v0;
  #L13ce28.  v1:= instanceof @variable v3 @type ^`b3.a` @kind boolean;
  #L13ce2c.  if v1 == 0 then goto L13ce4a;
  #L13ce30.  v3:= (`b3.a`) v3 @kind object;
  #L13ce34.  v3:= v3.`b3.a.a` @type ^`b3.e` @kind object;
  #L13ce38.  v1:= v2.`b3.a.a` @type ^`b3.e` @kind object;
  #L13ce3c.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13ce42.  v3:= temp;
  #L13ce44.  if v3 == 0 then goto L13ce4a;
  #L13ce48.  goto L13ce4c;
  #L13ce4a.  v0:= 0I;
  #L13ce4c.  return v0;
}
procedure `int` `hashCode`(`b3.a` v1 @kind this) @signature `Lb3/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ceb4.  v0:= v1.`b3.a.a` @type ^`b3.e` @kind object;
  #L13ceb8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13cebe.  v0:= temp;
  #L13cec0.  return v0;
}
