record `b3.d` @kind class @AccessFlag PUBLIC_FINAL extends `javax.net.ssl.HostnameVerifier` @kind interface {
}
global `b3.d` `@@b3.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb3/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13d550.  v0:= new `b3.d`;
  #L13d554.  call `<init>`(v0) @signature `Lb3/d;.<init>:()V` @kind direct;
  #L13d55a.  `@@b3.d.a` @type ^`b3.d` := v0 @kind object;
  #L13d55e.  return @kind void;
}
procedure `void` `<init>`(`b3.d` v0 @kind this) @signature `Lb3/d;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L13d570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13d576.  return @kind void;
}
procedure `java.util.List` `a`(`java.security.cert.X509Certificate` v4 @kind object) @signature `Lb3/d;.a:(Ljava/security/cert/X509Certificate;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d444.  v0:= 7I;
  #L13d446.  call temp:= `b`(v4, v0) @signature `Lb3/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L13d44c.  v0:= temp @kind object;
  #L13d44e.  v1:= 2I;
  #L13d450.  call temp:= `b`(v4, v1) @signature `Lb3/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L13d456.  v4:= temp @kind object;
  #L13d458.  v1:= new `java.util.ArrayList`;
  #L13d45c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13d462.  v2:= temp;
  #L13d464.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13d46a.  v3:= temp;
  #L13d46c.  v2:= v2 + v3 @kind int;
  #L13d46e.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13d474.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L13d47a.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L13d480.  return v1 @kind object;
}
procedure `java.util.List` `b`(`java.security.cert.X509Certificate` v4 @kind object, `int` v5 ) @signature `Lb3/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d494.  v0:= new `java.util.ArrayList`;
  #L13d498.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13d49e.  call temp:= `getSubjectAlternativeNames`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectAlternativeNames:()Ljava/util/Collection;` @kind virtual;
  #L13d4a4.  v4:= temp @kind object;
  #L13d4a6.  if v4 != 0 then goto L13d4b4;
  #L13d4aa.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L13d4b0.  v4:= temp @kind object;
  #L13d4b2.  return v4 @kind object;
  #L13d4b4.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13d4ba.  v4:= temp @kind object;
  #L13d4bc.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13d4c2.  v1:= temp;
  #L13d4c4.  if v1 == 0 then goto L13d522;
  #L13d4c8.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13d4ce.  v1:= temp @kind object;
  #L13d4d0.  v1:= (`java.util.List`) v1 @kind object;
  #L13d4d4.  if v1 == 0 then goto L13d4bc;
  #L13d4d8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13d4de.  v2:= temp;
  #L13d4e0.  v3:= 2I;
  #L13d4e2.  if v2 >= v3 then goto L13d4e8;
  #L13d4e6.  goto L13d4bc;
  #L13d4e8.  v2:= 0I;
  #L13d4ea.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13d4f0.  v2:= temp @kind object;
  #L13d4f2.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L13d4f6.  if v2 != 0 then goto L13d4fc;
  #L13d4fa.  goto L13d4bc;
  #L13d4fc.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L13d502.  v2:= temp;
  #L13d504.  if v2 != v5 then goto L13d4bc;
  #L13d508.  v2:= 1I;
  #L13d50a.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13d510.  v1:= temp @kind object;
  #L13d512.  v1:= (`java.lang.String`) v1 @kind object;
  #L13d516.  if v1 == 0 then goto L13d4bc;
  #L13d51a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13d520.  goto L13d4bc;
  #L13d522.  return v0 @kind object;
  #L13d524.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L13d52a.  v4:= temp @kind object;
  #L13d52c.  return v4 @kind object;
  catch `java.security.cert.CertificateParsingException` @[L13d49e..L13d520] goto L13d524;
}
procedure `boolean` `e`(`b3.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lb3/d;.e:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13d398.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L13d39c.  call temp:= `toLowerCase`(v2, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L13d3a2.  v2:= temp @kind object;
  #L13d3a4.  v0:= 2I;
  #L13d3a6.  call temp:= `b`(v3, v0) @signature `Lb3/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L13d3ac.  v3:= temp @kind object;
  #L13d3ae.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13d3b4.  v3:= temp @kind object;
  #L13d3b6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13d3bc.  v0:= temp;
  #L13d3be.  if v0 == 0 then goto L13d3de;
  #L13d3c2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13d3c8.  v0:= temp @kind object;
  #L13d3ca.  v0:= (`java.lang.String`) v0 @kind object;
  #L13d3ce.  call temp:= `d`(v1, v2, v0) @signature `Lb3/d;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L13d3d4.  v0:= temp;
  #L13d3d6.  if v0 == 0 then goto L13d3b6;
  #L13d3da.  v2:= 1I;
  #L13d3dc.  return v2;
  #L13d3de.  v2:= 0I;
  #L13d3e0.  return v2;
}
procedure `boolean` `f`(`b3.d` v4 @kind this, `java.lang.String` v5 @kind object, `java.security.cert.X509Certificate` v6 @kind object) @signature `Lb3/d;.f:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d3f4.  v0:= 7I;
  #L13d3f6.  call temp:= `b`(v6, v0) @signature `Lb3/d;.b:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L13d3fc.  v6:= temp @kind object;
  #L13d3fe.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13d404.  v0:= temp;
  #L13d406.  v1:= 0I;
  #L13d408.  v2:= 0I;
  #L13d40a.  if v2 >= v0 then goto L13d430;
  #L13d40e.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13d414.  v3:= temp @kind object;
  #L13d416.  v3:= (`java.lang.String`) v3 @kind object;
  #L13d41a.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L13d420.  v3:= temp;
  #L13d422.  if v3 == 0 then goto L13d42a;
  #L13d426.  v5:= 1I;
  #L13d428.  return v5;
  #L13d42a.  v2:= v2 + 1;
  #L13d42e.  goto L13d40a;
  #L13d430.  return v1;
}
procedure `boolean` `c`(`b3.d` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lb3/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13d1ac.  call temp:= `J`(v2) @signature `Lt2/c;.J:(Ljava/lang/String;)Z` @kind static;
  #L13d1b2.  v0:= temp;
  #L13d1b4.  if v0 == 0 then goto L13d1c2;
  #L13d1b8.  call temp:= `f`(v1, v2, v3) @signature `Lb3/d;.f:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L13d1be.  v2:= temp;
  #L13d1c0.  goto L13d1ca;
  #L13d1c2.  call temp:= `e`(v1, v2, v3) @signature `Lb3/d;.e:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L13d1c8.  v2:= temp;
  #L13d1ca.  return v2;
}
procedure `boolean` `d`(`b3.d` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lb3/d;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13d21c.  v0:= 0I;
  #L13d21e.  if v8 == 0 then goto L13d384;
  #L13d222.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d228.  v1:= temp;
  #L13d22a.  if v1 == 0 then goto L13d384;
  #L13d22e.  v1:= "." @kind object;
  #L13d232.  call temp:= `startsWith`(v8, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d238.  v2:= temp;
  #L13d23a.  if v2 != 0 then goto L13d384;
  #L13d23e.  v2:= ".." @kind object;
  #L13d242.  call temp:= `endsWith`(v8, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d248.  v3:= temp;
  #L13d24a.  if v3 == 0 then goto L13d252;
  #L13d24e.  goto L13d384;
  #L13d252.  if v9 == 0 then goto L13d384;
  #L13d256.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d25c.  v3:= temp;
  #L13d25e.  if v3 == 0 then goto L13d384;
  #L13d262.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d268.  v3:= temp;
  #L13d26a.  if v3 != 0 then goto L13d384;
  #L13d26e.  call temp:= `endsWith`(v9, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d274.  v2:= temp;
  #L13d276.  if v2 == 0 then goto L13d27e;
  #L13d27a.  goto L13d384;
  #L13d27e.  call temp:= `endsWith`(v8, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d284.  v2:= temp;
  #L13d286.  v3:= 46I;
  #L13d28a.  if v2 != 0 then goto L13d2ac;
  #L13d28e.  v2:= new `java.lang.StringBuilder`;
  #L13d292.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d298.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d29e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d2a4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d2aa.  v8:= temp @kind object;
  #L13d2ac.  call temp:= `endsWith`(v9, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d2b2.  v1:= temp;
  #L13d2b4.  if v1 != 0 then goto L13d2d6;
  #L13d2b8.  v1:= new `java.lang.StringBuilder`;
  #L13d2bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d2c2.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d2c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d2ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d2d4.  v9:= temp @kind object;
  #L13d2d6.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L13d2da.  call temp:= `toLowerCase`(v9, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L13d2e0.  v9:= temp @kind object;
  #L13d2e2.  v1:= "*" @kind object;
  #L13d2e6.  call temp:= `contains`(v9, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L13d2ec.  v1:= temp;
  #L13d2ee.  if v1 != 0 then goto L13d2fc;
  #L13d2f2.  call temp:= `equals`(v8, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13d2f8.  v8:= temp;
  #L13d2fa.  return v8;
  #L13d2fc.  v1:= "*." @kind object;
  #L13d300.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d306.  v2:= temp;
  #L13d308.  if v2 == 0 then goto L13d384;
  #L13d30c.  v2:= 42I;
  #L13d310.  v4:= 1I;
  #L13d312.  call temp:= `indexOf`(v9, v2, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L13d318.  v2:= temp;
  #L13d31a.  v5:= -1I;
  #L13d31c.  if v2 == v5 then goto L13d322;
  #L13d320.  goto L13d384;
  #L13d322.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d328.  v2:= temp;
  #L13d32a.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d330.  v6:= temp;
  #L13d332.  if v2 >= v6 then goto L13d338;
  #L13d336.  return v0;
  #L13d338.  call temp:= `equals`(v1, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13d33e.  v1:= temp;
  #L13d340.  if v1 == 0 then goto L13d346;
  #L13d344.  return v0;
  #L13d346.  call temp:= `substring`(v9, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L13d34c.  v9:= temp @kind object;
  #L13d34e.  call temp:= `endsWith`(v8, v9) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L13d354.  v1:= temp;
  #L13d356.  if v1 != 0 then goto L13d35c;
  #L13d35a.  return v0;
  #L13d35c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d362.  v1:= temp;
  #L13d364.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d36a.  v9:= temp;
  #L13d36c.  v1:= v1 - v9 @kind int;
  #L13d36e.  if v1 <= 0 then goto L13d382;
  #L13d372.  v1:= v1 - v4 @kind int;
  #L13d374.  call temp:= `lastIndexOf`(v8, v3, v1) @signature `Ljava/lang/String;.lastIndexOf:(II)I` @kind virtual;
  #L13d37a.  v8:= temp;
  #L13d37c.  if v8 == v5 then goto L13d382;
  #L13d380.  return v0;
  #L13d382.  return v4;
  #L13d384.  return v0;
}
procedure `boolean` `verify`(`b3.d` v1 @kind this, `java.lang.String` v2 @kind object, `javax.net.ssl.SSLSession` v3 @kind object) @signature `Lb3/d;.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13d1dc.  v0:= 0I;
  #L13d1de.  call temp:= `getPeerCertificates`(v3) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L13d1e4.  v3:= temp @kind object;
  #L13d1e6.  v3:= v3[v0] @kind object;
  #L13d1ea.  v3:= (`java.security.cert.X509Certificate`) v3 @kind object;
  #L13d1ee.  call temp:= `c`(v1, v2, v3) @signature `Lb3/d;.c:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind virtual;
  #L13d1f4.  v2:= temp;
  #L13d1f6.  return v2;
  #L13d1f8.  return v0;
  catch `javax.net.ssl.SSLException` @[L13d1de..L13d1f6] goto L13d1f8;
}
