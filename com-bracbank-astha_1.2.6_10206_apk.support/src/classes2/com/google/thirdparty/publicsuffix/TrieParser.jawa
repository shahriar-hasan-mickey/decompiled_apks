record `com.google.thirdparty.publicsuffix.TrieParser` @kind class @AccessFlag FINAL {
}
global `com.google.common.base.Joiner` `@@com.google.thirdparty.publicsuffix.TrieParser.PREFIX_JOINER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L308540.  v0:= "" @kind object;
  #L308544.  call temp:= `on`(v0) @signature `Lcom/google/common/base/Joiner;.on:(Ljava/lang/String;)Lcom/google/common/base/Joiner;` @kind static;
  #L30854a.  v0:= temp @kind object;
  #L30854c.  `@@com.google.thirdparty.publicsuffix.TrieParser.PREFIX_JOINER` @type ^`com.google.common.base.Joiner` := v0 @kind object;
  #L308550.  return @kind void;
}
procedure `void` `<init>`(`com.google.thirdparty.publicsuffix.TrieParser` v0 @kind this) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L308564.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30856a.  return @kind void;
}
procedure `int` `doParseTrieToBuilder`(`java.util.Deque` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `int` v10 , `com.google.common.collect.ImmutableMap$Builder` v11 @kind object) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.doParseTrieToBuilder:(Ljava/util/Deque;Ljava/lang/CharSequence;ILcom/google/common/collect/ImmutableMap$Builder;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L308438.  call temp:= `length`(v9) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L30843e.  v0:= temp;
  #L308440.  v1:= 0I;
  #L308442.  v2:= v10;
  #L308444.  v3:= 58I;
  #L308448.  v4:= 33I;
  #L30844c.  v5:= 44I;
  #L308450.  v6:= 63I;
  #L308454.  if v2 >= v0 then goto L308480;
  #L308458.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L30845e.  v1:= temp;
  #L308460.  v7:= 38I;
  #L308464.  if v1 == v7 then goto L308480;
  #L308468.  if v1 == v6 then goto L308480;
  #L30846c.  if v1 == v4 then goto L308480;
  #L308470.  if v1 == v3 then goto L308480;
  #L308474.  if v1 != v5 then goto L30847a;
  #L308478.  goto L308480;
  #L30847a.  v2:= v2 + 1;
  #L30847e.  goto L308444;
  #L308480.  call temp:= `subSequence`(v9, v10, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L308486.  v7:= temp @kind object;
  #L308488.  call temp:= `reverse`(v7) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.reverse:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L30848e.  v7:= temp @kind object;
  #L308490.  call `push`(v8, v7) @signature `Ljava/util/Deque;.push:(Ljava/lang/Object;)V` @kind interface;
  #L308496.  if v1 == v4 then goto L3084a6;
  #L30849a.  if v1 == v6 then goto L3084a6;
  #L30849e.  if v1 == v3 then goto L3084a6;
  #L3084a2.  if v1 != v5 then goto L3084cc;
  #L3084a6.  v3:= `@@com.google.thirdparty.publicsuffix.TrieParser.PREFIX_JOINER` @type ^`com.google.common.base.Joiner` @kind object;
  #L3084aa.  call temp:= `join`(v3, v8) @signature `Lcom/google/common/base/Joiner;.join:(Ljava/lang/Iterable;)Ljava/lang/String;` @kind virtual;
  #L3084b0.  v3:= temp @kind object;
  #L3084b2.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3084b8.  v4:= temp;
  #L3084ba.  if v4 <= 0 then goto L3084cc;
  #L3084be.  call temp:= `fromCode`(v1) @signature `Lcom/google/thirdparty/publicsuffix/PublicSuffixType;.fromCode:(C)Lcom/google/thirdparty/publicsuffix/PublicSuffixType;` @kind static;
  #L3084c4.  v4:= temp @kind object;
  #L3084c6.  call temp:= `put`(v11, v3, v4) @signature `Lcom/google/common/collect/ImmutableMap$Builder;.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;` @kind virtual;
  #L3084cc.  v2:= v2 + 1;
  #L3084d0.  if v1 == v6 then goto L308502;
  #L3084d4.  if v1 == v5 then goto L308502;
  #L3084d8.  if v2 >= v0 then goto L308502;
  #L3084dc.  call temp:= `doParseTrieToBuilder`(v8, v9, v2, v11) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.doParseTrieToBuilder:(Ljava/util/Deque;Ljava/lang/CharSequence;ILcom/google/common/collect/ImmutableMap$Builder;)I` @kind static;
  #L3084e2.  v1:= temp;
  #L3084e4.  v2:= v2 + v1 @kind int;
  #L3084e6.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3084ec.  v1:= temp;
  #L3084ee.  if v1 == v6 then goto L3084fe;
  #L3084f2.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3084f8.  v1:= temp;
  #L3084fa.  if v1 != v5 then goto L3084d8;
  #L3084fe.  v2:= v2 + 1;
  #L308502.  call temp:= `pop`(v8) @signature `Ljava/util/Deque;.pop:()Ljava/lang/Object;` @kind interface;
  #L308508.  v2:= v2 - v10 @kind int;
  #L30850a.  return v2;
}
procedure `com.google.common.collect.ImmutableMap` `parseTrie`(`java.lang.CharSequence` v4 @kind object) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.parseTrie:(Ljava/lang/CharSequence;)Lcom/google/common/collect/ImmutableMap;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3083f4.  call temp:= `builder`() @signature `Lcom/google/common/collect/ImmutableMap;.builder:()Lcom/google/common/collect/ImmutableMap$Builder;` @kind static;
  #L3083fa.  v0:= temp @kind object;
  #L3083fc.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L308402.  v1:= temp;
  #L308404.  v2:= 0I;
  #L308406.  if v2 >= v1 then goto L30841e;
  #L30840a.  call temp:= `newArrayDeque`() @signature `Lcom/google/common/collect/Queues;.newArrayDeque:()Ljava/util/ArrayDeque;` @kind static;
  #L308410.  v3:= temp @kind object;
  #L308412.  call temp:= `doParseTrieToBuilder`(v3, v4, v2, v0) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.doParseTrieToBuilder:(Ljava/util/Deque;Ljava/lang/CharSequence;ILcom/google/common/collect/ImmutableMap$Builder;)I` @kind static;
  #L308418.  v3:= temp;
  #L30841a.  v2:= v2 + v3 @kind int;
  #L30841c.  goto L308406;
  #L30841e.  call temp:= `buildOrThrow`(v0) @signature `Lcom/google/common/collect/ImmutableMap$Builder;.buildOrThrow:()Lcom/google/common/collect/ImmutableMap;` @kind virtual;
  #L308424.  v4:= temp @kind object;
  #L308426.  return v4 @kind object;
}
procedure `java.lang.CharSequence` `reverse`(`java.lang.CharSequence` v1 @kind object) @signature `Lcom/google/thirdparty/publicsuffix/TrieParser;.reverse:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L30851c.  v0:= new `java.lang.StringBuilder`;
  #L308520.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/CharSequence;)V` @kind direct;
  #L308526.  call temp:= `reverse`(v0) @signature `Ljava/lang/StringBuilder;.reverse:()Ljava/lang/StringBuilder;` @kind virtual;
  #L30852c.  v1:= temp @kind object;
  #L30852e.  return v1 @kind object;
}
