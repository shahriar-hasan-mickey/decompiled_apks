record `x1.a$b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `x1.a$b.a` @AccessFlag ;
  `java.lang.String` `x1.a$b.b` @AccessFlag ;
  `int` `x1.a$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`x1.a$b` v1 @kind this) @signature `Lx1/a$b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L406528.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40652e.  v0:= -1I;
  #L406530.  v1.`x1.a$b.c` @type ^`int` := v0;
  #L406534.  return @kind void;
}
procedure `java.lang.String` `b`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lx1/a$b;.b:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4061a4.  v0:= 0I;
  #L4061a6.  call temp:= `d`(v1, v2, v3, v0) @signature `Lx1/a;.d:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L4061ac.  v1:= temp @kind object;
  #L4061ae.  v2:= "[" @kind object;
  #L4061b2.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4061b8.  v2:= temp;
  #L4061ba.  if v2 == 0 then goto L406212;
  #L4061be.  v2:= "]" @kind object;
  #L4061c2.  call temp:= `endsWith`(v1, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4061c8.  v2:= temp;
  #L4061ca.  if v2 == 0 then goto L406212;
  #L4061ce.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4061d4.  v2:= temp;
  #L4061d6.  v3:= 1I;
  #L4061d8.  v2:= v2 - v3 @kind int;
  #L4061da.  call temp:= `e`(v1, v3, v2) @signature `Lx1/a$b;.e:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L4061e0.  v1:= temp @kind object;
  #L4061e2.  if v1 != 0 then goto L4061ea;
  #L4061e6.  v1:= 0I;
  #L4061e8.  return v1 @kind object;
  #L4061ea.  call temp:= `getAddress`(v1) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L4061f0.  v1:= temp @kind object;
  #L4061f2.  v2:= length @variable v1;
  #L4061f4.  v3:= 16I;
  #L4061f8.  if v2 != v3 then goto L406206;
  #L4061fc.  call temp:= `i`(v1) @signature `Lx1/a$b;.i:([B)Ljava/lang/String;` @kind static;
  #L406202.  v1:= temp @kind object;
  #L406204.  return v1 @kind object;
  #L406206.  v1:= new `java.lang.AssertionError`;
  #L40620a.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L406210.  throw v1;
  #L406212.  call temp:= `f`(v1) @signature `Lx1/a$b;.f:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L406218.  v1:= temp @kind object;
  #L40621a.  return v1 @kind object;
}
procedure `boolean` `c`(`java.lang.String` v5 @kind object) @signature `Lx1/a$b;.c:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L406074.  v0:= 0I;
  #L406076.  v1:= 0I;
  #L406078.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L40607e.  v2:= temp;
  #L406080.  if v1 >= v2 then goto L4060bc;
  #L406084.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L40608a.  v2:= temp;
  #L40608c.  v3:= 31I;
  #L406090.  v4:= 1I;
  #L406092.  if v2 <= v3 then goto L4060ba;
  #L406096.  v3:= 127I;
  #L40609a.  if v2 < v3 then goto L4060a0;
  #L40609e.  goto L4060ba;
  #L4060a0.  v3:= " #%/:?@[\\]" @kind object;
  #L4060a4.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4060aa.  v2:= temp;
  #L4060ac.  v3:= -1I;
  #L4060ae.  if v2 == v3 then goto L4060b4;
  #L4060b2.  return v4;
  #L4060b4.  v1:= v1 + 1;
  #L4060b8.  goto L406078;
  #L4060ba.  return v4;
  #L4060bc.  return v0;
}
procedure `boolean` `d`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lx1/a$b;.d:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4060d0.  v0:= v11;
  #L4060d2.  v1:= 0I;
  #L4060d4.  if v8 >= v9 then goto L406158;
  #L4060d8.  v2:= length @variable v10;
  #L4060da.  if v0 != v2 then goto L4060e0;
  #L4060de.  return v1;
  #L4060e0.  if v0 == v11 then goto L4060fa;
  #L4060e4.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4060ea.  v2:= temp;
  #L4060ec.  v3:= 46I;
  #L4060f0.  if v2 == v3 then goto L4060f6;
  #L4060f4.  return v1;
  #L4060f6.  v8:= v8 + 1;
  #L4060fa.  v2:= v8;
  #L4060fc.  v3:= 0I;
  #L4060fe.  if v2 >= v9 then goto L40613e;
  #L406102.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L406108.  v4:= temp;
  #L40610a.  v5:= 48I;
  #L40610e.  if v4 < v5 then goto L40613e;
  #L406112.  v6:= 57I;
  #L406116.  if v4 <= v6 then goto L40611c;
  #L40611a.  goto L40613e;
  #L40611c.  if v3 != 0 then goto L406126;
  #L406120.  if v8 == v2 then goto L406126;
  #L406124.  return v1;
  #L406126.  v3:= v3 * 10;
  #L40612a.  v3:= v3 + v4 @kind int;
  #L40612c.  v3:= v3 - v5 @kind int;
  #L40612e.  v4:= 255I;
  #L406132.  if v3 <= v4 then goto L406138;
  #L406136.  return v1;
  #L406138.  v2:= v2 + 1;
  #L40613c.  goto L4060fe;
  #L40613e.  v8:= v2 - v8 @kind int;
  #L406142.  if v8 != 0 then goto L406148;
  #L406146.  return v1;
  #L406148.  v8:= v0 + 1;
  #L40614c.  v1:= (`byte`) v3 @kind i2b;
  #L40614e.  v10[v0]:= v1 @kind byte;
  #L406152.  v0:= v8;
  #L406154.  v8:= v2;
  #L406156.  goto L4060d2;
  #L406158.  v11:= v11 + 4;
  #L40615c.  if v0 == v11 then goto L406162;
  #L406160.  return v1;
  #L406162.  v7:= 1I;
  #L406164.  return v7;
}
procedure `java.net.InetAddress` `e`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lx1/a$b;.e:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4063dc.  v0:= 16I;
  #L4063e0.  v1:= new `byte`[v0];
  #L4063e4.  v2:= -1I;
  #L4063e6.  v3:= 0I;
  #L4063e8.  v4:= 0I;
  #L4063ea.  v5:= -1I;
  #L4063ec.  v6:= -1I;
  #L4063ee.  v7:= 0I;
  #L4063f0.  if v12 >= v13 then goto L4064d0;
  #L4063f4.  if v4 != v0 then goto L4063fa;
  #L4063f8.  return v7 @kind object;
  #L4063fa.  v8:= v12 + 2;
  #L4063fe.  if v8 > v13 then goto L40642a;
  #L406402.  v9:= "::" @kind object;
  #L406406.  v10:= 2I;
  #L406408.  call temp:= `regionMatches`(v11, v12, v9, v3, v10) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L40640e.  v9:= temp;
  #L406410.  if v9 == 0 then goto L40642a;
  #L406414.  if v5 == v2 then goto L40641a;
  #L406418.  return v7 @kind object;
  #L40641a.  v4:= v4 + 2;
  #L40641e.  v5:= v4;
  #L406420.  if v8 != v13 then goto L406426;
  #L406424.  goto L4064d0;
  #L406426.  v6:= v8;
  #L406428.  goto L406472;
  #L40642a.  if v4 == 0 then goto L406470;
  #L40642e.  v8:= ":" @kind object;
  #L406432.  v9:= 1I;
  #L406434.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L40643a.  v8:= temp;
  #L40643c.  if v8 == 0 then goto L406446;
  #L406440.  v12:= v12 + 1;
  #L406444.  goto L406470;
  #L406446.  v8:= "." @kind object;
  #L40644a.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L406450.  v12:= temp;
  #L406452.  if v12 == 0 then goto L40646e;
  #L406456.  v12:= v4 + -2;
  #L40645a.  call temp:= `d`(v11, v6, v13, v1, v12) @signature `Lx1/a$b;.d:(Ljava/lang/String;II[BI)Z` @kind static;
  #L406460.  v11:= temp;
  #L406462.  if v11 != 0 then goto L406468;
  #L406466.  return v7 @kind object;
  #L406468.  v4:= v4 + 2;
  #L40646c.  goto L4064d0;
  #L40646e.  return v7 @kind object;
  #L406470.  v6:= v12;
  #L406472.  v12:= v6;
  #L406474.  v8:= 0I;
  #L406476.  if v12 >= v13 then goto L40649c;
  #L40647a.  call temp:= `charAt`(v11, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L406480.  v9:= temp;
  #L406482.  call temp:= `a`(v9) @signature `Lx1/a;.a:(C)I` @kind static;
  #L406488.  v9:= temp;
  #L40648a.  if v9 != v2 then goto L406490;
  #L40648e.  goto L40649c;
  #L406490.  v8:= v8 ^< 4;
  #L406494.  v8:= v8 + v9 @kind int;
  #L406496.  v12:= v12 + 1;
  #L40649a.  goto L406476;
  #L40649c.  v9:= v12 - v6 @kind int;
  #L4064a0.  if v9 == 0 then goto L4064ce;
  #L4064a4.  v10:= 4I;
  #L4064a6.  if v9 <= v10 then goto L4064ac;
  #L4064aa.  goto L4064ce;
  #L4064ac.  v7:= v4 + 1;
  #L4064b0.  v9:= v8 ^>> 8;
  #L4064b4.  v9:= v9 ^& 255;
  #L4064b8.  v9:= (`byte`) v9 @kind i2b;
  #L4064ba.  v1[v4]:= v9 @kind byte;
  #L4064be.  v4:= v7 + 1;
  #L4064c2.  v8:= v8 ^& 255;
  #L4064c6.  v8:= (`byte`) v8 @kind i2b;
  #L4064c8.  v1[v7]:= v8 @kind byte;
  #L4064cc.  goto L4063ee;
  #L4064ce.  return v7 @kind object;
  #L4064d0.  if v4 == v0 then goto L4064f2;
  #L4064d4.  if v5 != v2 then goto L4064da;
  #L4064d8.  return v7 @kind object;
  #L4064da.  v11:= v4 - v5 @kind int;
  #L4064de.  v12:= v11 - 16;
  #L4064e2.  call `arraycopy`(v1, v5, v1, v12, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4064e8.  v0:= v0 - v4 @kind int;
  #L4064ea.  v0:= v0 + v5 @kind int;
  #L4064ec.  call `fill`(v1, v5, v0, v3) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L4064f2.  call temp:= `getByAddress`(v1) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L4064f8.  v11:= temp @kind object;
  #L4064fa.  return v11 @kind object;
  #L4064fc.  v11:= new `java.lang.AssertionError`;
  #L406500.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L406506.  throw v11;
  catch `java.net.UnknownHostException` @[L4064f2..L4064fa] goto L4064fc;
}
procedure `java.lang.String` `f`(`java.lang.String` v2 @kind object) @signature `Lx1/a$b;.f:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L40622c.  v0:= 0I;
  #L40622e.  call temp:= `toASCII`(v2) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L406234.  v2:= temp @kind object;
  #L406236.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L40623a.  call temp:= `toLowerCase`(v2, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L406240.  v2:= temp @kind object;
  #L406242.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L406248.  v1:= temp;
  #L40624a.  if v1 == 0 then goto L406250;
  #L40624e.  return v0 @kind object;
  #L406250.  call temp:= `c`(v2) @signature `Lx1/a$b;.c:(Ljava/lang/String;)Z` @kind static;
  #L406256.  v1:= temp;
  #L406258.  if v1 == 0 then goto L40625e;
  #L40625c.  return v0 @kind object;
  #L40625e.  return v2 @kind object;
  #L406260.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L40622e..L406258] goto L406260;
}
procedure `java.lang.String` `i`(`byte`[] v8 @kind object) @signature `Lx1/a$b;.i:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L406284.  v0:= 0I;
  #L406286.  v1:= -1I;
  #L406288.  v2:= 0I;
  #L40628a.  v3:= 0I;
  #L40628c.  v4:= length @variable v8;
  #L40628e.  v5:= 16I;
  #L406292.  if v2 >= v4 then goto L4062c8;
  #L406296.  v4:= v2;
  #L406298.  if v4 >= v5 then goto L4062b6;
  #L40629c.  v6:= v8[v4] @kind byte;
  #L4062a0.  if v6 != 0 then goto L4062b6;
  #L4062a4.  v6:= v4 + 1;
  #L4062a8.  v6:= v8[v6] @kind byte;
  #L4062ac.  if v6 != 0 then goto L4062b6;
  #L4062b0.  v4:= v4 + 2;
  #L4062b4.  goto L406298;
  #L4062b6.  v5:= v4 - v2 @kind int;
  #L4062ba.  if v5 <= v3 then goto L4062c2;
  #L4062be.  v1:= v2;
  #L4062c0.  v3:= v5;
  #L4062c2.  v2:= v4 + 2;
  #L4062c6.  goto L40628c;
  #L4062c8.  v2:= new `okio.c`;
  #L4062cc.  call `<init>`(v2) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L4062d2.  v4:= length @variable v8;
  #L4062d4.  if v0 >= v4 then goto L406326;
  #L4062d8.  v4:= 58I;
  #L4062dc.  if v0 != v1 then goto L4062f4;
  #L4062e0.  call temp:= `o0`(v2, v4) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L4062e6.  v0:= v0 + v3 @kind int;
  #L4062e8.  if v0 != v5 then goto L4062d2;
  #L4062ec.  call temp:= `o0`(v2, v4) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L4062f2.  goto L4062d2;
  #L4062f4.  if v0 <= 0 then goto L4062fe;
  #L4062f8.  call temp:= `o0`(v2, v4) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L4062fe.  v4:= v8[v0] @kind byte;
  #L406302.  v4:= v4 ^& 255;
  #L406306.  v4:= v4 ^< 8;
  #L40630a.  v6:= v0 + 1;
  #L40630e.  v6:= v8[v6] @kind byte;
  #L406312.  v6:= v6 ^& 255;
  #L406316.  v4:= v4 ^| v6 @kind int;
  #L406318.  v6:= (`long`) v4 @kind i2l;
  #L40631a.  call temp:= `p0`(v2, v6) @signature `Lokio/c;.p0:(J)Lokio/c;` @kind virtual;
  #L406320.  v0:= v0 + 2;
  #L406324.  goto L4062d2;
  #L406326.  call temp:= `d0`(v2) @signature `Lokio/c;.d0:()Ljava/lang/String;` @kind virtual;
  #L40632c.  v8:= temp @kind object;
  #L40632e.  return v8 @kind object;
}
procedure `x1.a` `a`(`x1.a$b` v2 @kind this) @signature `Lx1/a$b;.a:()Lx1/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406548.  v0:= v2.`x1.a$b.a` @type ^`java.lang.String` @kind object;
  #L40654c.  if v0 == 0 then goto L406576;
  #L406550.  v0:= v2.`x1.a$b.b` @type ^`java.lang.String` @kind object;
  #L406554.  if v0 == 0 then goto L406566;
  #L406558.  v0:= new `x1.a`;
  #L40655c.  v1:= 0I;
  #L40655e.  call `<init>`(v0, v2, v1) @signature `Lx1/a;.<init>:(Lx1/a$b;Lx1/a$a;)V` @kind direct;
  #L406564.  return v0 @kind object;
  #L406566.  v0:= new `java.lang.IllegalStateException`;
  #L40656a.  v1:= "host == null" @kind object;
  #L40656e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406574.  throw v0;
  #L406576.  v0:= new `java.lang.IllegalStateException`;
  #L40657a.  v1:= "scheme == null" @kind object;
  #L40657e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406584.  throw v0;
}
procedure `int` `g`(`x1.a$b` v2 @kind this) @signature `Lx1/a$b;.g:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L406178.  v0:= v2.`x1.a$b.c` @type ^`int`;
  #L40617c.  v1:= -1I;
  #L40617e.  if v0 == v1 then goto L406184;
  #L406182.  goto L406190;
  #L406184.  v0:= v2.`x1.a$b.a` @type ^`java.lang.String` @kind object;
  #L406188.  call temp:= `b`(v0) @signature `Lx1/a;.b:(Ljava/lang/String;)I` @kind static;
  #L40618e.  v0:= temp;
  #L406190.  return v0;
}
procedure `x1.a$b` `h`(`x1.a$b` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lx1/a$b;.h:(Ljava/lang/String;)Lx1/a$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L406598.  if v4 == 0 then goto L4065e6;
  #L40659c.  v0:= 0I;
  #L40659e.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4065a4.  v1:= temp;
  #L4065a6.  call temp:= `b`(v4, v0, v1) @signature `Lx1/a$b;.b:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L4065ac.  v0:= temp @kind object;
  #L4065ae.  if v0 == 0 then goto L4065b8;
  #L4065b2.  v3.`x1.a$b.b` @type ^`java.lang.String` := v0 @kind object;
  #L4065b6.  return v3 @kind object;
  #L4065b8.  v0:= new `java.lang.IllegalArgumentException`;
  #L4065bc.  v1:= new `java.lang.StringBuilder`;
  #L4065c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4065c6.  v2:= "unexpected host: " @kind object;
  #L4065ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4065d0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4065d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4065dc.  v4:= temp @kind object;
  #L4065de.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4065e4.  throw v0;
  #L4065e6.  v4:= new `java.lang.IllegalArgumentException`;
  #L4065ea.  v0:= "host == null" @kind object;
  #L4065ee.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4065f4.  throw v4;
}
procedure `x1.a$b` `j`(`x1.a$b` v3 @kind this, `int` v4 ) @signature `Lx1/a$b;.j:(I)Lx1/a$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L406608.  if v4 <= 0 then goto L40661c;
  #L40660c.  v0:= 65535I;
  #L406612.  if v4 > v0 then goto L40661c;
  #L406616.  v3.`x1.a$b.c` @type ^`int` := v4;
  #L40661a.  return v3 @kind object;
  #L40661c.  v0:= new `java.lang.IllegalArgumentException`;
  #L406620.  v1:= new `java.lang.StringBuilder`;
  #L406624.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40662a.  v2:= "unexpected port: " @kind object;
  #L40662e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L406634.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L40663a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L406640.  v4:= temp @kind object;
  #L406642.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406648.  throw v0;
}
procedure `x1.a$b` `k`(`x1.a$b` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lx1/a$b;.k:(Ljava/lang/String;)Lx1/a$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40665c.  if v4 == 0 then goto L4066ba;
  #L406660.  v0:= "http" @kind object;
  #L406664.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L40666a.  v1:= temp;
  #L40666c.  if v1 == 0 then goto L406676;
  #L406670.  v3.`x1.a$b.a` @type ^`java.lang.String` := v0 @kind object;
  #L406674.  goto L40668a;
  #L406676.  v0:= "https" @kind object;
  #L40667a.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L406680.  v1:= temp;
  #L406682.  if v1 == 0 then goto L40668c;
  #L406686.  v3.`x1.a$b.a` @type ^`java.lang.String` := v0 @kind object;
  #L40668a.  return v3 @kind object;
  #L40668c.  v0:= new `java.lang.IllegalArgumentException`;
  #L406690.  v1:= new `java.lang.StringBuilder`;
  #L406694.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40669a.  v2:= "unexpected scheme: " @kind object;
  #L40669e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4066a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4066aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4066b0.  v4:= temp @kind object;
  #L4066b2.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4066b8.  throw v0;
  #L4066ba.  v4:= new `java.lang.IllegalArgumentException`;
  #L4066be.  v0:= "scheme == null" @kind object;
  #L4066c2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4066c8.  throw v4;
}
procedure `java.lang.String` `toString`(`x1.a$b` v4 @kind this) @signature `Lx1/a$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L406340.  v0:= new `java.lang.StringBuilder`;
  #L406344.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40634a.  v1:= v4.`x1.a$b.a` @type ^`java.lang.String` @kind object;
  #L40634e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L406354.  v1:= "://" @kind object;
  #L406358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40635e.  v1:= v4.`x1.a$b.b` @type ^`java.lang.String` @kind object;
  #L406362.  v2:= 58I;
  #L406366.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L40636c.  v1:= temp;
  #L40636e.  v3:= -1I;
  #L406370.  if v1 == v3 then goto L406394;
  #L406374.  v1:= 91I;
  #L406378.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L40637e.  v1:= v4.`x1.a$b.b` @type ^`java.lang.String` @kind object;
  #L406382.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L406388.  v1:= 93I;
  #L40638c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L406392.  goto L40639e;
  #L406394.  v1:= v4.`x1.a$b.b` @type ^`java.lang.String` @kind object;
  #L406398.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40639e.  call temp:= `g`(v4) @signature `Lx1/a$b;.g:()I` @kind virtual;
  #L4063a4.  v1:= temp;
  #L4063a6.  v3:= v4.`x1.a$b.a` @type ^`java.lang.String` @kind object;
  #L4063aa.  call temp:= `b`(v3) @signature `Lx1/a;.b:(Ljava/lang/String;)I` @kind static;
  #L4063b0.  v3:= temp;
  #L4063b2.  if v1 == v3 then goto L4063c2;
  #L4063b6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4063bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4063c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4063c8.  v0:= temp @kind object;
  #L4063ca.  return v0 @kind object;
}
