record `m0.b` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lm0/b;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a032c.  v0:= v7 + v9 @kind long;
  #L3a0330.  v9:= v9 ^~ v7 @kind long;
  #L3a0332.  v2:= 1I;
  #L3a0334.  v3:= 0I;
  #L3a0336.  v4:= 0L;
  #L3a033a.  v6:= lcmp(v9, v4);
  #L3a033e.  if v6 >= 0 then goto L3a0346;
  #L3a0342.  v9:= 1I;
  #L3a0344.  goto L3a0348;
  #L3a0346.  v9:= 0I;
  #L3a0348.  v7:= v7 ^~ v0 @kind long;
  #L3a034a.  v10:= lcmp(v7, v4);
  #L3a034e.  if v10 < 0 then goto L3a0354;
  #L3a0352.  goto L3a0356;
  #L3a0354.  v2:= 0I;
  #L3a0356.  v7:= v9 ^| v2 @kind int;
  #L3a035a.  if v7 == 0 then goto L3a0360;
  #L3a035e.  return v0 @kind wide;
  #L3a0360.  v7:= new `java.lang.ArithmeticException`;
  #L3a0364.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L3a036a.  throw v7;
}
