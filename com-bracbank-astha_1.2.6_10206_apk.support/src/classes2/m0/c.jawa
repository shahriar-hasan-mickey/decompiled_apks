record `m0.c` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lm0/c;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a037c.  v0:= v7 - v9 @kind long;
  #L3a0380.  v9:= v9 ^~ v7 @kind long;
  #L3a0382.  v2:= 1I;
  #L3a0384.  v3:= 0I;
  #L3a0386.  v4:= 0L;
  #L3a038a.  v6:= lcmp(v9, v4);
  #L3a038e.  if v6 < 0 then goto L3a0396;
  #L3a0392.  v9:= 1I;
  #L3a0394.  goto L3a0398;
  #L3a0396.  v9:= 0I;
  #L3a0398.  v7:= v7 ^~ v0 @kind long;
  #L3a039a.  v10:= lcmp(v7, v4);
  #L3a039e.  if v10 < 0 then goto L3a03a4;
  #L3a03a2.  goto L3a03a6;
  #L3a03a4.  v2:= 0I;
  #L3a03a6.  v7:= v9 ^| v2 @kind int;
  #L3a03aa.  if v7 == 0 then goto L3a03b0;
  #L3a03ae.  return v0 @kind wide;
  #L3a03b0.  v7:= new `java.lang.ArithmeticException`;
  #L3a03b4.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L3a03ba.  throw v7;
}
