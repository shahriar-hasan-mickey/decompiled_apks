record `io.reactivex.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.lang.Throwable` `io.reactivex.exceptions.CompositeException.cause` @AccessFlag PRIVATE;
  `java.util.List` `io.reactivex.exceptions.CompositeException.exceptions` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.exceptions.CompositeException.message` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L38ea30.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L38ea36.  v0:= new `java.util.LinkedHashSet`;
  #L38ea3a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L38ea40.  v1:= new `java.util.ArrayList`;
  #L38ea44.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L38ea4a.  if v5 == 0 then goto L38eaac;
  #L38ea4e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L38ea54.  v5:= temp @kind object;
  #L38ea56.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L38ea5c.  v2:= temp;
  #L38ea5e.  if v2 == 0 then goto L38eac0;
  #L38ea62.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L38ea68.  v2:= temp @kind object;
  #L38ea6a.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L38ea6e.  v3:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L38ea72.  if v3 == 0 then goto L38ea8a;
  #L38ea76.  v2:= (`io.reactivex.exceptions.CompositeException`) v2 @kind object;
  #L38ea7a.  call temp:= `b`(v2) @signature `Lio/reactivex/exceptions/CompositeException;.b:()Ljava/util/List;` @kind virtual;
  #L38ea80.  v2:= temp @kind object;
  #L38ea82.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L38ea88.  goto L38ea56;
  #L38ea8a.  if v2 == 0 then goto L38ea96;
  #L38ea8e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38ea94.  goto L38ea56;
  #L38ea96.  v2:= new `java.lang.NullPointerException`;
  #L38ea9a.  v3:= "Throwable was null!" @kind object;
  #L38ea9e.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38eaa4.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38eaaa.  goto L38ea56;
  #L38eaac.  v5:= new `java.lang.NullPointerException`;
  #L38eab0.  v2:= "errors was null" @kind object;
  #L38eab4.  call `<init>`(v5, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38eaba.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38eac0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L38eac6.  v5:= temp;
  #L38eac8.  if v5 != 0 then goto L38eb0e;
  #L38eacc.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L38ead2.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L38ead8.  v5:= temp @kind object;
  #L38eada.  v4.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` := v5 @kind object;
  #L38eade.  v0:= new `java.lang.StringBuilder`;
  #L38eae2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L38eae8.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L38eaee.  v5:= temp;
  #L38eaf0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eaf6.  v5:= " exceptions occurred. " @kind object;
  #L38eafa.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eb00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L38eb06.  v5:= temp @kind object;
  #L38eb08.  v4.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` := v5 @kind object;
  #L38eb0c.  return @kind void;
  #L38eb0e.  v5:= new `java.lang.IllegalArgumentException`;
  #L38eb12.  v0:= "errors is empty" @kind object;
  #L38eb16.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38eb1c.  throw v5;
}
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L38eb30.  if v2 != 0 then goto L38eb4c;
  #L38eb34.  v2:= new `java.lang.NullPointerException`;
  #L38eb38.  v0:= "exceptions was null" @kind object;
  #L38eb3c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38eb42.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L38eb48.  v2:= temp @kind object;
  #L38eb4a.  goto L38eb54;
  #L38eb4c.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L38eb52.  v2:= temp @kind object;
  #L38eb54.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L38eb5a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L38eb6c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eb72.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eb78.  v8:= 10I;
  #L38eb7c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eb82.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L38eb88.  v0:= temp @kind object;
  #L38eb8a.  v1:= length @variable v0;
  #L38eb8c.  v2:= 0I;
  #L38eb8e.  if v2 >= v1 then goto L38ebb2;
  #L38eb92.  v3:= v0[v2] @kind object;
  #L38eb96.  v4:= "\t\tat " @kind object;
  #L38eb9a.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eba0.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38eba6.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ebac.  v2:= v2 + 1;
  #L38ebb0.  goto L38eb8e;
  #L38ebb2.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38ebb8.  v8:= temp @kind object;
  #L38ebba.  if v8 == 0 then goto L38ebda;
  #L38ebbe.  v8:= "\tCaused by: " @kind object;
  #L38ebc2.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ebc8.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38ebce.  v7:= temp @kind object;
  #L38ebd0.  v8:= "" @kind object;
  #L38ebd4.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L38ebda.  return @kind void;
}
procedure `java.util.List` `c`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L38e9e4.  v0:= new `java.util.ArrayList`;
  #L38e9e8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L38e9ee.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38e9f4.  v1:= temp @kind object;
  #L38e9f6.  if v1 == 0 then goto L38ea1c;
  #L38e9fa.  if v1 != v3 then goto L38ea00;
  #L38e9fe.  goto L38ea1c;
  #L38ea00.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38ea06.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38ea0c.  v3:= temp @kind object;
  #L38ea0e.  if v3 == 0 then goto L38ea1c;
  #L38ea12.  if v3 != v1 then goto L38ea18;
  #L38ea16.  goto L38ea1c;
  #L38ea18.  v1:= v3 @kind object;
  #L38ea1a.  goto L38ea00;
  #L38ea1c.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.exceptions.CompositeException` v7 @kind this, `io.reactivex.exceptions.CompositeException$a` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.e:(Lio/reactivex/exceptions/CompositeException$a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L38ec08.  v0:= new `java.lang.StringBuilder`;
  #L38ec0c.  v1:= 128I;
  #L38ec10.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L38ec16.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec1c.  v1:= 10I;
  #L38ec20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec26.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L38ec2c.  v2:= temp @kind object;
  #L38ec2e.  v3:= length @variable v2;
  #L38ec30.  v4:= 0I;
  #L38ec32.  if v4 >= v3 then goto L38ec56;
  #L38ec36.  v5:= v2[v4] @kind object;
  #L38ec3a.  v6:= "\tat " @kind object;
  #L38ec3e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec44.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec50.  v4:= v4 + 1;
  #L38ec54.  goto L38ec32;
  #L38ec56.  v1:= v7.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L38ec5a.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L38ec60.  v1:= temp @kind object;
  #L38ec62.  v2:= 1I;
  #L38ec64.  v3:= 1I;
  #L38ec66.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L38ec6c.  v4:= temp;
  #L38ec6e.  if v4 == 0 then goto L38eca6;
  #L38ec72.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L38ec78.  v4:= temp @kind object;
  #L38ec7a.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L38ec7e.  v5:= "  ComposedException " @kind object;
  #L38ec82.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec88.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec8e.  v5:= " :\n" @kind object;
  #L38ec92.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38ec98.  v5:= "\t" @kind object;
  #L38ec9c.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L38eca2.  v3:= v3 + v2 @kind int;
  #L38eca4.  goto L38ec66;
  #L38eca6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L38ecac.  v0:= temp @kind object;
  #L38ecae.  call `a`(v8, v0) @signature `Lio/reactivex/exceptions/CompositeException$a;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L38ecb4.  return @kind void;
}
procedure `java.util.List` `b`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38e9cc.  v0:= v1.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L38e9d0.  return v0 @kind object;
}
procedure `java.lang.Throwable` `d`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L38e98c.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38e992.  v0:= temp @kind object;
  #L38e994.  if v0 == 0 then goto L38e9ba;
  #L38e998.  v1:= v2.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L38e99c.  if v1 != v0 then goto L38e9a2;
  #L38e9a0.  goto L38e9ba;
  #L38e9a2.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L38e9a8.  v3:= temp @kind object;
  #L38e9aa.  if v3 == 0 then goto L38e9b8;
  #L38e9ae.  if v3 != v0 then goto L38e9b4;
  #L38e9b2.  goto L38e9b8;
  #L38e9b4.  v0:= v3 @kind object;
  #L38e9b6.  goto L38e9a2;
  #L38e9b8.  return v0 @kind object;
  #L38e9ba.  return v3 @kind object;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.exceptions.CompositeException` v8 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L38e894.  @monitorenter v8
  #L38e896.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L38e89a.  if v0 != 0 then goto L38e94c;
  #L38e89e.  v0:= new `io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain`;
  #L38e8a2.  call `<init>`(v0) @signature `Lio/reactivex/exceptions/CompositeException$CompositeExceptionCausalChain;.<init>:()V` @kind direct;
  #L38e8a8.  v1:= new `java.util.HashSet`;
  #L38e8ac.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L38e8b2.  v2:= v8.`io.reactivex.exceptions.CompositeException.exceptions` @type ^`java.util.List` @kind object;
  #L38e8b6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L38e8bc.  v2:= temp @kind object;
  #L38e8be.  v3:= v0 @kind object;
  #L38e8c0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L38e8c6.  v4:= temp;
  #L38e8c8.  if v4 == 0 then goto L38e948;
  #L38e8cc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L38e8d2.  v4:= temp @kind object;
  #L38e8d4.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L38e8d8.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L38e8de.  v5:= temp;
  #L38e8e0.  if v5 == 0 then goto L38e8e6;
  #L38e8e4.  goto L38e8c0;
  #L38e8e6.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38e8ec.  call temp:= `c`(v8, v4) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L38e8f2.  v5:= temp @kind object;
  #L38e8f4.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L38e8fa.  v5:= temp @kind object;
  #L38e8fc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L38e902.  v6:= temp;
  #L38e904.  if v6 == 0 then goto L38e938;
  #L38e908.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L38e90e.  v6:= temp @kind object;
  #L38e910.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L38e914.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L38e91a.  v7:= temp;
  #L38e91c.  if v7 == 0 then goto L38e930;
  #L38e920.  v4:= new `java.lang.RuntimeException`;
  #L38e924.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L38e928.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38e92e.  goto L38e8fc;
  #L38e930.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38e936.  goto L38e8fc;
  #L38e938.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L38e93e.  call temp:= `d`(v8, v3) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L38e944.  v3:= temp @kind object;
  #L38e946.  goto L38e8c0;
  #L38e948.  v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L38e94c.  v0:= v8.`io.reactivex.exceptions.CompositeException.cause` @type ^`java.lang.Throwable` @kind object;
  #L38e950.  @monitorexit v8
  #L38e952.  return v0 @kind object;
  #L38e954.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L38e956.  @monitorexit v8
  #L38e958.  throw v0;
  catch `java.lang.Throwable` @[L38e896..L38e936] goto L38e954;
  catch `java.lang.Throwable` @[L38e938..L38e93e] goto L38e93e;
  catch `java.lang.Throwable` @[L38e93e..L38e950] goto L38e954;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38e87c.  v0:= v1.`io.reactivex.exceptions.CompositeException.message` @type ^`java.lang.String` @kind object;
  #L38e880.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38ebec.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L38ebf0.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L38ebf6.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38ecc8.  v0:= new `io.reactivex.exceptions.CompositeException$b`;
  #L38eccc.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$b;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L38ecd2.  call `e`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.e:(Lio/reactivex/exceptions/CompositeException$a;)V` @kind direct;
  #L38ecd8.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38ecec.  v0:= new `io.reactivex.exceptions.CompositeException$c`;
  #L38ecf0.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L38ecf6.  call `e`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.e:(Lio/reactivex/exceptions/CompositeException$a;)V` @kind direct;
  #L38ecfc.  return @kind void;
}
