record `io.reactivex.internal.util.e` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.internal.util.e.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.e.b` @AccessFlag ;
  `int` `io.reactivex.internal.util.e.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.e.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.internal.util.e.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.e` v2 @kind this) @signature `Lio/reactivex/internal/util/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39f3d4.  v0:= 16I;
  #L39f3d8.  v1:= 0.75F;
  #L39f3dc.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/util/e;.<init>:(IF)V` @kind direct;
  #L39f3e2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.e` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/internal/util/e;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39f3f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39f3fa.  v1.`io.reactivex.internal.util.e.a` @type ^`float` := v3;
  #L39f3fe.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/f;.a:(I)I` @kind static;
  #L39f404.  v2:= temp;
  #L39f406.  v0:= v2 + -1;
  #L39f40a.  v1.`io.reactivex.internal.util.e.b` @type ^`int` := v0;
  #L39f40e.  v0:= (`float`) v2 @kind i2f;
  #L39f410.  v3:= v3 * v0 @kind float;
  #L39f414.  v3:= (`int`) v3 @kind f2i;
  #L39f416.  v1.`io.reactivex.internal.util.e.d` @type ^`int` := v3;
  #L39f41a.  v2:= new `java.lang.Object`[v2];
  #L39f41e.  v1.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L39f422.  return @kind void;
}
procedure `int` `c`(`int` v1 ) @signature `Lio/reactivex/internal/util/e;.c:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L39f398.  v0:= -1640531527I;
  #L39f39e.  v1:= v1 * v0 @kind int;
  #L39f3a2.  v0:= v1 ^>> 16;
  #L39f3a6.  v1:= v1 ^~ v0 @kind int;
  #L39f3a8.  return v1;
}
procedure `boolean` `a`(`io.reactivex.internal.util.e` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/util/e;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39f23c.  v0:= v6.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] @kind object;
  #L39f240.  v1:= v6.`io.reactivex.internal.util.e.b` @type ^`int`;
  #L39f244.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L39f24a.  v2:= temp;
  #L39f24c.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/util/e;.c:(I)I` @kind static;
  #L39f252.  v2:= temp;
  #L39f254.  v2:= v2 ^& v1 @kind int;
  #L39f256.  v3:= v0[v2] @kind object;
  #L39f25a.  v4:= 1I;
  #L39f25c.  if v3 == 0 then goto L39f28c;
  #L39f260.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39f266.  v3:= temp;
  #L39f268.  v5:= 0I;
  #L39f26a.  if v3 == 0 then goto L39f270;
  #L39f26e.  return v5;
  #L39f270.  v2:= v2 + v4 @kind int;
  #L39f272.  v2:= v2 ^& v1 @kind int;
  #L39f274.  v3:= v0[v2] @kind object;
  #L39f278.  if v3 != 0 then goto L39f27e;
  #L39f27c.  goto L39f28c;
  #L39f27e.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39f284.  v3:= temp;
  #L39f286.  if v3 == 0 then goto L39f270;
  #L39f28a.  return v5;
  #L39f28c.  v0[v2]:= v7 @kind object;
  #L39f290.  v7:= v6.`io.reactivex.internal.util.e.c` @type ^`int`;
  #L39f294.  v7:= v7 + v4 @kind int;
  #L39f296.  v6.`io.reactivex.internal.util.e.c` @type ^`int` := v7;
  #L39f29a.  v0:= v6.`io.reactivex.internal.util.e.d` @type ^`int`;
  #L39f29e.  if v7 < v0 then goto L39f2a8;
  #L39f2a2.  call `d`(v6) @signature `Lio/reactivex/internal/util/e;.d:()V` @kind virtual;
  #L39f2a8.  return v4;
}
procedure `java.lang.Object`[] `b`(`io.reactivex.internal.util.e` v1 @kind this) @signature `Lio/reactivex/internal/util/e;.b:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39f3bc.  v0:= v1.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] @kind object;
  #L39f3c0.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.internal.util.e` v8 @kind this) @signature `Lio/reactivex/internal/util/e;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L39f434.  v0:= v8.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] @kind object;
  #L39f438.  v1:= length @variable v0;
  #L39f43a.  v2:= v1 ^< 1;
  #L39f43e.  v3:= v2 + -1;
  #L39f442.  v4:= new `java.lang.Object`[v2];
  #L39f446.  v5:= v8.`io.reactivex.internal.util.e.c` @type ^`int`;
  #L39f44a.  v6:= v5 + -1;
  #L39f44e.  if v5 == 0 then goto L39f498;
  #L39f452.  v1:= v1 + -1;
  #L39f456.  v5:= v0[v1] @kind object;
  #L39f45a.  if v5 != 0 then goto L39f460;
  #L39f45e.  goto L39f452;
  #L39f460.  v5:= v0[v1] @kind object;
  #L39f464.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L39f46a.  v5:= temp;
  #L39f46c.  call temp:= `c`(v5) @signature `Lio/reactivex/internal/util/e;.c:(I)I` @kind static;
  #L39f472.  v5:= temp;
  #L39f474.  v5:= v5 ^& v3 @kind int;
  #L39f476.  v7:= v4[v5] @kind object;
  #L39f47a.  if v7 == 0 then goto L39f48c;
  #L39f47e.  v5:= v5 + 1;
  #L39f482.  v5:= v5 ^& v3 @kind int;
  #L39f484.  v7:= v4[v5] @kind object;
  #L39f488.  if v7 != 0 then goto L39f47e;
  #L39f48c.  v7:= v0[v1] @kind object;
  #L39f490.  v4[v5]:= v7 @kind object;
  #L39f494.  v5:= v6;
  #L39f496.  goto L39f44a;
  #L39f498.  v8.`io.reactivex.internal.util.e.b` @type ^`int` := v3;
  #L39f49c.  v0:= (`float`) v2 @kind i2f;
  #L39f49e.  v1:= v8.`io.reactivex.internal.util.e.a` @type ^`float`;
  #L39f4a2.  v0:= v0 * v1 @kind float;
  #L39f4a6.  v0:= (`int`) v0 @kind f2i;
  #L39f4a8.  v8.`io.reactivex.internal.util.e.d` @type ^`int` := v0;
  #L39f4ac.  v8.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L39f4b0.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.util.e` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/util/e;.e:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39f2bc.  v0:= v5.`io.reactivex.internal.util.e.e` @type ^`java.lang.Object`[] @kind object;
  #L39f2c0.  v1:= v5.`io.reactivex.internal.util.e.b` @type ^`int`;
  #L39f2c4.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L39f2ca.  v2:= temp;
  #L39f2cc.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/util/e;.c:(I)I` @kind static;
  #L39f2d2.  v2:= temp;
  #L39f2d4.  v2:= v2 ^& v1 @kind int;
  #L39f2d6.  v3:= v0[v2] @kind object;
  #L39f2da.  v4:= 0I;
  #L39f2dc.  if v3 != 0 then goto L39f2e2;
  #L39f2e0.  return v4;
  #L39f2e2.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39f2e8.  v3:= temp;
  #L39f2ea.  if v3 == 0 then goto L39f2f8;
  #L39f2ee.  call temp:= `f`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/e;.f:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L39f2f4.  v6:= temp;
  #L39f2f6.  return v6;
  #L39f2f8.  v2:= v2 + 1;
  #L39f2fc.  v2:= v2 ^& v1 @kind int;
  #L39f2fe.  v3:= v0[v2] @kind object;
  #L39f302.  if v3 != 0 then goto L39f308;
  #L39f306.  return v4;
  #L39f308.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39f30e.  v3:= temp;
  #L39f310.  if v3 == 0 then goto L39f2f8;
  #L39f314.  call temp:= `f`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/e;.f:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L39f31a.  v6:= temp;
  #L39f31c.  return v6;
}
procedure `boolean` `f`(`io.reactivex.internal.util.e` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/util/e;.f:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39f330.  v0:= v4.`io.reactivex.internal.util.e.c` @type ^`int`;
  #L39f334.  v1:= 1I;
  #L39f336.  v0:= v0 - v1 @kind int;
  #L39f338.  v4.`io.reactivex.internal.util.e.c` @type ^`int` := v0;
  #L39f33c.  v0:= v5 + 1;
  #L39f340.  v0:= v0 ^& v7 @kind int;
  #L39f342.  v2:= v6[v0] @kind object;
  #L39f346.  if v2 != 0 then goto L39f352;
  #L39f34a.  v7:= 0I;
  #L39f34c.  v6[v5]:= v7 @kind object;
  #L39f350.  return v1;
  #L39f352.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L39f358.  v3:= temp;
  #L39f35a.  call temp:= `c`(v3) @signature `Lio/reactivex/internal/util/e;.c:(I)I` @kind static;
  #L39f360.  v3:= temp;
  #L39f362.  v3:= v3 ^& v7 @kind int;
  #L39f364.  if v5 > v0 then goto L39f372;
  #L39f368.  if v5 >= v3 then goto L39f37a;
  #L39f36c.  if v3 <= v0 then goto L39f382;
  #L39f370.  goto L39f37a;
  #L39f372.  if v5 < v3 then goto L39f382;
  #L39f376.  if v3 <= v0 then goto L39f382;
  #L39f37a.  v6[v5]:= v2 @kind object;
  #L39f37e.  v5:= v0;
  #L39f380.  goto L39f33c;
  #L39f382.  v0:= v0 + 1;
  #L39f386.  goto L39f340;
}
