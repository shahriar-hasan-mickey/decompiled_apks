record `io.reactivex.internal.util.a` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.internal.util.a.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.a.b` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.a.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/util/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39e980.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39e986.  v0.`io.reactivex.internal.util.a.a` @type ^`int` := v1;
  #L39e98a.  v1:= v1 + 1;
  #L39e98e.  v1:= new `java.lang.Object`[v1];
  #L39e992.  v0.`io.reactivex.internal.util.a.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L39e996.  v0.`io.reactivex.internal.util.a.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L39e99a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.util.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/util/a;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39e9ac.  v0:= v3.`io.reactivex.internal.util.a.a` @type ^`int`;
  #L39e9b0.  v1:= v3.`io.reactivex.internal.util.a.d` @type ^`int`;
  #L39e9b4.  if v1 != v0 then goto L39e9ce;
  #L39e9b8.  v1:= v0 + 1;
  #L39e9bc.  v1:= new `java.lang.Object`[v1];
  #L39e9c0.  v2:= v3.`io.reactivex.internal.util.a.c` @type ^`java.lang.Object`[] @kind object;
  #L39e9c4.  v2[v0]:= v1 @kind object;
  #L39e9c8.  v3.`io.reactivex.internal.util.a.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L39e9cc.  v1:= 0I;
  #L39e9ce.  v0:= v3.`io.reactivex.internal.util.a.c` @type ^`java.lang.Object`[] @kind object;
  #L39e9d2.  v0[v1]:= v4 @kind object;
  #L39e9d6.  v1:= v1 + 1;
  #L39e9da.  v3.`io.reactivex.internal.util.a.d` @type ^`int` := v1;
  #L39e9de.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.util.a` v4 @kind this, `io.reactivex.internal.util.a$a` v5 @kind object) @signature `Lio/reactivex/internal/util/a;.b:(Lio/reactivex/internal/util/a$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39e9f0.  v0:= v4.`io.reactivex.internal.util.a.b` @type ^`java.lang.Object`[] @kind object;
  #L39e9f4.  v1:= v4.`io.reactivex.internal.util.a.a` @type ^`int`;
  #L39e9f8.  if v0 == 0 then goto L39ea2a;
  #L39e9fc.  v2:= 0I;
  #L39e9fe.  if v2 >= v1 then goto L39ea20;
  #L39ea02.  v3:= v0[v2] @kind object;
  #L39ea06.  if v3 != 0 then goto L39ea0c;
  #L39ea0a.  goto L39ea20;
  #L39ea0c.  call temp:= `a`(v5, v3) @signature `Lio/reactivex/internal/util/a$a;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L39ea12.  v3:= temp;
  #L39ea14.  if v3 == 0 then goto L39ea1a;
  #L39ea18.  return @kind void;
  #L39ea1a.  v2:= v2 + 1;
  #L39ea1e.  goto L39e9fe;
  #L39ea20.  v0:= v0[v1] @kind object;
  #L39ea24.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L39ea28.  goto L39e9f8;
  #L39ea2a.  return @kind void;
}
