record `io.reactivex.internal.util.ExceptionHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Throwable` `@@io.reactivex.internal.util.ExceptionHelper.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/util/ExceptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L39ef0c.  v0:= new `io.reactivex.internal.util.ExceptionHelper$Termination`;
  #L39ef10.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper$Termination;.<init>:()V` @kind direct;
  #L39ef16.  `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` := v0 @kind object;
  #L39ef1a.  return @kind void;
}
procedure `boolean` `a`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39ee28.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39ee2e.  v0:= temp @kind object;
  #L39ee30.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L39ee34.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L39ee38.  v2:= 0I;
  #L39ee3a.  if v0 != v1 then goto L39ee40;
  #L39ee3e.  return v2;
  #L39ee40.  v1:= 1I;
  #L39ee42.  if v0 != 0 then goto L39ee4a;
  #L39ee46.  v3:= v6 @kind object;
  #L39ee48.  goto L39ee62;
  #L39ee4a.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L39ee4e.  v4:= 2I;
  #L39ee50.  v4:= new `java.lang.Throwable`[v4];
  #L39ee54.  v4[v2]:= v0 @kind object;
  #L39ee58.  v4[v1]:= v6 @kind object;
  #L39ee5c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L39ee62.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39ee68.  v0:= temp;
  #L39ee6a.  if v0 == 0 then goto L39ee28;
  #L39ee6e.  return v1;
}
procedure `java.lang.Throwable` `b`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39eed8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39eede.  v0:= temp @kind object;
  #L39eee0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L39eee4.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L39eee8.  if v0 == v1 then goto L39eefa;
  #L39eeec.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39eef2.  v2:= temp @kind object;
  #L39eef4.  v0:= v2 @kind object;
  #L39eef6.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L39eefa.  return v0 @kind object;
}
procedure `java.lang.Exception` `c`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.c:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39ee80.  v0:= instanceof @variable v1 @type ^`java.lang.Exception` @kind boolean;
  #L39ee84.  if v0 == 0 then goto L39ee8e;
  #L39ee88.  v1:= (`java.lang.Exception`) v1 @kind object;
  #L39ee8c.  return v1 @kind object;
  #L39ee8e.  throw v1;
}
procedure `java.lang.RuntimeException` `d`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39eea0.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L39eea4.  if v0 != 0 then goto L39eec2;
  #L39eea8.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L39eeac.  if v0 == 0 then goto L39eeb6;
  #L39eeb0.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L39eeb4.  return v1 @kind object;
  #L39eeb6.  v0:= new `java.lang.RuntimeException`;
  #L39eeba.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L39eec0.  return v0 @kind object;
  #L39eec2.  v1:= (`java.lang.Error`) v1 @kind object;
  #L39eec6.  throw v1;
}
