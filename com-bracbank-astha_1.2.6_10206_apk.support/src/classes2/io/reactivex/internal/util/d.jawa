record `io.reactivex.internal.util.d` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `a`(`d3.b` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/d;.a:(Ld3/b;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L39ef2c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39ef32.  v1:= temp;
  #L39ef34.  if v1 != 0 then goto L39ef52;
  #L39ef38.  call temp:= `b`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39ef3e.  v1:= temp @kind object;
  #L39ef40.  if v1 == 0 then goto L39ef4c;
  #L39ef44.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39ef4a.  goto L39ef52;
  #L39ef4c.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39ef52.  return @kind void;
}
procedure `void` `b`(`d3.b` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/d;.b:(Ld3/b;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39ef64.  call temp:= `a`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L39ef6a.  v0:= temp;
  #L39ef6c.  if v0 == 0 then goto L39ef8c;
  #L39ef70.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39ef76.  v2:= temp;
  #L39ef78.  if v2 != 0 then goto L39ef92;
  #L39ef7c.  call temp:= `b`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39ef82.  v2:= temp @kind object;
  #L39ef84.  call `a`(v1, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39ef8a.  goto L39ef92;
  #L39ef8c.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39ef92.  return @kind void;
}
procedure `void` `c`(`d3.b` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/d;.c:(Ld3/b;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39efa4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39efaa.  v0:= temp;
  #L39efac.  if v0 != 0 then goto L39efec;
  #L39efb0.  v0:= 0I;
  #L39efb2.  v1:= 1I;
  #L39efb4.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39efba.  v0:= temp;
  #L39efbc.  if v0 == 0 then goto L39efec;
  #L39efc0.  call `onNext`(v2, v3) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39efc6.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39efcc.  v3:= temp;
  #L39efce.  if v3 == 0 then goto L39efec;
  #L39efd2.  call temp:= `b`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39efd8.  v3:= temp @kind object;
  #L39efda.  if v3 == 0 then goto L39efe6;
  #L39efde.  call `a`(v2, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39efe4.  goto L39efec;
  #L39efe6.  call `onComplete`(v2) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39efec.  return @kind void;
}
