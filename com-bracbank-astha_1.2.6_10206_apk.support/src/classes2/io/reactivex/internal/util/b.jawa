record `io.reactivex.internal.util.b` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `long` `a`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39eba8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ebae.  v0:= temp @kind wide;
  #L39ebb0.  v2:= 9223372036854775807L;
  #L39ebba.  v4:= lcmp(v0, v2);
  #L39ebbe.  if v4 != 0 then goto L39ebc4;
  #L39ebc2.  return v2 @kind wide;
  #L39ebc4.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39ebca.  v2:= temp @kind wide;
  #L39ebcc.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L39ebd2.  v2:= temp;
  #L39ebd4.  if v2 == 0 then goto L39eba8;
  #L39ebd8.  return v0 @kind wide;
}
procedure `long` `b`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39ebec.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ebf2.  v0:= temp @kind wide;
  #L39ebf4.  v2:= -9223372036854775808L;
  #L39ebf8.  v4:= lcmp(v0, v2);
  #L39ebfc.  if v4 != 0 then goto L39ec02;
  #L39ec00.  return v2 @kind wide;
  #L39ec02.  v2:= 9223372036854775807L;
  #L39ec0c.  v4:= lcmp(v0, v2);
  #L39ec10.  if v4 != 0 then goto L39ec16;
  #L39ec14.  return v2 @kind wide;
  #L39ec16.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39ec1c.  v2:= temp @kind wide;
  #L39ec1e.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L39ec24.  v2:= temp;
  #L39ec26.  if v2 == 0 then goto L39ebec;
  #L39ec2a.  return v0 @kind wide;
}
procedure `long` `c`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39ec3c.  v1:= v1 + v3 @kind long;
  #L39ec3e.  v3:= 0L;
  #L39ec42.  v0:= lcmp(v1, v3);
  #L39ec46.  if v0 >= 0 then goto L39ec54;
  #L39ec4a.  v1:= 9223372036854775807L;
  #L39ec54.  return v1 @kind wide;
}
procedure `long` `d`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L39ec68.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ec6e.  v0:= temp @kind wide;
  #L39ec70.  v2:= 9223372036854775807L;
  #L39ec7a.  v4:= lcmp(v0, v2);
  #L39ec7e.  if v4 != 0 then goto L39ec84;
  #L39ec82.  return v2 @kind wide;
  #L39ec84.  v2:= v0 - v10 @kind long;
  #L39ec88.  v4:= 0L;
  #L39ec8c.  v6:= lcmp(v2, v4);
  #L39ec90.  if v6 >= 0 then goto L39ecc8;
  #L39ec94.  v6:= new `java.lang.IllegalStateException`;
  #L39ec98.  v7:= new `java.lang.StringBuilder`;
  #L39ec9c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39eca2.  v8:= "More produced than requested: " @kind object;
  #L39eca6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39ecac.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L39ecb2.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39ecb8.  v2:= temp @kind object;
  #L39ecba.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39ecc0.  call `q`(v6) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39ecc6.  v2:= v4 @kind wide;
  #L39ecc8.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L39ecce.  v0:= temp;
  #L39ecd0.  if v0 == 0 then goto L39ec68;
  #L39ecd4.  return v2 @kind wide;
}
