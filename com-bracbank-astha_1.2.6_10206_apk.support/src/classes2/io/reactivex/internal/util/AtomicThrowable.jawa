record `io.reactivex.internal.util.AtomicThrowable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
}
global `long` `@@io.reactivex.internal.util.AtomicThrowable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.util.AtomicThrowable` v0 @kind this) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39eb90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39eb96.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.util.AtomicThrowable` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L39eb58.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L39eb5e.  v1:= temp;
  #L39eb60.  return v1;
}
procedure `java.lang.Throwable` `b`(`io.reactivex.internal.util.AtomicThrowable` v1 @kind this) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39eb74.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L39eb7a.  v0:= temp @kind object;
  #L39eb7c.  return v0 @kind object;
}
