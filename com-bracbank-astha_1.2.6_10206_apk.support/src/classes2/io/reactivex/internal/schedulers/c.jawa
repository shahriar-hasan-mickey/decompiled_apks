record `io.reactivex.internal.schedulers.c` @kind class @AccessFlag PUBLIC_FINAL extends `b2.q` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.c.b` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39c5f8.  v0:= "rx2.newthread-priority" @kind object;
  #L39c5fc.  v1:= 5I;
  #L39c5fe.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39c604.  v0:= temp @kind object;
  #L39c606.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39c60c.  v0:= temp;
  #L39c60e.  v1:= 10I;
  #L39c612.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L39c618.  v0:= temp;
  #L39c61a.  v1:= 1I;
  #L39c61c.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L39c622.  v0:= temp;
  #L39c624.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c628.  v2:= "RxNewThreadScheduler" @kind object;
  #L39c62c.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L39c632.  `@@io.reactivex.internal.schedulers.c.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L39c636.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39c648.  v0:= `@@io.reactivex.internal.schedulers.c.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L39c64c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c652.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.c` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39c664.  call `<init>`(v0) @signature `Lb2/q;.<init>:()V` @kind direct;
  #L39c66a.  v0.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L39c66e.  return @kind void;
}
procedure `b2.q$b` `a`(`io.reactivex.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.a:()Lb2/q$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39c5d8.  v0:= new `io.reactivex.internal.schedulers.d`;
  #L39c5dc.  v1:= v2.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L39c5e0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/d;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c5e6.  return v0 @kind object;
}
