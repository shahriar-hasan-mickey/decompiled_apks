record `io.reactivex.internal.schedulers.a` @kind class @AccessFlag PUBLIC_FINAL extends `b2.q` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.a.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.a$b` `@@io.reactivex.internal.schedulers.a.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.a.e` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.a.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.a$c` `@@io.reactivex.internal.schedulers.a.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39bfec.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L39bff2.  v0:= temp @kind object;
  #L39bff4.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L39bffa.  v0:= temp;
  #L39bffc.  v1:= "rx2.computation-threads" @kind object;
  #L39c000.  v2:= 0I;
  #L39c002.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39c008.  v1:= temp @kind object;
  #L39c00a.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39c010.  v1:= temp;
  #L39c012.  call temp:= `d`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a;.d:(II)I` @kind static;
  #L39c018.  v0:= temp;
  #L39c01a.  `@@io.reactivex.internal.schedulers.a.f` @type ^`int` := v0;
  #L39c01e.  v0:= new `io.reactivex.internal.schedulers.a$c`;
  #L39c022.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c026.  v3:= "RxComputationShutdown" @kind object;
  #L39c02a.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39c030.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c036.  `@@io.reactivex.internal.schedulers.a.g` @type ^`io.reactivex.internal.schedulers.a$c` := v0 @kind object;
  #L39c03a.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/d;.e:()V` @kind virtual;
  #L39c040.  v0:= "rx2.computation-priority" @kind object;
  #L39c044.  v1:= 5I;
  #L39c046.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39c04c.  v0:= temp @kind object;
  #L39c04e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39c054.  v0:= temp;
  #L39c056.  v1:= 10I;
  #L39c05a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L39c060.  v0:= temp;
  #L39c062.  v1:= 1I;
  #L39c064.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L39c06a.  v0:= temp;
  #L39c06c.  v3:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c070.  v4:= "RxComputationThreadPool" @kind object;
  #L39c074.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L39c07a.  `@@io.reactivex.internal.schedulers.a.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L39c07e.  v0:= new `io.reactivex.internal.schedulers.a$b`;
  #L39c082.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/schedulers/a$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c088.  `@@io.reactivex.internal.schedulers.a.d` @type ^`io.reactivex.internal.schedulers.a$b` := v0 @kind object;
  #L39c08c.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/a$b;.b:()V` @kind virtual;
  #L39c092.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.a` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39c0a4.  v0:= `@@io.reactivex.internal.schedulers.a.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L39c0a8.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c0ae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.a` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39c0c0.  call `<init>`(v1) @signature `Lb2/q;.<init>:()V` @kind direct;
  #L39c0c6.  v1.`io.reactivex.internal.schedulers.a.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L39c0ca.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L39c0ce.  v0:= `@@io.reactivex.internal.schedulers.a.d` @type ^`io.reactivex.internal.schedulers.a$b` @kind object;
  #L39c0d2.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L39c0d8.  v1.`io.reactivex.internal.schedulers.a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L39c0dc.  call `e`(v1) @signature `Lio/reactivex/internal/schedulers/a;.e:()V` @kind virtual;
  #L39c0e2.  return @kind void;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/schedulers/a;.d:(II)I` @AccessFlag STATIC {
    temp;

  #L39bfcc.  if v1 <= 0 then goto L39bfd8;
  #L39bfd0.  if v1 <= v0 then goto L39bfd6;
  #L39bfd4.  goto L39bfd8;
  #L39bfd6.  v0:= v1;
  #L39bfd8.  return v0;
}
procedure `b2.q$b` `a`(`io.reactivex.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.a:()Lb2/q$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39bf64.  v0:= new `io.reactivex.internal.schedulers.a$a`;
  #L39bf68.  v1:= v2.`io.reactivex.internal.schedulers.a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39bf6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39bf72.  v1:= temp @kind object;
  #L39bf74.  v1:= (`io.reactivex.internal.schedulers.a$b`) v1 @kind object;
  #L39bf78.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/a$b;.a:()Lio/reactivex/internal/schedulers/a$c;` @kind virtual;
  #L39bf7e.  v1:= temp @kind object;
  #L39bf80.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a$a;.<init>:(Lio/reactivex/internal/schedulers/a$c;)V` @kind direct;
  #L39bf86.  return v0 @kind object;
}
procedure `e2.b` `c`(`io.reactivex.internal.schedulers.a` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Le2/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39bf98.  v0:= v1.`io.reactivex.internal.schedulers.a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39bf9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39bfa2.  v0:= temp @kind object;
  #L39bfa4.  v0:= (`io.reactivex.internal.schedulers.a$b`) v0 @kind object;
  #L39bfa8.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/a$b;.a:()Lio/reactivex/internal/schedulers/a$c;` @kind virtual;
  #L39bfae.  v0:= temp @kind object;
  #L39bfb0.  call temp:= `g`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/d;.g:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Le2/b;` @kind virtual;
  #L39bfb6.  v2:= temp @kind object;
  #L39bfb8.  return v2 @kind object;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39c0f4.  v0:= new `io.reactivex.internal.schedulers.a$b`;
  #L39c0f8.  v1:= `@@io.reactivex.internal.schedulers.a.f` @type ^`int`;
  #L39c0fc.  v2:= v3.`io.reactivex.internal.schedulers.a.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L39c100.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/schedulers/a$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c106.  v1:= v3.`io.reactivex.internal.schedulers.a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39c10a.  v2:= `@@io.reactivex.internal.schedulers.a.d` @type ^`io.reactivex.internal.schedulers.a$b` @kind object;
  #L39c10e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39c114.  v1:= temp;
  #L39c116.  if v1 != 0 then goto L39c120;
  #L39c11a.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/a$b;.b:()V` @kind virtual;
  #L39c120.  return @kind void;
}
