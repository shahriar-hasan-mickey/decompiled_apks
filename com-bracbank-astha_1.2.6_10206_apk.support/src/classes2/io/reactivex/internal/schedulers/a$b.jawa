record `io.reactivex.internal.schedulers.a$b` @kind class @AccessFlag FINAL {
  `int` `io.reactivex.internal.schedulers.a$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.a$c`[] `io.reactivex.internal.schedulers.a$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.schedulers.a$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.a$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/a$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39bed8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39bede.  v3.`io.reactivex.internal.schedulers.a$b.a` @type ^`int` := v4;
  #L39bee2.  v0:= new `io.reactivex.internal.schedulers.a$c`[v4];
  #L39bee6.  v3.`io.reactivex.internal.schedulers.a$b.b` @type ^`io.reactivex.internal.schedulers.a$c`[] := v0 @kind object;
  #L39beea.  v0:= 0I;
  #L39beec.  if v0 >= v4 then goto L39bf08;
  #L39bef0.  v1:= v3.`io.reactivex.internal.schedulers.a$b.b` @type ^`io.reactivex.internal.schedulers.a$c`[] @kind object;
  #L39bef4.  v2:= new `io.reactivex.internal.schedulers.a$c`;
  #L39bef8.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/schedulers/a$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39befe.  v1[v0]:= v2 @kind object;
  #L39bf02.  v0:= v0 + 1;
  #L39bf06.  goto L39beec;
  #L39bf08.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.a$c` `a`(`io.reactivex.internal.schedulers.a$b` v6 @kind this) @signature `Lio/reactivex/internal/schedulers/a$b;.a:()Lio/reactivex/internal/schedulers/a$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39be9c.  v0:= v6.`io.reactivex.internal.schedulers.a$b.a` @type ^`int`;
  #L39bea0.  if v0 != 0 then goto L39beaa;
  #L39bea4.  v0:= `@@io.reactivex.internal.schedulers.a.g` @type ^`io.reactivex.internal.schedulers.a$c` @kind object;
  #L39bea8.  return v0 @kind object;
  #L39beaa.  v1:= v6.`io.reactivex.internal.schedulers.a$b.b` @type ^`io.reactivex.internal.schedulers.a$c`[] @kind object;
  #L39beae.  v2:= v6.`io.reactivex.internal.schedulers.a$b.c` @type ^`long` @kind wide;
  #L39beb2.  v4:= 1L;
  #L39beb6.  v4:= v4 + v2 @kind long;
  #L39beb8.  v6.`io.reactivex.internal.schedulers.a$b.c` @type ^`long` := v4 @kind wide;
  #L39bebc.  v4:= (`long`) v0 @kind i2l;
  #L39bebe.  v2:= v2 %% v4 @kind long;
  #L39bec0.  v0:= (`int`) v2 @kind l2i;
  #L39bec2.  v0:= v1[v0] @kind object;
  #L39bec6.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.a$b` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/a$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39bf1c.  v0:= v4.`io.reactivex.internal.schedulers.a$b.b` @type ^`io.reactivex.internal.schedulers.a$c`[] @kind object;
  #L39bf20.  v1:= length @variable v0;
  #L39bf22.  v2:= 0I;
  #L39bf24.  if v2 >= v1 then goto L39bf38;
  #L39bf28.  v3:= v0[v2] @kind object;
  #L39bf2c.  call `e`(v3) @signature `Lio/reactivex/internal/schedulers/d;.e:()V` @kind virtual;
  #L39bf32.  v2:= v2 + 1;
  #L39bf36.  goto L39bf24;
  #L39bf38.  return @kind void;
}
