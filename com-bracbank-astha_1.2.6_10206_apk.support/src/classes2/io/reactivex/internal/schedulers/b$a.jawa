record `io.reactivex.internal.schedulers.b$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.schedulers.b$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `io.reactivex.internal.schedulers.b$a.b` @AccessFlag PRIVATE_FINAL;
  `e2.a` `io.reactivex.internal.schedulers.b$a.c` @AccessFlag FINAL;
  `java.util.concurrent.ScheduledExecutorService` `io.reactivex.internal.schedulers.b$a.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Future` `io.reactivex.internal.schedulers.b$a.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.b$a.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.b$a` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `java.util.concurrent.ThreadFactory` v11 @kind object) @signature `Lio/reactivex/internal/schedulers/b$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39c1b8.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39c1be.  if v10 == 0 then goto L39c1cc;
  #L39c1c2.  call temp:= `toNanos`(v10, v8) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L39c1c8.  v8:= temp @kind wide;
  #L39c1ca.  goto L39c1d0;
  #L39c1cc.  v8:= 0L;
  #L39c1d0.  v4:= v8 @kind wide;
  #L39c1d2.  v7.`io.reactivex.internal.schedulers.b$a.a` @type ^`long` := v4 @kind wide;
  #L39c1d6.  v8:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L39c1da.  call `<init>`(v8) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L39c1e0.  v7.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v8 @kind object;
  #L39c1e4.  v8:= new `e2.a`;
  #L39c1e8.  call `<init>`(v8) @signature `Le2/a;.<init>:()V` @kind direct;
  #L39c1ee.  v7.`io.reactivex.internal.schedulers.b$a.c` @type ^`e2.a` := v8 @kind object;
  #L39c1f2.  v7.`io.reactivex.internal.schedulers.b$a.f` @type ^`java.util.concurrent.ThreadFactory` := v11 @kind object;
  #L39c1f6.  v8:= 0I;
  #L39c1f8.  if v10 == 0 then goto L39c21e;
  #L39c1fc.  v8:= 1I;
  #L39c1fe.  v9:= `@@io.reactivex.internal.schedulers.b.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L39c202.  call temp:= `newScheduledThreadPool`(v8, v9) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L39c208.  v8:= temp @kind object;
  #L39c20a.  v6:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39c20e.  v0:= v8 @kind object;
  #L39c210.  v1:= v7 @kind object;
  #L39c212.  v2:= v4 @kind wide;
  #L39c214.  call temp:= `scheduleWithFixedDelay`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleWithFixedDelay:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L39c21a.  v9:= temp @kind object;
  #L39c21c.  goto L39c220;
  #L39c21e.  v9:= v8 @kind object;
  #L39c220.  v7.`io.reactivex.internal.schedulers.b$a.d` @type ^`java.util.concurrent.ScheduledExecutorService` := v8 @kind object;
  #L39c224.  v7.`io.reactivex.internal.schedulers.b$a.e` @type ^`java.util.concurrent.Future` := v9 @kind object;
  #L39c228.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.b$a` v7 @kind this) @signature `Lio/reactivex/internal/schedulers/b$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39c23c.  v0:= v7.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c240.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L39c246.  v0:= temp;
  #L39c248.  if v0 != 0 then goto L39c2a4;
  #L39c24c.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/schedulers/b$a;.c:()J` @kind virtual;
  #L39c252.  v0:= temp @kind wide;
  #L39c254.  v2:= v7.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c258.  call temp:= `iterator`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L39c25e.  v2:= temp @kind object;
  #L39c260.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L39c266.  v3:= temp;
  #L39c268.  if v3 == 0 then goto L39c2a4;
  #L39c26c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L39c272.  v3:= temp @kind object;
  #L39c274.  v3:= (`io.reactivex.internal.schedulers.b$c`) v3 @kind object;
  #L39c278.  call temp:= `i`(v3) @signature `Lio/reactivex/internal/schedulers/b$c;.i:()J` @kind virtual;
  #L39c27e.  v4:= temp @kind wide;
  #L39c280.  v6:= lcmp(v4, v0);
  #L39c284.  if v6 > 0 then goto L39c2a4;
  #L39c288.  v4:= v7.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c28c.  call temp:= `remove`(v4, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c292.  v4:= temp;
  #L39c294.  if v4 == 0 then goto L39c260;
  #L39c298.  v4:= v7.`io.reactivex.internal.schedulers.b$a.c` @type ^`e2.a` @kind object;
  #L39c29c.  call temp:= `c`(v4, v3) @signature `Le2/a;.c:(Le2/b;)Z` @kind virtual;
  #L39c2a2.  goto L39c260;
  #L39c2a4.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.b$c` `b`(`io.reactivex.internal.schedulers.b$a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/b$a;.b:()Lio/reactivex/internal/schedulers/b$c;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L39c134.  v0:= v2.`io.reactivex.internal.schedulers.b$a.c` @type ^`e2.a` @kind object;
  #L39c138.  call temp:= `d`(v0) @signature `Le2/a;.d:()Z` @kind virtual;
  #L39c13e.  v0:= temp;
  #L39c140.  if v0 == 0 then goto L39c14a;
  #L39c144.  v0:= `@@io.reactivex.internal.schedulers.b.g` @type ^`io.reactivex.internal.schedulers.b$c` @kind object;
  #L39c148.  return v0 @kind object;
  #L39c14a.  v0:= v2.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c14e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L39c154.  v0:= temp;
  #L39c156.  if v0 != 0 then goto L39c170;
  #L39c15a.  v0:= v2.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c15e.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L39c164.  v0:= temp @kind object;
  #L39c166.  v0:= (`io.reactivex.internal.schedulers.b$c`) v0 @kind object;
  #L39c16a.  if v0 == 0 then goto L39c14a;
  #L39c16e.  return v0 @kind object;
  #L39c170.  v0:= new `io.reactivex.internal.schedulers.b$c`;
  #L39c174.  v1:= v2.`io.reactivex.internal.schedulers.b$a.f` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L39c178.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c17e.  v1:= v2.`io.reactivex.internal.schedulers.b$a.c` @type ^`e2.a` @kind object;
  #L39c182.  call temp:= `b`(v1, v0) @signature `Le2/a;.b:(Le2/b;)Z` @kind virtual;
  #L39c188.  return v0 @kind object;
}
procedure `long` `c`(`io.reactivex.internal.schedulers.b$a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/b$a;.c:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L39c19c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L39c1a2.  v0:= temp @kind wide;
  #L39c1a4.  return v0 @kind wide;
}
procedure `void` `d`(`io.reactivex.internal.schedulers.b$a` v4 @kind this, `io.reactivex.internal.schedulers.b$c` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/b$a;.d:(Lio/reactivex/internal/schedulers/b$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39c2b8.  call temp:= `c`(v4) @signature `Lio/reactivex/internal/schedulers/b$a;.c:()J` @kind virtual;
  #L39c2be.  v0:= temp @kind wide;
  #L39c2c0.  v2:= v4.`io.reactivex.internal.schedulers.b$a.a` @type ^`long` @kind wide;
  #L39c2c4.  v0:= v0 + v2 @kind long;
  #L39c2c6.  call `j`(v5, v0) @signature `Lio/reactivex/internal/schedulers/b$c;.j:(J)V` @kind virtual;
  #L39c2cc.  v0:= v4.`io.reactivex.internal.schedulers.b$a.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L39c2d0.  call temp:= `offer`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c2d6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.b$a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/b$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L39c300.  v0:= v2.`io.reactivex.internal.schedulers.b$a.c` @type ^`e2.a` @kind object;
  #L39c304.  call `e`(v0) @signature `Le2/a;.e:()V` @kind virtual;
  #L39c30a.  v0:= v2.`io.reactivex.internal.schedulers.b$a.e` @type ^`java.util.concurrent.Future` @kind object;
  #L39c30e.  if v0 == 0 then goto L39c31a;
  #L39c312.  v1:= 1I;
  #L39c314.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39c31a.  v0:= v2.`io.reactivex.internal.schedulers.b$a.d` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L39c31e.  if v0 == 0 then goto L39c328;
  #L39c322.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L39c328.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.b$a` v0 @kind this) @signature `Lio/reactivex/internal/schedulers/b$a;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L39c2e8.  call `a`(v0) @signature `Lio/reactivex/internal/schedulers/b$a;.a:()V` @kind virtual;
  #L39c2ee.  return @kind void;
}
