record `io.reactivex.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `e2.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ScheduledRunnable.actual` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L39ca60.  v0:= new `java.lang.Object`;
  #L39ca64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ca6a.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Object` := v0 @kind object;
  #L39ca6e.  v0:= new `java.lang.Object`;
  #L39ca72.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ca78.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` := v0 @kind object;
  #L39ca7c.  v0:= new `java.lang.Object`;
  #L39ca80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ca86.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` := v0 @kind object;
  #L39ca8a.  v0:= new `java.lang.Object`;
  #L39ca8e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ca94.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` := v0 @kind object;
  #L39ca98.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `i2.a` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Li2/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39caac.  v0:= 3I;
  #L39caae.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L39cab4.  v1.`io.reactivex.internal.schedulers.ScheduledRunnable.actual` @type ^`java.lang.Runnable` := v2 @kind object;
  #L39cab8.  v2:= 0I;
  #L39caba.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39cac0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.a:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39cc90.  v0:= 1I;
  #L39cc92.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cc98.  v1:= temp @kind object;
  #L39cc9a.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cc9e.  if v1 != v2 then goto L39cca4;
  #L39cca2.  return @kind void;
  #L39cca4.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L39cca8.  if v1 != v2 then goto L39ccb6;
  #L39ccac.  v0:= 0I;
  #L39ccae.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39ccb4.  return @kind void;
  #L39ccb6.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L39ccba.  if v1 != v2 then goto L39ccc6;
  #L39ccbe.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39ccc4.  return @kind void;
  #L39ccc6.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cccc.  v0:= temp;
  #L39ccce.  if v0 == 0 then goto L39cc90;
  #L39ccd2.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39ca44.  call `run`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L39ca4a.  v0:= 0I;
  #L39ca4c.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39ca14.  v0:= 0I;
  #L39ca16.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39ca1c.  v1:= temp @kind object;
  #L39ca1e.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Object` @kind object;
  #L39ca22.  if v1 == v2 then goto L39ca2e;
  #L39ca26.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39ca2a.  if v1 != v2 then goto L39ca30;
  #L39ca2e.  v0:= 1I;
  #L39ca30.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.ScheduledRunnable` v7 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39cad4.  v0:= 1I;
  #L39cad6.  call temp:= `get`(v7, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cadc.  v1:= temp @kind object;
  #L39cade.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cae2.  v3:= 0I;
  #L39cae4.  if v1 == v2 then goto L39cb36;
  #L39cae8.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L39caec.  if v1 == v2 then goto L39cb36;
  #L39caf0.  v4:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L39caf4.  if v1 != v4 then goto L39cafa;
  #L39caf8.  goto L39cb36;
  #L39cafa.  v5:= 2I;
  #L39cafc.  call temp:= `get`(v7, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cb02.  v5:= temp @kind object;
  #L39cb04.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39cb0a.  v6:= temp @kind object;
  #L39cb0c.  if v5 == v6 then goto L39cb14;
  #L39cb10.  v5:= 1I;
  #L39cb12.  goto L39cb16;
  #L39cb14.  v5:= 0I;
  #L39cb16.  if v5 == 0 then goto L39cb1c;
  #L39cb1a.  v2:= v4 @kind object;
  #L39cb1c.  call temp:= `compareAndSet`(v7, v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cb22.  v0:= temp;
  #L39cb24.  if v0 == 0 then goto L39cad4;
  #L39cb28.  if v1 == 0 then goto L39cb36;
  #L39cb2c.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L39cb30.  call temp:= `cancel`(v1, v5) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39cb36.  call temp:= `get`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cb3c.  v0:= temp @kind object;
  #L39cb3e.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cb42.  if v0 == v1 then goto L39cb6a;
  #L39cb46.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Object` @kind object;
  #L39cb4a.  if v0 == v1 then goto L39cb6a;
  #L39cb4e.  if v0 != 0 then goto L39cb54;
  #L39cb52.  goto L39cb6a;
  #L39cb54.  call temp:= `compareAndSet`(v7, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cb5a.  v1:= temp;
  #L39cb5c.  if v1 == 0 then goto L39cb36;
  #L39cb60.  v0:= (`i2.a`) v0 @kind object;
  #L39cb64.  call temp:= `a`(v0, v7) @signature `Li2/a;.a:(Le2/b;)Z` @kind interface;
  #L39cb6a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39cb7c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39cb82.  v0:= temp @kind object;
  #L39cb84.  v1:= 2I;
  #L39cb86.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39cb8c.  v0:= 0I;
  #L39cb8e.  v2:= 1I;
  #L39cb90.  v3:= 0I;
  #L39cb92.  v4:= v5.`io.reactivex.internal.schedulers.ScheduledRunnable.actual` @type ^`java.lang.Runnable` @kind object;
  #L39cb96.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L39cb9c.  goto L39cba6;
  #L39cb9e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39cba0.  call `q`(v4) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39cba6.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39cbac.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cbb2.  v0:= temp @kind object;
  #L39cbb4.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Object` @kind object;
  #L39cbb8.  if v0 == v1 then goto L39cbda;
  #L39cbbc.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cbc0.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cbc6.  v1:= temp;
  #L39cbc8.  if v1 == 0 then goto L39cbda;
  #L39cbcc.  if v0 == 0 then goto L39cbda;
  #L39cbd0.  v0:= (`i2.a`) v0 @kind object;
  #L39cbd4.  call temp:= `a`(v0, v5) @signature `Li2/a;.a:(Le2/b;)Z` @kind interface;
  #L39cbda.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cbe0.  v0:= temp @kind object;
  #L39cbe2.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L39cbe6.  if v0 == v1 then goto L39cc02;
  #L39cbea.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L39cbee.  if v0 == v1 then goto L39cc02;
  #L39cbf2.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cbf6.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cbfc.  v0:= temp;
  #L39cbfe.  if v0 == 0 then goto L39cbda;
  #L39cc02.  return @kind void;
  #L39cc04.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39cc06.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39cc0c.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cc12.  v0:= temp @kind object;
  #L39cc14.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Object` @kind object;
  #L39cc18.  if v0 == v1 then goto L39cc3a;
  #L39cc1c.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cc20.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cc26.  v1:= temp;
  #L39cc28.  if v1 == 0 then goto L39cc3a;
  #L39cc2c.  if v0 == 0 then goto L39cc3a;
  #L39cc30.  v0:= (`i2.a`) v0 @kind object;
  #L39cc34.  call temp:= `a`(v0, v5) @signature `Li2/a;.a:(Le2/b;)Z` @kind interface;
  #L39cc3a.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39cc40.  v0:= temp @kind object;
  #L39cc42.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L39cc46.  if v0 == v1 then goto L39cc64;
  #L39cc4a.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L39cc4e.  if v0 == v1 then goto L39cc64;
  #L39cc52.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L39cc56.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39cc5c.  v0:= temp;
  #L39cc5e.  if v0 != 0 then goto L39cc64;
  #L39cc62.  goto L39cc3a;
  #L39cc64.  throw v4;
  catch `java.lang.Throwable` @[L39cb92..L39cb9c] goto L39cb9e;
  catch `java.lang.Throwable` @[L39cba0..L39cba6] goto L39cc04;
}
