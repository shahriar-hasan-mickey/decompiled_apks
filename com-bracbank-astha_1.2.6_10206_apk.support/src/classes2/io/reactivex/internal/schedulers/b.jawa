record `io.reactivex.internal.schedulers.b` @kind class @AccessFlag PUBLIC_FINAL extends `b2.q` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.b.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.b.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.b.e` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.internal.schedulers.b.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.internal.schedulers.b$c` `@@io.reactivex.internal.schedulers.b.g` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.b$a` `@@io.reactivex.internal.schedulers.b.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39c49c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39c4a0.  `@@io.reactivex.internal.schedulers.b.f` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L39c4a4.  v0:= new `io.reactivex.internal.schedulers.b$c`;
  #L39c4a8.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c4ac.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L39c4b0.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39c4b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c4bc.  `@@io.reactivex.internal.schedulers.b.g` @type ^`io.reactivex.internal.schedulers.b$c` := v0 @kind object;
  #L39c4c0.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/d;.e:()V` @kind virtual;
  #L39c4c6.  v0:= "rx2.io-priority" @kind object;
  #L39c4ca.  v1:= 5I;
  #L39c4cc.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39c4d2.  v0:= temp @kind object;
  #L39c4d4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39c4da.  v0:= temp;
  #L39c4dc.  v1:= 10I;
  #L39c4e0.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L39c4e6.  v0:= temp;
  #L39c4e8.  v1:= 1I;
  #L39c4ea.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L39c4f0.  v0:= temp;
  #L39c4f2.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c4f6.  v2:= "RxCachedThreadScheduler" @kind object;
  #L39c4fa.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L39c500.  `@@io.reactivex.internal.schedulers.b.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L39c504.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L39c508.  v3:= "RxCachedWorkerPoolEvictor" @kind object;
  #L39c50c.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L39c512.  `@@io.reactivex.internal.schedulers.b.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L39c516.  v0:= new `io.reactivex.internal.schedulers.b$a`;
  #L39c51a.  v2:= 0L;
  #L39c51e.  v4:= 0I;
  #L39c520.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/internal/schedulers/b$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c526.  `@@io.reactivex.internal.schedulers.b.h` @type ^`io.reactivex.internal.schedulers.b$a` := v0 @kind object;
  #L39c52a.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/b$a;.e:()V` @kind virtual;
  #L39c530.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39c544.  v0:= `@@io.reactivex.internal.schedulers.b.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L39c548.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c54e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.b` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39c560.  call `<init>`(v1) @signature `Lb2/q;.<init>:()V` @kind direct;
  #L39c566.  v1.`io.reactivex.internal.schedulers.b.b` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L39c56a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L39c56e.  v0:= `@@io.reactivex.internal.schedulers.b.h` @type ^`io.reactivex.internal.schedulers.b$a` @kind object;
  #L39c572.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L39c578.  v1.`io.reactivex.internal.schedulers.b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L39c57c.  call `d`(v1) @signature `Lio/reactivex/internal/schedulers/b;.d:()V` @kind virtual;
  #L39c582.  return @kind void;
}
procedure `b2.q$b` `a`(`io.reactivex.internal.schedulers.b` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/b;.a:()Lb2/q$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39c470.  v0:= new `io.reactivex.internal.schedulers.b$b`;
  #L39c474.  v1:= v2.`io.reactivex.internal.schedulers.b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39c478.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39c47e.  v1:= temp @kind object;
  #L39c480.  v1:= (`io.reactivex.internal.schedulers.b$a`) v1 @kind object;
  #L39c484.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/b$b;.<init>:(Lio/reactivex/internal/schedulers/b$a;)V` @kind direct;
  #L39c48a.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.internal.schedulers.b` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39c594.  v0:= new `io.reactivex.internal.schedulers.b$a`;
  #L39c598.  v1:= `@@io.reactivex.internal.schedulers.b.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39c59c.  v2:= v5.`io.reactivex.internal.schedulers.b.b` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L39c5a0.  v3:= 60L;
  #L39c5a4.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/internal/schedulers/b$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L39c5aa.  v1:= v5.`io.reactivex.internal.schedulers.b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39c5ae.  v2:= `@@io.reactivex.internal.schedulers.b.h` @type ^`io.reactivex.internal.schedulers.b$a` @kind object;
  #L39c5b2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39c5b8.  v1:= temp;
  #L39c5ba.  if v1 != 0 then goto L39c5c4;
  #L39c5be.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/b$a;.e:()V` @kind virtual;
  #L39c5c4.  return @kind void;
}
