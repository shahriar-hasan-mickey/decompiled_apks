record `io.reactivex.internal.schedulers.g$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.g$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.g$c` `io.reactivex.internal.schedulers.g$a.b` @AccessFlag PRIVATE_FINAL;
  `long` `io.reactivex.internal.schedulers.g$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.g$a` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.schedulers.g$c` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/g$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/g$c;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39d1d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39d1da.  v0.`io.reactivex.internal.schedulers.g$a.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L39d1de.  v0.`io.reactivex.internal.schedulers.g$a.b` @type ^`io.reactivex.internal.schedulers.g$c` := v2 @kind object;
  #L39d1e2.  v0.`io.reactivex.internal.schedulers.g$a.c` @type ^`long` := v3 @kind wide;
  #L39d1e6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.g$a` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/g$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39d1f8.  v0:= v5.`io.reactivex.internal.schedulers.g$a.b` @type ^`io.reactivex.internal.schedulers.g$c` @kind object;
  #L39d1fc.  v0:= v0.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` @kind boolean;
  #L39d200.  if v0 != 0 then goto L39d258;
  #L39d204.  v0:= v5.`io.reactivex.internal.schedulers.g$a.b` @type ^`io.reactivex.internal.schedulers.g$c` @kind object;
  #L39d208.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39d20c.  call temp:= `a`(v0, v1) @signature `Lb2/q$b;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L39d212.  v0:= temp @kind wide;
  #L39d214.  v2:= v5.`io.reactivex.internal.schedulers.g$a.c` @type ^`long` @kind wide;
  #L39d218.  v4:= lcmp(v2, v0);
  #L39d21c.  if v4 <= 0 then goto L39d242;
  #L39d220.  v2:= v2 - v0 @kind long;
  #L39d222.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L39d228.  goto L39d242;
  #L39d22a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L39d22c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39d232.  v1:= temp @kind object;
  #L39d234.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L39d23a.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39d240.  return @kind void;
  #L39d242.  v0:= v5.`io.reactivex.internal.schedulers.g$a.b` @type ^`io.reactivex.internal.schedulers.g$c` @kind object;
  #L39d246.  v0:= v0.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` @kind boolean;
  #L39d24a.  if v0 != 0 then goto L39d258;
  #L39d24e.  v0:= v5.`io.reactivex.internal.schedulers.g$a.a` @type ^`java.lang.Runnable` @kind object;
  #L39d252.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L39d258.  return @kind void;
  catch `java.lang.InterruptedException` @[L39d222..L39d228] goto L39d22a;
}
