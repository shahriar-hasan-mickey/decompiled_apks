record `io.reactivex.internal.schedulers.ScheduledDirectTask` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class, `java.util.concurrent.Callable` @kind interface {
}
global `long` `@@io.reactivex.internal.schedulers.ScheduledDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39c9fc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L39ca02.  return @kind void;
}
procedure `java.lang.Void` `b`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.b:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39c9a4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39c9aa.  v0:= temp @kind object;
  #L39c9ac.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L39c9b0.  v0:= 0I;
  #L39c9b2.  v1:= v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` @kind object;
  #L39c9b6.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L39c9bc.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39c9c0.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L39c9c6.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L39c9ca.  return v0 @kind object;
  #L39c9cc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39c9ce.  v2:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39c9d2.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L39c9d8.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L39c9dc.  throw v1;
  catch `java.lang.Throwable` @[L39c9b2..L39c9bc] goto L39c9cc;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L39c988.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.b:()Ljava/lang/Void;` @kind virtual;
  #L39c98e.  v0:= temp @kind object;
  #L39c990.  return v0 @kind object;
}
