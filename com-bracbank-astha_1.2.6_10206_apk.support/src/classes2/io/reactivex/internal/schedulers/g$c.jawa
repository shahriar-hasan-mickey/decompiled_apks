record `io.reactivex.internal.schedulers.g$c` @kind class @AccessFlag FINAL extends `b2.q$b` @kind class {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.internal.schedulers.g$c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.g$c.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.g$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.g$c.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.g$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/g$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L39d490.  call `<init>`(v1) @signature `Lb2/q$b;.<init>:()V` @kind direct;
  #L39d496.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L39d49a.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L39d4a0.  v1.`io.reactivex.internal.schedulers.g$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L39d4a4.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L39d4a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39d4ae.  v1.`io.reactivex.internal.schedulers.g$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L39d4b2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L39d4b6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39d4bc.  v1.`io.reactivex.internal.schedulers.g$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L39d4c0.  return @kind void;
}
procedure `e2.b` `b`(`io.reactivex.internal.schedulers.g$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/g$c;.b:(Ljava/lang/Runnable;)Le2/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39d42c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39d430.  call temp:= `a`(v2, v0) @signature `Lb2/q$b;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L39d436.  v0:= temp @kind wide;
  #L39d438.  call temp:= `f`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/g$c;.f:(Ljava/lang/Runnable;J)Le2/b;` @kind virtual;
  #L39d43e.  v3:= temp @kind object;
  #L39d440.  return v3 @kind object;
}
procedure `e2.b` `c`(`io.reactivex.internal.schedulers.g$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/internal/schedulers/g$c;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Le2/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39d454.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L39d458.  call temp:= `a`(v2, v0) @signature `Lb2/q$b;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L39d45e.  v0:= temp @kind wide;
  #L39d460.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L39d466.  v4:= temp @kind wide;
  #L39d468.  v0:= v0 + v4 @kind long;
  #L39d46a.  v4:= new `io.reactivex.internal.schedulers.g$a`;
  #L39d46e.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/internal/schedulers/g$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/g$c;J)V` @kind direct;
  #L39d474.  call temp:= `f`(v2, v4, v0) @signature `Lio/reactivex/internal/schedulers/g$c;.f:(Ljava/lang/Runnable;J)Le2/b;` @kind virtual;
  #L39d47a.  v3:= temp @kind object;
  #L39d47c.  return v3 @kind object;
}
procedure `boolean` `d`(`io.reactivex.internal.schedulers.g$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/g$c;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39d350.  v0:= v1.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` @kind boolean;
  #L39d354.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.g$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/g$c;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39d4d4.  v0:= 1I;
  #L39d4d6.  v1.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` := v0 @kind boolean;
  #L39d4da.  return @kind void;
}
procedure `e2.b` `f`(`io.reactivex.internal.schedulers.g$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/g$c;.f:(Ljava/lang/Runnable;J)Le2/b;` @AccessFlag  {
    temp;
    v0;

  #L39d368.  v0:= v1.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` @kind boolean;
  #L39d36c.  if v0 == 0 then goto L39d376;
  #L39d370.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.a` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L39d374.  return v2 @kind object;
  #L39d376.  v0:= new `io.reactivex.internal.schedulers.g$b`;
  #L39d37a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L39d380.  v3:= temp @kind object;
  #L39d382.  v4:= v1.`io.reactivex.internal.schedulers.g$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L39d386.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L39d38c.  v4:= temp;
  #L39d38e.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/g$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L39d394.  v2:= v1.`io.reactivex.internal.schedulers.g$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L39d398.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L39d39e.  v2:= v1.`io.reactivex.internal.schedulers.g$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L39d3a2.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39d3a8.  v2:= temp;
  #L39d3aa.  if v2 != 0 then goto L39d408;
  #L39d3ae.  v2:= 1I;
  #L39d3b0.  v3:= v1.`io.reactivex.internal.schedulers.g$c.d` @type ^`boolean` @kind boolean;
  #L39d3b4.  if v3 == 0 then goto L39d3c8;
  #L39d3b8.  v2:= v1.`io.reactivex.internal.schedulers.g$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L39d3bc.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L39d3c2.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.a` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L39d3c6.  return v2 @kind object;
  #L39d3c8.  v3:= v1.`io.reactivex.internal.schedulers.g$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L39d3cc.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L39d3d2.  v3:= temp @kind object;
  #L39d3d4.  v3:= (`io.reactivex.internal.schedulers.g$b`) v3 @kind object;
  #L39d3d8.  if v3 != 0 then goto L39d3f4;
  #L39d3dc.  v3:= v1.`io.reactivex.internal.schedulers.g$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L39d3e0.  v2:= -v2 @kind int;
  #L39d3e2.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L39d3e8.  v2:= temp;
  #L39d3ea.  if v2 != 0 then goto L39d3b0;
  #L39d3ee.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.a` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L39d3f2.  return v2 @kind object;
  #L39d3f4.  v4:= v3.`io.reactivex.internal.schedulers.g$b.d` @type ^`boolean` @kind boolean;
  #L39d3f8.  if v4 != 0 then goto L39d3b0;
  #L39d3fc.  v3:= v3.`io.reactivex.internal.schedulers.g$b.a` @type ^`java.lang.Runnable` @kind object;
  #L39d400.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L39d406.  goto L39d3b0;
  #L39d408.  v2:= new `io.reactivex.internal.schedulers.g$c$a`;
  #L39d40c.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/schedulers/g$c$a;.<init>:(Lio/reactivex/internal/schedulers/g$c;Lio/reactivex/internal/schedulers/g$b;)V` @kind direct;
  #L39d412.  call temp:= `c`(v2) @signature `Lio/reactivex/disposables/a;.c:(Ljava/lang/Runnable;)Le2/b;` @kind static;
  #L39d418.  v2:= temp @kind object;
  #L39d41a.  return v2 @kind object;
}
