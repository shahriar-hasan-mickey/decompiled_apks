record `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `e2.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.AbstractDirectTask.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.b` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.AbstractDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39bc88.  v0:= new `java.util.concurrent.FutureTask`;
  #L39bc8c.  v1:= `@@j2.a.b` @type ^`java.lang.Runnable` @kind object;
  #L39bc90.  v2:= 0I;
  #L39bc92.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L39bc98.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L39bc9c.  v0:= new `java.util.concurrent.FutureTask`;
  #L39bca0.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L39bca6.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.b` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L39bcaa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.AbstractDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39bcbc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39bcc2.  v0.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L39bcc6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.a:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L39bd34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39bd3a.  v0:= temp @kind object;
  #L39bd3c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L39bd40.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bd44.  if v0 != v1 then goto L39bd4a;
  #L39bd48.  goto L39bd7c;
  #L39bd4a.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bd4e.  if v0 != v1 then goto L39bd70;
  #L39bd52.  v0:= v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L39bd56.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39bd5c.  v1:= temp @kind object;
  #L39bd5e.  if v0 == v1 then goto L39bd66;
  #L39bd62.  v0:= 1I;
  #L39bd64.  goto L39bd68;
  #L39bd66.  v0:= 0I;
  #L39bd68.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39bd6e.  goto L39bd7c;
  #L39bd70.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39bd76.  v0:= temp;
  #L39bd78.  if v0 == 0 then goto L39bd34;
  #L39bd7c.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L39bc50.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39bc56.  v0:= temp @kind object;
  #L39bc58.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L39bc5c.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bc60.  if v0 == v1 then goto L39bc72;
  #L39bc64.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bc68.  if v0 != v1 then goto L39bc6e;
  #L39bc6c.  goto L39bc72;
  #L39bc6e.  v0:= 0I;
  #L39bc70.  goto L39bc74;
  #L39bc72.  v0:= 1I;
  #L39bc74.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.AbstractDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.e:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L39bcd8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39bcde.  v0:= temp @kind object;
  #L39bce0.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L39bce4.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.a` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bce8.  if v0 == v1 then goto L39bd20;
  #L39bcec.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L39bcf0.  if v0 == v1 then goto L39bd20;
  #L39bcf4.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39bcfa.  v1:= temp;
  #L39bcfc.  if v1 == 0 then goto L39bd20;
  #L39bd00.  if v0 == 0 then goto L39bd20;
  #L39bd04.  v1:= v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L39bd08.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L39bd0e.  v2:= temp @kind object;
  #L39bd10.  if v1 == v2 then goto L39bd18;
  #L39bd14.  v1:= 1I;
  #L39bd16.  goto L39bd1a;
  #L39bd18.  v1:= 0I;
  #L39bd1a.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L39bd20.  return @kind void;
}
