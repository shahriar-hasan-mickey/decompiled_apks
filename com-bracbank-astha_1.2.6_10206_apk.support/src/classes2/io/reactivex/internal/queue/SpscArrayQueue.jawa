record `io.reactivex.internal.queue.SpscArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `k2.i` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.consumerIndex` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscArrayQueue.lookAheadStep` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscArrayQueue.mask` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.producerIndex` @AccessFlag FINAL;
  `long` `io.reactivex.internal.queue.SpscArrayQueue.producerLookAhead` @AccessFlag ;
}
global `java.lang.Integer` `@@io.reactivex.internal.queue.SpscArrayQueue.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@io.reactivex.internal.queue.SpscArrayQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b698.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L39b69c.  v1:= 4096I;
  #L39b6a0.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39b6a6.  v0:= temp @kind object;
  #L39b6a8.  `@@io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`java.lang.Integer` := v0 @kind object;
  #L39b6ac.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39b6c0.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/f;.a:(I)I` @kind static;
  #L39b6c6.  v0:= temp;
  #L39b6c8.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L39b6ce.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L39b6d4.  v0:= temp;
  #L39b6d6.  v0:= v0 + -1;
  #L39b6da.  v1.`io.reactivex.internal.queue.SpscArrayQueue.mask` @type ^`int` := v0;
  #L39b6de.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39b6e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39b6e8.  v1.`io.reactivex.internal.queue.SpscArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39b6ec.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39b6f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39b6f6.  v1.`io.reactivex.internal.queue.SpscArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39b6fa.  v2:= v2 / 4;
  #L39b6fe.  v0:= `@@io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`java.lang.Integer` @kind object;
  #L39b702.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39b708.  v0:= temp;
  #L39b70a.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L39b710.  v2:= temp;
  #L39b712.  v1.`io.reactivex.internal.queue.SpscArrayQueue.lookAheadStep` @type ^`int` := v2;
  #L39b716.  return @kind void;
}
procedure `int` `a`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @AccessFlag  {
    temp;

  #L39b600.  v2:= (`int`) v1 @kind l2i;
  #L39b602.  v1:= v0.`io.reactivex.internal.queue.SpscArrayQueue.mask` @type ^`int`;
  #L39b606.  v1:= v1 ^& v2 @kind int;
  #L39b608.  return v1;
}
procedure `int` `b`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.b:(JI)I` @AccessFlag  {
    temp;

  #L39b61c.  v2:= (`int`) v1 @kind l2i;
  #L39b61e.  v1:= v2 ^& v3 @kind int;
  #L39b622.  return v1;
}
procedure `java.lang.Object` `c`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.c:(I)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L39b634.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39b63a.  v1:= temp @kind object;
  #L39b63c.  return v1 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b728.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L39b72e.  v0:= temp @kind object;
  #L39b730.  if v0 != 0 then goto L39b728;
  #L39b734.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L39b73a.  v0:= temp;
  #L39b73c.  if v0 != 0 then goto L39b742;
  #L39b740.  goto L39b728;
  #L39b742.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.d:(J)V` @AccessFlag  {
    temp;
    v0;

  #L39b754.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b758.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L39b75e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;

  #L39b770.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39b776.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(J)V` @AccessFlag  {
    temp;
    v0;

  #L39b788.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b78c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L39b792.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.SpscArrayQueue` v5 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39b540.  v0:= v5.`io.reactivex.internal.queue.SpscArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b544.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39b54a.  v0:= temp @kind wide;
  #L39b54c.  v2:= v5.`io.reactivex.internal.queue.SpscArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b550.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39b556.  v2:= temp @kind wide;
  #L39b558.  v4:= lcmp(v0, v2);
  #L39b55c.  if v4 != 0 then goto L39b564;
  #L39b560.  v0:= 1I;
  #L39b562.  goto L39b566;
  #L39b564.  v0:= 0I;
  #L39b566.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39b578.  v0:= "Null is not a valid element" @kind object;
  #L39b57c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39b582.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.mask` @type ^`int`;
  #L39b586.  v1:= v7.`io.reactivex.internal.queue.SpscArrayQueue.producerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b58a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39b590.  v1:= temp @kind wide;
  #L39b592.  call temp:= `b`(v7, v1, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.b:(JI)I` @kind virtual;
  #L39b598.  v3:= temp;
  #L39b59a.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.producerLookAhead` @type ^`long` @kind wide;
  #L39b59e.  v6:= lcmp(v1, v4);
  #L39b5a2.  if v6 < 0 then goto L39b5d8;
  #L39b5a6.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.lookAheadStep` @type ^`int`;
  #L39b5aa.  v4:= (`long`) v4 @kind i2l;
  #L39b5ac.  v4:= v4 + v1 @kind long;
  #L39b5ae.  call temp:= `b`(v7, v4, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.b:(JI)I` @kind virtual;
  #L39b5b4.  v0:= temp;
  #L39b5b6.  call temp:= `c`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L39b5bc.  v0:= temp @kind object;
  #L39b5be.  if v0 != 0 then goto L39b5c8;
  #L39b5c2.  v7.`io.reactivex.internal.queue.SpscArrayQueue.producerLookAhead` @type ^`long` := v4 @kind wide;
  #L39b5c6.  goto L39b5d8;
  #L39b5c8.  call temp:= `c`(v7, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L39b5ce.  v0:= temp @kind object;
  #L39b5d0.  if v0 == 0 then goto L39b5d8;
  #L39b5d4.  v8:= 0I;
  #L39b5d6.  return v8;
  #L39b5d8.  call `e`(v7, v3, v8) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(ILjava/lang/Object;)V` @kind virtual;
  #L39b5de.  v3:= 1L;
  #L39b5e2.  v1:= v1 + v3 @kind long;
  #L39b5e4.  call `f`(v7, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(J)V` @kind virtual;
  #L39b5ea.  v8:= 1I;
  #L39b5ec.  return v8;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39b650.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.consumerIndex` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b654.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39b65a.  v0:= temp @kind wide;
  #L39b65c.  call temp:= `a`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @kind virtual;
  #L39b662.  v2:= temp;
  #L39b664.  call temp:= `c`(v7, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.c:(I)Ljava/lang/Object;` @kind virtual;
  #L39b66a.  v3:= temp @kind object;
  #L39b66c.  v4:= 0I;
  #L39b66e.  if v3 != 0 then goto L39b674;
  #L39b672.  return v4 @kind object;
  #L39b674.  v5:= 1L;
  #L39b678.  v0:= v0 + v5 @kind long;
  #L39b67a.  call `d`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.d:(J)V` @kind virtual;
  #L39b680.  call `e`(v7, v2, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(ILjava/lang/Object;)V` @kind virtual;
  #L39b686.  return v3 @kind object;
}
