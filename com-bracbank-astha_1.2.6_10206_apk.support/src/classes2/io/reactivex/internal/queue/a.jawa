record `io.reactivex.internal.queue.a` @kind class @AccessFlag PUBLIC_FINAL extends `k2.i` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.a.b` @AccessFlag ;
  `long` `io.reactivex.internal.queue.a.c` @AccessFlag ;
  `int` `io.reactivex.internal.queue.a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.a.e` @AccessFlag ;
  `int` `io.reactivex.internal.queue.a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.a.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.a.h` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.queue.a.i` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.queue.a.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39ba6c.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L39ba70.  v1:= 4096I;
  #L39ba74.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L39ba7a.  v0:= temp @kind object;
  #L39ba7c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L39ba82.  v0:= temp;
  #L39ba84.  `@@io.reactivex.internal.queue.a.i` @type ^`int` := v0;
  #L39ba88.  v0:= new `java.lang.Object`;
  #L39ba8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ba92.  `@@io.reactivex.internal.queue.a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L39ba96.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.a` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39baa8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39baae.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39bab2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39bab8.  v3.`io.reactivex.internal.queue.a.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39babc.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39bac0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39bac6.  v3.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39baca.  v0:= 8I;
  #L39bace.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L39bad4.  v4:= temp;
  #L39bad6.  call temp:= `a`(v4) @signature `Lio/reactivex/internal/util/f;.a:(I)I` @kind static;
  #L39badc.  v4:= temp;
  #L39bade.  v0:= v4 + -1;
  #L39bae2.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L39bae6.  v2:= v4 + 1;
  #L39baea.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L39baf0.  v3.`io.reactivex.internal.queue.a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L39baf4.  v3.`io.reactivex.internal.queue.a.d` @type ^`int` := v0;
  #L39baf8.  call `a`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.a:(I)V` @kind direct;
  #L39bafe.  v3.`io.reactivex.internal.queue.a.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L39bb02.  v3.`io.reactivex.internal.queue.a.f` @type ^`int` := v0;
  #L39bb06.  v0:= v0 + -1;
  #L39bb0a.  v0:= (`long`) v0 @kind i2l;
  #L39bb0c.  v3.`io.reactivex.internal.queue.a.c` @type ^`long` := v0 @kind wide;
  #L39bb10.  v0:= 0L;
  #L39bb14.  call `p`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.p:(J)V` @kind direct;
  #L39bb1a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.queue.a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39bb2c.  v2:= v2 / 4;
  #L39bb30.  v0:= `@@io.reactivex.internal.queue.a.i` @type ^`int`;
  #L39bb34.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L39bb3a.  v2:= temp;
  #L39bb3c.  v1.`io.reactivex.internal.queue.a.b` @type ^`int` := v2;
  #L39bb40.  return @kind void;
}
procedure `int` `b`(`int` v0 ) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L39b8b4.  return v0;
}
procedure `int` `c`(`long` v0 , `int` v2 ) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L39b8c8.  v1:= (`int`) v0 @kind l2i;
  #L39b8ca.  v0:= v1 ^& v2 @kind int;
  #L39b8ce.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L39b8d4.  v0:= temp;
  #L39b8d6.  return v0;
}
procedure `long` `d`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.d:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39b9ec.  v0:= v2.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39b9f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39b9f6.  v0:= temp @kind wide;
  #L39b9f8.  return v0 @kind wide;
}
procedure `long` `e`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.e:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39ba0c.  v0:= v2.`io.reactivex.internal.queue.a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39ba10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ba16.  v0:= temp @kind wide;
  #L39ba18.  return v0 @kind wide;
}
procedure `long` `f`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.f:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39ba2c.  v0:= v2.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39ba30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ba36.  v0:= temp @kind wide;
  #L39ba38.  return v0 @kind wide;
}
procedure `java.lang.Object` `g`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L39b8e8.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L39b8ee.  v0:= temp @kind object;
  #L39b8f0.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `i`(`io.reactivex.internal.queue.a` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/queue/a;.i:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39b9bc.  call temp:= `b`(v4) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L39b9c2.  v4:= temp;
  #L39b9c4.  call temp:= `g`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L39b9ca.  v0:= temp @kind object;
  #L39b9cc.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L39b9d0.  v1:= 0I;
  #L39b9d2.  call `n`(v3, v4, v1) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39b9d8.  return v0 @kind object;
}
procedure `long` `j`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.j:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39ba4c.  v0:= v2.`io.reactivex.internal.queue.a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39ba50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39ba56.  v0:= temp @kind wide;
  #L39ba58.  return v0 @kind wide;
}
procedure `java.lang.Object` `k`(`io.reactivex.internal.queue.a` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/queue/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L39b904.  v3.`io.reactivex.internal.queue.a.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L39b908.  call temp:= `c`(v5, v7) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L39b90e.  v7:= temp;
  #L39b910.  call temp:= `g`(v4, v7) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L39b916.  v0:= temp @kind object;
  #L39b918.  if v0 == 0 then goto L39b930;
  #L39b91c.  v1:= 0I;
  #L39b91e.  call `n`(v4, v7, v1) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39b924.  v1:= 1L;
  #L39b928.  v5:= v5 + v1 @kind long;
  #L39b92a.  call `m`(v3, v5) @signature `Lio/reactivex/internal/queue/a;.m:(J)V` @kind direct;
  #L39b930.  return v0 @kind object;
}
procedure `void` `l`(`io.reactivex.internal.queue.a` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39bb80.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L39bb86.  v0:= temp;
  #L39bb88.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L39bb8c.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L39bb92.  v4.`io.reactivex.internal.queue.a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L39bb96.  v10:= v10 + v6 @kind long;
  #L39bb98.  v2:= 1L;
  #L39bb9c.  v10:= v10 - v2 @kind long;
  #L39bb9e.  v4.`io.reactivex.internal.queue.a.c` @type ^`long` := v10 @kind wide;
  #L39bba2.  call `n`(v1, v8, v9) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39bba8.  call `o`(v4, v5, v1) @signature `Lio/reactivex/internal/queue/a;.o:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L39bbae.  v9:= `@@io.reactivex.internal.queue.a.j` @type ^`java.lang.Object` @kind object;
  #L39bbb2.  call `n`(v5, v8, v9) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39bbb8.  v6:= v6 + v2 @kind long;
  #L39bbba.  call `p`(v4, v6) @signature `Lio/reactivex/internal/queue/a;.p:(J)V` @kind direct;
  #L39bbc0.  return @kind void;
}
procedure `void` `m`(`io.reactivex.internal.queue.a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/a;.m:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39bbd4.  v0:= v1.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39bbd8.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L39bbde.  return @kind void;
}
procedure `void` `n`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L39bbf0.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L39bbf6.  return @kind void;
}
procedure `void` `o`(`io.reactivex.internal.queue.a` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lio/reactivex/internal/queue/a;.o:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39bc08.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L39bc0e.  v0:= temp;
  #L39bc10.  v0:= v0 + -1;
  #L39bc14.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L39bc1a.  v0:= temp;
  #L39bc1c.  call `n`(v2, v0, v3) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39bc22.  return @kind void;
}
procedure `void` `p`(`io.reactivex.internal.queue.a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/a;.p:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39bc34.  v0:= v1.`io.reactivex.internal.queue.a.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39bc38.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L39bc3e.  return @kind void;
}
procedure `boolean` `q`(`io.reactivex.internal.queue.a` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L39b88c.  call `n`(v1, v5, v2) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39b892.  v1:= 1L;
  #L39b896.  v3:= v3 + v1 @kind long;
  #L39b898.  call `p`(v0, v3) @signature `Lio/reactivex/internal/queue/a;.p:(J)V` @kind direct;
  #L39b89e.  v1:= 1I;
  #L39b8a0.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.a` v1 @kind this) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39bb54.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L39bb5a.  v0:= temp @kind object;
  #L39bb5c.  if v0 != 0 then goto L39bb54;
  #L39bb60.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L39bb66.  v0:= temp;
  #L39bb68.  if v0 != 0 then goto L39bb6e;
  #L39bb6c.  goto L39bb54;
  #L39bb6e.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.a` v5 @kind this) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39b7a4.  call temp:= `j`(v5) @signature `Lio/reactivex/internal/queue/a;.j:()J` @kind direct;
  #L39b7aa.  v0:= temp @kind wide;
  #L39b7ac.  call temp:= `f`(v5) @signature `Lio/reactivex/internal/queue/a;.f:()J` @kind direct;
  #L39b7b2.  v2:= temp @kind wide;
  #L39b7b4.  v4:= lcmp(v0, v2);
  #L39b7b8.  if v4 != 0 then goto L39b7c0;
  #L39b7bc.  v0:= 1I;
  #L39b7be.  goto L39b7c2;
  #L39b7c0.  v0:= 0I;
  #L39b7c2.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.a` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L39b7d4.  v0:= "Null is not a valid element" @kind object;
  #L39b7d8.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39b7de.  v2:= v11.`io.reactivex.internal.queue.a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L39b7e2.  call temp:= `e`(v11) @signature `Lio/reactivex/internal/queue/a;.e:()J` @kind direct;
  #L39b7e8.  v4:= temp @kind wide;
  #L39b7ea.  v0:= v11.`io.reactivex.internal.queue.a.d` @type ^`int`;
  #L39b7ee.  call temp:= `c`(v4, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L39b7f4.  v6:= temp;
  #L39b7f6.  v7:= v11.`io.reactivex.internal.queue.a.c` @type ^`long` @kind wide;
  #L39b7fa.  v1:= lcmp(v4, v7);
  #L39b7fe.  if v1 >= 0 then goto L39b810;
  #L39b802.  v1:= v11 @kind object;
  #L39b804.  v3:= v12 @kind object;
  #L39b806.  call temp:= `q`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L39b80c.  v12:= temp;
  #L39b80e.  return v12;
  #L39b810.  v1:= v11.`io.reactivex.internal.queue.a.b` @type ^`int`;
  #L39b814.  v7:= (`long`) v1 @kind i2l;
  #L39b816.  v7:= v7 + v4 @kind long;
  #L39b818.  call temp:= `c`(v7, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L39b81e.  v1:= temp;
  #L39b820.  call temp:= `g`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L39b826.  v1:= temp @kind object;
  #L39b828.  v9:= 1L;
  #L39b82c.  if v1 != 0 then goto L39b844;
  #L39b830.  v7:= v7 - v9 @kind long;
  #L39b832.  v11.`io.reactivex.internal.queue.a.c` @type ^`long` := v7 @kind wide;
  #L39b836.  v1:= v11 @kind object;
  #L39b838.  v3:= v12 @kind object;
  #L39b83a.  call temp:= `q`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L39b840.  v12:= temp;
  #L39b842.  return v12;
  #L39b844.  v9:= v9 + v4 @kind long;
  #L39b846.  call temp:= `c`(v9, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L39b84c.  v1:= temp;
  #L39b84e.  call temp:= `g`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L39b854.  v1:= temp @kind object;
  #L39b856.  if v1 != 0 then goto L39b868;
  #L39b85a.  v1:= v11 @kind object;
  #L39b85c.  v3:= v12 @kind object;
  #L39b85e.  call temp:= `q`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L39b864.  v12:= temp;
  #L39b866.  return v12;
  #L39b868.  v7:= (`long`) v0 @kind i2l;
  #L39b86a.  v1:= v11 @kind object;
  #L39b86c.  v3:= v4 @kind wide;
  #L39b86e.  v5:= v6;
  #L39b870.  v6:= v12 @kind object;
  #L39b872.  call `l`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L39b878.  v12:= 1I;
  #L39b87a.  return v12;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.a` v8 @kind this) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L39b944.  v0:= v8.`io.reactivex.internal.queue.a.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L39b948.  call temp:= `d`(v8) @signature `Lio/reactivex/internal/queue/a;.d:()J` @kind direct;
  #L39b94e.  v1:= temp @kind wide;
  #L39b950.  v3:= v8.`io.reactivex.internal.queue.a.f` @type ^`int`;
  #L39b954.  call temp:= `c`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L39b95a.  v4:= temp;
  #L39b95c.  call temp:= `g`(v0, v4) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L39b962.  v5:= temp @kind object;
  #L39b964.  v6:= `@@io.reactivex.internal.queue.a.j` @type ^`java.lang.Object` @kind object;
  #L39b968.  if v5 != v6 then goto L39b970;
  #L39b96c.  v6:= 1I;
  #L39b96e.  goto L39b972;
  #L39b970.  v6:= 0I;
  #L39b972.  v7:= 0I;
  #L39b974.  if v5 == 0 then goto L39b990;
  #L39b978.  if v6 != 0 then goto L39b990;
  #L39b97c.  call `n`(v0, v4, v7) @signature `Lio/reactivex/internal/queue/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L39b982.  v3:= 1L;
  #L39b986.  v1:= v1 + v3 @kind long;
  #L39b988.  call `m`(v8, v1) @signature `Lio/reactivex/internal/queue/a;.m:(J)V` @kind direct;
  #L39b98e.  return v5 @kind object;
  #L39b990.  if v6 == 0 then goto L39b9aa;
  #L39b994.  v4:= v3 + 1;
  #L39b998.  call temp:= `i`(v8, v0, v4) @signature `Lio/reactivex/internal/queue/a;.i:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L39b99e.  v0:= temp @kind object;
  #L39b9a0.  call temp:= `k`(v8, v0, v1, v3) @signature `Lio/reactivex/internal/queue/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L39b9a6.  v0:= temp @kind object;
  #L39b9a8.  return v0 @kind object;
  #L39b9aa.  return v7 @kind object;
}
