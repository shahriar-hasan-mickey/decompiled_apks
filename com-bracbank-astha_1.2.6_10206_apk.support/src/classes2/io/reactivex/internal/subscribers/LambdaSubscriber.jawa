record `io.reactivex.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.h` @kind interface, `d3.c` @kind interface, `e2.b` @kind interface {
  `h2.a` `io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @AccessFlag FINAL;
  `h2.d` `io.reactivex.internal.subscribers.LambdaSubscriber.onError` @AccessFlag FINAL;
  `h2.d` `io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @AccessFlag FINAL;
  `h2.d` `io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this, `h2.d` v1 @kind object, `h2.d` v2 @kind object, `h2.a` v3 @kind object, `h2.d` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lh2/d;Lh2/d;Lh2/a;Lh2/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39d9d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39d9d6.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`h2.d` := v1 @kind object;
  #L39d9da.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`h2.d` := v2 @kind object;
  #L39d9de.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`h2.a` := v3 @kind object;
  #L39d9e2.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`h2.d` := v4 @kind object;
  #L39d9e6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L39da78.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39da7e.  v0:= temp @kind object;
  #L39da80.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39da84.  if v0 == v1 then goto L39dac6;
  #L39da88.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L39da8e.  v0:= v4.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`h2.d` @kind object;
  #L39da92.  call `accept`(v0, v5) @signature `Lh2/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L39da98.  goto L39dacc;
  #L39da9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39da9c.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39daa2.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L39daa6.  v2:= 2I;
  #L39daa8.  v2:= new `java.lang.Throwable`[v2];
  #L39daac.  v3:= 0I;
  #L39daae.  v2[v3]:= v5 @kind object;
  #L39dab2.  v5:= 1I;
  #L39dab4.  v2[v5]:= v0 @kind object;
  #L39dab8.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L39dabe.  call `q`(v1) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39dac4.  goto L39dacc;
  #L39dac6.  call `q`(v5) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39dacc.  return @kind void;
  catch `java.lang.Throwable` @[L39da8e..L39da98] goto L39da9a;
}
procedure `void` `c`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `d3.c` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39db44.  call temp:= `f`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.f:(Ljava/util/concurrent/atomic/AtomicReference;Ld3/c;)Z` @kind static;
  #L39db4a.  v0:= temp;
  #L39db4c.  if v0 == 0 then goto L39db70;
  #L39db50.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`h2.d` @kind object;
  #L39db54.  call `accept`(v0, v1) @signature `Lh2/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L39db5a.  goto L39db70;
  #L39db5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39db5e.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39db64.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39db6a.  call `a`(v1, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39db70.  return @kind void;
  catch `java.lang.Throwable` @[L39db50..L39db5a] goto L39db5c;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L39d9f8.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39d9fe.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39d9a8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39d9ae.  v0:= temp @kind object;
  #L39d9b0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39d9b4.  if v0 != v1 then goto L39d9bc;
  #L39d9b8.  v0:= 1I;
  #L39d9ba.  goto L39d9be;
  #L39d9bc.  v0:= 0I;
  #L39d9be.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L39da10.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L39da16.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39db90.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39db96.  v0:= temp @kind object;
  #L39db98.  v0:= (`d3.c`) v0 @kind object;
  #L39db9c.  call `g`(v0, v2) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39dba2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39da28.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39da2e.  v0:= temp @kind object;
  #L39da30.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39da34.  if v0 == v1 then goto L39da58;
  #L39da38.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L39da3e.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`h2.a` @kind object;
  #L39da42.  call `run`(v0) @signature `Lh2/a;.run:()V` @kind interface;
  #L39da48.  goto L39da58;
  #L39da4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39da4c.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39da52.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39da58.  return @kind void;
  catch `java.lang.Throwable` @[L39da3e..L39da48] goto L39da4a;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39daec.  call temp:= `d`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.d:()Z` @kind virtual;
  #L39daf2.  v0:= temp;
  #L39daf4.  if v0 != 0 then goto L39db24;
  #L39daf8.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`h2.d` @kind object;
  #L39dafc.  call `accept`(v0, v2) @signature `Lh2/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L39db02.  goto L39db24;
  #L39db04.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39db06.  call `b`(v2) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39db0c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39db12.  v0:= temp @kind object;
  #L39db14.  v0:= (`d3.c`) v0 @kind object;
  #L39db18.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39db1e.  call `a`(v1, v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39db24.  return @kind void;
  catch `java.lang.Throwable` @[L39daf8..L39db02] goto L39db04;
}
