record `io.reactivex.internal.subscribers.StrictSubscriber` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `b2.h` @kind interface, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.subscribers.StrictSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscribers.StrictSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.subscribers.StrictSubscriber.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.subscribers.StrictSubscriber.once` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscribers.StrictSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscribers.StrictSubscriber.s` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.StrictSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.StrictSubscriber` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Ld3/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39dbb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39dbba.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.actual` @type ^`d3.b` := v1 @kind object;
  #L39dbbe.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L39dbc2.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L39dbc8.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L39dbcc.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39dbd0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39dbd6.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L39dbda.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L39dbde.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39dbe4.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L39dbe8.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L39dbec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L39dbf2.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L39dbf6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39dc54.  v0:= 1I;
  #L39dc56.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L39dc5a.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.actual` @type ^`d3.b` @kind object;
  #L39dc5e.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39dc62.  call `b`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/d;.b:(Ld3/b;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L39dc68.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39dc9c.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L39dca0.  v1:= 0I;
  #L39dca2.  v2:= 1I;
  #L39dca4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L39dcaa.  v0:= temp;
  #L39dcac.  if v0 == 0 then goto L39dcca;
  #L39dcb0.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.actual` @type ^`d3.b` @kind object;
  #L39dcb4.  call `c`(v0, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L39dcba.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39dcbe.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39dcc2.  call temp:= `c`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ld3/c;)Z` @kind static;
  #L39dcc8.  goto L39dcea;
  #L39dcca.  call `cancel`(v4) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39dcd0.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L39dcd6.  v4:= new `java.lang.IllegalStateException`;
  #L39dcda.  v0:= "ยง2.12 violated: onSubscribe must be called at most once" @kind object;
  #L39dcde.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39dce4.  call `a`(v3, v4) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39dcea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.StrictSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39dc08.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` @kind boolean;
  #L39dc0c.  if v0 != 0 then goto L39dc1a;
  #L39dc10.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39dc14.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39dc1a.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39dcfc.  v0:= 0L;
  #L39dd00.  v2:= lcmp(v4, v0);
  #L39dd04.  if v2 > 0 then goto L39dd42;
  #L39dd08.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L39dd0e.  v0:= new `java.lang.IllegalArgumentException`;
  #L39dd12.  v1:= new `java.lang.StringBuilder`;
  #L39dd16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39dd1c.  v2:= "ยง3.9 violated: positive request amount required but it was " @kind object;
  #L39dd20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39dd26.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L39dd2c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39dd32.  v4:= temp @kind object;
  #L39dd34.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39dd3a.  call `a`(v3, v0) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39dd40.  goto L39dd50;
  #L39dd42.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39dd46.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39dd4a.  call `b`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L39dd50.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39dc2c.  v0:= 1I;
  #L39dc2e.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L39dc32.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.actual` @type ^`d3.b` @kind object;
  #L39dc36.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39dc3a.  call `a`(v0, v2, v1) @signature `Lio/reactivex/internal/util/d;.a:(Ld3/b;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L39dc40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39dc7c.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.actual` @type ^`d3.b` @kind object;
  #L39dc80.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39dc84.  call `c`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/d;.c:(Ld3/b;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L39dc8a.  return @kind void;
}
