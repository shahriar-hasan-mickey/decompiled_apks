record `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `k2.e` @kind interface {
}
global `long` `@@io.reactivex.internal.observers.BasicIntQueueDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.BasicIntQueueDisposable` v0 @kind this) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L38f4ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L38f4f2.  return @kind void;
}
procedure `boolean` `offer`(`io.reactivex.internal.observers.BasicIntQueueDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L38f4cc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L38f4d0.  v0:= "Should not be called" @kind object;
  #L38f4d4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38f4da.  throw v2;
}
