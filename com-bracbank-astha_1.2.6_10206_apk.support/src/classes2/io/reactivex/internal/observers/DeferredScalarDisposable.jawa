record `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `b2.p` `io.reactivex.internal.observers.DeferredScalarDisposable.actual` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarDisposable` v0 @kind this, `b2.p` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lb2/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L38f5ec.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L38f5f2.  v0.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`b2.p` := v1 @kind object;
  #L38f5f6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L38f62c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f632.  v0:= temp;
  #L38f634.  v0:= v0 ^& 54;
  #L38f638.  if v0 == 0 then goto L38f63e;
  #L38f63c.  return @kind void;
  #L38f63e.  v0:= 2I;
  #L38f640.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f646.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`b2.p` @kind object;
  #L38f64a.  call `onComplete`(v0) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L38f650.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L38f608.  v0:= 32I;
  #L38f60c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f612.  v0:= 0I;
  #L38f614.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L38f618.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L38f53c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f542.  v0:= temp;
  #L38f544.  v1:= 4I;
  #L38f546.  if v0 != v1 then goto L38f54e;
  #L38f54a.  v0:= 1I;
  #L38f54c.  goto L38f550;
  #L38f54e.  v0:= 0I;
  #L38f550.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38f6d0.  v0:= 4I;
  #L38f6d2.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L38f6d8.  v0:= 0I;
  #L38f6da.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L38f6de.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.f:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L38f664.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f66a.  v0:= temp;
  #L38f66c.  v1:= v0 ^& 54;
  #L38f670.  if v1 == 0 then goto L38f676;
  #L38f674.  return @kind void;
  #L38f676.  v1:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`b2.p` @kind object;
  #L38f67a.  v2:= 8I;
  #L38f67e.  if v0 != v2 then goto L38f69a;
  #L38f682.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v4 @kind object;
  #L38f686.  v4:= 16I;
  #L38f68a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f690.  v4:= 0I;
  #L38f692.  call `onNext`(v1, v4) @signature `Lb2/p;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L38f698.  goto L38f6a8;
  #L38f69a.  v0:= 2I;
  #L38f69c.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f6a2.  call `onNext`(v1, v4) @signature `Lb2/p;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L38f6a8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f6ae.  v4:= temp;
  #L38f6b0.  v0:= 4I;
  #L38f6b2.  if v4 == v0 then goto L38f6bc;
  #L38f6b6.  call `onComplete`(v1) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L38f6bc.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.g:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L38f6f0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f6f6.  v0:= temp;
  #L38f6f8.  v0:= v0 ^& 54;
  #L38f6fc.  if v0 == 0 then goto L38f708;
  #L38f700.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L38f706.  return @kind void;
  #L38f708.  v0:= 2I;
  #L38f70a.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f710.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`b2.p` @kind object;
  #L38f714.  call `a`(v0, v2) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L38f71a.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L38f58c.  v0:= 2I;
  #L38f58e.  v2:= v2 ^& v0 @kind int;
  #L38f590.  if v2 == 0 then goto L38f5a0;
  #L38f594.  v2:= 8I;
  #L38f598.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f59e.  return v0;
  #L38f5a0.  v2:= 0I;
  #L38f5a2.  return v2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L38f564.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f56a.  v0:= temp;
  #L38f56c.  v1:= 16I;
  #L38f570.  if v0 == v1 then goto L38f578;
  #L38f574.  v0:= 1I;
  #L38f576.  goto L38f57a;
  #L38f578.  v0:= 0I;
  #L38f57a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L38f5b4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L38f5ba.  v0:= temp;
  #L38f5bc.  v1:= 0I;
  #L38f5be.  v2:= 16I;
  #L38f5c2.  if v0 != v2 then goto L38f5da;
  #L38f5c6.  v0:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L38f5ca.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L38f5ce.  v1:= 32I;
  #L38f5d2.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L38f5d8.  return v0 @kind object;
  #L38f5da.  return v1 @kind object;
}
