record `io.reactivex.internal.observers.EmptyCompletableObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.b` @kind interface, `e2.b` @kind interface {
}
global `long` `@@io.reactivex.internal.observers.EmptyCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.EmptyCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L38f754.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L38f75a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.observers.EmptyCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38f7a0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L38f7a4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L38f7aa.  v0:= new `io.reactivex.exceptions.OnErrorNotImplementedException`;
  #L38f7ae.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/OnErrorNotImplementedException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L38f7b4.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L38f7ba.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.observers.EmptyCompletableObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L38f7cc.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L38f7d2.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.observers.EmptyCompletableObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38f72c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L38f732.  v0:= temp @kind object;
  #L38f734.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L38f738.  if v0 != v1 then goto L38f740;
  #L38f73c.  v0:= 1I;
  #L38f73e.  goto L38f742;
  #L38f740.  v0:= 0I;
  #L38f742.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.observers.EmptyCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L38f76c.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L38f772.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.EmptyCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/EmptyCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38f784.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L38f788.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L38f78e.  return @kind void;
}
