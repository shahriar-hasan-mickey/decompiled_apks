record `io.reactivex.internal.operators.observable.f$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.b` @kind class {
  `b2.p` `io.reactivex.internal.operators.observable.f$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.f$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.f$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.f$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.f$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.f$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.f$a` v0 @kind this, `b2.p` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/f$a;.<init>:(Lb2/p;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39a924.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/b;.<init>:()V` @kind direct;
  #L39a92a.  v0.`io.reactivex.internal.operators.observable.f$a.a` @type ^`b2.p` := v1 @kind object;
  #L39a92e.  v0.`io.reactivex.internal.operators.observable.f$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L39a932.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.f$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L39a974.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/f$a;.d:()Z` @kind virtual;
  #L39a97a.  v0:= temp;
  #L39a97c.  if v0 == 0 then goto L39a982;
  #L39a980.  return @kind void;
  #L39a982.  v0:= v2.`io.reactivex.internal.operators.observable.f$a.b` @type ^`java.util.Iterator` @kind object;
  #L39a986.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L39a98c.  v0:= temp @kind object;
  #L39a98e.  v1:= "The iterator returned a null value" @kind object;
  #L39a992.  call temp:= `d`(v0, v1) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39a998.  v0:= temp @kind object;
  #L39a99a.  v1:= v2.`io.reactivex.internal.operators.observable.f$a.a` @type ^`b2.p` @kind object;
  #L39a99e.  call `onNext`(v1, v0) @signature `Lb2/p;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39a9a4.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/f$a;.d:()Z` @kind virtual;
  #L39a9aa.  v0:= temp;
  #L39a9ac.  if v0 == 0 then goto L39a9b2;
  #L39a9b0.  return @kind void;
  #L39a9b2.  v0:= v2.`io.reactivex.internal.operators.observable.f$a.b` @type ^`java.util.Iterator` @kind object;
  #L39a9b6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L39a9bc.  v0:= temp;
  #L39a9be.  if v0 != 0 then goto L39a974;
  #L39a9c2.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/f$a;.d:()Z` @kind virtual;
  #L39a9c8.  v0:= temp;
  #L39a9ca.  if v0 != 0 then goto L39a9d8;
  #L39a9ce.  v0:= v2.`io.reactivex.internal.operators.observable.f$a.a` @type ^`b2.p` @kind object;
  #L39a9d2.  call `onComplete`(v0) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L39a9d8.  return @kind void;
  #L39a9da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39a9dc.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39a9e2.  v1:= v2.`io.reactivex.internal.operators.observable.f$a.a` @type ^`b2.p` @kind object;
  #L39a9e6.  call `a`(v1, v0) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39a9ec.  return @kind void;
  #L39a9ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39a9f0.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39a9f6.  v1:= v2.`io.reactivex.internal.operators.observable.f$a.a` @type ^`b2.p` @kind object;
  #L39a9fa.  call `a`(v1, v0) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39aa00.  return @kind void;
  catch `java.lang.Throwable` @[L39a982..L39a99a] goto L39a9ee;
  catch `java.lang.Throwable` @[L39a9b2..L39a9be] goto L39a9da;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.f$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a944.  v0:= 1I;
  #L39a946.  v1.`io.reactivex.internal.operators.observable.f$a.e` @type ^`boolean` := v0 @kind boolean;
  #L39a94a.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.observable.f$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a874.  v0:= v1.`io.reactivex.internal.operators.observable.f$a.c` @type ^`boolean` @kind boolean;
  #L39a878.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.f$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a95c.  v0:= 1I;
  #L39a95e.  v1.`io.reactivex.internal.operators.observable.f$a.c` @type ^`boolean` := v0 @kind boolean;
  #L39a962.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.observable.f$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/f$a;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a8a4.  v0:= 1I;
  #L39a8a6.  v2:= v2 ^& v0 @kind int;
  #L39a8a8.  if v2 == 0 then goto L39a8b2;
  #L39a8ac.  v1.`io.reactivex.internal.operators.observable.f$a.d` @type ^`boolean` := v0 @kind boolean;
  #L39a8b0.  return v0;
  #L39a8b2.  v2:= 0I;
  #L39a8b4.  return v2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.f$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a88c.  v0:= v1.`io.reactivex.internal.operators.observable.f$a.e` @type ^`boolean` @kind boolean;
  #L39a890.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.f$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/f$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39a8c8.  v0:= v3.`io.reactivex.internal.operators.observable.f$a.e` @type ^`boolean` @kind boolean;
  #L39a8cc.  v1:= 0I;
  #L39a8ce.  if v0 == 0 then goto L39a8d4;
  #L39a8d2.  return v1 @kind object;
  #L39a8d4.  v0:= v3.`io.reactivex.internal.operators.observable.f$a.f` @type ^`boolean` @kind boolean;
  #L39a8d8.  v2:= 1I;
  #L39a8da.  if v0 == 0 then goto L39a8f4;
  #L39a8de.  v0:= v3.`io.reactivex.internal.operators.observable.f$a.b` @type ^`java.util.Iterator` @kind object;
  #L39a8e2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L39a8e8.  v0:= temp;
  #L39a8ea.  if v0 != 0 then goto L39a8f8;
  #L39a8ee.  v3.`io.reactivex.internal.operators.observable.f$a.e` @type ^`boolean` := v2 @kind boolean;
  #L39a8f2.  return v1 @kind object;
  #L39a8f4.  v3.`io.reactivex.internal.operators.observable.f$a.f` @type ^`boolean` := v2 @kind boolean;
  #L39a8f8.  v0:= v3.`io.reactivex.internal.operators.observable.f$a.b` @type ^`java.util.Iterator` @kind object;
  #L39a8fc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L39a902.  v0:= temp @kind object;
  #L39a904.  v1:= "The iterator returned a null value" @kind object;
  #L39a908.  call temp:= `d`(v0, v1) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39a90e.  v0:= temp @kind object;
  #L39a910.  return v0 @kind object;
}
