record `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.p` @kind interface {
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @AccessFlag FINAL;
  `k2.j` `io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3996e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3996e6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.id` @type ^`long` := v2 @kind wide;
  #L3996ea.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` := v1 @kind object;
  #L3996ee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39973c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L399740.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L399744.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L39974a.  v0:= temp;
  #L39974c.  if v0 == 0 then goto L399774;
  #L399750.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L399754.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L399758.  if v0 != 0 then goto L399762;
  #L39975c.  call temp:= `g`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.g:()Z` @kind virtual;
  #L399762.  v2:= 1I;
  #L399764.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v2 @kind boolean;
  #L399768.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L39976c.  call `h`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.h:()V` @kind virtual;
  #L399772.  goto L39977a;
  #L399774.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39977a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v2 @kind this, `e2.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3997bc.  call temp:= `h`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L3997c2.  v0:= temp;
  #L3997c4.  if v0 == 0 then goto L39980a;
  #L3997c8.  v0:= instanceof @variable v3 @type ^`k2.e` @kind boolean;
  #L3997cc.  if v0 == 0 then goto L39980a;
  #L3997d0.  v3:= (`k2.e`) v3 @kind object;
  #L3997d4.  v0:= 7I;
  #L3997d6.  call temp:= `h`(v3, v0) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L3997dc.  v0:= temp;
  #L3997de.  v1:= 1I;
  #L3997e0.  if v0 != v1 then goto L3997fc;
  #L3997e4.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L3997e8.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`k2.j` := v3 @kind object;
  #L3997ec.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v1 @kind boolean;
  #L3997f0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L3997f4.  call `h`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.h:()V` @kind virtual;
  #L3997fa.  return @kind void;
  #L3997fc.  v1:= 2I;
  #L3997fe.  if v0 != v1 then goto L39980a;
  #L399802.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int` := v0;
  #L399806.  v2.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.queue` @type ^`k2.j` := v3 @kind object;
  #L39980a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.c:()V` @AccessFlag PUBLIC {
    temp;

  #L399700.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L399706.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L399718.  v0:= 1I;
  #L39971a.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L39971e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L399722.  call `h`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.h:()V` @kind virtual;
  #L399728.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39978c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.fusionMode` @type ^`int`;
  #L399790.  if v0 != 0 then goto L3997a0;
  #L399794.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L399798.  call `l`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.l:(Ljava/lang/Object;Lio/reactivex/internal/operators/observable/ObservableFlatMap$InnerObserver;)V` @kind virtual;
  #L39979e.  goto L3997aa;
  #L3997a0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.parent` @type ^`io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver` @kind object;
  #L3997a4.  call `h`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMap$MergeObserver;.h:()V` @kind virtual;
  #L3997aa.  return @kind void;
}
