record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `b2.p` @kind interface {
  `b2.p` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @AccessFlag FINAL;
  `e2.b` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @AccessFlag FINAL;
  `e2.a` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this, `b2.p` v1 @kind object, `h2.e` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.<init>:(Lb2/p;Lh2/e;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39a1e0.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L39a1e6.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` := v1 @kind object;
  #L39a1ea.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @type ^`h2.e` := v2 @kind object;
  #L39a1ee.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L39a1f2.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L39a1f6.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L39a1fc.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L39a200.  v1:= new `e2.a`;
  #L39a204.  call `<init>`(v1) @signature `Le2/a;.<init>:()V` @kind direct;
  #L39a20a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`e2.a` := v1 @kind object;
  #L39a20e.  v1:= 1I;
  #L39a210.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39a216.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a2f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39a2f8.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L39a2fe.  v0:= temp;
  #L39a300.  if v0 == 0 then goto L39a35c;
  #L39a304.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.delayErrors` @type ^`boolean` @kind boolean;
  #L39a308.  if v2 == 0 then goto L39a330;
  #L39a30c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39a312.  v2:= temp;
  #L39a314.  if v2 != 0 then goto L39a362;
  #L39a318.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39a31c.  call temp:= `b`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39a322.  v2:= temp @kind object;
  #L39a324.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` @kind object;
  #L39a328.  call `a`(v0, v2) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39a32e.  goto L39a362;
  #L39a330.  call `e`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.e:()V` @kind virtual;
  #L39a336.  v2:= 0I;
  #L39a338.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L39a33e.  v2:= temp;
  #L39a340.  if v2 <= 0 then goto L39a362;
  #L39a344.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39a348.  call temp:= `b`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39a34e.  v2:= temp @kind object;
  #L39a350.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` @kind object;
  #L39a354.  call `a`(v0, v2) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39a35a.  goto L39a362;
  #L39a35c.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39a362.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `e2.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a3f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @type ^`e2.b` @kind object;
  #L39a3fc.  call temp:= `i`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.i:(Le2/b;Le2/b;)Z` @kind static;
  #L39a402.  v0:= temp;
  #L39a404.  if v0 == 0 then goto L39a416;
  #L39a408.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @type ^`e2.b` := v2 @kind object;
  #L39a40c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` @kind object;
  #L39a410.  call `b`(v2, v1) @signature `Lb2/p;.b:(Le2/b;)V` @kind interface;
  #L39a416.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.c:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L39a268.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`e2.a` @kind object;
  #L39a26c.  call temp:= `a`(v0, v2) @signature `Le2/a;.a:(Le2/b;)Z` @kind virtual;
  #L39a272.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onComplete:()V` @kind virtual;
  #L39a278.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L39a228.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a180.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @type ^`e2.b` @kind object;
  #L39a184.  call temp:= `d`(v0) @signature `Le2/b;.d:()Z` @kind interface;
  #L39a18a.  v0:= temp;
  #L39a18c.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a23c.  v0:= 1I;
  #L39a23e.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @type ^`boolean` := v0 @kind boolean;
  #L39a242.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @type ^`e2.b` @kind object;
  #L39a246.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L39a24c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`e2.a` @kind object;
  #L39a250.  call `e`(v0) @signature `Le2/a;.e:()V` @kind virtual;
  #L39a256.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L39a28c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`e2.a` @kind object;
  #L39a290.  call temp:= `a`(v0, v2) @signature `Le2/a;.a:(Le2/b;)Z` @kind virtual;
  #L39a296.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39a29c.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.h:(I)I` @AccessFlag PUBLIC {
    temp;

  #L39a1b4.  v1:= v1 ^& 2;
  #L39a1b8.  return v1;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a1a0.  v0:= 1I;
  #L39a1a2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39a2b0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39a2b6.  v0:= temp;
  #L39a2b8.  if v0 != 0 then goto L39a2e2;
  #L39a2bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39a2c0.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L39a2c6.  v0:= temp @kind object;
  #L39a2c8.  if v0 == 0 then goto L39a2d8;
  #L39a2cc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` @kind object;
  #L39a2d0.  call `a`(v1, v0) @signature `Lb2/p;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39a2d6.  goto L39a2e2;
  #L39a2d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.actual` @type ^`b2.p` @kind object;
  #L39a2dc.  call `onComplete`(v0) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L39a2e2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39a374.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.mapper` @type ^`h2.e` @kind object;
  #L39a378.  call temp:= `apply`(v0, v3) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L39a37e.  v3:= temp @kind object;
  #L39a380.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L39a384.  call temp:= `d`(v3, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39a38a.  v3:= temp @kind object;
  #L39a38c.  v3:= (`b2.c`) v3 @kind object;
  #L39a390.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39a396.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver`;
  #L39a39a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver$InnerObserver;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;)V` @kind direct;
  #L39a3a0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.disposed` @type ^`boolean` @kind boolean;
  #L39a3a4.  if v1 != 0 then goto L39a3be;
  #L39a3a8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.set` @type ^`e2.a` @kind object;
  #L39a3ac.  call temp:= `b`(v1, v0) @signature `Le2/a;.b:(Le2/b;)Z` @kind virtual;
  #L39a3b2.  v1:= temp;
  #L39a3b4.  if v1 == 0 then goto L39a3be;
  #L39a3b8.  call `b`(v3, v0) @signature `Lb2/c;.b:(Lb2/b;)V` @kind interface;
  #L39a3be.  return @kind void;
  #L39a3c0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39a3c2.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39a3c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver.d` @type ^`e2.b` @kind object;
  #L39a3cc.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L39a3d2.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39a3d8.  return @kind void;
  catch `java.lang.Throwable` @[L39a374..L39a390] goto L39a3c0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$FlatMapCompletableMainObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39a1cc.  v0:= 0I;
  #L39a1ce.  return v0 @kind object;
}
