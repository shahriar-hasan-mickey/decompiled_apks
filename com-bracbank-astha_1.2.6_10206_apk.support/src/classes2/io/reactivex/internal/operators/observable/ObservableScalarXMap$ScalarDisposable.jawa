record `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `k2.e` @kind interface, `java.lang.Runnable` @kind interface {
  `b2.p` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `b2.p` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lb2/p;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39ad1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39ad22.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`b2.p` := v1 @kind object;
  #L39ad26.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` := v2 @kind object;
  #L39ad2a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39ad3c.  v0:= 3I;
  #L39ad3e.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39ad44.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39ac5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39ac62.  v0:= temp;
  #L39ac64.  v1:= 3I;
  #L39ac66.  if v0 != v1 then goto L39ac6e;
  #L39ac6a.  v0:= 1I;
  #L39ac6c.  goto L39ac70;
  #L39ac6e.  v0:= 0I;
  #L39ac70.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39ad58.  v0:= 3I;
  #L39ad5a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L39ad60.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39acc8.  v0:= 1I;
  #L39acca.  v2:= v2 ^& v0 @kind int;
  #L39accc.  if v2 == 0 then goto L39acd8;
  #L39acd0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39acd6.  return v0;
  #L39acd8.  v2:= 0I;
  #L39acda.  return v2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39ac84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39ac8a.  v0:= temp;
  #L39ac8c.  v1:= 1I;
  #L39ac8e.  if v0 == v1 then goto L39ac94;
  #L39ac92.  goto L39ac96;
  #L39ac94.  v1:= 0I;
  #L39ac96.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39aca8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L39acac.  v0:= "Should not be called!" @kind object;
  #L39acb0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39acb6.  throw v2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39acec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39acf2.  v0:= temp;
  #L39acf4.  v1:= 1I;
  #L39acf6.  if v0 != v1 then goto L39ad08;
  #L39acfa.  v0:= 3I;
  #L39acfc.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39ad02.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L39ad06.  return v0 @kind object;
  #L39ad08.  v0:= 0I;
  #L39ad0a.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39ad74.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39ad7a.  v0:= temp;
  #L39ad7c.  if v0 != 0 then goto L39adbc;
  #L39ad80.  v0:= 0I;
  #L39ad82.  v1:= 2I;
  #L39ad84.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39ad8a.  v0:= temp;
  #L39ad8c.  if v0 == 0 then goto L39adbc;
  #L39ad90.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`b2.p` @kind object;
  #L39ad94.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L39ad98.  call `onNext`(v0, v2) @signature `Lb2/p;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39ad9e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39ada4.  v0:= temp;
  #L39ada6.  if v0 != v1 then goto L39adbc;
  #L39adaa.  v0:= 3I;
  #L39adac.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39adb2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.observer` @type ^`b2.p` @kind object;
  #L39adb6.  call `onComplete`(v0) @signature `Lb2/p;.onComplete:()V` @kind interface;
  #L39adbc.  return @kind void;
}
