record `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `b2.s` @kind interface {
  `e2.b` `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39b45c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ld3/b;)V` @kind direct;
  #L39b462.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b498.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L39b49c.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39b4a2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this, `e2.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b4b4.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.d` @type ^`e2.b` @kind object;
  #L39b4b8.  call temp:= `i`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.i:(Le2/b;Le2/b;)Z` @kind static;
  #L39b4be.  v0:= temp;
  #L39b4c0.  if v0 == 0 then goto L39b4d2;
  #L39b4c4.  v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.d` @type ^`e2.b` := v2 @kind object;
  #L39b4c8.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L39b4cc.  call `c`(v2, v1) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L39b4d2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b474.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L39b47a.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.d` @type ^`e2.b` @kind object;
  #L39b47e.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L39b484.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L39b4e4.  call `d`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L39b4ea.  return @kind void;
}
