record `io.reactivex.internal.operators.single.SingleToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `b2.e` @kind class {
  `b2.t` `io.reactivex.internal.operators.single.SingleToFlowable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToFlowable` v0 @kind this, `b2.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable;.<init>:(Lb2/t;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39b4fc.  call `<init>`(v0) @signature `Lb2/e;.<init>:()V` @kind direct;
  #L39b502.  v0.`io.reactivex.internal.operators.single.SingleToFlowable.b` @type ^`b2.t` := v1 @kind object;
  #L39b506.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.single.SingleToFlowable` v2 @kind this, `d3.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable;.I:(Ld3/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39b518.  v0:= v2.`io.reactivex.internal.operators.single.SingleToFlowable.b` @type ^`b2.t` @kind object;
  #L39b51c.  v1:= new `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver`;
  #L39b520.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.<init>:(Ld3/b;)V` @kind direct;
  #L39b526.  call `c`(v0, v1) @signature `Lb2/t;.c:(Lb2/s;)V` @kind interface;
  #L39b52c.  return @kind void;
}
