record `io.reactivex.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `g2.a` @kind class {
  `b2.e` `io.reactivex.internal.operators.flowable.FlowablePublish.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish.d` @AccessFlag FINAL;
  `d3.a` `io.reactivex.internal.operators.flowable.FlowablePublish.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish` v0 @kind this, `d3.a` v1 @kind object, `b2.e` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Ld3/a;Lb2/e;Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L396b24.  call `<init>`(v0) @signature `Lg2/a;.<init>:()V` @kind direct;
  #L396b2a.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`d3.a` := v1 @kind object;
  #L396b2e.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`b2.e` := v2 @kind object;
  #L396b32.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L396b36.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`int` := v4;
  #L396b3a.  return @kind void;
}
procedure `g2.a` `M`(`b2.e` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.M:(Lb2/e;I)Lg2/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L396aec.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L396af0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L396af6.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$a`;
  #L396afa.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L396b00.  v2:= new `io.reactivex.internal.operators.flowable.FlowablePublish`;
  #L396b04.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Ld3/a;Lb2/e;Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L396b0a.  call temp:= `o`(v2) @signature `Ll2/a;.o:(Lg2/a;)Lg2/a;` @kind static;
  #L396b10.  v3:= temp @kind object;
  #L396b12.  return v3 @kind object;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this, `d3.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L396c00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`d3.a` @kind object;
  #L396c04.  call `a`(v0, v2) @signature `Ld3/a;.a:(Ld3/b;)V` @kind interface;
  #L396c0a.  return @kind void;
}
procedure `void` `L`(`io.reactivex.internal.operators.flowable.FlowablePublish` v4 @kind this, `h2.d` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.L:(Lh2/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L396b4c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396b50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L396b56.  v0:= temp @kind object;
  #L396b58.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v0 @kind object;
  #L396b5c.  if v0 == 0 then goto L396b6c;
  #L396b60.  call temp:= `d`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.d:()Z` @kind virtual;
  #L396b66.  v1:= temp;
  #L396b68.  if v1 == 0 then goto L396b92;
  #L396b6c.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L396b70.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396b74.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`int`;
  #L396b78.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L396b7e.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396b82.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L396b88.  v0:= temp;
  #L396b8a.  if v0 != 0 then goto L396b90;
  #L396b8e.  goto L396b4c;
  #L396b90.  v0:= v1 @kind object;
  #L396b92.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L396b96.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L396b9c.  v1:= temp;
  #L396b9e.  v2:= 1I;
  #L396ba0.  v3:= 0I;
  #L396ba2.  if v1 != 0 then goto L396bb8;
  #L396ba6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L396baa.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L396bb0.  v1:= temp;
  #L396bb2.  if v1 == 0 then goto L396bb8;
  #L396bb6.  goto L396bba;
  #L396bb8.  v2:= 0I;
  #L396bba.  call `accept`(v5, v0) @signature `Lh2/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L396bc0.  if v2 == 0 then goto L396bce;
  #L396bc4.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`b2.e` @kind object;
  #L396bc8.  call `H`(v5, v0) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L396bce.  return @kind void;
  #L396bd0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L396bd2.  call `b`(v5) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L396bd8.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L396bde.  v5:= temp @kind object;
  #L396be0.  throw v5;
  catch `java.lang.Throwable` @[L396bba..L396bc0] goto L396bd0;
}
