record `io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39133c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ld3/b;)V` @kind direct;
  #L391342.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L391354.  call temp:= `c`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L39135a.  v0:= temp;
  #L39135c.  if v0 == 0 then goto L391362;
  #L391360.  return @kind void;
  #L391362.  if v5 == 0 then goto L39139a;
  #L391366.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L39136a.  call `onNext`(v0, v5) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L391370.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L391376.  v0:= temp @kind wide;
  #L391378.  v2:= 0L;
  #L39137c.  v5:= lcmp(v0, v2);
  #L391380.  if v5 == 0 then goto L391398;
  #L391384.  v2:= 1L;
  #L391388.  v2:= v0 - v2 @kind long;
  #L39138c.  call temp:= `compareAndSet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L391392.  v5:= temp;
  #L391394.  if v5 == 0 then goto L391370;
  #L391398.  return @kind void;
  #L39139a.  v5:= new `java.lang.NullPointerException`;
  #L39139e.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3913a2.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3913a8.  call `d`(v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3913ae.  return @kind void;
}
