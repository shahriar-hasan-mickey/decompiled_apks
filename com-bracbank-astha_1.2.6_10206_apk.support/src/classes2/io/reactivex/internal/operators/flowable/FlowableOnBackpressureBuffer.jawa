record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @AccessFlag FINAL;
  `h2.a` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` v0 @kind this, `b2.e` v1 @kind object, `int` v2 , `boolean` v3 , `boolean` v4 , `h2.a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lb2/e;IZZLh2/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L395c80.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lb2/e;)V` @kind direct;
  #L395c86.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @type ^`int` := v2;
  #L395c8a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @type ^`boolean` := v3 @kind boolean;
  #L395c8e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @type ^`boolean` := v4 @kind boolean;
  #L395c92.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.f` @type ^`h2.a` := v5 @kind object;
  #L395c96.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` v8 @kind this, `d3.b` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L395ca8.  v0:= v8.`io.reactivex.internal.operators.flowable.a.b` @type ^`b2.e` @kind object;
  #L395cac.  v7:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber`;
  #L395cb0.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @type ^`int`;
  #L395cb4.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @type ^`boolean` @kind boolean;
  #L395cb8.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @type ^`boolean` @kind boolean;
  #L395cbc.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.f` @type ^`h2.a` @kind object;
  #L395cc0.  v1:= v7 @kind object;
  #L395cc2.  v2:= v9 @kind object;
  #L395cc4.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.<init>:(Ld3/b;IZZLh2/a;)V` @kind direct;
  #L395cca.  call `H`(v0, v7) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L395cd0.  return @kind void;
}
