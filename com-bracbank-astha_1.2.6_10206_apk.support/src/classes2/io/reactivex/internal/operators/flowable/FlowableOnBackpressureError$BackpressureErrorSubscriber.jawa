record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `b2.h` @kind interface, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @AccessFlag ;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L395eb4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L395eba.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @type ^`d3.b` := v1 @kind object;
  #L395ebe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395f18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L395f1c.  if v0 == 0 then goto L395f28;
  #L395f20.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L395f26.  return @kind void;
  #L395f28.  v0:= 1I;
  #L395f2a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395f2e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @type ^`d3.b` @kind object;
  #L395f32.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L395f38.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v2 @kind this, `d3.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L395fa8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.s` @type ^`d3.c` @kind object;
  #L395fac.  call temp:= `i`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L395fb2.  v0:= temp;
  #L395fb4.  if v0 == 0 then goto L395fd6;
  #L395fb8.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.s` @type ^`d3.c` := v3 @kind object;
  #L395fbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @type ^`d3.b` @kind object;
  #L395fc0.  call `c`(v0, v2) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L395fc6.  v0:= 9223372036854775807L;
  #L395fd0.  call `g`(v3, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L395fd6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395ed0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.s` @type ^`d3.c` @kind object;
  #L395ed4.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L395eda.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395fe8.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L395fee.  v0:= temp;
  #L395ff0.  if v0 == 0 then goto L395ffa;
  #L395ff4.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L395ffa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395eec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L395ef0.  if v0 == 0 then goto L395ef6;
  #L395ef4.  return @kind void;
  #L395ef6.  v0:= 1I;
  #L395ef8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395efc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @type ^`d3.b` @kind object;
  #L395f00.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L395f06.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L395f4c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L395f50.  if v0 == 0 then goto L395f56;
  #L395f54.  return @kind void;
  #L395f56.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L395f5c.  v0:= temp @kind wide;
  #L395f5e.  v2:= 0L;
  #L395f62.  v4:= lcmp(v0, v2);
  #L395f66.  if v4 == 0 then goto L395f80;
  #L395f6a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.actual` @type ^`d3.b` @kind object;
  #L395f6e.  call `onNext`(v0, v6) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L395f74.  v0:= 1L;
  #L395f78.  call temp:= `d`(v5, v0) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L395f7e.  goto L395f94;
  #L395f80.  v6:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L395f84.  v0:= "could not emit value due to lack of requests" @kind object;
  #L395f88.  call `<init>`(v6, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L395f8e.  call `a`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L395f94.  return @kind void;
}
