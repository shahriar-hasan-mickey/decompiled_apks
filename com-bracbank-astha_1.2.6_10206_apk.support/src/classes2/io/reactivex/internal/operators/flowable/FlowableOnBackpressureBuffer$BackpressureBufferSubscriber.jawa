record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `b2.h` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @AccessFlag ;
  `h2.a` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @AccessFlag ;
  `k2.i` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @AccessFlag FINAL;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `d3.b` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `h2.a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.<init>:(Ld3/b;IZZLh2/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L395984.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L39598a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39598e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L395994.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L395998.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` := v2 @kind object;
  #L39599c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`h2.a` := v6 @kind object;
  #L3959a0.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` := v5 @kind boolean;
  #L3959a4.  if v4 == 0 then goto L3959b4;
  #L3959a8.  v2:= new `io.reactivex.internal.queue.a`;
  #L3959ac.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L3959b2.  goto L3959be;
  #L3959b4.  v2:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L3959b8.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L3959be.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` := v2 @kind object;
  #L3959c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395b4c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L395b50.  v0:= 1I;
  #L395b52.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395b56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L395b5a.  if v0 == 0 then goto L395b6a;
  #L395b5e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` @kind object;
  #L395b62.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L395b68.  goto L395b70;
  #L395b6a.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.e:()V` @kind virtual;
  #L395b70.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `d3.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L395c08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.s` @type ^`d3.c` @kind object;
  #L395c0c.  call temp:= `i`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L395c12.  v0:= temp;
  #L395c14.  if v0 == 0 then goto L395c36;
  #L395c18.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.s` @type ^`d3.c` := v3 @kind object;
  #L395c1c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` @kind object;
  #L395c20.  call `c`(v0, v2) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L395c26.  v0:= 9223372036854775807L;
  #L395c30.  call `g`(v3, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L395c36.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3959d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3959d8.  if v0 != 0 then goto L395a02;
  #L3959dc.  v0:= 1I;
  #L3959de.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3959e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.s` @type ^`d3.c` @kind object;
  #L3959e6.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3959ec.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3959f2.  v0:= temp;
  #L3959f4.  if v0 != 0 then goto L395a02;
  #L3959f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L3959fc.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L395a02.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395a14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L395a18.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L395a1e.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `d3.b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.d:(ZZLd3/b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3958a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3958ac.  v1:= 1I;
  #L3958ae.  if v0 == 0 then goto L3958be;
  #L3958b2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L3958b6.  call `clear`(v3) @signature `Lk2/j;.clear:()V` @kind interface;
  #L3958bc.  return v1;
  #L3958be.  if v3 == 0 then goto L39590c;
  #L3958c2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L3958c6.  if v3 == 0 then goto L3958e6;
  #L3958ca.  if v4 == 0 then goto L39590c;
  #L3958ce.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3958d2.  if v3 == 0 then goto L3958de;
  #L3958d6.  call `a`(v5, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3958dc.  goto L3958e4;
  #L3958de.  call `onComplete`(v5) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L3958e4.  return v1;
  #L3958e6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3958ea.  if v3 == 0 then goto L395900;
  #L3958ee.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L3958f2.  call `clear`(v4) @signature `Lk2/j;.clear:()V` @kind interface;
  #L3958f8.  call `a`(v5, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3958fe.  return v1;
  #L395900.  if v4 == 0 then goto L39590c;
  #L395904.  call `onComplete`(v5) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39590a.  return v1;
  #L39590c.  v3:= 0I;
  #L39590e.  return v3;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L395a30.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L395a36.  v0:= temp;
  #L395a38.  if v0 != 0 then goto L395b06;
  #L395a3c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L395a40.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` @kind object;
  #L395a44.  v2:= 1I;
  #L395a46.  v3:= 1I;
  #L395a48.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L395a4c.  call temp:= `isEmpty`(v0) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L395a52.  v5:= temp;
  #L395a54.  call temp:= `d`(v14, v4, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.d:(ZZLd3/b;)Z` @kind virtual;
  #L395a5a.  v4:= temp;
  #L395a5c.  if v4 == 0 then goto L395a62;
  #L395a60.  return @kind void;
  #L395a62.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L395a66.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L395a6c.  v4:= temp @kind wide;
  #L395a6e.  v6:= 0L;
  #L395a72.  v8:= v6 @kind wide;
  #L395a74.  v10:= lcmp(v8, v4);
  #L395a78.  if v10 == 0 then goto L395ab4;
  #L395a7c.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L395a80.  call temp:= `poll`(v0) @signature `Lk2/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L395a86.  v12:= temp @kind object;
  #L395a88.  if v12 != 0 then goto L395a90;
  #L395a8c.  v13:= 1I;
  #L395a8e.  goto L395a92;
  #L395a90.  v13:= 0I;
  #L395a92.  call temp:= `d`(v14, v11, v13, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.d:(ZZLd3/b;)Z` @kind virtual;
  #L395a98.  v11:= temp;
  #L395a9a.  if v11 == 0 then goto L395aa0;
  #L395a9e.  return @kind void;
  #L395aa0.  if v13 == 0 then goto L395aa6;
  #L395aa4.  goto L395ab4;
  #L395aa6.  call `onNext`(v1, v12) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L395aac.  v10:= 1L;
  #L395ab0.  v8:= v8 + v10 @kind long;
  #L395ab2.  goto L395a74;
  #L395ab4.  if v10 != 0 then goto L395ad2;
  #L395ab8.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L395abc.  call temp:= `isEmpty`(v0) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L395ac2.  v11:= temp;
  #L395ac4.  call temp:= `d`(v14, v10, v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.d:(ZZLd3/b;)Z` @kind virtual;
  #L395aca.  v10:= temp;
  #L395acc.  if v10 == 0 then goto L395ad2;
  #L395ad0.  return @kind void;
  #L395ad2.  v10:= lcmp(v8, v6);
  #L395ad6.  if v10 == 0 then goto L395af8;
  #L395ada.  v6:= 9223372036854775807L;
  #L395ae4.  v10:= lcmp(v4, v6);
  #L395ae8.  if v10 == 0 then goto L395af8;
  #L395aec.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L395af0.  v5:= -v8 @kind long;
  #L395af2.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L395af8.  v3:= -v3 @kind int;
  #L395afa.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L395b00.  v3:= temp;
  #L395b02.  if v3 != 0 then goto L395a48;
  #L395b06.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395c48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L395c4c.  if v0 != 0 then goto L395c6c;
  #L395c50.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L395c56.  v0:= temp;
  #L395c58.  if v0 == 0 then goto L395c6c;
  #L395c5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L395c60.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L395c66.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.e:()V` @kind virtual;
  #L395c6c.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395940.  v0:= 2I;
  #L395942.  v2:= v2 ^& v0 @kind int;
  #L395944.  if v2 == 0 then goto L395950;
  #L395948.  v2:= 1I;
  #L39594a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L39594e.  return v0;
  #L395950.  v2:= 0I;
  #L395952.  return v2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395920.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L395924.  call temp:= `isEmpty`(v0) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L39592a.  v0:= temp;
  #L39592c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395b18.  v0:= 1I;
  #L395b1a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395b1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L395b22.  if v0 == 0 then goto L395b32;
  #L395b26.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` @kind object;
  #L395b2a.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L395b30.  goto L395b38;
  #L395b32.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.e:()V` @kind virtual;
  #L395b38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395b84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L395b88.  call temp:= `offer`(v0, v2) @signature `Lk2/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L395b8e.  v2:= temp;
  #L395b90.  if v2 != 0 then goto L395bce;
  #L395b94.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.s` @type ^`d3.c` @kind object;
  #L395b98.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L395b9e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L395ba2.  v0:= "Buffer is full" @kind object;
  #L395ba6.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L395bac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`h2.a` @kind object;
  #L395bb0.  call `run`(v0) @signature `Lh2/a;.run:()V` @kind interface;
  #L395bb6.  goto L395bc6;
  #L395bb8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L395bba.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L395bc0.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L395bc6.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L395bcc.  return @kind void;
  #L395bce.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L395bd2.  if v2 == 0 then goto L395be4;
  #L395bd6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.actual` @type ^`d3.b` @kind object;
  #L395bda.  v0:= 0I;
  #L395bdc.  call `onNext`(v2, v0) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L395be2.  goto L395bea;
  #L395be4.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.e:()V` @kind virtual;
  #L395bea.  return @kind void;
  catch `java.lang.Throwable` @[L395bac..L395bb6] goto L395bb8;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395964.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`k2.i` @kind object;
  #L395968.  call temp:= `poll`(v0) @signature `Lk2/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L39596e.  v0:= temp @kind object;
  #L395970.  return v0 @kind object;
}
