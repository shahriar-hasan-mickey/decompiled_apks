record `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.h` @kind interface, `e2.b` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @AccessFlag ;
  `k2.j` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L392268.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39226e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` := v2 @kind wide;
  #L392272.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` := v1 @kind object;
  #L392276.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L39227a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int` := v1;
  #L39227e.  v1:= v1 ^> 2;
  #L392282.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int` := v1;
  #L392286.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3922d4.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L3922d8.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3922de.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3922e2.  call `m`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.m:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L3922e8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.b:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3923a0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L3923a4.  v1:= 1I;
  #L3923a6.  if v0 == v1 then goto L3923de;
  #L3923aa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` @kind wide;
  #L3923ae.  v0:= v0 + v4 @kind long;
  #L3923b0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int`;
  #L3923b4.  v4:= (`long`) v4 @kind i2l;
  #L3923b6.  v2:= lcmp(v0, v4);
  #L3923ba.  if v2 < 0 then goto L3923da;
  #L3923be.  v4:= 0L;
  #L3923c2.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L3923c6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3923cc.  v4:= temp @kind object;
  #L3923ce.  v4:= (`d3.c`) v4 @kind object;
  #L3923d2.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L3923d8.  goto L3923de;
  #L3923da.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L3923de.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L392330.  call temp:= `f`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.f:(Ljava/util/concurrent/atomic/AtomicReference;Ld3/c;)Z` @kind static;
  #L392336.  v0:= temp;
  #L392338.  if v0 == 0 then goto L39238c;
  #L39233c.  v0:= instanceof @variable v4 @type ^`k2.g` @kind boolean;
  #L392340.  if v0 == 0 then goto L392380;
  #L392344.  v0:= v4 @kind object;
  #L392346.  v0:= (`k2.g`) v0 @kind object;
  #L39234a.  v1:= 7I;
  #L39234c.  call temp:= `h`(v0, v1) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L392352.  v1:= temp;
  #L392354.  v2:= 1I;
  #L392356.  if v1 != v2 then goto L392372;
  #L39235a.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L39235e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L392362.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L392366.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L39236a.  call `i`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.i:()V` @kind virtual;
  #L392370.  return @kind void;
  #L392372.  v2:= 2I;
  #L392374.  if v1 != v2 then goto L392380;
  #L392378.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L39237c.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L392380.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int`;
  #L392384.  v0:= (`long`) v0 @kind i2l;
  #L392386.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39238c.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L392240.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L392246.  v0:= temp @kind object;
  #L392248.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39224c.  if v0 != v1 then goto L392254;
  #L392250.  v0:= 1I;
  #L392252.  goto L392256;
  #L392254.  v0:= 0I;
  #L392256.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L392298.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39229e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3922b0.  v0:= 1I;
  #L3922b2.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3922b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L3922ba.  call `i`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.i:()V` @kind virtual;
  #L3922c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3922fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L392300.  v1:= 2I;
  #L392302.  if v0 == v1 then goto L392312;
  #L392306.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L39230a.  call `o`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.o:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @kind virtual;
  #L392310.  goto L39231c;
  #L392312.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L392316.  call `i`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.i:()V` @kind virtual;
  #L39231c.  return @kind void;
}
