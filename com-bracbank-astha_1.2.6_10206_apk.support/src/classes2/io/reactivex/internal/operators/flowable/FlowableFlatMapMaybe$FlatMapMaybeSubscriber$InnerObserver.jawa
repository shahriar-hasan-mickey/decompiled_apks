record `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `e2.b` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L392fd0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` := v1 @kind object;
  #L392fd4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L392fda.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393020.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` @kind object;
  #L393024.  call `j`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.j:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @kind virtual;
  #L39302a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L39303c.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L393042.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L392fa8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L392fae.  v0:= temp @kind object;
  #L392fb0.  v0:= (`e2.b`) v0 @kind object;
  #L392fb4.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L392fba.  v0:= temp;
  #L392fbc.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L392fec.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L392ff2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393004.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` @kind object;
  #L393008.  call `i`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.i:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;)V` @kind virtual;
  #L39300e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393054.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` @kind object;
  #L393058.  call `k`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.k:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Object;)V` @kind virtual;
  #L39305e.  return @kind void;
}
