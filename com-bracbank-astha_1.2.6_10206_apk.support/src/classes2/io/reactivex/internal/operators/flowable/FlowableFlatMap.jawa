record `io.reactivex.internal.operators.flowable.FlowableFlatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `h2.e` `io.reactivex.internal.operators.flowable.FlowableFlatMap.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap` v0 @kind this, `b2.e` v1 @kind object, `h2.e` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lb2/e;Lh2/e;ZII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L393854.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lb2/e;)V` @kind direct;
  #L39385a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.c` @type ^`h2.e` := v2 @kind object;
  #L39385e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @type ^`boolean` := v3 @kind boolean;
  #L393862.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @type ^`int` := v4;
  #L393866.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @type ^`int` := v5;
  #L39386a.  return @kind void;
}
procedure `b2.h` `K`(`d3.b` v7 @kind object, `h2.e` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.K:(Ld3/b;Lh2/e;ZII)Lb2/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39382c.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber`;
  #L393830.  v0:= v6 @kind object;
  #L393832.  v1:= v7 @kind object;
  #L393834.  v2:= v8 @kind object;
  #L393836.  v3:= v9;
  #L393838.  v4:= v10;
  #L39383a.  v5:= v11;
  #L39383c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.<init>:(Ld3/b;Lh2/e;ZII)V` @kind direct;
  #L393842.  return v6 @kind object;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowableFlatMap` v5 @kind this, `d3.b` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39387c.  v0:= v5.`io.reactivex.internal.operators.flowable.a.b` @type ^`b2.e` @kind object;
  #L393880.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.c` @type ^`h2.e` @kind object;
  #L393884.  call temp:= `b`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/i;.b:(Ld3/a;Ld3/b;Lh2/e;)Z` @kind static;
  #L39388a.  v0:= temp;
  #L39388c.  if v0 == 0 then goto L393892;
  #L393890.  return @kind void;
  #L393892.  v0:= v5.`io.reactivex.internal.operators.flowable.a.b` @type ^`b2.e` @kind object;
  #L393896.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.c` @type ^`h2.e` @kind object;
  #L39389a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.d` @type ^`boolean` @kind boolean;
  #L39389e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.e` @type ^`int`;
  #L3938a2.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMap.f` @type ^`int`;
  #L3938a6.  call temp:= `K`(v6, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.K:(Ld3/b;Lh2/e;ZII)Lb2/h;` @kind static;
  #L3938ac.  v6:= temp @kind object;
  #L3938ae.  call `H`(v0, v6) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L3938b4.  return @kind void;
}
