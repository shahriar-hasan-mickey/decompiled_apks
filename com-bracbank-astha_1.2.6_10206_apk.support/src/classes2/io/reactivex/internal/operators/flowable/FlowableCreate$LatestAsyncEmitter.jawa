record `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L391150.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ld3/b;)V` @kind direct;
  #L391156.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L39115a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L391160.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L391164.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L391168.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39116e.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L391172.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.e:()V` @AccessFlag  {
    temp;

  #L3912f4.  call `i`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.i:()V` @kind virtual;
  #L3912fa.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L39130c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L391310.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L391316.  v0:= temp;
  #L391318.  if v0 != 0 then goto L391328;
  #L39131c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L391320.  v1:= 0I;
  #L391322.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L391328.  return @kind void;
}
procedure `boolean` `h`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.h:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3910fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L391100.  if v0 != 0 then goto L39113c;
  #L391104.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L39110a.  v0:= temp;
  #L39110c.  if v0 == 0 then goto L391112;
  #L391110.  goto L39113c;
  #L391112.  if v3 != 0 then goto L39112a;
  #L391116.  v0:= new `java.lang.NullPointerException`;
  #L39111a.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L39111e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L391124.  call `d`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39112a.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L39112e.  v3:= 1I;
  #L391130.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L391134.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.i:()V` @kind virtual;
  #L39113a.  return v3;
  #L39113c.  v3:= 0I;
  #L39113e.  return v3;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L391184.  v0:= v17 @kind object;
  #L391188.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L39118c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L391192.  v1:= temp;
  #L391194.  if v1 == 0 then goto L39119a;
  #L391198.  return @kind void;
  #L39119a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L39119e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3911a2.  v3:= 1I;
  #L3911a4.  v4:= 1I;
  #L3911a6.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3911ac.  v5:= temp @kind wide;
  #L3911ae.  v7:= 0L;
  #L3911b2.  v9:= v7 @kind wide;
  #L3911b4.  v11:= 0I;
  #L3911b6.  v12:= 0I;
  #L3911b8.  v13:= lcmp(v9, v5);
  #L3911bc.  if v13 == 0 then goto L391222;
  #L3911c0.  call temp:= `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L3911c6.  v14:= temp;
  #L3911c8.  if v14 == 0 then goto L3911d4;
  #L3911cc.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3911d2.  return @kind void;
  #L3911d4.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3911d8.  call temp:= `getAndSet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3911de.  v15:= temp @kind object;
  #L3911e0.  if v15 != 0 then goto L3911ea;
  #L3911e4.  v16:= 1I;
  #L3911e8.  goto L3911ee;
  #L3911ea.  v16:= 0I;
  #L3911ee.  if v14 == 0 then goto L39120e;
  #L3911f2.  if v16 == 0 then goto L39120e;
  #L3911f6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L3911fa.  if v1 == 0 then goto L391206;
  #L3911fe.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L391204.  goto L39120c;
  #L391206.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.a:()V` @kind virtual;
  #L39120c.  return @kind void;
  #L39120e.  if v16 == 0 then goto L391214;
  #L391212.  goto L391222;
  #L391214.  call `onNext`(v1, v15) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39121a.  v11:= 1L;
  #L39121e.  v9:= v9 + v11 @kind long;
  #L391220.  goto L3911b4;
  #L391222.  if v13 != 0 then goto L39126c;
  #L391226.  call temp:= `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L39122c.  v5:= temp;
  #L39122e.  if v5 == 0 then goto L39123a;
  #L391232.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L391238.  return @kind void;
  #L39123a.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L39123e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L391244.  v6:= temp @kind object;
  #L391246.  if v6 != 0 then goto L39124c;
  #L39124a.  v11:= 1I;
  #L39124c.  if v5 == 0 then goto L39126c;
  #L391250.  if v11 == 0 then goto L39126c;
  #L391254.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L391258.  if v1 == 0 then goto L391264;
  #L39125c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L391262.  goto L39126a;
  #L391264.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.a:()V` @kind virtual;
  #L39126a.  return @kind void;
  #L39126c.  v5:= lcmp(v9, v7);
  #L391270.  if v5 == 0 then goto L39127a;
  #L391274.  call temp:= `d`(v0, v9) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L39127a.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L39127e.  v4:= -v4 @kind int;
  #L391280.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L391286.  v4:= temp;
  #L391288.  if v4 != 0 then goto L3911a6;
  #L39128c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3912a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L3912a4.  if v0 != 0 then goto L3912e0;
  #L3912a8.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L3912ae.  v0:= temp;
  #L3912b0.  if v0 == 0 then goto L3912b6;
  #L3912b4.  goto L3912e0;
  #L3912b6.  if v2 != 0 then goto L3912d0;
  #L3912ba.  v2:= new `java.lang.NullPointerException`;
  #L3912be.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3912c2.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3912c8.  call `d`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3912ce.  return @kind void;
  #L3912d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3912d4.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3912da.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.i:()V` @kind virtual;
  #L3912e0.  return @kind void;
}
