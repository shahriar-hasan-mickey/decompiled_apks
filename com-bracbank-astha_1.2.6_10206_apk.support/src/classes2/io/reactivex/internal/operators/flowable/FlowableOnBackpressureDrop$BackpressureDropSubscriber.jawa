record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `b2.h` @kind interface, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @AccessFlag ;
  `h2.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @AccessFlag FINAL;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v0 @kind this, `d3.b` v1 @kind object, `h2.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.<init>:(Ld3/b;Lh2/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L395ce4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L395cea.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @type ^`d3.b` := v1 @kind object;
  #L395cee.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`h2.d` := v2 @kind object;
  #L395cf2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395d4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L395d50.  if v0 == 0 then goto L395d5c;
  #L395d54.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L395d5a.  return @kind void;
  #L395d5c.  v0:= 1I;
  #L395d5e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395d62.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @type ^`d3.b` @kind object;
  #L395d66.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L395d6c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v2 @kind this, `d3.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L395df4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.s` @type ^`d3.c` @kind object;
  #L395df8.  call temp:= `i`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L395dfe.  v0:= temp;
  #L395e00.  if v0 == 0 then goto L395e22;
  #L395e04.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.s` @type ^`d3.c` := v3 @kind object;
  #L395e08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @type ^`d3.b` @kind object;
  #L395e0c.  call `c`(v0, v2) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L395e12.  v0:= 9223372036854775807L;
  #L395e1c.  call `g`(v3, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L395e22.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395d04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.s` @type ^`d3.c` @kind object;
  #L395d08.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L395d0e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395e34.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L395e3a.  v0:= temp;
  #L395e3c.  if v0 == 0 then goto L395e46;
  #L395e40.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L395e46.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395d20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L395d24.  if v0 == 0 then goto L395d2a;
  #L395d28.  return @kind void;
  #L395d2a.  v0:= 1I;
  #L395d2c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L395d30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @type ^`d3.b` @kind object;
  #L395d34.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L395d3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L395d80.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.done` @type ^`boolean` @kind boolean;
  #L395d84.  if v0 == 0 then goto L395d8a;
  #L395d88.  return @kind void;
  #L395d8a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L395d90.  v0:= temp @kind wide;
  #L395d92.  v2:= 0L;
  #L395d96.  v4:= lcmp(v0, v2);
  #L395d9a.  if v4 == 0 then goto L395db4;
  #L395d9e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.actual` @type ^`d3.b` @kind object;
  #L395da2.  call `onNext`(v0, v6) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L395da8.  v0:= 1L;
  #L395dac.  call temp:= `d`(v5, v0) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L395db2.  goto L395dd4;
  #L395db4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber.onDrop` @type ^`h2.d` @kind object;
  #L395db8.  call `accept`(v0, v6) @signature `Lh2/d;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L395dbe.  goto L395dd4;
  #L395dc0.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L395dc2.  call `b`(v6) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L395dc8.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.cancel:()V` @kind virtual;
  #L395dce.  call `a`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$BackpressureDropSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L395dd4.  return @kind void;
  catch `java.lang.Throwable` @[L395db4..L395dbe] goto L395dc0;
}
