record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `b2.h` @kind interface, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @AccessFlag FINAL;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `d3.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L39609c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3960a2.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L3960a6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3960ac.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3960b0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3960b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3960ba.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3960be.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.actual` @type ^`d3.b` := v2 @kind object;
  #L3960c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L396208.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L39620c.  v1:= 1I;
  #L39620e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L396212.  call `d`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.d:()V` @kind virtual;
  #L396218.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `d3.b` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.b:(ZZLd3/b;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L39604c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L396050.  v1:= 0I;
  #L396052.  v2:= 1I;
  #L396054.  if v0 == 0 then goto L396060;
  #L396058.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L39605e.  return v2;
  #L396060.  if v4 == 0 then goto L396086;
  #L396064.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L396068.  if v4 == 0 then goto L39607a;
  #L39606c.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L396072.  call `a`(v6, v4) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L396078.  return v2;
  #L39607a.  if v5 == 0 then goto L396086;
  #L39607e.  call `onComplete`(v6) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L396084.  return v2;
  #L396086.  v4:= 0I;
  #L396088.  return v4;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this, `d3.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L396250.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.s` @type ^`d3.c` @kind object;
  #L396254.  call temp:= `i`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L39625a.  v0:= temp;
  #L39625c.  if v0 == 0 then goto L39627e;
  #L396260.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.s` @type ^`d3.c` := v3 @kind object;
  #L396264.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.actual` @type ^`d3.b` @kind object;
  #L396268.  call `c`(v0, v2) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L39626e.  v0:= 9223372036854775807L;
  #L396278.  call `g`(v3, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39627e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3960d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3960d8.  if v0 != 0 then goto L396104;
  #L3960dc.  v0:= 1I;
  #L3960de.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L3960e2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.s` @type ^`d3.c` @kind object;
  #L3960e6.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3960ec.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3960f2.  v0:= temp;
  #L3960f4.  if v0 != 0 then goto L396104;
  #L3960f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3960fc.  v1:= 0I;
  #L3960fe.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L396104.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L396118.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39611e.  v0:= temp;
  #L396120.  if v0 == 0 then goto L396126;
  #L396124.  return @kind void;
  #L396126.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.actual` @type ^`d3.b` @kind object;
  #L39612a.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39612e.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396132.  v3:= 1I;
  #L396134.  v4:= 1I;
  #L396136.  v5:= 0L;
  #L39613a.  v7:= v5 @kind wide;
  #L39613c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L396142.  v9:= temp @kind wide;
  #L396144.  v11:= 0I;
  #L396146.  v12:= lcmp(v7, v9);
  #L39614a.  if v12 == 0 then goto L396188;
  #L39614e.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L396152.  v10:= 0I;
  #L396154.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39615a.  v10:= temp @kind object;
  #L39615c.  if v10 != 0 then goto L396164;
  #L396160.  v12:= 1I;
  #L396162.  goto L396166;
  #L396164.  v12:= 0I;
  #L396166.  call temp:= `b`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.b:(ZZLd3/b;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L39616c.  v9:= temp;
  #L39616e.  if v9 == 0 then goto L396174;
  #L396172.  return @kind void;
  #L396174.  if v12 == 0 then goto L39617a;
  #L396178.  goto L396188;
  #L39617a.  call `onNext`(v0, v10) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L396180.  v9:= 1L;
  #L396184.  v7:= v7 + v9 @kind long;
  #L396186.  goto L39613c;
  #L396188.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39618e.  v9:= temp @kind wide;
  #L396190.  v12:= lcmp(v7, v9);
  #L396194.  if v12 != 0 then goto L3961b8;
  #L396198.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L39619c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3961a2.  v10:= temp @kind object;
  #L3961a4.  if v10 != 0 then goto L3961aa;
  #L3961a8.  v11:= 1I;
  #L3961aa.  call temp:= `b`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.b:(ZZLd3/b;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L3961b0.  v9:= temp;
  #L3961b2.  if v9 == 0 then goto L3961b8;
  #L3961b6.  return @kind void;
  #L3961b8.  v9:= lcmp(v7, v5);
  #L3961bc.  if v9 == 0 then goto L3961c6;
  #L3961c0.  call temp:= `d`(v1, v7) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3961c6.  v4:= -v4 @kind int;
  #L3961c8.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3961ce.  v4:= temp;
  #L3961d0.  if v4 != 0 then goto L396136;
  #L3961d4.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396290.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L396296.  v0:= temp;
  #L396298.  if v0 == 0 then goto L3962ac;
  #L39629c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3962a0.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3962a6.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.d:()V` @kind virtual;
  #L3962ac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3961e8.  v0:= 1I;
  #L3961ea.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L3961ee.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.d:()V` @kind virtual;
  #L3961f4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39622c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396230.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L396236.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.d:()V` @kind virtual;
  #L39623c.  return @kind void;
}
