record `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `b2.f` @kind interface, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L390d54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L390d5a.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` := v1 @kind object;
  #L390d5e.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L390d62.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L390d68.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L390d6c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L390da4.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L390daa.  v0:= temp;
  #L390dac.  if v0 == 0 then goto L390db2;
  #L390db0.  return @kind void;
  #L390db2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L390db6.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L390dbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390dc0.  call `e`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L390dc6.  return @kind void;
  #L390dc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L390dca.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390dce.  call `e`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L390dd4.  throw v0;
  catch `java.lang.Throwable` @[L390db2..L390dbc] goto L390dc8;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L390c6c.  if v2 != 0 then goto L390c7e;
  #L390c70.  v2:= new `java.lang.NullPointerException`;
  #L390c74.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L390c78.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L390c7e.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L390c84.  v0:= temp;
  #L390c86.  if v0 == 0 then goto L390c8e;
  #L390c8a.  v2:= 0I;
  #L390c8c.  return v2;
  #L390c8e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L390c92.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L390c98.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390c9c.  call `e`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L390ca2.  v2:= 1I;
  #L390ca4.  return v2;
  #L390ca6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L390ca8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390cac.  call `e`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L390cb2.  throw v2;
  catch `java.lang.Throwable` @[L390c8e..L390c98] goto L390ca6;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390cd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390cd4.  call temp:= `d`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.d:()Z` @kind virtual;
  #L390cda.  v0:= temp;
  #L390cdc.  return v0;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390d80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L390d84.  call `e`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L390d8a.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.f:()V` @kind virtual;
  #L390d90.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390df4.  call temp:= `h`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.h:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390dfa.  v0:= temp;
  #L390dfc.  if v0 != 0 then goto L390e06;
  #L390e00.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L390e06.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.e:()V` @AccessFlag  {
    temp;

  #L390e18.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.f:()V` @AccessFlag  {
    temp;

  #L390e2c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.g:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390e40.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L390e46.  v0:= temp;
  #L390e48.  if v0 == 0 then goto L390e58;
  #L390e4c.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L390e52.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.e:()V` @kind virtual;
  #L390e58.  return @kind void;
}
procedure `boolean` `h`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.h:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L390cf0.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390cf6.  v1:= temp;
  #L390cf8.  return v1;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L390d0c.  v0:= 2I;
  #L390d0e.  v0:= new `java.lang.Object`[v0];
  #L390d12.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L390d18.  v1:= temp @kind object;
  #L390d1a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L390d20.  v1:= temp @kind object;
  #L390d22.  v2:= 0I;
  #L390d24.  v0[v2]:= v1 @kind object;
  #L390d28.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind super;
  #L390d2e.  v1:= temp @kind object;
  #L390d30.  v2:= 1I;
  #L390d32.  v0[v2]:= v1 @kind object;
  #L390d36.  v1:= "%s{%s}" @kind object;
  #L390d3a.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L390d40.  v0:= temp @kind object;
  #L390d42.  return v0 @kind object;
}
