record `io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `b2.h` @kind interface, `d3.c` @kind interface {
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v0 @kind this, `d3.b` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.<init>:(Ld3/b;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L396dd4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ld3/b;)V` @kind direct;
  #L396dda.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v2 @kind object;
  #L396dde.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396e30.  v0:= 0I;
  #L396e32.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L396e36.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L396e3a.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L396e40.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v2 @kind this, `d3.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L396e78.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber.s` @type ^`d3.c` @kind object;
  #L396e7c.  call temp:= `i`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L396e82.  v0:= temp;
  #L396e84.  if v0 == 0 then goto L396ea6;
  #L396e88.  v2.`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber.s` @type ^`d3.c` := v3 @kind object;
  #L396e8c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L396e90.  call `c`(v0, v2) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L396e96.  v0:= 9223372036854775807L;
  #L396ea0.  call `g`(v3, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L396ea6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396df0.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L396df6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber.s` @type ^`d3.c` @kind object;
  #L396dfa.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L396e00.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396e14.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L396e18.  call `d`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L396e1e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableToList$ToListSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList$ToListSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396e54.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L396e58.  v0:= (`java.util.Collection`) v0 @kind object;
  #L396e5c.  if v0 == 0 then goto L396e66;
  #L396e60.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L396e66.  return @kind void;
}
