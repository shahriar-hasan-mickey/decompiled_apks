record `io.reactivex.internal.operators.flowable.FlowableFromArray` @kind class @AccessFlag PUBLIC_FINAL extends `b2.e` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableFromArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L394374.  call `<init>`(v0) @signature `Lb2/e;.<init>:()V` @kind direct;
  #L39437a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L39437e.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowableFromArray` v3 @kind this, `d3.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.I:(Ld3/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L394390.  v0:= instanceof @variable v4 @type ^`k2.a` @kind boolean;
  #L394394.  if v0 == 0 then goto L3943b4;
  #L394398.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription`;
  #L39439c.  v1:= v4 @kind object;
  #L39439e.  v1:= (`k2.a`) v1 @kind object;
  #L3943a2.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray.b` @type ^`java.lang.Object`[] @kind object;
  #L3943a6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.<init>:(Lk2/a;[Ljava/lang/Object;)V` @kind direct;
  #L3943ac.  call `c`(v4, v0) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L3943b2.  goto L3943c8;
  #L3943b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription`;
  #L3943b8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray.b` @type ^`java.lang.Object`[] @kind object;
  #L3943bc.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.<init>:(Ld3/b;[Ljava/lang/Object;)V` @kind direct;
  #L3943c2.  call `c`(v4, v0) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L3943c8.  return @kind void;
}
