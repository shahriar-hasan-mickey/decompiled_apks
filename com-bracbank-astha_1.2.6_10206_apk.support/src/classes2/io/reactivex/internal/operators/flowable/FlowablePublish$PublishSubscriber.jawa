record `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `b2.h` @kind interface, `e2.b` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @AccessFlag FINAL;
  `k2.j` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.a` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39658c.  v0:= 0I;
  #L39658e.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v0];
  #L396592.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.a` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] := v1 @kind object;
  #L396596.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v0];
  #L39659a.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] := v0 @kind object;
  #L39659e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3965b0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3965b6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3965ba.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3965c0.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3965c4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3965c8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.a` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L3965cc.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3965d2.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3965d6.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L3965da.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3965de.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3965e4.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L3965e8.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int` := v4;
  #L3965ec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396948.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L39694c.  if v0 != 0 then goto L396964;
  #L396950.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.c:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L396956.  v2:= temp @kind object;
  #L396958.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v2 @kind object;
  #L39695c.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L396962.  goto L39696a;
  #L396964.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39696a.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.b:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L396458.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39645c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L396462.  v0:= temp @kind object;
  #L396464.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L396468.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L39646c.  v2:= 0I;
  #L39646e.  if v0 != v1 then goto L396474;
  #L396472.  return v2;
  #L396474.  v1:= length @variable v0;
  #L396476.  v3:= v1 + 1;
  #L39647a.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v3];
  #L39647e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L396484.  v3[v1]:= v5 @kind object;
  #L396488.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39648c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L396492.  v0:= temp;
  #L396494.  if v0 == 0 then goto L396458;
  #L396498.  v5:= 1I;
  #L39649a.  return v5;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3969c4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3969c8.  call temp:= `f`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.f:(Ljava/util/concurrent/atomic/AtomicReference;Ld3/c;)Z` @kind static;
  #L3969ce.  v0:= temp;
  #L3969d0.  if v0 == 0 then goto L396a48;
  #L3969d4.  v0:= instanceof @variable v4 @type ^`k2.g` @kind boolean;
  #L3969d8.  if v0 == 0 then goto L396a2a;
  #L3969dc.  v0:= v4 @kind object;
  #L3969de.  v0:= (`k2.g`) v0 @kind object;
  #L3969e2.  v1:= 3I;
  #L3969e4.  call temp:= `h`(v0, v1) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L3969ea.  v1:= temp;
  #L3969ec.  v2:= 1I;
  #L3969ee.  if v1 != v2 then goto L396a0e;
  #L3969f2.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int` := v1;
  #L3969f6.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L3969fa.  call temp:= `b`() @signature `Lio/reactivex/internal/util/NotificationLite;.b:()Ljava/lang/Object;` @kind static;
  #L396a00.  v4:= temp @kind object;
  #L396a02.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v4 @kind object;
  #L396a06.  call `h`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L396a0c.  return @kind void;
  #L396a0e.  v2:= 2I;
  #L396a10.  if v1 != v2 then goto L396a2a;
  #L396a14.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int` := v1;
  #L396a18.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L396a1c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L396a20.  v0:= (`long`) v0 @kind i2l;
  #L396a22.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L396a28.  return @kind void;
  #L396a2a.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L396a2e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L396a32.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L396a38.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L396a3c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L396a40.  v0:= (`long`) v0 @kind i2l;
  #L396a42.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L396a48.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L396560.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396564.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39656a.  v0:= temp @kind object;
  #L39656c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L396570.  if v0 != v1 then goto L396578;
  #L396574.  v0:= 1I;
  #L396576.  goto L39657a;
  #L396578.  v0:= 0I;
  #L39657a.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3968cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3968d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3968d6.  v0:= temp @kind object;
  #L3968d8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L3968dc.  if v0 == v1 then goto L39690a;
  #L3968e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3968e4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3968ea.  v0:= temp @kind object;
  #L3968ec.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L3968f0.  if v0 == v1 then goto L39690a;
  #L3968f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3968f8.  v1:= 0I;
  #L3968fa.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L396900.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396904.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39690a.  return @kind void;
}
procedure `boolean` `g`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.g:(Ljava/lang/Object;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3964ac.  v0:= 0I;
  #L3964ae.  if v5 == 0 then goto L39654e;
  #L3964b2.  call temp:= `f`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.f:(Ljava/lang/Object;)Z` @kind static;
  #L3964b8.  v1:= temp;
  #L3964ba.  v2:= 0I;
  #L3964bc.  v3:= 1I;
  #L3964be.  if v1 == 0 then goto L396500;
  #L3964c2.  if v6 == 0 then goto L39654e;
  #L3964c6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3964ca.  call temp:= `compareAndSet`(v5, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3964d0.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3964d4.  v6:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L3964d8.  call temp:= `getAndSet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3964de.  v5:= temp @kind object;
  #L3964e0.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v5 @kind object;
  #L3964e4.  v6:= length @variable v5;
  #L3964e6.  if v0 >= v6 then goto L3964fe;
  #L3964ea.  v1:= v5[v0] @kind object;
  #L3964ee.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`d3.b` @kind object;
  #L3964f2.  call `onComplete`(v1) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L3964f8.  v0:= v0 + 1;
  #L3964fc.  goto L3964e6;
  #L3964fe.  return v3;
  #L396500.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.d:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L396506.  v5:= temp @kind object;
  #L396508.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39650c.  call temp:= `compareAndSet`(v6, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L396512.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396516.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L39651a.  call temp:= `getAndSet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L396520.  v6:= temp @kind object;
  #L396522.  v6:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v6 @kind object;
  #L396526.  v1:= length @variable v6;
  #L396528.  if v1 == 0 then goto L396546;
  #L39652c.  v1:= length @variable v6;
  #L39652e.  if v0 >= v1 then goto L39654c;
  #L396532.  v2:= v6[v0] @kind object;
  #L396536.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`d3.b` @kind object;
  #L39653a.  call `a`(v2, v5) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L396540.  v0:= v0 + 1;
  #L396544.  goto L39652e;
  #L396546.  call `q`(v5) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39654c.  return v3;
  #L39654e.  return v0;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v25 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L396600.  v1:= v25 @kind object;
  #L396604.  call temp:= `getAndIncrement`(v25) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39660a.  v0:= temp;
  #L39660c.  if v0 == 0 then goto L396612;
  #L396610.  return @kind void;
  #L396612.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396616.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39661c.  v0:= temp @kind object;
  #L39661e.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L396622.  v3:= 1I;
  #L396624.  v4:= v0 @kind object;
  #L396626.  v5:= 1I;
  #L396628.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L39662c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`k2.j` @kind object;
  #L396630.  if v6 == 0 then goto L396646;
  #L396634.  call temp:= `isEmpty`(v6) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L39663a.  v8:= temp;
  #L39663c.  if v8 == 0 then goto L396642;
  #L396640.  goto L396646;
  #L396642.  v8:= 0I;
  #L396644.  goto L396648;
  #L396646.  v8:= 1I;
  #L396648.  call temp:= `g`(v1, v0, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.g:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L39664e.  v0:= temp;
  #L396650.  if v0 == 0 then goto L396656;
  #L396654.  return @kind void;
  #L396656.  if v8 != 0 then goto L396880;
  #L39665a.  v0:= length @variable v4;
  #L39665c.  v9:= length @variable v4;
  #L39665e.  v12:= 0I;
  #L396660.  v13:= 0I;
  #L396662.  v14:= 9223372036854775807L;
  #L39666c.  v16:= -9223372036854775808L;
  #L396670.  if v12 >= v9 then goto L3966a4;
  #L396674.  v7:= v4[v12] @kind object;
  #L396678.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39667e.  v18:= temp @kind wide;
  #L396680.  v20:= lcmp(v18, v16);
  #L396684.  if v20 == 0 then goto L39669a;
  #L396688.  v10:= v7.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` @kind wide;
  #L39668c.  v10:= v18 - v10 @kind long;
  #L396690.  call temp:= `min`(v14, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L396696.  v14:= temp @kind wide;
  #L396698.  goto L39669e;
  #L39669a.  v13:= v13 + 1;
  #L39669e.  v12:= v12 + 1;
  #L3966a2.  goto L39666c;
  #L3966a4.  v9:= 1L;
  #L3966a8.  if v0 != v13 then goto L396720;
  #L3966ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L3966b0.  call temp:= `poll`(v6) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L3966b6.  v7:= temp @kind object;
  #L3966b8.  goto L3966e8;
  #L3966ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3966bc.  v6:= v0 @kind object;
  #L3966be.  call `b`(v6) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L3966c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3966c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3966ce.  v0:= temp @kind object;
  #L3966d0.  v0:= (`d3.c`) v0 @kind object;
  #L3966d4.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3966da.  call temp:= `c`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.c:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L3966e0.  v0:= temp @kind object;
  #L3966e2.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L3966e6.  v7:= 0I;
  #L3966e8.  if v7 != 0 then goto L3966f0;
  #L3966ec.  v7:= 1I;
  #L3966ee.  goto L3966f2;
  #L3966f0.  v7:= 0I;
  #L3966f2.  call temp:= `g`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.g:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L3966f8.  v0:= temp;
  #L3966fa.  if v0 == 0 then goto L396700;
  #L3966fe.  return @kind void;
  #L396700.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L396704.  if v0 == v3 then goto L396628;
  #L396708.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39670c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L396712.  v0:= temp @kind object;
  #L396714.  v0:= (`d3.c`) v0 @kind object;
  #L396718.  call `g`(v0, v9) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39671e.  goto L396628;
  #L396720.  v11:= 0I;
  #L396722.  v12:= (`long`) v11 @kind i2l;
  #L396724.  v0:= lcmp(v12, v14);
  #L396728.  if v0 >= 0 then goto L396844;
  #L39672c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L396730.  call temp:= `poll`(v6) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L396736.  v8:= temp @kind object;
  #L396738.  goto L396768;
  #L39673a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39673c.  v8:= v0 @kind object;
  #L39673e.  call `b`(v8) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L396744.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396748.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39674e.  v0:= temp @kind object;
  #L396750.  v0:= (`d3.c`) v0 @kind object;
  #L396754.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39675a.  call temp:= `c`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.c:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L396760.  v0:= temp @kind object;
  #L396762.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L396766.  v8:= 0I;
  #L396768.  if v8 != 0 then goto L396770;
  #L39676c.  v7:= 1I;
  #L39676e.  goto L396772;
  #L396770.  v7:= 0I;
  #L396772.  call temp:= `g`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.g:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L396778.  v0:= temp;
  #L39677a.  if v0 == 0 then goto L396780;
  #L39677e.  return @kind void;
  #L396780.  if v7 == 0 then goto L396788;
  #L396784.  v8:= v7;
  #L396786.  goto L396844;
  #L396788.  call temp:= `e`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L39678e.  v0:= temp @kind object;
  #L396790.  v8:= length @variable v4;
  #L396792.  v12:= 0I;
  #L396794.  v13:= 0I;
  #L396796.  if v12 >= v8 then goto L396802;
  #L39679a.  v3:= v4[v12] @kind object;
  #L39679e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3967a4.  v22:= temp @kind wide;
  #L3967a6.  v24:= lcmp(v22, v16);
  #L3967aa.  if v24 == 0 then goto L3967de;
  #L3967ae.  v20:= 9223372036854775807L;
  #L3967b8.  v24:= lcmp(v22, v20);
  #L3967bc.  v22:= v6 @kind object;
  #L3967c0.  v23:= v7;
  #L3967c4.  if v24 == 0 then goto L3967d2;
  #L3967c8.  v6:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` @kind wide;
  #L3967cc.  v6:= v6 + v9 @kind long;
  #L3967ce.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` := v6 @kind wide;
  #L3967d2.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`d3.b` @kind object;
  #L3967d6.  call `onNext`(v3, v0) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3967dc.  goto L3967f2;
  #L3967de.  v22:= v6 @kind object;
  #L3967e2.  v23:= v7;
  #L3967e6.  v20:= 9223372036854775807L;
  #L3967f0.  v13:= 1I;
  #L3967f2.  v12:= v12 + 1;
  #L3967f6.  v6:= v22 @kind object;
  #L3967fa.  v7:= v23;
  #L3967fe.  v3:= 1I;
  #L396800.  goto L396796;
  #L396802.  v22:= v6 @kind object;
  #L396806.  v23:= v7;
  #L39680a.  v20:= 9223372036854775807L;
  #L396814.  v11:= v11 + 1;
  #L396818.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39681e.  v0:= temp @kind object;
  #L396820.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L396824.  if v13 != 0 then goto L39683c;
  #L396828.  if v0 == v4 then goto L39682e;
  #L39682c.  goto L39683c;
  #L39682e.  v6:= v22 @kind object;
  #L396832.  v8:= v23;
  #L396836.  v3:= 1I;
  #L396838.  goto L396722;
  #L39683c.  v4:= v0 @kind object;
  #L39683e.  v3:= 1I;
  #L396840.  goto L396628;
  #L396844.  if v11 <= 0 then goto L39686a;
  #L396848.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L39684c.  v3:= 1I;
  #L39684e.  if v0 == v3 then goto L39686c;
  #L396852.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.s` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396856.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39685c.  v0:= temp @kind object;
  #L39685e.  v0:= (`d3.c`) v0 @kind object;
  #L396862.  call `g`(v0, v12) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L396868.  goto L39686c;
  #L39686a.  v3:= 1I;
  #L39686c.  v6:= 0L;
  #L396870.  v0:= lcmp(v14, v6);
  #L396874.  if v0 == 0 then goto L396880;
  #L396878.  if v8 != 0 then goto L396880;
  #L39687c.  goto L396628;
  #L396880.  v0:= -v5 @kind int;
  #L396882.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L396888.  v5:= temp;
  #L39688a.  if v5 != 0 then goto L396890;
  #L39688e.  return @kind void;
  #L396890.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L396896.  v0:= temp @kind object;
  #L396898.  v4:= v0 @kind object;
  #L39689a.  v4:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v4 @kind object;
  #L39689e.  goto L396628;
  catch `java.lang.Throwable` @[L3966b0..L3966b8] goto L3966ba;
  catch `java.lang.Throwable` @[L396730..L396738] goto L39673a;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L396a5c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396a60.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L396a66.  v0:= temp @kind object;
  #L396a68.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L396a6c.  v1:= length @variable v0;
  #L396a6e.  if v1 != 0 then goto L396a74;
  #L396a72.  goto L396ad8;
  #L396a74.  v2:= -1I;
  #L396a76.  v3:= 0I;
  #L396a78.  v4:= 0I;
  #L396a7a.  if v4 >= v1 then goto L396a98;
  #L396a7e.  v5:= v0[v4] @kind object;
  #L396a82.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L396a88.  v5:= temp;
  #L396a8a.  if v5 == 0 then goto L396a92;
  #L396a8e.  v2:= v4;
  #L396a90.  goto L396a98;
  #L396a92.  v4:= v4 + 1;
  #L396a96.  goto L396a7a;
  #L396a98.  if v2 >= 0 then goto L396a9e;
  #L396a9c.  return @kind void;
  #L396a9e.  v4:= 1I;
  #L396aa0.  if v1 != v4 then goto L396aaa;
  #L396aa4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.a` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L396aa8.  goto L396ac8;
  #L396aaa.  v5:= v1 + -1;
  #L396aae.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v5];
  #L396ab2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L396ab8.  v3:= v2 + 1;
  #L396abc.  v1:= v1 - v2 @kind int;
  #L396abe.  v1:= v1 - v4 @kind int;
  #L396ac0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L396ac6.  v1:= v5 @kind object;
  #L396ac8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396acc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L396ad2.  v0:= temp;
  #L396ad4.  if v0 == 0 then goto L396a5c;
  #L396ad8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39691c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L396920.  if v0 != 0 then goto L396936;
  #L396924.  call temp:= `b`() @signature `Lio/reactivex/internal/util/NotificationLite;.b:()Ljava/lang/Object;` @kind static;
  #L39692a.  v0:= temp @kind object;
  #L39692c.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L396930.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L396936.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39697c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L396980.  if v0 != 0 then goto L3969aa;
  #L396984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`k2.j` @kind object;
  #L396988.  call temp:= `offer`(v0, v2) @signature `Lk2/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L39698e.  v2:= temp;
  #L396990.  if v2 != 0 then goto L3969aa;
  #L396994.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L396998.  v0:= "Prefetch queue is full?!" @kind object;
  #L39699c.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3969a2.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3969a8.  return @kind void;
  #L3969aa.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L3969b0.  return @kind void;
}
