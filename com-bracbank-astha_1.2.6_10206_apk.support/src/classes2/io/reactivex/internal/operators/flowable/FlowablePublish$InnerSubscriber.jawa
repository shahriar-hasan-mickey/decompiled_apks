record `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `d3.c` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3963bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L3963c2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`d3.b` := v1 @kind object;
  #L3963c6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3963d8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3963de.  v0:= temp @kind wide;
  #L3963e0.  v2:= -9223372036854775808L;
  #L3963e4.  v4:= lcmp(v0, v2);
  #L3963e8.  if v4 == 0 then goto L396410;
  #L3963ec.  call temp:= `getAndSet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L3963f2.  v0:= temp @kind wide;
  #L3963f4.  v4:= lcmp(v0, v2);
  #L3963f8.  if v4 == 0 then goto L396410;
  #L3963fc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L396400.  if v0 == 0 then goto L396410;
  #L396404.  call `i`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L39640a.  call `h`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L396410.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396424.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39642a.  v0:= temp;
  #L39642c.  if v0 == 0 then goto L396444;
  #L396430.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L396436.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L39643a.  if v2 == 0 then goto L396444;
  #L39643e.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L396444.  return @kind void;
}
