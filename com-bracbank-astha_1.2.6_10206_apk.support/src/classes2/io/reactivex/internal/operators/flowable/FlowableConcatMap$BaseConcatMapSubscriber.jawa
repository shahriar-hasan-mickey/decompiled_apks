record `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `b2.h` @kind interface, `io.reactivex.internal.operators.flowable.FlowableConcatMap$b` @kind interface, `d3.c` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @AccessFlag FINAL;
  `k2.j` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @AccessFlag ;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v0 @kind this, `h2.e` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lh2/e;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39011c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L390122.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @type ^`h2.e` := v1 @kind object;
  #L390126.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int` := v2;
  #L39012a.  v1:= v2 ^> 2;
  #L39012e.  v2:= v2 - v1 @kind int;
  #L390130.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @type ^`int` := v2;
  #L390134.  v1:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner`;
  #L390138.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;)V` @kind direct;
  #L39013e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` := v1 @kind object;
  #L390142.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L390146.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L39014c.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L390150.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3901f8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L3901fc.  call temp:= `i`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L390202.  v0:= temp;
  #L390204.  if v0 == 0 then goto L39028a;
  #L390208.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` := v4 @kind object;
  #L39020c.  v0:= instanceof @variable v4 @type ^`k2.g` @kind boolean;
  #L390210.  if v0 == 0 then goto L390266;
  #L390214.  v0:= v4 @kind object;
  #L390216.  v0:= (`k2.g`) v0 @kind object;
  #L39021a.  v1:= 3I;
  #L39021c.  call temp:= `h`(v0, v1) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L390222.  v1:= temp;
  #L390224.  v2:= 1I;
  #L390226.  if v1 != v2 then goto L390244;
  #L39022a.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L39022e.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L390232.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L390236.  call `i`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.i:()V` @kind virtual;
  #L39023c.  call `h`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.h:()V` @kind virtual;
  #L390242.  return @kind void;
  #L390244.  v2:= 2I;
  #L390246.  if v1 != v2 then goto L390266;
  #L39024a.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int` := v1;
  #L39024e.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L390252.  call `i`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.i:()V` @kind virtual;
  #L390258.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L39025c.  v0:= (`long`) v0 @kind i2l;
  #L39025e.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L390264.  return @kind void;
  #L390266.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L39026a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L39026e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L390274.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L390278.  call `i`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.i:()V` @kind virtual;
  #L39027e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.prefetch` @type ^`int`;
  #L390282.  v0:= (`long`) v0 @kind i2l;
  #L390284.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39028a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390164.  v0:= 0I;
  #L390166.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v0 @kind boolean;
  #L39016a.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.h:()V` @kind virtual;
  #L390170.  return @kind void;
}
procedure `void` `h`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.h:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `i`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.i:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L390184.  v0:= 1I;
  #L390186.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L39018a.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.h:()V` @kind virtual;
  #L390190.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3901a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int`;
  #L3901a8.  v1:= 2I;
  #L3901aa.  if v0 == v1 then goto L3901de;
  #L3901ae.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`k2.j` @kind object;
  #L3901b2.  call temp:= `offer`(v0, v3) @signature `Lk2/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3901b8.  v3:= temp;
  #L3901ba.  if v3 != 0 then goto L3901de;
  #L3901be.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L3901c2.  call `cancel`(v3) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3901c8.  v3:= new `java.lang.IllegalStateException`;
  #L3901cc.  v0:= "Queue full?!" @kind object;
  #L3901d0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3901d6.  call `a`(v2, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3901dc.  return @kind void;
  #L3901de.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.h:()V` @kind virtual;
  #L3901e4.  return @kind void;
}
