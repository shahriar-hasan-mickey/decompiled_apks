record `io.reactivex.internal.operators.flowable.FlowablePublish$a` @kind class @AccessFlag FINAL extends `d3.a` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$a` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L396300.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L396306.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L39630a.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @type ^`int` := v2;
  #L39630e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowablePublish$a` v6 @kind this, `d3.b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.a:(Ld3/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L396320.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`;
  #L396324.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Ld3/b;)V` @kind direct;
  #L39632a.  call `c`(v7, v0) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L396330.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396334.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39633a.  v7:= temp @kind object;
  #L39633c.  v7:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v7 @kind object;
  #L396340.  if v7 == 0 then goto L396350;
  #L396344.  call temp:= `d`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.d:()Z` @kind virtual;
  #L39634a.  v1:= temp;
  #L39634c.  if v1 == 0 then goto L396376;
  #L396350.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L396354.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396358.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.b` @type ^`int`;
  #L39635c.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L396362.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L396366.  call temp:= `compareAndSet`(v2, v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39636c.  v7:= temp;
  #L39636e.  if v7 != 0 then goto L396374;
  #L396372.  goto L396330;
  #L396374.  v7:= v1 @kind object;
  #L396376.  call temp:= `b`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.b:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)Z` @kind virtual;
  #L39637c.  v1:= temp;
  #L39637e.  if v1 == 0 then goto L396330;
  #L396382.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L396388.  v1:= temp @kind wide;
  #L39638a.  v3:= -9223372036854775808L;
  #L39638e.  v5:= lcmp(v1, v3);
  #L396392.  if v5 != 0 then goto L39639e;
  #L396396.  call `i`(v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L39639c.  goto L3963a2;
  #L39639e.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` := v7 @kind object;
  #L3963a2.  call `h`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.h:()V` @kind virtual;
  #L3963a8.  return @kind void;
}
