record `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v0 @kind this, `d3.b` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.<init>:(Ld3/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L390ebc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ld3/b;)V` @kind direct;
  #L390ec2.  v1:= new `io.reactivex.internal.queue.a`;
  #L390ec6.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L390ecc.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L390ed0.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L390ed4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L390eda.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L390ede.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.e:()V` @AccessFlag  {
    temp;

  #L39104c.  call `i`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.i:()V` @kind virtual;
  #L391052.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L391064.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L391068.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39106e.  v0:= temp;
  #L391070.  if v0 != 0 then goto L39107e;
  #L391074.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L391078.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L39107e.  return @kind void;
}
procedure `boolean` `h`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.h:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390e6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L390e70.  if v0 != 0 then goto L390ea6;
  #L390e74.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L390e7a.  v0:= temp;
  #L390e7c.  if v0 == 0 then goto L390e82;
  #L390e80.  goto L390ea6;
  #L390e82.  if v2 != 0 then goto L390e94;
  #L390e86.  v2:= new `java.lang.NullPointerException`;
  #L390e8a.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L390e8e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L390e94.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L390e98.  v2:= 1I;
  #L390e9a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` := v2 @kind boolean;
  #L390e9e.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.i:()V` @kind virtual;
  #L390ea4.  return v2;
  #L390ea6.  v2:= 0I;
  #L390ea8.  return v2;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L390ef0.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L390ef4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L390efa.  v0:= temp;
  #L390efc.  if v0 == 0 then goto L390f02;
  #L390f00.  return @kind void;
  #L390f02.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L390f06.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L390f0a.  v2:= 1I;
  #L390f0c.  v3:= 1I;
  #L390f0e.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L390f14.  v4:= temp @kind wide;
  #L390f16.  v6:= 0L;
  #L390f1a.  v8:= v6 @kind wide;
  #L390f1c.  v10:= lcmp(v8, v4);
  #L390f20.  if v10 == 0 then goto L390f82;
  #L390f24.  call temp:= `c`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L390f2a.  v11:= temp;
  #L390f2c.  if v11 == 0 then goto L390f38;
  #L390f30.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L390f36.  return @kind void;
  #L390f38.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L390f3c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L390f42.  v12:= temp @kind object;
  #L390f44.  if v12 != 0 then goto L390f4c;
  #L390f48.  v13:= 1I;
  #L390f4a.  goto L390f4e;
  #L390f4c.  v13:= 0I;
  #L390f4e.  if v11 == 0 then goto L390f6e;
  #L390f52.  if v13 == 0 then goto L390f6e;
  #L390f56.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L390f5a.  if v0 == 0 then goto L390f66;
  #L390f5e.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390f64.  goto L390f6c;
  #L390f66.  call `a`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.a:()V` @kind virtual;
  #L390f6c.  return @kind void;
  #L390f6e.  if v13 == 0 then goto L390f74;
  #L390f72.  goto L390f82;
  #L390f74.  call `onNext`(v0, v12) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L390f7a.  v10:= 1L;
  #L390f7e.  v8:= v8 + v10 @kind long;
  #L390f80.  goto L390f1c;
  #L390f82.  if v10 != 0 then goto L390fc6;
  #L390f86.  call temp:= `c`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L390f8c.  v4:= temp;
  #L390f8e.  if v4 == 0 then goto L390f9a;
  #L390f92.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L390f98.  return @kind void;
  #L390f9a.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L390f9e.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L390fa4.  v5:= temp;
  #L390fa6.  if v4 == 0 then goto L390fc6;
  #L390faa.  if v5 == 0 then goto L390fc6;
  #L390fae.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L390fb2.  if v0 == 0 then goto L390fbe;
  #L390fb6.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390fbc.  goto L390fc4;
  #L390fbe.  call `a`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.a:()V` @kind virtual;
  #L390fc4.  return @kind void;
  #L390fc6.  v4:= lcmp(v8, v6);
  #L390fca.  if v4 == 0 then goto L390fd4;
  #L390fce.  call temp:= `d`(v14, v8) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L390fd4.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L390fd8.  v3:= -v3 @kind int;
  #L390fda.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L390fe0.  v3:= temp;
  #L390fe2.  if v3 != 0 then goto L390f0e;
  #L390fe6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390ff8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L390ffc.  if v0 != 0 then goto L391038;
  #L391000.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L391006.  v0:= temp;
  #L391008.  if v0 == 0 then goto L39100e;
  #L39100c.  goto L391038;
  #L39100e.  if v2 != 0 then goto L391028;
  #L391012.  v2:= new `java.lang.NullPointerException`;
  #L391016.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L39101a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L391020.  call `d`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L391026.  return @kind void;
  #L391028.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L39102c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L391032.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.i:()V` @kind virtual;
  #L391038.  return @kind void;
}
