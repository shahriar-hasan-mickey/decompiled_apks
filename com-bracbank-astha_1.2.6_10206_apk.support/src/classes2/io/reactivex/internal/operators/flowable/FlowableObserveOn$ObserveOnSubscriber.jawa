record `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v0 @kind this, `d3.b` v1 @kind object, `b2.q$b` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.<init>:(Ld3/b;Lb2/q$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3954e8.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lb2/q$b;ZI)V` @kind direct;
  #L3954ee.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` := v1 @kind object;
  #L3954f2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L395504.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L395508.  call temp:= `i`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L39550e.  v0:= temp;
  #L395510.  if v0 == 0 then goto L39559c;
  #L395514.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` := v4 @kind object;
  #L395518.  v0:= instanceof @variable v4 @type ^`k2.g` @kind boolean;
  #L39551c.  if v0 == 0 then goto L395574;
  #L395520.  v0:= v4 @kind object;
  #L395522.  v0:= (`k2.g`) v0 @kind object;
  #L395526.  v1:= 7I;
  #L395528.  call temp:= `h`(v0, v1) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L39552e.  v1:= temp;
  #L395530.  v2:= 1I;
  #L395532.  if v1 != v2 then goto L39554e;
  #L395536.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L39553a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L39553e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L395542.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L395546.  call `c`(v4, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L39554c.  return @kind void;
  #L39554e.  v2:= 2I;
  #L395550.  if v1 != v2 then goto L395574;
  #L395554.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int` := v2;
  #L395558.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L39555c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L395560.  call `c`(v0, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L395566.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L39556a.  v0:= (`long`) v0 @kind i2l;
  #L39556c.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L395572.  return @kind void;
  #L395574.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L395578.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L39557c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L395582.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L395586.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L39558a.  call `c`(v0, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L395590.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int`;
  #L395594.  v0:= (`long`) v0 @kind i2l;
  #L395596.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39559c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3955b0.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L3955b4.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L3955b8.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L3955bc.  v4:= 1I;
  #L3955be.  v5:= 1I;
  #L3955c0.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3955c4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3955ca.  v6:= temp @kind wide;
  #L3955cc.  v8:= lcmp(v2, v6);
  #L3955d0.  if v8 == 0 then goto L395672;
  #L3955d4.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L3955d8.  call temp:= `poll`(v1) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L3955de.  v10:= temp @kind object;
  #L3955e0.  if v10 != 0 then goto L3955e8;
  #L3955e4.  v11:= 1I;
  #L3955e6.  goto L3955ea;
  #L3955e8.  v11:= 0I;
  #L3955ea.  call temp:= `d`(v12, v9, v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.d:(ZZLd3/b;)Z` @kind virtual;
  #L3955f0.  v9:= temp;
  #L3955f2.  if v9 == 0 then goto L3955f8;
  #L3955f6.  return @kind void;
  #L3955f8.  if v11 == 0 then goto L3955fe;
  #L3955fc.  goto L395672;
  #L3955fe.  call `onNext`(v0, v10) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L395604.  v8:= 1L;
  #L395608.  v2:= v2 + v8 @kind long;
  #L39560a.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L39560e.  v8:= (`long`) v8 @kind i2l;
  #L395610.  v10:= lcmp(v2, v8);
  #L395614.  if v10 != 0 then goto L3955cc;
  #L395618.  v8:= 9223372036854775807L;
  #L395622.  v10:= lcmp(v6, v8);
  #L395626.  if v10 == 0 then goto L395638;
  #L39562a.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39562e.  v7:= -v2 @kind long;
  #L395630.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L395636.  v6:= temp @kind wide;
  #L395638.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L39563c.  call `g`(v8, v2) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L395642.  v2:= 0L;
  #L395646.  goto L3955cc;
  #L395648.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39564a.  call `b`(v2) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L395650.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L395654.  call `cancel`(v3) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39565a.  call `clear`(v1) @signature `Lk2/j;.clear:()V` @kind interface;
  #L395660.  call `a`(v0, v2) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L395666.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L39566a.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L395670.  return @kind void;
  #L395672.  if v8 != 0 then goto L395690;
  #L395676.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L39567a.  call temp:= `isEmpty`(v1) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L395680.  v7:= temp;
  #L395682.  call temp:= `d`(v12, v6, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.d:(ZZLd3/b;)Z` @kind virtual;
  #L395688.  v6:= temp;
  #L39568a.  if v6 == 0 then goto L395690;
  #L39568e.  return @kind void;
  #L395690.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L395696.  v6:= temp;
  #L395698.  if v5 != v6 then goto L3956b0;
  #L39569c.  v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L3956a0.  v5:= -v5 @kind int;
  #L3956a2.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3956a8.  v5:= temp;
  #L3956aa.  if v5 != 0 then goto L3955c0;
  #L3956ae.  return @kind void;
  #L3956b0.  v5:= v6;
  #L3956b2.  goto L3955c0;
  catch `java.lang.Throwable` @[L3955d8..L3955e0] goto L395648;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3956d0.  v0:= 1I;
  #L3956d2.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3956d6.  if v1 == 0 then goto L3956dc;
  #L3956da.  return @kind void;
  #L3956dc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L3956e0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L3956e4.  v3:= 0I;
  #L3956e6.  call `onNext`(v2, v3) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3956ec.  if v1 == 0 then goto L39571a;
  #L3956f0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L3956f4.  if v0 == 0 then goto L395704;
  #L3956f8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L3956fc.  call `a`(v1, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L395702.  goto L39570e;
  #L395704.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L395708.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39570e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L395712.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L395718.  return @kind void;
  #L39571a.  v0:= -v0 @kind int;
  #L39571c.  call temp:= `addAndGet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L395722.  v0:= temp;
  #L395724.  if v0 != 0 then goto L3956d2;
  #L395728.  return @kind void;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L39573c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.actual` @type ^`d3.b` @kind object;
  #L395740.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L395744.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L395748.  v4:= 1I;
  #L39574a.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39574e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L395754.  v5:= temp @kind wide;
  #L395756.  v7:= lcmp(v2, v5);
  #L39575a.  if v7 == 0 then goto L3957b8;
  #L39575e.  call temp:= `poll`(v1) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L395764.  v7:= temp @kind object;
  #L395766.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L39576a.  if v8 == 0 then goto L395770;
  #L39576e.  return @kind void;
  #L395770.  if v7 != 0 then goto L395786;
  #L395774.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39577a.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L39577e.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L395784.  return @kind void;
  #L395786.  call `onNext`(v0, v7) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39578c.  v7:= 1L;
  #L395790.  v2:= v2 + v7 @kind long;
  #L395792.  goto L395756;
  #L395794.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L395796.  call `b`(v1) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39579c.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L3957a0.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3957a6.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3957ac.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L3957b0.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L3957b6.  return @kind void;
  #L3957b8.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3957bc.  if v5 == 0 then goto L3957c2;
  #L3957c0.  return @kind void;
  #L3957c2.  call temp:= `isEmpty`(v1) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L3957c8.  v5:= temp;
  #L3957ca.  if v5 == 0 then goto L3957e0;
  #L3957ce.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L3957d4.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L3957d8.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L3957de.  return @kind void;
  #L3957e0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3957e6.  v5:= temp;
  #L3957e8.  if v4 != v5 then goto L395800;
  #L3957ec.  v9.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L3957f0.  v4:= -v4 @kind int;
  #L3957f2.  call temp:= `addAndGet`(v9, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L3957f8.  v4:= temp;
  #L3957fa.  if v4 != 0 then goto L39574a;
  #L3957fe.  return @kind void;
  #L395800.  v4:= v5;
  #L395802.  goto L39574a;
  catch `java.lang.Throwable` @[L39575e..L395766] goto L395794;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$ObserveOnSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39548c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L395490.  call temp:= `poll`(v0) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L395496.  v0:= temp @kind object;
  #L395498.  if v0 == 0 then goto L3954d6;
  #L39549c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L3954a0.  v2:= 1I;
  #L3954a2.  if v1 == v2 then goto L3954d6;
  #L3954a6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` @kind wide;
  #L3954aa.  v3:= 1L;
  #L3954ae.  v1:= v1 + v3 @kind long;
  #L3954b0.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int`;
  #L3954b4.  v3:= (`long`) v3 @kind i2l;
  #L3954b6.  v5:= lcmp(v1, v3);
  #L3954ba.  if v5 != 0 then goto L3954d2;
  #L3954be.  v3:= 0L;
  #L3954c2.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L3954c6.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L3954ca.  call `g`(v3, v1) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L3954d0.  goto L3954d6;
  #L3954d2.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @type ^`long` := v1 @kind wide;
  #L3954d6.  return v0 @kind object;
}
