record `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `b2.h` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @AccessFlag ;
  `k2.j` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @AccessFlag FINAL;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @AccessFlag ;
  `b2.q$b` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v0 @kind this, `b2.q$b` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lb2/q$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L394f00.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L394f06.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` := v1 @kind object;
  #L394f0a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` := v2 @kind boolean;
  #L394f0e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int` := v3;
  #L394f12.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L394f16.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L394f1c.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L394f20.  v1:= v3 ^> 2;
  #L394f24.  v3:= v3 - v1 @kind int;
  #L394f26.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int` := v3;
  #L394f2a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394fcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L394fd0.  if v0 == 0 then goto L394fdc;
  #L394fd4.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L394fda.  return @kind void;
  #L394fdc.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L394fe0.  v2:= 1I;
  #L394fe2.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L394fe6.  call `k`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @kind virtual;
  #L394fec.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394f3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L394f40.  if v0 == 0 then goto L394f46;
  #L394f44.  return @kind void;
  #L394f46.  v0:= 1I;
  #L394f48.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L394f4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L394f50.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L394f56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L394f5a.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L394f60.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L394f66.  v0:= temp;
  #L394f68.  if v0 != 0 then goto L394f76;
  #L394f6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L394f70.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L394f76.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394f88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L394f8c.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L394f92.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `d3.b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.d:(ZZLd3/b;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L394e2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L394e30.  v1:= 1I;
  #L394e32.  if v0 == 0 then goto L394e3e;
  #L394e36.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L394e3c.  return v1;
  #L394e3e.  if v3 == 0 then goto L394ea6;
  #L394e42.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L394e46.  if v3 == 0 then goto L394e70;
  #L394e4a.  if v4 == 0 then goto L394ea6;
  #L394e4e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L394e52.  if v3 == 0 then goto L394e5e;
  #L394e56.  call `a`(v5, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L394e5c.  goto L394e64;
  #L394e5e.  call `onComplete`(v5) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L394e64.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L394e68.  call `e`(v3) @signature `Le2/b;.e:()V` @kind interface;
  #L394e6e.  return v1;
  #L394e70.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L394e74.  if v3 == 0 then goto L394e90;
  #L394e78.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L394e7e.  call `a`(v5, v3) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L394e84.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L394e88.  call `e`(v3) @signature `Le2/b;.e:()V` @kind interface;
  #L394e8e.  return v1;
  #L394e90.  if v4 == 0 then goto L394ea6;
  #L394e94.  call `onComplete`(v5) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L394e9a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L394e9e.  call `e`(v3) @signature `Le2/b;.e:()V` @kind interface;
  #L394ea4.  return v1;
  #L394ea6.  v3:= 0I;
  #L394ea8.  return v3;
}
procedure `void` `e`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.g:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L395068.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39506e.  v0:= temp;
  #L395070.  if v0 == 0 then goto L395084;
  #L395074.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L395078.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L39507e.  call `k`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @kind virtual;
  #L395084.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394edc.  v0:= 2I;
  #L394ede.  v2:= v2 ^& v0 @kind int;
  #L394ee0.  if v2 == 0 then goto L394eec;
  #L394ee4.  v2:= 1I;
  #L394ee6.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L394eea.  return v0;
  #L394eec.  v2:= 0I;
  #L394eee.  return v2;
}
procedure `void` `i`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.i:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394ebc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L394ec0.  call temp:= `isEmpty`(v0) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L394ec6.  v0:= temp;
  #L394ec8.  return v0;
}
procedure `void` `j`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.j:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L3950d4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3950da.  v0:= temp;
  #L3950dc.  if v0 == 0 then goto L3950e2;
  #L3950e0.  return @kind void;
  #L3950e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`b2.q$b` @kind object;
  #L3950e6.  call temp:= `b`(v0, v1) @signature `Lb2/q$b;.b:(Ljava/lang/Runnable;)Le2/b;` @kind virtual;
  #L3950ec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394fa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L394fa8.  if v0 != 0 then goto L394fb8;
  #L394fac.  v0:= 1I;
  #L394fae.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L394fb2.  call `k`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @kind virtual;
  #L394fb8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L395000.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L395004.  if v0 == 0 then goto L39500a;
  #L395008.  return @kind void;
  #L39500a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L39500e.  v1:= 2I;
  #L395010.  if v0 != v1 then goto L39501c;
  #L395014.  call `k`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @kind virtual;
  #L39501a.  return @kind void;
  #L39501c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`k2.j` @kind object;
  #L395020.  call temp:= `offer`(v0, v3) @signature `Lk2/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L395026.  v3:= temp;
  #L395028.  if v3 != 0 then goto L39504e;
  #L39502c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.s` @type ^`d3.c` @kind object;
  #L395030.  call `cancel`(v3) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L395036.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L39503a.  v0:= "Queue is full?!" @kind object;
  #L39503e.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L395044.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L395048.  v3:= 1I;
  #L39504a.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L39504e.  call `k`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.k:()V` @kind virtual;
  #L395054.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L395098.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L39509c.  if v0 == 0 then goto L3950a8;
  #L3950a0.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.i:()V` @kind virtual;
  #L3950a6.  goto L3950c0;
  #L3950a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L3950ac.  v1:= 1I;
  #L3950ae.  if v0 != v1 then goto L3950ba;
  #L3950b2.  call `j`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.j:()V` @kind virtual;
  #L3950b8.  goto L3950c0;
  #L3950ba.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.e:()V` @kind virtual;
  #L3950c0.  return @kind void;
}
