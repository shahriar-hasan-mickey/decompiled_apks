record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `k2.a` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.actual` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v0 @kind this, `k2.a` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.<init>:(Lk2/a;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L393ff8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L393ffe.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.actual` @type ^`k2.a` := v1 @kind object;
  #L394002.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L394014.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L394018.  v1:= length @variable v0;
  #L39401a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.actual` @type ^`k2.a` @kind object;
  #L39401e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L394022.  if v3 == v1 then goto L39405a;
  #L394026.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L39402a.  if v4 == 0 then goto L394030;
  #L39402e.  return @kind void;
  #L394030.  v4:= v0[v3] @kind object;
  #L394034.  if v4 != 0 then goto L39404e;
  #L394038.  v0:= new `java.lang.NullPointerException`;
  #L39403c.  v1:= "array element is null" @kind object;
  #L394040.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L394046.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39404c.  return @kind void;
  #L39404e.  call temp:= `f`(v2, v4) @signature `Lk2/a;.f:(Ljava/lang/Object;)Z` @kind interface;
  #L394054.  v3:= v3 + 1;
  #L394058.  goto L394022;
  #L39405a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L39405e.  if v0 == 0 then goto L394064;
  #L394062.  return @kind void;
  #L394064.  call `onComplete`(v2) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39406a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.b:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L39407c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L394080.  v1:= length @variable v0;
  #L394082.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L394086.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.actual` @type ^`k2.a` @kind object;
  #L39408a.  v4:= 0L;
  #L39408e.  v6:= v4 @kind wide;
  #L394090.  v8:= lcmp(v6, v11);
  #L394094.  if v8 == 0 then goto L3940dc;
  #L394098.  if v2 == v1 then goto L3940dc;
  #L39409c.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3940a0.  if v8 == 0 then goto L3940a6;
  #L3940a4.  return @kind void;
  #L3940a6.  v8:= v0[v2] @kind object;
  #L3940aa.  if v8 != 0 then goto L3940c4;
  #L3940ae.  v11:= new `java.lang.NullPointerException`;
  #L3940b2.  v12:= "array element is null" @kind object;
  #L3940b6.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3940bc.  call `a`(v3, v11) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3940c2.  return @kind void;
  #L3940c4.  call temp:= `f`(v3, v8) @signature `Lk2/a;.f:(Ljava/lang/Object;)Z` @kind interface;
  #L3940ca.  v8:= temp;
  #L3940cc.  if v8 == 0 then goto L3940d6;
  #L3940d0.  v8:= 1L;
  #L3940d4.  v6:= v6 + v8 @kind long;
  #L3940d6.  v2:= v2 + 1;
  #L3940da.  goto L394090;
  #L3940dc.  if v2 != v1 then goto L3940f0;
  #L3940e0.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3940e4.  if v11 != 0 then goto L3940ee;
  #L3940e8.  call `onComplete`(v3) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L3940ee.  return @kind void;
  #L3940f0.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3940f6.  v11:= temp @kind wide;
  #L3940f8.  v8:= lcmp(v6, v11);
  #L3940fc.  if v8 != 0 then goto L394090;
  #L394100.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v2;
  #L394104.  v11:= -v6 @kind long;
  #L394106.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L39410c.  v11:= temp @kind wide;
  #L39410e.  v6:= lcmp(v11, v4);
  #L394112.  if v6 != 0 then goto L39408e;
  #L394116.  return @kind void;
}
