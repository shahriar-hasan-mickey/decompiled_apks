record `io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.<init>:(Ld3/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3913c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ld3/b;)V` @kind direct;
  #L3913c6.  return @kind void;
}
procedure `void` `i`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.i:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3913d8.  call temp:= `c`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.c:()Z` @kind virtual;
  #L3913de.  v0:= temp;
  #L3913e0.  if v0 == 0 then goto L3913e6;
  #L3913e4.  return @kind void;
  #L3913e6.  if v6 != 0 then goto L391400;
  #L3913ea.  v6:= new `java.lang.NullPointerException`;
  #L3913ee.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3913f2.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3913f8.  call `d`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3913fe.  return @kind void;
  #L391400.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L391406.  v0:= temp @kind wide;
  #L391408.  v2:= 0L;
  #L39140c.  v4:= lcmp(v0, v2);
  #L391410.  if v4 == 0 then goto L39142a;
  #L391414.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.actual` @type ^`d3.b` @kind object;
  #L391418.  call `onNext`(v0, v6) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39141e.  v0:= 1L;
  #L391422.  call temp:= `d`(v5, v0) @signature `Lio/reactivex/internal/util/b;.d:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L391428.  goto L391430;
  #L39142a.  call `i`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$NoOverflowBaseAsyncEmitter;.i:()V` @kind virtual;
  #L391430.  return @kind void;
}
