record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` v0 @kind this, `b2.e` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError;.<init>:(Lb2/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39600c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lb2/e;)V` @kind direct;
  #L396012.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError` v2 @kind this, `d3.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L396024.  v0:= v2.`io.reactivex.internal.operators.flowable.a.b` @type ^`b2.e` @kind object;
  #L396028.  v1:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber`;
  #L39602c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.<init>:(Ld3/b;)V` @kind direct;
  #L396032.  call `H`(v0, v1) @signature `Lb2/e;.H:(Lb2/h;)V` @kind virtual;
  #L396038.  return @kind void;
}
