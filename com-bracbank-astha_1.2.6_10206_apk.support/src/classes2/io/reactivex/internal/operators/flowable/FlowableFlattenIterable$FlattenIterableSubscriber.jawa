record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `b2.h` @kind interface {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @AccessFlag FINAL;
  `k2.j` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @AccessFlag FINAL;
  `d3.c` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v0 @kind this, `d3.b` v1 @kind object, `h2.e` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.<init>:(Ld3/b;Lh2/e;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L393a10.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L393a16.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @type ^`d3.b` := v1 @kind object;
  #L393a1a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`h2.e` := v2 @kind object;
  #L393a1e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int` := v3;
  #L393a22.  v1:= v3 ^> 2;
  #L393a26.  v3:= v3 - v1 @kind int;
  #L393a28.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int` := v3;
  #L393a2c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L393a30.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L393a36.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L393a3a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L393a3e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L393a44.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L393a48.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393dc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393dc8.  if v0 != 0 then goto L393dea;
  #L393dcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393dd0.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L393dd6.  v0:= temp;
  #L393dd8.  if v0 == 0 then goto L393dea;
  #L393ddc.  v2:= 1I;
  #L393dde.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L393de2.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.i:()V` @kind virtual;
  #L393de8.  goto L393df0;
  #L393dea.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L393df0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `d3.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.c:(Ld3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L393e54.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393e58.  call temp:= `i`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @kind static;
  #L393e5e.  v0:= temp;
  #L393e60.  if v0 == 0 then goto L393eec;
  #L393e64.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` := v4 @kind object;
  #L393e68.  v0:= instanceof @variable v4 @type ^`k2.g` @kind boolean;
  #L393e6c.  if v0 == 0 then goto L393ec4;
  #L393e70.  v0:= v4 @kind object;
  #L393e72.  v0:= (`k2.g`) v0 @kind object;
  #L393e76.  v1:= 3I;
  #L393e78.  call temp:= `h`(v0, v1) @signature `Lk2/f;.h:(I)I` @kind interface;
  #L393e7e.  v1:= temp;
  #L393e80.  v2:= 1I;
  #L393e82.  if v1 != v2 then goto L393e9e;
  #L393e86.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L393e8a.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L393e8e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L393e92.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @type ^`d3.b` @kind object;
  #L393e96.  call `c`(v4, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L393e9c.  return @kind void;
  #L393e9e.  v2:= 2I;
  #L393ea0.  if v1 != v2 then goto L393ec4;
  #L393ea4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L393ea8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L393eac.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @type ^`d3.b` @kind object;
  #L393eb0.  call `c`(v0, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L393eb6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L393eba.  v0:= (`long`) v0 @kind i2l;
  #L393ebc.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L393ec2.  return @kind void;
  #L393ec4.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L393ec8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L393ecc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L393ed2.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` := v0 @kind object;
  #L393ed6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @type ^`d3.b` @kind object;
  #L393eda.  call `c`(v0, v3) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L393ee0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L393ee4.  v0:= (`long`) v0 @kind i2l;
  #L393ee6.  call `g`(v4, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L393eec.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393a5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L393a60.  if v0 != 0 then goto L393a8a;
  #L393a64.  v0:= 1I;
  #L393a66.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L393a6a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393a6e.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L393a74.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L393a7a.  v0:= temp;
  #L393a7c.  if v0 != 0 then goto L393a8a;
  #L393a80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L393a84.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L393a8a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393a9c.  v0:= 0I;
  #L393a9e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L393aa2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L393aa6.  call `clear`(v0) @signature `Lk2/j;.clear:()V` @kind interface;
  #L393aac.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `d3.b` v6 @kind object, `k2.j` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.d:(ZZLd3/b;Lk2/j;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3938c8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L3938cc.  v1:= 0I;
  #L3938ce.  v2:= 1I;
  #L3938d0.  if v0 == 0 then goto L3938e0;
  #L3938d4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L3938d8.  call `clear`(v7) @signature `Lk2/j;.clear:()V` @kind interface;
  #L3938de.  return v2;
  #L3938e0.  if v4 == 0 then goto L393922;
  #L3938e4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3938e8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3938ee.  v4:= temp @kind object;
  #L3938f0.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L3938f4.  if v4 == 0 then goto L393916;
  #L3938f8.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3938fc.  call temp:= `b`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L393902.  v4:= temp @kind object;
  #L393904.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L393908.  call `clear`(v7) @signature `Lk2/j;.clear:()V` @kind interface;
  #L39390e.  call `a`(v6, v4) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L393914.  return v2;
  #L393916.  if v5 == 0 then goto L393922;
  #L39391a.  call `onComplete`(v6) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L393920.  return v2;
  #L393922.  v4:= 0I;
  #L393924.  return v4;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.e:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L393ac0.  if v4 == 0 then goto L393aec;
  #L393ac4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int`;
  #L393ac8.  v4:= v4 + 1;
  #L393acc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int`;
  #L393ad0.  if v4 != v0 then goto L393ae8;
  #L393ad4.  v0:= 0I;
  #L393ad6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v0;
  #L393ada.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393ade.  v1:= (`long`) v4 @kind i2l;
  #L393ae0.  call `g`(v0, v1) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L393ae6.  goto L393aec;
  #L393ae8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v4;
  #L393aec.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393f00.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L393f06.  v0:= temp;
  #L393f08.  if v0 == 0 then goto L393f1c;
  #L393f0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L393f10.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L393f16.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.i:()V` @kind virtual;
  #L393f1c.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393968.  v0:= 1I;
  #L39396a.  v2:= v2 ^& v0 @kind int;
  #L39396c.  if v2 == 0 then goto L39397a;
  #L393970.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L393974.  if v2 != v0 then goto L39397a;
  #L393978.  return v0;
  #L39397a.  v2:= 0I;
  #L39397c.  return v2;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L393b00.  v1:= v18 @kind object;
  #L393b04.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L393b0a.  v0:= temp;
  #L393b0c.  if v0 == 0 then goto L393b12;
  #L393b10.  return @kind void;
  #L393b12.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.actual` @type ^`d3.b` @kind object;
  #L393b16.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L393b1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L393b1e.  v4:= 0I;
  #L393b20.  v5:= 1I;
  #L393b22.  if v0 == v5 then goto L393b2a;
  #L393b26.  v0:= 1I;
  #L393b28.  goto L393b2c;
  #L393b2a.  v0:= 0I;
  #L393b2c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L393b30.  v7:= 0I;
  #L393b32.  v8:= 1I;
  #L393b34.  if v6 != 0 then goto L393c00;
  #L393b38.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393b3c.  call temp:= `poll`(v3) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L393b42.  v10:= temp @kind object;
  #L393b44.  if v10 != 0 then goto L393b4c;
  #L393b48.  v11:= 1I;
  #L393b4a.  goto L393b4e;
  #L393b4c.  v11:= 0I;
  #L393b4e.  call temp:= `d`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.d:(ZZLd3/b;Lk2/j;)Z` @kind virtual;
  #L393b54.  v9:= temp;
  #L393b56.  if v9 == 0 then goto L393b5c;
  #L393b5a.  return @kind void;
  #L393b5c.  if v10 == 0 then goto L393c00;
  #L393b60.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`h2.e` @kind object;
  #L393b64.  call temp:= `apply`(v6, v10) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L393b6a.  v6:= temp @kind object;
  #L393b6c.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L393b70.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L393b76.  v6:= temp @kind object;
  #L393b78.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L393b7e.  v9:= temp;
  #L393b80.  if v9 != 0 then goto L393b8e;
  #L393b84.  call `e`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.e:(Z)V` @kind virtual;
  #L393b8a.  v6:= v7 @kind object;
  #L393b8c.  goto L393b34;
  #L393b8e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v6 @kind object;
  #L393b92.  goto L393c00;
  #L393b94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L393b96.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L393b9c.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393ba0.  call `cancel`(v3) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L393ba6.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393baa.  call temp:= `a`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L393bb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393bb4.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L393bba.  v0:= temp @kind object;
  #L393bbc.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L393bc2.  return @kind void;
  #L393bc4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L393bc6.  v4:= v0 @kind object;
  #L393bc8.  call `b`(v4) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L393bce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393bd2.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L393bd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393bdc.  call temp:= `a`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L393be2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393be6.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L393bec.  v0:= temp @kind object;
  #L393bee.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L393bf2.  call `clear`(v3) @signature `Lk2/j;.clear:()V` @kind interface;
  #L393bf8.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L393bfe.  return @kind void;
  #L393c00.  if v6 == 0 then goto L393d48;
  #L393c04.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L393c08.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L393c0e.  v9:= temp @kind wide;
  #L393c10.  v11:= 0L;
  #L393c14.  v13:= v11 @kind wide;
  #L393c16.  v15:= lcmp(v13, v9);
  #L393c1a.  if v15 == 0 then goto L393cec;
  #L393c1e.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393c22.  call temp:= `d`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.d:(ZZLd3/b;Lk2/j;)Z` @kind virtual;
  #L393c28.  v15:= temp;
  #L393c2a.  if v15 == 0 then goto L393c30;
  #L393c2e.  return @kind void;
  #L393c30.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L393c36.  v15:= temp @kind object;
  #L393c38.  v5:= "The iterator returned a null value" @kind object;
  #L393c3c.  call temp:= `d`(v15, v5) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L393c42.  v5:= temp @kind object;
  #L393c44.  call `onNext`(v2, v5) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L393c4a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393c4e.  call temp:= `d`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.d:(ZZLd3/b;Lk2/j;)Z` @kind virtual;
  #L393c54.  v5:= temp;
  #L393c56.  if v5 == 0 then goto L393c5c;
  #L393c5a.  return @kind void;
  #L393c5c.  v16:= 1L;
  #L393c60.  v13:= v13 + v16 @kind long;
  #L393c64.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L393c6a.  v5:= temp;
  #L393c6c.  if v5 != 0 then goto L393c7e;
  #L393c70.  call `e`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.e:(Z)V` @kind virtual;
  #L393c76.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L393c7a.  v6:= v7 @kind object;
  #L393c7c.  goto L393cec;
  #L393c7e.  v5:= 1I;
  #L393c80.  goto L393c16;
  #L393c82.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L393c84.  v3:= v0 @kind object;
  #L393c86.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L393c8c.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L393c90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393c94.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L393c9a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393c9e.  call temp:= `a`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L393ca4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393ca8.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L393cae.  v0:= temp @kind object;
  #L393cb0.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L393cb6.  return @kind void;
  #L393cb8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L393cba.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L393cc0.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L393cc4.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.s` @type ^`d3.c` @kind object;
  #L393cc8.  call `cancel`(v3) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L393cce.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393cd2.  call temp:= `a`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L393cd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L393cdc.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L393ce2.  v0:= temp @kind object;
  #L393ce4.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L393cea.  return @kind void;
  #L393cec.  v5:= lcmp(v13, v9);
  #L393cf0.  if v5 != 0 then goto L393d1c;
  #L393cf4.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393cf8.  call temp:= `isEmpty`(v3) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L393cfe.  v15:= temp;
  #L393d00.  if v15 == 0 then goto L393d0c;
  #L393d04.  if v6 != 0 then goto L393d0c;
  #L393d08.  v15:= 1I;
  #L393d0a.  goto L393d0e;
  #L393d0c.  v15:= 0I;
  #L393d0e.  call temp:= `d`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.d:(ZZLd3/b;Lk2/j;)Z` @kind virtual;
  #L393d14.  v5:= temp;
  #L393d16.  if v5 == 0 then goto L393d1c;
  #L393d1a.  return @kind void;
  #L393d1c.  v5:= lcmp(v13, v11);
  #L393d20.  if v5 == 0 then goto L393d42;
  #L393d24.  v11:= 9223372036854775807L;
  #L393d2e.  v5:= lcmp(v9, v11);
  #L393d32.  if v5 == 0 then goto L393d42;
  #L393d36.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L393d3a.  v9:= -v13 @kind long;
  #L393d3c.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L393d42.  if v6 != 0 then goto L393d48;
  #L393d46.  goto L393d58;
  #L393d48.  v5:= -v8 @kind int;
  #L393d4a.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L393d50.  v8:= temp;
  #L393d52.  if v8 != 0 then goto L393d58;
  #L393d56.  return @kind void;
  #L393d58.  v5:= 1I;
  #L393d5a.  goto L393b34;
  catch `java.lang.Throwable` @[L393b3c..L393b44] goto L393bc4;
  catch `java.lang.Throwable` @[L393b60..L393b80] goto L393b94;
  catch `java.lang.Throwable` @[L393c30..L393c44] goto L393cb8;
  catch `java.lang.Throwable` @[L393c64..L393c6c] goto L393c82;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393938.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L39393c.  if v0 != 0 then goto L393954;
  #L393940.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L393944.  call temp:= `isEmpty`(v0) @signature `Lk2/j;.isEmpty:()Z` @kind interface;
  #L39394a.  v0:= temp;
  #L39394c.  if v0 == 0 then goto L393954;
  #L393950.  v0:= 1I;
  #L393952.  goto L393956;
  #L393954.  v0:= 0I;
  #L393956.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393d9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393da0.  if v0 == 0 then goto L393da6;
  #L393da4.  return @kind void;
  #L393da6.  v0:= 1I;
  #L393da8.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L393dac.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.i:()V` @kind virtual;
  #L393db2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L393e04.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L393e08.  if v0 == 0 then goto L393e0e;
  #L393e0c.  return @kind void;
  #L393e0e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L393e12.  if v0 != 0 then goto L393e3c;
  #L393e16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L393e1a.  call temp:= `offer`(v0, v2) @signature `Lk2/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L393e20.  v2:= temp;
  #L393e22.  if v2 != 0 then goto L393e3c;
  #L393e26.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L393e2a.  v0:= "Queue is full?!" @kind object;
  #L393e2e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L393e34.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L393e3a.  return @kind void;
  #L393e3c.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.i:()V` @kind virtual;
  #L393e42.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L393990.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L393994.  v1:= 0I;
  #L393996.  if v0 != 0 then goto L3939d8;
  #L39399a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`k2.j` @kind object;
  #L39399e.  call temp:= `poll`(v0) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L3939a4.  v0:= temp @kind object;
  #L3939a6.  if v0 != 0 then goto L3939ac;
  #L3939aa.  return v1 @kind object;
  #L3939ac.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`h2.e` @kind object;
  #L3939b0.  call temp:= `apply`(v2, v0) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3939b6.  v0:= temp @kind object;
  #L3939b8.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L3939bc.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3939c2.  v0:= temp @kind object;
  #L3939c4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3939ca.  v2:= temp;
  #L3939cc.  if v2 != 0 then goto L3939d4;
  #L3939d0.  v0:= v1 @kind object;
  #L3939d2.  goto L393996;
  #L3939d4.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L3939d8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3939de.  v2:= temp @kind object;
  #L3939e0.  v3:= "The iterator returned a null value" @kind object;
  #L3939e4.  call temp:= `d`(v2, v3) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3939ea.  v2:= temp @kind object;
  #L3939ec.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3939f2.  v0:= temp;
  #L3939f4.  if v0 != 0 then goto L3939fc;
  #L3939f8.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L3939fc.  return v2 @kind object;
}
