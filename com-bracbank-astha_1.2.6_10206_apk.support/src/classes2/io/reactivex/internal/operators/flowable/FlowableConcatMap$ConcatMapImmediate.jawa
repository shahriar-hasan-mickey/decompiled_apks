record `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v0 @kind this, `d3.b` v1 @kind object, `h2.e` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.<init>:(Ld3/b;Lh2/e;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3905fc.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lh2/e;I)V` @kind direct;
  #L390602.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` := v1 @kind object;
  #L390606.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L39060a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L390610.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L390614.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39092c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L390930.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390936.  v0:= temp;
  #L390938.  if v0 == 0 then goto L39096a;
  #L39093c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L390940.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L390946.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39094c.  v2:= temp;
  #L39094e.  if v2 != 0 then goto L390970;
  #L390952.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L390956.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39095a.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L390960.  v0:= temp @kind object;
  #L390962.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L390968.  goto L390970;
  #L39096a.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L390970.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3908d0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3908d6.  v0:= temp;
  #L3908d8.  if v0 != 0 then goto L39091a;
  #L3908dc.  v0:= 0I;
  #L3908de.  v1:= 1I;
  #L3908e0.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3908e6.  v2:= temp;
  #L3908e8.  if v2 == 0 then goto L39091a;
  #L3908ec.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3908f0.  call `onNext`(v2, v4) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3908f6.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L3908fc.  v4:= temp;
  #L3908fe.  if v4 == 0 then goto L390904;
  #L390902.  return @kind void;
  #L390904.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L390908.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39090c.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L390912.  v0:= temp @kind object;
  #L390914.  call `a`(v4, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39091a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390628.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L39062c.  if v0 != 0 then goto L39064a;
  #L390630.  v0:= 1I;
  #L390632.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L390636.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L39063a.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L390640.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L390644.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39064a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390878.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39087c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L390882.  v0:= temp;
  #L390884.  if v0 == 0 then goto L3908b6;
  #L390888.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L39088c.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L390892.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L390898.  v2:= temp;
  #L39089a.  if v2 != 0 then goto L3908bc;
  #L39089e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3908a2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3908a6.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L3908ac.  v0:= temp @kind object;
  #L3908ae.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3908b4.  goto L3908bc;
  #L3908b6.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L3908bc.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L390984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L390988.  call `g`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.g:(J)V` @kind virtual;
  #L39098e.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39065c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L390660.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L390666.  v0:= temp;
  #L390668.  if v0 != 0 then goto L390842;
  #L39066c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L390670.  if v0 == 0 then goto L390676;
  #L390674.  return @kind void;
  #L390676.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` @kind boolean;
  #L39067a.  if v0 != 0 then goto L390832;
  #L39067e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` @kind boolean;
  #L390682.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`k2.j` @kind object;
  #L390686.  call temp:= `poll`(v1) @signature `Lk2/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L39068c.  v1:= temp @kind object;
  #L39068e.  v2:= 0I;
  #L390690.  v3:= 1I;
  #L390692.  if v1 != 0 then goto L39069a;
  #L390696.  v4:= 1I;
  #L390698.  goto L39069c;
  #L39069a.  v4:= 0I;
  #L39069c.  if v0 == 0 then goto L3906b0;
  #L3906a0.  if v4 == 0 then goto L3906b0;
  #L3906a4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3906a8.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L3906ae.  return @kind void;
  #L3906b0.  if v4 != 0 then goto L390832;
  #L3906b4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @type ^`h2.e` @kind object;
  #L3906b8.  call temp:= `apply`(v0, v1) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3906be.  v0:= temp @kind object;
  #L3906c0.  v1:= "The mapper returned a null Publisher" @kind object;
  #L3906c4.  call temp:= `d`(v0, v1) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3906ca.  v0:= temp @kind object;
  #L3906cc.  v0:= (`d3.a`) v0 @kind object;
  #L3906d0.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int`;
  #L3906d4.  if v1 == v3 then goto L3906fc;
  #L3906d8.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int`;
  #L3906dc.  v1:= v1 + v3 @kind int;
  #L3906de.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @type ^`int`;
  #L3906e2.  if v1 != v4 then goto L3906f8;
  #L3906e6.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int` := v2;
  #L3906ea.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L3906ee.  v5:= (`long`) v1 @kind i2l;
  #L3906f0.  call `g`(v4, v5) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L3906f6.  goto L3906fc;
  #L3906f8.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int` := v1;
  #L3906fc.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L390700.  if v1 == 0 then goto L3907ba;
  #L390704.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L390708.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L39070e.  v0:= temp @kind object;
  #L390710.  if v0 != 0 then goto L390716;
  #L390714.  goto L39066c;
  #L390716.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L39071a.  call temp:= `e`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.e:()Z` @kind virtual;
  #L390720.  v1:= temp;
  #L390722.  if v1 == 0 then goto L39076c;
  #L390726.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39072c.  v1:= temp;
  #L39072e.  if v1 != 0 then goto L39066c;
  #L390732.  call temp:= `compareAndSet`(v7, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L390738.  v1:= temp;
  #L39073a.  if v1 == 0 then goto L39066c;
  #L39073e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L390742.  call `onNext`(v1, v0) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L390748.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39074e.  v0:= temp;
  #L390750.  if v0 != 0 then goto L39066c;
  #L390754.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L390758.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39075c.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L390762.  v1:= temp @kind object;
  #L390764.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39076a.  return @kind void;
  #L39076c.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L390770.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L390774.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$c`;
  #L390778.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Ljava/lang/Object;Ld3/b;)V` @kind direct;
  #L39077e.  call `i`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.i:(Ld3/c;)V` @kind virtual;
  #L390784.  goto L390832;
  #L390786.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L390788.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L39078e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L390792.  call `cancel`(v1) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L390798.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L39079c.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3907a2.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3907a6.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3907aa.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L3907b0.  v1:= temp @kind object;
  #L3907b2.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3907b8.  return @kind void;
  #L3907ba.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L3907be.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L3907c2.  call `a`(v0, v1) @signature `Ld3/a;.a:(Ld3/b;)V` @kind interface;
  #L3907c8.  goto L390832;
  #L3907ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3907cc.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L3907d2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L3907d6.  call `cancel`(v1) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L3907dc.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3907e0.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L3907e6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3907ea.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L3907ee.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L3907f4.  v1:= temp @kind object;
  #L3907f6.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3907fc.  return @kind void;
  #L3907fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L390800.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L390806.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.s` @type ^`d3.c` @kind object;
  #L39080a.  call `cancel`(v1) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L390810.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L390814.  call temp:= `a`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.a:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L39081a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L39081e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L390822.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.b:()Ljava/lang/Throwable;` @kind virtual;
  #L390828.  v1:= temp @kind object;
  #L39082a.  call `a`(v0, v1) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L390830.  return @kind void;
  #L390832.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L390836.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39083c.  v0:= temp;
  #L39083e.  if v0 != 0 then goto L39066c;
  #L390842.  return @kind void;
  catch `java.lang.Throwable` @[L390682..L39068e] goto L3907fe;
  catch `java.lang.Throwable` @[L3906b4..L3906d0] goto L3907ca;
  catch `java.lang.Throwable` @[L390708..L390710] goto L390786;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.i:()V` @AccessFlag  {
    temp;
    v0;

  #L3909a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.actual` @type ^`d3.b` @kind object;
  #L3909a4.  call `c`(v0, v1) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L3909aa.  return @kind void;
}
