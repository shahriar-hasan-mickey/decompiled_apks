record `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @AccessFlag VOLATILE;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L394478.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L39447e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L394482.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `b`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.b:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L394494.  v0:= 1I;
  #L394496.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L39449a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3944ac.  v0:= 0I;
  #L3944ae.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L3944b2.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.g:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3944c4.  call temp:= `h`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L3944ca.  v0:= temp;
  #L3944cc.  if v0 == 0 then goto L394504;
  #L3944d0.  call temp:= `a`(v5, v6) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L3944d6.  v0:= temp @kind wide;
  #L3944d8.  v2:= 0L;
  #L3944dc.  v4:= lcmp(v0, v2);
  #L3944e0.  if v4 != 0 then goto L394504;
  #L3944e4.  v0:= 9223372036854775807L;
  #L3944ee.  v2:= lcmp(v6, v0);
  #L3944f2.  if v2 != 0 then goto L3944fe;
  #L3944f6.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.a:()V` @kind virtual;
  #L3944fc.  goto L394504;
  #L3944fe.  call `b`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.b:(J)V` @kind virtual;
  #L394504.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L39440c.  v1:= v1 ^& 1;
  #L394410.  return v1;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3943dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L3943e0.  if v0 == 0 then goto L3943f6;
  #L3943e4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3943ea.  v0:= temp;
  #L3943ec.  if v0 != 0 then goto L3943f2;
  #L3943f0.  goto L3943f6;
  #L3943f2.  v0:= 0I;
  #L3943f4.  goto L3943f8;
  #L3943f6.  v0:= 1I;
  #L3943f8.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L394424.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L394428.  v1:= 0I;
  #L39442a.  if v0 != 0 then goto L394430;
  #L39442e.  return v1 @kind object;
  #L394430.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @type ^`boolean` @kind boolean;
  #L394434.  if v2 != 0 then goto L394440;
  #L394438.  v0:= 1I;
  #L39443a.  v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @type ^`boolean` := v0 @kind boolean;
  #L39443e.  goto L39444e;
  #L394440.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L394446.  v0:= temp;
  #L394448.  if v0 != 0 then goto L39444e;
  #L39444c.  return v1 @kind object;
  #L39444e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L394452.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L394458.  v0:= temp @kind object;
  #L39445a.  v1:= "Iterator.next() returned a null value" @kind object;
  #L39445e.  call temp:= `d`(v0, v1) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L394464.  v0:= temp @kind object;
  #L394466.  return v0 @kind object;
}
