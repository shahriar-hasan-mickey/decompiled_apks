record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `d3.b` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.actual` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v0 @kind this, `d3.b` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.<init>:(Ld3/b;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L394128.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L39412e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.actual` @type ^`d3.b` := v1 @kind object;
  #L394132.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L394144.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L394148.  v1:= length @variable v0;
  #L39414a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.actual` @type ^`d3.b` @kind object;
  #L39414e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L394152.  if v3 == v1 then goto L39418a;
  #L394156.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L39415a.  if v4 == 0 then goto L394160;
  #L39415e.  return @kind void;
  #L394160.  v4:= v0[v3] @kind object;
  #L394164.  if v4 != 0 then goto L39417e;
  #L394168.  v0:= new `java.lang.NullPointerException`;
  #L39416c.  v1:= "array element is null" @kind object;
  #L394170.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L394176.  call `a`(v2, v0) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39417c.  return @kind void;
  #L39417e.  call `onNext`(v2, v4) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L394184.  v3:= v3 + 1;
  #L394188.  goto L394152;
  #L39418a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L39418e.  if v0 == 0 then goto L394194;
  #L394192.  return @kind void;
  #L394194.  call `onComplete`(v2) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39419a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.b:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3941ac.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L3941b0.  v1:= length @variable v0;
  #L3941b2.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L3941b6.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.actual` @type ^`d3.b` @kind object;
  #L3941ba.  v4:= 0L;
  #L3941be.  v6:= v4 @kind wide;
  #L3941c0.  v8:= lcmp(v6, v11);
  #L3941c4.  if v8 == 0 then goto L394206;
  #L3941c8.  if v2 == v1 then goto L394206;
  #L3941cc.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L3941d0.  if v8 == 0 then goto L3941d6;
  #L3941d4.  return @kind void;
  #L3941d6.  v8:= v0[v2] @kind object;
  #L3941da.  if v8 != 0 then goto L3941f4;
  #L3941de.  v11:= new `java.lang.NullPointerException`;
  #L3941e2.  v12:= "array element is null" @kind object;
  #L3941e6.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3941ec.  call `a`(v3, v11) @signature `Ld3/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3941f2.  return @kind void;
  #L3941f4.  call `onNext`(v3, v8) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L3941fa.  v8:= 1L;
  #L3941fe.  v6:= v6 + v8 @kind long;
  #L394200.  v2:= v2 + 1;
  #L394204.  goto L3941c0;
  #L394206.  if v2 != v1 then goto L39421a;
  #L39420a.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L39420e.  if v11 != 0 then goto L394218;
  #L394212.  call `onComplete`(v3) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L394218.  return @kind void;
  #L39421a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L394220.  v11:= temp @kind wide;
  #L394222.  v8:= lcmp(v6, v11);
  #L394226.  if v8 != 0 then goto L3941c0;
  #L39422a.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v2;
  #L39422e.  v11:= -v6 @kind long;
  #L394230.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L394236.  v11:= temp @kind wide;
  #L394238.  v6:= lcmp(v11, v4);
  #L39423c.  if v6 != 0 then goto L3941be;
  #L394240.  return @kind void;
}
