record `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3900b4.  call temp:= `values`() @signature `Lio/reactivex/internal/util/ErrorMode;.values:()[Lio/reactivex/internal/util/ErrorMode;` @kind static;
  #L3900ba.  v0:= temp @kind object;
  #L3900bc.  v0:= length @variable v0;
  #L3900be.  v0:= new `int`[v0];
  #L3900c2.  `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] := v0 @kind object;
  #L3900c6.  v1:= `@@io.reactivex.internal.util.ErrorMode.b` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3900ca.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3900d0.  v1:= temp;
  #L3900d2.  v2:= 1I;
  #L3900d4.  v0[v1]:= v2;
  #L3900d8.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] @kind object;
  #L3900dc.  v1:= `@@io.reactivex.internal.util.ErrorMode.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L3900e0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3900e6.  v1:= temp;
  #L3900e8.  v2:= 2I;
  #L3900ea.  v0[v1]:= v2;
  #L3900ee.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L3900c6..L3900d8] goto L3900d8;
  catch `java.lang.NoSuchFieldError` @[L3900d8..L3900ee] goto L3900ee;
}
