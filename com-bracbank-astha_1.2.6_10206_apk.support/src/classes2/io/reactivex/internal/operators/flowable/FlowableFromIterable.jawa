record `io.reactivex.internal.operators.flowable.FlowableFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `b2.e` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L394898.  call `<init>`(v0) @signature `Lb2/e;.<init>:()V` @kind direct;
  #L39489e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @type ^`java.lang.Iterable` := v1 @kind object;
  #L3948a2.  return @kind void;
}
procedure `void` `K`(`d3.b` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.K:(Ld3/b;Ljava/util/Iterator;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3948b4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3948ba.  v0:= temp;
  #L3948bc.  if v0 != 0 then goto L3948c8;
  #L3948c0.  call `a`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.a:(Ld3/b;)V` @kind static;
  #L3948c6.  return @kind void;
  #L3948c8.  v0:= instanceof @variable v2 @type ^`k2.a` @kind boolean;
  #L3948cc.  if v0 == 0 then goto L3948e8;
  #L3948d0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription`;
  #L3948d4.  v1:= v2 @kind object;
  #L3948d6.  v1:= (`k2.a`) v1 @kind object;
  #L3948da.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.<init>:(Lk2/a;Ljava/util/Iterator;)V` @kind direct;
  #L3948e0.  call `c`(v2, v0) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L3948e6.  goto L3948f8;
  #L3948e8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription`;
  #L3948ec.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.<init>:(Ld3/b;Ljava/util/Iterator;)V` @kind direct;
  #L3948f2.  call `c`(v2, v0) @signature `Ld3/b;.c:(Ld3/c;)V` @kind interface;
  #L3948f8.  return @kind void;
  #L3948fa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3948fc.  call `b`(v3) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L394902.  call `b`(v3, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.b:(Ljava/lang/Throwable;Ld3/b;)V` @kind static;
  #L394908.  return @kind void;
  catch `java.lang.Throwable` @[L3948b4..L3948bc] goto L3948fa;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v1 @kind this, `d3.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.I:(Ld3/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L394928.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @type ^`java.lang.Iterable` @kind object;
  #L39492c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L394932.  v0:= temp @kind object;
  #L394934.  call `K`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.K:(Ld3/b;Ljava/util/Iterator;)V` @kind static;
  #L39493a.  return @kind void;
  #L39493c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39493e.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L394944.  call `b`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.b:(Ljava/lang/Throwable;Ld3/b;)V` @kind static;
  #L39494a.  return @kind void;
  catch `java.lang.Throwable` @[L394928..L394934] goto L39493c;
}
