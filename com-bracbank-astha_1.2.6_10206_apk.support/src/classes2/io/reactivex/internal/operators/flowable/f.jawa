record `io.reactivex.internal.operators.flowable.f` @kind class @AccessFlag PUBLIC_FINAL extends `b2.e` @kind class {
  `b2.n` `io.reactivex.internal.operators.flowable.f.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.f` v0 @kind this, `b2.n` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/f;.<init>:(Lb2/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L394a28.  call `<init>`(v0) @signature `Lb2/e;.<init>:()V` @kind direct;
  #L394a2e.  v0.`io.reactivex.internal.operators.flowable.f.b` @type ^`b2.n` := v1 @kind object;
  #L394a32.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.flowable.f` v2 @kind this, `d3.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/f;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L394a44.  v0:= v2.`io.reactivex.internal.operators.flowable.f.b` @type ^`b2.n` @kind object;
  #L394a48.  v1:= new `io.reactivex.internal.operators.flowable.f$a`;
  #L394a4c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/f$a;.<init>:(Ld3/b;)V` @kind direct;
  #L394a52.  call `c`(v0, v1) @signature `Lb2/n;.c:(Lb2/p;)V` @kind virtual;
  #L394a58.  return @kind void;
}
