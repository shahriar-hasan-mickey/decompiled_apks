record `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `e2.b` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @AccessFlag FINAL;
  `b2.m` `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.other` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v0 @kind this, `b2.k` v1 @kind object, `b2.m` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.<init>:(Lb2/k;Lb2/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398b00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L398b06.  v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @type ^`b2.k` := v1 @kind object;
  #L398b0a.  v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.other` @type ^`b2.m` := v2 @kind object;
  #L398b0e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398b84.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398b88.  call `a`(v0, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L398b8e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L398ba0.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L398ba6.  v1:= temp;
  #L398ba8.  if v1 == 0 then goto L398bb6;
  #L398bac.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398bb0.  call `b`(v1, v0) @signature `Lb2/k;.b:(Le2/b;)V` @kind interface;
  #L398bb6.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398ad8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398ade.  v0:= temp @kind object;
  #L398ae0.  v0:= (`e2.b`) v0 @kind object;
  #L398ae4.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L398aea.  v0:= temp;
  #L398aec.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L398b20.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L398b26.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L398b38.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398b3e.  v0:= temp @kind object;
  #L398b40.  v0:= (`e2.b`) v0 @kind object;
  #L398b44.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L398b48.  if v0 == v1 then goto L398b72;
  #L398b4c.  v1:= 0I;
  #L398b4e.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L398b54.  v0:= temp;
  #L398b56.  if v0 == 0 then goto L398b72;
  #L398b5a.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.other` @type ^`b2.m` @kind object;
  #L398b5e.  v1:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a`;
  #L398b62.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398b66.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.<init>:(Lb2/k;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L398b6c.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L398b72.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398bc8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398bcc.  call `onSuccess`(v0, v2) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L398bd2.  return @kind void;
}
