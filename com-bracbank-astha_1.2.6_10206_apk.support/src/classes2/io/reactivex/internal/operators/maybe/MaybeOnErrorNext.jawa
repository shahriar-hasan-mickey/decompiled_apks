record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `h2.e` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext` v0 @kind this, `b2.m` v1 @kind object, `h2.e` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lb2/m;Lh2/e;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398588.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lb2/m;)V` @kind direct;
  #L39858e.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @type ^`h2.e` := v2 @kind object;
  #L398592.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.c` @type ^`boolean` := v3 @kind boolean;
  #L398596.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext` v4 @kind this, `b2.k` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.u:(Lb2/k;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3985a8.  v0:= v4.`io.reactivex.internal.operators.maybe.a.a` @type ^`b2.m` @kind object;
  #L3985ac.  v1:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver`;
  #L3985b0.  v2:= v4.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @type ^`h2.e` @kind object;
  #L3985b4.  v3:= v4.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.c` @type ^`boolean` @kind boolean;
  #L3985b8.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.<init>:(Lb2/k;Lh2/e;Z)V` @kind direct;
  #L3985be.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L3985c4.  return @kind void;
}
