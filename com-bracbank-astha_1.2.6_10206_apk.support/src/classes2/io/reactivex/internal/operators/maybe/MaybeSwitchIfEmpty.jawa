record `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `b2.m` `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty` v0 @kind this, `b2.m` v1 @kind object, `b2.m` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lb2/m;Lb2/m;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398be4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lb2/m;)V` @kind direct;
  #L398bea.  v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty.b` @type ^`b2.m` := v2 @kind object;
  #L398bee.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty` v3 @kind this, `b2.k` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.u:(Lb2/k;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L398c00.  v0:= v3.`io.reactivex.internal.operators.maybe.a.a` @type ^`b2.m` @kind object;
  #L398c04.  v1:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver`;
  #L398c08.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty.b` @type ^`b2.m` @kind object;
  #L398c0c.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver;.<init>:(Lb2/k;Lb2/m;)V` @kind direct;
  #L398c12.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L398c18.  return @kind void;
}
