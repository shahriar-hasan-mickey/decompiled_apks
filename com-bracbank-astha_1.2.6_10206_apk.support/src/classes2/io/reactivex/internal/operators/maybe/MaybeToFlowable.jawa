record `io.reactivex.internal.operators.maybe.MaybeToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `b2.e` @kind class {
  `b2.m` `io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v0 @kind this, `b2.m` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lb2/m;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398ce8.  call `<init>`(v0) @signature `Lb2/e;.<init>:()V` @kind direct;
  #L398cee.  v0.`io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @type ^`b2.m` := v1 @kind object;
  #L398cf2.  return @kind void;
}
procedure `void` `I`(`io.reactivex.internal.operators.maybe.MaybeToFlowable` v2 @kind this, `d3.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.I:(Ld3/b;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L398d04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeToFlowable.b` @type ^`b2.m` @kind object;
  #L398d08.  v1:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber`;
  #L398d0c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable$MaybeToFlowableSubscriber;.<init>:(Ld3/b;)V` @kind direct;
  #L398d12.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L398d18.  return @kind void;
}
