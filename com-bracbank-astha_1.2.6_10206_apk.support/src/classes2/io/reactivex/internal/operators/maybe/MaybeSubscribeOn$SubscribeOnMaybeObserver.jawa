record `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `e2.b` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.actual` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v0 @kind this, `b2.k` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.<init>:(Lb2/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3988e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3988ee.  v0.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.actual` @type ^`b2.k` := v1 @kind object;
  #L3988f2.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L3988f6.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L3988fc.  v0.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L398900.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398954.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398958.  call `a`(v0, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39895e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L398970.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L398976.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3988c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3988c6.  v0:= temp @kind object;
  #L3988c8.  v0:= (`e2.b`) v0 @kind object;
  #L3988cc.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L3988d2.  v0:= temp;
  #L3988d4.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398914.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39891a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L39891e.  call `e`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.e:()V` @kind virtual;
  #L398924.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398938.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L39893c.  call `onComplete`(v0) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L398942.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn$SubscribeOnMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398988.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L39898c.  call `onSuccess`(v0, v2) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L398992.  return @kind void;
}
