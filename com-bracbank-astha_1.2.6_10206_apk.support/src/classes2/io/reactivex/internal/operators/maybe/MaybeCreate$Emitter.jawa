record `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.j` @kind interface, `e2.b` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this, `b2.k` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.<init>:(Lb2/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L39737c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L397382.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @type ^`b2.k` := v1 @kind object;
  #L397386.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397414.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L39741a.  v0:= temp;
  #L39741c.  if v0 != 0 then goto L397426;
  #L397420.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L397426.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.b:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3972c0.  if v3 != 0 then goto L3972d2;
  #L3972c4.  v3:= new `java.lang.NullPointerException`;
  #L3972c8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L3972cc.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3972d2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3972d8.  v0:= temp @kind object;
  #L3972da.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3972de.  if v0 == v1 then goto L397318;
  #L3972e2.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3972e8.  v0:= temp @kind object;
  #L3972ea.  v0:= (`e2.b`) v0 @kind object;
  #L3972ee.  if v0 == v1 then goto L397318;
  #L3972f2.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @type ^`b2.k` @kind object;
  #L3972f6.  call `a`(v1, v3) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3972fc.  if v0 == 0 then goto L397306;
  #L397300.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L397306.  v3:= 1I;
  #L397308.  return v3;
  #L39730a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39730c.  if v0 == 0 then goto L397316;
  #L397310.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L397316.  throw v3;
  #L397318.  v3:= 0I;
  #L39731a.  return v3;
  catch `java.lang.Throwable` @[L3972f2..L3972fc] goto L39730a;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397298.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39729e.  v0:= temp @kind object;
  #L3972a0.  v0:= (`e2.b`) v0 @kind object;
  #L3972a4.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L3972aa.  v0:= temp;
  #L3972ac.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L397398.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39739e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3973b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3973b6.  v0:= temp @kind object;
  #L3973b8.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L3973bc.  if v0 == v1 then goto L3973f4;
  #L3973c0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3973c6.  v0:= temp @kind object;
  #L3973c8.  v0:= (`e2.b`) v0 @kind object;
  #L3973cc.  if v0 == v1 then goto L3973f4;
  #L3973d0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @type ^`b2.k` @kind object;
  #L3973d4.  call `onComplete`(v1) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L3973da.  if v0 == 0 then goto L3973f4;
  #L3973de.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L3973e4.  goto L3973f4;
  #L3973e6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3973e8.  if v0 == 0 then goto L3973f2;
  #L3973ec.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L3973f2.  throw v1;
  #L3973f4.  return @kind void;
  catch `java.lang.Throwable` @[L3973d0..L3973da] goto L3973e6;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L397438.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39743e.  v0:= temp @kind object;
  #L397440.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.a` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L397444.  if v0 == v1 then goto L39749a;
  #L397448.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39744e.  v0:= temp @kind object;
  #L397450.  v0:= (`e2.b`) v0 @kind object;
  #L397454.  if v0 == v1 then goto L39749a;
  #L397458.  if v4 != 0 then goto L397476;
  #L39745c.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @type ^`b2.k` @kind object;
  #L397460.  v1:= new `java.lang.NullPointerException`;
  #L397464.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L397468.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39746e.  call `a`(v4, v1) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L397474.  goto L397480;
  #L397476.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter.actual` @type ^`b2.k` @kind object;
  #L39747a.  call `onSuccess`(v1, v4) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L397480.  if v0 == 0 then goto L39749a;
  #L397484.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L39748a.  goto L39749a;
  #L39748c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39748e.  if v0 == 0 then goto L397498;
  #L397492.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L397498.  throw v4;
  #L39749a.  return @kind void;
  catch `java.lang.Throwable` @[L39745c..L397480] goto L39748c;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L397338.  v0:= 2I;
  #L39733a.  v0:= new `java.lang.Object`[v0];
  #L39733e.  v1:= constclass @type ^`io.reactivex.internal.operators.maybe.MaybeCreate$Emitter` @kind object;
  #L397342.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L397348.  v1:= temp @kind object;
  #L39734a.  v2:= 0I;
  #L39734c.  v0[v2]:= v1 @kind object;
  #L397350.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L397356.  v1:= temp @kind object;
  #L397358.  v2:= 1I;
  #L39735a.  v0[v2]:= v1 @kind object;
  #L39735e.  v1:= "%s{%s}" @kind object;
  #L397362.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L397368.  v0:= temp @kind object;
  #L39736a.  return v0 @kind object;
}
