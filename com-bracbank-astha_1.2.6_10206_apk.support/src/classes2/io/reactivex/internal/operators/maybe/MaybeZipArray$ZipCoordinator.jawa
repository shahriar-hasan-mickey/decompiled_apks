record `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `e2.b` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `b2.k` v2 @kind object, `int` v3 , `h2.e` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.<init>:(Lb2/k;ILh2/e;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L398eb8.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L398ebe.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @type ^`b2.k` := v2 @kind object;
  #L398ec2.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`h2.e` := v4 @kind object;
  #L398ec6.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[v3];
  #L398eca.  v4:= 0I;
  #L398ecc.  if v4 >= v3 then goto L398ee4;
  #L398ed0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`;
  #L398ed4.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;I)V` @kind direct;
  #L398eda.  v2[v4]:= v0 @kind object;
  #L398ede.  v4:= v4 + 1;
  #L398ee2.  goto L398ecc;
  #L398ee4.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] := v2 @kind object;
  #L398ee8.  v2:= new `java.lang.Object`[v3];
  #L398eec.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L398ef0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L398f40.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L398f44.  v1:= length @variable v0;
  #L398f46.  v2:= 0I;
  #L398f48.  if v2 >= v5 then goto L398f5c;
  #L398f4c.  v3:= v0[v2] @kind object;
  #L398f50.  call `c`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.c:()V` @kind virtual;
  #L398f56.  v2:= v2 + 1;
  #L398f5a.  goto L398f48;
  #L398f5c.  v5:= v5 + 1;
  #L398f60.  if v5 >= v1 then goto L398f70;
  #L398f64.  v2:= v0[v5] @kind object;
  #L398f68.  call `c`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.c:()V` @kind virtual;
  #L398f6e.  goto L398f5c;
  #L398f70.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L398f84.  v0:= 0I;
  #L398f86.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L398f8c.  v0:= temp;
  #L398f8e.  if v0 <= 0 then goto L398fa2;
  #L398f92.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.a:(I)V` @kind virtual;
  #L398f98.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @type ^`b2.k` @kind object;
  #L398f9c.  call `onComplete`(v2) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L398fa2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.c:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L398fb4.  v0:= 0I;
  #L398fb6.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L398fbc.  v0:= temp;
  #L398fbe.  if v0 <= 0 then goto L398fd4;
  #L398fc2.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.a:(I)V` @kind virtual;
  #L398fc8.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @type ^`b2.k` @kind object;
  #L398fcc.  call `a`(v3, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L398fd2.  goto L398fda;
  #L398fd4.  call `q`(v2) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L398fda.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398e94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L398e9a.  v0:= temp;
  #L398e9c.  if v0 > 0 then goto L398ea4;
  #L398ea0.  v0:= 1I;
  #L398ea2.  goto L398ea6;
  #L398ea4.  v0:= 0I;
  #L398ea6.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L398f04.  v0:= 0I;
  #L398f06.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L398f0c.  v1:= temp;
  #L398f0e.  if v1 <= 0 then goto L398f2c;
  #L398f12.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver`[] @kind object;
  #L398f16.  v2:= length @variable v1;
  #L398f18.  if v0 >= v2 then goto L398f2c;
  #L398f1c.  v3:= v1[v0] @kind object;
  #L398f20.  call `c`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipMaybeObserver;.c:()V` @kind virtual;
  #L398f26.  v0:= v0 + 1;
  #L398f2a.  goto L398f18;
  #L398f2c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$ZipCoordinator;.f:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L398fec.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L398ff0.  v0[v3]:= v2 @kind object;
  #L398ff4.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L398ffa.  v2:= temp;
  #L398ffc.  if v2 != 0 then goto L39903a;
  #L399000.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.zipper` @type ^`h2.e` @kind object;
  #L399004.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L399008.  call temp:= `apply`(v2, v3) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L39900e.  v2:= temp @kind object;
  #L399010.  v3:= "The zipper returned a null value" @kind object;
  #L399014.  call temp:= `d`(v2, v3) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39901a.  v2:= temp @kind object;
  #L39901c.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @type ^`b2.k` @kind object;
  #L399020.  call `onSuccess`(v3, v2) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L399026.  goto L39903a;
  #L399028.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39902a.  call `b`(v2) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L399030.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$ZipCoordinator.actual` @type ^`b2.k` @kind object;
  #L399034.  call `a`(v3, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L39903a.  return @kind void;
  catch `java.lang.Throwable` @[L399000..L39901c] goto L399028;
}
