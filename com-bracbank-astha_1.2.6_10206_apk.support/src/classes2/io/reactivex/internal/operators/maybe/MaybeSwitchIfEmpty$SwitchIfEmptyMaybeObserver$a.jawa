record `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` @kind class @AccessFlag FINAL extends `b2.k` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` v0 @kind this, `b2.k` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.<init>:(Lb2/k;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398a48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L398a4e.  v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.a` @type ^`b2.k` := v1 @kind object;
  #L398a52.  v0.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L398a56.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398a84.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.a` @type ^`b2.k` @kind object;
  #L398a88.  call `a`(v0, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L398a8e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` v1 @kind this, `e2.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398aa0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398aa4.  call temp:= `h`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L398aaa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398a68.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.a` @type ^`b2.k` @kind object;
  #L398a6c.  call `onComplete`(v0) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L398a72.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398abc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$a.a` @type ^`b2.k` @kind object;
  #L398ac0.  call `onSuccess`(v0, v2) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L398ac6.  return @kind void;
}
