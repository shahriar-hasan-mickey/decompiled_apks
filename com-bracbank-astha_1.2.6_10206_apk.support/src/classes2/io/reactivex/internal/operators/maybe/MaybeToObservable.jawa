record `io.reactivex.internal.operators.maybe.MaybeToObservable` @kind class @AccessFlag PUBLIC_FINAL extends `b2.n` @kind class {
  `b2.m` `io.reactivex.internal.operators.maybe.MaybeToObservable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToObservable` v0 @kind this, `b2.m` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.<init>:(Lb2/m;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398dfc.  call `<init>`(v0) @signature `Lb2/n;.<init>:()V` @kind direct;
  #L398e02.  v0.`io.reactivex.internal.operators.maybe.MaybeToObservable.a` @type ^`b2.m` := v1 @kind object;
  #L398e06.  return @kind void;
}
procedure `b2.k` `u`(`b2.p` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.u:(Lb2/p;)Lb2/k;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L398de0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver`;
  #L398de4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.<init>:(Lb2/p;)V` @kind direct;
  #L398dea.  return v0 @kind object;
}
procedure `void` `r`(`io.reactivex.internal.operators.maybe.MaybeToObservable` v1 @kind this, `b2.p` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.r:(Lb2/p;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L398e18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToObservable.a` @type ^`b2.m` @kind object;
  #L398e1c.  call temp:= `u`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.u:(Lb2/p;)Lb2/k;` @kind static;
  #L398e22.  v2:= temp @kind object;
  #L398e24.  call `a`(v0, v2) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L398e2a.  return @kind void;
}
