record `io.reactivex.internal.operators.maybe.h` @kind class @AccessFlag PUBLIC_FINAL extends `b2.r` @kind class, `k2.c` @kind interface {
  `b2.m` `io.reactivex.internal.operators.maybe.h.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.h` v0 @kind this, `b2.m` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.<init>:(Lb2/m;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L397fb0.  call `<init>`(v0) @signature `Lb2/r;.<init>:()V` @kind direct;
  #L397fb6.  v0.`io.reactivex.internal.operators.maybe.h.a` @type ^`b2.m` := v1 @kind object;
  #L397fba.  return @kind void;
}
procedure `b2.i` `b`(`io.reactivex.internal.operators.maybe.h` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/h;.b:()Lb2/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L397f88.  v0:= new `io.reactivex.internal.operators.maybe.g`;
  #L397f8c.  v1:= v2.`io.reactivex.internal.operators.maybe.h.a` @type ^`b2.m` @kind object;
  #L397f90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/g;.<init>:(Lb2/m;)V` @kind direct;
  #L397f96.  call temp:= `l`(v0) @signature `Ll2/a;.l:(Lb2/i;)Lb2/i;` @kind static;
  #L397f9c.  v0:= temp @kind object;
  #L397f9e.  return v0 @kind object;
}
procedure `void` `k`(`io.reactivex.internal.operators.maybe.h` v2 @kind this, `b2.s` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/h;.k:(Lb2/s;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L397fcc.  v0:= v2.`io.reactivex.internal.operators.maybe.h.a` @type ^`b2.m` @kind object;
  #L397fd0.  v1:= new `io.reactivex.internal.operators.maybe.h$a`;
  #L397fd4.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/h$a;.<init>:(Lb2/s;)V` @kind direct;
  #L397fda.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L397fe0.  return @kind void;
}
