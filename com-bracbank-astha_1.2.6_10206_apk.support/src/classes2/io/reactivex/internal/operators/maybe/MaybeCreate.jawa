record `io.reactivex.internal.operators.maybe.MaybeCreate` @kind class @AccessFlag PUBLIC_FINAL extends `b2.i` @kind class {
  `b2.l` `io.reactivex.internal.operators.maybe.MaybeCreate.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate` v0 @kind this, `b2.l` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lb2/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3974b8.  call `<init>`(v0) @signature `Lb2/i;.<init>:()V` @kind direct;
  #L3974be.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate.a` @type ^`b2.l` := v1 @kind object;
  #L3974c2.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.MaybeCreate` v1 @kind this, `b2.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.u:(Lb2/k;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3974d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate$Emitter`;
  #L3974d8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.<init>:(Lb2/k;)V` @kind direct;
  #L3974de.  call `b`(v2, v0) @signature `Lb2/k;.b:(Le2/b;)V` @kind interface;
  #L3974e4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeCreate.a` @type ^`b2.l` @kind object;
  #L3974e8.  call `a`(v2, v0) @signature `Lb2/l;.a:(Lb2/j;)V` @kind interface;
  #L3974ee.  goto L3974fe;
  #L3974f0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3974f2.  call `b`(v2) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L3974f8.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$Emitter;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3974fe.  return @kind void;
  catch `java.lang.Throwable` @[L3974e4..L3974ee] goto L3974f0;
}
