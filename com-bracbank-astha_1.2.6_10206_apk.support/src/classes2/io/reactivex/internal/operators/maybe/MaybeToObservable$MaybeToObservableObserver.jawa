record `io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class, `b2.k` @kind interface {
  `e2.b` `io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `b2.p` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.<init>:(Lb2/p;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398d2c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lb2/p;)V` @kind direct;
  #L398d32.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L398d80.  call `g`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.g:(Ljava/lang/Throwable;)V` @kind virtual;
  #L398d86.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v1 @kind this, `e2.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398d98.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.d` @type ^`e2.b` @kind object;
  #L398d9c.  call temp:= `i`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.i:(Le2/b;Le2/b;)Z` @kind static;
  #L398da2.  v0:= temp;
  #L398da4.  if v0 == 0 then goto L398db6;
  #L398da8.  v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.d` @type ^`e2.b` := v2 @kind object;
  #L398dac.  v2:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.actual` @type ^`b2.p` @kind object;
  #L398db0.  call `b`(v2, v1) @signature `Lb2/p;.b:(Le2/b;)V` @kind interface;
  #L398db6.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398d44.  call `e`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.e:()V` @kind super;
  #L398d4a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver.d` @type ^`e2.b` @kind object;
  #L398d4e.  call `e`(v0) @signature `Le2/b;.e:()V` @kind interface;
  #L398d54.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L398d68.  call `c`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.c:()V` @kind virtual;
  #L398d6e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable$MaybeToObservableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L398dc8.  call `f`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L398dce.  return @kind void;
}
