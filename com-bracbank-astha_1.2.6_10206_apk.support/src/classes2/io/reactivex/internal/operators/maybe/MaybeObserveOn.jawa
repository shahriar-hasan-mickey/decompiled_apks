record `io.reactivex.internal.operators.maybe.MaybeObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `b2.q` `io.reactivex.internal.operators.maybe.MaybeObserveOn.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn` v0 @kind this, `b2.m` v1 @kind object, `b2.q` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.<init>:(Lb2/m;Lb2/q;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L398348.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lb2/m;)V` @kind direct;
  #L39834e.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn.b` @type ^`b2.q` := v2 @kind object;
  #L398352.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.MaybeObserveOn` v3 @kind this, `b2.k` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.u:(Lb2/k;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L398364.  v0:= v3.`io.reactivex.internal.operators.maybe.a.a` @type ^`b2.m` @kind object;
  #L398368.  v1:= new `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver`;
  #L39836c.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeObserveOn.b` @type ^`b2.q` @kind object;
  #L398370.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.<init>:(Lb2/k;Lb2/q;)V` @kind direct;
  #L398376.  call `a`(v0, v1) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L39837c.  return @kind void;
}
