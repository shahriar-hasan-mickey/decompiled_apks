record `io.reactivex.internal.operators.maybe.f` @kind class @AccessFlag PUBLIC_FINAL extends `b2.i` @kind class {
  `b2.c` `io.reactivex.internal.operators.maybe.f.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.f` v0 @kind this, `b2.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/f;.<init>:(Lb2/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L397d5c.  call `<init>`(v0) @signature `Lb2/i;.<init>:()V` @kind direct;
  #L397d62.  v0.`io.reactivex.internal.operators.maybe.f.a` @type ^`b2.c` := v1 @kind object;
  #L397d66.  return @kind void;
}
procedure `void` `u`(`io.reactivex.internal.operators.maybe.f` v2 @kind this, `b2.k` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/f;.u:(Lb2/k;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L397d78.  v0:= v2.`io.reactivex.internal.operators.maybe.f.a` @type ^`b2.c` @kind object;
  #L397d7c.  v1:= new `io.reactivex.internal.operators.maybe.f$a`;
  #L397d80.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/f$a;.<init>:(Lb2/k;)V` @kind direct;
  #L397d86.  call `b`(v0, v1) @signature `Lb2/c;.b:(Lb2/b;)V` @kind interface;
  #L397d8c.  return @kind void;
}
