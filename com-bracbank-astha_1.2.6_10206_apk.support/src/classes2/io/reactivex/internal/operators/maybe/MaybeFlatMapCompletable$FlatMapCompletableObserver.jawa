record `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `b2.b` @kind interface, `e2.b` @kind interface {
  `b2.b` `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.actual` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `b2.b` v1 @kind object, `h2.e` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.<init>:(Lb2/b;Lh2/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L397868.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39786e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.actual` @type ^`b2.b` := v1 @kind object;
  #L397872.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`h2.e` := v2 @kind object;
  #L397876.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3978bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.actual` @type ^`b2.b` @kind object;
  #L3978c0.  call `a`(v0, v2) @signature `Lb2/b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3978c6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L3978d8.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L3978de.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397840.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L397846.  v0:= temp @kind object;
  #L397848.  v0:= (`e2.b`) v0 @kind object;
  #L39784c.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L397852.  v0:= temp;
  #L397854.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L397888.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39788e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3978a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.actual` @type ^`b2.b` @kind object;
  #L3978a4.  call `onComplete`(v0) @signature `Lb2/b;.onComplete:()V` @kind interface;
  #L3978aa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3978f0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver.mapper` @type ^`h2.e` @kind object;
  #L3978f4.  call temp:= `apply`(v0, v2) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3978fa.  v2:= temp @kind object;
  #L3978fc.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L397900.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L397906.  v2:= temp @kind object;
  #L397908.  v2:= (`b2.c`) v2 @kind object;
  #L39790c.  call temp:= `d`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.d:()Z` @kind virtual;
  #L397912.  v0:= temp;
  #L397914.  if v0 != 0 then goto L39791e;
  #L397918.  call `b`(v2, v1) @signature `Lb2/c;.b:(Lb2/b;)V` @kind interface;
  #L39791e.  return @kind void;
  #L397920.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L397922.  call `b`(v2) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L397928.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable$FlatMapCompletableObserver;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L39792e.  return @kind void;
  catch `java.lang.Throwable` @[L3978f0..L39790c] goto L397920;
}
