record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `e2.b` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @AccessFlag FINAL;
  `h2.e` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `b2.k` v1 @kind object, `h2.e` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.<init>:(Lb2/k;Lh2/e;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398448.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39844e.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` := v1 @kind object;
  #L398452.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`h2.e` := v2 @kind object;
  #L398456.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` := v3 @kind boolean;
  #L39845a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3984a0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.allowFatal` @type ^`boolean` @kind boolean;
  #L3984a4.  if v0 != 0 then goto L3984bc;
  #L3984a8.  v0:= instanceof @variable v6 @type ^`java.lang.Exception` @kind boolean;
  #L3984ac.  if v0 != 0 then goto L3984bc;
  #L3984b0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L3984b4.  call `a`(v0, v6) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L3984ba.  return @kind void;
  #L3984bc.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.resumeFunction` @type ^`h2.e` @kind object;
  #L3984c0.  call temp:= `apply`(v0, v6) @signature `Lh2/e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3984c6.  v0:= temp @kind object;
  #L3984c8.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L3984cc.  call temp:= `d`(v0, v1) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3984d2.  v0:= temp @kind object;
  #L3984d4.  v0:= (`b2.m`) v0 @kind object;
  #L3984d8.  v6:= 0I;
  #L3984da.  call temp:= `c`(v5, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L3984e0.  v6:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$a`;
  #L3984e4.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L3984e8.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver$a;.<init>:(Lb2/k;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L3984ee.  call `a`(v0, v6) @signature `Lb2/m;.a:(Lb2/k;)V` @kind interface;
  #L3984f4.  return @kind void;
  #L3984f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3984f8.  call `b`(v0) @signature `Lf2/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L3984fe.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398502.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L398506.  v3:= 2I;
  #L398508.  v3:= new `java.lang.Throwable`[v3];
  #L39850c.  v4:= 0I;
  #L39850e.  v3[v4]:= v6 @kind object;
  #L398512.  v6:= 1I;
  #L398514.  v3[v6]:= v0 @kind object;
  #L398518.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L39851e.  call `a`(v1, v2) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L398524.  return @kind void;
  catch `java.lang.Throwable` @[L3984bc..L3984d8] goto L3984f6;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L398544.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L39854a.  v1:= temp;
  #L39854c.  if v1 == 0 then goto L39855a;
  #L398550.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398554.  call `b`(v1, v0) @signature `Lb2/k;.b:(Le2/b;)V` @kind interface;
  #L39855a.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398420.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398426.  v0:= temp @kind object;
  #L398428.  v0:= (`e2.b`) v0 @kind object;
  #L39842c.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L398432.  v0:= temp;
  #L398434.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L39846c.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L398472.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L398484.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398488.  call `onComplete`(v0) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L39848e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$OnErrorNextMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39856c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398570.  call `onSuccess`(v0, v2) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L398576.  return @kind void;
}
