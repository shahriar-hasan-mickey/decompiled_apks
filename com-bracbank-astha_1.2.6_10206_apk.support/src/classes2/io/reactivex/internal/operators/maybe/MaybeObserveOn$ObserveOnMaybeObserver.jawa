record `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `b2.k` @kind interface, `e2.b` @kind interface, `java.lang.Runnable` @kind interface {
  `b2.k` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @AccessFlag ;
  `b2.q` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `b2.k` v1 @kind object, `b2.q` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.<init>:(Lb2/k;Lb2/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L398224.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39822a.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @type ^`b2.k` := v1 @kind object;
  #L39822e.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`b2.q` := v2 @kind object;
  #L398232.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L398280.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L398284.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`b2.q` @kind object;
  #L398288.  call temp:= `b`(v1, v0) @signature `Lb2/q;.b:(Ljava/lang/Runnable;)Le2/b;` @kind virtual;
  #L39828e.  v1:= temp @kind object;
  #L398290.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L398296.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `e2.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.b:(Le2/b;)V` @AccessFlag PUBLIC {
    temp;

  #L3982a8.  call temp:= `h`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.h:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L3982ae.  v1:= temp;
  #L3982b0.  if v1 == 0 then goto L3982be;
  #L3982b4.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L3982b8.  call `b`(v1, v0) @signature `Lb2/k;.b:(Le2/b;)V` @kind interface;
  #L3982be.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3981fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398202.  v0:= temp @kind object;
  #L398204.  v0:= (`e2.b`) v0 @kind object;
  #L398208.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.b:(Le2/b;)Z` @kind static;
  #L39820e.  v0:= temp;
  #L398210.  return v0;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L398244.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L39824a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39825c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`b2.q` @kind object;
  #L398260.  call temp:= `b`(v0, v1) @signature `Lb2/q;.b:(Ljava/lang/Runnable;)Le2/b;` @kind virtual;
  #L398266.  v0:= temp @kind object;
  #L398268.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L39826e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3982d0.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L3982d4.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.scheduler` @type ^`b2.q` @kind object;
  #L3982d8.  call temp:= `b`(v1, v0) @signature `Lb2/q;.b:(Ljava/lang/Runnable;)Le2/b;` @kind virtual;
  #L3982de.  v1:= temp @kind object;
  #L3982e0.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Le2/b;)Z` @kind static;
  #L3982e6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$ObserveOnMaybeObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3982f8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L3982fc.  v1:= 0I;
  #L3982fe.  if v0 == 0 then goto L398312;
  #L398302.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L398306.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L39830a.  call `a`(v1, v0) @signature `Lb2/k;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L398310.  goto L398334;
  #L398312.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` @kind object;
  #L398316.  if v0 == 0 then goto L39832a;
  #L39831a.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L39831e.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L398322.  call `onSuccess`(v1, v0) @signature `Lb2/k;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L398328.  goto L398334;
  #L39832a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver.actual` @type ^`b2.k` @kind object;
  #L39832e.  call `onComplete`(v0) @signature `Lb2/k;.onComplete:()V` @kind interface;
  #L398334.  return @kind void;
}
