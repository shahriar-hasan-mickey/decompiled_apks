record `io.reactivex.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `d3.c` @kind interface {
}
global `io.reactivex.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.internal.subscriptions.SubscriptionHelper.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39e838.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`;
  #L39e83c.  v1:= "CANCELLED" @kind object;
  #L39e840.  v2:= 0I;
  #L39e842.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L39e848.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L39e84c.  v1:= 1I;
  #L39e84e.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`[v1];
  #L39e852.  v1[v2]:= v0 @kind object;
  #L39e856.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L39e85a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L39e86c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L39e872.  return @kind void;
}
procedure `boolean` `a`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39e680.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39e686.  v0:= temp @kind object;
  #L39e688.  v0:= (`d3.c`) v0 @kind object;
  #L39e68c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39e690.  if v0 == v1 then goto L39e6b2;
  #L39e694.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39e69a.  v2:= temp @kind object;
  #L39e69c.  v2:= (`d3.c`) v2 @kind object;
  #L39e6a0.  if v2 == v1 then goto L39e6b2;
  #L39e6a4.  if v2 == 0 then goto L39e6ae;
  #L39e6a8.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e6ae.  v2:= 1I;
  #L39e6b0.  return v2;
  #L39e6b2.  v2:= 0I;
  #L39e6b4.  return v2;
}
procedure `void` `b`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39e898.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39e89e.  v0:= temp @kind object;
  #L39e8a0.  v0:= (`d3.c`) v0 @kind object;
  #L39e8a4.  if v0 == 0 then goto L39e8b0;
  #L39e8a8.  call `g`(v0, v4) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e8ae.  goto L39e8ec;
  #L39e8b0.  call temp:= `h`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39e8b6.  v0:= temp;
  #L39e8b8.  if v0 == 0 then goto L39e8ec;
  #L39e8bc.  call temp:= `a`(v3, v4) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L39e8c2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39e8c8.  v2:= temp @kind object;
  #L39e8ca.  v2:= (`d3.c`) v2 @kind object;
  #L39e8ce.  if v2 == 0 then goto L39e8ec;
  #L39e8d2.  v4:= 0L;
  #L39e8d6.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L39e8dc.  v0:= temp @kind wide;
  #L39e8de.  v3:= lcmp(v0, v4);
  #L39e8e2.  if v3 == 0 then goto L39e8ec;
  #L39e8e6.  call `g`(v2, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e8ec.  return @kind void;
}
procedure `boolean` `c`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `d3.c` v5 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.c:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ld3/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L39e6c8.  call temp:= `f`(v3, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.f:(Ljava/util/concurrent/atomic/AtomicReference;Ld3/c;)Z` @kind static;
  #L39e6ce.  v3:= temp;
  #L39e6d0.  if v3 == 0 then goto L39e6f2;
  #L39e6d4.  v0:= 0L;
  #L39e6d8.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L39e6de.  v3:= temp @kind wide;
  #L39e6e0.  v2:= lcmp(v3, v0);
  #L39e6e4.  if v2 == 0 then goto L39e6ee;
  #L39e6e8.  call `g`(v5, v3) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e6ee.  v3:= 1I;
  #L39e6f0.  return v3;
  #L39e6f2.  v3:= 0I;
  #L39e6f4.  return v3;
}
procedure `void` `d`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.d:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L39e900.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L39e904.  v1:= new `java.lang.StringBuilder`;
  #L39e908.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39e90e.  v2:= "More produced than requested: " @kind object;
  #L39e912.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39e918.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L39e91e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39e924.  v3:= temp @kind object;
  #L39e926.  call `<init>`(v0, v3) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39e92c.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39e932.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.e:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L39e944.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L39e948.  v1:= "Subscription already set!" @kind object;
  #L39e94c.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39e952.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39e958.  return @kind void;
}
procedure `boolean` `f`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `d3.c` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.f:(Ljava/util/concurrent/atomic/AtomicReference;Ld3/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39e708.  v0:= "s is null" @kind object;
  #L39e70c.  call temp:= `d`(v2, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39e712.  v0:= 0I;
  #L39e714.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39e71a.  v0:= temp;
  #L39e71c.  if v0 != 0 then goto L39e740;
  #L39e720.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e726.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39e72c.  v1:= temp @kind object;
  #L39e72e.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.a` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39e732.  if v1 == v2 then goto L39e73c;
  #L39e736.  call `e`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.e:()V` @kind static;
  #L39e73c.  v1:= 0I;
  #L39e73e.  return v1;
  #L39e740.  v1:= 1I;
  #L39e742.  return v1;
}
procedure `boolean` `h`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L39e798.  v0:= 0L;
  #L39e79c.  v2:= lcmp(v3, v0);
  #L39e7a0.  if v2 > 0 then goto L39e7da;
  #L39e7a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L39e7a8.  v1:= new `java.lang.StringBuilder`;
  #L39e7ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39e7b2.  v2:= "n > 0 required but it was " @kind object;
  #L39e7b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39e7bc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L39e7c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39e7c8.  v3:= temp @kind object;
  #L39e7ca.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39e7d0.  call `q`(v0) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39e7d6.  v3:= 0I;
  #L39e7d8.  return v3;
  #L39e7da.  v3:= 1I;
  #L39e7dc.  return v3;
}
procedure `boolean` `i`(`d3.c` v1 @kind object, `d3.c` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.i:(Ld3/c;Ld3/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39e754.  v0:= 0I;
  #L39e756.  if v2 != 0 then goto L39e770;
  #L39e75a.  v1:= new `java.lang.NullPointerException`;
  #L39e75e.  v2:= "next is null" @kind object;
  #L39e762.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39e768.  call `q`(v1) @signature `Ll2/a;.q:(Ljava/lang/Throwable;)V` @kind static;
  #L39e76e.  return v0;
  #L39e770.  if v1 == 0 then goto L39e782;
  #L39e774.  call `cancel`(v2) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e77a.  call `e`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.e:()V` @kind static;
  #L39e780.  return v0;
  #L39e782.  v1:= 1I;
  #L39e784.  return v1;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39e7f0.  v0:= constclass @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L39e7f4.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L39e7fa.  v1:= temp @kind object;
  #L39e7fc.  v1:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L39e800.  return v1 @kind object;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39e814.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L39e818.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L39e81e.  v0:= temp @kind object;
  #L39e820.  v0:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L39e824.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L39e884.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.g:(J)V` @AccessFlag PUBLIC {
    temp;

  #L39e96c.  return @kind void;
}
