record `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `d3.b` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `d3.b` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ld3/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39de5c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L39de62.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` := v1 @kind object;
  #L39de66.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39de78.  v0:= 4I;
  #L39de7a.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L39de80.  v0:= 0I;
  #L39de82.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L39de86.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L39de98.  v0:= 32I;
  #L39de9c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39dea2.  v0:= 0I;
  #L39dea4.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L39dea8.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L39debc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39dec2.  v0:= temp;
  #L39dec4.  v1:= 8I;
  #L39dec8.  v2:= 4I;
  #L39deca.  if v0 != v1 then goto L39defa;
  #L39dece.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L39ded2.  v0:= 16I;
  #L39ded6.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39dedc.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L39dee0.  call `onNext`(v0, v4) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39dee6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39deec.  v4:= temp;
  #L39deee.  if v4 == v2 then goto L39def8;
  #L39def2.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39def8.  return @kind void;
  #L39defa.  v1:= v0 ^& -3;
  #L39defe.  if v1 == 0 then goto L39df04;
  #L39df02.  return @kind void;
  #L39df04.  v1:= 2I;
  #L39df06.  if v0 != v1 then goto L39df30;
  #L39df0a.  v0:= 3I;
  #L39df0c.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39df12.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L39df16.  call `onNext`(v0, v4) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39df1c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39df22.  v4:= temp;
  #L39df24.  if v4 == v2 then goto L39df2e;
  #L39df28.  call `onComplete`(v0) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39df2e.  return @kind void;
  #L39df30.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L39df34.  v0:= 0I;
  #L39df36.  v1:= 1I;
  #L39df38.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39df3e.  v0:= temp;
  #L39df40.  if v0 == 0 then goto L39df46;
  #L39df44.  return @kind void;
  #L39df46.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39df4c.  v0:= temp;
  #L39df4e.  if v0 != v2 then goto L39dec4;
  #L39df52.  v4:= 0I;
  #L39df54.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L39df58.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.g:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L39df6c.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39df72.  v2:= temp;
  #L39df74.  if v2 == 0 then goto L39dfdc;
  #L39df78.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39df7e.  v2:= temp;
  #L39df80.  v3:= v2 ^& -2;
  #L39df84.  if v3 == 0 then goto L39df8a;
  #L39df88.  return @kind void;
  #L39df8a.  v3:= 1I;
  #L39df8c.  if v2 != v3 then goto L39dfcc;
  #L39df90.  v2:= 3I;
  #L39df92.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39df98.  v2:= temp;
  #L39df9a.  if v2 == 0 then goto L39dfca;
  #L39df9e.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L39dfa2.  if v2 == 0 then goto L39dfca;
  #L39dfa6.  v3:= 0I;
  #L39dfa8.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L39dfac.  v3:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.actual` @type ^`d3.b` @kind object;
  #L39dfb0.  call `onNext`(v3, v2) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39dfb6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39dfbc.  v2:= temp;
  #L39dfbe.  v0:= 4I;
  #L39dfc0.  if v2 == v0 then goto L39dfca;
  #L39dfc4.  call `onComplete`(v3) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39dfca.  return @kind void;
  #L39dfcc.  v2:= 0I;
  #L39dfce.  v3:= 2I;
  #L39dfd0.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39dfd6.  v2:= temp;
  #L39dfd8.  if v2 == 0 then goto L39df78;
  #L39dfdc.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.h:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L39ddfc.  v0:= 2I;
  #L39ddfe.  v2:= v2 ^& v0 @kind int;
  #L39de00.  if v2 == 0 then goto L39de10;
  #L39de04.  v2:= 8I;
  #L39de08.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39de0e.  return v0;
  #L39de10.  v2:= 0I;
  #L39de12.  return v2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L39ddd4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39ddda.  v0:= temp;
  #L39dddc.  v1:= 16I;
  #L39dde0.  if v0 == v1 then goto L39dde8;
  #L39dde4.  v0:= 1I;
  #L39dde6.  goto L39ddea;
  #L39dde8.  v0:= 0I;
  #L39ddea.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L39de24.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39de2a.  v0:= temp;
  #L39de2c.  v1:= 0I;
  #L39de2e.  v2:= 16I;
  #L39de32.  if v0 != v2 then goto L39de4a;
  #L39de36.  v0:= 32I;
  #L39de3a.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39de40.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L39de44.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L39de48.  return v0 @kind object;
  #L39de4a.  return v1 @kind object;
}
