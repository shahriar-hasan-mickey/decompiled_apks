record `io.reactivex.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `k2.g` @kind interface {
  `d3.b` `io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.ScalarSubscription.value` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `d3.b` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Ld3/b;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39e210.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39e216.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`d3.b` := v1 @kind object;
  #L39e21a.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` := v2 @kind object;
  #L39e21e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e230.  v0:= 2I;
  #L39e232.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39e238.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e24c.  v0:= 1I;
  #L39e24e.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39e254.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e268.  call temp:= `h`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39e26e.  v2:= temp;
  #L39e270.  if v2 != 0 then goto L39e276;
  #L39e274.  return @kind void;
  #L39e276.  v2:= 0I;
  #L39e278.  v3:= 1I;
  #L39e27a.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39e280.  v2:= temp;
  #L39e282.  if v2 == 0 then goto L39e2a8;
  #L39e286.  v2:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`d3.b` @kind object;
  #L39e28a.  v3:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L39e28e.  call `onNext`(v2, v3) @signature `Ld3/b;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L39e294.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e29a.  v3:= temp;
  #L39e29c.  v0:= 2I;
  #L39e29e.  if v3 == v0 then goto L39e2a8;
  #L39e2a2.  call `onComplete`(v2) @signature `Ld3/b;.onComplete:()V` @kind interface;
  #L39e2a8.  return @kind void;
}
procedure `int` `h`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.h:(I)I` @AccessFlag PUBLIC {
    temp;

  #L39e1c8.  v1:= v1 ^& 1;
  #L39e1cc.  return v1;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e184.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e18a.  v0:= temp;
  #L39e18c.  if v0 == 0 then goto L39e194;
  #L39e190.  v0:= 1I;
  #L39e192.  goto L39e196;
  #L39e194.  v0:= 0I;
  #L39e196.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e1a8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L39e1ac.  v0:= "Should not be called!" @kind object;
  #L39e1b0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39e1b6.  throw v2;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e1e0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e1e6.  v0:= temp;
  #L39e1e8.  if v0 != 0 then goto L39e1fa;
  #L39e1ec.  v0:= 1I;
  #L39e1ee.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L39e1f4.  v0:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L39e1f8.  return v0 @kind object;
  #L39e1fa.  v0:= 0I;
  #L39e1fc.  return v0 @kind object;
}
