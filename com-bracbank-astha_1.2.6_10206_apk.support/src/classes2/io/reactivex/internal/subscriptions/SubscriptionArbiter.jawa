record `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `d3.c` @kind interface {
  `d3.c` `io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @AccessFlag ;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.missedProduced` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.missedRequested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscriptions.SubscriptionArbiter.missedSubscription` @AccessFlag FINAL;
  `long` `io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @AccessFlag ;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.SubscriptionArbiter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39e2d4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L39e2da.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L39e2de.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39e2e4.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L39e2e8.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39e2ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39e2f2.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39e2f6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L39e2fa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L39e300.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedProduced` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L39e304.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L39e340.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L39e346.  v0:= temp;
  #L39e348.  if v0 == 0 then goto L39e34e;
  #L39e34c.  return @kind void;
  #L39e34e.  call `d`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L39e354.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39e318.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.cancelled` @type ^`boolean` @kind boolean;
  #L39e31c.  if v0 != 0 then goto L39e32c;
  #L39e320.  v0:= 1I;
  #L39e322.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L39e326.  call `b`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L39e32c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v19 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L39e368.  v0:= v19 @kind object;
  #L39e36c.  v1:= 0I;
  #L39e36e.  v2:= 0L;
  #L39e372.  v4:= 1I;
  #L39e374.  v7:= v1 @kind object;
  #L39e376.  v5:= v2 @kind wide;
  #L39e378.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39e37c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39e382.  v8:= temp @kind object;
  #L39e384.  v8:= (`d3.c`) v8 @kind object;
  #L39e388.  if v8 == 0 then goto L39e39c;
  #L39e38c.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39e390.  call temp:= `getAndSet`(v8, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39e396.  v8:= temp @kind object;
  #L39e398.  v8:= (`d3.c`) v8 @kind object;
  #L39e39c.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e3a0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39e3a6.  v9:= temp @kind wide;
  #L39e3a8.  v11:= lcmp(v9, v2);
  #L39e3ac.  if v11 == 0 then goto L39e3bc;
  #L39e3b0.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e3b4.  call temp:= `getAndSet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L39e3ba.  v9:= temp @kind wide;
  #L39e3bc.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedProduced` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e3c0.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L39e3c6.  v11:= temp @kind wide;
  #L39e3c8.  v13:= lcmp(v11, v2);
  #L39e3cc.  if v13 == 0 then goto L39e3dc;
  #L39e3d0.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedProduced` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e3d4.  call temp:= `getAndSet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L39e3da.  v11:= temp @kind wide;
  #L39e3dc.  v13:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` @kind object;
  #L39e3e0.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.cancelled` @type ^`boolean` @kind boolean;
  #L39e3e4.  if v14 == 0 then goto L39e402;
  #L39e3e8.  if v13 == 0 then goto L39e3f6;
  #L39e3ec.  call `cancel`(v13) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e3f2.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` := v1 @kind object;
  #L39e3f6.  if v8 == 0 then goto L39e47a;
  #L39e3fa.  call `cancel`(v8) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e400.  goto L39e47a;
  #L39e402.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` @kind wide;
  #L39e406.  v16:= 9223372036854775807L;
  #L39e410.  v18:= lcmp(v14, v16);
  #L39e414.  if v18 == 0 then goto L39e43e;
  #L39e418.  call temp:= `c`(v14, v9) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39e41e.  v14:= temp @kind wide;
  #L39e420.  v18:= lcmp(v14, v16);
  #L39e424.  if v18 == 0 then goto L39e43a;
  #L39e428.  v14:= v14 - v11 @kind long;
  #L39e42a.  v11:= lcmp(v14, v2);
  #L39e42e.  if v11 >= 0 then goto L39e43a;
  #L39e432.  call `d`(v14) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.d:(J)V` @kind static;
  #L39e438.  v14:= v2 @kind wide;
  #L39e43a.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` := v14 @kind wide;
  #L39e43e.  if v8 == 0 then goto L39e464;
  #L39e442.  if v13 == 0 then goto L39e44c;
  #L39e446.  call `cancel`(v13) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e44c.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` := v8 @kind object;
  #L39e450.  v9:= lcmp(v14, v2);
  #L39e454.  if v9 == 0 then goto L39e47a;
  #L39e458.  call temp:= `c`(v5, v14) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39e45e.  v5:= temp @kind wide;
  #L39e460.  v7:= v8 @kind object;
  #L39e462.  goto L39e47a;
  #L39e464.  if v13 == 0 then goto L39e47a;
  #L39e468.  v8:= lcmp(v9, v2);
  #L39e46c.  if v8 == 0 then goto L39e47a;
  #L39e470.  call temp:= `c`(v5, v9) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39e476.  v5:= temp @kind wide;
  #L39e478.  v7:= v13 @kind object;
  #L39e47a.  v4:= -v4 @kind int;
  #L39e47c.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L39e482.  v4:= temp;
  #L39e484.  if v4 != 0 then goto L39e378;
  #L39e488.  v1:= lcmp(v5, v2);
  #L39e48c.  if v1 == 0 then goto L39e496;
  #L39e490.  call `g`(v7, v5) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e496.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.e:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L39e2bc.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L39e2c0.  return v0;
}
procedure `void` `g`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.g:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39e538.  call temp:= `h`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.h:(J)Z` @kind static;
  #L39e53e.  v0:= temp;
  #L39e540.  if v0 == 0 then goto L39e5ca;
  #L39e544.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L39e548.  if v0 == 0 then goto L39e54e;
  #L39e54c.  return @kind void;
  #L39e54e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e554.  v0:= temp;
  #L39e556.  if v0 != 0 then goto L39e5ba;
  #L39e55a.  v0:= 0I;
  #L39e55c.  v1:= 1I;
  #L39e55e.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39e564.  v0:= temp;
  #L39e566.  if v0 == 0 then goto L39e5ba;
  #L39e56a.  v2:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` @kind wide;
  #L39e56e.  v4:= 9223372036854775807L;
  #L39e578.  v0:= lcmp(v2, v4);
  #L39e57c.  if v0 == 0 then goto L39e598;
  #L39e580.  call temp:= `c`(v2, v7) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L39e586.  v2:= temp @kind wide;
  #L39e588.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` := v2 @kind wide;
  #L39e58c.  v0:= lcmp(v2, v4);
  #L39e590.  if v0 != 0 then goto L39e598;
  #L39e594.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` := v1 @kind boolean;
  #L39e598.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` @kind object;
  #L39e59c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39e5a2.  v1:= temp;
  #L39e5a4.  if v1 == 0 then goto L39e5ae;
  #L39e5a8.  call `d`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L39e5ae.  if v0 == 0 then goto L39e5b8;
  #L39e5b2.  call `g`(v0, v7) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e5b8.  return @kind void;
  #L39e5ba.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e5be.  call temp:= `a`(v0, v7) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L39e5c4.  call `b`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L39e5ca.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.h:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39e4a8.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L39e4ac.  if v0 == 0 then goto L39e4b2;
  #L39e4b0.  return @kind void;
  #L39e4b2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e4b8.  v0:= temp;
  #L39e4ba.  if v0 != 0 then goto L39e514;
  #L39e4be.  v0:= 0I;
  #L39e4c0.  v1:= 1I;
  #L39e4c2.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39e4c8.  v0:= temp;
  #L39e4ca.  if v0 == 0 then goto L39e514;
  #L39e4ce.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` @kind wide;
  #L39e4d2.  v2:= 9223372036854775807L;
  #L39e4dc.  v4:= lcmp(v0, v2);
  #L39e4e0.  if v4 == 0 then goto L39e4fe;
  #L39e4e4.  v0:= v0 - v6 @kind long;
  #L39e4e6.  v6:= 0L;
  #L39e4ea.  v2:= lcmp(v0, v6);
  #L39e4ee.  if v2 >= 0 then goto L39e4fa;
  #L39e4f2.  call `d`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.d:(J)V` @kind static;
  #L39e4f8.  v0:= v6 @kind wide;
  #L39e4fa.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` := v0 @kind wide;
  #L39e4fe.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39e504.  v6:= temp;
  #L39e506.  if v6 != 0 then goto L39e50c;
  #L39e50a.  return @kind void;
  #L39e50c.  call `d`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L39e512.  return @kind void;
  #L39e514.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedProduced` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L39e518.  call temp:= `a`(v0, v6) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L39e51e.  call `b`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L39e524.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `d3.c` v6 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.i:(Ld3/c;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39e5dc.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.cancelled` @type ^`boolean` @kind boolean;
  #L39e5e0.  if v0 == 0 then goto L39e5ec;
  #L39e5e4.  call `cancel`(v6) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e5ea.  return @kind void;
  #L39e5ec.  v0:= "s is null" @kind object;
  #L39e5f0.  call temp:= `d`(v6, v0) @signature `Lj2/b;.d:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L39e5f6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L39e5fc.  v0:= temp;
  #L39e5fe.  if v0 != 0 then goto L39e64e;
  #L39e602.  v0:= 0I;
  #L39e604.  v1:= 1I;
  #L39e606.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L39e60c.  v0:= temp;
  #L39e60e.  if v0 == 0 then goto L39e64e;
  #L39e612.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` @kind object;
  #L39e616.  if v0 == 0 then goto L39e620;
  #L39e61a.  call `cancel`(v0) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e620.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.actual` @type ^`d3.c` := v6 @kind object;
  #L39e624.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.requested` @type ^`long` @kind wide;
  #L39e628.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L39e62e.  v2:= temp;
  #L39e630.  if v2 == 0 then goto L39e63a;
  #L39e634.  call `d`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L39e63a.  v2:= 0L;
  #L39e63e.  v4:= lcmp(v0, v2);
  #L39e642.  if v4 == 0 then goto L39e64c;
  #L39e646.  call `g`(v6, v0) @signature `Ld3/c;.g:(J)V` @kind interface;
  #L39e64c.  return @kind void;
  #L39e64e.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.missedSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39e652.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L39e658.  v6:= temp @kind object;
  #L39e65a.  v6:= (`d3.c`) v6 @kind object;
  #L39e65e.  if v6 == 0 then goto L39e668;
  #L39e662.  call `cancel`(v6) @signature `Ld3/c;.cancel:()V` @kind interface;
  #L39e668.  call `b`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.b:()V` @kind virtual;
  #L39e66e.  return @kind void;
}
