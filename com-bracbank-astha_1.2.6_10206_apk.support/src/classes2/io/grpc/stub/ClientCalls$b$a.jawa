record `io.grpc.stub.ClientCalls$b$a` @kind class @AccessFlag FINAL extends `io.grpc.stub.ClientCalls$e` @kind class {
  `boolean` `io.grpc.stub.ClientCalls$b$a.a` @AccessFlag PRIVATE;
  `io.grpc.stub.ClientCalls$b` `io.grpc.stub.ClientCalls$b$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.grpc.stub.ClientCalls$b$a` v0 @kind this, `io.grpc.stub.ClientCalls$b` v1 @kind object) @signature `Lio/grpc/stub/ClientCalls$b$a;.<init>:(Lio/grpc/stub/ClientCalls$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L38d358.  v0.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` := v1 @kind object;
  #L38d35c.  v1:= 0I;
  #L38d35e.  call `<init>`(v0, v1) @signature `Lio/grpc/stub/ClientCalls$e;.<init>:(Lio/grpc/stub/ClientCalls$a;)V` @kind direct;
  #L38d364.  v1:= 0I;
  #L38d366.  v0.`io.grpc.stub.ClientCalls$b$a.a` @type ^`boolean` := v1 @kind boolean;
  #L38d36a.  return @kind void;
}
procedure `void` `a`(`io.grpc.stub.ClientCalls$b$a` v2 @kind this) @signature `Lio/grpc/stub/ClientCalls$b$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L38d430.  v0:= v2.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` @kind object;
  #L38d434.  call temp:= `b`(v0) @signature `Lio/grpc/stub/ClientCalls$b;.b:(Lio/grpc/stub/ClientCalls$b;)Lio/grpc/f;` @kind static;
  #L38d43a.  v0:= temp @kind object;
  #L38d43c.  v1:= 1I;
  #L38d43e.  call `request`(v0, v1) @signature `Lio/grpc/f;.request:(I)V` @kind virtual;
  #L38d444.  return @kind void;
}
procedure `void` `onClose`(`io.grpc.stub.ClientCalls$b$a` v3 @kind this, `io.grpc.Status` v4 @kind object, `io.grpc.t0` v5 @kind object) @signature `Lio/grpc/stub/ClientCalls$b$a;.onClose:(Lio/grpc/Status;Lio/grpc/t0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L38d37c.  v0:= v3.`io.grpc.stub.ClientCalls$b$a.a` @type ^`boolean` @kind boolean;
  #L38d380.  v1:= 1I;
  #L38d382.  v0:= v0 ^~ v1 @kind int;
  #L38d384.  v2:= "ClientCall already closed" @kind object;
  #L38d388.  call `checkState`(v0, v2) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L38d38e.  call temp:= `p`(v4) @signature `Lio/grpc/Status;.p:()Z` @kind virtual;
  #L38d394.  v0:= temp;
  #L38d396.  if v0 == 0 then goto L38d3b2;
  #L38d39a.  v4:= v3.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` @kind object;
  #L38d39e.  call temp:= `a`(v4) @signature `Lio/grpc/stub/ClientCalls$b;.a:(Lio/grpc/stub/ClientCalls$b;)Ljava/util/concurrent/BlockingQueue;` @kind static;
  #L38d3a4.  v4:= temp @kind object;
  #L38d3a6.  v5:= v3.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` @kind object;
  #L38d3aa.  call temp:= `add`(v4, v5) @signature `Ljava/util/concurrent/BlockingQueue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38d3b0.  goto L38d3cc;
  #L38d3b2.  v0:= v3.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` @kind object;
  #L38d3b6.  call temp:= `a`(v0) @signature `Lio/grpc/stub/ClientCalls$b;.a:(Lio/grpc/stub/ClientCalls$b;)Ljava/util/concurrent/BlockingQueue;` @kind static;
  #L38d3bc.  v0:= temp @kind object;
  #L38d3be.  call temp:= `e`(v4, v5) @signature `Lio/grpc/Status;.e:(Lio/grpc/t0;)Lio/grpc/StatusRuntimeException;` @kind virtual;
  #L38d3c4.  v4:= temp @kind object;
  #L38d3c6.  call temp:= `add`(v0, v4) @signature `Ljava/util/concurrent/BlockingQueue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38d3cc.  v3.`io.grpc.stub.ClientCalls$b$a.a` @type ^`boolean` := v1 @kind boolean;
  #L38d3d0.  return @kind void;
}
procedure `void` `onHeaders`(`io.grpc.stub.ClientCalls$b$a` v0 @kind this, `io.grpc.t0` v1 @kind object) @signature `Lio/grpc/stub/ClientCalls$b$a;.onHeaders:(Lio/grpc/t0;)V` @AccessFlag PUBLIC {
    temp;

  #L38d3e4.  return @kind void;
}
procedure `void` `onMessage`(`io.grpc.stub.ClientCalls$b$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/grpc/stub/ClientCalls$b$a;.onMessage:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38d3f8.  v0:= v2.`io.grpc.stub.ClientCalls$b$a.a` @type ^`boolean` @kind boolean;
  #L38d3fc.  v0:= v0 ^~ 1;
  #L38d400.  v1:= "ClientCall already closed" @kind object;
  #L38d404.  call `checkState`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L38d40a.  v0:= v2.`io.grpc.stub.ClientCalls$b$a.b` @type ^`io.grpc.stub.ClientCalls$b` @kind object;
  #L38d40e.  call temp:= `a`(v0) @signature `Lio/grpc/stub/ClientCalls$b;.a:(Lio/grpc/stub/ClientCalls$b;)Ljava/util/concurrent/BlockingQueue;` @kind static;
  #L38d414.  v0:= temp @kind object;
  #L38d416.  call temp:= `add`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L38d41c.  return @kind void;
}
