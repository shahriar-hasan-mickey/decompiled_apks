record `io.grpc.stub.ClientCalls$b` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `java.util.concurrent.BlockingQueue` `io.grpc.stub.ClientCalls$b.a` @AccessFlag PRIVATE_FINAL;
  `io.grpc.stub.ClientCalls$e` `io.grpc.stub.ClientCalls$b.b` @AccessFlag PRIVATE_FINAL;
  `io.grpc.f` `io.grpc.stub.ClientCalls$b.c` @AccessFlag PRIVATE_FINAL;
  `io.grpc.stub.ClientCalls$ThreadlessExecutor` `io.grpc.stub.ClientCalls$b.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.grpc.stub.ClientCalls$b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.grpc.stub.ClientCalls$b` v2 @kind this, `io.grpc.f` v3 @kind object, `io.grpc.stub.ClientCalls$ThreadlessExecutor` v4 @kind object) @signature `Lio/grpc/stub/ClientCalls$b;.<init>:(Lio/grpc/f;Lio/grpc/stub/ClientCalls$ThreadlessExecutor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L38d654.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L38d65a.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L38d65e.  v1:= 3I;
  #L38d660.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L38d666.  v2.`io.grpc.stub.ClientCalls$b.a` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L38d66a.  v0:= new `io.grpc.stub.ClientCalls$b$a`;
  #L38d66e.  call `<init>`(v0, v2) @signature `Lio/grpc/stub/ClientCalls$b$a;.<init>:(Lio/grpc/stub/ClientCalls$b;)V` @kind direct;
  #L38d674.  v2.`io.grpc.stub.ClientCalls$b.b` @type ^`io.grpc.stub.ClientCalls$e` := v0 @kind object;
  #L38d678.  v2.`io.grpc.stub.ClientCalls$b.c` @type ^`io.grpc.f` := v3 @kind object;
  #L38d67c.  v2.`io.grpc.stub.ClientCalls$b.d` @type ^`io.grpc.stub.ClientCalls$ThreadlessExecutor` := v4 @kind object;
  #L38d680.  return @kind void;
}
procedure `java.util.concurrent.BlockingQueue` `a`(`io.grpc.stub.ClientCalls$b` v0 @kind object) @signature `Lio/grpc/stub/ClientCalls$b;.a:(Lio/grpc/stub/ClientCalls$b;)Ljava/util/concurrent/BlockingQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L38d63c.  v0:= v0.`io.grpc.stub.ClientCalls$b.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L38d640.  return v0 @kind object;
}
procedure `io.grpc.f` `b`(`io.grpc.stub.ClientCalls$b` v0 @kind object) @signature `Lio/grpc/stub/ClientCalls$b;.b:(Lio/grpc/stub/ClientCalls$b;)Lio/grpc/f;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L38d4b0.  v0:= v0.`io.grpc.stub.ClientCalls$b.c` @type ^`io.grpc.f` @kind object;
  #L38d4b4.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`io.grpc.stub.ClientCalls$b` v4 @kind this) @signature `Lio/grpc/stub/ClientCalls$b;.d:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L38d530.  v0:= 1I;
  #L38d532.  v1:= 0I;
  #L38d534.  v2:= v4.`io.grpc.stub.ClientCalls$b.d` @type ^`io.grpc.stub.ClientCalls$ThreadlessExecutor` @kind object;
  #L38d538.  v3:= "Thread interrupted" @kind object;
  #L38d53c.  if v2 != 0 then goto L38d578;
  #L38d540.  v2:= v4.`io.grpc.stub.ClientCalls$b.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L38d544.  call temp:= `take`(v2) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L38d54a.  v0:= temp @kind object;
  #L38d54c.  if v1 == 0 then goto L38d55e;
  #L38d550.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L38d556.  v1:= temp @kind object;
  #L38d558.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L38d55e.  return v0 @kind object;
  #L38d560.  v1:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L38d562.  v2:= v4.`io.grpc.stub.ClientCalls$b.c` @type ^`io.grpc.f` @kind object;
  #L38d566.  call `cancel`(v2, v3, v1) @signature `Lio/grpc/f;.cancel:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L38d56c.  v1:= 1I;
  #L38d56e.  goto L38d540;
  #L38d570.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L38d572.  v0:= v1 @kind object;
  #L38d574.  v1:= 1I;
  #L38d576.  goto L38d5d0;
  #L38d578.  v2:= v4.`io.grpc.stub.ClientCalls$b.a` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L38d57c.  call temp:= `poll`(v2) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L38d582.  v2:= temp @kind object;
  #L38d584.  if v2 != 0 then goto L38d5a4;
  #L38d588.  v2:= v4.`io.grpc.stub.ClientCalls$b.d` @type ^`io.grpc.stub.ClientCalls$ThreadlessExecutor` @kind object;
  #L38d58c.  call `c`(v2) @signature `Lio/grpc/stub/ClientCalls$ThreadlessExecutor;.c:()V` @kind virtual;
  #L38d592.  goto L38d578;
  #L38d594.  v1:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L38d596.  v2:= v4.`io.grpc.stub.ClientCalls$b.c` @type ^`io.grpc.f` @kind object;
  #L38d59a.  call `cancel`(v2, v3, v1) @signature `Lio/grpc/f;.cancel:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L38d5a0.  v1:= 1I;
  #L38d5a2.  goto L38d578;
  #L38d5a4.  if v2 == v4 then goto L38d5b0;
  #L38d5a8.  v0:= instanceof @variable v2 @type ^`io.grpc.StatusRuntimeException` @kind boolean;
  #L38d5ac.  if v0 == 0 then goto L38d5ba;
  #L38d5b0.  v0:= v4.`io.grpc.stub.ClientCalls$b.d` @type ^`io.grpc.stub.ClientCalls$ThreadlessExecutor` @kind object;
  #L38d5b4.  call `shutdown`(v0) @signature `Lio/grpc/stub/ClientCalls$ThreadlessExecutor;.shutdown:()V` @kind virtual;
  #L38d5ba.  if v1 == 0 then goto L38d5cc;
  #L38d5be.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L38d5c4.  v0:= temp @kind object;
  #L38d5c6.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L38d5cc.  return v2 @kind object;
  #L38d5ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L38d5d0.  if v1 == 0 then goto L38d5e2;
  #L38d5d4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L38d5da.  v1:= temp @kind object;
  #L38d5dc.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L38d5e2.  throw v0;
  catch `java.lang.Throwable` @[L38d534..L38d538] goto L38d5ce;
  catch `java.lang.InterruptedException` @[L38d540..L38d54c] goto L38d560;
  catch `java.lang.Throwable` @[L38d540..L38d54c] goto L38d5ce;
  catch `java.lang.Throwable` @[L38d562..L38d56c] goto L38d570;
  catch `java.lang.Throwable` @[L38d578..L38d584] goto L38d5ce;
  catch `java.lang.InterruptedException` @[L38d588..L38d592] goto L38d594;
  catch `java.lang.Throwable` @[L38d588..L38d592] goto L38d5ce;
  catch `java.lang.Throwable` @[L38d596..L38d5a0] goto L38d570;
  catch `java.lang.Throwable` @[L38d5a8..L38d5ba] goto L38d5ce;
}
procedure `io.grpc.stub.ClientCalls$e` `c`(`io.grpc.stub.ClientCalls$b` v1 @kind this) @signature `Lio/grpc/stub/ClientCalls$b;.c:()Lio/grpc/stub/ClientCalls$e;` @AccessFlag  {
    temp;
    v0;

  #L38d4c8.  v0:= v1.`io.grpc.stub.ClientCalls$b.b` @type ^`io.grpc.stub.ClientCalls$e` @kind object;
  #L38d4cc.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`io.grpc.stub.ClientCalls$b` v2 @kind this) @signature `Lio/grpc/stub/ClientCalls$b;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38d458.  v0:= v2.`io.grpc.stub.ClientCalls$b.e` @type ^`java.lang.Object` @kind object;
  #L38d45c.  if v0 != 0 then goto L38d46e;
  #L38d460.  call temp:= `d`(v2) @signature `Lio/grpc/stub/ClientCalls$b;.d:()Ljava/lang/Object;` @kind direct;
  #L38d466.  v0:= temp @kind object;
  #L38d468.  v2.`io.grpc.stub.ClientCalls$b.e` @type ^`java.lang.Object` := v0 @kind object;
  #L38d46c.  goto L38d458;
  #L38d46e.  v1:= instanceof @variable v0 @type ^`io.grpc.StatusRuntimeException` @kind boolean;
  #L38d472.  if v1 != 0 then goto L38d482;
  #L38d476.  if v0 == v2 then goto L38d47e;
  #L38d47a.  v0:= 1I;
  #L38d47c.  goto L38d480;
  #L38d47e.  v0:= 0I;
  #L38d480.  return v0;
  #L38d482.  v0:= (`io.grpc.StatusRuntimeException`) v0 @kind object;
  #L38d486.  call temp:= `a`(v0) @signature `Lio/grpc/StatusRuntimeException;.a:()Lio/grpc/Status;` @kind virtual;
  #L38d48c.  v1:= temp @kind object;
  #L38d48e.  call temp:= `b`(v0) @signature `Lio/grpc/StatusRuntimeException;.b:()Lio/grpc/t0;` @kind virtual;
  #L38d494.  v0:= temp @kind object;
  #L38d496.  call temp:= `e`(v1, v0) @signature `Lio/grpc/Status;.e:(Lio/grpc/t0;)Lio/grpc/StatusRuntimeException;` @kind virtual;
  #L38d49c.  v0:= temp @kind object;
  #L38d49e.  throw v0;
}
procedure `java.lang.Object` `next`(`io.grpc.stub.ClientCalls$b` v2 @kind this) @signature `Lio/grpc/stub/ClientCalls$b;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38d4e0.  v0:= v2.`io.grpc.stub.ClientCalls$b.e` @type ^`java.lang.Object` @kind object;
  #L38d4e4.  v1:= instanceof @variable v0 @type ^`io.grpc.StatusRuntimeException` @kind boolean;
  #L38d4e8.  if v1 != 0 then goto L38d4fc;
  #L38d4ec.  if v0 == v2 then goto L38d4fc;
  #L38d4f0.  v0:= v2.`io.grpc.stub.ClientCalls$b.c` @type ^`io.grpc.f` @kind object;
  #L38d4f4.  v1:= 1I;
  #L38d4f6.  call `request`(v0, v1) @signature `Lio/grpc/f;.request:(I)V` @kind virtual;
  #L38d4fc.  call temp:= `hasNext`(v2) @signature `Lio/grpc/stub/ClientCalls$b;.hasNext:()Z` @kind virtual;
  #L38d502.  v0:= temp;
  #L38d504.  if v0 == 0 then goto L38d514;
  #L38d508.  v0:= v2.`io.grpc.stub.ClientCalls$b.e` @type ^`java.lang.Object` @kind object;
  #L38d50c.  v1:= 0I;
  #L38d50e.  v2.`io.grpc.stub.ClientCalls$b.e` @type ^`java.lang.Object` := v1 @kind object;
  #L38d512.  return v0 @kind object;
  #L38d514.  v0:= new `java.util.NoSuchElementException`;
  #L38d518.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L38d51e.  throw v0;
}
procedure `void` `remove`(`io.grpc.stub.ClientCalls$b` v1 @kind this) @signature `Lio/grpc/stub/ClientCalls$b;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38d694.  v0:= new `java.lang.UnsupportedOperationException`;
  #L38d698.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L38d69e.  throw v0;
}
