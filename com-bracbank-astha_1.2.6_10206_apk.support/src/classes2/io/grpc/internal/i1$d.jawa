record `io.grpc.internal.i1$d` @kind class @AccessFlag FINAL extends `io.grpc.n0$i` @kind class {
  `io.grpc.n0$h` `io.grpc.internal.i1$d.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.grpc.internal.i1$d.b` @AccessFlag PRIVATE_FINAL;
  `io.grpc.internal.i1` `io.grpc.internal.i1$d.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.grpc.internal.i1$d` v1 @kind this, `io.grpc.internal.i1` v2 @kind object, `io.grpc.n0$h` v3 @kind object) @signature `Lio/grpc/internal/i1$d;.<init>:(Lio/grpc/internal/i1;Lio/grpc/n0$h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L37bc68.  v1.`io.grpc.internal.i1$d.c` @type ^`io.grpc.internal.i1` := v2 @kind object;
  #L37bc6c.  call `<init>`(v1) @signature `Lio/grpc/n0$i;.<init>:()V` @kind direct;
  #L37bc72.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L37bc76.  v0:= 0I;
  #L37bc78.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L37bc7e.  v1.`io.grpc.internal.i1$d.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L37bc82.  v2:= "subchannel" @kind object;
  #L37bc86.  call temp:= `checkNotNull`(v3, v2) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L37bc8c.  v2:= temp @kind object;
  #L37bc8e.  v2:= (`io.grpc.n0$h`) v2 @kind object;
  #L37bc92.  v1.`io.grpc.internal.i1$d.a` @type ^`io.grpc.n0$h` := v2 @kind object;
  #L37bc96.  return @kind void;
}
procedure `io.grpc.n0$h` `c`(`io.grpc.internal.i1$d` v0 @kind object) @signature `Lio/grpc/internal/i1$d;.c:(Lio/grpc/internal/i1$d;)Lio/grpc/n0$h;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L37bc50.  v0:= v0.`io.grpc.internal.i1$d.a` @type ^`io.grpc.n0$h` @kind object;
  #L37bc54.  return v0 @kind object;
}
procedure `io.grpc.n0$e` `a`(`io.grpc.internal.i1$d` v2 @kind this, `io.grpc.n0$f` v3 @kind object) @signature `Lio/grpc/internal/i1$d;.a:(Lio/grpc/n0$f;)Lio/grpc/n0$e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37bbfc.  v3:= v2.`io.grpc.internal.i1$d.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L37bc00.  v0:= 0I;
  #L37bc02.  v1:= 1I;
  #L37bc04.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L37bc0a.  v3:= temp;
  #L37bc0c.  if v3 == 0 then goto L37bc34;
  #L37bc10.  v3:= v2.`io.grpc.internal.i1$d.c` @type ^`io.grpc.internal.i1` @kind object;
  #L37bc14.  call temp:= `h`(v3) @signature `Lio/grpc/internal/i1;.h:(Lio/grpc/internal/i1;)Lio/grpc/n0$d;` @kind static;
  #L37bc1a.  v3:= temp @kind object;
  #L37bc1c.  call temp:= `d`(v3) @signature `Lio/grpc/n0$d;.d:()Lio/grpc/g1;` @kind virtual;
  #L37bc22.  v3:= temp @kind object;
  #L37bc24.  v0:= new `io.grpc.internal.i1$d$a`;
  #L37bc28.  call `<init>`(v0, v2) @signature `Lio/grpc/internal/i1$d$a;.<init>:(Lio/grpc/internal/i1$d;)V` @kind direct;
  #L37bc2e.  call `execute`(v3, v0) @signature `Lio/grpc/g1;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L37bc34.  call temp:= `g`() @signature `Lio/grpc/n0$e;.g:()Lio/grpc/n0$e;` @kind static;
  #L37bc3a.  v3:= temp @kind object;
  #L37bc3c.  return v3 @kind object;
}
