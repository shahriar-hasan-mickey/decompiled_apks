record `io.grpc.internal.i` @kind class @AccessFlag FINAL extends `io.grpc.internal.x0` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.grpc.internal.i.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.grpc.internal.i` v1 @kind this) @signature `Lio/grpc/internal/i;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L367038.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36703e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L367042.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L367048.  v1.`io.grpc.internal.i.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L36704c.  return @kind void;
}
procedure `void` `add`(`io.grpc.internal.i` v1 @kind this, `long` v2 ) @signature `Lio/grpc/internal/i;.add:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L367060.  v0:= v1.`io.grpc.internal.i.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L367064.  call temp:= `getAndAdd`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndAdd:(J)J` @kind virtual;
  #L36706a.  return @kind void;
}
