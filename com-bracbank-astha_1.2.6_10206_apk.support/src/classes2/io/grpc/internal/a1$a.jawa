record `io.grpc.internal.a1$a` @kind class @AccessFlag FINAL extends `java.lang.ref.WeakReference` @kind class {
  `java.lang.ref.ReferenceQueue` `io.grpc.internal.a1$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.internal.a1$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.grpc.internal.a1$a.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.Reference` `io.grpc.internal.a1$a.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.grpc.internal.a1$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@io.grpc.internal.a1$a.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.RuntimeException` `@@io.grpc.internal.a1$a.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/internal/a1$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L379210.  v0:= "io.grpc.ManagedChannel.enableAllocationTracking" @kind object;
  #L379214.  v1:= "true" @kind object;
  #L379218.  call temp:= `getProperty`(v0, v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L37921e.  v0:= temp @kind object;
  #L379220.  call temp:= `parseBoolean`(v0) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L379226.  v0:= temp;
  #L379228.  `@@io.grpc.internal.a1$a.f` @type ^`boolean` := v0 @kind boolean;
  #L37922c.  call temp:= `e`() @signature `Lio/grpc/internal/a1$a;.e:()Ljava/lang/RuntimeException;` @kind static;
  #L379232.  v0:= temp @kind object;
  #L379234.  `@@io.grpc.internal.a1$a.g` @type ^`java.lang.RuntimeException` := v0 @kind object;
  #L379238.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.internal.a1$a` v2 @kind this, `io.grpc.internal.a1` v3 @kind object, `io.grpc.q0` v4 @kind object, `java.lang.ref.ReferenceQueue` v5 @kind object, `java.util.concurrent.ConcurrentMap` v6 @kind object) @signature `Lio/grpc/internal/a1$a;.<init>:(Lio/grpc/internal/a1;Lio/grpc/q0;Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L37924c.  call `<init>`(v2, v3, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L379252.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L379256.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L37925c.  v2.`io.grpc.internal.a1$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L379260.  v3:= new `java.lang.ref.SoftReference`;
  #L379264.  v0:= `@@io.grpc.internal.a1$a.f` @type ^`boolean` @kind boolean;
  #L379268.  if v0 == 0 then goto L37927c;
  #L37926c.  v0:= new `java.lang.RuntimeException`;
  #L379270.  v1:= "ManagedChannel allocation site" @kind object;
  #L379274.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37927a.  goto L379280;
  #L37927c.  v0:= `@@io.grpc.internal.a1$a.g` @type ^`java.lang.RuntimeException` @kind object;
  #L379280.  call `<init>`(v3, v0) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L379286.  v2.`io.grpc.internal.a1$a.d` @type ^`java.lang.ref.Reference` := v3 @kind object;
  #L37928a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L379290.  v3:= temp @kind object;
  #L379292.  v2.`io.grpc.internal.a1$a.c` @type ^`java.lang.String` := v3 @kind object;
  #L379296.  v2.`io.grpc.internal.a1$a.a` @type ^`java.lang.ref.ReferenceQueue` := v5 @kind object;
  #L37929a.  v2.`io.grpc.internal.a1$a.b` @type ^`java.util.concurrent.ConcurrentMap` := v6 @kind object;
  #L37929e.  call temp:= `put`(v6, v2, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3792a4.  call temp:= `b`(v5) @signature `Lio/grpc/internal/a1$a;.b:(Ljava/lang/ref/ReferenceQueue;)I` @kind static;
  #L3792aa.  return @kind void;
}
procedure `void` `a`(`io.grpc.internal.a1$a` v0 @kind object) @signature `Lio/grpc/internal/a1$a;.a:(Lio/grpc/internal/a1$a;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3792bc.  call `d`(v0) @signature `Lio/grpc/internal/a1$a;.d:()V` @kind direct;
  #L3792c2.  return @kind void;
}
procedure `int` `b`(`java.lang.ref.ReferenceQueue` v7 @kind object) @signature `Lio/grpc/internal/a1$a;.b:(Ljava/lang/ref/ReferenceQueue;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3790f8.  v0:= 0I;
  #L3790fa.  v1:= 0I;
  #L3790fc.  call temp:= `poll`(v7) @signature `Ljava/lang/ref/ReferenceQueue;.poll:()Ljava/lang/ref/Reference;` @kind virtual;
  #L379102.  v2:= temp @kind object;
  #L379104.  v2:= (`io.grpc.internal.a1$a`) v2 @kind object;
  #L379108.  if v2 == 0 then goto L3791d0;
  #L37910c.  v3:= v2.`io.grpc.internal.a1$a.d` @type ^`java.lang.ref.Reference` @kind object;
  #L379110.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L379116.  v3:= temp @kind object;
  #L379118.  v3:= (`java.lang.RuntimeException`) v3 @kind object;
  #L37911c.  call `c`(v2) @signature `Lio/grpc/internal/a1$a;.c:()V` @kind direct;
  #L379122.  v4:= v2.`io.grpc.internal.a1$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L379126.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L37912c.  v4:= temp;
  #L37912e.  if v4 != 0 then goto L3790fc;
  #L379132.  v1:= v1 + 1;
  #L379136.  v4:= `@@java.util.logging.Level.SEVERE` @type ^`java.util.logging.Level` @kind object;
  #L37913a.  call temp:= `o`() @signature `Lio/grpc/internal/a1;.o:()Ljava/util/logging/Logger;` @kind static;
  #L379140.  v5:= temp @kind object;
  #L379142.  call temp:= `isLoggable`(v5, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L379148.  v5:= temp;
  #L37914a.  if v5 == 0 then goto L3790fc;
  #L37914e.  v5:= new `java.lang.StringBuilder`;
  #L379152.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L379158.  v6:= "*~*~*~ Channel {0} was not shutdown properly!!! ~*~*~*" @kind object;
  #L37915c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L379162.  v6:= "line.separator" @kind object;
  #L379166.  call temp:= `getProperty`(v6) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L37916c.  v6:= temp @kind object;
  #L37916e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L379174.  v6:= "    Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true." @kind object;
  #L379178.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37917e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L379184.  v5:= temp @kind object;
  #L379186.  v6:= new `java.util.logging.LogRecord`;
  #L37918a.  call `<init>`(v6, v4, v5) @signature `Ljava/util/logging/LogRecord;.<init>:(Ljava/util/logging/Level;Ljava/lang/String;)V` @kind direct;
  #L379190.  call temp:= `o`() @signature `Lio/grpc/internal/a1;.o:()Ljava/util/logging/Logger;` @kind static;
  #L379196.  v4:= temp @kind object;
  #L379198.  call temp:= `getName`(v4) @signature `Ljava/util/logging/Logger;.getName:()Ljava/lang/String;` @kind virtual;
  #L37919e.  v4:= temp @kind object;
  #L3791a0.  call `setLoggerName`(v6, v4) @signature `Ljava/util/logging/LogRecord;.setLoggerName:(Ljava/lang/String;)V` @kind virtual;
  #L3791a6.  v4:= 1I;
  #L3791a8.  v4:= new `java.lang.Object`[v4];
  #L3791ac.  v2:= v2.`io.grpc.internal.a1$a.c` @type ^`java.lang.String` @kind object;
  #L3791b0.  v4[v0]:= v2 @kind object;
  #L3791b4.  call `setParameters`(v6, v4) @signature `Ljava/util/logging/LogRecord;.setParameters:([Ljava/lang/Object;)V` @kind virtual;
  #L3791ba.  call `setThrown`(v6, v3) @signature `Ljava/util/logging/LogRecord;.setThrown:(Ljava/lang/Throwable;)V` @kind virtual;
  #L3791c0.  call temp:= `o`() @signature `Lio/grpc/internal/a1;.o:()Ljava/util/logging/Logger;` @kind static;
  #L3791c6.  v2:= temp @kind object;
  #L3791c8.  call `log`(v2, v6) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/LogRecord;)V` @kind virtual;
  #L3791ce.  goto L3790fc;
  #L3791d0.  return v1;
}
procedure `void` `c`(`io.grpc.internal.a1$a` v1 @kind this) @signature `Lio/grpc/internal/a1$a;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3792f8.  call `clear`(v1) @signature `Ljava/lang/ref/WeakReference;.clear:()V` @kind super;
  #L3792fe.  v0:= v1.`io.grpc.internal.a1$a.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L379302.  call temp:= `remove`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L379308.  v0:= v1.`io.grpc.internal.a1$a.d` @type ^`java.lang.ref.Reference` @kind object;
  #L37930c.  call `clear`(v0) @signature `Ljava/lang/ref/Reference;.clear:()V` @kind virtual;
  #L379312.  return @kind void;
}
procedure `void` `d`(`io.grpc.internal.a1$a` v2 @kind this) @signature `Lio/grpc/internal/a1$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L379324.  v0:= v2.`io.grpc.internal.a1$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L379328.  v1:= 1I;
  #L37932a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L379330.  v0:= temp;
  #L379332.  if v0 != 0 then goto L37933c;
  #L379336.  call `clear`(v2) @signature `Lio/grpc/internal/a1$a;.clear:()V` @kind virtual;
  #L37933c.  return @kind void;
}
procedure `java.lang.RuntimeException` `e`() @signature `Lio/grpc/internal/a1$a;.e:()Ljava/lang/RuntimeException;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3791e4.  v0:= new `java.lang.RuntimeException`;
  #L3791e8.  v1:= "ManagedChannel allocation site not recorded.  Set -Dio.grpc.ManagedChannel.enableAllocationTracking=true to enable it" @kind object;
  #L3791ec.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3791f2.  v1:= 0I;
  #L3791f4.  v1:= new `java.lang.StackTraceElement`[v1];
  #L3791f8.  call `setStackTrace`(v0, v1) @signature `Ljava/lang/RuntimeException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L3791fe.  return v0 @kind object;
}
procedure `void` `clear`(`io.grpc.internal.a1$a` v1 @kind this) @signature `Lio/grpc/internal/a1$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3792d4.  call `c`(v1) @signature `Lio/grpc/internal/a1$a;.c:()V` @kind direct;
  #L3792da.  v0:= v1.`io.grpc.internal.a1$a.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L3792de.  call temp:= `b`(v0) @signature `Lio/grpc/internal/a1$a;.b:(Ljava/lang/ref/ReferenceQueue;)I` @kind static;
  #L3792e4.  return @kind void;
}
