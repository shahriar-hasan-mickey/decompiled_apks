record `io.grpc.internal.q1$d0` @kind class @AccessFlag FINAL {
  `int` `io.grpc.internal.q1$d0.a` @AccessFlag FINAL;
  `int` `io.grpc.internal.q1$d0.b` @AccessFlag FINAL;
  `int` `io.grpc.internal.q1$d0.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.grpc.internal.q1$d0.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.grpc.internal.q1$d0` v2 @kind this, `float` v3 , `float` v4 ) @signature `Lio/grpc/internal/q1$d0;.<init>:(FF)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L37eaa0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37eaa6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L37eaaa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L37eab0.  v2.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L37eab4.  v1:= 1000.0F;
  #L37eab8.  v4:= v4 * v1 @kind float;
  #L37eabc.  v4:= (`int`) v4 @kind f2i;
  #L37eabe.  v2.`io.grpc.internal.q1$d0.c` @type ^`int` := v4;
  #L37eac2.  v3:= v3 * v1 @kind float;
  #L37eac6.  v3:= (`int`) v3 @kind f2i;
  #L37eac8.  v2.`io.grpc.internal.q1$d0.a` @type ^`int` := v3;
  #L37eacc.  v4:= v3 / 2;
  #L37ead0.  v2.`io.grpc.internal.q1$d0.b` @type ^`int` := v4;
  #L37ead4.  call `set`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L37eada.  return @kind void;
}
procedure `boolean` `a`(`io.grpc.internal.q1$d0` v2 @kind this) @signature `Lio/grpc/internal/q1$d0;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L37e9e4.  v0:= v2.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L37e9e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L37e9ee.  v0:= temp;
  #L37e9f0.  v1:= v2.`io.grpc.internal.q1$d0.b` @type ^`int`;
  #L37e9f4.  if v0 <= v1 then goto L37e9fc;
  #L37e9f8.  v0:= 1I;
  #L37e9fa.  goto L37e9fe;
  #L37e9fc.  v0:= 0I;
  #L37e9fe.  return v0;
}
procedure `boolean` `b`(`io.grpc.internal.q1$d0` v5 @kind this) @signature `Lio/grpc/internal/q1$d0;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37ea10.  v0:= v5.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L37ea14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L37ea1a.  v0:= temp;
  #L37ea1c.  v1:= 0I;
  #L37ea1e.  if v0 != 0 then goto L37ea24;
  #L37ea22.  return v1;
  #L37ea24.  v2:= v0 + -1000;
  #L37ea28.  v3:= v5.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L37ea2c.  call temp:= `max`(v2, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37ea32.  v4:= temp;
  #L37ea34.  call temp:= `compareAndSet`(v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L37ea3a.  v0:= temp;
  #L37ea3c.  if v0 == 0 then goto L37ea10;
  #L37ea40.  v0:= v5.`io.grpc.internal.q1$d0.b` @type ^`int`;
  #L37ea44.  if v2 <= v0 then goto L37ea4a;
  #L37ea48.  v1:= 1I;
  #L37ea4a.  return v1;
}
procedure `void` `c`(`io.grpc.internal.q1$d0` v4 @kind this) @signature `Lio/grpc/internal/q1$d0;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37eaec.  v0:= v4.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L37eaf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L37eaf6.  v0:= temp;
  #L37eaf8.  v1:= v4.`io.grpc.internal.q1$d0.a` @type ^`int`;
  #L37eafc.  if v0 != v1 then goto L37eb02;
  #L37eb00.  goto L37eb20;
  #L37eb02.  v2:= v4.`io.grpc.internal.q1$d0.c` @type ^`int`;
  #L37eb06.  v2:= v2 + v0 @kind int;
  #L37eb08.  v3:= v4.`io.grpc.internal.q1$d0.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L37eb0c.  call temp:= `min`(v2, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L37eb12.  v1:= temp;
  #L37eb14.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L37eb1a.  v0:= temp;
  #L37eb1c.  if v0 == 0 then goto L37eaec;
  #L37eb20.  return @kind void;
}
procedure `boolean` `equals`(`io.grpc.internal.q1$d0` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/grpc/internal/q1$d0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37e99c.  v0:= 1I;
  #L37e99e.  if v4 != v5 then goto L37e9a4;
  #L37e9a2.  return v0;
  #L37e9a4.  v1:= instanceof @variable v5 @type ^`io.grpc.internal.q1$d0` @kind boolean;
  #L37e9a8.  v2:= 0I;
  #L37e9aa.  if v1 != 0 then goto L37e9b0;
  #L37e9ae.  return v2;
  #L37e9b0.  v5:= (`io.grpc.internal.q1$d0`) v5 @kind object;
  #L37e9b4.  v1:= v4.`io.grpc.internal.q1$d0.a` @type ^`int`;
  #L37e9b8.  v3:= v5.`io.grpc.internal.q1$d0.a` @type ^`int`;
  #L37e9bc.  if v1 != v3 then goto L37e9ce;
  #L37e9c0.  v1:= v4.`io.grpc.internal.q1$d0.c` @type ^`int`;
  #L37e9c4.  v5:= v5.`io.grpc.internal.q1$d0.c` @type ^`int`;
  #L37e9c8.  if v1 != v5 then goto L37e9ce;
  #L37e9cc.  goto L37e9d0;
  #L37e9ce.  v0:= 0I;
  #L37e9d0.  return v0;
}
procedure `int` `hashCode`(`io.grpc.internal.q1$d0` v3 @kind this) @signature `Lio/grpc/internal/q1$d0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ea5c.  v0:= 2I;
  #L37ea5e.  v0:= new `java.lang.Object`[v0];
  #L37ea62.  v1:= v3.`io.grpc.internal.q1$d0.a` @type ^`int`;
  #L37ea66.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37ea6c.  v1:= temp @kind object;
  #L37ea6e.  v2:= 0I;
  #L37ea70.  v0[v2]:= v1 @kind object;
  #L37ea74.  v1:= v3.`io.grpc.internal.q1$d0.c` @type ^`int`;
  #L37ea78.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37ea7e.  v1:= temp @kind object;
  #L37ea80.  v2:= 1I;
  #L37ea82.  v0[v2]:= v1 @kind object;
  #L37ea86.  call temp:= `hashCode`(v0) @signature `Lcom/google/common/base/Objects;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L37ea8c.  v0:= temp;
  #L37ea8e.  return v0;
}
