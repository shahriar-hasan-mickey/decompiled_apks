record `io.grpc.internal.u1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.Executor` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Executor` `io.grpc.internal.u1.a` @AccessFlag PRIVATE;
  `java.util.Queue` `io.grpc.internal.u1.b` @AccessFlag PRIVATE_FINAL;
  `int` `io.grpc.internal.u1.c` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.logging.Logger` `@@io.grpc.internal.u1.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.grpc.internal.u1$b` `@@io.grpc.internal.u1.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/internal/u1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L38001c.  v0:= constclass @type ^`io.grpc.internal.u1` @kind object;
  #L380020.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L380026.  v0:= temp @kind object;
  #L380028.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L38002e.  v0:= temp @kind object;
  #L380030.  `@@io.grpc.internal.u1.d` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L380034.  call temp:= `c`() @signature `Lio/grpc/internal/u1;.c:()Lio/grpc/internal/u1$b;` @kind static;
  #L38003a.  v0:= temp @kind object;
  #L38003c.  `@@io.grpc.internal.u1.e` @type ^`io.grpc.internal.u1$b` := v0 @kind object;
  #L380040.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.internal.u1` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lio/grpc/internal/u1;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L380054.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L38005a.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L38005e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L380064.  v1.`io.grpc.internal.u1.b` @type ^`java.util.Queue` := v0 @kind object;
  #L380068.  v0:= 0I;
  #L38006a.  v1.`io.grpc.internal.u1.c` @type ^`int` := v0;
  #L38006e.  v0:= "'executor' must not be null." @kind object;
  #L380072.  call temp:= `checkNotNull`(v2, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L380078.  v1.`io.grpc.internal.u1.a` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L38007c.  return @kind void;
}
procedure `int` `a`(`io.grpc.internal.u1` v0 @kind object) @signature `Lio/grpc/internal/u1;.a:(Lio/grpc/internal/u1;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L37ff90.  v0:= v0.`io.grpc.internal.u1.c` @type ^`int`;
  #L37ff94.  return v0;
}
procedure `int` `b`(`io.grpc.internal.u1` v0 @kind object, `int` v1 ) @signature `Lio/grpc/internal/u1;.b:(Lio/grpc/internal/u1;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L37ffa8.  v0.`io.grpc.internal.u1.c` @type ^`int` := v1;
  #L37ffac.  return v1;
}
procedure `io.grpc.internal.u1$b` `c`() @signature `Lio/grpc/internal/u1;.c:()Lio/grpc/internal/u1$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37ffc0.  v0:= 0I;
  #L37ffc2.  v1:= new `io.grpc.internal.u1$c`;
  #L37ffc6.  v2:= constclass @type ^`io.grpc.internal.u1` @kind object;
  #L37ffca.  v3:= "c" @kind object;
  #L37ffce.  call temp:= `newUpdater`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L37ffd4.  v2:= temp @kind object;
  #L37ffd6.  call `<init>`(v1, v2, v0) @signature `Lio/grpc/internal/u1$c;.<init>:(Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;Lio/grpc/internal/u1$a;)V` @kind direct;
  #L37ffdc.  goto L37fffc;
  #L37ffde.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L37ffe0.  v2:= `@@io.grpc.internal.u1.d` @type ^`java.util.logging.Logger` @kind object;
  #L37ffe4.  v3:= `@@java.util.logging.Level.SEVERE` @type ^`java.util.logging.Level` @kind object;
  #L37ffe8.  v4:= "FieldUpdaterAtomicHelper failed" @kind object;
  #L37ffec.  call `log`(v2, v3, v4, v1) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L37fff2.  v1:= new `io.grpc.internal.u1$d`;
  #L37fff6.  call `<init>`(v1, v0) @signature `Lio/grpc/internal/u1$d;.<init>:(Lio/grpc/internal/u1$a;)V` @kind direct;
  #L37fffc.  return v1 @kind object;
  catch `java.lang.Throwable` @[L37ffc2..L37ffdc] goto L37ffde;
}
procedure `void` `d`(`io.grpc.internal.u1` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/grpc/internal/u1;.d:(Ljava/lang/Runnable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L380184.  v0:= `@@io.grpc.internal.u1.e` @type ^`io.grpc.internal.u1$b` @kind object;
  #L380188.  v1:= 0I;
  #L38018a.  v2:= -1I;
  #L38018c.  call temp:= `a`(v0, v3, v1, v2) @signature `Lio/grpc/internal/u1$b;.a:(Lio/grpc/internal/u1;II)Z` @kind virtual;
  #L380192.  v0:= temp;
  #L380194.  if v0 == 0 then goto L3801c0;
  #L380198.  v0:= v3.`io.grpc.internal.u1.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L38019c.  call `execute`(v0, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3801a2.  goto L3801c0;
  #L3801a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3801a6.  if v4 == 0 then goto L3801b4;
  #L3801aa.  v2:= v3.`io.grpc.internal.u1.b` @type ^`java.util.Queue` @kind object;
  #L3801ae.  call temp:= `remove`(v2, v4) @signature `Ljava/util/Queue;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3801b4.  v4:= `@@io.grpc.internal.u1.e` @type ^`io.grpc.internal.u1$b` @kind object;
  #L3801b8.  call `b`(v4, v3, v1) @signature `Lio/grpc/internal/u1$b;.b:(Lio/grpc/internal/u1;I)V` @kind virtual;
  #L3801be.  throw v0;
  #L3801c0.  return @kind void;
  catch `java.lang.Throwable` @[L380198..L3801a2] goto L3801a4;
}
procedure `void` `execute`(`io.grpc.internal.u1` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/grpc/internal/u1;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L380090.  v0:= v2.`io.grpc.internal.u1.b` @type ^`java.util.Queue` @kind object;
  #L380094.  v1:= "'r' must not be null." @kind object;
  #L380098.  call temp:= `checkNotNull`(v3, v1) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L38009e.  v1:= temp @kind object;
  #L3800a0.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L3800a4.  call temp:= `add`(v0, v1) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3800aa.  call `d`(v2, v3) @signature `Lio/grpc/internal/u1;.d:(Ljava/lang/Runnable;)V` @kind direct;
  #L3800b0.  return @kind void;
}
procedure `void` `run`(`io.grpc.internal.u1` v8 @kind this) @signature `Lio/grpc/internal/u1;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3800c4.  v0:= 0I;
  #L3800c6.  v1:= v8.`io.grpc.internal.u1.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3800ca.  v2:= v8.`io.grpc.internal.u1.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3800ce.  if v1 != v2 then goto L380122;
  #L3800d2.  v2:= v8.`io.grpc.internal.u1.b` @type ^`java.util.Queue` @kind object;
  #L3800d6.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3800dc.  v2:= temp @kind object;
  #L3800de.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L3800e2.  if v2 == 0 then goto L380122;
  #L3800e6.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3800ec.  goto L3800ca;
  #L3800ee.  v3:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L3800f0.  v4:= `@@io.grpc.internal.u1.d` @type ^`java.util.logging.Logger` @kind object;
  #L3800f4.  v5:= `@@java.util.logging.Level.SEVERE` @type ^`java.util.logging.Level` @kind object;
  #L3800f8.  v6:= new `java.lang.StringBuilder`;
  #L3800fc.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L380102.  v7:= "Exception while executing runnable " @kind object;
  #L380106.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38010c.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L380112.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L380118.  v2:= temp @kind object;
  #L38011a.  call `log`(v4, v5, v2, v3) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L380120.  goto L3800ca;
  #L380122.  v1:= `@@io.grpc.internal.u1.e` @type ^`io.grpc.internal.u1$b` @kind object;
  #L380126.  call `b`(v1, v8, v0) @signature `Lio/grpc/internal/u1$b;.b:(Lio/grpc/internal/u1;I)V` @kind virtual;
  #L38012c.  v0:= v8.`io.grpc.internal.u1.b` @type ^`java.util.Queue` @kind object;
  #L380130.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L380136.  v0:= temp;
  #L380138.  if v0 != 0 then goto L380144;
  #L38013c.  v0:= 0I;
  #L38013e.  call `d`(v8, v0) @signature `Lio/grpc/internal/u1;.d:(Ljava/lang/Runnable;)V` @kind direct;
  #L380144.  return @kind void;
  #L380146.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L380148.  v2:= `@@io.grpc.internal.u1.e` @type ^`io.grpc.internal.u1$b` @kind object;
  #L38014c.  call `b`(v2, v8, v0) @signature `Lio/grpc/internal/u1$b;.b:(Lio/grpc/internal/u1;I)V` @kind virtual;
  #L380152.  throw v1;
  catch `java.lang.Throwable` @[L3800c6..L3800e2] goto L380146;
  catch `java.lang.RuntimeException` @[L3800e6..L3800ec] goto L3800ee;
  catch `java.lang.Throwable` @[L3800e6..L3800ec] goto L380146;
  catch `java.lang.Throwable` @[L3800f0..L380120] goto L380146;
}
