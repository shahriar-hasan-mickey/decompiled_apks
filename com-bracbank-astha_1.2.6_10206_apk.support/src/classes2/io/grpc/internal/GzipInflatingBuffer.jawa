record `io.grpc.internal.GzipInflatingBuffer` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `io.grpc.internal.r` `io.grpc.internal.GzipInflatingBuffer.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `io.grpc.internal.GzipInflatingBuffer.b` @AccessFlag PRIVATE_FINAL;
  `io.grpc.internal.GzipInflatingBuffer$b` `io.grpc.internal.GzipInflatingBuffer.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `io.grpc.internal.GzipInflatingBuffer.d` @AccessFlag PRIVATE_FINAL;
  `int` `io.grpc.internal.GzipInflatingBuffer.e` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.f` @AccessFlag PRIVATE;
  `java.util.zip.Inflater` `io.grpc.internal.GzipInflatingBuffer.g` @AccessFlag PRIVATE;
  `io.grpc.internal.GzipInflatingBuffer$State` `io.grpc.internal.GzipInflatingBuffer.h` @AccessFlag PRIVATE;
  `boolean` `io.grpc.internal.GzipInflatingBuffer.i` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.j` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.k` @AccessFlag PRIVATE;
  `long` `io.grpc.internal.GzipInflatingBuffer.l` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.m` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.n` @AccessFlag PRIVATE;
  `boolean` `io.grpc.internal.GzipInflatingBuffer.o` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L370ce8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L370cee.  v0:= new `io.grpc.internal.r`;
  #L370cf2.  call `<init>`(v0) @signature `Lio/grpc/internal/r;.<init>:()V` @kind direct;
  #L370cf8.  v2.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` := v0 @kind object;
  #L370cfc.  v0:= new `java.util.zip.CRC32`;
  #L370d00.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L370d06.  v2.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L370d0a.  v0:= new `io.grpc.internal.GzipInflatingBuffer$b`;
  #L370d0e.  v1:= 0I;
  #L370d10.  call `<init>`(v0, v2, v1) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.<init>:(Lio/grpc/internal/GzipInflatingBuffer;Lio/grpc/internal/GzipInflatingBuffer$a;)V` @kind direct;
  #L370d16.  v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` := v0 @kind object;
  #L370d1a.  v0:= 512I;
  #L370d1e.  v0:= new `byte`[v0];
  #L370d22.  v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`byte`[] := v0 @kind object;
  #L370d26.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.a` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370d2a.  v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370d2e.  v0:= 0I;
  #L370d30.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` := v0 @kind boolean;
  #L370d34.  v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int` := v0;
  #L370d38.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v0;
  #L370d3c.  v0:= 1I;
  #L370d3e.  v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`boolean` := v0 @kind boolean;
  #L370d42.  return @kind void;
}
procedure `byte`[] `K`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.K:(Lio/grpc/internal/GzipInflatingBuffer;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L370990.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`byte`[] @kind object;
  #L370994.  return v0 @kind object;
}
procedure `io.grpc.internal.r` `R`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.R:(Lio/grpc/internal/GzipInflatingBuffer;)Lio/grpc/internal/r;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L370cb8.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` @kind object;
  #L370cbc.  return v0 @kind object;
}
procedure `java.util.zip.CRC32` `T`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.T:(Lio/grpc/internal/GzipInflatingBuffer;)Ljava/util/zip/CRC32;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L370cd0.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L370cd4.  return v0 @kind object;
}
procedure `int` `U`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind object, `int` v2 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.U:(Lio/grpc/internal/GzipInflatingBuffer;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3709f4.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int`;
  #L3709f8.  v0:= v0 + v2 @kind int;
  #L3709fa.  v1.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int` := v0;
  #L3709fe.  return v0;
}
procedure `boolean` `W`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.W:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37052c.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370530.  v1:= 1I;
  #L370532.  v2:= 0I;
  #L370534.  if v0 == 0 then goto L37053c;
  #L370538.  v0:= 1I;
  #L37053a.  goto L37053e;
  #L37053c.  v0:= 0I;
  #L37053e.  v3:= "inflater is null" @kind object;
  #L370542.  call `checkState`(v0, v3) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370548.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L37054c.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L370550.  if v0 != v3 then goto L370558;
  #L370554.  v0:= 1I;
  #L370556.  goto L37055a;
  #L370558.  v0:= 0I;
  #L37055a.  v3:= "inflaterInput has unconsumed bytes" @kind object;
  #L37055e.  call `checkState`(v0, v3) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370564.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` @kind object;
  #L370568.  call temp:= `d`(v0) @signature `Lio/grpc/internal/r;.d:()I` @kind virtual;
  #L37056e.  v0:= temp;
  #L370570.  v3:= 512I;
  #L370574.  call temp:= `min`(v0, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L37057a.  v0:= temp;
  #L37057c.  if v0 != 0 then goto L370582;
  #L370580.  return v2;
  #L370582.  v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int` := v2;
  #L370586.  v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int` := v0;
  #L37058a.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` @kind object;
  #L37058e.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`byte`[] @kind object;
  #L370592.  call `x`(v3, v4, v2, v0) @signature `Lio/grpc/internal/r;.x:([BII)V` @kind virtual;
  #L370598.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L37059c.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`byte`[] @kind object;
  #L3705a0.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L3705a4.  call `setInput`(v2, v3, v4, v0) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L3705aa.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3705ae.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L3705b2.  return v1;
}
procedure `int` `a0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.a0:([BII)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L370a48.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370a4c.  if v0 == 0 then goto L370a54;
  #L370a50.  v0:= 1I;
  #L370a52.  goto L370a56;
  #L370a54.  v0:= 0I;
  #L370a56.  v1:= "inflater is null" @kind object;
  #L370a5a.  call `checkState`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370a60.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370a64.  call temp:= `getTotalIn`(v0) @signature `Ljava/util/zip/Inflater;.getTotalIn:()I` @kind virtual;
  #L370a6a.  v0:= temp;
  #L370a6c.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370a70.  call temp:= `inflate`(v1, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L370a76.  v5:= temp;
  #L370a78.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370a7c.  call temp:= `getTotalIn`(v1) @signature `Ljava/util/zip/Inflater;.getTotalIn:()I` @kind virtual;
  #L370a82.  v1:= temp;
  #L370a84.  v1:= v1 - v0 @kind int;
  #L370a86.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int`;
  #L370a8a.  v0:= v0 + v1 @kind int;
  #L370a8c.  v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int` := v0;
  #L370a90.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int`;
  #L370a94.  v0:= v0 + v1 @kind int;
  #L370a96.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v0;
  #L370a9a.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L370a9e.  v0:= v0 + v1 @kind int;
  #L370aa0.  v2.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int` := v0;
  #L370aa4.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L370aa8.  call `update`(v0, v3, v4, v5) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L370aae.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370ab2.  call temp:= `finished`(v3) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L370ab8.  v3:= temp;
  #L370aba.  if v3 == 0 then goto L370ae4;
  #L370abe.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370ac2.  call temp:= `getBytesWritten`(v3) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L370ac8.  v3:= temp @kind wide;
  #L370aca.  v0:= 4294967295L;
  #L370ad4.  v3:= v3 ^& v0 @kind long;
  #L370ad6.  v2.`io.grpc.internal.GzipInflatingBuffer.l` @type ^`long` := v3 @kind wide;
  #L370ada.  v3:= `@@io.grpc.internal.GzipInflatingBuffer$State.j` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370ade.  v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v3 @kind object;
  #L370ae2.  goto L370afc;
  #L370ae4.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370ae8.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L370aee.  v3:= temp;
  #L370af0.  if v3 == 0 then goto L370afc;
  #L370af4.  v3:= `@@io.grpc.internal.GzipInflatingBuffer$State.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370af8.  v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v3 @kind object;
  #L370afc.  return v5;
  #L370afe.  v3:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L370b00.  v4:= new `java.util.zip.DataFormatException`;
  #L370b04.  v5:= new `java.lang.StringBuilder`;
  #L370b08.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L370b0e.  v0:= "Inflater data format exception: " @kind object;
  #L370b12.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370b18.  call temp:= `getMessage`(v3) @signature `Ljava/util/zip/DataFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L370b1e.  v3:= temp @kind object;
  #L370b20.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370b26.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L370b2c.  v3:= temp @kind object;
  #L370b2e.  call `<init>`(v4, v3) @signature `Ljava/util/zip/DataFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L370b34.  throw v4;
  catch `java.util.zip.DataFormatException` @[L370a60..L370afc] goto L370afe;
}
procedure `boolean` `c0`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.c0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L370608.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L37060c.  v1:= 1I;
  #L37060e.  if v0 != 0 then goto L370622;
  #L370612.  v0:= new `java.util.zip.Inflater`;
  #L370616.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L37061c.  v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L370620.  goto L370628;
  #L370622.  call `reset`(v0) @signature `Ljava/util/zip/Inflater;.reset:()V` @kind virtual;
  #L370628.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L37062c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L370632.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L370636.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L37063a.  v0:= v0 - v2 @kind int;
  #L37063c.  if v0 <= 0 then goto L370658;
  #L370640.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370644.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`byte`[] @kind object;
  #L370648.  call `setInput`(v3, v4, v2, v0) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L37064e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370652.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370656.  goto L370660;
  #L370658.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L37065c.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370660.  return v1;
}
procedure `boolean` `e0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.e0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37069c.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3706a0.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3706a6.  v0:= temp;
  #L3706a8.  v1:= 10I;
  #L3706ac.  if v0 >= v1 then goto L3706b4;
  #L3706b0.  v0:= 0I;
  #L3706b2.  return v0;
  #L3706b4.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3706b8.  call temp:= `e`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.e:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3706be.  v0:= temp;
  #L3706c0.  v1:= 35615I;
  #L3706c6.  if v0 != v1 then goto L370716;
  #L3706ca.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3706ce.  call temp:= `f`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.f:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3706d4.  v0:= temp;
  #L3706d6.  v1:= 8I;
  #L3706da.  if v0 != v1 then goto L370706;
  #L3706de.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3706e2.  call temp:= `f`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.f:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3706e8.  v0:= temp;
  #L3706ea.  v2.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`int` := v0;
  #L3706ee.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3706f2.  v1:= 6I;
  #L3706f4.  call `a`(v0, v1) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.a:(Lio/grpc/internal/GzipInflatingBuffer$b;I)V` @kind static;
  #L3706fa.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.b` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3706fe.  v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370702.  v0:= 1I;
  #L370704.  return v0;
  #L370706.  v0:= new `java.util.zip.ZipException`;
  #L37070a.  v1:= "Unsupported compression method" @kind object;
  #L37070e.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L370714.  throw v0;
  #L370716.  v0:= new `java.util.zip.ZipException`;
  #L37071a.  v1:= "Not in GZIP format" @kind object;
  #L37071e.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L370724.  throw v0;
}
procedure `boolean` `f0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.f0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L370738.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`int`;
  #L37073c.  v1:= 16I;
  #L370740.  v0:= v0 ^& v1 @kind int;
  #L370742.  v2:= 1I;
  #L370744.  if v0 == v1 then goto L370752;
  #L370748.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.f` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L37074c.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370750.  return v2;
  #L370752.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370756.  call temp:= `b`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.b:(Lio/grpc/internal/GzipInflatingBuffer$b;)Z` @kind static;
  #L37075c.  v0:= temp;
  #L37075e.  if v0 != 0 then goto L370766;
  #L370762.  v0:= 0I;
  #L370764.  return v0;
  #L370766.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.f` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L37076a.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L37076e.  return v2;
}
procedure `int` `g`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.g:(Lio/grpc/internal/GzipInflatingBuffer;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3709a8.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L3709ac.  return v0;
}
procedure `boolean` `g0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.g0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L370780.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`int`;
  #L370784.  v1:= 2I;
  #L370786.  v0:= v0 ^& v1 @kind int;
  #L370788.  v2:= 1I;
  #L37078a.  if v0 == v1 then goto L370798;
  #L37078e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.g` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370792.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370796.  return v2;
  #L370798.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L37079c.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3707a2.  v0:= temp;
  #L3707a4.  if v0 >= v1 then goto L3707ac;
  #L3707a8.  v0:= 0I;
  #L3707aa.  return v0;
  #L3707ac.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L3707b0.  call temp:= `getValue`(v0) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L3707b6.  v0:= temp @kind wide;
  #L3707b8.  v1:= (`int`) v0 @kind l2i;
  #L3707ba.  v0:= 65535I;
  #L3707c0.  v0:= v0 ^& v1 @kind int;
  #L3707c2.  v1:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3707c6.  call temp:= `e`(v1) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.e:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3707cc.  v1:= temp;
  #L3707ce.  if v0 != v1 then goto L3707dc;
  #L3707d2.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.g` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3707d6.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L3707da.  return v2;
  #L3707dc.  v0:= new `java.util.zip.ZipException`;
  #L3707e0.  v1:= "Corrupt GZIP header" @kind object;
  #L3707e4.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3707ea.  throw v0;
}
procedure `int` `h`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.h:(Lio/grpc/internal/GzipInflatingBuffer;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3709c0.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L3709c4.  return v0;
}
procedure `boolean` `h0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.h0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3707fc.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370800.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L370806.  v0:= temp;
  #L370808.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int`;
  #L37080c.  if v0 >= v1 then goto L370814;
  #L370810.  v0:= 0I;
  #L370812.  return v0;
  #L370814.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370818.  call `a`(v0, v1) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.a:(Lio/grpc/internal/GzipInflatingBuffer$b;I)V` @kind static;
  #L37081e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.d` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370822.  v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370826.  v0:= 1I;
  #L370828.  return v0;
}
procedure `boolean` `i0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.i0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37083c.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`int`;
  #L370840.  v1:= 4I;
  #L370842.  v0:= v0 ^& v1 @kind int;
  #L370844.  v2:= 1I;
  #L370846.  if v0 == v1 then goto L370854;
  #L37084a.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.d` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L37084e.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370852.  return v2;
  #L370854.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370858.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L37085e.  v0:= temp;
  #L370860.  v1:= 2I;
  #L370862.  if v0 >= v1 then goto L37086a;
  #L370866.  v0:= 0I;
  #L370868.  return v0;
  #L37086a.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L37086e.  call temp:= `e`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.e:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L370874.  v0:= temp;
  #L370876.  v3.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int` := v0;
  #L37087a.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.c` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L37087e.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L370882.  return v2;
}
procedure `boolean` `j0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.j0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L370894.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`int`;
  #L370898.  v1:= 8I;
  #L37089c.  v0:= v0 ^& v1 @kind int;
  #L37089e.  v2:= 1I;
  #L3708a0.  if v0 == v1 then goto L3708ae;
  #L3708a4.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.e` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3708a8.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L3708ac.  return v2;
  #L3708ae.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3708b2.  call temp:= `b`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.b:(Lio/grpc/internal/GzipInflatingBuffer$b;)Z` @kind static;
  #L3708b8.  v0:= temp;
  #L3708ba.  if v0 != 0 then goto L3708c2;
  #L3708be.  v0:= 0I;
  #L3708c0.  return v0;
  #L3708c2.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.e` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3708c6.  v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L3708ca.  return v2;
}
procedure `boolean` `k0`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.k0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3708dc.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L3708e0.  if v0 == 0 then goto L370908;
  #L3708e4.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3708e8.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3708ee.  v0:= temp;
  #L3708f0.  v1:= 18I;
  #L3708f4.  if v0 > v1 then goto L370908;
  #L3708f8.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L3708fc.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L370902.  v0:= 0I;
  #L370904.  v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L370908.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L37090c.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L370912.  v0:= temp;
  #L370914.  v1:= 8I;
  #L370918.  if v0 >= v1 then goto L370920;
  #L37091c.  v0:= 0I;
  #L37091e.  return v0;
  #L370920.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L370924.  call temp:= `getValue`(v0) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L37092a.  v0:= temp @kind wide;
  #L37092c.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370930.  call temp:= `c`(v2) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.c:(Lio/grpc/internal/GzipInflatingBuffer$b;)J` @kind static;
  #L370936.  v2:= temp @kind wide;
  #L370938.  v4:= lcmp(v0, v2);
  #L37093c.  if v4 != 0 then goto L37096e;
  #L370940.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.l` @type ^`long` @kind wide;
  #L370944.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370948.  call temp:= `c`(v2) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.c:(Lio/grpc/internal/GzipInflatingBuffer$b;)J` @kind static;
  #L37094e.  v2:= temp @kind wide;
  #L370950.  v4:= lcmp(v0, v2);
  #L370954.  if v4 != 0 then goto L37096e;
  #L370958.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`java.util.zip.CRC32` @kind object;
  #L37095c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L370962.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.a` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370966.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L37096a.  v0:= 1I;
  #L37096c.  return v0;
  #L37096e.  v0:= new `java.util.zip.ZipException`;
  #L370972.  v1:= "Corrupt GZIP trailer" @kind object;
  #L370976.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37097c.  throw v0;
}
procedure `int` `s`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind object, `int` v2 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.s:(Lio/grpc/internal/GzipInflatingBuffer;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3709d8.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int`;
  #L3709dc.  v0:= v0 + v2 @kind int;
  #L3709de.  v1.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`int` := v0;
  #L3709e2.  return v0;
}
procedure `void` `V`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this, `io.grpc.internal.m1` v3 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.V:(Lio/grpc/internal/m1;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L370d54.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` @kind boolean;
  #L370d58.  v0:= v0 ^~ 1;
  #L370d5c.  v1:= "GzipInflatingBuffer is closed" @kind object;
  #L370d60.  call `checkState`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370d66.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` @kind object;
  #L370d6a.  call `h`(v0, v3) @signature `Lio/grpc/internal/r;.h:(Lio/grpc/internal/m1;)V` @kind virtual;
  #L370d70.  v3:= 0I;
  #L370d72.  v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`boolean` := v3 @kind boolean;
  #L370d76.  return @kind void;
}
procedure `int` `X`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.X:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L370a10.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int`;
  #L370a14.  v1:= 0I;
  #L370a16.  v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`int` := v1;
  #L370a1a.  return v0;
}
procedure `int` `Y`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.Y:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L370a2c.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int`;
  #L370a30.  v1:= 0I;
  #L370a32.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v1;
  #L370a36.  return v0;
}
procedure `boolean` `Z`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.Z:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3705c4.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` @kind boolean;
  #L3705c8.  v1:= 1I;
  #L3705ca.  v0:= v0 ^~ v1 @kind int;
  #L3705cc.  v2:= "GzipInflatingBuffer is closed" @kind object;
  #L3705d0.  call `checkState`(v0, v2) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L3705d6.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L3705da.  call temp:= `d`(v0) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L3705e0.  v0:= temp;
  #L3705e2.  if v0 != 0 then goto L3705f6;
  #L3705e6.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3705ea.  v2:= `@@io.grpc.internal.GzipInflatingBuffer$State.a` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L3705ee.  if v0 == v2 then goto L3705f4;
  #L3705f2.  goto L3705f6;
  #L3705f4.  v1:= 0I;
  #L3705f6.  return v1;
}
procedure `int` `b0`(`io.grpc.internal.GzipInflatingBuffer` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.b0:([BII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L370b58.  v0:= v6.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` @kind boolean;
  #L370b5c.  v1:= 1I;
  #L370b5e.  v0:= v0 ^~ v1 @kind int;
  #L370b60.  v2:= "GzipInflatingBuffer is closed" @kind object;
  #L370b64.  call `checkState`(v0, v2) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370b6a.  v0:= 0I;
  #L370b6c.  v2:= 1I;
  #L370b6e.  v3:= 0I;
  #L370b70.  if v2 == 0 then goto L370c4a;
  #L370b74.  v4:= v9 - v3 @kind int;
  #L370b78.  if v4 <= 0 then goto L370c4a;
  #L370b7c.  v2:= `@@io.grpc.internal.GzipInflatingBuffer$a.a` @type ^`int`[] @kind object;
  #L370b80.  v5:= v6.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370b84.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L370b8a.  v5:= temp;
  #L370b8c.  v2:= v2[v5];
  #L370b90.  goto L370c78;
  #L370b96.  v7:= new `java.lang.AssertionError`;
  #L370b9a.  v8:= new `java.lang.StringBuilder`;
  #L370b9e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L370ba4.  v9:= "Invalid state: " @kind object;
  #L370ba8.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370bae.  v9:= v6.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370bb2.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370bb8.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L370bbe.  v8:= temp @kind object;
  #L370bc0.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L370bc6.  throw v7;
  #L370bc8.  call temp:= `k0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.k0:()Z` @kind direct;
  #L370bce.  v2:= temp;
  #L370bd0.  goto L370b70;
  #L370bd2.  call temp:= `W`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.W:()Z` @kind direct;
  #L370bd8.  v2:= temp;
  #L370bda.  goto L370b70;
  #L370bdc.  v2:= v8 + v3 @kind int;
  #L370be0.  call temp:= `a0`(v6, v7, v2, v4) @signature `Lio/grpc/internal/GzipInflatingBuffer;.a0:([BII)I` @kind direct;
  #L370be6.  v2:= temp;
  #L370be8.  v3:= v3 + v2 @kind int;
  #L370bea.  v2:= v6.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370bee.  v4:= `@@io.grpc.internal.GzipInflatingBuffer$State.j` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370bf2.  if v2 != v4 then goto L370c00;
  #L370bf6.  call temp:= `k0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.k0:()Z` @kind direct;
  #L370bfc.  v2:= temp;
  #L370bfe.  goto L370b70;
  #L370c00.  v2:= 1I;
  #L370c02.  goto L370b70;
  #L370c04.  call temp:= `c0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.c0:()Z` @kind direct;
  #L370c0a.  v2:= temp;
  #L370c0c.  goto L370b70;
  #L370c0e.  call temp:= `g0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.g0:()Z` @kind direct;
  #L370c14.  v2:= temp;
  #L370c16.  goto L370b70;
  #L370c18.  call temp:= `f0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.f0:()Z` @kind direct;
  #L370c1e.  v2:= temp;
  #L370c20.  goto L370b70;
  #L370c22.  call temp:= `j0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.j0:()Z` @kind direct;
  #L370c28.  v2:= temp;
  #L370c2a.  goto L370b70;
  #L370c2c.  call temp:= `h0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.h0:()Z` @kind direct;
  #L370c32.  v2:= temp;
  #L370c34.  goto L370b70;
  #L370c36.  call temp:= `i0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.i0:()Z` @kind direct;
  #L370c3c.  v2:= temp;
  #L370c3e.  goto L370b70;
  #L370c40.  call temp:= `e0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.e0:()Z` @kind direct;
  #L370c46.  v2:= temp;
  #L370c48.  goto L370b70;
  #L370c4a.  if v2 == 0 then goto L370c72;
  #L370c4e.  v7:= v6.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370c52.  v8:= `@@io.grpc.internal.GzipInflatingBuffer$State.a` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L370c56.  if v7 != v8 then goto L370c70;
  #L370c5a.  v7:= v6.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`io.grpc.internal.GzipInflatingBuffer$b` @kind object;
  #L370c5e.  call temp:= `d`(v7) @signature `Lio/grpc/internal/GzipInflatingBuffer$b;.d:(Lio/grpc/internal/GzipInflatingBuffer$b;)I` @kind static;
  #L370c64.  v7:= temp;
  #L370c66.  v8:= 10I;
  #L370c6a.  if v7 >= v8 then goto L370c70;
  #L370c6e.  goto L370c72;
  #L370c70.  v1:= 0I;
  #L370c72.  v6.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`boolean` := v1 @kind boolean;
  #L370c76.  return v3;
  #L370c78.  switch v2
                  | 1 => goto L370c40
                  | 2 => goto L370c36
                  | 3 => goto L370c2c
                  | 4 => goto L370c22
                  | 5 => goto L370c18
                  | 6 => goto L370c0e
                  | 7 => goto L370c04
                  | 8 => goto L370bdc
                  | 9 => goto L370bd2
                  | 10 => goto L370bc8
                  | else => goto L370b96;
}
procedure `void` `close`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L370d88.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` @kind boolean;
  #L370d8c.  if v0 != 0 then goto L370db4;
  #L370d90.  v0:= 1I;
  #L370d92.  v1.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` := v0 @kind boolean;
  #L370d96.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.a` @type ^`io.grpc.internal.r` @kind object;
  #L370d9a.  call `close`(v0) @signature `Lio/grpc/internal/r;.close:()V` @kind virtual;
  #L370da0.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` @kind object;
  #L370da4.  if v0 == 0 then goto L370db4;
  #L370da8.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L370dae.  v0:= 0I;
  #L370db0.  v1.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L370db4.  return @kind void;
}
procedure `boolean` `d0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.d0:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L370674.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`boolean` @kind boolean;
  #L370678.  v0:= v0 ^~ 1;
  #L37067c.  v1:= "GzipInflatingBuffer is closed" @kind object;
  #L370680.  call `checkState`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/Object;)V` @kind static;
  #L370686.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`boolean` @kind boolean;
  #L37068a.  return v0;
}
