record `io.grpc.internal.q1$u` @kind class @AccessFlag FINAL {
  `java.util.concurrent.atomic.AtomicLong` `io.grpc.internal.q1$u.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.grpc.internal.q1$u` v1 @kind this) @signature `Lio/grpc/internal/q1$u;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L37d6e8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37d6ee.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L37d6f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L37d6f8.  v1.`io.grpc.internal.q1$u.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L37d6fc.  return @kind void;
}
procedure `long` `a`(`io.grpc.internal.q1$u` v1 @kind this, `long` v2 ) @signature `Lio/grpc/internal/q1$u;.a:(J)J` @AccessFlag  {
    temp;
    v0;

  #L37d6c8.  v0:= v1.`io.grpc.internal.q1$u.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L37d6cc.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L37d6d2.  v2:= temp @kind wide;
  #L37d6d4.  return v2 @kind wide;
}
