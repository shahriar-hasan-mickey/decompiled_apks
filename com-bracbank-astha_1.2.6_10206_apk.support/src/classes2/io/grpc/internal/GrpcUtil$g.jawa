record `io.grpc.internal.GrpcUtil$g` @kind class @AccessFlag FINAL extends `io.grpc.i0$a` @kind interface {
}
procedure `void` `<init>`(`io.grpc.internal.GrpcUtil$g` v0 @kind this) @signature `Lio/grpc/internal/GrpcUtil$g;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36efd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36efda.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.internal.GrpcUtil$g` v0 @kind this, `io.grpc.internal.GrpcUtil$a` v1 @kind object) @signature `Lio/grpc/internal/GrpcUtil$g;.<init>:(Lio/grpc/internal/GrpcUtil$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L36efec.  call `<init>`(v0) @signature `Lio/grpc/internal/GrpcUtil$g;.<init>:()V` @kind direct;
  #L36eff2.  return @kind void;
}
procedure `byte`[] `a`(`io.grpc.internal.GrpcUtil$g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/grpc/internal/GrpcUtil$g;.a:(Ljava/lang/Object;)[B` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36ef98.  v1:= (`byte`[]) v1 @kind object;
  #L36ef9c.  call temp:= `d`(v0, v1) @signature `Lio/grpc/internal/GrpcUtil$g;.d:([B)[B` @kind virtual;
  #L36efa2.  v1:= temp @kind object;
  #L36efa4.  return v1 @kind object;
}
procedure `java.lang.Object` `b`(`io.grpc.internal.GrpcUtil$g` v0 @kind this, `byte`[] v1 @kind object) @signature `Lio/grpc/internal/GrpcUtil$g;.b:([B)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36efb8.  call temp:= `c`(v0, v1) @signature `Lio/grpc/internal/GrpcUtil$g;.c:([B)[B` @kind virtual;
  #L36efbe.  v1:= temp @kind object;
  #L36efc0.  return v1 @kind object;
}
procedure `byte`[] `c`(`io.grpc.internal.GrpcUtil$g` v0 @kind this, `byte`[] v1 @kind object) @signature `Lio/grpc/internal/GrpcUtil$g;.c:([B)[B` @AccessFlag PUBLIC {
    temp;

  #L36ef70.  return v1 @kind object;
}
procedure `byte`[] `d`(`io.grpc.internal.GrpcUtil$g` v0 @kind this, `byte`[] v1 @kind object) @signature `Lio/grpc/internal/GrpcUtil$g;.d:([B)[B` @AccessFlag PUBLIC {
    temp;

  #L36ef84.  return v1 @kind object;
}
