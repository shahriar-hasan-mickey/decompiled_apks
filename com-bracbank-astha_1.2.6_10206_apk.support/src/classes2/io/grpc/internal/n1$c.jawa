record `io.grpc.internal.n1$c` @kind class @AccessFlag  extends `io.grpc.internal.c` @kind class {
  `int` `io.grpc.internal.n1$c.a` @AccessFlag ;
  `int` `io.grpc.internal.n1$c.b` @AccessFlag FINAL;
  `byte`[] `io.grpc.internal.n1$c.c` @AccessFlag FINAL;
  `int` `io.grpc.internal.n1$c.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.grpc.internal.n1$c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/grpc/internal/n1$c;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L37c858.  v0:= length @variable v3;
  #L37c85a.  v1:= 0I;
  #L37c85c.  call `<init>`(v2, v3, v1, v0) @signature `Lio/grpc/internal/n1$c;.<init>:([BII)V` @kind direct;
  #L37c862.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.internal.n1$c` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lio/grpc/internal/n1$c;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37c874.  call `<init>`(v4) @signature `Lio/grpc/internal/c;.<init>:()V` @kind direct;
  #L37c87a.  v0:= -1I;
  #L37c87c.  v4.`io.grpc.internal.n1$c.d` @type ^`int` := v0;
  #L37c880.  v0:= 1I;
  #L37c882.  v1:= 0I;
  #L37c884.  if v6 < 0 then goto L37c88c;
  #L37c888.  v2:= 1I;
  #L37c88a.  goto L37c88e;
  #L37c88c.  v2:= 0I;
  #L37c88e.  v3:= "offset must be >= 0" @kind object;
  #L37c892.  call `checkArgument`(v2, v3) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L37c898.  if v7 < 0 then goto L37c8a0;
  #L37c89c.  v2:= 1I;
  #L37c89e.  goto L37c8a2;
  #L37c8a0.  v2:= 0I;
  #L37c8a2.  v3:= "length must be >= 0" @kind object;
  #L37c8a6.  call `checkArgument`(v2, v3) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L37c8ac.  v7:= v7 + v6 @kind int;
  #L37c8ae.  v2:= length @variable v5;
  #L37c8b0.  if v7 > v2 then goto L37c8b6;
  #L37c8b4.  goto L37c8b8;
  #L37c8b6.  v0:= 0I;
  #L37c8b8.  v1:= "offset + length exceeds array boundary" @kind object;
  #L37c8bc.  call `checkArgument`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L37c8c2.  v0:= "bytes" @kind object;
  #L37c8c6.  call temp:= `checkNotNull`(v5, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L37c8cc.  v5:= temp @kind object;
  #L37c8ce.  v5:= (`byte`[]) v5 @kind object;
  #L37c8d2.  v4.`io.grpc.internal.n1$c.c` @type ^`byte`[] := v5 @kind object;
  #L37c8d6.  v4.`io.grpc.internal.n1$c.a` @type ^`int` := v6;
  #L37c8da.  v4.`io.grpc.internal.n1$c.b` @type ^`int` := v7;
  #L37c8de.  return @kind void;
}
procedure `void` `C`(`io.grpc.internal.n1$c` v1 @kind this) @signature `Lio/grpc/internal/n1$c;.C:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37c8f0.  v0:= v1.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c8f4.  v1.`io.grpc.internal.n1$c.d` @type ^`int` := v0;
  #L37c8f8.  return @kind void;
}
procedure `void` `H`(`io.grpc.internal.n1$c` v2 @kind this, `java.io.OutputStream` v3 @kind object, `int` v4 ) @signature `Lio/grpc/internal/n1$c;.H:(Ljava/io/OutputStream;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c938.  call `g`(v2, v4) @signature `Lio/grpc/internal/c;.g:(I)V` @kind virtual;
  #L37c93e.  v0:= v2.`io.grpc.internal.n1$c.c` @type ^`byte`[] @kind object;
  #L37c942.  v1:= v2.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c946.  call `write`(v3, v0, v1, v4) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L37c94c.  v3:= v2.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c950.  v3:= v3 + v4 @kind int;
  #L37c952.  v2.`io.grpc.internal.n1$c.a` @type ^`int` := v3;
  #L37c956.  return @kind void;
}
procedure `void` `O`(`io.grpc.internal.n1$c` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lio/grpc/internal/n1$c;.O:(Ljava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37c968.  v0:= "dest" @kind object;
  #L37c96c.  call temp:= `checkNotNull`(v4, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L37c972.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L37c978.  v0:= temp;
  #L37c97a.  call `g`(v3, v0) @signature `Lio/grpc/internal/c;.g:(I)V` @kind virtual;
  #L37c980.  v1:= v3.`io.grpc.internal.n1$c.c` @type ^`byte`[] @kind object;
  #L37c984.  v2:= v3.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c988.  call temp:= `put`(v4, v1, v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L37c98e.  v4:= v3.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c992.  v4:= v4 + v0 @kind int;
  #L37c994.  v3.`io.grpc.internal.n1$c.a` @type ^`int` := v4;
  #L37c998.  return @kind void;
}
procedure `int` `d`(`io.grpc.internal.n1$c` v2 @kind this) @signature `Lio/grpc/internal/n1$c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c7ec.  v0:= v2.`io.grpc.internal.n1$c.b` @type ^`int`;
  #L37c7f0.  v1:= v2.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c7f4.  v0:= v0 - v1 @kind int;
  #L37c7f6.  return v0;
}
procedure `io.grpc.internal.n1$c` `h`(`io.grpc.internal.n1$c` v3 @kind this, `int` v4 ) @signature `Lio/grpc/internal/n1$c;.h:(I)Lio/grpc/internal/n1$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37c824.  call `g`(v3, v4) @signature `Lio/grpc/internal/c;.g:(I)V` @kind virtual;
  #L37c82a.  v0:= v3.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c82e.  v1:= v0 + v4 @kind int;
  #L37c832.  v3.`io.grpc.internal.n1$c.a` @type ^`int` := v1;
  #L37c836.  v1:= new `io.grpc.internal.n1$c`;
  #L37c83a.  v2:= v3.`io.grpc.internal.n1$c.c` @type ^`byte`[] @kind object;
  #L37c83e.  call `<init>`(v1, v2, v0, v4) @signature `Lio/grpc/internal/n1$c;.<init>:([BII)V` @kind direct;
  #L37c844.  return v1 @kind object;
}
procedure `io.grpc.internal.m1` `l`(`io.grpc.internal.n1$c` v0 @kind this, `int` v1 ) @signature `Lio/grpc/internal/n1$c;.l:(I)Lio/grpc/internal/m1;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L37c808.  call temp:= `h`(v0, v1) @signature `Lio/grpc/internal/n1$c;.h:(I)Lio/grpc/internal/n1$c;` @kind virtual;
  #L37c80e.  v1:= temp @kind object;
  #L37c810.  return v1 @kind object;
}
procedure `boolean` `markSupported`(`io.grpc.internal.n1$c` v1 @kind this) @signature `Lio/grpc/internal/n1$c;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37c7a4.  v0:= 1I;
  #L37c7a6.  return v0;
}
procedure `int` `readUnsignedByte`(`io.grpc.internal.n1$c` v3 @kind this) @signature `Lio/grpc/internal/n1$c;.readUnsignedByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37c7b8.  v0:= 1I;
  #L37c7ba.  call `g`(v3, v0) @signature `Lio/grpc/internal/c;.g:(I)V` @kind virtual;
  #L37c7c0.  v0:= v3.`io.grpc.internal.n1$c.c` @type ^`byte`[] @kind object;
  #L37c7c4.  v1:= v3.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c7c8.  v2:= v1 + 1;
  #L37c7cc.  v3.`io.grpc.internal.n1$c.a` @type ^`int` := v2;
  #L37c7d0.  v0:= v0[v1] @kind byte;
  #L37c7d4.  v0:= v0 ^& 255;
  #L37c7d8.  return v0;
}
procedure `void` `reset`(`io.grpc.internal.n1$c` v2 @kind this) @signature `Lio/grpc/internal/n1$c;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c9ac.  v0:= v2.`io.grpc.internal.n1$c.d` @type ^`int`;
  #L37c9b0.  v1:= -1I;
  #L37c9b2.  if v0 == v1 then goto L37c9bc;
  #L37c9b6.  v2.`io.grpc.internal.n1$c.a` @type ^`int` := v0;
  #L37c9ba.  return @kind void;
  #L37c9bc.  v0:= new `java.nio.InvalidMarkException`;
  #L37c9c0.  call `<init>`(v0) @signature `Ljava/nio/InvalidMarkException;.<init>:()V` @kind direct;
  #L37c9c6.  throw v0;
}
procedure `void` `skipBytes`(`io.grpc.internal.n1$c` v1 @kind this, `int` v2 ) @signature `Lio/grpc/internal/n1$c;.skipBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37c9d8.  call `g`(v1, v2) @signature `Lio/grpc/internal/c;.g:(I)V` @kind virtual;
  #L37c9de.  v0:= v1.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c9e2.  v0:= v0 + v2 @kind int;
  #L37c9e4.  v1.`io.grpc.internal.n1$c.a` @type ^`int` := v0;
  #L37c9e8.  return @kind void;
}
procedure `void` `x`(`io.grpc.internal.n1$c` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/grpc/internal/n1$c;.x:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c90c.  v0:= v2.`io.grpc.internal.n1$c.c` @type ^`byte`[] @kind object;
  #L37c910.  v1:= v2.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c914.  call `arraycopy`(v0, v1, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L37c91a.  v3:= v2.`io.grpc.internal.n1$c.a` @type ^`int`;
  #L37c91e.  v3:= v3 + v5 @kind int;
  #L37c920.  v2.`io.grpc.internal.n1$c.a` @type ^`int` := v3;
  #L37c924.  return @kind void;
}
