record `io.grpc.internal.v0` @kind class @AccessFlag PUBLIC {
}
global `long` `@@io.grpc.internal.v0.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/internal/v0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L374364.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L374368.  v1:= 1L;
  #L37436c.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L374372.  v0:= temp @kind wide;
  #L374374.  `@@io.grpc.internal.v0.a` @type ^`long` := v0 @kind wide;
  #L374378.  return @kind void;
}
procedure `java.util.List` `a`(`java.util.List` v6 @kind object) @signature `Lio/grpc/internal/v0;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L373ed0.  v0:= 0I;
  #L373ed2.  v1:= 0I;
  #L373ed4.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L373eda.  v2:= temp;
  #L373edc.  if v1 >= v2 then goto L373f38;
  #L373ee0.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L373ee6.  v2:= temp @kind object;
  #L373ee8.  v2:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L373eec.  if v2 == 0 then goto L373ef6;
  #L373ef0.  v1:= v1 + 1;
  #L373ef4.  goto L373ed4;
  #L373ef6.  v2:= new `java.lang.ClassCastException`;
  #L373efa.  v3:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L373efe.  v4:= 3I;
  #L373f00.  v4:= new `java.lang.Object`[v4];
  #L373f04.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L373f0a.  v5:= temp @kind object;
  #L373f0c.  v4[v0]:= v5 @kind object;
  #L373f10.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L373f16.  v0:= temp @kind object;
  #L373f18.  v1:= 1I;
  #L373f1a.  v4[v1]:= v0 @kind object;
  #L373f1e.  v0:= 2I;
  #L373f20.  v4[v0]:= v6 @kind object;
  #L373f24.  v6:= "value %s for idx %d in %s is not object" @kind object;
  #L373f28.  call temp:= `format`(v3, v6, v4) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373f2e.  v6:= temp @kind object;
  #L373f30.  call `<init>`(v2, v6) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373f36.  throw v2;
  #L373f38.  return v6 @kind object;
}
procedure `java.util.List` `b`(`java.util.List` v6 @kind object) @signature `Lio/grpc/internal/v0;.b:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L373f4c.  v0:= 0I;
  #L373f4e.  v1:= 0I;
  #L373f50.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L373f56.  v2:= temp;
  #L373f58.  if v1 >= v2 then goto L373fb4;
  #L373f5c.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L373f62.  v2:= temp @kind object;
  #L373f64.  v2:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L373f68.  if v2 == 0 then goto L373f72;
  #L373f6c.  v1:= v1 + 1;
  #L373f70.  goto L373f50;
  #L373f72.  v2:= new `java.lang.ClassCastException`;
  #L373f76.  v3:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L373f7a.  v4:= 3I;
  #L373f7c.  v4:= new `java.lang.Object`[v4];
  #L373f80.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L373f86.  v5:= temp @kind object;
  #L373f88.  v4[v0]:= v5 @kind object;
  #L373f8c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L373f92.  v0:= temp @kind object;
  #L373f94.  v1:= 1I;
  #L373f96.  v4[v1]:= v0 @kind object;
  #L373f9a.  v0:= 2I;
  #L373f9c.  v4[v0]:= v6 @kind object;
  #L373fa0.  v6:= "value '%s' for idx %d in '%s' is not string" @kind object;
  #L373fa4.  call temp:= `format`(v3, v6, v4) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373faa.  v6:= temp @kind object;
  #L373fac.  call `<init>`(v2, v6) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373fb2.  throw v2;
  #L373fb4.  return v6 @kind object;
}
procedure `boolean` `c`(`long` v6 , `int` v8 ) @signature `Lio/grpc/internal/v0;.c:(JI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L373b08.  v0:= 0I;
  #L373b0a.  v1:= -315576000000L;
  #L373b14.  v3:= lcmp(v6, v1);
  #L373b18.  if v3 < 0 then goto L373b6c;
  #L373b1c.  v1:= 315576000000L;
  #L373b26.  v3:= lcmp(v6, v1);
  #L373b2a.  if v3 <= 0 then goto L373b30;
  #L373b2e.  goto L373b6c;
  #L373b30.  v1:= (`long`) v8 @kind i2l;
  #L373b32.  v3:= -999999999L;
  #L373b38.  v5:= lcmp(v1, v3);
  #L373b3c.  if v5 < 0 then goto L373b6c;
  #L373b40.  v3:= `@@io.grpc.internal.v0.a` @type ^`long` @kind wide;
  #L373b44.  v5:= lcmp(v1, v3);
  #L373b48.  if v5 < 0 then goto L373b4e;
  #L373b4c.  goto L373b6c;
  #L373b4e.  v1:= 0L;
  #L373b52.  v3:= lcmp(v6, v1);
  #L373b56.  if v3 < 0 then goto L373b5e;
  #L373b5a.  if v8 >= 0 then goto L373b68;
  #L373b5e.  if v3 > 0 then goto L373b6c;
  #L373b62.  if v8 <= 0 then goto L373b68;
  #L373b66.  goto L373b6c;
  #L373b68.  v6:= 1I;
  #L373b6a.  return v6;
  #L373b6c.  return v0;
}
procedure `java.lang.Boolean` `d`(`java.util.Map` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lio/grpc/internal/v0;.d:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Boolean;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L373bf4.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L373bfa.  v0:= temp;
  #L373bfc.  if v0 != 0 then goto L373c04;
  #L373c00.  v4:= 0I;
  #L373c02.  return v4 @kind object;
  #L373c04.  call temp:= `get`(v4, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L373c0a.  v0:= temp @kind object;
  #L373c0c.  v1:= instanceof @variable v0 @type ^`java.lang.Boolean` @kind boolean;
  #L373c10.  if v1 == 0 then goto L373c1a;
  #L373c14.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L373c18.  return v0 @kind object;
  #L373c1a.  v1:= new `java.lang.ClassCastException`;
  #L373c1e.  v2:= 3I;
  #L373c20.  v2:= new `java.lang.Object`[v2];
  #L373c24.  v3:= 0I;
  #L373c26.  v2[v3]:= v0 @kind object;
  #L373c2a.  v0:= 1I;
  #L373c2c.  v2[v0]:= v5 @kind object;
  #L373c30.  v5:= 2I;
  #L373c32.  v2[v5]:= v4 @kind object;
  #L373c36.  v4:= "value '%s' for key '%s' in '%s' is not Boolean" @kind object;
  #L373c3a.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373c40.  v4:= temp @kind object;
  #L373c42.  call `<init>`(v1, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373c48.  throw v1;
}
procedure `java.util.List` `e`(`java.util.Map` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lio/grpc/internal/v0;.e:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L373fc8.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L373fce.  v0:= temp;
  #L373fd0.  if v0 != 0 then goto L373fd8;
  #L373fd4.  v4:= 0I;
  #L373fd6.  return v4 @kind object;
  #L373fd8.  call temp:= `get`(v4, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L373fde.  v0:= temp @kind object;
  #L373fe0.  v1:= instanceof @variable v0 @type ^`java.util.List` @kind boolean;
  #L373fe4.  if v1 == 0 then goto L373fee;
  #L373fe8.  v0:= (`java.util.List`) v0 @kind object;
  #L373fec.  return v0 @kind object;
  #L373fee.  v1:= new `java.lang.ClassCastException`;
  #L373ff2.  v2:= 3I;
  #L373ff4.  v2:= new `java.lang.Object`[v2];
  #L373ff8.  v3:= 0I;
  #L373ffa.  v2[v3]:= v0 @kind object;
  #L373ffe.  v0:= 1I;
  #L374000.  v2[v0]:= v5 @kind object;
  #L374004.  v5:= 2I;
  #L374006.  v2[v5]:= v4 @kind object;
  #L37400a.  v4:= "value '%s' for key '%s' in '%s' is not List" @kind object;
  #L37400e.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L374014.  v4:= temp @kind object;
  #L374016.  call `<init>`(v1, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37401c.  throw v1;
}
procedure `java.util.List` `f`(`java.util.Map` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/grpc/internal/v0;.f:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L374030.  call temp:= `e`(v0, v1) @signature `Lio/grpc/internal/v0;.e:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L374036.  v0:= temp @kind object;
  #L374038.  if v0 != 0 then goto L374040;
  #L37403c.  v0:= 0I;
  #L37403e.  return v0 @kind object;
  #L374040.  call temp:= `a`(v0) @signature `Lio/grpc/internal/v0;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L374046.  v0:= temp @kind object;
  #L374048.  return v0 @kind object;
}
procedure `java.util.List` `g`(`java.util.Map` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/grpc/internal/v0;.g:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L37405c.  call temp:= `e`(v0, v1) @signature `Lio/grpc/internal/v0;.e:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L374062.  v0:= temp @kind object;
  #L374064.  if v0 != 0 then goto L37406c;
  #L374068.  v0:= 0I;
  #L37406a.  return v0 @kind object;
  #L37406c.  call temp:= `b`(v0) @signature `Lio/grpc/internal/v0;.b:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L374072.  v0:= temp @kind object;
  #L374074.  return v0 @kind object;
}
procedure `java.lang.Double` `h`(`java.util.Map` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/grpc/internal/v0;.h:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L373c5c.  call temp:= `containsKey`(v7, v8) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L373c62.  v0:= temp;
  #L373c64.  if v0 != 0 then goto L373c6c;
  #L373c68.  v7:= 0I;
  #L373c6a.  return v7 @kind object;
  #L373c6c.  call temp:= `get`(v7, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L373c72.  v0:= temp @kind object;
  #L373c74.  v1:= instanceof @variable v0 @type ^`java.lang.Double` @kind boolean;
  #L373c78.  if v1 == 0 then goto L373c82;
  #L373c7c.  v0:= (`java.lang.Double`) v0 @kind object;
  #L373c80.  return v0 @kind object;
  #L373c82.  v1:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L373c86.  v2:= 2I;
  #L373c88.  v3:= 1I;
  #L373c8a.  v4:= 0I;
  #L373c8c.  if v1 == 0 then goto L373ccc;
  #L373c90.  v7:= v0 @kind object;
  #L373c92.  v7:= (`java.lang.String`) v7 @kind object;
  #L373c96.  call temp:= `parseDouble`(v7) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L373c9c.  v5:= temp @kind wide;
  #L373c9e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L373ca4.  v7:= temp @kind object;
  #L373ca6.  return v7 @kind object;
  #L373ca8.  v7:= new `java.lang.IllegalArgumentException`;
  #L373cac.  v1:= new `java.lang.Object`[v2];
  #L373cb0.  v1[v4]:= v0 @kind object;
  #L373cb4.  v1[v3]:= v8 @kind object;
  #L373cb8.  v8:= "value '%s' for key '%s' is not a double" @kind object;
  #L373cbc.  call temp:= `format`(v8, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373cc2.  v8:= temp @kind object;
  #L373cc4.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373cca.  throw v7;
  #L373ccc.  v1:= new `java.lang.IllegalArgumentException`;
  #L373cd0.  v5:= 3I;
  #L373cd2.  v5:= new `java.lang.Object`[v5];
  #L373cd6.  v5[v4]:= v0 @kind object;
  #L373cda.  v5[v3]:= v8 @kind object;
  #L373cde.  v5[v2]:= v7 @kind object;
  #L373ce2.  v7:= "value '%s' for key '%s' in '%s' is not a number" @kind object;
  #L373ce6.  call temp:= `format`(v7, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373cec.  v7:= temp @kind object;
  #L373cee.  call `<init>`(v1, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373cf4.  throw v1;
  catch `java.lang.NumberFormatException` @[L373c90..L373ca6] goto L373ca8;
}
procedure `java.lang.Integer` `i`(`java.util.Map` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lio/grpc/internal/v0;.i:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L373d18.  call temp:= `containsKey`(v5, v6) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L373d1e.  v0:= temp;
  #L373d20.  if v0 != 0 then goto L373d28;
  #L373d24.  v5:= 0I;
  #L373d26.  return v5 @kind object;
  #L373d28.  call temp:= `get`(v5, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L373d2e.  v5:= temp @kind object;
  #L373d30.  v0:= instanceof @variable v5 @type ^`java.lang.Double` @kind boolean;
  #L373d34.  if v0 == 0 then goto L373d8e;
  #L373d38.  v5:= (`java.lang.Double`) v5 @kind object;
  #L373d3c.  call temp:= `intValue`(v5) @signature `Ljava/lang/Double;.intValue:()I` @kind virtual;
  #L373d42.  v6:= temp;
  #L373d44.  v0:= (`double`) v6 @kind i2d;
  #L373d46.  call temp:= `doubleValue`(v5) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L373d4c.  v2:= temp @kind wide;
  #L373d4e.  v4:= dcmpl(v0, v2);
  #L373d52.  if v4 != 0 then goto L373d60;
  #L373d56.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L373d5c.  v5:= temp @kind object;
  #L373d5e.  return v5 @kind object;
  #L373d60.  v6:= new `java.lang.ClassCastException`;
  #L373d64.  v0:= new `java.lang.StringBuilder`;
  #L373d68.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L373d6e.  v1:= "Number expected to be integer: " @kind object;
  #L373d72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373d78.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L373d7e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L373d84.  v5:= temp @kind object;
  #L373d86.  call `<init>`(v6, v5) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373d8c.  throw v6;
  #L373d8e.  v0:= instanceof @variable v5 @type ^`java.lang.String` @kind boolean;
  #L373d92.  v1:= 1I;
  #L373d94.  v2:= 0I;
  #L373d96.  v3:= 2I;
  #L373d98.  v4:= "value '%s' for key '%s' is not an integer" @kind object;
  #L373d9c.  if v0 == 0 then goto L373dd8;
  #L373da0.  v0:= v5 @kind object;
  #L373da2.  v0:= (`java.lang.String`) v0 @kind object;
  #L373da6.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L373dac.  v0:= temp;
  #L373dae.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L373db4.  v5:= temp @kind object;
  #L373db6.  return v5 @kind object;
  #L373db8.  v0:= new `java.lang.IllegalArgumentException`;
  #L373dbc.  v3:= new `java.lang.Object`[v3];
  #L373dc0.  v3[v2]:= v5 @kind object;
  #L373dc4.  v3[v1]:= v6 @kind object;
  #L373dc8.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373dce.  v5:= temp @kind object;
  #L373dd0.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373dd6.  throw v0;
  #L373dd8.  v0:= new `java.lang.IllegalArgumentException`;
  #L373ddc.  v3:= new `java.lang.Object`[v3];
  #L373de0.  v3[v2]:= v5 @kind object;
  #L373de4.  v3[v1]:= v6 @kind object;
  #L373de8.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373dee.  v5:= temp @kind object;
  #L373df0.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373df6.  throw v0;
  catch `java.lang.NumberFormatException` @[L373da0..L373db6] goto L373db8;
}
procedure `java.util.Map` `j`(`java.util.Map` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lio/grpc/internal/v0;.j:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L374088.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L37408e.  v0:= temp;
  #L374090.  if v0 != 0 then goto L374098;
  #L374094.  v4:= 0I;
  #L374096.  return v4 @kind object;
  #L374098.  call temp:= `get`(v4, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L37409e.  v0:= temp @kind object;
  #L3740a0.  v1:= instanceof @variable v0 @type ^`java.util.Map` @kind boolean;
  #L3740a4.  if v1 == 0 then goto L3740ae;
  #L3740a8.  v0:= (`java.util.Map`) v0 @kind object;
  #L3740ac.  return v0 @kind object;
  #L3740ae.  v1:= new `java.lang.ClassCastException`;
  #L3740b2.  v2:= 3I;
  #L3740b4.  v2:= new `java.lang.Object`[v2];
  #L3740b8.  v3:= 0I;
  #L3740ba.  v2[v3]:= v0 @kind object;
  #L3740be.  v0:= 1I;
  #L3740c0.  v2[v0]:= v5 @kind object;
  #L3740c4.  v5:= 2I;
  #L3740c6.  v2[v5]:= v4 @kind object;
  #L3740ca.  v4:= "value '%s' for key '%s' in '%s' is not object" @kind object;
  #L3740ce.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3740d4.  v4:= temp @kind object;
  #L3740d6.  call `<init>`(v1, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3740dc.  throw v1;
}
procedure `java.lang.String` `k`(`java.util.Map` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lio/grpc/internal/v0;.k:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L373e68.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L373e6e.  v0:= temp;
  #L373e70.  if v0 != 0 then goto L373e78;
  #L373e74.  v4:= 0I;
  #L373e76.  return v4 @kind object;
  #L373e78.  call temp:= `get`(v4, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L373e7e.  v0:= temp @kind object;
  #L373e80.  v1:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L373e84.  if v1 == 0 then goto L373e8e;
  #L373e88.  v0:= (`java.lang.String`) v0 @kind object;
  #L373e8c.  return v0 @kind object;
  #L373e8e.  v1:= new `java.lang.ClassCastException`;
  #L373e92.  v2:= 3I;
  #L373e94.  v2:= new `java.lang.Object`[v2];
  #L373e98.  v3:= 0I;
  #L373e9a.  v2[v3]:= v0 @kind object;
  #L373e9e.  v0:= 1I;
  #L373ea0.  v2[v0]:= v5 @kind object;
  #L373ea4.  v5:= 2I;
  #L373ea6.  v2[v5]:= v4 @kind object;
  #L373eaa.  v4:= "value '%s' for key '%s' in '%s' is not String" @kind object;
  #L373eae.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L373eb4.  v4:= temp @kind object;
  #L373eb6.  call `<init>`(v1, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L373ebc.  throw v1;
}
procedure `java.lang.Long` `l`(`java.util.Map` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/grpc/internal/v0;.l:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Long;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L373e18.  call temp:= `k`(v0, v1) @signature `Lio/grpc/internal/v0;.k:(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L373e1e.  v0:= temp @kind object;
  #L373e20.  if v0 != 0 then goto L373e28;
  #L373e24.  v0:= 0I;
  #L373e26.  return v0 @kind object;
  #L373e28.  call temp:= `n`(v0) @signature `Lio/grpc/internal/v0;.n:(Ljava/lang/String;)J` @kind static;
  #L373e2e.  v0:= temp @kind wide;
  #L373e30.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L373e36.  v0:= temp @kind object;
  #L373e38.  return v0 @kind object;
  #L373e3a.  v0:= Exception @type ^`java.text.ParseException` @kind object;
  #L373e3c.  v1:= new `java.lang.RuntimeException`;
  #L373e40.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L373e46.  throw v1;
  catch `java.text.ParseException` @[L373e28..L373e38] goto L373e3a;
}
procedure `long` `m`(`long` v8 , `int` v10 ) @signature `Lio/grpc/internal/v0;.m:(JI)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3740f0.  v0:= (`long`) v10 @kind i2l;
  #L3740f2.  v2:= `@@io.grpc.internal.v0.a` @type ^`long` @kind wide;
  #L3740f6.  v4:= -v2 @kind long;
  #L3740f8.  v6:= lcmp(v0, v4);
  #L3740fc.  if v6 <= 0 then goto L374108;
  #L374100.  v4:= lcmp(v0, v2);
  #L374104.  if v4 < 0 then goto L374118;
  #L374108.  v4:= v0 / v2 @kind long;
  #L37410c.  call temp:= `checkedAdd`(v8, v4) @signature `Lcom/google/common/math/LongMath;.checkedAdd:(JJ)J` @kind static;
  #L374112.  v8:= temp @kind wide;
  #L374114.  v0:= v0 %% v2 @kind long;
  #L374116.  v10:= (`int`) v0 @kind l2i;
  #L374118.  v0:= 1L;
  #L37411c.  v4:= 0L;
  #L374120.  v6:= lcmp(v8, v4);
  #L374124.  if v6 <= 0 then goto L374134;
  #L374128.  if v10 >= 0 then goto L374134;
  #L37412c.  v6:= (`long`) v10 @kind i2l;
  #L37412e.  v6:= v6 + v2 @kind long;
  #L374130.  v10:= (`int`) v6 @kind l2i;
  #L374132.  v8:= v8 - v0 @kind long;
  #L374134.  v6:= lcmp(v8, v4);
  #L374138.  if v6 >= 0 then goto L374148;
  #L37413c.  if v10 <= 0 then goto L374148;
  #L374140.  v4:= (`long`) v10 @kind i2l;
  #L374142.  v4:= v4 - v2 @kind long;
  #L374144.  v10:= (`int`) v4 @kind l2i;
  #L374146.  v8:= v8 + v0 @kind long;
  #L374148.  call temp:= `c`(v8, v10) @signature `Lio/grpc/internal/v0;.c:(JI)Z` @kind static;
  #L37414e.  v0:= temp;
  #L374150.  if v0 == 0 then goto L37416c;
  #L374154.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L374158.  call temp:= `toNanos`(v0, v8) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L37415e.  v8:= temp @kind wide;
  #L374160.  v0:= (`long`) v10 @kind i2l;
  #L374162.  call temp:= `p`(v8, v0) @signature `Lio/grpc/internal/v0;.p:(JJ)J` @kind static;
  #L374168.  v8:= temp @kind wide;
  #L37416a.  return v8 @kind wide;
  #L37416c.  v0:= new `java.lang.IllegalArgumentException`;
  #L374170.  v1:= 2I;
  #L374172.  v1:= new `java.lang.Object`[v1];
  #L374176.  v2:= 0I;
  #L374178.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L37417e.  v8:= temp @kind object;
  #L374180.  v1[v2]:= v8 @kind object;
  #L374184.  v8:= 1I;
  #L374186.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37418c.  v9:= temp @kind object;
  #L37418e.  v1[v8]:= v9 @kind object;
  #L374192.  v8:= "Duration is not valid. See proto definition for valid values. Seconds (%s) must be in range [-315,576,000,000, +315,576,000,000]. Nanos (%s) must be in range [-999,999,999, +999,999,999]. Nanos must have the same sign as seconds" @kind object;
  #L374196.  call temp:= `format`(v8, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L37419c.  v8:= temp @kind object;
  #L37419e.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3741a4.  throw v0;
}
procedure `long` `n`(`java.lang.String` v9 @kind object) @signature `Lio/grpc/internal/v0;.n:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3741b8.  call temp:= `isEmpty`(v9) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3741be.  v0:= temp;
  #L3741c0.  v1:= "Invalid duration string: " @kind object;
  #L3741c4.  v2:= 0I;
  #L3741c6.  if v0 != 0 then goto L3742ba;
  #L3741ca.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3741d0.  v0:= temp;
  #L3741d2.  v3:= 1I;
  #L3741d4.  v0:= v0 - v3 @kind int;
  #L3741d6.  call temp:= `charAt`(v9, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3741dc.  v0:= temp;
  #L3741de.  v4:= 115I;
  #L3741e2.  if v0 != v4 then goto L3742ba;
  #L3741e6.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3741ec.  v0:= temp;
  #L3741ee.  v4:= 45I;
  #L3741f2.  if v0 != v4 then goto L374202;
  #L3741f6.  call temp:= `substring`(v9, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3741fc.  v9:= temp @kind object;
  #L3741fe.  v0:= 1I;
  #L374200.  goto L374204;
  #L374202.  v0:= 0I;
  #L374204.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37420a.  v4:= temp;
  #L37420c.  v4:= v4 - v3 @kind int;
  #L37420e.  call temp:= `substring`(v9, v2, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L374214.  v3:= temp @kind object;
  #L374216.  v4:= 46I;
  #L37421a.  call temp:= `indexOf`(v3, v4) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L374220.  v4:= temp;
  #L374222.  v5:= -1I;
  #L374224.  if v4 == v5 then goto L37423e;
  #L374228.  v5:= v4 + 1;
  #L37422c.  call temp:= `substring`(v3, v5) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L374232.  v5:= temp @kind object;
  #L374234.  call temp:= `substring`(v3, v2, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L37423a.  v3:= temp @kind object;
  #L37423c.  goto L374242;
  #L37423e.  v5:= "" @kind object;
  #L374242.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L374248.  v3:= temp @kind wide;
  #L37424a.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L374250.  v6:= temp;
  #L374252.  if v6 == 0 then goto L37425a;
  #L374256.  v5:= 0I;
  #L374258.  goto L374262;
  #L37425a.  call temp:= `o`(v5) @signature `Lio/grpc/internal/v0;.o:(Ljava/lang/String;)I` @kind static;
  #L374260.  v5:= temp;
  #L374262.  v6:= 0L;
  #L374266.  v8:= lcmp(v3, v6);
  #L37426a.  if v8 < 0 then goto L374290;
  #L37426e.  if v0 == 0 then goto L374276;
  #L374272.  v3:= -v3 @kind long;
  #L374274.  v5:= -v5 @kind int;
  #L374276.  call temp:= `m`(v3, v5) @signature `Lio/grpc/internal/v0;.m:(JI)J` @kind static;
  #L37427c.  v0:= temp @kind wide;
  #L37427e.  return v0 @kind wide;
  #L374280.  v9:= new `java.text.ParseException`;
  #L374284.  v0:= "Duration value is out of range." @kind object;
  #L374288.  call `<init>`(v9, v0, v2) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L37428e.  throw v9;
  #L374290.  v0:= new `java.text.ParseException`;
  #L374294.  v3:= new `java.lang.StringBuilder`;
  #L374298.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37429e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3742a4.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3742aa.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3742b0.  v9:= temp @kind object;
  #L3742b2.  call `<init>`(v0, v9, v2) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3742b8.  throw v0;
  #L3742ba.  v0:= new `java.text.ParseException`;
  #L3742be.  v3:= new `java.lang.StringBuilder`;
  #L3742c2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3742c8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3742ce.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3742d4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3742da.  v9:= temp @kind object;
  #L3742dc.  call `<init>`(v0, v9, v2) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3742e2.  throw v0;
  catch `java.lang.IllegalArgumentException` @[L374276..L37427e] goto L374280;
}
procedure `int` `o`(`java.lang.String` v6 @kind object) @signature `Lio/grpc/internal/v0;.o:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L373b80.  v0:= 0I;
  #L373b82.  v1:= 0I;
  #L373b84.  v2:= 0I;
  #L373b86.  v3:= 9I;
  #L373b8a.  if v1 >= v3 then goto L373be2;
  #L373b8e.  v2:= v2 * 10;
  #L373b92.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L373b98.  v3:= temp;
  #L373b9a.  if v1 >= v3 then goto L373bdc;
  #L373b9e.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L373ba4.  v3:= temp;
  #L373ba6.  v4:= 48I;
  #L373baa.  if v3 < v4 then goto L373bcc;
  #L373bae.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L373bb4.  v3:= temp;
  #L373bb6.  v5:= 57I;
  #L373bba.  if v3 > v5 then goto L373bcc;
  #L373bbe.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L373bc4.  v3:= temp;
  #L373bc6.  v3:= v3 - v4 @kind int;
  #L373bc8.  v2:= v2 + v3 @kind int;
  #L373bca.  goto L373bdc;
  #L373bcc.  v6:= new `java.text.ParseException`;
  #L373bd0.  v1:= "Invalid nanoseconds." @kind object;
  #L373bd4.  call `<init>`(v6, v1, v0) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L373bda.  throw v6;
  #L373bdc.  v1:= v1 + 1;
  #L373be0.  goto L373b86;
  #L373be2.  return v2;
}
procedure `long` `p`(`long` v7 , `long` v9 ) @signature `Lio/grpc/internal/v0;.p:(JJ)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L374304.  v0:= v7 + v9 @kind long;
  #L374308.  v9:= v9 ^~ v7 @kind long;
  #L37430a.  v2:= 1I;
  #L37430c.  v3:= 0I;
  #L37430e.  v4:= 0L;
  #L374312.  v6:= lcmp(v9, v4);
  #L374316.  if v6 >= 0 then goto L37431e;
  #L37431a.  v9:= 1I;
  #L37431c.  goto L374320;
  #L37431e.  v9:= 0I;
  #L374320.  v7:= v7 ^~ v0 @kind long;
  #L374322.  v10:= lcmp(v7, v4);
  #L374326.  if v10 < 0 then goto L37432c;
  #L37432a.  goto L37432e;
  #L37432c.  v2:= 0I;
  #L37432e.  v7:= v9 ^| v2 @kind int;
  #L374332.  if v7 == 0 then goto L374338;
  #L374336.  return v0 @kind wide;
  #L374338.  v7:= 9223372036854775807L;
  #L374342.  v9:= 63I;
  #L374346.  v9:= v0 ^>> v9 @kind long;
  #L37434a.  v0:= 1L;
  #L37434e.  v9:= v9 ^~ v0 @kind long;
  #L374350.  v9:= v9 + v7 @kind long;
  #L374352.  return v9 @kind wide;
}
