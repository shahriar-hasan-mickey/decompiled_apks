record `io.grpc.internal.o1` @kind class @AccessFlag PUBLIC_FINAL extends `io.grpc.internal.x0` @kind interface {
  `java.lang.Object` `io.grpc.internal.o1.a` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@io.grpc.internal.o1.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Constructor` `@@io.grpc.internal.o1.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Method` `@@io.grpc.internal.o1.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Method` `@@io.grpc.internal.o1.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.RuntimeException` `@@io.grpc.internal.o1.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@io.grpc.internal.o1.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/internal/o1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L37cb20.  v0:= constclass @type ^`io.grpc.internal.o1` @kind object;
  #L37cb24.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L37cb2a.  v0:= temp @kind object;
  #L37cb2c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L37cb32.  v0:= temp @kind object;
  #L37cb34.  `@@io.grpc.internal.o1.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L37cb38.  v0:= 1I;
  #L37cb3a.  v1:= 0I;
  #L37cb3c.  v2:= 0I;
  #L37cb3e.  v3:= "java.util.concurrent.atomic.LongAdder" @kind object;
  #L37cb42.  call temp:= `forName`(v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L37cb48.  v3:= temp @kind object;
  #L37cb4a.  v4:= "add" @kind object;
  #L37cb4e.  v5:= new `java.lang.Class`[v0];
  #L37cb52.  v6:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L37cb56.  v5[v1]:= v6 @kind object;
  #L37cb5a.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L37cb60.  v4:= temp @kind object;
  #L37cb62.  v5:= "sum" @kind object;
  #L37cb66.  v6:= new `java.lang.Class`[v1];
  #L37cb6a.  call temp:= `getMethod`(v3, v5, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L37cb70.  v5:= temp @kind object;
  #L37cb72.  call temp:= `getConstructors`(v3) @signature `Ljava/lang/Class;.getConstructors:()[Ljava/lang/reflect/Constructor;` @kind virtual;
  #L37cb78.  v3:= temp @kind object;
  #L37cb7a.  v6:= length @variable v3;
  #L37cb7c.  v7:= 0I;
  #L37cb7e.  if v7 >= v6 then goto L37cb9c;
  #L37cb82.  v8:= v3[v7] @kind object;
  #L37cb86.  call temp:= `getParameterTypes`(v8) @signature `Ljava/lang/reflect/Constructor;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L37cb8c.  v9:= temp @kind object;
  #L37cb8e.  v9:= length @variable v9;
  #L37cb90.  if v9 != 0 then goto L37cb96;
  #L37cb94.  goto L37cb9e;
  #L37cb96.  v7:= v7 + 1;
  #L37cb9a.  goto L37cb7e;
  #L37cb9c.  v8:= v2 @kind object;
  #L37cb9e.  v3:= v2 @kind object;
  #L37cba0.  goto L37cbc6;
  #L37cba2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L37cba4.  goto L37cbb2;
  #L37cba6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L37cba8.  v5:= v2 @kind object;
  #L37cbaa.  goto L37cbb2;
  #L37cbac.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L37cbae.  v4:= v2 @kind object;
  #L37cbb0.  v5:= v4 @kind object;
  #L37cbb2.  v6:= `@@io.grpc.internal.o1.b` @type ^`java.util.logging.Logger` @kind object;
  #L37cbb6.  v7:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L37cbba.  v8:= "LongAdder can not be found via reflection, this is normal for JDK7 and below" @kind object;
  #L37cbbe.  call `log`(v6, v7, v8, v3) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L37cbc4.  v8:= v2 @kind object;
  #L37cbc6.  if v3 != 0 then goto L37cbe0;
  #L37cbca.  if v8 == 0 then goto L37cbe0;
  #L37cbce.  `@@io.grpc.internal.o1.c` @type ^`java.lang.reflect.Constructor` := v8 @kind object;
  #L37cbd2.  `@@io.grpc.internal.o1.d` @type ^`java.lang.reflect.Method` := v4 @kind object;
  #L37cbd6.  `@@io.grpc.internal.o1.e` @type ^`java.lang.reflect.Method` := v5 @kind object;
  #L37cbda.  `@@io.grpc.internal.o1.f` @type ^`java.lang.RuntimeException` := v2 @kind object;
  #L37cbde.  goto L37cbfa;
  #L37cbe0.  `@@io.grpc.internal.o1.c` @type ^`java.lang.reflect.Constructor` := v2 @kind object;
  #L37cbe4.  `@@io.grpc.internal.o1.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L37cbe8.  `@@io.grpc.internal.o1.e` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L37cbec.  v2:= new `java.lang.RuntimeException`;
  #L37cbf0.  call `<init>`(v2, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cbf6.  `@@io.grpc.internal.o1.f` @type ^`java.lang.RuntimeException` := v2 @kind object;
  #L37cbfa.  v0:= new `java.lang.Object`[v0];
  #L37cbfe.  v2:= 1L;
  #L37cc02.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L37cc08.  v2:= temp @kind object;
  #L37cc0a.  v0[v1]:= v2 @kind object;
  #L37cc0e.  `@@io.grpc.internal.o1.g` @type ^`java.lang.Object`[] := v0 @kind object;
  #L37cc12.  return @kind void;
  catch `java.lang.Throwable` @[L37cb3e..L37cb62] goto L37cbac;
  catch `java.lang.Throwable` @[L37cb62..L37cb72] goto L37cba6;
  catch `java.lang.Throwable` @[L37cb72..L37cb90] goto L37cba2;
}
procedure `void` `<init>`(`io.grpc.internal.o1` v2 @kind this) @signature `Lio/grpc/internal/o1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L37cc44.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37cc4a.  v0:= `@@io.grpc.internal.o1.f` @type ^`java.lang.RuntimeException` @kind object;
  #L37cc4e.  if v0 != 0 then goto L37cc94;
  #L37cc52.  v0:= `@@io.grpc.internal.o1.c` @type ^`java.lang.reflect.Constructor` @kind object;
  #L37cc56.  v1:= 0I;
  #L37cc58.  v1:= new `java.lang.Object`[v1];
  #L37cc5c.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37cc62.  v0:= temp @kind object;
  #L37cc64.  v2.`io.grpc.internal.o1.a` @type ^`java.lang.Object` := v0 @kind object;
  #L37cc68.  return @kind void;
  #L37cc6a.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L37cc6c.  v1:= new `java.lang.RuntimeException`;
  #L37cc70.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cc76.  throw v1;
  #L37cc78.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L37cc7a.  v1:= new `java.lang.RuntimeException`;
  #L37cc7e.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cc84.  throw v1;
  #L37cc86.  v0:= Exception @type ^`java.lang.InstantiationException` @kind object;
  #L37cc88.  v1:= new `java.lang.RuntimeException`;
  #L37cc8c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cc92.  throw v1;
  #L37cc94.  throw v0;
  catch `java.lang.InstantiationException` @[L37cc52..L37cc68] goto L37cc86;
  catch `java.lang.IllegalAccessException` @[L37cc52..L37cc68] goto L37cc78;
  catch `java.lang.reflect.InvocationTargetException` @[L37cc52..L37cc68] goto L37cc6a;
}
procedure `boolean` `a`() @signature `Lio/grpc/internal/o1;.a:()Z` @AccessFlag STATIC {
    temp;
    v0;

  #L37cb00.  v0:= `@@io.grpc.internal.o1.f` @type ^`java.lang.RuntimeException` @kind object;
  #L37cb04.  if v0 != 0 then goto L37cb0c;
  #L37cb08.  v0:= 1I;
  #L37cb0a.  goto L37cb0e;
  #L37cb0c.  v0:= 0I;
  #L37cb0e.  return v0;
}
procedure `void` `add`(`io.grpc.internal.o1` v5 @kind this, `long` v6 ) @signature `Lio/grpc/internal/o1;.add:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37ccbc.  v0:= `@@io.grpc.internal.o1.d` @type ^`java.lang.reflect.Method` @kind object;
  #L37ccc0.  v1:= v5.`io.grpc.internal.o1.a` @type ^`java.lang.Object` @kind object;
  #L37ccc4.  v2:= 1L;
  #L37ccc8.  v4:= lcmp(v6, v2);
  #L37cccc.  if v4 != 0 then goto L37ccd6;
  #L37ccd0.  v6:= `@@io.grpc.internal.o1.g` @type ^`java.lang.Object`[] @kind object;
  #L37ccd4.  goto L37ccec;
  #L37ccd6.  v2:= 1I;
  #L37ccd8.  v2:= new `java.lang.Object`[v2];
  #L37ccdc.  v3:= 0I;
  #L37ccde.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L37cce4.  v6:= temp @kind object;
  #L37cce6.  v2[v3]:= v6 @kind object;
  #L37ccea.  v6:= v2 @kind object;
  #L37ccec.  call temp:= `invoke`(v0, v1, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L37ccf2.  return @kind void;
  #L37ccf4.  v6:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L37ccf6.  v7:= new `java.lang.RuntimeException`;
  #L37ccfa.  call `<init>`(v7, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cd00.  throw v7;
  #L37cd02.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L37cd04.  v7:= new `java.lang.RuntimeException`;
  #L37cd08.  call `<init>`(v7, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L37cd0e.  throw v7;
  catch `java.lang.IllegalAccessException` @[L37ccbc..L37ccf2] goto L37cd02;
  catch `java.lang.reflect.InvocationTargetException` @[L37ccbc..L37ccf2] goto L37ccf4;
}
