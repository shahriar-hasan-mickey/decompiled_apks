record `io.grpc.a0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.ConcurrentNavigableMap` `io.grpc.a0.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentNavigableMap` `io.grpc.a0.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.a0.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.a0.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.a0.e` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@io.grpc.a0.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.grpc.a0` `@@io.grpc.a0.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/a0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L35f9bc.  v0:= constclass @type ^`io.grpc.a0` @kind object;
  #L35f9c0.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L35f9c6.  v0:= temp @kind object;
  #L35f9c8.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L35f9ce.  v0:= temp @kind object;
  #L35f9d0.  `@@io.grpc.a0.f` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L35f9d4.  v0:= new `io.grpc.a0`;
  #L35f9d8.  call `<init>`(v0) @signature `Lio/grpc/a0;.<init>:()V` @kind direct;
  #L35f9de.  `@@io.grpc.a0.g` @type ^`io.grpc.a0` := v0 @kind object;
  #L35f9e2.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.a0` v1 @kind this) @signature `Lio/grpc/a0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35f9f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35f9fa.  v0:= new `java.util.concurrent.ConcurrentSkipListMap`;
  #L35f9fe.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentSkipListMap;.<init>:()V` @kind direct;
  #L35fa04.  v1.`io.grpc.a0.a` @type ^`java.util.concurrent.ConcurrentNavigableMap` := v0 @kind object;
  #L35fa08.  v0:= new `java.util.concurrent.ConcurrentSkipListMap`;
  #L35fa0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentSkipListMap;.<init>:()V` @kind direct;
  #L35fa12.  v1.`io.grpc.a0.b` @type ^`java.util.concurrent.ConcurrentNavigableMap` := v0 @kind object;
  #L35fa16.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L35fa1a.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L35fa20.  v1.`io.grpc.a0.c` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L35fa24.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L35fa28.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L35fa2e.  v1.`io.grpc.a0.d` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L35fa32.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L35fa36.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L35fa3c.  v1.`io.grpc.a0.e` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L35fa40.  return @kind void;
}
procedure `java.util.logging.Logger` `a`() @signature `Lio/grpc/a0;.a:()Ljava/util/logging/Logger;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L35f980.  v0:= `@@io.grpc.a0.f` @type ^`java.util.logging.Logger` @kind object;
  #L35f984.  return v0 @kind object;
}
procedure `void` `b`(`java.util.Map` v2 @kind object, `io.grpc.e0` v3 @kind object) @signature `Lio/grpc/a0;.b:(Ljava/util/Map;Lio/grpc/e0;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L35fa54.  call temp:= `g`(v3) @signature `Lio/grpc/l0;.g:()Lio/grpc/f0;` @kind interface;
  #L35fa5a.  v0:= temp @kind object;
  #L35fa5c.  call temp:= `d`(v0) @signature `Lio/grpc/f0;.d:()J` @kind virtual;
  #L35fa62.  v0:= temp @kind wide;
  #L35fa64.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L35fa6a.  v0:= temp @kind object;
  #L35fa6c.  call temp:= `put`(v2, v0, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L35fa72.  v2:= temp @kind object;
  #L35fa74.  v2:= (`io.grpc.e0`) v2 @kind object;
  #L35fa78.  return @kind void;
}
procedure `long` `f`(`io.grpc.l0` v2 @kind object) @signature `Lio/grpc/a0;.f:(Lio/grpc/l0;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L35f998.  call temp:= `g`(v2) @signature `Lio/grpc/l0;.g:()Lio/grpc/f0;` @kind interface;
  #L35f99e.  v2:= temp @kind object;
  #L35f9a0.  call temp:= `d`(v2) @signature `Lio/grpc/f0;.d:()J` @kind virtual;
  #L35f9a6.  v0:= temp @kind wide;
  #L35f9a8.  return v0 @kind wide;
}
procedure `io.grpc.a0` `g`() @signature `Lio/grpc/a0;.g:()Lio/grpc/a0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35f968.  v0:= `@@io.grpc.a0.g` @type ^`io.grpc.a0` @kind object;
  #L35f96c.  return v0 @kind object;
}
procedure `void` `h`(`java.util.Map` v2 @kind object, `io.grpc.e0` v3 @kind object) @signature `Lio/grpc/a0;.h:(Ljava/util/Map;Lio/grpc/e0;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L35fae0.  call temp:= `f`(v3) @signature `Lio/grpc/a0;.f:(Lio/grpc/l0;)J` @kind static;
  #L35fae6.  v0:= temp @kind wide;
  #L35fae8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L35faee.  v3:= temp @kind object;
  #L35faf0.  call temp:= `remove`(v2, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L35faf6.  v2:= temp @kind object;
  #L35faf8.  v2:= (`io.grpc.e0`) v2 @kind object;
  #L35fafc.  return @kind void;
}
procedure `void` `c`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.c:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35fa8c.  v0:= v1.`io.grpc.a0.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L35fa90.  call `b`(v0, v2) @signature `Lio/grpc/a0;.b:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35fa96.  return @kind void;
}
procedure `void` `d`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.d:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35faa8.  v0:= v1.`io.grpc.a0.b` @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L35faac.  call `b`(v0, v2) @signature `Lio/grpc/a0;.b:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35fab2.  return @kind void;
}
procedure `void` `e`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.e:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35fac4.  v0:= v1.`io.grpc.a0.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L35fac8.  call `b`(v0, v2) @signature `Lio/grpc/a0;.b:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35face.  return @kind void;
}
procedure `void` `i`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.i:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35fb10.  v0:= v1.`io.grpc.a0.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L35fb14.  call `h`(v0, v2) @signature `Lio/grpc/a0;.h:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35fb1a.  return @kind void;
}
procedure `void` `j`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.j:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35fb2c.  v0:= v1.`io.grpc.a0.b` @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L35fb30.  call `h`(v0, v2) @signature `Lio/grpc/a0;.h:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35fb36.  return @kind void;
}
procedure `void` `k`(`io.grpc.a0` v1 @kind this, `io.grpc.e0` v2 @kind object) @signature `Lio/grpc/a0;.k:(Lio/grpc/e0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35fb48.  v0:= v1.`io.grpc.a0.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L35fb4c.  call `h`(v0, v2) @signature `Lio/grpc/a0;.h:(Ljava/util/Map;Lio/grpc/e0;)V` @kind static;
  #L35fb52.  return @kind void;
}
