record `io.grpc.okhttp.a$e` @kind class @AccessFlag ABSTRACT extends `java.lang.Runnable` @kind interface {
  `io.grpc.okhttp.a` `io.grpc.okhttp.a$e.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.grpc.okhttp.a$e` v0 @kind this, `io.grpc.okhttp.a` v1 @kind object) @signature `Lio/grpc/okhttp/a$e;.<init>:(Lio/grpc/okhttp/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L381db0.  v0.`io.grpc.okhttp.a$e.a` @type ^`io.grpc.okhttp.a` := v1 @kind object;
  #L381db4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L381dba.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.okhttp.a$e` v0 @kind this, `io.grpc.okhttp.a` v1 @kind object, `io.grpc.okhttp.a$a` v2 @kind object) @signature `Lio/grpc/okhttp/a$e;.<init>:(Lio/grpc/okhttp/a;Lio/grpc/okhttp/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L381dcc.  call `<init>`(v0, v1) @signature `Lio/grpc/okhttp/a$e;.<init>:(Lio/grpc/okhttp/a;)V` @kind direct;
  #L381dd2.  return @kind void;
}
procedure `void` `a`() @signature `Lio/grpc/okhttp/a$e;.a:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `run`(`io.grpc.okhttp.a$e` v2 @kind this) @signature `Lio/grpc/okhttp/a$e;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L381de4.  v0:= v2.`io.grpc.okhttp.a$e.a` @type ^`io.grpc.okhttp.a` @kind object;
  #L381de8.  call temp:= `T`(v0) @signature `Lio/grpc/okhttp/a;.T:(Lio/grpc/okhttp/a;)Lokio/p;` @kind static;
  #L381dee.  v0:= temp @kind object;
  #L381df0.  if v0 == 0 then goto L381dfc;
  #L381df4.  call `a`(v2) @signature `Lio/grpc/okhttp/a$e;.a:()V` @kind virtual;
  #L381dfa.  goto L381e20;
  #L381dfc.  v0:= new `java.io.IOException`;
  #L381e00.  v1:= "Unable to perform write due to unavailable sink." @kind object;
  #L381e04.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L381e0a.  throw v0;
  #L381e0c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L381e0e.  v1:= v2.`io.grpc.okhttp.a$e.a` @type ^`io.grpc.okhttp.a` @kind object;
  #L381e12.  call temp:= `V`(v1) @signature `Lio/grpc/okhttp/a;.V:(Lio/grpc/okhttp/a;)Lio/grpc/okhttp/b$a;` @kind static;
  #L381e18.  v1:= temp @kind object;
  #L381e1a.  call `f`(v1, v0) @signature `Lio/grpc/okhttp/b$a;.f:(Ljava/lang/Throwable;)V` @kind interface;
  #L381e20.  return @kind void;
  catch `java.lang.Exception` @[L381de4..L381e0c] goto L381e0c;
}
