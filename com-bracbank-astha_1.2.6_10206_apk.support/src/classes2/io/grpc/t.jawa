record `io.grpc.t` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `io.grpc.t.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `io.grpc.t.b` @AccessFlag PRIVATE_FINAL;
}
global `com.google.common.base.Joiner` `@@io.grpc.t.c` @AccessFlag STATIC_FINAL;
global `io.grpc.t` `@@io.grpc.t.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L35eaf8.  v0:= 44I;
  #L35eafc.  call temp:= `on`(v0) @signature `Lcom/google/common/base/Joiner;.on:(C)Lcom/google/common/base/Joiner;` @kind static;
  #L35eb02.  v0:= temp @kind object;
  #L35eb04.  `@@io.grpc.t.c` @type ^`com.google.common.base.Joiner` := v0 @kind object;
  #L35eb08.  call temp:= `a`() @signature `Lio/grpc/t;.a:()Lio/grpc/t;` @kind static;
  #L35eb0e.  v0:= temp @kind object;
  #L35eb10.  v1:= new `io.grpc.k$a`;
  #L35eb14.  call `<init>`(v1) @signature `Lio/grpc/k$a;.<init>:()V` @kind direct;
  #L35eb1a.  v2:= 1I;
  #L35eb1c.  call temp:= `f`(v0, v1, v2) @signature `Lio/grpc/t;.f:(Lio/grpc/s;Z)Lio/grpc/t;` @kind virtual;
  #L35eb22.  v0:= temp @kind object;
  #L35eb24.  v1:= `@@io.grpc.k$b.a` @type ^`io.grpc.k` @kind object;
  #L35eb28.  v2:= 0I;
  #L35eb2a.  call temp:= `f`(v0, v1, v2) @signature `Lio/grpc/t;.f:(Lio/grpc/s;Z)Lio/grpc/t;` @kind virtual;
  #L35eb30.  v0:= temp @kind object;
  #L35eb32.  `@@io.grpc.t.d` @type ^`io.grpc.t` := v0 @kind object;
  #L35eb36.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.t` v2 @kind this) @signature `Lio/grpc/t;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35eb48.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35eb4e.  v0:= new `java.util.LinkedHashMap`;
  #L35eb52.  v1:= 0I;
  #L35eb54.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L35eb5a.  v2.`io.grpc.t.a` @type ^`java.util.Map` := v0 @kind object;
  #L35eb5e.  v0:= new `byte`[v1];
  #L35eb62.  v2.`io.grpc.t.b` @type ^`byte`[] := v0 @kind object;
  #L35eb66.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.t` v6 @kind this, `io.grpc.s` v7 @kind object, `boolean` v8 , `io.grpc.t` v9 @kind object) @signature `Lio/grpc/t;.<init>:(Lio/grpc/s;ZLio/grpc/t;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35eb78.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35eb7e.  call temp:= `a`(v7) @signature `Lio/grpc/s;.a:()Ljava/lang/String;` @kind interface;
  #L35eb84.  v0:= temp @kind object;
  #L35eb86.  v1:= "," @kind object;
  #L35eb8a.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L35eb90.  v1:= temp;
  #L35eb92.  v1:= v1 ^~ 1;
  #L35eb96.  v2:= "Comma is currently not allowed in message encoding" @kind object;
  #L35eb9a.  call `checkArgument`(v1, v2) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L35eba0.  v1:= v9.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35eba4.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L35ebaa.  v1:= temp;
  #L35ebac.  v2:= v9.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35ebb0.  call temp:= `a`(v7) @signature `Lio/grpc/s;.a:()Ljava/lang/String;` @kind interface;
  #L35ebb6.  v3:= temp @kind object;
  #L35ebb8.  call temp:= `containsKey`(v2, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L35ebbe.  v2:= temp;
  #L35ebc0.  if v2 != 0 then goto L35ebc8;
  #L35ebc4.  v1:= v1 + 1;
  #L35ebc8.  v2:= new `java.util.LinkedHashMap`;
  #L35ebcc.  call `<init>`(v2, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L35ebd2.  v9:= v9.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35ebd6.  call temp:= `values`(v9) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L35ebdc.  v9:= temp @kind object;
  #L35ebde.  call temp:= `iterator`(v9) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L35ebe4.  v9:= temp @kind object;
  #L35ebe6.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L35ebec.  v1:= temp;
  #L35ebee.  if v1 == 0 then goto L35ec30;
  #L35ebf2.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L35ebf8.  v1:= temp @kind object;
  #L35ebfa.  v1:= (`io.grpc.t$a`) v1 @kind object;
  #L35ebfe.  v3:= v1.`io.grpc.t$a.a` @type ^`io.grpc.s` @kind object;
  #L35ec02.  call temp:= `a`(v3) @signature `Lio/grpc/s;.a:()Ljava/lang/String;` @kind interface;
  #L35ec08.  v3:= temp @kind object;
  #L35ec0a.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L35ec10.  v4:= temp;
  #L35ec12.  if v4 != 0 then goto L35ebe6;
  #L35ec16.  v4:= new `io.grpc.t$a`;
  #L35ec1a.  v5:= v1.`io.grpc.t$a.a` @type ^`io.grpc.s` @kind object;
  #L35ec1e.  v1:= v1.`io.grpc.t$a.b` @type ^`boolean` @kind boolean;
  #L35ec22.  call `<init>`(v4, v5, v1) @signature `Lio/grpc/t$a;.<init>:(Lio/grpc/s;Z)V` @kind direct;
  #L35ec28.  call temp:= `put`(v2, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L35ec2e.  goto L35ebe6;
  #L35ec30.  v9:= new `io.grpc.t$a`;
  #L35ec34.  call `<init>`(v9, v7, v8) @signature `Lio/grpc/t$a;.<init>:(Lio/grpc/s;Z)V` @kind direct;
  #L35ec3a.  call temp:= `put`(v2, v0, v9) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L35ec40.  call temp:= `unmodifiableMap`(v2) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L35ec46.  v7:= temp @kind object;
  #L35ec48.  v6.`io.grpc.t.a` @type ^`java.util.Map` := v7 @kind object;
  #L35ec4c.  v7:= `@@io.grpc.t.c` @type ^`com.google.common.base.Joiner` @kind object;
  #L35ec50.  call temp:= `b`(v6) @signature `Lio/grpc/t;.b:()Ljava/util/Set;` @kind virtual;
  #L35ec56.  v8:= temp @kind object;
  #L35ec58.  call temp:= `join`(v7, v8) @signature `Lcom/google/common/base/Joiner;.join:(Ljava/lang/Iterable;)Ljava/lang/String;` @kind virtual;
  #L35ec5e.  v7:= temp @kind object;
  #L35ec60.  v8:= "US-ASCII" @kind object;
  #L35ec64.  call temp:= `forName`(v8) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L35ec6a.  v8:= temp @kind object;
  #L35ec6c.  call temp:= `getBytes`(v7, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L35ec72.  v7:= temp @kind object;
  #L35ec74.  v6.`io.grpc.t.b` @type ^`byte`[] := v7 @kind object;
  #L35ec78.  return @kind void;
}
procedure `io.grpc.t` `a`() @signature `Lio/grpc/t;.a:()Lio/grpc/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35ea24.  v0:= new `io.grpc.t`;
  #L35ea28.  call `<init>`(v0) @signature `Lio/grpc/t;.<init>:()V` @kind direct;
  #L35ea2e.  return v0 @kind object;
}
procedure `io.grpc.t` `c`() @signature `Lio/grpc/t;.c:()Lio/grpc/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35ea40.  v0:= `@@io.grpc.t.d` @type ^`io.grpc.t` @kind object;
  #L35ea44.  return v0 @kind object;
}
procedure `java.util.Set` `b`(`io.grpc.t` v4 @kind this) @signature `Lio/grpc/t;.b:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L35ea74.  v0:= new `java.util.HashSet`;
  #L35ea78.  v1:= v4.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35ea7c.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L35ea82.  v1:= temp;
  #L35ea84.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L35ea8a.  v1:= v4.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35ea8e.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L35ea94.  v1:= temp @kind object;
  #L35ea96.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L35ea9c.  v1:= temp @kind object;
  #L35ea9e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L35eaa4.  v2:= temp;
  #L35eaa6.  if v2 == 0 then goto L35eade;
  #L35eaaa.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L35eab0.  v2:= temp @kind object;
  #L35eab2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L35eab6.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L35eabc.  v3:= temp @kind object;
  #L35eabe.  v3:= (`io.grpc.t$a`) v3 @kind object;
  #L35eac2.  v3:= v3.`io.grpc.t$a.b` @type ^`boolean` @kind boolean;
  #L35eac6.  if v3 == 0 then goto L35ea9e;
  #L35eaca.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L35ead0.  v2:= temp @kind object;
  #L35ead2.  v2:= (`java.lang.String`) v2 @kind object;
  #L35ead6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L35eadc.  goto L35ea9e;
  #L35eade.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L35eae4.  v0:= temp @kind object;
  #L35eae6.  return v0 @kind object;
}
procedure `byte`[] `d`(`io.grpc.t` v1 @kind this) @signature `Lio/grpc/t;.d:()[B` @AccessFlag  {
    temp;
    v0;

  #L35e9dc.  v0:= v1.`io.grpc.t.b` @type ^`byte`[] @kind object;
  #L35e9e0.  return v0 @kind object;
}
procedure `io.grpc.s` `e`(`io.grpc.t` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lio/grpc/t;.e:(Ljava/lang/String;)Lio/grpc/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35e9f4.  v0:= v1.`io.grpc.t.a` @type ^`java.util.Map` @kind object;
  #L35e9f8.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L35e9fe.  v2:= temp @kind object;
  #L35ea00.  v2:= (`io.grpc.t$a`) v2 @kind object;
  #L35ea04.  if v2 == 0 then goto L35ea0e;
  #L35ea08.  v2:= v2.`io.grpc.t$a.a` @type ^`io.grpc.s` @kind object;
  #L35ea0c.  goto L35ea10;
  #L35ea0e.  v2:= 0I;
  #L35ea10.  return v2 @kind object;
}
procedure `io.grpc.t` `f`(`io.grpc.t` v1 @kind this, `io.grpc.s` v2 @kind object, `boolean` v3 ) @signature `Lio/grpc/t;.f:(Lio/grpc/s;Z)Lio/grpc/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L35ea58.  v0:= new `io.grpc.t`;
  #L35ea5c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/grpc/t;.<init>:(Lio/grpc/s;ZLio/grpc/t;)V` @kind direct;
  #L35ea62.  return v0 @kind object;
}
