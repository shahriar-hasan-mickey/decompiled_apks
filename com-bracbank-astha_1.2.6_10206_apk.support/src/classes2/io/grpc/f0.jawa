record `io.grpc.f0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `io.grpc.f0.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.grpc.f0.b` @AccessFlag PRIVATE_FINAL;
  `long` `io.grpc.f0.c` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicLong` `@@io.grpc.f0.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/f0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L35feac.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L35feb0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L35feb6.  `@@io.grpc.f0.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L35feba.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.f0` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `long` v5 ) @signature `Lio/grpc/f0;.<init>:(Ljava/lang/String;Ljava/lang/String;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L35fecc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L35fed2.  v0:= "typeName" @kind object;
  #L35fed6.  call temp:= `checkNotNull`(v3, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L35fedc.  call temp:= `isEmpty`(v3) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L35fee2.  v0:= temp;
  #L35fee4.  v0:= v0 ^~ 1;
  #L35fee8.  v1:= "empty type" @kind object;
  #L35feec.  call `checkArgument`(v0, v1) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @kind static;
  #L35fef2.  v2.`io.grpc.f0.a` @type ^`java.lang.String` := v3 @kind object;
  #L35fef6.  v2.`io.grpc.f0.b` @type ^`java.lang.String` := v4 @kind object;
  #L35fefa.  v2.`io.grpc.f0.c` @type ^`long` := v5 @kind wide;
  #L35fefe.  return @kind void;
}
procedure `io.grpc.f0` `a`(`java.lang.Class` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/grpc/f0;.a:(Ljava/lang/Class;Ljava/lang/String;)Lio/grpc/f0;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L35fd24.  call temp:= `c`(v0) @signature `Lio/grpc/f0;.c:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L35fd2a.  v0:= temp @kind object;
  #L35fd2c.  call temp:= `b`(v0, v1) @signature `Lio/grpc/f0;.b:(Ljava/lang/String;Ljava/lang/String;)Lio/grpc/f0;` @kind static;
  #L35fd32.  v0:= temp @kind object;
  #L35fd34.  return v0 @kind object;
}
procedure `io.grpc.f0` `b`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/grpc/f0;.b:(Ljava/lang/String;Ljava/lang/String;)Lio/grpc/f0;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L35fd48.  v0:= new `io.grpc.f0`;
  #L35fd4c.  call temp:= `e`() @signature `Lio/grpc/f0;.e:()J` @kind static;
  #L35fd52.  v1:= temp @kind wide;
  #L35fd54.  call `<init>`(v0, v3, v4, v1) @signature `Lio/grpc/f0;.<init>:(Ljava/lang/String;Ljava/lang/String;J)V` @kind direct;
  #L35fd5a.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`java.lang.Class` v2 @kind object) @signature `Lio/grpc/f0;.c:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L35fd6c.  v0:= "type" @kind object;
  #L35fd70.  call temp:= `checkNotNull`(v2, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L35fd76.  v0:= temp @kind object;
  #L35fd78.  v0:= (`java.lang.Class`) v0 @kind object;
  #L35fd7c.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L35fd82.  v0:= temp @kind object;
  #L35fd84.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L35fd8a.  v1:= temp;
  #L35fd8c.  if v1 != 0 then goto L35fd92;
  #L35fd90.  return v0 @kind object;
  #L35fd92.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L35fd98.  v0:= temp @kind object;
  #L35fd9a.  call temp:= `getPackage`(v2) @signature `Ljava/lang/Class;.getPackage:()Ljava/lang/Package;` @kind virtual;
  #L35fda0.  v2:= temp @kind object;
  #L35fda2.  call temp:= `getName`(v2) @signature `Ljava/lang/Package;.getName:()Ljava/lang/String;` @kind virtual;
  #L35fda8.  v2:= temp @kind object;
  #L35fdaa.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L35fdb0.  v2:= temp;
  #L35fdb2.  v2:= v2 + 1;
  #L35fdb6.  call temp:= `substring`(v0, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L35fdbc.  v2:= temp @kind object;
  #L35fdbe.  return v2 @kind object;
}
procedure `long` `e`() @signature `Lio/grpc/f0;.e:()J` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L35fe8c.  v0:= `@@io.grpc.f0.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L35fe90.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L35fe96.  v0:= temp @kind wide;
  #L35fe98.  return v0 @kind wide;
}
procedure `long` `d`(`io.grpc.f0` v2 @kind this) @signature `Lio/grpc/f0;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35fe74.  v0:= v2.`io.grpc.f0.c` @type ^`long` @kind wide;
  #L35fe78.  return v0 @kind wide;
}
procedure `java.lang.String` `f`(`io.grpc.f0` v3 @kind this) @signature `Lio/grpc/f0;.f:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35fdd0.  v0:= new `java.lang.StringBuilder`;
  #L35fdd4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35fdda.  v1:= v3.`io.grpc.f0.a` @type ^`java.lang.String` @kind object;
  #L35fdde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fde4.  v1:= "<" @kind object;
  #L35fde8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fdee.  v1:= v3.`io.grpc.f0.c` @type ^`long` @kind wide;
  #L35fdf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fdf8.  v1:= ">" @kind object;
  #L35fdfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fe02.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35fe08.  v0:= temp @kind object;
  #L35fe0a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`io.grpc.f0` v2 @kind this) @signature `Lio/grpc/f0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35fe1c.  v0:= new `java.lang.StringBuilder`;
  #L35fe20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35fe26.  call temp:= `f`(v2) @signature `Lio/grpc/f0;.f:()Ljava/lang/String;` @kind virtual;
  #L35fe2c.  v1:= temp @kind object;
  #L35fe2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fe34.  v1:= v2.`io.grpc.f0.b` @type ^`java.lang.String` @kind object;
  #L35fe38.  if v1 == 0 then goto L35fe5a;
  #L35fe3c.  v1:= ": (" @kind object;
  #L35fe40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fe46.  v1:= v2.`io.grpc.f0.b` @type ^`java.lang.String` @kind object;
  #L35fe4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fe50.  v1:= 41I;
  #L35fe54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L35fe5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35fe60.  v0:= temp @kind object;
  #L35fe62.  return v0 @kind object;
}
