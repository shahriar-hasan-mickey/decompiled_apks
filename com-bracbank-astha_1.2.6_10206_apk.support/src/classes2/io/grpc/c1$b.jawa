record `io.grpc.c1$b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `io.grpc.c1$b.a` @AccessFlag PRIVATE_FINAL;
  `io.grpc.d1` `io.grpc.c1$b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `io.grpc.c1$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.grpc.c1$b` v1 @kind this, `io.grpc.d1` v2 @kind object) @signature `Lio/grpc/c1$b;.<init>:(Lio/grpc/d1;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3639a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3639ae.  v0:= new `java.util.HashMap`;
  #L3639b2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3639b8.  v1.`io.grpc.c1$b.c` @type ^`java.util.Map` := v0 @kind object;
  #L3639bc.  v0:= "serviceDescriptor" @kind object;
  #L3639c0.  call temp:= `checkNotNull`(v2, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3639c6.  v0:= temp @kind object;
  #L3639c8.  v0:= (`io.grpc.d1`) v0 @kind object;
  #L3639cc.  v1.`io.grpc.c1$b.b` @type ^`io.grpc.d1` := v0 @kind object;
  #L3639d0.  call temp:= `b`(v2) @signature `Lio/grpc/d1;.b:()Ljava/lang/String;` @kind virtual;
  #L3639d6.  v2:= temp @kind object;
  #L3639d8.  v1.`io.grpc.c1$b.a` @type ^`java.lang.String` := v2 @kind object;
  #L3639dc.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.c1$b` v0 @kind this, `io.grpc.d1` v1 @kind object, `io.grpc.c1$a` v2 @kind object) @signature `Lio/grpc/c1$b;.<init>:(Lio/grpc/d1;Lio/grpc/c1$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3639f0.  call `<init>`(v0, v1) @signature `Lio/grpc/c1$b;.<init>:(Lio/grpc/d1;)V` @kind direct;
  #L3639f6.  return @kind void;
}
procedure `io.grpc.c1$b` `a`(`io.grpc.c1$b` v1 @kind this, `io.grpc.MethodDescriptor` v2 @kind object, `io.grpc.a1` v3 @kind object) @signature `Lio/grpc/c1$b;.a:(Lio/grpc/MethodDescriptor;Lio/grpc/a1;)Lio/grpc/c1$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3638f4.  v0:= "method must not be null" @kind object;
  #L3638f8.  call temp:= `checkNotNull`(v2, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3638fe.  v2:= temp @kind object;
  #L363900.  v2:= (`io.grpc.MethodDescriptor`) v2 @kind object;
  #L363904.  v0:= "handler must not be null" @kind object;
  #L363908.  call temp:= `checkNotNull`(v3, v0) @signature `Lcom/google/common/base/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L36390e.  v3:= temp @kind object;
  #L363910.  v3:= (`io.grpc.a1`) v3 @kind object;
  #L363914.  call temp:= `a`(v2, v3) @signature `Lio/grpc/b1;.a:(Lio/grpc/MethodDescriptor;Lio/grpc/a1;)Lio/grpc/b1;` @kind static;
  #L36391a.  v2:= temp @kind object;
  #L36391c.  call temp:= `b`(v1, v2) @signature `Lio/grpc/c1$b;.b:(Lio/grpc/b1;)Lio/grpc/c1$b;` @kind virtual;
  #L363922.  v2:= temp @kind object;
  #L363924.  return v2 @kind object;
}
procedure `io.grpc.c1$b` `b`(`io.grpc.c1$b` v5 @kind this, `io.grpc.b1` v6 @kind object) @signature `Lio/grpc/c1$b;.b:(Lio/grpc/b1;)Lio/grpc/c1$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L363938.  call temp:= `b`(v6) @signature `Lio/grpc/b1;.b:()Lio/grpc/MethodDescriptor;` @kind virtual;
  #L36393e.  v0:= temp @kind object;
  #L363940.  v1:= v5.`io.grpc.c1$b.a` @type ^`java.lang.String` @kind object;
  #L363944.  call temp:= `d`(v0) @signature `Lio/grpc/MethodDescriptor;.d:()Ljava/lang/String;` @kind virtual;
  #L36394a.  v2:= temp @kind object;
  #L36394c.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L363952.  v1:= temp;
  #L363954.  v2:= v5.`io.grpc.c1$b.a` @type ^`java.lang.String` @kind object;
  #L363958.  call temp:= `c`(v0) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L36395e.  v3:= temp @kind object;
  #L363960.  v4:= "Method name should be prefixed with service name and separated with '/'. Expected service name: '%s'. Actual fully qualifed method name: '%s'." @kind object;
  #L363964.  call `checkArgument`(v1, v4, v2, v3) @signature `Lcom/google/common/base/Preconditions;.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L36396a.  call temp:= `c`(v0) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L363970.  v0:= temp @kind object;
  #L363972.  v1:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L363976.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L36397c.  v1:= temp;
  #L36397e.  v1:= v1 ^~ 1;
  #L363982.  v2:= "Method by same name already registered: %s" @kind object;
  #L363986.  call `checkState`(v1, v2, v0) @signature `Lcom/google/common/base/Preconditions;.checkState:(ZLjava/lang/String;Ljava/lang/Object;)V` @kind static;
  #L36398c.  v1:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L363990.  call temp:= `put`(v1, v0, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L363996.  return v5 @kind object;
}
procedure `io.grpc.c1` `c`(`io.grpc.c1$b` v5 @kind this) @signature `Lio/grpc/c1$b;.c:()Lio/grpc/c1;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L363730.  v0:= v5.`io.grpc.c1$b.b` @type ^`io.grpc.d1` @kind object;
  #L363734.  if v0 != 0 then goto L36379a;
  #L363738.  v0:= new `java.util.ArrayList`;
  #L36373c.  v1:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L363740.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L363746.  v1:= temp;
  #L363748.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L36374e.  v1:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L363752.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L363758.  v1:= temp @kind object;
  #L36375a.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L363760.  v1:= temp @kind object;
  #L363762.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L363768.  v2:= temp;
  #L36376a.  if v2 == 0 then goto L36378a;
  #L36376e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L363774.  v2:= temp @kind object;
  #L363776.  v2:= (`io.grpc.b1`) v2 @kind object;
  #L36377a.  call temp:= `b`(v2) @signature `Lio/grpc/b1;.b:()Lio/grpc/MethodDescriptor;` @kind virtual;
  #L363780.  v2:= temp @kind object;
  #L363782.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L363788.  goto L363762;
  #L36378a.  v1:= new `io.grpc.d1`;
  #L36378e.  v2:= v5.`io.grpc.c1$b.a` @type ^`java.lang.String` @kind object;
  #L363792.  call `<init>`(v1, v2, v0) @signature `Lio/grpc/d1;.<init>:(Ljava/lang/String;Ljava/util/Collection;)V` @kind direct;
  #L363798.  v0:= v1 @kind object;
  #L36379a.  v1:= new `java.util.HashMap`;
  #L36379e.  v2:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L3637a2.  call `<init>`(v1, v2) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3637a8.  call temp:= `a`(v0) @signature `Lio/grpc/d1;.a:()Ljava/util/Collection;` @kind virtual;
  #L3637ae.  v2:= temp @kind object;
  #L3637b0.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3637b6.  v2:= temp @kind object;
  #L3637b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3637be.  v3:= temp;
  #L3637c0.  if v3 == 0 then goto L36386c;
  #L3637c4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3637ca.  v3:= temp @kind object;
  #L3637cc.  v3:= (`io.grpc.MethodDescriptor`) v3 @kind object;
  #L3637d0.  call temp:= `c`(v3) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L3637d6.  v4:= temp @kind object;
  #L3637d8.  call temp:= `remove`(v1, v4) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3637de.  v4:= temp @kind object;
  #L3637e0.  v4:= (`io.grpc.b1`) v4 @kind object;
  #L3637e4.  if v4 == 0 then goto L363836;
  #L3637e8.  call temp:= `b`(v4) @signature `Lio/grpc/b1;.b:()Lio/grpc/MethodDescriptor;` @kind virtual;
  #L3637ee.  v4:= temp @kind object;
  #L3637f0.  if v4 != v3 then goto L3637f6;
  #L3637f4.  goto L3637b8;
  #L3637f6.  v0:= new `java.lang.IllegalStateException`;
  #L3637fa.  v1:= new `java.lang.StringBuilder`;
  #L3637fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L363804.  v2:= "Bound method for " @kind object;
  #L363808.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36380e.  call temp:= `c`(v3) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L363814.  v2:= temp @kind object;
  #L363816.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36381c.  v2:= " not same instance as method in service descriptor" @kind object;
  #L363820.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L363826.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36382c.  v1:= temp @kind object;
  #L36382e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L363834.  throw v0;
  #L363836.  v0:= new `java.lang.IllegalStateException`;
  #L36383a.  v1:= new `java.lang.StringBuilder`;
  #L36383e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L363844.  v2:= "No method bound for descriptor entry " @kind object;
  #L363848.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36384e.  call temp:= `c`(v3) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L363854.  v2:= temp @kind object;
  #L363856.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36385c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L363862.  v1:= temp @kind object;
  #L363864.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36386a.  throw v0;
  #L36386c.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L363872.  v2:= temp;
  #L363874.  if v2 > 0 then goto L36388a;
  #L363878.  v1:= new `io.grpc.c1`;
  #L36387c.  v2:= v5.`io.grpc.c1$b.c` @type ^`java.util.Map` @kind object;
  #L363880.  v3:= 0I;
  #L363882.  call `<init>`(v1, v0, v2, v3) @signature `Lio/grpc/c1;.<init>:(Lio/grpc/d1;Ljava/util/Map;Lio/grpc/c1$a;)V` @kind direct;
  #L363888.  return v1 @kind object;
  #L36388a.  v0:= new `java.lang.IllegalStateException`;
  #L36388e.  v2:= new `java.lang.StringBuilder`;
  #L363892.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L363898.  v3:= "No entry in descriptor matching bound method " @kind object;
  #L36389c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3638a2.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3638a8.  v1:= temp @kind object;
  #L3638aa.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3638b0.  v1:= temp @kind object;
  #L3638b2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3638b8.  v1:= temp @kind object;
  #L3638ba.  v1:= (`io.grpc.b1`) v1 @kind object;
  #L3638be.  call temp:= `b`(v1) @signature `Lio/grpc/b1;.b:()Lio/grpc/MethodDescriptor;` @kind virtual;
  #L3638c4.  v1:= temp @kind object;
  #L3638c6.  call temp:= `c`(v1) @signature `Lio/grpc/MethodDescriptor;.c:()Ljava/lang/String;` @kind virtual;
  #L3638cc.  v1:= temp @kind object;
  #L3638ce.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3638d4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3638da.  v1:= temp @kind object;
  #L3638dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3638e2.  throw v0;
}
