record `y2.k` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `y2.k.a` @AccessFlag PRIVATE;
  `int`[] `y2.k.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`y2.k` v1 @kind this) @signature `Ly2/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e334.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e33a.  v0:= 10I;
  #L40e33e.  v0:= new `int`[v0];
  #L40e342.  v1.`y2.k.b` @type ^`int`[] := v0 @kind object;
  #L40e346.  return @kind void;
}
procedure `void` `a`(`y2.k` v2 @kind this) @signature `Ly2/k;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40e358.  v0:= 0I;
  #L40e35a.  v2.`y2.k.a` @type ^`int` := v0;
  #L40e35e.  v1:= v2.`y2.k.b` @type ^`int`[] @kind object;
  #L40e362.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L40e368.  return @kind void;
}
procedure `int` `b`(`y2.k` v1 @kind this, `int` v2 ) @signature `Ly2/k;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L40e24c.  v0:= v1.`y2.k.b` @type ^`int`[] @kind object;
  #L40e250.  v2:= v0[v2];
  #L40e254.  return v2;
}
procedure `int` `c`(`y2.k` v2 @kind this) @signature `Ly2/k;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40e268.  v0:= v2.`y2.k.a` @type ^`int`;
  #L40e26c.  v0:= v0 ^& 2;
  #L40e270.  if v0 == 0 then goto L40e280;
  #L40e274.  v0:= v2.`y2.k.b` @type ^`int`[] @kind object;
  #L40e278.  v1:= 1I;
  #L40e27a.  v0:= v0[v1];
  #L40e27e.  goto L40e282;
  #L40e280.  v0:= -1I;
  #L40e282.  return v0;
}
procedure `int` `d`(`y2.k` v2 @kind this) @signature `Ly2/k;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40e294.  v0:= v2.`y2.k.a` @type ^`int`;
  #L40e298.  v0:= v0 ^& 128;
  #L40e29c.  if v0 == 0 then goto L40e2ac;
  #L40e2a0.  v0:= v2.`y2.k.b` @type ^`int`[] @kind object;
  #L40e2a4.  v1:= 7I;
  #L40e2a6.  v0:= v0[v1];
  #L40e2aa.  goto L40e2b2;
  #L40e2ac.  v0:= 65535I;
  #L40e2b2.  return v0;
}
procedure `int` `e`(`y2.k` v1 @kind this, `int` v2 ) @signature `Ly2/k;.e:(I)I` @AccessFlag  {
    temp;
    v0;

  #L40e2c4.  v0:= v1.`y2.k.a` @type ^`int`;
  #L40e2c8.  v0:= v0 ^& 16;
  #L40e2cc.  if v0 == 0 then goto L40e2da;
  #L40e2d0.  v2:= v1.`y2.k.b` @type ^`int`[] @kind object;
  #L40e2d4.  v0:= 4I;
  #L40e2d6.  v2:= v2[v0];
  #L40e2da.  return v2;
}
procedure `int` `f`(`y2.k` v1 @kind this, `int` v2 ) @signature `Ly2/k;.f:(I)I` @AccessFlag  {
    temp;
    v0;

  #L40e2ec.  v0:= v1.`y2.k.a` @type ^`int`;
  #L40e2f0.  v0:= v0 ^& 32;
  #L40e2f4.  if v0 == 0 then goto L40e302;
  #L40e2f8.  v2:= v1.`y2.k.b` @type ^`int`[] @kind object;
  #L40e2fc.  v0:= 5I;
  #L40e2fe.  v2:= v2[v0];
  #L40e302.  return v2;
}
procedure `boolean` `g`(`y2.k` v2 @kind this, `int` v3 ) @signature `Ly2/k;.g:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40e224.  v0:= 1I;
  #L40e226.  v3:= v0 ^< v3 @kind int;
  #L40e22a.  v1:= v2.`y2.k.a` @type ^`int`;
  #L40e22e.  v3:= v3 ^& v1 @kind int;
  #L40e230.  if v3 == 0 then goto L40e236;
  #L40e234.  goto L40e238;
  #L40e236.  v0:= 0I;
  #L40e238.  return v0;
}
procedure `void` `h`(`y2.k` v2 @kind this, `y2.k` v3 @kind object) @signature `Ly2/k;.h:(Ly2/k;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L40e37c.  v0:= 0I;
  #L40e37e.  v1:= 10I;
  #L40e382.  if v0 >= v1 then goto L40e3a8;
  #L40e386.  call temp:= `g`(v3, v0) @signature `Ly2/k;.g:(I)Z` @kind virtual;
  #L40e38c.  v1:= temp;
  #L40e38e.  if v1 != 0 then goto L40e394;
  #L40e392.  goto L40e3a2;
  #L40e394.  call temp:= `b`(v3, v0) @signature `Ly2/k;.b:(I)I` @kind virtual;
  #L40e39a.  v1:= temp;
  #L40e39c.  call temp:= `i`(v2, v0, v1) @signature `Ly2/k;.i:(II)Ly2/k;` @kind virtual;
  #L40e3a2.  v0:= v0 + 1;
  #L40e3a6.  goto L40e37e;
  #L40e3a8.  return @kind void;
}
procedure `y2.k` `i`(`y2.k` v3 @kind this, `int` v4 , `int` v5 ) @signature `Ly2/k;.i:(II)Ly2/k;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L40e3bc.  if v4 < 0 then goto L40e3de;
  #L40e3c0.  v0:= v3.`y2.k.b` @type ^`int`[] @kind object;
  #L40e3c4.  v1:= length @variable v0;
  #L40e3c6.  if v4 < v1 then goto L40e3cc;
  #L40e3ca.  goto L40e3de;
  #L40e3cc.  v1:= 1I;
  #L40e3ce.  v1:= v1 ^< v4 @kind int;
  #L40e3d0.  v2:= v3.`y2.k.a` @type ^`int`;
  #L40e3d4.  v1:= v1 ^| v2 @kind int;
  #L40e3d6.  v3.`y2.k.a` @type ^`int` := v1;
  #L40e3da.  v0[v4]:= v5;
  #L40e3de.  return v3 @kind object;
}
procedure `int` `j`(`y2.k` v1 @kind this) @signature `Ly2/k;.j:()I` @AccessFlag  {
    temp;
    v0;

  #L40e314.  v0:= v1.`y2.k.a` @type ^`int`;
  #L40e318.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L40e31e.  v0:= temp;
  #L40e320.  return v0;
}
