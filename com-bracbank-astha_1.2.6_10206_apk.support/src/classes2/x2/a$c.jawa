record `x2.a$c` @kind class @AccessFlag FINAL extends `okio.p` @kind interface {
  `okio.h` `x2.a$c.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `x2.a$c.b` @AccessFlag PRIVATE;
  `x2.a` `x2.a$c.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`x2.a$c` v1 @kind this, `x2.a` v2 @kind object) @signature `Lx2/a$c;.<init>:(Lx2/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L406cb0.  v1.`x2.a$c.c` @type ^`x2.a` := v2 @kind object;
  #L406cb4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L406cba.  v0:= new `okio.h`;
  #L406cbe.  v2:= v2.`x2.a.d` @type ^`okio.d` @kind object;
  #L406cc2.  call temp:= `e`(v2) @signature `Lokio/p;.e:()Lokio/r;` @kind interface;
  #L406cc8.  v2:= temp @kind object;
  #L406cca.  call `<init>`(v0, v2) @signature `Lokio/h;.<init>:(Lokio/r;)V` @kind direct;
  #L406cd0.  v1.`x2.a$c.a` @type ^`okio.h` := v0 @kind object;
  #L406cd4.  return @kind void;
}
procedure `void` `A`(`x2.a$c` v3 @kind this, `okio.c` v4 @kind object, `long` v5 ) @signature `Lx2/a$c;.A:(Lokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L406da0.  v0:= v3.`x2.a$c.b` @type ^`boolean` @kind boolean;
  #L406da4.  if v0 != 0 then goto L406df4;
  #L406da8.  v0:= 0L;
  #L406dac.  v2:= lcmp(v5, v0);
  #L406db0.  if v2 != 0 then goto L406db6;
  #L406db4.  return @kind void;
  #L406db6.  v0:= v3.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406dba.  v0:= v0.`x2.a.d` @type ^`okio.d` @kind object;
  #L406dbe.  call temp:= `B`(v0, v5) @signature `Lokio/d;.B:(J)Lokio/d;` @kind interface;
  #L406dc4.  v0:= v3.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406dc8.  v0:= v0.`x2.a.d` @type ^`okio.d` @kind object;
  #L406dcc.  v1:= "\r\n" @kind object;
  #L406dd0.  call temp:= `u`(v0, v1) @signature `Lokio/d;.u:(Ljava/lang/String;)Lokio/d;` @kind interface;
  #L406dd6.  v0:= v3.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406dda.  v0:= v0.`x2.a.d` @type ^`okio.d` @kind object;
  #L406dde.  call `A`(v0, v4, v5) @signature `Lokio/p;.A:(Lokio/c;J)V` @kind interface;
  #L406de4.  v4:= v3.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406de8.  v4:= v4.`x2.a.d` @type ^`okio.d` @kind object;
  #L406dec.  call temp:= `u`(v4, v1) @signature `Lokio/d;.u:(Ljava/lang/String;)Lokio/d;` @kind interface;
  #L406df2.  return @kind void;
  #L406df4.  v4:= new `java.lang.IllegalStateException`;
  #L406df8.  v5:= "closed" @kind object;
  #L406dfc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406e02.  throw v4;
}
procedure `void` `close`(`x2.a$c` v2 @kind this) @signature `Lx2/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406ce8.  @monitorenter v2
  #L406cea.  v0:= v2.`x2.a$c.b` @type ^`boolean` @kind boolean;
  #L406cee.  if v0 == 0 then goto L406cf6;
  #L406cf2.  @monitorexit v2
  #L406cf4.  return @kind void;
  #L406cf6.  v0:= 1I;
  #L406cf8.  v2.`x2.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L406cfc.  v0:= v2.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406d00.  v0:= v0.`x2.a.d` @type ^`okio.d` @kind object;
  #L406d04.  v1:= "0\r\n\r\n" @kind object;
  #L406d08.  call temp:= `u`(v0, v1) @signature `Lokio/d;.u:(Ljava/lang/String;)Lokio/d;` @kind interface;
  #L406d0e.  v0:= v2.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406d12.  v1:= v2.`x2.a$c.a` @type ^`okio.h` @kind object;
  #L406d16.  call `g`(v0, v1) @signature `Lx2/a;.g:(Lokio/h;)V` @kind virtual;
  #L406d1c.  v0:= v2.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406d20.  v1:= 3I;
  #L406d22.  v0.`x2.a.e` @type ^`int` := v1;
  #L406d26.  @monitorexit v2
  #L406d28.  return @kind void;
  #L406d2a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406d2c.  @monitorexit v2
  #L406d2e.  throw v0;
  catch `java.lang.Throwable` @[L406cea..L406cee] goto L406d2a;
  catch `java.lang.Throwable` @[L406cf8..L406d26] goto L406d2a;
}
procedure `okio.r` `e`(`x2.a$c` v1 @kind this) @signature `Lx2/a$c;.e:()Lokio/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406c98.  v0:= v1.`x2.a$c.a` @type ^`okio.h` @kind object;
  #L406c9c.  return v0 @kind object;
}
procedure `void` `flush`(`x2.a$c` v1 @kind this) @signature `Lx2/a$c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L406d54.  @monitorenter v1
  #L406d56.  v0:= v1.`x2.a$c.b` @type ^`boolean` @kind boolean;
  #L406d5a.  if v0 == 0 then goto L406d62;
  #L406d5e.  @monitorexit v1
  #L406d60.  return @kind void;
  #L406d62.  v0:= v1.`x2.a$c.c` @type ^`x2.a` @kind object;
  #L406d66.  v0:= v0.`x2.a.d` @type ^`okio.d` @kind object;
  #L406d6a.  call `flush`(v0) @signature `Lokio/d;.flush:()V` @kind interface;
  #L406d70.  @monitorexit v1
  #L406d72.  return @kind void;
  #L406d74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L406d76.  @monitorexit v1
  #L406d78.  throw v0;
  catch `java.lang.Throwable` @[L406d56..L406d5a] goto L406d74;
  catch `java.lang.Throwable` @[L406d62..L406d70] goto L406d74;
}
