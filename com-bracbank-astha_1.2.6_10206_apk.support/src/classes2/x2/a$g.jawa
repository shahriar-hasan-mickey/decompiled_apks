record `x2.a$g` @kind class @AccessFlag  extends `x2.a$b` @kind class {
  `boolean` `x2.a$g.e` @AccessFlag PRIVATE;
  `x2.a` `x2.a$g.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`x2.a$g` v1 @kind this, `x2.a` v2 @kind object) @signature `Lx2/a$g;.<init>:(Lx2/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4073fc.  v1.`x2.a$g.f` @type ^`x2.a` := v2 @kind object;
  #L407400.  v0:= 0I;
  #L407402.  call `<init>`(v1, v2, v0) @signature `Lx2/a$b;.<init>:(Lx2/a;Lx2/a$a;)V` @kind direct;
  #L407408.  return @kind void;
}
procedure `long` `I`(`x2.a$g` v3 @kind this, `okio.c` v4 @kind object, `long` v5 ) @signature `Lx2/a$g;.I:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L407368.  v0:= 0L;
  #L40736c.  v2:= lcmp(v5, v0);
  #L407370.  if v2 < 0 then goto L4073bc;
  #L407374.  v0:= v3.`x2.a$b.b` @type ^`boolean` @kind boolean;
  #L407378.  if v0 != 0 then goto L4073ac;
  #L40737c.  v0:= v3.`x2.a$g.e` @type ^`boolean` @kind boolean;
  #L407380.  v1:= -1L;
  #L407384.  if v0 == 0 then goto L40738a;
  #L407388.  return v1 @kind wide;
  #L40738a.  call temp:= `I`(v3, v4, v5) @signature `Lx2/a$b;.I:(Lokio/c;J)J` @kind super;
  #L407390.  v4:= temp @kind wide;
  #L407392.  v6:= lcmp(v4, v1);
  #L407396.  if v6 != 0 then goto L4073aa;
  #L40739a.  v4:= 1I;
  #L40739c.  v3.`x2.a$g.e` @type ^`boolean` := v4 @kind boolean;
  #L4073a0.  v5:= 0I;
  #L4073a2.  call `g`(v3, v4, v5) @signature `Lx2/a$b;.g:(ZLjava/io/IOException;)V` @kind virtual;
  #L4073a8.  return v1 @kind wide;
  #L4073aa.  return v4 @kind wide;
  #L4073ac.  v4:= new `java.lang.IllegalStateException`;
  #L4073b0.  v5:= "closed" @kind object;
  #L4073b4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4073ba.  throw v4;
  #L4073bc.  v4:= new `java.lang.IllegalArgumentException`;
  #L4073c0.  v0:= new `java.lang.StringBuilder`;
  #L4073c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4073ca.  v1:= "byteCount < 0: " @kind object;
  #L4073ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4073d4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4073da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4073e0.  v5:= temp @kind object;
  #L4073e2.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4073e8.  throw v4;
}
procedure `void` `close`(`x2.a$g` v2 @kind this) @signature `Lx2/a$g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40741c.  v0:= v2.`x2.a$b.b` @type ^`boolean` @kind boolean;
  #L407420.  if v0 == 0 then goto L407426;
  #L407424.  return @kind void;
  #L407426.  v0:= v2.`x2.a$g.e` @type ^`boolean` @kind boolean;
  #L40742a.  if v0 != 0 then goto L407438;
  #L40742e.  v0:= 0I;
  #L407430.  v1:= 0I;
  #L407432.  call `g`(v2, v0, v1) @signature `Lx2/a$b;.g:(ZLjava/io/IOException;)V` @kind virtual;
  #L407438.  v0:= 1I;
  #L40743a.  v2.`x2.a$b.b` @type ^`boolean` := v0 @kind boolean;
  #L40743e.  return @kind void;
}
