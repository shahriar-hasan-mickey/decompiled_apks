record `x2.a$d` @kind class @AccessFlag  extends `x2.a$b` @kind class {
  `okhttp3.r` `x2.a$d.e` @AccessFlag PRIVATE_FINAL;
  `long` `x2.a$d.f` @AccessFlag PRIVATE;
  `boolean` `x2.a$d.g` @AccessFlag PRIVATE;
  `x2.a` `x2.a$d.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`x2.a$d` v2 @kind this, `x2.a` v3 @kind object, `okhttp3.r` v4 @kind object) @signature `Lx2/a$d;.<init>:(Lx2/a;Lokhttp3/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L406ee8.  v2.`x2.a$d.h` @type ^`x2.a` := v3 @kind object;
  #L406eec.  v0:= 0I;
  #L406eee.  call `<init>`(v2, v3, v0) @signature `Lx2/a$b;.<init>:(Lx2/a;Lx2/a$a;)V` @kind direct;
  #L406ef4.  v0:= -1L;
  #L406ef8.  v2.`x2.a$d.f` @type ^`long` := v0 @kind wide;
  #L406efc.  v3:= 1I;
  #L406efe.  v2.`x2.a$d.g` @type ^`boolean` := v3 @kind boolean;
  #L406f02.  v2.`x2.a$d.e` @type ^`okhttp3.r` := v4 @kind object;
  #L406f06.  return @kind void;
}
procedure `void` `h`(`x2.a$d` v6 @kind this) @signature `Lx2/a$d;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L406f60.  v0:= v6.`x2.a$d.f` @type ^`long` @kind wide;
  #L406f64.  v2:= -1L;
  #L406f68.  v4:= lcmp(v0, v2);
  #L406f6c.  if v4 == 0 then goto L406f7e;
  #L406f70.  v0:= v6.`x2.a$d.h` @type ^`x2.a` @kind object;
  #L406f74.  v0:= v0.`x2.a.c` @type ^`okio.e` @kind object;
  #L406f78.  call temp:= `D`(v0) @signature `Lokio/e;.D:()Ljava/lang/String;` @kind interface;
  #L406f7e.  v0:= v6.`x2.a$d.h` @type ^`x2.a` @kind object;
  #L406f82.  v0:= v0.`x2.a.c` @type ^`okio.e` @kind object;
  #L406f86.  call temp:= `Q`(v0) @signature `Lokio/e;.Q:()J` @kind interface;
  #L406f8c.  v0:= temp @kind wide;
  #L406f8e.  v6.`x2.a$d.f` @type ^`long` := v0 @kind wide;
  #L406f92.  v0:= v6.`x2.a$d.h` @type ^`x2.a` @kind object;
  #L406f96.  v0:= v0.`x2.a.c` @type ^`okio.e` @kind object;
  #L406f9a.  call temp:= `D`(v0) @signature `Lokio/e;.D:()Ljava/lang/String;` @kind interface;
  #L406fa0.  v0:= temp @kind object;
  #L406fa2.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L406fa8.  v0:= temp @kind object;
  #L406faa.  v1:= v6.`x2.a$d.f` @type ^`long` @kind wide;
  #L406fae.  v3:= 0L;
  #L406fb2.  v5:= lcmp(v1, v3);
  #L406fb6.  if v5 < 0 then goto L40701a;
  #L406fba.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L406fc0.  v1:= temp;
  #L406fc2.  if v1 != 0 then goto L406fd6;
  #L406fc6.  v1:= ";" @kind object;
  #L406fca.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L406fd0.  v1:= temp;
  #L406fd2.  if v1 == 0 then goto L40701a;
  #L406fd6.  v0:= v6.`x2.a$d.f` @type ^`long` @kind wide;
  #L406fda.  v2:= lcmp(v0, v3);
  #L406fde.  if v2 != 0 then goto L407018;
  #L406fe2.  v0:= 0I;
  #L406fe4.  v6.`x2.a$d.g` @type ^`boolean` := v0 @kind boolean;
  #L406fe8.  v0:= v6.`x2.a$d.h` @type ^`x2.a` @kind object;
  #L406fec.  v0:= v0.`x2.a.a` @type ^`okhttp3.u` @kind object;
  #L406ff0.  call temp:= `i`(v0) @signature `Lokhttp3/u;.i:()Lokhttp3/l;` @kind virtual;
  #L406ff6.  v0:= temp @kind object;
  #L406ff8.  v1:= v6.`x2.a$d.e` @type ^`okhttp3.r` @kind object;
  #L406ffc.  v2:= v6.`x2.a$d.h` @type ^`x2.a` @kind object;
  #L407000.  call temp:= `n`(v2) @signature `Lx2/a;.n:()Lokhttp3/q;` @kind virtual;
  #L407006.  v2:= temp @kind object;
  #L407008.  call `e`(v0, v1, v2) @signature `Lw2/e;.e:(Lokhttp3/l;Lokhttp3/r;Lokhttp3/q;)V` @kind static;
  #L40700e.  v0:= 1I;
  #L407010.  v1:= 0I;
  #L407012.  call `g`(v6, v0, v1) @signature `Lx2/a$b;.g:(ZLjava/io/IOException;)V` @kind virtual;
  #L407018.  return @kind void;
  #L40701a.  v1:= new `java.net.ProtocolException`;
  #L40701e.  v2:= new `java.lang.StringBuilder`;
  #L407022.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L407028.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L40702c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L407032.  v3:= v6.`x2.a$d.f` @type ^`long` @kind wide;
  #L407036.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L40703c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L407042.  v0:= "\"" @kind object;
  #L407046.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40704c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L407052.  v0:= temp @kind object;
  #L407054.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40705a.  throw v1;
  #L40705c.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L40705e.  v1:= new `java.net.ProtocolException`;
  #L407062.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L407068.  v0:= temp @kind object;
  #L40706a.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L407070.  throw v1;
  catch `java.lang.NumberFormatException` @[L406f7e..L406fd2] goto L40705c;
  catch `java.lang.NumberFormatException` @[L40701a..L40705c] goto L40705c;
}
procedure `long` `I`(`x2.a$d` v7 @kind this, `okio.c` v8 @kind object, `long` v9 ) @signature `Lx2/a$d;.I:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L406e14.  v0:= 0L;
  #L406e18.  v2:= lcmp(v9, v0);
  #L406e1c.  if v2 < 0 then goto L406eaa;
  #L406e20.  v2:= v7.`x2.a$b.b` @type ^`boolean` @kind boolean;
  #L406e24.  if v2 != 0 then goto L406e9a;
  #L406e28.  v2:= v7.`x2.a$d.g` @type ^`boolean` @kind boolean;
  #L406e2c.  v3:= -1L;
  #L406e30.  if v2 != 0 then goto L406e36;
  #L406e34.  return v3 @kind wide;
  #L406e36.  v5:= v7.`x2.a$d.f` @type ^`long` @kind wide;
  #L406e3a.  v2:= lcmp(v5, v0);
  #L406e3e.  if v2 == 0 then goto L406e4a;
  #L406e42.  v0:= lcmp(v5, v3);
  #L406e46.  if v0 != 0 then goto L406e5a;
  #L406e4a.  call `h`(v7) @signature `Lx2/a$d;.h:()V` @kind direct;
  #L406e50.  v0:= v7.`x2.a$d.g` @type ^`boolean` @kind boolean;
  #L406e54.  if v0 != 0 then goto L406e5a;
  #L406e58.  return v3 @kind wide;
  #L406e5a.  v0:= v7.`x2.a$d.f` @type ^`long` @kind wide;
  #L406e5e.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L406e64.  v9:= temp @kind wide;
  #L406e66.  call temp:= `I`(v7, v8, v9) @signature `Lx2/a$b;.I:(Lokio/c;J)J` @kind super;
  #L406e6c.  v8:= temp @kind wide;
  #L406e6e.  v10:= lcmp(v8, v3);
  #L406e72.  if v10 == 0 then goto L406e82;
  #L406e76.  v0:= v7.`x2.a$d.f` @type ^`long` @kind wide;
  #L406e7a.  v0:= v0 - v8 @kind long;
  #L406e7c.  v7.`x2.a$d.f` @type ^`long` := v0 @kind wide;
  #L406e80.  return v8 @kind wide;
  #L406e82.  v8:= new `java.net.ProtocolException`;
  #L406e86.  v9:= "unexpected end of stream" @kind object;
  #L406e8a.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406e90.  v9:= 0I;
  #L406e92.  call `g`(v7, v9, v8) @signature `Lx2/a$b;.g:(ZLjava/io/IOException;)V` @kind virtual;
  #L406e98.  throw v8;
  #L406e9a.  v8:= new `java.lang.IllegalStateException`;
  #L406e9e.  v9:= "closed" @kind object;
  #L406ea2.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406ea8.  throw v8;
  #L406eaa.  v8:= new `java.lang.IllegalArgumentException`;
  #L406eae.  v0:= new `java.lang.StringBuilder`;
  #L406eb2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L406eb8.  v1:= "byteCount < 0: " @kind object;
  #L406ebc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L406ec2.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L406ec8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L406ece.  v9:= temp @kind object;
  #L406ed0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L406ed6.  throw v8;
}
procedure `void` `close`(`x2.a$d` v2 @kind this) @signature `Lx2/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L406f18.  v0:= v2.`x2.a$b.b` @type ^`boolean` @kind boolean;
  #L406f1c.  if v0 == 0 then goto L406f22;
  #L406f20.  return @kind void;
  #L406f22.  v0:= v2.`x2.a$d.g` @type ^`boolean` @kind boolean;
  #L406f26.  if v0 == 0 then goto L406f48;
  #L406f2a.  v0:= 100I;
  #L406f2e.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L406f32.  call temp:= `p`(v2, v0, v1) @signature `Lt2/c;.p:(Lokio/q;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L406f38.  v0:= temp;
  #L406f3a.  if v0 != 0 then goto L406f48;
  #L406f3e.  v0:= 0I;
  #L406f40.  v1:= 0I;
  #L406f42.  call `g`(v2, v0, v1) @signature `Lx2/a$b;.g:(ZLjava/io/IOException;)V` @kind virtual;
  #L406f48.  v0:= 1I;
  #L406f4a.  v2.`x2.a$b.b` @type ^`boolean` := v0 @kind boolean;
  #L406f4e.  return @kind void;
}
