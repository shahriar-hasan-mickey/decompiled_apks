record `kotlin.SynchronizedLazyImpl` @kind class @AccessFlag FINAL extends `p2.c` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.Object` `kotlin.SynchronizedLazyImpl._value` @AccessFlag PRIVATE_VOLATILE;
  `q2.a` `kotlin.SynchronizedLazyImpl.initializer` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.SynchronizedLazyImpl.lock` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.SynchronizedLazyImpl` v1 @kind this, `q2.a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/SynchronizedLazyImpl;.<init>:(Lq2/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39fd60.  v0:= "initializer" @kind object;
  #L39fd64.  call `c`(v2, v0) @signature `Lr2/c;.c:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L39fd6a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39fd70.  v1.`kotlin.SynchronizedLazyImpl.initializer` @type ^`q2.a` := v2 @kind object;
  #L39fd74.  v2:= `@@p2.d.a` @type ^`p2.d` @kind object;
  #L39fd78.  v1.`kotlin.SynchronizedLazyImpl._value` @type ^`java.lang.Object` := v2 @kind object;
  #L39fd7c.  if v3 != 0 then goto L39fd82;
  #L39fd80.  v3:= v1 @kind object;
  #L39fd82.  v1.`kotlin.SynchronizedLazyImpl.lock` @type ^`java.lang.Object` := v3 @kind object;
  #L39fd86.  return @kind void;
}
procedure `void` `<init>`(`kotlin.SynchronizedLazyImpl` v0 @kind this, `q2.a` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `r2.a` v4 @kind object) @signature `Lkotlin/SynchronizedLazyImpl;.<init>:(Lq2/a;Ljava/lang/Object;ILr2/a;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L39fd98.  v3:= v3 ^& 2;
  #L39fd9c.  if v3 == 0 then goto L39fda2;
  #L39fda0.  v2:= 0I;
  #L39fda2.  call `<init>`(v0, v1, v2) @signature `Lkotlin/SynchronizedLazyImpl;.<init>:(Lq2/a;Ljava/lang/Object;)V` @kind direct;
  #L39fda8.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.SynchronizedLazyImpl` v2 @kind this) @signature `Lkotlin/SynchronizedLazyImpl;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L39fd08.  v0:= new `kotlin.InitializedLazyImpl`;
  #L39fd0c.  call temp:= `getValue`(v2) @signature `Lkotlin/SynchronizedLazyImpl;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L39fd12.  v1:= temp @kind object;
  #L39fd14.  call `<init>`(v0, v1) @signature `Lkotlin/InitializedLazyImpl;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L39fd1a.  return v0 @kind object;
}
procedure `boolean` `a`(`kotlin.SynchronizedLazyImpl` v2 @kind this) @signature `Lkotlin/SynchronizedLazyImpl;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39fc84.  v0:= v2.`kotlin.SynchronizedLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L39fc88.  v1:= `@@p2.d.a` @type ^`p2.d` @kind object;
  #L39fc8c.  if v0 == v1 then goto L39fc94;
  #L39fc90.  v0:= 1I;
  #L39fc92.  goto L39fc96;
  #L39fc94.  v0:= 0I;
  #L39fc96.  return v0;
}
procedure `java.lang.Object` `getValue`(`kotlin.SynchronizedLazyImpl` v3 @kind this) @signature `Lkotlin/SynchronizedLazyImpl;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39fca8.  v0:= v3.`kotlin.SynchronizedLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L39fcac.  v1:= `@@p2.d.a` @type ^`p2.d` @kind object;
  #L39fcb0.  if v0 == v1 then goto L39fcb6;
  #L39fcb4.  return v0 @kind object;
  #L39fcb6.  v0:= v3.`kotlin.SynchronizedLazyImpl.lock` @type ^`java.lang.Object` @kind object;
  #L39fcba.  @monitorenter v0
  #L39fcbc.  v2:= v3.`kotlin.SynchronizedLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L39fcc0.  if v2 == v1 then goto L39fcc6;
  #L39fcc4.  goto L39fce2;
  #L39fcc6.  v1:= v3.`kotlin.SynchronizedLazyImpl.initializer` @type ^`q2.a` @kind object;
  #L39fcca.  call `a`(v1) @signature `Lr2/c;.a:(Ljava/lang/Object;)V` @kind static;
  #L39fcd0.  call temp:= `a`(v1) @signature `Lq2/a;.a:()Ljava/lang/Object;` @kind interface;
  #L39fcd6.  v2:= temp @kind object;
  #L39fcd8.  v3.`kotlin.SynchronizedLazyImpl._value` @type ^`java.lang.Object` := v2 @kind object;
  #L39fcdc.  v1:= 0I;
  #L39fcde.  v3.`kotlin.SynchronizedLazyImpl.initializer` @type ^`q2.a` := v1 @kind object;
  #L39fce2.  @monitorexit v0
  #L39fce4.  return v2 @kind object;
  #L39fce6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L39fce8.  @monitorexit v0
  #L39fcea.  throw v1;
  catch `java.lang.Throwable` @[L39fcbc..L39fce2] goto L39fce6;
}
procedure `java.lang.String` `toString`(`kotlin.SynchronizedLazyImpl` v1 @kind this) @signature `Lkotlin/SynchronizedLazyImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39fd2c.  call temp:= `a`(v1) @signature `Lkotlin/SynchronizedLazyImpl;.a:()Z` @kind virtual;
  #L39fd32.  v0:= temp;
  #L39fd34.  if v0 == 0 then goto L39fd4a;
  #L39fd38.  call temp:= `getValue`(v1) @signature `Lkotlin/SynchronizedLazyImpl;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L39fd3e.  v0:= temp @kind object;
  #L39fd40.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L39fd46.  v0:= temp @kind object;
  #L39fd48.  goto L39fd4e;
  #L39fd4a.  v0:= "Lazy value not initialized yet." @kind object;
  #L39fd4e.  return v0 @kind object;
}
