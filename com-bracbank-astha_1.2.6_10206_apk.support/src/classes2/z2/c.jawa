record `z2.c` @kind class @AccessFlag FINAL extends `z2.f` @kind class {
  `java.lang.reflect.Method` `z2.c.c` @AccessFlag FINAL;
  `java.lang.reflect.Method` `z2.c.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`z2.c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lz2/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411dd0.  call `<init>`(v0) @signature `Lz2/f;.<init>:()V` @kind direct;
  #L411dd6.  v0.`z2.c.c` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L411dda.  v0.`z2.c.d` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L411dde.  return @kind void;
}
procedure `z2.c` `r`() @signature `Lz2/c;.r:()Lz2/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L411e68.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L411e6c.  v1:= "setApplicationProtocols" @kind object;
  #L411e70.  v2:= 1I;
  #L411e72.  v2:= new `java.lang.Class`[v2];
  #L411e76.  v3:= constclass @type ^`java.lang.String`[] @kind object;
  #L411e7a.  v4:= 0I;
  #L411e7c.  v2[v4]:= v3 @kind object;
  #L411e80.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L411e86.  v0:= temp @kind object;
  #L411e88.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L411e8c.  v2:= "getApplicationProtocol" @kind object;
  #L411e90.  v3:= new `java.lang.Class`[v4];
  #L411e94.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L411e9a.  v1:= temp @kind object;
  #L411e9c.  v2:= new `z2.c`;
  #L411ea0.  call `<init>`(v2, v0, v1) @signature `Lz2/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L411ea6.  return v2 @kind object;
  #L411ea8.  v0:= 0I;
  #L411eaa.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L411e68..L411ea6] goto L411ea8;
}
procedure `void` `g`(`z2.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lz2/c;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411df0.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L411df6.  v6:= temp @kind object;
  #L411df8.  call temp:= `b`(v7) @signature `Lz2/f;.b:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L411dfe.  v7:= temp @kind object;
  #L411e00.  v0:= v4.`z2.c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L411e04.  v1:= 1I;
  #L411e06.  v1:= new `java.lang.Object`[v1];
  #L411e0a.  v2:= 0I;
  #L411e0c.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L411e12.  v3:= temp;
  #L411e14.  v3:= new `java.lang.String`[v3];
  #L411e18.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L411e1e.  v7:= temp @kind object;
  #L411e20.  v1[v2]:= v7 @kind object;
  #L411e24.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L411e2a.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L411e30.  return @kind void;
  #L411e32.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L411e34.  goto L411e38;
  #L411e36.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L411e38.  v6:= "unable to set ssl parameters" @kind object;
  #L411e3c.  call temp:= `b`(v6, v5) @signature `Lt2/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L411e42.  v5:= temp @kind object;
  #L411e44.  throw v5;
  catch `java.lang.IllegalAccessException` @[L411df0..L411e30] goto L411e36;
  catch `java.lang.reflect.InvocationTargetException` @[L411df0..L411e30] goto L411e32;
}
procedure `java.lang.String` `l`(`z2.c` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lz2/c;.l:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L411d68.  v0:= v2.`z2.c.d` @type ^`java.lang.reflect.Method` @kind object;
  #L411d6c.  v1:= 0I;
  #L411d6e.  v1:= new `java.lang.Object`[v1];
  #L411d72.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L411d78.  v3:= temp @kind object;
  #L411d7a.  v3:= (`java.lang.String`) v3 @kind object;
  #L411d7e.  if v3 == 0 then goto L411d96;
  #L411d82.  v0:= "" @kind object;
  #L411d86.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411d8c.  v0:= temp;
  #L411d8e.  if v0 == 0 then goto L411d94;
  #L411d92.  goto L411d96;
  #L411d94.  return v3 @kind object;
  #L411d96.  v3:= 0I;
  #L411d98.  return v3 @kind object;
  #L411d9a.  v3:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L411d9c.  goto L411da0;
  #L411d9e.  v3:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L411da0.  v0:= "unable to get selected protocols" @kind object;
  #L411da4.  call temp:= `b`(v0, v3) @signature `Lt2/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L411daa.  v3:= temp @kind object;
  #L411dac.  throw v3;
  catch `java.lang.IllegalAccessException` @[L411d68..L411d8e] goto L411d9e;
  catch `java.lang.reflect.InvocationTargetException` @[L411d68..L411d8e] goto L411d9a;
}
