record `z2.e` @kind class @AccessFlag  {
  `java.lang.Class` `z2.e.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `z2.e.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `z2.e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z2.e` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lz2/e;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L412568.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41256e.  v0.`z2.e.a` @type ^`java.lang.Class` := v1 @kind object;
  #L412572.  v0.`z2.e.b` @type ^`java.lang.String` := v2 @kind object;
  #L412576.  v0.`z2.e.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L41257a.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`z2.e` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lz2/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4124d0.  v0:= v3.`z2.e.b` @type ^`java.lang.String` @kind object;
  #L4124d4.  v1:= 0I;
  #L4124d6.  if v0 == 0 then goto L41250a;
  #L4124da.  v2:= v3.`z2.e.c` @type ^`java.lang.Class`[] @kind object;
  #L4124de.  call temp:= `b`(v4, v0, v2) @signature `Lz2/e;.b:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L4124e4.  v4:= temp @kind object;
  #L4124e6.  if v4 == 0 then goto L412508;
  #L4124ea.  v0:= v3.`z2.e.a` @type ^`java.lang.Class` @kind object;
  #L4124ee.  if v0 == 0 then goto L412508;
  #L4124f2.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L4124f8.  v2:= temp @kind object;
  #L4124fa.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L412500.  v0:= temp;
  #L412502.  if v0 != 0 then goto L412508;
  #L412506.  goto L41250a;
  #L412508.  v1:= v4 @kind object;
  #L41250a.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `b`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lz2/e;.b:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L41251c.  v0:= 0I;
  #L41251e.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L412524.  v1:= temp @kind object;
  #L412526.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L41252c.  v2:= temp;
  #L41252e.  v2:= v2 ^& 1;
  #L412532.  if v2 != 0 then goto L412538;
  #L412536.  goto L41253a;
  #L412538.  v0:= v1 @kind object;
  #L41253a.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L41251e..L412526] goto L41253a;
  catch `java.lang.NoSuchMethodException` @[L412526..L41252e] goto L412538;
}
procedure `java.lang.Object` `c`(`z2.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lz2/e;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L412324.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L41232a.  v0:= temp @kind object;
  #L41232c.  call temp:= `a`(v3, v0) @signature `Lz2/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L412332.  v0:= temp @kind object;
  #L412334.  if v0 == 0 then goto L412378;
  #L412338.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41233e.  v4:= temp @kind object;
  #L412340.  return v4 @kind object;
  #L412342.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L412344.  v5:= new `java.lang.AssertionError`;
  #L412348.  v1:= new `java.lang.StringBuilder`;
  #L41234c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412352.  v2:= "Unexpectedly could not call: " @kind object;
  #L412356.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41235c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412362.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412368.  v0:= temp @kind object;
  #L41236a.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L412370.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L412376.  throw v5;
  #L412378.  v5:= new `java.lang.AssertionError`;
  #L41237c.  v0:= new `java.lang.StringBuilder`;
  #L412380.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412386.  v1:= "Method " @kind object;
  #L41238a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412390.  v1:= v3.`z2.e.b` @type ^`java.lang.String` @kind object;
  #L412394.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41239a.  v1:= " not supported for object " @kind object;
  #L41239e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4123a4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4123aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4123b0.  v4:= temp @kind object;
  #L4123b2.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4123b8.  throw v5;
  catch `java.lang.IllegalAccessException` @[L412338..L412340] goto L412342;
}
procedure `java.lang.Object` `d`(`z2.e` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lz2/e;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4123dc.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4123e2.  v0:= temp @kind object;
  #L4123e4.  call temp:= `a`(v2, v0) @signature `Lz2/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L4123ea.  v0:= temp @kind object;
  #L4123ec.  v1:= 0I;
  #L4123ee.  if v0 != 0 then goto L4123f4;
  #L4123f2.  return v1 @kind object;
  #L4123f4.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4123fa.  v3:= temp @kind object;
  #L4123fc.  return v3 @kind object;
  #L4123fe.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L4123f4..L4123fc] goto L4123fe;
}
procedure `java.lang.Object` `e`(`z2.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lz2/e;.e:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412420.  call temp:= `d`(v1, v2, v3) @signature `Lz2/e;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L412426.  v2:= temp @kind object;
  #L412428.  return v2 @kind object;
  #L41242a.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L41242c.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L412432.  v2:= temp @kind object;
  #L412434.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L412438.  if v3 == 0 then goto L412442;
  #L41243c.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L412440.  throw v2;
  #L412442.  v3:= new `java.lang.AssertionError`;
  #L412446.  v0:= "Unexpected exception" @kind object;
  #L41244a.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L412450.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L412456.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L412420..L412428] goto L41242a;
}
procedure `java.lang.Object` `f`(`z2.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lz2/e;.f:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412478.  call temp:= `c`(v1, v2, v3) @signature `Lz2/e;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41247e.  v2:= temp @kind object;
  #L412480.  return v2 @kind object;
  #L412482.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L412484.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L41248a.  v2:= temp @kind object;
  #L41248c.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L412490.  if v3 == 0 then goto L41249a;
  #L412494.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L412498.  throw v2;
  #L41249a.  v3:= new `java.lang.AssertionError`;
  #L41249e.  v0:= "Unexpected exception" @kind object;
  #L4124a2.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4124a8.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4124ae.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L412478..L412480] goto L412482;
}
procedure `boolean` `g`(`z2.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lz2/e;.g:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4122f8.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4122fe.  v1:= temp @kind object;
  #L412300.  call temp:= `a`(v0, v1) @signature `Lz2/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L412306.  v1:= temp @kind object;
  #L412308.  if v1 == 0 then goto L412310;
  #L41230c.  v1:= 1I;
  #L41230e.  goto L412312;
  #L412310.  v1:= 0I;
  #L412312.  return v1;
}
