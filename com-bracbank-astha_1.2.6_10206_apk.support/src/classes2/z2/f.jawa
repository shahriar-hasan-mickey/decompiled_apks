record `z2.f` @kind class @AccessFlag PUBLIC {
}
global `z2.f` `@@z2.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.logging.Logger` `@@z2.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lz2/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4127f0.  call temp:= `i`() @signature `Lz2/f;.i:()Lz2/f;` @kind static;
  #L4127f6.  v0:= temp @kind object;
  #L4127f8.  `@@z2.f.a` @type ^`z2.f` := v0 @kind object;
  #L4127fc.  v0:= constclass @type ^`okhttp3.u` @kind object;
  #L412800.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L412806.  v0:= temp @kind object;
  #L412808.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L41280e.  v0:= temp @kind object;
  #L412810.  `@@z2.f.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L412814.  return @kind void;
}
procedure `void` `<init>`(`z2.f` v0 @kind this) @signature `Lz2/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L412828.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41282e.  return @kind void;
}
procedure `java.util.List` `b`(`java.util.List` v5 @kind object) @signature `Lz2/f;.b:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41271c.  v0:= new `java.util.ArrayList`;
  #L412720.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L412726.  v1:= temp;
  #L412728.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L41272e.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L412734.  v1:= temp;
  #L412736.  v2:= 0I;
  #L412738.  if v2 >= v1 then goto L412766;
  #L41273c.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L412742.  v3:= temp @kind object;
  #L412744.  v3:= (`okhttp3.Protocol`) v3 @kind object;
  #L412748.  v4:= `@@okhttp3.Protocol.a` @type ^`okhttp3.Protocol` @kind object;
  #L41274c.  if v3 != v4 then goto L412752;
  #L412750.  goto L412760;
  #L412752.  call temp:= `toString`(v3) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L412758.  v3:= temp @kind object;
  #L41275a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L412760.  v2:= v2 + 1;
  #L412764.  goto L412738;
  #L412766.  return v0 @kind object;
}
procedure `byte`[] `e`(`java.util.List` v5 @kind object) @signature `Lz2/f;.e:(Ljava/util/List;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41263c.  v0:= new `okio.c`;
  #L412640.  call `<init>`(v0) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L412646.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L41264c.  v1:= temp;
  #L41264e.  v2:= 0I;
  #L412650.  if v2 >= v1 then goto L412694;
  #L412654.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L41265a.  v3:= temp @kind object;
  #L41265c.  v3:= (`okhttp3.Protocol`) v3 @kind object;
  #L412660.  v4:= `@@okhttp3.Protocol.a` @type ^`okhttp3.Protocol` @kind object;
  #L412664.  if v3 != v4 then goto L41266a;
  #L412668.  goto L41268e;
  #L41266a.  call temp:= `toString`(v3) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L412670.  v4:= temp @kind object;
  #L412672.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412678.  v4:= temp;
  #L41267a.  call temp:= `o0`(v0, v4) @signature `Lokio/c;.o0:(I)Lokio/c;` @kind virtual;
  #L412680.  call temp:= `toString`(v3) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L412686.  v3:= temp @kind object;
  #L412688.  call temp:= `u0`(v0, v3) @signature `Lokio/c;.u0:(Ljava/lang/String;)Lokio/c;` @kind virtual;
  #L41268e.  v2:= v2 + 1;
  #L412692.  goto L412650;
  #L412694.  call temp:= `a0`(v0) @signature `Lokio/c;.a0:()[B` @kind virtual;
  #L41269a.  v5:= temp @kind object;
  #L41269c.  return v5 @kind object;
}
procedure `z2.f` `i`() @signature `Lz2/f;.i:()Lz2/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L412904.  call temp:= `t`() @signature `Lz2/a;.t:()Lz2/f;` @kind static;
  #L41290a.  v0:= temp @kind object;
  #L41290c.  if v0 == 0 then goto L412912;
  #L412910.  return v0 @kind object;
  #L412912.  call temp:= `o`() @signature `Lz2/f;.o:()Z` @kind static;
  #L412918.  v0:= temp;
  #L41291a.  if v0 == 0 then goto L41292c;
  #L41291e.  call temp:= `r`() @signature `Lz2/b;.r:()Lz2/b;` @kind static;
  #L412924.  v0:= temp @kind object;
  #L412926.  if v0 == 0 then goto L41292c;
  #L41292a.  return v0 @kind object;
  #L41292c.  call temp:= `r`() @signature `Lz2/c;.r:()Lz2/c;` @kind static;
  #L412932.  v0:= temp @kind object;
  #L412934.  if v0 == 0 then goto L41293a;
  #L412938.  return v0 @kind object;
  #L41293a.  call temp:= `r`() @signature `Lz2/d;.r:()Lz2/f;` @kind static;
  #L412940.  v0:= temp @kind object;
  #L412942.  if v0 == 0 then goto L412948;
  #L412946.  return v0 @kind object;
  #L412948.  v0:= new `z2.f`;
  #L41294c.  call `<init>`(v0) @signature `Lz2/f;.<init>:()V` @kind direct;
  #L412952.  return v0 @kind object;
}
procedure `z2.f` `j`() @signature `Lz2/f;.j:()Lz2/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412964.  v0:= `@@z2.f.a` @type ^`z2.f` @kind object;
  #L412968.  return v0 @kind object;
}
procedure `boolean` `o`() @signature `Lz2/f;.o:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4125e8.  v0:= "okhttp.platform" @kind object;
  #L4125ec.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4125f2.  v0:= temp @kind object;
  #L4125f4.  v1:= "conscrypt" @kind object;
  #L4125f8.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4125fe.  v0:= temp;
  #L412600.  if v0 == 0 then goto L412608;
  #L412604.  v0:= 1I;
  #L412606.  return v0;
  #L412608.  call temp:= `getProviders`() @signature `Ljava/security/Security;.getProviders:()[Ljava/security/Provider;` @kind static;
  #L41260e.  v0:= temp @kind object;
  #L412610.  v1:= 0I;
  #L412612.  v0:= v0[v1] @kind object;
  #L412616.  call temp:= `getName`(v0) @signature `Ljava/security/Provider;.getName:()Ljava/lang/String;` @kind virtual;
  #L41261c.  v0:= temp @kind object;
  #L41261e.  v1:= "Conscrypt" @kind object;
  #L412622.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L412628.  v0:= temp;
  #L41262a.  return v0;
}
procedure `void` `a`(`z2.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Lz2/f;.a:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;

  #L412840.  return @kind void;
}
procedure `b3.c` `c`(`z2.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lz2/f;.c:(Ljavax/net/ssl/X509TrustManager;)Lb3/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L41258c.  v0:= new `b3.a`;
  #L412590.  call temp:= `d`(v1, v2) @signature `Lz2/f;.d:(Ljavax/net/ssl/X509TrustManager;)Lb3/e;` @kind virtual;
  #L412596.  v2:= temp @kind object;
  #L412598.  call `<init>`(v0, v2) @signature `Lb3/a;.<init>:(Lb3/e;)V` @kind direct;
  #L41259e.  return v0 @kind object;
}
procedure `b3.e` `d`(`z2.f` v1 @kind this, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lz2/f;.d:(Ljavax/net/ssl/X509TrustManager;)Lb3/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4125b0.  v0:= new `b3.b`;
  #L4125b4.  call temp:= `getAcceptedIssuers`(v2) @signature `Ljavax/net/ssl/X509TrustManager;.getAcceptedIssuers:()[Ljava/security/cert/X509Certificate;` @kind interface;
  #L4125ba.  v2:= temp @kind object;
  #L4125bc.  call `<init>`(v0, v2) @signature `Lb3/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @kind direct;
  #L4125c2.  return v0 @kind object;
}
procedure `void` `f`(`z2.f` v0 @kind this, `javax.net.ssl.SSLSocketFactory` v1 @kind object) @signature `Lz2/f;.f:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;

  #L412854.  return @kind void;
}
procedure `void` `g`(`z2.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lz2/f;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L412868.  return @kind void;
}
procedure `void` `h`(`z2.f` v0 @kind this, `java.net.Socket` v1 @kind object, `java.net.InetSocketAddress` v2 @kind object, `int` v3 ) @signature `Lz2/f;.h:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;

  #L41287c.  call `connect`(v1, v2, v3) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L412882.  return @kind void;
}
procedure `javax.net.ssl.SSLContext` `k`(`z2.f` v3 @kind this) @signature `Lz2/f;.k:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L412778.  v0:= "java.specification.version" @kind object;
  #L41277c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L412782.  v0:= temp @kind object;
  #L412784.  v1:= "1.7" @kind object;
  #L412788.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L41278e.  v0:= temp;
  #L412790.  if v0 == 0 then goto L4127a2;
  #L412794.  v0:= "TLSv1.2" @kind object;
  #L412798.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L41279e.  v0:= temp @kind object;
  #L4127a0.  return v0 @kind object;
  #L4127a2.  v0:= "TLS" @kind object;
  #L4127a6.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L4127ac.  v0:= temp @kind object;
  #L4127ae.  return v0 @kind object;
  #L4127b0.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L4127b2.  v1:= new `java.lang.IllegalStateException`;
  #L4127b6.  v2:= "No TLS provider" @kind object;
  #L4127ba.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4127c0.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L412794..L4127a0] goto L4127a2;
  catch `java.security.NoSuchAlgorithmException` @[L4127a2..L4127ae] goto L4127b0;
}
procedure `java.lang.String` `l`(`z2.f` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object) @signature `Lz2/f;.l:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L4126e4.  v1:= 0I;
  #L4126e6.  return v1 @kind object;
}
procedure `java.lang.Object` `m`(`z2.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lz2/f;.m:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4126b0.  v0:= `@@z2.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L4126b4.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L4126b8.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L4126be.  v0:= temp;
  #L4126c0.  if v0 == 0 then goto L4126d0;
  #L4126c4.  v0:= new `java.lang.Throwable`;
  #L4126c8.  call `<init>`(v0, v3) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4126ce.  return v0 @kind object;
  #L4126d0.  v3:= 0I;
  #L4126d2.  return v3 @kind object;
}
procedure `boolean` `n`(`z2.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lz2/f;.n:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L4125d4.  v1:= 1I;
  #L4125d6.  return v1;
}
procedure `void` `p`(`z2.f` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lz2/f;.p:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L412894.  v0:= 5I;
  #L412896.  if v2 != v0 then goto L4128a0;
  #L41289a.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L41289e.  goto L4128a4;
  #L4128a0.  v2:= `@@java.util.logging.Level.INFO` @type ^`java.util.logging.Level` @kind object;
  #L4128a4.  v0:= `@@z2.f.b` @type ^`java.util.logging.Logger` @kind object;
  #L4128a8.  call `log`(v0, v2, v3, v4) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L4128ae.  return @kind void;
}
procedure `void` `q`(`z2.f` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lz2/f;.q:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4128c0.  if v3 != 0 then goto L4128e6;
  #L4128c4.  v0:= new `java.lang.StringBuilder`;
  #L4128c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4128ce.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4128d4.  v2:= " To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);" @kind object;
  #L4128d8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4128de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4128e4.  v2:= temp @kind object;
  #L4128e6.  v0:= 5I;
  #L4128e8.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4128ec.  call `p`(v1, v0, v2, v3) @signature `Lz2/f;.p:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L4128f2.  return @kind void;
}
procedure `java.lang.String` `toString`(`z2.f` v1 @kind this) @signature `Lz2/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4126f8.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4126fe.  v0:= temp @kind object;
  #L412700.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L412706.  v0:= temp @kind object;
  #L412708.  return v0 @kind object;
}
