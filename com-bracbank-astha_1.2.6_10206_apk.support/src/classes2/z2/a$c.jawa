record `z2.a$c` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `z2.a$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `z2.a$c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `z2.a$c.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z2.a$c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lz2/a$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L411524.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41152a.  v0.`z2.a$c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L41152e.  v0.`z2.a$c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L411532.  v0.`z2.a$c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L411536.  return @kind void;
}
procedure `z2.a$c` `b`() @signature `Lz2/a$c;.b:()Lz2/a$c;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L411548.  v0:= 0I;
  #L41154a.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L41154e.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L411554.  v1:= temp @kind object;
  #L411556.  v2:= "get" @kind object;
  #L41155a.  v3:= 0I;
  #L41155c.  v4:= new `java.lang.Class`[v3];
  #L411560.  call temp:= `getMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L411566.  v2:= temp @kind object;
  #L411568.  v4:= "open" @kind object;
  #L41156c.  v5:= 1I;
  #L41156e.  v5:= new `java.lang.Class`[v5];
  #L411572.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L411576.  v5[v3]:= v6 @kind object;
  #L41157a.  call temp:= `getMethod`(v1, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L411580.  v4:= temp @kind object;
  #L411582.  v5:= "warnIfOpen" @kind object;
  #L411586.  v3:= new `java.lang.Class`[v3];
  #L41158a.  call temp:= `getMethod`(v1, v5, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L411590.  v0:= temp @kind object;
  #L411592.  v1:= v0 @kind object;
  #L411594.  v0:= v2 @kind object;
  #L411596.  goto L41159c;
  #L411598.  v1:= v0 @kind object;
  #L41159a.  v4:= v1 @kind object;
  #L41159c.  v2:= new `z2.a$c`;
  #L4115a0.  call `<init>`(v2, v0, v4, v1) @signature `Lz2/a$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L4115a6.  return v2 @kind object;
  catch `java.lang.Exception` @[L41154a..L411592] goto L411598;
}
procedure `java.lang.Object` `a`(`z2.a$c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lz2/a$c;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4114d4.  v0:= v5.`z2.a$c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L4114d8.  v1:= 0I;
  #L4114da.  if v0 == 0 then goto L411502;
  #L4114de.  v2:= 0I;
  #L4114e0.  v3:= new `java.lang.Object`[v2];
  #L4114e4.  call temp:= `invoke`(v0, v1, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4114ea.  v0:= temp @kind object;
  #L4114ec.  v3:= v5.`z2.a$c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L4114f0.  v4:= 1I;
  #L4114f2.  v4:= new `java.lang.Object`[v4];
  #L4114f6.  v4[v2]:= v6 @kind object;
  #L4114fa.  call temp:= `invoke`(v3, v0, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L411500.  return v0 @kind object;
  #L411502.  return v1 @kind object;
  catch `java.lang.Exception` @[L4114e0..L411500] goto L411502;
}
procedure `boolean` `c`(`z2.a$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lz2/a$c;.c:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L41149c.  v0:= 0I;
  #L41149e.  if v4 == 0 then goto L4114b2;
  #L4114a2.  v1:= v3.`z2.a$c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L4114a6.  v2:= new `java.lang.Object`[v0];
  #L4114aa.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4114b0.  v0:= 1I;
  #L4114b2.  return v0;
  catch `java.lang.Exception` @[L4114a2..L4114b0] goto L4114b2;
}
