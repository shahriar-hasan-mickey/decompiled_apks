record `z2.b` @kind class @AccessFlag PUBLIC extends `z2.f` @kind class {
}
procedure `void` `<init>`(`z2.b` v0 @kind this) @signature `Lz2/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L411c88.  call `<init>`(v0) @signature `Lz2/f;.<init>:()V` @kind direct;
  #L411c8e.  return @kind void;
}
procedure `z2.b` `r`() @signature `Lz2/b;.r:()Lz2/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L411d20.  v0:= 0I;
  #L411d22.  v1:= "org.conscrypt.Conscrypt" @kind object;
  #L411d26.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L411d2c.  call temp:= `isAvailable`() @signature `Lorg/conscrypt/Conscrypt;.isAvailable:()Z` @kind static;
  #L411d32.  v1:= temp;
  #L411d34.  if v1 != 0 then goto L411d3a;
  #L411d38.  return v0 @kind object;
  #L411d3a.  v1:= new `z2.b`;
  #L411d3e.  call `<init>`(v1) @signature `Lz2/b;.<init>:()V` @kind direct;
  #L411d44.  return v1 @kind object;
  #L411d46.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L411d22..L411d44] goto L411d46;
}
procedure `java.security.Provider` `s`(`z2.b` v1 @kind this) @signature `Lz2/b;.s:()Ljava/security/Provider;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L411bf0.  call temp:= `newProviderBuilder`() @signature `Lorg/conscrypt/Conscrypt;.newProviderBuilder:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind static;
  #L411bf6.  v0:= temp @kind object;
  #L411bf8.  call temp:= `provideTrustManager`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.provideTrustManager:()Lorg/conscrypt/Conscrypt$ProviderBuilder;` @kind virtual;
  #L411bfe.  v0:= temp @kind object;
  #L411c00.  call temp:= `build`(v0) @signature `Lorg/conscrypt/Conscrypt$ProviderBuilder;.build:()Ljava/security/Provider;` @kind virtual;
  #L411c06.  v0:= temp @kind object;
  #L411c08.  return v0 @kind object;
}
procedure `void` `f`(`z2.b` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lz2/b;.f:(Ljavax/net/ssl/SSLSocketFactory;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411ca0.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocketFactory;)Z` @kind static;
  #L411ca6.  v0:= temp;
  #L411ca8.  if v0 == 0 then goto L411cb4;
  #L411cac.  v0:= 1I;
  #L411cae.  call `setUseEngineSocket`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseEngineSocket:(Ljavax/net/ssl/SSLSocketFactory;Z)V` @kind static;
  #L411cb4.  return @kind void;
}
procedure `void` `g`(`z2.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lz2/b;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411cc8.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L411cce.  v0:= temp;
  #L411cd0.  if v0 == 0 then goto L411d08;
  #L411cd4.  if v3 == 0 then goto L411ce6;
  #L411cd8.  v0:= 1I;
  #L411cda.  call `setUseSessionTickets`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseSessionTickets:(Ljavax/net/ssl/SSLSocket;Z)V` @kind static;
  #L411ce0.  call `setHostname`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setHostname:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)V` @kind static;
  #L411ce6.  call temp:= `b`(v4) @signature `Lz2/f;.b:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L411cec.  v3:= temp @kind object;
  #L411cee.  v4:= 0I;
  #L411cf0.  v4:= new `java.lang.String`[v4];
  #L411cf4.  call temp:= `toArray`(v3, v4) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L411cfa.  v3:= temp @kind object;
  #L411cfc.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L411d00.  call `setApplicationProtocols`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setApplicationProtocols:(Ljavax/net/ssl/SSLSocket;[Ljava/lang/String;)V` @kind static;
  #L411d06.  goto L411d0e;
  #L411d08.  call `g`(v1, v2, v3, v4) @signature `Lz2/f;.g:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L411d0e.  return @kind void;
}
procedure `javax.net.ssl.SSLContext` `k`(`z2.b` v3 @kind this) @signature `Lz2/b;.k:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L411c1c.  v0:= "TLSv1.3" @kind object;
  #L411c20.  call temp:= `s`(v3) @signature `Lz2/b;.s:()Ljava/security/Provider;` @kind direct;
  #L411c26.  v1:= temp @kind object;
  #L411c28.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L411c2e.  v0:= temp @kind object;
  #L411c30.  return v0 @kind object;
  #L411c32.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L411c34.  v1:= "TLS" @kind object;
  #L411c38.  call temp:= `s`(v3) @signature `Lz2/b;.s:()Ljava/security/Provider;` @kind direct;
  #L411c3e.  v2:= temp @kind object;
  #L411c40.  call temp:= `getInstance`(v1, v2) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L411c46.  v0:= temp @kind object;
  #L411c48.  return v0 @kind object;
  #L411c4a.  v1:= new `java.lang.IllegalStateException`;
  #L411c4e.  v2:= "No TLS provider" @kind object;
  #L411c52.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L411c58.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L411c1c..L411c30] goto L411c32;
  catch `java.security.NoSuchAlgorithmException` @[L411c34..L411c48] goto L411c4a;
}
procedure `java.lang.String` `l`(`z2.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Lz2/b;.l:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L411bc0.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L411bc6.  v0:= temp;
  #L411bc8.  if v0 == 0 then goto L411bd6;
  #L411bcc.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/conscrypt/Conscrypt;.getApplicationProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind static;
  #L411bd2.  v2:= temp @kind object;
  #L411bd4.  return v2 @kind object;
  #L411bd6.  call temp:= `l`(v1, v2) @signature `Lz2/f;.l:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L411bdc.  v2:= temp @kind object;
  #L411bde.  return v2 @kind object;
}
