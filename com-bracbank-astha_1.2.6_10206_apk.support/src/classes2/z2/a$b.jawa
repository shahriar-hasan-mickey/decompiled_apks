record `z2.a$b` @kind class @AccessFlag FINAL extends `b3.e` @kind interface {
  `javax.net.ssl.X509TrustManager` `z2.a$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `z2.a$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`z2.a$b` v0 @kind this, `javax.net.ssl.X509TrustManager` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lz2/a$b;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L41147c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L411482.  v0.`z2.a$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L411486.  v0.`z2.a$b.a` @type ^`javax.net.ssl.X509TrustManager` := v1 @kind object;
  #L41148a.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`z2.a$b` v5 @kind this, `java.security.cert.X509Certificate` v6 @kind object) @signature `Lz2/a$b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L41141c.  v0:= 0I;
  #L41141e.  v1:= v5.`z2.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L411422.  v2:= v5.`z2.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L411426.  v3:= 1I;
  #L411428.  v3:= new `java.lang.Object`[v3];
  #L41142c.  v4:= 0I;
  #L41142e.  v3[v4]:= v6 @kind object;
  #L411432.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L411438.  v6:= temp @kind object;
  #L41143a.  v6:= (`java.security.cert.TrustAnchor`) v6 @kind object;
  #L41143e.  if v6 == 0 then goto L41144a;
  #L411442.  call temp:= `getTrustedCert`(v6) @signature `Ljava/security/cert/TrustAnchor;.getTrustedCert:()Ljava/security/cert/X509Certificate;` @kind virtual;
  #L411448.  v0:= temp @kind object;
  #L41144a.  return v0 @kind object;
  #L41144c.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L41144e.  v0:= "unable to get issues and signature" @kind object;
  #L411452.  call temp:= `b`(v0, v6) @signature `Lt2/c;.b:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L411458.  v6:= temp @kind object;
  #L41145a.  throw v6;
  catch `java.lang.IllegalAccessException` @[L41141e..L41144a] goto L41144c;
  catch `java.lang.reflect.InvocationTargetException` @[L41141e..L41144a] goto L41144a;
}
procedure `boolean` `equals`(`z2.a$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lz2/a$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411394.  v0:= 1I;
  #L411396.  if v5 != v4 then goto L41139c;
  #L41139a.  return v0;
  #L41139c.  v1:= instanceof @variable v5 @type ^`z2.a$b` @kind boolean;
  #L4113a0.  v2:= 0I;
  #L4113a2.  if v1 != 0 then goto L4113a8;
  #L4113a6.  return v2;
  #L4113a8.  v5:= (`z2.a$b`) v5 @kind object;
  #L4113ac.  v1:= v4.`z2.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L4113b0.  v3:= v5.`z2.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L4113b4.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4113ba.  v1:= temp;
  #L4113bc.  if v1 == 0 then goto L4113d6;
  #L4113c0.  v1:= v4.`z2.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L4113c4.  v5:= v5.`z2.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L4113c8.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4113ce.  v5:= temp;
  #L4113d0.  if v5 == 0 then goto L4113d6;
  #L4113d4.  goto L4113d8;
  #L4113d6.  v0:= 0I;
  #L4113d8.  return v0;
}
procedure `int` `hashCode`(`z2.a$b` v2 @kind this) @signature `Lz2/a$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4113ec.  v0:= v2.`z2.a$b.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L4113f0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4113f6.  v0:= temp;
  #L4113f8.  v1:= v2.`z2.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L4113fc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L411402.  v1:= temp;
  #L411404.  v1:= v1 * 31;
  #L411408.  v0:= v0 + v1 @kind int;
  #L41140a.  return v0;
}
