record `r2.e` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`r2.e` v0 @kind this) @signature `Lr2/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fafb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fafba.  return @kind void;
}
procedure `java.lang.String` `a`(`r2.e` v0 @kind this, `kotlin.jvm.internal.Lambda` v1 @kind object) @signature `Lr2/e;.a:(Lkotlin/jvm/internal/Lambda;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3faf4c.  call temp:= `b`(v0, v1) @signature `Lr2/e;.b:(Lr2/b;)Ljava/lang/String;` @kind virtual;
  #L3faf52.  v1:= temp @kind object;
  #L3faf54.  return v1 @kind object;
}
procedure `java.lang.String` `b`(`r2.e` v1 @kind this, `r2.b` v2 @kind object) @signature `Lr2/e;.b:(Lr2/b;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3faf68.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3faf6e.  v2:= temp @kind object;
  #L3faf70.  call temp:= `getGenericInterfaces`(v2) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L3faf76.  v2:= temp @kind object;
  #L3faf78.  v0:= 0I;
  #L3faf7a.  v2:= v2[v0] @kind object;
  #L3faf7e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3faf84.  v2:= temp @kind object;
  #L3faf86.  v0:= "kotlin.jvm.functions." @kind object;
  #L3faf8a.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3faf90.  v0:= temp;
  #L3faf92.  if v0 == 0 then goto L3fafa2;
  #L3faf96.  v0:= 21I;
  #L3faf9a.  call temp:= `substring`(v2, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3fafa0.  v2:= temp @kind object;
  #L3fafa2.  return v2 @kind object;
}
