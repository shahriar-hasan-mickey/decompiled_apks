record `org.simpleframework.xml.convert.ConverterScanner` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.convert.ScannerBuilder` `org.simpleframework.xml.convert.ConverterScanner.builder` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.convert.ConverterFactory` `org.simpleframework.xml.convert.ConverterScanner.factory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dc8b8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dc8be.  v0:= new `org.simpleframework.xml.convert.ConverterFactory`;
  #L3dc8c2.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.<init>:()V` @kind direct;
  #L3dc8c8.  v1.`org.simpleframework.xml.convert.ConverterScanner.factory` @type ^`org.simpleframework.xml.convert.ConverterFactory` := v0 @kind object;
  #L3dc8cc.  v0:= new `org.simpleframework.xml.convert.ScannerBuilder`;
  #L3dc8d0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.<init>:()V` @kind direct;
  #L3dc8d6.  v1.`org.simpleframework.xml.convert.ConverterScanner.builder` @type ^`org.simpleframework.xml.convert.ScannerBuilder` := v0 @kind object;
  #L3dc8da.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `getAnnotation`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getAnnotation:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dc748.  v0:= v1.`org.simpleframework.xml.convert.ConverterScanner.builder` @type ^`org.simpleframework.xml.convert.ScannerBuilder` @kind object;
  #L3dc74c.  call temp:= `build`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.build:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Scanner;` @kind virtual;
  #L3dc752.  v2:= temp @kind object;
  #L3dc754.  call temp:= `scan`(v2, v3) @signature `Lorg/simpleframework/xml/convert/Scanner;.scan:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L3dc75a.  v2:= temp @kind object;
  #L3dc75c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `getConvert`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dc770.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L3dc774.  call temp:= `getAnnotation`(v3, v4, v0) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getAnnotation:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L3dc77a.  v0:= temp @kind object;
  #L3dc77c.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L3dc780.  if v0 == 0 then goto L3dc7b6;
  #L3dc784.  v1:= constclass @type ^`org.simpleframework.xml.Root` @kind object;
  #L3dc788.  call temp:= `getAnnotation`(v3, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getAnnotation:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L3dc78e.  v1:= temp @kind object;
  #L3dc790.  v1:= (`org.simpleframework.xml.Root`) v1 @kind object;
  #L3dc794.  if v1 == 0 then goto L3dc79a;
  #L3dc798.  goto L3dc7b6;
  #L3dc79a.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L3dc79e.  v1:= 1I;
  #L3dc7a0.  v1:= new `java.lang.Object`[v1];
  #L3dc7a4.  v2:= 0I;
  #L3dc7a6.  v1[v2]:= v4 @kind object;
  #L3dc7aa.  v4:= "Root annotation required for %s" @kind object;
  #L3dc7ae.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dc7b4.  throw v0;
  #L3dc7b6.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `getConvert`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dc7c8.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L3dc7cc.  call temp:= `getAnnotation`(v4, v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L3dc7d2.  v0:= temp @kind object;
  #L3dc7d4.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L3dc7d8.  if v0 == 0 then goto L3dc80e;
  #L3dc7dc.  v1:= constclass @type ^`org.simpleframework.xml.Element` @kind object;
  #L3dc7e0.  call temp:= `getAnnotation`(v4, v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L3dc7e6.  v1:= temp @kind object;
  #L3dc7e8.  v1:= (`org.simpleframework.xml.Element`) v1 @kind object;
  #L3dc7ec.  if v1 == 0 then goto L3dc7f2;
  #L3dc7f0.  goto L3dc80e;
  #L3dc7f2.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L3dc7f6.  v1:= 1I;
  #L3dc7f8.  v1:= new `java.lang.Object`[v1];
  #L3dc7fc.  v2:= 0I;
  #L3dc7fe.  v1[v2]:= v4 @kind object;
  #L3dc802.  v4:= "Element annotation required for %s" @kind object;
  #L3dc806.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dc80c.  throw v0;
  #L3dc80e.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `getConvert`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;

  #L3dc820.  call temp:= `getConvert`(v0, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L3dc826.  v1:= temp @kind object;
  #L3dc828.  if v1 != 0 then goto L3dc834;
  #L3dc82c.  call temp:= `getConvert`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L3dc832.  v1:= temp @kind object;
  #L3dc834.  return v1 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getType:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L3dc6f8.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dc6fe.  v1:= temp @kind object;
  #L3dc700.  if v2 == 0 then goto L3dc70c;
  #L3dc704.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3dc70a.  v1:= temp @kind object;
  #L3dc70c.  return v1 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getType:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L3dc720.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dc726.  v1:= temp @kind object;
  #L3dc728.  if v2 == 0 then goto L3dc734;
  #L3dc72c.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dc732.  v1:= temp @kind object;
  #L3dc734.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L3dc848.  call temp:= `getType`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getType:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @kind direct;
  #L3dc84e.  v2:= temp @kind object;
  #L3dc850.  call temp:= `getConvert`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L3dc856.  v1:= temp @kind object;
  #L3dc858.  if v1 == 0 then goto L3dc86a;
  #L3dc85c.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.factory` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L3dc860.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L3dc866.  v1:= temp @kind object;
  #L3dc868.  return v1 @kind object;
  #L3dc86a.  v1:= 0I;
  #L3dc86c.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L3dc880.  call temp:= `getType`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getType:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @kind direct;
  #L3dc886.  v2:= temp @kind object;
  #L3dc888.  call temp:= `getConvert`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConvert:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L3dc88e.  v1:= temp @kind object;
  #L3dc890.  if v1 == 0 then goto L3dc8a2;
  #L3dc894.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.factory` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L3dc898.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L3dc89e.  v1:= temp @kind object;
  #L3dc8a0.  return v1 @kind object;
  #L3dc8a2.  v1:= 0I;
  #L3dc8a4.  return v1 @kind object;
}
