record `org.simpleframework.xml.convert.RegistryStrategy` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.strategy.Strategy` @kind interface {
  `org.simpleframework.xml.convert.Registry` `org.simpleframework.xml.convert.RegistryStrategy.registry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Strategy` `org.simpleframework.xml.convert.RegistryStrategy.strategy` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.convert.Registry` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dcbb8.  v0:= new `org.simpleframework.xml.strategy.TreeStrategy`;
  #L3dcbbc.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:()V` @kind direct;
  #L3dcbc2.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;Lorg/simpleframework/xml/strategy/Strategy;)V` @kind direct;
  #L3dcbc8.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.convert.Registry` v1 @kind object, `org.simpleframework.xml.strategy.Strategy` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;Lorg/simpleframework/xml/strategy/Strategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3dcbdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dcbe2.  v0.`org.simpleframework.xml.convert.RegistryStrategy.registry` @type ^`org.simpleframework.xml.convert.Registry` := v1 @kind object;
  #L3dcbe6.  v0.`org.simpleframework.xml.convert.RegistryStrategy.strategy` @type ^`org.simpleframework.xml.strategy.Strategy` := v2 @kind object;
  #L3dcbea.  return @kind void;
}
procedure `boolean` `isReference`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Value` v1 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.isReference:(Lorg/simpleframework/xml/strategy/Value;)Z` @AccessFlag PRIVATE {
    temp;

  #L3dca40.  if v1 == 0 then goto L3dca54;
  #L3dca44.  call temp:= `isReference`(v1) @signature `Lorg/simpleframework/xml/strategy/Value;.isReference:()Z` @kind interface;
  #L3dca4a.  v1:= temp;
  #L3dca4c.  if v1 == 0 then goto L3dca54;
  #L3dca50.  v1:= 1I;
  #L3dca52.  goto L3dca56;
  #L3dca54.  v1:= 0I;
  #L3dca56.  return v1;
}
procedure `org.simpleframework.xml.convert.Converter` `lookup`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.lookup:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;

  #L3dcacc.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dcad2.  v1:= temp @kind object;
  #L3dcad4.  if v2 == 0 then goto L3dcae0;
  #L3dcad8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3dcade.  v1:= temp @kind object;
  #L3dcae0.  v2:= v0.`org.simpleframework.xml.convert.RegistryStrategy.registry` @type ^`org.simpleframework.xml.convert.Registry` @kind object;
  #L3dcae4.  call temp:= `lookup`(v2, v1) @signature `Lorg/simpleframework/xml/convert/Registry;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L3dcaea.  v1:= temp @kind object;
  #L3dcaec.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `lookup`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.lookup:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;

  #L3dcb00.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dcb06.  v1:= temp @kind object;
  #L3dcb08.  if v2 == 0 then goto L3dcb14;
  #L3dcb0c.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dcb12.  v1:= temp @kind object;
  #L3dcb14.  v2:= v0.`org.simpleframework.xml.convert.RegistryStrategy.registry` @type ^`org.simpleframework.xml.convert.Registry` @kind object;
  #L3dcb18.  call temp:= `lookup`(v2, v1) @signature `Lorg/simpleframework/xml/convert/Registry;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L3dcb1e.  v1:= temp @kind object;
  #L3dcb20.  return v1 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dcb68.  call temp:= `lookup`(v1, v2, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.lookup:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L3dcb6e.  v0:= temp @kind object;
  #L3dcb70.  call temp:= `getNode`(v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.getNode:()Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3dcb76.  v3:= temp @kind object;
  #L3dcb78.  v3:= (`org.simpleframework.xml.stream.InputNode`) v3 @kind object;
  #L3dcb7c.  if v0 == 0 then goto L3dcba6;
  #L3dcb80.  call temp:= `read`(v0, v3) @signature `Lorg/simpleframework/xml/convert/Converter;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind interface;
  #L3dcb86.  v3:= temp @kind object;
  #L3dcb88.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dcb8e.  v2:= temp @kind object;
  #L3dcb90.  if v4 == 0 then goto L3dcb9a;
  #L3dcb94.  call `setValue`(v4, v3) @signature `Lorg/simpleframework/xml/strategy/Value;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L3dcb9a.  v0:= new `org.simpleframework.xml.convert.Reference`;
  #L3dcb9e.  call `<init>`(v0, v4, v3, v2) @signature `Lorg/simpleframework/xml/convert/Reference;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Object;Ljava/lang/Class;)V` @kind direct;
  #L3dcba4.  return v0 @kind object;
  #L3dcba6.  return v4 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Z` @AccessFlag PRIVATE {
    temp;

  #L3dca68.  call temp:= `lookup`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.lookup:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L3dca6e.  v1:= temp @kind object;
  #L3dca70.  call temp:= `getNode`(v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.getNode:()Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3dca76.  v3:= temp @kind object;
  #L3dca78.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L3dca7c.  if v1 == 0 then goto L3dca8a;
  #L3dca80.  call `write`(v1, v3, v2) @signature `Lorg/simpleframework/xml/convert/Converter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind interface;
  #L3dca86.  v1:= 1I;
  #L3dca88.  return v1;
  #L3dca8a.  v1:= 0I;
  #L3dca8c.  return v1;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcb34.  v0:= v1.`org.simpleframework.xml.convert.RegistryStrategy.strategy` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L3dcb38.  call temp:= `read`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/Strategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L3dcb3e.  v4:= temp @kind object;
  #L3dcb40.  call temp:= `isReference`(v1, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.isReference:(Lorg/simpleframework/xml/strategy/Value;)Z` @kind direct;
  #L3dcb46.  v0:= temp;
  #L3dcb48.  if v0 == 0 then goto L3dcb4e;
  #L3dcb4c.  return v4 @kind object;
  #L3dcb4e.  call temp:= `read`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3dcb54.  v2:= temp @kind object;
  #L3dcb56.  return v2 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dcaa0.  v0:= v1.`org.simpleframework.xml.convert.RegistryStrategy.strategy` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L3dcaa4.  call temp:= `write`(v0, v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/Strategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @kind interface;
  #L3dcaaa.  v5:= temp;
  #L3dcaac.  if v5 != 0 then goto L3dcaba;
  #L3dcab0.  call temp:= `write`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Z` @kind direct;
  #L3dcab6.  v2:= temp;
  #L3dcab8.  return v2;
  #L3dcaba.  return v5;
}
