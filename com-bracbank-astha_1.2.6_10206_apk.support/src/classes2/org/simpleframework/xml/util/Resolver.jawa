record `org.simpleframework.xml.util.Resolver` @kind class @AccessFlag PUBLIC extends `java.util.AbstractSet` @kind class {
  `org.simpleframework.xml.util.Resolver$Cache` `org.simpleframework.xml.util.Resolver.cache` @AccessFlag PUBLIC_FINAL;
  `org.simpleframework.xml.util.Resolver$Stack` `org.simpleframework.xml.util.Resolver.stack` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.Resolver` v2 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f9694.  call `<init>`(v2) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L3f969a.  v0:= new `org.simpleframework.xml.util.Resolver$Stack`;
  #L3f969e.  v1:= 0I;
  #L3f96a0.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.<init>:(Lorg/simpleframework/xml/util/Resolver;Lorg/simpleframework/xml/util/Resolver$1;)V` @kind direct;
  #L3f96a6.  v2.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` := v0 @kind object;
  #L3f96aa.  v0:= new `org.simpleframework.xml.util.Resolver$Cache`;
  #L3f96ae.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Cache;.<init>:(Lorg/simpleframework/xml/util/Resolver;)V` @kind direct;
  #L3f96b4.  v2.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` := v0 @kind object;
  #L3f96b8.  return @kind void;
}
procedure `boolean` `match`(`org.simpleframework.xml.util.Resolver` v5 @kind this, `char`[] v6 @kind object, `int` v7 , `char`[] v8 @kind object, `int` v9 ) @signature `Lorg/simpleframework/xml/util/Resolver;.match:([CI[CI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f9448.  v0:= length @variable v8;
  #L3f944a.  v1:= 42I;
  #L3f944e.  v2:= 0I;
  #L3f9450.  v3:= 1I;
  #L3f9452.  if v9 >= v0 then goto L3f94fa;
  #L3f9456.  v0:= length @variable v6;
  #L3f9458.  if v7 >= v0 then goto L3f94fa;
  #L3f945c.  v0:= v8[v9] @kind char;
  #L3f9460.  v4:= 63I;
  #L3f9464.  if v0 != v1 then goto L3f94d2;
  #L3f9468.  v0:= v8[v9] @kind char;
  #L3f946c.  if v0 != v1 then goto L3f947c;
  #L3f9470.  v9:= v9 + 1;
  #L3f9474.  v0:= length @variable v8;
  #L3f9476.  if v9 < v0 then goto L3f9468;
  #L3f947a.  return v3;
  #L3f947c.  v0:= v8[v9] @kind char;
  #L3f9480.  if v0 != v4 then goto L3f9490;
  #L3f9484.  v9:= v9 + 1;
  #L3f9488.  v0:= length @variable v8;
  #L3f948a.  if v9 < v0 then goto L3f9490;
  #L3f948e.  return v3;
  #L3f9490.  v0:= length @variable v6;
  #L3f9492.  if v7 >= v0 then goto L3f94ca;
  #L3f9496.  v0:= v6[v7] @kind char;
  #L3f949a.  v1:= v8[v9] @kind char;
  #L3f949e.  if v0 == v1 then goto L3f94aa;
  #L3f94a2.  v0:= v8[v9] @kind char;
  #L3f94a6.  if v0 != v4 then goto L3f94c4;
  #L3f94aa.  v0:= v9 + -1;
  #L3f94ae.  v0:= v8[v0] @kind char;
  #L3f94b2.  if v0 == v4 then goto L3f94ca;
  #L3f94b6.  call temp:= `match`(v5, v6, v7, v8, v9) @signature `Lorg/simpleframework/xml/util/Resolver;.match:([CI[CI)Z` @kind direct;
  #L3f94bc.  v0:= temp;
  #L3f94be.  if v0 == 0 then goto L3f94c4;
  #L3f94c2.  return v3;
  #L3f94c4.  v7:= v7 + 1;
  #L3f94c8.  goto L3f9490;
  #L3f94ca.  v0:= length @variable v6;
  #L3f94cc.  if v0 != v7 then goto L3f94d2;
  #L3f94d0.  return v2;
  #L3f94d2.  v0:= v7 + 1;
  #L3f94d6.  v7:= v6[v7] @kind char;
  #L3f94da.  v1:= v9 + 1;
  #L3f94de.  v9:= v8[v9] @kind char;
  #L3f94e2.  if v7 == v9 then goto L3f94f4;
  #L3f94e6.  v7:= v1 + -1;
  #L3f94ea.  v7:= v8[v7] @kind char;
  #L3f94ee.  if v7 == v4 then goto L3f94f4;
  #L3f94f2.  return v2;
  #L3f94f4.  v7:= v0;
  #L3f94f6.  v9:= v1;
  #L3f94f8.  goto L3f9448;
  #L3f94fa.  v0:= length @variable v8;
  #L3f94fc.  if v0 != v9 then goto L3f950a;
  #L3f9500.  v6:= length @variable v6;
  #L3f9502.  if v6 != v7 then goto L3f9508;
  #L3f9506.  v2:= 1I;
  #L3f9508.  return v2;
  #L3f950a.  v6:= v8[v9] @kind char;
  #L3f950e.  if v6 != v1 then goto L3f951e;
  #L3f9512.  v9:= v9 + 1;
  #L3f9516.  v6:= length @variable v8;
  #L3f9518.  if v9 < v6 then goto L3f950a;
  #L3f951c.  return v3;
  #L3f951e.  return v2;
}
procedure `boolean` `match`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `char`[] v2 @kind object, `char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.match:([C[C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f942c.  v0:= 0I;
  #L3f942e.  call temp:= `match`(v1, v2, v0, v3, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.match:([CI[CI)Z` @kind direct;
  #L3f9434.  v2:= temp;
  #L3f9436.  return v2;
}
procedure `java.util.List` `resolveAll`(`org.simpleframework.xml.util.Resolver` v4 @kind this, `java.lang.String` v5 @kind object, `char`[] v6 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;[C)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f95d8.  v0:= new `java.util.ArrayList`;
  #L3f95dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f95e2.  v1:= v4.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f95e6.  call temp:= `iterator`(v1) @signature `Ljava/util/LinkedList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3f95ec.  v1:= temp @kind object;
  #L3f95ee.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f95f4.  v2:= temp;
  #L3f95f6.  if v2 == 0 then goto L3f9634;
  #L3f95fa.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f9600.  v2:= temp @kind object;
  #L3f9602.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L3f9606.  call temp:= `getPattern`(v2) @signature `Lorg/simpleframework/xml/util/Match;.getPattern:()Ljava/lang/String;` @kind interface;
  #L3f960c.  v3:= temp @kind object;
  #L3f960e.  call temp:= `toCharArray`(v3) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3f9614.  v3:= temp @kind object;
  #L3f9616.  call temp:= `match`(v4, v6, v3) @signature `Lorg/simpleframework/xml/util/Resolver;.match:([C[C)Z` @kind direct;
  #L3f961c.  v3:= temp;
  #L3f961e.  if v3 == 0 then goto L3f95ee;
  #L3f9622.  v3:= v4.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L3f9626.  call temp:= `put`(v3, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f962c.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f9632.  goto L3f95ee;
  #L3f9634.  return v0 @kind object;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f93ec.  v1:= (`org.simpleframework.xml.util.Match`) v1 @kind object;
  #L3f93f0.  call temp:= `add`(v0, v1) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @kind virtual;
  #L3f93f6.  v1:= temp;
  #L3f93f8.  return v1;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f940c.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f9410.  call `push`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.push:(Lorg/simpleframework/xml/util/Match;)V` @kind virtual;
  #L3f9416.  v2:= 1I;
  #L3f9418.  return v2;
}
procedure `void` `clear`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f96cc.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L3f96d0.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L3f96d6.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f96da.  call `clear`(v0) @signature `Ljava/util/LinkedList;.clear:()V` @kind virtual;
  #L3f96e0.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9578.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f957c.  call temp:= `sequence`(v0) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.sequence:()Ljava/util/Iterator;` @kind virtual;
  #L3f9582.  v0:= temp @kind object;
  #L3f9584.  return v0 @kind object;
}
procedure `boolean` `remove`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.remove:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9530.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L3f9534.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L3f953a.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f953e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/LinkedList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f9544.  v2:= temp;
  #L3f9546.  return v2;
}
procedure `org.simpleframework.xml.util.Match` `resolve`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolve:(Ljava/lang/String;)Lorg/simpleframework/xml/util/Match;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9648.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L3f964c.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f9652.  v0:= temp @kind object;
  #L3f9654.  v0:= (`java.util.List`) v0 @kind object;
  #L3f9658.  if v0 != 0 then goto L3f9664;
  #L3f965c.  call temp:= `resolveAll`(v1, v2) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L3f9662.  v0:= temp @kind object;
  #L3f9664.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3f966a.  v2:= temp;
  #L3f966c.  if v2 == 0 then goto L3f9674;
  #L3f9670.  v2:= 0I;
  #L3f9672.  return v2 @kind object;
  #L3f9674.  v2:= 0I;
  #L3f9676.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f967c.  v2:= temp @kind object;
  #L3f967e.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L3f9682.  return v2 @kind object;
}
procedure `java.util.List` `resolveAll`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9598.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L3f959c.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f95a2.  v0:= temp @kind object;
  #L3f95a4.  v0:= (`java.util.List`) v0 @kind object;
  #L3f95a8.  if v0 == 0 then goto L3f95ae;
  #L3f95ac.  return v0 @kind object;
  #L3f95ae.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3f95b4.  v0:= temp @kind object;
  #L3f95b6.  if v0 != 0 then goto L3f95be;
  #L3f95ba.  v2:= 0I;
  #L3f95bc.  return v2 @kind object;
  #L3f95be.  call temp:= `resolveAll`(v1, v2, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;[C)Ljava/util/List;` @kind direct;
  #L3f95c4.  v2:= temp @kind object;
  #L3f95c6.  return v2 @kind object;
}
procedure `int` `size`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9558.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L3f955c.  call temp:= `size`(v0) @signature `Ljava/util/LinkedList;.size:()I` @kind virtual;
  #L3f9562.  v0:= temp;
  #L3f9564.  return v0;
}
