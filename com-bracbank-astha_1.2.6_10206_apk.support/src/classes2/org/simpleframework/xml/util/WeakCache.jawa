record `org.simpleframework.xml.util.WeakCache` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.util.Cache` @kind interface {
  `org.simpleframework.xml.util.WeakCache$SegmentList` `org.simpleframework.xml.util.WeakCache.list` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.WeakCache` v1 @kind this) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f99a8.  v0:= 10I;
  #L3f99ac.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:(I)V` @kind direct;
  #L3f99b2.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f99c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f99ca.  v0:= new `org.simpleframework.xml.util.WeakCache$SegmentList`;
  #L3f99ce.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache$SegmentList;.<init>:(Lorg/simpleframework/xml/util/WeakCache;I)V` @kind direct;
  #L3f99d4.  v1.`org.simpleframework.xml.util.WeakCache.list` @type ^`org.simpleframework.xml.util.WeakCache$SegmentList` := v0 @kind object;
  #L3f99d8.  return @kind void;
}
procedure `org.simpleframework.xml.util.WeakCache$Segment` `map`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/util/WeakCache;.map:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f9988.  v0:= v1.`org.simpleframework.xml.util.WeakCache.list` @type ^`org.simpleframework.xml.util.WeakCache$SegmentList` @kind object;
  #L3f998c.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/util/WeakCache$SegmentList;.get:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @kind virtual;
  #L3f9992.  v2:= temp @kind object;
  #L3f9994.  return v2 @kind object;
}
procedure `void` `cache`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/util/WeakCache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f99ec.  call temp:= `map`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.map:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @kind direct;
  #L3f99f2.  v0:= temp @kind object;
  #L3f99f4.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/WeakCache$Segment;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f99fa.  return @kind void;
}
procedure `boolean` `contains`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/util/WeakCache;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f98d4.  call temp:= `map`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.map:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @kind direct;
  #L3f98da.  v0:= temp @kind object;
  #L3f98dc.  call temp:= `contains`(v0, v2) @signature `Lorg/simpleframework/xml/util/WeakCache$Segment;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f98e2.  v2:= temp;
  #L3f98e4.  return v2;
}
procedure `java.lang.Object` `fetch`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9940.  call temp:= `map`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.map:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @kind direct;
  #L3f9946.  v0:= temp @kind object;
  #L3f9948.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/WeakCache$Segment;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f994e.  v2:= temp @kind object;
  #L3f9950.  return v2 @kind object;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.util.WeakCache` v2 @kind this) @signature `Lorg/simpleframework/xml/util/WeakCache;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f98f8.  v0:= v2.`org.simpleframework.xml.util.WeakCache.list` @type ^`org.simpleframework.xml.util.WeakCache$SegmentList` @kind object;
  #L3f98fc.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/util/WeakCache$SegmentList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3f9902.  v0:= temp @kind object;
  #L3f9904.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f990a.  v1:= temp;
  #L3f990c.  if v1 == 0 then goto L3f992c;
  #L3f9910.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f9916.  v1:= temp @kind object;
  #L3f9918.  v1:= (`org.simpleframework.xml.util.WeakCache$Segment`) v1 @kind object;
  #L3f991c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L3f9922.  v1:= temp;
  #L3f9924.  if v1 != 0 then goto L3f9904;
  #L3f9928.  v0:= 0I;
  #L3f992a.  return v0;
  #L3f992c.  v0:= 1I;
  #L3f992e.  return v0;
}
procedure `java.lang.Object` `take`(`org.simpleframework.xml.util.WeakCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/util/WeakCache;.take:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9964.  call temp:= `map`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.map:(Ljava/lang/Object;)Lorg/simpleframework/xml/util/WeakCache$Segment;` @kind direct;
  #L3f996a.  v0:= temp @kind object;
  #L3f996c.  call temp:= `take`(v0, v2) @signature `Lorg/simpleframework/xml/util/WeakCache$Segment;.take:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f9972.  v2:= temp @kind object;
  #L3f9974.  return v2 @kind object;
}
