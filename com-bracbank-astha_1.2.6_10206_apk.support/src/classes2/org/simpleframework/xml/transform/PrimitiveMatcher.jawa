record `org.simpleframework.xml.transform.PrimitiveMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PrimitiveMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8988.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f898e.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PrimitiveMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f88d4.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f88d8.  if v2 != v0 then goto L3f88e8;
  #L3f88dc.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L3f88e0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L3f88e6.  return v2 @kind object;
  #L3f88e8.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f88ec.  if v2 != v0 then goto L3f88fc;
  #L3f88f0.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L3f88f4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L3f88fa.  return v2 @kind object;
  #L3f88fc.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f8900.  if v2 != v0 then goto L3f8910;
  #L3f8904.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L3f8908.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L3f890e.  return v2 @kind object;
  #L3f8910.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f8914.  if v2 != v0 then goto L3f8924;
  #L3f8918.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L3f891c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L3f8922.  return v2 @kind object;
  #L3f8924.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f8928.  if v2 != v0 then goto L3f8938;
  #L3f892c.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L3f8930.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L3f8936.  return v2 @kind object;
  #L3f8938.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f893c.  if v2 != v0 then goto L3f894c;
  #L3f8940.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L3f8944.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L3f894a.  return v2 @kind object;
  #L3f894c.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f8950.  if v2 != v0 then goto L3f8960;
  #L3f8954.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L3f8958.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L3f895e.  return v2 @kind object;
  #L3f8960.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f8964.  if v2 != v0 then goto L3f8974;
  #L3f8968.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L3f896c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L3f8972.  return v2 @kind object;
  #L3f8974.  v2:= 0I;
  #L3f8976.  return v2 @kind object;
}
