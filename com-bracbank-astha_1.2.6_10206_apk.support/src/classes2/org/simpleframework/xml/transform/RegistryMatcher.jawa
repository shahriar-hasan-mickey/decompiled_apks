record `org.simpleframework.xml.transform.RegistryMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.transforms` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.types` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8a30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8a36.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3f8a3a.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3f8a40.  v1.`org.simpleframework.xml.transform.RegistryMatcher.transforms` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3f8a44.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3f8a48.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3f8a4e.  v1.`org.simpleframework.xml.transform.RegistryMatcher.types` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3f8a52.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `create`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.create:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f89a0.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.types` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f89a4.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f89aa.  v0:= temp @kind object;
  #L3f89ac.  v0:= (`java.lang.Class`) v0 @kind object;
  #L3f89b0.  if v0 == 0 then goto L3f89be;
  #L3f89b4.  call temp:= `create`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.create:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f89ba.  v2:= temp @kind object;
  #L3f89bc.  return v2 @kind object;
  #L3f89be.  v2:= 0I;
  #L3f89c0.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `create`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.create:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f89d4.  call temp:= `newInstance`(v3) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3f89da.  v3:= temp @kind object;
  #L3f89dc.  v3:= (`org.simpleframework.xml.transform.Transform`) v3 @kind object;
  #L3f89e0.  if v3 == 0 then goto L3f89ee;
  #L3f89e4.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.transforms` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f89e8.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f89ee.  return v3 @kind object;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8a64.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.types` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8a68.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f8a6e.  return @kind void;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.transform.Transform` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Lorg/simpleframework/xml/transform/Transform;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8a80.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.transforms` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8a84.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f8a8a.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8a00.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.transforms` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8a04.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f8a0a.  v0:= temp @kind object;
  #L3f8a0c.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L3f8a10.  if v0 != 0 then goto L3f8a1e;
  #L3f8a14.  call temp:= `create`(v1, v2) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.create:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8a1a.  v2:= temp @kind object;
  #L3f8a1c.  return v2 @kind object;
  #L3f8a1e.  return v0 @kind object;
}
