record `org.simpleframework.xml.transform.AtomicIntegerTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.AtomicIntegerTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f73fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7402.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.AtomicIntegerTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f7378.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.read:(Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L3f737e.  v1:= temp @kind object;
  #L3f7380.  return v1 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicInteger` `read`(`org.simpleframework.xml.transform.AtomicIntegerTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.read:(Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f73d0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L3f73d6.  v2:= temp @kind object;
  #L3f73d8.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3f73dc.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3f73e2.  v2:= temp;
  #L3f73e4.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L3f73ea.  return v0 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.AtomicIntegerTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f7394.  v1:= (`java.util.concurrent.atomic.AtomicInteger`) v1 @kind object;
  #L3f7398.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.write:(Ljava/util/concurrent/atomic/AtomicInteger;)Ljava/lang/String;` @kind virtual;
  #L3f739e.  v1:= temp @kind object;
  #L3f73a0.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.AtomicIntegerTransform` v0 @kind this, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.write:(Ljava/util/concurrent/atomic/AtomicInteger;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f73b4.  call temp:= `toString`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f73ba.  v1:= temp @kind object;
  #L3f73bc.  return v1 @kind object;
}
