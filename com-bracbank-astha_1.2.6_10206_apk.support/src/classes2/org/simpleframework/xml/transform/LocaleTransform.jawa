record `org.simpleframework.xml.transform.LocaleTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.util.regex.Pattern` `org.simpleframework.xml.transform.LocaleTransform.pattern` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.LocaleTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f84a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f84a6.  v0:= "_" @kind object;
  #L3f84aa.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L3f84b0.  v0:= temp @kind object;
  #L3f84b2.  v1.`org.simpleframework.xml.transform.LocaleTransform.pattern` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L3f84b6.  return @kind void;
}
procedure `java.util.Locale` `read`(`org.simpleframework.xml.transform.LocaleTransform` v4 @kind this, `java.lang.String`[] v5 @kind object) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.read:([Ljava/lang/String;)Ljava/util/Locale;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f8448.  v0:= "" @kind object;
  #L3f844c.  temp:= new `java.lang.String`[v0, v0, v0];
  #L3f8452.  v0:= temp @kind object;
  #L3f8454.  v1:= 0I;
  #L3f8456.  v2:= 0I;
  #L3f8458.  v3:= 3I;
  #L3f845a.  if v2 >= v3 then goto L3f8472;
  #L3f845e.  v3:= length @variable v5;
  #L3f8460.  if v2 >= v3 then goto L3f846c;
  #L3f8464.  v3:= v5[v2] @kind object;
  #L3f8468.  v0[v2]:= v3 @kind object;
  #L3f846c.  v2:= v2 + 1;
  #L3f8470.  goto L3f8458;
  #L3f8472.  v5:= new `java.util.Locale`;
  #L3f8476.  v1:= v0[v1] @kind object;
  #L3f847a.  v2:= 1I;
  #L3f847c.  v2:= v0[v2] @kind object;
  #L3f8480.  v3:= 2I;
  #L3f8482.  v0:= v0[v3] @kind object;
  #L3f8486.  call `<init>`(v5, v1, v2, v0) @signature `Ljava/util/Locale;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L3f848c.  return v5 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.LocaleTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f83a8.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.read:(Ljava/lang/String;)Ljava/util/Locale;` @kind virtual;
  #L3f83ae.  v1:= temp @kind object;
  #L3f83b0.  return v1 @kind object;
}
procedure `java.util.Locale` `read`(`org.simpleframework.xml.transform.LocaleTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.read:(Ljava/lang/String;)Ljava/util/Locale;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f8400.  v0:= v3.`org.simpleframework.xml.transform.LocaleTransform.pattern` @type ^`java.util.regex.Pattern` @kind object;
  #L3f8404.  call temp:= `split`(v0, v4) @signature `Ljava/util/regex/Pattern;.split:(Ljava/lang/CharSequence;)[Ljava/lang/String;` @kind virtual;
  #L3f840a.  v0:= temp @kind object;
  #L3f840c.  v1:= length @variable v0;
  #L3f840e.  v2:= 1I;
  #L3f8410.  if v1 < v2 then goto L3f841e;
  #L3f8414.  call temp:= `read`(v3, v0) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.read:([Ljava/lang/String;)Ljava/util/Locale;` @kind direct;
  #L3f841a.  v4:= temp @kind object;
  #L3f841c.  return v4 @kind object;
  #L3f841e.  v0:= new `org.simpleframework.xml.transform.InvalidFormatException`;
  #L3f8422.  v1:= new `java.lang.Object`[v2];
  #L3f8426.  v2:= 0I;
  #L3f8428.  v1[v2]:= v4 @kind object;
  #L3f842c.  v4:= "Invalid locale %s" @kind object;
  #L3f8430.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/transform/InvalidFormatException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f8436.  throw v0;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.LocaleTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f83c4.  v1:= (`java.util.Locale`) v1 @kind object;
  #L3f83c8.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.write:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3f83ce.  v1:= temp @kind object;
  #L3f83d0.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.LocaleTransform` v0 @kind this, `java.util.Locale` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.write:(Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f83e4.  call temp:= `toString`(v1) @signature `Ljava/util/Locale;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f83ea.  v1:= temp @kind object;
  #L3f83ec.  return v1 @kind object;
}
