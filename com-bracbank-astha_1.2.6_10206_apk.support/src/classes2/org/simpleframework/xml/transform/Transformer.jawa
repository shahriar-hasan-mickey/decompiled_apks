record `org.simpleframework.xml.transform.Transformer` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.cache` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.error` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.Transformer.matcher` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8f08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8f0e.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3f8f12.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3f8f18.  v1.`org.simpleframework.xml.transform.Transformer.cache` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3f8f1c.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3f8f20.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3f8f26.  v1.`org.simpleframework.xml.transform.Transformer.error` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3f8f2a.  v0:= new `org.simpleframework.xml.transform.DefaultMatcher`;
  #L3f8f2e.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L3f8f34.  v1.`org.simpleframework.xml.transform.Transformer.matcher` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L3f8f38.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `lookup`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f8e8c.  v0:= v1.`org.simpleframework.xml.transform.Transformer.error` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8e90.  call temp:= `contains`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f8e96.  v0:= temp;
  #L3f8e98.  if v0 != 0 then goto L3f8ebc;
  #L3f8e9c.  v0:= v1.`org.simpleframework.xml.transform.Transformer.cache` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8ea0.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f8ea6.  v0:= temp @kind object;
  #L3f8ea8.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L3f8eac.  if v0 == 0 then goto L3f8eb2;
  #L3f8eb0.  return v0 @kind object;
  #L3f8eb2.  call temp:= `match`(v1, v2) @signature `Lorg/simpleframework/xml/transform/Transformer;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8eb8.  v2:= temp @kind object;
  #L3f8eba.  return v2 @kind object;
  #L3f8ebc.  v2:= 0I;
  #L3f8ebe.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f8ed0.  v0:= v2.`org.simpleframework.xml.transform.Transformer.matcher` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L3f8ed4.  call temp:= `match`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L3f8eda.  v0:= temp @kind object;
  #L3f8edc.  if v0 == 0 then goto L3f8eec;
  #L3f8ee0.  v1:= v2.`org.simpleframework.xml.transform.Transformer.cache` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8ee4.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f8eea.  goto L3f8ef6;
  #L3f8eec.  v1:= v2.`org.simpleframework.xml.transform.Transformer.error` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3f8ef0.  call `cache`(v1, v3, v2) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3f8ef6.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.read:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8e04.  call temp:= `lookup`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8e0a.  v0:= temp @kind object;
  #L3f8e0c.  if v0 == 0 then goto L3f8e1a;
  #L3f8e10.  call temp:= `read`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L3f8e16.  v3:= temp @kind object;
  #L3f8e18.  return v3 @kind object;
  #L3f8e1a.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L3f8e1e.  v0:= 1I;
  #L3f8e20.  v0:= new `java.lang.Object`[v0];
  #L3f8e24.  v1:= 0I;
  #L3f8e26.  v0[v1]:= v4 @kind object;
  #L3f8e2a.  v4:= "Transform of %s not supported" @kind object;
  #L3f8e2e.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f8e34.  throw v3;
}
procedure `boolean` `valid`(`org.simpleframework.xml.transform.Transformer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.valid:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f8de0.  call temp:= `lookup`(v0, v1) @signature `Lorg/simpleframework/xml/transform/Transformer;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8de6.  v1:= temp @kind object;
  #L3f8de8.  if v1 == 0 then goto L3f8df0;
  #L3f8dec.  v1:= 1I;
  #L3f8dee.  goto L3f8df2;
  #L3f8df0.  v1:= 0I;
  #L3f8df2.  return v1;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.write:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8e48.  call temp:= `lookup`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8e4e.  v0:= temp @kind object;
  #L3f8e50.  if v0 == 0 then goto L3f8e5e;
  #L3f8e54.  call temp:= `write`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @kind interface;
  #L3f8e5a.  v3:= temp @kind object;
  #L3f8e5c.  return v3 @kind object;
  #L3f8e5e.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L3f8e62.  v0:= 1I;
  #L3f8e64.  v0:= new `java.lang.Object`[v0];
  #L3f8e68.  v1:= 0I;
  #L3f8e6a.  v0[v1]:= v4 @kind object;
  #L3f8e6e.  v4:= "Transform of %s not supported" @kind object;
  #L3f8e72.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f8e78.  throw v3;
}
