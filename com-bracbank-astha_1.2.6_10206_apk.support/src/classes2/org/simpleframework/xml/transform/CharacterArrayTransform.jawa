record `org.simpleframework.xml.transform.CharacterArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.lang.Class` `org.simpleframework.xml.transform.CharacterArrayTransform.entry` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.CharacterArrayTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f77d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f77da.  v0.`org.simpleframework.xml.transform.CharacterArrayTransform.entry` @type ^`java.lang.Class` := v1 @kind object;
  #L3f77de.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `char`[] v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.read:([CI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f76e0.  v0:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.entry` @type ^`java.lang.Class` @kind object;
  #L3f76e4.  call temp:= `newInstance`(v0, v5) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3f76ea.  v0:= temp @kind object;
  #L3f76ec.  v1:= 0I;
  #L3f76ee.  if v1 >= v5 then goto L3f770a;
  #L3f76f2.  v2:= v4[v1] @kind char;
  #L3f76f6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L3f76fc.  v2:= temp @kind object;
  #L3f76fe.  call `set`(v0, v1, v2) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L3f7704.  v1:= v1 + 1;
  #L3f7708.  goto L3f76ee;
  #L3f770a.  return v0 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.write:(Ljava/lang/Object;I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f7790.  v0:= new `java.lang.StringBuilder`;
  #L3f7794.  call `<init>`(v0, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3f779a.  v1:= 0I;
  #L3f779c.  if v1 >= v5 then goto L3f77b8;
  #L3f77a0.  call temp:= `get`(v4, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L3f77a6.  v2:= temp @kind object;
  #L3f77a8.  if v2 == 0 then goto L3f77b2;
  #L3f77ac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f77b2.  v1:= v1 + 1;
  #L3f77b6.  goto L3f779c;
  #L3f77b8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f77be.  v4:= temp @kind object;
  #L3f77c0.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f771c.  call temp:= `toCharArray`(v4) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3f7722.  v4:= temp @kind object;
  #L3f7724.  v0:= length @variable v4;
  #L3f7726.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.entry` @type ^`java.lang.Class` @kind object;
  #L3f772a.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f772e.  if v1 != v2 then goto L3f7734;
  #L3f7732.  return v4 @kind object;
  #L3f7734.  call temp:= `read`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.read:([CI)Ljava/lang/Object;` @kind direct;
  #L3f773a.  v4:= temp @kind object;
  #L3f773c.  return v4 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f7750.  call temp:= `getLength`(v4) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3f7756.  v0:= temp;
  #L3f7758.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.entry` @type ^`java.lang.Class` @kind object;
  #L3f775c.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7760.  if v1 != v2 then goto L3f7774;
  #L3f7764.  v4:= (`char`[]) v4 @kind object;
  #L3f7768.  v0:= new `java.lang.String`;
  #L3f776c.  call `<init>`(v0, v4) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3f7772.  return v0 @kind object;
  #L3f7774.  call temp:= `write`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.write:(Ljava/lang/Object;I)Ljava/lang/String;` @kind direct;
  #L3f777a.  v4:= temp @kind object;
  #L3f777c.  return v4 @kind object;
}
