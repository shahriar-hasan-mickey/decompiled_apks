record `org.simpleframework.xml.transform.TransformException` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.PersistenceException` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.TransformException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f8d8c.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f8d92.  v1:= temp @kind object;
  #L3f8d94.  v2:= 0I;
  #L3f8d96.  v2:= new `java.lang.Object`[v2];
  #L3f8d9a.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f8da0.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.TransformException` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8db4.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3f8dba.  v3:= temp @kind object;
  #L3f8dbc.  v4:= 1I;
  #L3f8dbe.  v4:= new `java.lang.Object`[v4];
  #L3f8dc2.  v0:= 0I;
  #L3f8dc4.  v4[v0]:= v2 @kind object;
  #L3f8dc8.  call `<init>`(v1, v3, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f8dce.  return @kind void;
}
