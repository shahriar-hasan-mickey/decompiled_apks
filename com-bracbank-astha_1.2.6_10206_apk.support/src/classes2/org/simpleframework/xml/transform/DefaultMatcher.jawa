record `org.simpleframework.xml.transform.DefaultMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.array` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.matcher` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.primitive` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.stock` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f7f24.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7f2a.  v0:= new `org.simpleframework.xml.transform.PrimitiveMatcher`;
  #L3f7f2e.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @kind direct;
  #L3f7f34.  v1.`org.simpleframework.xml.transform.DefaultMatcher.primitive` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L3f7f38.  v0:= new `org.simpleframework.xml.transform.PackageMatcher`;
  #L3f7f3c.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @kind direct;
  #L3f7f42.  v1.`org.simpleframework.xml.transform.DefaultMatcher.stock` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L3f7f46.  v0:= new `org.simpleframework.xml.transform.ArrayMatcher`;
  #L3f7f4a.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L3f7f50.  v1.`org.simpleframework.xml.transform.DefaultMatcher.array` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L3f7f54.  v1.`org.simpleframework.xml.transform.DefaultMatcher.matcher` @type ^`org.simpleframework.xml.transform.Matcher` := v2 @kind object;
  #L3f7f58.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `matchType`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.matchType:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f7ed0.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3f7ed6.  v0:= temp;
  #L3f7ed8.  if v0 == 0 then goto L3f7eea;
  #L3f7edc.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.array` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L3f7ee0.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L3f7ee6.  v2:= temp @kind object;
  #L3f7ee8.  return v2 @kind object;
  #L3f7eea.  call temp:= `isPrimitive`(v2) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L3f7ef0.  v0:= temp;
  #L3f7ef2.  if v0 == 0 then goto L3f7f04;
  #L3f7ef6.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.primitive` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L3f7efa.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L3f7f00.  v2:= temp @kind object;
  #L3f7f02.  return v2 @kind object;
  #L3f7f04.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.stock` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L3f7f08.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L3f7f0e.  v2:= temp @kind object;
  #L3f7f10.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ea4.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.matcher` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L3f7ea8.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L3f7eae.  v0:= temp @kind object;
  #L3f7eb0.  if v0 == 0 then goto L3f7eb6;
  #L3f7eb4.  return v0 @kind object;
  #L3f7eb6.  call temp:= `matchType`(v1, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.matchType:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f7ebc.  v2:= temp @kind object;
  #L3f7ebe.  return v2 @kind object;
}
