record `org.simpleframework.xml.transform.PackageMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PackageMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f88bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f88c2.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `matchEnum`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchEnum:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f8614.  call temp:= `getSuperclass`(v2) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L3f861a.  v0:= temp @kind object;
  #L3f861c.  if v0 == 0 then goto L3f8650;
  #L3f8620.  call temp:= `isEnum`(v0) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L3f8626.  v0:= temp;
  #L3f8628.  if v0 == 0 then goto L3f8638;
  #L3f862c.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L3f8630.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f8636.  return v0 @kind object;
  #L3f8638.  call temp:= `isEnum`(v2) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L3f863e.  v0:= temp;
  #L3f8640.  if v0 == 0 then goto L3f8650;
  #L3f8644.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L3f8648.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f864e.  return v0 @kind object;
  #L3f8650.  v2:= 0I;
  #L3f8652.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchFile`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchFile:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f8664.  v0:= constclass @type ^`java.io.File` @kind object;
  #L3f8668.  if v2 != v0 then goto L3f8678;
  #L3f866c.  v2:= new `org.simpleframework.xml.transform.FileTransform`;
  #L3f8670.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FileTransform;.<init>:()V` @kind direct;
  #L3f8676.  return v2 @kind object;
  #L3f8678.  v2:= 0I;
  #L3f867a.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchLanguage`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchLanguage:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f868c.  v0:= constclass @type ^`java.lang.Boolean` @kind object;
  #L3f8690.  if v2 != v0 then goto L3f86a0;
  #L3f8694.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L3f8698.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L3f869e.  return v2 @kind object;
  #L3f86a0.  v0:= constclass @type ^`java.lang.Integer` @kind object;
  #L3f86a4.  if v2 != v0 then goto L3f86b4;
  #L3f86a8.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L3f86ac.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L3f86b2.  return v2 @kind object;
  #L3f86b4.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L3f86b8.  if v2 != v0 then goto L3f86c8;
  #L3f86bc.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L3f86c0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L3f86c6.  return v2 @kind object;
  #L3f86c8.  v0:= constclass @type ^`java.lang.Double` @kind object;
  #L3f86cc.  if v2 != v0 then goto L3f86dc;
  #L3f86d0.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L3f86d4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L3f86da.  return v2 @kind object;
  #L3f86dc.  v0:= constclass @type ^`java.lang.Float` @kind object;
  #L3f86e0.  if v2 != v0 then goto L3f86f0;
  #L3f86e4.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L3f86e8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L3f86ee.  return v2 @kind object;
  #L3f86f0.  v0:= constclass @type ^`java.lang.Short` @kind object;
  #L3f86f4.  if v2 != v0 then goto L3f8704;
  #L3f86f8.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L3f86fc.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L3f8702.  return v2 @kind object;
  #L3f8704.  v0:= constclass @type ^`java.lang.Byte` @kind object;
  #L3f8708.  if v2 != v0 then goto L3f8718;
  #L3f870c.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L3f8710.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L3f8716.  return v2 @kind object;
  #L3f8718.  v0:= constclass @type ^`java.lang.Character` @kind object;
  #L3f871c.  if v2 != v0 then goto L3f872c;
  #L3f8720.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L3f8724.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L3f872a.  return v2 @kind object;
  #L3f872c.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L3f8730.  if v2 != v0 then goto L3f8740;
  #L3f8734.  v2:= new `org.simpleframework.xml.transform.StringTransform`;
  #L3f8738.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/StringTransform;.<init>:()V` @kind direct;
  #L3f873e.  return v2 @kind object;
  #L3f8740.  v0:= constclass @type ^`java.lang.Class` @kind object;
  #L3f8744.  if v2 != v0 then goto L3f8754;
  #L3f8748.  v2:= new `org.simpleframework.xml.transform.ClassTransform`;
  #L3f874c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @kind direct;
  #L3f8752.  return v2 @kind object;
  #L3f8754.  v2:= 0I;
  #L3f8756.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchMath`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchMath:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f8768.  v0:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L3f876c.  if v2 != v0 then goto L3f877c;
  #L3f8770.  v2:= new `org.simpleframework.xml.transform.BigDecimalTransform`;
  #L3f8774.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigDecimalTransform;.<init>:()V` @kind direct;
  #L3f877a.  return v2 @kind object;
  #L3f877c.  v0:= constclass @type ^`java.math.BigInteger` @kind object;
  #L3f8780.  if v2 != v0 then goto L3f8790;
  #L3f8784.  v2:= new `org.simpleframework.xml.transform.BigIntegerTransform`;
  #L3f8788.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigIntegerTransform;.<init>:()V` @kind direct;
  #L3f878e.  return v2 @kind object;
  #L3f8790.  v2:= 0I;
  #L3f8792.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchSQL`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchSQL:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f87a4.  v0:= constclass @type ^`java.sql.Time` @kind object;
  #L3f87a8.  if v2 != v0 then goto L3f87b8;
  #L3f87ac.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L3f87b0.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f87b6.  return v0 @kind object;
  #L3f87b8.  v0:= constclass @type ^`java.sql.Date` @kind object;
  #L3f87bc.  if v2 != v0 then goto L3f87cc;
  #L3f87c0.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L3f87c4.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f87ca.  return v0 @kind object;
  #L3f87cc.  v0:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L3f87d0.  if v2 != v0 then goto L3f87e0;
  #L3f87d4.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L3f87d8.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f87de.  return v0 @kind object;
  #L3f87e0.  v2:= 0I;
  #L3f87e2.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchURL`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchURL:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f87f4.  v0:= constclass @type ^`java.net.URL` @kind object;
  #L3f87f8.  if v2 != v0 then goto L3f8808;
  #L3f87fc.  v2:= new `org.simpleframework.xml.transform.URLTransform`;
  #L3f8800.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/URLTransform;.<init>:()V` @kind direct;
  #L3f8806.  return v2 @kind object;
  #L3f8808.  v2:= 0I;
  #L3f880a.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `matchUtility`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchUtility:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f881c.  v0:= constclass @type ^`java.util.Date` @kind object;
  #L3f8820.  if v2 != v0 then goto L3f8830;
  #L3f8824.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L3f8828.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f882e.  return v0 @kind object;
  #L3f8830.  v0:= constclass @type ^`java.util.Locale` @kind object;
  #L3f8834.  if v2 != v0 then goto L3f8844;
  #L3f8838.  v2:= new `org.simpleframework.xml.transform.LocaleTransform`;
  #L3f883c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.<init>:()V` @kind direct;
  #L3f8842.  return v2 @kind object;
  #L3f8844.  v0:= constclass @type ^`java.util.Currency` @kind object;
  #L3f8848.  if v2 != v0 then goto L3f8858;
  #L3f884c.  v2:= new `org.simpleframework.xml.transform.CurrencyTransform`;
  #L3f8850.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CurrencyTransform;.<init>:()V` @kind direct;
  #L3f8856.  return v2 @kind object;
  #L3f8858.  v0:= constclass @type ^`java.util.GregorianCalendar` @kind object;
  #L3f885c.  if v2 != v0 then goto L3f886c;
  #L3f8860.  v2:= new `org.simpleframework.xml.transform.GregorianCalendarTransform`;
  #L3f8864.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/GregorianCalendarTransform;.<init>:()V` @kind direct;
  #L3f886a.  return v2 @kind object;
  #L3f886c.  v0:= constclass @type ^`java.util.TimeZone` @kind object;
  #L3f8870.  if v2 != v0 then goto L3f8880;
  #L3f8874.  v2:= new `org.simpleframework.xml.transform.TimeZoneTransform`;
  #L3f8878.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/TimeZoneTransform;.<init>:()V` @kind direct;
  #L3f887e.  return v2 @kind object;
  #L3f8880.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3f8884.  if v2 != v0 then goto L3f8894;
  #L3f8888.  v2:= new `org.simpleframework.xml.transform.AtomicIntegerTransform`;
  #L3f888c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.<init>:()V` @kind direct;
  #L3f8892.  return v2 @kind object;
  #L3f8894.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3f8898.  if v2 != v0 then goto L3f88a8;
  #L3f889c.  v2:= new `org.simpleframework.xml.transform.AtomicLongTransform`;
  #L3f88a0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.<init>:()V` @kind direct;
  #L3f88a6.  return v2 @kind object;
  #L3f88a8.  v2:= 0I;
  #L3f88aa.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PackageMatcher` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f8554.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f855a.  v0:= temp @kind object;
  #L3f855c.  v1:= "java.lang" @kind object;
  #L3f8560.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f8566.  v1:= temp;
  #L3f8568.  if v1 == 0 then goto L3f8576;
  #L3f856c.  call temp:= `matchLanguage`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchLanguage:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f8572.  v3:= temp @kind object;
  #L3f8574.  return v3 @kind object;
  #L3f8576.  v1:= "java.util" @kind object;
  #L3f857a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f8580.  v1:= temp;
  #L3f8582.  if v1 == 0 then goto L3f8590;
  #L3f8586.  call temp:= `matchUtility`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchUtility:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f858c.  v3:= temp @kind object;
  #L3f858e.  return v3 @kind object;
  #L3f8590.  v1:= "java.net" @kind object;
  #L3f8594.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f859a.  v1:= temp;
  #L3f859c.  if v1 == 0 then goto L3f85aa;
  #L3f85a0.  call temp:= `matchURL`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchURL:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f85a6.  v3:= temp @kind object;
  #L3f85a8.  return v3 @kind object;
  #L3f85aa.  v1:= "java.io" @kind object;
  #L3f85ae.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f85b4.  v1:= temp;
  #L3f85b6.  if v1 == 0 then goto L3f85c4;
  #L3f85ba.  call temp:= `matchFile`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchFile:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f85c0.  v3:= temp @kind object;
  #L3f85c2.  return v3 @kind object;
  #L3f85c4.  v1:= "java.sql" @kind object;
  #L3f85c8.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f85ce.  v1:= temp;
  #L3f85d0.  if v1 == 0 then goto L3f85de;
  #L3f85d4.  call temp:= `matchSQL`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchSQL:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f85da.  v3:= temp @kind object;
  #L3f85dc.  return v3 @kind object;
  #L3f85de.  v1:= "java.math" @kind object;
  #L3f85e2.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3f85e8.  v0:= temp;
  #L3f85ea.  if v0 == 0 then goto L3f85f8;
  #L3f85ee.  call temp:= `matchMath`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchMath:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f85f4.  v3:= temp @kind object;
  #L3f85f6.  return v3 @kind object;
  #L3f85f8.  call temp:= `matchEnum`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.matchEnum:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L3f85fe.  v3:= temp @kind object;
  #L3f8600.  return v3 @kind object;
}
