record `org.simpleframework.xml.transform.StringArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.util.regex.Pattern` `org.simpleframework.xml.transform.StringArrayTransform.pattern` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.transform.StringArrayTransform.token` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8c40.  v0:= "," @kind object;
  #L3f8c44.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f8c4a.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f8c5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8c62.  call temp:= `compile`(v2) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L3f8c68.  v0:= temp @kind object;
  #L3f8c6a.  v1.`org.simpleframework.xml.transform.StringArrayTransform.pattern` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L3f8c6e.  v1.`org.simpleframework.xml.transform.StringArrayTransform.token` @type ^`java.lang.String` := v2 @kind object;
  #L3f8c72.  return @kind void;
}
procedure `java.lang.String`[] `read`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f8c00.  v3:= v1.`org.simpleframework.xml.transform.StringArrayTransform.pattern` @type ^`java.util.regex.Pattern` @kind object;
  #L3f8c04.  call temp:= `split`(v3, v2) @signature `Ljava/util/regex/Pattern;.split:(Ljava/lang/CharSequence;)[Ljava/lang/String;` @kind virtual;
  #L3f8c0a.  v2:= temp @kind object;
  #L3f8c0c.  v3:= 0I;
  #L3f8c0e.  v0:= length @variable v2;
  #L3f8c10.  if v3 >= v0 then goto L3f8c2e;
  #L3f8c14.  v0:= v2[v3] @kind object;
  #L3f8c18.  if v0 == 0 then goto L3f8c28;
  #L3f8c1c.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L3f8c22.  v0:= temp @kind object;
  #L3f8c24.  v2[v3]:= v0 @kind object;
  #L3f8c28.  v3:= v3 + 1;
  #L3f8c2c.  goto L3f8c0e;
  #L3f8c2e.  return v2 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.StringArrayTransform` v4 @kind this, `java.lang.String`[] v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f8b84.  v0:= new `java.lang.StringBuilder`;
  #L3f8b88.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f8b8e.  v1:= 0I;
  #L3f8b90.  v2:= length @variable v5;
  #L3f8b92.  if v1 >= v2 then goto L3f8bc6;
  #L3f8b96.  v2:= v5[v1] @kind object;
  #L3f8b9a.  if v2 == 0 then goto L3f8bc0;
  #L3f8b9e.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3f8ba4.  v3:= temp;
  #L3f8ba6.  if v3 <= 0 then goto L3f8bba;
  #L3f8baa.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8bb0.  v3:= 32I;
  #L3f8bb4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8bba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f8bc0.  v1:= v1 + 1;
  #L3f8bc4.  goto L3f8b90;
  #L3f8bc6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f8bcc.  v5:= temp @kind object;
  #L3f8bce.  return v5 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.StringArrayTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f8b28.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L3f8b2e.  v1:= temp @kind object;
  #L3f8b30.  return v1 @kind object;
}
procedure `java.lang.String`[] `read`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8be0.  v0:= v1.`org.simpleframework.xml.transform.StringArrayTransform.token` @type ^`java.lang.String` @kind object;
  #L3f8be4.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind direct;
  #L3f8bea.  v2:= temp @kind object;
  #L3f8bec.  return v2 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.StringArrayTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f8b44.  v1:= (`java.lang.String`[]) v1 @kind object;
  #L3f8b48.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3f8b4e.  v1:= temp @kind object;
  #L3f8b50.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f8b64.  v0:= v1.`org.simpleframework.xml.transform.StringArrayTransform.token` @type ^`java.lang.String` @kind object;
  #L3f8b68.  call temp:= `write`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L3f8b6e.  v2:= temp @kind object;
  #L3f8b70.  return v2 @kind object;
}
