record `org.simpleframework.xml.transform.ClassTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.BOOLEAN` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.BYTE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.CHARACTER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.FLOAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.INTEGER` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.LONG` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.SHORT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.transform.ClassTransform.VOID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7a64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f7a6a.  return @kind void;
}
procedure `java.lang.ClassLoader` `getCallerClassLoader`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.getCallerClassLoader:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f79c4.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f79ca.  v0:= temp @kind object;
  #L3f79cc.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L3f79d2.  v0:= temp @kind object;
  #L3f79d4.  return v0 @kind object;
}
procedure `java.lang.ClassLoader` `getClassLoader`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.getClassLoader:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3f79e8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3f79ee.  v0:= temp @kind object;
  #L3f79f0.  call temp:= `getContextClassLoader`(v0) @signature `Ljava/lang/Thread;.getContextClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L3f79f6.  v0:= temp @kind object;
  #L3f79f8.  return v0 @kind object;
}
procedure `java.lang.Class` `readPrimitive`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.readPrimitive:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f78e8.  v0:= "byte" @kind object;
  #L3f78ec.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f78f2.  v0:= temp;
  #L3f78f4.  if v0 == 0 then goto L3f78fe;
  #L3f78f8.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f78fc.  return v2 @kind object;
  #L3f78fe.  v0:= "short" @kind object;
  #L3f7902.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7908.  v0:= temp;
  #L3f790a.  if v0 == 0 then goto L3f7914;
  #L3f790e.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7912.  return v2 @kind object;
  #L3f7914.  v0:= "int" @kind object;
  #L3f7918.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f791e.  v0:= temp;
  #L3f7920.  if v0 == 0 then goto L3f792a;
  #L3f7924.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7928.  return v2 @kind object;
  #L3f792a.  v0:= "long" @kind object;
  #L3f792e.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7934.  v0:= temp;
  #L3f7936.  if v0 == 0 then goto L3f7940;
  #L3f793a.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f793e.  return v2 @kind object;
  #L3f7940.  v0:= "char" @kind object;
  #L3f7944.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f794a.  v0:= temp;
  #L3f794c.  if v0 == 0 then goto L3f7956;
  #L3f7950.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7954.  return v2 @kind object;
  #L3f7956.  v0:= "float" @kind object;
  #L3f795a.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7960.  v0:= temp;
  #L3f7962.  if v0 == 0 then goto L3f796c;
  #L3f7966.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f796a.  return v2 @kind object;
  #L3f796c.  v0:= "double" @kind object;
  #L3f7970.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f7976.  v0:= temp;
  #L3f7978.  if v0 == 0 then goto L3f7982;
  #L3f797c.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7980.  return v2 @kind object;
  #L3f7982.  v0:= "boolean" @kind object;
  #L3f7986.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f798c.  v0:= temp;
  #L3f798e.  if v0 == 0 then goto L3f7998;
  #L3f7992.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f7996.  return v2 @kind object;
  #L3f7998.  v0:= "void" @kind object;
  #L3f799c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f79a2.  v2:= temp;
  #L3f79a4.  if v2 == 0 then goto L3f79ae;
  #L3f79a8.  v2:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L3f79ac.  return v2 @kind object;
  #L3f79ae.  v2:= 0I;
  #L3f79b0.  return v2 @kind object;
}
procedure `java.lang.Class` `read`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f78ac.  call temp:= `readPrimitive`(v1, v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.readPrimitive:(Ljava/lang/String;)Ljava/lang/Class;` @kind direct;
  #L3f78b2.  v0:= temp @kind object;
  #L3f78b4.  if v0 != 0 then goto L3f78d6;
  #L3f78b8.  call temp:= `getClassLoader`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.getClassLoader:()Ljava/lang/ClassLoader;` @kind static;
  #L3f78be.  v0:= temp @kind object;
  #L3f78c0.  if v0 != 0 then goto L3f78cc;
  #L3f78c4.  call temp:= `getCallerClassLoader`(v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.getCallerClassLoader:()Ljava/lang/ClassLoader;` @kind direct;
  #L3f78ca.  v0:= temp @kind object;
  #L3f78cc.  call temp:= `loadClass`(v0, v2) @signature `Ljava/lang/ClassLoader;.loadClass:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L3f78d2.  v2:= temp @kind object;
  #L3f78d4.  return v2 @kind object;
  #L3f78d6.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f7a0c.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L3f7a12.  v1:= temp @kind object;
  #L3f7a14.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f7a28.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f7a2e.  v1:= temp @kind object;
  #L3f7a30.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f7a44.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3f7a48.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L3f7a4e.  v1:= temp @kind object;
  #L3f7a50.  return v1 @kind object;
}
