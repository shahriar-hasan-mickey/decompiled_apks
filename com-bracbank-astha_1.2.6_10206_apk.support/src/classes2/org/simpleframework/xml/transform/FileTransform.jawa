record `org.simpleframework.xml.transform.FileTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.FileTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/FileTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f812c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f8132.  return @kind void;
}
procedure `java.io.File` `read`(`org.simpleframework.xml.transform.FileTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/FileTransform;.read:(Ljava/lang/String;)Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f80b8.  v0:= new `java.io.File`;
  #L3f80bc.  call `<init>`(v0, v2) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f80c2.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.FileTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/FileTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f80d4.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/FileTransform;.read:(Ljava/lang/String;)Ljava/io/File;` @kind virtual;
  #L3f80da.  v1:= temp @kind object;
  #L3f80dc.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.FileTransform` v0 @kind this, `java.io.File` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/FileTransform;.write:(Ljava/io/File;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f80f0.  call temp:= `getPath`(v1) @signature `Ljava/io/File;.getPath:()Ljava/lang/String;` @kind virtual;
  #L3f80f6.  v1:= temp @kind object;
  #L3f80f8.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.FileTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/FileTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f810c.  v1:= (`java.io.File`) v1 @kind object;
  #L3f8110.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/FileTransform;.write:(Ljava/io/File;)Ljava/lang/String;` @kind virtual;
  #L3f8116.  v1:= temp @kind object;
  #L3f8118.  return v1 @kind object;
}
