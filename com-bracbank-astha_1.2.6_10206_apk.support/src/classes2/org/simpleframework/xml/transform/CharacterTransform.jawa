record `org.simpleframework.xml.transform.CharacterTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7894.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f789a.  return @kind void;
}
procedure `java.lang.Character` `read`(`org.simpleframework.xml.transform.CharacterTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f77f0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f77f6.  v0:= temp;
  #L3f77f8.  v1:= 0I;
  #L3f77fa.  v2:= 1I;
  #L3f77fc.  if v0 != v2 then goto L3f7812;
  #L3f7800.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f7806.  v4:= temp;
  #L3f7808.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L3f780e.  v4:= temp @kind object;
  #L3f7810.  return v4 @kind object;
  #L3f7812.  v0:= new `org.simpleframework.xml.transform.InvalidFormatException`;
  #L3f7816.  v2:= new `java.lang.Object`[v2];
  #L3f781a.  v2[v1]:= v4 @kind object;
  #L3f781e.  v4:= "Cannot convert '%s' to a character" @kind object;
  #L3f7822.  call `<init>`(v0, v4, v2) @signature `Lorg/simpleframework/xml/transform/InvalidFormatException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f7828.  throw v0;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f783c.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Character;` @kind virtual;
  #L3f7842.  v1:= temp @kind object;
  #L3f7844.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.Character` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Character;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f7858.  call temp:= `toString`(v1) @signature `Ljava/lang/Character;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f785e.  v1:= temp @kind object;
  #L3f7860.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f7874.  v1:= (`java.lang.Character`) v1 @kind object;
  #L3f7878.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Character;)Ljava/lang/String;` @kind virtual;
  #L3f787e.  v1:= temp @kind object;
  #L3f7880.  return v1 @kind object;
}
