record `org.simpleframework.xml.transform.ArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `org.simpleframework.xml.transform.Transform` `org.simpleframework.xml.transform.ArrayTransform.delegate` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.transform.ArrayTransform.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.transform.StringArrayTransform` `org.simpleframework.xml.transform.ArrayTransform.split` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.ArrayTransform` v1 @kind this, `org.simpleframework.xml.transform.Transform` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.<init>:(Lorg/simpleframework/xml/transform/Transform;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f7348.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f734e.  v0:= new `org.simpleframework.xml.transform.StringArrayTransform`;
  #L3f7352.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:()V` @kind direct;
  #L3f7358.  v1.`org.simpleframework.xml.transform.ArrayTransform.split` @type ^`org.simpleframework.xml.transform.StringArrayTransform` := v0 @kind object;
  #L3f735c.  v1.`org.simpleframework.xml.transform.ArrayTransform.delegate` @type ^`org.simpleframework.xml.transform.Transform` := v2 @kind object;
  #L3f7360.  v1.`org.simpleframework.xml.transform.ArrayTransform.entry` @type ^`java.lang.Class` := v3 @kind object;
  #L3f7364.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.ArrayTransform` v4 @kind this, `java.lang.String`[] v5 @kind object, `int` v6 ) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.read:([Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7294.  v0:= v4.`org.simpleframework.xml.transform.ArrayTransform.entry` @type ^`java.lang.Class` @kind object;
  #L3f7298.  call temp:= `newInstance`(v0, v6) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3f729e.  v0:= temp @kind object;
  #L3f72a0.  v1:= 0I;
  #L3f72a2.  if v1 >= v6 then goto L3f72c6;
  #L3f72a6.  v2:= v4.`org.simpleframework.xml.transform.ArrayTransform.delegate` @type ^`org.simpleframework.xml.transform.Transform` @kind object;
  #L3f72aa.  v3:= v5[v1] @kind object;
  #L3f72ae.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L3f72b4.  v2:= temp @kind object;
  #L3f72b6.  if v2 == 0 then goto L3f72c0;
  #L3f72ba.  call `set`(v0, v1, v2) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L3f72c0.  v1:= v1 + 1;
  #L3f72c4.  goto L3f72a2;
  #L3f72c6.  return v0 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ArrayTransform` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.write:(Ljava/lang/Object;I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f72fc.  v0:= new `java.lang.String`[v6];
  #L3f7300.  v1:= 0I;
  #L3f7302.  if v1 >= v6 then goto L3f7328;
  #L3f7306.  call temp:= `get`(v5, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L3f730c.  v2:= temp @kind object;
  #L3f730e.  if v2 == 0 then goto L3f7322;
  #L3f7312.  v3:= v4.`org.simpleframework.xml.transform.ArrayTransform.delegate` @type ^`org.simpleframework.xml.transform.Transform` @kind object;
  #L3f7316.  call temp:= `write`(v3, v2) @signature `Lorg/simpleframework/xml/transform/Transform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @kind interface;
  #L3f731c.  v2:= temp @kind object;
  #L3f731e.  v0[v1]:= v2 @kind object;
  #L3f7322.  v1:= v1 + 1;
  #L3f7326.  goto L3f7302;
  #L3f7328.  v5:= v4.`org.simpleframework.xml.transform.ArrayTransform.split` @type ^`org.simpleframework.xml.transform.StringArrayTransform` @kind object;
  #L3f732c.  call temp:= `write`(v5, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3f7332.  v5:= temp @kind object;
  #L3f7334.  return v5 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.ArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f726c.  v0:= v1.`org.simpleframework.xml.transform.ArrayTransform.split` @type ^`org.simpleframework.xml.transform.StringArrayTransform` @kind object;
  #L3f7270.  call temp:= `read`(v0, v2) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L3f7276.  v2:= temp @kind object;
  #L3f7278.  v0:= length @variable v2;
  #L3f727a.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.read:([Ljava/lang/String;I)Ljava/lang/Object;` @kind direct;
  #L3f7280.  v2:= temp @kind object;
  #L3f7282.  return v2 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ArrayTransform` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f72d8.  call temp:= `getLength`(v2) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3f72de.  v0:= temp;
  #L3f72e0.  call temp:= `write`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.write:(Ljava/lang/Object;I)Ljava/lang/String;` @kind direct;
  #L3f72e6.  v2:= temp @kind object;
  #L3f72e8.  return v2 @kind object;
}
