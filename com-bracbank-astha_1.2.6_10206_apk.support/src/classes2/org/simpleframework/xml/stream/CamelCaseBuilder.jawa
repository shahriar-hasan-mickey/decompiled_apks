record `org.simpleframework.xml.stream.CamelCaseBuilder` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Style` @kind interface {
  `boolean` `org.simpleframework.xml.stream.CamelCaseBuilder.attribute` @AccessFlag PUBLIC_FINAL;
  `boolean` `org.simpleframework.xml.stream.CamelCaseBuilder.element` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder` v0 @kind this, `boolean` v1 , `boolean` v2 ) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder;.<init>:(ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f2ce4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f2cea.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder.attribute` @type ^`boolean` := v2 @kind boolean;
  #L3f2cee.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder.element` @type ^`boolean` := v1 @kind boolean;
  #L3f2cf2.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.stream.CamelCaseBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f2c8c.  v0:= 0I;
  #L3f2c8e.  if v3 == 0 then goto L3f2ca6;
  #L3f2c92.  v1:= new `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute`;
  #L3f2c96.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @kind direct;
  #L3f2c9c.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L3f2ca2.  v3:= temp @kind object;
  #L3f2ca4.  return v3 @kind object;
  #L3f2ca6.  return v0 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.stream.CamelCaseBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f2cb8.  v0:= 0I;
  #L3f2cba.  if v3 == 0 then goto L3f2cd2;
  #L3f2cbe.  v1:= new `org.simpleframework.xml.stream.CamelCaseBuilder$Element`;
  #L3f2cc2.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @kind direct;
  #L3f2cc8.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L3f2cce.  v3:= temp @kind object;
  #L3f2cd0.  return v3 @kind object;
  #L3f2cd2.  return v0 @kind object;
}
