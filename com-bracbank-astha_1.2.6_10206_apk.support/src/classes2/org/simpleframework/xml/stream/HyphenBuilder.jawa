record `org.simpleframework.xml.stream.HyphenBuilder` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Style` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.HyphenBuilder` v0 @kind this) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f3f9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3fa2.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.stream.HyphenBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3f44.  v0:= 0I;
  #L3f3f46.  if v3 == 0 then goto L3f3f5e;
  #L3f3f4a.  v1:= new `org.simpleframework.xml.stream.HyphenBuilder$Parser`;
  #L3f3f4e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/HyphenBuilder$1;)V` @kind direct;
  #L3f3f54.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L3f3f5a.  v3:= temp @kind object;
  #L3f3f5c.  return v3 @kind object;
  #L3f3f5e.  return v0 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.stream.HyphenBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3f70.  v0:= 0I;
  #L3f3f72.  if v3 == 0 then goto L3f3f8a;
  #L3f3f76.  v1:= new `org.simpleframework.xml.stream.HyphenBuilder$Parser`;
  #L3f3f7a.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/HyphenBuilder$1;)V` @kind direct;
  #L3f3f80.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L3f3f86.  v3:= temp @kind object;
  #L3f3f88.  return v3 @kind object;
  #L3f3f8a.  return v0 @kind object;
}
