record `org.simpleframework.xml.stream.OutputStack` @kind class @AccessFlag PUBLIC extends `java.util.ArrayList` @kind class {
  `java.util.Set` `org.simpleframework.xml.stream.OutputStack.active` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.OutputStack` v0 @kind this, `java.util.Set` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack;.<init>:(Ljava/util/Set;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f61ec.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f61f2.  v0.`org.simpleframework.xml.stream.OutputStack.active` @type ^`java.util.Set` := v1 @kind object;
  #L3f61f6.  return @kind void;
}
procedure `org.simpleframework.xml.stream.OutputNode` `bottom`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.bottom:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6108.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f610e.  v0:= temp;
  #L3f6110.  if v0 > 0 then goto L3f6118;
  #L3f6114.  v0:= 0I;
  #L3f6116.  return v0 @kind object;
  #L3f6118.  v0:= 0I;
  #L3f611a.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6120.  v0:= temp @kind object;
  #L3f6122.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L3f6126.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f60ec.  v0:= new `org.simpleframework.xml.stream.OutputStack$Sequence`;
  #L3f60f0.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.<init>:(Lorg/simpleframework/xml/stream/OutputStack;)V` @kind direct;
  #L3f60f6.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `pop`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6138.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f613e.  v0:= temp;
  #L3f6140.  if v0 > 0 then goto L3f6148;
  #L3f6144.  v0:= 0I;
  #L3f6146.  return v0 @kind object;
  #L3f6148.  v0:= v0 + -1;
  #L3f614c.  call temp:= `purge`(v1, v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f6152.  v0:= temp @kind object;
  #L3f6154.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `purge`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6168.  call temp:= `remove`(v1, v2) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L3f616e.  v2:= temp @kind object;
  #L3f6170.  v2:= (`org.simpleframework.xml.stream.OutputNode`) v2 @kind object;
  #L3f6174.  if v2 == 0 then goto L3f6182;
  #L3f6178.  v0:= v1.`org.simpleframework.xml.stream.OutputStack.active` @type ^`java.util.Set` @kind object;
  #L3f617c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3f6182.  return v2 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `push`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack;.push:(Lorg/simpleframework/xml/stream/OutputNode;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6194.  v0:= v1.`org.simpleframework.xml.stream.OutputStack.active` @type ^`java.util.Set` @kind object;
  #L3f6198.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f619e.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f61a4.  return v2 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `top`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f61b8.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f61be.  v0:= temp;
  #L3f61c0.  if v0 > 0 then goto L3f61c8;
  #L3f61c4.  v0:= 0I;
  #L3f61c6.  return v0 @kind object;
  #L3f61c8.  v0:= v0 + -1;
  #L3f61cc.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3f61d2.  v0:= temp @kind object;
  #L3f61d4.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L3f61d8.  return v0 @kind object;
}
