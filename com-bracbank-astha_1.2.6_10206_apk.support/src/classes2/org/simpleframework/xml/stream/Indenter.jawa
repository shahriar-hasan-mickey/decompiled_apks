record `org.simpleframework.xml.stream.Indenter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.Indenter$Cache` `org.simpleframework.xml.stream.Indenter.cache` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.count` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.indent` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.index` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f42a4.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L3f42a8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L3f42ae.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L3f42b4.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v1 @kind this, `org.simpleframework.xml.stream.Format` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f42c8.  v0:= 16I;
  #L3f42cc.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;I)V` @kind direct;
  #L3f42d2.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v0 @kind this, `org.simpleframework.xml.stream.Format` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f42e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f42ea.  call temp:= `getIndent`(v1) @signature `Lorg/simpleframework/xml/stream/Format;.getIndent:()I` @kind virtual;
  #L3f42f0.  v1:= temp;
  #L3f42f2.  v0.`org.simpleframework.xml.stream.Indenter.indent` @type ^`int` := v1;
  #L3f42f6.  v1:= new `org.simpleframework.xml.stream.Indenter$Cache`;
  #L3f42fa.  call `<init>`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.<init>:(I)V` @kind direct;
  #L3f4300.  v0.`org.simpleframework.xml.stream.Indenter.cache` @type ^`org.simpleframework.xml.stream.Indenter$Cache` := v1 @kind object;
  #L3f4304.  return @kind void;
}
procedure `java.lang.String` `create`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.create:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f416c.  v0:= v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int`;
  #L3f4170.  v1:= v0 + 1;
  #L3f4174.  v1:= new `char`[v1];
  #L3f4178.  if v0 <= 0 then goto L3f41aa;
  #L3f417c.  v0:= 0I;
  #L3f417e.  v2:= 10I;
  #L3f4182.  v1[v0]:= v2 @kind char;
  #L3f4186.  v0:= 1I;
  #L3f4188.  v2:= v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int`;
  #L3f418c.  if v0 > v2 then goto L3f419e;
  #L3f4190.  v2:= 32I;
  #L3f4194.  v1[v0]:= v2 @kind char;
  #L3f4198.  v0:= v0 + 1;
  #L3f419c.  goto L3f4188;
  #L3f419e.  v0:= new `java.lang.String`;
  #L3f41a2.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3f41a8.  return v0 @kind object;
  #L3f41aa.  v0:= "\n" @kind object;
  #L3f41ae.  return v0 @kind object;
}
procedure `java.lang.String` `indent`(`org.simpleframework.xml.stream.Indenter` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/Indenter;.indent:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f41c0.  v0:= v2.`org.simpleframework.xml.stream.Indenter.indent` @type ^`int`;
  #L3f41c4.  if v0 <= 0 then goto L3f41fc;
  #L3f41c8.  v0:= v2.`org.simpleframework.xml.stream.Indenter.cache` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L3f41cc.  call temp:= `get`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.get:(I)Ljava/lang/String;` @kind virtual;
  #L3f41d2.  v0:= temp @kind object;
  #L3f41d4.  if v0 != 0 then goto L3f41ea;
  #L3f41d8.  call temp:= `create`(v2) @signature `Lorg/simpleframework/xml/stream/Indenter;.create:()Ljava/lang/String;` @kind direct;
  #L3f41de.  v0:= temp @kind object;
  #L3f41e0.  v1:= v2.`org.simpleframework.xml.stream.Indenter.cache` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L3f41e4.  call `set`(v1, v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.set:(ILjava/lang/String;)V` @kind virtual;
  #L3f41ea.  v3:= v2.`org.simpleframework.xml.stream.Indenter.cache` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L3f41ee.  call temp:= `size`(v3) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.size:()I` @kind virtual;
  #L3f41f4.  v3:= temp;
  #L3f41f6.  if v3 <= 0 then goto L3f41fc;
  #L3f41fa.  return v0 @kind object;
  #L3f41fc.  v3:= "" @kind object;
  #L3f4200.  return v3 @kind object;
}
procedure `java.lang.String` `pop`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.pop:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4214.  v0:= v3.`org.simpleframework.xml.stream.Indenter.index` @type ^`int`;
  #L3f4218.  v0:= v0 + -1;
  #L3f421c.  v3.`org.simpleframework.xml.stream.Indenter.index` @type ^`int` := v0;
  #L3f4220.  call temp:= `indent`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.indent:(I)Ljava/lang/String;` @kind direct;
  #L3f4226.  v0:= temp @kind object;
  #L3f4228.  v1:= v3.`org.simpleframework.xml.stream.Indenter.indent` @type ^`int`;
  #L3f422c.  if v1 <= 0 then goto L3f423a;
  #L3f4230.  v2:= v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int`;
  #L3f4234.  v2:= v2 - v1 @kind int;
  #L3f4236.  v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int` := v2;
  #L3f423a.  return v0 @kind object;
}
procedure `java.lang.String` `push`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.push:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f424c.  v0:= v3.`org.simpleframework.xml.stream.Indenter.index` @type ^`int`;
  #L3f4250.  v1:= v0 + 1;
  #L3f4254.  v3.`org.simpleframework.xml.stream.Indenter.index` @type ^`int` := v1;
  #L3f4258.  call temp:= `indent`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.indent:(I)Ljava/lang/String;` @kind direct;
  #L3f425e.  v0:= temp @kind object;
  #L3f4260.  v1:= v3.`org.simpleframework.xml.stream.Indenter.indent` @type ^`int`;
  #L3f4264.  if v1 <= 0 then goto L3f4272;
  #L3f4268.  v2:= v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int`;
  #L3f426c.  v2:= v2 + v1 @kind int;
  #L3f426e.  v3.`org.simpleframework.xml.stream.Indenter.count` @type ^`int` := v2;
  #L3f4272.  return v0 @kind object;
}
procedure `java.lang.String` `top`(`org.simpleframework.xml.stream.Indenter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.top:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4284.  v0:= v1.`org.simpleframework.xml.stream.Indenter.index` @type ^`int`;
  #L3f4288.  call temp:= `indent`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.indent:(I)Ljava/lang/String;` @kind direct;
  #L3f428e.  v0:= temp @kind object;
  #L3f4290.  return v0 @kind object;
}
