record `org.simpleframework.xml.stream.CamelCaseBuilder$Element` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` @kind class {
  `boolean` `org.simpleframework.xml.stream.CamelCaseBuilder$Element.capital` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.CamelCaseBuilder` `org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v1 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3f2c18.  v1.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` := v2 @kind object;
  #L3f2c1c.  v0:= 0I;
  #L3f2c1e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @kind direct;
  #L3f2c24.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v0 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v1 @kind object, `java.lang.String` v2 @kind object, `org.simpleframework.xml.stream.CamelCaseBuilder$1` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3f2c38.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @kind direct;
  #L3f2c3e.  return @kind void;
}
procedure `void` `parse`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.parse:([CII)V` @AccessFlag PUBLIC {
    temp;

  #L3f2c50.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` @kind object;
  #L3f2c54.  v3:= v3.`org.simpleframework.xml.stream.CamelCaseBuilder.element` @type ^`boolean` @kind boolean;
  #L3f2c58.  if v3 != 0 then goto L3f2c64;
  #L3f2c5c.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.capital` @type ^`boolean` @kind boolean;
  #L3f2c60.  if v3 == 0 then goto L3f2c74;
  #L3f2c64.  v3:= v1[v2] @kind char;
  #L3f2c68.  call temp:= `toUpper`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @kind virtual;
  #L3f2c6e.  v3:= temp;
  #L3f2c70.  v1[v2]:= v3 @kind char;
  #L3f2c74.  v1:= 1I;
  #L3f2c76.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.capital` @type ^`boolean` := v1 @kind boolean;
  #L3f2c7a.  return @kind void;
}
