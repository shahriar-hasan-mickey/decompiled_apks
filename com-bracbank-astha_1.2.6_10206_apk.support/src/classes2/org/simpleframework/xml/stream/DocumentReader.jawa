record `org.simpleframework.xml.stream.DocumentReader` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventReader` @kind interface {
  `org.simpleframework.xml.stream.EventNode` `org.simpleframework.xml.stream.DocumentReader.peek` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.NodeExtractor` `org.simpleframework.xml.stream.DocumentReader.queue` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.NodeStack` `org.simpleframework.xml.stream.DocumentReader.stack` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@org.simpleframework.xml.stream.DocumentReader.RESERVED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Document` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.<init>:(Lorg/w3c/dom/Document;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f32e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f32e6.  v0:= new `org.simpleframework.xml.stream.NodeExtractor`;
  #L3f32ea.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/NodeExtractor;.<init>:(Lorg/w3c/dom/Document;)V` @kind direct;
  #L3f32f0.  v1.`org.simpleframework.xml.stream.DocumentReader.queue` @type ^`org.simpleframework.xml.stream.NodeExtractor` := v0 @kind object;
  #L3f32f4.  v0:= new `org.simpleframework.xml.stream.NodeStack`;
  #L3f32f8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/NodeStack;.<init>:()V` @kind direct;
  #L3f32fe.  v1.`org.simpleframework.xml.stream.DocumentReader.stack` @type ^`org.simpleframework.xml.stream.NodeStack` := v0 @kind object;
  #L3f3302.  call temp:= `push`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f3308.  return @kind void;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Entry` `attribute`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.attribute:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Entry;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3100.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Entry`;
  #L3f3104.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Entry;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L3f310a.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Start` `build`(`org.simpleframework.xml.stream.DocumentReader` v5 @kind this, `org.simpleframework.xml.stream.DocumentReader$Start` v6 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.build:(Lorg/simpleframework/xml/stream/DocumentReader$Start;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f311c.  call temp:= `getAttributes`(v6) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Start;.getAttributes:()Lorg/w3c/dom/NamedNodeMap;` @kind virtual;
  #L3f3122.  v0:= temp @kind object;
  #L3f3124.  call temp:= `getLength`(v0) @signature `Lorg/w3c/dom/NamedNodeMap;.getLength:()I` @kind interface;
  #L3f312a.  v1:= temp;
  #L3f312c.  v2:= 0I;
  #L3f312e.  if v2 >= v1 then goto L3f315a;
  #L3f3132.  call temp:= `item`(v0, v2) @signature `Lorg/w3c/dom/NamedNodeMap;.item:(I)Lorg/w3c/dom/Node;` @kind interface;
  #L3f3138.  v3:= temp @kind object;
  #L3f313a.  call temp:= `attribute`(v5, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.attribute:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Entry;` @kind direct;
  #L3f3140.  v3:= temp @kind object;
  #L3f3142.  call temp:= `isReserved`(v3) @signature `Lorg/simpleframework/xml/stream/Attribute;.isReserved:()Z` @kind interface;
  #L3f3148.  v4:= temp;
  #L3f314a.  if v4 != 0 then goto L3f3154;
  #L3f314e.  call temp:= `add`(v6, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f3154.  v2:= v2 + 1;
  #L3f3158.  goto L3f312e;
  #L3f315a.  return v6 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `convert`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this, `org.w3c.dom.Node` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.convert:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f31bc.  call temp:= `getNodeType`(v3) @signature `Lorg/w3c/dom/Node;.getNodeType:()S` @kind interface;
  #L3f31c2.  v0:= temp;
  #L3f31c4.  v1:= 1I;
  #L3f31c6.  if v0 != v1 then goto L3f31de;
  #L3f31ca.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.stack` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L3f31ce.  call temp:= `push`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f31d4.  call temp:= `start`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.start:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @kind direct;
  #L3f31da.  v3:= temp @kind object;
  #L3f31dc.  return v3 @kind object;
  #L3f31de.  call temp:= `text`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.text:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Text;` @kind direct;
  #L3f31e4.  v3:= temp @kind object;
  #L3f31e6.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$End` `end`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.end:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f30e0.  v0:= new `org.simpleframework.xml.stream.DocumentReader$End`;
  #L3f30e4.  v1:= 0I;
  #L3f30e6.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader$End;.<init>:(Lorg/simpleframework/xml/stream/DocumentReader$1;)V` @kind direct;
  #L3f30ec.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `read`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.read:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3250.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.queue` @type ^`org.simpleframework.xml.stream.NodeExtractor` @kind object;
  #L3f3254.  call temp:= `peek`(v0) @signature `Ljava/util/LinkedList;.peek:()Ljava/lang/Object;` @kind virtual;
  #L3f325a.  v0:= temp @kind object;
  #L3f325c.  v0:= (`org.w3c.dom.Node`) v0 @kind object;
  #L3f3260.  if v0 != 0 then goto L3f326e;
  #L3f3264.  call temp:= `end`(v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.end:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @kind direct;
  #L3f326a.  v0:= temp @kind object;
  #L3f326c.  return v0 @kind object;
  #L3f326e.  call temp:= `read`(v1, v0) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.read:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L3f3274.  v0:= temp @kind object;
  #L3f3276.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `read`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this, `org.w3c.dom.Node` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.read:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f3288.  call temp:= `getParentNode`(v3) @signature `Lorg/w3c/dom/Node;.getParentNode:()Lorg/w3c/dom/Node;` @kind interface;
  #L3f328e.  v0:= temp @kind object;
  #L3f3290.  v1:= v2.`org.simpleframework.xml.stream.DocumentReader.stack` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L3f3294.  call temp:= `top`(v1) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L3f329a.  v1:= temp @kind object;
  #L3f329c.  v1:= (`org.w3c.dom.Node`) v1 @kind object;
  #L3f32a0.  if v0 == v1 then goto L3f32bc;
  #L3f32a4.  if v1 == 0 then goto L3f32b2;
  #L3f32a8.  v3:= v2.`org.simpleframework.xml.stream.DocumentReader.stack` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L3f32ac.  call temp:= `pop`(v3) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L3f32b2.  call temp:= `end`(v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.end:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @kind direct;
  #L3f32b8.  v3:= temp @kind object;
  #L3f32ba.  return v3 @kind object;
  #L3f32bc.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.queue` @type ^`org.simpleframework.xml.stream.NodeExtractor` @kind object;
  #L3f32c0.  call temp:= `poll`(v0) @signature `Ljava/util/LinkedList;.poll:()Ljava/lang/Object;` @kind virtual;
  #L3f32c6.  call temp:= `convert`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.convert:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L3f32cc.  v3:= temp @kind object;
  #L3f32ce.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Start` `start`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.start:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f316c.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Start`;
  #L3f3170.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Start;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L3f3176.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f317c.  v2:= temp;
  #L3f317e.  if v2 == 0 then goto L3f318c;
  #L3f3182.  call temp:= `build`(v1, v0) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.build:(Lorg/simpleframework/xml/stream/DocumentReader$Start;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @kind direct;
  #L3f3188.  v2:= temp @kind object;
  #L3f318a.  return v2 @kind object;
  #L3f318c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Text` `text`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.text:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Text;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f31a0.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Text`;
  #L3f31a4.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Text;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L3f31aa.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `next`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f31f8.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f31fc.  if v0 != 0 then goto L3f320a;
  #L3f3200.  call temp:= `read`(v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.read:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L3f3206.  v0:= temp @kind object;
  #L3f3208.  goto L3f3210;
  #L3f320a.  v1:= 0I;
  #L3f320c.  v2.`org.simpleframework.xml.stream.DocumentReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` := v1 @kind object;
  #L3f3210.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `peek`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3224.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f3228.  if v0 != 0 then goto L3f3238;
  #L3f322c.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind virtual;
  #L3f3232.  v0:= temp @kind object;
  #L3f3234.  v1.`org.simpleframework.xml.stream.DocumentReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` := v0 @kind object;
  #L3f3238.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f323c.  return v0 @kind object;
}
