record `org.simpleframework.xml.stream.OutputStack$Sequence` @kind class @AccessFlag PUBLIC extends `java.util.Iterator` @kind interface {
  `int` `org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.OutputStack` `org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.OutputStack$Sequence` v0 @kind this, `org.simpleframework.xml.stream.OutputStack` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.<init>:(Lorg/simpleframework/xml/stream/OutputStack;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f60a4.  v0.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` := v1 @kind object;
  #L3f60a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f60ae.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f60b4.  v1:= temp;
  #L3f60b6.  v0.`org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @type ^`int` := v1;
  #L3f60ba.  return @kind void;
}
procedure `boolean` `hasNext`(`org.simpleframework.xml.stream.OutputStack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6028.  v0:= v1.`org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @type ^`int`;
  #L3f602c.  if v0 <= 0 then goto L3f6034;
  #L3f6030.  v0:= 1I;
  #L3f6032.  goto L3f6036;
  #L3f6034.  v0:= 0I;
  #L3f6036.  return v0;
}
procedure `java.lang.Object` `next`(`org.simpleframework.xml.stream.OutputStack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3f6048.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f604e.  v0:= temp @kind object;
  #L3f6050.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `next`(`org.simpleframework.xml.stream.OutputStack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6064.  call temp:= `hasNext`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.hasNext:()Z` @kind virtual;
  #L3f606a.  v0:= temp;
  #L3f606c.  if v0 == 0 then goto L3f608e;
  #L3f6070.  v0:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f6074.  v1:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @type ^`int`;
  #L3f6078.  v1:= v1 + -1;
  #L3f607c.  v2.`org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @type ^`int` := v1;
  #L3f6080.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6086.  v0:= temp @kind object;
  #L3f6088.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L3f608c.  return v0 @kind object;
  #L3f608e.  v0:= 0I;
  #L3f6090.  return v0 @kind object;
}
procedure `void` `remove`(`org.simpleframework.xml.stream.OutputStack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f60cc.  v0:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f60d0.  v1:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.cursor` @type ^`int`;
  #L3f60d4.  call temp:= `purge`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f60da.  return @kind void;
}
