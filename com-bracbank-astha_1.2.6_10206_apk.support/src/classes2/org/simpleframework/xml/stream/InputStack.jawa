record `org.simpleframework.xml.stream.InputStack` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Stack` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.InputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/InputStack;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f4a18.  v0:= 6I;
  #L3f4a1a.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Stack;.<init>:(I)V` @kind direct;
  #L3f4a20.  return @kind void;
}
procedure `boolean` `isRelevant`(`org.simpleframework.xml.stream.InputStack` v0 @kind this, `org.simpleframework.xml.stream.InputNode` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;

  #L3f49e4.  call temp:= `contains`(v0, v1) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f49ea.  v1:= temp;
  #L3f49ec.  if v1 != 0 then goto L3f4a02;
  #L3f49f0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f49f6.  v1:= temp;
  #L3f49f8.  if v1 == 0 then goto L3f49fe;
  #L3f49fc.  goto L3f4a02;
  #L3f49fe.  v1:= 0I;
  #L3f4a00.  goto L3f4a04;
  #L3f4a02.  v1:= 1I;
  #L3f4a04.  return v1;
}
