record `org.simpleframework.xml.stream.PullReader` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventReader` @kind interface {
  `org.xmlpull.v1.XmlPullParser` `org.simpleframework.xml.stream.PullReader.parser` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.EventNode` `org.simpleframework.xml.stream.PullReader.peek` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.PullReader` v0 @kind this, `org.xmlpull.v1.XmlPullParser` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/PullReader;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f6894.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f689a.  v0.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` := v1 @kind object;
  #L3f689e.  return @kind void;
}
procedure `org.simpleframework.xml.stream.PullReader$Entry` `attribute`(`org.simpleframework.xml.stream.PullReader` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/PullReader;.attribute:(I)Lorg/simpleframework/xml/stream/PullReader$Entry;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f67dc.  v0:= new `org.simpleframework.xml.stream.PullReader$Entry`;
  #L3f67e0.  v1:= v2.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L3f67e4.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/stream/PullReader$Entry;.<init>:(Lorg/xmlpull/v1/XmlPullParser;I)V` @kind direct;
  #L3f67ea.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Start` `build`(`org.simpleframework.xml.stream.PullReader` v4 @kind this, `org.simpleframework.xml.stream.PullReader$Start` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/PullReader;.build:(Lorg/simpleframework/xml/stream/PullReader$Start;)Lorg/simpleframework/xml/stream/PullReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f67fc.  v0:= v4.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L3f6800.  call temp:= `getAttributeCount`(v0) @signature `Lorg/xmlpull/v1/XmlPullParser;.getAttributeCount:()I` @kind interface;
  #L3f6806.  v0:= temp;
  #L3f6808.  v1:= 0I;
  #L3f680a.  if v1 >= v0 then goto L3f682e;
  #L3f680e.  call temp:= `attribute`(v4, v1) @signature `Lorg/simpleframework/xml/stream/PullReader;.attribute:(I)Lorg/simpleframework/xml/stream/PullReader$Entry;` @kind direct;
  #L3f6814.  v2:= temp @kind object;
  #L3f6816.  call temp:= `isReserved`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader$Entry;.isReserved:()Z` @kind virtual;
  #L3f681c.  v3:= temp;
  #L3f681e.  if v3 != 0 then goto L3f6828;
  #L3f6822.  call temp:= `add`(v5, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f6828.  v1:= v1 + 1;
  #L3f682c.  goto L3f680a;
  #L3f682e.  return v5 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$End` `end`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.end:()Lorg/simpleframework/xml/stream/PullReader$End;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f67bc.  v0:= new `org.simpleframework.xml.stream.PullReader$End`;
  #L3f67c0.  v1:= 0I;
  #L3f67c2.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$End;.<init>:(Lorg/simpleframework/xml/stream/PullReader$1;)V` @kind direct;
  #L3f67c8.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `read`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.read:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f675c.  v0:= v2.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L3f6760.  call temp:= `next`(v0) @signature `Lorg/xmlpull/v1/XmlPullParser;.next:()I` @kind interface;
  #L3f6766.  v0:= temp;
  #L3f6768.  v1:= 1I;
  #L3f676a.  if v0 == v1 then goto L3f67a8;
  #L3f676e.  v1:= 2I;
  #L3f6770.  if v0 != v1 then goto L3f677e;
  #L3f6774.  call temp:= `start`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.start:()Lorg/simpleframework/xml/stream/PullReader$Start;` @kind direct;
  #L3f677a.  v0:= temp @kind object;
  #L3f677c.  return v0 @kind object;
  #L3f677e.  v1:= 4I;
  #L3f6780.  if v0 != v1 then goto L3f678e;
  #L3f6784.  call temp:= `text`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.text:()Lorg/simpleframework/xml/stream/PullReader$Text;` @kind direct;
  #L3f678a.  v0:= temp @kind object;
  #L3f678c.  return v0 @kind object;
  #L3f678e.  v1:= 3I;
  #L3f6790.  if v0 != v1 then goto L3f679e;
  #L3f6794.  call temp:= `end`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.end:()Lorg/simpleframework/xml/stream/PullReader$End;` @kind direct;
  #L3f679a.  v0:= temp @kind object;
  #L3f679c.  return v0 @kind object;
  #L3f679e.  call temp:= `read`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.read:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L3f67a4.  v0:= temp @kind object;
  #L3f67a6.  return v0 @kind object;
  #L3f67a8.  v0:= 0I;
  #L3f67aa.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Start` `start`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.start:()Lorg/simpleframework/xml/stream/PullReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f6840.  v0:= new `org.simpleframework.xml.stream.PullReader$Start`;
  #L3f6844.  v1:= v2.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L3f6848.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$Start;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @kind direct;
  #L3f684e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f6854.  v1:= temp;
  #L3f6856.  if v1 == 0 then goto L3f6862;
  #L3f685a.  call temp:= `build`(v2, v0) @signature `Lorg/simpleframework/xml/stream/PullReader;.build:(Lorg/simpleframework/xml/stream/PullReader$Start;)Lorg/simpleframework/xml/stream/PullReader$Start;` @kind direct;
  #L3f6860.  v0:= temp @kind object;
  #L3f6862.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Text` `text`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.text:()Lorg/simpleframework/xml/stream/PullReader$Text;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f6874.  v0:= new `org.simpleframework.xml.stream.PullReader$Text`;
  #L3f6878.  v1:= v2.`org.simpleframework.xml.stream.PullReader.parser` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L3f687c.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$Text;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @kind direct;
  #L3f6882.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `next`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6704.  v0:= v2.`org.simpleframework.xml.stream.PullReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f6708.  if v0 != 0 then goto L3f6716;
  #L3f670c.  call temp:= `read`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.read:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L3f6712.  v0:= temp @kind object;
  #L3f6714.  goto L3f671c;
  #L3f6716.  v1:= 0I;
  #L3f6718.  v2.`org.simpleframework.xml.stream.PullReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` := v1 @kind object;
  #L3f671c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `peek`(`org.simpleframework.xml.stream.PullReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6730.  v0:= v1.`org.simpleframework.xml.stream.PullReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f6734.  if v0 != 0 then goto L3f6744;
  #L3f6738.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/PullReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind virtual;
  #L3f673e.  v0:= temp @kind object;
  #L3f6740.  v1.`org.simpleframework.xml.stream.PullReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` := v0 @kind object;
  #L3f6744.  v0:= v1.`org.simpleframework.xml.stream.PullReader.peek` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L3f6748.  return v0 @kind object;
}
