record `org.simpleframework.xml.stream.NodeReader` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.EventReader` `org.simpleframework.xml.stream.NodeReader.reader` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.InputStack` `org.simpleframework.xml.stream.NodeReader.stack` @AccessFlag PRIVATE_FINAL;
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.NodeReader.text` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.EventReader` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.<init>:(Lorg/simpleframework/xml/stream/EventReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f5018.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f501e.  v0:= new `java.lang.StringBuilder`;
  #L3f5022.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f5028.  v1.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L3f502c.  v0:= new `org.simpleframework.xml.stream.InputStack`;
  #L3f5030.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/InputStack;.<init>:()V` @kind direct;
  #L3f5036.  v1.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` := v0 @kind object;
  #L3f503a.  v1.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` := v2 @kind object;
  #L3f503e.  return @kind void;
}
procedure `void` `fillText`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.fillText:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f5050.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f5054.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f505a.  v2:= temp @kind object;
  #L3f505c.  call temp:= `isText`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L3f5062.  v0:= temp;
  #L3f5064.  if v0 == 0 then goto L3f507a;
  #L3f5068.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f506e.  v2:= temp @kind object;
  #L3f5070.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f5074.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f507a.  return @kind void;
}
procedure `boolean` `isName`(`org.simpleframework.xml.stream.NodeReader` v0 @kind this, `org.simpleframework.xml.stream.EventNode` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isName:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L3f4ce4.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/stream/EventNode;.getName:()Ljava/lang/String;` @kind interface;
  #L3f4cea.  v1:= temp @kind object;
  #L3f4cec.  if v1 != 0 then goto L3f4cf4;
  #L3f4cf0.  v1:= 0I;
  #L3f4cf2.  return v1;
  #L3f4cf4.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f4cfa.  v1:= temp;
  #L3f4cfc.  return v1;
}
procedure `java.lang.String` `readBuffer`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readBuffer:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f4d38.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4d3c.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3f4d42.  v3:= temp;
  #L3f4d44.  if v3 <= 0 then goto L3f4d62;
  #L3f4d48.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4d4c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4d52.  v3:= temp @kind object;
  #L3f4d54.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4d58.  v1:= 0I;
  #L3f4d5a.  call `setLength`(v0, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L3f4d60.  return v3 @kind object;
  #L3f4d62.  v3:= 0I;
  #L3f4d64.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readStart`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `org.simpleframework.xml.stream.EventNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readStart:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f4fc0.  v0:= new `org.simpleframework.xml.stream.InputElement`;
  #L3f4fc4.  call `<init>`(v0, v3, v2, v4) @signature `Lorg/simpleframework/xml/stream/InputElement;.<init>:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/NodeReader;Lorg/simpleframework/xml/stream/EventNode;)V` @kind direct;
  #L3f4fca.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4fce.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3f4fd4.  v3:= temp;
  #L3f4fd6.  if v3 <= 0 then goto L3f4fe6;
  #L3f4fda.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4fde.  v1:= 0I;
  #L3f4fe0.  call `setLength`(v3, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L3f4fe6.  call temp:= `isStart`(v4) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L3f4fec.  v3:= temp;
  #L3f4fee.  if v3 == 0 then goto L3f5004;
  #L3f4ff2.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4ff6.  call temp:= `push`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f4ffc.  v3:= temp @kind object;
  #L3f4ffe.  v3:= (`org.simpleframework.xml.stream.InputNode`) v3 @kind object;
  #L3f5002.  return v3 @kind object;
  #L3f5004.  return v0 @kind object;
}
procedure `java.lang.String` `readText`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readText:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f4d78.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4d7c.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4d82.  v0:= temp @kind object;
  #L3f4d84.  v1:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4d88.  call temp:= `top`(v1) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L3f4d8e.  v1:= temp @kind object;
  #L3f4d90.  if v1 != v3 then goto L3f4dbe;
  #L3f4d94.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L3f4d9a.  v0:= temp;
  #L3f4d9c.  if v0 == 0 then goto L3f4dbe;
  #L3f4da0.  call `fillText`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.fillText:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L3f4da6.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4daa.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4db0.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4db4.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4dba.  v0:= temp @kind object;
  #L3f4dbc.  goto L3f4d84;
  #L3f4dbe.  call temp:= `readBuffer`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readBuffer:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L3f4dc4.  v3:= temp @kind object;
  #L3f4dc6.  return v3 @kind object;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isEmpty:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4ca4.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4ca8.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L3f4cae.  v0:= temp @kind object;
  #L3f4cb0.  if v0 != v2 then goto L3f4cd0;
  #L3f4cb4.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4cb8.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4cbe.  v2:= temp @kind object;
  #L3f4cc0.  call temp:= `isEnd`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L3f4cc6.  v2:= temp;
  #L3f4cc8.  if v2 == 0 then goto L3f4cd0;
  #L3f4ccc.  v2:= 1I;
  #L3f4cce.  return v2;
  #L3f4cd0.  v2:= 0I;
  #L3f4cd2.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isRoot:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4d10.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4d14.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.bottom:()Ljava/lang/Object;` @kind virtual;
  #L3f4d1a.  v0:= temp @kind object;
  #L3f4d1c.  if v0 != v2 then goto L3f4d24;
  #L3f4d20.  v2:= 1I;
  #L3f4d22.  goto L3f4d26;
  #L3f4d24.  v2:= 0I;
  #L3f4d26.  return v2;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4e54.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4e58.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3f4e5e.  v0:= temp;
  #L3f4e60.  v1:= 0I;
  #L3f4e62.  if v0 != 0 then goto L3f4e68;
  #L3f4e66.  return v1 @kind object;
  #L3f4e68.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4e6c.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4e72.  v0:= temp @kind object;
  #L3f4e74.  if v0 == 0 then goto L3f4eba;
  #L3f4e78.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L3f4e7e.  v2:= temp;
  #L3f4e80.  if v2 == 0 then goto L3f4e96;
  #L3f4e84.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4e88.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L3f4e8e.  v0:= temp @kind object;
  #L3f4e90.  if v0 != v4 then goto L3f4eac;
  #L3f4e94.  return v1 @kind object;
  #L3f4e96.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L3f4e9c.  v2:= temp;
  #L3f4e9e.  if v2 == 0 then goto L3f4eac;
  #L3f4ea2.  call temp:= `readStart`(v3, v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readStart:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind direct;
  #L3f4ea8.  v4:= temp @kind object;
  #L3f4eaa.  return v4 @kind object;
  #L3f4eac.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4eb0.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4eb6.  v0:= temp @kind object;
  #L3f4eb8.  goto L3f4e74;
  #L3f4eba.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f4ecc.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4ed0.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3f4ed6.  v0:= temp;
  #L3f4ed8.  v1:= 0I;
  #L3f4eda.  if v0 != 0 then goto L3f4ee0;
  #L3f4ede.  return v1 @kind object;
  #L3f4ee0.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4ee4.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4eea.  v0:= temp @kind object;
  #L3f4eec.  if v0 == 0 then goto L3f4f68;
  #L3f4ef0.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L3f4ef6.  v2:= temp;
  #L3f4ef8.  if v2 == 0 then goto L3f4f04;
  #L3f4efc.  call `fillText`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.fillText:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L3f4f02.  goto L3f4f50;
  #L3f4f04.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L3f4f0a.  v2:= temp;
  #L3f4f0c.  if v2 == 0 then goto L3f4f2e;
  #L3f4f10.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4f14.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L3f4f1a.  v0:= temp @kind object;
  #L3f4f1c.  if v0 != v4 then goto L3f4f22;
  #L3f4f20.  return v1 @kind object;
  #L3f4f22.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4f26.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L3f4f2c.  goto L3f4f50;
  #L3f4f2e.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L3f4f34.  v2:= temp;
  #L3f4f36.  if v2 == 0 then goto L3f4f50;
  #L3f4f3a.  call temp:= `isName`(v3, v0, v5) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isName:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @kind direct;
  #L3f4f40.  v5:= temp;
  #L3f4f42.  if v5 == 0 then goto L3f4f68;
  #L3f4f46.  call temp:= `readElement`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L3f4f4c.  v4:= temp @kind object;
  #L3f4f4e.  return v4 @kind object;
  #L3f4f50.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4f54.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4f5a.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4f5e.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4f64.  v0:= temp @kind object;
  #L3f4f66.  goto L3f4eec;
  #L3f4f68.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readRoot`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readRoot:()Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4f7c.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4f80.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f4f86.  v0:= temp;
  #L3f4f88.  v1:= 0I;
  #L3f4f8a.  if v0 == 0 then goto L3f4fac;
  #L3f4f8e.  call temp:= `readElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L3f4f94.  v0:= temp @kind object;
  #L3f4f96.  if v0 == 0 then goto L3f4f9c;
  #L3f4f9a.  return v0 @kind object;
  #L3f4f9c.  v0:= new `org.simpleframework.xml.stream.NodeException`;
  #L3f4fa0.  v1:= "Document has no root element" @kind object;
  #L3f4fa4.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4faa.  throw v0;
  #L3f4fac.  return v1 @kind object;
}
procedure `java.lang.String` `readValue`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readValue:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f4dd8.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4ddc.  call temp:= `isRelevant`(v0, v3) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3f4de2.  v0:= temp;
  #L3f4de4.  v1:= 0I;
  #L3f4de6.  if v0 != 0 then goto L3f4dec;
  #L3f4dea.  return v1 @kind object;
  #L3f4dec.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.text` @type ^`java.lang.StringBuilder` @kind object;
  #L3f4df0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L3f4df6.  v0:= temp;
  #L3f4df8.  if v0 > 0 then goto L3f4e3a;
  #L3f4dfc.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4e00.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4e06.  v0:= temp @kind object;
  #L3f4e08.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L3f4e0e.  v0:= temp;
  #L3f4e10.  if v0 == 0 then goto L3f4e3a;
  #L3f4e14.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4e18.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L3f4e1e.  v0:= temp @kind object;
  #L3f4e20.  if v0 != v3 then goto L3f4e26;
  #L3f4e24.  return v1 @kind object;
  #L3f4e26.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.stack` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L3f4e2a.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L3f4e30.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.reader` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L3f4e34.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L3f4e3a.  call temp:= `readText`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readText:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L3f4e40.  v3:= temp @kind object;
  #L3f4e42.  return v3 @kind object;
}
procedure `void` `skipElement`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.skipElement:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f508c.  call temp:= `readElement`(v1, v2) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L3f5092.  v0:= temp @kind object;
  #L3f5094.  if v0 == 0 then goto L3f509a;
  #L3f5098.  goto L3f508c;
  #L3f509a.  return @kind void;
}
