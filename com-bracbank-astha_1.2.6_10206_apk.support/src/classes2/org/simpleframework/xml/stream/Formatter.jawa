record `org.simpleframework.xml.stream.Formatter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.OutputBuffer` `org.simpleframework.xml.stream.Formatter.buffer` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Indenter` `org.simpleframework.xml.stream.Formatter.indenter` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Formatter$Tag` `org.simpleframework.xml.stream.Formatter.last` @AccessFlag PRIVATE;
  `java.lang.String` `org.simpleframework.xml.stream.Formatter.prolog` @AccessFlag PRIVATE;
  `java.io.Writer` `org.simpleframework.xml.stream.Formatter.result` @AccessFlag PRIVATE;
}
global `char`[] `@@org.simpleframework.xml.stream.Formatter.AND` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.CLOSE` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.DOUBLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.GREATER` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.LESS` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.NAMESPACE` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.OPEN` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.SINGLE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/stream/Formatter;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f3710.  v0:= 5I;
  #L3f3712.  v1:= new `char`[v0];
  #L3f3716.  goto L3f3788;
  #L3f371c.  `@@org.simpleframework.xml.stream.Formatter.NAMESPACE` @type ^`char`[] := v1 @kind object;
  #L3f3720.  v1:= 4I;
  #L3f3722.  v2:= new `char`[v1];
  #L3f3726.  goto L3f379c;
  #L3f372c.  `@@org.simpleframework.xml.stream.Formatter.LESS` @type ^`char`[] := v2 @kind object;
  #L3f3730.  v2:= new `char`[v1];
  #L3f3734.  goto L3f37ac;
  #L3f373a.  `@@org.simpleframework.xml.stream.Formatter.GREATER` @type ^`char`[] := v2 @kind object;
  #L3f373e.  v2:= 6I;
  #L3f3740.  v3:= new `char`[v2];
  #L3f3744.  goto L3f37bc;
  #L3f374a.  `@@org.simpleframework.xml.stream.Formatter.DOUBLE` @type ^`char`[] := v3 @kind object;
  #L3f374e.  v2:= new `char`[v2];
  #L3f3752.  goto L3f37d0;
  #L3f3758.  `@@org.simpleframework.xml.stream.Formatter.SINGLE` @type ^`char`[] := v2 @kind object;
  #L3f375c.  v2:= new `char`[v0];
  #L3f3760.  goto L3f37e4;
  #L3f3766.  `@@org.simpleframework.xml.stream.Formatter.AND` @type ^`char`[] := v2 @kind object;
  #L3f376a.  v0:= new `char`[v0];
  #L3f376e.  goto L3f37f8;
  #L3f3774.  `@@org.simpleframework.xml.stream.Formatter.OPEN` @type ^`char`[] := v0 @kind object;
  #L3f3778.  v0:= new `char`[v1];
  #L3f377c.  goto L3f380c;
  #L3f3782.  `@@org.simpleframework.xml.stream.Formatter.CLOSE` @type ^`char`[] := v0 @kind object;
  #L3f3786.  return @kind void;
  #L3f3788.  v1:= (120I, 109I, 108I, 110I, 115I) @kind object;
  #L3f3799.  goto L3f371c;
  #L3f379a.  
  #L3f379c.  v2:= (38I, 108I, 116I, 59I) @kind object;
  #L3f37ab.  goto L3f372c;
  #L3f37ac.  v2:= (38I, 103I, 116I, 59I) @kind object;
  #L3f37bb.  goto L3f373a;
  #L3f37bc.  v3:= (38I, 113I, 117I, 111I, 116I, 59I) @kind object;
  #L3f37cf.  goto L3f374a;
  #L3f37d0.  v2:= (38I, 97I, 112I, 111I, 115I, 59I) @kind object;
  #L3f37e3.  goto L3f3758;
  #L3f37e4.  v2:= (38I, 97I, 109I, 112I, 59I) @kind object;
  #L3f37f5.  goto L3f3766;
  #L3f37f6.  
  #L3f37f8.  v0:= (60I, 33I, 45I, 45I, 32I) @kind object;
  #L3f3809.  goto L3f3774;
  #L3f380a.  
  #L3f380c.  v0:= (32I, 45I, 45I, 62I) @kind object;
  #L3f381b.  goto L3f3782;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.io.Writer` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f382c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3832.  v0:= new `java.io.BufferedWriter`;
  #L3f3836.  v1:= 1024I;
  #L3f383a.  call `<init>`(v0, v3, v1) @signature `Ljava/io/BufferedWriter;.<init>:(Ljava/io/Writer;I)V` @kind direct;
  #L3f3840.  v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` := v0 @kind object;
  #L3f3844.  v3:= new `org.simpleframework.xml.stream.Indenter`;
  #L3f3848.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L3f384e.  v2.`org.simpleframework.xml.stream.Formatter.indenter` @type ^`org.simpleframework.xml.stream.Indenter` := v3 @kind object;
  #L3f3852.  v3:= new `org.simpleframework.xml.stream.OutputBuffer`;
  #L3f3856.  call `<init>`(v3) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.<init>:()V` @kind direct;
  #L3f385c.  v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` := v3 @kind object;
  #L3f3860.  call temp:= `getProlog`(v4) @signature `Lorg/simpleframework/xml/stream/Format;.getProlog:()Ljava/lang/String;` @kind virtual;
  #L3f3866.  v3:= temp @kind object;
  #L3f3868.  v2.`org.simpleframework.xml.stream.Formatter.prolog` @type ^`java.lang.String` := v3 @kind object;
  #L3f386c.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3880.  v0:= v1.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3884.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:(C)V` @kind virtual;
  #L3f388a.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f38b8.  v0:= v1.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f38bc.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3f38c2.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char`[] v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:([C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f389c.  v0:= v1.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f38a0.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:([C)V` @kind virtual;
  #L3f38a6.  return @kind void;
}
procedure `void` `data`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.data:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f38d4.  v0:= "<![CDATA[" @kind object;
  #L3f38d8.  call `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f38de.  call `write`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f38e4.  v2:= "]]>" @kind object;
  #L3f38e8.  call `write`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f38ee.  return @kind void;
}
procedure `void` `escape`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3900.  call temp:= `symbol`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.symbol:(C)[C` @kind direct;
  #L3f3906.  v0:= temp @kind object;
  #L3f3908.  if v0 == 0 then goto L3f3914;
  #L3f390c.  call `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:([C)V` @kind direct;
  #L3f3912.  goto L3f391a;
  #L3f3914.  call `write`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f391a.  return @kind void;
}
procedure `void` `escape`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f392c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f3932.  v0:= temp;
  #L3f3934.  v1:= 0I;
  #L3f3936.  if v1 >= v0 then goto L3f394e;
  #L3f393a.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3f3940.  v2:= temp;
  #L3f3942.  call `escape`(v3, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(C)V` @kind direct;
  #L3f3948.  v1:= v1 + 1;
  #L3f394c.  goto L3f3936;
  #L3f394e.  return @kind void;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.isEmpty:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f361c.  v0:= 1I;
  #L3f361e.  if v2 == 0 then goto L3f3632;
  #L3f3622.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3f3628.  v2:= temp;
  #L3f362a.  if v2 != 0 then goto L3f3630;
  #L3f362e.  goto L3f3632;
  #L3f3630.  v0:= 0I;
  #L3f3632.  return v0;
}
procedure `boolean` `isText`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `char` v4 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.isText:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f3644.  v0:= 1I;
  #L3f3646.  v1:= 9I;
  #L3f364a.  if v4 == v1 then goto L3f3684;
  #L3f364e.  v1:= 10I;
  #L3f3652.  if v4 == v1 then goto L3f3684;
  #L3f3656.  v1:= 13I;
  #L3f365a.  if v4 == v1 then goto L3f3684;
  #L3f365e.  v1:= 32I;
  #L3f3662.  if v4 == v1 then goto L3f3684;
  #L3f3666.  v2:= 0I;
  #L3f3668.  if v4 <= v1 then goto L3f3682;
  #L3f366c.  v1:= 126I;
  #L3f3670.  if v4 > v1 then goto L3f3682;
  #L3f3674.  v1:= 247I;
  #L3f3678.  if v4 == v1 then goto L3f367e;
  #L3f367c.  goto L3f3680;
  #L3f367e.  v0:= 0I;
  #L3f3680.  return v0;
  #L3f3682.  return v2;
  #L3f3684.  return v0;
}
procedure `char`[] `symbol`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.symbol:(C)[C` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f3698.  v0:= 34I;
  #L3f369c.  if v2 == v0 then goto L3f36dc;
  #L3f36a0.  v0:= 60I;
  #L3f36a4.  if v2 == v0 then goto L3f36d6;
  #L3f36a8.  v0:= 62I;
  #L3f36ac.  if v2 == v0 then goto L3f36d0;
  #L3f36b0.  v0:= 38I;
  #L3f36b4.  if v2 == v0 then goto L3f36ca;
  #L3f36b8.  v0:= 39I;
  #L3f36bc.  if v2 == v0 then goto L3f36c4;
  #L3f36c0.  v2:= 0I;
  #L3f36c2.  return v2 @kind object;
  #L3f36c4.  v2:= `@@org.simpleframework.xml.stream.Formatter.SINGLE` @type ^`char`[] @kind object;
  #L3f36c8.  return v2 @kind object;
  #L3f36ca.  v2:= `@@org.simpleframework.xml.stream.Formatter.AND` @type ^`char`[] @kind object;
  #L3f36ce.  return v2 @kind object;
  #L3f36d0.  v2:= `@@org.simpleframework.xml.stream.Formatter.GREATER` @type ^`char`[] @kind object;
  #L3f36d4.  return v2 @kind object;
  #L3f36d6.  v2:= `@@org.simpleframework.xml.stream.Formatter.LESS` @type ^`char`[] @kind object;
  #L3f36da.  return v2 @kind object;
  #L3f36dc.  v2:= `@@org.simpleframework.xml.stream.Formatter.DOUBLE` @type ^`char`[] @kind object;
  #L3f36e0.  return v2 @kind object;
}
procedure `java.lang.String` `unicode`(`org.simpleframework.xml.stream.Formatter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.unicode:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;

  #L3f36f4.  call temp:= `toString`(v1) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3f36fa.  v1:= temp @kind object;
  #L3f36fc.  return v1 @kind object;
}
procedure `void` `write`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `char` v3 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f3994.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3998.  v1:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f399c.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L3f39a2.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f39a6.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L3f39ac.  v0:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f39b0.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3f39b6.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f39fc.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3a00.  v1:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a04.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L3f3a0a.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3a0e.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L3f3a14.  v0:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a18.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3f3a1e.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f3a30.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3a34.  v1:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a38.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L3f3a3e.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3a42.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L3f3a48.  call temp:= `isEmpty`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3f3a4e.  v0:= temp;
  #L3f3a50.  if v0 != 0 then goto L3f3a6c;
  #L3f3a54.  v0:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a58.  call `write`(v0, v4) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3f3a5e.  v4:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a62.  v0:= 58I;
  #L3f3a66.  call `write`(v4, v0) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3f3a6c.  v4:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3a70.  call `write`(v4, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3f3a76.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:([C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f39c8.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f39cc.  v1:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f39d0.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L3f39d6.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f39da.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L3f39e0.  v0:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f39e4.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:([C)V` @kind virtual;
  #L3f39ea.  return @kind void;
}
procedure `void` `flush`(`org.simpleframework.xml.stream.Formatter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3960.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3964.  v1:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f3968.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L3f396e.  v0:= v2.`org.simpleframework.xml.stream.Formatter.buffer` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L3f3972.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L3f3978.  v0:= v2.`org.simpleframework.xml.stream.Formatter.result` @type ^`java.io.Writer` @kind object;
  #L3f397c.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L3f3982.  return @kind void;
}
procedure `void` `writeAttribute`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3a88.  v0:= v2.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3a8c.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3a90.  if v0 != v1 then goto L3f3ac6;
  #L3f3a94.  v0:= 32I;
  #L3f3a98.  call `write`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3a9e.  call `write`(v2, v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L3f3aa4.  v3:= 61I;
  #L3f3aa8.  call `write`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3aae.  v3:= 34I;
  #L3f3ab2.  call `write`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3ab8.  call `escape`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(Ljava/lang/String;)V` @kind direct;
  #L3f3abe.  call `write`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3ac4.  return @kind void;
  #L3f3ac6.  v3:= new `org.simpleframework.xml.stream.NodeException`;
  #L3f3aca.  v4:= "Start element required" @kind object;
  #L3f3ace.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3ad4.  throw v3;
}
procedure `void` `writeComment`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeComment:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3ae8.  v0:= v3.`org.simpleframework.xml.stream.Formatter.indenter` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L3f3aec.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.top:()Ljava/lang/String;` @kind virtual;
  #L3f3af2.  v0:= temp @kind object;
  #L3f3af4.  v1:= v3.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3af8.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3afc.  if v1 != v2 then goto L3f3b0a;
  #L3f3b00.  v1:= 62I;
  #L3f3b04.  call `append`(v3, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(C)V` @kind direct;
  #L3f3b0a.  if v0 == 0 then goto L3f3b2e;
  #L3f3b0e.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @kind direct;
  #L3f3b14.  v0:= `@@org.simpleframework.xml.stream.Formatter.OPEN` @type ^`char`[] @kind object;
  #L3f3b18.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:([C)V` @kind direct;
  #L3f3b1e.  call `append`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @kind direct;
  #L3f3b24.  v4:= `@@org.simpleframework.xml.stream.Formatter.CLOSE` @type ^`char`[] @kind object;
  #L3f3b28.  call `append`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:([C)V` @kind direct;
  #L3f3b2e.  v4:= `@@org.simpleframework.xml.stream.Formatter$Tag.COMMENT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3b32.  v3.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v4 @kind object;
  #L3f3b36.  return @kind void;
}
procedure `void` `writeEnd`(`org.simpleframework.xml.stream.Formatter` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeEnd:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3b48.  v0:= v6.`org.simpleframework.xml.stream.Formatter.indenter` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L3f3b4c.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.pop:()Ljava/lang/String;` @kind virtual;
  #L3f3b52.  v0:= temp @kind object;
  #L3f3b54.  v1:= v6.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3b58.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3b5c.  v3:= 62I;
  #L3f3b60.  v4:= 47I;
  #L3f3b64.  if v1 != v2 then goto L3f3b76;
  #L3f3b68.  call `write`(v6, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3b6e.  call `write`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3b74.  goto L3f3ba8;
  #L3f3b76.  v5:= `@@org.simpleframework.xml.stream.Formatter$Tag.TEXT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3b7a.  if v1 == v5 then goto L3f3b84;
  #L3f3b7e.  call `write`(v6, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f3b84.  v0:= v6.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3b88.  if v0 == v2 then goto L3f3ba8;
  #L3f3b8c.  v0:= 60I;
  #L3f3b90.  call `write`(v6, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3b96.  call `write`(v6, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3b9c.  call `write`(v6, v7, v8) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L3f3ba2.  call `write`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3ba8.  v7:= `@@org.simpleframework.xml.stream.Formatter$Tag.END` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3bac.  v6.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v7 @kind object;
  #L3f3bb0.  return @kind void;
}
procedure `void` `writeNamespace`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeNamespace:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3bc4.  v0:= v2.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3bc8.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3bcc.  if v0 != v1 then goto L3f3c22;
  #L3f3bd0.  v0:= 32I;
  #L3f3bd4.  call `write`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3bda.  v0:= `@@org.simpleframework.xml.stream.Formatter.NAMESPACE` @type ^`char`[] @kind object;
  #L3f3bde.  call `write`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:([C)V` @kind direct;
  #L3f3be4.  call temp:= `isEmpty`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3f3bea.  v0:= temp;
  #L3f3bec.  if v0 != 0 then goto L3f3c00;
  #L3f3bf0.  v0:= 58I;
  #L3f3bf4.  call `write`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3bfa.  call `write`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f3c00.  v4:= 61I;
  #L3f3c04.  call `write`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3c0a.  v4:= 34I;
  #L3f3c0e.  call `write`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3c14.  call `escape`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(Ljava/lang/String;)V` @kind direct;
  #L3f3c1a.  call `write`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3c20.  return @kind void;
  #L3f3c22.  v3:= new `org.simpleframework.xml.stream.NodeException`;
  #L3f3c26.  v4:= "Start element required" @kind object;
  #L3f3c2a.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3c30.  throw v3;
}
procedure `void` `writeProlog`(`org.simpleframework.xml.stream.Formatter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeProlog:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3c44.  v0:= v1.`org.simpleframework.xml.stream.Formatter.prolog` @type ^`java.lang.String` @kind object;
  #L3f3c48.  if v0 == 0 then goto L3f3c5c;
  #L3f3c4c.  call `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f3c52.  v0:= "\n" @kind object;
  #L3f3c56.  call `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(Ljava/lang/String;)V` @kind direct;
  #L3f3c5c.  return @kind void;
}
procedure `void` `writeStart`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeStart:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3c70.  v0:= v3.`org.simpleframework.xml.stream.Formatter.indenter` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L3f3c74.  call temp:= `push`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.push:()Ljava/lang/String;` @kind virtual;
  #L3f3c7a.  v0:= temp @kind object;
  #L3f3c7c.  v1:= v3.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3c80.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3c84.  if v1 != v2 then goto L3f3c92;
  #L3f3c88.  v1:= 62I;
  #L3f3c8c.  call `append`(v3, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(C)V` @kind direct;
  #L3f3c92.  call `flush`(v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @kind virtual;
  #L3f3c98.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @kind direct;
  #L3f3c9e.  v0:= 60I;
  #L3f3ca2.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(C)V` @kind direct;
  #L3f3ca8.  call temp:= `isEmpty`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3f3cae.  v0:= temp;
  #L3f3cb0.  if v0 != 0 then goto L3f3cc4;
  #L3f3cb4.  call `append`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @kind direct;
  #L3f3cba.  v5:= 58I;
  #L3f3cbe.  call `append`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(C)V` @kind direct;
  #L3f3cc4.  call `append`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.append:(Ljava/lang/String;)V` @kind direct;
  #L3f3cca.  v3.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v2 @kind object;
  #L3f3cce.  return @kind void;
}
procedure `void` `writeText`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3ce0.  v0:= `@@org.simpleframework.xml.stream.Mode.ESCAPE` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L3f3ce4.  call `writeText`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @kind virtual;
  #L3f3cea.  return @kind void;
}
procedure `void` `writeText`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `org.simpleframework.xml.stream.Mode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3cfc.  v0:= v2.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3d00.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3d04.  if v0 != v1 then goto L3f3d12;
  #L3f3d08.  v0:= 62I;
  #L3f3d0c.  call `write`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.write:(C)V` @kind direct;
  #L3f3d12.  v0:= `@@org.simpleframework.xml.stream.Mode.DATA` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L3f3d16.  if v4 != v0 then goto L3f3d22;
  #L3f3d1a.  call `data`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.data:(Ljava/lang/String;)V` @kind direct;
  #L3f3d20.  goto L3f3d28;
  #L3f3d22.  call `escape`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.escape:(Ljava/lang/String;)V` @kind direct;
  #L3f3d28.  v3:= `@@org.simpleframework.xml.stream.Formatter$Tag.TEXT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L3f3d2c.  v2.`org.simpleframework.xml.stream.Formatter.last` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v3 @kind object;
  #L3f3d30.  return @kind void;
}
