record `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Splitter` @kind class {
  `boolean` `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.capital` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.CamelCaseBuilder` `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` v0 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3f2b8c.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` := v1 @kind object;
  #L3f2b90.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2b96.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` v0 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v1 @kind object, `java.lang.String` v2 @kind object, `org.simpleframework.xml.stream.CamelCaseBuilder$1` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3f2ba8.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @kind direct;
  #L3f2bae.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` v1 @kind this, `char`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.commit:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f2bc0.  v0:= v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3f2bc4.  call temp:= `append`(v0, v2, v3, v4) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2bca.  return @kind void;
}
procedure `void` `parse`(`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.parse:([CII)V` @AccessFlag PUBLIC {
    temp;

  #L3f2bdc.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` @kind object;
  #L3f2be0.  v3:= v3.`org.simpleframework.xml.stream.CamelCaseBuilder.attribute` @type ^`boolean` @kind boolean;
  #L3f2be4.  if v3 != 0 then goto L3f2bf0;
  #L3f2be8.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.capital` @type ^`boolean` @kind boolean;
  #L3f2bec.  if v3 == 0 then goto L3f2c00;
  #L3f2bf0.  v3:= v1[v2] @kind char;
  #L3f2bf4.  call temp:= `toUpper`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @kind virtual;
  #L3f2bfa.  v3:= temp;
  #L3f2bfc.  v1[v2]:= v3 @kind char;
  #L3f2c00.  v1:= 1I;
  #L3f2c02.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Attribute.capital` @type ^`boolean` := v1 @kind boolean;
  #L3f2c06.  return @kind void;
}
