record `org.simpleframework.xml.stream.Splitter` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.Splitter.builder` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.count` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.off` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.stream.Splitter.text` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Splitter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Splitter;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6ab8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6abe.  v0:= new `java.lang.StringBuilder`;
  #L3f6ac2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f6ac8.  v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L3f6acc.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3f6ad2.  v2:= temp @kind object;
  #L3f6ad4.  v1.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] := v2 @kind object;
  #L3f6ad8.  v2:= length @variable v2;
  #L3f6ada.  v1.`org.simpleframework.xml.stream.Splitter.count` @type ^`int` := v2;
  #L3f6ade.  return @kind void;
}
procedure `boolean` `acronym`(`org.simpleframework.xml.stream.Splitter` v7 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.acronym:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f68b0.  v0:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f68b4.  v1:= 0I;
  #L3f68b6.  v2:= 0I;
  #L3f68b8.  v3:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f68bc.  if v0 >= v3 then goto L3f68de;
  #L3f68c0.  v3:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f68c4.  v3:= v3[v0] @kind char;
  #L3f68c8.  call temp:= `isUpper`(v7, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.isUpper:(C)Z` @kind direct;
  #L3f68ce.  v3:= temp;
  #L3f68d0.  if v3 == 0 then goto L3f68de;
  #L3f68d4.  v2:= v2 + 1;
  #L3f68d8.  v0:= v0 + 1;
  #L3f68dc.  goto L3f68b8;
  #L3f68de.  v3:= 1I;
  #L3f68e0.  if v2 <= v3 then goto L3f691e;
  #L3f68e4.  v4:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f68e8.  if v0 >= v4 then goto L3f6908;
  #L3f68ec.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f68f0.  v5:= v0 + -1;
  #L3f68f4.  v4:= v4[v5] @kind char;
  #L3f68f8.  call temp:= `isUpper`(v7, v4) @signature `Lorg/simpleframework/xml/stream/Splitter;.isUpper:(C)Z` @kind direct;
  #L3f68fe.  v4:= temp;
  #L3f6900.  if v4 == 0 then goto L3f6908;
  #L3f6904.  v0:= v0 + -1;
  #L3f6908.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f690c.  v5:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6910.  v6:= v0 - v5 @kind int;
  #L3f6914.  call `commit`(v7, v4, v5, v6) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L3f691a.  v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L3f691e.  if v2 <= v3 then goto L3f6924;
  #L3f6922.  v1:= 1I;
  #L3f6924.  return v1;
}
procedure `boolean` `isDigit`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.isDigit:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3f6938.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L3f693e.  v1:= temp;
  #L3f6940.  return v1;
}
procedure `boolean` `isLetter`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.isLetter:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3f6954.  call temp:= `isLetter`(v1) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L3f695a.  v1:= temp;
  #L3f695c.  return v1;
}
procedure `boolean` `isSpecial`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.isSpecial:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3f6970.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L3f6976.  v1:= temp;
  #L3f6978.  v1:= v1 ^~ 1;
  #L3f697c.  return v1;
}
procedure `boolean` `isUpper`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.isUpper:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3f6990.  call temp:= `isUpperCase`(v1) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L3f6996.  v1:= temp;
  #L3f6998.  return v1;
}
procedure `boolean` `number`(`org.simpleframework.xml.stream.Splitter` v6 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.number:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f69ac.  v0:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f69b0.  v1:= 0I;
  #L3f69b2.  v2:= 0I;
  #L3f69b4.  v3:= v6.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f69b8.  if v0 >= v3 then goto L3f69da;
  #L3f69bc.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f69c0.  v3:= v3[v0] @kind char;
  #L3f69c4.  call temp:= `isDigit`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.isDigit:(C)Z` @kind direct;
  #L3f69ca.  v3:= temp;
  #L3f69cc.  if v3 == 0 then goto L3f69da;
  #L3f69d0.  v2:= v2 + 1;
  #L3f69d4.  v0:= v0 + 1;
  #L3f69d8.  goto L3f69b4;
  #L3f69da.  if v2 <= 0 then goto L3f69f0;
  #L3f69de.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f69e2.  v4:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f69e6.  v5:= v0 - v4 @kind int;
  #L3f69ea.  call `commit`(v6, v3, v4, v5) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L3f69f0.  v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L3f69f4.  if v2 <= 0 then goto L3f69fa;
  #L3f69f8.  v1:= 1I;
  #L3f69fa.  return v1;
}
procedure `void` `token`(`org.simpleframework.xml.stream.Splitter` v4 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.token:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f6af0.  v0:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6af4.  v1:= v4.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f6af8.  if v0 >= v1 then goto L3f6b2e;
  #L3f6afc.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f6b00.  v1:= v1[v0] @kind char;
  #L3f6b04.  call temp:= `isLetter`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.isLetter:(C)Z` @kind direct;
  #L3f6b0a.  v2:= temp;
  #L3f6b0c.  if v2 != 0 then goto L3f6b12;
  #L3f6b10.  goto L3f6b2e;
  #L3f6b12.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6b16.  if v0 <= v2 then goto L3f6b28;
  #L3f6b1a.  call temp:= `isUpper`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.isUpper:(C)Z` @kind direct;
  #L3f6b20.  v1:= temp;
  #L3f6b22.  if v1 == 0 then goto L3f6b28;
  #L3f6b26.  goto L3f6b2e;
  #L3f6b28.  v0:= v0 + 1;
  #L3f6b2c.  goto L3f6af4;
  #L3f6b2e.  v1:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6b32.  if v0 <= v1 then goto L3f6b56;
  #L3f6b36.  v2:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f6b3a.  v3:= v0 - v1 @kind int;
  #L3f6b3e.  call `parse`(v4, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @kind virtual;
  #L3f6b44.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f6b48.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6b4c.  v3:= v0 - v2 @kind int;
  #L3f6b50.  call `commit`(v4, v1, v2, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L3f6b56.  v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L3f6b5a.  return @kind void;
}
procedure `void` `commit`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `parse`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.stream.Splitter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f6a44.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6a48.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f6a4c.  if v0 >= v1 then goto L3f6a9a;
  #L3f6a50.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6a54.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L3f6a58.  if v0 >= v1 then goto L3f6a80;
  #L3f6a5c.  v1:= v2.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L3f6a60.  v0:= v1[v0] @kind char;
  #L3f6a64.  call temp:= `isSpecial`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Splitter;.isSpecial:(C)Z` @kind direct;
  #L3f6a6a.  v0:= temp;
  #L3f6a6c.  if v0 != 0 then goto L3f6a72;
  #L3f6a70.  goto L3f6a80;
  #L3f6a72.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L3f6a76.  v0:= v0 + 1;
  #L3f6a7a.  v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L3f6a7e.  goto L3f6a50;
  #L3f6a80.  call temp:= `acronym`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.acronym:()Z` @kind direct;
  #L3f6a86.  v0:= temp;
  #L3f6a88.  if v0 != 0 then goto L3f6a44;
  #L3f6a8c.  call `token`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.token:()V` @kind direct;
  #L3f6a92.  call temp:= `number`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.number:()Z` @kind direct;
  #L3f6a98.  goto L3f6a44;
  #L3f6a9a.  v0:= v2.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3f6a9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6aa4.  v0:= temp @kind object;
  #L3f6aa6.  return v0 @kind object;
}
procedure `char` `toLower`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toLower:(C)C` @AccessFlag PUBLIC {
    temp;

  #L3f6a0c.  call temp:= `toLowerCase`(v1) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L3f6a12.  v1:= temp;
  #L3f6a14.  return v1;
}
procedure `char` `toUpper`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @AccessFlag PUBLIC {
    temp;

  #L3f6a28.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L3f6a2e.  v1:= temp;
  #L3f6a30.  return v1;
}
