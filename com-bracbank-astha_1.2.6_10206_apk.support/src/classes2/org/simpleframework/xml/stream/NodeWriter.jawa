record `org.simpleframework.xml.stream.NodeWriter` @kind class @AccessFlag PUBLIC {
  `java.util.Set` `org.simpleframework.xml.stream.NodeWriter.active` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.OutputStack` `org.simpleframework.xml.stream.NodeWriter.stack` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.stream.NodeWriter.verbose` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Formatter` `org.simpleframework.xml.stream.NodeWriter.writer` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f522c.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L3f5230.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L3f5236.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L3f523c.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f5250.  v0:= 0I;
  #L3f5252.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @kind direct;
  #L3f5258.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object, `boolean` v4 ) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3f526c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f5272.  v0:= new `org.simpleframework.xml.stream.Formatter`;
  #L3f5276.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L3f527c.  v1.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` := v0 @kind object;
  #L3f5280.  v2:= new `java.util.HashSet`;
  #L3f5284.  call `<init>`(v2) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L3f528a.  v1.`org.simpleframework.xml.stream.NodeWriter.active` @type ^`java.util.Set` := v2 @kind object;
  #L3f528e.  v3:= new `org.simpleframework.xml.stream.OutputStack`;
  #L3f5292.  call `<init>`(v3, v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.<init>:(Ljava/util/Set;)V` @kind direct;
  #L3f5298.  v1.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` := v3 @kind object;
  #L3f529c.  v1.`org.simpleframework.xml.stream.NodeWriter.verbose` @type ^`boolean` := v4 @kind boolean;
  #L3f52a0.  return @kind void;
}
procedure `void` `writeAttributes`(`org.simpleframework.xml.stream.NodeWriter` v6 @kind this, `org.simpleframework.xml.stream.OutputNode` v7 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeAttributes:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f5364.  call temp:= `getAttributes`(v7) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getAttributes:()Lorg/simpleframework/xml/stream/NodeMap;` @kind interface;
  #L3f536a.  v0:= temp @kind object;
  #L3f536c.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f5372.  v1:= temp @kind object;
  #L3f5374.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f537a.  v2:= temp;
  #L3f537c.  if v2 == 0 then goto L3f53b8;
  #L3f5380.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f5386.  v2:= temp @kind object;
  #L3f5388.  v2:= (`java.lang.String`) v2 @kind object;
  #L3f538c.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/stream/NodeMap;.get:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3f5392.  v3:= temp @kind object;
  #L3f5394.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L3f5398.  call temp:= `getValue`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f539e.  v4:= temp @kind object;
  #L3f53a0.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.verbose` @type ^`boolean` @kind boolean;
  #L3f53a4.  call temp:= `getPrefix`(v3, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L3f53aa.  v3:= temp @kind object;
  #L3f53ac.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f53b0.  call `writeAttribute`(v5, v2, v4, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L3f53b6.  goto L3f5374;
  #L3f53b8.  v0:= v6.`org.simpleframework.xml.stream.NodeWriter.active` @type ^`java.util.Set` @kind object;
  #L3f53bc.  call temp:= `remove`(v0, v7) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3f53c2.  return @kind void;
}
procedure `void` `writeComment`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeComment:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f53d4.  call temp:= `getComment`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getComment:()Ljava/lang/String;` @kind interface;
  #L3f53da.  v2:= temp @kind object;
  #L3f53dc.  if v2 == 0 then goto L3f53ea;
  #L3f53e0.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f53e4.  call `writeComment`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeComment:(Ljava/lang/String;)V` @kind virtual;
  #L3f53ea.  return @kind void;
}
procedure `void` `writeEnd`(`org.simpleframework.xml.stream.NodeWriter` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeEnd:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f53fc.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3f5402.  v0:= temp @kind object;
  #L3f5404.  v1:= v3.`org.simpleframework.xml.stream.NodeWriter.verbose` @type ^`boolean` @kind boolean;
  #L3f5408.  call temp:= `getPrefix`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L3f540e.  v1:= temp @kind object;
  #L3f5410.  call temp:= `getValue`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f5416.  v2:= temp @kind object;
  #L3f5418.  if v2 == 0 then goto L3f5422;
  #L3f541c.  call `writeValue`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeValue:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f5422.  if v0 == 0 then goto L3f543a;
  #L3f5426.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f542a.  call `writeEnd`(v4, v0, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeEnd:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L3f5430.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f5434.  call `flush`(v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @kind virtual;
  #L3f543a.  return @kind void;
}
procedure `void` `writeName`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeName:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f544c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.verbose` @type ^`boolean` @kind boolean;
  #L3f5450.  call temp:= `getPrefix`(v3, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L3f5456.  v0:= temp @kind object;
  #L3f5458.  call temp:= `getName`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3f545e.  v3:= temp @kind object;
  #L3f5460.  if v3 == 0 then goto L3f546e;
  #L3f5464.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f5468.  call `writeStart`(v1, v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeStart:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L3f546e.  return @kind void;
}
procedure `void` `writeNamespaces`(`org.simpleframework.xml.stream.NodeWriter` v4 @kind this, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeNamespaces:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f5480.  call temp:= `getNamespaces`(v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getNamespaces:()Lorg/simpleframework/xml/stream/NamespaceMap;` @kind interface;
  #L3f5486.  v5:= temp @kind object;
  #L3f5488.  call temp:= `iterator`(v5) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f548e.  v0:= temp @kind object;
  #L3f5490.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f5496.  v1:= temp;
  #L3f5498.  if v1 == 0 then goto L3f54bc;
  #L3f549c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f54a2.  v1:= temp @kind object;
  #L3f54a4.  v1:= (`java.lang.String`) v1 @kind object;
  #L3f54a8.  call temp:= `getPrefix`(v5, v1) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.getPrefix:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f54ae.  v2:= temp @kind object;
  #L3f54b0.  v3:= v4.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f54b4.  call `writeNamespace`(v3, v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeNamespace:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L3f54ba.  goto L3f5490;
  #L3f54bc.  return @kind void;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeStart`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f51f0.  v0:= new `org.simpleframework.xml.stream.OutputElement`;
  #L3f51f4.  call `<init>`(v0, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/OutputElement;.<init>:(Lorg/simpleframework/xml/stream/OutputNode;Lorg/simpleframework/xml/stream/NodeWriter;Ljava/lang/String;)V` @kind direct;
  #L3f51fa.  if v3 == 0 then goto L3f520c;
  #L3f51fe.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5202.  call temp:= `push`(v2, v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.push:(Lorg/simpleframework/xml/stream/OutputNode;)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5208.  v2:= temp @kind object;
  #L3f520a.  return v2 @kind object;
  #L3f520c.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L3f5210.  v3:= "Can not have a null name" @kind object;
  #L3f5214.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f521a.  throw v2;
}
procedure `void` `writeStart`(`org.simpleframework.xml.stream.NodeWriter` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;

  #L3f54d0.  call `writeComment`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeComment:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f54d6.  call `writeName`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeName:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f54dc.  call `writeAttributes`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeAttributes:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f54e2.  call `writeNamespaces`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeNamespaces:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f54e8.  return @kind void;
}
procedure `void` `writeValue`(`org.simpleframework.xml.stream.NodeWriter` v5 @kind this, `org.simpleframework.xml.stream.OutputNode` v6 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeValue:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f54fc.  call temp:= `getMode`(v6) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L3f5502.  v0:= temp @kind object;
  #L3f5504.  call temp:= `getValue`(v6) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f550a.  v1:= temp @kind object;
  #L3f550c.  if v1 == 0 then goto L3f5552;
  #L3f5510.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5514.  call temp:= `iterator`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3f551a.  v2:= temp @kind object;
  #L3f551c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f5522.  v3:= temp;
  #L3f5524.  if v3 == 0 then goto L3f5548;
  #L3f5528.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f552e.  v3:= temp @kind object;
  #L3f5530.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L3f5534.  v4:= `@@org.simpleframework.xml.stream.Mode.INHERIT` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L3f5538.  if v0 == v4 then goto L3f553e;
  #L3f553c.  goto L3f5548;
  #L3f553e.  call temp:= `getMode`(v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L3f5544.  v0:= temp @kind object;
  #L3f5546.  goto L3f551c;
  #L3f5548.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f554c.  call `writeText`(v2, v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @kind virtual;
  #L3f5552.  v0:= 0I;
  #L3f5554.  call `setValue`(v6, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L3f555a.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.commit:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f52b4.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f52b8.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f52be.  v0:= temp;
  #L3f52c0.  if v0 == 0 then goto L3f5316;
  #L3f52c4.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f52c8.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f52ce.  v0:= temp @kind object;
  #L3f52d0.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3f52d6.  v1:= temp;
  #L3f52d8.  if v1 != 0 then goto L3f52e2;
  #L3f52dc.  call `writeStart`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f52e2.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f52e6.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f52ec.  v0:= temp @kind object;
  #L3f52ee.  if v0 == v3 then goto L3f5306;
  #L3f52f2.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f52f6.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f52fc.  v0:= temp @kind object;
  #L3f52fe.  call `writeEnd`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeEnd:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f5304.  goto L3f52e2;
  #L3f5306.  call `writeEnd`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeEnd:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f530c.  v3:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5310.  call temp:= `pop`(v3) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5316.  return @kind void;
}
procedure `boolean` `isCommitted`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f50c8.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.active` @type ^`java.util.Set` @kind object;
  #L3f50cc.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f50d2.  v2:= temp;
  #L3f50d4.  v2:= v2 ^~ 1;
  #L3f50d8.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isRoot:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f50ec.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f50f0.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.bottom:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f50f6.  v0:= temp @kind object;
  #L3f50f8.  if v0 != v2 then goto L3f5100;
  #L3f50fc.  v2:= 1I;
  #L3f50fe.  goto L3f5102;
  #L3f5100.  v2:= 0I;
  #L3f5102.  return v2;
}
procedure `void` `remove`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.remove:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f5328.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f532c.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5332.  v0:= temp @kind object;
  #L3f5334.  if v0 != v2 then goto L3f5344;
  #L3f5338.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f533c.  call temp:= `pop`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5342.  return @kind void;
  #L3f5344.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L3f5348.  v0:= "Cannot remove node" @kind object;
  #L3f534c.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f5352.  throw v2;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeElement`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeElement:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f5114.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5118.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f511e.  v0:= temp;
  #L3f5120.  if v0 == 0 then goto L3f512e;
  #L3f5124.  call temp:= `writeStart`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L3f512a.  v3:= temp @kind object;
  #L3f512c.  return v3 @kind object;
  #L3f512e.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5132.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f5138.  v0:= temp;
  #L3f513a.  if v0 == 0 then goto L3f51a0;
  #L3f513e.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5142.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5148.  v0:= temp @kind object;
  #L3f514a.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3f5150.  v1:= temp;
  #L3f5152.  if v1 != 0 then goto L3f515c;
  #L3f5156.  call `writeStart`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f515c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5160.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5166.  v0:= temp @kind object;
  #L3f5168.  if v0 == v3 then goto L3f5180;
  #L3f516c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5170.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L3f5176.  v0:= temp @kind object;
  #L3f5178.  call `writeEnd`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeEnd:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f517e.  goto L3f515c;
  #L3f5180.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f5184.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f518a.  v0:= temp;
  #L3f518c.  if v0 != 0 then goto L3f5196;
  #L3f5190.  call `writeValue`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeValue:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L3f5196.  call temp:= `writeStart`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeStart:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L3f519c.  v3:= temp @kind object;
  #L3f519e.  return v3 @kind object;
  #L3f51a0.  v3:= 0I;
  #L3f51a2.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeRoot`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeRoot:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f51b4.  v0:= new `org.simpleframework.xml.stream.OutputDocument`;
  #L3f51b8.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f51bc.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/stream/OutputDocument;.<init>:(Lorg/simpleframework/xml/stream/NodeWriter;Lorg/simpleframework/xml/stream/OutputStack;)V` @kind direct;
  #L3f51c2.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.stack` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L3f51c6.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L3f51cc.  v1:= temp;
  #L3f51ce.  if v1 == 0 then goto L3f51dc;
  #L3f51d2.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.writer` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L3f51d6.  call `writeProlog`(v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeProlog:()V` @kind virtual;
  #L3f51dc.  return v0 @kind object;
}
