record `org.simpleframework.xml.stream.Indenter$Cache` @kind class @AccessFlag PUBLIC {
  `int` `org.simpleframework.xml.stream.Indenter$Cache.count` @AccessFlag PRIVATE;
  `java.lang.String`[] `org.simpleframework.xml.stream.Indenter$Cache.list` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter$Cache` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f40dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f40e2.  v1:= new `java.lang.String`[v1];
  #L3f40e6.  v0.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] := v1 @kind object;
  #L3f40ea.  return @kind void;
}
procedure `void` `resize`(`org.simpleframework.xml.stream.Indenter$Cache` v3 @kind this, `int` v4 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.resize:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f40fc.  v4:= new `java.lang.String`[v4];
  #L3f4100.  v0:= 0I;
  #L3f4102.  v1:= v3.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] @kind object;
  #L3f4106.  v2:= length @variable v1;
  #L3f4108.  if v0 >= v2 then goto L3f411a;
  #L3f410c.  v1:= v1[v0] @kind object;
  #L3f4110.  v4[v0]:= v1 @kind object;
  #L3f4114.  v0:= v0 + 1;
  #L3f4118.  goto L3f4102;
  #L3f411a.  v3.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] := v4 @kind object;
  #L3f411e.  return @kind void;
}
procedure `java.lang.String` `get`(`org.simpleframework.xml.stream.Indenter$Cache` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.get:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f40b8.  v0:= v2.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] @kind object;
  #L3f40bc.  v1:= length @variable v0;
  #L3f40be.  if v3 >= v1 then goto L3f40c8;
  #L3f40c2.  v3:= v0[v3] @kind object;
  #L3f40c6.  return v3 @kind object;
  #L3f40c8.  v3:= 0I;
  #L3f40ca.  return v3 @kind object;
}
procedure `void` `set`(`org.simpleframework.xml.stream.Indenter$Cache` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.set:(ILjava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f4130.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] @kind object;
  #L3f4134.  v0:= length @variable v0;
  #L3f4136.  if v2 < v0 then goto L3f4144;
  #L3f413a.  v0:= v2 * 2;
  #L3f413e.  call `resize`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.resize:(I)V` @kind direct;
  #L3f4144.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.count` @type ^`int`;
  #L3f4148.  if v2 <= v0 then goto L3f4150;
  #L3f414c.  v1.`org.simpleframework.xml.stream.Indenter$Cache.count` @type ^`int` := v2;
  #L3f4150.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.list` @type ^`java.lang.String`[] @kind object;
  #L3f4154.  v0[v2]:= v3 @kind object;
  #L3f4158.  return @kind void;
}
procedure `int` `size`(`org.simpleframework.xml.stream.Indenter$Cache` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f40a0.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.count` @type ^`int`;
  #L3f40a4.  return v0;
}
