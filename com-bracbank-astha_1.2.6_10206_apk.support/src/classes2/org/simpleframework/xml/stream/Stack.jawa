record `org.simpleframework.xml.stream.Stack` @kind class @AccessFlag PUBLIC extends `java.util.ArrayList` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Stack` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/stream/Stack;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f6c10.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3f6c16.  return @kind void;
}
procedure `java.lang.Object` `bottom`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.bottom:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6b6c.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f6b72.  v0:= temp;
  #L3f6b74.  if v0 > 0 then goto L3f6b7c;
  #L3f6b78.  v0:= 0I;
  #L3f6b7a.  return v0 @kind object;
  #L3f6b7c.  v0:= 0I;
  #L3f6b7e.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6b84.  v0:= temp @kind object;
  #L3f6b86.  return v0 @kind object;
}
procedure `java.lang.Object` `pop`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6b98.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f6b9e.  v0:= temp;
  #L3f6ba0.  if v0 > 0 then goto L3f6ba8;
  #L3f6ba4.  v0:= 0I;
  #L3f6ba6.  return v0 @kind object;
  #L3f6ba8.  v0:= v0 + -1;
  #L3f6bac.  call temp:= `remove`(v1, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6bb2.  v0:= temp @kind object;
  #L3f6bb4.  return v0 @kind object;
}
procedure `java.lang.Object` `push`(`org.simpleframework.xml.stream.Stack` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3f6bc8.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f6bce.  return v1 @kind object;
}
procedure `java.lang.Object` `top`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6be0.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3f6be6.  v0:= temp;
  #L3f6be8.  if v0 > 0 then goto L3f6bf0;
  #L3f6bec.  v0:= 0I;
  #L3f6bee.  return v0 @kind object;
  #L3f6bf0.  v0:= v0 + -1;
  #L3f6bf4.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3f6bfa.  v0:= temp @kind object;
  #L3f6bfc.  return v0 @kind object;
}
