record `org.simpleframework.xml.core.TemplateEngine` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.filter.Filter` `org.simpleframework.xml.core.TemplateEngine.filter` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.name` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.core.TemplateEngine.off` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.source` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.text` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `org.simpleframework.xml.filter.Filter` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.<init>:(Lorg/simpleframework/xml/filter/Filter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3efa98.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3efa9e.  v0:= new `org.simpleframework.xml.core.Template`;
  #L3efaa2.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L3efaa8.  v1.`org.simpleframework.xml.core.TemplateEngine.source` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L3efaac.  v0:= new `org.simpleframework.xml.core.Template`;
  #L3efab0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L3efab6.  v1.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L3efaba.  v0:= new `org.simpleframework.xml.core.Template`;
  #L3efabe.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L3efac4.  v1.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L3efac8.  v1.`org.simpleframework.xml.core.TemplateEngine.filter` @type ^`org.simpleframework.xml.filter.Filter` := v2 @kind object;
  #L3efacc.  return @kind void;
}
procedure `void` `name`(`org.simpleframework.xml.core.TemplateEngine` v3 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.name:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3efb18.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int`;
  #L3efb1c.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.source` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb20.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3efb24.  if v0 >= v2 then goto L3efb54;
  #L3efb28.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3efb2c.  v2:= v0 + 1;
  #L3efb30.  v3.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int` := v2;
  #L3efb34.  v0:= v1[v0] @kind char;
  #L3efb38.  v1:= 125I;
  #L3efb3c.  if v0 != v1 then goto L3efb48;
  #L3efb40.  call `replace`(v3) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:()V` @kind direct;
  #L3efb46.  goto L3efb54;
  #L3efb48.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb4c.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L3efb52.  goto L3efb18;
  #L3efb54.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb58.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L3efb5e.  v0:= temp;
  #L3efb60.  if v0 <= 0 then goto L3efb80;
  #L3efb64.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb68.  v1:= "${" @kind object;
  #L3efb6c.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efb72.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb76.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb7a.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @kind virtual;
  #L3efb80.  return @kind void;
}
procedure `void` `parse`(`org.simpleframework.xml.core.TemplateEngine` v5 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.parse:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3efb94.  v0:= v5.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int`;
  #L3efb98.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.source` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efb9c.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3efba0.  if v0 >= v2 then goto L3efbf0;
  #L3efba4.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3efba8.  v3:= v0 + 1;
  #L3efbac.  v5.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int` := v3;
  #L3efbb0.  v0:= v1[v0] @kind char;
  #L3efbb4.  v4:= 36I;
  #L3efbb8.  if v0 != v4 then goto L3efbe4;
  #L3efbbc.  if v3 >= v2 then goto L3efbe4;
  #L3efbc0.  v2:= v3 + 1;
  #L3efbc4.  v5.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int` := v2;
  #L3efbc8.  v1:= v1[v3] @kind char;
  #L3efbcc.  v3:= 123I;
  #L3efbd0.  if v1 != v3 then goto L3efbdc;
  #L3efbd4.  call `name`(v5) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.name:()V` @kind direct;
  #L3efbda.  goto L3efb94;
  #L3efbdc.  v2:= v2 + -1;
  #L3efbe0.  v5.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int` := v2;
  #L3efbe4.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efbe8.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L3efbee.  goto L3efb94;
  #L3efbf0.  return @kind void;
}
procedure `void` `replace`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3efc04.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc08.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L3efc0e.  v0:= temp;
  #L3efc10.  if v0 <= 0 then goto L3efc1e;
  #L3efc14.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc18.  call `replace`(v1, v0) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:(Lorg/simpleframework/xml/core/Template;)V` @kind direct;
  #L3efc1e.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc22.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L3efc28.  return @kind void;
}
procedure `void` `replace`(`org.simpleframework.xml.core.TemplateEngine` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3efc3c.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.filter` @type ^`org.simpleframework.xml.filter.Filter` @kind object;
  #L3efc40.  call temp:= `replace`(v0, v3) @signature `Lorg/simpleframework/xml/filter/Filter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3efc46.  v0:= temp @kind object;
  #L3efc48.  if v0 != 0 then goto L3efc74;
  #L3efc4c.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc50.  v1:= "${" @kind object;
  #L3efc54.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efc5a.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc5e.  call `append`(v0, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efc64.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc68.  v0:= "}" @kind object;
  #L3efc6c.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efc72.  goto L3efc7e;
  #L3efc74.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efc78.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efc7e.  return @kind void;
}
procedure `void` `replace`(`org.simpleframework.xml.core.TemplateEngine` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PRIVATE {
    temp;

  #L3efc90.  call temp:= `toString`(v1) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efc96.  v1:= temp @kind object;
  #L3efc98.  call `replace`(v0, v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.replace:(Ljava/lang/String;)V` @kind direct;
  #L3efc9e.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efae0.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.name` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efae4.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L3efaea.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efaee.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L3efaf4.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.source` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efaf8.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L3efafe.  v0:= 0I;
  #L3efb00.  v1.`org.simpleframework.xml.core.TemplateEngine.off` @type ^`int` := v0;
  #L3efb04.  return @kind void;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.process:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efa3c.  v0:= 36I;
  #L3efa40.  call temp:= `indexOf`(v2, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3efa46.  v0:= temp;
  #L3efa48.  if v0 >= 0 then goto L3efa4e;
  #L3efa4c.  return v2 @kind object;
  #L3efa4e.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.source` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efa52.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L3efa58.  call `parse`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.parse:()V` @kind direct;
  #L3efa5e.  v2:= v1.`org.simpleframework.xml.core.TemplateEngine.text` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L3efa62.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L3efa68.  v2:= temp @kind object;
  #L3efa6a.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L3efa70.  return v2 @kind object;
  #L3efa72.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3efa74.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L3efa7a.  throw v2;
  catch `java.lang.Throwable` @[L3efa4e..L3efa6a] goto L3efa72;
}
