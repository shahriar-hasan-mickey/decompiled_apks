record `org.simpleframework.xml.core.Traverser` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Traverser.context` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.Traverser.style` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f0b3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f0b42.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L3f0b48.  v0:= temp @kind object;
  #L3f0b4a.  v1.`org.simpleframework.xml.core.Traverser.style` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L3f0b4e.  v1.`org.simpleframework.xml.core.Traverser.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L3f0b52.  return @kind void;
}
procedure `org.simpleframework.xml.core.Composite` `getComposite`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getComposite:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f0abc.  call temp:= `getType`(v2, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.getType:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L3f0ac2.  v0:= temp @kind object;
  #L3f0ac4.  if v3 == 0 then goto L3f0ad8;
  #L3f0ac8.  v3:= new `org.simpleframework.xml.core.Composite`;
  #L3f0acc.  v1:= v2.`org.simpleframework.xml.core.Traverser.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3f0ad0.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/Composite;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3f0ad6.  return v3 @kind object;
  #L3f0ad8.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L3f0adc.  v0:= 0I;
  #L3f0ade.  v0:= new `java.lang.Object`[v0];
  #L3f0ae2.  v1:= "Can not instantiate null class" @kind object;
  #L3f0ae6.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f0aec.  throw v3;
}
procedure `org.simpleframework.xml.core.Decorator` `getDecorator`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f0b00.  v0:= v1.`org.simpleframework.xml.core.Traverser.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3f0b04.  call temp:= `getDecorator`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind interface;
  #L3f0b0a.  v2:= temp @kind object;
  #L3f0b0c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Type` `getType`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getType:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f0b20.  v0:= new `org.simpleframework.xml.core.ClassType`;
  #L3f0b24.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/ClassType;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f0b2a.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f0a20.  call temp:= `getName`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L3f0a26.  v2:= temp @kind object;
  #L3f0a28.  if v2 == 0 then goto L3f0a2e;
  #L3f0a2c.  return v4 @kind object;
  #L3f0a2e.  v2:= new `org.simpleframework.xml.core.RootException`;
  #L3f0a32.  v4:= 1I;
  #L3f0a34.  v4:= new `java.lang.Object`[v4];
  #L3f0a38.  v0:= 0I;
  #L3f0a3a.  v4[v0]:= v3 @kind object;
  #L3f0a3e.  v3:= "Root annotation required for %s" @kind object;
  #L3f0a42.  call `<init>`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f0a48.  throw v2;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0a90.  v0:= v1.`org.simpleframework.xml.core.Traverser.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3f0a94.  call temp:= `getName`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3f0a9a.  v2:= temp @kind object;
  #L3f0a9c.  v0:= v1.`org.simpleframework.xml.core.Traverser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3f0aa0.  call temp:= `getElement`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f0aa6.  v2:= temp @kind object;
  #L3f0aa8.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f09e4.  call temp:= `getComposite`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.getComposite:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L3f09ea.  v3:= temp @kind object;
  #L3f09ec.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3f09f2.  v3:= temp @kind object;
  #L3f09f4.  if v3 == 0 then goto L3f0a0a;
  #L3f09f8.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f09fe.  v0:= temp @kind object;
  #L3f0a00.  call temp:= `read`(v1, v2, v0, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L3f0a06.  v2:= temp @kind object;
  #L3f0a08.  return v2 @kind object;
  #L3f0a0a.  v2:= 0I;
  #L3f0a0c.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0a5c.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f0a62.  v0:= temp @kind object;
  #L3f0a64.  call temp:= `getComposite`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.getComposite:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L3f0a6a.  v1:= temp @kind object;
  #L3f0a6c.  call temp:= `read`(v1, v3, v4) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f0a72.  v4:= temp @kind object;
  #L3f0a74.  call temp:= `read`(v2, v3, v0, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L3f0a7a.  v3:= temp @kind object;
  #L3f0a7c.  return v3 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0998.  call temp:= `getComposite`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.getComposite:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L3f099e.  v0:= temp @kind object;
  #L3f09a0.  call temp:= `getName`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L3f09a6.  v1:= temp @kind object;
  #L3f09a8.  if v1 == 0 then goto L3f09b6;
  #L3f09ac.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Composite;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3f09b2.  v3:= temp;
  #L3f09b4.  return v3;
  #L3f09b6.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L3f09ba.  v0:= 1I;
  #L3f09bc.  v0:= new `java.lang.Object`[v0];
  #L3f09c0.  v1:= 0I;
  #L3f09c2.  v0[v1]:= v4 @kind object;
  #L3f09c6.  v4:= "Root annotation required for %s" @kind object;
  #L3f09ca.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f09d0.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0b64.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f0b6a.  v0:= temp @kind object;
  #L3f0b6c.  call `write`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @kind virtual;
  #L3f0b72.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f0b84.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f0b8a.  v0:= temp @kind object;
  #L3f0b8c.  call temp:= `getName`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L3f0b92.  v1:= temp @kind object;
  #L3f0b94.  if v1 == 0 then goto L3f0ba0;
  #L3f0b98.  call `write`(v2, v3, v4, v5, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L3f0b9e.  return @kind void;
  #L3f0ba0.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L3f0ba4.  v4:= 1I;
  #L3f0ba6.  v4:= new `java.lang.Object`[v4];
  #L3f0baa.  v5:= 0I;
  #L3f0bac.  v4[v5]:= v0 @kind object;
  #L3f0bb0.  v5:= "Root annotation required for %s" @kind object;
  #L3f0bb4.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f0bba.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f0bcc.  call temp:= `getChild`(v2, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3f0bd2.  v2:= temp @kind object;
  #L3f0bd4.  call temp:= `getType`(v1, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.getType:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L3f0bda.  v4:= temp @kind object;
  #L3f0bdc.  if v3 == 0 then goto L3f0c18;
  #L3f0be0.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f0be6.  v5:= temp @kind object;
  #L3f0be8.  call temp:= `getDecorator`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind direct;
  #L3f0bee.  v0:= temp @kind object;
  #L3f0bf0.  if v0 == 0 then goto L3f0bfa;
  #L3f0bf4.  call `decorate`(v0, v2) @signature `Lorg/simpleframework/xml/core/Decorator;.decorate:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind interface;
  #L3f0bfa.  v0:= v1.`org.simpleframework.xml.core.Traverser.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3f0bfe.  call temp:= `setOverride`(v0, v4, v3, v2) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L3f0c04.  v4:= temp;
  #L3f0c06.  if v4 != 0 then goto L3f0c18;
  #L3f0c0a.  call temp:= `getComposite`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.getComposite:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L3f0c10.  v4:= temp @kind object;
  #L3f0c12.  call `write`(v4, v2, v3) @signature `Lorg/simpleframework/xml/core/Composite;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3f0c18.  call `commit`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.commit:()V` @kind interface;
  #L3f0c1e.  return @kind void;
}
