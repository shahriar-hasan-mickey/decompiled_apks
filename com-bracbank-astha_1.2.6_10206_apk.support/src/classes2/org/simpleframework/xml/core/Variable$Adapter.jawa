record `org.simpleframework.xml.core.Variable$Adapter` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Repeater` @kind interface {
  `org.simpleframework.xml.core.Label` `org.simpleframework.xml.core.Variable$Adapter.label` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Converter` `org.simpleframework.xml.core.Variable$Adapter.reader` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `org.simpleframework.xml.core.Variable$Adapter.value` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Variable$Adapter` v0 @kind this, `org.simpleframework.xml.core.Converter` v1 @kind object, `org.simpleframework.xml.core.Label` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.<init>:(Lorg/simpleframework/xml/core/Converter;Lorg/simpleframework/xml/core/Label;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f16d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f16d6.  v0.`org.simpleframework.xml.core.Variable$Adapter.reader` @type ^`org.simpleframework.xml.core.Converter` := v1 @kind object;
  #L3f16da.  v0.`org.simpleframework.xml.core.Variable$Adapter.value` @type ^`java.lang.Object` := v3 @kind object;
  #L3f16de.  v0.`org.simpleframework.xml.core.Variable$Adapter.label` @type ^`org.simpleframework.xml.core.Label` := v2 @kind object;
  #L3f16e2.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Variable$Adapter` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1648.  v0:= v1.`org.simpleframework.xml.core.Variable$Adapter.value` @type ^`java.lang.Object` @kind object;
  #L3f164c.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f1652.  v2:= temp @kind object;
  #L3f1654.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Variable$Adapter` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1668.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3f166e.  v0:= temp @kind object;
  #L3f1670.  call temp:= `getName`(v5) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3f1676.  v1:= temp @kind object;
  #L3f1678.  v2:= v4.`org.simpleframework.xml.core.Variable$Adapter.reader` @type ^`org.simpleframework.xml.core.Converter` @kind object;
  #L3f167c.  v3:= instanceof @variable v2 @type ^`org.simpleframework.xml.core.Repeater` @kind boolean;
  #L3f1680.  if v3 == 0 then goto L3f1692;
  #L3f1684.  v2:= (`org.simpleframework.xml.core.Repeater`) v2 @kind object;
  #L3f1688.  call temp:= `read`(v2, v5, v6) @signature `Lorg/simpleframework/xml/core/Repeater;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3f168e.  v5:= temp @kind object;
  #L3f1690.  return v5 @kind object;
  #L3f1692.  v5:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3f1696.  v6:= 3I;
  #L3f1698.  v6:= new `java.lang.Object`[v6];
  #L3f169c.  v2:= 0I;
  #L3f169e.  v6[v2]:= v1 @kind object;
  #L3f16a2.  v1:= v4.`org.simpleframework.xml.core.Variable$Adapter.label` @type ^`org.simpleframework.xml.core.Label` @kind object;
  #L3f16a6.  v2:= 1I;
  #L3f16a8.  v6[v2]:= v1 @kind object;
  #L3f16ac.  v1:= 2I;
  #L3f16ae.  v6[v1]:= v0 @kind object;
  #L3f16b2.  v0:= "Element '%s' is already used with %s at %s" @kind object;
  #L3f16b6.  call `<init>`(v5, v0, v6) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f16bc.  throw v5;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Variable$Adapter` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f15ec.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3f15f2.  v0:= temp @kind object;
  #L3f15f4.  call temp:= `getName`(v5) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3f15fa.  v1:= temp @kind object;
  #L3f15fc.  v2:= v4.`org.simpleframework.xml.core.Variable$Adapter.reader` @type ^`org.simpleframework.xml.core.Converter` @kind object;
  #L3f1600.  v3:= instanceof @variable v2 @type ^`org.simpleframework.xml.core.Repeater` @kind boolean;
  #L3f1604.  if v3 == 0 then goto L3f1616;
  #L3f1608.  v2:= (`org.simpleframework.xml.core.Repeater`) v2 @kind object;
  #L3f160c.  call temp:= `validate`(v2, v5) @signature `Lorg/simpleframework/xml/core/Converter;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind interface;
  #L3f1612.  v5:= temp;
  #L3f1614.  return v5;
  #L3f1616.  v5:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3f161a.  v2:= 2I;
  #L3f161c.  v2:= new `java.lang.Object`[v2];
  #L3f1620.  v3:= 0I;
  #L3f1622.  v2[v3]:= v1 @kind object;
  #L3f1626.  v1:= 1I;
  #L3f1628.  v2[v1]:= v0 @kind object;
  #L3f162c.  v0:= "Element '%s' declared twice at %s" @kind object;
  #L3f1630.  call `<init>`(v5, v0, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f1636.  throw v5;
}
procedure `void` `write`(`org.simpleframework.xml.core.Variable$Adapter` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L3f16f4.  call `write`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3f16fa.  return @kind void;
}
