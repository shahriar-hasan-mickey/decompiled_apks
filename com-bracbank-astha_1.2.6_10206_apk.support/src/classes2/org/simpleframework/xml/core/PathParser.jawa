record `org.simpleframework.xml.core.PathParser` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Expression` @kind interface {
  `boolean` `org.simpleframework.xml.core.PathParser.attribute` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.attributes` @AccessFlag PUBLIC;
  `java.lang.StringBuilder` `org.simpleframework.xml.core.PathParser.builder` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.count` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.core.PathParser.data` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.elements` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.indexes` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.location` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.names` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.off` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.path` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.prefixes` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.start` @AccessFlag PUBLIC;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PathParser.style` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PathParser.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.<init>:(Ljava/lang/String;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ea9fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eaa02.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3eaa06.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3eaa0c.  v1.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3eaa10.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L3eaa14.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L3eaa1a.  v1.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L3eaa1e.  v0:= new `java.util.ArrayList`;
  #L3eaa22.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3eaa28.  v1.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` := v0 @kind object;
  #L3eaa2c.  v0:= new `java.util.ArrayList`;
  #L3eaa30.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3eaa36.  v1.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` := v0 @kind object;
  #L3eaa3a.  v0:= new `java.util.ArrayList`;
  #L3eaa3e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3eaa44.  v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` := v0 @kind object;
  #L3eaa48.  v0:= new `java.lang.StringBuilder`;
  #L3eaa4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3eaa52.  v1.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L3eaa56.  call temp:= `getStyle`(v4) @signature `Lorg/simpleframework/xml/stream/Format;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L3eaa5c.  v4:= temp @kind object;
  #L3eaa5e.  v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` := v4 @kind object;
  #L3eaa62.  v1.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L3eaa66.  v1.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` := v2 @kind object;
  #L3eaa6a.  call `parse`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.parse:(Ljava/lang/String;)V` @kind direct;
  #L3eaa70.  return @kind void;
}
procedure `void` `align`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.align:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eaa84.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3eaa88.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3eaa8e.  v0:= temp;
  #L3eaa90.  v1:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L3eaa94.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3eaa9a.  v1:= temp;
  #L3eaa9c.  if v0 <= v1 then goto L3eaab4;
  #L3eaaa0.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L3eaaa4.  v1:= 1I;
  #L3eaaa6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3eaaac.  v1:= temp @kind object;
  #L3eaaae.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eaab4.  return @kind void;
}
procedure `void` `attribute`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eaac8.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eaacc.  v1:= 1I;
  #L3eaace.  v0:= v0 + v1 @kind int;
  #L3eaad0.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L3eaad4.  v2:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eaad8.  v3:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L3eaadc.  v4:= 0I;
  #L3eaade.  v5:= 2I;
  #L3eaae0.  if v2 >= v3 then goto L3eab34;
  #L3eaae4.  v3:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eaae8.  v6:= v2 + 1;
  #L3eaaec.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v6;
  #L3eaaf0.  v2:= v3[v2] @kind char;
  #L3eaaf4.  call temp:= `isValid`(v7, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.isValid:(C)Z` @kind direct;
  #L3eaafa.  v3:= temp;
  #L3eaafc.  if v3 == 0 then goto L3eab02;
  #L3eab00.  goto L3eaad4;
  #L3eab02.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eab06.  v3:= 3I;
  #L3eab08.  v3:= new `java.lang.Object`[v3];
  #L3eab0c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L3eab12.  v2:= temp @kind object;
  #L3eab14.  v3[v4]:= v2 @kind object;
  #L3eab18.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eab1c.  v3[v1]:= v2 @kind object;
  #L3eab20.  v1:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eab24.  v3[v5]:= v1 @kind object;
  #L3eab28.  v1:= "Illegal character '%s' in attribute for '%s' in %s" @kind object;
  #L3eab2c.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eab32.  throw v0;
  #L3eab34.  if v2 <= v0 then goto L3eab46;
  #L3eab38.  v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` := v1 @kind boolean;
  #L3eab3c.  v2:= v2 - v0 @kind int;
  #L3eab3e.  call `attribute`(v7, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:(II)V` @kind direct;
  #L3eab44.  return @kind void;
  #L3eab46.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eab4a.  v2:= new `java.lang.Object`[v5];
  #L3eab4e.  v3:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eab52.  v2[v4]:= v3 @kind object;
  #L3eab56.  v3:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eab5a.  v2[v1]:= v3 @kind object;
  #L3eab5e.  v1:= "Attribute reference in '%s' for %s is empty" @kind object;
  #L3eab62.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eab68.  throw v0;
}
procedure `void` `attribute`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eab7c.  v0:= new `java.lang.String`;
  #L3eab80.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eab84.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3eab8a.  if v4 <= 0 then goto L3eab94;
  #L3eab8e.  call `attribute`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:(Ljava/lang/String;)V` @kind direct;
  #L3eab94.  return @kind void;
}
procedure `void` `attribute`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eaba8.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3eabac.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3eabb2.  v3:= temp @kind object;
  #L3eabb4.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L3eabb8.  v1:= 0I;
  #L3eabba.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eabc0.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3eabc4.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eabca.  return @kind void;
}
procedure `void` `build`(`org.simpleframework.xml.core.PathParser` v8 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.build:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3eabdc.  v0:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3eabe0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3eabe6.  v0:= temp;
  #L3eabe8.  v1:= v0 + -1;
  #L3eabec.  v2:= 0I;
  #L3eabee.  if v2 >= v0 then goto L3eacb4;
  #L3eabf2.  v3:= v8.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L3eabf6.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3eabfc.  v3:= temp @kind object;
  #L3eabfe.  v3:= (`java.lang.String`) v3 @kind object;
  #L3eac02.  v4:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3eac06.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3eac0c.  v4:= temp @kind object;
  #L3eac0e.  v4:= (`java.lang.String`) v4 @kind object;
  #L3eac12.  v5:= v8.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L3eac16.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3eac1c.  v5:= temp @kind object;
  #L3eac1e.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L3eac22.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3eac28.  v5:= temp;
  #L3eac2a.  if v2 <= 0 then goto L3eac3c;
  #L3eac2e.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac32.  v7:= 47I;
  #L3eac36.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac3c.  v6:= v8.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L3eac40.  if v6 == 0 then goto L3eac62;
  #L3eac44.  if v2 != v1 then goto L3eac62;
  #L3eac48.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac4c.  v5:= 64I;
  #L3eac50.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac56.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac5a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac60.  goto L3eacae;
  #L3eac62.  if v3 == 0 then goto L3eac7e;
  #L3eac66.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac6a.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac70.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac74.  v6:= 58I;
  #L3eac78.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac7e.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac82.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac88.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac8c.  v4:= 91I;
  #L3eac90.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eac96.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eac9a.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eaca0.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eaca4.  v4:= 93I;
  #L3eaca8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eacae.  v2:= v2 + 1;
  #L3eacb2.  goto L3eabee;
  #L3eacb4.  v0:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L3eacb8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3eacbe.  v0:= temp @kind object;
  #L3eacc0.  v8.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` := v0 @kind object;
  #L3eacc4.  return @kind void;
}
procedure `void` `element`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.element:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3eacd8.  v0:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eacdc.  v1:= 0I;
  #L3eacde.  v2:= 0I;
  #L3eace0.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eace4.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L3eace8.  if v3 >= v4 then goto L3ead72;
  #L3eacec.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eacf0.  v5:= v3 + 1;
  #L3eacf4.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L3eacf8.  v3:= v4[v3] @kind char;
  #L3eacfc.  call temp:= `isValid`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.isValid:(C)Z` @kind direct;
  #L3ead02.  v4:= temp;
  #L3ead04.  if v4 != 0 then goto L3ead6c;
  #L3ead08.  v4:= 64I;
  #L3ead0c.  v5:= 1I;
  #L3ead0e.  if v3 != v4 then goto L3ead1e;
  #L3ead12.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3ead16.  v1:= v1 - v5 @kind int;
  #L3ead18.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L3ead1c.  goto L3ead72;
  #L3ead1e.  v4:= 91I;
  #L3ead22.  if v3 != v4 then goto L3ead2e;
  #L3ead26.  call `index`(v6) @signature `Lorg/simpleframework/xml/core/PathParser;.index:()V` @kind direct;
  #L3ead2c.  goto L3ead72;
  #L3ead2e.  v4:= 47I;
  #L3ead32.  if v3 != v4 then goto L3ead38;
  #L3ead36.  goto L3ead72;
  #L3ead38.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3ead3c.  v2:= 3I;
  #L3ead3e.  v2:= new `java.lang.Object`[v2];
  #L3ead42.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L3ead48.  v3:= temp @kind object;
  #L3ead4a.  v2[v1]:= v3 @kind object;
  #L3ead4e.  v1:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3ead52.  v2[v5]:= v1 @kind object;
  #L3ead56.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ead5a.  v3:= 2I;
  #L3ead5c.  v2[v3]:= v1 @kind object;
  #L3ead60.  v1:= "Illegal character '%s' in element for '%s' in %s" @kind object;
  #L3ead64.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3ead6a.  throw v0;
  #L3ead6c.  v2:= v2 + 1;
  #L3ead70.  goto L3eace0;
  #L3ead72.  call `element`(v6, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.element:(II)V` @kind direct;
  #L3ead78.  return @kind void;
}
procedure `void` `element`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.element:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ead8c.  v0:= new `java.lang.String`;
  #L3ead90.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3ead94.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3ead9a.  if v4 <= 0 then goto L3eada4;
  #L3ead9e.  call `element`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.element:(Ljava/lang/String;)V` @kind direct;
  #L3eada4.  return @kind void;
}
procedure `void` `element`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.element:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3eadb8.  v0:= 58I;
  #L3eadbc.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3eadc2.  v0:= temp;
  #L3eadc4.  if v0 <= 0 then goto L3eade0;
  #L3eadc8.  v1:= 0I;
  #L3eadca.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3eadd0.  v1:= temp @kind object;
  #L3eadd2.  v0:= v0 + 1;
  #L3eadd6.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3eaddc.  v3:= temp @kind object;
  #L3eadde.  goto L3eade2;
  #L3eade0.  v1:= 0I;
  #L3eade2.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3eade6.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3eadec.  v3:= temp @kind object;
  #L3eadee.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L3eadf2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eadf8.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3eadfc.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eae02.  return @kind void;
}
procedure `void` `index`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.index:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3eae14.  v0:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eae18.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eae1c.  v2:= 1I;
  #L3eae1e.  v1:= v1 - v2 @kind int;
  #L3eae20.  v0:= v0[v1] @kind char;
  #L3eae24.  v1:= 0I;
  #L3eae26.  v3:= 91I;
  #L3eae2a.  if v0 != v3 then goto L3eae66;
  #L3eae2e.  v0:= 0I;
  #L3eae30.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eae34.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L3eae38.  if v3 >= v4 then goto L3eae68;
  #L3eae3c.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eae40.  v5:= v3 + 1;
  #L3eae44.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L3eae48.  v3:= v4[v3] @kind char;
  #L3eae4c.  call temp:= `isDigit`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.isDigit:(C)Z` @kind direct;
  #L3eae52.  v4:= temp;
  #L3eae54.  if v4 != 0 then goto L3eae5a;
  #L3eae58.  goto L3eae68;
  #L3eae5a.  v0:= v0 * 10;
  #L3eae5e.  v0:= v0 + v3 @kind int;
  #L3eae60.  v0:= v0 + -48;
  #L3eae64.  goto L3eae30;
  #L3eae66.  v0:= 0I;
  #L3eae68.  v3:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eae6c.  v4:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eae70.  v5:= v4 + 1;
  #L3eae74.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L3eae78.  v4:= v4 - v2 @kind int;
  #L3eae7a.  v3:= v3[v4] @kind char;
  #L3eae7e.  v4:= 93I;
  #L3eae82.  if v3 != v4 then goto L3eae9a;
  #L3eae86.  v1:= v6.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L3eae8a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3eae90.  v0:= temp @kind object;
  #L3eae92.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3eae98.  return @kind void;
  #L3eae9a.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eae9e.  v3:= 2I;
  #L3eaea0.  v3:= new `java.lang.Object`[v3];
  #L3eaea4.  v4:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eaea8.  v3[v1]:= v4 @kind object;
  #L3eaeac.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eaeb0.  v3[v2]:= v1 @kind object;
  #L3eaeb4.  v1:= "Invalid index for path '%s' in %s" @kind object;
  #L3eaeb8.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eaebe.  throw v0;
}
procedure `boolean` `isDigit`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.isDigit:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3ea5f0.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L3ea5f6.  v1:= temp;
  #L3ea5f8.  return v1;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L3ea62c.  if v1 == 0 then goto L3ea642;
  #L3ea630.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3ea636.  v1:= temp;
  #L3ea638.  if v1 != 0 then goto L3ea63e;
  #L3ea63c.  goto L3ea642;
  #L3ea63e.  v1:= 0I;
  #L3ea640.  goto L3ea644;
  #L3ea642.  v1:= 1I;
  #L3ea644.  return v1;
}
procedure `boolean` `isLetter`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.isLetter:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L3ea658.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L3ea65e.  v1:= temp;
  #L3ea660.  return v1;
}
procedure `boolean` `isSpecial`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.isSpecial:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ea69c.  v0:= 95I;
  #L3ea6a0.  if v2 == v0 then goto L3ea6ba;
  #L3ea6a4.  v0:= 45I;
  #L3ea6a8.  if v2 == v0 then goto L3ea6ba;
  #L3ea6ac.  v0:= 58I;
  #L3ea6b0.  if v2 != v0 then goto L3ea6b6;
  #L3ea6b4.  goto L3ea6ba;
  #L3ea6b6.  v2:= 0I;
  #L3ea6b8.  goto L3ea6bc;
  #L3ea6ba.  v2:= 1I;
  #L3ea6bc.  return v2;
}
procedure `boolean` `isValid`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.isValid:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ea6d0.  call temp:= `isLetter`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.isLetter:(C)Z` @kind direct;
  #L3ea6d6.  v0:= temp;
  #L3ea6d8.  if v0 != 0 then goto L3ea6ee;
  #L3ea6dc.  call temp:= `isSpecial`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.isSpecial:(C)Z` @kind direct;
  #L3ea6e2.  v2:= temp;
  #L3ea6e4.  if v2 == 0 then goto L3ea6ea;
  #L3ea6e8.  goto L3ea6ee;
  #L3ea6ea.  v2:= 0I;
  #L3ea6ec.  goto L3ea6f0;
  #L3ea6ee.  v2:= 1I;
  #L3ea6f0.  return v2;
}
procedure `void` `parse`(`org.simpleframework.xml.core.PathParser` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.parse:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3eaed0.  if v4 == 0 then goto L3eaef0;
  #L3eaed4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3eaeda.  v0:= temp;
  #L3eaedc.  v3.`org.simpleframework.xml.core.PathParser.count` @type ^`int` := v0;
  #L3eaee0.  v1:= new `char`[v0];
  #L3eaee4.  v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] := v1 @kind object;
  #L3eaee8.  v2:= 0I;
  #L3eaeea.  call `getChars`(v4, v2, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L3eaef0.  call `path`(v3) @signature `Lorg/simpleframework/xml/core/PathParser;.path:()V` @kind direct;
  #L3eaef6.  return @kind void;
}
procedure `void` `path`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.path:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eaf08.  v0:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eaf0c.  v1:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eaf10.  v2:= v0[v1] @kind char;
  #L3eaf14.  v3:= 1I;
  #L3eaf16.  v4:= 0I;
  #L3eaf18.  v5:= 2I;
  #L3eaf1a.  v6:= 47I;
  #L3eaf1e.  if v2 == v6 then goto L3eaf82;
  #L3eaf22.  v0:= v0[v1] @kind char;
  #L3eaf26.  v1:= 46I;
  #L3eaf2a.  if v0 != v1 then goto L3eaf34;
  #L3eaf2e.  call `skip`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.skip:()V` @kind direct;
  #L3eaf34.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eaf38.  v1:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L3eaf3c.  if v0 >= v1 then goto L3eaf74;
  #L3eaf40.  v0:= v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L3eaf44.  if v0 != 0 then goto L3eaf50;
  #L3eaf48.  call `segment`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.segment:()V` @kind direct;
  #L3eaf4e.  goto L3eaf34;
  #L3eaf50.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eaf54.  v1:= new `java.lang.Object`[v5];
  #L3eaf58.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eaf5c.  v1[v4]:= v2 @kind object;
  #L3eaf60.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eaf64.  v1[v3]:= v2 @kind object;
  #L3eaf68.  v2:= "Path '%s' in %s references an invalid attribute" @kind object;
  #L3eaf6c.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eaf72.  throw v0;
  #L3eaf74.  call `truncate`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.truncate:()V` @kind direct;
  #L3eaf7a.  call `build`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.build:()V` @kind direct;
  #L3eaf80.  return @kind void;
  #L3eaf82.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eaf86.  v1:= new `java.lang.Object`[v5];
  #L3eaf8a.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eaf8e.  v1[v4]:= v2 @kind object;
  #L3eaf92.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eaf96.  v1[v3]:= v2 @kind object;
  #L3eaf9a.  v2:= "Path '%s' in %s references document root" @kind object;
  #L3eaf9e.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eafa4.  throw v0;
}
procedure `void` `segment`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.segment:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eafb8.  v0:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eafbc.  v1:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eafc0.  v0:= v0[v1] @kind char;
  #L3eafc4.  v1:= 47I;
  #L3eafc8.  if v0 == v1 then goto L3eafea;
  #L3eafcc.  v1:= 64I;
  #L3eafd0.  if v0 != v1 then goto L3eafdc;
  #L3eafd4.  call `attribute`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.attribute:()V` @kind direct;
  #L3eafda.  goto L3eafe2;
  #L3eafdc.  call `element`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.element:()V` @kind direct;
  #L3eafe2.  call `align`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.align:()V` @kind direct;
  #L3eafe8.  return @kind void;
  #L3eafea.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eafee.  v1:= 2I;
  #L3eaff0.  v1:= new `java.lang.Object`[v1];
  #L3eaff4.  v2:= v4.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eaff8.  v3:= 0I;
  #L3eaffa.  v1[v3]:= v2 @kind object;
  #L3eaffe.  v2:= v4.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eb002.  v3:= 1I;
  #L3eb004.  v1[v3]:= v2 @kind object;
  #L3eb008.  v2:= "Invalid path expression '%s' in %s" @kind object;
  #L3eb00c.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eb012.  throw v0;
}
procedure `void` `skip`(`org.simpleframework.xml.core.PathParser` v5 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.skip:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eb024.  v0:= v5.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eb028.  v1:= length @variable v0;
  #L3eb02a.  v2:= 1I;
  #L3eb02c.  if v1 <= v2 then goto L3eb070;
  #L3eb030.  v1:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eb034.  v1:= v1 + v2 @kind int;
  #L3eb036.  v0:= v0[v1] @kind char;
  #L3eb03a.  v3:= 47I;
  #L3eb03e.  if v0 != v3 then goto L3eb048;
  #L3eb042.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L3eb046.  goto L3eb070;
  #L3eb048.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L3eb04c.  v1:= 2I;
  #L3eb04e.  v1:= new `java.lang.Object`[v1];
  #L3eb052.  v3:= v5.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L3eb056.  v4:= 0I;
  #L3eb058.  v1[v4]:= v3 @kind object;
  #L3eb05c.  v3:= v5.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3eb060.  v1[v2]:= v3 @kind object;
  #L3eb064.  v2:= "Path '%s' in %s has an illegal syntax" @kind object;
  #L3eb068.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3eb06e.  throw v0;
  #L3eb070.  v0:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eb074.  v0:= v0 + v2 @kind int;
  #L3eb076.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L3eb07a.  v5.`org.simpleframework.xml.core.PathParser.start` @type ^`int` := v0;
  #L3eb07e.  return @kind void;
}
procedure `void` `truncate`(`org.simpleframework.xml.core.PathParser` v3 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.truncate:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3eb090.  v0:= v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3eb094.  v0:= v0 + -1;
  #L3eb098.  v1:= v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3eb09c.  v2:= length @variable v1;
  #L3eb09e.  if v0 < v2 then goto L3eb0a8;
  #L3eb0a2.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L3eb0a6.  goto L3eb0b8;
  #L3eb0a8.  v1:= v1[v0] @kind char;
  #L3eb0ac.  v2:= 47I;
  #L3eb0b0.  if v1 != v2 then goto L3eb0b8;
  #L3eb0b4.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L3eb0b8.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea730.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea734.  call temp:= `isEmpty`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea73a.  v0:= temp;
  #L3ea73c.  if v0 != 0 then goto L3ea770;
  #L3ea740.  v0:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3ea744.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ea74a.  v0:= temp @kind object;
  #L3ea74c.  v0:= (`java.lang.String`) v0 @kind object;
  #L3ea750.  if v0 != 0 then goto L3ea76e;
  #L3ea754.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea758.  call temp:= `getAttributePath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3ea75e.  v0:= temp @kind object;
  #L3ea760.  if v0 == 0 then goto L3ea76e;
  #L3ea764.  v1:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3ea768.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3ea76e.  return v0 @kind object;
  #L3ea770.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ea774.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ea77a.  v3:= temp @kind object;
  #L3ea77c.  return v3 @kind object;
}
procedure `java.lang.String` `getAttributePath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea790.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ea794.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ea79a.  v3:= temp @kind object;
  #L3ea79c.  call temp:= `isEmpty`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea7a2.  v0:= temp;
  #L3ea7a4.  if v0 == 0 then goto L3ea7aa;
  #L3ea7a8.  return v3 @kind object;
  #L3ea7aa.  v0:= new `java.lang.StringBuilder`;
  #L3ea7ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ea7b4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea7ba.  v2:= "/@" @kind object;
  #L3ea7be.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea7c4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea7ca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ea7d0.  v2:= temp @kind object;
  #L3ea7d2.  return v2 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea7e4.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea7e8.  call temp:= `isEmpty`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea7ee.  v0:= temp;
  #L3ea7f0.  if v0 != 0 then goto L3ea824;
  #L3ea7f4.  v0:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3ea7f8.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ea7fe.  v0:= temp @kind object;
  #L3ea800.  v0:= (`java.lang.String`) v0 @kind object;
  #L3ea804.  if v0 != 0 then goto L3ea822;
  #L3ea808.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea80c.  call temp:= `getElementPath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3ea812.  v0:= temp @kind object;
  #L3ea814.  if v0 == 0 then goto L3ea822;
  #L3ea818.  v1:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L3ea81c.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L3ea822.  return v0 @kind object;
  #L3ea824.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ea828.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ea82e.  v3:= temp @kind object;
  #L3ea830.  return v3 @kind object;
}
procedure `java.lang.String` `getElementPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea844.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ea848.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ea84e.  v3:= temp @kind object;
  #L3ea850.  call temp:= `isEmpty`(v1, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea856.  v0:= temp;
  #L3ea858.  if v0 == 0 then goto L3ea85e;
  #L3ea85c.  return v2 @kind object;
  #L3ea85e.  call temp:= `isEmpty`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea864.  v0:= temp;
  #L3ea866.  if v0 == 0 then goto L3ea86c;
  #L3ea86a.  return v3 @kind object;
  #L3ea86c.  v0:= new `java.lang.StringBuilder`;
  #L3ea870.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ea876.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea87c.  v2:= "/" @kind object;
  #L3ea880.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea886.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea88c.  v2:= "[1]" @kind object;
  #L3ea890.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ea896.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ea89c.  v2:= temp @kind object;
  #L3ea89e.  return v2 @kind object;
}
procedure `java.lang.String` `getFirst`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getFirst:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea8b0.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea8b4.  v1:= 0I;
  #L3ea8b6.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3ea8bc.  v0:= temp @kind object;
  #L3ea8be.  v0:= (`java.lang.String`) v0 @kind object;
  #L3ea8c2.  return v0 @kind object;
}
procedure `int` `getIndex`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea704.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L3ea708.  v1:= 0I;
  #L3ea70a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3ea710.  v0:= temp @kind object;
  #L3ea712.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L3ea716.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3ea71c.  v0:= temp;
  #L3ea71e.  return v0;
}
procedure `java.lang.String` `getLast`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getLast:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea8d4.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea8d8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3ea8de.  v0:= temp;
  #L3ea8e0.  v0:= v0 + -1;
  #L3ea8e4.  v1:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea8e8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3ea8ee.  v0:= temp @kind object;
  #L3ea8f0.  v0:= (`java.lang.String`) v0 @kind object;
  #L3ea8f4.  return v0 @kind object;
}
procedure `java.lang.String` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea908.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea90c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(I)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea9a0.  v0:= 0I;
  #L3ea9a2.  call temp:= `getPath`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L3ea9a8.  v2:= temp @kind object;
  #L3ea9aa.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea9bc.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea9c0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3ea9c6.  v0:= temp;
  #L3ea9c8.  v0:= v0 + -1;
  #L3ea9cc.  v0:= v0 - v3 @kind int;
  #L3ea9ce.  if v0 < v2 then goto L3ea9de;
  #L3ea9d2.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L3ea9d6.  call `<init>`(v3, v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L3ea9dc.  return v3 @kind object;
  #L3ea9de.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L3ea9e2.  call `<init>`(v3, v1, v2, v2) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L3ea9e8.  return v3 @kind object;
}
procedure `java.lang.String` `getPrefix`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea920.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L3ea924.  v1:= 0I;
  #L3ea926.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3ea92c.  v0:= temp @kind object;
  #L3ea92e.  v0:= (`java.lang.String`) v0 @kind object;
  #L3ea932.  return v0 @kind object;
}
procedure `boolean` `isAttribute`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea5d8.  v0:= v1.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L3ea5dc.  return v0;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea60c.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L3ea610.  call temp:= `isEmpty`(v1, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:(Ljava/lang/String;)Z` @kind direct;
  #L3ea616.  v0:= temp;
  #L3ea618.  return v0;
}
procedure `boolean` `isPath`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isPath:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ea674.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea678.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3ea67e.  v0:= temp;
  #L3ea680.  v1:= 1I;
  #L3ea682.  if v0 <= v1 then goto L3ea688;
  #L3ea686.  goto L3ea68a;
  #L3ea688.  v1:= 0I;
  #L3ea68a.  return v1;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea980.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L3ea984.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ea98a.  v0:= temp @kind object;
  #L3ea98c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ea944.  v0:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L3ea948.  v1:= v4.`org.simpleframework.xml.core.PathParser.start` @type ^`int`;
  #L3ea94c.  v0:= v0 - v1 @kind int;
  #L3ea94e.  v2:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L3ea952.  if v2 != 0 then goto L3ea968;
  #L3ea956.  v2:= new `java.lang.String`;
  #L3ea95a.  v3:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L3ea95e.  call `<init>`(v2, v3, v1, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3ea964.  v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` := v2 @kind object;
  #L3ea968.  v0:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L3ea96c.  return v0 @kind object;
}
