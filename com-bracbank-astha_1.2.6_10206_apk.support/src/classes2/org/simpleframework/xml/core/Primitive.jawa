record `org.simpleframework.xml.core.Primitive` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Primitive.context` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.Primitive.empty` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.Primitive.expect` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.Primitive.factory` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Primitive.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3eccec.  v0:= 0I;
  #L3eccee.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @kind direct;
  #L3eccf4.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ecd08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ecd0e.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L3ecd12.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ecd18.  v1.`org.simpleframework.xml.core.Primitive.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L3ecd1c.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ecd22.  v0:= temp @kind object;
  #L3ecd24.  v1.`org.simpleframework.xml.core.Primitive.expect` @type ^`java.lang.Class` := v0 @kind object;
  #L3ecd28.  v1.`org.simpleframework.xml.core.Primitive.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L3ecd2c.  v1.`org.simpleframework.xml.core.Primitive.empty` @type ^`java.lang.String` := v4 @kind object;
  #L3ecd30.  v1.`org.simpleframework.xml.core.Primitive.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L3ecd34.  return @kind void;
}
procedure `java.lang.Object` `readElement`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ecc54.  v0:= v2.`org.simpleframework.xml.core.Primitive.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ecc58.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ecc5e.  v0:= temp @kind object;
  #L3ecc60.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ecc66.  v1:= temp;
  #L3ecc68.  if v1 != 0 then goto L3ecc76;
  #L3ecc6c.  call temp:= `readElement`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @kind direct;
  #L3ecc72.  v3:= temp @kind object;
  #L3ecc74.  return v3 @kind object;
  #L3ecc76.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L3ecc7c.  v3:= temp @kind object;
  #L3ecc7e.  return v3 @kind object;
}
procedure `java.lang.Object` `readElement`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `org.simpleframework.xml.core.Instance` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ecc90.  v0:= v1.`org.simpleframework.xml.core.Primitive.expect` @type ^`java.lang.Class` @kind object;
  #L3ecc94.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L3ecc9a.  v2:= temp @kind object;
  #L3ecc9c.  if v3 == 0 then goto L3ecca6;
  #L3ecca0.  call temp:= `setInstance`(v3, v2) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ecca6.  return v2 @kind object;
}
procedure `java.lang.Object` `readTemplate`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.readTemplate:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3eccb8.  v0:= v1.`org.simpleframework.xml.core.Primitive.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3eccbc.  call temp:= `getProperty`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3eccc2.  v2:= temp @kind object;
  #L3eccc4.  if v2 == 0 then goto L3eccd6;
  #L3eccc8.  v0:= v1.`org.simpleframework.xml.core.Primitive.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ecccc.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L3eccd2.  v2:= temp @kind object;
  #L3eccd4.  return v2 @kind object;
  #L3eccd6.  v2:= 0I;
  #L3eccd8.  return v2 @kind object;
}
procedure `boolean` `validateElement`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.validateElement:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ecb60.  v0:= v1.`org.simpleframework.xml.core.Primitive.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ecb64.  call temp:= `getInstance`(v0, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ecb6a.  v2:= temp @kind object;
  #L3ecb6c.  call temp:= `isReference`(v2) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ecb72.  v0:= temp;
  #L3ecb74.  if v0 != 0 then goto L3ecb80;
  #L3ecb78.  v0:= 0I;
  #L3ecb7a.  call temp:= `setInstance`(v2, v0) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ecb80.  v2:= 1I;
  #L3ecb82.  return v2;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecb94.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L3ecb9a.  v0:= temp;
  #L3ecb9c.  if v0 == 0 then goto L3ecbaa;
  #L3ecba0.  call temp:= `readElement`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind direct;
  #L3ecba6.  v2:= temp @kind object;
  #L3ecba8.  return v2 @kind object;
  #L3ecbaa.  v0:= v1.`org.simpleframework.xml.core.Primitive.expect` @type ^`java.lang.Class` @kind object;
  #L3ecbae.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L3ecbb4.  v2:= temp @kind object;
  #L3ecbb6.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecbc8.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3ecbce.  v2:= temp @kind object;
  #L3ecbd0.  if v2 != 0 then goto L3ecbd8;
  #L3ecbd4.  v2:= 0I;
  #L3ecbd6.  return v2 @kind object;
  #L3ecbd8.  v0:= v1.`org.simpleframework.xml.core.Primitive.empty` @type ^`java.lang.String` @kind object;
  #L3ecbdc.  if v0 == 0 then goto L3ecbf2;
  #L3ecbe0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ecbe6.  v0:= temp;
  #L3ecbe8.  if v0 == 0 then goto L3ecbf2;
  #L3ecbec.  v2:= v1.`org.simpleframework.xml.core.Primitive.empty` @type ^`java.lang.String` @kind object;
  #L3ecbf0.  return v2 @kind object;
  #L3ecbf2.  call temp:= `readTemplate`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.readTemplate:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L3ecbf8.  v2:= temp @kind object;
  #L3ecbfa.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ecc0c.  if v4 != 0 then goto L3ecc1a;
  #L3ecc10.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ecc16.  v3:= temp @kind object;
  #L3ecc18.  return v3 @kind object;
  #L3ecc1a.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3ecc1e.  v4:= 2I;
  #L3ecc20.  v4:= new `java.lang.Object`[v4];
  #L3ecc24.  v0:= v2.`org.simpleframework.xml.core.Primitive.expect` @type ^`java.lang.Class` @kind object;
  #L3ecc28.  v1:= 0I;
  #L3ecc2a.  v4[v1]:= v0 @kind object;
  #L3ecc2e.  v0:= v2.`org.simpleframework.xml.core.Primitive.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ecc32.  v1:= 1I;
  #L3ecc34.  v4[v1]:= v0 @kind object;
  #L3ecc38.  v0:= "Can not read existing %s for %s" @kind object;
  #L3ecc3c.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3ecc42.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecb30.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L3ecb36.  v0:= temp;
  #L3ecb38.  if v0 == 0 then goto L3ecb44;
  #L3ecb3c.  call temp:= `validateElement`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validateElement:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind direct;
  #L3ecb42.  goto L3ecb4a;
  #L3ecb44.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3ecb4a.  v2:= 1I;
  #L3ecb4c.  return v2;
}
procedure `void` `write`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecd48.  v0:= v1.`org.simpleframework.xml.core.Primitive.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ecd4c.  call temp:= `getText`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getText:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L3ecd52.  v3:= temp @kind object;
  #L3ecd54.  if v3 == 0 then goto L3ecd5e;
  #L3ecd58.  call `setValue`(v2, v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L3ecd5e.  return @kind void;
}
