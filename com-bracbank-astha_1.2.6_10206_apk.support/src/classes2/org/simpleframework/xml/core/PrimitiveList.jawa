record `org.simpleframework.xml.core.PrimitiveList` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveList.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.CollectionFactory` `org.simpleframework.xml.core.PrimitiveList.factory` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveList.parent` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveList.root` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ec41c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec422.  v0:= new `org.simpleframework.xml.core.CollectionFactory`;
  #L3ec426.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ec42c.  v1.`org.simpleframework.xml.core.PrimitiveList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` := v0 @kind object;
  #L3ec430.  v3:= new `org.simpleframework.xml.core.Primitive`;
  #L3ec434.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ec43a.  v1.`org.simpleframework.xml.core.PrimitiveList.root` @type ^`org.simpleframework.xml.core.Primitive` := v3 @kind object;
  #L3ec43e.  v1.`org.simpleframework.xml.core.PrimitiveList.parent` @type ^`java.lang.String` := v5 @kind object;
  #L3ec442.  v1.`org.simpleframework.xml.core.PrimitiveList.entry` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3ec446.  return @kind void;
}
procedure `boolean` `isOverridden`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ec2c8.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ec2cc.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.entry` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ec2d0.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3ec2d6.  v3:= temp;
  #L3ec2d8.  return v3;
}
procedure `java.lang.Object` `populate`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.populate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ec360.  v4:= (`java.util.Collection`) v4 @kind object;
  #L3ec364.  call temp:= `getNext`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ec36a.  v0:= temp @kind object;
  #L3ec36c.  if v0 != 0 then goto L3ec372;
  #L3ec370.  return v4 @kind object;
  #L3ec372.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec376.  call temp:= `read`(v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ec37c.  v0:= temp @kind object;
  #L3ec37e.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ec384.  goto L3ec364;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ec334.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ec33a.  v3:= temp @kind object;
  #L3ec33c.  if v3 != 0 then goto L3ec344;
  #L3ec340.  v2:= 1I;
  #L3ec342.  return v2;
  #L3ec344.  v0:= v1.`org.simpleframework.xml.core.PrimitiveList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec348.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3ec34e.  goto L3ec334;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec398.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ec39c.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ec3a2.  v0:= temp @kind object;
  #L3ec3a4.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L3ec3aa.  v1:= temp @kind object;
  #L3ec3ac.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ec3b2.  v0:= temp;
  #L3ec3b4.  if v0 != 0 then goto L3ec3c2;
  #L3ec3b8.  call temp:= `populate`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.populate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L3ec3be.  v3:= temp @kind object;
  #L3ec3c0.  return v3 @kind object;
  #L3ec3c2.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec3d4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ec3d8.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ec3de.  v0:= temp @kind object;
  #L3ec3e0.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ec3e6.  v1:= temp;
  #L3ec3e8.  if v1 == 0 then goto L3ec3f6;
  #L3ec3ec.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L3ec3f2.  v3:= temp @kind object;
  #L3ec3f4.  return v3 @kind object;
  #L3ec3f6.  call temp:= `setInstance`(v0, v4) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ec3fc.  if v4 == 0 then goto L3ec40a;
  #L3ec400.  call temp:= `populate`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.populate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L3ec406.  v3:= temp @kind object;
  #L3ec408.  return v3 @kind object;
  #L3ec40a.  return v4 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec2ec.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ec2f0.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ec2f6.  v0:= temp @kind object;
  #L3ec2f8.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ec2fe.  v1:= temp;
  #L3ec300.  if v1 != 0 then goto L3ec31e;
  #L3ec304.  v1:= 0I;
  #L3ec306.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ec30c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ec312.  v0:= temp @kind object;
  #L3ec314.  call temp:= `validate`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L3ec31a.  v3:= temp;
  #L3ec31c.  return v3;
  #L3ec31e.  v3:= 1I;
  #L3ec320.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ec458.  v5:= (`java.util.Collection`) v5 @kind object;
  #L3ec45c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ec462.  v5:= temp @kind object;
  #L3ec464.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ec46a.  v0:= temp;
  #L3ec46c.  if v0 == 0 then goto L3ec4a0;
  #L3ec470.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ec476.  v0:= temp @kind object;
  #L3ec478.  if v0 == 0 then goto L3ec464;
  #L3ec47c.  v1:= v3.`org.simpleframework.xml.core.PrimitiveList.parent` @type ^`java.lang.String` @kind object;
  #L3ec480.  call temp:= `getChild`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ec486.  v1:= temp @kind object;
  #L3ec488.  call temp:= `isOverridden`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L3ec48e.  v2:= temp;
  #L3ec490.  if v2 != 0 then goto L3ec464;
  #L3ec494.  v2:= v3.`org.simpleframework.xml.core.PrimitiveList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec498.  call `write`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3ec49e.  goto L3ec464;
  #L3ec4a0.  return @kind void;
}
