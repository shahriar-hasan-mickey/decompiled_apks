record `org.simpleframework.xml.core.VersionLabel` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.TemplateLabel` @kind class {
  `org.simpleframework.xml.core.Decorator` `org.simpleframework.xml.core.VersionLabel.decorator` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Introspector` `org.simpleframework.xml.core.VersionLabel.detail` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Format` `org.simpleframework.xml.core.VersionLabel.format` @AccessFlag PRIVATE;
  `org.simpleframework.xml.Version` `org.simpleframework.xml.core.VersionLabel.label` @AccessFlag PRIVATE;
  `java.lang.String` `org.simpleframework.xml.core.VersionLabel.name` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Expression` `org.simpleframework.xml.core.VersionLabel.path` @AccessFlag PRIVATE;
  `boolean` `org.simpleframework.xml.core.VersionLabel.required` @AccessFlag PRIVATE;
  `java.lang.Class` `org.simpleframework.xml.core.VersionLabel.type` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this, `org.simpleframework.xml.core.Contact` v2 @kind object, `org.simpleframework.xml.Version` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.<init>:(Lorg/simpleframework/xml/core/Contact;Lorg/simpleframework/xml/Version;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f1c94.  call `<init>`(v1) @signature `Lorg/simpleframework/xml/core/TemplateLabel;.<init>:()V` @kind direct;
  #L3f1c9a.  v0:= new `org.simpleframework.xml.core.Introspector`;
  #L3f1c9e.  call `<init>`(v0, v2, v1, v4) @signature `Lorg/simpleframework/xml/core/Introspector;.<init>:(Lorg/simpleframework/xml/core/Contact;Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L3f1ca4.  v1.`org.simpleframework.xml.core.VersionLabel.detail` @type ^`org.simpleframework.xml.core.Introspector` := v0 @kind object;
  #L3f1ca8.  v0:= new `org.simpleframework.xml.core.Qualifier`;
  #L3f1cac.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Qualifier;.<init>:(Lorg/simpleframework/xml/core/Contact;)V` @kind direct;
  #L3f1cb2.  v1.`org.simpleframework.xml.core.VersionLabel.decorator` @type ^`org.simpleframework.xml.core.Decorator` := v0 @kind object;
  #L3f1cb6.  call temp:= `required`(v3) @signature `Lorg/simpleframework/xml/Version;.required:()Z` @kind interface;
  #L3f1cbc.  v0:= temp;
  #L3f1cbe.  v1.`org.simpleframework.xml.core.VersionLabel.required` @type ^`boolean` := v0 @kind boolean;
  #L3f1cc2.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3f1cc8.  v2:= temp @kind object;
  #L3f1cca.  v1.`org.simpleframework.xml.core.VersionLabel.type` @type ^`java.lang.Class` := v2 @kind object;
  #L3f1cce.  call temp:= `name`(v3) @signature `Lorg/simpleframework/xml/Version;.name:()Ljava/lang/String;` @kind interface;
  #L3f1cd4.  v2:= temp @kind object;
  #L3f1cd6.  v1.`org.simpleframework.xml.core.VersionLabel.name` @type ^`java.lang.String` := v2 @kind object;
  #L3f1cda.  v1.`org.simpleframework.xml.core.VersionLabel.format` @type ^`org.simpleframework.xml.stream.Format` := v4 @kind object;
  #L3f1cde.  v1.`org.simpleframework.xml.core.VersionLabel.label` @type ^`org.simpleframework.xml.Version` := v3 @kind object;
  #L3f1ce2.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `getAnnotation`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getAnnotation:()Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1bb4.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.label` @type ^`org.simpleframework.xml.Version` @kind object;
  #L3f1bb8.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Contact` `getContact`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getContact:()Lorg/simpleframework/xml/core/Contact;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1bcc.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.detail` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L3f1bd0.  call temp:= `getContact`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind virtual;
  #L3f1bd6.  v0:= temp @kind object;
  #L3f1bd8.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Converter` `getConverter`(`org.simpleframework.xml.core.VersionLabel` v4 @kind this, `org.simpleframework.xml.core.Context` v5 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getConverter:(Lorg/simpleframework/xml/core/Context;)Lorg/simpleframework/xml/core/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f1bec.  call temp:= `getEmpty`(v4, v5) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @kind virtual;
  #L3f1bf2.  v0:= temp @kind object;
  #L3f1bf4.  call temp:= `getContact`(v4) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind virtual;
  #L3f1bfa.  v1:= temp @kind object;
  #L3f1bfc.  call temp:= `isFloat`(v5, v1) @signature `Lorg/simpleframework/xml/core/Context;.isFloat:(Lorg/simpleframework/xml/strategy/Type;)Z` @kind interface;
  #L3f1c02.  v2:= temp;
  #L3f1c04.  if v2 == 0 then goto L3f1c14;
  #L3f1c08.  v2:= new `org.simpleframework.xml.core.Primitive`;
  #L3f1c0c.  call `<init>`(v2, v5, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @kind direct;
  #L3f1c12.  return v2 @kind object;
  #L3f1c14.  v5:= new `org.simpleframework.xml.core.AttributeException`;
  #L3f1c18.  v0:= 2I;
  #L3f1c1a.  v0:= new `java.lang.Object`[v0];
  #L3f1c1e.  v2:= v4.`org.simpleframework.xml.core.VersionLabel.label` @type ^`org.simpleframework.xml.Version` @kind object;
  #L3f1c22.  v3:= 0I;
  #L3f1c24.  v0[v3]:= v2 @kind object;
  #L3f1c28.  v2:= 1I;
  #L3f1c2a.  v0[v2]:= v1 @kind object;
  #L3f1c2e.  v1:= "Cannot use %s to represent %s" @kind object;
  #L3f1c32.  call `<init>`(v5, v1, v0) @signature `Lorg/simpleframework/xml/core/AttributeException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f1c38.  throw v5;
}
procedure `org.simpleframework.xml.core.Decorator` `getDecorator`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getDecorator:()Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1c4c.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.decorator` @type ^`org.simpleframework.xml.core.Decorator` @kind object;
  #L3f1c50.  return v0 @kind object;
}
procedure `java.lang.Object` `getEmpty`(`org.simpleframework.xml.core.VersionLabel` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f1aec.  call temp:= `getEmpty`(v0, v1) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @kind virtual;
  #L3f1af2.  v1:= temp @kind object;
  #L3f1af4.  return v1 @kind object;
}
procedure `java.lang.String` `getEmpty`(`org.simpleframework.xml.core.VersionLabel` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3f1b08.  v1:= 0I;
  #L3f1b0a.  return v1 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getExpression`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1c64.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.path` @type ^`org.simpleframework.xml.core.Expression` @kind object;
  #L3f1c68.  if v0 != 0 then goto L3f1c7c;
  #L3f1c6c.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.detail` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L3f1c70.  call temp:= `getExpression`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L3f1c76.  v0:= temp @kind object;
  #L3f1c78.  v1.`org.simpleframework.xml.core.VersionLabel.path` @type ^`org.simpleframework.xml.core.Expression` := v0 @kind object;
  #L3f1c7c.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.path` @type ^`org.simpleframework.xml.core.Expression` @kind object;
  #L3f1c80.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.VersionLabel` v2 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1b1c.  v0:= v2.`org.simpleframework.xml.core.VersionLabel.format` @type ^`org.simpleframework.xml.stream.Format` @kind object;
  #L3f1b20.  call temp:= `getStyle`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L3f1b26.  v0:= temp @kind object;
  #L3f1b28.  v1:= v2.`org.simpleframework.xml.core.VersionLabel.detail` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L3f1b2c.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/core/Introspector;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f1b32.  v1:= temp @kind object;
  #L3f1b34.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f1b3a.  v0:= temp @kind object;
  #L3f1b3c.  return v0 @kind object;
}
procedure `java.lang.String` `getOverride`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getOverride:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1b50.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.name` @type ^`java.lang.String` @kind object;
  #L3f1b54.  return v0 @kind object;
}
procedure `java.lang.String` `getPath`(`org.simpleframework.xml.core.VersionLabel` v2 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1b68.  call temp:= `getExpression`(v2) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L3f1b6e.  v0:= temp @kind object;
  #L3f1b70.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f1b76.  v1:= temp @kind object;
  #L3f1b78.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/core/Expression;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3f1b7e.  v0:= temp @kind object;
  #L3f1b80.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1ad4.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.type` @type ^`java.lang.Class` @kind object;
  #L3f1ad8.  return v0 @kind object;
}
procedure `boolean` `isAttribute`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1a94.  v0:= 1I;
  #L3f1a96.  return v0;
}
procedure `boolean` `isData`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isData:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1aa8.  v0:= 0I;
  #L3f1aaa.  return v0;
}
procedure `boolean` `isRequired`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1abc.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.required` @type ^`boolean` @kind boolean;
  #L3f1ac0.  return v0;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1b94.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.detail` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L3f1b98.  call temp:= `toString`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1b9e.  v0:= temp @kind object;
  #L3f1ba0.  return v0 @kind object;
}
