record `org.simpleframework.xml.core.MethodScanner` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.ContactList` @kind class {
  `org.simpleframework.xml.core.Detail` `org.simpleframework.xml.core.MethodScanner.detail` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodPartFactory` `org.simpleframework.xml.core.MethodScanner.factory` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.read` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.MethodScanner.support` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.write` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.core.Support` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e850c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/core/ContactList;.<init>:()V` @kind direct;
  #L3e8512.  v0:= new `org.simpleframework.xml.core.MethodPartFactory`;
  #L3e8516.  call `<init>`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @kind direct;
  #L3e851c.  v2.`org.simpleframework.xml.core.MethodScanner.factory` @type ^`org.simpleframework.xml.core.MethodPartFactory` := v0 @kind object;
  #L3e8520.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L3e8524.  v1:= 0I;
  #L3e8526.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L3e852c.  v2.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L3e8530.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L3e8534.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L3e853a.  v2.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L3e853e.  v2.`org.simpleframework.xml.core.MethodScanner.support` @type ^`org.simpleframework.xml.core.Support` := v4 @kind object;
  #L3e8542.  v2.`org.simpleframework.xml.core.MethodScanner.detail` @type ^`org.simpleframework.xml.core.Detail` := v3 @kind object;
  #L3e8546.  call `scan`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.scan:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L3e854c.  return @kind void;
}
procedure `void` `build`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8560.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8564.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3e856a.  v0:= temp @kind object;
  #L3e856c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8572.  v1:= temp;
  #L3e8574.  if v1 == 0 then goto L3e85a0;
  #L3e8578.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e857e.  v1:= temp @kind object;
  #L3e8580.  v1:= (`java.lang.String`) v1 @kind object;
  #L3e8584.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8588.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e858e.  v2:= temp @kind object;
  #L3e8590.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L3e8594.  if v2 == 0 then goto L3e856c;
  #L3e8598.  call `build`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L3e859e.  goto L3e856c;
  #L3e85a0.  return @kind void;
}
procedure `void` `build`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e85b4.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L3e85b8.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L3e85be.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e85c4.  return @kind void;
}
procedure `void` `build`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e85d8.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e85dc.  call temp:= `take`(v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e85e2.  v3:= temp @kind object;
  #L3e85e4.  if v3 == 0 then goto L3e85f0;
  #L3e85e8.  call `build`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L3e85ee.  goto L3e85f6;
  #L3e85f0.  call `build`(v1, v2) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L3e85f6.  return @kind void;
}
procedure `void` `build`(`org.simpleframework.xml.core.MethodScanner` v6 @kind this, `org.simpleframework.xml.core.MethodPart` v7 @kind object, `org.simpleframework.xml.core.MethodPart` v8 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e8608.  call temp:= `getAnnotation`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L3e860e.  v0:= temp @kind object;
  #L3e8610.  call temp:= `getName`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L3e8616.  v1:= temp @kind object;
  #L3e8618.  call temp:= `getAnnotation`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L3e861e.  v2:= temp @kind object;
  #L3e8620.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e8626.  v0:= temp;
  #L3e8628.  v2:= 1I;
  #L3e862a.  v3:= 0I;
  #L3e862c.  v4:= 2I;
  #L3e862e.  if v0 == 0 then goto L3e8674;
  #L3e8632.  call temp:= `getType`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e8638.  v0:= temp @kind object;
  #L3e863a.  call temp:= `getType`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e8640.  v5:= temp @kind object;
  #L3e8642.  if v0 != v5 then goto L3e8658;
  #L3e8646.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L3e864a.  call `<init>`(v0, v7, v8) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L3e8650.  call temp:= `add`(v6, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e8656.  return @kind void;
  #L3e8658.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L3e865c.  v8:= new `java.lang.Object`[v4];
  #L3e8660.  v8[v3]:= v1 @kind object;
  #L3e8664.  v8[v2]:= v0 @kind object;
  #L3e8668.  v0:= "Method types do not match for %s in %s" @kind object;
  #L3e866c.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e8672.  throw v7;
  #L3e8674.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L3e8678.  v8:= new `java.lang.Object`[v4];
  #L3e867c.  v8[v3]:= v1 @kind object;
  #L3e8680.  v0:= v6.`org.simpleframework.xml.core.MethodScanner.detail` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L3e8684.  v8[v2]:= v0 @kind object;
  #L3e8688.  v0:= "Annotations do not match for '%s' in %s" @kind object;
  #L3e868c.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e8692.  throw v7;
}
procedure `void` `extend`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.DefaultType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extend:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e86a4.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.support` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L3e86a8.  call temp:= `getMethods`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/Support;.getMethods:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)Lorg/simpleframework/xml/core/ContactList;` @kind virtual;
  #L3e86ae.  v2:= temp @kind object;
  #L3e86b0.  call temp:= `iterator`(v2) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3e86b6.  v2:= temp @kind object;
  #L3e86b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e86be.  v3:= temp;
  #L3e86c0.  if v3 == 0 then goto L3e86dc;
  #L3e86c4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e86ca.  v3:= temp @kind object;
  #L3e86cc.  v3:= (`org.simpleframework.xml.core.Contact`) v3 @kind object;
  #L3e86d0.  v3:= (`org.simpleframework.xml.core.MethodContact`) v3 @kind object;
  #L3e86d4.  call `process`(v1, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodContact;)V` @kind direct;
  #L3e86da.  goto L3e86b8;
  #L3e86dc.  return @kind void;
}
procedure `void` `extract`(`org.simpleframework.xml.core.MethodScanner` v5 @kind this, `org.simpleframework.xml.core.Detail` v6 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extract:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e86f0.  call temp:= `getMethods`(v6) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L3e86f6.  v6:= temp @kind object;
  #L3e86f8.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e86fe.  v6:= temp @kind object;
  #L3e8700.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8706.  v0:= temp;
  #L3e8708.  if v0 == 0 then goto L3e8740;
  #L3e870c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e8712.  v0:= temp @kind object;
  #L3e8714.  v0:= (`org.simpleframework.xml.core.MethodDetail`) v0 @kind object;
  #L3e8718.  call temp:= `getAnnotations`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L3e871e.  v1:= temp @kind object;
  #L3e8720.  call temp:= `getMethod`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L3e8726.  v0:= temp @kind object;
  #L3e8728.  v2:= length @variable v1;
  #L3e872a.  v3:= 0I;
  #L3e872c.  if v3 >= v2 then goto L3e8700;
  #L3e8730.  v4:= v1[v3] @kind object;
  #L3e8734.  call `scan`(v5, v0, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.scan:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e873a.  v3:= v3 + 1;
  #L3e873e.  goto L3e872c;
  #L3e8740.  return @kind void;
}
procedure `void` `extract`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.DefaultType` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extract:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8754.  call temp:= `getMethods`(v3) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L3e875a.  v3:= temp @kind object;
  #L3e875c.  v0:= `@@org.simpleframework.xml.DefaultType.PROPERTY` @type ^`org.simpleframework.xml.DefaultType` @kind object;
  #L3e8760.  if v4 != v0 then goto L3e87ac;
  #L3e8764.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e876a.  v3:= temp @kind object;
  #L3e876c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8772.  v4:= temp;
  #L3e8774.  if v4 == 0 then goto L3e87ac;
  #L3e8778.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e877e.  v4:= temp @kind object;
  #L3e8780.  v4:= (`org.simpleframework.xml.core.MethodDetail`) v4 @kind object;
  #L3e8784.  call temp:= `getAnnotations`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L3e878a.  v0:= temp @kind object;
  #L3e878c.  call temp:= `getMethod`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L3e8792.  v4:= temp @kind object;
  #L3e8794.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.factory` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L3e8798.  call temp:= `getType`(v1, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getType:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind virtual;
  #L3e879e.  v1:= temp @kind object;
  #L3e87a0.  if v1 == 0 then goto L3e876c;
  #L3e87a4.  call `process`(v2, v4, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e87aa.  goto L3e876c;
  #L3e87ac.  return @kind void;
}
procedure `void` `insert`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.MethodPart` v4 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v5 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.insert:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e87c0.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L3e87c6.  v0:= temp @kind object;
  #L3e87c8.  call temp:= `remove`(v5, v0) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e87ce.  v1:= temp @kind object;
  #L3e87d0.  v1:= (`org.simpleframework.xml.core.MethodPart`) v1 @kind object;
  #L3e87d4.  if v1 == 0 then goto L3e87e6;
  #L3e87d8.  call temp:= `isText`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.isText:(Lorg/simpleframework/xml/core/MethodPart;)Z` @kind direct;
  #L3e87de.  v2:= temp;
  #L3e87e0.  if v2 == 0 then goto L3e87e6;
  #L3e87e4.  v4:= v1 @kind object;
  #L3e87e6.  call temp:= `put`(v5, v0, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e87ec.  return @kind void;
}
procedure `boolean` `isText`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.isText:(Lorg/simpleframework/xml/core/MethodPart;)Z` @AccessFlag PRIVATE {
    temp;

  #L3e84e4.  call temp:= `getAnnotation`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L3e84ea.  v1:= temp @kind object;
  #L3e84ec.  v1:= instanceof @variable v1 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L3e84f0.  if v1 == 0 then goto L3e84f8;
  #L3e84f4.  v1:= 1I;
  #L3e84f6.  return v1;
  #L3e84f8.  v1:= 0I;
  #L3e84fa.  return v1;
}
procedure `void` `process`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e8800.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.factory` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L3e8804.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e880a.  v2:= temp @kind object;
  #L3e880c.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L3e8812.  v3:= temp @kind object;
  #L3e8814.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8818.  if v3 != v4 then goto L3e8826;
  #L3e881c.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8820.  call `process`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8826.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e882a.  if v3 != v4 then goto L3e8838;
  #L3e882e.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8832.  call `process`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8838.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e883c.  if v3 != v4 then goto L3e884a;
  #L3e8840.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8844.  call `process`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e884a.  return @kind void;
}
procedure `void` `process`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e885c.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.factory` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L3e8860.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e8866.  v2:= temp @kind object;
  #L3e8868.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L3e886e.  v3:= temp @kind object;
  #L3e8870.  v0:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8874.  if v3 != v0 then goto L3e8882;
  #L3e8878.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e887c.  call `process`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8882.  v0:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8886.  if v3 != v0 then goto L3e8894;
  #L3e888a.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e888e.  call `process`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8894.  v0:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8898.  if v3 != v0 then goto L3e88a6;
  #L3e889c.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e88a0.  call `process`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e88a6.  return @kind void;
}
procedure `void` `process`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodContact` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodContact;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e88b8.  call temp:= `getRead`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getRead:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e88be.  v0:= temp @kind object;
  #L3e88c0.  call temp:= `getWrite`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getWrite:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e88c6.  v3:= temp @kind object;
  #L3e88c8.  if v3 == 0 then goto L3e88d6;
  #L3e88cc.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e88d0.  call `insert`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.insert:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e88d6.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e88da.  call `insert`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.insert:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e88e0.  return @kind void;
}
procedure `void` `process`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e88f4.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L3e88fa.  v0:= temp @kind object;
  #L3e88fc.  if v0 == 0 then goto L3e8906;
  #L3e8900.  call temp:= `put`(v3, v0, v2) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e8906.  return @kind void;
}
procedure `void` `remove`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e8918.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.factory` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L3e891c.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e8922.  v2:= temp @kind object;
  #L3e8924.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L3e892a.  v3:= temp @kind object;
  #L3e892c.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8930.  if v3 != v4 then goto L3e893e;
  #L3e8934.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8938.  call `remove`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e893e.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8942.  if v3 != v4 then goto L3e8950;
  #L3e8946.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e894a.  call `remove`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8950.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L3e8954.  if v3 != v4 then goto L3e8962;
  #L3e8958.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e895c.  call `remove`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L3e8962.  return @kind void;
}
procedure `void` `remove`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;

  #L3e8974.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L3e897a.  v1:= temp @kind object;
  #L3e897c.  if v1 == 0 then goto L3e8986;
  #L3e8980.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e8986.  return @kind void;
}
procedure `void` `scan`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.scan:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e8998.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Attribute` @kind boolean;
  #L3e899c.  if v0 == 0 then goto L3e89a6;
  #L3e89a0.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89a6.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementUnion` @kind boolean;
  #L3e89aa.  if v0 == 0 then goto L3e89b4;
  #L3e89ae.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89b4.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementListUnion` @kind boolean;
  #L3e89b8.  if v0 == 0 then goto L3e89c2;
  #L3e89bc.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89c2.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMapUnion` @kind boolean;
  #L3e89c6.  if v0 == 0 then goto L3e89d0;
  #L3e89ca.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89d0.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementList` @kind boolean;
  #L3e89d4.  if v0 == 0 then goto L3e89de;
  #L3e89d8.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89de.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementArray` @kind boolean;
  #L3e89e2.  if v0 == 0 then goto L3e89ec;
  #L3e89e6.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89ec.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMap` @kind boolean;
  #L3e89f0.  if v0 == 0 then goto L3e89fa;
  #L3e89f4.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e89fa.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Element` @kind boolean;
  #L3e89fe.  if v0 == 0 then goto L3e8a08;
  #L3e8a02.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e8a08.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Version` @kind boolean;
  #L3e8a0c.  if v0 == 0 then goto L3e8a16;
  #L3e8a10.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e8a16.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L3e8a1a.  if v0 == 0 then goto L3e8a24;
  #L3e8a1e.  call `process`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.process:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e8a24.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Transient` @kind boolean;
  #L3e8a28.  if v0 == 0 then goto L3e8a32;
  #L3e8a2c.  call `remove`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.remove:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L3e8a32.  return @kind void;
}
procedure `void` `scan`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.Detail` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.scan:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8a44.  call temp:= `getOverride`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getOverride:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L3e8a4a.  v0:= temp @kind object;
  #L3e8a4c.  call temp:= `getAccess`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getAccess:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L3e8a52.  v1:= temp @kind object;
  #L3e8a54.  call temp:= `getSuper`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getSuper:()Ljava/lang/Class;` @kind interface;
  #L3e8a5a.  v2:= temp @kind object;
  #L3e8a5c.  if v2 == 0 then goto L3e8a66;
  #L3e8a60.  call `extend`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extend:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L3e8a66.  call `extract`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extract:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L3e8a6c.  call `extract`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.extract:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L3e8a72.  call `build`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.build:()V` @kind direct;
  #L3e8a78.  call `validate`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.validate:()V` @kind direct;
  #L3e8a7e.  return @kind void;
}
procedure `void` `validate`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.validate:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e8a90.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8a94.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3e8a9a.  v0:= temp @kind object;
  #L3e8a9c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8aa2.  v1:= temp;
  #L3e8aa4.  if v1 == 0 then goto L3e8ad0;
  #L3e8aa8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e8aae.  v1:= temp @kind object;
  #L3e8ab0.  v1:= (`java.lang.String`) v1 @kind object;
  #L3e8ab4.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.write` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8ab8.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e8abe.  v2:= temp @kind object;
  #L3e8ac0.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L3e8ac4.  if v2 == 0 then goto L3e8a9c;
  #L3e8ac8.  call `validate`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.validate:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L3e8ace.  goto L3e8a9c;
  #L3e8ad0.  return @kind void;
}
procedure `void` `validate`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodPart` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.validate:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e8ae4.  v0:= v2.`org.simpleframework.xml.core.MethodScanner.read` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L3e8ae8.  call temp:= `take`(v0, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L3e8aee.  v4:= temp @kind object;
  #L3e8af0.  call temp:= `getMethod`(v3) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethod:()Ljava/lang/reflect/Method;` @kind interface;
  #L3e8af6.  v3:= temp @kind object;
  #L3e8af8.  if v4 == 0 then goto L3e8afe;
  #L3e8afc.  return @kind void;
  #L3e8afe.  v4:= new `org.simpleframework.xml.core.MethodException`;
  #L3e8b02.  v0:= 2I;
  #L3e8b04.  v0:= new `java.lang.Object`[v0];
  #L3e8b08.  v1:= 0I;
  #L3e8b0a.  v0[v1]:= v3 @kind object;
  #L3e8b0e.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.detail` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L3e8b12.  v1:= 1I;
  #L3e8b14.  v0[v1]:= v3 @kind object;
  #L3e8b18.  v3:= "No matching get method for %s in %s" @kind object;
  #L3e8b1c.  call `<init>`(v4, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e8b22.  throw v4;
}
