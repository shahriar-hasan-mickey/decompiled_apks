record `org.simpleframework.xml.core.PrimitiveInlineList` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Repeater` @kind interface {
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveInlineList.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.CollectionFactory` `org.simpleframework.xml.core.PrimitiveInlineList.factory` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveInlineList.parent` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveInlineList.root` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveInlineList` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ebe90.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ebe96.  v0:= new `org.simpleframework.xml.core.CollectionFactory`;
  #L3ebe9a.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ebea0.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` := v0 @kind object;
  #L3ebea4.  v3:= new `org.simpleframework.xml.core.Primitive`;
  #L3ebea8.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ebeae.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.root` @type ^`org.simpleframework.xml.core.Primitive` := v3 @kind object;
  #L3ebeb2.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.parent` @type ^`java.lang.String` := v5 @kind object;
  #L3ebeb6.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.entry` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3ebeba.  return @kind void;
}
procedure `boolean` `isOverridden`(`org.simpleframework.xml.core.PrimitiveInlineList` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ebd7c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveInlineList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ebd80.  v1:= v2.`org.simpleframework.xml.core.PrimitiveInlineList.entry` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ebd84.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3ebd8a.  v3:= temp;
  #L3ebd8c.  return v3;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ebe48.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getParent:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebe4e.  v0:= temp @kind object;
  #L3ebe50.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3ebe56.  v1:= temp @kind object;
  #L3ebe58.  if v4 == 0 then goto L3ebe7c;
  #L3ebe5c.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebe60.  call temp:= `read`(v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ebe66.  v4:= temp @kind object;
  #L3ebe68.  if v4 == 0 then goto L3ebe72;
  #L3ebe6c.  call temp:= `add`(v5, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ebe72.  call temp:= `getNext`(v0, v1) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebe78.  v4:= temp @kind object;
  #L3ebe7a.  goto L3ebe58;
  #L3ebe7c.  return v5 @kind object;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object, `org.simpleframework.xml.stream.Mode` v6 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Lorg/simpleframework/xml/stream/Mode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ebf08.  v5:= (`java.util.Collection`) v5 @kind object;
  #L3ebf0c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ebf12.  v5:= temp @kind object;
  #L3ebf14.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ebf1a.  v0:= temp;
  #L3ebf1c.  if v0 == 0 then goto L3ebf56;
  #L3ebf20.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ebf26.  v0:= temp @kind object;
  #L3ebf28.  if v0 == 0 then goto L3ebf14;
  #L3ebf2c.  v1:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.parent` @type ^`java.lang.String` @kind object;
  #L3ebf30.  call temp:= `getChild`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ebf36.  v1:= temp @kind object;
  #L3ebf38.  call temp:= `isOverridden`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L3ebf3e.  v2:= temp;
  #L3ebf40.  if v2 != 0 then goto L3ebf14;
  #L3ebf44.  call `setMode`(v1, v6) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setMode:(Lorg/simpleframework/xml/stream/Mode;)V` @kind interface;
  #L3ebf4a.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebf4e.  call `write`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3ebf54.  goto L3ebf14;
  #L3ebf56.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveInlineList` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ebde8.  v0:= v1.`org.simpleframework.xml.core.PrimitiveInlineList.factory` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L3ebdec.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:()Ljava/lang/Object;` @kind virtual;
  #L3ebdf2.  v0:= temp @kind object;
  #L3ebdf4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L3ebdf8.  if v0 == 0 then goto L3ebe06;
  #L3ebdfc.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @kind direct;
  #L3ebe02.  v2:= temp @kind object;
  #L3ebe04.  return v2 @kind object;
  #L3ebe06.  v2:= 0I;
  #L3ebe08.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveInlineList` v0 @kind this, `org.simpleframework.xml.stream.InputNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L3ebe1c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L3ebe20.  if v2 == 0 then goto L3ebe2e;
  #L3ebe24.  call temp:= `read`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @kind direct;
  #L3ebe2a.  v1:= temp @kind object;
  #L3ebe2c.  return v1 @kind object;
  #L3ebe2e.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ebe34.  v1:= temp @kind object;
  #L3ebe36.  return v1 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ebda0.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getParent:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebda6.  v0:= temp @kind object;
  #L3ebda8.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L3ebdae.  v1:= temp @kind object;
  #L3ebdb0.  if v4 == 0 then goto L3ebdd2;
  #L3ebdb4.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebdb8.  call temp:= `validate`(v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3ebdbe.  v4:= temp;
  #L3ebdc0.  if v4 != 0 then goto L3ebdc8;
  #L3ebdc4.  v4:= 0I;
  #L3ebdc6.  return v4;
  #L3ebdc8.  call temp:= `getNext`(v0, v1) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebdce.  v4:= temp @kind object;
  #L3ebdd0.  goto L3ebdb0;
  #L3ebdd2.  v4:= 1I;
  #L3ebdd4.  return v4;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ebecc.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getParent:()Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ebed2.  v0:= temp @kind object;
  #L3ebed4.  call temp:= `getMode`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L3ebeda.  v1:= temp @kind object;
  #L3ebedc.  call temp:= `isCommitted`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.isCommitted:()Z` @kind interface;
  #L3ebee2.  v2:= temp;
  #L3ebee4.  if v2 != 0 then goto L3ebeee;
  #L3ebee8.  call `remove`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.remove:()V` @kind interface;
  #L3ebeee.  call `write`(v3, v0, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Lorg/simpleframework/xml/stream/Mode;)V` @kind direct;
  #L3ebef4.  return @kind void;
}
