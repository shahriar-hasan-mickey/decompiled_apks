record `org.simpleframework.xml.core.MapFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MapFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e7d08.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3e7d0e.  return @kind void;
}
procedure `boolean` `isMap`(`org.simpleframework.xml.core.MapFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.isMap:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e7b24.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L3e7b28.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3e7b2e.  v2:= temp;
  #L3e7b30.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7b44.  v0:= constclass @type ^`java.util.HashMap` @kind object;
  #L3e7b48.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3e7b4e.  v0:= temp;
  #L3e7b50.  if v0 == 0 then goto L3e7b5a;
  #L3e7b54.  v4:= constclass @type ^`java.util.HashMap` @kind object;
  #L3e7b58.  return v4 @kind object;
  #L3e7b5a.  v0:= constclass @type ^`java.util.TreeMap` @kind object;
  #L3e7b5e.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3e7b64.  v0:= temp;
  #L3e7b66.  if v0 == 0 then goto L3e7b70;
  #L3e7b6a.  v4:= constclass @type ^`java.util.TreeMap` @kind object;
  #L3e7b6e.  return v4 @kind object;
  #L3e7b70.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e7b74.  v1:= 2I;
  #L3e7b76.  v1:= new `java.lang.Object`[v1];
  #L3e7b7a.  v2:= 0I;
  #L3e7b7c.  v1[v2]:= v4 @kind object;
  #L3e7b80.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e7b84.  v2:= 1I;
  #L3e7b86.  v1[v2]:= v4 @kind object;
  #L3e7b8a.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L3e7b8e.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e7b94.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.MapFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e7ba8.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3e7bae.  v0:= temp @kind object;
  #L3e7bb0.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3e7bb6.  v1:= temp;
  #L3e7bb8.  if v1 != 0 then goto L3e7bc6;
  #L3e7bbc.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3e7bc2.  v1:= temp @kind object;
  #L3e7bc4.  goto L3e7bc8;
  #L3e7bc6.  v1:= v0 @kind object;
  #L3e7bc8.  call temp:= `isMap`(v4, v1) @signature `Lorg/simpleframework/xml/core/MapFactory;.isMap:(Ljava/lang/Class;)Z` @kind direct;
  #L3e7bce.  v2:= temp;
  #L3e7bd0.  if v2 == 0 then goto L3e7bde;
  #L3e7bd4.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3e7bda.  v0:= temp @kind object;
  #L3e7bdc.  return v0 @kind object;
  #L3e7bde.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e7be2.  v2:= 2I;
  #L3e7be4.  v2:= new `java.lang.Object`[v2];
  #L3e7be8.  v3:= 0I;
  #L3e7bea.  v2[v3]:= v0 @kind object;
  #L3e7bee.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e7bf2.  v3:= 1I;
  #L3e7bf4.  v2[v3]:= v0 @kind object;
  #L3e7bf8.  v0:= "Invalid map %s for %s" @kind object;
  #L3e7bfc.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e7c02.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7c14.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e7c1a.  v0:= temp @kind object;
  #L3e7c1c.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3e7c22.  v1:= temp;
  #L3e7c24.  if v1 != 0 then goto L3e7c30;
  #L3e7c28.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3e7c2e.  v0:= temp @kind object;
  #L3e7c30.  call temp:= `isMap`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.isMap:(Ljava/lang/Class;)Z` @kind direct;
  #L3e7c36.  v1:= temp;
  #L3e7c38.  if v1 == 0 then goto L3e7c4c;
  #L3e7c3c.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L3e7c40.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e7c44.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L3e7c4a.  return v1 @kind object;
  #L3e7c4c.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e7c50.  v1:= 2I;
  #L3e7c52.  v1:= new `java.lang.Object`[v1];
  #L3e7c56.  v2:= 0I;
  #L3e7c58.  v1[v2]:= v0 @kind object;
  #L3e7c5c.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e7c60.  v2:= 1I;
  #L3e7c62.  v1[v2]:= v0 @kind object;
  #L3e7c66.  v0:= "Invalid map %s for %s" @kind object;
  #L3e7c6a.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e7c70.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e7c84.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L3e7c8a.  v4:= temp @kind object;
  #L3e7c8c.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3e7c92.  v0:= temp @kind object;
  #L3e7c94.  if v4 == 0 then goto L3e7ca2;
  #L3e7c98.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3e7c9e.  v4:= temp @kind object;
  #L3e7ca0.  return v4 @kind object;
  #L3e7ca2.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3e7ca8.  v4:= temp;
  #L3e7caa.  if v4 != 0 then goto L3e7cb6;
  #L3e7cae.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3e7cb4.  v0:= temp @kind object;
  #L3e7cb6.  call temp:= `isMap`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.isMap:(Ljava/lang/Class;)Z` @kind direct;
  #L3e7cbc.  v4:= temp;
  #L3e7cbe.  if v4 == 0 then goto L3e7cd0;
  #L3e7cc2.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e7cc6.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L3e7ccc.  v4:= temp @kind object;
  #L3e7cce.  return v4 @kind object;
  #L3e7cd0.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e7cd4.  v1:= 2I;
  #L3e7cd6.  v1:= new `java.lang.Object`[v1];
  #L3e7cda.  v2:= 0I;
  #L3e7cdc.  v1[v2]:= v0 @kind object;
  #L3e7ce0.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e7ce4.  v2:= 1I;
  #L3e7ce6.  v1[v2]:= v0 @kind object;
  #L3e7cea.  v0:= "Invalid map %s for %s" @kind object;
  #L3e7cee.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e7cf4.  throw v4;
}
