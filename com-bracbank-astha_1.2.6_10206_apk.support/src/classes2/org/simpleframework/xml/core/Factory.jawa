record `org.simpleframework.xml.core.Factory` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Factory.context` @AccessFlag PUBLIC;
  `java.lang.Class` `org.simpleframework.xml.core.Factory.override` @AccessFlag PUBLIC;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.Factory.support` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Factory.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e5548.  v0:= 0I;
  #L3e554a.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L3e5550.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e5564.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e556a.  call temp:= `getSupport`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getSupport:()Lorg/simpleframework/xml/core/Support;` @kind interface;
  #L3e5570.  v0:= temp @kind object;
  #L3e5572.  v1.`org.simpleframework.xml.core.Factory.support` @type ^`org.simpleframework.xml.core.Support` := v0 @kind object;
  #L3e5576.  v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` := v4 @kind object;
  #L3e557a.  v1.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L3e557e.  v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L3e5582.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Type` `getPrimitive`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getPrimitive:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e5454.  call temp:= `getPrimitive`(v3) @signature `Lorg/simpleframework/xml/core/Support;.getPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L3e545a.  v0:= temp @kind object;
  #L3e545c.  if v0 == v3 then goto L3e546c;
  #L3e5460.  v3:= new `org.simpleframework.xml.core.OverrideType`;
  #L3e5464.  call `<init>`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/OverrideType;.<init>:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L3e546a.  return v3 @kind object;
  #L3e546c.  return v2 @kind object;
}
procedure `boolean` `isCompatible`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e533c.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3e5342.  v0:= temp;
  #L3e5344.  if v0 == 0 then goto L3e5350;
  #L3e5348.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3e534e.  v1:= temp @kind object;
  #L3e5350.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3e5356.  v1:= temp;
  #L3e5358.  return v1;
}
procedure `boolean` `isInstantiable`(`java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e536c.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L3e5372.  v1:= temp;
  #L3e5374.  call temp:= `isAbstract`(v1) @signature `Ljava/lang/reflect/Modifier;.isAbstract:(I)Z` @kind static;
  #L3e537a.  v0:= temp;
  #L3e537c.  if v0 == 0 then goto L3e5384;
  #L3e5380.  v1:= 0I;
  #L3e5382.  return v1;
  #L3e5384.  call temp:= `isInterface`(v1) @signature `Ljava/lang/reflect/Modifier;.isInterface:(I)Z` @kind static;
  #L3e538a.  v1:= temp;
  #L3e538c.  v1:= v1 ^~ 1;
  #L3e5390.  return v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getConversion`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e5480.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e5484.  v1:= v2.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e5488.  call temp:= `getOverride`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Context;.getOverride:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L3e548e.  v3:= temp @kind object;
  #L3e5490.  if v3 == 0 then goto L3e54c4;
  #L3e5494.  v0:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L3e5498.  if v0 == 0 then goto L3e54c4;
  #L3e549c.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e54a2.  v0:= temp @kind object;
  #L3e54a4.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L3e54a8.  call temp:= `isCompatible`(v1, v0) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L3e54ae.  v0:= temp;
  #L3e54b0.  if v0 != 0 then goto L3e54c4;
  #L3e54b4.  v0:= new `org.simpleframework.xml.core.OverrideValue`;
  #L3e54b8.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L3e54bc.  call `<init>`(v0, v3, v1) @signature `Lorg/simpleframework/xml/core/OverrideValue;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L3e54c2.  return v0 @kind object;
  #L3e54c4.  return v3 @kind object;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.Factory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e5408.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3e540e.  v0:= temp @kind object;
  #L3e5410.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3e5416.  v1:= temp;
  #L3e5418.  if v1 == 0 then goto L3e5426;
  #L3e541c.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3e5422.  v0:= temp @kind object;
  #L3e5424.  return v0 @kind object;
  #L3e5426.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e542a.  v2:= 1I;
  #L3e542c.  v2:= new `java.lang.Object`[v2];
  #L3e5430.  v3:= 0I;
  #L3e5432.  v2[v3]:= v0 @kind object;
  #L3e5436.  v0:= "Type %s can not be instantiated" @kind object;
  #L3e543a.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e5440.  throw v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getOverride`(`org.simpleframework.xml.core.Factory` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e54d8.  call temp:= `getConversion`(v4, v5) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L3e54de.  v0:= temp @kind object;
  #L3e54e0.  if v0 == 0 then goto L3e5536;
  #L3e54e4.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3e54ea.  v5:= temp @kind object;
  #L3e54ec.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e54f2.  v1:= temp @kind object;
  #L3e54f4.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3e54fa.  v2:= temp @kind object;
  #L3e54fc.  call temp:= `isCompatible`(v2, v1) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L3e5502.  v2:= temp;
  #L3e5504.  if v2 == 0 then goto L3e550a;
  #L3e5508.  goto L3e5536;
  #L3e550a.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3e550e.  v2:= 3I;
  #L3e5510.  v2:= new `java.lang.Object`[v2];
  #L3e5514.  v3:= 0I;
  #L3e5516.  v2[v3]:= v1 @kind object;
  #L3e551a.  v1:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e551e.  v3:= 1I;
  #L3e5520.  v2[v3]:= v1 @kind object;
  #L3e5524.  v1:= 2I;
  #L3e5526.  v2[v1]:= v5 @kind object;
  #L3e552a.  v5:= "Incompatible %s for %s at %s" @kind object;
  #L3e552e.  call `<init>`(v0, v5, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e5534.  throw v0;
  #L3e5536.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.Factory` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e53e0.  v0:= v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L3e53e4.  if v0 == 0 then goto L3e53ea;
  #L3e53e8.  return v0 @kind object;
  #L3e53ea.  v0:= v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e53ee.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e53f4.  v0:= temp @kind object;
  #L3e53f6.  return v0 @kind object;
}
procedure `boolean` `setOverride`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Object` v4 @kind object, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e53a4.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e53aa.  v0:= temp @kind object;
  #L3e53ac.  call temp:= `isPrimitive`(v0) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L3e53b2.  v1:= temp;
  #L3e53b4.  if v1 == 0 then goto L3e53c0;
  #L3e53b8.  call temp:= `getPrimitive`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.getPrimitive:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L3e53be.  v3:= temp @kind object;
  #L3e53c0.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e53c4.  call temp:= `setOverride`(v0, v3, v4, v5) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L3e53ca.  v3:= temp;
  #L3e53cc.  return v3;
}
