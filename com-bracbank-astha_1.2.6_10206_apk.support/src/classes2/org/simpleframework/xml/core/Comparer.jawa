record `org.simpleframework.xml.core.Comparer` @kind class @AccessFlag PUBLIC {
  `java.lang.String`[] `org.simpleframework.xml.core.Comparer.ignore` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@org.simpleframework.xml.core.Comparer.NAME` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.simpleframework.xml.core.Comparer` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ded40.  v0:= "name" @kind object;
  #L3ded44.  temp:= new `java.lang.String`[v0];
  #L3ded4a.  v0:= temp @kind object;
  #L3ded4c.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L3ded52.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Comparer` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:([Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ded64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ded6a.  v0.`org.simpleframework.xml.core.Comparer.ignore` @type ^`java.lang.String`[] := v1 @kind object;
  #L3ded6e.  return @kind void;
}
procedure `boolean` `isIgnore`(`org.simpleframework.xml.core.Comparer` v5 @kind this, `java.lang.reflect.Method` v6 @kind object) @signature `Lorg/simpleframework/xml/core/Comparer;.isIgnore:(Ljava/lang/reflect/Method;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3decf8.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L3decfe.  v6:= temp @kind object;
  #L3ded00.  v0:= v5.`org.simpleframework.xml.core.Comparer.ignore` @type ^`java.lang.String`[] @kind object;
  #L3ded04.  v1:= 0I;
  #L3ded06.  if v0 == 0 then goto L3ded2c;
  #L3ded0a.  v2:= length @variable v0;
  #L3ded0c.  v3:= 0I;
  #L3ded0e.  if v3 >= v2 then goto L3ded2c;
  #L3ded12.  v4:= v0[v3] @kind object;
  #L3ded16.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ded1c.  v4:= temp;
  #L3ded1e.  if v4 == 0 then goto L3ded26;
  #L3ded22.  v6:= 1I;
  #L3ded24.  return v6;
  #L3ded26.  v3:= v3 + 1;
  #L3ded2a.  goto L3ded0e;
  #L3ded2c.  return v1;
}
procedure `boolean` `equals`(`org.simpleframework.xml.core.Comparer` v7 @kind this, `java.lang.annotation.Annotation` v8 @kind object, `java.lang.annotation.Annotation` v9 @kind object) @signature `Lorg/simpleframework/xml/core/Comparer;.equals:(Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dec78.  call temp:= `annotationType`(v8) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L3dec7e.  v0:= temp @kind object;
  #L3dec80.  call temp:= `annotationType`(v9) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L3dec86.  v1:= temp @kind object;
  #L3dec88.  call temp:= `getDeclaredMethods`(v0) @signature `Ljava/lang/Class;.getDeclaredMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L3dec8e.  v2:= temp @kind object;
  #L3dec90.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dec96.  v0:= temp;
  #L3dec98.  v1:= 0I;
  #L3dec9a.  if v0 == 0 then goto L3dece6;
  #L3dec9e.  v0:= length @variable v2;
  #L3deca0.  v3:= 0I;
  #L3deca2.  if v3 >= v0 then goto L3dece2;
  #L3deca6.  v4:= v2[v3] @kind object;
  #L3decaa.  call temp:= `isIgnore`(v7, v4) @signature `Lorg/simpleframework/xml/core/Comparer;.isIgnore:(Ljava/lang/reflect/Method;)Z` @kind direct;
  #L3decb0.  v5:= temp;
  #L3decb2.  if v5 != 0 then goto L3decdc;
  #L3decb6.  v5:= new `java.lang.Object`[v1];
  #L3decba.  call temp:= `invoke`(v4, v8, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3decc0.  v5:= temp @kind object;
  #L3decc2.  v6:= new `java.lang.Object`[v1];
  #L3decc6.  call temp:= `invoke`(v4, v9, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3deccc.  v4:= temp @kind object;
  #L3decce.  call temp:= `equals`(v5, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3decd4.  v4:= temp;
  #L3decd6.  if v4 != 0 then goto L3decdc;
  #L3decda.  return v1;
  #L3decdc.  v3:= v3 + 1;
  #L3dece0.  goto L3deca2;
  #L3dece2.  v8:= 1I;
  #L3dece4.  return v8;
  #L3dece6.  return v1;
}
