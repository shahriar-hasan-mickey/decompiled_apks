record `org.simpleframework.xml.core.PrimitiveArray` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.ArrayFactory` `org.simpleframework.xml.core.PrimitiveArray.factory` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveArray.parent` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveArray.root` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ebbf4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ebbfa.  v0:= new `org.simpleframework.xml.core.ArrayFactory`;
  #L3ebbfe.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ebc04.  v1.`org.simpleframework.xml.core.PrimitiveArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` := v0 @kind object;
  #L3ebc08.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L3ebc0c.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ebc12.  v1.`org.simpleframework.xml.core.PrimitiveArray.root` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L3ebc16.  v1.`org.simpleframework.xml.core.PrimitiveArray.parent` @type ^`java.lang.String` := v5 @kind object;
  #L3ebc1a.  v1.`org.simpleframework.xml.core.PrimitiveArray.entry` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3ebc1e.  v1.`org.simpleframework.xml.core.PrimitiveArray.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L3ebc22.  return @kind void;
}
procedure `boolean` `isOverridden`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ebaac.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L3ebab0.  v1:= v2.`org.simpleframework.xml.core.PrimitiveArray.entry` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ebab4.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3ebaba.  v3:= temp;
  #L3ebabc.  return v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ebb18.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebb1e.  v3:= temp @kind object;
  #L3ebb20.  if v3 != 0 then goto L3ebb28;
  #L3ebb24.  v2:= 1I;
  #L3ebb26.  return v2;
  #L3ebb28.  v0:= v1.`org.simpleframework.xml.core.PrimitiveArray.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebb2c.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3ebb32.  goto L3ebb18;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveArray` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @AccessFlag PRIVATE {
    temp;

  #L3ebc74.  call temp:= `get`(v2, v3) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L3ebc7a.  v2:= temp @kind object;
  #L3ebc7c.  if v2 == 0 then goto L3ebc96;
  #L3ebc80.  call temp:= `isOverridden`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L3ebc86.  v3:= temp;
  #L3ebc88.  if v3 != 0 then goto L3ebc96;
  #L3ebc8c.  v3:= v0.`org.simpleframework.xml.core.PrimitiveArray.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebc90.  call `write`(v3, v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3ebc96.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ebb44.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L3ebb48.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ebb4e.  v0:= temp @kind object;
  #L3ebb50.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L3ebb56.  v1:= temp @kind object;
  #L3ebb58.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ebb5e.  v0:= temp;
  #L3ebb60.  if v0 != 0 then goto L3ebb6e;
  #L3ebb64.  call temp:= `read`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3ebb6a.  v3:= temp @kind object;
  #L3ebb6c.  return v3 @kind object;
  #L3ebb6e.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v5 @kind this, `org.simpleframework.xml.stream.InputNode` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ebb80.  call temp:= `getLength`(v7) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3ebb86.  v0:= temp;
  #L3ebb88.  v1:= 0I;
  #L3ebb8a.  v2:= 0I;
  #L3ebb8c.  call temp:= `getPosition`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3ebb92.  v3:= temp @kind object;
  #L3ebb94.  call temp:= `getNext`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebb9a.  v4:= temp @kind object;
  #L3ebb9c.  if v4 != 0 then goto L3ebba2;
  #L3ebba0.  return v7 @kind object;
  #L3ebba2.  if v2 >= v0 then goto L3ebbbe;
  #L3ebba6.  v3:= v5.`org.simpleframework.xml.core.PrimitiveArray.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ebbaa.  call temp:= `read`(v3, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ebbb0.  v3:= temp @kind object;
  #L3ebbb2.  call `set`(v7, v2, v3) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L3ebbb8.  v2:= v2 + 1;
  #L3ebbbc.  goto L3ebb8c;
  #L3ebbbe.  v6:= new `org.simpleframework.xml.core.ElementException`;
  #L3ebbc2.  v7:= 2I;
  #L3ebbc4.  v7:= new `java.lang.Object`[v7];
  #L3ebbc8.  v0:= v5.`org.simpleframework.xml.core.PrimitiveArray.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ebbcc.  v7[v1]:= v0 @kind object;
  #L3ebbd0.  v0:= 1I;
  #L3ebbd2.  v7[v0]:= v3 @kind object;
  #L3ebbd6.  v0:= "Array length missing or incorrect for %s at %s" @kind object;
  #L3ebbda.  call `<init>`(v6, v0, v7) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3ebbe0.  throw v6;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ebad0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L3ebad4.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3ebada.  v0:= temp @kind object;
  #L3ebadc.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3ebae2.  v1:= temp;
  #L3ebae4.  if v1 != 0 then goto L3ebb02;
  #L3ebae8.  v1:= 0I;
  #L3ebaea.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ebaf0.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ebaf6.  v0:= temp @kind object;
  #L3ebaf8.  call temp:= `validate`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L3ebafe.  v3:= temp;
  #L3ebb00.  return v3;
  #L3ebb02.  v3:= 1I;
  #L3ebb04.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveArray` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ebc34.  call temp:= `getLength`(v5) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3ebc3a.  v0:= temp;
  #L3ebc3c.  v1:= 0I;
  #L3ebc3e.  if v1 >= v0 then goto L3ebc60;
  #L3ebc42.  v2:= v3.`org.simpleframework.xml.core.PrimitiveArray.parent` @type ^`java.lang.String` @kind object;
  #L3ebc46.  call temp:= `getChild`(v4, v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ebc4c.  v2:= temp @kind object;
  #L3ebc4e.  if v2 != 0 then goto L3ebc54;
  #L3ebc52.  goto L3ebc60;
  #L3ebc54.  call `write`(v3, v2, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @kind direct;
  #L3ebc5a.  v1:= v1 + 1;
  #L3ebc5e.  goto L3ebc3e;
  #L3ebc60.  return @kind void;
}
