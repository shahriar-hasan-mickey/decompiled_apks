record `org.simpleframework.xml.core.Template` @kind class @AccessFlag PUBLIC {
  `char`[] `org.simpleframework.xml.core.Template.buf` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.Template.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.Template.count` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3efefc.  v0:= 16I;
  #L3eff00.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @kind direct;
  #L3eff06.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3eff18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eff1e.  v1:= new `char`[v1];
  #L3eff22.  v0.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v1 @kind object;
  #L3eff26.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v3 @kind this, `char` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eff38.  v0:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3eff3c.  v0:= v0 + 1;
  #L3eff40.  call `ensureCapacity`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L3eff46.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3eff4a.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3eff4e.  v2:= v1 + 1;
  #L3eff52.  v3.`org.simpleframework.xml.core.Template.count` @type ^`int` := v2;
  #L3eff56.  v0[v1]:= v4 @kind char;
  #L3eff5a.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3effa4.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3effa8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3effae.  v1:= temp;
  #L3effb0.  v0:= v0 + v1 @kind int;
  #L3effb2.  call `ensureCapacity`(v4, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L3effb8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3effbe.  v0:= temp;
  #L3effc0.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3effc4.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3effc8.  v3:= 0I;
  #L3effca.  call `getChars`(v5, v3, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L3effd0.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3effd4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3effda.  v5:= temp;
  #L3effdc.  v0:= v0 + v5 @kind int;
  #L3effde.  v4.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L3effe2.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3efff4.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3efff8.  v0:= v0 + v5 @kind int;
  #L3efffa.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L3f0000.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3f0004.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3f0008.  call `getChars`(v3, v4, v5, v0, v1) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L3f000e.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3f0012.  v3:= v3 + v5 @kind int;
  #L3f0014.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L3f0018.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `org.simpleframework.xml.core.Template` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f002c.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3f0030.  v3:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3f0034.  v1:= 0I;
  #L3f0036.  call `append`(v2, v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L3f003c.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;II)V` @AccessFlag PUBLIC {
    temp;

  #L3f0050.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3f0054.  call `append`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L3f005a.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `char`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eff6c.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3eff70.  v0:= v0 + v5 @kind int;
  #L3eff72.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L3eff78.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3eff7c.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3eff80.  call `arraycopy`(v3, v4, v0, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3eff86.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3eff8a.  v3:= v3 + v5 @kind int;
  #L3eff8c.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L3eff90.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f006c.  v0:= 0I;
  #L3f006e.  v1.`org.simpleframework.xml.core.Template.cache` @type ^`java.lang.String` := v0 @kind object;
  #L3f0072.  v0:= 0I;
  #L3f0074.  v1.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L3f0078.  return @kind void;
}
procedure `void` `ensureCapacity`(`org.simpleframework.xml.core.Template` v3 @kind this, `int` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f008c.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3f0090.  v1:= length @variable v0;
  #L3f0092.  if v1 >= v4 then goto L3f00bc;
  #L3f0096.  v0:= length @variable v0;
  #L3f0098.  v0:= v0 * 2;
  #L3f009c.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3f00a2.  v4:= temp;
  #L3f00a4.  v4:= new `char`[v4];
  #L3f00a8.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3f00ac.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3f00b0.  v2:= 0I;
  #L3f00b2.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3f00b8.  v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v4 @kind object;
  #L3f00bc.  return @kind void;
}
procedure `int` `length`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3efebc.  v0:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3efec0.  return v0;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.Template` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3efed4.  v0:= new `java.lang.String`;
  #L3efed8.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L3efedc.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L3efee0.  v3:= 0I;
  #L3efee2.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L3efee8.  return v0 @kind object;
}
