record `org.simpleframework.xml.core.ArrayFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.ArrayFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3dd42c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3dd432.  return @kind void;
}
procedure `java.lang.Class` `getComponentType`(`org.simpleframework.xml.core.ArrayFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getComponentType:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd2f4.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3dd2fa.  v0:= temp @kind object;
  #L3dd2fc.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3dd302.  v1:= temp;
  #L3dd304.  if v1 == 0 then goto L3dd312;
  #L3dd308.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3dd30e.  v0:= temp @kind object;
  #L3dd310.  return v0 @kind object;
  #L3dd312.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3dd316.  v2:= 2I;
  #L3dd318.  v2:= new `java.lang.Object`[v2];
  #L3dd31c.  v3:= 0I;
  #L3dd31e.  v2[v3]:= v0 @kind object;
  #L3dd322.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3dd326.  v3:= 1I;
  #L3dd328.  v2[v3]:= v0 @kind object;
  #L3dd32c.  v0:= "The %s not an array for %s" @kind object;
  #L3dd330.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dd336.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.ArrayFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dd374.  call temp:= `getComponentType`(v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getComponentType:()Ljava/lang/Class;` @kind direct;
  #L3dd37a.  v0:= temp @kind object;
  #L3dd37c.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3dd382.  v1:= temp;
  #L3dd384.  if v1 == 0 then goto L3dd394;
  #L3dd388.  v5:= new `org.simpleframework.xml.core.ArrayInstance`;
  #L3dd38c.  call `<init>`(v5, v4) @signature `Lorg/simpleframework/xml/core/ArrayInstance;.<init>:(Lorg/simpleframework/xml/strategy/Value;)V` @kind direct;
  #L3dd392.  return v5 @kind object;
  #L3dd394.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3dd398.  v1:= 3I;
  #L3dd39a.  v1:= new `java.lang.Object`[v1];
  #L3dd39e.  v2:= 0I;
  #L3dd3a0.  v1[v2]:= v0 @kind object;
  #L3dd3a4.  v0:= 1I;
  #L3dd3a6.  v1[v0]:= v5 @kind object;
  #L3dd3aa.  v5:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3dd3ae.  v0:= 2I;
  #L3dd3b0.  v1[v0]:= v5 @kind object;
  #L3dd3b4.  v5:= "Array of type %s cannot hold %s for %s" @kind object;
  #L3dd3b8.  call `<init>`(v4, v5, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dd3be.  throw v4;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.ArrayFactory` v2 @kind this) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd348.  call temp:= `getComponentType`(v2) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getComponentType:()Ljava/lang/Class;` @kind direct;
  #L3dd34e.  v0:= temp @kind object;
  #L3dd350.  if v0 == 0 then goto L3dd360;
  #L3dd354.  v1:= 0I;
  #L3dd356.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3dd35c.  v0:= temp @kind object;
  #L3dd35e.  return v0 @kind object;
  #L3dd360.  v0:= 0I;
  #L3dd362.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.ArrayFactory` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd3d0.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3dd3d6.  v0:= temp @kind object;
  #L3dd3d8.  call temp:= `getOverride`(v4, v5) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L3dd3de.  v5:= temp @kind object;
  #L3dd3e0.  if v5 == 0 then goto L3dd3f6;
  #L3dd3e4.  call temp:= `getType`(v5) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3dd3ea.  v0:= temp @kind object;
  #L3dd3ec.  call temp:= `getInstance`(v4, v5, v0) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind direct;
  #L3dd3f2.  v5:= temp @kind object;
  #L3dd3f4.  return v5 @kind object;
  #L3dd3f6.  v5:= new `org.simpleframework.xml.core.ElementException`;
  #L3dd3fa.  v1:= 2I;
  #L3dd3fc.  v1:= new `java.lang.Object`[v1];
  #L3dd400.  v2:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3dd404.  v3:= 0I;
  #L3dd406.  v1[v3]:= v2 @kind object;
  #L3dd40a.  v2:= 1I;
  #L3dd40c.  v1[v2]:= v0 @kind object;
  #L3dd410.  v0:= "Array length required for %s at %s" @kind object;
  #L3dd414.  call `<init>`(v5, v0, v1) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dd41a.  throw v5;
}
