record `org.simpleframework.xml.core.FieldScanner$FieldKey` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `org.simpleframework.xml.core.FieldScanner$FieldKey.name` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.FieldScanner$FieldKey.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.FieldScanner$FieldKey` v1 @kind this, `java.lang.reflect.Field` v2 @kind object) @signature `Lorg/simpleframework/xml/core/FieldScanner$FieldKey;.<init>:(Ljava/lang/reflect/Field;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e5914.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e591a.  call temp:= `getDeclaringClass`(v2) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L3e5920.  v0:= temp @kind object;
  #L3e5922.  v1.`org.simpleframework.xml.core.FieldScanner$FieldKey.type` @type ^`java.lang.Class` := v0 @kind object;
  #L3e5926.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L3e592c.  v2:= temp @kind object;
  #L3e592e.  v1.`org.simpleframework.xml.core.FieldScanner$FieldKey.name` @type ^`java.lang.String` := v2 @kind object;
  #L3e5932.  return @kind void;
}
procedure `boolean` `equals`(`org.simpleframework.xml.core.FieldScanner$FieldKey` v2 @kind this, `org.simpleframework.xml.core.FieldScanner$FieldKey` v3 @kind object) @signature `Lorg/simpleframework/xml/core/FieldScanner$FieldKey;.equals:(Lorg/simpleframework/xml/core/FieldScanner$FieldKey;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e58c0.  v0:= v3.`org.simpleframework.xml.core.FieldScanner$FieldKey.type` @type ^`java.lang.Class` @kind object;
  #L3e58c4.  v1:= v2.`org.simpleframework.xml.core.FieldScanner$FieldKey.type` @type ^`java.lang.Class` @kind object;
  #L3e58c8.  if v0 == v1 then goto L3e58d0;
  #L3e58cc.  v3:= 0I;
  #L3e58ce.  return v3;
  #L3e58d0.  v3:= v3.`org.simpleframework.xml.core.FieldScanner$FieldKey.name` @type ^`java.lang.String` @kind object;
  #L3e58d4.  v0:= v2.`org.simpleframework.xml.core.FieldScanner$FieldKey.name` @type ^`java.lang.String` @kind object;
  #L3e58d8.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e58de.  v3:= temp;
  #L3e58e0.  return v3;
}
procedure `boolean` `equals`(`org.simpleframework.xml.core.FieldScanner$FieldKey` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/FieldScanner$FieldKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e5894.  v0:= instanceof @variable v2 @type ^`org.simpleframework.xml.core.FieldScanner$FieldKey` @kind boolean;
  #L3e5898.  if v0 == 0 then goto L3e58aa;
  #L3e589c.  v2:= (`org.simpleframework.xml.core.FieldScanner$FieldKey`) v2 @kind object;
  #L3e58a0.  call temp:= `equals`(v1, v2) @signature `Lorg/simpleframework/xml/core/FieldScanner$FieldKey;.equals:(Lorg/simpleframework/xml/core/FieldScanner$FieldKey;)Z` @kind direct;
  #L3e58a6.  v2:= temp;
  #L3e58a8.  return v2;
  #L3e58aa.  v2:= 0I;
  #L3e58ac.  return v2;
}
procedure `int` `hashCode`(`org.simpleframework.xml.core.FieldScanner$FieldKey` v1 @kind this) @signature `Lorg/simpleframework/xml/core/FieldScanner$FieldKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e58f4.  v0:= v1.`org.simpleframework.xml.core.FieldScanner$FieldKey.name` @type ^`java.lang.String` @kind object;
  #L3e58f8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3e58fe.  v0:= temp;
  #L3e5900.  return v0;
}
