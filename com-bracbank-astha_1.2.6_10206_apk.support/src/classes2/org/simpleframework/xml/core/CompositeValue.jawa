record `org.simpleframework.xml.core.CompositeValue` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.CompositeValue.context` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.CompositeValue.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Traverser` `org.simpleframework.xml.core.CompositeValue.root` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.CompositeValue.style` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeValue.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CompositeValue` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e04f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e04fa.  v0:= new `org.simpleframework.xml.core.Traverser`;
  #L3e04fe.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L3e0504.  v1.`org.simpleframework.xml.core.CompositeValue.root` @type ^`org.simpleframework.xml.core.Traverser` := v0 @kind object;
  #L3e0508.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L3e050e.  v0:= temp @kind object;
  #L3e0510.  v1.`org.simpleframework.xml.core.CompositeValue.style` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L3e0514.  v1.`org.simpleframework.xml.core.CompositeValue.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L3e0518.  v1.`org.simpleframework.xml.core.CompositeValue.entry` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L3e051c.  v1.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3e0520.  return @kind void;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e0408.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3e040c.  call temp:= `getElement`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3e0412.  v4:= temp @kind object;
  #L3e0414.  call temp:= `getNext`(v3, v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3e041a.  v3:= temp @kind object;
  #L3e041c.  v4:= v2.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e0420.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e0426.  v4:= temp @kind object;
  #L3e0428.  v0:= 1I;
  #L3e042a.  if v3 != 0 then goto L3e0430;
  #L3e042e.  return v0;
  #L3e0430.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L3e0436.  v1:= temp;
  #L3e0438.  if v1 == 0 then goto L3e043e;
  #L3e043c.  return v0;
  #L3e043e.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3e0442.  call temp:= `validate`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind virtual;
  #L3e0448.  v3:= temp;
  #L3e044a.  return v3;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeValue` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e045c.  call temp:= `getNext`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3e0462.  v4:= temp @kind object;
  #L3e0464.  v0:= v3.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e0468.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e046e.  v0:= temp @kind object;
  #L3e0470.  v1:= 0I;
  #L3e0472.  if v4 != 0 then goto L3e0478;
  #L3e0476.  return v1 @kind object;
  #L3e0478.  call temp:= `isEmpty`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L3e047e.  v2:= temp;
  #L3e0480.  if v2 == 0 then goto L3e0486;
  #L3e0484.  return v1 @kind object;
  #L3e0486.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3e048a.  call temp:= `read`(v1, v4, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L3e0490.  v4:= temp @kind object;
  #L3e0492.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e04a4.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e04a8.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e04ae.  v0:= temp @kind object;
  #L3e04b0.  if v4 != 0 then goto L3e04be;
  #L3e04b4.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3e04ba.  v3:= temp @kind object;
  #L3e04bc.  return v3 @kind object;
  #L3e04be.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3e04c2.  v4:= 2I;
  #L3e04c4.  v4:= new `java.lang.Object`[v4];
  #L3e04c8.  v1:= 0I;
  #L3e04ca.  v4[v1]:= v0 @kind object;
  #L3e04ce.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3e04d2.  v1:= 1I;
  #L3e04d4.  v4[v1]:= v0 @kind object;
  #L3e04d8.  v0:= "Can not read value of %s for %s" @kind object;
  #L3e04dc.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3e04e2.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e03c4.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e03c8.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e03ce.  v0:= temp @kind object;
  #L3e03d0.  v1:= v2.`org.simpleframework.xml.core.CompositeValue.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3e03d4.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L3e03da.  v1:= temp @kind object;
  #L3e03dc.  if v1 != 0 then goto L3e03ec;
  #L3e03e0.  v1:= v2.`org.simpleframework.xml.core.CompositeValue.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e03e4.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3e03ea.  v1:= temp @kind object;
  #L3e03ec.  call temp:= `validate`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/CompositeValue;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L3e03f2.  v3:= temp;
  #L3e03f4.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.CompositeValue` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e0534.  v0:= v3.`org.simpleframework.xml.core.CompositeValue.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3e0538.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3e053e.  v0:= temp @kind object;
  #L3e0540.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3e0544.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L3e054a.  v1:= temp @kind object;
  #L3e054c.  if v1 != 0 then goto L3e055c;
  #L3e0550.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3e0554.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3e055a.  v1:= temp @kind object;
  #L3e055c.  v2:= v3.`org.simpleframework.xml.core.CompositeValue.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3e0560.  call temp:= `getElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3e0566.  v1:= temp @kind object;
  #L3e0568.  v2:= v3.`org.simpleframework.xml.core.CompositeValue.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3e056c.  call `write`(v2, v4, v5, v0, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L3e0572.  return @kind void;
}
