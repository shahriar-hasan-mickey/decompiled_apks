record `org.simpleframework.xml.core.CollectionFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CollectionFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3dea64.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3dea6a.  return @kind void;
}
procedure `boolean` `isCollection`(`org.simpleframework.xml.core.CollectionFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.isCollection:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de86c.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L3de870.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3de876.  v2:= temp;
  #L3de878.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de88c.  v0:= constclass @type ^`java.util.ArrayList` @kind object;
  #L3de890.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3de896.  v0:= temp;
  #L3de898.  if v0 == 0 then goto L3de8a2;
  #L3de89c.  v4:= constclass @type ^`java.util.ArrayList` @kind object;
  #L3de8a0.  return v4 @kind object;
  #L3de8a2.  v0:= constclass @type ^`java.util.HashSet` @kind object;
  #L3de8a6.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3de8ac.  v0:= temp;
  #L3de8ae.  if v0 == 0 then goto L3de8b8;
  #L3de8b2.  v4:= constclass @type ^`java.util.HashSet` @kind object;
  #L3de8b6.  return v4 @kind object;
  #L3de8b8.  v0:= constclass @type ^`java.util.TreeSet` @kind object;
  #L3de8bc.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3de8c2.  v0:= temp;
  #L3de8c4.  if v0 == 0 then goto L3de8ce;
  #L3de8c8.  v4:= constclass @type ^`java.util.TreeSet` @kind object;
  #L3de8cc.  return v4 @kind object;
  #L3de8ce.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3de8d2.  v1:= 2I;
  #L3de8d4.  v1:= new `java.lang.Object`[v1];
  #L3de8d8.  v2:= 0I;
  #L3de8da.  v1[v2]:= v4 @kind object;
  #L3de8de.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3de8e2.  v2:= 1I;
  #L3de8e4.  v1[v2]:= v4 @kind object;
  #L3de8e8.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L3de8ec.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3de8f2.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3de904.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3de90a.  v0:= temp @kind object;
  #L3de90c.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3de912.  v1:= temp;
  #L3de914.  if v1 != 0 then goto L3de922;
  #L3de918.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3de91e.  v1:= temp @kind object;
  #L3de920.  goto L3de924;
  #L3de922.  v1:= v0 @kind object;
  #L3de924.  call temp:= `isCollection`(v4, v1) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.isCollection:(Ljava/lang/Class;)Z` @kind direct;
  #L3de92a.  v2:= temp;
  #L3de92c.  if v2 == 0 then goto L3de93a;
  #L3de930.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3de936.  v0:= temp @kind object;
  #L3de938.  return v0 @kind object;
  #L3de93a.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3de93e.  v2:= 2I;
  #L3de940.  v2:= new `java.lang.Object`[v2];
  #L3de944.  v3:= 0I;
  #L3de946.  v2[v3]:= v0 @kind object;
  #L3de94a.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3de94e.  v3:= 1I;
  #L3de950.  v2[v3]:= v0 @kind object;
  #L3de954.  v0:= "Invalid collection %s for %s" @kind object;
  #L3de958.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3de95e.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de970.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L3de976.  v0:= temp @kind object;
  #L3de978.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3de97e.  v1:= temp;
  #L3de980.  if v1 != 0 then goto L3de98c;
  #L3de984.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3de98a.  v0:= temp @kind object;
  #L3de98c.  call temp:= `isCollection`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.isCollection:(Ljava/lang/Class;)Z` @kind direct;
  #L3de992.  v1:= temp;
  #L3de994.  if v1 == 0 then goto L3de9a8;
  #L3de998.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L3de99c.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3de9a0.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L3de9a6.  return v1 @kind object;
  #L3de9a8.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3de9ac.  v1:= 2I;
  #L3de9ae.  v1:= new `java.lang.Object`[v1];
  #L3de9b2.  v2:= 0I;
  #L3de9b4.  v1[v2]:= v0 @kind object;
  #L3de9b8.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3de9bc.  v2:= 1I;
  #L3de9be.  v1[v2]:= v0 @kind object;
  #L3de9c2.  v0:= "Invalid collection %s for %s" @kind object;
  #L3de9c6.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3de9cc.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de9e0.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L3de9e6.  v4:= temp @kind object;
  #L3de9e8.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L3de9ee.  v0:= temp @kind object;
  #L3de9f0.  if v4 == 0 then goto L3de9fe;
  #L3de9f4.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3de9fa.  v4:= temp @kind object;
  #L3de9fc.  return v4 @kind object;
  #L3de9fe.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L3dea04.  v4:= temp;
  #L3dea06.  if v4 != 0 then goto L3dea12;
  #L3dea0a.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L3dea10.  v0:= temp @kind object;
  #L3dea12.  call temp:= `isCollection`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.isCollection:(Ljava/lang/Class;)Z` @kind direct;
  #L3dea18.  v4:= temp;
  #L3dea1a.  if v4 == 0 then goto L3dea2c;
  #L3dea1e.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3dea22.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L3dea28.  v4:= temp @kind object;
  #L3dea2a.  return v4 @kind object;
  #L3dea2c.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L3dea30.  v1:= 2I;
  #L3dea32.  v1:= new `java.lang.Object`[v1];
  #L3dea36.  v2:= 0I;
  #L3dea38.  v1[v2]:= v0 @kind object;
  #L3dea3c.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3dea40.  v2:= 1I;
  #L3dea42.  v1[v2]:= v0 @kind object;
  #L3dea46.  v0:= "Invalid collection %s for %s" @kind object;
  #L3dea4a.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dea50.  throw v4;
}
