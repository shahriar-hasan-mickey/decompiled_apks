record `org.simpleframework.xml.core.AnnotationHandler` @kind class @AccessFlag PUBLIC extends `java.lang.reflect.InvocationHandler` @kind interface {
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.attribute` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Comparer` `org.simpleframework.xml.core.AnnotationHandler.comparer` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.required` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.AnnotationHandler.type` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@org.simpleframework.xml.core.AnnotationHandler.ATTRIBUTE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.core.AnnotationHandler.CLASS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.core.AnnotationHandler.EQUAL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.core.AnnotationHandler.REQUIRED` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.simpleframework.xml.core.AnnotationHandler.STRING` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dd1d4.  v0:= 1I;
  #L3dd1d6.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @kind direct;
  #L3dd1dc.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dd1f0.  v0:= 0I;
  #L3dd1f2.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @kind direct;
  #L3dd1f8.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dd20c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dd212.  v0:= new `org.simpleframework.xml.core.Comparer`;
  #L3dd216.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:()V` @kind direct;
  #L3dd21c.  v1.`org.simpleframework.xml.core.AnnotationHandler.comparer` @type ^`org.simpleframework.xml.core.Comparer` := v0 @kind object;
  #L3dd220.  v1.`org.simpleframework.xml.core.AnnotationHandler.attribute` @type ^`boolean` := v4 @kind boolean;
  #L3dd224.  v1.`org.simpleframework.xml.core.AnnotationHandler.required` @type ^`boolean` := v3 @kind boolean;
  #L3dd228.  v1.`org.simpleframework.xml.core.AnnotationHandler.type` @type ^`java.lang.Class` := v2 @kind object;
  #L3dd22c.  return @kind void;
}
procedure `void` `attributes`(`org.simpleframework.xml.core.AnnotationHandler` v5 @kind this, `java.lang.StringBuilder` v6 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.attributes:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dd240.  v0:= v5.`org.simpleframework.xml.core.AnnotationHandler.type` @type ^`java.lang.Class` @kind object;
  #L3dd244.  call temp:= `getDeclaredMethods`(v0) @signature `Ljava/lang/Class;.getDeclaredMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L3dd24a.  v0:= temp @kind object;
  #L3dd24c.  v1:= 0I;
  #L3dd24e.  v2:= length @variable v0;
  #L3dd250.  if v1 >= v2 then goto L3dd2a0;
  #L3dd254.  v2:= v0[v1] @kind object;
  #L3dd258.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L3dd25e.  v2:= temp @kind object;
  #L3dd260.  v3:= v0[v1] @kind object;
  #L3dd264.  call temp:= `value`(v5, v3) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.value:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @kind direct;
  #L3dd26a.  v3:= temp @kind object;
  #L3dd26c.  if v1 <= 0 then goto L3dd284;
  #L3dd270.  v4:= 44I;
  #L3dd274.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd27a.  v4:= 32I;
  #L3dd27e.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd284.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd28a.  v2:= 61I;
  #L3dd28e.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd294.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd29a.  v1:= v1 + 1;
  #L3dd29e.  goto L3dd24e;
  #L3dd2a0.  v0:= 41I;
  #L3dd2a4.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd2aa.  return @kind void;
}
procedure `boolean` `equals`(`org.simpleframework.xml.core.AnnotationHandler` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.equals:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dd02c.  v4:= (`java.lang.annotation.Annotation`) v4 @kind object;
  #L3dd030.  v0:= 0I;
  #L3dd032.  v5:= v5[v0] @kind object;
  #L3dd036.  v5:= (`java.lang.annotation.Annotation`) v5 @kind object;
  #L3dd03a.  call temp:= `annotationType`(v4) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L3dd040.  v1:= temp @kind object;
  #L3dd042.  call temp:= `annotationType`(v5) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L3dd048.  v2:= temp @kind object;
  #L3dd04a.  if v1 != v2 then goto L3dd05c;
  #L3dd04e.  v0:= v3.`org.simpleframework.xml.core.AnnotationHandler.comparer` @type ^`org.simpleframework.xml.core.Comparer` @kind object;
  #L3dd052.  call temp:= `equals`(v0, v4, v5) @signature `Lorg/simpleframework/xml/core/Comparer;.equals:(Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Z` @kind virtual;
  #L3dd058.  v4:= temp;
  #L3dd05a.  return v4;
  #L3dd05c.  v1:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3dd060.  v2:= 2I;
  #L3dd062.  v2:= new `java.lang.Object`[v2];
  #L3dd066.  v2[v0]:= v4 @kind object;
  #L3dd06a.  v4:= 1I;
  #L3dd06c.  v2[v4]:= v5 @kind object;
  #L3dd070.  v4:= "Annotation %s is not the same as %s" @kind object;
  #L3dd074.  call `<init>`(v1, v4, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3dd07a.  throw v1;
}
procedure `void` `name`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.StringBuilder` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.name:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3dd2bc.  v0:= v2.`org.simpleframework.xml.core.AnnotationHandler.type` @type ^`java.lang.Class` @kind object;
  #L3dd2c0.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3dd2c6.  v0:= temp @kind object;
  #L3dd2c8.  v1:= 64I;
  #L3dd2cc.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd2d2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd2d8.  v0:= 40I;
  #L3dd2dc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd2e2.  return @kind void;
}
procedure `java.lang.Object` `value`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.value:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3dd13c.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L3dd142.  v0:= temp @kind object;
  #L3dd144.  v1:= "required" @kind object;
  #L3dd148.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd14e.  v1:= temp;
  #L3dd150.  if v1 == 0 then goto L3dd162;
  #L3dd154.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.required` @type ^`boolean` @kind boolean;
  #L3dd158.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3dd15e.  v3:= temp @kind object;
  #L3dd160.  return v3 @kind object;
  #L3dd162.  v1:= "attribute" @kind object;
  #L3dd166.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd16c.  v0:= temp;
  #L3dd16e.  if v0 == 0 then goto L3dd180;
  #L3dd172.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.attribute` @type ^`boolean` @kind boolean;
  #L3dd176.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3dd17c.  v3:= temp @kind object;
  #L3dd17e.  return v3 @kind object;
  #L3dd180.  call temp:= `getDefaultValue`(v3) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L3dd186.  v3:= temp @kind object;
  #L3dd188.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.reflect.Method` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd08c.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L3dd092.  v0:= temp @kind object;
  #L3dd094.  v1:= "toString" @kind object;
  #L3dd098.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd09e.  v1:= temp;
  #L3dd0a0.  if v1 == 0 then goto L3dd0ae;
  #L3dd0a4.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dd0aa.  v3:= temp @kind object;
  #L3dd0ac.  return v3 @kind object;
  #L3dd0ae.  v1:= "equals" @kind object;
  #L3dd0b2.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd0b8.  v1:= temp;
  #L3dd0ba.  if v1 == 0 then goto L3dd0d0;
  #L3dd0be.  call temp:= `equals`(v2, v3, v5) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.equals:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind direct;
  #L3dd0c4.  v3:= temp;
  #L3dd0c6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3dd0cc.  v3:= temp @kind object;
  #L3dd0ce.  return v3 @kind object;
  #L3dd0d0.  v3:= "annotationType" @kind object;
  #L3dd0d4.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd0da.  v3:= temp;
  #L3dd0dc.  if v3 == 0 then goto L3dd0e6;
  #L3dd0e0.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.type` @type ^`java.lang.Class` @kind object;
  #L3dd0e4.  return v3 @kind object;
  #L3dd0e6.  v3:= "required" @kind object;
  #L3dd0ea.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd0f0.  v3:= temp;
  #L3dd0f2.  if v3 == 0 then goto L3dd104;
  #L3dd0f6.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.required` @type ^`boolean` @kind boolean;
  #L3dd0fa.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3dd100.  v3:= temp @kind object;
  #L3dd102.  return v3 @kind object;
  #L3dd104.  v3:= "attribute" @kind object;
  #L3dd108.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3dd10e.  v3:= temp;
  #L3dd110.  if v3 == 0 then goto L3dd122;
  #L3dd114.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.attribute` @type ^`boolean` @kind boolean;
  #L3dd118.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3dd11e.  v3:= temp @kind object;
  #L3dd120.  return v3 @kind object;
  #L3dd122.  call temp:= `getDefaultValue`(v4) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L3dd128.  v3:= temp @kind object;
  #L3dd12a.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd19c.  v0:= new `java.lang.StringBuilder`;
  #L3dd1a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dd1a6.  v1:= v2.`org.simpleframework.xml.core.AnnotationHandler.type` @type ^`java.lang.Class` @kind object;
  #L3dd1aa.  if v1 == 0 then goto L3dd1ba;
  #L3dd1ae.  call `name`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.name:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L3dd1b4.  call `attributes`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.attributes:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L3dd1ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dd1c0.  v0:= temp @kind object;
  #L3dd1c2.  return v0 @kind object;
}
