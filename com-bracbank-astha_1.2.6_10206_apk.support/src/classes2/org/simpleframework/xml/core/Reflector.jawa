record `org.simpleframework.xml.core.Reflector` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Reflector` v0 @kind this) @signature `Lorg/simpleframework/xml/core/Reflector;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ed278.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ed27e.  return @kind void;
}
procedure `java.lang.Class` `getArrayClass`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getArrayClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ecef4.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L3ecef8.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L3ecefe.  v1:= temp @kind object;
  #L3ecf00.  call temp:= `getClass`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3ecf06.  v1:= temp @kind object;
  #L3ecf08.  if v1 == 0 then goto L3ecf20;
  #L3ecf0c.  v0:= 0I;
  #L3ecf0e.  call temp:= `newInstance`(v1, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3ecf14.  v1:= temp @kind object;
  #L3ecf16.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ecf1c.  v1:= temp @kind object;
  #L3ecf1e.  return v1 @kind object;
  #L3ecf20.  v1:= 0I;
  #L3ecf22.  return v1 @kind object;
}
procedure `java.lang.Class` `getClass`(`java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ecf34.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L3ecf3a.  v1:= temp @kind object;
  #L3ecf3c.  v0:= length @variable v1;
  #L3ecf3e.  if v0 <= 0 then goto L3ecf52;
  #L3ecf42.  v0:= 0I;
  #L3ecf44.  v1:= v1[v0] @kind object;
  #L3ecf48.  call temp:= `getClass`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3ecf4e.  v1:= temp @kind object;
  #L3ecf50.  return v1 @kind object;
  #L3ecf52.  v1:= 0I;
  #L3ecf54.  return v1 @kind object;
}
procedure `java.lang.Class` `getClass`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ecf68.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L3ecf6c.  if v0 == 0 then goto L3ecf76;
  #L3ecf70.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3ecf74.  return v1 @kind object;
  #L3ecf76.  call temp:= `getGenericClass`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getGenericClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3ecf7c.  v1:= temp @kind object;
  #L3ecf7e.  return v1 @kind object;
}
procedure `java.lang.Class`[] `getClasses`(`java.lang.reflect.ParameterizedType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getClasses:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed068.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L3ed06e.  v3:= temp @kind object;
  #L3ed070.  v0:= length @variable v3;
  #L3ed072.  v0:= new `java.lang.Class`[v0];
  #L3ed076.  v1:= 0I;
  #L3ed078.  v2:= length @variable v3;
  #L3ed07a.  if v1 >= v2 then goto L3ed094;
  #L3ed07e.  v2:= v3[v1] @kind object;
  #L3ed082.  call temp:= `getClass`(v2) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3ed088.  v2:= temp @kind object;
  #L3ed08a.  v0[v1]:= v2 @kind object;
  #L3ed08e.  v1:= v1 + 1;
  #L3ed092.  goto L3ed078;
  #L3ed094.  return v0 @kind object;
}
procedure `java.lang.Class` `getDependent`(`java.lang.reflect.Field` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getDependent:(Ljava/lang/reflect/Field;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ecf90.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getType:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ecf96.  v0:= temp @kind object;
  #L3ecf98.  if v0 == 0 then goto L3ecfa6;
  #L3ecf9c.  call temp:= `getClass`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L3ecfa2.  v0:= temp @kind object;
  #L3ecfa4.  return v0 @kind object;
  #L3ecfa6.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3ecfaa.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getDependents`(`java.lang.reflect.Field` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getDependents:(Ljava/lang/reflect/Field;)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed0a8.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getType:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed0ae.  v0:= temp @kind object;
  #L3ed0b0.  if v0 == 0 then goto L3ed0be;
  #L3ed0b4.  call temp:= `getClasses`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClasses:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L3ed0ba.  v0:= temp @kind object;
  #L3ed0bc.  return v0 @kind object;
  #L3ed0be.  v0:= 0I;
  #L3ed0c0.  v0:= new `java.lang.Class`[v0];
  #L3ed0c4.  return v0 @kind object;
}
procedure `java.lang.Class` `getGenericClass`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getGenericClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ecfbc.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L3ecfc0.  if v0 == 0 then goto L3ecfce;
  #L3ecfc4.  call temp:= `getArrayClass`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getArrayClass:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L3ecfca.  v1:= temp @kind object;
  #L3ecfcc.  return v1 @kind object;
  #L3ecfce.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L3ecfd2.  return v1 @kind object;
}
procedure `java.lang.String` `getName`(`java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ed168.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3ed16e.  v0:= temp;
  #L3ed170.  if v0 <= 0 then goto L3ed1a6;
  #L3ed174.  call temp:= `toCharArray`(v3) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3ed17a.  v3:= temp @kind object;
  #L3ed17c.  v0:= 0I;
  #L3ed17e.  v1:= v3[v0] @kind char;
  #L3ed182.  call temp:= `isAcronym`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.isAcronym:([C)Z` @kind static;
  #L3ed188.  v2:= temp;
  #L3ed18a.  if v2 != 0 then goto L3ed19a;
  #L3ed18e.  call temp:= `toLowerCase`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.toLowerCase:(C)C` @kind static;
  #L3ed194.  v1:= temp;
  #L3ed196.  v3[v0]:= v1 @kind char;
  #L3ed19a.  v0:= new `java.lang.String`;
  #L3ed19e.  call `<init>`(v0, v3) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3ed1a4.  return v0 @kind object;
  #L3ed1a6.  return v3 @kind object;
}
procedure `java.lang.Class` `getParameterDependent`(`java.lang.reflect.Constructor` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependent:(Ljava/lang/reflect/Constructor;I)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ecfe4.  call temp:= `getParameterType`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ecfea.  v0:= temp @kind object;
  #L3ecfec.  if v0 == 0 then goto L3ecffa;
  #L3ecff0.  call temp:= `getClass`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L3ecff6.  v0:= temp @kind object;
  #L3ecff8.  return v0 @kind object;
  #L3ecffa.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3ecffe.  return v0 @kind object;
}
procedure `java.lang.Class` `getParameterDependent`(`java.lang.reflect.Method` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependent:(Ljava/lang/reflect/Method;I)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed010.  call temp:= `getParameterType`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed016.  v0:= temp @kind object;
  #L3ed018.  if v0 == 0 then goto L3ed026;
  #L3ed01c.  call temp:= `getClass`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L3ed022.  v0:= temp @kind object;
  #L3ed024.  return v0 @kind object;
  #L3ed026.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3ed02a.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getParameterDependents`(`java.lang.reflect.Constructor` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependents:(Ljava/lang/reflect/Constructor;I)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed0d8.  call temp:= `getParameterType`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed0de.  v0:= temp @kind object;
  #L3ed0e0.  if v0 == 0 then goto L3ed0ee;
  #L3ed0e4.  call temp:= `getClasses`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClasses:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L3ed0ea.  v0:= temp @kind object;
  #L3ed0ec.  return v0 @kind object;
  #L3ed0ee.  v0:= 0I;
  #L3ed0f0.  v0:= new `java.lang.Class`[v0];
  #L3ed0f4.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getParameterDependents`(`java.lang.reflect.Method` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependents:(Ljava/lang/reflect/Method;I)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed108.  call temp:= `getParameterType`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed10e.  v0:= temp @kind object;
  #L3ed110.  if v0 == 0 then goto L3ed11e;
  #L3ed114.  call temp:= `getClasses`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClasses:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L3ed11a.  v0:= temp @kind object;
  #L3ed11c.  return v0 @kind object;
  #L3ed11e.  v0:= 0I;
  #L3ed120.  v0:= new `java.lang.Class`[v0];
  #L3ed124.  return v0 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `getParameterType`(`java.lang.reflect.Constructor` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ed1b8.  call temp:= `getGenericParameterTypes`(v1) @signature `Ljava/lang/reflect/Constructor;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L3ed1be.  v1:= temp @kind object;
  #L3ed1c0.  v0:= length @variable v1;
  #L3ed1c2.  if v0 <= v2 then goto L3ed1d8;
  #L3ed1c6.  v1:= v1[v2] @kind object;
  #L3ed1ca.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L3ed1ce.  if v2 == 0 then goto L3ed1d8;
  #L3ed1d2.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L3ed1d6.  return v1 @kind object;
  #L3ed1d8.  v1:= 0I;
  #L3ed1da.  return v1 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `getParameterType`(`java.lang.reflect.Method` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterType:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ed1ec.  call temp:= `getGenericParameterTypes`(v1) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L3ed1f2.  v1:= temp @kind object;
  #L3ed1f4.  v0:= length @variable v1;
  #L3ed1f6.  if v0 <= v2 then goto L3ed20c;
  #L3ed1fa.  v1:= v1[v2] @kind object;
  #L3ed1fe.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L3ed202.  if v2 == 0 then goto L3ed20c;
  #L3ed206.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L3ed20a.  return v1 @kind object;
  #L3ed20c.  v1:= 0I;
  #L3ed20e.  return v1 @kind object;
}
procedure `java.lang.Class` `getReturnDependent`(`java.lang.reflect.Method` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependent:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed03c.  call temp:= `getReturnType`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnType:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed042.  v0:= temp @kind object;
  #L3ed044.  if v0 == 0 then goto L3ed052;
  #L3ed048.  call temp:= `getClass`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClass:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L3ed04e.  v0:= temp @kind object;
  #L3ed050.  return v0 @kind object;
  #L3ed052.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L3ed056.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getReturnDependents`(`java.lang.reflect.Method` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependents:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ed138.  call temp:= `getReturnType`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnType:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L3ed13e.  v0:= temp @kind object;
  #L3ed140.  if v0 == 0 then goto L3ed14e;
  #L3ed144.  call temp:= `getClasses`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getClasses:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L3ed14a.  v0:= temp @kind object;
  #L3ed14c.  return v0 @kind object;
  #L3ed14e.  v0:= 0I;
  #L3ed150.  v0:= new `java.lang.Class`[v0];
  #L3ed154.  return v0 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `getReturnType`(`java.lang.reflect.Method` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnType:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ed220.  call temp:= `getGenericReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getGenericReturnType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L3ed226.  v1:= temp @kind object;
  #L3ed228.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L3ed22c.  if v0 == 0 then goto L3ed236;
  #L3ed230.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L3ed234.  return v1 @kind object;
  #L3ed236.  v1:= 0I;
  #L3ed238.  return v1 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `getType`(`java.lang.reflect.Field` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getType:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ed24c.  call temp:= `getGenericType`(v1) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L3ed252.  v1:= temp @kind object;
  #L3ed254.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L3ed258.  if v0 == 0 then goto L3ed262;
  #L3ed25c.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L3ed260.  return v1 @kind object;
  #L3ed262.  v1:= 0I;
  #L3ed264.  return v1 @kind object;
}
procedure `boolean` `isAcronym`(`char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.isAcronym:([C)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ece7c.  v0:= length @variable v3;
  #L3ece7e.  v1:= 0I;
  #L3ece80.  v2:= 2I;
  #L3ece82.  if v0 >= v2 then goto L3ece88;
  #L3ece86.  return v1;
  #L3ece88.  v0:= v3[v1] @kind char;
  #L3ece8c.  call temp:= `isUpperCase`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.isUpperCase:(C)Z` @kind static;
  #L3ece92.  v0:= temp;
  #L3ece94.  if v0 != 0 then goto L3ece9a;
  #L3ece98.  return v1;
  #L3ece9a.  v0:= 1I;
  #L3ece9c.  v3:= v3[v0] @kind char;
  #L3ecea0.  call temp:= `isUpperCase`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.isUpperCase:(C)Z` @kind static;
  #L3ecea6.  v3:= temp;
  #L3ecea8.  return v3;
}
procedure `boolean` `isUpperCase`(`char` v0 ) @signature `Lorg/simpleframework/xml/core/Reflector;.isUpperCase:(C)Z` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3ecebc.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L3ecec2.  v0:= temp;
  #L3ecec4.  return v0;
}
procedure `char` `toLowerCase`(`char` v0 ) @signature `Lorg/simpleframework/xml/core/Reflector;.toLowerCase:(C)C` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3eced8.  call temp:= `toLowerCase`(v0) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L3ecede.  v0:= temp;
  #L3ecee0.  return v0;
}
