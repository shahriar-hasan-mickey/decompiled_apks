record `org.simpleframework.xml.core.PrimitiveKey` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.PrimitiveKey.context` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.PrimitiveKey.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.PrimitiveKey.factory` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveKey.root` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PrimitiveKey.style` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveKey.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ec184.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec18a.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L3ec18e.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ec194.  v1.`org.simpleframework.xml.core.PrimitiveKey.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L3ec198.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L3ec19c.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3ec1a2.  v1.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L3ec1a6.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L3ec1ac.  v0:= temp @kind object;
  #L3ec1ae.  v1.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L3ec1b2.  v1.`org.simpleframework.xml.core.PrimitiveKey.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L3ec1b6.  v1.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L3ec1ba.  v1.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3ec1be.  return @kind void;
}
procedure `boolean` `isOverridden`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ebf68.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ebf6c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ebf70.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L3ebf76.  v3:= temp;
  #L3ebf78.  return v3;
}
procedure `java.lang.Object` `readAttribute`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.readAttribute:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ec10c.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ec110.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ec116.  v3:= temp @kind object;
  #L3ec118.  call temp:= `getAttribute`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttribute:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ec11e.  v2:= temp @kind object;
  #L3ec120.  if v2 != 0 then goto L3ec128;
  #L3ec124.  v2:= 0I;
  #L3ec126.  return v2 @kind object;
  #L3ec128.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec12c.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ec132.  v2:= temp @kind object;
  #L3ec134.  return v2 @kind object;
}
procedure `java.lang.Object` `readElement`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ec148.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ec14c.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ec152.  v3:= temp @kind object;
  #L3ec154.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ec15a.  v2:= temp @kind object;
  #L3ec15c.  if v2 != 0 then goto L3ec164;
  #L3ec160.  v2:= 0I;
  #L3ec162.  return v2 @kind object;
  #L3ec164.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec168.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ec16e.  v2:= temp @kind object;
  #L3ec170.  return v2 @kind object;
}
procedure `boolean` `validateAttribute`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validateAttribute:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ebfe8.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ebfec.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ebff2.  v3:= temp @kind object;
  #L3ebff4.  call temp:= `getAttribute`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttribute:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ebffa.  v2:= temp @kind object;
  #L3ebffc.  if v2 != 0 then goto L3ec004;
  #L3ec000.  v2:= 1I;
  #L3ec002.  return v2;
  #L3ec004.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec008.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3ec00e.  v2:= temp;
  #L3ec010.  return v2;
}
procedure `boolean` `validateElement`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validateElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ec024.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ec028.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ec02e.  v3:= temp @kind object;
  #L3ec030.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3ec036.  v2:= temp @kind object;
  #L3ec038.  if v2 != 0 then goto L3ec040;
  #L3ec03c.  v2:= 1I;
  #L3ec03e.  return v2;
  #L3ec040.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec044.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L3ec04a.  v2:= temp;
  #L3ec04c.  return v2;
}
procedure `void` `writeAttribute`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.writeAttribute:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ec204.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ec208.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ec20e.  v0:= temp @kind object;
  #L3ec210.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.factory` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L3ec214.  call temp:= `getText`(v1, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getText:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L3ec21a.  v4:= temp @kind object;
  #L3ec21c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec220.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L3ec226.  v1:= temp @kind object;
  #L3ec228.  if v1 != 0 then goto L3ec238;
  #L3ec22c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3ec230.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3ec236.  v1:= temp @kind object;
  #L3ec238.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ec23c.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ec242.  v0:= temp @kind object;
  #L3ec244.  if v4 == 0 then goto L3ec24e;
  #L3ec248.  call temp:= `setAttribute`(v3, v0, v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setAttribute:(Ljava/lang/String;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ec24e.  return @kind void;
}
procedure `void` `writeElement`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.writeElement:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ec260.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ec264.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ec26a.  v0:= temp @kind object;
  #L3ec26c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec270.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L3ec276.  v1:= temp @kind object;
  #L3ec278.  if v1 != 0 then goto L3ec288;
  #L3ec27c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3ec280.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3ec286.  v1:= temp @kind object;
  #L3ec288.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L3ec28c.  call temp:= `getElement`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L3ec292.  v0:= temp @kind object;
  #L3ec294.  call temp:= `getChild`(v3, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L3ec29a.  v3:= temp @kind object;
  #L3ec29c.  if v4 == 0 then goto L3ec2b6;
  #L3ec2a0.  call temp:= `isOverridden`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.isOverridden:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L3ec2a6.  v0:= temp;
  #L3ec2a8.  if v0 != 0 then goto L3ec2b6;
  #L3ec2ac.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.root` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L3ec2b0.  call `write`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L3ec2b6.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec060.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ec064.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ec06a.  v0:= temp @kind object;
  #L3ec06c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec070.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L3ec076.  v1:= temp @kind object;
  #L3ec078.  if v1 != 0 then goto L3ec088;
  #L3ec07c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3ec080.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3ec086.  v1:= temp @kind object;
  #L3ec088.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec08c.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L3ec092.  v0:= temp;
  #L3ec094.  if v0 != 0 then goto L3ec0a2;
  #L3ec098.  call temp:= `readElement`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L3ec09e.  v3:= temp @kind object;
  #L3ec0a0.  return v3 @kind object;
  #L3ec0a2.  call temp:= `readAttribute`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.readAttribute:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L3ec0a8.  v3:= temp @kind object;
  #L3ec0aa.  return v3 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec0bc.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ec0c0.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ec0c6.  v0:= temp @kind object;
  #L3ec0c8.  if v4 != 0 then goto L3ec0d6;
  #L3ec0cc.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L3ec0d2.  v3:= temp @kind object;
  #L3ec0d4.  return v3 @kind object;
  #L3ec0d6.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L3ec0da.  v4:= 2I;
  #L3ec0dc.  v4:= new `java.lang.Object`[v4];
  #L3ec0e0.  v1:= 0I;
  #L3ec0e2.  v4[v1]:= v0 @kind object;
  #L3ec0e6.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec0ea.  v1:= 1I;
  #L3ec0ec.  v4[v1]:= v0 @kind object;
  #L3ec0f0.  v0:= "Can not read key of %s for %s" @kind object;
  #L3ec0f4.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3ec0fa.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ebf8c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3ebf90.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3ebf96.  v0:= temp @kind object;
  #L3ebf98.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ebf9c.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L3ebfa2.  v1:= temp @kind object;
  #L3ebfa4.  if v1 != 0 then goto L3ebfb4;
  #L3ebfa8.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L3ebfac.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L3ebfb2.  v1:= temp @kind object;
  #L3ebfb4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ebfb8.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L3ebfbe.  v0:= temp;
  #L3ebfc0.  if v0 != 0 then goto L3ebfce;
  #L3ebfc4.  call temp:= `validateElement`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validateElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L3ebfca.  v3:= temp;
  #L3ebfcc.  return v3;
  #L3ebfce.  call temp:= `validateAttribute`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validateAttribute:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L3ebfd4.  v3:= temp;
  #L3ebfd6.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ec1d0.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.entry` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L3ec1d4.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L3ec1da.  v0:= temp;
  #L3ec1dc.  if v0 != 0 then goto L3ec1e8;
  #L3ec1e0.  call `writeElement`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.writeElement:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind direct;
  #L3ec1e6.  goto L3ec1f2;
  #L3ec1e8.  if v3 == 0 then goto L3ec1f2;
  #L3ec1ec.  call `writeAttribute`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.writeAttribute:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind direct;
  #L3ec1f2.  return @kind void;
}
