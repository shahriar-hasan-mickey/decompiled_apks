record `org.simpleframework.xml.core.CompositeArray` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeArray.entry` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.ArrayFactory` `org.simpleframework.xml.core.CompositeArray.factory` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.CompositeArray.parent` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Traverser` `org.simpleframework.xml.core.CompositeArray.root` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeArray.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CompositeArray` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df000.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df006.  v0:= new `org.simpleframework.xml.core.ArrayFactory`;
  #L3df00a.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L3df010.  v1.`org.simpleframework.xml.core.CompositeArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` := v0 @kind object;
  #L3df014.  v0:= new `org.simpleframework.xml.core.Traverser`;
  #L3df018.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L3df01e.  v1.`org.simpleframework.xml.core.CompositeArray.root` @type ^`org.simpleframework.xml.core.Traverser` := v0 @kind object;
  #L3df022.  v1.`org.simpleframework.xml.core.CompositeArray.parent` @type ^`java.lang.String` := v5 @kind object;
  #L3df026.  v1.`org.simpleframework.xml.core.CompositeArray.entry` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L3df02a.  v1.`org.simpleframework.xml.core.CompositeArray.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L3df02e.  return @kind void;
}
procedure `void` `read`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3df040.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.entry` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3df044.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3df04a.  v0:= temp @kind object;
  #L3df04c.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L3df052.  v1:= temp;
  #L3df054.  if v1 != 0 then goto L3df066;
  #L3df058.  v1:= v2.`org.simpleframework.xml.core.CompositeArray.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3df05c.  call temp:= `read`(v1, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L3df062.  v3:= temp @kind object;
  #L3df064.  goto L3df068;
  #L3df066.  v3:= 0I;
  #L3df068.  call `set`(v4, v5, v3) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L3df06e.  return @kind void;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3def24.  call temp:= `getNext`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3def2a.  v0:= temp @kind object;
  #L3def2c.  if v0 != 0 then goto L3def34;
  #L3def30.  v3:= 1I;
  #L3def32.  return v3;
  #L3def34.  call temp:= `isEmpty`(v0) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L3def3a.  v1:= temp;
  #L3def3c.  if v1 != 0 then goto L3def24;
  #L3def40.  v1:= v2.`org.simpleframework.xml.core.CompositeArray.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3def44.  call temp:= `validate`(v1, v0, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind virtual;
  #L3def4a.  goto L3def24;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3def5c.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L3def60.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3def66.  v0:= temp @kind object;
  #L3def68.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L3def6e.  v1:= temp @kind object;
  #L3def70.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3def76.  v0:= temp;
  #L3def78.  if v0 != 0 then goto L3def86;
  #L3def7c.  call temp:= `read`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3def82.  v3:= temp @kind object;
  #L3def84.  return v3 @kind object;
  #L3def86.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeArray` v5 @kind this, `org.simpleframework.xml.stream.InputNode` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3def98.  call temp:= `getLength`(v7) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3def9e.  v0:= temp;
  #L3defa0.  v1:= 0I;
  #L3defa2.  v2:= 0I;
  #L3defa4.  call temp:= `getPosition`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L3defaa.  v3:= temp @kind object;
  #L3defac.  call temp:= `getNext`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L3defb2.  v4:= temp @kind object;
  #L3defb4.  if v4 != 0 then goto L3defba;
  #L3defb8.  return v7 @kind object;
  #L3defba.  if v2 >= v0 then goto L3defca;
  #L3defbe.  call `read`(v5, v4, v7, v2) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;I)V` @kind direct;
  #L3defc4.  v2:= v2 + 1;
  #L3defc8.  goto L3defa4;
  #L3defca.  v6:= new `org.simpleframework.xml.core.ElementException`;
  #L3defce.  v7:= 2I;
  #L3defd0.  v7:= new `java.lang.Object`[v7];
  #L3defd4.  v0:= v5.`org.simpleframework.xml.core.CompositeArray.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3defd8.  v7[v1]:= v0 @kind object;
  #L3defdc.  v0:= 1I;
  #L3defde.  v7[v0]:= v3 @kind object;
  #L3defe2.  v0:= "Array length missing or incorrect for %s at %s" @kind object;
  #L3defe6.  call `<init>`(v6, v0, v7) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3defec.  throw v6;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3deedc.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.factory` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L3deee0.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L3deee6.  v0:= temp @kind object;
  #L3deee8.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L3deeee.  v1:= temp;
  #L3deef0.  if v1 != 0 then goto L3def0e;
  #L3deef4.  v1:= 0I;
  #L3deef6.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3deefc.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L3def02.  v0:= temp @kind object;
  #L3def04.  call temp:= `validate`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/CompositeArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L3def0a.  v3:= temp;
  #L3def0c.  return v3;
  #L3def0e.  v3:= 1I;
  #L3def10.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.CompositeArray` v6 @kind this, `org.simpleframework.xml.stream.OutputNode` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3df080.  call temp:= `getLength`(v8) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3df086.  v0:= temp;
  #L3df088.  v1:= 0I;
  #L3df08a.  if v1 >= v0 then goto L3df0b6;
  #L3df08e.  call temp:= `get`(v8, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L3df094.  v2:= temp @kind object;
  #L3df096.  v3:= v6.`org.simpleframework.xml.core.CompositeArray.entry` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L3df09a.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3df0a0.  v3:= temp @kind object;
  #L3df0a2.  v4:= v6.`org.simpleframework.xml.core.CompositeArray.root` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L3df0a6.  v5:= v6.`org.simpleframework.xml.core.CompositeArray.parent` @type ^`java.lang.String` @kind object;
  #L3df0aa.  call `write`(v4, v7, v2, v3, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L3df0b0.  v1:= v1 + 1;
  #L3df0b4.  goto L3df08a;
  #L3df0b6.  call `commit`(v7) @signature `Lorg/simpleframework/xml/stream/OutputNode;.commit:()V` @kind interface;
  #L3df0bc.  return @kind void;
}
