record `org.simpleframework.xml.strategy.ReadGraph` @kind class @AccessFlag PUBLIC extends `java.util.HashMap` @kind class {
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.label` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.length` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadGraph.loader` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.mark` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.refer` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object, `org.simpleframework.xml.strategy.Loader` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f2544.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3f254a.  call temp:= `getReference`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getReference:()Ljava/lang/String;` @kind virtual;
  #L3f2550.  v0:= temp @kind object;
  #L3f2552.  v1.`org.simpleframework.xml.strategy.ReadGraph.refer` @type ^`java.lang.String` := v0 @kind object;
  #L3f2556.  call temp:= `getIdentity`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getIdentity:()Ljava/lang/String;` @kind virtual;
  #L3f255c.  v0:= temp @kind object;
  #L3f255e.  v1.`org.simpleframework.xml.strategy.ReadGraph.mark` @type ^`java.lang.String` := v0 @kind object;
  #L3f2562.  call temp:= `getLength`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLength:()Ljava/lang/String;` @kind virtual;
  #L3f2568.  v0:= temp @kind object;
  #L3f256a.  v1.`org.simpleframework.xml.strategy.ReadGraph.length` @type ^`java.lang.String` := v0 @kind object;
  #L3f256e.  call temp:= `getLabel`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLabel:()Ljava/lang/String;` @kind virtual;
  #L3f2574.  v2:= temp @kind object;
  #L3f2576.  v1.`org.simpleframework.xml.strategy.ReadGraph.label` @type ^`java.lang.String` := v2 @kind object;
  #L3f257a.  v1.`org.simpleframework.xml.strategy.ReadGraph.loader` @type ^`org.simpleframework.xml.strategy.Loader` := v3 @kind object;
  #L3f257e.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `readArray`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readArray:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L3f23c8.  v1:= v0.`org.simpleframework.xml.strategy.ReadGraph.length` @type ^`java.lang.String` @kind object;
  #L3f23cc.  call temp:= `remove`(v3, v1) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3f23d2.  v1:= temp @kind object;
  #L3f23d4.  if v1 == 0 then goto L3f23ea;
  #L3f23d8.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f23de.  v1:= temp @kind object;
  #L3f23e0.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3f23e6.  v1:= temp;
  #L3f23e8.  goto L3f23ec;
  #L3f23ea.  v1:= 0I;
  #L3f23ec.  v3:= new `org.simpleframework.xml.strategy.ArrayValue`;
  #L3f23f0.  call `<init>`(v3, v2, v1) @signature `Lorg/simpleframework/xml/strategy/ArrayValue;.<init>:(Ljava/lang/Class;I)V` @kind direct;
  #L3f23f6.  return v3 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `readInstance`(`org.simpleframework.xml.strategy.ReadGraph` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readInstance:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f2408.  v0:= v2.`org.simpleframework.xml.strategy.ReadGraph.mark` @type ^`java.lang.String` @kind object;
  #L3f240c.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3f2412.  v0:= temp @kind object;
  #L3f2414.  if v0 != 0 then goto L3f2422;
  #L3f2418.  call temp:= `readReference`(v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readReference:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f241e.  v3:= temp @kind object;
  #L3f2420.  return v3 @kind object;
  #L3f2422.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f2428.  v0:= temp @kind object;
  #L3f242a.  call temp:= `containsKey`(v2, v0) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f2430.  v1:= temp;
  #L3f2432.  if v1 != 0 then goto L3f2440;
  #L3f2436.  call temp:= `readValue`(v2, v3, v4, v5, v0) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readValue:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f243c.  v3:= temp @kind object;
  #L3f243e.  return v3 @kind object;
  #L3f2440.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L3f2444.  v4:= 1I;
  #L3f2446.  v4:= new `java.lang.Object`[v4];
  #L3f244a.  v5:= 0I;
  #L3f244c.  v4[v5]:= v0 @kind object;
  #L3f2450.  v5:= "Element '%s' already exists" @kind object;
  #L3f2454.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f245a.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `readReference`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readReference:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f246c.  v0:= v1.`org.simpleframework.xml.strategy.ReadGraph.refer` @type ^`java.lang.String` @kind object;
  #L3f2470.  call temp:= `remove`(v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3f2476.  v0:= temp @kind object;
  #L3f2478.  if v0 != 0 then goto L3f2486;
  #L3f247c.  call temp:= `readValue`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readValue:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f2482.  v2:= temp @kind object;
  #L3f2484.  return v2 @kind object;
  #L3f2486.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f248c.  v2:= temp @kind object;
  #L3f248e.  call temp:= `get`(v1, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f2494.  v4:= temp @kind object;
  #L3f2496.  call temp:= `containsKey`(v1, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f249c.  v0:= temp;
  #L3f249e.  if v0 == 0 then goto L3f24ae;
  #L3f24a2.  v2:= new `org.simpleframework.xml.strategy.Reference`;
  #L3f24a6.  call `<init>`(v2, v4, v3) @signature `Lorg/simpleframework/xml/strategy/Reference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;)V` @kind direct;
  #L3f24ac.  return v2 @kind object;
  #L3f24ae.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L3f24b2.  v4:= 1I;
  #L3f24b4.  v4:= new `java.lang.Object`[v4];
  #L3f24b8.  v0:= 0I;
  #L3f24ba.  v4[v0]:= v2 @kind object;
  #L3f24be.  v2:= "Invalid reference '%s' found" @kind object;
  #L3f24c2.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L3f24c8.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `readValue`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readValue:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f24dc.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3f24e2.  v0:= temp @kind object;
  #L3f24e4.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3f24ea.  v0:= temp;
  #L3f24ec.  if v0 == 0 then goto L3f24fa;
  #L3f24f0.  call temp:= `readArray`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readArray:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f24f6.  v2:= temp @kind object;
  #L3f24f8.  return v2 @kind object;
  #L3f24fa.  v2:= new `org.simpleframework.xml.strategy.ObjectValue`;
  #L3f24fe.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/strategy/ObjectValue;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3f2504.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `readValue`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readValue:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L3f2518.  call temp:= `readValue`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readValue:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f251e.  v1:= temp @kind object;
  #L3f2520.  if v4 == 0 then goto L3f2530;
  #L3f2524.  v2:= new `org.simpleframework.xml.strategy.Allocate`;
  #L3f2528.  call `<init>`(v2, v1, v0, v4) @signature `Lorg/simpleframework/xml/strategy/Allocate;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/util/Map;Ljava/lang/String;)V` @kind direct;
  #L3f252e.  return v2 @kind object;
  #L3f2530.  return v1 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.ReadGraph` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f236c.  v0:= v3.`org.simpleframework.xml.strategy.ReadGraph.label` @type ^`java.lang.String` @kind object;
  #L3f2370.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L3f2376.  v0:= temp @kind object;
  #L3f2378.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L3f237e.  v1:= temp @kind object;
  #L3f2380.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3f2386.  v2:= temp;
  #L3f2388.  if v2 == 0 then goto L3f2394;
  #L3f238c.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3f2392.  v1:= temp @kind object;
  #L3f2394.  if v0 == 0 then goto L3f23ac;
  #L3f2398.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L3f239e.  v0:= temp @kind object;
  #L3f23a0.  v1:= v3.`org.simpleframework.xml.strategy.ReadGraph.loader` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L3f23a4.  call temp:= `load`(v1, v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.load:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L3f23aa.  v1:= temp @kind object;
  #L3f23ac.  call temp:= `readInstance`(v3, v4, v1, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.readInstance:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L3f23b2.  v4:= temp @kind object;
  #L3f23b4.  return v4 @kind object;
}
