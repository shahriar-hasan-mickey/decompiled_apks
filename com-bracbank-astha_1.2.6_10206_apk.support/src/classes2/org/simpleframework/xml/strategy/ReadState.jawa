record `org.simpleframework.xml.strategy.ReadState` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.util.WeakCache` @kind class {
  `org.simpleframework.xml.strategy.Contract` `org.simpleframework.xml.strategy.ReadState.contract` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadState.loader` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.<init>:(Lorg/simpleframework/xml/strategy/Contract;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f25f8.  call `<init>`(v1) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:()V` @kind direct;
  #L3f25fe.  v0:= new `org.simpleframework.xml.strategy.Loader`;
  #L3f2602.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.<init>:()V` @kind direct;
  #L3f2608.  v1.`org.simpleframework.xml.strategy.ReadState.loader` @type ^`org.simpleframework.xml.strategy.Loader` := v0 @kind object;
  #L3f260c.  v1.`org.simpleframework.xml.strategy.ReadState.contract` @type ^`org.simpleframework.xml.strategy.Contract` := v2 @kind object;
  #L3f2610.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `create`(`org.simpleframework.xml.strategy.ReadState` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.create:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3f2590.  call temp:= `fetch`(v3, v4) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f2596.  v0:= temp @kind object;
  #L3f2598.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L3f259c.  if v0 != 0 then goto L3f25b8;
  #L3f25a0.  v0:= new `org.simpleframework.xml.strategy.ReadGraph`;
  #L3f25a4.  v1:= v3.`org.simpleframework.xml.strategy.ReadState.contract` @type ^`org.simpleframework.xml.strategy.Contract` @kind object;
  #L3f25a8.  v2:= v3.`org.simpleframework.xml.strategy.ReadState.loader` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L3f25ac.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @kind direct;
  #L3f25b2.  call `cache`(v3, v4, v0) @signature `Lorg/simpleframework/xml/util/WeakCache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3f25b8.  return v0 @kind object;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `find`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.find:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f25cc.  call temp:= `fetch`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f25d2.  v0:= temp @kind object;
  #L3f25d4.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L3f25d8.  if v0 == 0 then goto L3f25de;
  #L3f25dc.  return v0 @kind object;
  #L3f25de.  call temp:= `create`(v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadState;.create:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @kind direct;
  #L3f25e4.  v2:= temp @kind object;
  #L3f25e6.  return v2 @kind object;
}
