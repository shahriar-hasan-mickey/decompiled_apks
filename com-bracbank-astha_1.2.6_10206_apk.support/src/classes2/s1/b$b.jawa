record `s1.b$b` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `s1.i` `s1.b$b.a` @AccessFlag FINAL_SYNTHETIC;
  `s1.b` `s1.b$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`s1.b$b` v0 @kind this, `s1.b` v1 @kind object, `s1.i` v2 @kind object) @signature `Ls1/b$b;.<init>:(Ls1/b;Ls1/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fb4a8.  v0.`s1.b$b.b` @type ^`s1.b` := v1 @kind object;
  #L3fb4ac.  v0.`s1.b$b.a` @type ^`s1.i` := v2 @kind object;
  #L3fb4b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fb4b6.  return @kind void;
}
procedure `void` `run`(`s1.b$b` v2 @kind this) @signature `Ls1/b$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fb4c8.  v0:= v2.`s1.b$b.b` @type ^`s1.b` @kind object;
  #L3fb4cc.  call temp:= `b`(v0) @signature `Ls1/b;.b:(Ls1/b;)Z` @kind static;
  #L3fb4d2.  v0:= temp;
  #L3fb4d4.  if v0 != 0 then goto L3fb4e0;
  #L3fb4d8.  call temp:= `c`() @signature `Ls1/b;.c:()Ljava/lang/String;` @kind static;
  #L3fb4de.  return @kind void;
  #L3fb4e0.  v0:= v2.`s1.b$b.b` @type ^`s1.b` @kind object;
  #L3fb4e4.  call temp:= `d`(v0) @signature `Ls1/b;.d:(Ls1/b;)Ls1/d;` @kind static;
  #L3fb4ea.  v0:= temp @kind object;
  #L3fb4ec.  v1:= new `s1.b$b$a`;
  #L3fb4f0.  call `<init>`(v1, v2) @signature `Ls1/b$b$a;.<init>:(Ls1/b$b;)V` @kind direct;
  #L3fb4f6.  call `c`(v0, v1) @signature `Ls1/d;.c:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3fb4fc.  return @kind void;
}
