record `s1.h` @kind class @AccessFlag PUBLIC extends `s1.j` @kind class {
}
procedure `void` `<clinit>`() @signature `Ls1/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3fc26c.  return @kind void;
}
procedure `void` `<init>`(`s1.h` v0 @kind this) @signature `Ls1/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fc280.  call `<init>`(v0) @signature `Ls1/j;.<init>:()V` @kind direct;
  #L3fc286.  return @kind void;
}
procedure `float` `e`(`float` v2 ) @signature `Ls1/h;.e:(F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3fc1ac.  v0:= 1.0F;
  #L3fc1b0.  v1:= fcmpg(v2, v0);
  #L3fc1b4.  if v1 >= 0 then goto L3fc1bc;
  #L3fc1b8.  v0:= v0 / v2 @kind float;
  #L3fc1ba.  return v0;
  #L3fc1bc.  return v2;
}
procedure `float` `c`(`s1.h` v4 @kind this, `r1.l` v5 @kind object, `r1.l` v6 @kind object) @signature `Ls1/h;.c:(Lr1/l;Lr1/l;)F` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fc1d0.  v0:= v5.`r1.l.a` @type ^`int`;
  #L3fc1d4.  if v0 <= 0 then goto L3fc256;
  #L3fc1d8.  v1:= v5.`r1.l.b` @type ^`int`;
  #L3fc1dc.  if v1 > 0 then goto L3fc1e2;
  #L3fc1e0.  goto L3fc256;
  #L3fc1e2.  v0:= (`float`) v0 @kind i2f;
  #L3fc1e4.  v1:= 1.0F;
  #L3fc1e8.  v0:= v0 * v1 @kind float;
  #L3fc1ec.  v2:= v6.`r1.l.a` @type ^`int`;
  #L3fc1f0.  v2:= (`float`) v2 @kind i2f;
  #L3fc1f2.  v0:= v0 / v2 @kind float;
  #L3fc1f4.  call temp:= `e`(v0) @signature `Ls1/h;.e:(F)F` @kind static;
  #L3fc1fa.  v0:= temp;
  #L3fc1fc.  v2:= v5.`r1.l.b` @type ^`int`;
  #L3fc200.  v2:= (`float`) v2 @kind i2f;
  #L3fc202.  v2:= v2 * v1 @kind float;
  #L3fc206.  v3:= v6.`r1.l.b` @type ^`int`;
  #L3fc20a.  v3:= (`float`) v3 @kind i2f;
  #L3fc20c.  v2:= v2 / v3 @kind float;
  #L3fc20e.  call temp:= `e`(v2) @signature `Ls1/h;.e:(F)F` @kind static;
  #L3fc214.  v2:= temp;
  #L3fc216.  v0:= v1 / v0 @kind float;
  #L3fc21a.  v0:= v0 / v2 @kind float;
  #L3fc21c.  v2:= v5.`r1.l.a` @type ^`int`;
  #L3fc220.  v2:= (`float`) v2 @kind i2f;
  #L3fc222.  v2:= v2 * v1 @kind float;
  #L3fc226.  v5:= v5.`r1.l.b` @type ^`int`;
  #L3fc22a.  v5:= (`float`) v5 @kind i2f;
  #L3fc22c.  v2:= v2 / v5 @kind float;
  #L3fc22e.  v5:= v6.`r1.l.a` @type ^`int`;
  #L3fc232.  v5:= (`float`) v5 @kind i2f;
  #L3fc234.  v5:= v5 * v1 @kind float;
  #L3fc238.  v6:= v6.`r1.l.b` @type ^`int`;
  #L3fc23c.  v6:= (`float`) v6 @kind i2f;
  #L3fc23e.  v5:= v5 / v6 @kind float;
  #L3fc240.  v2:= v2 / v5 @kind float;
  #L3fc242.  call temp:= `e`(v2) @signature `Ls1/h;.e:(F)F` @kind static;
  #L3fc248.  v5:= temp;
  #L3fc24a.  v1:= v1 / v5 @kind float;
  #L3fc24c.  v1:= v1 / v5 @kind float;
  #L3fc24e.  v1:= v1 / v5 @kind float;
  #L3fc250.  v0:= v0 * v1 @kind float;
  #L3fc254.  return v0;
  #L3fc256.  v5:= 0I;
  #L3fc258.  return v5;
}
procedure `android.graphics.Rect` `d`(`s1.h` v2 @kind this, `r1.l` v3 @kind object, `r1.l` v4 @kind object) @signature `Ls1/h;.d:(Lr1/l;Lr1/l;)Landroid/graphics/Rect;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc184.  v3:= new `android.graphics.Rect`;
  #L3fc188.  v0:= v4.`r1.l.a` @type ^`int`;
  #L3fc18c.  v4:= v4.`r1.l.b` @type ^`int`;
  #L3fc190.  v1:= 0I;
  #L3fc192.  call `<init>`(v3, v1, v1, v0, v4) @signature `Landroid/graphics/Rect;.<init>:(IIII)V` @kind direct;
  #L3fc198.  return v3 @kind object;
}
