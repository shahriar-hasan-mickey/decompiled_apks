record `s1.j$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
  `r1.l` `s1.j$a.a` @AccessFlag FINAL_SYNTHETIC;
  `s1.j` `s1.j$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`s1.j$a` v0 @kind this, `s1.j` v1 @kind object, `r1.l` v2 @kind object) @signature `Ls1/j$a;.<init>:(Ls1/j;Lr1/l;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fc2f8.  v0.`s1.j$a.b` @type ^`s1.j` := v1 @kind object;
  #L3fc2fc.  v0.`s1.j$a.a` @type ^`r1.l` := v2 @kind object;
  #L3fc300.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fc306.  return @kind void;
}
procedure `int` `a`(`s1.j$a` v2 @kind this, `r1.l` v3 @kind object, `r1.l` v4 @kind object) @signature `Ls1/j$a;.a:(Lr1/l;Lr1/l;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc2bc.  v0:= v2.`s1.j$a.b` @type ^`s1.j` @kind object;
  #L3fc2c0.  v1:= v2.`s1.j$a.a` @type ^`r1.l` @kind object;
  #L3fc2c4.  call temp:= `c`(v0, v3, v1) @signature `Ls1/j;.c:(Lr1/l;Lr1/l;)F` @kind virtual;
  #L3fc2ca.  v3:= temp;
  #L3fc2cc.  v0:= v2.`s1.j$a.b` @type ^`s1.j` @kind object;
  #L3fc2d0.  v1:= v2.`s1.j$a.a` @type ^`r1.l` @kind object;
  #L3fc2d4.  call temp:= `c`(v0, v4, v1) @signature `Ls1/j;.c:(Lr1/l;Lr1/l;)F` @kind virtual;
  #L3fc2da.  v4:= temp;
  #L3fc2dc.  call temp:= `compare`(v4, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3fc2e2.  v3:= temp;
  #L3fc2e4.  return v3;
}
procedure `int` `compare`(`s1.j$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ls1/j$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3fc298.  v1:= (`r1.l`) v1 @kind object;
  #L3fc29c.  v2:= (`r1.l`) v2 @kind object;
  #L3fc2a0.  call temp:= `a`(v0, v1, v2) @signature `Ls1/j$a;.a:(Lr1/l;Lr1/l;)I` @kind virtual;
  #L3fc2a6.  v1:= temp;
  #L3fc2a8.  return v1;
}
