record `o0.a$c` @kind class @AccessFlag PUBLIC_FINAL {
  `o0.a$d` `o0.a$c.a` @AccessFlag PRIVATE_FINAL;
  `boolean`[] `o0.a$c.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `o0.a$c.c` @AccessFlag PRIVATE;
  `o0.a` `o0.a$c.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`o0.a$c` v0 @kind this, `o0.a` v1 @kind object, `o0.a$d` v2 @kind object) @signature `Lo0/a$c;.<init>:(Lo0/a;Lo0/a$d;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4edd8c.  v0.`o0.a$c.d` @type ^`o0.a` := v1 @kind object;
  #L4edd90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4edd96.  v0.`o0.a$c.a` @type ^`o0.a$d` := v2 @kind object;
  #L4edd9a.  call temp:= `e`(v2) @signature `Lo0/a$d;.e:(Lo0/a$d;)Z` @kind static;
  #L4edda0.  v2:= temp;
  #L4edda2.  if v2 == 0 then goto L4eddaa;
  #L4edda6.  v1:= 0I;
  #L4edda8.  goto L4eddb6;
  #L4eddaa.  call temp:= `h`(v1) @signature `Lo0/a;.h:(Lo0/a;)I` @kind static;
  #L4eddb0.  v1:= temp;
  #L4eddb2.  v1:= new `boolean`[v1];
  #L4eddb6.  v0.`o0.a$c.b` @type ^`boolean`[] := v1 @kind object;
  #L4eddba.  return @kind void;
}
procedure `void` `<init>`(`o0.a$c` v0 @kind this, `o0.a` v1 @kind object, `o0.a$d` v2 @kind object, `o0.a$a` v3 @kind object) @signature `Lo0/a$c;.<init>:(Lo0/a;Lo0/a$d;Lo0/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4eddcc.  call `<init>`(v0, v1, v2) @signature `Lo0/a$c;.<init>:(Lo0/a;Lo0/a$d;)V` @kind direct;
  #L4eddd2.  return @kind void;
}
procedure `o0.a$d` `c`(`o0.a$c` v0 @kind object) @signature `Lo0/a$c;.c:(Lo0/a$c;)Lo0/a$d;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4edd74.  v0:= v0.`o0.a$c.a` @type ^`o0.a$d` @kind object;
  #L4edd78.  return v0 @kind object;
}
procedure `boolean`[] `d`(`o0.a$c` v0 @kind object) @signature `Lo0/a$c;.d:(Lo0/a$c;)[Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4edcc4.  v0:= v0.`o0.a$c.b` @type ^`boolean`[] @kind object;
  #L4edcc8.  return v0 @kind object;
}
procedure `void` `a`(`o0.a$c` v2 @kind this) @signature `Lo0/a$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4edde4.  v0:= v2.`o0.a$c.d` @type ^`o0.a` @kind object;
  #L4edde8.  v1:= 0I;
  #L4eddea.  call `R`(v0, v2, v1) @signature `Lo0/a;.R:(Lo0/a;Lo0/a$c;Z)V` @kind static;
  #L4eddf0.  return @kind void;
}
procedure `void` `b`(`o0.a$c` v1 @kind this) @signature `Lo0/a$c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ede04.  v0:= v1.`o0.a$c.c` @type ^`boolean` @kind boolean;
  #L4ede08.  if v0 != 0 then goto L4ede12;
  #L4ede0c.  call `a`(v1) @signature `Lo0/a$c;.a:()V` @kind virtual;
  #L4ede12.  return @kind void;
  catch `java.io.IOException` @[L4ede0c..L4ede12] goto L4ede12;
}
procedure `void` `e`(`o0.a$c` v2 @kind this) @signature `Lo0/a$c;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ede34.  v0:= v2.`o0.a$c.d` @type ^`o0.a` @kind object;
  #L4ede38.  v1:= 1I;
  #L4ede3a.  call `R`(v0, v2, v1) @signature `Lo0/a;.R:(Lo0/a;Lo0/a$c;Z)V` @kind static;
  #L4ede40.  v2.`o0.a$c.c` @type ^`boolean` := v1 @kind boolean;
  #L4ede44.  return @kind void;
}
procedure `java.io.File` `f`(`o0.a$c` v3 @kind this, `int` v4 ) @signature `Lo0/a$c;.f:(I)Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4edcdc.  v0:= v3.`o0.a$c.d` @type ^`o0.a` @kind object;
  #L4edce0.  @monitorenter v0
  #L4edce2.  v1:= v3.`o0.a$c.a` @type ^`o0.a$d` @kind object;
  #L4edce6.  call temp:= `g`(v1) @signature `Lo0/a$d;.g:(Lo0/a$d;)Lo0/a$c;` @kind static;
  #L4edcec.  v1:= temp @kind object;
  #L4edcee.  if v1 != v3 then goto L4edd46;
  #L4edcf2.  v1:= v3.`o0.a$c.a` @type ^`o0.a$d` @kind object;
  #L4edcf6.  call temp:= `e`(v1) @signature `Lo0/a$d;.e:(Lo0/a$d;)Z` @kind static;
  #L4edcfc.  v1:= temp;
  #L4edcfe.  if v1 != 0 then goto L4edd0c;
  #L4edd02.  v1:= v3.`o0.a$c.b` @type ^`boolean`[] @kind object;
  #L4edd06.  v2:= 1I;
  #L4edd08.  v1[v4]:= v2 @kind boolean;
  #L4edd0c.  v1:= v3.`o0.a$c.a` @type ^`o0.a$d` @kind object;
  #L4edd10.  call temp:= `k`(v1, v4) @signature `Lo0/a$d;.k:(I)Ljava/io/File;` @kind virtual;
  #L4edd16.  v4:= temp @kind object;
  #L4edd18.  v1:= v3.`o0.a$c.d` @type ^`o0.a` @kind object;
  #L4edd1c.  call temp:= `K`(v1) @signature `Lo0/a;.K:(Lo0/a;)Ljava/io/File;` @kind static;
  #L4edd22.  v1:= temp @kind object;
  #L4edd24.  call temp:= `exists`(v1) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L4edd2a.  v1:= temp;
  #L4edd2c.  if v1 != 0 then goto L4edd42;
  #L4edd30.  v1:= v3.`o0.a$c.d` @type ^`o0.a` @kind object;
  #L4edd34.  call temp:= `K`(v1) @signature `Lo0/a;.K:(Lo0/a;)Ljava/io/File;` @kind static;
  #L4edd3a.  v1:= temp @kind object;
  #L4edd3c.  call temp:= `mkdirs`(v1) @signature `Ljava/io/File;.mkdirs:()Z` @kind virtual;
  #L4edd42.  @monitorexit v0
  #L4edd44.  return v4 @kind object;
  #L4edd46.  v4:= new `java.lang.IllegalStateException`;
  #L4edd4a.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4edd50.  throw v4;
  #L4edd52.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edd54.  @monitorexit v0
  #L4edd56.  throw v4;
  catch `java.lang.Throwable` @[L4edce2..L4edd56] goto L4edd52;
}
