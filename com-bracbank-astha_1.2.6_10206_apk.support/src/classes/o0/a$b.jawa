record `o0.a$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
}
procedure `void` `<init>`(`o0.a$b` v0 @kind this) @signature `Lo0/a$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4edc94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4edc9a.  return @kind void;
}
procedure `void` `<init>`(`o0.a$b` v0 @kind this, `o0.a$a` v1 @kind object) @signature `Lo0/a$b;.<init>:(Lo0/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L4edcac.  call `<init>`(v0) @signature `Lo0/a$b;.<init>:()V` @kind direct;
  #L4edcb2.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`o0.a$b` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lo0/a$b;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4edc54.  @monitorenter v2
  #L4edc56.  v0:= new `java.lang.Thread`;
  #L4edc5a.  v1:= "glide-disk-lru-cache-thread" @kind object;
  #L4edc5e.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L4edc64.  v3:= 1I;
  #L4edc66.  call `setPriority`(v0, v3) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L4edc6c.  @monitorexit v2
  #L4edc6e.  return v0 @kind object;
  #L4edc70.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edc72.  @monitorexit v2
  #L4edc74.  throw v3;
  catch `java.lang.Throwable` @[L4edc56..L4edc6c] goto L4edc70;
}
