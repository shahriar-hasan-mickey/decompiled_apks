record `o0.b` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `java.io.InputStream` `o0.b.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `o0.b.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `o0.b.c` @AccessFlag PRIVATE;
  `int` `o0.b.d` @AccessFlag PRIVATE;
  `int` `o0.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o0.b` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lo0/b;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ef504.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ef50a.  if v2 == 0 then goto L4ef558;
  #L4ef50e.  if v4 == 0 then goto L4ef558;
  #L4ef512.  if v3 < 0 then goto L4ef548;
  #L4ef516.  v0:= `@@o0.c.a` @type ^`java.nio.charset.Charset` @kind object;
  #L4ef51a.  call temp:= `equals`(v4, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ef520.  v0:= temp;
  #L4ef522.  if v0 == 0 then goto L4ef538;
  #L4ef526.  v1.`o0.b.a` @type ^`java.io.InputStream` := v2 @kind object;
  #L4ef52a.  v1.`o0.b.b` @type ^`java.nio.charset.Charset` := v4 @kind object;
  #L4ef52e.  v2:= new `byte`[v3];
  #L4ef532.  v1.`o0.b.c` @type ^`byte`[] := v2 @kind object;
  #L4ef536.  return @kind void;
  #L4ef538.  v2:= new `java.lang.IllegalArgumentException`;
  #L4ef53c.  v3:= "Unsupported encoding" @kind object;
  #L4ef540.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ef546.  throw v2;
  #L4ef548.  v2:= new `java.lang.IllegalArgumentException`;
  #L4ef54c.  v3:= "capacity <= 0" @kind object;
  #L4ef550.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ef556.  throw v2;
  #L4ef558.  v2:= 0I;
  #L4ef55a.  throw v2;
}
procedure `void` `<init>`(`o0.b` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lo0/b;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ef56c.  v0:= 8192I;
  #L4ef570.  call `<init>`(v1, v2, v0, v3) @signature `Lo0/b;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @kind direct;
  #L4ef576.  return @kind void;
}
procedure `java.nio.charset.Charset` `g`(`o0.b` v0 @kind object) @signature `Lo0/b;.g:(Lo0/b;)Ljava/nio/charset/Charset;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4ef4ec.  v0:= v0.`o0.b.b` @type ^`java.nio.charset.Charset` @kind object;
  #L4ef4f0.  return v0 @kind object;
}
procedure `void` `h`(`o0.b` v4 @kind this) @signature `Lo0/b;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ef5cc.  v0:= v4.`o0.b.a` @type ^`java.io.InputStream` @kind object;
  #L4ef5d0.  v1:= v4.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef5d4.  v2:= length @variable v1;
  #L4ef5d6.  v3:= 0I;
  #L4ef5d8.  call temp:= `read`(v0, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L4ef5de.  v0:= temp;
  #L4ef5e0.  v1:= -1I;
  #L4ef5e2.  if v0 == v1 then goto L4ef5f0;
  #L4ef5e6.  v4.`o0.b.d` @type ^`int` := v3;
  #L4ef5ea.  v4.`o0.b.e` @type ^`int` := v0;
  #L4ef5ee.  return @kind void;
  #L4ef5f0.  v0:= new `java.io.EOFException`;
  #L4ef5f4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4ef5fa.  throw v0;
}
procedure `java.lang.String` `K`(`o0.b` v7 @kind this) @signature `Lo0/b;.K:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ef3bc.  v0:= v7.`o0.b.a` @type ^`java.io.InputStream` @kind object;
  #L4ef3c0.  @monitorenter v0
  #L4ef3c2.  v1:= v7.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef3c6.  if v1 == 0 then goto L4ef4ba;
  #L4ef3ca.  v1:= v7.`o0.b.d` @type ^`int`;
  #L4ef3ce.  v2:= v7.`o0.b.e` @type ^`int`;
  #L4ef3d2.  if v1 < v2 then goto L4ef3dc;
  #L4ef3d6.  call `h`(v7) @signature `Lo0/b;.h:()V` @kind direct;
  #L4ef3dc.  v1:= v7.`o0.b.d` @type ^`int`;
  #L4ef3e0.  v2:= v7.`o0.b.e` @type ^`int`;
  #L4ef3e4.  v3:= 10I;
  #L4ef3e8.  if v1 == v2 then goto L4ef43e;
  #L4ef3ec.  v2:= v7.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef3f0.  v4:= v2[v1] @kind byte;
  #L4ef3f4.  if v4 != v3 then goto L4ef438;
  #L4ef3f8.  v3:= v7.`o0.b.d` @type ^`int`;
  #L4ef3fc.  if v1 == v3 then goto L4ef412;
  #L4ef400.  v4:= v1 + -1;
  #L4ef404.  v5:= v2[v4] @kind byte;
  #L4ef408.  v6:= 13I;
  #L4ef40c.  if v5 != v6 then goto L4ef412;
  #L4ef410.  goto L4ef414;
  #L4ef412.  v4:= v1;
  #L4ef414.  v5:= new `java.lang.String`;
  #L4ef418.  v4:= v4 - v3 @kind int;
  #L4ef41a.  v6:= v7.`o0.b.b` @type ^`java.nio.charset.Charset` @kind object;
  #L4ef41e.  call temp:= `name`(v6) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L4ef424.  v6:= temp @kind object;
  #L4ef426.  call `<init>`(v5, v2, v3, v4, v6) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L4ef42c.  v1:= v1 + 1;
  #L4ef430.  v7.`o0.b.d` @type ^`int` := v1;
  #L4ef434.  @monitorexit v0
  #L4ef436.  return v5 @kind object;
  #L4ef438.  v1:= v1 + 1;
  #L4ef43c.  goto L4ef3e0;
  #L4ef43e.  v1:= new `o0.b$a`;
  #L4ef442.  v2:= v7.`o0.b.e` @type ^`int`;
  #L4ef446.  v4:= v7.`o0.b.d` @type ^`int`;
  #L4ef44a.  v2:= v2 - v4 @kind int;
  #L4ef44c.  v2:= v2 + 80;
  #L4ef450.  call `<init>`(v1, v7, v2) @signature `Lo0/b$a;.<init>:(Lo0/b;I)V` @kind direct;
  #L4ef456.  v2:= v7.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef45a.  v4:= v7.`o0.b.d` @type ^`int`;
  #L4ef45e.  v5:= v7.`o0.b.e` @type ^`int`;
  #L4ef462.  v5:= v5 - v4 @kind int;
  #L4ef464.  call `write`(v1, v2, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4ef46a.  v2:= -1I;
  #L4ef46c.  v7.`o0.b.e` @type ^`int` := v2;
  #L4ef470.  call `h`(v7) @signature `Lo0/b;.h:()V` @kind direct;
  #L4ef476.  v2:= v7.`o0.b.d` @type ^`int`;
  #L4ef47a.  v4:= v7.`o0.b.e` @type ^`int`;
  #L4ef47e.  if v2 == v4 then goto L4ef456;
  #L4ef482.  v4:= v7.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef486.  v5:= v4[v2] @kind byte;
  #L4ef48a.  if v5 != v3 then goto L4ef4b4;
  #L4ef48e.  v3:= v7.`o0.b.d` @type ^`int`;
  #L4ef492.  if v2 == v3 then goto L4ef4a0;
  #L4ef496.  v5:= v2 - v3 @kind int;
  #L4ef49a.  call `write`(v1, v4, v3, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4ef4a0.  v2:= v2 + 1;
  #L4ef4a4.  v7.`o0.b.d` @type ^`int` := v2;
  #L4ef4a8.  call temp:= `toString`(v1) @signature `Ljava/io/ByteArrayOutputStream;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ef4ae.  v1:= temp @kind object;
  #L4ef4b0.  @monitorexit v0
  #L4ef4b2.  return v1 @kind object;
  #L4ef4b4.  v2:= v2 + 1;
  #L4ef4b8.  goto L4ef47a;
  #L4ef4ba.  v1:= new `java.io.IOException`;
  #L4ef4be.  v2:= "LineReader is closed" @kind object;
  #L4ef4c2.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ef4c8.  throw v1;
  #L4ef4ca.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef4cc.  @monitorexit v0
  #L4ef4ce.  throw v1;
  catch `java.lang.Throwable` @[L4ef3c2..L4ef4ce] goto L4ef4ca;
}
procedure `void` `close`(`o0.b` v2 @kind this) @signature `Lo0/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef588.  v0:= v2.`o0.b.a` @type ^`java.io.InputStream` @kind object;
  #L4ef58c.  @monitorenter v0
  #L4ef58e.  v1:= v2.`o0.b.c` @type ^`byte`[] @kind object;
  #L4ef592.  if v1 == 0 then goto L4ef5a6;
  #L4ef596.  v1:= 0I;
  #L4ef598.  v2.`o0.b.c` @type ^`byte`[] := v1 @kind object;
  #L4ef59c.  v1:= v2.`o0.b.a` @type ^`java.io.InputStream` @kind object;
  #L4ef5a0.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L4ef5a6.  @monitorexit v0
  #L4ef5a8.  return @kind void;
  #L4ef5aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef5ac.  @monitorexit v0
  #L4ef5ae.  throw v1;
  catch `java.lang.Throwable` @[L4ef58e..L4ef5ae] goto L4ef5aa;
}
procedure `boolean` `s`(`o0.b` v2 @kind this) @signature `Lo0/b;.s:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef398.  v0:= v2.`o0.b.e` @type ^`int`;
  #L4ef39c.  v1:= -1I;
  #L4ef39e.  if v0 != v1 then goto L4ef3a6;
  #L4ef3a2.  v0:= 1I;
  #L4ef3a4.  goto L4ef3a8;
  #L4ef3a6.  v0:= 0I;
  #L4ef3a8.  return v0;
}
