record `e0.a$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class, `java.io.DataInput` @kind interface {
  `java.io.DataInputStream` `e0.a$a.a` @AccessFlag PRIVATE;
  `java.nio.ByteOrder` `e0.a$a.b` @AccessFlag PRIVATE;
  `int` `e0.a$a.c` @AccessFlag FINAL;
  `int` `e0.a$a.d` @AccessFlag ;
}
global `java.nio.ByteOrder` `@@e0.a$a.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.ByteOrder` `@@e0.a$a.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Le0/a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dfe84.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe88.  `@@e0.a$a.e` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L4dfe8c.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe90.  `@@e0.a$a.f` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L4dfe94.  return @kind void;
}
procedure `void` `<init>`(`e0.a$a` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Le0/a$a;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dfecc.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L4dfed2.  v0:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfed6.  v1.`e0.a$a.b` @type ^`java.nio.ByteOrder` := v0 @kind object;
  #L4dfeda.  v0:= new `java.io.DataInputStream`;
  #L4dfede.  call `<init>`(v0, v2) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4dfee4.  v1.`e0.a$a.a` @type ^`java.io.DataInputStream` := v0 @kind object;
  #L4dfee8.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L4dfeee.  v2:= temp;
  #L4dfef0.  v1.`e0.a$a.c` @type ^`int` := v2;
  #L4dfef4.  v0:= 0I;
  #L4dfef6.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4dfefa.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfefe.  call `mark`(v0, v2) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L4dff04.  return @kind void;
}
procedure `void` `<init>`(`e0.a$a` v1 @kind this, `byte`[] v2 @kind object) @signature `Le0/a$a;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4dfea8.  v0:= new `java.io.ByteArrayInputStream`;
  #L4dfeac.  call `<init>`(v0, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L4dfeb2.  call `<init>`(v1, v0) @signature `Le0/a$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4dfeb8.  return @kind void;
}
procedure `void` `K`(`e0.a$a` v0 @kind this, `java.nio.ByteOrder` v1 @kind object) @signature `Le0/a$a;.K:(Ljava/nio/ByteOrder;)V` @AccessFlag PUBLIC {
    temp;

  #L4e0024.  v0.`e0.a$a.b` @type ^`java.nio.ByteOrder` := v1 @kind object;
  #L4e0028.  return @kind void;
}
procedure `int` `available`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df938.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df93c.  call temp:= `available`(v0) @signature `Ljava/io/DataInputStream;.available:()I` @kind virtual;
  #L4df942.  v0:= temp;
  #L4df944.  return v0;
}
procedure `int` `g`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df958.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4df95c.  return v0;
}
procedure `long` `h`(`e0.a$a` v4 @kind this) @signature `Le0/a$a;.h:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dfda4.  call temp:= `readInt`(v4) @signature `Le0/a$a;.readInt:()I` @kind virtual;
  #L4dfdaa.  v0:= temp;
  #L4dfdac.  v0:= (`long`) v0 @kind i2l;
  #L4dfdae.  v2:= 4294967295L;
  #L4dfdb8.  v0:= v0 ^& v2 @kind long;
  #L4dfdba.  return v0 @kind wide;
}
procedure `int` `read`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df970.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4df974.  v0:= v0 + 1;
  #L4df978.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4df97c.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df980.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4df986.  v0:= temp;
  #L4df988.  return v0;
}
procedure `int` `read`(`e0.a$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Le0/a$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df99c.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df9a0.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L4df9a6.  v2:= temp;
  #L4df9a8.  v3:= v1.`e0.a$a.d` @type ^`int`;
  #L4df9ac.  v3:= v3 + v2 @kind int;
  #L4df9ae.  v1.`e0.a$a.d` @type ^`int` := v3;
  #L4df9b2.  return v2;
}
procedure `boolean` `readBoolean`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df848.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4df84c.  v0:= v0 + 1;
  #L4df850.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4df854.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df858.  call temp:= `readBoolean`(v0) @signature `Ljava/io/DataInputStream;.readBoolean:()Z` @kind virtual;
  #L4df85e.  v0:= temp;
  #L4df860.  return v0;
}
procedure `byte` `readByte`(`e0.a$a` v2 @kind this) @signature `Le0/a$a;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df874.  v0:= v2.`e0.a$a.d` @type ^`int`;
  #L4df878.  v0:= v0 + 1;
  #L4df87c.  v2.`e0.a$a.d` @type ^`int` := v0;
  #L4df880.  v1:= v2.`e0.a$a.c` @type ^`int`;
  #L4df884.  if v0 > v1 then goto L4df8a8;
  #L4df888.  v0:= v2.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df88c.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4df892.  v0:= temp;
  #L4df894.  if v0 < 0 then goto L4df89c;
  #L4df898.  v0:= (`byte`) v0 @kind i2b;
  #L4df89a.  return v0;
  #L4df89c.  v0:= new `java.io.EOFException`;
  #L4df8a0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4df8a6.  throw v0;
  #L4df8a8.  v0:= new `java.io.EOFException`;
  #L4df8ac.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4df8b2.  throw v0;
}
procedure `char` `readChar`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df8c4.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4df8c8.  v0:= v0 + 2;
  #L4df8cc.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4df8d0.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df8d4.  call temp:= `readChar`(v0) @signature `Ljava/io/DataInputStream;.readChar:()C` @kind virtual;
  #L4df8da.  v0:= temp;
  #L4df8dc.  return v0;
}
procedure `double` `readDouble`(`e0.a$a` v2 @kind this) @signature `Le0/a$a;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4df8f0.  call temp:= `readLong`(v2) @signature `Le0/a$a;.readLong:()J` @kind virtual;
  #L4df8f6.  v0:= temp @kind wide;
  #L4df8f8.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L4df8fe.  v0:= temp @kind wide;
  #L4df900.  return v0 @kind wide;
}
procedure `float` `readFloat`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4df914.  call temp:= `readInt`(v1) @signature `Le0/a$a;.readInt:()I` @kind virtual;
  #L4df91a.  v0:= temp;
  #L4df91c.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L4df922.  v0:= temp;
  #L4df924.  return v0;
}
procedure `void` `readFully`(`e0.a$a` v3 @kind this, `byte`[] v4 @kind object) @signature `Le0/a$a;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4dff18.  v0:= v3.`e0.a$a.d` @type ^`int`;
  #L4dff1c.  v1:= length @variable v4;
  #L4dff1e.  v0:= v0 + v1 @kind int;
  #L4dff20.  v3.`e0.a$a.d` @type ^`int` := v0;
  #L4dff24.  v1:= v3.`e0.a$a.c` @type ^`int`;
  #L4dff28.  if v0 > v1 then goto L4dff54;
  #L4dff2c.  v0:= v3.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dff30.  v1:= 0I;
  #L4dff32.  v2:= length @variable v4;
  #L4dff34.  call temp:= `read`(v0, v4, v1, v2) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L4dff3a.  v0:= temp;
  #L4dff3c.  v4:= length @variable v4;
  #L4dff3e.  if v0 != v4 then goto L4dff44;
  #L4dff42.  return @kind void;
  #L4dff44.  v4:= new `java.io.IOException`;
  #L4dff48.  v0:= "Couldn't read up to the length of buffer" @kind object;
  #L4dff4c.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dff52.  throw v4;
  #L4dff54.  v4:= new `java.io.EOFException`;
  #L4dff58.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dff5e.  throw v4;
}
procedure `void` `readFully`(`e0.a$a` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Le0/a$a;.readFully:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4dff70.  v0:= v2.`e0.a$a.d` @type ^`int`;
  #L4dff74.  v0:= v0 + v5 @kind int;
  #L4dff76.  v2.`e0.a$a.d` @type ^`int` := v0;
  #L4dff7a.  v1:= v2.`e0.a$a.c` @type ^`int`;
  #L4dff7e.  if v0 > v1 then goto L4dffa4;
  #L4dff82.  v0:= v2.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dff86.  call temp:= `read`(v0, v3, v4, v5) @signature `Ljava/io/DataInputStream;.read:([BII)I` @kind virtual;
  #L4dff8c.  v3:= temp;
  #L4dff8e.  if v3 != v5 then goto L4dff94;
  #L4dff92.  return @kind void;
  #L4dff94.  v3:= new `java.io.IOException`;
  #L4dff98.  v4:= "Couldn't read up to the length of buffer" @kind object;
  #L4dff9c.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dffa2.  throw v3;
  #L4dffa4.  v3:= new `java.io.EOFException`;
  #L4dffa8.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dffae.  throw v3;
}
procedure `int` `readInt`(`e0.a$a` v6 @kind this) @signature `Le0/a$a;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4df9c4.  v0:= v6.`e0.a$a.d` @type ^`int`;
  #L4df9c8.  v0:= v0 + 4;
  #L4df9cc.  v6.`e0.a$a.d` @type ^`int` := v0;
  #L4df9d0.  v1:= v6.`e0.a$a.c` @type ^`int`;
  #L4df9d4.  if v0 > v1 then goto L4dfa8e;
  #L4df9d8.  v0:= v6.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df9dc.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4df9e2.  v0:= temp;
  #L4df9e4.  v1:= v6.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df9e8.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4df9ee.  v1:= temp;
  #L4df9f0.  v2:= v6.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4df9f4.  call temp:= `read`(v2) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4df9fa.  v2:= temp;
  #L4df9fc.  v3:= v6.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfa00.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfa06.  v3:= temp;
  #L4dfa08.  v4:= v0 ^| v1 @kind int;
  #L4dfa0c.  v4:= v4 ^| v2 @kind int;
  #L4dfa0e.  v4:= v4 ^| v3 @kind int;
  #L4dfa10.  if v4 < 0 then goto L4dfa82;
  #L4dfa14.  v4:= v6.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfa18.  v5:= `@@e0.a$a.e` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfa1c.  if v4 != v5 then goto L4dfa34;
  #L4dfa20.  v3:= v3 ^< 24;
  #L4dfa24.  v2:= v2 ^< 16;
  #L4dfa28.  v3:= v3 + v2 @kind int;
  #L4dfa2a.  v1:= v1 ^< 8;
  #L4dfa2e.  v3:= v3 + v1 @kind int;
  #L4dfa30.  v3:= v3 + v0 @kind int;
  #L4dfa32.  return v3;
  #L4dfa34.  v5:= `@@e0.a$a.f` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfa38.  if v4 != v5 then goto L4dfa50;
  #L4dfa3c.  v0:= v0 ^< 24;
  #L4dfa40.  v1:= v1 ^< 16;
  #L4dfa44.  v0:= v0 + v1 @kind int;
  #L4dfa46.  v1:= v2 ^< 8;
  #L4dfa4a.  v0:= v0 + v1 @kind int;
  #L4dfa4c.  v0:= v0 + v3 @kind int;
  #L4dfa4e.  return v0;
  #L4dfa50.  v0:= new `java.io.IOException`;
  #L4dfa54.  v1:= new `java.lang.StringBuilder`;
  #L4dfa58.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfa5e.  v2:= "Invalid byte order: " @kind object;
  #L4dfa62.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfa68.  v2:= v6.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfa6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfa72.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfa78.  v1:= temp @kind object;
  #L4dfa7a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfa80.  throw v0;
  #L4dfa82.  v0:= new `java.io.EOFException`;
  #L4dfa86.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfa8c.  throw v0;
  #L4dfa8e.  v0:= new `java.io.EOFException`;
  #L4dfa92.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfa98.  throw v0;
}
procedure `java.lang.String` `readLine`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readLine:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfbd4.  v0:= 0I;
  #L4dfbd6.  return v0 @kind object;
}
procedure `long` `readLong`(`e0.a$a` v19 @kind this) @signature `Le0/a$a;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4dfc14.  v0:= v19 @kind object;
  #L4dfc18.  v1:= v0.`e0.a$a.d` @type ^`int`;
  #L4dfc1c.  v2:= 8I;
  #L4dfc20.  v1:= v1 + v2 @kind int;
  #L4dfc22.  v0.`e0.a$a.d` @type ^`int` := v1;
  #L4dfc26.  v3:= v0.`e0.a$a.c` @type ^`int`;
  #L4dfc2a.  if v1 > v3 then goto L4dfd86;
  #L4dfc2e.  v1:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc32.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc38.  v1:= temp;
  #L4dfc3a.  v3:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc3e.  call temp:= `read`(v3) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc44.  v3:= temp;
  #L4dfc46.  v4:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc4a.  call temp:= `read`(v4) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc50.  v4:= temp;
  #L4dfc52.  v5:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc56.  call temp:= `read`(v5) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc5c.  v5:= temp;
  #L4dfc5e.  v6:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc62.  call temp:= `read`(v6) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc68.  v6:= temp;
  #L4dfc6a.  v7:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc6e.  call temp:= `read`(v7) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc74.  v7:= temp;
  #L4dfc76.  v8:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc7a.  call temp:= `read`(v8) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc80.  v8:= temp;
  #L4dfc82.  v9:= v0.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfc86.  call temp:= `read`(v9) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfc8c.  v9:= temp;
  #L4dfc8e.  v10:= v1 ^| v3 @kind int;
  #L4dfc92.  v10:= v10 ^| v4 @kind int;
  #L4dfc94.  v10:= v10 ^| v5 @kind int;
  #L4dfc96.  v10:= v10 ^| v6 @kind int;
  #L4dfc98.  v10:= v10 ^| v7 @kind int;
  #L4dfc9a.  v10:= v10 ^| v8 @kind int;
  #L4dfc9c.  v10:= v10 ^| v9 @kind int;
  #L4dfc9e.  if v10 < 0 then goto L4dfd7a;
  #L4dfca2.  v10:= v0.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfca6.  v11:= `@@e0.a$a.e` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfcaa.  v12:= 16I;
  #L4dfcae.  v13:= 24I;
  #L4dfcb2.  v14:= 32I;
  #L4dfcb6.  v15:= 40I;
  #L4dfcba.  v16:= 48I;
  #L4dfcbe.  v17:= 56I;
  #L4dfcc2.  if v10 != v11 then goto L4dfd04;
  #L4dfcc6.  v9:= (`long`) v9 @kind i2l;
  #L4dfcc8.  v9:= v9 ^< v17 @kind long;
  #L4dfccc.  v18:= v3;
  #L4dfcd0.  v2:= (`long`) v8 @kind i2l;
  #L4dfcd2.  v2:= v2 ^< v16 @kind long;
  #L4dfcd6.  v9:= v9 + v2 @kind long;
  #L4dfcd8.  v2:= (`long`) v7 @kind i2l;
  #L4dfcda.  v2:= v2 ^< v15 @kind long;
  #L4dfcdc.  v9:= v9 + v2 @kind long;
  #L4dfcde.  v2:= (`long`) v6 @kind i2l;
  #L4dfce0.  v2:= v2 ^< v14 @kind long;
  #L4dfce2.  v9:= v9 + v2 @kind long;
  #L4dfce4.  v2:= (`long`) v5 @kind i2l;
  #L4dfce6.  v2:= v2 ^< v13 @kind long;
  #L4dfce8.  v9:= v9 + v2 @kind long;
  #L4dfcea.  v2:= (`long`) v4 @kind i2l;
  #L4dfcec.  v2:= v2 ^< v12 @kind long;
  #L4dfcee.  v9:= v9 + v2 @kind long;
  #L4dfcf0.  v2:= v18;
  #L4dfcf4.  v2:= (`long`) v2 @kind i2l;
  #L4dfcf6.  v4:= 8I;
  #L4dfcfa.  v2:= v2 ^< v4 @kind long;
  #L4dfcfc.  v9:= v9 + v2 @kind long;
  #L4dfcfe.  v1:= (`long`) v1 @kind i2l;
  #L4dfd00.  v9:= v9 + v1 @kind long;
  #L4dfd02.  return v9 @kind wide;
  #L4dfd04.  v2:= v3;
  #L4dfd06.  v3:= `@@e0.a$a.f` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfd0a.  if v10 != v3 then goto L4dfd48;
  #L4dfd0e.  v11:= (`long`) v1 @kind i2l;
  #L4dfd10.  v11:= v11 ^< v17 @kind long;
  #L4dfd14.  v1:= (`long`) v2 @kind i2l;
  #L4dfd16.  v1:= v1 ^< v16 @kind long;
  #L4dfd1a.  v11:= v11 + v1 @kind long;
  #L4dfd1c.  v1:= (`long`) v4 @kind i2l;
  #L4dfd1e.  v1:= v1 ^< v15 @kind long;
  #L4dfd20.  v11:= v11 + v1 @kind long;
  #L4dfd22.  v1:= (`long`) v5 @kind i2l;
  #L4dfd24.  v1:= v1 ^< v14 @kind long;
  #L4dfd26.  v11:= v11 + v1 @kind long;
  #L4dfd28.  v1:= (`long`) v6 @kind i2l;
  #L4dfd2a.  v1:= v1 ^< v13 @kind long;
  #L4dfd2c.  v11:= v11 + v1 @kind long;
  #L4dfd2e.  v1:= (`long`) v7 @kind i2l;
  #L4dfd30.  v4:= 16I;
  #L4dfd34.  v1:= v1 ^< v4 @kind long;
  #L4dfd36.  v11:= v11 + v1 @kind long;
  #L4dfd38.  v1:= (`long`) v8 @kind i2l;
  #L4dfd3a.  v3:= 8I;
  #L4dfd3e.  v1:= v1 ^< v3 @kind long;
  #L4dfd40.  v11:= v11 + v1 @kind long;
  #L4dfd42.  v1:= (`long`) v9 @kind i2l;
  #L4dfd44.  v11:= v11 + v1 @kind long;
  #L4dfd46.  return v11 @kind wide;
  #L4dfd48.  v1:= new `java.io.IOException`;
  #L4dfd4c.  v2:= new `java.lang.StringBuilder`;
  #L4dfd50.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfd56.  v3:= "Invalid byte order: " @kind object;
  #L4dfd5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfd60.  v3:= v0.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfd64.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfd6a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfd70.  v2:= temp @kind object;
  #L4dfd72.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfd78.  throw v1;
  #L4dfd7a.  v1:= new `java.io.EOFException`;
  #L4dfd7e.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfd84.  throw v1;
  #L4dfd86.  v1:= new `java.io.EOFException`;
  #L4dfd8a.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfd90.  throw v1;
}
procedure `short` `readShort`(`e0.a$a` v4 @kind this) @signature `Le0/a$a;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dfdcc.  v0:= v4.`e0.a$a.d` @type ^`int`;
  #L4dfdd0.  v0:= v0 + 2;
  #L4dfdd4.  v4.`e0.a$a.d` @type ^`int` := v0;
  #L4dfdd8.  v1:= v4.`e0.a$a.c` @type ^`int`;
  #L4dfddc.  if v0 > v1 then goto L4dfe66;
  #L4dfde0.  v0:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfde4.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfdea.  v0:= temp;
  #L4dfdec.  v1:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfdf0.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfdf6.  v1:= temp;
  #L4dfdf8.  v2:= v0 ^| v1 @kind int;
  #L4dfdfc.  if v2 < 0 then goto L4dfe5a;
  #L4dfe00.  v2:= v4.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe04.  v3:= `@@e0.a$a.e` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe08.  if v2 != v3 then goto L4dfe16;
  #L4dfe0c.  v1:= v1 ^< 8;
  #L4dfe10.  v1:= v1 + v0 @kind int;
  #L4dfe12.  v0:= (`short`) v1 @kind i2s;
  #L4dfe14.  return v0;
  #L4dfe16.  v3:= `@@e0.a$a.f` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe1a.  if v2 != v3 then goto L4dfe28;
  #L4dfe1e.  v0:= v0 ^< 8;
  #L4dfe22.  v0:= v0 + v1 @kind int;
  #L4dfe24.  v0:= (`short`) v0 @kind i2s;
  #L4dfe26.  return v0;
  #L4dfe28.  v0:= new `java.io.IOException`;
  #L4dfe2c.  v1:= new `java.lang.StringBuilder`;
  #L4dfe30.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfe36.  v2:= "Invalid byte order: " @kind object;
  #L4dfe3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfe40.  v2:= v4.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfe44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfe4a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfe50.  v1:= temp @kind object;
  #L4dfe52.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfe58.  throw v0;
  #L4dfe5a.  v0:= new `java.io.EOFException`;
  #L4dfe5e.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfe64.  throw v0;
  #L4dfe66.  v0:= new `java.io.EOFException`;
  #L4dfe6a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfe70.  throw v0;
}
procedure `java.lang.String` `readUTF`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readUTF:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfbe8.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4dfbec.  v0:= v0 + 2;
  #L4dfbf0.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4dfbf4.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfbf8.  call temp:= `readUTF`(v0) @signature `Ljava/io/DataInputStream;.readUTF:()Ljava/lang/String;` @kind virtual;
  #L4dfbfe.  v0:= temp @kind object;
  #L4dfc00.  return v0 @kind object;
}
procedure `int` `readUnsignedByte`(`e0.a$a` v1 @kind this) @signature `Le0/a$a;.readUnsignedByte:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4dfaac.  v0:= v1.`e0.a$a.d` @type ^`int`;
  #L4dfab0.  v0:= v0 + 1;
  #L4dfab4.  v1.`e0.a$a.d` @type ^`int` := v0;
  #L4dfab8.  v0:= v1.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfabc.  call temp:= `readUnsignedByte`(v0) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L4dfac2.  v0:= temp;
  #L4dfac4.  return v0;
}
procedure `int` `readUnsignedShort`(`e0.a$a` v4 @kind this) @signature `Le0/a$a;.readUnsignedShort:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dfad8.  v0:= v4.`e0.a$a.d` @type ^`int`;
  #L4dfadc.  v0:= v0 + 2;
  #L4dfae0.  v4.`e0.a$a.d` @type ^`int` := v0;
  #L4dfae4.  v1:= v4.`e0.a$a.c` @type ^`int`;
  #L4dfae8.  if v0 > v1 then goto L4dfb6e;
  #L4dfaec.  v0:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfaf0.  call temp:= `read`(v0) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfaf6.  v0:= temp;
  #L4dfaf8.  v1:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfafc.  call temp:= `read`(v1) @signature `Ljava/io/DataInputStream;.read:()I` @kind virtual;
  #L4dfb02.  v1:= temp;
  #L4dfb04.  v2:= v0 ^| v1 @kind int;
  #L4dfb08.  if v2 < 0 then goto L4dfb62;
  #L4dfb0c.  v2:= v4.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfb10.  v3:= `@@e0.a$a.e` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfb14.  if v2 != v3 then goto L4dfb20;
  #L4dfb18.  v1:= v1 ^< 8;
  #L4dfb1c.  v1:= v1 + v0 @kind int;
  #L4dfb1e.  return v1;
  #L4dfb20.  v3:= `@@e0.a$a.f` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfb24.  if v2 != v3 then goto L4dfb30;
  #L4dfb28.  v0:= v0 ^< 8;
  #L4dfb2c.  v0:= v0 + v1 @kind int;
  #L4dfb2e.  return v0;
  #L4dfb30.  v0:= new `java.io.IOException`;
  #L4dfb34.  v1:= new `java.lang.StringBuilder`;
  #L4dfb38.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4dfb3e.  v2:= "Invalid byte order: " @kind object;
  #L4dfb42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfb48.  v2:= v4.`e0.a$a.b` @type ^`java.nio.ByteOrder` @kind object;
  #L4dfb4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4dfb52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4dfb58.  v1:= temp @kind object;
  #L4dfb5a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4dfb60.  throw v0;
  #L4dfb62.  v0:= new `java.io.EOFException`;
  #L4dfb66.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfb6c.  throw v0;
  #L4dfb6e.  v0:= new `java.io.EOFException`;
  #L4dfb72.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L4dfb78.  throw v0;
}
procedure `void` `s`(`e0.a$a` v4 @kind this, `long` v5 ) @signature `Le0/a$a;.s:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dffc0.  v0:= v4.`e0.a$a.d` @type ^`int`;
  #L4dffc4.  v1:= (`long`) v0 @kind i2l;
  #L4dffc6.  v3:= lcmp(v1, v5);
  #L4dffca.  if v3 <= 0 then goto L4dffee;
  #L4dffce.  v0:= 0I;
  #L4dffd0.  v4.`e0.a$a.d` @type ^`int` := v0;
  #L4dffd4.  v0:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dffd8.  call `reset`(v0) @signature `Ljava/io/DataInputStream;.reset:()V` @kind virtual;
  #L4dffde.  v0:= v4.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dffe2.  v1:= v4.`e0.a$a.c` @type ^`int`;
  #L4dffe6.  call `mark`(v0, v1) @signature `Ljava/io/DataInputStream;.mark:(I)V` @kind virtual;
  #L4dffec.  goto L4dfff2;
  #L4dffee.  v0:= (`long`) v0 @kind i2l;
  #L4dfff0.  v5:= v5 - v0 @kind long;
  #L4dfff2.  v6:= (`int`) v5 @kind l2i;
  #L4dfff4.  call temp:= `skipBytes`(v4, v6) @signature `Le0/a$a;.skipBytes:(I)I` @kind virtual;
  #L4dfffa.  v5:= temp;
  #L4dfffc.  if v5 != v6 then goto L4e0002;
  #L4e0000.  return @kind void;
  #L4e0002.  v5:= new `java.io.IOException`;
  #L4e0006.  v6:= "Couldn't seek up to the byteCount" @kind object;
  #L4e000a.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e0010.  throw v5;
}
procedure `int` `skipBytes`(`e0.a$a` v3 @kind this, `int` v4 ) @signature `Le0/a$a;.skipBytes:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4dfb8c.  v0:= v3.`e0.a$a.c` @type ^`int`;
  #L4dfb90.  v1:= v3.`e0.a$a.d` @type ^`int`;
  #L4dfb94.  v0:= v0 - v1 @kind int;
  #L4dfb96.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4dfb9c.  v4:= temp;
  #L4dfb9e.  v0:= 0I;
  #L4dfba0.  if v0 >= v4 then goto L4dfbb8;
  #L4dfba4.  v1:= v3.`e0.a$a.a` @type ^`java.io.DataInputStream` @kind object;
  #L4dfba8.  v2:= v4 - v0 @kind int;
  #L4dfbac.  call temp:= `skipBytes`(v1, v2) @signature `Ljava/io/DataInputStream;.skipBytes:(I)I` @kind virtual;
  #L4dfbb2.  v1:= temp;
  #L4dfbb4.  v0:= v0 + v1 @kind int;
  #L4dfbb6.  goto L4dfba0;
  #L4dfbb8.  v4:= v3.`e0.a$a.d` @type ^`int`;
  #L4dfbbc.  v4:= v4 + v0 @kind int;
  #L4dfbbe.  v3.`e0.a$a.d` @type ^`int` := v4;
  #L4dfbc2.  return v0;
}
