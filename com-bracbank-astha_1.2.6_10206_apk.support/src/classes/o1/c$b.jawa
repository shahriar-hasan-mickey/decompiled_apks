record `o1.c$b` @kind class @AccessFlag  extends `o1.c` @kind class {
  `boolean` `o1.c$b.a` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`o1.c$b` v1 @kind this) @signature `Lo1/c$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4efa28.  v0:= 0I;
  #L4efa2a.  call `<init>`(v1, v0) @signature `Lo1/c;.<init>:(Lo1/c$a;)V` @kind direct;
  #L4efa30.  return @kind void;
}
procedure `void` `b`(`o1.c$b` v0 @kind this, `boolean` v1 ) @signature `Lo1/c$b;.b:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4efa44.  v0.`o1.c$b.a` @type ^`boolean` := v1 @kind boolean;
  #L4efa48.  return @kind void;
}
procedure `void` `c`(`o1.c$b` v2 @kind this) @signature `Lo1/c$b;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4efa5c.  v0:= v2.`o1.c$b.a` @type ^`boolean` @kind boolean;
  #L4efa60.  if v0 != 0 then goto L4efa66;
  #L4efa64.  return @kind void;
  #L4efa66.  v0:= new `java.lang.IllegalStateException`;
  #L4efa6a.  v1:= "Already released" @kind object;
  #L4efa6e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4efa74.  throw v0;
}
