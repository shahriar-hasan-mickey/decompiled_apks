record `x0.j$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `x0.j$a.a` @AccessFlag PRIVATE;
  `java.util.Map` `x0.j$a.b` @AccessFlag PRIVATE;
  `boolean` `x0.j$a.c` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@x0.j$a.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Map` `@@x0.j$a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx0/j$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L501e44.  call temp:= `g`() @signature `Lx0/j$a;.g:()Ljava/lang/String;` @kind static;
  #L501e4a.  v0:= temp @kind object;
  #L501e4c.  `@@x0.j$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L501e50.  v1:= new `java.util.HashMap`;
  #L501e54.  v2:= 2I;
  #L501e56.  call `<init>`(v1, v2) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L501e5c.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L501e62.  v2:= temp;
  #L501e64.  if v2 != 0 then goto L501e84;
  #L501e68.  v2:= new `x0.j$b`;
  #L501e6c.  call `<init>`(v2, v0) @signature `Lx0/j$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501e72.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L501e78.  v0:= temp @kind object;
  #L501e7a.  v2:= "User-Agent" @kind object;
  #L501e7e.  call temp:= `put`(v1, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L501e84.  call temp:= `unmodifiableMap`(v1) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L501e8a.  v0:= temp @kind object;
  #L501e8c.  `@@x0.j$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L501e90.  return @kind void;
}
procedure `void` `<init>`(`x0.j$a` v2 @kind this) @signature `Lx0/j$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L501ea4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L501eaa.  v0:= 1I;
  #L501eac.  v2.`x0.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L501eb0.  v1:= `@@x0.j$a.e` @type ^`java.util.Map` @kind object;
  #L501eb4.  v2.`x0.j$a.b` @type ^`java.util.Map` := v1 @kind object;
  #L501eb8.  v2.`x0.j$a.c` @type ^`boolean` := v0 @kind boolean;
  #L501ebc.  return @kind void;
}
procedure `java.util.Map` `d`(`x0.j$a` v5 @kind this) @signature `Lx0/j$a;.d:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L501dc8.  v0:= new `java.util.HashMap`;
  #L501dcc.  v1:= v5.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501dd0.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L501dd6.  v1:= temp;
  #L501dd8.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L501dde.  v1:= v5.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501de2.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L501de8.  v1:= temp @kind object;
  #L501dea.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L501df0.  v1:= temp @kind object;
  #L501df2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L501df8.  v2:= temp;
  #L501dfa.  if v2 == 0 then goto L501e30;
  #L501dfe.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L501e04.  v2:= temp @kind object;
  #L501e06.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L501e0a.  v3:= new `java.util.ArrayList`;
  #L501e0e.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L501e14.  v4:= temp @kind object;
  #L501e16.  v4:= (`java.util.Collection`) v4 @kind object;
  #L501e1a.  call `<init>`(v3, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L501e20.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L501e26.  v2:= temp @kind object;
  #L501e28.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L501e2e.  goto L501df2;
  #L501e30.  return v0 @kind object;
}
procedure `void` `e`(`x0.j$a` v1 @kind this) @signature `Lx0/j$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L501ed0.  v0:= v1.`x0.j$a.a` @type ^`boolean` @kind boolean;
  #L501ed4.  if v0 == 0 then goto L501eea;
  #L501ed8.  v0:= 0I;
  #L501eda.  v1.`x0.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L501ede.  call temp:= `d`(v1) @signature `Lx0/j$a;.d:()Ljava/util/Map;` @kind direct;
  #L501ee4.  v0:= temp @kind object;
  #L501ee6.  v1.`x0.j$a.b` @type ^`java.util.Map` := v0 @kind object;
  #L501eea.  return @kind void;
}
procedure `java.util.List` `f`(`x0.j$a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lx0/j$a;.f:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L501d8c.  v0:= v2.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501d90.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L501d96.  v0:= temp @kind object;
  #L501d98.  v0:= (`java.util.List`) v0 @kind object;
  #L501d9c.  if v0 != 0 then goto L501db4;
  #L501da0.  v0:= new `java.util.ArrayList`;
  #L501da4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L501daa.  v1:= v2.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501dae.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L501db4.  return v0 @kind object;
}
procedure `java.lang.String` `g`() @signature `Lx0/j$a;.g:()Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L501d00.  v0:= "http.agent" @kind object;
  #L501d04.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L501d0a.  v0:= temp @kind object;
  #L501d0c.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L501d12.  v1:= temp;
  #L501d14.  if v1 == 0 then goto L501d1a;
  #L501d18.  return v0 @kind object;
  #L501d1a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L501d20.  v1:= temp;
  #L501d22.  v2:= new `java.lang.StringBuilder`;
  #L501d26.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L501d2c.  v3:= temp;
  #L501d2e.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L501d34.  v3:= 0I;
  #L501d36.  if v3 >= v1 then goto L501d72;
  #L501d3a.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L501d40.  v4:= temp;
  #L501d42.  v5:= 31I;
  #L501d46.  if v4 > v5 then goto L501d52;
  #L501d4a.  v5:= 9I;
  #L501d4e.  if v4 != v5 then goto L501d62;
  #L501d52.  v5:= 127I;
  #L501d56.  if v4 >= v5 then goto L501d62;
  #L501d5a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L501d60.  goto L501d6c;
  #L501d62.  v4:= 63I;
  #L501d66.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L501d6c.  v3:= v3 + 1;
  #L501d70.  goto L501d36;
  #L501d72.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L501d78.  v0:= temp @kind object;
  #L501d7a.  return v0 @kind object;
}
procedure `x0.j$a` `a`(`x0.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lx0/j$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lx0/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501f24.  v0:= new `x0.j$b`;
  #L501f28.  call `<init>`(v0, v3) @signature `Lx0/j$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501f2e.  call temp:= `b`(v1, v2, v0) @signature `Lx0/j$a;.b:(Ljava/lang/String;Lx0/i;)Lx0/j$a;` @kind virtual;
  #L501f34.  v2:= temp @kind object;
  #L501f36.  return v2 @kind object;
}
procedure `x0.j$a` `b`(`x0.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `x0.i` v3 @kind object) @signature `Lx0/j$a;.b:(Ljava/lang/String;Lx0/i;)Lx0/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501f48.  v0:= v1.`x0.j$a.c` @type ^`boolean` @kind boolean;
  #L501f4c.  if v0 == 0 then goto L501f6a;
  #L501f50.  v0:= "User-Agent" @kind object;
  #L501f54.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L501f5a.  v0:= temp;
  #L501f5c.  if v0 == 0 then goto L501f6a;
  #L501f60.  call temp:= `h`(v1, v2, v3) @signature `Lx0/j$a;.h:(Ljava/lang/String;Lx0/i;)Lx0/j$a;` @kind virtual;
  #L501f66.  v2:= temp @kind object;
  #L501f68.  return v2 @kind object;
  #L501f6a.  call `e`(v1) @signature `Lx0/j$a;.e:()V` @kind direct;
  #L501f70.  call temp:= `f`(v1, v2) @signature `Lx0/j$a;.f:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L501f76.  v2:= temp @kind object;
  #L501f78.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L501f7e.  return v1 @kind object;
}
procedure `x0.j` `c`(`x0.j$a` v2 @kind this) @signature `Lx0/j$a;.c:()Lx0/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L501efc.  v0:= 1I;
  #L501efe.  v2.`x0.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L501f02.  v0:= new `x0.j`;
  #L501f06.  v1:= v2.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501f0a.  call `<init>`(v0, v1) @signature `Lx0/j;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L501f10.  return v0 @kind object;
}
procedure `x0.j$a` `h`(`x0.j$a` v1 @kind this, `java.lang.String` v2 @kind object, `x0.i` v3 @kind object) @signature `Lx0/j$a;.h:(Ljava/lang/String;Lx0/i;)Lx0/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L501f90.  call `e`(v1) @signature `Lx0/j$a;.e:()V` @kind direct;
  #L501f96.  if v3 != 0 then goto L501fa6;
  #L501f9a.  v3:= v1.`x0.j$a.b` @type ^`java.util.Map` @kind object;
  #L501f9e.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L501fa4.  goto L501fba;
  #L501fa6.  call temp:= `f`(v1, v2) @signature `Lx0/j$a;.f:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L501fac.  v0:= temp @kind object;
  #L501fae.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L501fb4.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L501fba.  v3:= v1.`x0.j$a.c` @type ^`boolean` @kind boolean;
  #L501fbe.  if v3 == 0 then goto L501fd8;
  #L501fc2.  v3:= "User-Agent" @kind object;
  #L501fc6.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L501fcc.  v2:= temp;
  #L501fce.  if v2 == 0 then goto L501fd8;
  #L501fd2.  v2:= 0I;
  #L501fd4.  v1.`x0.j$a.c` @type ^`boolean` := v2 @kind boolean;
  #L501fd8.  return v1 @kind object;
}
