record `x0.r` @kind class @AccessFlag PUBLIC {
  `java.util.List` `x0.r.a` @AccessFlag PRIVATE_FINAL;
  `x0.r$c` `x0.r.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `x0.r.c` @AccessFlag PRIVATE_FINAL;
  `x.e` `x0.r.d` @AccessFlag PRIVATE_FINAL;
}
global `x0.r$c` `@@x0.r.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `x0.n` `@@x0.r.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx0/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L502edc.  v0:= new `x0.r$c`;
  #L502ee0.  call `<init>`(v0) @signature `Lx0/r$c;.<init>:()V` @kind direct;
  #L502ee6.  `@@x0.r.e` @type ^`x0.r$c` := v0 @kind object;
  #L502eea.  v0:= new `x0.r$a`;
  #L502eee.  call `<init>`(v0) @signature `Lx0/r$a;.<init>:()V` @kind direct;
  #L502ef4.  `@@x0.r.f` @type ^`x0.n` := v0 @kind object;
  #L502ef8.  return @kind void;
}
procedure `void` `<init>`(`x0.r` v1 @kind this, `x.e` v2 @kind object) @signature `Lx0/r;.<init>:(Lx/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L502f0c.  v0:= `@@x0.r.e` @type ^`x0.r$c` @kind object;
  #L502f10.  call `<init>`(v1, v2, v0) @signature `Lx0/r;.<init>:(Lx/e;Lx0/r$c;)V` @kind direct;
  #L502f16.  return @kind void;
}
procedure `void` `<init>`(`x0.r` v1 @kind this, `x.e` v2 @kind object, `x0.r$c` v3 @kind object) @signature `Lx0/r;.<init>:(Lx/e;Lx0/r$c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L502f28.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502f2e.  v0:= new `java.util.ArrayList`;
  #L502f32.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L502f38.  v1.`x0.r.a` @type ^`java.util.List` := v0 @kind object;
  #L502f3c.  v0:= new `java.util.HashSet`;
  #L502f40.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L502f46.  v1.`x0.r.c` @type ^`java.util.Set` := v0 @kind object;
  #L502f4a.  v1.`x0.r.d` @type ^`x.e` := v2 @kind object;
  #L502f4e.  v1.`x0.r.b` @type ^`x0.r$c` := v3 @kind object;
  #L502f52.  return @kind void;
}
procedure `void` `a`(`x0.r` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `x0.o` v4 @kind object, `boolean` v5 ) @signature `Lx0/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L502f64.  v0:= new `x0.r$b`;
  #L502f68.  call `<init>`(v0, v2, v3, v4) @signature `Lx0/r$b;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;)V` @kind direct;
  #L502f6e.  v2:= v1.`x0.r.a` @type ^`java.util.List` @kind object;
  #L502f72.  if v5 == 0 then goto L502f80;
  #L502f76.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L502f7c.  v3:= temp;
  #L502f7e.  goto L502f82;
  #L502f80.  v3:= 0I;
  #L502f82.  call `add`(v2, v3, v0) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L502f88.  return @kind void;
}
procedure `x0.n` `e`(`x0.r` v0 @kind this, `x0.r$b` v1 @kind object) @signature `Lx0/r;.e:(Lx0/r$b;)Lx0/n;` @AccessFlag PRIVATE {
    temp;

  #L5030f4.  v1:= v1.`x0.r$b.c` @type ^`x0.o` @kind object;
  #L5030f8.  call temp:= `a`(v1, v0) @signature `Lx0/o;.a:(Lx0/r;)Lx0/n;` @kind interface;
  #L5030fe.  v1:= temp @kind object;
  #L503100.  call temp:= `d`(v1) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L503106.  v1:= temp @kind object;
  #L503108.  v1:= (`x0.n`) v1 @kind object;
  #L50310c.  return v1 @kind object;
}
procedure `x0.n` `f`() @signature `Lx0/r;.f:()Lx0/n;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L503120.  v0:= `@@x0.r.f` @type ^`x0.n` @kind object;
  #L503124.  return v0 @kind object;
}
procedure `void` `b`(`x0.r` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `x0.o` v4 @kind object) @signature `Lx0/r;.b:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;)V` @AccessFlag  {
    temp;
    v0;

  #L502f9c.  @monitorenter v1
  #L502f9e.  v0:= 1I;
  #L502fa0.  call `a`(v1, v2, v3, v4, v0) @signature `Lx0/r;.a:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;Z)V` @kind direct;
  #L502fa6.  @monitorexit v1
  #L502fa8.  return @kind void;
  #L502faa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502fac.  @monitorexit v1
  #L502fae.  throw v2;
  catch `java.lang.Throwable` @[L502fa0..L502fa6] goto L502faa;
}
procedure `java.util.List` `c`(`x0.r` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lx0/r;.c:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502da8.  @monitorenter v4
  #L502daa.  v0:= new `java.util.ArrayList`;
  #L502dae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L502db4.  v1:= v4.`x0.r.a` @type ^`java.util.List` @kind object;
  #L502db8.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L502dbe.  v1:= temp @kind object;
  #L502dc0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L502dc6.  v2:= temp;
  #L502dc8.  if v2 == 0 then goto L502e1a;
  #L502dcc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L502dd2.  v2:= temp @kind object;
  #L502dd4.  v2:= (`x0.r$b`) v2 @kind object;
  #L502dd8.  v3:= v4.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L502ddc.  call temp:= `contains`(v3, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L502de2.  v3:= temp;
  #L502de4.  if v3 == 0 then goto L502dea;
  #L502de8.  goto L502dc0;
  #L502dea.  call temp:= `a`(v2, v5) @signature `Lx0/r$b;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L502df0.  v3:= temp;
  #L502df2.  if v3 == 0 then goto L502dc0;
  #L502df6.  v3:= v4.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L502dfa.  call temp:= `add`(v3, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L502e00.  call temp:= `e`(v4, v2) @signature `Lx0/r;.e:(Lx0/r$b;)Lx0/n;` @kind direct;
  #L502e06.  v3:= temp @kind object;
  #L502e08.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L502e0e.  v3:= v4.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L502e12.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L502e18.  goto L502dc0;
  #L502e1a.  @monitorexit v4
  #L502e1c.  return v0 @kind object;
  #L502e1e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502e20.  v0:= v4.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L502e24.  call `clear`(v0) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L502e2a.  throw v5;
  #L502e2c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502e2e.  @monitorexit v4
  #L502e30.  throw v5;
  catch `java.lang.Throwable` @[L502daa..L502e18] goto L502e1e;
  catch `java.lang.Throwable` @[L502e20..L502e2c] goto L502e2c;
}
procedure `x0.n` `d`(`x0.r` v7 @kind this, `java.lang.Class` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lx0/r;.d:(Ljava/lang/Class;Ljava/lang/Class;)Lx0/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L502fcc.  @monitorenter v7
  #L502fce.  v0:= new `java.util.ArrayList`;
  #L502fd2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L502fd8.  v1:= v7.`x0.r.a` @type ^`java.util.List` @kind object;
  #L502fdc.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L502fe2.  v1:= temp @kind object;
  #L502fe4.  v2:= 0I;
  #L502fe6.  v3:= 1I;
  #L502fe8.  v4:= 0I;
  #L502fea.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L502ff0.  v5:= temp;
  #L502ff2.  if v5 == 0 then goto L503046;
  #L502ff6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L502ffc.  v5:= temp @kind object;
  #L502ffe.  v5:= (`x0.r$b`) v5 @kind object;
  #L503002.  v6:= v7.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L503006.  call temp:= `contains`(v6, v5) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L50300c.  v6:= temp;
  #L50300e.  if v6 == 0 then goto L503016;
  #L503012.  v4:= 1I;
  #L503014.  goto L502fea;
  #L503016.  call temp:= `b`(v5, v8, v9) @signature `Lx0/r$b;.b:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L50301c.  v6:= temp;
  #L50301e.  if v6 == 0 then goto L502fea;
  #L503022.  v6:= v7.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L503026.  call temp:= `add`(v6, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50302c.  call temp:= `e`(v7, v5) @signature `Lx0/r;.e:(Lx0/r$b;)Lx0/n;` @kind direct;
  #L503032.  v6:= temp @kind object;
  #L503034.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50303a.  v6:= v7.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L50303e.  call temp:= `remove`(v6, v5) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L503044.  goto L502fea;
  #L503046.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L50304c.  v1:= temp;
  #L50304e.  if v1 <= v3 then goto L503066;
  #L503052.  v8:= v7.`x0.r.b` @type ^`x0.r$c` @kind object;
  #L503056.  v9:= v7.`x0.r.d` @type ^`x.e` @kind object;
  #L50305a.  call temp:= `a`(v8, v0, v9) @signature `Lx0/r$c;.a:(Ljava/util/List;Lx/e;)Lx0/q;` @kind virtual;
  #L503060.  v8:= temp @kind object;
  #L503062.  @monitorexit v7
  #L503064.  return v8 @kind object;
  #L503066.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L50306c.  v1:= temp;
  #L50306e.  if v1 != v3 then goto L503082;
  #L503072.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L503078.  v8:= temp @kind object;
  #L50307a.  v8:= (`x0.n`) v8 @kind object;
  #L50307e.  @monitorexit v7
  #L503080.  return v8 @kind object;
  #L503082.  if v4 == 0 then goto L503092;
  #L503086.  call temp:= `f`() @signature `Lx0/r;.f:()Lx0/n;` @kind static;
  #L50308c.  v8:= temp @kind object;
  #L50308e.  @monitorexit v7
  #L503090.  return v8 @kind object;
  #L503092.  v0:= new `com.bumptech.glide.Registry$NoModelLoaderAvailableException`;
  #L503096.  call `<init>`(v0, v8, v9) @signature `Lcom/bumptech/glide/Registry$NoModelLoaderAvailableException;.<init>:(Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L50309c.  throw v0;
  #L50309e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5030a0.  v9:= v7.`x0.r.c` @type ^`java.util.Set` @kind object;
  #L5030a4.  call `clear`(v9) @signature `Ljava/util/Set;.clear:()V` @kind interface;
  #L5030aa.  throw v8;
  #L5030ac.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5030ae.  @monitorexit v7
  #L5030b0.  throw v8;
  catch `java.lang.Throwable` @[L502fce..L503062] goto L50309e;
  catch `java.lang.Throwable` @[L503066..L50307e] goto L50309e;
  catch `java.lang.Throwable` @[L503086..L50308e] goto L50309e;
  catch `java.lang.Throwable` @[L503092..L50309e] goto L50309e;
  catch `java.lang.Throwable` @[L5030a0..L5030ac] goto L5030ac;
}
procedure `java.util.List` `g`(`x0.r` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lx0/r;.g:(Ljava/lang/Class;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502e5c.  @monitorenter v4
  #L502e5e.  v0:= new `java.util.ArrayList`;
  #L502e62.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L502e68.  v1:= v4.`x0.r.a` @type ^`java.util.List` @kind object;
  #L502e6c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L502e72.  v1:= temp @kind object;
  #L502e74.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L502e7a.  v2:= temp;
  #L502e7c.  if v2 == 0 then goto L502eb4;
  #L502e80.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L502e86.  v2:= temp @kind object;
  #L502e88.  v2:= (`x0.r$b`) v2 @kind object;
  #L502e8c.  v3:= v2.`x0.r$b.b` @type ^`java.lang.Class` @kind object;
  #L502e90.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L502e96.  v3:= temp;
  #L502e98.  if v3 != 0 then goto L502e74;
  #L502e9c.  call temp:= `a`(v2, v5) @signature `Lx0/r$b;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L502ea2.  v3:= temp;
  #L502ea4.  if v3 == 0 then goto L502e74;
  #L502ea8.  v2:= v2.`x0.r$b.b` @type ^`java.lang.Class` @kind object;
  #L502eac.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L502eb2.  goto L502e74;
  #L502eb4.  @monitorexit v4
  #L502eb6.  return v0 @kind object;
  #L502eb8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502eba.  @monitorexit v4
  #L502ebc.  throw v5;
  catch `java.lang.Throwable` @[L502e5e..L502eb2] goto L502eb8;
}
