record `x0.q$a` @kind class @AccessFlag  extends `r0.d` @kind interface, `r0.d$a` @kind interface {
  `java.util.List` `x0.q$a.a` @AccessFlag PRIVATE_FINAL;
  `x.e` `x0.q$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `x0.q$a.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `x0.q$a.d` @AccessFlag PRIVATE;
  `r0.d$a` `x0.q$a.e` @AccessFlag PRIVATE;
  `java.util.List` `x0.q$a.f` @AccessFlag PRIVATE;
  `boolean` `x0.q$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x0.q$a` v0 @kind this, `java.util.List` v1 @kind object, `x.e` v2 @kind object) @signature `Lx0/q$a;.<init>:(Ljava/util/List;Lx/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L502ac4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502aca.  v0.`x0.q$a.b` @type ^`x.e` := v2 @kind object;
  #L502ace.  call temp:= `c`(v1) @signature `Ln1/j;.c:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L502ad4.  v0.`x0.q$a.a` @type ^`java.util.List` := v1 @kind object;
  #L502ad8.  v1:= 0I;
  #L502ada.  v0.`x0.q$a.c` @type ^`int` := v1;
  #L502ade.  return @kind void;
}
procedure `void` `g`(`x0.q$a` v4 @kind this) @signature `Lx0/q$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502c3c.  v0:= v4.`x0.q$a.g` @type ^`boolean` @kind boolean;
  #L502c40.  if v0 == 0 then goto L502c46;
  #L502c44.  return @kind void;
  #L502c46.  v0:= v4.`x0.q$a.c` @type ^`int`;
  #L502c4a.  v1:= v4.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502c4e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L502c54.  v1:= temp;
  #L502c56.  v1:= v1 + -1;
  #L502c5a.  if v0 >= v1 then goto L502c7a;
  #L502c5e.  v0:= v4.`x0.q$a.c` @type ^`int`;
  #L502c62.  v0:= v0 + 1;
  #L502c66.  v4.`x0.q$a.c` @type ^`int` := v0;
  #L502c6a.  v0:= v4.`x0.q$a.d` @type ^`com.bumptech.glide.Priority` @kind object;
  #L502c6e.  v1:= v4.`x0.q$a.e` @type ^`r0.d$a` @kind object;
  #L502c72.  call `e`(v4, v0, v1) @signature `Lx0/q$a;.e:(Lcom/bumptech/glide/Priority;Lr0/d$a;)V` @kind virtual;
  #L502c78.  goto L502caa;
  #L502c7a.  v0:= v4.`x0.q$a.f` @type ^`java.util.List` @kind object;
  #L502c7e.  call temp:= `d`(v0) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L502c84.  v0:= v4.`x0.q$a.e` @type ^`r0.d$a` @kind object;
  #L502c88.  v1:= new `com.bumptech.glide.load.engine.GlideException`;
  #L502c8c.  v2:= new `java.util.ArrayList`;
  #L502c90.  v3:= v4.`x0.q$a.f` @type ^`java.util.List` @kind object;
  #L502c94.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L502c9a.  v3:= "Fetch failed" @kind object;
  #L502c9e.  call `<init>`(v1, v3, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L502ca4.  call `c`(v0, v1) @signature `Lr0/d$a;.c:(Ljava/lang/Exception;)V` @kind interface;
  #L502caa.  return @kind void;
}
procedure `java.lang.Class` `a`(`x0.q$a` v2 @kind this) @signature `Lx0/q$a;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502a98.  v0:= v2.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502a9c.  v1:= 0I;
  #L502a9e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L502aa4.  v0:= temp @kind object;
  #L502aa6.  v0:= (`r0.d`) v0 @kind object;
  #L502aaa.  call temp:= `a`(v0) @signature `Lr0/d;.a:()Ljava/lang/Class;` @kind interface;
  #L502ab0.  v0:= temp @kind object;
  #L502ab2.  return v0 @kind object;
}
procedure `void` `b`(`x0.q$a` v2 @kind this) @signature `Lx0/q$a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502b34.  v0:= v2.`x0.q$a.f` @type ^`java.util.List` @kind object;
  #L502b38.  if v0 == 0 then goto L502b46;
  #L502b3c.  v1:= v2.`x0.q$a.b` @type ^`x.e` @kind object;
  #L502b40.  call temp:= `a`(v1, v0) @signature `Lx/e;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L502b46.  v0:= 0I;
  #L502b48.  v2.`x0.q$a.f` @type ^`java.util.List` := v0 @kind object;
  #L502b4c.  v0:= v2.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502b50.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L502b56.  v0:= temp @kind object;
  #L502b58.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L502b5e.  v1:= temp;
  #L502b60.  if v1 == 0 then goto L502b78;
  #L502b64.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L502b6a.  v1:= temp @kind object;
  #L502b6c.  v1:= (`r0.d`) v1 @kind object;
  #L502b70.  call `b`(v1) @signature `Lr0/d;.b:()V` @kind interface;
  #L502b76.  goto L502b58;
  #L502b78.  return @kind void;
}
procedure `void` `c`(`x0.q$a` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lx0/q$a;.c:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502c0c.  v0:= v1.`x0.q$a.f` @type ^`java.util.List` @kind object;
  #L502c10.  call temp:= `d`(v0) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L502c16.  v0:= temp @kind object;
  #L502c18.  v0:= (`java.util.List`) v0 @kind object;
  #L502c1c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L502c22.  call `g`(v1) @signature `Lx0/q$a;.g:()V` @kind direct;
  #L502c28.  return @kind void;
}
procedure `void` `cancel`(`x0.q$a` v2 @kind this) @signature `Lx0/q$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502af0.  v0:= 1I;
  #L502af2.  v2.`x0.q$a.g` @type ^`boolean` := v0 @kind boolean;
  #L502af6.  v0:= v2.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502afa.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L502b00.  v0:= temp @kind object;
  #L502b02.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L502b08.  v1:= temp;
  #L502b0a.  if v1 == 0 then goto L502b22;
  #L502b0e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L502b14.  v1:= temp @kind object;
  #L502b16.  v1:= (`r0.d`) v1 @kind object;
  #L502b1a.  call `cancel`(v1) @signature `Lr0/d;.cancel:()V` @kind interface;
  #L502b20.  goto L502b02;
  #L502b22.  return @kind void;
}
procedure `com.bumptech.glide.load.DataSource` `d`(`x0.q$a` v2 @kind this) @signature `Lx0/q$a;.d:()Lcom/bumptech/glide/load/DataSource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L502a6c.  v0:= v2.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502a70.  v1:= 0I;
  #L502a72.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L502a78.  v0:= temp @kind object;
  #L502a7a.  v0:= (`r0.d`) v0 @kind object;
  #L502a7e.  call temp:= `d`(v0) @signature `Lr0/d;.d:()Lcom/bumptech/glide/load/DataSource;` @kind interface;
  #L502a84.  v0:= temp @kind object;
  #L502a86.  return v0 @kind object;
}
procedure `void` `e`(`x0.q$a` v1 @kind this, `com.bumptech.glide.Priority` v2 @kind object, `r0.d$a` v3 @kind object) @signature `Lx0/q$a;.e:(Lcom/bumptech/glide/Priority;Lr0/d$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502b8c.  v1.`x0.q$a.d` @type ^`com.bumptech.glide.Priority` := v2 @kind object;
  #L502b90.  v1.`x0.q$a.e` @type ^`r0.d$a` := v3 @kind object;
  #L502b94.  v3:= v1.`x0.q$a.b` @type ^`x.e` @kind object;
  #L502b98.  call temp:= `b`(v3) @signature `Lx/e;.b:()Ljava/lang/Object;` @kind interface;
  #L502b9e.  v3:= temp @kind object;
  #L502ba0.  v3:= (`java.util.List`) v3 @kind object;
  #L502ba4.  v1.`x0.q$a.f` @type ^`java.util.List` := v3 @kind object;
  #L502ba8.  v3:= v1.`x0.q$a.a` @type ^`java.util.List` @kind object;
  #L502bac.  v0:= v1.`x0.q$a.c` @type ^`int`;
  #L502bb0.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L502bb6.  v3:= temp @kind object;
  #L502bb8.  v3:= (`r0.d`) v3 @kind object;
  #L502bbc.  call `e`(v3, v2, v1) @signature `Lr0/d;.e:(Lcom/bumptech/glide/Priority;Lr0/d$a;)V` @kind interface;
  #L502bc2.  v2:= v1.`x0.q$a.g` @type ^`boolean` @kind boolean;
  #L502bc6.  if v2 == 0 then goto L502bd0;
  #L502bca.  call `cancel`(v1) @signature `Lx0/q$a;.cancel:()V` @kind virtual;
  #L502bd0.  return @kind void;
}
procedure `void` `f`(`x0.q$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lx0/q$a;.f:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502be4.  if v2 == 0 then goto L502bf4;
  #L502be8.  v0:= v1.`x0.q$a.e` @type ^`r0.d$a` @kind object;
  #L502bec.  call `f`(v0, v2) @signature `Lr0/d$a;.f:(Ljava/lang/Object;)V` @kind interface;
  #L502bf2.  goto L502bfa;
  #L502bf4.  call `g`(v1) @signature `Lx0/q$a;.g:()V` @kind direct;
  #L502bfa.  return @kind void;
}
