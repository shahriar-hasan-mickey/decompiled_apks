record `v0.g` @kind class @AccessFlag PUBLIC extends `n1.g` @kind class, `v0.h` @kind interface {
  `v0.h$a` `v0.g.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v0.g` v0 @kind this, `long` v1 ) @signature `Lv0/g;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4febe4.  call `<init>`(v0, v1) @signature `Ln1/g;.<init>:(J)V` @kind direct;
  #L4febea.  return @kind void;
}
procedure `void` `a`(`v0.g` v4 @kind this, `int` v5 ) @signature `Lv0/g;.a:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fec58.  v0:= 40I;
  #L4fec5c.  if v5 < v0 then goto L4fec68;
  #L4fec60.  call `b`(v4) @signature `Ln1/g;.b:()V` @kind virtual;
  #L4fec66.  goto L4fec8c;
  #L4fec68.  v0:= 20I;
  #L4fec6c.  if v5 >= v0 then goto L4fec78;
  #L4fec70.  v0:= 15I;
  #L4fec74.  if v5 != v0 then goto L4fec8c;
  #L4fec78.  call temp:= `h`(v4) @signature `Ln1/g;.h:()J` @kind virtual;
  #L4fec7e.  v0:= temp @kind wide;
  #L4fec80.  v2:= 2L;
  #L4fec84.  v0:= v0 / v2 @kind long;
  #L4fec86.  call `m`(v4, v0) @signature `Ln1/g;.m:(J)V` @kind virtual;
  #L4fec8c.  return @kind void;
}
procedure `t0.c` `c`(`v0.g` v0 @kind this, `q0.b` v1 @kind object) @signature `Lv0/g;.c:(Lq0/b;)Lt0/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4febc4.  call temp:= `l`(v0, v1) @signature `Ln1/g;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L4febca.  v1:= temp @kind object;
  #L4febcc.  v1:= (`t0.c`) v1 @kind object;
  #L4febd0.  return v1 @kind object;
}
procedure `t0.c` `d`(`v0.g` v0 @kind this, `q0.b` v1 @kind object, `t0.c` v2 @kind object) @signature `Lv0/g;.d:(Lq0/b;Lt0/c;)Lt0/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4feba4.  call temp:= `k`(v0, v1, v2) @signature `Ln1/g;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L4febaa.  v1:= temp @kind object;
  #L4febac.  v1:= (`t0.c`) v1 @kind object;
  #L4febb0.  return v1 @kind object;
}
procedure `void` `e`(`v0.g` v0 @kind this, `v0.h$a` v1 @kind object) @signature `Lv0/g;.e:(Lv0/h$a;)V` @AccessFlag PUBLIC {
    temp;

  #L4fec40.  v0.`v0.g.e` @type ^`v0.h$a` := v1 @kind object;
  #L4fec44.  return @kind void;
}
procedure `int` `i`(`v0.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lv0/g;.i:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L4feb58.  v1:= (`t0.c`) v1 @kind object;
  #L4feb5c.  call temp:= `n`(v0, v1) @signature `Lv0/g;.n:(Lt0/c;)I` @kind virtual;
  #L4feb62.  v1:= temp;
  #L4feb64.  return v1;
}
procedure `void` `j`(`v0.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lv0/g;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_SYNTHETIC {
    temp;

  #L4febfc.  v1:= (`q0.b`) v1 @kind object;
  #L4fec00.  v2:= (`t0.c`) v2 @kind object;
  #L4fec04.  call `o`(v0, v1, v2) @signature `Lv0/g;.o:(Lq0/b;Lt0/c;)V` @kind virtual;
  #L4fec0a.  return @kind void;
}
procedure `int` `n`(`v0.g` v0 @kind this, `t0.c` v1 @kind object) @signature `Lv0/g;.n:(Lt0/c;)I` @AccessFlag PROTECTED {
    temp;

  #L4feb78.  if v1 != 0 then goto L4feb88;
  #L4feb7c.  v1:= 0I;
  #L4feb7e.  call temp:= `i`(v0, v1) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @kind super;
  #L4feb84.  v1:= temp;
  #L4feb86.  return v1;
  #L4feb88.  call temp:= `getSize`(v1) @signature `Lt0/c;.getSize:()I` @kind interface;
  #L4feb8e.  v1:= temp;
  #L4feb90.  return v1;
}
procedure `void` `o`(`v0.g` v0 @kind this, `q0.b` v1 @kind object, `t0.c` v2 @kind object) @signature `Lv0/g;.o:(Lq0/b;Lt0/c;)V` @AccessFlag PROTECTED {
    temp;

  #L4fec1c.  v1:= v0.`v0.g.e` @type ^`v0.h$a` @kind object;
  #L4fec20.  if v1 == 0 then goto L4fec2e;
  #L4fec24.  if v2 == 0 then goto L4fec2e;
  #L4fec28.  call `c`(v1, v2) @signature `Lv0/h$a;.c:(Lt0/c;)V` @kind interface;
  #L4fec2e.  return @kind void;
}
