record `f1.f` @kind class @AccessFlag PUBLIC {
  `java.util.List` `f1.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f1.f` v1 @kind this) @signature `Lf1/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e5d64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e5d6a.  v0:= new `java.util.ArrayList`;
  #L4e5d6e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4e5d74.  v1.`f1.f.a` @type ^`java.util.List` := v0 @kind object;
  #L4e5d78.  return @kind void;
}
procedure `f1.e` `a`(`f1.f` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lf1/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Lf1/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e5c18.  @monitorenter v3
  #L4e5c1a.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4e5c20.  v0:= temp;
  #L4e5c22.  if v0 == 0 then goto L4e5c32;
  #L4e5c26.  call temp:= `b`() @signature `Lf1/g;.b:()Lf1/e;` @kind static;
  #L4e5c2c.  v4:= temp @kind object;
  #L4e5c2e.  @monitorexit v3
  #L4e5c30.  return v4 @kind object;
  #L4e5c32.  v0:= v3.`f1.f.a` @type ^`java.util.List` @kind object;
  #L4e5c36.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e5c3c.  v0:= temp @kind object;
  #L4e5c3e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e5c44.  v1:= temp;
  #L4e5c46.  if v1 == 0 then goto L4e5c6a;
  #L4e5c4a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e5c50.  v1:= temp @kind object;
  #L4e5c52.  v1:= (`f1.f$a`) v1 @kind object;
  #L4e5c56.  call temp:= `a`(v1, v4, v5) @signature `Lf1/f$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L4e5c5c.  v2:= temp;
  #L4e5c5e.  if v2 == 0 then goto L4e5c3e;
  #L4e5c62.  v4:= v1.`f1.f$a.c` @type ^`f1.e` @kind object;
  #L4e5c66.  @monitorexit v3
  #L4e5c68.  return v4 @kind object;
  #L4e5c6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L4e5c6e.  v1:= new `java.lang.StringBuilder`;
  #L4e5c72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e5c78.  v2:= "No transcoder registered to transcode from " @kind object;
  #L4e5c7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e5c82.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e5c88.  v4:= " to " @kind object;
  #L4e5c8c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e5c92.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e5c98.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e5c9e.  v4:= temp @kind object;
  #L4e5ca0.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4e5ca6.  throw v0;
  #L4e5ca8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e5caa.  @monitorexit v3
  #L4e5cac.  throw v4;
  catch `java.lang.Throwable` @[L4e5c1a..L4e5c2e] goto L4e5ca8;
  catch `java.lang.Throwable` @[L4e5c32..L4e5c66] goto L4e5ca8;
  catch `java.lang.Throwable` @[L4e5c6a..L4e5ca8] goto L4e5ca8;
}
procedure `java.util.List` `b`(`f1.f` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lf1/f;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e5cdc.  @monitorenter v3
  #L4e5cde.  v0:= new `java.util.ArrayList`;
  #L4e5ce2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4e5ce8.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4e5cee.  v1:= temp;
  #L4e5cf0.  if v1 == 0 then goto L4e5cfe;
  #L4e5cf4.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e5cfa.  @monitorexit v3
  #L4e5cfc.  return v0 @kind object;
  #L4e5cfe.  v1:= v3.`f1.f.a` @type ^`java.util.List` @kind object;
  #L4e5d02.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e5d08.  v1:= temp @kind object;
  #L4e5d0a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e5d10.  v2:= temp;
  #L4e5d12.  if v2 == 0 then goto L4e5d36;
  #L4e5d16.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e5d1c.  v2:= temp @kind object;
  #L4e5d1e.  v2:= (`f1.f$a`) v2 @kind object;
  #L4e5d22.  call temp:= `a`(v2, v4, v5) @signature `Lf1/f$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L4e5d28.  v2:= temp;
  #L4e5d2a.  if v2 == 0 then goto L4e5d0a;
  #L4e5d2e.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e5d34.  goto L4e5d0a;
  #L4e5d36.  @monitorexit v3
  #L4e5d38.  return v0 @kind object;
  #L4e5d3a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e5d3c.  @monitorexit v3
  #L4e5d3e.  throw v4;
  catch `java.lang.Throwable` @[L4e5cde..L4e5cfa] goto L4e5d3a;
  catch `java.lang.Throwable` @[L4e5cfe..L4e5d34] goto L4e5d3a;
}
procedure `void` `c`(`f1.f` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `f1.e` v5 @kind object) @signature `Lf1/f;.c:(Ljava/lang/Class;Ljava/lang/Class;Lf1/e;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e5d8c.  @monitorenter v2
  #L4e5d8e.  v0:= v2.`f1.f.a` @type ^`java.util.List` @kind object;
  #L4e5d92.  v1:= new `f1.f$a`;
  #L4e5d96.  call `<init>`(v1, v3, v4, v5) @signature `Lf1/f$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lf1/e;)V` @kind direct;
  #L4e5d9c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e5da2.  @monitorexit v2
  #L4e5da4.  return @kind void;
  #L4e5da6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e5da8.  @monitorexit v2
  #L4e5daa.  throw v3;
  catch `java.lang.Throwable` @[L4e5d8e..L4e5da2] goto L4e5da6;
}
