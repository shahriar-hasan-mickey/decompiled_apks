record `v.c$a` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`v.c$a` v0 @kind this) @signature `Lv/c$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fd3f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fd3f6.  return @kind void;
}
procedure `int` `a`(`v.c$a` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lv/c$a;.a:([B[B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fd384.  v0:= length @variable v5;
  #L4fd386.  v1:= length @variable v6;
  #L4fd388.  if v0 == v1 then goto L4fd394;
  #L4fd38c.  v5:= length @variable v5;
  #L4fd38e.  v6:= length @variable v6;
  #L4fd390.  v5:= v5 - v6 @kind int;
  #L4fd392.  return v5;
  #L4fd394.  v0:= 0I;
  #L4fd396.  v1:= 0I;
  #L4fd398.  v2:= length @variable v5;
  #L4fd39a.  if v1 >= v2 then goto L4fd3ba;
  #L4fd39e.  v2:= v5[v1] @kind byte;
  #L4fd3a2.  v3:= v6[v1] @kind byte;
  #L4fd3a6.  if v2 == v3 then goto L4fd3b4;
  #L4fd3aa.  v5:= v5[v1] @kind byte;
  #L4fd3ae.  v6:= v6[v1] @kind byte;
  #L4fd3b2.  goto L4fd390;
  #L4fd3b4.  v1:= v1 + 1;
  #L4fd3b8.  goto L4fd398;
  #L4fd3ba.  return v0;
}
procedure `int` `compare`(`v.c$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lv/c$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4fd3cc.  v1:= (`byte`[]) v1 @kind object;
  #L4fd3d0.  v2:= (`byte`[]) v2 @kind object;
  #L4fd3d4.  call temp:= `a`(v0, v1, v2) @signature `Lv/c$a;.a:([B[B)I` @kind virtual;
  #L4fd3da.  v1:= temp;
  #L4fd3dc.  return v1;
}
