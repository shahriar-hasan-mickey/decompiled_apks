record `v.g$b` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Callable` `v.g$b.a` @AccessFlag PRIVATE;
  `x.a` `v.g$b.b` @AccessFlag PRIVATE;
  `android.os.Handler` `v.g$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`v.g$b` v0 @kind this, `android.os.Handler` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `x.a` v3 @kind object) @signature `Lv/g$b;.<init>:(Landroid/os/Handler;Ljava/util/concurrent/Callable;Lx/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fe344.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fe34a.  v0.`v.g$b.a` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L4fe34e.  v0.`v.g$b.b` @type ^`x.a` := v3 @kind object;
  #L4fe352.  v0.`v.g$b.c` @type ^`android.os.Handler` := v1 @kind object;
  #L4fe356.  return @kind void;
}
procedure `void` `run`(`v.g$b` v4 @kind this) @signature `Lv/g$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4fe368.  v0:= v4.`v.g$b.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L4fe36c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4fe372.  v0:= temp @kind object;
  #L4fe374.  goto L4fe378;
  #L4fe376.  v0:= 0I;
  #L4fe378.  v1:= v4.`v.g$b.b` @type ^`x.a` @kind object;
  #L4fe37c.  v2:= v4.`v.g$b.c` @type ^`android.os.Handler` @kind object;
  #L4fe380.  v3:= new `v.g$b$a`;
  #L4fe384.  call `<init>`(v3, v4, v1, v0) @signature `Lv/g$b$a;.<init>:(Lv/g$b;Lx/a;Ljava/lang/Object;)V` @kind direct;
  #L4fe38a.  call temp:= `post`(v2, v3) @signature `Landroid/os/Handler;.post:(Ljava/lang/Runnable;)Z` @kind virtual;
  #L4fe390.  return @kind void;
  catch `java.lang.Exception` @[L4fe368..L4fe374] goto L4fe376;
}
