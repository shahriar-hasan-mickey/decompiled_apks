record `v.f$a` @kind class @AccessFlag PUBLIC {
  `int` `v.f$a.a` @AccessFlag PRIVATE_FINAL;
  `v.f$b`[] `v.f$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`v.f$a` v0 @kind this, `int` v1 , `v.f$b`[] v2 @kind object) @signature `Lv/f$a;.<init>:(I[Lv/f$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4fe0d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fe0de.  v0.`v.f$a.a` @type ^`int` := v1;
  #L4fe0e2.  v0.`v.f$a.b` @type ^`v.f$b`[] := v2 @kind object;
  #L4fe0e6.  return @kind void;
}
procedure `v.f$a` `a`(`int` v1 , `v.f$b`[] v2 @kind object) @signature `Lv/f$a;.a:(I[Lv/f$b;)Lv/f$a;` @AccessFlag STATIC {
    temp;
    v0;

  #L4fe0a4.  v0:= new `v.f$a`;
  #L4fe0a8.  call `<init>`(v0, v1, v2) @signature `Lv/f$a;.<init>:(I[Lv/f$b;)V` @kind direct;
  #L4fe0ae.  return v0 @kind object;
}
procedure `v.f$b`[] `b`(`v.f$a` v1 @kind this) @signature `Lv/f$a;.b:()[Lv/f$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe0c0.  v0:= v1.`v.f$a.b` @type ^`v.f$b`[] @kind object;
  #L4fe0c4.  return v0 @kind object;
}
procedure `int` `c`(`v.f$a` v1 @kind this) @signature `Lv/f$a;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fe08c.  v0:= v1.`v.f$a.a` @type ^`int`;
  #L4fe090.  return v0;
}
