record `r0.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `byte` `r0.g.a` @AccessFlag PRIVATE_FINAL;
  `int` `r0.g.b` @AccessFlag PRIVATE;
}
global `byte`[] `@@r0.g.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@r0.g.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@r0.g.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lr0/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f9314.  v0:= 29I;
  #L4f9318.  v0:= new `byte`[v0];
  #L4f931c.  goto L4f9338;
  #L4f9322.  `@@r0.g.c` @type ^`byte`[] := v0 @kind object;
  #L4f9326.  v0:= length @variable v0;
  #L4f9328.  `@@r0.g.d` @type ^`int` := v0;
  #L4f932c.  v0:= v0 + 2;
  #L4f9330.  `@@r0.g.e` @type ^`int` := v0;
  #L4f9334.  return @kind void;
  #L4f9336.  
  #L4f9338.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L4f935d.  goto L4f9322;
}
procedure `void` `<init>`(`r0.g` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lr0/g;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f9370.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4f9376.  v3:= -1I;
  #L4f9378.  if v4 < v3 then goto L4f938c;
  #L4f937c.  v3:= 8I;
  #L4f9380.  if v4 > v3 then goto L4f938c;
  #L4f9384.  v3:= (`byte`) v4 @kind i2b;
  #L4f9386.  v2.`r0.g.a` @type ^`byte` := v3 @kind byte;
  #L4f938a.  return @kind void;
  #L4f938c.  v3:= new `java.lang.IllegalArgumentException`;
  #L4f9390.  v0:= new `java.lang.StringBuilder`;
  #L4f9394.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f939a.  v1:= "Cannot add invalid orientation: " @kind object;
  #L4f939e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f93a4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f93aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f93b0.  v4:= temp @kind object;
  #L4f93b2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f93b8.  throw v3;
}
procedure `void` `mark`(`r0.g` v0 @kind this, `int` v1 ) @signature `Lr0/g;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4f93cc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4f93d0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4f93d6.  throw v1;
}
procedure `boolean` `markSupported`(`r0.g` v1 @kind this) @signature `Lr0/g;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f91fc.  v0:= 0I;
  #L4f91fe.  return v0;
}
procedure `int` `read`(`r0.g` v3 @kind this) @signature `Lr0/g;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f9210.  v0:= v3.`r0.g.b` @type ^`int`;
  #L4f9214.  v1:= 2I;
  #L4f9216.  if v0 < v1 then goto L4f923e;
  #L4f921a.  v2:= `@@r0.g.e` @type ^`int`;
  #L4f921e.  if v0 <= v2 then goto L4f9224;
  #L4f9222.  goto L4f923e;
  #L4f9224.  if v0 != v2 then goto L4f922e;
  #L4f9228.  v0:= v3.`r0.g.a` @type ^`byte` @kind byte;
  #L4f922c.  goto L4f9246;
  #L4f922e.  v2:= `@@r0.g.c` @type ^`byte`[] @kind object;
  #L4f9232.  v0:= v0 - v1 @kind int;
  #L4f9234.  v0:= v2[v0] @kind byte;
  #L4f9238.  v0:= v0 ^& 255;
  #L4f923c.  goto L4f9246;
  #L4f923e.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L4f9244.  v0:= temp;
  #L4f9246.  v1:= -1I;
  #L4f9248.  if v0 == v1 then goto L4f9258;
  #L4f924c.  v1:= v3.`r0.g.b` @type ^`int`;
  #L4f9250.  v1:= v1 + 1;
  #L4f9254.  v3.`r0.g.b` @type ^`int` := v1;
  #L4f9258.  return v0;
}
procedure `int` `read`(`r0.g` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lr0/g;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f926c.  v0:= v3.`r0.g.b` @type ^`int`;
  #L4f9270.  v1:= `@@r0.g.e` @type ^`int`;
  #L4f9274.  if v0 <= v1 then goto L4f9282;
  #L4f9278.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L4f927e.  v4:= temp;
  #L4f9280.  goto L4f92c0;
  #L4f9282.  if v0 != v1 then goto L4f9292;
  #L4f9286.  v6:= v3.`r0.g.a` @type ^`byte` @kind byte;
  #L4f928a.  v4[v5]:= v6 @kind byte;
  #L4f928e.  v4:= 1I;
  #L4f9290.  goto L4f92c0;
  #L4f9292.  v2:= 2I;
  #L4f9294.  if v0 >= v2 then goto L4f92a4;
  #L4f9298.  v2:= v2 - v0 @kind int;
  #L4f929a.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L4f92a0.  v4:= temp;
  #L4f92a2.  goto L4f92c0;
  #L4f92a4.  v1:= v1 - v0 @kind int;
  #L4f92a6.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4f92ac.  v6:= temp;
  #L4f92ae.  v0:= `@@r0.g.c` @type ^`byte`[] @kind object;
  #L4f92b2.  v1:= v3.`r0.g.b` @type ^`int`;
  #L4f92b6.  v1:= v1 - v2 @kind int;
  #L4f92b8.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f92be.  v4:= v6;
  #L4f92c0.  if v4 <= 0 then goto L4f92ce;
  #L4f92c4.  v5:= v3.`r0.g.b` @type ^`int`;
  #L4f92c8.  v5:= v5 + v4 @kind int;
  #L4f92ca.  v3.`r0.g.b` @type ^`int` := v5;
  #L4f92ce.  return v4;
}
procedure `void` `reset`(`r0.g` v1 @kind this) @signature `Lr0/g;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f93e8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L4f93ec.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4f93f2.  throw v0;
}
procedure `long` `skip`(`r0.g` v3 @kind this, `long` v4 ) @signature `Lr0/g;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f92e0.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L4f92e6.  v4:= temp @kind wide;
  #L4f92e8.  v0:= 0L;
  #L4f92ec.  v2:= lcmp(v4, v0);
  #L4f92f0.  if v2 <= 0 then goto L4f9302;
  #L4f92f4.  v0:= v3.`r0.g.b` @type ^`int`;
  #L4f92f8.  v0:= (`long`) v0 @kind i2l;
  #L4f92fa.  v0:= v0 + v4 @kind long;
  #L4f92fc.  v1:= (`int`) v0 @kind l2i;
  #L4f92fe.  v3.`r0.g.b` @type ^`int` := v1;
  #L4f9302.  return v4 @kind wide;
}
