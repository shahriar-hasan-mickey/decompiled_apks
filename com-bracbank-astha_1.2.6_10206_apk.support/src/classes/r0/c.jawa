record `r0.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.OutputStream` @kind class {
  `java.io.OutputStream` `r0.c.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `r0.c.b` @AccessFlag PRIVATE;
  `u0.b` `r0.c.c` @AccessFlag PRIVATE;
  `int` `r0.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`r0.c` v1 @kind this, `java.io.OutputStream` v2 @kind object, `u0.b` v3 @kind object) @signature `Lr0/c;.<init>:(Ljava/io/OutputStream;Lu0/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f8e40.  v0:= 65536I;
  #L4f8e44.  call `<init>`(v1, v2, v3, v0) @signature `Lr0/c;.<init>:(Ljava/io/OutputStream;Lu0/b;I)V` @kind direct;
  #L4f8e4a.  return @kind void;
}
procedure `void` `<init>`(`r0.c` v0 @kind this, `java.io.OutputStream` v1 @kind object, `u0.b` v2 @kind object, `int` v3 ) @signature `Lr0/c;.<init>:(Ljava/io/OutputStream;Lu0/b;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f8e5c.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L4f8e62.  v0.`r0.c.a` @type ^`java.io.OutputStream` := v1 @kind object;
  #L4f8e66.  v0.`r0.c.c` @type ^`u0.b` := v2 @kind object;
  #L4f8e6a.  v1:= constclass @type ^`byte`[] @kind object;
  #L4f8e6e.  call temp:= `d`(v2, v3, v1) @signature `Lu0/b;.d:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L4f8e74.  v1:= temp @kind object;
  #L4f8e76.  v1:= (`byte`[]) v1 @kind object;
  #L4f8e7a.  v0.`r0.c.b` @type ^`byte`[] := v1 @kind object;
  #L4f8e7e.  return @kind void;
}
procedure `void` `g`(`r0.c` v4 @kind this) @signature `Lr0/c;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f8ef8.  v0:= v4.`r0.c.d` @type ^`int`;
  #L4f8efc.  if v0 <= 0 then goto L4f8f14;
  #L4f8f00.  v1:= v4.`r0.c.a` @type ^`java.io.OutputStream` @kind object;
  #L4f8f04.  v2:= v4.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8f08.  v3:= 0I;
  #L4f8f0a.  call `write`(v1, v2, v3, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L4f8f10.  v4.`r0.c.d` @type ^`int` := v3;
  #L4f8f14.  return @kind void;
}
procedure `void` `h`(`r0.c` v2 @kind this) @signature `Lr0/c;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f8f28.  v0:= v2.`r0.c.d` @type ^`int`;
  #L4f8f2c.  v1:= v2.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8f30.  v1:= length @variable v1;
  #L4f8f32.  if v0 != v1 then goto L4f8f3c;
  #L4f8f36.  call `g`(v2) @signature `Lr0/c;.g:()V` @kind direct;
  #L4f8f3c.  return @kind void;
}
procedure `void` `release`(`r0.c` v2 @kind this) @signature `Lr0/c;.release:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f8f50.  v0:= v2.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8f54.  if v0 == 0 then goto L4f8f68;
  #L4f8f58.  v1:= v2.`r0.c.c` @type ^`u0.b` @kind object;
  #L4f8f5c.  call `put`(v1, v0) @signature `Lu0/b;.put:(Ljava/lang/Object;)V` @kind interface;
  #L4f8f62.  v0:= 0I;
  #L4f8f64.  v2.`r0.c.b` @type ^`byte`[] := v0 @kind object;
  #L4f8f68.  return @kind void;
}
procedure `void` `close`(`r0.c` v2 @kind this) @signature `Lr0/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8e90.  call `flush`(v2) @signature `Lr0/c;.flush:()V` @kind virtual;
  #L4f8e96.  v0:= v2.`r0.c.a` @type ^`java.io.OutputStream` @kind object;
  #L4f8e9a.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L4f8ea0.  call `release`(v2) @signature `Lr0/c;.release:()V` @kind direct;
  #L4f8ea6.  return @kind void;
  #L4f8ea8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4f8eaa.  v1:= v2.`r0.c.a` @type ^`java.io.OutputStream` @kind object;
  #L4f8eae.  call `close`(v1) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L4f8eb4.  throw v0;
  catch `java.lang.Throwable` @[L4f8e90..L4f8e96] goto L4f8ea8;
}
procedure `void` `flush`(`r0.c` v1 @kind this) @signature `Lr0/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f8ed4.  call `g`(v1) @signature `Lr0/c;.g:()V` @kind direct;
  #L4f8eda.  v0:= v1.`r0.c.a` @type ^`java.io.OutputStream` @kind object;
  #L4f8ede.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L4f8ee4.  return @kind void;
}
procedure `void` `write`(`r0.c` v3 @kind this, `int` v4 ) @signature `Lr0/c;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f9008.  v0:= v3.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f900c.  v1:= v3.`r0.c.d` @type ^`int`;
  #L4f9010.  v2:= v1 + 1;
  #L4f9014.  v3.`r0.c.d` @type ^`int` := v2;
  #L4f9018.  v4:= (`byte`) v4 @kind i2b;
  #L4f901a.  v0[v1]:= v4 @kind byte;
  #L4f901e.  call `h`(v3) @signature `Lr0/c;.h:()V` @kind direct;
  #L4f9024.  return @kind void;
}
procedure `void` `write`(`r0.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lr0/c;.write:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f8f7c.  v0:= length @variable v3;
  #L4f8f7e.  v1:= 0I;
  #L4f8f80.  call `write`(v2, v3, v1, v0) @signature `Lr0/c;.write:([BII)V` @kind virtual;
  #L4f8f86.  return @kind void;
}
procedure `void` `write`(`r0.c` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lr0/c;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f8f98.  v0:= 0I;
  #L4f8f9a.  v1:= v8 - v0 @kind int;
  #L4f8f9e.  v2:= v7 + v0 @kind int;
  #L4f8fa2.  v3:= v5.`r0.c.d` @type ^`int`;
  #L4f8fa6.  if v3 != 0 then goto L4f8fc0;
  #L4f8faa.  v4:= v5.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8fae.  v4:= length @variable v4;
  #L4f8fb0.  if v1 < v4 then goto L4f8fc0;
  #L4f8fb4.  v7:= v5.`r0.c.a` @type ^`java.io.OutputStream` @kind object;
  #L4f8fb8.  call `write`(v7, v6, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L4f8fbe.  return @kind void;
  #L4f8fc0.  v4:= v5.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8fc4.  v4:= length @variable v4;
  #L4f8fc6.  v4:= v4 - v3 @kind int;
  #L4f8fc8.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4f8fce.  v1:= temp;
  #L4f8fd0.  v3:= v5.`r0.c.b` @type ^`byte`[] @kind object;
  #L4f8fd4.  v4:= v5.`r0.c.d` @type ^`int`;
  #L4f8fd8.  call `arraycopy`(v6, v2, v3, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f8fde.  v2:= v5.`r0.c.d` @type ^`int`;
  #L4f8fe2.  v2:= v2 + v1 @kind int;
  #L4f8fe4.  v5.`r0.c.d` @type ^`int` := v2;
  #L4f8fe8.  v0:= v0 + v1 @kind int;
  #L4f8fea.  call `h`(v5) @signature `Lr0/c;.h:()V` @kind direct;
  #L4f8ff0.  if v0 < v8 then goto L4f8f9a;
  #L4f8ff4.  return @kind void;
}
