record `p.b` @kind class @AccessFlag FINAL {
}
global `float`[][] `@@p.b.a` @AccessFlag STATIC_FINAL;
global `float`[][] `@@p.b.b` @AccessFlag STATIC_FINAL;
global `float`[] `@@p.b.c` @AccessFlag STATIC_FINAL;
global `float`[][] `@@p.b.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lp/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f0b58.  v0:= 3I;
  #L4f0b5a.  v1:= new `float`[][v0];
  #L4f0b5e.  v2:= new `float`[v0];
  #L4f0b62.  goto L4f0c08;
  #L4f0b68.  v3:= 0I;
  #L4f0b6a.  v1[v3]:= v2 @kind object;
  #L4f0b6e.  v2:= new `float`[v0];
  #L4f0b72.  goto L4f0c1c;
  #L4f0b78.  v4:= 1I;
  #L4f0b7a.  v1[v4]:= v2 @kind object;
  #L4f0b7e.  v2:= new `float`[v0];
  #L4f0b82.  goto L4f0c30;
  #L4f0b88.  v5:= 2I;
  #L4f0b8a.  v1[v5]:= v2 @kind object;
  #L4f0b8e.  `@@p.b.a` @type ^`float`[][] := v1 @kind object;
  #L4f0b92.  v1:= new `float`[][v0];
  #L4f0b96.  v2:= new `float`[v0];
  #L4f0b9a.  goto L4f0c44;
  #L4f0ba0.  v1[v3]:= v2 @kind object;
  #L4f0ba4.  v2:= new `float`[v0];
  #L4f0ba8.  goto L4f0c58;
  #L4f0bae.  v1[v4]:= v2 @kind object;
  #L4f0bb2.  v2:= new `float`[v0];
  #L4f0bb6.  goto L4f0c6c;
  #L4f0bbc.  v1[v5]:= v2 @kind object;
  #L4f0bc0.  `@@p.b.b` @type ^`float`[][] := v1 @kind object;
  #L4f0bc4.  v1:= new `float`[v0];
  #L4f0bc8.  goto L4f0c80;
  #L4f0bce.  `@@p.b.c` @type ^`float`[] := v1 @kind object;
  #L4f0bd2.  v1:= new `float`[][v0];
  #L4f0bd6.  v2:= new `float`[v0];
  #L4f0bda.  goto L4f0c94;
  #L4f0be0.  v1[v3]:= v2 @kind object;
  #L4f0be4.  v2:= new `float`[v0];
  #L4f0be8.  goto L4f0ca8;
  #L4f0bee.  v1[v4]:= v2 @kind object;
  #L4f0bf2.  v0:= new `float`[v0];
  #L4f0bf6.  goto L4f0cbc;
  #L4f0bfc.  v1[v5]:= v0 @kind object;
  #L4f0c00.  `@@p.b.d` @type ^`float`[][] := v1 @kind object;
  #L4f0c04.  return @kind void;
  #L4f0c06.  
  #L4f0c08.  v2:= (1053652383I, 1059484093I, -1118648123I) @kind object;
  #L4f0c1b.  goto L4f0b68;
  #L4f0c1c.  v2:= (-1098898655I, 1067067965I, 1027330407I) @kind object;
  #L4f0c2f.  goto L4f0b78;
  #L4f0c30.  v2:= (-1157087275I, 1028162020I, 1064566818I) @kind object;
  #L4f0c43.  goto L4f0b88;
  #L4f0c44.  v2:= (1072584765I, -1082036021I, 1041810539I) @kind object;
  #L4f0c57.  goto L4f0ba0;
  #L4f0c58.  v2:= (1053190625I, 1059002158I, -1139603558I) @kind object;
  #L4f0c6b.  goto L4f0bae;
  #L4f0c6c.  v2:= (-1132345847I, -1123302273I, 1065772348I) @kind object;
  #L4f0c7f.  goto L4f0bbc;
  #L4f0c80.  v1:= (1119754256I, 1120403456I, 1121567769I) @kind object;
  #L4f0c93.  goto L4f0bce;
  #L4f0c94.  v2:= (1054023191I, 1052187149I, 1043912633I) @kind object;
  #L4f0ca7.  goto L4f0be0;
  #L4f0ca8.  v2:= (1046066128I, 1060575065I, 1033100696I) @kind object;
  #L4f0cbb.  goto L4f0bee;
  #L4f0cbc.  v0:= (1017006063I, 1039404073I, 1064520140I) @kind object;
  #L4f0ccf.  goto L4f0bfc;
}
procedure `int` `a`(`float` v15 ) @signature `Lp/b;.a:(F)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4f0a80.  v0:= 1.0F;
  #L4f0a84.  v0:= fcmpg(v15, v0);
  #L4f0a88.  if v0 >= 0 then goto L4f0a92;
  #L4f0a8c.  v15:= -16777216I;
  #L4f0a90.  return v15;
  #L4f0a92.  v0:= 99.0F;
  #L4f0a96.  v0:= fcmpl(v15, v0);
  #L4f0a9a.  if v0 <= 0 then goto L4f0aa2;
  #L4f0a9e.  v15:= -1I;
  #L4f0aa0.  return v15;
  #L4f0aa2.  v0:= 16.0F;
  #L4f0aa6.  v1:= v15 + v0 @kind float;
  #L4f0aaa.  v2:= 116.0F;
  #L4f0aae.  v1:= v1 / v2 @kind float;
  #L4f0ab0.  v3:= 1147261687I;
  #L4f0ab6.  v4:= 1007753895I;
  #L4f0abc.  v5:= 8.0F;
  #L4f0ac0.  v6:= 1I;
  #L4f0ac2.  v7:= 0I;
  #L4f0ac4.  v5:= fcmpl(v15, v5);
  #L4f0ac8.  if v5 <= 0 then goto L4f0ad0;
  #L4f0acc.  v5:= 1I;
  #L4f0ace.  goto L4f0ad2;
  #L4f0ad0.  v5:= 0I;
  #L4f0ad2.  if v5 == 0 then goto L4f0ae0;
  #L4f0ad6.  v15:= v1 * v1 @kind float;
  #L4f0ada.  v15:= v15 * v1 @kind float;
  #L4f0ade.  goto L4f0ae2;
  #L4f0ae0.  v15:= v15 / v3 @kind float;
  #L4f0ae2.  v5:= v1 * v1 @kind float;
  #L4f0ae6.  v5:= v5 * v1 @kind float;
  #L4f0aea.  v4:= fcmpl(v5, v4);
  #L4f0aee.  if v4 <= 0 then goto L4f0af6;
  #L4f0af2.  v4:= 1I;
  #L4f0af4.  goto L4f0af8;
  #L4f0af6.  v4:= 0I;
  #L4f0af8.  if v4 == 0 then goto L4f0b00;
  #L4f0afc.  v8:= v5;
  #L4f0afe.  goto L4f0b08;
  #L4f0b00.  v8:= v1 * v2 @kind float;
  #L4f0b04.  v8:= v8 - v0 @kind float;
  #L4f0b06.  v8:= v8 / v3 @kind float;
  #L4f0b08.  if v4 == 0 then goto L4f0b0e;
  #L4f0b0c.  goto L4f0b18;
  #L4f0b0e.  v1:= v1 * v2 @kind float;
  #L4f0b12.  v1:= v1 - v0 @kind float;
  #L4f0b14.  v5:= v1 / v3 @kind float;
  #L4f0b18.  v0:= `@@p.b.c` @type ^`float`[] @kind object;
  #L4f0b1c.  v1:= v0[v7];
  #L4f0b20.  v8:= v8 * v1 @kind float;
  #L4f0b24.  v9:= (`double`) v8 @kind f2d;
  #L4f0b26.  v1:= v0[v6];
  #L4f0b2a.  v15:= v15 * v1 @kind float;
  #L4f0b2e.  v11:= (`double`) v15 @kind f2d;
  #L4f0b30.  v15:= 2I;
  #L4f0b32.  v15:= v0[v15];
  #L4f0b36.  v5:= v5 * v15 @kind float;
  #L4f0b3a.  v13:= (`double`) v5 @kind f2d;
  #L4f0b3c.  call temp:= `a`(v9, v11, v13) @signature `Lq/a;.a:(DDD)I` @kind static;
  #L4f0b42.  v15:= temp;
  #L4f0b44.  return v15;
}
procedure `float` `b`(`int` v0 ) @signature `Lp/b;.b:(I)F` @AccessFlag STATIC {
    temp;

  #L4f07fc.  call temp:= `g`(v0) @signature `Lp/b;.g:(I)F` @kind static;
  #L4f0802.  v0:= temp;
  #L4f0804.  call temp:= `c`(v0) @signature `Lp/b;.c:(F)F` @kind static;
  #L4f080a.  v0:= temp;
  #L4f080c.  return v0;
}
procedure `float` `c`(`float` v2 ) @signature `Lp/b;.c:(F)F` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4f0820.  v0:= 100.0F;
  #L4f0824.  v2:= v2 / v0 @kind float;
  #L4f0826.  v0:= 1007753895I;
  #L4f082c.  v0:= fcmpg(v2, v0);
  #L4f0830.  if v0 > 0 then goto L4f0840;
  #L4f0834.  v0:= 1147261687I;
  #L4f083a.  v2:= v2 * v0 @kind float;
  #L4f083e.  return v2;
  #L4f0840.  v0:= (`double`) v2 @kind f2d;
  #L4f0842.  call temp:= `cbrt`(v0) @signature `Ljava/lang/Math;.cbrt:(D)D` @kind static;
  #L4f0848.  v0:= temp @kind wide;
  #L4f084a.  v2:= (`float`) v0 @kind d2f;
  #L4f084c.  v0:= 116.0F;
  #L4f0850.  v2:= v2 * v0 @kind float;
  #L4f0854.  v0:= 16.0F;
  #L4f0858.  v2:= v2 - v0 @kind float;
  #L4f085a.  return v2;
}
procedure `float` `d`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lp/b;.d:(FFF)F` @AccessFlag STATIC {
    temp;

  #L4f086c.  v1:= v1 - v0 @kind float;
  #L4f086e.  v1:= v1 * v2 @kind float;
  #L4f0872.  v0:= v0 + v1 @kind float;
  #L4f0874.  return v0;
}
procedure `float` `e`(`int` v5 ) @signature `Lp/b;.e:(I)F` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f0888.  v5:= (`float`) v5 @kind i2f;
  #L4f088a.  v0:= 255.0F;
  #L4f088e.  v5:= v5 / v0 @kind float;
  #L4f0890.  v0:= 100.0F;
  #L4f0894.  v1:= 1025879782I;
  #L4f089a.  v1:= fcmpg(v5, v1);
  #L4f089e.  if v1 > 0 then goto L4f08b0;
  #L4f08a2.  v1:= 1095678034I;
  #L4f08a8.  v5:= v5 / v1 @kind float;
  #L4f08aa.  v5:= v5 * v0 @kind float;
  #L4f08ae.  return v5;
  #L4f08b0.  v1:= 1029785518I;
  #L4f08b6.  v5:= v5 + v1 @kind float;
  #L4f08b8.  v1:= 1065814589I;
  #L4f08be.  v5:= v5 / v1 @kind float;
  #L4f08c0.  v1:= (`double`) v5 @kind f2d;
  #L4f08c2.  v3:= 2.4000000953674316D;
  #L4f08cc.  call temp:= `pow`(v1, v3) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f08d2.  v1:= temp @kind wide;
  #L4f08d4.  v5:= (`float`) v1 @kind d2f;
  #L4f08d6.  goto L4f08aa;
}
procedure `float`[] `f`(`int` v9 ) @signature `Lp/b;.f:(I)[F` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f09a8.  call temp:= `red`(v9) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L4f09ae.  v0:= temp;
  #L4f09b0.  call temp:= `e`(v0) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f09b6.  v0:= temp;
  #L4f09b8.  call temp:= `green`(v9) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L4f09be.  v1:= temp;
  #L4f09c0.  call temp:= `e`(v1) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f09c6.  v1:= temp;
  #L4f09c8.  call temp:= `blue`(v9) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L4f09ce.  v9:= temp;
  #L4f09d0.  call temp:= `e`(v9) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f09d6.  v9:= temp;
  #L4f09d8.  v2:= `@@p.b.d` @type ^`float`[][] @kind object;
  #L4f09dc.  v3:= 0I;
  #L4f09de.  v4:= v2[v3] @kind object;
  #L4f09e2.  v4:= v4[v3];
  #L4f09e6.  v4:= v4 * v0 @kind float;
  #L4f09ea.  v5:= v2[v3] @kind object;
  #L4f09ee.  v6:= 1I;
  #L4f09f0.  v5:= v5[v6];
  #L4f09f4.  v5:= v5 * v1 @kind float;
  #L4f09f8.  v4:= v4 + v5 @kind float;
  #L4f09fa.  v5:= v2[v3] @kind object;
  #L4f09fe.  v7:= 2I;
  #L4f0a00.  v5:= v5[v7];
  #L4f0a04.  v5:= v5 * v9 @kind float;
  #L4f0a08.  v4:= v4 + v5 @kind float;
  #L4f0a0a.  v5:= v2[v6] @kind object;
  #L4f0a0e.  v5:= v5[v3];
  #L4f0a12.  v5:= v5 * v0 @kind float;
  #L4f0a16.  v8:= v2[v6] @kind object;
  #L4f0a1a.  v8:= v8[v6];
  #L4f0a1e.  v8:= v8 * v1 @kind float;
  #L4f0a22.  v5:= v5 + v8 @kind float;
  #L4f0a24.  v8:= v2[v6] @kind object;
  #L4f0a28.  v8:= v8[v7];
  #L4f0a2c.  v8:= v8 * v9 @kind float;
  #L4f0a30.  v5:= v5 + v8 @kind float;
  #L4f0a32.  v8:= v2[v7] @kind object;
  #L4f0a36.  v8:= v8[v3];
  #L4f0a3a.  v0:= v0 * v8 @kind float;
  #L4f0a3e.  v8:= v2[v7] @kind object;
  #L4f0a42.  v8:= v8[v6];
  #L4f0a46.  v1:= v1 * v8 @kind float;
  #L4f0a4a.  v0:= v0 + v1 @kind float;
  #L4f0a4c.  v1:= v2[v7] @kind object;
  #L4f0a50.  v1:= v1[v7];
  #L4f0a54.  v9:= v9 * v1 @kind float;
  #L4f0a58.  v0:= v0 + v9 @kind float;
  #L4f0a5a.  v9:= 3I;
  #L4f0a5c.  v9:= new `float`[v9];
  #L4f0a60.  v9[v3]:= v4;
  #L4f0a64.  v9[v6]:= v5;
  #L4f0a68.  v9[v7]:= v0;
  #L4f0a6c.  return v9 @kind object;
}
procedure `float` `g`(`int` v6 ) @signature `Lp/b;.g:(I)F` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f08e8.  call temp:= `red`(v6) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L4f08ee.  v0:= temp;
  #L4f08f0.  call temp:= `e`(v0) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f08f6.  v0:= temp;
  #L4f08f8.  call temp:= `green`(v6) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L4f08fe.  v1:= temp;
  #L4f0900.  call temp:= `e`(v1) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f0906.  v1:= temp;
  #L4f0908.  call temp:= `blue`(v6) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L4f090e.  v6:= temp;
  #L4f0910.  call temp:= `e`(v6) @signature `Lp/b;.e:(I)F` @kind static;
  #L4f0916.  v6:= temp;
  #L4f0918.  v2:= `@@p.b.d` @type ^`float`[][] @kind object;
  #L4f091c.  v3:= 1I;
  #L4f091e.  v4:= v2[v3] @kind object;
  #L4f0922.  v5:= 0I;
  #L4f0924.  v4:= v4[v5];
  #L4f0928.  v0:= v0 * v4 @kind float;
  #L4f092c.  v4:= v2[v3] @kind object;
  #L4f0930.  v4:= v4[v3];
  #L4f0934.  v1:= v1 * v4 @kind float;
  #L4f0938.  v0:= v0 + v1 @kind float;
  #L4f093a.  v1:= v2[v3] @kind object;
  #L4f093e.  v2:= 2I;
  #L4f0940.  v1:= v1[v2];
  #L4f0944.  v6:= v6 * v1 @kind float;
  #L4f0948.  v0:= v0 + v6 @kind float;
  #L4f094a.  return v0;
}
procedure `float` `h`(`float` v5 ) @signature `Lp/b;.h:(F)F` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f095c.  v0:= 100.0F;
  #L4f0960.  v1:= 8.0F;
  #L4f0964.  v1:= fcmpl(v5, v1);
  #L4f0968.  if v1 <= 0 then goto L4f098e;
  #L4f096c.  v1:= (`double`) v5 @kind f2d;
  #L4f096e.  v3:= 16.0D;
  #L4f0972.  v1:= v1 + v3 @kind double;
  #L4f0974.  v3:= 116.0D;
  #L4f0978.  v1:= v1 / v3 @kind double;
  #L4f097a.  v3:= 3.0D;
  #L4f097e.  call temp:= `pow`(v1, v3) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f0984.  v1:= temp @kind wide;
  #L4f0986.  v5:= (`float`) v1 @kind d2f;
  #L4f0988.  v5:= v5 * v0 @kind float;
  #L4f098c.  return v5;
  #L4f098e.  v1:= 1147261687I;
  #L4f0994.  v5:= v5 / v1 @kind float;
  #L4f0996.  goto L4f0988;
}
