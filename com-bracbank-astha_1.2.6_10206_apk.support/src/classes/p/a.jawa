record `p.a` @kind class @AccessFlag  {
  `float` `p.a.a` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.b` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.c` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.d` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.e` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.f` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.g` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.h` @AccessFlag PRIVATE_FINAL;
  `float` `p.a.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`p.a` v0 @kind this, `float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 , `float` v6 , `float` v7 , `float` v8 , `float` v9 ) @signature `Lp/a;.<init>:(FFFFFFFFF)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f07c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f07c6.  v0.`p.a.a` @type ^`float` := v1;
  #L4f07ca.  v0.`p.a.b` @type ^`float` := v2;
  #L4f07ce.  v0.`p.a.c` @type ^`float` := v3;
  #L4f07d2.  v0.`p.a.d` @type ^`float` := v4;
  #L4f07d6.  v0.`p.a.e` @type ^`float` := v5;
  #L4f07da.  v0.`p.a.f` @type ^`float` := v6;
  #L4f07de.  v0.`p.a.g` @type ^`float` := v7;
  #L4f07e2.  v0.`p.a.h` @type ^`float` := v8;
  #L4f07e6.  v0.`p.a.i` @type ^`float` := v9;
  #L4f07ea.  return @kind void;
}
procedure `p.a` `b`(`float` v12 , `float` v13 , `float` v14 ) @signature `Lp/a;.b:(FFF)Lp/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4f00f0.  v0:= 1000.0F;
  #L4f00f4.  v1:= 0I;
  #L4f00f6.  v2:= 100.0F;
  #L4f00fa.  v3:= 0I;
  #L4f00fc.  v4:= v3 @kind object;
  #L4f00fe.  v2:= 1000.0F;
  #L4f0102.  v3:= 100.0F;
  #L4f0106.  v5:= 0I;
  #L4f0108.  v6:= v5 - v3 @kind float;
  #L4f010c.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4f0112.  v6:= temp;
  #L4f0114.  v7:= 1008981770I;
  #L4f011a.  v6:= fcmpl(v6, v7);
  #L4f011e.  if v6 <= 0 then goto L4f01bc;
  #L4f0122.  v6:= v3 - v5 @kind float;
  #L4f0126.  v7:= 2.0F;
  #L4f012a.  v6:= v6 / v7 @kind float;
  #L4f012c.  v6:= v6 + v5 @kind float;
  #L4f012e.  call temp:= `e`(v6, v13, v12) @signature `Lp/a;.e:(FFF)Lp/a;` @kind static;
  #L4f0134.  v7:= temp @kind object;
  #L4f0136.  call temp:= `p`(v7) @signature `Lp/a;.p:()I` @kind virtual;
  #L4f013c.  v7:= temp;
  #L4f013e.  call temp:= `b`(v7) @signature `Lp/b;.b:(I)F` @kind static;
  #L4f0144.  v8:= temp;
  #L4f0146.  v9:= v14 - v8 @kind float;
  #L4f014a.  call temp:= `abs`(v9) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4f0150.  v9:= temp;
  #L4f0152.  v10:= 1045220557I;
  #L4f0158.  v10:= fcmpg(v9, v10);
  #L4f015c.  if v10 >= 0 then goto L4f019a;
  #L4f0160.  call temp:= `c`(v7) @signature `Lp/a;.c:(I)Lp/a;` @kind static;
  #L4f0166.  v7:= temp @kind object;
  #L4f0168.  call temp:= `k`(v7) @signature `Lp/a;.k:()F` @kind virtual;
  #L4f016e.  v10:= temp;
  #L4f0170.  call temp:= `i`(v7) @signature `Lp/a;.i:()F` @kind virtual;
  #L4f0176.  v11:= temp;
  #L4f0178.  call temp:= `e`(v10, v11, v12) @signature `Lp/a;.e:(FFF)Lp/a;` @kind static;
  #L4f017e.  v10:= temp @kind object;
  #L4f0180.  call temp:= `a`(v7, v10) @signature `Lp/a;.a:(Lp/a;)F` @kind virtual;
  #L4f0186.  v10:= temp;
  #L4f0188.  v11:= 1.0F;
  #L4f018c.  v11:= fcmpg(v10, v11);
  #L4f0190.  if v11 > 0 then goto L4f019a;
  #L4f0194.  v4:= v7 @kind object;
  #L4f0196.  v0:= v9;
  #L4f0198.  v2:= v10;
  #L4f019a.  v7:= fcmpl(v0, v1);
  #L4f019e.  if v7 != 0 then goto L4f01ac;
  #L4f01a2.  v7:= fcmpl(v2, v1);
  #L4f01a6.  if v7 != 0 then goto L4f01ac;
  #L4f01aa.  goto L4f01bc;
  #L4f01ac.  v7:= fcmpg(v8, v14);
  #L4f01b0.  if v7 >= 0 then goto L4f01b8;
  #L4f01b4.  v5:= v6;
  #L4f01b6.  goto L4f0108;
  #L4f01b8.  v3:= v6;
  #L4f01ba.  goto L4f0108;
  #L4f01bc.  return v4 @kind object;
}
procedure `p.a` `c`(`int` v1 ) @signature `Lp/a;.c:(I)Lp/a;` @AccessFlag STATIC {
    temp;
    v0;

  #L4f01d0.  v0:= `@@p.j.k` @type ^`p.j` @kind object;
  #L4f01d4.  call temp:= `d`(v1, v0) @signature `Lp/a;.d:(ILp/j;)Lp/a;` @kind static;
  #L4f01da.  v1:= temp @kind object;
  #L4f01dc.  return v1 @kind object;
}
procedure `p.a` `d`(`int` v23 , `p.j` v24 @kind object) @signature `Lp/a;.d:(ILp/j;)Lp/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L4f01f0.  call temp:= `f`(v23) @signature `Lp/b;.f:(I)[F` @kind static;
  #L4f01f6.  v0:= temp @kind object;
  #L4f01f8.  v1:= `@@p.b.a` @type ^`float`[][] @kind object;
  #L4f01fc.  v2:= 0I;
  #L4f01fe.  v3:= v0[v2];
  #L4f0202.  v4:= v1[v2] @kind object;
  #L4f0206.  v4:= v4[v2];
  #L4f020a.  v3:= v3 * v4 @kind float;
  #L4f020e.  v4:= 1I;
  #L4f0210.  v5:= v0[v4];
  #L4f0214.  v6:= v1[v2] @kind object;
  #L4f0218.  v6:= v6[v4];
  #L4f021c.  v5:= v5 * v6 @kind float;
  #L4f0220.  v3:= v3 + v5 @kind float;
  #L4f0222.  v5:= 2I;
  #L4f0224.  v6:= v0[v5];
  #L4f0228.  v7:= v1[v2] @kind object;
  #L4f022c.  v7:= v7[v5];
  #L4f0230.  v6:= v6 * v7 @kind float;
  #L4f0234.  v3:= v3 + v6 @kind float;
  #L4f0236.  v6:= v0[v2];
  #L4f023a.  v7:= v1[v4] @kind object;
  #L4f023e.  v7:= v7[v2];
  #L4f0242.  v6:= v6 * v7 @kind float;
  #L4f0246.  v7:= v0[v4];
  #L4f024a.  v8:= v1[v4] @kind object;
  #L4f024e.  v8:= v8[v4];
  #L4f0252.  v7:= v7 * v8 @kind float;
  #L4f0256.  v6:= v6 + v7 @kind float;
  #L4f0258.  v7:= v0[v5];
  #L4f025c.  v8:= v1[v4] @kind object;
  #L4f0260.  v8:= v8[v5];
  #L4f0264.  v7:= v7 * v8 @kind float;
  #L4f0268.  v6:= v6 + v7 @kind float;
  #L4f026a.  v7:= v0[v2];
  #L4f026e.  v8:= v1[v5] @kind object;
  #L4f0272.  v8:= v8[v2];
  #L4f0276.  v7:= v7 * v8 @kind float;
  #L4f027a.  v8:= v0[v4];
  #L4f027e.  v9:= v1[v5] @kind object;
  #L4f0282.  v9:= v9[v4];
  #L4f0286.  v8:= v8 * v9 @kind float;
  #L4f028a.  v7:= v7 + v8 @kind float;
  #L4f028c.  v0:= v0[v5];
  #L4f0290.  v1:= v1[v5] @kind object;
  #L4f0294.  v1:= v1[v5];
  #L4f0298.  v0:= v0 * v1 @kind float;
  #L4f029c.  v7:= v7 + v0 @kind float;
  #L4f029e.  call temp:= `i`(v24) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f02a4.  v0:= temp @kind object;
  #L4f02a6.  v0:= v0[v2];
  #L4f02aa.  v0:= v0 * v3 @kind float;
  #L4f02ae.  call temp:= `i`(v24) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f02b4.  v1:= temp @kind object;
  #L4f02b6.  v1:= v1[v4];
  #L4f02ba.  v1:= v1 * v6 @kind float;
  #L4f02be.  call temp:= `i`(v24) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f02c4.  v2:= temp @kind object;
  #L4f02c6.  v2:= v2[v5];
  #L4f02ca.  v2:= v2 * v7 @kind float;
  #L4f02ce.  call temp:= `c`(v24) @signature `Lp/j;.c:()F` @kind virtual;
  #L4f02d4.  v3:= temp;
  #L4f02d6.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4f02dc.  v4:= temp;
  #L4f02de.  v3:= v3 * v4 @kind float;
  #L4f02e2.  v3:= (`double`) v3 @kind f2d;
  #L4f02e4.  v5:= 100.0D;
  #L4f02e8.  v3:= v3 / v5 @kind double;
  #L4f02ea.  v7:= 0.42D;
  #L4f02f4.  call temp:= `pow`(v3, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f02fa.  v3:= temp @kind wide;
  #L4f02fc.  v3:= (`float`) v3 @kind d2f;
  #L4f02fe.  call temp:= `c`(v24) @signature `Lp/j;.c:()F` @kind virtual;
  #L4f0304.  v4:= temp;
  #L4f0306.  call temp:= `abs`(v1) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4f030c.  v9:= temp;
  #L4f030e.  v4:= v4 * v9 @kind float;
  #L4f0312.  v9:= (`double`) v4 @kind f2d;
  #L4f0314.  v9:= v9 / v5 @kind double;
  #L4f0316.  call temp:= `pow`(v9, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f031c.  v9:= temp @kind wide;
  #L4f031e.  v4:= (`float`) v9 @kind d2f;
  #L4f0320.  call temp:= `c`(v24) @signature `Lp/j;.c:()F` @kind virtual;
  #L4f0326.  v9:= temp;
  #L4f0328.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4f032e.  v10:= temp;
  #L4f0330.  v9:= v9 * v10 @kind float;
  #L4f0334.  v9:= (`double`) v9 @kind f2d;
  #L4f0336.  v9:= v9 / v5 @kind double;
  #L4f0338.  call temp:= `pow`(v9, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f033e.  v7:= temp @kind wide;
  #L4f0340.  v7:= (`float`) v7 @kind d2f;
  #L4f0342.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4f0348.  v0:= temp;
  #L4f034a.  v8:= 400.0F;
  #L4f034e.  v0:= v0 * v8 @kind float;
  #L4f0352.  v0:= v0 * v3 @kind float;
  #L4f0356.  v9:= 1104742973I;
  #L4f035c.  v3:= v3 + v9 @kind float;
  #L4f035e.  v0:= v0 / v3 @kind float;
  #L4f0360.  call temp:= `signum`(v1) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4f0366.  v1:= temp;
  #L4f0368.  v1:= v1 * v8 @kind float;
  #L4f036c.  v1:= v1 * v4 @kind float;
  #L4f0370.  v4:= v4 + v9 @kind float;
  #L4f0372.  v1:= v1 / v4 @kind float;
  #L4f0374.  call temp:= `signum`(v2) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4f037a.  v2:= temp;
  #L4f037c.  v2:= v2 * v8 @kind float;
  #L4f0380.  v2:= v2 * v7 @kind float;
  #L4f0384.  v7:= v7 + v9 @kind float;
  #L4f0386.  v2:= v2 / v7 @kind float;
  #L4f0388.  v3:= (`double`) v0 @kind f2d;
  #L4f038a.  v7:= 11.0D;
  #L4f038e.  v3:= v3 * v7 @kind double;
  #L4f0392.  v7:= (`double`) v1 @kind f2d;
  #L4f0394.  v9:= -12.0D;
  #L4f0398.  v7:= v7 * v9 @kind double;
  #L4f039c.  v3:= v3 + v7 @kind double;
  #L4f039e.  v7:= (`double`) v2 @kind f2d;
  #L4f03a0.  v3:= v3 + v7 @kind double;
  #L4f03a2.  v3:= (`float`) v3 @kind d2f;
  #L4f03a4.  v4:= 11.0F;
  #L4f03a8.  v3:= v3 / v4 @kind float;
  #L4f03aa.  v4:= v0 + v1 @kind float;
  #L4f03ae.  v9:= (`double`) v4 @kind f2d;
  #L4f03b0.  v11:= 2.0D;
  #L4f03b4.  v7:= v7 * v11 @kind double;
  #L4f03b8.  v9:= v9 - v7 @kind double;
  #L4f03ba.  v4:= (`float`) v9 @kind d2f;
  #L4f03bc.  v7:= 9.0F;
  #L4f03c0.  v4:= v4 / v7 @kind float;
  #L4f03c2.  v7:= 20.0F;
  #L4f03c6.  v8:= v0 * v7 @kind float;
  #L4f03ca.  v1:= v1 * v7 @kind float;
  #L4f03ce.  v8:= v8 + v1 @kind float;
  #L4f03d0.  v9:= 21.0F;
  #L4f03d4.  v9:= v9 * v2 @kind float;
  #L4f03d8.  v8:= v8 + v9 @kind float;
  #L4f03da.  v8:= v8 / v7 @kind float;
  #L4f03dc.  v9:= 40.0F;
  #L4f03e0.  v0:= v0 * v9 @kind float;
  #L4f03e4.  v0:= v0 + v1 @kind float;
  #L4f03e6.  v0:= v0 + v2 @kind float;
  #L4f03e8.  v0:= v0 / v7 @kind float;
  #L4f03ea.  v1:= (`double`) v4 @kind f2d;
  #L4f03ec.  v9:= (`double`) v3 @kind f2d;
  #L4f03ee.  call temp:= `atan2`(v1, v9) @signature `Ljava/lang/Math;.atan2:(DD)D` @kind static;
  #L4f03f4.  v1:= temp @kind wide;
  #L4f03f6.  v1:= (`float`) v1 @kind d2f;
  #L4f03f8.  v2:= 180.0F;
  #L4f03fc.  v1:= v1 * v2 @kind float;
  #L4f0400.  v7:= 1078530011I;
  #L4f0406.  v1:= v1 / v7 @kind float;
  #L4f0408.  v9:= 360.0F;
  #L4f040c.  v10:= 0I;
  #L4f040e.  v10:= fcmpg(v1, v10);
  #L4f0412.  if v10 >= 0 then goto L4f041c;
  #L4f0416.  v1:= v1 + v9 @kind float;
  #L4f0418.  v14:= v1;
  #L4f041a.  goto L4f0428;
  #L4f041c.  v10:= fcmpl(v1, v9);
  #L4f0420.  if v10 < 0 then goto L4f0418;
  #L4f0424.  v1:= v1 - v9 @kind float;
  #L4f0426.  goto L4f0418;
  #L4f0428.  v7:= v7 * v14 @kind float;
  #L4f042c.  v7:= v7 / v2 @kind float;
  #L4f042e.  call temp:= `f`(v24) @signature `Lp/j;.f:()F` @kind virtual;
  #L4f0434.  v1:= temp;
  #L4f0436.  v0:= v0 * v1 @kind float;
  #L4f043a.  call temp:= `a`(v24) @signature `Lp/j;.a:()F` @kind virtual;
  #L4f0440.  v1:= temp;
  #L4f0442.  v0:= v0 / v1 @kind float;
  #L4f0444.  v0:= (`double`) v0 @kind f2d;
  #L4f0446.  call temp:= `b`(v24) @signature `Lp/j;.b:()F` @kind virtual;
  #L4f044c.  v2:= temp;
  #L4f044e.  call temp:= `j`(v24) @signature `Lp/j;.j:()F` @kind virtual;
  #L4f0454.  v10:= temp;
  #L4f0456.  v2:= v2 * v10 @kind float;
  #L4f045a.  v5:= (`double`) v2 @kind f2d;
  #L4f045c.  call temp:= `pow`(v0, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f0462.  v0:= temp @kind wide;
  #L4f0464.  v0:= (`float`) v0 @kind d2f;
  #L4f0466.  v1:= 100.0F;
  #L4f046a.  v0:= v0 * v1 @kind float;
  #L4f046e.  call temp:= `b`(v24) @signature `Lp/j;.b:()F` @kind virtual;
  #L4f0474.  v2:= temp;
  #L4f0476.  v5:= 4.0F;
  #L4f047a.  v2:= v5 / v2 @kind float;
  #L4f047e.  v1:= v0 / v1 @kind float;
  #L4f0482.  v11:= (`double`) v1 @kind f2d;
  #L4f0484.  call temp:= `sqrt`(v11) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f048a.  v10:= temp @kind wide;
  #L4f048c.  v1:= (`float`) v10 @kind d2f;
  #L4f048e.  v2:= v2 * v1 @kind float;
  #L4f0492.  call temp:= `a`(v24) @signature `Lp/j;.a:()F` @kind virtual;
  #L4f0498.  v1:= temp;
  #L4f049a.  v1:= v1 + v5 @kind float;
  #L4f049c.  v2:= v2 * v1 @kind float;
  #L4f04a0.  call temp:= `d`(v24) @signature `Lp/j;.d:()F` @kind virtual;
  #L4f04a6.  v1:= temp;
  #L4f04a8.  v1:= v1 * v2 @kind float;
  #L4f04ac.  v10:= (`double`) v14 @kind f2d;
  #L4f04ae.  v12:= 20.14D;
  #L4f04b8.  v2:= dcmpg(v10, v12);
  #L4f04bc.  if v2 >= 0 then goto L4f04c4;
  #L4f04c0.  v9:= v9 + v14 @kind float;
  #L4f04c2.  goto L4f04c6;
  #L4f04c4.  v9:= v14;
  #L4f04c6.  v2:= 0.25F;
  #L4f04ca.  v9:= (`double`) v9 @kind f2d;
  #L4f04cc.  v11:= 3.141592653589793D;
  #L4f04d6.  v9:= v9 * v11 @kind double;
  #L4f04da.  v11:= 180.0D;
  #L4f04e4.  v9:= v9 / v11 @kind double;
  #L4f04e6.  v11:= 2.0D;
  #L4f04ea.  v9:= v9 + v11 @kind double;
  #L4f04ec.  call temp:= `cos`(v9) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L4f04f2.  v9:= temp @kind wide;
  #L4f04f4.  v11:= 3.8D;
  #L4f04fe.  v9:= v9 + v11 @kind double;
  #L4f0500.  v6:= (`float`) v9 @kind d2f;
  #L4f0502.  v6:= v6 * v2 @kind float;
  #L4f0506.  v2:= 1164993142I;
  #L4f050c.  v6:= v6 * v2 @kind float;
  #L4f0510.  call temp:= `g`(v24) @signature `Lp/j;.g:()F` @kind virtual;
  #L4f0516.  v2:= temp;
  #L4f0518.  v6:= v6 * v2 @kind float;
  #L4f051c.  call temp:= `h`(v24) @signature `Lp/j;.h:()F` @kind virtual;
  #L4f0522.  v2:= temp;
  #L4f0524.  v6:= v6 * v2 @kind float;
  #L4f0528.  v3:= v3 * v3 @kind float;
  #L4f052c.  v4:= v4 * v4 @kind float;
  #L4f0530.  v3:= v3 + v4 @kind float;
  #L4f0532.  v2:= (`double`) v3 @kind f2d;
  #L4f0534.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f053a.  v2:= temp @kind wide;
  #L4f053c.  v2:= (`float`) v2 @kind d2f;
  #L4f053e.  v6:= v6 * v2 @kind float;
  #L4f0542.  v2:= 1050421494I;
  #L4f0548.  v8:= v8 + v2 @kind float;
  #L4f054a.  v6:= v6 / v8 @kind float;
  #L4f054c.  v2:= 1.64D;
  #L4f0556.  v8:= 0.29D;
  #L4f0560.  call temp:= `e`(v24) @signature `Lp/j;.e:()F` @kind virtual;
  #L4f0566.  v4:= temp;
  #L4f0568.  v10:= (`double`) v4 @kind f2d;
  #L4f056a.  call temp:= `pow`(v8, v10) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f0570.  v8:= temp @kind wide;
  #L4f0572.  v2:= v2 - v8 @kind double;
  #L4f0574.  v8:= 0.73D;
  #L4f057e.  call temp:= `pow`(v2, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f0584.  v2:= temp @kind wide;
  #L4f0586.  v2:= (`float`) v2 @kind d2f;
  #L4f0588.  v3:= (`double`) v6 @kind f2d;
  #L4f058a.  v8:= 0.9D;
  #L4f0594.  call temp:= `pow`(v3, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f059a.  v3:= temp @kind wide;
  #L4f059c.  v3:= (`float`) v3 @kind d2f;
  #L4f059e.  v2:= v2 * v3 @kind float;
  #L4f05a2.  v3:= (`double`) v0 @kind f2d;
  #L4f05a4.  v8:= 100.0D;
  #L4f05a8.  v3:= v3 / v8 @kind double;
  #L4f05aa.  call temp:= `sqrt`(v3) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f05b0.  v3:= temp @kind wide;
  #L4f05b2.  v3:= (`float`) v3 @kind d2f;
  #L4f05b4.  v15:= v2 * v3 @kind float;
  #L4f05b8.  call temp:= `d`(v24) @signature `Lp/j;.d:()F` @kind virtual;
  #L4f05be.  v3:= temp;
  #L4f05c0.  v18:= v15 * v3 @kind float;
  #L4f05c4.  v3:= 50.0F;
  #L4f05c8.  call temp:= `b`(v24) @signature `Lp/j;.b:()F` @kind virtual;
  #L4f05ce.  v4:= temp;
  #L4f05d0.  v2:= v2 * v4 @kind float;
  #L4f05d4.  call temp:= `a`(v24) @signature `Lp/j;.a:()F` @kind virtual;
  #L4f05da.  v4:= temp;
  #L4f05dc.  v4:= v4 + v5 @kind float;
  #L4f05de.  v2:= v2 / v4 @kind float;
  #L4f05e0.  v4:= (`double`) v2 @kind f2d;
  #L4f05e2.  call temp:= `sqrt`(v4) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f05e8.  v4:= temp @kind wide;
  #L4f05ea.  v2:= (`float`) v4 @kind d2f;
  #L4f05ec.  v19:= v2 * v3 @kind float;
  #L4f05f0.  v2:= 1071225242I;
  #L4f05f6.  v2:= v2 * v0 @kind float;
  #L4f05fa.  v3:= 1004888130I;
  #L4f0600.  v3:= v3 * v0 @kind float;
  #L4f0604.  v4:= 1.0F;
  #L4f0608.  v3:= v3 + v4 @kind float;
  #L4f060a.  v20:= v2 / v3 @kind float;
  #L4f060e.  v2:= 1110405192I;
  #L4f0614.  v3:= 1018873617I;
  #L4f061a.  v3:= v3 * v18 @kind float;
  #L4f061e.  v3:= v3 + v4 @kind float;
  #L4f0620.  v3:= (`double`) v3 @kind f2d;
  #L4f0622.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L4f0628.  v3:= temp @kind wide;
  #L4f062a.  v3:= (`float`) v3 @kind d2f;
  #L4f062c.  v3:= v3 * v2 @kind float;
  #L4f0630.  v4:= (`double`) v7 @kind f2d;
  #L4f0632.  call temp:= `cos`(v4) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L4f0638.  v6:= temp @kind wide;
  #L4f063a.  v2:= (`float`) v6 @kind d2f;
  #L4f063c.  v21:= v3 * v2 @kind float;
  #L4f0640.  call temp:= `sin`(v4) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L4f0646.  v4:= temp @kind wide;
  #L4f0648.  v2:= (`float`) v4 @kind d2f;
  #L4f064a.  v22:= v3 * v2 @kind float;
  #L4f064e.  v2:= new `p.a`;
  #L4f0652.  v13:= v2 @kind object;
  #L4f0654.  v16:= v0;
  #L4f0658.  v17:= v1;
  #L4f065c.  call `<init>`(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) @signature `Lp/a;.<init>:(FFFFFFFFF)V` @kind direct;
  #L4f0662.  return v2 @kind object;
}
procedure `p.a` `e`(`float` v1 , `float` v2 , `float` v3 ) @signature `Lp/a;.e:(FFF)Lp/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4f0674.  v0:= `@@p.j.k` @type ^`p.j` @kind object;
  #L4f0678.  call temp:= `f`(v1, v2, v3, v0) @signature `Lp/a;.f:(FFFLp/j;)Lp/a;` @kind static;
  #L4f067e.  v1:= temp @kind object;
  #L4f0680.  return v1 @kind object;
}
procedure `p.a` `f`(`float` v13 , `float` v14 , `float` v15 , `p.j` v16 @kind object) @signature `Lp/a;.f:(FFFLp/j;)Lp/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4f0694.  v3:= v13;
  #L4f0696.  call temp:= `b`(v16) @signature `Lp/j;.b:()F` @kind virtual;
  #L4f069c.  v0:= temp;
  #L4f069e.  v1:= 4.0F;
  #L4f06a2.  v0:= v1 / v0 @kind float;
  #L4f06a6.  v4:= (`double`) v3 @kind f2d;
  #L4f06a8.  v6:= 100.0D;
  #L4f06ac.  v4:= v4 / v6 @kind double;
  #L4f06ae.  call temp:= `sqrt`(v4) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f06b4.  v6:= temp @kind wide;
  #L4f06b6.  v2:= (`float`) v6 @kind d2f;
  #L4f06b8.  v0:= v0 * v2 @kind float;
  #L4f06bc.  call temp:= `a`(v16) @signature `Lp/j;.a:()F` @kind virtual;
  #L4f06c2.  v2:= temp;
  #L4f06c4.  v2:= v2 + v1 @kind float;
  #L4f06c6.  v0:= v0 * v2 @kind float;
  #L4f06ca.  call temp:= `d`(v16) @signature `Lp/j;.d:()F` @kind virtual;
  #L4f06d0.  v2:= temp;
  #L4f06d2.  v6:= v0 * v2 @kind float;
  #L4f06d6.  call temp:= `d`(v16) @signature `Lp/j;.d:()F` @kind virtual;
  #L4f06dc.  v0:= temp;
  #L4f06de.  v7:= v14 * v0 @kind float;
  #L4f06e2.  call temp:= `sqrt`(v4) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f06e8.  v4:= temp @kind wide;
  #L4f06ea.  v0:= (`float`) v4 @kind d2f;
  #L4f06ec.  v0:= v14 / v0 @kind float;
  #L4f06f0.  call temp:= `b`(v16) @signature `Lp/j;.b:()F` @kind virtual;
  #L4f06f6.  v2:= temp;
  #L4f06f8.  v0:= v0 * v2 @kind float;
  #L4f06fc.  call temp:= `a`(v16) @signature `Lp/j;.a:()F` @kind virtual;
  #L4f0702.  v2:= temp;
  #L4f0704.  v2:= v2 + v1 @kind float;
  #L4f0706.  v0:= v0 / v2 @kind float;
  #L4f0708.  v0:= (`double`) v0 @kind f2d;
  #L4f070a.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f0710.  v0:= temp @kind wide;
  #L4f0712.  v0:= (`float`) v0 @kind d2f;
  #L4f0714.  v1:= 50.0F;
  #L4f0718.  v8:= v0 * v1 @kind float;
  #L4f071c.  v0:= 1078530011I;
  #L4f0722.  v0:= v0 * v15 @kind float;
  #L4f0726.  v1:= 180.0F;
  #L4f072a.  v0:= v0 / v1 @kind float;
  #L4f072c.  v1:= 1071225242I;
  #L4f0732.  v1:= v1 * v3 @kind float;
  #L4f0736.  v2:= 1004888130I;
  #L4f073c.  v2:= v2 * v3 @kind float;
  #L4f0740.  v4:= 1.0F;
  #L4f0744.  v2:= v2 + v4 @kind float;
  #L4f0746.  v9:= v1 / v2 @kind float;
  #L4f074a.  v1:= (`double`) v7 @kind f2d;
  #L4f074c.  v4:= 0.0228D;
  #L4f0756.  v1:= v1 * v4 @kind double;
  #L4f075a.  v4:= 1.0D;
  #L4f075e.  v1:= v1 + v4 @kind double;
  #L4f0760.  call temp:= `log`(v1) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L4f0766.  v1:= temp @kind wide;
  #L4f0768.  v1:= (`float`) v1 @kind d2f;
  #L4f076a.  v2:= 1110405192I;
  #L4f0770.  v1:= v1 * v2 @kind float;
  #L4f0774.  v4:= (`double`) v0 @kind f2d;
  #L4f0776.  call temp:= `cos`(v4) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L4f077c.  v10:= temp @kind wide;
  #L4f077e.  v0:= (`float`) v10 @kind d2f;
  #L4f0780.  v10:= v1 * v0 @kind float;
  #L4f0784.  call temp:= `sin`(v4) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L4f078a.  v4:= temp @kind wide;
  #L4f078c.  v0:= (`float`) v4 @kind d2f;
  #L4f078e.  v11:= v1 * v0 @kind float;
  #L4f0792.  v12:= new `p.a`;
  #L4f0796.  v0:= v12 @kind object;
  #L4f0798.  v1:= v15;
  #L4f079a.  v2:= v14;
  #L4f079c.  v4:= v6;
  #L4f079e.  v5:= v7;
  #L4f07a0.  v6:= v8;
  #L4f07a2.  v7:= v9;
  #L4f07a4.  v8:= v10;
  #L4f07a6.  v9:= v11;
  #L4f07a8.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lp/a;.<init>:(FFFFFFFFF)V` @kind direct;
  #L4f07ae.  return v12 @kind object;
}
procedure `int` `m`(`float` v1 , `float` v2 , `float` v3 ) @signature `Lp/a;.m:(FFF)I` @AccessFlag STATIC {
    temp;
    v0;

  #L4efbe8.  v0:= `@@p.j.k` @type ^`p.j` @kind object;
  #L4efbec.  call temp:= `n`(v1, v2, v3, v0) @signature `Lp/a;.n:(FFFLp/j;)I` @kind static;
  #L4efbf2.  v1:= temp;
  #L4efbf4.  return v1;
}
procedure `int` `n`(`float` v6 , `float` v7 , `float` v8 , `p.j` v9 @kind object) @signature `Lp/a;.n:(FFFLp/j;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4efc08.  v0:= (`double`) v7 @kind f2d;
  #L4efc0a.  v2:= 1.0D;
  #L4efc0e.  v4:= dcmpg(v0, v2);
  #L4efc12.  if v4 < 0 then goto L4efcd4;
  #L4efc16.  call temp:= `round`(v8) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L4efc1c.  v0:= temp;
  #L4efc1e.  v0:= (`double`) v0 @kind i2d;
  #L4efc20.  v2:= 0L;
  #L4efc24.  v4:= dcmpg(v0, v2);
  #L4efc28.  if v4 <= 0 then goto L4efcd4;
  #L4efc2c.  call temp:= `round`(v8) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L4efc32.  v0:= temp;
  #L4efc34.  v0:= (`double`) v0 @kind i2d;
  #L4efc36.  v2:= 100.0D;
  #L4efc3a.  v4:= dcmpl(v0, v2);
  #L4efc3e.  if v4 < 0 then goto L4efc44;
  #L4efc42.  goto L4efcd4;
  #L4efc44.  v0:= 0I;
  #L4efc46.  v1:= fcmpg(v6, v0);
  #L4efc4a.  if v1 >= 0 then goto L4efc52;
  #L4efc4e.  v6:= 0I;
  #L4efc50.  goto L4efc5e;
  #L4efc52.  v1:= 360.0F;
  #L4efc56.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L4efc5c.  v6:= temp;
  #L4efc5e.  v1:= 1I;
  #L4efc60.  v2:= 0I;
  #L4efc62.  v0:= v7;
  #L4efc64.  v3:= v2 @kind object;
  #L4efc66.  v1:= 0I;
  #L4efc68.  v2:= 1I;
  #L4efc6a.  v4:= v1 - v7 @kind float;
  #L4efc6e.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4efc74.  v4:= temp;
  #L4efc76.  v5:= 1053609165I;
  #L4efc7c.  v4:= fcmpl(v4, v5);
  #L4efc80.  if v4 < 0 then goto L4efcbc;
  #L4efc84.  call temp:= `b`(v6, v0, v8) @signature `Lp/a;.b:(FFF)Lp/a;` @kind static;
  #L4efc8a.  v4:= temp @kind object;
  #L4efc8c.  v5:= 2.0F;
  #L4efc90.  if v2 == 0 then goto L4efcae;
  #L4efc94.  if v4 == 0 then goto L4efca2;
  #L4efc98.  call temp:= `o`(v4, v9) @signature `Lp/a;.o:(Lp/j;)I` @kind virtual;
  #L4efc9e.  v6:= temp;
  #L4efca0.  return v6;
  #L4efca2.  v2:= 0I;
  #L4efca4.  v0:= v7 - v1 @kind float;
  #L4efca8.  v0:= v0 / v5 @kind float;
  #L4efcaa.  v0:= v0 + v1 @kind float;
  #L4efcac.  goto L4efc6a;
  #L4efcae.  if v4 != 0 then goto L4efcb6;
  #L4efcb2.  v7:= v0;
  #L4efcb4.  goto L4efca4;
  #L4efcb6.  v1:= v0;
  #L4efcb8.  v3:= v4 @kind object;
  #L4efcba.  goto L4efca4;
  #L4efcbc.  if v3 != 0 then goto L4efcca;
  #L4efcc0.  call temp:= `a`(v8) @signature `Lp/b;.a:(F)I` @kind static;
  #L4efcc6.  v6:= temp;
  #L4efcc8.  return v6;
  #L4efcca.  call temp:= `o`(v3, v9) @signature `Lp/a;.o:(Lp/j;)I` @kind virtual;
  #L4efcd0.  v6:= temp;
  #L4efcd2.  return v6;
  #L4efcd4.  call temp:= `a`(v8) @signature `Lp/b;.a:(F)I` @kind static;
  #L4efcda.  v6:= temp;
  #L4efcdc.  return v6;
}
procedure `float` `a`(`p.a` v4 @kind this, `p.a` v5 @kind object) @signature `Lp/a;.a:(Lp/a;)F` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4efad4.  call temp:= `l`(v4) @signature `Lp/a;.l:()F` @kind virtual;
  #L4efada.  v0:= temp;
  #L4efadc.  call temp:= `l`(v5) @signature `Lp/a;.l:()F` @kind virtual;
  #L4efae2.  v1:= temp;
  #L4efae4.  v0:= v0 - v1 @kind float;
  #L4efae6.  call temp:= `g`(v4) @signature `Lp/a;.g:()F` @kind virtual;
  #L4efaec.  v1:= temp;
  #L4efaee.  call temp:= `g`(v5) @signature `Lp/a;.g:()F` @kind virtual;
  #L4efaf4.  v2:= temp;
  #L4efaf6.  v1:= v1 - v2 @kind float;
  #L4efaf8.  call temp:= `h`(v4) @signature `Lp/a;.h:()F` @kind virtual;
  #L4efafe.  v2:= temp;
  #L4efb00.  call temp:= `h`(v5) @signature `Lp/a;.h:()F` @kind virtual;
  #L4efb06.  v5:= temp;
  #L4efb08.  v2:= v2 - v5 @kind float;
  #L4efb0a.  v0:= v0 * v0 @kind float;
  #L4efb0e.  v1:= v1 * v1 @kind float;
  #L4efb12.  v0:= v0 + v1 @kind float;
  #L4efb14.  v2:= v2 * v2 @kind float;
  #L4efb18.  v0:= v0 + v2 @kind float;
  #L4efb1a.  v0:= (`double`) v0 @kind f2d;
  #L4efb1c.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4efb22.  v0:= temp @kind wide;
  #L4efb24.  v2:= 0.63D;
  #L4efb2e.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efb34.  v0:= temp @kind wide;
  #L4efb36.  v2:= 1.41D;
  #L4efb40.  v0:= v0 * v2 @kind double;
  #L4efb44.  v5:= (`float`) v0 @kind d2f;
  #L4efb46.  return v5;
}
procedure `float` `g`(`p.a` v1 @kind this) @signature `Lp/a;.g:()F` @AccessFlag  {
    temp;
    v0;

  #L4efb58.  v0:= v1.`p.a.h` @type ^`float`;
  #L4efb5c.  return v0;
}
procedure `float` `h`(`p.a` v1 @kind this) @signature `Lp/a;.h:()F` @AccessFlag  {
    temp;
    v0;

  #L4efb70.  v0:= v1.`p.a.i` @type ^`float`;
  #L4efb74.  return v0;
}
procedure `float` `i`(`p.a` v1 @kind this) @signature `Lp/a;.i:()F` @AccessFlag  {
    temp;
    v0;

  #L4efb88.  v0:= v1.`p.a.b` @type ^`float`;
  #L4efb8c.  return v0;
}
procedure `float` `j`(`p.a` v1 @kind this) @signature `Lp/a;.j:()F` @AccessFlag  {
    temp;
    v0;

  #L4efba0.  v0:= v1.`p.a.a` @type ^`float`;
  #L4efba4.  return v0;
}
procedure `float` `k`(`p.a` v1 @kind this) @signature `Lp/a;.k:()F` @AccessFlag  {
    temp;
    v0;

  #L4efbb8.  v0:= v1.`p.a.c` @type ^`float`;
  #L4efbbc.  return v0;
}
procedure `float` `l`(`p.a` v1 @kind this) @signature `Lp/a;.l:()F` @AccessFlag  {
    temp;
    v0;

  #L4efbd0.  v0:= v1.`p.a.g` @type ^`float`;
  #L4efbd4.  return v0;
}
procedure `int` `o`(`p.a` v15 @kind this, `p.j` v16 @kind object) @signature `Lp/a;.o:(Lp/j;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L4efcf0.  call temp:= `i`(v15) @signature `Lp/a;.i:()F` @kind virtual;
  #L4efcf6.  v0:= temp;
  #L4efcf8.  v0:= (`double`) v0 @kind f2d;
  #L4efcfa.  v2:= 100.0D;
  #L4efcfe.  v4:= 0L;
  #L4efd02.  v6:= dcmpl(v0, v4);
  #L4efd06.  if v6 == 0 then goto L4efd40;
  #L4efd0a.  call temp:= `k`(v15) @signature `Lp/a;.k:()F` @kind virtual;
  #L4efd10.  v0:= temp;
  #L4efd12.  v0:= (`double`) v0 @kind f2d;
  #L4efd14.  v6:= dcmpl(v0, v4);
  #L4efd18.  if v6 != 0 then goto L4efd1e;
  #L4efd1c.  goto L4efd40;
  #L4efd1e.  call temp:= `i`(v15) @signature `Lp/a;.i:()F` @kind virtual;
  #L4efd24.  v0:= temp;
  #L4efd26.  call temp:= `k`(v15) @signature `Lp/a;.k:()F` @kind virtual;
  #L4efd2c.  v1:= temp;
  #L4efd2e.  v6:= (`double`) v1 @kind f2d;
  #L4efd30.  v6:= v6 / v2 @kind double;
  #L4efd32.  call temp:= `sqrt`(v6) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4efd38.  v6:= temp @kind wide;
  #L4efd3a.  v1:= (`float`) v6 @kind d2f;
  #L4efd3c.  v0:= v0 / v1 @kind float;
  #L4efd3e.  goto L4efd42;
  #L4efd40.  v0:= 0I;
  #L4efd42.  v0:= (`double`) v0 @kind f2d;
  #L4efd44.  v6:= 1.64D;
  #L4efd4e.  v8:= 0.29D;
  #L4efd58.  call temp:= `e`(v16) @signature `Lp/j;.e:()F` @kind virtual;
  #L4efd5e.  v10:= temp;
  #L4efd60.  v10:= (`double`) v10 @kind f2d;
  #L4efd62.  call temp:= `pow`(v8, v10) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efd68.  v8:= temp @kind wide;
  #L4efd6a.  v6:= v6 - v8 @kind double;
  #L4efd6c.  v8:= 0.73D;
  #L4efd76.  call temp:= `pow`(v6, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efd7c.  v6:= temp @kind wide;
  #L4efd7e.  v0:= v0 / v6 @kind double;
  #L4efd80.  v6:= 1.1111111111111112D;
  #L4efd8a.  call temp:= `pow`(v0, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efd90.  v0:= temp @kind wide;
  #L4efd92.  v0:= (`float`) v0 @kind d2f;
  #L4efd94.  call temp:= `j`(v15) @signature `Lp/a;.j:()F` @kind virtual;
  #L4efd9a.  v1:= temp;
  #L4efd9c.  v6:= 1078530011I;
  #L4efda2.  v1:= v1 * v6 @kind float;
  #L4efda6.  v6:= 180.0F;
  #L4efdaa.  v1:= v1 / v6 @kind float;
  #L4efdac.  v6:= 0.25F;
  #L4efdb0.  v7:= (`double`) v1 @kind f2d;
  #L4efdb2.  v9:= 2.0D;
  #L4efdb6.  v9:= v9 + v7 @kind double;
  #L4efdb8.  call temp:= `cos`(v9) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L4efdbe.  v9:= temp @kind wide;
  #L4efdc0.  v11:= 3.8D;
  #L4efdca.  v9:= v9 + v11 @kind double;
  #L4efdcc.  v1:= (`float`) v9 @kind d2f;
  #L4efdce.  v1:= v1 * v6 @kind float;
  #L4efdd2.  call temp:= `a`(v16) @signature `Lp/j;.a:()F` @kind virtual;
  #L4efdd8.  v6:= temp;
  #L4efdda.  call temp:= `k`(v15) @signature `Lp/a;.k:()F` @kind virtual;
  #L4efde0.  v9:= temp;
  #L4efde2.  v9:= (`double`) v9 @kind f2d;
  #L4efde4.  v9:= v9 / v2 @kind double;
  #L4efde6.  v2:= 1.0D;
  #L4efdea.  call temp:= `b`(v16) @signature `Lp/j;.b:()F` @kind virtual;
  #L4efdf0.  v11:= temp;
  #L4efdf2.  v11:= (`double`) v11 @kind f2d;
  #L4efdf4.  v2:= v2 / v11 @kind double;
  #L4efdf6.  call temp:= `j`(v16) @signature `Lp/j;.j:()F` @kind virtual;
  #L4efdfc.  v11:= temp;
  #L4efdfe.  v11:= (`double`) v11 @kind f2d;
  #L4efe00.  v2:= v2 / v11 @kind double;
  #L4efe02.  call temp:= `pow`(v9, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efe08.  v2:= temp @kind wide;
  #L4efe0a.  v2:= (`float`) v2 @kind d2f;
  #L4efe0c.  v6:= v6 * v2 @kind float;
  #L4efe10.  v2:= 1164993142I;
  #L4efe16.  v1:= v1 * v2 @kind float;
  #L4efe1a.  call temp:= `g`(v16) @signature `Lp/j;.g:()F` @kind virtual;
  #L4efe20.  v2:= temp;
  #L4efe22.  v1:= v1 * v2 @kind float;
  #L4efe26.  call temp:= `h`(v16) @signature `Lp/j;.h:()F` @kind virtual;
  #L4efe2c.  v2:= temp;
  #L4efe2e.  v1:= v1 * v2 @kind float;
  #L4efe32.  call temp:= `f`(v16) @signature `Lp/j;.f:()F` @kind virtual;
  #L4efe38.  v2:= temp;
  #L4efe3a.  v6:= v6 / v2 @kind float;
  #L4efe3c.  call temp:= `sin`(v7) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L4efe42.  v2:= temp @kind wide;
  #L4efe44.  v2:= (`float`) v2 @kind d2f;
  #L4efe46.  call temp:= `cos`(v7) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L4efe4c.  v7:= temp @kind wide;
  #L4efe4e.  v3:= (`float`) v7 @kind d2f;
  #L4efe50.  v7:= 1050421494I;
  #L4efe56.  v7:= v7 + v6 @kind float;
  #L4efe58.  v8:= 23.0F;
  #L4efe5c.  v7:= v7 * v8 @kind float;
  #L4efe60.  v7:= v7 * v0 @kind float;
  #L4efe64.  v1:= v1 * v8 @kind float;
  #L4efe68.  v8:= 11.0F;
  #L4efe6c.  v8:= v8 * v0 @kind float;
  #L4efe70.  v8:= v8 * v3 @kind float;
  #L4efe74.  v1:= v1 + v8 @kind float;
  #L4efe76.  v8:= 108.0F;
  #L4efe7a.  v0:= v0 * v8 @kind float;
  #L4efe7e.  v0:= v0 * v2 @kind float;
  #L4efe82.  v1:= v1 + v0 @kind float;
  #L4efe84.  v7:= v7 / v1 @kind float;
  #L4efe86.  v3:= v3 * v7 @kind float;
  #L4efe8a.  v7:= v7 * v2 @kind float;
  #L4efe8e.  v0:= 460.0F;
  #L4efe92.  v6:= v6 * v0 @kind float;
  #L4efe96.  v0:= 1138851840I;
  #L4efe9c.  v0:= v0 * v3 @kind float;
  #L4efea0.  v0:= v0 + v6 @kind float;
  #L4efea2.  v1:= 288.0F;
  #L4efea6.  v1:= v1 * v7 @kind float;
  #L4efeaa.  v0:= v0 + v1 @kind float;
  #L4efeac.  v1:= 1152344064I;
  #L4efeb2.  v0:= v0 / v1 @kind float;
  #L4efeb4.  v2:= 1147060224I;
  #L4efeba.  v2:= v2 * v3 @kind float;
  #L4efebe.  v2:= v6 - v2 @kind float;
  #L4efec2.  v8:= 1132625920I;
  #L4efec8.  v8:= v8 * v7 @kind float;
  #L4efecc.  v2:= v2 - v8 @kind float;
  #L4efece.  v2:= v2 / v1 @kind float;
  #L4efed0.  v8:= 220.0F;
  #L4efed4.  v3:= v3 * v8 @kind float;
  #L4efed8.  v6:= v6 - v3 @kind float;
  #L4efeda.  v3:= 1170530304I;
  #L4efee0.  v7:= v7 * v3 @kind float;
  #L4efee4.  v6:= v6 - v7 @kind float;
  #L4efee6.  v6:= v6 / v1 @kind float;
  #L4efee8.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4efeee.  v1:= temp;
  #L4efef0.  v7:= (`double`) v1 @kind f2d;
  #L4efef2.  v9:= 27.13D;
  #L4efefc.  v7:= v7 * v9 @kind double;
  #L4eff00.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4eff06.  v1:= temp;
  #L4eff08.  v11:= (`double`) v1 @kind f2d;
  #L4eff0a.  v13:= 400.0D;
  #L4eff0e.  v11:= v13 - v11 @kind double;
  #L4eff12.  v7:= v7 / v11 @kind double;
  #L4eff14.  call temp:= `max`(v4, v7) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L4eff1a.  v7:= temp @kind wide;
  #L4eff1c.  v1:= (`float`) v7 @kind d2f;
  #L4eff1e.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4eff24.  v0:= temp;
  #L4eff26.  call temp:= `c`(v16) @signature `Lp/j;.c:()F` @kind virtual;
  #L4eff2c.  v3:= temp;
  #L4eff2e.  v7:= 100.0F;
  #L4eff32.  v3:= v7 / v3 @kind float;
  #L4eff36.  v0:= v0 * v3 @kind float;
  #L4eff3a.  v11:= (`double`) v1 @kind f2d;
  #L4eff3c.  v7:= 2.380952380952381D;
  #L4eff46.  call temp:= `pow`(v11, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4eff4c.  v11:= temp @kind wide;
  #L4eff4e.  v3:= (`float`) v11 @kind d2f;
  #L4eff50.  v0:= v0 * v3 @kind float;
  #L4eff54.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4eff5a.  v3:= temp;
  #L4eff5c.  v11:= (`double`) v3 @kind f2d;
  #L4eff5e.  v11:= v11 * v9 @kind double;
  #L4eff62.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4eff68.  v3:= temp;
  #L4eff6a.  v9:= (`double`) v3 @kind f2d;
  #L4eff6c.  v9:= v13 - v9 @kind double;
  #L4eff70.  v11:= v11 / v9 @kind double;
  #L4eff72.  call temp:= `max`(v4, v11) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L4eff78.  v9:= temp @kind wide;
  #L4eff7a.  v3:= (`float`) v9 @kind d2f;
  #L4eff7c.  call temp:= `signum`(v2) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4eff82.  v2:= temp;
  #L4eff84.  call temp:= `c`(v16) @signature `Lp/j;.c:()F` @kind virtual;
  #L4eff8a.  v9:= temp;
  #L4eff8c.  v1:= 100.0F;
  #L4eff90.  v9:= v1 / v9 @kind float;
  #L4eff94.  v2:= v2 * v9 @kind float;
  #L4eff98.  v9:= (`double`) v3 @kind f2d;
  #L4eff9a.  call temp:= `pow`(v9, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4effa0.  v9:= temp @kind wide;
  #L4effa2.  v3:= (`float`) v9 @kind d2f;
  #L4effa4.  v2:= v2 * v3 @kind float;
  #L4effa8.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4effae.  v3:= temp;
  #L4effb0.  v9:= (`double`) v3 @kind f2d;
  #L4effb2.  v11:= 27.13D;
  #L4effbc.  v9:= v9 * v11 @kind double;
  #L4effc0.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4effc6.  v3:= temp;
  #L4effc8.  v11:= (`double`) v3 @kind f2d;
  #L4effca.  v13:= v13 - v11 @kind double;
  #L4effcc.  v9:= v9 / v13 @kind double;
  #L4effce.  call temp:= `max`(v4, v9) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L4effd4.  v3:= temp @kind wide;
  #L4effd6.  v3:= (`float`) v3 @kind d2f;
  #L4effd8.  call temp:= `signum`(v6) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L4effde.  v4:= temp;
  #L4effe0.  call temp:= `c`(v16) @signature `Lp/j;.c:()F` @kind virtual;
  #L4effe6.  v5:= temp;
  #L4effe8.  v1:= 100.0F;
  #L4effec.  v1:= v1 / v5 @kind float;
  #L4effee.  v4:= v4 * v1 @kind float;
  #L4efff2.  v5:= (`double`) v3 @kind f2d;
  #L4efff4.  call temp:= `pow`(v5, v7) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4efffa.  v5:= temp @kind wide;
  #L4efffc.  v1:= (`float`) v5 @kind d2f;
  #L4efffe.  v4:= v4 * v1 @kind float;
  #L4f0002.  call temp:= `i`(v16) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f0008.  v1:= temp @kind object;
  #L4f000a.  v3:= 0I;
  #L4f000c.  v1:= v1[v3];
  #L4f0010.  v0:= v0 / v1 @kind float;
  #L4f0012.  call temp:= `i`(v16) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f0018.  v1:= temp @kind object;
  #L4f001a.  v5:= 1I;
  #L4f001c.  v1:= v1[v5];
  #L4f0020.  v2:= v2 / v1 @kind float;
  #L4f0022.  call temp:= `i`(v16) @signature `Lp/j;.i:()[F` @kind virtual;
  #L4f0028.  v1:= temp @kind object;
  #L4f002a.  v6:= 2I;
  #L4f002c.  v1:= v1[v6];
  #L4f0030.  v4:= v4 / v1 @kind float;
  #L4f0032.  v1:= `@@p.b.b` @type ^`float`[][] @kind object;
  #L4f0036.  v7:= v1[v3] @kind object;
  #L4f003a.  v7:= v7[v3];
  #L4f003e.  v7:= v7 * v0 @kind float;
  #L4f0042.  v8:= v1[v3] @kind object;
  #L4f0046.  v8:= v8[v5];
  #L4f004a.  v8:= v8 * v2 @kind float;
  #L4f004e.  v7:= v7 + v8 @kind float;
  #L4f0050.  v8:= v1[v3] @kind object;
  #L4f0054.  v8:= v8[v6];
  #L4f0058.  v8:= v8 * v4 @kind float;
  #L4f005c.  v7:= v7 + v8 @kind float;
  #L4f005e.  v8:= v1[v5] @kind object;
  #L4f0062.  v8:= v8[v3];
  #L4f0066.  v8:= v8 * v0 @kind float;
  #L4f006a.  v9:= v1[v5] @kind object;
  #L4f006e.  v9:= v9[v5];
  #L4f0072.  v9:= v9 * v2 @kind float;
  #L4f0076.  v8:= v8 + v9 @kind float;
  #L4f0078.  v9:= v1[v5] @kind object;
  #L4f007c.  v9:= v9[v6];
  #L4f0080.  v9:= v9 * v4 @kind float;
  #L4f0084.  v8:= v8 + v9 @kind float;
  #L4f0086.  v9:= v1[v6] @kind object;
  #L4f008a.  v3:= v9[v3];
  #L4f008e.  v0:= v0 * v3 @kind float;
  #L4f0092.  v3:= v1[v6] @kind object;
  #L4f0096.  v3:= v3[v5];
  #L4f009a.  v2:= v2 * v3 @kind float;
  #L4f009e.  v0:= v0 + v2 @kind float;
  #L4f00a0.  v1:= v1[v6] @kind object;
  #L4f00a4.  v1:= v1[v6];
  #L4f00a8.  v4:= v4 * v1 @kind float;
  #L4f00ac.  v0:= v0 + v4 @kind float;
  #L4f00ae.  v1:= (`double`) v7 @kind f2d;
  #L4f00b0.  v3:= (`double`) v8 @kind f2d;
  #L4f00b2.  v5:= (`double`) v0 @kind f2d;
  #L4f00b4.  call temp:= `a`(v1, v3, v5) @signature `Lq/a;.a:(DDD)I` @kind static;
  #L4f00ba.  v0:= temp;
  #L4f00bc.  return v0;
}
procedure `int` `p`(`p.a` v1 @kind this) @signature `Lp/a;.p:()I` @AccessFlag  {
    temp;
    v0;

  #L4f00d0.  v0:= `@@p.j.k` @type ^`p.j` @kind object;
  #L4f00d4.  call temp:= `o`(v1, v0) @signature `Lp/a;.o:(Lp/j;)I` @kind virtual;
  #L4f00da.  v0:= temp;
  #L4f00dc.  return v0;
}
