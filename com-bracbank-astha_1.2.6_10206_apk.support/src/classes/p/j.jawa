record `p.j` @kind class @AccessFlag FINAL {
  `float` `p.j.a` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.b` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.c` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.d` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.e` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.f` @AccessFlag PRIVATE_FINAL;
  `float`[] `p.j.g` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.h` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.i` @AccessFlag PRIVATE_FINAL;
  `float` `p.j.j` @AccessFlag PRIVATE_FINAL;
}
global `p.j` `@@p.j.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lp/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f2e90.  v0:= `@@p.b.c` @type ^`float`[] @kind object;
  #L4f2e94.  v1:= 50.0F;
  #L4f2e98.  call temp:= `h`(v1) @signature `Lp/b;.h:(F)F` @kind static;
  #L4f2e9e.  v2:= temp;
  #L4f2ea0.  v2:= (`double`) v2 @kind f2d;
  #L4f2ea2.  v4:= 63.66197723675813D;
  #L4f2eac.  v2:= v2 * v4 @kind double;
  #L4f2eb0.  v4:= 100.0D;
  #L4f2eb4.  v2:= v2 / v4 @kind double;
  #L4f2eb6.  v2:= (`float`) v2 @kind d2f;
  #L4f2eb8.  v3:= 2.0F;
  #L4f2ebc.  v4:= 0I;
  #L4f2ebe.  call temp:= `k`(v0, v2, v1, v3, v4) @signature `Lp/j;.k:([FFFFZ)Lp/j;` @kind static;
  #L4f2ec4.  v0:= temp @kind object;
  #L4f2ec6.  `@@p.j.k` @type ^`p.j` := v0 @kind object;
  #L4f2eca.  return @kind void;
}
procedure `void` `<init>`(`p.j` v0 @kind this, `float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 , `float` v6 , `float`[] v7 @kind object, `float` v8 , `float` v9 , `float` v10 ) @signature `Lp/j;.<init>:(FFFFFF[FFFF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4f2edc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f2ee2.  v0.`p.j.f` @type ^`float` := v1;
  #L4f2ee6.  v0.`p.j.a` @type ^`float` := v2;
  #L4f2eea.  v0.`p.j.b` @type ^`float` := v3;
  #L4f2eee.  v0.`p.j.c` @type ^`float` := v4;
  #L4f2ef2.  v0.`p.j.d` @type ^`float` := v5;
  #L4f2ef6.  v0.`p.j.e` @type ^`float` := v6;
  #L4f2efa.  v0.`p.j.g` @type ^`float`[] := v7 @kind object;
  #L4f2efe.  v0.`p.j.h` @type ^`float` := v8;
  #L4f2f02.  v0.`p.j.i` @type ^`float` := v9;
  #L4f2f06.  v0.`p.j.j` @type ^`float` := v10;
  #L4f2f0a.  return @kind void;
}
procedure `p.j` `k`(`float`[] v21 @kind object, `float` v22 , `float` v23 , `float` v24 , `boolean` v25 ) @signature `Lp/j;.k:([FFFFZ)Lp/j;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L4f2b34.  v0:= v22;
  #L4f2b38.  v1:= `@@p.b.a` @type ^`float`[][] @kind object;
  #L4f2b3c.  v2:= 0I;
  #L4f2b3e.  v3:= v21[v2];
  #L4f2b42.  v4:= v1[v2] @kind object;
  #L4f2b46.  v4:= v4[v2];
  #L4f2b4a.  v3:= v3 * v4 @kind float;
  #L4f2b4e.  v4:= 1I;
  #L4f2b50.  v5:= v21[v4];
  #L4f2b54.  v6:= v1[v2] @kind object;
  #L4f2b58.  v6:= v6[v4];
  #L4f2b5c.  v5:= v5 * v6 @kind float;
  #L4f2b60.  v3:= v3 + v5 @kind float;
  #L4f2b62.  v5:= 2I;
  #L4f2b64.  v6:= v21[v5];
  #L4f2b68.  v7:= v1[v2] @kind object;
  #L4f2b6c.  v7:= v7[v5];
  #L4f2b70.  v6:= v6 * v7 @kind float;
  #L4f2b74.  v3:= v3 + v6 @kind float;
  #L4f2b76.  v6:= v21[v2];
  #L4f2b7a.  v7:= v1[v4] @kind object;
  #L4f2b7e.  v7:= v7[v2];
  #L4f2b82.  v6:= v6 * v7 @kind float;
  #L4f2b86.  v7:= v21[v4];
  #L4f2b8a.  v8:= v1[v4] @kind object;
  #L4f2b8e.  v8:= v8[v4];
  #L4f2b92.  v7:= v7 * v8 @kind float;
  #L4f2b96.  v6:= v6 + v7 @kind float;
  #L4f2b98.  v7:= v21[v5];
  #L4f2b9c.  v8:= v1[v4] @kind object;
  #L4f2ba0.  v8:= v8[v5];
  #L4f2ba4.  v7:= v7 * v8 @kind float;
  #L4f2ba8.  v6:= v6 + v7 @kind float;
  #L4f2baa.  v7:= v21[v2];
  #L4f2bae.  v8:= v1[v5] @kind object;
  #L4f2bb2.  v8:= v8[v2];
  #L4f2bb6.  v7:= v7 * v8 @kind float;
  #L4f2bba.  v8:= v21[v4];
  #L4f2bbe.  v9:= v1[v5] @kind object;
  #L4f2bc2.  v9:= v9[v4];
  #L4f2bc6.  v8:= v8 * v9 @kind float;
  #L4f2bca.  v7:= v7 + v8 @kind float;
  #L4f2bcc.  v8:= v21[v5];
  #L4f2bd0.  v1:= v1[v5] @kind object;
  #L4f2bd4.  v1:= v1[v5];
  #L4f2bd8.  v8:= v8 * v1 @kind float;
  #L4f2bdc.  v7:= v7 + v8 @kind float;
  #L4f2bde.  v1:= 10.0F;
  #L4f2be2.  v8:= v24 / v1 @kind float;
  #L4f2be6.  v9:= 1061997773I;
  #L4f2bec.  v8:= v8 + v9 @kind float;
  #L4f2bee.  v10:= (`double`) v8 @kind f2d;
  #L4f2bf0.  v12:= 1058474557I;
  #L4f2bf6.  v13:= 0.9D;
  #L4f2c00.  v15:= dcmpl(v10, v13);
  #L4f2c04.  if v15 < 0 then goto L4f2c26;
  #L4f2c08.  v9:= 1060152279I;
  #L4f2c0e.  v10:= 1063675494I;
  #L4f2c14.  v10:= v8 - v10 @kind float;
  #L4f2c18.  v10:= v10 * v1 @kind float;
  #L4f2c1c.  call temp:= `d`(v12, v9, v10) @signature `Lp/b;.d:(FFF)F` @kind static;
  #L4f2c22.  v1:= temp;
  #L4f2c24.  goto L4f2c3c;
  #L4f2c26.  v10:= 1057384038I;
  #L4f2c2c.  v9:= v8 - v9 @kind float;
  #L4f2c30.  v9:= v9 * v1 @kind float;
  #L4f2c34.  call temp:= `d`(v10, v12, v9) @signature `Lp/b;.d:(FFF)F` @kind static;
  #L4f2c3a.  v1:= temp;
  #L4f2c3c.  v15:= v1;
  #L4f2c3e.  v1:= 1.0F;
  #L4f2c42.  if v25 == 0 then goto L4f2c4c;
  #L4f2c46.  v9:= 1.0F;
  #L4f2c4a.  goto L4f2c78;
  #L4f2c4c.  v9:= 1049508068I;
  #L4f2c52.  v10:= -v0 @kind float;
  #L4f2c54.  v11:= 42.0F;
  #L4f2c58.  v10:= v10 - v11 @kind float;
  #L4f2c5a.  v11:= 92.0F;
  #L4f2c5e.  v10:= v10 / v11 @kind float;
  #L4f2c60.  v10:= (`double`) v10 @kind f2d;
  #L4f2c62.  call temp:= `exp`(v10) @signature `Ljava/lang/Math;.exp:(D)D` @kind static;
  #L4f2c68.  v10:= temp @kind wide;
  #L4f2c6a.  v10:= (`float`) v10 @kind d2f;
  #L4f2c6c.  v10:= v10 * v9 @kind float;
  #L4f2c70.  v9:= v1 - v10 @kind float;
  #L4f2c74.  v9:= v9 * v8 @kind float;
  #L4f2c78.  v10:= (`double`) v9 @kind f2d;
  #L4f2c7a.  v12:= 1.0D;
  #L4f2c7e.  v14:= dcmpl(v10, v12);
  #L4f2c82.  if v14 <= 0 then goto L4f2c8c;
  #L4f2c86.  v9:= 1.0F;
  #L4f2c8a.  goto L4f2c9a;
  #L4f2c8c.  v12:= 0L;
  #L4f2c90.  v14:= dcmpg(v10, v12);
  #L4f2c94.  if v14 >= 0 then goto L4f2c9a;
  #L4f2c98.  v9:= 0I;
  #L4f2c9a.  v10:= 3I;
  #L4f2c9c.  v14:= new `float`[v10];
  #L4f2ca0.  v11:= 100.0F;
  #L4f2ca4.  v12:= v11 / v3 @kind float;
  #L4f2ca8.  v12:= v12 * v9 @kind float;
  #L4f2cac.  v12:= v12 + v1 @kind float;
  #L4f2cae.  v12:= v12 - v9 @kind float;
  #L4f2cb0.  v14[v2]:= v12;
  #L4f2cb4.  v12:= v11 / v6 @kind float;
  #L4f2cb8.  v12:= v12 * v9 @kind float;
  #L4f2cbc.  v12:= v12 + v1 @kind float;
  #L4f2cbe.  v12:= v12 - v9 @kind float;
  #L4f2cc0.  v14[v4]:= v12;
  #L4f2cc4.  v11:= v11 / v7 @kind float;
  #L4f2cc6.  v11:= v11 * v9 @kind float;
  #L4f2cca.  v11:= v11 + v1 @kind float;
  #L4f2ccc.  v11:= v11 - v9 @kind float;
  #L4f2cce.  v14[v5]:= v11;
  #L4f2cd2.  v9:= 5.0F;
  #L4f2cd6.  v9:= v9 * v0 @kind float;
  #L4f2cda.  v9:= v9 + v1 @kind float;
  #L4f2cdc.  v9:= v1 / v9 @kind float;
  #L4f2ce0.  v11:= v9 * v9 @kind float;
  #L4f2ce4.  v11:= v11 * v9 @kind float;
  #L4f2ce8.  v11:= v11 * v9 @kind float;
  #L4f2cec.  v1:= v1 - v11 @kind float;
  #L4f2cee.  v11:= v11 * v0 @kind float;
  #L4f2cf2.  v9:= 1036831949I;
  #L4f2cf8.  v9:= v9 * v1 @kind float;
  #L4f2cfc.  v9:= v9 * v1 @kind float;
  #L4f2d00.  v12:= 5.0D;
  #L4f2d04.  v0:= (`double`) v0 @kind f2d;
  #L4f2d06.  v0:= v0 * v12 @kind double;
  #L4f2d0a.  call temp:= `cbrt`(v0) @signature `Ljava/lang/Math;.cbrt:(D)D` @kind static;
  #L4f2d10.  v0:= temp @kind wide;
  #L4f2d12.  v0:= (`float`) v0 @kind d2f;
  #L4f2d14.  v9:= v9 * v0 @kind float;
  #L4f2d18.  v0:= v11 + v9 @kind float;
  #L4f2d1c.  call temp:= `h`(v23) @signature `Lp/b;.h:(F)F` @kind static;
  #L4f2d22.  v1:= temp;
  #L4f2d24.  v9:= v21[v4];
  #L4f2d28.  v11:= v1 / v9 @kind float;
  #L4f2d2c.  v1:= 1069379748I;
  #L4f2d32.  v12:= (`double`) v11 @kind f2d;
  #L4f2d34.  v16:= v6;
  #L4f2d38.  call temp:= `sqrt`(v12) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L4f2d3e.  v5:= temp @kind wide;
  #L4f2d40.  v5:= (`float`) v5 @kind d2f;
  #L4f2d42.  v20:= v5 + v1 @kind float;
  #L4f2d46.  v1:= 1060739482I;
  #L4f2d4c.  v5:= 0.2D;
  #L4f2d56.  call temp:= `pow`(v12, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f2d5c.  v5:= temp @kind wide;
  #L4f2d5e.  v5:= (`float`) v5 @kind d2f;
  #L4f2d60.  v1:= v1 / v5 @kind float;
  #L4f2d62.  v5:= new `float`[v10];
  #L4f2d66.  v6:= v14[v2];
  #L4f2d6a.  v6:= v6 * v0 @kind float;
  #L4f2d6e.  v6:= v6 * v3 @kind float;
  #L4f2d72.  v12:= (`double`) v6 @kind f2d;
  #L4f2d74.  v17:= 100.0D;
  #L4f2d78.  v12:= v12 / v17 @kind double;
  #L4f2d7c.  v9:= 0.42D;
  #L4f2d86.  call temp:= `pow`(v12, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f2d8c.  v12:= temp @kind wide;
  #L4f2d8e.  v3:= (`float`) v12 @kind d2f;
  #L4f2d90.  v5[v2]:= v3;
  #L4f2d94.  v3:= v14[v4];
  #L4f2d98.  v3:= v3 * v0 @kind float;
  #L4f2d9c.  v3:= v3 * v16 @kind float;
  #L4f2da0.  v12:= (`double`) v3 @kind f2d;
  #L4f2da2.  v12:= v12 / v17 @kind double;
  #L4f2da6.  call temp:= `pow`(v12, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f2dac.  v12:= temp @kind wide;
  #L4f2dae.  v3:= (`float`) v12 @kind d2f;
  #L4f2db0.  v5[v4]:= v3;
  #L4f2db4.  v3:= 2I;
  #L4f2db6.  v6:= v14[v3];
  #L4f2dba.  v6:= v6 * v0 @kind float;
  #L4f2dbe.  v6:= v6 * v7 @kind float;
  #L4f2dc2.  v6:= (`double`) v6 @kind f2d;
  #L4f2dc4.  v6:= v6 / v17 @kind double;
  #L4f2dc8.  call temp:= `pow`(v6, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f2dce.  v6:= temp @kind wide;
  #L4f2dd0.  v6:= (`float`) v6 @kind d2f;
  #L4f2dd2.  v5[v3]:= v6;
  #L4f2dd6.  v3:= 3I;
  #L4f2dd8.  v3:= new `float`[v3];
  #L4f2ddc.  v6:= v5[v2];
  #L4f2de0.  v7:= 400.0F;
  #L4f2de4.  v6:= v6 * v7 @kind float;
  #L4f2de8.  v10:= v5[v2];
  #L4f2dec.  v12:= 1104742973I;
  #L4f2df2.  v10:= v10 + v12 @kind float;
  #L4f2df4.  v6:= v6 / v10 @kind float;
  #L4f2df6.  v3[v2]:= v6;
  #L4f2dfa.  v6:= v5[v4];
  #L4f2dfe.  v6:= v6 * v7 @kind float;
  #L4f2e02.  v10:= v5[v4];
  #L4f2e06.  v10:= v10 + v12 @kind float;
  #L4f2e08.  v6:= v6 / v10 @kind float;
  #L4f2e0a.  v3[v4]:= v6;
  #L4f2e0e.  v6:= 2I;
  #L4f2e10.  v9:= v5[v6];
  #L4f2e14.  v9:= v9 * v7 @kind float;
  #L4f2e18.  v5:= v5[v6];
  #L4f2e1c.  v5:= v5 + v12 @kind float;
  #L4f2e1e.  v9:= v9 / v5 @kind float;
  #L4f2e20.  v3[v6]:= v9;
  #L4f2e24.  v5:= 2.0F;
  #L4f2e28.  v2:= v3[v2];
  #L4f2e2c.  v2:= v2 * v5 @kind float;
  #L4f2e30.  v4:= v3[v4];
  #L4f2e34.  v2:= v2 + v4 @kind float;
  #L4f2e36.  v4:= 1028443341I;
  #L4f2e3c.  v3:= v3[v6];
  #L4f2e40.  v3:= v3 * v4 @kind float;
  #L4f2e44.  v2:= v2 + v3 @kind float;
  #L4f2e46.  v12:= v2 * v1 @kind float;
  #L4f2e4a.  v2:= new `p.j`;
  #L4f2e4e.  v3:= (`double`) v0 @kind f2d;
  #L4f2e50.  v5:= 0.25D;
  #L4f2e54.  call temp:= `pow`(v3, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f2e5a.  v3:= temp @kind wide;
  #L4f2e5c.  v3:= (`float`) v3 @kind d2f;
  #L4f2e5e.  v10:= v2 @kind object;
  #L4f2e60.  v13:= v1;
  #L4f2e62.  v4:= v14 @kind object;
  #L4f2e64.  v14:= v1;
  #L4f2e66.  v16:= v8;
  #L4f2e6a.  v17:= v4 @kind object;
  #L4f2e6e.  v18:= v0;
  #L4f2e72.  v19:= v3;
  #L4f2e76.  call `<init>`(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) @signature `Lp/j;.<init>:(FFFFFF[FFFF)V` @kind direct;
  #L4f2e7c.  return v2 @kind object;
}
procedure `float` `a`(`p.j` v1 @kind this) @signature `Lp/j;.a:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2a44.  v0:= v1.`p.j.a` @type ^`float`;
  #L4f2a48.  return v0;
}
procedure `float` `b`(`p.j` v1 @kind this) @signature `Lp/j;.b:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2a5c.  v0:= v1.`p.j.d` @type ^`float`;
  #L4f2a60.  return v0;
}
procedure `float` `c`(`p.j` v1 @kind this) @signature `Lp/j;.c:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2a74.  v0:= v1.`p.j.h` @type ^`float`;
  #L4f2a78.  return v0;
}
procedure `float` `d`(`p.j` v1 @kind this) @signature `Lp/j;.d:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2a8c.  v0:= v1.`p.j.i` @type ^`float`;
  #L4f2a90.  return v0;
}
procedure `float` `e`(`p.j` v1 @kind this) @signature `Lp/j;.e:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2aa4.  v0:= v1.`p.j.f` @type ^`float`;
  #L4f2aa8.  return v0;
}
procedure `float` `f`(`p.j` v1 @kind this) @signature `Lp/j;.f:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2abc.  v0:= v1.`p.j.b` @type ^`float`;
  #L4f2ac0.  return v0;
}
procedure `float` `g`(`p.j` v1 @kind this) @signature `Lp/j;.g:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2ad4.  v0:= v1.`p.j.e` @type ^`float`;
  #L4f2ad8.  return v0;
}
procedure `float` `h`(`p.j` v1 @kind this) @signature `Lp/j;.h:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2aec.  v0:= v1.`p.j.c` @type ^`float`;
  #L4f2af0.  return v0;
}
procedure `float`[] `i`(`p.j` v1 @kind this) @signature `Lp/j;.i:()[F` @AccessFlag  {
    temp;
    v0;

  #L4f2b1c.  v0:= v1.`p.j.g` @type ^`float`[] @kind object;
  #L4f2b20.  return v0 @kind object;
}
procedure `float` `j`(`p.j` v1 @kind this) @signature `Lp/j;.j:()F` @AccessFlag  {
    temp;
    v0;

  #L4f2b04.  v0:= v1.`p.j.j` @type ^`float`;
  #L4f2b08.  return v0;
}
