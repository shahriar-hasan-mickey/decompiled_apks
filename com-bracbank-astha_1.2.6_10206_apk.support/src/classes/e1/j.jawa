record `e1.j` @kind class @AccessFlag PUBLIC extends `q0.e` @kind interface {
  `java.util.List` `e1.j.a` @AccessFlag PRIVATE_FINAL;
  `q0.e` `e1.j.b` @AccessFlag PRIVATE_FINAL;
  `u0.b` `e1.j.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`e1.j` v0 @kind this, `java.util.List` v1 @kind object, `q0.e` v2 @kind object, `u0.b` v3 @kind object) @signature `Le1/j;.<init>:(Ljava/util/List;Lq0/e;Lu0/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4e57c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e57c6.  v0.`e1.j.a` @type ^`java.util.List` := v1 @kind object;
  #L4e57ca.  v0.`e1.j.b` @type ^`q0.e` := v2 @kind object;
  #L4e57ce.  v0.`e1.j.c` @type ^`u0.b` := v3 @kind object;
  #L4e57d2.  return @kind void;
}
procedure `byte`[] `e`(`java.io.InputStream` v4 @kind object) @signature `Le1/j;.e:(Ljava/io/InputStream;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e56ec.  v0:= new `java.io.ByteArrayOutputStream`;
  #L4e56f0.  v1:= 16384I;
  #L4e56f4.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L4e56fa.  v1:= new `byte`[v1];
  #L4e56fe.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L4e5704.  v2:= temp;
  #L4e5706.  v3:= -1I;
  #L4e5708.  if v2 == v3 then goto L4e5716;
  #L4e570c.  v3:= 0I;
  #L4e570e.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4e5714.  goto L4e56fe;
  #L4e5716.  call `flush`(v0) @signature `Ljava/io/ByteArrayOutputStream;.flush:()V` @kind virtual;
  #L4e571c.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L4e5722.  v4:= temp @kind object;
  #L4e5724.  return v4 @kind object;
  #L4e5726.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L4e5728.  v0:= 5I;
  #L4e572a.  v1:= "StreamGifDecoder" @kind object;
  #L4e572e.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L4e5734.  v0:= temp;
  #L4e5736.  if v0 == 0 then goto L4e5744;
  #L4e573a.  v0:= "Error reading data from stream" @kind object;
  #L4e573e.  call temp:= `w`(v1, v0, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L4e5744.  v4:= 0I;
  #L4e5746.  return v4 @kind object;
  catch `java.io.IOException` @[L4e56fa..L4e571c] goto L4e5726;
}
procedure `t0.c` `a`(`e1.j` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 , `q0.d` v4 @kind object) @signature `Le1/j;.a:(Ljava/lang/Object;IILq0/d;)Lt0/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e57a0.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L4e57a4.  call temp:= `c`(v0, v1, v2, v3, v4) @signature `Le1/j;.c:(Ljava/io/InputStream;IILq0/d;)Lt0/c;` @kind virtual;
  #L4e57aa.  v1:= temp @kind object;
  #L4e57ac.  return v1 @kind object;
}
procedure `boolean` `b`(`e1.j` v0 @kind this, `java.lang.Object` v1 @kind object, `q0.d` v2 @kind object) @signature `Le1/j;.b:(Ljava/lang/Object;Lq0/d;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e56cc.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L4e56d0.  call temp:= `d`(v0, v1, v2) @signature `Le1/j;.d:(Ljava/io/InputStream;Lq0/d;)Z` @kind virtual;
  #L4e56d6.  v1:= temp;
  #L4e56d8.  return v1;
}
procedure `t0.c` `c`(`e1.j` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `int` v4 , `q0.d` v5 @kind object) @signature `Le1/j;.c:(Ljava/io/InputStream;IILq0/d;)Lt0/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5768.  call temp:= `e`(v2) @signature `Le1/j;.e:(Ljava/io/InputStream;)[B` @kind static;
  #L4e576e.  v2:= temp @kind object;
  #L4e5770.  if v2 != 0 then goto L4e5778;
  #L4e5774.  v2:= 0I;
  #L4e5776.  return v2 @kind object;
  #L4e5778.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L4e577e.  v2:= temp @kind object;
  #L4e5780.  v0:= v1.`e1.j.b` @type ^`q0.e` @kind object;
  #L4e5784.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lq0/e;.a:(Ljava/lang/Object;IILq0/d;)Lt0/c;` @kind interface;
  #L4e578a.  v2:= temp @kind object;
  #L4e578c.  return v2 @kind object;
}
procedure `boolean` `d`(`e1.j` v1 @kind this, `java.io.InputStream` v2 @kind object, `q0.d` v3 @kind object) @signature `Le1/j;.d:(Ljava/io/InputStream;Lq0/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4e5680.  v0:= `@@e1.i.b` @type ^`q0.c` @kind object;
  #L4e5684.  call temp:= `c`(v3, v0) @signature `Lq0/d;.c:(Lq0/c;)Ljava/lang/Object;` @kind virtual;
  #L4e568a.  v3:= temp @kind object;
  #L4e568c.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L4e5690.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L4e5696.  v3:= temp;
  #L4e5698.  if v3 != 0 then goto L4e56b8;
  #L4e569c.  v3:= v1.`e1.j.a` @type ^`java.util.List` @kind object;
  #L4e56a0.  v0:= v1.`e1.j.c` @type ^`u0.b` @kind object;
  #L4e56a4.  call temp:= `d`(v3, v2, v0) @signature `Lcom/bumptech/glide/load/a;.d:(Ljava/util/List;Ljava/io/InputStream;Lu0/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L4e56aa.  v2:= temp @kind object;
  #L4e56ac.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.GIF` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L4e56b0.  if v2 != v3 then goto L4e56b8;
  #L4e56b4.  v2:= 1I;
  #L4e56b6.  goto L4e56ba;
  #L4e56b8.  v2:= 0I;
  #L4e56ba.  return v2;
}
