record `j.a` @kind class @AccessFlag PUBLIC extends `j.b` @kind class {
  `java.util.HashMap` `j.a.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j.a` v1 @kind this) @signature `Lj/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4eb1bc.  call `<init>`(v1) @signature `Lj/b;.<init>:()V` @kind direct;
  #L4eb1c2.  v0:= new `java.util.HashMap`;
  #L4eb1c6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4eb1cc.  v1.`j.a.e` @type ^`java.util.HashMap` := v0 @kind object;
  #L4eb1d0.  return @kind void;
}
procedure `j.b$c` `b`(`j.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/a;.b:(Ljava/lang/Object;)Lj/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4eb104.  v0:= v1.`j.a.e` @type ^`java.util.HashMap` @kind object;
  #L4eb108.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb10e.  v2:= temp @kind object;
  #L4eb110.  v2:= (`j.b$c`) v2 @kind object;
  #L4eb114.  return v2 @kind object;
}
procedure `boolean` `contains`(`j.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb0e4.  v0:= v1.`j.a.e` @type ^`java.util.HashMap` @kind object;
  #L4eb0e8.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L4eb0ee.  v2:= temp;
  #L4eb0f0.  return v2;
}
procedure `java.lang.Object` `f`(`j.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lj/a;.f:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb128.  call temp:= `b`(v1, v2) @signature `Lj/a;.b:(Ljava/lang/Object;)Lj/b$c;` @kind virtual;
  #L4eb12e.  v0:= temp @kind object;
  #L4eb130.  if v0 == 0 then goto L4eb13a;
  #L4eb134.  v2:= v0.`j.b$c.b` @type ^`java.lang.Object` @kind object;
  #L4eb138.  return v2 @kind object;
  #L4eb13a.  v0:= v1.`j.a.e` @type ^`java.util.HashMap` @kind object;
  #L4eb13e.  call temp:= `e`(v1, v2, v3) @signature `Lj/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Lj/b$c;` @kind virtual;
  #L4eb144.  v3:= temp @kind object;
  #L4eb146.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb14c.  v2:= 0I;
  #L4eb14e.  return v2 @kind object;
}
procedure `java.lang.Object` `g`(`j.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lj/a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eb160.  call temp:= `g`(v2, v3) @signature `Lj/b;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L4eb166.  v0:= temp @kind object;
  #L4eb168.  v1:= v2.`j.a.e` @type ^`java.util.HashMap` @kind object;
  #L4eb16c.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb172.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `h`(`j.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj/a;.h:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb184.  call temp:= `contains`(v1, v2) @signature `Lj/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L4eb18a.  v0:= temp;
  #L4eb18c.  if v0 == 0 then goto L4eb1a6;
  #L4eb190.  v0:= v1.`j.a.e` @type ^`java.util.HashMap` @kind object;
  #L4eb194.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb19a.  v2:= temp @kind object;
  #L4eb19c.  v2:= (`j.b$c`) v2 @kind object;
  #L4eb1a0.  v2:= v2.`j.b$c.d` @type ^`j.b$c` @kind object;
  #L4eb1a4.  return v2 @kind object;
  #L4eb1a6.  v2:= 0I;
  #L4eb1a8.  return v2 @kind object;
}
