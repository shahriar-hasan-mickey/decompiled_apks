record `j.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `j.b$c` `j.b.a` @AccessFlag ;
  `j.b$c` `j.b.b` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `j.b.c` @AccessFlag PRIVATE;
  `int` `j.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j.b` v1 @kind this) @signature `Lj/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4eb950.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eb956.  v0:= new `java.util.WeakHashMap`;
  #L4eb95a.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L4eb960.  v1.`j.b.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L4eb964.  v0:= 0I;
  #L4eb966.  v1.`j.b.d` @type ^`int` := v0;
  #L4eb96a.  return @kind void;
}
procedure `java.util.Map$Entry` `a`(`j.b` v1 @kind this) @signature `Lj/b;.a:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb920.  v0:= v1.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb924.  return v0 @kind object;
}
procedure `j.b$c` `b`(`j.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lj/b;.b:(Ljava/lang/Object;)Lj/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4eb6b8.  v0:= v2.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb6bc.  if v0 == 0 then goto L4eb6d8;
  #L4eb6c0.  v1:= v0.`j.b$c.a` @type ^`java.lang.Object` @kind object;
  #L4eb6c4.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4eb6ca.  v1:= temp;
  #L4eb6cc.  if v1 == 0 then goto L4eb6d2;
  #L4eb6d0.  goto L4eb6d8;
  #L4eb6d2.  v0:= v0.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb6d6.  goto L4eb6bc;
  #L4eb6d8.  return v0 @kind object;
}
procedure `j.b$d` `c`(`j.b` v3 @kind this) @signature `Lj/b;.c:()Lj/b$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb734.  v0:= new `j.b$d`;
  #L4eb738.  call `<init>`(v0, v3) @signature `Lj/b$d;.<init>:(Lj/b;)V` @kind direct;
  #L4eb73e.  v1:= v3.`j.b.c` @type ^`java.util.WeakHashMap` @kind object;
  #L4eb742.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4eb746.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb74c.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `d`(`j.b` v1 @kind this) @signature `Lj/b;.d:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb938.  v0:= v1.`j.b.b` @type ^`j.b$c` @kind object;
  #L4eb93c.  return v0 @kind object;
}
procedure `java.util.Iterator` `descendingIterator`(`j.b` v3 @kind this) @signature `Lj/b;.descendingIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb8b8.  v0:= new `j.b$b`;
  #L4eb8bc.  v1:= v3.`j.b.b` @type ^`j.b$c` @kind object;
  #L4eb8c0.  v2:= v3.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb8c4.  call `<init>`(v0, v1, v2) @signature `Lj/b$b;.<init>:(Lj/b$c;Lj/b$c;)V` @kind direct;
  #L4eb8ca.  v1:= v3.`j.b.c` @type ^`java.util.WeakHashMap` @kind object;
  #L4eb8ce.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4eb8d2.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb8d8.  return v0 @kind object;
}
procedure `j.b$c` `e`(`j.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lj/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Lj/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4eb6ec.  v0:= new `j.b$c`;
  #L4eb6f0.  call `<init>`(v0, v2, v3) @signature `Lj/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L4eb6f6.  v2:= v1.`j.b.d` @type ^`int`;
  #L4eb6fa.  v2:= v2 + 1;
  #L4eb6fe.  v1.`j.b.d` @type ^`int` := v2;
  #L4eb702.  v2:= v1.`j.b.b` @type ^`j.b$c` @kind object;
  #L4eb706.  if v2 != 0 then goto L4eb714;
  #L4eb70a.  v1.`j.b.a` @type ^`j.b$c` := v0 @kind object;
  #L4eb70e.  v1.`j.b.b` @type ^`j.b$c` := v0 @kind object;
  #L4eb712.  return v0 @kind object;
  #L4eb714.  v2.`j.b$c.c` @type ^`j.b$c` := v0 @kind object;
  #L4eb718.  v0.`j.b$c.d` @type ^`j.b$c` := v2 @kind object;
  #L4eb71c.  v1.`j.b.b` @type ^`j.b$c` := v0 @kind object;
  #L4eb720.  return v0 @kind object;
}
procedure `boolean` `equals`(`j.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lj/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eb5ac.  v0:= 1I;
  #L4eb5ae.  if v6 != v5 then goto L4eb5b4;
  #L4eb5b2.  return v0;
  #L4eb5b4.  v1:= instanceof @variable v6 @type ^`j.b` @kind boolean;
  #L4eb5b8.  v2:= 0I;
  #L4eb5ba.  if v1 != 0 then goto L4eb5c0;
  #L4eb5be.  return v2;
  #L4eb5c0.  v6:= (`j.b`) v6 @kind object;
  #L4eb5c4.  call temp:= `size`(v5) @signature `Lj/b;.size:()I` @kind virtual;
  #L4eb5ca.  v1:= temp;
  #L4eb5cc.  call temp:= `size`(v6) @signature `Lj/b;.size:()I` @kind virtual;
  #L4eb5d2.  v3:= temp;
  #L4eb5d4.  if v1 == v3 then goto L4eb5da;
  #L4eb5d8.  return v2;
  #L4eb5da.  call temp:= `iterator`(v5) @signature `Lj/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4eb5e0.  v1:= temp @kind object;
  #L4eb5e2.  call temp:= `iterator`(v6) @signature `Lj/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4eb5e8.  v6:= temp @kind object;
  #L4eb5ea.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb5f0.  v3:= temp;
  #L4eb5f2.  if v3 == 0 then goto L4eb630;
  #L4eb5f6.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb5fc.  v3:= temp;
  #L4eb5fe.  if v3 == 0 then goto L4eb630;
  #L4eb602.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb608.  v3:= temp @kind object;
  #L4eb60a.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L4eb60e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb614.  v4:= temp @kind object;
  #L4eb616.  if v3 != 0 then goto L4eb61e;
  #L4eb61a.  if v4 != 0 then goto L4eb62e;
  #L4eb61e.  if v3 == 0 then goto L4eb5ea;
  #L4eb622.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L4eb628.  v3:= temp;
  #L4eb62a.  if v3 != 0 then goto L4eb5ea;
  #L4eb62e.  return v2;
  #L4eb630.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb636.  v1:= temp;
  #L4eb638.  if v1 != 0 then goto L4eb64a;
  #L4eb63c.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb642.  v6:= temp;
  #L4eb644.  if v6 != 0 then goto L4eb64a;
  #L4eb648.  goto L4eb64c;
  #L4eb64a.  v0:= 0I;
  #L4eb64c.  return v0;
}
procedure `java.lang.Object` `f`(`j.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lj/b;.f:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb760.  call temp:= `b`(v1, v2) @signature `Lj/b;.b:(Ljava/lang/Object;)Lj/b$c;` @kind virtual;
  #L4eb766.  v0:= temp @kind object;
  #L4eb768.  if v0 == 0 then goto L4eb772;
  #L4eb76c.  v2:= v0.`j.b$c.b` @type ^`java.lang.Object` @kind object;
  #L4eb770.  return v2 @kind object;
  #L4eb772.  call temp:= `e`(v1, v2, v3) @signature `Lj/b;.e:(Ljava/lang/Object;Ljava/lang/Object;)Lj/b$c;` @kind virtual;
  #L4eb778.  v2:= 0I;
  #L4eb77a.  return v2 @kind object;
}
procedure `java.lang.Object` `g`(`j.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lj/b;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb78c.  call temp:= `b`(v3, v4) @signature `Lj/b;.b:(Ljava/lang/Object;)Lj/b$c;` @kind virtual;
  #L4eb792.  v4:= temp @kind object;
  #L4eb794.  v0:= 0I;
  #L4eb796.  if v4 != 0 then goto L4eb79c;
  #L4eb79a.  return v0 @kind object;
  #L4eb79c.  v1:= v3.`j.b.d` @type ^`int`;
  #L4eb7a0.  v1:= v1 + -1;
  #L4eb7a4.  v3.`j.b.d` @type ^`int` := v1;
  #L4eb7a8.  v1:= v3.`j.b.c` @type ^`java.util.WeakHashMap` @kind object;
  #L4eb7ac.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L4eb7b2.  v1:= temp;
  #L4eb7b4.  if v1 != 0 then goto L4eb7ec;
  #L4eb7b8.  v1:= v3.`j.b.c` @type ^`java.util.WeakHashMap` @kind object;
  #L4eb7bc.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L4eb7c2.  v1:= temp @kind object;
  #L4eb7c4.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eb7ca.  v1:= temp @kind object;
  #L4eb7cc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb7d2.  v2:= temp;
  #L4eb7d4.  if v2 == 0 then goto L4eb7ec;
  #L4eb7d8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb7de.  v2:= temp @kind object;
  #L4eb7e0.  v2:= (`j.b$f`) v2 @kind object;
  #L4eb7e4.  call `a`(v2, v4) @signature `Lj/b$f;.a:(Lj/b$c;)V` @kind interface;
  #L4eb7ea.  goto L4eb7cc;
  #L4eb7ec.  v1:= v4.`j.b$c.d` @type ^`j.b$c` @kind object;
  #L4eb7f0.  if v1 == 0 then goto L4eb7fe;
  #L4eb7f4.  v2:= v4.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb7f8.  v1.`j.b$c.c` @type ^`j.b$c` := v2 @kind object;
  #L4eb7fc.  goto L4eb806;
  #L4eb7fe.  v2:= v4.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb802.  v3.`j.b.a` @type ^`j.b$c` := v2 @kind object;
  #L4eb806.  v2:= v4.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb80a.  if v2 == 0 then goto L4eb814;
  #L4eb80e.  v2.`j.b$c.d` @type ^`j.b$c` := v1 @kind object;
  #L4eb812.  goto L4eb818;
  #L4eb814.  v3.`j.b.b` @type ^`j.b$c` := v1 @kind object;
  #L4eb818.  v4.`j.b$c.c` @type ^`j.b$c` := v0 @kind object;
  #L4eb81c.  v4.`j.b$c.d` @type ^`j.b$c` := v0 @kind object;
  #L4eb820.  v4:= v4.`j.b$c.b` @type ^`java.lang.Object` @kind object;
  #L4eb824.  return v4 @kind object;
}
procedure `int` `hashCode`(`j.b` v3 @kind this) @signature `Lj/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb660.  call temp:= `iterator`(v3) @signature `Lj/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4eb666.  v0:= temp @kind object;
  #L4eb668.  v1:= 0I;
  #L4eb66a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb670.  v2:= temp;
  #L4eb672.  if v2 == 0 then goto L4eb68e;
  #L4eb676.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb67c.  v2:= temp @kind object;
  #L4eb67e.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L4eb682.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L4eb688.  v2:= temp;
  #L4eb68a.  v1:= v1 + v2 @kind int;
  #L4eb68c.  goto L4eb66a;
  #L4eb68e.  return v1;
}
procedure `java.util.Iterator` `iterator`(`j.b` v3 @kind this) @signature `Lj/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb8ec.  v0:= new `j.b$a`;
  #L4eb8f0.  v1:= v3.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb8f4.  v2:= v3.`j.b.b` @type ^`j.b$c` @kind object;
  #L4eb8f8.  call `<init>`(v0, v1, v2) @signature `Lj/b$a;.<init>:(Lj/b$c;Lj/b$c;)V` @kind direct;
  #L4eb8fe.  v1:= v3.`j.b.c` @type ^`java.util.WeakHashMap` @kind object;
  #L4eb902.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4eb906.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4eb90c.  return v0 @kind object;
}
procedure `int` `size`(`j.b` v1 @kind this) @signature `Lj/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb6a0.  v0:= v1.`j.b.d` @type ^`int`;
  #L4eb6a4.  return v0;
}
procedure `java.lang.String` `toString`(`j.b` v3 @kind this) @signature `Lj/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb838.  v0:= new `java.lang.StringBuilder`;
  #L4eb83c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4eb842.  v1:= "[" @kind object;
  #L4eb846.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eb84c.  call temp:= `iterator`(v3) @signature `Lj/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4eb852.  v1:= temp @kind object;
  #L4eb854.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb85a.  v2:= temp;
  #L4eb85c.  if v2 == 0 then goto L4eb892;
  #L4eb860.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eb866.  v2:= temp @kind object;
  #L4eb868.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L4eb86c.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4eb872.  v2:= temp @kind object;
  #L4eb874.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eb87a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eb880.  v2:= temp;
  #L4eb882.  if v2 == 0 then goto L4eb854;
  #L4eb886.  v2:= ", " @kind object;
  #L4eb88a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eb890.  goto L4eb854;
  #L4eb892.  v1:= "]" @kind object;
  #L4eb896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eb89c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4eb8a2.  v0:= temp @kind object;
  #L4eb8a4.  return v0 @kind object;
}
