record `j.b$e` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface, `j.b$f` @kind interface {
  `j.b$c` `j.b$e.a` @AccessFlag ;
  `j.b$c` `j.b$e.b` @AccessFlag ;
}
procedure `void` `<init>`(`j.b$e` v0 @kind this, `j.b$c` v1 @kind object, `j.b$c` v2 @kind object) @signature `Lj/b$e;.<init>:(Lj/b$c;Lj/b$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eb538.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eb53e.  v0.`j.b$e.a` @type ^`j.b$c` := v2 @kind object;
  #L4eb542.  v0.`j.b$e.b` @type ^`j.b$c` := v1 @kind object;
  #L4eb546.  return @kind void;
}
procedure `j.b$c` `e`(`j.b$e` v2 @kind this) @signature `Lj/b$e;.e:()Lj/b$c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4eb4c8.  v0:= v2.`j.b$e.b` @type ^`j.b$c` @kind object;
  #L4eb4cc.  v1:= v2.`j.b$e.a` @type ^`j.b$c` @kind object;
  #L4eb4d0.  if v0 == v1 then goto L4eb4e4;
  #L4eb4d4.  if v1 != 0 then goto L4eb4da;
  #L4eb4d8.  goto L4eb4e4;
  #L4eb4da.  call temp:= `c`(v2, v0) @signature `Lj/b$e;.c:(Lj/b$c;)Lj/b$c;` @kind virtual;
  #L4eb4e0.  v0:= temp @kind object;
  #L4eb4e2.  return v0 @kind object;
  #L4eb4e4.  v0:= 0I;
  #L4eb4e6.  return v0 @kind object;
}
procedure `void` `a`(`j.b$e` v1 @kind this, `j.b$c` v2 @kind object) @signature `Lj/b$e;.a:(Lj/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb558.  v0:= v1.`j.b$e.a` @type ^`j.b$c` @kind object;
  #L4eb55c.  if v0 != v2 then goto L4eb572;
  #L4eb560.  v0:= v1.`j.b$e.b` @type ^`j.b$c` @kind object;
  #L4eb564.  if v2 != v0 then goto L4eb572;
  #L4eb568.  v0:= 0I;
  #L4eb56a.  v1.`j.b$e.b` @type ^`j.b$c` := v0 @kind object;
  #L4eb56e.  v1.`j.b$e.a` @type ^`j.b$c` := v0 @kind object;
  #L4eb572.  v0:= v1.`j.b$e.a` @type ^`j.b$c` @kind object;
  #L4eb576.  if v0 != v2 then goto L4eb586;
  #L4eb57a.  call temp:= `b`(v1, v0) @signature `Lj/b$e;.b:(Lj/b$c;)Lj/b$c;` @kind virtual;
  #L4eb580.  v0:= temp @kind object;
  #L4eb582.  v1.`j.b$e.a` @type ^`j.b$c` := v0 @kind object;
  #L4eb586.  v0:= v1.`j.b$e.b` @type ^`j.b$c` @kind object;
  #L4eb58a.  if v0 != v2 then goto L4eb59a;
  #L4eb58e.  call temp:= `e`(v1) @signature `Lj/b$e;.e:()Lj/b$c;` @kind direct;
  #L4eb594.  v2:= temp @kind object;
  #L4eb596.  v1.`j.b$e.b` @type ^`j.b$c` := v2 @kind object;
  #L4eb59a.  return @kind void;
}
procedure `j.b$c` `b`(`j.b$c` v0 @kind object) @signature `Lj/b$e;.b:(Lj/b$c;)Lj/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `j.b$c` `c`(`j.b$c` v0 @kind object) @signature `Lj/b$e;.c:(Lj/b$c;)Lj/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Map$Entry` `d`(`j.b$e` v2 @kind this) @signature `Lj/b$e;.d:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eb514.  v0:= v2.`j.b$e.b` @type ^`j.b$c` @kind object;
  #L4eb518.  call temp:= `e`(v2) @signature `Lj/b$e;.e:()Lj/b$c;` @kind direct;
  #L4eb51e.  v1:= temp @kind object;
  #L4eb520.  v2.`j.b$e.b` @type ^`j.b$c` := v1 @kind object;
  #L4eb524.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`j.b$e` v1 @kind this) @signature `Lj/b$e;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb4a8.  v0:= v1.`j.b$e.b` @type ^`j.b$c` @kind object;
  #L4eb4ac.  if v0 == 0 then goto L4eb4b4;
  #L4eb4b0.  v0:= 1I;
  #L4eb4b2.  goto L4eb4b6;
  #L4eb4b4.  v0:= 0I;
  #L4eb4b6.  return v0;
}
procedure `java.lang.Object` `next`(`j.b$e` v1 @kind this) @signature `Lj/b$e;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4eb4f8.  call temp:= `d`(v1) @signature `Lj/b$e;.d:()Ljava/util/Map$Entry;` @kind virtual;
  #L4eb4fe.  v0:= temp @kind object;
  #L4eb500.  return v0 @kind object;
}
