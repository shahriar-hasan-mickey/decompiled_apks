record `j.b$d` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `j.b$f` @kind interface {
  `j.b$c` `j.b$d.a` @AccessFlag PRIVATE;
  `boolean` `j.b$d.b` @AccessFlag PRIVATE;
  `j.b` `j.b$d.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`j.b$d` v0 @kind this, `j.b` v1 @kind object) @signature `Lj/b$d;.<init>:(Lj/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4eb454.  v0.`j.b$d.c` @type ^`j.b` := v1 @kind object;
  #L4eb458.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eb45e.  v1:= 1I;
  #L4eb460.  v0.`j.b$d.b` @type ^`boolean` := v1 @kind boolean;
  #L4eb464.  return @kind void;
}
procedure `void` `a`(`j.b$d` v1 @kind this, `j.b$c` v2 @kind object) @signature `Lj/b$d;.a:(Lj/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb478.  v0:= v1.`j.b$d.a` @type ^`j.b$c` @kind object;
  #L4eb47c.  if v2 != v0 then goto L4eb496;
  #L4eb480.  v2:= v0.`j.b$c.d` @type ^`j.b$c` @kind object;
  #L4eb484.  v1.`j.b$d.a` @type ^`j.b$c` := v2 @kind object;
  #L4eb488.  if v2 != 0 then goto L4eb490;
  #L4eb48c.  v2:= 1I;
  #L4eb48e.  goto L4eb492;
  #L4eb490.  v2:= 0I;
  #L4eb492.  v1.`j.b$d.b` @type ^`boolean` := v2 @kind boolean;
  #L4eb496.  return @kind void;
}
procedure `java.util.Map$Entry` `b`(`j.b$d` v1 @kind this) @signature `Lj/b$d;.b:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eb40c.  v0:= v1.`j.b$d.b` @type ^`boolean` @kind boolean;
  #L4eb410.  if v0 == 0 then goto L4eb428;
  #L4eb414.  v0:= 0I;
  #L4eb416.  v1.`j.b$d.b` @type ^`boolean` := v0 @kind boolean;
  #L4eb41a.  v0:= v1.`j.b$d.c` @type ^`j.b` @kind object;
  #L4eb41e.  v0:= v0.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb422.  v1.`j.b$d.a` @type ^`j.b$c` := v0 @kind object;
  #L4eb426.  goto L4eb43c;
  #L4eb428.  v0:= v1.`j.b$d.a` @type ^`j.b$c` @kind object;
  #L4eb42c.  if v0 == 0 then goto L4eb436;
  #L4eb430.  v0:= v0.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb434.  goto L4eb438;
  #L4eb436.  v0:= 0I;
  #L4eb438.  v1.`j.b$d.a` @type ^`j.b$c` := v0 @kind object;
  #L4eb43c.  v0:= v1.`j.b$d.a` @type ^`j.b$c` @kind object;
  #L4eb440.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`j.b$d` v3 @kind this) @signature `Lj/b$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eb3ac.  v0:= v3.`j.b$d.b` @type ^`boolean` @kind boolean;
  #L4eb3b0.  v1:= 1I;
  #L4eb3b2.  v2:= 0I;
  #L4eb3b4.  if v0 == 0 then goto L4eb3ca;
  #L4eb3b8.  v0:= v3.`j.b$d.c` @type ^`j.b` @kind object;
  #L4eb3bc.  v0:= v0.`j.b.a` @type ^`j.b$c` @kind object;
  #L4eb3c0.  if v0 == 0 then goto L4eb3c6;
  #L4eb3c4.  goto L4eb3c8;
  #L4eb3c6.  v1:= 0I;
  #L4eb3c8.  return v1;
  #L4eb3ca.  v0:= v3.`j.b$d.a` @type ^`j.b$c` @kind object;
  #L4eb3ce.  if v0 == 0 then goto L4eb3dc;
  #L4eb3d2.  v0:= v0.`j.b$c.c` @type ^`j.b$c` @kind object;
  #L4eb3d6.  if v0 == 0 then goto L4eb3dc;
  #L4eb3da.  goto L4eb3de;
  #L4eb3dc.  v1:= 0I;
  #L4eb3de.  return v1;
}
procedure `java.lang.Object` `next`(`j.b$d` v1 @kind this) @signature `Lj/b$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4eb3f0.  call temp:= `b`(v1) @signature `Lj/b$d;.b:()Ljava/util/Map$Entry;` @kind virtual;
  #L4eb3f6.  v0:= temp @kind object;
  #L4eb3f8.  return v0 @kind object;
}
