record `q.d` @kind class @AccessFlag PUBLIC {
}
procedure `void` `a`(`java.util.ArrayList` v1 @kind object, `char` v2 , `float`[] v3 @kind object) @signature `Lq/d;.a:(Ljava/util/ArrayList;C[F)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4f5c88.  v0:= new `q.d$b`;
  #L4f5c8c.  call `<init>`(v0, v2, v3) @signature `Lq/d$b;.<init>:(C[F)V` @kind direct;
  #L4f5c92.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f5c98.  return @kind void;
}
procedure `boolean` `b`(`q.d$b`[] v4 @kind object, `q.d$b`[] v5 @kind object) @signature `Lq/d;.b:([Lq/d$b;[Lq/d$b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5980.  v0:= 0I;
  #L4f5982.  if v4 == 0 then goto L4f59d8;
  #L4f5986.  if v5 != 0 then goto L4f598c;
  #L4f598a.  goto L4f59d8;
  #L4f598c.  v1:= length @variable v4;
  #L4f598e.  v2:= length @variable v5;
  #L4f5990.  if v1 == v2 then goto L4f5996;
  #L4f5994.  return v0;
  #L4f5996.  v1:= 0I;
  #L4f5998.  v2:= length @variable v4;
  #L4f599a.  if v1 >= v2 then goto L4f59d4;
  #L4f599e.  v2:= v4[v1] @kind object;
  #L4f59a2.  v2:= v2.`q.d$b.a` @type ^`char` @kind char;
  #L4f59a6.  v3:= v5[v1] @kind object;
  #L4f59aa.  v3:= v3.`q.d$b.a` @type ^`char` @kind char;
  #L4f59ae.  if v2 != v3 then goto L4f59d2;
  #L4f59b2.  v2:= v4[v1] @kind object;
  #L4f59b6.  v2:= v2.`q.d$b.b` @type ^`float`[] @kind object;
  #L4f59ba.  v2:= length @variable v2;
  #L4f59bc.  v3:= v5[v1] @kind object;
  #L4f59c0.  v3:= v3.`q.d$b.b` @type ^`float`[] @kind object;
  #L4f59c4.  v3:= length @variable v3;
  #L4f59c6.  if v2 == v3 then goto L4f59cc;
  #L4f59ca.  goto L4f59d2;
  #L4f59cc.  v1:= v1 + 1;
  #L4f59d0.  goto L4f5998;
  #L4f59d2.  return v0;
  #L4f59d4.  v4:= 1I;
  #L4f59d6.  return v4;
  #L4f59d8.  return v0;
}
procedure `float`[] `c`(`float`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lq/d;.c:([FII)[F` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L4f59ec.  if v3 > v4 then goto L4f5a20;
  #L4f59f0.  v0:= length @variable v2;
  #L4f59f2.  if v3 < 0 then goto L4f5a14;
  #L4f59f6.  if v3 > v0 then goto L4f5a14;
  #L4f59fa.  v4:= v4 - v3 @kind int;
  #L4f59fc.  v0:= v0 - v3 @kind int;
  #L4f59fe.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4f5a04.  v0:= temp;
  #L4f5a06.  v4:= new `float`[v4];
  #L4f5a0a.  v1:= 0I;
  #L4f5a0c.  call `arraycopy`(v2, v3, v4, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f5a12.  return v4 @kind object;
  #L4f5a14.  v2:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L4f5a18.  call `<init>`(v2) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L4f5a1e.  throw v2;
  #L4f5a20.  v2:= new `java.lang.IllegalArgumentException`;
  #L4f5a24.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4f5a2a.  throw v2;
}
procedure `q.d$b`[] `d`(`java.lang.String` v7 @kind object) @signature `Lq/d;.d:(Ljava/lang/String;)[Lq/d$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f5b8c.  if v7 != 0 then goto L4f5b94;
  #L4f5b90.  v7:= 0I;
  #L4f5b92.  return v7 @kind object;
  #L4f5b94.  v0:= new `java.util.ArrayList`;
  #L4f5b98.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4f5b9e.  v1:= 1I;
  #L4f5ba0.  v2:= 0I;
  #L4f5ba2.  v3:= 1I;
  #L4f5ba4.  v4:= 0I;
  #L4f5ba6.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5bac.  v5:= temp;
  #L4f5bae.  if v3 >= v5 then goto L4f5bf8;
  #L4f5bb2.  call temp:= `i`(v7, v3) @signature `Lq/d;.i:(Ljava/lang/String;I)I` @kind static;
  #L4f5bb8.  v3:= temp;
  #L4f5bba.  call temp:= `substring`(v7, v4, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4f5bc0.  v4:= temp @kind object;
  #L4f5bc2.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L4f5bc8.  v4:= temp @kind object;
  #L4f5bca.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5bd0.  v5:= temp;
  #L4f5bd2.  if v5 <= 0 then goto L4f5bec;
  #L4f5bd6.  call temp:= `h`(v4) @signature `Lq/d;.h:(Ljava/lang/String;)[F` @kind static;
  #L4f5bdc.  v5:= temp @kind object;
  #L4f5bde.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5be4.  v4:= temp;
  #L4f5be6.  call `a`(v0, v4, v5) @signature `Lq/d;.a:(Ljava/util/ArrayList;C[F)V` @kind static;
  #L4f5bec.  v4:= v3 + 1;
  #L4f5bf0.  v6:= v4;
  #L4f5bf2.  v4:= v3;
  #L4f5bf4.  v3:= v6;
  #L4f5bf6.  goto L4f5ba6;
  #L4f5bf8.  v3:= v3 - v4 @kind int;
  #L4f5bfa.  if v3 != v1 then goto L4f5c1c;
  #L4f5bfe.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5c04.  v1:= temp;
  #L4f5c06.  if v4 >= v1 then goto L4f5c1c;
  #L4f5c0a.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5c10.  v7:= temp;
  #L4f5c12.  v1:= new `float`[v2];
  #L4f5c16.  call `a`(v0, v7, v1) @signature `Lq/d;.a:(Ljava/util/ArrayList;C[F)V` @kind static;
  #L4f5c1c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L4f5c22.  v7:= temp;
  #L4f5c24.  v7:= new `q.d$b`[v7];
  #L4f5c28.  call temp:= `toArray`(v0, v7) @signature `Ljava/util/ArrayList;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4f5c2e.  v7:= temp @kind object;
  #L4f5c30.  v7:= (`q.d$b`[]) v7 @kind object;
  #L4f5c34.  return v7 @kind object;
}
procedure `android.graphics.Path` `e`(`java.lang.String` v4 @kind object) @signature `Lq/d;.e:(Ljava/lang/String;)Landroid/graphics/Path;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f590c.  v0:= new `android.graphics.Path`;
  #L4f5910.  call `<init>`(v0) @signature `Landroid/graphics/Path;.<init>:()V` @kind direct;
  #L4f5916.  call temp:= `d`(v4) @signature `Lq/d;.d:(Ljava/lang/String;)[Lq/d$b;` @kind static;
  #L4f591c.  v1:= temp @kind object;
  #L4f591e.  if v1 == 0 then goto L4f595a;
  #L4f5922.  call `e`(v1, v0) @signature `Lq/d$b;.e:([Lq/d$b;Landroid/graphics/Path;)V` @kind static;
  #L4f5928.  return v0 @kind object;
  #L4f592a.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L4f592c.  v1:= new `java.lang.RuntimeException`;
  #L4f5930.  v2:= new `java.lang.StringBuilder`;
  #L4f5934.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f593a.  v3:= "Error in parsing " @kind object;
  #L4f593e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5944.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f594a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f5950.  v4:= temp @kind object;
  #L4f5952.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4f5958.  throw v1;
  #L4f595a.  v4:= 0I;
  #L4f595c.  return v4 @kind object;
  catch `java.lang.RuntimeException` @[L4f5922..L4f5928] goto L4f592a;
}
procedure `q.d$b`[] `f`(`q.d$b`[] v4 @kind object) @signature `Lq/d;.f:([Lq/d$b;)[Lq/d$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f5c48.  if v4 != 0 then goto L4f5c50;
  #L4f5c4c.  v4:= 0I;
  #L4f5c4e.  return v4 @kind object;
  #L4f5c50.  v0:= length @variable v4;
  #L4f5c52.  v0:= new `q.d$b`[v0];
  #L4f5c56.  v1:= 0I;
  #L4f5c58.  v2:= length @variable v4;
  #L4f5c5a.  if v1 >= v2 then goto L4f5c76;
  #L4f5c5e.  v2:= new `q.d$b`;
  #L4f5c62.  v3:= v4[v1] @kind object;
  #L4f5c66.  call `<init>`(v2, v3) @signature `Lq/d$b;.<init>:(Lq/d$b;)V` @kind direct;
  #L4f5c6c.  v0[v1]:= v2 @kind object;
  #L4f5c70.  v1:= v1 + 1;
  #L4f5c74.  goto L4f5c58;
  #L4f5c76.  return v0 @kind object;
}
procedure `void` `g`(`java.lang.String` v8 @kind object, `int` v9 , `q.d$a` v10 @kind object) @signature `Lq/d;.g:(Ljava/lang/String;ILq/d$a;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f5cac.  v0:= 0I;
  #L4f5cae.  v10.`q.d$a.b` @type ^`boolean` := v0 @kind boolean;
  #L4f5cb2.  v1:= v9;
  #L4f5cb4.  v2:= 0I;
  #L4f5cb6.  v3:= 0I;
  #L4f5cb8.  v4:= 0I;
  #L4f5cba.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5cc0.  v5:= temp;
  #L4f5cc2.  if v1 >= v5 then goto L4f5d26;
  #L4f5cc6.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5ccc.  v5:= temp;
  #L4f5cce.  v6:= 32I;
  #L4f5cd2.  v7:= 1I;
  #L4f5cd4.  if v5 == v6 then goto L4f5d16;
  #L4f5cd8.  v6:= 69I;
  #L4f5cdc.  if v5 == v6 then goto L4f5d12;
  #L4f5ce0.  v6:= 101I;
  #L4f5ce4.  if v5 == v6 then goto L4f5d12;
  #L4f5ce8.  goto L4f5d2c;
  #L4f5cee.  goto L4f5d0e;
  #L4f5cf0.  if v3 != 0 then goto L4f5cfa;
  #L4f5cf4.  v2:= 0I;
  #L4f5cf6.  v3:= 1I;
  #L4f5cf8.  goto L4f5d1a;
  #L4f5cfa.  v10.`q.d$a.b` @type ^`boolean` := v7 @kind boolean;
  #L4f5cfe.  goto L4f5d16;
  #L4f5d00.  if v1 == v9 then goto L4f5d0e;
  #L4f5d04.  if v2 != 0 then goto L4f5d0e;
  #L4f5d08.  v10.`q.d$a.b` @type ^`boolean` := v7 @kind boolean;
  #L4f5d0c.  goto L4f5d16;
  #L4f5d0e.  v2:= 0I;
  #L4f5d10.  goto L4f5d1a;
  #L4f5d12.  v2:= 1I;
  #L4f5d14.  goto L4f5d1a;
  #L4f5d16.  v2:= 0I;
  #L4f5d18.  v4:= 1I;
  #L4f5d1a.  if v4 == 0 then goto L4f5d20;
  #L4f5d1e.  goto L4f5d26;
  #L4f5d20.  v1:= v1 + 1;
  #L4f5d24.  goto L4f5cba;
  #L4f5d26.  v10.`q.d$a.a` @type ^`int` := v1;
  #L4f5d2a.  return @kind void;
  #L4f5d2c.  switch v5
                  | 44 => goto L4f5d16
                  | 45 => goto L4f5d00
                  | 46 => goto L4f5cf0
                  | else => goto L4f5cee;
}
procedure `float`[] `h`(`java.lang.String` v8 @kind object) @signature `Lq/d;.h:(Ljava/lang/String;)[F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f5a3c.  v0:= 0I;
  #L4f5a3e.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5a44.  v1:= temp;
  #L4f5a46.  v2:= 122I;
  #L4f5a4a.  if v1 == v2 then goto L4f5b04;
  #L4f5a4e.  call temp:= `charAt`(v8, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5a54.  v1:= temp;
  #L4f5a56.  v2:= 90I;
  #L4f5a5a.  if v1 != v2 then goto L4f5a60;
  #L4f5a5e.  goto L4f5b04;
  #L4f5a60.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5a66.  v1:= temp;
  #L4f5a68.  v1:= new `float`[v1];
  #L4f5a6c.  v2:= new `q.d$a`;
  #L4f5a70.  call `<init>`(v2) @signature `Lq/d$a;.<init>:()V` @kind direct;
  #L4f5a76.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5a7c.  v3:= temp;
  #L4f5a7e.  v4:= 1I;
  #L4f5a80.  v5:= 0I;
  #L4f5a82.  if v4 >= v3 then goto L4f5ac0;
  #L4f5a86.  call `g`(v8, v4, v2) @signature `Lq/d;.g:(Ljava/lang/String;ILq/d$a;)V` @kind static;
  #L4f5a8c.  v6:= v2.`q.d$a.a` @type ^`int`;
  #L4f5a90.  if v4 >= v6 then goto L4f5aae;
  #L4f5a94.  v7:= v5 + 1;
  #L4f5a98.  call temp:= `substring`(v8, v4, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4f5a9e.  v4:= temp @kind object;
  #L4f5aa0.  call temp:= `parseFloat`(v4) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L4f5aa6.  v4:= temp;
  #L4f5aa8.  v1[v5]:= v4;
  #L4f5aac.  v5:= v7;
  #L4f5aae.  v4:= v2.`q.d$a.b` @type ^`boolean` @kind boolean;
  #L4f5ab2.  if v4 == 0 then goto L4f5aba;
  #L4f5ab6.  v4:= v6;
  #L4f5ab8.  goto L4f5a82;
  #L4f5aba.  v4:= v6 + 1;
  #L4f5abe.  goto L4f5a82;
  #L4f5ac0.  call temp:= `c`(v1, v0, v5) @signature `Lq/d;.c:([FII)[F` @kind static;
  #L4f5ac6.  v8:= temp @kind object;
  #L4f5ac8.  return v8 @kind object;
  #L4f5aca.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L4f5acc.  v1:= new `java.lang.RuntimeException`;
  #L4f5ad0.  v2:= new `java.lang.StringBuilder`;
  #L4f5ad4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f5ada.  v3:= "error in parsing \"" @kind object;
  #L4f5ade.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5ae4.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5aea.  v8:= "\"" @kind object;
  #L4f5aee.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5af4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f5afa.  v8:= temp @kind object;
  #L4f5afc.  call `<init>`(v1, v8, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4f5b02.  throw v1;
  #L4f5b04.  v8:= new `float`[v0];
  #L4f5b08.  return v8 @kind object;
  catch `java.lang.NumberFormatException` @[L4f5a60..L4f5ac8] goto L4f5aca;
}
procedure `int` `i`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lq/d;.i:(Ljava/lang/String;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5b2c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f5b32.  v0:= temp;
  #L4f5b34.  if v4 >= v0 then goto L4f5b78;
  #L4f5b38.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4f5b3e.  v0:= temp;
  #L4f5b40.  v1:= v0 + -65;
  #L4f5b44.  v2:= v0 + -90;
  #L4f5b48.  v1:= v1 * v2 @kind int;
  #L4f5b4c.  if v1 <= 0 then goto L4f5b60;
  #L4f5b50.  v1:= v0 + -97;
  #L4f5b54.  v2:= v0 + -122;
  #L4f5b58.  v1:= v1 * v2 @kind int;
  #L4f5b5c.  if v1 > 0 then goto L4f5b72;
  #L4f5b60.  v1:= 101I;
  #L4f5b64.  if v0 == v1 then goto L4f5b72;
  #L4f5b68.  v1:= 69I;
  #L4f5b6c.  if v0 == v1 then goto L4f5b72;
  #L4f5b70.  return v4;
  #L4f5b72.  v4:= v4 + 1;
  #L4f5b76.  goto L4f5b2c;
  #L4f5b78.  return v4;
}
procedure `void` `j`(`q.d$b`[] v5 @kind object, `q.d$b`[] v6 @kind object) @signature `Lq/d;.j:([Lq/d$b;[Lq/d$b;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f5d50.  v0:= 0I;
  #L4f5d52.  v1:= 0I;
  #L4f5d54.  v2:= length @variable v6;
  #L4f5d56.  if v1 >= v2 then goto L4f5d9e;
  #L4f5d5a.  v2:= v5[v1] @kind object;
  #L4f5d5e.  v3:= v6[v1] @kind object;
  #L4f5d62.  v3:= v3.`q.d$b.a` @type ^`char` @kind char;
  #L4f5d66.  v2.`q.d$b.a` @type ^`char` := v3 @kind char;
  #L4f5d6a.  v2:= 0I;
  #L4f5d6c.  v3:= v6[v1] @kind object;
  #L4f5d70.  v3:= v3.`q.d$b.b` @type ^`float`[] @kind object;
  #L4f5d74.  v3:= length @variable v3;
  #L4f5d76.  if v2 >= v3 then goto L4f5d98;
  #L4f5d7a.  v3:= v5[v1] @kind object;
  #L4f5d7e.  v3:= v3.`q.d$b.b` @type ^`float`[] @kind object;
  #L4f5d82.  v4:= v6[v1] @kind object;
  #L4f5d86.  v4:= v4.`q.d$b.b` @type ^`float`[] @kind object;
  #L4f5d8a.  v4:= v4[v2];
  #L4f5d8e.  v3[v2]:= v4;
  #L4f5d92.  v2:= v2 + 1;
  #L4f5d96.  goto L4f5d6c;
  #L4f5d98.  v1:= v1 + 1;
  #L4f5d9c.  goto L4f5d54;
  #L4f5d9e.  return @kind void;
}
