record `q.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.ThreadLocal` `@@q.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lq/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f48bc.  v0:= new `java.lang.ThreadLocal`;
  #L4f48c0.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L4f48c6.  `@@q.a.a` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L4f48ca.  return @kind void;
}
procedure `int` `a`(`double` v17 , `double` v19 , `double` v21 ) @signature `Lq/a;.a:(DDD)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4f45fc.  v0:= 3.2406D;
  #L4f4606.  v0:= v0 * v17 @kind double;
  #L4f460a.  v2:= -1.5372D;
  #L4f4614.  v2:= v2 * v19 @kind double;
  #L4f4618.  v0:= v0 + v2 @kind double;
  #L4f461a.  v2:= -0.4986D;
  #L4f4624.  v2:= v2 * v21 @kind double;
  #L4f4628.  v0:= v0 + v2 @kind double;
  #L4f462a.  v2:= 100.0D;
  #L4f462e.  v0:= v0 / v2 @kind double;
  #L4f4630.  v4:= -0.9689D;
  #L4f463a.  v4:= v4 * v17 @kind double;
  #L4f463e.  v6:= 1.8758D;
  #L4f4648.  v6:= v6 * v19 @kind double;
  #L4f464c.  v4:= v4 + v6 @kind double;
  #L4f464e.  v6:= 0.0415D;
  #L4f4658.  v6:= v6 * v21 @kind double;
  #L4f465c.  v4:= v4 + v6 @kind double;
  #L4f465e.  v4:= v4 / v2 @kind double;
  #L4f4660.  v6:= 0.0557D;
  #L4f466a.  v6:= v6 * v17 @kind double;
  #L4f466e.  v8:= -0.204D;
  #L4f4678.  v8:= v8 * v19 @kind double;
  #L4f467c.  v6:= v6 + v8 @kind double;
  #L4f467e.  v8:= 1.057D;
  #L4f4688.  v8:= v8 * v21 @kind double;
  #L4f468c.  v6:= v6 + v8 @kind double;
  #L4f468e.  v6:= v6 / v2 @kind double;
  #L4f4690.  v2:= 0.055D;
  #L4f469a.  v8:= 0.4166666666666667D;
  #L4f46a4.  v10:= 1.055D;
  #L4f46ae.  v12:= 12.92D;
  #L4f46b8.  v14:= 0.0031308D;
  #L4f46c2.  v16:= dcmpl(v0, v14);
  #L4f46c6.  if v16 <= 0 then goto L4f46da;
  #L4f46ca.  call temp:= `pow`(v0, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f46d0.  v0:= temp @kind wide;
  #L4f46d2.  v0:= v0 * v10 @kind double;
  #L4f46d6.  v0:= v0 - v2 @kind double;
  #L4f46d8.  goto L4f46de;
  #L4f46da.  v0:= v0 * v12 @kind double;
  #L4f46de.  v16:= dcmpl(v4, v14);
  #L4f46e2.  if v16 <= 0 then goto L4f46f6;
  #L4f46e6.  call temp:= `pow`(v4, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f46ec.  v4:= temp @kind wide;
  #L4f46ee.  v4:= v4 * v10 @kind double;
  #L4f46f2.  v4:= v4 - v2 @kind double;
  #L4f46f4.  goto L4f46fa;
  #L4f46f6.  v4:= v4 * v12 @kind double;
  #L4f46fa.  v16:= dcmpl(v6, v14);
  #L4f46fe.  if v16 <= 0 then goto L4f4712;
  #L4f4702.  call temp:= `pow`(v6, v8) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f4708.  v6:= temp @kind wide;
  #L4f470a.  v6:= v6 * v10 @kind double;
  #L4f470e.  v6:= v6 - v2 @kind double;
  #L4f4710.  goto L4f4716;
  #L4f4712.  v6:= v6 * v12 @kind double;
  #L4f4716.  v2:= 255.0D;
  #L4f4720.  v0:= v0 * v2 @kind double;
  #L4f4724.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L4f472a.  v0:= temp @kind wide;
  #L4f472c.  v1:= (`int`) v0 @kind l2i;
  #L4f472e.  v0:= 0I;
  #L4f4730.  v8:= 255I;
  #L4f4734.  call temp:= `e`(v1, v0, v8) @signature `Lq/a;.e:(III)I` @kind static;
  #L4f473a.  v1:= temp;
  #L4f473c.  v4:= v4 * v2 @kind double;
  #L4f4740.  call temp:= `round`(v4) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L4f4746.  v4:= temp @kind wide;
  #L4f4748.  v5:= (`int`) v4 @kind l2i;
  #L4f474a.  call temp:= `e`(v5, v0, v8) @signature `Lq/a;.e:(III)I` @kind static;
  #L4f4750.  v4:= temp;
  #L4f4752.  v6:= v6 * v2 @kind double;
  #L4f4756.  call temp:= `round`(v6) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L4f475c.  v2:= temp @kind wide;
  #L4f475e.  v3:= (`int`) v2 @kind l2i;
  #L4f4760.  call temp:= `e`(v3, v0, v8) @signature `Lq/a;.e:(III)I` @kind static;
  #L4f4766.  v0:= temp;
  #L4f4768.  call temp:= `rgb`(v1, v4, v0) @signature `Landroid/graphics/Color;.rgb:(III)I` @kind static;
  #L4f476e.  v0:= temp;
  #L4f4770.  return v0;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lq/a;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4f4784.  v1:= v1 - 255;
  #L4f4788.  v0:= v0 - 255;
  #L4f478c.  v1:= v1 * v0 @kind int;
  #L4f4790.  v1:= v1 / 255;
  #L4f4794.  v0:= v1 - 255;
  #L4f4798.  return v0;
}
procedure `int` `c`(`int` v6 , `int` v7 ) @signature `Lq/a;.c:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f47ac.  call temp:= `alpha`(v7) @signature `Landroid/graphics/Color;.alpha:(I)I` @kind static;
  #L4f47b2.  v0:= temp;
  #L4f47b4.  call temp:= `alpha`(v6) @signature `Landroid/graphics/Color;.alpha:(I)I` @kind static;
  #L4f47ba.  v1:= temp;
  #L4f47bc.  call temp:= `b`(v1, v0) @signature `Lq/a;.b:(II)I` @kind static;
  #L4f47c2.  v2:= temp;
  #L4f47c4.  call temp:= `red`(v6) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L4f47ca.  v3:= temp;
  #L4f47cc.  call temp:= `red`(v7) @signature `Landroid/graphics/Color;.red:(I)I` @kind static;
  #L4f47d2.  v4:= temp;
  #L4f47d4.  call temp:= `d`(v3, v1, v4, v0, v2) @signature `Lq/a;.d:(IIIII)I` @kind static;
  #L4f47da.  v3:= temp;
  #L4f47dc.  call temp:= `green`(v6) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L4f47e2.  v4:= temp;
  #L4f47e4.  call temp:= `green`(v7) @signature `Landroid/graphics/Color;.green:(I)I` @kind static;
  #L4f47ea.  v5:= temp;
  #L4f47ec.  call temp:= `d`(v4, v1, v5, v0, v2) @signature `Lq/a;.d:(IIIII)I` @kind static;
  #L4f47f2.  v4:= temp;
  #L4f47f4.  call temp:= `blue`(v6) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L4f47fa.  v6:= temp;
  #L4f47fc.  call temp:= `blue`(v7) @signature `Landroid/graphics/Color;.blue:(I)I` @kind static;
  #L4f4802.  v7:= temp;
  #L4f4804.  call temp:= `d`(v6, v1, v7, v0, v2) @signature `Lq/a;.d:(IIIII)I` @kind static;
  #L4f480a.  v6:= temp;
  #L4f480c.  call temp:= `argb`(v2, v3, v4, v6) @signature `Landroid/graphics/Color;.argb:(IIII)I` @kind static;
  #L4f4812.  v6:= temp;
  #L4f4814.  return v6;
}
procedure `int` `d`(`int` v0 , `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lq/a;.d:(IIIII)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4f4828.  if v4 != 0 then goto L4f4830;
  #L4f482c.  v0:= 0I;
  #L4f482e.  return v0;
  #L4f4830.  v0:= v0 * 255;
  #L4f4834.  v0:= v0 * v1 @kind int;
  #L4f4838.  v2:= v2 * v3 @kind int;
  #L4f483c.  v1:= v1 - 255;
  #L4f4840.  v2:= v2 * v1 @kind int;
  #L4f4844.  v0:= v0 + v2 @kind int;
  #L4f4846.  v4:= v4 * 255;
  #L4f484a.  v0:= v0 / v4 @kind int;
  #L4f484c.  return v0;
}
procedure `int` `e`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lq/a;.e:(III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4f4860.  if v0 >= v1 then goto L4f4868;
  #L4f4864.  v0:= v1;
  #L4f4866.  goto L4f486e;
  #L4f4868.  if v0 <= v2 then goto L4f486e;
  #L4f486c.  v0:= v2;
  #L4f486e.  return v0;
}
procedure `int` `f`(`int` v1 , `int` v2 ) @signature `Lq/a;.f:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f4880.  if v2 < 0 then goto L4f489c;
  #L4f4884.  v0:= 255I;
  #L4f4888.  if v2 > v0 then goto L4f489c;
  #L4f488c.  v0:= 16777215I;
  #L4f4892.  v1:= v1 ^& v0 @kind int;
  #L4f4894.  v2:= v2 ^< 24;
  #L4f4898.  v1:= v1 ^| v2 @kind int;
  #L4f489a.  return v1;
  #L4f489c.  v1:= new `java.lang.IllegalArgumentException`;
  #L4f48a0.  v2:= "alpha must be between 0 and 255." @kind object;
  #L4f48a4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f48aa.  throw v1;
}
