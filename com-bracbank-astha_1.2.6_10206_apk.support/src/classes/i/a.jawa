record `i.a` @kind class @AccessFlag PUBLIC extends `i.c` @kind class {
  `i.c` `i.a.a` @AccessFlag PRIVATE;
  `i.c` `i.a.b` @AccessFlag PRIVATE;
}
global `i.a` `@@i.a.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `java.util.concurrent.Executor` `@@i.a.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@i.a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Li/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ea5d0.  v0:= new `i.a$a`;
  #L4ea5d4.  call `<init>`(v0) @signature `Li/a$a;.<init>:()V` @kind direct;
  #L4ea5da.  `@@i.a.d` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L4ea5de.  v0:= new `i.a$b`;
  #L4ea5e2.  call `<init>`(v0) @signature `Li/a$b;.<init>:()V` @kind direct;
  #L4ea5e8.  `@@i.a.e` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L4ea5ec.  return @kind void;
}
procedure `void` `<init>`(`i.a` v1 @kind this) @signature `Li/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4ea600.  call `<init>`(v1) @signature `Li/c;.<init>:()V` @kind direct;
  #L4ea606.  v0:= new `i.b`;
  #L4ea60a.  call `<init>`(v0) @signature `Li/b;.<init>:()V` @kind direct;
  #L4ea610.  v1.`i.a.b` @type ^`i.c` := v0 @kind object;
  #L4ea614.  v1.`i.a.a` @type ^`i.c` := v0 @kind object;
  #L4ea618.  return @kind void;
}
procedure `i.a` `d`() @signature `Li/a;.d:()Li/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ea574.  v0:= `@@i.a.c` @type ^`i.a` @kind object;
  #L4ea578.  if v0 == 0 then goto L4ea582;
  #L4ea57c.  v0:= `@@i.a.c` @type ^`i.a` @kind object;
  #L4ea580.  return v0 @kind object;
  #L4ea582.  v0:= constclass @type ^`i.a` @kind object;
  #L4ea586.  @monitorenter v0
  #L4ea588.  v1:= `@@i.a.c` @type ^`i.a` @kind object;
  #L4ea58c.  if v1 != 0 then goto L4ea59e;
  #L4ea590.  v1:= new `i.a`;
  #L4ea594.  call `<init>`(v1) @signature `Li/a;.<init>:()V` @kind direct;
  #L4ea59a.  `@@i.a.c` @type ^`i.a` := v1 @kind object;
  #L4ea59e.  @monitorexit v0
  #L4ea5a0.  v0:= `@@i.a.c` @type ^`i.a` @kind object;
  #L4ea5a4.  return v0 @kind object;
  #L4ea5a6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ea5a8.  @monitorexit v0
  #L4ea5aa.  throw v1;
  catch `java.lang.Throwable` @[L4ea588..L4ea5a0] goto L4ea5a6;
  catch `java.lang.Throwable` @[L4ea5a8..L4ea5aa] goto L4ea5a6;
}
procedure `void` `a`(`i.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Li/a;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea62c.  v0:= v1.`i.a.a` @type ^`i.c` @kind object;
  #L4ea630.  call `a`(v0, v2) @signature `Li/c;.a:(Ljava/lang/Runnable;)V` @kind virtual;
  #L4ea636.  return @kind void;
}
procedure `boolean` `b`(`i.a` v1 @kind this) @signature `Li/a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea554.  v0:= v1.`i.a.a` @type ^`i.c` @kind object;
  #L4ea558.  call temp:= `b`(v0) @signature `Li/c;.b:()Z` @kind virtual;
  #L4ea55e.  v0:= temp;
  #L4ea560.  return v0;
}
procedure `void` `c`(`i.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Li/a;.c:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea648.  v0:= v1.`i.a.a` @type ^`i.c` @kind object;
  #L4ea64c.  call `c`(v0, v2) @signature `Li/c;.c:(Ljava/lang/Runnable;)V` @kind virtual;
  #L4ea652.  return @kind void;
}
