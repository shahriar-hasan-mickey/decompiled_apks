record `n1.a$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.nio.ByteBuffer` `n1.a$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `n1.a$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n1.a$a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Ln1/a$a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ec590.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L4ec596.  v0:= -1I;
  #L4ec598.  v1.`n1.a$a.b` @type ^`int` := v0;
  #L4ec59c.  v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L4ec5a0.  return @kind void;
}
procedure `int` `available`(`n1.a$a` v1 @kind this) @signature `Ln1/a$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec4a4.  v0:= v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec4a8.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L4ec4ae.  v0:= temp;
  #L4ec4b0.  return v0;
}
procedure `void` `mark`(`n1.a$a` v0 @kind this, `int` v1 ) @signature `Ln1/a$a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4ec5b4.  @monitorenter v0
  #L4ec5b6.  v1:= v0.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec5ba.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4ec5c0.  v1:= temp;
  #L4ec5c2.  v0.`n1.a$a.b` @type ^`int` := v1;
  #L4ec5c6.  @monitorexit v0
  #L4ec5c8.  return @kind void;
  #L4ec5ca.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec5cc.  @monitorexit v0
  #L4ec5ce.  throw v1;
  catch `java.lang.Throwable` @[L4ec5b6..L4ec5c6] goto L4ec5ca;
}
procedure `boolean` `markSupported`(`n1.a$a` v1 @kind this) @signature `Ln1/a$a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec490.  v0:= 1I;
  #L4ec492.  return v0;
}
procedure `int` `read`(`n1.a$a` v1 @kind this) @signature `Ln1/a$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec4c4.  v0:= v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec4c8.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L4ec4ce.  v0:= temp;
  #L4ec4d0.  if v0 != 0 then goto L4ec4d8;
  #L4ec4d4.  v0:= -1I;
  #L4ec4d6.  return v0;
  #L4ec4d8.  v0:= v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec4dc.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L4ec4e2.  v0:= temp;
  #L4ec4e4.  v0:= v0 ^& 255;
  #L4ec4e8.  return v0;
}
procedure `int` `read`(`n1.a$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Ln1/a$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec4fc.  v0:= v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec500.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L4ec506.  v0:= temp;
  #L4ec508.  if v0 != 0 then goto L4ec510;
  #L4ec50c.  v2:= -1I;
  #L4ec50e.  return v2;
  #L4ec510.  call temp:= `available`(v1) @signature `Ln1/a$a;.available:()I` @kind virtual;
  #L4ec516.  v0:= temp;
  #L4ec518.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ec51e.  v4:= temp;
  #L4ec520.  v0:= v1.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec524.  call temp:= `get`(v0, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4ec52a.  return v4;
}
procedure `void` `reset`(`n1.a$a` v2 @kind this) @signature `Ln1/a$a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec5ec.  @monitorenter v2
  #L4ec5ee.  v0:= v2.`n1.a$a.b` @type ^`int`;
  #L4ec5f2.  v1:= -1I;
  #L4ec5f4.  if v0 == v1 then goto L4ec606;
  #L4ec5f8.  v1:= v2.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec5fc.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4ec602.  @monitorexit v2
  #L4ec604.  return @kind void;
  #L4ec606.  v0:= new `java.io.IOException`;
  #L4ec60a.  v1:= "Cannot reset to unset mark position" @kind object;
  #L4ec60e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ec614.  throw v0;
  #L4ec616.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec618.  @monitorexit v2
  #L4ec61a.  throw v0;
  catch `java.lang.Throwable` @[L4ec5ee..L4ec602] goto L4ec616;
  catch `java.lang.Throwable` @[L4ec606..L4ec616] goto L4ec616;
}
procedure `long` `skip`(`n1.a$a` v3 @kind this, `long` v4 ) @signature `Ln1/a$a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ec53c.  v0:= v3.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec540.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L4ec546.  v0:= temp;
  #L4ec548.  if v0 != 0 then goto L4ec552;
  #L4ec54c.  v4:= -1L;
  #L4ec550.  return v4 @kind wide;
  #L4ec552.  call temp:= `available`(v3) @signature `Ln1/a$a;.available:()I` @kind virtual;
  #L4ec558.  v0:= temp;
  #L4ec55a.  v0:= (`long`) v0 @kind i2l;
  #L4ec55c.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4ec562.  v4:= temp @kind wide;
  #L4ec564.  v0:= v3.`n1.a$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L4ec568.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4ec56e.  v1:= temp;
  #L4ec570.  v1:= (`long`) v1 @kind i2l;
  #L4ec572.  v1:= v1 + v4 @kind long;
  #L4ec574.  v2:= (`int`) v1 @kind l2i;
  #L4ec576.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4ec57c.  return v4 @kind wide;
}
