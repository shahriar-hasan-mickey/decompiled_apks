record `n1.g` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `n1.g.a` @AccessFlag PRIVATE_FINAL;
  `long` `n1.g.b` @AccessFlag PRIVATE_FINAL;
  `long` `n1.g.c` @AccessFlag PRIVATE;
  `long` `n1.g.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n1.g` v4 @kind this, `long` v5 ) @signature `Ln1/g;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed148.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ed14e.  v0:= new `java.util.LinkedHashMap`;
  #L4ed152.  v1:= 100I;
  #L4ed156.  v2:= 0.75F;
  #L4ed15a.  v3:= 1I;
  #L4ed15c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L4ed162.  v4.`n1.g.a` @type ^`java.util.Map` := v0 @kind object;
  #L4ed166.  v4.`n1.g.b` @type ^`long` := v5 @kind wide;
  #L4ed16a.  v4.`n1.g.c` @type ^`long` := v5 @kind wide;
  #L4ed16e.  return @kind void;
}
procedure `void` `f`(`n1.g` v2 @kind this) @signature `Ln1/g;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4ed19c.  v0:= v2.`n1.g.c` @type ^`long` @kind wide;
  #L4ed1a0.  call `m`(v2, v0) @signature `Ln1/g;.m:(J)V` @kind virtual;
  #L4ed1a6.  return @kind void;
}
procedure `void` `b`(`n1.g` v2 @kind this) @signature `Ln1/g;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed180.  v0:= 0L;
  #L4ed184.  call `m`(v2, v0) @signature `Ln1/g;.m:(J)V` @kind virtual;
  #L4ed18a.  return @kind void;
}
procedure `java.lang.Object` `g`(`n1.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln1/g;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed000.  @monitorenter v1
  #L4ed002.  v0:= v1.`n1.g.a` @type ^`java.util.Map` @kind object;
  #L4ed006.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ed00c.  v2:= temp @kind object;
  #L4ed00e.  @monitorexit v1
  #L4ed010.  return v2 @kind object;
  #L4ed012.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed014.  @monitorexit v1
  #L4ed016.  throw v2;
  catch `java.lang.Throwable` @[L4ed002..L4ed00e] goto L4ed012;
}
procedure `long` `h`(`n1.g` v2 @kind this) @signature `Ln1/g;.h:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed11c.  @monitorenter v2
  #L4ed11e.  v0:= v2.`n1.g.c` @type ^`long` @kind wide;
  #L4ed122.  @monitorexit v2
  #L4ed124.  return v0 @kind wide;
  #L4ed126.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed128.  @monitorexit v2
  #L4ed12a.  throw v0;
  catch `java.lang.Throwable` @[L4ed11e..L4ed122] goto L4ed126;
}
procedure `int` `i`(`n1.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L4ecfec.  v1:= 1I;
  #L4ecfee.  return v1;
}
procedure `void` `j`(`n1.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln1/g;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L4ed1b8.  return @kind void;
}
procedure `java.lang.Object` `k`(`n1.g` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Ln1/g;.k:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ed034.  @monitorenter v5
  #L4ed036.  call temp:= `i`(v5, v7) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L4ed03c.  v0:= temp;
  #L4ed03e.  v0:= (`long`) v0 @kind i2l;
  #L4ed040.  v2:= v5.`n1.g.c` @type ^`long` @kind wide;
  #L4ed044.  v4:= lcmp(v0, v2);
  #L4ed048.  if v4 < 0 then goto L4ed058;
  #L4ed04c.  call `j`(v5, v6, v7) @signature `Ln1/g;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L4ed052.  v6:= 0I;
  #L4ed054.  @monitorexit v5
  #L4ed056.  return v6 @kind object;
  #L4ed058.  if v7 == 0 then goto L4ed066;
  #L4ed05c.  v2:= v5.`n1.g.d` @type ^`long` @kind wide;
  #L4ed060.  v2:= v2 + v0 @kind long;
  #L4ed062.  v5.`n1.g.d` @type ^`long` := v2 @kind wide;
  #L4ed066.  v0:= v5.`n1.g.a` @type ^`java.util.Map` @kind object;
  #L4ed06a.  call temp:= `put`(v0, v6, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ed070.  v0:= temp @kind object;
  #L4ed072.  if v0 == 0 then goto L4ed09c;
  #L4ed076.  v1:= v5.`n1.g.d` @type ^`long` @kind wide;
  #L4ed07a.  call temp:= `i`(v5, v0) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L4ed080.  v3:= temp;
  #L4ed082.  v3:= (`long`) v3 @kind i2l;
  #L4ed084.  v1:= v1 - v3 @kind long;
  #L4ed086.  v5.`n1.g.d` @type ^`long` := v1 @kind wide;
  #L4ed08a.  call temp:= `equals`(v0, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ed090.  v7:= temp;
  #L4ed092.  if v7 != 0 then goto L4ed09c;
  #L4ed096.  call `j`(v5, v6, v0) @signature `Ln1/g;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L4ed09c.  call `f`(v5) @signature `Ln1/g;.f:()V` @kind direct;
  #L4ed0a2.  @monitorexit v5
  #L4ed0a4.  return v0 @kind object;
  #L4ed0a6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed0a8.  @monitorexit v5
  #L4ed0aa.  throw v6;
  catch `java.lang.Throwable` @[L4ed036..L4ed052] goto L4ed0a6;
  catch `java.lang.Throwable` @[L4ed05c..L4ed0a2] goto L4ed0a6;
}
procedure `java.lang.Object` `l`(`n1.g` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln1/g;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed0d0.  @monitorenter v4
  #L4ed0d2.  v0:= v4.`n1.g.a` @type ^`java.util.Map` @kind object;
  #L4ed0d6.  call temp:= `remove`(v0, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ed0dc.  v5:= temp @kind object;
  #L4ed0de.  if v5 == 0 then goto L4ed0f6;
  #L4ed0e2.  v0:= v4.`n1.g.d` @type ^`long` @kind wide;
  #L4ed0e6.  call temp:= `i`(v4, v5) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L4ed0ec.  v2:= temp;
  #L4ed0ee.  v2:= (`long`) v2 @kind i2l;
  #L4ed0f0.  v0:= v0 - v2 @kind long;
  #L4ed0f2.  v4.`n1.g.d` @type ^`long` := v0 @kind wide;
  #L4ed0f6.  @monitorexit v4
  #L4ed0f8.  return v5 @kind object;
  #L4ed0fa.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed0fc.  @monitorexit v4
  #L4ed0fe.  throw v5;
  catch `java.lang.Throwable` @[L4ed0d2..L4ed0f6] goto L4ed0fa;
}
procedure `void` `m`(`n1.g` v7 @kind this, `long` v8 ) @signature `Ln1/g;.m:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ed1cc.  @monitorenter v7
  #L4ed1ce.  v0:= v7.`n1.g.d` @type ^`long` @kind wide;
  #L4ed1d2.  v2:= lcmp(v0, v8);
  #L4ed1d6.  if v2 <= 0 then goto L4ed22c;
  #L4ed1da.  v0:= v7.`n1.g.a` @type ^`java.util.Map` @kind object;
  #L4ed1de.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L4ed1e4.  v0:= temp @kind object;
  #L4ed1e6.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ed1ec.  v0:= temp @kind object;
  #L4ed1ee.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ed1f4.  v1:= temp @kind object;
  #L4ed1f6.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L4ed1fa.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4ed200.  v2:= temp @kind object;
  #L4ed202.  v3:= v7.`n1.g.d` @type ^`long` @kind wide;
  #L4ed206.  call temp:= `i`(v7, v2) @signature `Ln1/g;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L4ed20c.  v5:= temp;
  #L4ed20e.  v5:= (`long`) v5 @kind i2l;
  #L4ed210.  v3:= v3 - v5 @kind long;
  #L4ed212.  v7.`n1.g.d` @type ^`long` := v3 @kind wide;
  #L4ed216.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L4ed21c.  v1:= temp @kind object;
  #L4ed21e.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L4ed224.  call `j`(v7, v1, v2) @signature `Ln1/g;.j:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L4ed22a.  goto L4ed1ce;
  #L4ed22c.  @monitorexit v7
  #L4ed22e.  return @kind void;
  #L4ed230.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed232.  @monitorexit v7
  #L4ed234.  throw v8;
  catch `java.lang.Throwable` @[L4ed1ce..L4ed22a] goto L4ed230;
}
