record `n1.d` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `n1.d.a` @AccessFlag PRIVATE;
  `java.io.IOException` `n1.d.b` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@n1.d.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln1/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ecda8.  v0:= 0I;
  #L4ecdaa.  call temp:= `e`(v0) @signature `Ln1/k;.e:(I)Ljava/util/Queue;` @kind static;
  #L4ecdb0.  v0:= temp @kind object;
  #L4ecdb2.  `@@n1.d.c` @type ^`java.util.Queue` := v0 @kind object;
  #L4ecdb6.  return @kind void;
}
procedure `void` `<init>`(`n1.d` v0 @kind this) @signature `Ln1/d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ecdc8.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L4ecdce.  return @kind void;
}
procedure `n1.d` `h`(`java.io.InputStream` v2 @kind object) @signature `Ln1/d;.h:(Ljava/io/InputStream;)Ln1/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ecd54.  v0:= `@@n1.d.c` @type ^`java.util.Queue` @kind object;
  #L4ecd58.  @monitorenter v0
  #L4ecd5a.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ecd60.  v1:= temp @kind object;
  #L4ecd62.  v1:= (`n1.d`) v1 @kind object;
  #L4ecd66.  @monitorexit v0
  #L4ecd68.  if v1 != 0 then goto L4ecd76;
  #L4ecd6c.  v1:= new `n1.d`;
  #L4ecd70.  call `<init>`(v1) @signature `Ln1/d;.<init>:()V` @kind direct;
  #L4ecd76.  call `s`(v1, v2) @signature `Ln1/d;.s:(Ljava/io/InputStream;)V` @kind virtual;
  #L4ecd7c.  return v1 @kind object;
  #L4ecd7e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecd80.  @monitorexit v0
  #L4ecd82.  throw v2;
  catch `java.lang.Throwable` @[L4ecd5a..L4ecd68] goto L4ecd7e;
  catch `java.lang.Throwable` @[L4ecd80..L4ecd82] goto L4ecd7e;
}
procedure `int` `available`(`n1.d` v1 @kind this) @signature `Ln1/d;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecc38.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecc3c.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L4ecc42.  v0:= temp;
  #L4ecc44.  return v0;
}
procedure `void` `close`(`n1.d` v1 @kind this) @signature `Ln1/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecde0.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecde4.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L4ecdea.  return @kind void;
}
procedure `java.io.IOException` `g`(`n1.d` v1 @kind this) @signature `Ln1/d;.g:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecd00.  v0:= v1.`n1.d.b` @type ^`java.io.IOException` @kind object;
  #L4ecd04.  return v0 @kind object;
}
procedure `void` `mark`(`n1.d` v1 @kind this, `int` v2 ) @signature `Ln1/d;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecdfc.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ece00.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L4ece06.  return @kind void;
}
procedure `boolean` `markSupported`(`n1.d` v1 @kind this) @signature `Ln1/d;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecc18.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecc1c.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L4ecc22.  v0:= temp;
  #L4ecc24.  return v0;
}
procedure `int` `read`(`n1.d` v1 @kind this) @signature `Ln1/d;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecc58.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecc5c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L4ecc62.  v0:= temp;
  #L4ecc64.  goto L4ecc6e;
  #L4ecc66.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L4ecc68.  v1.`n1.d.b` @type ^`java.io.IOException` := v0 @kind object;
  #L4ecc6c.  v0:= -1I;
  #L4ecc6e.  return v0;
  catch `java.io.IOException` @[L4ecc58..L4ecc64] goto L4ecc66;
}
procedure `int` `read`(`n1.d` v1 @kind this, `byte`[] v2 @kind object) @signature `Ln1/d;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecc90.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecc94.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L4ecc9a.  v2:= temp;
  #L4ecc9c.  goto L4ecca6;
  #L4ecc9e.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L4ecca0.  v1.`n1.d.b` @type ^`java.io.IOException` := v2 @kind object;
  #L4ecca4.  v2:= -1I;
  #L4ecca6.  return v2;
  catch `java.io.IOException` @[L4ecc90..L4ecc9c] goto L4ecc9e;
}
procedure `int` `read`(`n1.d` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Ln1/d;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eccc8.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecccc.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L4eccd2.  v2:= temp;
  #L4eccd4.  goto L4eccde;
  #L4eccd6.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L4eccd8.  v1.`n1.d.b` @type ^`java.io.IOException` := v2 @kind object;
  #L4eccdc.  v2:= -1I;
  #L4eccde.  return v2;
  catch `java.io.IOException` @[L4eccc8..L4eccd4] goto L4eccd6;
}
procedure `void` `release`(`n1.d` v2 @kind this) @signature `Ln1/d;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ece18.  v0:= 0I;
  #L4ece1a.  v2.`n1.d.b` @type ^`java.io.IOException` := v0 @kind object;
  #L4ece1e.  v2.`n1.d.a` @type ^`java.io.InputStream` := v0 @kind object;
  #L4ece22.  v0:= `@@n1.d.c` @type ^`java.util.Queue` @kind object;
  #L4ece26.  @monitorenter v0
  #L4ece28.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ece2e.  @monitorexit v0
  #L4ece30.  return @kind void;
  #L4ece32.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ece34.  @monitorexit v0
  #L4ece36.  throw v1;
  catch `java.lang.Throwable` @[L4ece28..L4ece36] goto L4ece32;
}
procedure `void` `reset`(`n1.d` v1 @kind this) @signature `Ln1/d;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ece54.  @monitorenter v1
  #L4ece56.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ece5a.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L4ece60.  @monitorexit v1
  #L4ece62.  return @kind void;
  #L4ece64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ece66.  @monitorexit v1
  #L4ece68.  throw v0;
  catch `java.lang.Throwable` @[L4ece56..L4ece60] goto L4ece64;
}
procedure `void` `s`(`n1.d` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Ln1/d;.s:(Ljava/io/InputStream;)V` @AccessFlag  {
    temp;

  #L4ece88.  v0.`n1.d.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L4ece8c.  return @kind void;
}
procedure `long` `skip`(`n1.d` v1 @kind this, `long` v2 ) @signature `Ln1/d;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecd18.  v0:= v1.`n1.d.a` @type ^`java.io.InputStream` @kind object;
  #L4ecd1c.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L4ecd22.  v2:= temp @kind wide;
  #L4ecd24.  goto L4ecd30;
  #L4ecd26.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L4ecd28.  v1.`n1.d.b` @type ^`java.io.IOException` := v2 @kind object;
  #L4ecd2c.  v2:= 0L;
  #L4ecd30.  return v2 @kind wide;
  catch `java.io.IOException` @[L4ecd18..L4ecd24] goto L4ecd26;
}
