record `n1.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@n1.k.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@n1.k.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln1/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4edb18.  v0:= "0123456789abcdef" @kind object;
  #L4edb1c.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L4edb22.  v0:= temp @kind object;
  #L4edb24.  `@@n1.k.a` @type ^`char`[] := v0 @kind object;
  #L4edb28.  v0:= 64I;
  #L4edb2c.  v0:= new `char`[v0];
  #L4edb30.  `@@n1.k.b` @type ^`char`[] := v0 @kind object;
  #L4edb34.  return @kind void;
}
procedure `void` `a`() @signature `Ln1/k;.a:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4edb48.  call temp:= `p`() @signature `Ln1/k;.p:()Z` @kind static;
  #L4edb4e.  v0:= temp;
  #L4edb50.  if v0 == 0 then goto L4edb56;
  #L4edb54.  return @kind void;
  #L4edb56.  v0:= new `java.lang.IllegalArgumentException`;
  #L4edb5a.  v1:= "You must call this method on the main thread" @kind object;
  #L4edb5e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4edb64.  throw v0;
}
procedure `boolean` `b`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Ln1/k;.b:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed738.  if v1 != 0 then goto L4ed748;
  #L4ed73c.  if v2 != 0 then goto L4ed744;
  #L4ed740.  v1:= 1I;
  #L4ed742.  goto L4ed746;
  #L4ed744.  v1:= 0I;
  #L4ed746.  return v1;
  #L4ed748.  v0:= instanceof @variable v1 @type ^`x0.l` @kind boolean;
  #L4ed74c.  if v0 == 0 then goto L4ed75e;
  #L4ed750.  v1:= (`x0.l`) v1 @kind object;
  #L4ed754.  call temp:= `a`(v1, v2) @signature `Lx0/l;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L4ed75a.  v1:= temp;
  #L4ed75c.  return v1;
  #L4ed75e.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ed764.  v1:= temp;
  #L4ed766.  return v1;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Ln1/k;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed778.  if v0 != 0 then goto L4ed788;
  #L4ed77c.  if v1 != 0 then goto L4ed784;
  #L4ed780.  v0:= 1I;
  #L4ed782.  goto L4ed790;
  #L4ed784.  v0:= 0I;
  #L4ed786.  goto L4ed790;
  #L4ed788.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ed78e.  v0:= temp;
  #L4ed790.  return v0;
}
procedure `java.lang.String` `d`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Ln1/k;.d:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eda24.  v0:= 0I;
  #L4eda26.  v1:= length @variable v5;
  #L4eda28.  if v0 >= v1 then goto L4eda5e;
  #L4eda2c.  v1:= v5[v0] @kind byte;
  #L4eda30.  v1:= v1 ^& 255;
  #L4eda34.  v2:= v0 * 2;
  #L4eda38.  v3:= `@@n1.k.a` @type ^`char`[] @kind object;
  #L4eda3c.  v4:= v1 ^>> 4;
  #L4eda40.  v4:= v3[v4] @kind char;
  #L4eda44.  v6[v2]:= v4 @kind char;
  #L4eda48.  v2:= v2 + 1;
  #L4eda4c.  v1:= v1 ^& 15;
  #L4eda50.  v1:= v3[v1] @kind char;
  #L4eda54.  v6[v2]:= v1 @kind char;
  #L4eda58.  v0:= v0 + 1;
  #L4eda5c.  goto L4eda26;
  #L4eda5e.  v5:= new `java.lang.String`;
  #L4eda62.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L4eda68.  return v5 @kind object;
}
procedure `java.util.Queue` `e`(`int` v1 ) @signature `Ln1/k;.e:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4edafc.  v0:= new `java.util.ArrayDeque`;
  #L4edb00.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4edb06.  return v0 @kind object;
}
procedure `int` `f`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Ln1/k;.f:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed90c.  v0:= v0 * v1 @kind int;
  #L4ed910.  call temp:= `h`(v2) @signature `Ln1/k;.h:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L4ed916.  v1:= temp;
  #L4ed918.  v0:= v0 * v1 @kind int;
  #L4ed91c.  return v0;
}
procedure `int` `g`(`android.graphics.Bitmap` v3 @kind object) @signature `Ln1/k;.g:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ed848.  call temp:= `isRecycled`(v3) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L4ed84e.  v0:= temp;
  #L4ed850.  if v0 != 0 then goto L4ed874;
  #L4ed854.  call temp:= `getAllocationByteCount`(v3) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L4ed85a.  v3:= temp;
  #L4ed85c.  return v3;
  #L4ed85e.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L4ed864.  v0:= temp;
  #L4ed866.  call temp:= `getRowBytes`(v3) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L4ed86c.  v3:= temp;
  #L4ed86e.  v0:= v0 * v3 @kind int;
  #L4ed872.  return v0;
  #L4ed874.  v0:= new `java.lang.IllegalStateException`;
  #L4ed878.  v1:= new `java.lang.StringBuilder`;
  #L4ed87c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ed882.  v2:= "Cannot obtain size for recycled Bitmap: " @kind object;
  #L4ed886.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed88c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed892.  v2:= "[" @kind object;
  #L4ed896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed89c.  call temp:= `getWidth`(v3) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L4ed8a2.  v2:= temp;
  #L4ed8a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed8aa.  v2:= "x" @kind object;
  #L4ed8ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed8b4.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L4ed8ba.  v2:= temp;
  #L4ed8bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed8c2.  v2:= "] " @kind object;
  #L4ed8c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed8cc.  call temp:= `getConfig`(v3) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L4ed8d2.  v3:= temp @kind object;
  #L4ed8d4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed8da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ed8e0.  v3:= temp @kind object;
  #L4ed8e2.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ed8e8.  throw v0;
  catch `java.lang.NullPointerException` @[L4ed854..L4ed85c] goto L4ed85e;
}
procedure `int` `h`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Ln1/k;.h:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ed930.  if v3 != 0 then goto L4ed938;
  #L4ed934.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L4ed938.  v0:= `@@n1.k$a.a` @type ^`int`[] @kind object;
  #L4ed93c.  call temp:= `ordinal`(v3) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L4ed942.  v3:= temp;
  #L4ed944.  v3:= v0[v3];
  #L4ed948.  v0:= 4I;
  #L4ed94a.  v1:= 2I;
  #L4ed94c.  v2:= 1I;
  #L4ed94e.  if v3 == v2 then goto L4ed96c;
  #L4ed952.  if v3 == v1 then goto L4ed968;
  #L4ed956.  v2:= 3I;
  #L4ed958.  if v3 == v2 then goto L4ed968;
  #L4ed95c.  if v3 == v0 then goto L4ed962;
  #L4ed960.  goto L4ed96e;
  #L4ed962.  v0:= 8I;
  #L4ed966.  goto L4ed96e;
  #L4ed968.  v0:= 2I;
  #L4ed96a.  goto L4ed96e;
  #L4ed96c.  v0:= 1I;
  #L4ed96e.  return v0;
}
procedure `java.util.List` `i`(`java.util.Collection` v2 @kind object) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4edab0.  v0:= new `java.util.ArrayList`;
  #L4edab4.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4edaba.  v1:= temp;
  #L4edabc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4edac2.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4edac8.  v2:= temp @kind object;
  #L4edaca.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4edad0.  v1:= temp;
  #L4edad2.  if v1 == 0 then goto L4edaea;
  #L4edad6.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4edadc.  v1:= temp @kind object;
  #L4edade.  if v1 == 0 then goto L4edaca;
  #L4edae2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4edae8.  goto L4edaca;
  #L4edaea.  return v0 @kind object;
}
procedure `int` `j`(`float` v1 ) @signature `Ln1/k;.j:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed99c.  v0:= 17I;
  #L4ed9a0.  call temp:= `k`(v1, v0) @signature `Ln1/k;.k:(FI)I` @kind static;
  #L4ed9a6.  v1:= temp;
  #L4ed9a8.  return v1;
}
procedure `int` `k`(`float` v0 , `int` v1 ) @signature `Ln1/k;.k:(FI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed9bc.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4ed9c2.  v0:= temp;
  #L4ed9c4.  call temp:= `l`(v0, v1) @signature `Ln1/k;.l:(II)I` @kind static;
  #L4ed9ca.  v0:= temp;
  #L4ed9cc.  return v0;
}
procedure `int` `l`(`int` v0 , `int` v1 ) @signature `Ln1/k;.l:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed9e0.  v1:= v1 * 31;
  #L4ed9e4.  v1:= v1 + v0 @kind int;
  #L4ed9e6.  return v1;
}
procedure `int` `m`(`java.lang.Object` v0 @kind object, `int` v1 ) @signature `Ln1/k;.m:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed9f8.  if v0 != 0 then goto L4eda00;
  #L4ed9fc.  v0:= 0I;
  #L4ed9fe.  goto L4eda08;
  #L4eda00.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4eda06.  v0:= temp;
  #L4eda08.  call temp:= `l`(v0, v1) @signature `Ln1/k;.l:(II)I` @kind static;
  #L4eda0e.  v0:= temp;
  #L4eda10.  return v0;
}
procedure `int` `n`(`boolean` v0 , `int` v1 ) @signature `Ln1/k;.n:(ZI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed980.  call temp:= `l`(v0, v1) @signature `Ln1/k;.l:(II)I` @kind static;
  #L4ed986.  v0:= temp;
  #L4ed988.  return v0;
}
procedure `boolean` `o`() @signature `Ln1/k;.o:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed7a4.  call temp:= `p`() @signature `Ln1/k;.p:()Z` @kind static;
  #L4ed7aa.  v0:= temp;
  #L4ed7ac.  v0:= v0 ^~ 1;
  #L4ed7b0.  return v0;
}
procedure `boolean` `p`() @signature `Ln1/k;.p:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ed7c4.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L4ed7ca.  v0:= temp @kind object;
  #L4ed7cc.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L4ed7d2.  v1:= temp @kind object;
  #L4ed7d4.  if v0 != v1 then goto L4ed7dc;
  #L4ed7d8.  v0:= 1I;
  #L4ed7da.  goto L4ed7de;
  #L4ed7dc.  v0:= 0I;
  #L4ed7de.  return v0;
}
procedure `boolean` `q`(`int` v1 ) @signature `Ln1/k;.q:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4ed7f0.  if v1 > 0 then goto L4ed802;
  #L4ed7f4.  v0:= -2147483648I;
  #L4ed7f8.  if v1 != v0 then goto L4ed7fe;
  #L4ed7fc.  goto L4ed802;
  #L4ed7fe.  v1:= 0I;
  #L4ed800.  goto L4ed804;
  #L4ed802.  v1:= 1I;
  #L4ed804.  return v1;
}
procedure `boolean` `r`(`int` v0 , `int` v1 ) @signature `Ln1/k;.r:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4ed818.  call temp:= `q`(v0) @signature `Ln1/k;.q:(I)Z` @kind static;
  #L4ed81e.  v0:= temp;
  #L4ed820.  if v0 == 0 then goto L4ed834;
  #L4ed824.  call temp:= `q`(v1) @signature `Ln1/k;.q:(I)Z` @kind static;
  #L4ed82a.  v0:= temp;
  #L4ed82c.  if v0 == 0 then goto L4ed834;
  #L4ed830.  v0:= 1I;
  #L4ed832.  goto L4ed836;
  #L4ed834.  v0:= 0I;
  #L4ed836.  return v0;
}
procedure `java.lang.String` `s`(`byte`[] v1 @kind object) @signature `Ln1/k;.s:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4eda7c.  v0:= `@@n1.k.b` @type ^`char`[] @kind object;
  #L4eda80.  @monitorenter v0
  #L4eda82.  call temp:= `d`(v1, v0) @signature `Ln1/k;.d:([B[C)Ljava/lang/String;` @kind static;
  #L4eda88.  v1:= temp @kind object;
  #L4eda8a.  @monitorexit v0
  #L4eda8c.  return v1 @kind object;
  #L4eda8e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eda90.  @monitorexit v0
  #L4eda92.  throw v1;
  catch `java.lang.Throwable` @[L4eda82..L4eda92] goto L4eda8e;
}
