record `n1.i` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `n1.i.a` @AccessFlag PRIVATE;
  `java.lang.Class` `n1.i.b` @AccessFlag PRIVATE;
  `java.lang.Class` `n1.i.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n1.i` v0 @kind this) @signature `Ln1/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ed554.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ed55a.  return @kind void;
}
procedure `void` `<init>`(`n1.i` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Ln1/i;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ed56c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ed572.  call `a`(v0, v1, v2, v3) @signature `Ln1/i;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L4ed578.  return @kind void;
}
procedure `void` `a`(`n1.i` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Ln1/i;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L4ed58c.  v0.`n1.i.a` @type ^`java.lang.Class` := v1 @kind object;
  #L4ed590.  v0.`n1.i.b` @type ^`java.lang.Class` := v2 @kind object;
  #L4ed594.  v0.`n1.i.c` @type ^`java.lang.Class` := v3 @kind object;
  #L4ed598.  return @kind void;
}
procedure `boolean` `equals`(`n1.i` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln1/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed430.  v0:= 1I;
  #L4ed432.  if v4 != v5 then goto L4ed438;
  #L4ed436.  return v0;
  #L4ed438.  v1:= 0I;
  #L4ed43a.  if v5 == 0 then goto L4ed49c;
  #L4ed43e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4ed444.  v2:= temp @kind object;
  #L4ed446.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4ed44c.  v3:= temp @kind object;
  #L4ed44e.  if v2 == v3 then goto L4ed454;
  #L4ed452.  goto L4ed49c;
  #L4ed454.  v5:= (`n1.i`) v5 @kind object;
  #L4ed458.  v2:= v4.`n1.i.a` @type ^`java.lang.Class` @kind object;
  #L4ed45c.  v3:= v5.`n1.i.a` @type ^`java.lang.Class` @kind object;
  #L4ed460.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ed466.  v2:= temp;
  #L4ed468.  if v2 != 0 then goto L4ed46e;
  #L4ed46c.  return v1;
  #L4ed46e.  v2:= v4.`n1.i.b` @type ^`java.lang.Class` @kind object;
  #L4ed472.  v3:= v5.`n1.i.b` @type ^`java.lang.Class` @kind object;
  #L4ed476.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ed47c.  v2:= temp;
  #L4ed47e.  if v2 != 0 then goto L4ed484;
  #L4ed482.  return v1;
  #L4ed484.  v2:= v4.`n1.i.c` @type ^`java.lang.Class` @kind object;
  #L4ed488.  v5:= v5.`n1.i.c` @type ^`java.lang.Class` @kind object;
  #L4ed48c.  call temp:= `c`(v2, v5) @signature `Ln1/k;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4ed492.  v5:= temp;
  #L4ed494.  if v5 != 0 then goto L4ed49a;
  #L4ed498.  return v1;
  #L4ed49a.  return v0;
  #L4ed49c.  return v1;
}
procedure `int` `hashCode`(`n1.i` v2 @kind this) @signature `Ln1/i;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed4b0.  v0:= v2.`n1.i.a` @type ^`java.lang.Class` @kind object;
  #L4ed4b4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4ed4ba.  v0:= temp;
  #L4ed4bc.  v0:= v0 * 31;
  #L4ed4c0.  v1:= v2.`n1.i.b` @type ^`java.lang.Class` @kind object;
  #L4ed4c4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4ed4ca.  v1:= temp;
  #L4ed4cc.  v0:= v0 + v1 @kind int;
  #L4ed4ce.  v0:= v0 * 31;
  #L4ed4d2.  v1:= v2.`n1.i.c` @type ^`java.lang.Class` @kind object;
  #L4ed4d6.  if v1 == 0 then goto L4ed4e4;
  #L4ed4da.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4ed4e0.  v1:= temp;
  #L4ed4e2.  goto L4ed4e6;
  #L4ed4e4.  v1:= 0I;
  #L4ed4e6.  v0:= v0 + v1 @kind int;
  #L4ed4e8.  return v0;
}
procedure `java.lang.String` `toString`(`n1.i` v2 @kind this) @signature `Ln1/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed4fc.  v0:= new `java.lang.StringBuilder`;
  #L4ed500.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ed506.  v1:= "MultiClassKey{first=" @kind object;
  #L4ed50a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed510.  v1:= v2.`n1.i.a` @type ^`java.lang.Class` @kind object;
  #L4ed514.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed51a.  v1:= ", second=" @kind object;
  #L4ed51e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed524.  v1:= v2.`n1.i.b` @type ^`java.lang.Class` @kind object;
  #L4ed528.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed52e.  v1:= 125I;
  #L4ed532.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ed538.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ed53e.  v0:= temp @kind object;
  #L4ed540.  return v0 @kind object;
}
