record `n1.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `long` `n1.c.a` @AccessFlag PRIVATE_FINAL;
  `int` `n1.c.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n1.c` v0 @kind this, `java.io.InputStream` v1 @kind object, `long` v2 ) @signature `Ln1/c;.<init>:(Ljava/io/InputStream;J)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4ecbfc.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4ecc02.  v0.`n1.c.a` @type ^`long` := v2 @kind wide;
  #L4ecc06.  return @kind void;
}
procedure `int` `g`(`n1.c` v5 @kind this, `int` v6 ) @signature `Ln1/c;.g:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ecac8.  if v6 < 0 then goto L4ecad8;
  #L4ecacc.  v0:= v5.`n1.c.b` @type ^`int`;
  #L4ecad0.  v0:= v0 + v6 @kind int;
  #L4ecad2.  v5.`n1.c.b` @type ^`int` := v0;
  #L4ecad6.  goto L4ecaf0;
  #L4ecad8.  v0:= v5.`n1.c.a` @type ^`long` @kind wide;
  #L4ecadc.  v2:= v5.`n1.c.b` @type ^`int`;
  #L4ecae0.  v2:= (`long`) v2 @kind i2l;
  #L4ecae2.  v0:= v0 - v2 @kind long;
  #L4ecae4.  v2:= 0L;
  #L4ecae8.  v4:= lcmp(v0, v2);
  #L4ecaec.  if v4 > 0 then goto L4ecaf2;
  #L4ecaf0.  return v6;
  #L4ecaf2.  v6:= new `java.io.IOException`;
  #L4ecaf6.  v0:= new `java.lang.StringBuilder`;
  #L4ecafa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ecb00.  v1:= "Failed to read all expected data, expected: " @kind object;
  #L4ecb04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ecb0a.  v1:= v5.`n1.c.a` @type ^`long` @kind wide;
  #L4ecb0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ecb14.  v1:= ", but read: " @kind object;
  #L4ecb18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ecb1e.  v1:= v5.`n1.c.b` @type ^`int`;
  #L4ecb22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ecb28.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ecb2e.  v0:= temp @kind object;
  #L4ecb30.  call `<init>`(v6, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ecb36.  throw v6;
}
procedure `java.io.InputStream` `h`(`java.io.InputStream` v1 @kind object, `long` v2 ) @signature `Ln1/c;.h:(Ljava/io/InputStream;J)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ecbe0.  v0:= new `n1.c`;
  #L4ecbe4.  call `<init>`(v0, v1, v2) @signature `Ln1/c;.<init>:(Ljava/io/InputStream;J)V` @kind direct;
  #L4ecbea.  return v0 @kind object;
}
procedure `int` `available`(`n1.c` v4 @kind this) @signature `Ln1/c;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eca7c.  @monitorenter v4
  #L4eca7e.  v0:= v4.`n1.c.a` @type ^`long` @kind wide;
  #L4eca82.  v2:= v4.`n1.c.b` @type ^`int`;
  #L4eca86.  v2:= (`long`) v2 @kind i2l;
  #L4eca88.  v0:= v0 - v2 @kind long;
  #L4eca8a.  v2:= v4.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L4eca8e.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L4eca94.  v2:= temp;
  #L4eca96.  v2:= (`long`) v2 @kind i2l;
  #L4eca98.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L4eca9e.  v0:= temp @kind wide;
  #L4ecaa0.  v1:= (`int`) v0 @kind l2i;
  #L4ecaa2.  @monitorexit v4
  #L4ecaa4.  return v1;
  #L4ecaa6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecaa8.  @monitorexit v4
  #L4ecaaa.  throw v0;
  catch `java.lang.Throwable` @[L4eca7e..L4ecaa0] goto L4ecaa6;
}
procedure `int` `read`(`n1.c` v2 @kind this) @signature `Ln1/c;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ecb48.  @monitorenter v2
  #L4ecb4a.  call temp:= `read`(v2) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L4ecb50.  v0:= temp;
  #L4ecb52.  if v0 < 0 then goto L4ecb5a;
  #L4ecb56.  v1:= 1I;
  #L4ecb58.  goto L4ecb5c;
  #L4ecb5a.  v1:= -1I;
  #L4ecb5c.  call temp:= `g`(v2, v1) @signature `Ln1/c;.g:(I)I` @kind direct;
  #L4ecb62.  @monitorexit v2
  #L4ecb64.  return v0;
  #L4ecb66.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecb68.  @monitorexit v2
  #L4ecb6a.  throw v0;
  catch `java.lang.Throwable` @[L4ecb4a..L4ecb62] goto L4ecb66;
}
procedure `int` `read`(`n1.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Ln1/c;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ecb88.  v0:= length @variable v3;
  #L4ecb8a.  v1:= 0I;
  #L4ecb8c.  call temp:= `read`(v2, v3, v1, v0) @signature `Ln1/c;.read:([BII)I` @kind virtual;
  #L4ecb92.  v3:= temp;
  #L4ecb94.  return v3;
}
procedure `int` `read`(`n1.c` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Ln1/c;.read:([BII)I` @AccessFlag PUBLIC {
    temp;

  #L4ecba8.  @monitorenter v0
  #L4ecbaa.  call temp:= `read`(v0, v1, v2, v3) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L4ecbb0.  v1:= temp;
  #L4ecbb2.  call temp:= `g`(v0, v1) @signature `Ln1/c;.g:(I)I` @kind direct;
  #L4ecbb8.  v1:= temp;
  #L4ecbba.  @monitorexit v0
  #L4ecbbc.  return v1;
  #L4ecbbe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecbc0.  @monitorexit v0
  #L4ecbc2.  throw v1;
  catch `java.lang.Throwable` @[L4ecbaa..L4ecbba] goto L4ecbbe;
}
