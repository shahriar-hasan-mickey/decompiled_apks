record `n1.h` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `n1.h.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n1.h` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Ln1/h;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ed370.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L4ed376.  v1:= -2147483648I;
  #L4ed37a.  v0.`n1.h.a` @type ^`int` := v1;
  #L4ed37e.  return @kind void;
}
procedure `long` `g`(`n1.h` v4 @kind this, `long` v5 ) @signature `Ln1/h;.g:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed300.  v0:= v4.`n1.h.a` @type ^`int`;
  #L4ed304.  if v0 != 0 then goto L4ed30e;
  #L4ed308.  v5:= -1L;
  #L4ed30c.  return v5 @kind wide;
  #L4ed30e.  v1:= -2147483648I;
  #L4ed312.  if v0 == v1 then goto L4ed322;
  #L4ed316.  v1:= (`long`) v0 @kind i2l;
  #L4ed318.  v3:= lcmp(v5, v1);
  #L4ed31c.  if v3 <= 0 then goto L4ed322;
  #L4ed320.  v5:= (`long`) v0 @kind i2l;
  #L4ed322.  return v5 @kind wide;
}
procedure `void` `h`(`n1.h` v4 @kind this, `long` v5 ) @signature `Ln1/h;.h:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed3fc.  v0:= v4.`n1.h.a` @type ^`int`;
  #L4ed400.  v1:= -2147483648I;
  #L4ed404.  if v0 == v1 then goto L4ed41e;
  #L4ed408.  v1:= -1L;
  #L4ed40c.  v3:= lcmp(v5, v1);
  #L4ed410.  if v3 == 0 then goto L4ed41e;
  #L4ed414.  v0:= (`long`) v0 @kind i2l;
  #L4ed416.  v0:= v0 - v5 @kind long;
  #L4ed418.  v5:= (`int`) v0 @kind l2i;
  #L4ed41a.  v4.`n1.h.a` @type ^`int` := v5;
  #L4ed41e.  return @kind void;
}
procedure `int` `available`(`n1.h` v2 @kind this) @signature `Ln1/h;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed254.  v0:= v2.`n1.h.a` @type ^`int`;
  #L4ed258.  v1:= -2147483648I;
  #L4ed25c.  if v0 != v1 then goto L4ed26a;
  #L4ed260.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L4ed266.  v0:= temp;
  #L4ed268.  goto L4ed27a;
  #L4ed26a.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L4ed270.  v1:= temp;
  #L4ed272.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4ed278.  v0:= temp;
  #L4ed27a.  return v0;
}
procedure `void` `mark`(`n1.h` v0 @kind this, `int` v1 ) @signature `Ln1/h;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4ed390.  @monitorenter v0
  #L4ed392.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L4ed398.  v0.`n1.h.a` @type ^`int` := v1;
  #L4ed39c.  @monitorexit v0
  #L4ed39e.  return @kind void;
  #L4ed3a0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed3a2.  @monitorexit v0
  #L4ed3a4.  throw v1;
  catch `java.lang.Throwable` @[L4ed392..L4ed39c] goto L4ed3a0;
}
procedure `int` `read`(`n1.h` v7 @kind this) @signature `Ln1/h;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ed28c.  v0:= 1L;
  #L4ed290.  call temp:= `g`(v7, v0) @signature `Ln1/h;.g:(J)J` @kind direct;
  #L4ed296.  v2:= temp @kind wide;
  #L4ed298.  v4:= -1L;
  #L4ed29c.  v6:= lcmp(v2, v4);
  #L4ed2a0.  if v6 != 0 then goto L4ed2a8;
  #L4ed2a4.  v0:= -1I;
  #L4ed2a6.  return v0;
  #L4ed2a8.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L4ed2ae.  v2:= temp;
  #L4ed2b0.  call `h`(v7, v0) @signature `Ln1/h;.h:(J)V` @kind direct;
  #L4ed2b6.  return v2;
}
procedure `int` `read`(`n1.h` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Ln1/h;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed2c8.  v0:= (`long`) v5 @kind i2l;
  #L4ed2ca.  call temp:= `g`(v2, v0) @signature `Ln1/h;.g:(J)J` @kind direct;
  #L4ed2d0.  v0:= temp @kind wide;
  #L4ed2d2.  v5:= (`int`) v0 @kind l2i;
  #L4ed2d4.  v0:= -1I;
  #L4ed2d6.  if v5 != v0 then goto L4ed2dc;
  #L4ed2da.  return v0;
  #L4ed2dc.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L4ed2e2.  v3:= temp;
  #L4ed2e4.  v4:= (`long`) v3 @kind i2l;
  #L4ed2e6.  call `h`(v2, v4) @signature `Ln1/h;.h:(J)V` @kind direct;
  #L4ed2ec.  return v3;
}
procedure `void` `reset`(`n1.h` v1 @kind this) @signature `Ln1/h;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed3c4.  @monitorenter v1
  #L4ed3c6.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L4ed3cc.  v0:= -2147483648I;
  #L4ed3d0.  v1.`n1.h.a` @type ^`int` := v0;
  #L4ed3d4.  @monitorexit v1
  #L4ed3d6.  return @kind void;
  #L4ed3d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ed3da.  @monitorexit v1
  #L4ed3dc.  throw v0;
  catch `java.lang.Throwable` @[L4ed3c6..L4ed3d4] goto L4ed3d8;
}
procedure `long` `skip`(`n1.h` v3 @kind this, `long` v4 ) @signature `Ln1/h;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ed334.  call temp:= `g`(v3, v4) @signature `Ln1/h;.g:(J)J` @kind direct;
  #L4ed33a.  v4:= temp @kind wide;
  #L4ed33c.  v0:= -1L;
  #L4ed340.  v2:= lcmp(v4, v0);
  #L4ed344.  if v2 != 0 then goto L4ed34e;
  #L4ed348.  v4:= 0L;
  #L4ed34c.  return v4 @kind wide;
  #L4ed34e.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L4ed354.  v4:= temp @kind wide;
  #L4ed356.  call `h`(v3, v4) @signature `Ln1/h;.h:(J)V` @kind direct;
  #L4ed35c.  return v4 @kind wide;
}
