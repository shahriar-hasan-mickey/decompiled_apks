record `n1.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.atomic.AtomicReference` `@@n1.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln1/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ec8b8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ec8bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ec8c2.  `@@n1.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ec8c6.  return @kind void;
}
procedure `java.nio.ByteBuffer` `a`(`java.io.File` v8 @kind object) @signature `Ln1/a;.a:(Ljava/io/File;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4ec6e4.  v0:= 0I;
  #L4ec6e6.  call temp:= `length`(v8) @signature `Ljava/io/File;.length:()J` @kind virtual;
  #L4ec6ec.  v5:= temp @kind wide;
  #L4ec6ee.  v1:= 2147483647L;
  #L4ec6f4.  v3:= lcmp(v5, v1);
  #L4ec6f8.  if v3 > 0 then goto L4ec75a;
  #L4ec6fc.  v1:= 0L;
  #L4ec700.  v3:= lcmp(v5, v1);
  #L4ec704.  if v3 == 0 then goto L4ec74a;
  #L4ec708.  v7:= new `java.io.RandomAccessFile`;
  #L4ec70c.  v1:= "r" @kind object;
  #L4ec710.  call `<init>`(v7, v8, v1) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L4ec716.  call temp:= `getChannel`(v7) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L4ec71c.  v0:= temp @kind object;
  #L4ec71e.  v2:= `@@java.nio.channels.FileChannel$MapMode.READ_ONLY` @type ^`java.nio.channels.FileChannel$MapMode` @kind object;
  #L4ec722.  v3:= 0L;
  #L4ec726.  v1:= v0 @kind object;
  #L4ec728.  call temp:= `map`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L4ec72e.  v8:= temp @kind object;
  #L4ec730.  call temp:= `load`(v8) @signature `Ljava/nio/MappedByteBuffer;.load:()Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L4ec736.  v8:= temp @kind object;
  #L4ec738.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L4ec73e.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L4ec744.  return v8 @kind object;
  #L4ec746.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec748.  goto L4ec76e;
  #L4ec74a.  v8:= new `java.io.IOException`;
  #L4ec74e.  v1:= "File unsuitable for memory mapping" @kind object;
  #L4ec752.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ec758.  throw v8;
  #L4ec75a.  v8:= new `java.io.IOException`;
  #L4ec75e.  v1:= "File too large to map into memory" @kind object;
  #L4ec762.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ec768.  throw v8;
  #L4ec76a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec76c.  v7:= v0 @kind object;
  #L4ec76e.  if v0 == 0 then goto L4ec77c;
  #L4ec772.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L4ec778.  goto L4ec77c;
  #L4ec77a.  
  #L4ec77c.  if v7 == 0 then goto L4ec786;
  #L4ec780.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L4ec786.  throw v8;
  catch `java.lang.Throwable` @[L4ec6e6..L4ec716] goto L4ec76a;
  catch `java.lang.Throwable` @[L4ec716..L4ec738] goto L4ec746;
  catch `java.io.IOException` @[L4ec738..L4ec73e] goto L4ec73e;
  catch `java.io.IOException` @[L4ec73e..L4ec744] goto L4ec744;
  catch `java.lang.Throwable` @[L4ec74a..L4ec76a] goto L4ec76a;
  catch `java.io.IOException` @[L4ec772..L4ec778] goto L4ec77a;
  catch `java.io.IOException` @[L4ec780..L4ec786] goto L4ec786;
}
procedure `java.nio.ByteBuffer` `b`(`java.io.InputStream` v4 @kind object) @signature `Ln1/a;.b:(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ec7e8.  v0:= new `java.io.ByteArrayOutputStream`;
  #L4ec7ec.  v1:= 16384I;
  #L4ec7f0.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L4ec7f6.  v2:= `@@n1.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec7fa.  v3:= 0I;
  #L4ec7fc.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ec802.  v2:= temp @kind object;
  #L4ec804.  v2:= (`byte`[]) v2 @kind object;
  #L4ec808.  if v2 != 0 then goto L4ec810;
  #L4ec80c.  v2:= new `byte`[v1];
  #L4ec810.  call temp:= `read`(v4, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L4ec816.  v1:= temp;
  #L4ec818.  v3:= 0I;
  #L4ec81a.  if v1 < 0 then goto L4ec826;
  #L4ec81e.  call `write`(v0, v2, v3, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L4ec824.  goto L4ec810;
  #L4ec826.  v4:= `@@n1.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec82a.  call `set`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4ec830.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L4ec836.  v4:= temp @kind object;
  #L4ec838.  v0:= length @variable v4;
  #L4ec83a.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L4ec840.  v0:= temp @kind object;
  #L4ec842.  call temp:= `put`(v0, v4) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4ec848.  v4:= temp @kind object;
  #L4ec84a.  call temp:= `position`(v4, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4ec850.  v4:= temp @kind object;
  #L4ec852.  v4:= (`java.nio.ByteBuffer`) v4 @kind object;
  #L4ec856.  return v4 @kind object;
}
procedure `n1.a$b` `c`(`java.nio.ByteBuffer` v3 @kind object) @signature `Ln1/a;.c:(Ljava/nio/ByteBuffer;)Ln1/a$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ec868.  call temp:= `isReadOnly`(v3) @signature `Ljava/nio/ByteBuffer;.isReadOnly:()Z` @kind virtual;
  #L4ec86e.  v0:= temp;
  #L4ec870.  if v0 != 0 then goto L4ec8a4;
  #L4ec874.  call temp:= `hasArray`(v3) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L4ec87a.  v0:= temp;
  #L4ec87c.  if v0 == 0 then goto L4ec8a4;
  #L4ec880.  v0:= new `n1.a$b`;
  #L4ec884.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4ec88a.  v1:= temp @kind object;
  #L4ec88c.  call temp:= `arrayOffset`(v3) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L4ec892.  v2:= temp;
  #L4ec894.  call temp:= `limit`(v3) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4ec89a.  v3:= temp;
  #L4ec89c.  call `<init>`(v0, v1, v2, v3) @signature `Ln1/a$b;.<init>:([BII)V` @kind direct;
  #L4ec8a2.  return v0 @kind object;
  #L4ec8a4.  v3:= 0I;
  #L4ec8a6.  return v3 @kind object;
}
procedure `byte`[] `d`(`java.nio.ByteBuffer` v2 @kind object) @signature `Ln1/a;.d:(Ljava/nio/ByteBuffer;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ec664.  call temp:= `c`(v2) @signature `Ln1/a;.c:(Ljava/nio/ByteBuffer;)Ln1/a$b;` @kind static;
  #L4ec66a.  v0:= temp @kind object;
  #L4ec66c.  if v0 == 0 then goto L4ec690;
  #L4ec670.  v1:= v0.`n1.a$b.a` @type ^`int`;
  #L4ec674.  if v1 != 0 then goto L4ec690;
  #L4ec678.  v1:= v0.`n1.a$b.b` @type ^`int`;
  #L4ec67c.  v0:= v0.`n1.a$b.c` @type ^`byte`[] @kind object;
  #L4ec680.  v0:= length @variable v0;
  #L4ec682.  if v1 != v0 then goto L4ec690;
  #L4ec686.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L4ec68c.  v2:= temp @kind object;
  #L4ec68e.  goto L4ec6b4;
  #L4ec690.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L4ec696.  v2:= temp @kind object;
  #L4ec698.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4ec69e.  v0:= temp;
  #L4ec6a0.  v0:= new `byte`[v0];
  #L4ec6a4.  v1:= 0I;
  #L4ec6a6.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4ec6ac.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4ec6b2.  v2:= v0 @kind object;
  #L4ec6b4.  return v2 @kind object;
}
procedure `void` `e`(`java.nio.ByteBuffer` v4 @kind object, `java.io.File` v5 @kind object) @signature `Ln1/a;.e:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ec8d8.  v0:= 0I;
  #L4ec8da.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4ec8e0.  v1:= 0I;
  #L4ec8e2.  v2:= new `java.io.RandomAccessFile`;
  #L4ec8e6.  v3:= "rw" @kind object;
  #L4ec8ea.  call `<init>`(v2, v5, v3) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L4ec8f0.  call temp:= `getChannel`(v2) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L4ec8f6.  v1:= temp @kind object;
  #L4ec8f8.  call temp:= `write`(v1, v4) @signature `Ljava/nio/channels/FileChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L4ec8fe.  call `force`(v1, v0) @signature `Ljava/nio/channels/FileChannel;.force:(Z)V` @kind virtual;
  #L4ec904.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L4ec90a.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L4ec910.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L4ec916.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L4ec91c.  return @kind void;
  #L4ec91e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec920.  goto L4ec926;
  #L4ec922.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ec924.  v2:= v1 @kind object;
  #L4ec926.  if v1 == 0 then goto L4ec934;
  #L4ec92a.  call `close`(v1) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L4ec930.  goto L4ec934;
  #L4ec932.  
  #L4ec934.  if v2 == 0 then goto L4ec93e;
  #L4ec938.  call `close`(v2) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L4ec93e.  throw v4;
  catch `java.lang.Throwable` @[L4ec8e2..L4ec8f0] goto L4ec922;
  catch `java.lang.Throwable` @[L4ec8f0..L4ec910] goto L4ec91e;
  catch `java.io.IOException` @[L4ec910..L4ec916] goto L4ec916;
  catch `java.io.IOException` @[L4ec916..L4ec91c] goto L4ec91c;
  catch `java.io.IOException` @[L4ec92a..L4ec930] goto L4ec932;
  catch `java.io.IOException` @[L4ec938..L4ec93e] goto L4ec93e;
}
procedure `java.io.InputStream` `f`(`java.nio.ByteBuffer` v1 @kind object) @signature `Ln1/a;.f:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ec6c8.  v0:= new `n1.a$a`;
  #L4ec6cc.  call `<init>`(v0, v1) @signature `Ln1/a$a;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L4ec6d2.  return v0 @kind object;
}
