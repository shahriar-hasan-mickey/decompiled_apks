record `com.bumptech.glide.manager.a` @kind class @AccessFlag  extends `g1.e` @kind interface {
  `java.util.Set` `com.bumptech.glide.manager.a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.manager.a.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.manager.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.manager.a` v1 @kind this) @signature `Lcom/bumptech/glide/manager/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L229650.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L229656.  v0:= new `java.util.WeakHashMap`;
  #L22965a.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L229660.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L229666.  v0:= temp @kind object;
  #L229668.  v1.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` := v0 @kind object;
  #L22966c.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.manager.a` v1 @kind this, `g1.f` v2 @kind object) @signature `Lcom/bumptech/glide/manager/a;.a:(Lg1/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2297a8.  v0:= v1.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` @kind object;
  #L2297ac.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2297b2.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.manager.a` v1 @kind this, `g1.f` v2 @kind object) @signature `Lcom/bumptech/glide/manager/a;.b:(Lg1/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229680.  v0:= v1.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` @kind object;
  #L229684.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22968a.  v0:= v1.`com.bumptech.glide.manager.a.c` @type ^`boolean` @kind boolean;
  #L22968e.  if v0 == 0 then goto L22969a;
  #L229692.  call `onDestroy`(v2) @signature `Lg1/f;.onDestroy:()V` @kind interface;
  #L229698.  goto L2296b0;
  #L22969a.  v0:= v1.`com.bumptech.glide.manager.a.b` @type ^`boolean` @kind boolean;
  #L22969e.  if v0 == 0 then goto L2296aa;
  #L2296a2.  call `onStart`(v2) @signature `Lg1/f;.onStart:()V` @kind interface;
  #L2296a8.  goto L2296b0;
  #L2296aa.  call `onStop`(v2) @signature `Lg1/f;.onStop:()V` @kind interface;
  #L2296b0.  return @kind void;
}
procedure `void` `c`(`com.bumptech.glide.manager.a` v2 @kind this) @signature `Lcom/bumptech/glide/manager/a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2296c4.  v0:= 1I;
  #L2296c6.  v2.`com.bumptech.glide.manager.a.c` @type ^`boolean` := v0 @kind boolean;
  #L2296ca.  v0:= v2.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` @kind object;
  #L2296ce.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L2296d4.  v0:= temp @kind object;
  #L2296d6.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2296dc.  v0:= temp @kind object;
  #L2296de.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2296e4.  v1:= temp;
  #L2296e6.  if v1 == 0 then goto L2296fe;
  #L2296ea.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2296f0.  v1:= temp @kind object;
  #L2296f2.  v1:= (`g1.f`) v1 @kind object;
  #L2296f6.  call `onDestroy`(v1) @signature `Lg1/f;.onDestroy:()V` @kind interface;
  #L2296fc.  goto L2296de;
  #L2296fe.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.manager.a` v2 @kind this) @signature `Lcom/bumptech/glide/manager/a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L229710.  v0:= 1I;
  #L229712.  v2.`com.bumptech.glide.manager.a.b` @type ^`boolean` := v0 @kind boolean;
  #L229716.  v0:= v2.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` @kind object;
  #L22971a.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L229720.  v0:= temp @kind object;
  #L229722.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L229728.  v0:= temp @kind object;
  #L22972a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L229730.  v1:= temp;
  #L229732.  if v1 == 0 then goto L22974a;
  #L229736.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L22973c.  v1:= temp @kind object;
  #L22973e.  v1:= (`g1.f`) v1 @kind object;
  #L229742.  call `onStart`(v1) @signature `Lg1/f;.onStart:()V` @kind interface;
  #L229748.  goto L22972a;
  #L22974a.  return @kind void;
}
procedure `void` `e`(`com.bumptech.glide.manager.a` v2 @kind this) @signature `Lcom/bumptech/glide/manager/a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L22975c.  v0:= 0I;
  #L22975e.  v2.`com.bumptech.glide.manager.a.b` @type ^`boolean` := v0 @kind boolean;
  #L229762.  v0:= v2.`com.bumptech.glide.manager.a.a` @type ^`java.util.Set` @kind object;
  #L229766.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L22976c.  v0:= temp @kind object;
  #L22976e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L229774.  v0:= temp @kind object;
  #L229776.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L22977c.  v1:= temp;
  #L22977e.  if v1 == 0 then goto L229796;
  #L229782.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L229788.  v1:= temp @kind object;
  #L22978a.  v1:= (`g1.f`) v1 @kind object;
  #L22978e.  call `onStop`(v1) @signature `Lg1/f;.onStop:()V` @kind interface;
  #L229794.  goto L229776;
  #L229796.  return @kind void;
}
