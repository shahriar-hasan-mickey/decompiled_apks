record `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy` @kind class {
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$a` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2273c0.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy;.<init>:()V` @kind direct;
  #L2273c6.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` `a`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$a` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$a;.a:(IIII)Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$SampleSizeRounding;` @AccessFlag PUBLIC {
    temp;

  #L227374.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding.b` @type ^`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` @kind object;
  #L227378.  return v1 @kind object;
}
procedure `float` `b`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$a` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$a;.b:(IIII)F` @AccessFlag PUBLIC {
    temp;

  #L22738c.  v2:= v2 / v4 @kind int;
  #L22738e.  v1:= v1 / v3 @kind int;
  #L227390.  call temp:= `min`(v2, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L227396.  v1:= temp;
  #L227398.  v2:= 1.0F;
  #L22739c.  if v1 != 0 then goto L2273a2;
  #L2273a0.  goto L2273ae;
  #L2273a2.  call temp:= `highestOneBit`(v1) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2273a8.  v1:= temp;
  #L2273aa.  v1:= (`float`) v1 @kind i2f;
  #L2273ac.  v2:= v2 / v1 @kind float;
  #L2273ae.  return v2;
}
