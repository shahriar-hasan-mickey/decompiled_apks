record `com.bumptech.glide.load.engine.i$e` @kind class @AccessFlag FINAL extends `java.lang.Iterable` @kind interface {
  `java.util.List` `com.bumptech.glide.load.engine.i$e.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.i$e` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L223d08.  v0:= new `java.util.ArrayList`;
  #L223d0c.  v1:= 2I;
  #L223d0e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L223d14.  call `<init>`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/i$e;.<init>:(Ljava/util/List;)V` @kind direct;
  #L223d1a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.i$e` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/i$e;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L223d2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L223d32.  v0.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` := v1 @kind object;
  #L223d36.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.i$d` `d`(`j1.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/i$e;.d:(Lj1/d;)Lcom/bumptech/glide/load/engine/i$d;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L223c78.  v0:= new `com.bumptech.glide.load.engine.i$d`;
  #L223c7c.  call temp:= `a`() @signature `Ln1/e;.a:()Ljava/util/concurrent/Executor;` @kind static;
  #L223c82.  v1:= temp @kind object;
  #L223c84.  call `<init>`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/i$d;.<init>:(Lj1/d;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L223c8a.  return v0 @kind object;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.i$e` v2 @kind this, `j1.d` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/i$e;.a:(Lj1/d;Ljava/util/concurrent/Executor;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L223d48.  v0:= v2.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223d4c.  v1:= new `com.bumptech.glide.load.engine.i$d`;
  #L223d50.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/load/engine/i$d;.<init>:(Lj1/d;Ljava/util/concurrent/Executor;)V` @kind direct;
  #L223d56.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L223d5c.  return @kind void;
}
procedure `boolean` `b`(`com.bumptech.glide.load.engine.i$e` v1 @kind this, `j1.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/i$e;.b:(Lj1/d;)Z` @AccessFlag  {
    temp;
    v0;

  #L223c30.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223c34.  call temp:= `d`(v2) @signature `Lcom/bumptech/glide/load/engine/i$e;.d:(Lj1/d;)Lcom/bumptech/glide/load/engine/i$d;` @kind static;
  #L223c3a.  v2:= temp @kind object;
  #L223c3c.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L223c42.  v2:= temp;
  #L223c44.  return v2;
}
procedure `com.bumptech.glide.load.engine.i$e` `c`(`com.bumptech.glide.load.engine.i$e` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.c:()Lcom/bumptech/glide/load/engine/i$e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L223c9c.  v0:= new `com.bumptech.glide.load.engine.i$e`;
  #L223ca0.  v1:= new `java.util.ArrayList`;
  #L223ca4.  v2:= v3.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223ca8.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L223cae.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/i$e;.<init>:(Ljava/util/List;)V` @kind direct;
  #L223cb4.  return v0 @kind object;
}
procedure `void` `clear`(`com.bumptech.glide.load.engine.i$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L223d70.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223d74.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L223d7a.  return @kind void;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.i$e` v1 @kind this, `j1.d` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/i$e;.e:(Lj1/d;)V` @AccessFlag  {
    temp;
    v0;

  #L223d8c.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223d90.  call temp:= `d`(v2) @signature `Lcom/bumptech/glide/load/engine/i$e;.d:(Lj1/d;)Lcom/bumptech/glide/load/engine/i$d;` @kind static;
  #L223d96.  v2:= temp @kind object;
  #L223d98.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L223d9e.  return @kind void;
}
procedure `boolean` `isEmpty`(`com.bumptech.glide.load.engine.i$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.isEmpty:()Z` @AccessFlag  {
    temp;
    v0;

  #L223c58.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223c5c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L223c62.  v0:= temp;
  #L223c64.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.bumptech.glide.load.engine.i$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L223ce8.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223cec.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L223cf2.  v0:= temp @kind object;
  #L223cf4.  return v0 @kind object;
}
procedure `int` `size`(`com.bumptech.glide.load.engine.i$e` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/i$e;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L223cc8.  v0:= v1.`com.bumptech.glide.load.engine.i$e.a` @type ^`java.util.List` @kind object;
  #L223ccc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L223cd2.  v0:= temp;
  #L223cd4.  return v0;
}
