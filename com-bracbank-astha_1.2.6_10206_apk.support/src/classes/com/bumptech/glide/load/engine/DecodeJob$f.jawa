record `com.bumptech.glide.load.engine.DecodeJob$f` @kind class @AccessFlag  {
  `boolean` `com.bumptech.glide.load.engine.DecodeJob$f.a` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.DecodeJob$f.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.DecodeJob$f.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.DecodeJob$f` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L22244c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L222452.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.DecodeJob$f` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.a:(Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L222370.  v0:= v1.`com.bumptech.glide.load.engine.DecodeJob$f.c` @type ^`boolean` @kind boolean;
  #L222374.  if v0 != 0 then goto L222384;
  #L222378.  if v2 != 0 then goto L222384;
  #L22237c.  v2:= v1.`com.bumptech.glide.load.engine.DecodeJob$f.b` @type ^`boolean` @kind boolean;
  #L222380.  if v2 == 0 then goto L222390;
  #L222384.  v2:= v1.`com.bumptech.glide.load.engine.DecodeJob$f.a` @type ^`boolean` @kind boolean;
  #L222388.  if v2 == 0 then goto L222390;
  #L22238c.  v2:= 1I;
  #L22238e.  goto L222392;
  #L222390.  v2:= 0I;
  #L222392.  return v2;
}
procedure `boolean` `b`(`com.bumptech.glide.load.engine.DecodeJob$f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.b:()Z` @AccessFlag  {
    temp;
    v0;

  #L2223a4.  @monitorenter v1
  #L2223a6.  v0:= 1I;
  #L2223a8.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.b` @type ^`boolean` := v0 @kind boolean;
  #L2223ac.  v0:= 0I;
  #L2223ae.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.a:(Z)Z` @kind direct;
  #L2223b4.  v0:= temp;
  #L2223b6.  @monitorexit v1
  #L2223b8.  return v0;
  #L2223ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2223bc.  @monitorexit v1
  #L2223be.  throw v0;
  catch `java.lang.Throwable` @[L2223a8..L2223b6] goto L2223ba;
}
procedure `boolean` `c`(`com.bumptech.glide.load.engine.DecodeJob$f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.c:()Z` @AccessFlag  {
    temp;
    v0;

  #L2223dc.  @monitorenter v1
  #L2223de.  v0:= 1I;
  #L2223e0.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.c` @type ^`boolean` := v0 @kind boolean;
  #L2223e4.  v0:= 0I;
  #L2223e6.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.a:(Z)Z` @kind direct;
  #L2223ec.  v0:= temp;
  #L2223ee.  @monitorexit v1
  #L2223f0.  return v0;
  #L2223f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2223f4.  @monitorexit v1
  #L2223f6.  throw v0;
  catch `java.lang.Throwable` @[L2223e0..L2223ee] goto L2223f2;
}
procedure `boolean` `d`(`com.bumptech.glide.load.engine.DecodeJob$f` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.d:(Z)Z` @AccessFlag  {
    temp;
    v0;

  #L222414.  @monitorenter v1
  #L222416.  v0:= 1I;
  #L222418.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.a` @type ^`boolean` := v0 @kind boolean;
  #L22241c.  call temp:= `a`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.a:(Z)Z` @kind direct;
  #L222422.  v2:= temp;
  #L222424.  @monitorexit v1
  #L222426.  return v2;
  #L222428.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22242a.  @monitorexit v1
  #L22242c.  throw v2;
  catch `java.lang.Throwable` @[L222418..L222424] goto L222428;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.DecodeJob$f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$f;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L222464.  @monitorenter v1
  #L222466.  v0:= 0I;
  #L222468.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.b` @type ^`boolean` := v0 @kind boolean;
  #L22246c.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.a` @type ^`boolean` := v0 @kind boolean;
  #L222470.  v1.`com.bumptech.glide.load.engine.DecodeJob$f.c` @type ^`boolean` := v0 @kind boolean;
  #L222474.  @monitorexit v1
  #L222476.  return @kind void;
  #L222478.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22247a.  @monitorexit v1
  #L22247c.  throw v0;
  catch `java.lang.Throwable` @[L222468..L222474] goto L222478;
}
