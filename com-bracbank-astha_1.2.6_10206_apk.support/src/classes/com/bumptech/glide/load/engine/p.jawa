record `com.bumptech.glide.load.engine.p` @kind class @AccessFlag FINAL extends `t0.c` @kind interface, `o1.a$f` @kind interface {
  `o1.c` `com.bumptech.glide.load.engine.p.a` @AccessFlag PRIVATE_FINAL;
  `t0.c` `com.bumptech.glide.load.engine.p.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.p.c` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.p.d` @AccessFlag PRIVATE;
}
global `x.e` `@@com.bumptech.glide.load.engine.p.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L225b64.  v0:= new `com.bumptech.glide.load.engine.p$a`;
  #L225b68.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/p$a;.<init>:()V` @kind direct;
  #L225b6e.  v1:= 20I;
  #L225b72.  call temp:= `d`(v1, v0) @signature `Lo1/a;.d:(ILo1/a$d;)Lx/e;` @kind static;
  #L225b78.  v0:= temp @kind object;
  #L225b7a.  `@@com.bumptech.glide.load.engine.p.e` @type ^`x.e` := v0 @kind object;
  #L225b7e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L225b90.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L225b96.  call temp:= `a`() @signature `Lo1/c;.a:()Lo1/c;` @kind static;
  #L225b9c.  v0:= temp @kind object;
  #L225b9e.  v1.`com.bumptech.glide.load.engine.p.a` @type ^`o1.c` := v0 @kind object;
  #L225ba2.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.p` v1 @kind this, `t0.c` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/p;.a:(Lt0/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L225bb4.  v0:= 0I;
  #L225bb6.  v1.`com.bumptech.glide.load.engine.p.d` @type ^`boolean` := v0 @kind boolean;
  #L225bba.  v0:= 1I;
  #L225bbc.  v1.`com.bumptech.glide.load.engine.p.c` @type ^`boolean` := v0 @kind boolean;
  #L225bc0.  v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` := v2 @kind object;
  #L225bc4.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.p` `d`(`t0.c` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/p;.d:(Lt0/c;)Lcom/bumptech/glide/load/engine/p;` @AccessFlag STATIC {
    temp;
    v0;

  #L225ab8.  v0:= `@@com.bumptech.glide.load.engine.p.e` @type ^`x.e` @kind object;
  #L225abc.  call temp:= `b`(v0) @signature `Lx/e;.b:()Ljava/lang/Object;` @kind interface;
  #L225ac2.  v0:= temp @kind object;
  #L225ac4.  v0:= (`com.bumptech.glide.load.engine.p`) v0 @kind object;
  #L225ac8.  call temp:= `d`(v0) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L225ace.  v0:= temp @kind object;
  #L225ad0.  v0:= (`com.bumptech.glide.load.engine.p`) v0 @kind object;
  #L225ad4.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/p;.a:(Lt0/c;)V` @kind direct;
  #L225ada.  return v0 @kind object;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L225c28.  v0:= 0I;
  #L225c2a.  v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` := v0 @kind object;
  #L225c2e.  v0:= `@@com.bumptech.glide.load.engine.p.e` @type ^`x.e` @kind object;
  #L225c32.  call temp:= `a`(v0, v1) @signature `Lx/e;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L225c38.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L225bd8.  @monitorenter v1
  #L225bda.  v0:= v1.`com.bumptech.glide.load.engine.p.a` @type ^`o1.c` @kind object;
  #L225bde.  call `c`(v0) @signature `Lo1/c;.c:()V` @kind virtual;
  #L225be4.  v0:= 1I;
  #L225be6.  v1.`com.bumptech.glide.load.engine.p.d` @type ^`boolean` := v0 @kind boolean;
  #L225bea.  v0:= v1.`com.bumptech.glide.load.engine.p.c` @type ^`boolean` @kind boolean;
  #L225bee.  if v0 != 0 then goto L225c02;
  #L225bf2.  v0:= v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` @kind object;
  #L225bf6.  call `b`(v0) @signature `Lt0/c;.b:()V` @kind interface;
  #L225bfc.  call `f`(v1) @signature `Lcom/bumptech/glide/load/engine/p;.f:()V` @kind direct;
  #L225c02.  @monitorexit v1
  #L225c04.  return @kind void;
  #L225c06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L225c08.  @monitorexit v1
  #L225c0a.  throw v0;
  catch `java.lang.Throwable` @[L225bda..L225c02] goto L225c06;
}
procedure `java.lang.Class` `c`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.c:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L225b0c.  v0:= v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` @kind object;
  #L225b10.  call temp:= `c`(v0) @signature `Lt0/c;.c:()Ljava/lang/Class;` @kind interface;
  #L225b16.  v0:= temp @kind object;
  #L225b18.  return v0 @kind object;
}
procedure `o1.c` `e`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.e:()Lo1/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L225b4c.  v0:= v1.`com.bumptech.glide.load.engine.p.a` @type ^`o1.c` @kind object;
  #L225b50.  return v0 @kind object;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.p` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L225c4c.  @monitorenter v2
  #L225c4e.  v0:= v2.`com.bumptech.glide.load.engine.p.a` @type ^`o1.c` @kind object;
  #L225c52.  call `c`(v0) @signature `Lo1/c;.c:()V` @kind virtual;
  #L225c58.  v0:= v2.`com.bumptech.glide.load.engine.p.c` @type ^`boolean` @kind boolean;
  #L225c5c.  if v0 == 0 then goto L225c78;
  #L225c60.  v0:= 0I;
  #L225c62.  v2.`com.bumptech.glide.load.engine.p.c` @type ^`boolean` := v0 @kind boolean;
  #L225c66.  v0:= v2.`com.bumptech.glide.load.engine.p.d` @type ^`boolean` @kind boolean;
  #L225c6a.  if v0 == 0 then goto L225c74;
  #L225c6e.  call `b`(v2) @signature `Lcom/bumptech/glide/load/engine/p;.b:()V` @kind virtual;
  #L225c74.  @monitorexit v2
  #L225c76.  return @kind void;
  #L225c78.  v0:= new `java.lang.IllegalStateException`;
  #L225c7c.  v1:= "Already unlocked" @kind object;
  #L225c80.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L225c86.  throw v0;
  #L225c88.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L225c8a.  @monitorexit v2
  #L225c8c.  throw v0;
  catch `java.lang.Throwable` @[L225c4e..L225c74] goto L225c88;
  catch `java.lang.Throwable` @[L225c78..L225c88] goto L225c88;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L225b2c.  v0:= v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` @kind object;
  #L225b30.  call temp:= `get`(v0) @signature `Lt0/c;.get:()Ljava/lang/Object;` @kind interface;
  #L225b36.  v0:= temp @kind object;
  #L225b38.  return v0 @kind object;
}
procedure `int` `getSize`(`com.bumptech.glide.load.engine.p` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L225aec.  v0:= v1.`com.bumptech.glide.load.engine.p.b` @type ^`t0.c` @kind object;
  #L225af0.  call temp:= `getSize`(v0) @signature `Lt0/c;.getSize:()I` @kind interface;
  #L225af6.  v0:= temp;
  #L225af8.  return v0;
}
