record `com.bumptech.glide.load.engine.k` @kind class @AccessFlag  extends `q0.b` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.k.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.k.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.k.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.k.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.k.f` @AccessFlag PRIVATE_FINAL;
  `q0.b` `com.bumptech.glide.load.engine.k.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.k.h` @AccessFlag PRIVATE_FINAL;
  `q0.d` `com.bumptech.glide.load.engine.k.i` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.k.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.k` v0 @kind this, `java.lang.Object` v1 @kind object, `q0.b` v2 @kind object, `int` v3 , `int` v4 , `java.util.Map` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `q0.d` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/k;.<init>:(Ljava/lang/Object;Lq0/b;IILjava/util/Map;Ljava/lang/Class;Ljava/lang/Class;Lq0/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L224804.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22480a.  call temp:= `d`(v1) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L224810.  v1:= temp @kind object;
  #L224812.  v0.`com.bumptech.glide.load.engine.k.b` @type ^`java.lang.Object` := v1 @kind object;
  #L224816.  v1:= "Signature must not be null" @kind object;
  #L22481a.  call temp:= `e`(v2, v1) @signature `Ln1/j;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L224820.  v1:= temp @kind object;
  #L224822.  v1:= (`q0.b`) v1 @kind object;
  #L224826.  v0.`com.bumptech.glide.load.engine.k.g` @type ^`q0.b` := v1 @kind object;
  #L22482a.  v0.`com.bumptech.glide.load.engine.k.c` @type ^`int` := v3;
  #L22482e.  v0.`com.bumptech.glide.load.engine.k.d` @type ^`int` := v4;
  #L224832.  call temp:= `d`(v5) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L224838.  v1:= temp @kind object;
  #L22483a.  v1:= (`java.util.Map`) v1 @kind object;
  #L22483e.  v0.`com.bumptech.glide.load.engine.k.h` @type ^`java.util.Map` := v1 @kind object;
  #L224842.  v1:= "Resource class must not be null" @kind object;
  #L224846.  call temp:= `e`(v6, v1) @signature `Ln1/j;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L22484c.  v1:= temp @kind object;
  #L22484e.  v1:= (`java.lang.Class`) v1 @kind object;
  #L224852.  v0.`com.bumptech.glide.load.engine.k.e` @type ^`java.lang.Class` := v1 @kind object;
  #L224856.  v1:= "Transcode class must not be null" @kind object;
  #L22485a.  call temp:= `e`(v7, v1) @signature `Ln1/j;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L224860.  v1:= temp @kind object;
  #L224862.  v1:= (`java.lang.Class`) v1 @kind object;
  #L224866.  v0.`com.bumptech.glide.load.engine.k.f` @type ^`java.lang.Class` := v1 @kind object;
  #L22486a.  call temp:= `d`(v8) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L224870.  v1:= temp @kind object;
  #L224872.  v1:= (`q0.d`) v1 @kind object;
  #L224876.  v0.`com.bumptech.glide.load.engine.k.i` @type ^`q0.d` := v1 @kind object;
  #L22487a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.k` v0 @kind this, `java.security.MessageDigest` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/k;.a:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;

  #L22488c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L224890.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L224896.  throw v1;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.k` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/k;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2245bc.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.k` @kind boolean;
  #L2245c0.  v1:= 0I;
  #L2245c2.  if v0 == 0 then goto L22465c;
  #L2245c6.  v4:= (`com.bumptech.glide.load.engine.k`) v4 @kind object;
  #L2245ca.  v0:= v3.`com.bumptech.glide.load.engine.k.b` @type ^`java.lang.Object` @kind object;
  #L2245ce.  v2:= v4.`com.bumptech.glide.load.engine.k.b` @type ^`java.lang.Object` @kind object;
  #L2245d2.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2245d8.  v0:= temp;
  #L2245da.  if v0 == 0 then goto L22465c;
  #L2245de.  v0:= v3.`com.bumptech.glide.load.engine.k.g` @type ^`q0.b` @kind object;
  #L2245e2.  v2:= v4.`com.bumptech.glide.load.engine.k.g` @type ^`q0.b` @kind object;
  #L2245e6.  call temp:= `equals`(v0, v2) @signature `Lq0/b;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2245ec.  v0:= temp;
  #L2245ee.  if v0 == 0 then goto L22465c;
  #L2245f2.  v0:= v3.`com.bumptech.glide.load.engine.k.d` @type ^`int`;
  #L2245f6.  v2:= v4.`com.bumptech.glide.load.engine.k.d` @type ^`int`;
  #L2245fa.  if v0 != v2 then goto L22465c;
  #L2245fe.  v0:= v3.`com.bumptech.glide.load.engine.k.c` @type ^`int`;
  #L224602.  v2:= v4.`com.bumptech.glide.load.engine.k.c` @type ^`int`;
  #L224606.  if v0 != v2 then goto L22465c;
  #L22460a.  v0:= v3.`com.bumptech.glide.load.engine.k.h` @type ^`java.util.Map` @kind object;
  #L22460e.  v2:= v4.`com.bumptech.glide.load.engine.k.h` @type ^`java.util.Map` @kind object;
  #L224612.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L224618.  v0:= temp;
  #L22461a.  if v0 == 0 then goto L22465c;
  #L22461e.  v0:= v3.`com.bumptech.glide.load.engine.k.e` @type ^`java.lang.Class` @kind object;
  #L224622.  v2:= v4.`com.bumptech.glide.load.engine.k.e` @type ^`java.lang.Class` @kind object;
  #L224626.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22462c.  v0:= temp;
  #L22462e.  if v0 == 0 then goto L22465c;
  #L224632.  v0:= v3.`com.bumptech.glide.load.engine.k.f` @type ^`java.lang.Class` @kind object;
  #L224636.  v2:= v4.`com.bumptech.glide.load.engine.k.f` @type ^`java.lang.Class` @kind object;
  #L22463a.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L224640.  v0:= temp;
  #L224642.  if v0 == 0 then goto L22465c;
  #L224646.  v0:= v3.`com.bumptech.glide.load.engine.k.i` @type ^`q0.d` @kind object;
  #L22464a.  v4:= v4.`com.bumptech.glide.load.engine.k.i` @type ^`q0.d` @kind object;
  #L22464e.  call temp:= `equals`(v0, v4) @signature `Lq0/d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L224654.  v4:= temp;
  #L224656.  if v4 == 0 then goto L22465c;
  #L22465a.  v1:= 1I;
  #L22465c.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/k;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L224670.  v0:= v2.`com.bumptech.glide.load.engine.k.j` @type ^`int`;
  #L224674.  if v0 != 0 then goto L22470a;
  #L224678.  v0:= v2.`com.bumptech.glide.load.engine.k.b` @type ^`java.lang.Object` @kind object;
  #L22467c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L224682.  v0:= temp;
  #L224684.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L224688.  v0:= v0 * 31;
  #L22468c.  v1:= v2.`com.bumptech.glide.load.engine.k.g` @type ^`q0.b` @kind object;
  #L224690.  call temp:= `hashCode`(v1) @signature `Lq0/b;.hashCode:()I` @kind interface;
  #L224696.  v1:= temp;
  #L224698.  v0:= v0 + v1 @kind int;
  #L22469a.  v0:= v0 * 31;
  #L22469e.  v1:= v2.`com.bumptech.glide.load.engine.k.c` @type ^`int`;
  #L2246a2.  v0:= v0 + v1 @kind int;
  #L2246a4.  v0:= v0 * 31;
  #L2246a8.  v1:= v2.`com.bumptech.glide.load.engine.k.d` @type ^`int`;
  #L2246ac.  v0:= v0 + v1 @kind int;
  #L2246ae.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L2246b2.  v0:= v0 * 31;
  #L2246b6.  v1:= v2.`com.bumptech.glide.load.engine.k.h` @type ^`java.util.Map` @kind object;
  #L2246ba.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L2246c0.  v1:= temp;
  #L2246c2.  v0:= v0 + v1 @kind int;
  #L2246c4.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L2246c8.  v0:= v0 * 31;
  #L2246cc.  v1:= v2.`com.bumptech.glide.load.engine.k.e` @type ^`java.lang.Class` @kind object;
  #L2246d0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2246d6.  v1:= temp;
  #L2246d8.  v0:= v0 + v1 @kind int;
  #L2246da.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L2246de.  v0:= v0 * 31;
  #L2246e2.  v1:= v2.`com.bumptech.glide.load.engine.k.f` @type ^`java.lang.Class` @kind object;
  #L2246e6.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2246ec.  v1:= temp;
  #L2246ee.  v0:= v0 + v1 @kind int;
  #L2246f0.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L2246f4.  v0:= v0 * 31;
  #L2246f8.  v1:= v2.`com.bumptech.glide.load.engine.k.i` @type ^`q0.d` @kind object;
  #L2246fc.  call temp:= `hashCode`(v1) @signature `Lq0/d;.hashCode:()I` @kind virtual;
  #L224702.  v1:= temp;
  #L224704.  v0:= v0 + v1 @kind int;
  #L224706.  v2.`com.bumptech.glide.load.engine.k.j` @type ^`int` := v0;
  #L22470a.  v0:= v2.`com.bumptech.glide.load.engine.k.j` @type ^`int`;
  #L22470e.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.k` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L224720.  v0:= new `java.lang.StringBuilder`;
  #L224724.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22472a.  v1:= "EngineKey{model=" @kind object;
  #L22472e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224734.  v1:= v2.`com.bumptech.glide.load.engine.k.b` @type ^`java.lang.Object` @kind object;
  #L224738.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22473e.  v1:= ", width=" @kind object;
  #L224742.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224748.  v1:= v2.`com.bumptech.glide.load.engine.k.c` @type ^`int`;
  #L22474c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L224752.  v1:= ", height=" @kind object;
  #L224756.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22475c.  v1:= v2.`com.bumptech.glide.load.engine.k.d` @type ^`int`;
  #L224760.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L224766.  v1:= ", resourceClass=" @kind object;
  #L22476a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224770.  v1:= v2.`com.bumptech.glide.load.engine.k.e` @type ^`java.lang.Class` @kind object;
  #L224774.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22477a.  v1:= ", transcodeClass=" @kind object;
  #L22477e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224784.  v1:= v2.`com.bumptech.glide.load.engine.k.f` @type ^`java.lang.Class` @kind object;
  #L224788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22478e.  v1:= ", signature=" @kind object;
  #L224792.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224798.  v1:= v2.`com.bumptech.glide.load.engine.k.g` @type ^`q0.b` @kind object;
  #L22479c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247a2.  v1:= ", hashCode=" @kind object;
  #L2247a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247ac.  v1:= v2.`com.bumptech.glide.load.engine.k.j` @type ^`int`;
  #L2247b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247b6.  v1:= ", transformations=" @kind object;
  #L2247ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247c0.  v1:= v2.`com.bumptech.glide.load.engine.k.h` @type ^`java.util.Map` @kind object;
  #L2247c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247ca.  v1:= ", options=" @kind object;
  #L2247ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247d4.  v1:= v2.`com.bumptech.glide.load.engine.k.i` @type ^`q0.d` @kind object;
  #L2247d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247de.  v1:= 125I;
  #L2247e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2247e8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2247ee.  v0:= temp @kind object;
  #L2247f0.  return v0 @kind object;
}
