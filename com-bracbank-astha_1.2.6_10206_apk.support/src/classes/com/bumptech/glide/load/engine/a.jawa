record `com.bumptech.glide.load.engine.a` @kind class @AccessFlag FINAL {
  `boolean` `com.bumptech.glide.load.engine.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `com.bumptech.glide.load.engine.a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.a.c` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.bumptech.glide.load.engine.a.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.m$a` `com.bumptech.glide.load.engine.a.e` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.a.f` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.a$c` `com.bumptech.glide.load.engine.a.g` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2214f8.  v0:= new `com.bumptech.glide.load.engine.a$a`;
  #L2214fc.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a$a;.<init>:()V` @kind direct;
  #L221502.  call temp:= `newSingleThreadExecutor`(v0) @signature `Ljava/util/concurrent/Executors;.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L221508.  v0:= temp @kind object;
  #L22150a.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @kind direct;
  #L221510.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 , `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L221524.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22152a.  v0:= new `java.util.HashMap`;
  #L22152e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L221534.  v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` := v0 @kind object;
  #L221538.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L22153c.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L221542.  v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L221546.  v1.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` := v2 @kind boolean;
  #L22154a.  v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L22154e.  v2:= new `com.bumptech.glide.load.engine.a$b`;
  #L221552.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/a$b;.<init>:(Lcom/bumptech/glide/load/engine/a;)V` @kind direct;
  #L221558.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L22155e.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v3 @kind this, `q0.b` v4 @kind object, `com.bumptech.glide.load.engine.m` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lq0/b;Lcom/bumptech/glide/load/engine/m;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L221570.  @monitorenter v3
  #L221572.  v0:= new `com.bumptech.glide.load.engine.a$d`;
  #L221576.  v1:= v3.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L22157a.  v2:= v3.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` @kind boolean;
  #L22157e.  call `<init>`(v0, v4, v5, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lq0/b;Lcom/bumptech/glide/load/engine/m;Ljava/lang/ref/ReferenceQueue;Z)V` @kind direct;
  #L221584.  v5:= v3.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L221588.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22158e.  v4:= temp @kind object;
  #L221590.  v4:= (`com.bumptech.glide.load.engine.a$d`) v4 @kind object;
  #L221594.  if v4 == 0 then goto L22159e;
  #L221598.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L22159e.  @monitorexit v3
  #L2215a0.  return @kind void;
  #L2215a2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2215a4.  @monitorexit v3
  #L2215a6.  throw v4;
  catch `java.lang.Throwable` @[L221572..L22159e] goto L2215a2;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L2215c4.  v0:= v1.`com.bumptech.glide.load.engine.a.f` @type ^`boolean` @kind boolean;
  #L2215c8.  if v0 != 0 then goto L221602;
  #L2215cc.  v0:= v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L2215d0.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L2215d6.  v0:= temp @kind object;
  #L2215d8.  v0:= (`com.bumptech.glide.load.engine.a$d`) v0 @kind object;
  #L2215dc.  call `c`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L2215e2.  v0:= v1.`com.bumptech.glide.load.engine.a.g` @type ^`com.bumptech.glide.load.engine.a$c` @kind object;
  #L2215e6.  if v0 == 0 then goto L2215c4;
  #L2215ea.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/a$c;.a:()V` @kind interface;
  #L2215f0.  goto L2215c4;
  #L2215f2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2215f8.  v0:= temp @kind object;
  #L2215fa.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L221600.  goto L2215c4;
  #L221602.  return @kind void;
  catch `java.lang.InterruptedException` @[L2215cc..L2215f0] goto L2215f2;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.a` v7 @kind this, `com.bumptech.glide.load.engine.a$d` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L221624.  @monitorenter v7
  #L221626.  v0:= v7.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L22162a.  v1:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`q0.b` @kind object;
  #L22162e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L221634.  v0:= v8.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` @kind boolean;
  #L221638.  if v0 == 0 then goto L221670;
  #L22163c.  v2:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`t0.c` @kind object;
  #L221640.  if v2 != 0 then goto L221646;
  #L221644.  goto L221670;
  #L221646.  @monitorexit v7
  #L221648.  v0:= new `com.bumptech.glide.load.engine.m`;
  #L22164c.  v3:= 1I;
  #L22164e.  v4:= 0I;
  #L221650.  v5:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`q0.b` @kind object;
  #L221654.  v6:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.m$a` @kind object;
  #L221658.  v1:= v0 @kind object;
  #L22165a.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lcom/bumptech/glide/load/engine/m;.<init>:(Lt0/c;ZZLq0/b;Lcom/bumptech/glide/load/engine/m$a;)V` @kind direct;
  #L221660.  v1:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.m$a` @kind object;
  #L221664.  v8:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`q0.b` @kind object;
  #L221668.  call `b`(v1, v8, v0) @signature `Lcom/bumptech/glide/load/engine/m$a;.b:(Lq0/b;Lcom/bumptech/glide/load/engine/m;)V` @kind interface;
  #L22166e.  return @kind void;
  #L221670.  @monitorexit v7
  #L221672.  return @kind void;
  #L221674.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L221676.  @monitorexit v7
  #L221678.  throw v8;
  catch `java.lang.Throwable` @[L221626..L221648] goto L221674;
  catch `java.lang.Throwable` @[L221670..L221678] goto L221674;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.a` v1 @kind this, `q0.b` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.d:(Lq0/b;)V` @AccessFlag  {
    temp;
    v0;

  #L2216a0.  @monitorenter v1
  #L2216a2.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L2216a6.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2216ac.  v2:= temp @kind object;
  #L2216ae.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L2216b2.  if v2 == 0 then goto L2216bc;
  #L2216b6.  call `a`(v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L2216bc.  @monitorexit v1
  #L2216be.  return @kind void;
  #L2216c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2216c2.  @monitorexit v1
  #L2216c4.  throw v2;
  catch `java.lang.Throwable` @[L2216a2..L2216bc] goto L2216c0;
}
procedure `com.bumptech.glide.load.engine.m` `e`(`com.bumptech.glide.load.engine.a` v1 @kind this, `q0.b` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.e:(Lq0/b;)Lcom/bumptech/glide/load/engine/m;` @AccessFlag  {
    temp;
    v0;

  #L221498.  @monitorenter v1
  #L22149a.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L22149e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2214a4.  v2:= temp @kind object;
  #L2214a6.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L2214aa.  if v2 != 0 then goto L2214b4;
  #L2214ae.  v2:= 0I;
  #L2214b0.  @monitorexit v1
  #L2214b2.  return v2 @kind object;
  #L2214b4.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2214ba.  v0:= temp @kind object;
  #L2214bc.  v0:= (`com.bumptech.glide.load.engine.m`) v0 @kind object;
  #L2214c0.  if v0 != 0 then goto L2214ca;
  #L2214c4.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L2214ca.  @monitorexit v1
  #L2214cc.  return v0 @kind object;
  #L2214ce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2214d0.  @monitorexit v1
  #L2214d2.  throw v2;
  catch `java.lang.Throwable` @[L22149a..L2214aa] goto L2214ce;
  catch `java.lang.Throwable` @[L2214b4..L2214ca] goto L2214ce;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.engine.m$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.f:(Lcom/bumptech/glide/load/engine/m$a;)V` @AccessFlag  {
    temp;
    v0;

  #L2216e4.  @monitorenter v2
  #L2216e6.  @monitorenter v1
  #L2216e8.  v1.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.m$a` := v2 @kind object;
  #L2216ec.  @monitorexit v1
  #L2216ee.  @monitorexit v2
  #L2216f0.  return @kind void;
  #L2216f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2216f4.  @monitorexit v1
  #L2216f6.  throw v0;
  #L2216f8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2216fa.  @monitorexit v2
  #L2216fc.  throw v0;
  catch `java.lang.Throwable` @[L2216e6..L2216e8] goto L2216f8;
  catch `java.lang.Throwable` @[L2216e8..L2216ee] goto L2216f2;
  catch `java.lang.Throwable` @[L2216ee..L2216f0] goto L2216f8;
  catch `java.lang.Throwable` @[L2216f4..L2216f6] goto L2216f2;
  catch `java.lang.Throwable` @[L2216f6..L2216fc] goto L2216f8;
}
