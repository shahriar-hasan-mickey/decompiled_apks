record `com.bumptech.glide.load.engine.f` @kind class @AccessFlag FINAL {
  `java.util.List` `com.bumptech.glide.load.engine.f.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.f.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.d` `com.bumptech.glide.load.engine.f.c` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.engine.f.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.f.e` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.f.f` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.f.g` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.DecodeJob$e` `com.bumptech.glide.load.engine.f.h` @AccessFlag PRIVATE;
  `q0.d` `com.bumptech.glide.load.engine.f.i` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.engine.f.j` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.load.engine.f.k` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.f.l` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.f.m` @AccessFlag PRIVATE;
  `q0.b` `com.bumptech.glide.load.engine.f.n` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `com.bumptech.glide.load.engine.f.o` @AccessFlag PRIVATE;
  `t0.a` `com.bumptech.glide.load.engine.f.p` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.f.q` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.f.r` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L221fe0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L221fe6.  v0:= new `java.util.ArrayList`;
  #L221fea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L221ff0.  v1.`com.bumptech.glide.load.engine.f.a` @type ^`java.util.List` := v0 @kind object;
  #L221ff4.  v0:= new `java.util.ArrayList`;
  #L221ff8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L221ffe.  v1.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` := v0 @kind object;
  #L222002.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.f` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L222014.  v0:= 0I;
  #L222016.  v2.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` := v0 @kind object;
  #L22201a.  v2.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` := v0 @kind object;
  #L22201e.  v2.`com.bumptech.glide.load.engine.f.n` @type ^`q0.b` := v0 @kind object;
  #L222022.  v2.`com.bumptech.glide.load.engine.f.g` @type ^`java.lang.Class` := v0 @kind object;
  #L222026.  v2.`com.bumptech.glide.load.engine.f.k` @type ^`java.lang.Class` := v0 @kind object;
  #L22202a.  v2.`com.bumptech.glide.load.engine.f.i` @type ^`q0.d` := v0 @kind object;
  #L22202e.  v2.`com.bumptech.glide.load.engine.f.o` @type ^`com.bumptech.glide.Priority` := v0 @kind object;
  #L222032.  v2.`com.bumptech.glide.load.engine.f.j` @type ^`java.util.Map` := v0 @kind object;
  #L222036.  v2.`com.bumptech.glide.load.engine.f.p` @type ^`t0.a` := v0 @kind object;
  #L22203a.  v0:= v2.`com.bumptech.glide.load.engine.f.a` @type ^`java.util.List` @kind object;
  #L22203e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L222044.  v0:= 0I;
  #L222046.  v2.`com.bumptech.glide.load.engine.f.l` @type ^`boolean` := v0 @kind boolean;
  #L22204a.  v1:= v2.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L22204e.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L222054.  v2.`com.bumptech.glide.load.engine.f.m` @type ^`boolean` := v0 @kind boolean;
  #L222058.  return @kind void;
}
procedure `u0.b` `b`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.b:()Lu0/b;` @AccessFlag  {
    temp;
    v0;

  #L221fa0.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221fa4.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/d;.a:()Lu0/b;` @kind virtual;
  #L221faa.  v0:= temp @kind object;
  #L221fac.  return v0 @kind object;
}
procedure `java.util.List` `c`(`com.bumptech.glide.load.engine.f` v8 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.c:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L221c7c.  v0:= v8.`com.bumptech.glide.load.engine.f.m` @type ^`boolean` @kind boolean;
  #L221c80.  if v0 != 0 then goto L221d2a;
  #L221c84.  v0:= 1I;
  #L221c86.  v8.`com.bumptech.glide.load.engine.f.m` @type ^`boolean` := v0 @kind boolean;
  #L221c8a.  v0:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221c8e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L221c94.  call temp:= `g`(v8) @signature `Lcom/bumptech/glide/load/engine/f;.g:()Ljava/util/List;` @kind virtual;
  #L221c9a.  v0:= temp @kind object;
  #L221c9c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L221ca2.  v1:= temp;
  #L221ca4.  v2:= 0I;
  #L221ca6.  v3:= 0I;
  #L221ca8.  if v3 >= v1 then goto L221d2a;
  #L221cac.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221cb2.  v4:= temp @kind object;
  #L221cb4.  v4:= (`x0.n$a`) v4 @kind object;
  #L221cb8.  v5:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221cbc.  v6:= v4.`x0.n$a.a` @type ^`q0.b` @kind object;
  #L221cc0.  call temp:= `contains`(v5, v6) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L221cc6.  v5:= temp;
  #L221cc8.  if v5 != 0 then goto L221cda;
  #L221ccc.  v5:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221cd0.  v6:= v4.`x0.n$a.a` @type ^`q0.b` @kind object;
  #L221cd4.  call temp:= `add`(v5, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L221cda.  v5:= 0I;
  #L221cdc.  v6:= v4.`x0.n$a.b` @type ^`java.util.List` @kind object;
  #L221ce0.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L221ce6.  v6:= temp;
  #L221ce8.  if v5 >= v6 then goto L221d24;
  #L221cec.  v6:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221cf0.  v7:= v4.`x0.n$a.b` @type ^`java.util.List` @kind object;
  #L221cf4.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221cfa.  v7:= temp @kind object;
  #L221cfc.  call temp:= `contains`(v6, v7) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L221d02.  v6:= temp;
  #L221d04.  if v6 != 0 then goto L221d1e;
  #L221d08.  v6:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221d0c.  v7:= v4.`x0.n$a.b` @type ^`java.util.List` @kind object;
  #L221d10.  call temp:= `get`(v7, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221d16.  v7:= temp @kind object;
  #L221d18.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L221d1e.  v5:= v5 + 1;
  #L221d22.  goto L221cdc;
  #L221d24.  v3:= v3 + 1;
  #L221d28.  goto L221ca8;
  #L221d2a.  v0:= v8.`com.bumptech.glide.load.engine.f.b` @type ^`java.util.List` @kind object;
  #L221d2e.  return v0 @kind object;
}
procedure `v0.a` `d`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.d:()Lv0/a;` @AccessFlag  {
    temp;
    v0;

  #L221fc0.  v0:= v1.`com.bumptech.glide.load.engine.f.h` @type ^`com.bumptech.glide.load.engine.DecodeJob$e` @kind object;
  #L221fc4.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/DecodeJob$e;.a:()Lv0/a;` @kind interface;
  #L221fca.  v0:= temp @kind object;
  #L221fcc.  return v0 @kind object;
}
procedure `t0.a` `e`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.e:()Lt0/a;` @AccessFlag  {
    temp;
    v0;

  #L221f88.  v0:= v1.`com.bumptech.glide.load.engine.f.p` @type ^`t0.a` @kind object;
  #L221f8c.  return v0 @kind object;
}
procedure `int` `f`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.f:()I` @AccessFlag  {
    temp;
    v0;

  #L221c14.  v0:= v1.`com.bumptech.glide.load.engine.f.f` @type ^`int`;
  #L221c18.  return v0;
}
procedure `java.util.List` `g`(`com.bumptech.glide.load.engine.f` v8 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.g:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L221d40.  v0:= v8.`com.bumptech.glide.load.engine.f.l` @type ^`boolean` @kind boolean;
  #L221d44.  if v0 != 0 then goto L221db6;
  #L221d48.  v0:= 1I;
  #L221d4a.  v8.`com.bumptech.glide.load.engine.f.l` @type ^`boolean` := v0 @kind boolean;
  #L221d4e.  v0:= v8.`com.bumptech.glide.load.engine.f.a` @type ^`java.util.List` @kind object;
  #L221d52.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L221d58.  v0:= v8.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221d5c.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221d62.  v0:= temp @kind object;
  #L221d64.  v1:= v8.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` @kind object;
  #L221d68.  call temp:= `i`(v0, v1) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L221d6e.  v0:= temp @kind object;
  #L221d70.  v1:= 0I;
  #L221d72.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L221d78.  v2:= temp;
  #L221d7a.  if v1 >= v2 then goto L221db6;
  #L221d7e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221d84.  v3:= temp @kind object;
  #L221d86.  v3:= (`x0.n`) v3 @kind object;
  #L221d8a.  v4:= v8.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` @kind object;
  #L221d8e.  v5:= v8.`com.bumptech.glide.load.engine.f.e` @type ^`int`;
  #L221d92.  v6:= v8.`com.bumptech.glide.load.engine.f.f` @type ^`int`;
  #L221d96.  v7:= v8.`com.bumptech.glide.load.engine.f.i` @type ^`q0.d` @kind object;
  #L221d9a.  call temp:= `a`(v3, v4, v5, v6, v7) @signature `Lx0/n;.a:(Ljava/lang/Object;IILq0/d;)Lx0/n$a;` @kind interface;
  #L221da0.  v3:= temp @kind object;
  #L221da2.  if v3 == 0 then goto L221db0;
  #L221da6.  v4:= v8.`com.bumptech.glide.load.engine.f.a` @type ^`java.util.List` @kind object;
  #L221daa.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L221db0.  v1:= v1 + 1;
  #L221db4.  goto L221d7a;
  #L221db6.  v0:= v8.`com.bumptech.glide.load.engine.f.a` @type ^`java.util.List` @kind object;
  #L221dba.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.o` `h`(`com.bumptech.glide.load.engine.f` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.h:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L221be4.  v0:= v3.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221be8.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221bee.  v0:= temp @kind object;
  #L221bf0.  v1:= v3.`com.bumptech.glide.load.engine.f.g` @type ^`java.lang.Class` @kind object;
  #L221bf4.  v2:= v3.`com.bumptech.glide.load.engine.f.k` @type ^`java.lang.Class` @kind object;
  #L221bf8.  call temp:= `h`(v0, v4, v1, v2) @signature `Lcom/bumptech/glide/Registry;.h:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/o;` @kind virtual;
  #L221bfe.  v4:= temp @kind object;
  #L221c00.  return v4 @kind object;
}
procedure `java.lang.Class` `i`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.i:()Ljava/lang/Class;` @AccessFlag  {
    temp;
    v0;

  #L221c44.  v0:= v1.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` @kind object;
  #L221c48.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L221c4e.  v0:= temp @kind object;
  #L221c50.  return v0 @kind object;
}
procedure `java.util.List` `j`(`com.bumptech.glide.load.engine.f` v1 @kind this, `java.io.File` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.j:(Ljava/io/File;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L221dcc.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221dd0.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221dd6.  v0:= temp @kind object;
  #L221dd8.  call temp:= `i`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L221dde.  v2:= temp @kind object;
  #L221de0.  return v2 @kind object;
}
procedure `q0.d` `k`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.k:()Lq0/d;` @AccessFlag  {
    temp;
    v0;

  #L221e70.  v0:= v1.`com.bumptech.glide.load.engine.f.i` @type ^`q0.d` @kind object;
  #L221e74.  return v0 @kind object;
}
procedure `com.bumptech.glide.Priority` `l`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.l:()Lcom/bumptech/glide/Priority;` @AccessFlag  {
    temp;
    v0;

  #L221bcc.  v0:= v1.`com.bumptech.glide.load.engine.f.o` @type ^`com.bumptech.glide.Priority` @kind object;
  #L221bd0.  return v0 @kind object;
}
procedure `java.util.List` `m`(`com.bumptech.glide.load.engine.f` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.m:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221df4.  v0:= v4.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221df8.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221dfe.  v0:= temp @kind object;
  #L221e00.  v1:= v4.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` @kind object;
  #L221e04.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L221e0a.  v1:= temp @kind object;
  #L221e0c.  v2:= v4.`com.bumptech.glide.load.engine.f.g` @type ^`java.lang.Class` @kind object;
  #L221e10.  v3:= v4.`com.bumptech.glide.load.engine.f.k` @type ^`java.lang.Class` @kind object;
  #L221e14.  call temp:= `j`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/Registry;.j:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L221e1a.  v0:= temp @kind object;
  #L221e1c.  return v0 @kind object;
}
procedure `q0.f` `n`(`com.bumptech.glide.load.engine.f` v1 @kind this, `t0.c` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.n:(Lt0/c;)Lq0/f;` @AccessFlag  {
    temp;
    v0;

  #L221e88.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221e8c.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221e92.  v0:= temp @kind object;
  #L221e94.  call temp:= `k`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.k:(Lt0/c;)Lq0/f;` @kind virtual;
  #L221e9a.  v2:= temp @kind object;
  #L221e9c.  return v2 @kind object;
}
procedure `q0.b` `o`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.o:()Lq0/b;` @AccessFlag  {
    temp;
    v0;

  #L221e58.  v0:= v1.`com.bumptech.glide.load.engine.f.n` @type ^`q0.b` @kind object;
  #L221e5c.  return v0 @kind object;
}
procedure `q0.a` `p`(`com.bumptech.glide.load.engine.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.p:(Ljava/lang/Object;)Lq0/a;` @AccessFlag  {
    temp;
    v0;

  #L221e30.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221e34.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221e3a.  v0:= temp @kind object;
  #L221e3c.  call temp:= `m`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.m:(Ljava/lang/Object;)Lq0/a;` @kind virtual;
  #L221e42.  v2:= temp @kind object;
  #L221e44.  return v2 @kind object;
}
procedure `java.lang.Class` `q`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.q:()Ljava/lang/Class;` @AccessFlag  {
    temp;
    v0;

  #L221c64.  v0:= v1.`com.bumptech.glide.load.engine.f.k` @type ^`java.lang.Class` @kind object;
  #L221c68.  return v0 @kind object;
}
procedure `q0.g` `r`(`com.bumptech.glide.load.engine.f` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.r:(Ljava/lang/Class;)Lq0/g;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221eb0.  v0:= v4.`com.bumptech.glide.load.engine.f.j` @type ^`java.util.Map` @kind object;
  #L221eb4.  call temp:= `get`(v0, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L221eba.  v0:= temp @kind object;
  #L221ebc.  v0:= (`q0.g`) v0 @kind object;
  #L221ec0.  if v0 != 0 then goto L221f14;
  #L221ec4.  v1:= v4.`com.bumptech.glide.load.engine.f.j` @type ^`java.util.Map` @kind object;
  #L221ec8.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L221ece.  v1:= temp @kind object;
  #L221ed0.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L221ed6.  v1:= temp @kind object;
  #L221ed8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L221ede.  v2:= temp;
  #L221ee0.  if v2 == 0 then goto L221f14;
  #L221ee4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L221eea.  v2:= temp @kind object;
  #L221eec.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L221ef0.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L221ef6.  v3:= temp @kind object;
  #L221ef8.  v3:= (`java.lang.Class`) v3 @kind object;
  #L221efc.  call temp:= `isAssignableFrom`(v3, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L221f02.  v3:= temp;
  #L221f04.  if v3 == 0 then goto L221ed8;
  #L221f08.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L221f0e.  v0:= temp @kind object;
  #L221f10.  v0:= (`q0.g`) v0 @kind object;
  #L221f14.  if v0 != 0 then goto L221f74;
  #L221f18.  v0:= v4.`com.bumptech.glide.load.engine.f.j` @type ^`java.util.Map` @kind object;
  #L221f1c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L221f22.  v0:= temp;
  #L221f24.  if v0 == 0 then goto L221f6a;
  #L221f28.  v0:= v4.`com.bumptech.glide.load.engine.f.q` @type ^`boolean` @kind boolean;
  #L221f2c.  if v0 != 0 then goto L221f32;
  #L221f30.  goto L221f6a;
  #L221f32.  v0:= new `java.lang.IllegalArgumentException`;
  #L221f36.  v1:= new `java.lang.StringBuilder`;
  #L221f3a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L221f40.  v2:= "Missing transformation for " @kind object;
  #L221f44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L221f4a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L221f50.  v5:= ". If you wish to ignore unknown resource types, use the optional transformation methods." @kind object;
  #L221f54.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L221f5a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L221f60.  v5:= temp @kind object;
  #L221f62.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L221f68.  throw v0;
  #L221f6a.  call temp:= `c`() @signature `Lz0/c;.c:()Lz0/c;` @kind static;
  #L221f70.  v5:= temp @kind object;
  #L221f72.  return v5 @kind object;
  #L221f74.  return v0 @kind object;
}
procedure `int` `s`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.s:()I` @AccessFlag  {
    temp;
    v0;

  #L221c2c.  v0:= v1.`com.bumptech.glide.load.engine.f.e` @type ^`int`;
  #L221c30.  return v0;
}
procedure `boolean` `t`(`com.bumptech.glide.load.engine.f` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.t:(Ljava/lang/Class;)Z` @AccessFlag  {
    temp;

  #L221b18.  call temp:= `h`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/f;.h:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/o;` @kind virtual;
  #L221b1e.  v1:= temp @kind object;
  #L221b20.  if v1 == 0 then goto L221b28;
  #L221b24.  v1:= 1I;
  #L221b26.  goto L221b2a;
  #L221b28.  v1:= 0I;
  #L221b2a.  return v1;
}
procedure `void` `u`(`com.bumptech.glide.load.engine.f` v0 @kind this, `com.bumptech.glide.d` v1 @kind object, `java.lang.Object` v2 @kind object, `q0.b` v3 @kind object, `int` v4 , `int` v5 , `t0.a` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.bumptech.glide.Priority` v9 @kind object, `q0.d` v10 @kind object, `java.util.Map` v11 @kind object, `boolean` v12 , `boolean` v13 , `com.bumptech.glide.load.engine.DecodeJob$e` v14 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.u:(Lcom/bumptech/glide/d;Ljava/lang/Object;Lq0/b;IILt0/a;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/Priority;Lq0/d;Ljava/util/Map;ZZLcom/bumptech/glide/load/engine/DecodeJob$e;)V` @AccessFlag  {
    temp;

  #L22206c.  v0.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` := v1 @kind object;
  #L222070.  v0.`com.bumptech.glide.load.engine.f.d` @type ^`java.lang.Object` := v2 @kind object;
  #L222074.  v0.`com.bumptech.glide.load.engine.f.n` @type ^`q0.b` := v3 @kind object;
  #L222078.  v0.`com.bumptech.glide.load.engine.f.e` @type ^`int` := v4;
  #L22207c.  v0.`com.bumptech.glide.load.engine.f.f` @type ^`int` := v5;
  #L222080.  v0.`com.bumptech.glide.load.engine.f.p` @type ^`t0.a` := v6 @kind object;
  #L222084.  v0.`com.bumptech.glide.load.engine.f.g` @type ^`java.lang.Class` := v7 @kind object;
  #L222088.  v0.`com.bumptech.glide.load.engine.f.h` @type ^`com.bumptech.glide.load.engine.DecodeJob$e` := v14 @kind object;
  #L22208c.  v0.`com.bumptech.glide.load.engine.f.k` @type ^`java.lang.Class` := v8 @kind object;
  #L222090.  v0.`com.bumptech.glide.load.engine.f.o` @type ^`com.bumptech.glide.Priority` := v9 @kind object;
  #L222094.  v0.`com.bumptech.glide.load.engine.f.i` @type ^`q0.d` := v10 @kind object;
  #L222098.  v0.`com.bumptech.glide.load.engine.f.j` @type ^`java.util.Map` := v11 @kind object;
  #L22209c.  v0.`com.bumptech.glide.load.engine.f.q` @type ^`boolean` := v12 @kind boolean;
  #L2220a0.  v0.`com.bumptech.glide.load.engine.f.r` @type ^`boolean` := v13 @kind boolean;
  #L2220a4.  return @kind void;
}
procedure `boolean` `v`(`com.bumptech.glide.load.engine.f` v1 @kind this, `t0.c` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.v:(Lt0/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L221b3c.  v0:= v1.`com.bumptech.glide.load.engine.f.c` @type ^`com.bumptech.glide.d` @kind object;
  #L221b40.  call temp:= `g`(v0) @signature `Lcom/bumptech/glide/d;.g:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L221b46.  v0:= temp @kind object;
  #L221b48.  call temp:= `n`(v0, v2) @signature `Lcom/bumptech/glide/Registry;.n:(Lt0/c;)Z` @kind virtual;
  #L221b4e.  v2:= temp;
  #L221b50.  return v2;
}
procedure `boolean` `w`(`com.bumptech.glide.load.engine.f` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/f;.w:()Z` @AccessFlag  {
    temp;
    v0;

  #L221b64.  v0:= v1.`com.bumptech.glide.load.engine.f.r` @type ^`boolean` @kind boolean;
  #L221b68.  return v0;
}
procedure `boolean` `x`(`com.bumptech.glide.load.engine.f` v5 @kind this, `q0.b` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/f;.x:(Lq0/b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L221b7c.  call temp:= `g`(v5) @signature `Lcom/bumptech/glide/load/engine/f;.g:()Ljava/util/List;` @kind virtual;
  #L221b82.  v0:= temp @kind object;
  #L221b84.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L221b8a.  v1:= temp;
  #L221b8c.  v2:= 0I;
  #L221b8e.  v3:= 0I;
  #L221b90.  if v3 >= v1 then goto L221bba;
  #L221b94.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L221b9a.  v4:= temp @kind object;
  #L221b9c.  v4:= (`x0.n$a`) v4 @kind object;
  #L221ba0.  v4:= v4.`x0.n$a.a` @type ^`q0.b` @kind object;
  #L221ba4.  call temp:= `equals`(v4, v6) @signature `Lq0/b;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L221baa.  v4:= temp;
  #L221bac.  if v4 == 0 then goto L221bb4;
  #L221bb0.  v6:= 1I;
  #L221bb2.  return v6;
  #L221bb4.  v3:= v3 + 1;
  #L221bb8.  goto L221b90;
  #L221bba.  return v2;
}
