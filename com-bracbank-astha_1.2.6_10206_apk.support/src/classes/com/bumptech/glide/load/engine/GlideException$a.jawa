record `com.bumptech.glide.load.engine.GlideException$a` @kind class @AccessFlag FINAL extends `java.lang.Appendable` @kind interface {
  `java.lang.Appendable` `com.bumptech.glide.load.engine.GlideException$a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.GlideException$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException$a` v1 @kind this, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L22522c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L225232.  v0:= 1I;
  #L225234.  v1.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v0 @kind boolean;
  #L225238.  v1.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` := v2 @kind object;
  #L22523c.  return @kind void;
}
procedure `java.lang.CharSequence` `a`(`com.bumptech.glide.load.engine.GlideException$a` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE {
    temp;

  #L225210.  if v1 != 0 then goto L225218;
  #L225214.  v1:= "" @kind object;
  #L225218.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `char` v4 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(C)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L225134.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` @kind boolean;
  #L225138.  v1:= 0I;
  #L22513a.  if v0 == 0 then goto L225150;
  #L22513e.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L225142.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L225146.  v2:= "  " @kind object;
  #L22514a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L225150.  v0:= 10I;
  #L225154.  if v4 != v0 then goto L22515a;
  #L225158.  v1:= 1I;
  #L22515a.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L22515e.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L225162.  call temp:= `append`(v0, v4) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L225168.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22517c.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L225182.  v3:= temp @kind object;
  #L225184.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L22518a.  v0:= temp;
  #L22518c.  v1:= 0I;
  #L22518e.  call temp:= `append`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind virtual;
  #L225194.  v3:= temp @kind object;
  #L225196.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2251a8.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L2251ae.  v4:= temp @kind object;
  #L2251b0.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` @kind boolean;
  #L2251b4.  v1:= 0I;
  #L2251b6.  if v0 == 0 then goto L2251cc;
  #L2251ba.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L2251be.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L2251c2.  v2:= "  " @kind object;
  #L2251c6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L2251cc.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2251d2.  v0:= temp;
  #L2251d4.  if v0 <= 0 then goto L2251ee;
  #L2251d8.  v0:= v6 + -1;
  #L2251dc.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L2251e2.  v0:= temp;
  #L2251e4.  v2:= 10I;
  #L2251e8.  if v0 != v2 then goto L2251ee;
  #L2251ec.  v1:= 1I;
  #L2251ee.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L2251f2.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L2251f6.  call temp:= `append`(v0, v4, v5, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind interface;
  #L2251fc.  return v3 @kind object;
}
