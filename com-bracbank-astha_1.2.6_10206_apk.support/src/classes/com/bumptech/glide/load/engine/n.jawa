record `com.bumptech.glide.load.engine.n` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.n.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.n.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.n` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2257e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2257ea.  v0:= new `java.util.HashMap`;
  #L2257ee.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2257f4.  v1.`com.bumptech.glide.load.engine.n.a` @type ^`java.util.Map` := v0 @kind object;
  #L2257f8.  v0:= new `java.util.HashMap`;
  #L2257fc.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L225802.  v1.`com.bumptech.glide.load.engine.n.b` @type ^`java.util.Map` := v0 @kind object;
  #L225806.  return @kind void;
}
procedure `java.util.Map` `b`(`com.bumptech.glide.load.engine.n` v0 @kind this, `boolean` v1 ) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Z)Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;

  #L2257c4.  if v1 == 0 then goto L2257ce;
  #L2257c8.  v1:= v0.`com.bumptech.glide.load.engine.n.b` @type ^`java.util.Map` @kind object;
  #L2257cc.  goto L2257d2;
  #L2257ce.  v1:= v0.`com.bumptech.glide.load.engine.n.a` @type ^`java.util.Map` @kind object;
  #L2257d2.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.engine.i` `a`(`com.bumptech.glide.load.engine.n` v0 @kind this, `q0.b` v1 @kind object, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/n;.a:(Lq0/b;Z)Lcom/bumptech/glide/load/engine/i;` @AccessFlag  {
    temp;

  #L22579c.  call temp:= `b`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Z)Ljava/util/Map;` @kind direct;
  #L2257a2.  v2:= temp @kind object;
  #L2257a4.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2257aa.  v1:= temp @kind object;
  #L2257ac.  v1:= (`com.bumptech.glide.load.engine.i`) v1 @kind object;
  #L2257b0.  return v1 @kind object;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.n` v1 @kind this, `q0.b` v2 @kind object, `com.bumptech.glide.load.engine.i` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/n;.c:(Lq0/b;Lcom/bumptech/glide/load/engine/i;)V` @AccessFlag  {
    temp;
    v0;

  #L225818.  call temp:= `p`(v3) @signature `Lcom/bumptech/glide/load/engine/i;.p:()Z` @kind virtual;
  #L22581e.  v0:= temp;
  #L225820.  call temp:= `b`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Z)Ljava/util/Map;` @kind direct;
  #L225826.  v0:= temp @kind object;
  #L225828.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22582e.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.n` v2 @kind this, `q0.b` v3 @kind object, `com.bumptech.glide.load.engine.i` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/n;.d:(Lq0/b;Lcom/bumptech/glide/load/engine/i;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L225840.  call temp:= `p`(v4) @signature `Lcom/bumptech/glide/load/engine/i;.p:()Z` @kind virtual;
  #L225846.  v0:= temp;
  #L225848.  call temp:= `b`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Z)Ljava/util/Map;` @kind direct;
  #L22584e.  v0:= temp @kind object;
  #L225850.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L225856.  v1:= temp @kind object;
  #L225858.  call temp:= `equals`(v4, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22585e.  v4:= temp;
  #L225860.  if v4 == 0 then goto L22586a;
  #L225864.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22586a.  return @kind void;
}
