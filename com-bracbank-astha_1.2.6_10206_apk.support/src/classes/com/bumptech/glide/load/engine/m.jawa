record `com.bumptech.glide.load.engine.m` @kind class @AccessFlag  extends `t0.c` @kind interface {
  `boolean` `com.bumptech.glide.load.engine.m.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.m.b` @AccessFlag PRIVATE_FINAL;
  `t0.c` `com.bumptech.glide.load.engine.m.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.m$a` `com.bumptech.glide.load.engine.m.d` @AccessFlag PRIVATE_FINAL;
  `q0.b` `com.bumptech.glide.load.engine.m.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.m.f` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.m.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.m` v0 @kind this, `t0.c` v1 @kind object, `boolean` v2 , `boolean` v3 , `q0.b` v4 @kind object, `com.bumptech.glide.load.engine.m$a` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/m;.<init>:(Lt0/c;ZZLq0/b;Lcom/bumptech/glide/load/engine/m$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2249f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2249fa.  call temp:= `d`(v1) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L224a00.  v1:= temp @kind object;
  #L224a02.  v1:= (`t0.c`) v1 @kind object;
  #L224a06.  v0.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` := v1 @kind object;
  #L224a0a.  v0.`com.bumptech.glide.load.engine.m.a` @type ^`boolean` := v2 @kind boolean;
  #L224a0e.  v0.`com.bumptech.glide.load.engine.m.b` @type ^`boolean` := v3 @kind boolean;
  #L224a12.  v0.`com.bumptech.glide.load.engine.m.e` @type ^`q0.b` := v4 @kind object;
  #L224a16.  call temp:= `d`(v5) @signature `Ln1/j;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L224a1c.  v1:= temp @kind object;
  #L224a1e.  v1:= (`com.bumptech.glide.load.engine.m$a`) v1 @kind object;
  #L224a22.  v0.`com.bumptech.glide.load.engine.m.d` @type ^`com.bumptech.glide.load.engine.m$a` := v1 @kind object;
  #L224a26.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L224a38.  @monitorenter v2
  #L224a3a.  v0:= v2.`com.bumptech.glide.load.engine.m.g` @type ^`boolean` @kind boolean;
  #L224a3e.  if v0 != 0 then goto L224a52;
  #L224a42.  v0:= v2.`com.bumptech.glide.load.engine.m.f` @type ^`int`;
  #L224a46.  v0:= v0 + 1;
  #L224a4a.  v2.`com.bumptech.glide.load.engine.m.f` @type ^`int` := v0;
  #L224a4e.  @monitorexit v2
  #L224a50.  return @kind void;
  #L224a52.  v0:= new `java.lang.IllegalStateException`;
  #L224a56.  v1:= "Cannot acquire a recycled resource" @kind object;
  #L224a5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224a60.  throw v0;
  #L224a62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L224a64.  @monitorexit v2
  #L224a66.  throw v0;
  catch `java.lang.Throwable` @[L224a3a..L224a4e] goto L224a62;
  catch `java.lang.Throwable` @[L224a52..L224a62] goto L224a62;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L224a8c.  @monitorenter v2
  #L224a8e.  v0:= v2.`com.bumptech.glide.load.engine.m.f` @type ^`int`;
  #L224a92.  if v0 > 0 then goto L224aca;
  #L224a96.  v0:= v2.`com.bumptech.glide.load.engine.m.g` @type ^`boolean` @kind boolean;
  #L224a9a.  if v0 != 0 then goto L224aba;
  #L224a9e.  v0:= 1I;
  #L224aa0.  v2.`com.bumptech.glide.load.engine.m.g` @type ^`boolean` := v0 @kind boolean;
  #L224aa4.  v0:= v2.`com.bumptech.glide.load.engine.m.b` @type ^`boolean` @kind boolean;
  #L224aa8.  if v0 == 0 then goto L224ab6;
  #L224aac.  v0:= v2.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L224ab0.  call `b`(v0) @signature `Lt0/c;.b:()V` @kind interface;
  #L224ab6.  @monitorexit v2
  #L224ab8.  return @kind void;
  #L224aba.  v0:= new `java.lang.IllegalStateException`;
  #L224abe.  v1:= "Cannot recycle a resource that has already been recycled" @kind object;
  #L224ac2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224ac8.  throw v0;
  #L224aca.  v0:= new `java.lang.IllegalStateException`;
  #L224ace.  v1:= "Cannot recycle a resource while it is still acquired" @kind object;
  #L224ad2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224ad8.  throw v0;
  #L224ada.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L224adc.  @monitorexit v2
  #L224ade.  throw v0;
  catch `java.lang.Throwable` @[L224a8e..L224ab6] goto L224ada;
  catch `java.lang.Throwable` @[L224aba..L224ada] goto L224ada;
}
procedure `java.lang.Class` `c`(`com.bumptech.glide.load.engine.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.c:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2248e0.  v0:= v1.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L2248e4.  call temp:= `c`(v0) @signature `Lt0/c;.c:()Ljava/lang/Class;` @kind interface;
  #L2248ea.  v0:= temp @kind object;
  #L2248ec.  return v0 @kind object;
}
procedure `t0.c` `d`(`com.bumptech.glide.load.engine.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.d:()Lt0/c;` @AccessFlag  {
    temp;
    v0;

  #L2249dc.  v0:= v1.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L2249e0.  return v0 @kind object;
}
procedure `boolean` `e`(`com.bumptech.glide.load.engine.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.e:()Z` @AccessFlag  {
    temp;
    v0;

  #L2248a8.  v0:= v1.`com.bumptech.glide.load.engine.m.a` @type ^`boolean` @kind boolean;
  #L2248ac.  return v0;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L224b04.  @monitorenter v2
  #L224b06.  v0:= v2.`com.bumptech.glide.load.engine.m.f` @type ^`int`;
  #L224b0a.  if v0 <= 0 then goto L224b34;
  #L224b0e.  v1:= 1I;
  #L224b10.  v0:= v0 - v1 @kind int;
  #L224b12.  v2.`com.bumptech.glide.load.engine.m.f` @type ^`int` := v0;
  #L224b16.  if v0 != 0 then goto L224b1c;
  #L224b1a.  goto L224b1e;
  #L224b1c.  v1:= 0I;
  #L224b1e.  @monitorexit v2
  #L224b20.  if v1 == 0 then goto L224b32;
  #L224b24.  v0:= v2.`com.bumptech.glide.load.engine.m.d` @type ^`com.bumptech.glide.load.engine.m$a` @kind object;
  #L224b28.  v1:= v2.`com.bumptech.glide.load.engine.m.e` @type ^`q0.b` @kind object;
  #L224b2c.  call `b`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/m$a;.b:(Lq0/b;Lcom/bumptech/glide/load/engine/m;)V` @kind interface;
  #L224b32.  return @kind void;
  #L224b34.  v0:= new `java.lang.IllegalStateException`;
  #L224b38.  v1:= "Cannot release a recycled or not yet acquired resource" @kind object;
  #L224b3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224b42.  throw v0;
  #L224b44.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L224b46.  @monitorexit v2
  #L224b48.  throw v0;
  catch `java.lang.Throwable` @[L224b06..L224b20] goto L224b44;
  catch `java.lang.Throwable` @[L224b34..L224b48] goto L224b44;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.load.engine.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L224900.  v0:= v1.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L224904.  call temp:= `get`(v0) @signature `Lt0/c;.get:()Ljava/lang/Object;` @kind interface;
  #L22490a.  v0:= temp @kind object;
  #L22490c.  return v0 @kind object;
}
procedure `int` `getSize`(`com.bumptech.glide.load.engine.m` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2248c0.  v0:= v1.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L2248c4.  call temp:= `getSize`(v0) @signature `Lt0/c;.getSize:()I` @kind interface;
  #L2248ca.  v0:= temp;
  #L2248cc.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.m` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L224920.  @monitorenter v2
  #L224922.  v0:= new `java.lang.StringBuilder`;
  #L224926.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22492c.  v1:= "EngineResource{isMemoryCacheable=" @kind object;
  #L224930.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224936.  v1:= v2.`com.bumptech.glide.load.engine.m.a` @type ^`boolean` @kind boolean;
  #L22493a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L224940.  v1:= ", listener=" @kind object;
  #L224944.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22494a.  v1:= v2.`com.bumptech.glide.load.engine.m.d` @type ^`com.bumptech.glide.load.engine.m$a` @kind object;
  #L22494e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224954.  v1:= ", key=" @kind object;
  #L224958.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22495e.  v1:= v2.`com.bumptech.glide.load.engine.m.e` @type ^`q0.b` @kind object;
  #L224962.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224968.  v1:= ", acquired=" @kind object;
  #L22496c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224972.  v1:= v2.`com.bumptech.glide.load.engine.m.f` @type ^`int`;
  #L224976.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L22497c.  v1:= ", isRecycled=" @kind object;
  #L224980.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224986.  v1:= v2.`com.bumptech.glide.load.engine.m.g` @type ^`boolean` @kind boolean;
  #L22498a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L224990.  v1:= ", resource=" @kind object;
  #L224994.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22499a.  v1:= v2.`com.bumptech.glide.load.engine.m.c` @type ^`t0.c` @kind object;
  #L22499e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2249a4.  v1:= 125I;
  #L2249a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2249ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2249b4.  v0:= temp @kind object;
  #L2249b6.  @monitorexit v2
  #L2249b8.  return v0 @kind object;
  #L2249ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2249bc.  @monitorexit v2
  #L2249be.  throw v0;
  catch `java.lang.Throwable` @[L224922..L2249b6] goto L2249ba;
}
