record `com.bumptech.glide.load.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `u0.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/a;.a:(Ljava/util/List;Ljava/io/InputStream;Lu0/b;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2211f0.  if v2 != 0 then goto L2211f8;
  #L2211f4.  v1:= -1I;
  #L2211f6.  return v1;
  #L2211f8.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L2211fe.  v0:= temp;
  #L221200.  if v0 != 0 then goto L221210;
  #L221204.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L221208.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lu0/b;)V` @kind direct;
  #L22120e.  v2:= v0 @kind object;
  #L221210.  v0:= 5242880I;
  #L221214.  call `mark`(v2, v0) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L22121a.  v0:= new `com.bumptech.glide.load.a$d`;
  #L22121e.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/a$d;.<init>:(Ljava/io/InputStream;Lu0/b;)V` @kind direct;
  #L221224.  call temp:= `c`(v1, v0) @signature `Lcom/bumptech/glide/load/a;.c:(Ljava/util/List;Lcom/bumptech/glide/load/a$f;)I` @kind static;
  #L22122a.  v1:= temp;
  #L22122c.  return v1;
}
procedure `int` `b`(`java.util.List` v1 @kind object, `r0.m` v2 @kind object, `u0.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/a;.b:(Ljava/util/List;Lr0/m;Lu0/b;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L221240.  v0:= new `com.bumptech.glide.load.a$e`;
  #L221244.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/a$e;.<init>:(Lr0/m;Lu0/b;)V` @kind direct;
  #L22124a.  call temp:= `c`(v1, v0) @signature `Lcom/bumptech/glide/load/a;.c:(Ljava/util/List;Lcom/bumptech/glide/load/a$f;)I` @kind static;
  #L221250.  v1:= temp;
  #L221252.  return v1;
}
procedure `int` `c`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.a$f` v5 @kind object) @signature `Lcom/bumptech/glide/load/a;.c:(Ljava/util/List;Lcom/bumptech/glide/load/a$f;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L221264.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22126a.  v0:= temp;
  #L22126c.  v1:= 0I;
  #L22126e.  v2:= -1I;
  #L221270.  if v1 >= v0 then goto L221294;
  #L221274.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22127a.  v3:= temp @kind object;
  #L22127c.  v3:= (`com.bumptech.glide.load.ImageHeaderParser`) v3 @kind object;
  #L221280.  call temp:= `a`(v5, v3) @signature `Lcom/bumptech/glide/load/a$f;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)I` @kind interface;
  #L221286.  v3:= temp;
  #L221288.  if v3 == v2 then goto L22128e;
  #L22128c.  return v3;
  #L22128e.  v1:= v1 + 1;
  #L221292.  goto L22126e;
  #L221294.  return v2;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `d`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `u0.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/a;.d:(Ljava/util/List;Ljava/io/InputStream;Lu0/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L221104.  if v2 != 0 then goto L22110e;
  #L221108.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L22110c.  return v1 @kind object;
  #L22110e.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L221114.  v0:= temp;
  #L221116.  if v0 != 0 then goto L221126;
  #L22111a.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L22111e.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lu0/b;)V` @kind direct;
  #L221124.  v2:= v0 @kind object;
  #L221126.  v3:= 5242880I;
  #L22112a.  call `mark`(v2, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L221130.  v3:= new `com.bumptech.glide.load.a$a`;
  #L221134.  call `<init>`(v3, v2) @signature `Lcom/bumptech/glide/load/a$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L22113a.  call temp:= `g`(v1, v3) @signature `Lcom/bumptech/glide/load/a;.g:(Ljava/util/List;Lcom/bumptech/glide/load/a$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L221140.  v1:= temp @kind object;
  #L221142.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `e`(`java.util.List` v1 @kind object, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/load/a;.e:(Ljava/util/List;Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L221154.  if v2 != 0 then goto L22115e;
  #L221158.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L22115c.  return v1 @kind object;
  #L22115e.  v0:= new `com.bumptech.glide.load.a$b`;
  #L221162.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/a$b;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L221168.  call temp:= `g`(v1, v0) @signature `Lcom/bumptech/glide/load/a;.g:(Ljava/util/List;Lcom/bumptech/glide/load/a$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L22116e.  v1:= temp @kind object;
  #L221170.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `f`(`java.util.List` v1 @kind object, `r0.m` v2 @kind object, `u0.b` v3 @kind object) @signature `Lcom/bumptech/glide/load/a;.f:(Ljava/util/List;Lr0/m;Lu0/b;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L221184.  v0:= new `com.bumptech.glide.load.a$c`;
  #L221188.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/a$c;.<init>:(Lr0/m;Lu0/b;)V` @kind direct;
  #L22118e.  call temp:= `g`(v1, v0) @signature `Lcom/bumptech/glide/load/a;.g:(Ljava/util/List;Lcom/bumptech/glide/load/a$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L221194.  v1:= temp @kind object;
  #L221196.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `g`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.a$g` v5 @kind object) @signature `Lcom/bumptech/glide/load/a;.g:(Ljava/util/List;Lcom/bumptech/glide/load/a$g;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2211a8.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2211ae.  v0:= temp;
  #L2211b0.  v1:= 0I;
  #L2211b2.  if v1 >= v0 then goto L2211da;
  #L2211b6.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2211bc.  v2:= temp @kind object;
  #L2211be.  v2:= (`com.bumptech.glide.load.ImageHeaderParser`) v2 @kind object;
  #L2211c2.  call temp:= `a`(v5, v2) @signature `Lcom/bumptech/glide/load/a$g;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L2211c8.  v2:= temp @kind object;
  #L2211ca.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L2211ce.  if v2 == v3 then goto L2211d4;
  #L2211d2.  return v2 @kind object;
  #L2211d4.  v1:= v1 + 1;
  #L2211d8.  goto L2211b2;
  #L2211da.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L2211de.  return v4 @kind object;
}
