record `com.bumptech.glide.request.c` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.request.RequestCoordinator` @kind interface, `j1.a` @kind interface {
  `com.bumptech.glide.request.RequestCoordinator` `com.bumptech.glide.request.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.bumptech.glide.request.c.b` @AccessFlag PRIVATE_FINAL;
  `j1.a` `com.bumptech.glide.request.c.c` @AccessFlag PRIVATE_VOLATILE;
  `j1.a` `com.bumptech.glide.request.c.d` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.request.RequestCoordinator$RequestState` `com.bumptech.glide.request.c.e` @AccessFlag PRIVATE;
  `com.bumptech.glide.request.RequestCoordinator$RequestState` `com.bumptech.glide.request.c.f` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.request.c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.request.c` v1 @kind this, `java.lang.Object` v2 @kind object, `com.bumptech.glide.request.RequestCoordinator` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/request/RequestCoordinator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L22d218.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22d21e.  v0:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.c` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d222.  v1.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v0 @kind object;
  #L22d226.  v1.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v0 @kind object;
  #L22d22a.  v1.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` := v2 @kind object;
  #L22d22e.  v1.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` := v3 @kind object;
  #L22d232.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.request.c` v1 @kind this) @signature `Lcom/bumptech/glide/request/c;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L22d148.  v0:= v1.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d14c.  if v0 == 0 then goto L22d162;
  #L22d150.  call temp:= `h`(v0, v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.h:(Lj1/a;)Z` @kind interface;
  #L22d156.  v0:= temp;
  #L22d158.  if v0 == 0 then goto L22d15e;
  #L22d15c.  goto L22d162;
  #L22d15e.  v0:= 0I;
  #L22d160.  goto L22d164;
  #L22d162.  v0:= 1I;
  #L22d164.  return v0;
}
procedure `boolean` `l`(`com.bumptech.glide.request.c` v1 @kind this) @signature `Lcom/bumptech/glide/request/c;.l:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L22d178.  v0:= v1.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d17c.  if v0 == 0 then goto L22d192;
  #L22d180.  call temp:= `i`(v0, v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.i:(Lj1/a;)Z` @kind interface;
  #L22d186.  v0:= temp;
  #L22d188.  if v0 == 0 then goto L22d18e;
  #L22d18c.  goto L22d192;
  #L22d18e.  v0:= 0I;
  #L22d190.  goto L22d194;
  #L22d192.  v0:= 1I;
  #L22d194.  return v0;
}
procedure `boolean` `m`(`com.bumptech.glide.request.c` v1 @kind this) @signature `Lcom/bumptech/glide/request/c;.m:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L22d1a8.  v0:= v1.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d1ac.  if v0 == 0 then goto L22d1c2;
  #L22d1b0.  call temp:= `d`(v0, v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.d:(Lj1/a;)Z` @kind interface;
  #L22d1b6.  v0:= temp;
  #L22d1b8.  if v0 == 0 then goto L22d1be;
  #L22d1bc.  goto L22d1c2;
  #L22d1be.  v0:= 0I;
  #L22d1c0.  goto L22d1c4;
  #L22d1c2.  v0:= 1I;
  #L22d1c4.  return v0;
}
procedure `boolean` `b`(`com.bumptech.glide.request.c` v2 @kind this) @signature `Lcom/bumptech/glide/request/c;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22cfc4.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22cfc8.  @monitorenter v0
  #L22cfca.  v1:= v2.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22cfce.  call temp:= `b`(v1) @signature `Lj1/a;.b:()Z` @kind interface;
  #L22cfd4.  v1:= temp;
  #L22cfd6.  if v1 != 0 then goto L22cff0;
  #L22cfda.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22cfde.  call temp:= `b`(v1) @signature `Lj1/a;.b:()Z` @kind interface;
  #L22cfe4.  v1:= temp;
  #L22cfe6.  if v1 == 0 then goto L22cfec;
  #L22cfea.  goto L22cff0;
  #L22cfec.  v1:= 0I;
  #L22cfee.  goto L22cff2;
  #L22cff0.  v1:= 1I;
  #L22cff2.  @monitorexit v0
  #L22cff4.  return v1;
  #L22cff6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22cff8.  @monitorexit v0
  #L22cffa.  throw v1;
  catch `java.lang.Throwable` @[L22cfca..L22cffa] goto L22cff6;
}
procedure `void` `c`(`com.bumptech.glide.request.c` v2 @kind this, `j1.a` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.c:(Lj1/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22d334.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d338.  @monitorenter v0
  #L22d33a.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d33e.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22d344.  v3:= temp;
  #L22d346.  if v3 != 0 then goto L22d356;
  #L22d34a.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d34e.  v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d352.  @monitorexit v0
  #L22d354.  return @kind void;
  #L22d356.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d35a.  v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d35e.  v3:= v2.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d362.  if v3 == 0 then goto L22d36c;
  #L22d366.  call `c`(v3, v2) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.c:(Lj1/a;)V` @kind interface;
  #L22d36c.  @monitorexit v0
  #L22d36e.  return @kind void;
  #L22d370.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d372.  @monitorexit v0
  #L22d374.  throw v3;
  catch `java.lang.Throwable` @[L22d33a..L22d374] goto L22d370;
}
procedure `void` `clear`(`com.bumptech.glide.request.c` v2 @kind this) @signature `Lcom/bumptech/glide/request/c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22d2e0.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d2e4.  @monitorenter v0
  #L22d2e6.  v1:= 0I;
  #L22d2e8.  v2.`com.bumptech.glide.request.c.g` @type ^`boolean` := v1 @kind boolean;
  #L22d2ec.  v1:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.c` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d2f0.  v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v1 @kind object;
  #L22d2f4.  v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v1 @kind object;
  #L22d2f8.  v1:= v2.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d2fc.  call `clear`(v1) @signature `Lj1/a;.clear:()V` @kind interface;
  #L22d302.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d306.  call `clear`(v1) @signature `Lj1/a;.clear:()V` @kind interface;
  #L22d30c.  @monitorexit v0
  #L22d30e.  return @kind void;
  #L22d310.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d312.  @monitorexit v0
  #L22d314.  throw v1;
  catch `java.lang.Throwable` @[L22d2e8..L22d314] goto L22d310;
}
procedure `boolean` `d`(`com.bumptech.glide.request.c` v2 @kind this, `j1.a` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.d:(Lj1/a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22cf68.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22cf6c.  @monitorenter v0
  #L22cf6e.  call temp:= `m`(v2) @signature `Lcom/bumptech/glide/request/c;.m:()Z` @kind direct;
  #L22cf74.  v1:= temp;
  #L22cf76.  if v1 == 0 then goto L22cf9a;
  #L22cf7a.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22cf7e.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22cf84.  v3:= temp;
  #L22cf86.  if v3 != 0 then goto L22cf96;
  #L22cf8a.  v3:= v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22cf8e.  v1:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.d` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22cf92.  if v3 == v1 then goto L22cf9a;
  #L22cf96.  v3:= 1I;
  #L22cf98.  goto L22cf9c;
  #L22cf9a.  v3:= 0I;
  #L22cf9c.  @monitorexit v0
  #L22cf9e.  return v3;
  #L22cfa0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22cfa2.  @monitorexit v0
  #L22cfa4.  throw v3;
  catch `java.lang.Throwable` @[L22cf6e..L22cfa4] goto L22cfa0;
}
procedure `void` `e`(`com.bumptech.glide.request.c` v2 @kind this, `j1.a` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.e:(Lj1/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22d394.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d398.  @monitorenter v0
  #L22d39a.  v1:= v2.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d39e.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22d3a4.  v3:= temp;
  #L22d3a6.  if v3 == 0 then goto L22d3b6;
  #L22d3aa.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.d` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d3ae.  v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d3b2.  @monitorexit v0
  #L22d3b4.  return @kind void;
  #L22d3b6.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.d` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d3ba.  v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d3be.  v3:= v2.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d3c2.  if v3 == 0 then goto L22d3cc;
  #L22d3c6.  call `e`(v3, v2) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.e:(Lj1/a;)V` @kind interface;
  #L22d3cc.  v3:= v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d3d0.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/request/RequestCoordinator$RequestState;.a:()Z` @kind virtual;
  #L22d3d6.  v3:= temp;
  #L22d3d8.  if v3 != 0 then goto L22d3e6;
  #L22d3dc.  v3:= v2.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d3e0.  call `clear`(v3) @signature `Lj1/a;.clear:()V` @kind interface;
  #L22d3e6.  @monitorexit v0
  #L22d3e8.  return @kind void;
  #L22d3ea.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d3ec.  @monitorexit v0
  #L22d3ee.  throw v3;
  catch `java.lang.Throwable` @[L22d39a..L22d3ee] goto L22d3ea;
}
procedure `boolean` `f`(`com.bumptech.glide.request.c` v3 @kind this, `j1.a` v4 @kind object) @signature `Lcom/bumptech/glide/request/c;.f:(Lj1/a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22d098.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.request.c` @kind boolean;
  #L22d09c.  v1:= 0I;
  #L22d09e.  if v0 == 0 then goto L22d0f4;
  #L22d0a2.  v4:= (`com.bumptech.glide.request.c`) v4 @kind object;
  #L22d0a6.  v0:= v3.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d0aa.  if v0 != 0 then goto L22d0b8;
  #L22d0ae.  v0:= v4.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d0b2.  if v0 != 0 then goto L22d0f4;
  #L22d0b6.  goto L22d0cc;
  #L22d0b8.  v0:= v3.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d0bc.  v2:= v4.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d0c0.  call temp:= `f`(v0, v2) @signature `Lj1/a;.f:(Lj1/a;)Z` @kind interface;
  #L22d0c6.  v0:= temp;
  #L22d0c8.  if v0 == 0 then goto L22d0f4;
  #L22d0cc.  v0:= v3.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d0d0.  if v0 != 0 then goto L22d0de;
  #L22d0d4.  v4:= v4.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d0d8.  if v4 != 0 then goto L22d0f4;
  #L22d0dc.  goto L22d0f2;
  #L22d0de.  v0:= v3.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d0e2.  v4:= v4.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d0e6.  call temp:= `f`(v0, v4) @signature `Lj1/a;.f:(Lj1/a;)Z` @kind interface;
  #L22d0ec.  v4:= temp;
  #L22d0ee.  if v4 == 0 then goto L22d0f4;
  #L22d0f2.  v1:= 1I;
  #L22d0f4.  return v1;
}
procedure `boolean` `g`(`com.bumptech.glide.request.c` v3 @kind this) @signature `Lcom/bumptech/glide/request/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22d018.  v0:= v3.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d01c.  @monitorenter v0
  #L22d01e.  v1:= v3.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d022.  v2:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.c` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d026.  if v1 != v2 then goto L22d02e;
  #L22d02a.  v1:= 1I;
  #L22d02c.  goto L22d030;
  #L22d02e.  v1:= 0I;
  #L22d030.  @monitorexit v0
  #L22d032.  return v1;
  #L22d034.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d036.  @monitorexit v0
  #L22d038.  throw v1;
  catch `java.lang.Throwable` @[L22d01e..L22d038] goto L22d034;
}
procedure `com.bumptech.glide.request.RequestCoordinator` `getRoot`(`com.bumptech.glide.request.c` v2 @kind this) @signature `Lcom/bumptech/glide/request/c;.getRoot:()Lcom/bumptech/glide/request/RequestCoordinator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22d1d8.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d1dc.  @monitorenter v0
  #L22d1de.  v1:= v2.`com.bumptech.glide.request.c.a` @type ^`com.bumptech.glide.request.RequestCoordinator` @kind object;
  #L22d1e2.  if v1 == 0 then goto L22d1f0;
  #L22d1e6.  call temp:= `getRoot`(v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator;.getRoot:()Lcom/bumptech/glide/request/RequestCoordinator;` @kind interface;
  #L22d1ec.  v1:= temp @kind object;
  #L22d1ee.  goto L22d1f2;
  #L22d1f0.  v1:= v2 @kind object;
  #L22d1f2.  @monitorexit v0
  #L22d1f4.  return v1 @kind object;
  #L22d1f6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d1f8.  @monitorexit v0
  #L22d1fa.  throw v1;
  catch `java.lang.Throwable` @[L22d1de..L22d1fa] goto L22d1f6;
}
procedure `boolean` `h`(`com.bumptech.glide.request.c` v2 @kind this, `j1.a` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.h:(Lj1/a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22ceb0.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22ceb4.  @monitorenter v0
  #L22ceb6.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/request/c;.a:()Z` @kind direct;
  #L22cebc.  v1:= temp;
  #L22cebe.  if v1 == 0 then goto L22cee2;
  #L22cec2.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22cec6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22cecc.  v3:= temp;
  #L22cece.  if v3 == 0 then goto L22cee2;
  #L22ced2.  v3:= v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22ced6.  v1:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.b` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22ceda.  if v3 == v1 then goto L22cee2;
  #L22cede.  v3:= 1I;
  #L22cee0.  goto L22cee4;
  #L22cee2.  v3:= 0I;
  #L22cee4.  @monitorexit v0
  #L22cee6.  return v3;
  #L22cee8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22ceea.  @monitorexit v0
  #L22ceec.  throw v3;
  catch `java.lang.Throwable` @[L22ceb6..L22ceec] goto L22cee8;
}
procedure `boolean` `i`(`com.bumptech.glide.request.c` v2 @kind this, `j1.a` v3 @kind object) @signature `Lcom/bumptech/glide/request/c;.i:(Lj1/a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22cf0c.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22cf10.  @monitorenter v0
  #L22cf12.  call temp:= `l`(v2) @signature `Lcom/bumptech/glide/request/c;.l:()Z` @kind direct;
  #L22cf18.  v1:= temp;
  #L22cf1a.  if v1 == 0 then goto L22cf3e;
  #L22cf1e.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22cf22.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22cf28.  v3:= temp;
  #L22cf2a.  if v3 == 0 then goto L22cf3e;
  #L22cf2e.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/request/c;.b:()Z` @kind virtual;
  #L22cf34.  v3:= temp;
  #L22cf36.  if v3 != 0 then goto L22cf3e;
  #L22cf3a.  v3:= 1I;
  #L22cf3c.  goto L22cf40;
  #L22cf3e.  v3:= 0I;
  #L22cf40.  @monitorexit v0
  #L22cf42.  return v3;
  #L22cf44.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22cf46.  @monitorexit v0
  #L22cf48.  throw v3;
  catch `java.lang.Throwable` @[L22cf12..L22cf48] goto L22cf44;
}
procedure `boolean` `isRunning`(`com.bumptech.glide.request.c` v3 @kind this) @signature `Lcom/bumptech/glide/request/c;.isRunning:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22d108.  v0:= v3.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d10c.  @monitorenter v0
  #L22d10e.  v1:= v3.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d112.  v2:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.a` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d116.  if v1 != v2 then goto L22d11e;
  #L22d11a.  v1:= 1I;
  #L22d11c.  goto L22d120;
  #L22d11e.  v1:= 0I;
  #L22d120.  @monitorexit v0
  #L22d122.  return v1;
  #L22d124.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d126.  @monitorexit v0
  #L22d128.  throw v1;
  catch `java.lang.Throwable` @[L22d10e..L22d128] goto L22d124;
}
procedure `void` `j`(`com.bumptech.glide.request.c` v4 @kind this) @signature `Lcom/bumptech/glide/request/c;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22d244.  v0:= v4.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d248.  @monitorenter v0
  #L22d24a.  v1:= 1I;
  #L22d24c.  v4.`com.bumptech.glide.request.c.g` @type ^`boolean` := v1 @kind boolean;
  #L22d250.  v1:= 0I;
  #L22d252.  v2:= v4.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d256.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.d` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d25a.  if v2 == v3 then goto L22d278;
  #L22d25e.  v2:= v4.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d262.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.a` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d266.  if v2 == v3 then goto L22d278;
  #L22d26a.  v4.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d26e.  v2:= v4.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d272.  call `j`(v2) @signature `Lj1/a;.j:()V` @kind interface;
  #L22d278.  v2:= v4.`com.bumptech.glide.request.c.g` @type ^`boolean` @kind boolean;
  #L22d27c.  if v2 == 0 then goto L22d29a;
  #L22d280.  v2:= v4.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d284.  v3:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.a` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d288.  if v2 == v3 then goto L22d29a;
  #L22d28c.  v4.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v3 @kind object;
  #L22d290.  v2:= v4.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d294.  call `j`(v2) @signature `Lj1/a;.j:()V` @kind interface;
  #L22d29a.  v4.`com.bumptech.glide.request.c.g` @type ^`boolean` := v1 @kind boolean;
  #L22d29e.  @monitorexit v0
  #L22d2a0.  return @kind void;
  #L22d2a2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d2a4.  v4.`com.bumptech.glide.request.c.g` @type ^`boolean` := v1 @kind boolean;
  #L22d2a8.  throw v2;
  #L22d2aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d2ac.  @monitorexit v0
  #L22d2ae.  throw v1;
  catch `java.lang.Throwable` @[L22d24c..L22d250] goto L22d2aa;
  catch `java.lang.Throwable` @[L22d252..L22d29a] goto L22d2a2;
  catch `java.lang.Throwable` @[L22d29a..L22d2ae] goto L22d2aa;
}
procedure `boolean` `k`(`com.bumptech.glide.request.c` v3 @kind this) @signature `Lcom/bumptech/glide/request/c;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22d058.  v0:= v3.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d05c.  @monitorenter v0
  #L22d05e.  v1:= v3.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d062.  v2:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.d` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d066.  if v1 != v2 then goto L22d06e;
  #L22d06a.  v1:= 1I;
  #L22d06c.  goto L22d070;
  #L22d06e.  v1:= 0I;
  #L22d070.  @monitorexit v0
  #L22d072.  return v1;
  #L22d074.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d076.  @monitorexit v0
  #L22d078.  throw v1;
  catch `java.lang.Throwable` @[L22d05e..L22d078] goto L22d074;
}
procedure `void` `n`(`com.bumptech.glide.request.c` v0 @kind this, `j1.a` v1 @kind object, `j1.a` v2 @kind object) @signature `Lcom/bumptech/glide/request/c;.n:(Lj1/a;Lj1/a;)V` @AccessFlag PUBLIC {
    temp;

  #L22d47c.  v0.`com.bumptech.glide.request.c.c` @type ^`j1.a` := v1 @kind object;
  #L22d480.  v0.`com.bumptech.glide.request.c.d` @type ^`j1.a` := v2 @kind object;
  #L22d484.  return @kind void;
}
procedure `void` `pause`(`com.bumptech.glide.request.c` v2 @kind this) @signature `Lcom/bumptech/glide/request/c;.pause:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22d40c.  v0:= v2.`com.bumptech.glide.request.c.b` @type ^`java.lang.Object` @kind object;
  #L22d410.  @monitorenter v0
  #L22d412.  v1:= v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d416.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator$RequestState;.a:()Z` @kind virtual;
  #L22d41c.  v1:= temp;
  #L22d41e.  if v1 != 0 then goto L22d434;
  #L22d422.  v1:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.b` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d426.  v2.`com.bumptech.glide.request.c.f` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v1 @kind object;
  #L22d42a.  v1:= v2.`com.bumptech.glide.request.c.d` @type ^`j1.a` @kind object;
  #L22d42e.  call `pause`(v1) @signature `Lj1/a;.pause:()V` @kind interface;
  #L22d434.  v1:= v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d438.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/request/RequestCoordinator$RequestState;.a:()Z` @kind virtual;
  #L22d43e.  v1:= temp;
  #L22d440.  if v1 != 0 then goto L22d456;
  #L22d444.  v1:= `@@com.bumptech.glide.request.RequestCoordinator$RequestState.b` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` @kind object;
  #L22d448.  v2.`com.bumptech.glide.request.c.e` @type ^`com.bumptech.glide.request.RequestCoordinator$RequestState` := v1 @kind object;
  #L22d44c.  v1:= v2.`com.bumptech.glide.request.c.c` @type ^`j1.a` @kind object;
  #L22d450.  call `pause`(v1) @signature `Lj1/a;.pause:()V` @kind interface;
  #L22d456.  @monitorexit v0
  #L22d458.  return @kind void;
  #L22d45a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L22d45c.  @monitorexit v0
  #L22d45e.  throw v1;
  catch `java.lang.Throwable` @[L22d412..L22d45e] goto L22d45a;
}
