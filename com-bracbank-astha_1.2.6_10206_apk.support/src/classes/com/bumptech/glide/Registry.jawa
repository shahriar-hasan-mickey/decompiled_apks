record `com.bumptech.glide.Registry` @kind class @AccessFlag PUBLIC {
  `x0.p` `com.bumptech.glide.Registry.a` @AccessFlag PRIVATE_FINAL;
  `i1.a` `com.bumptech.glide.Registry.b` @AccessFlag PRIVATE_FINAL;
  `i1.e` `com.bumptech.glide.Registry.c` @AccessFlag PRIVATE_FINAL;
  `i1.f` `com.bumptech.glide.Registry.d` @AccessFlag PRIVATE_FINAL;
  `r0.f` `com.bumptech.glide.Registry.e` @AccessFlag PRIVATE_FINAL;
  `f1.f` `com.bumptech.glide.Registry.f` @AccessFlag PRIVATE_FINAL;
  `i1.b` `com.bumptech.glide.Registry.g` @AccessFlag PRIVATE_FINAL;
  `i1.d` `com.bumptech.glide.Registry.h` @AccessFlag PRIVATE_FINAL;
  `i1.c` `com.bumptech.glide.Registry.i` @AccessFlag PRIVATE_FINAL;
  `x.e` `com.bumptech.glide.Registry.j` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.Registry` v3 @kind this) @signature `Lcom/bumptech/glide/Registry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L21f81c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21f822.  v0:= new `i1.d`;
  #L21f826.  call `<init>`(v0) @signature `Li1/d;.<init>:()V` @kind direct;
  #L21f82c.  v3.`com.bumptech.glide.Registry.h` @type ^`i1.d` := v0 @kind object;
  #L21f830.  v0:= new `i1.c`;
  #L21f834.  call `<init>`(v0) @signature `Li1/c;.<init>:()V` @kind direct;
  #L21f83a.  v3.`com.bumptech.glide.Registry.i` @type ^`i1.c` := v0 @kind object;
  #L21f83e.  call temp:= `e`() @signature `Lo1/a;.e:()Lx/e;` @kind static;
  #L21f844.  v0:= temp @kind object;
  #L21f846.  v3.`com.bumptech.glide.Registry.j` @type ^`x.e` := v0 @kind object;
  #L21f84a.  v1:= new `x0.p`;
  #L21f84e.  call `<init>`(v1, v0) @signature `Lx0/p;.<init>:(Lx/e;)V` @kind direct;
  #L21f854.  v3.`com.bumptech.glide.Registry.a` @type ^`x0.p` := v1 @kind object;
  #L21f858.  v0:= new `i1.a`;
  #L21f85c.  call `<init>`(v0) @signature `Li1/a;.<init>:()V` @kind direct;
  #L21f862.  v3.`com.bumptech.glide.Registry.b` @type ^`i1.a` := v0 @kind object;
  #L21f866.  v0:= new `i1.e`;
  #L21f86a.  call `<init>`(v0) @signature `Li1/e;.<init>:()V` @kind direct;
  #L21f870.  v3.`com.bumptech.glide.Registry.c` @type ^`i1.e` := v0 @kind object;
  #L21f874.  v0:= new `i1.f`;
  #L21f878.  call `<init>`(v0) @signature `Li1/f;.<init>:()V` @kind direct;
  #L21f87e.  v3.`com.bumptech.glide.Registry.d` @type ^`i1.f` := v0 @kind object;
  #L21f882.  v0:= new `r0.f`;
  #L21f886.  call `<init>`(v0) @signature `Lr0/f;.<init>:()V` @kind direct;
  #L21f88c.  v3.`com.bumptech.glide.Registry.e` @type ^`r0.f` := v0 @kind object;
  #L21f890.  v0:= new `f1.f`;
  #L21f894.  call `<init>`(v0) @signature `Lf1/f;.<init>:()V` @kind direct;
  #L21f89a.  v3.`com.bumptech.glide.Registry.f` @type ^`f1.f` := v0 @kind object;
  #L21f89e.  v0:= new `i1.b`;
  #L21f8a2.  call `<init>`(v0) @signature `Li1/b;.<init>:()V` @kind direct;
  #L21f8a8.  v3.`com.bumptech.glide.Registry.g` @type ^`i1.b` := v0 @kind object;
  #L21f8ac.  v0:= "Gif" @kind object;
  #L21f8b0.  v1:= "Bitmap" @kind object;
  #L21f8b4.  v2:= "BitmapDrawable" @kind object;
  #L21f8b8.  temp:= new `java.lang.String`[v0, v1, v2];
  #L21f8be.  v0:= temp @kind object;
  #L21f8c0.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L21f8c6.  v0:= temp @kind object;
  #L21f8c8.  call temp:= `r`(v3, v0) @signature `Lcom/bumptech/glide/Registry;.r:(Ljava/util/List;)Lcom/bumptech/glide/Registry;` @kind virtual;
  #L21f8ce.  return @kind void;
}
procedure `java.util.List` `f`(`com.bumptech.glide.Registry` v11 @kind this, `java.lang.Class` v12 @kind object, `java.lang.Class` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/bumptech/glide/Registry;.f:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L21f5b4.  v0:= new `java.util.ArrayList`;
  #L21f5b8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L21f5be.  v1:= v11.`com.bumptech.glide.Registry.c` @type ^`i1.e` @kind object;
  #L21f5c2.  call temp:= `d`(v1, v12, v13) @signature `Li1/e;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f5c8.  v13:= temp @kind object;
  #L21f5ca.  call temp:= `iterator`(v13) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21f5d0.  v13:= temp @kind object;
  #L21f5d2.  call temp:= `hasNext`(v13) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21f5d8.  v1:= temp;
  #L21f5da.  if v1 == 0 then goto L21f64c;
  #L21f5de.  call temp:= `next`(v13) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21f5e4.  v1:= temp @kind object;
  #L21f5e6.  v1:= (`java.lang.Class`) v1 @kind object;
  #L21f5ea.  v2:= v11.`com.bumptech.glide.Registry.f` @type ^`f1.f` @kind object;
  #L21f5ee.  call temp:= `b`(v2, v1, v14) @signature `Lf1/f;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f5f4.  v2:= temp @kind object;
  #L21f5f6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21f5fc.  v9:= temp @kind object;
  #L21f5fe.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21f604.  v2:= temp;
  #L21f606.  if v2 == 0 then goto L21f5d2;
  #L21f60a.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21f610.  v2:= temp @kind object;
  #L21f612.  v5:= v2 @kind object;
  #L21f614.  v5:= (`java.lang.Class`) v5 @kind object;
  #L21f618.  v2:= v11.`com.bumptech.glide.Registry.c` @type ^`i1.e` @kind object;
  #L21f61c.  call temp:= `b`(v2, v12, v1) @signature `Li1/e;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f622.  v6:= temp @kind object;
  #L21f624.  v2:= v11.`com.bumptech.glide.Registry.f` @type ^`f1.f` @kind object;
  #L21f628.  call temp:= `a`(v2, v1, v5) @signature `Lf1/f;.a:(Ljava/lang/Class;Ljava/lang/Class;)Lf1/e;` @kind virtual;
  #L21f62e.  v7:= temp @kind object;
  #L21f630.  v10:= new `com.bumptech.glide.load.engine.g`;
  #L21f634.  v8:= v11.`com.bumptech.glide.Registry.j` @type ^`x.e` @kind object;
  #L21f638.  v2:= v10 @kind object;
  #L21f63a.  v3:= v12 @kind object;
  #L21f63c.  v4:= v1 @kind object;
  #L21f63e.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/g;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lf1/e;Lx/e;)V` @kind direct;
  #L21f644.  call temp:= `add`(v0, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21f64a.  goto L21f5fe;
  #L21f64c.  return v0 @kind object;
}
procedure `com.bumptech.glide.Registry` `a`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `q0.e` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.a:(Ljava/lang/Class;Ljava/lang/Class;Lq0/e;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f418.  v0:= "legacy_append" @kind object;
  #L21f41c.  call temp:= `e`(v1, v0, v2, v3, v4) @signature `Lcom/bumptech/glide/Registry;.e:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;Lq0/e;)Lcom/bumptech/glide/Registry;` @kind virtual;
  #L21f422.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `b`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `x0.o` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.b:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f434.  v0:= v1.`com.bumptech.glide.Registry.a` @type ^`x0.p` @kind object;
  #L21f438.  call `a`(v0, v2, v3, v4) @signature `Lx0/p;.a:(Ljava/lang/Class;Ljava/lang/Class;Lx0/o;)V` @kind virtual;
  #L21f43e.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `c`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `q0.a` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.c:(Ljava/lang/Class;Lq0/a;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f450.  v0:= v1.`com.bumptech.glide.Registry.b` @type ^`i1.a` @kind object;
  #L21f454.  call `a`(v0, v2, v3) @signature `Li1/a;.a:(Ljava/lang/Class;Lq0/a;)V` @kind virtual;
  #L21f45a.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `d`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `q0.f` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.d:(Ljava/lang/Class;Lq0/f;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f46c.  v0:= v1.`com.bumptech.glide.Registry.d` @type ^`i1.f` @kind object;
  #L21f470.  call `a`(v0, v2, v3) @signature `Li1/f;.a:(Ljava/lang/Class;Lq0/f;)V` @kind virtual;
  #L21f476.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `e`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `q0.e` v5 @kind object) @signature `Lcom/bumptech/glide/Registry;.e:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;Lq0/e;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f488.  v0:= v1.`com.bumptech.glide.Registry.c` @type ^`i1.e` @kind object;
  #L21f48c.  call `a`(v0, v2, v5, v3, v4) @signature `Li1/e;.a:(Ljava/lang/String;Lq0/e;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L21f492.  return v1 @kind object;
}
procedure `java.util.List` `g`(`com.bumptech.glide.Registry` v2 @kind this) @signature `Lcom/bumptech/glide/Registry;.g:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21f660.  v0:= v2.`com.bumptech.glide.Registry.g` @type ^`i1.b` @kind object;
  #L21f664.  call temp:= `b`(v0) @signature `Li1/b;.b:()Ljava/util/List;` @kind virtual;
  #L21f66a.  v0:= temp @kind object;
  #L21f66c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L21f672.  v1:= temp;
  #L21f674.  if v1 != 0 then goto L21f67a;
  #L21f678.  return v0 @kind object;
  #L21f67a.  v0:= new `com.bumptech.glide.Registry$NoImageHeaderParserException`;
  #L21f67e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/Registry$NoImageHeaderParserException;.<init>:()V` @kind direct;
  #L21f684.  throw v0;
}
procedure `com.bumptech.glide.load.engine.o` `h`(`com.bumptech.glide.Registry` v9 @kind this, `java.lang.Class` v10 @kind object, `java.lang.Class` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/bumptech/glide/Registry;.h:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21f544.  v0:= v9.`com.bumptech.glide.Registry.i` @type ^`i1.c` @kind object;
  #L21f548.  call temp:= `a`(v0, v10, v11, v12) @signature `Li1/c;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/o;` @kind virtual;
  #L21f54e.  v0:= temp @kind object;
  #L21f550.  v1:= v9.`com.bumptech.glide.Registry.i` @type ^`i1.c` @kind object;
  #L21f554.  call temp:= `c`(v1, v0) @signature `Li1/c;.c:(Lcom/bumptech/glide/load/engine/o;)Z` @kind virtual;
  #L21f55a.  v1:= temp;
  #L21f55c.  v2:= 0I;
  #L21f55e.  if v1 == 0 then goto L21f564;
  #L21f562.  return v2 @kind object;
  #L21f564.  if v0 != 0 then goto L21f5a0;
  #L21f568.  call temp:= `f`(v9, v10, v11, v12) @signature `Lcom/bumptech/glide/Registry;.f:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind direct;
  #L21f56e.  v7:= temp @kind object;
  #L21f570.  call temp:= `isEmpty`(v7) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L21f576.  v0:= temp;
  #L21f578.  if v0 == 0 then goto L21f580;
  #L21f57c.  v0:= v2 @kind object;
  #L21f57e.  goto L21f596;
  #L21f580.  v0:= new `com.bumptech.glide.load.engine.o`;
  #L21f584.  v8:= v9.`com.bumptech.glide.Registry.j` @type ^`x.e` @kind object;
  #L21f588.  v3:= v0 @kind object;
  #L21f58a.  v4:= v10 @kind object;
  #L21f58c.  v5:= v11 @kind object;
  #L21f58e.  v6:= v12 @kind object;
  #L21f590.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/o;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;Lx/e;)V` @kind direct;
  #L21f596.  v1:= v9.`com.bumptech.glide.Registry.i` @type ^`i1.c` @kind object;
  #L21f59a.  call `d`(v1, v10, v11, v12, v0) @signature `Li1/c;.d:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/engine/o;)V` @kind virtual;
  #L21f5a0.  return v0 @kind object;
}
procedure `java.util.List` `i`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.i:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f698.  v0:= v1.`com.bumptech.glide.Registry.a` @type ^`x0.p` @kind object;
  #L21f69c.  call temp:= `d`(v0, v2) @signature `Lx0/p;.d:(Ljava/lang/Object;)Ljava/util/List;` @kind virtual;
  #L21f6a2.  v2:= temp @kind object;
  #L21f6a4.  return v2 @kind object;
}
procedure `java.util.List` `j`(`com.bumptech.glide.Registry` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lcom/bumptech/glide/Registry;.j:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21f6b8.  v0:= v5.`com.bumptech.glide.Registry.h` @type ^`i1.d` @kind object;
  #L21f6bc.  call temp:= `a`(v0, v6, v7, v8) @signature `Li1/d;.a:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f6c2.  v0:= temp @kind object;
  #L21f6c4.  if v0 != 0 then goto L21f768;
  #L21f6c8.  v0:= new `java.util.ArrayList`;
  #L21f6cc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L21f6d2.  v1:= v5.`com.bumptech.glide.Registry.a` @type ^`x0.p` @kind object;
  #L21f6d6.  call temp:= `c`(v1, v6) @signature `Lx0/p;.c:(Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f6dc.  v1:= temp @kind object;
  #L21f6de.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21f6e4.  v1:= temp @kind object;
  #L21f6e6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21f6ec.  v2:= temp;
  #L21f6ee.  if v2 == 0 then goto L21f756;
  #L21f6f2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21f6f8.  v2:= temp @kind object;
  #L21f6fa.  v2:= (`java.lang.Class`) v2 @kind object;
  #L21f6fe.  v3:= v5.`com.bumptech.glide.Registry.c` @type ^`i1.e` @kind object;
  #L21f702.  call temp:= `d`(v3, v2, v7) @signature `Li1/e;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f708.  v2:= temp @kind object;
  #L21f70a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L21f710.  v2:= temp @kind object;
  #L21f712.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L21f718.  v3:= temp;
  #L21f71a.  if v3 == 0 then goto L21f6e6;
  #L21f71e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L21f724.  v3:= temp @kind object;
  #L21f726.  v3:= (`java.lang.Class`) v3 @kind object;
  #L21f72a.  v4:= v5.`com.bumptech.glide.Registry.f` @type ^`f1.f` @kind object;
  #L21f72e.  call temp:= `b`(v4, v3, v8) @signature `Lf1/f;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @kind virtual;
  #L21f734.  v4:= temp @kind object;
  #L21f736.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L21f73c.  v4:= temp;
  #L21f73e.  if v4 != 0 then goto L21f712;
  #L21f742.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L21f748.  v4:= temp;
  #L21f74a.  if v4 != 0 then goto L21f712;
  #L21f74e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21f754.  goto L21f712;
  #L21f756.  v1:= v5.`com.bumptech.glide.Registry.h` @type ^`i1.d` @kind object;
  #L21f75a.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L21f760.  v2:= temp @kind object;
  #L21f762.  call `b`(v1, v6, v7, v8, v2) @signature `Li1/d;.b:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/util/List;)V` @kind virtual;
  #L21f768.  return v0 @kind object;
}
procedure `q0.f` `k`(`com.bumptech.glide.Registry` v2 @kind this, `t0.c` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.k:(Lt0/c;)Lq0/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21f7bc.  v0:= v2.`com.bumptech.glide.Registry.d` @type ^`i1.f` @kind object;
  #L21f7c0.  call temp:= `c`(v3) @signature `Lt0/c;.c:()Ljava/lang/Class;` @kind interface;
  #L21f7c6.  v1:= temp @kind object;
  #L21f7c8.  call temp:= `b`(v0, v1) @signature `Li1/f;.b:(Ljava/lang/Class;)Lq0/f;` @kind virtual;
  #L21f7ce.  v0:= temp @kind object;
  #L21f7d0.  if v0 == 0 then goto L21f7d6;
  #L21f7d4.  return v0 @kind object;
  #L21f7d6.  v0:= new `com.bumptech.glide.Registry$NoResultEncoderAvailableException`;
  #L21f7da.  call temp:= `c`(v3) @signature `Lt0/c;.c:()Ljava/lang/Class;` @kind interface;
  #L21f7e0.  v3:= temp @kind object;
  #L21f7e2.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/Registry$NoResultEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L21f7e8.  throw v0;
}
procedure `r0.e` `l`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.l:(Ljava/lang/Object;)Lr0/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f7fc.  v0:= v1.`com.bumptech.glide.Registry.e` @type ^`r0.f` @kind object;
  #L21f800.  call temp:= `a`(v0, v2) @signature `Lr0/f;.a:(Ljava/lang/Object;)Lr0/e;` @kind virtual;
  #L21f806.  v2:= temp @kind object;
  #L21f808.  return v2 @kind object;
}
procedure `q0.a` `m`(`com.bumptech.glide.Registry` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.m:(Ljava/lang/Object;)Lq0/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21f77c.  v0:= v2.`com.bumptech.glide.Registry.b` @type ^`i1.a` @kind object;
  #L21f780.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L21f786.  v1:= temp @kind object;
  #L21f788.  call temp:= `b`(v0, v1) @signature `Li1/a;.b:(Ljava/lang/Class;)Lq0/a;` @kind virtual;
  #L21f78e.  v0:= temp @kind object;
  #L21f790.  if v0 == 0 then goto L21f796;
  #L21f794.  return v0 @kind object;
  #L21f796.  v0:= new `com.bumptech.glide.Registry$NoSourceEncoderAvailableException`;
  #L21f79a.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L21f7a0.  v3:= temp @kind object;
  #L21f7a2.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/Registry$NoSourceEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L21f7a8.  throw v0;
}
procedure `boolean` `n`(`com.bumptech.glide.Registry` v1 @kind this, `t0.c` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.n:(Lt0/c;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f3e8.  v0:= v1.`com.bumptech.glide.Registry.d` @type ^`i1.f` @kind object;
  #L21f3ec.  call temp:= `c`(v2) @signature `Lt0/c;.c:()Ljava/lang/Class;` @kind interface;
  #L21f3f2.  v2:= temp @kind object;
  #L21f3f4.  call temp:= `b`(v0, v2) @signature `Li1/f;.b:(Ljava/lang/Class;)Lq0/f;` @kind virtual;
  #L21f3fa.  v2:= temp @kind object;
  #L21f3fc.  if v2 == 0 then goto L21f404;
  #L21f400.  v2:= 1I;
  #L21f402.  goto L21f406;
  #L21f404.  v2:= 0I;
  #L21f406.  return v2;
}
procedure `com.bumptech.glide.Registry` `o`(`com.bumptech.glide.Registry` v1 @kind this, `com.bumptech.glide.load.ImageHeaderParser` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.o:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f4a4.  v0:= v1.`com.bumptech.glide.Registry.g` @type ^`i1.b` @kind object;
  #L21f4a8.  call `a`(v0, v2) @signature `Li1/b;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)V` @kind virtual;
  #L21f4ae.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `p`(`com.bumptech.glide.Registry` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `f1.e` v4 @kind object) @signature `Lcom/bumptech/glide/Registry;.p:(Ljava/lang/Class;Ljava/lang/Class;Lf1/e;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f4c0.  v0:= v1.`com.bumptech.glide.Registry.f` @type ^`f1.f` @kind object;
  #L21f4c4.  call `c`(v0, v2, v3, v4) @signature `Lf1/f;.c:(Ljava/lang/Class;Ljava/lang/Class;Lf1/e;)V` @kind virtual;
  #L21f4ca.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `q`(`com.bumptech.glide.Registry` v1 @kind this, `r0.e$a` v2 @kind object) @signature `Lcom/bumptech/glide/Registry;.q:(Lr0/e$a;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f4dc.  v0:= v1.`com.bumptech.glide.Registry.e` @type ^`r0.f` @kind object;
  #L21f4e0.  call `b`(v0, v2) @signature `Lr0/f;.b:(Lr0/e$a;)V` @kind virtual;
  #L21f4e6.  return v1 @kind object;
}
procedure `com.bumptech.glide.Registry` `r`(`com.bumptech.glide.Registry` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/bumptech/glide/Registry;.r:(Ljava/util/List;)Lcom/bumptech/glide/Registry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L21f4f8.  v0:= new `java.util.ArrayList`;
  #L21f4fc.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21f502.  v1:= temp;
  #L21f504.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L21f50a.  call temp:= `addAll`(v0, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L21f510.  v3:= 0I;
  #L21f512.  v1:= "legacy_prepend_all" @kind object;
  #L21f516.  call `add`(v0, v3, v1) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L21f51c.  v3:= "legacy_append" @kind object;
  #L21f520.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21f526.  v3:= v2.`com.bumptech.glide.Registry.c` @type ^`i1.e` @kind object;
  #L21f52a.  call `e`(v3, v0) @signature `Li1/e;.e:(Ljava/util/List;)V` @kind virtual;
  #L21f530.  return v2 @kind object;
}
