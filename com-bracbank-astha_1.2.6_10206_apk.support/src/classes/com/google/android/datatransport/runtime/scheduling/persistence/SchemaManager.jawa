record `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` @kind class @AccessFlag FINAL extends `android.database.sqlite.SQLiteOpenHelper` @kind class {
  `boolean` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @AccessFlag PRIVATE;
  `int` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_CONTEXTS_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_CONTEXT_BACKEND_PRIORITY_INDEX_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENTS_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENT_BACKEND_INDEX_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_EVENT_METADATA_SQL_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_GLOBAL_LOG_EVENT_STATE_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_INITIAL_GLOBAL_LOG_EVENT_STATE_VALUE_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_LOG_EVENT_DROPPED_TABLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_PAYLOADS_TABLE_V4` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DB_NAME` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_CONTEXTS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_EVENTS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_EVENT_METADATA_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_GLOBAL_LOG_EVENT_STATE_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_LOG_EVENT_DROPPED_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.DROP_PAYLOADS_SQL` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V1` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V2` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V3` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V4` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATION_TO_V5` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.SCHEMA_VERSION` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23c304.  v0:= new `java.lang.StringBuilder`;
  #L23c308.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c30e.  v1:= "INSERT INTO global_log_event_state VALUES (" @kind object;
  #L23c312.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c318.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L23c31e.  v1:= temp @kind wide;
  #L23c320.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c326.  v1:= ")" @kind object;
  #L23c32a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c330.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c336.  v0:= temp @kind object;
  #L23c338.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_INITIAL_GLOBAL_LOG_EVENT_STATE_VALUE_SQL` @type ^`java.lang.String` := v0 @kind object;
  #L23c33c.  v0:= 5I;
  #L23c33e.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.SCHEMA_VERSION` @type ^`int` := v0;
  #L23c342.  v1:= `@@com.google.android.datatransport.runtime.scheduling.persistence.f0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.f0` @kind object;
  #L23c346.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V1` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v1 @kind object;
  #L23c34a.  v2:= `@@com.google.android.datatransport.runtime.scheduling.persistence.c0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.c0` @kind object;
  #L23c34e.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V2` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v2 @kind object;
  #L23c352.  v3:= `@@com.google.android.datatransport.runtime.scheduling.persistence.d0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.d0` @kind object;
  #L23c356.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V3` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v3 @kind object;
  #L23c35a.  v4:= `@@com.google.android.datatransport.runtime.scheduling.persistence.e0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.e0` @kind object;
  #L23c35e.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATE_TO_V4` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v4 @kind object;
  #L23c362.  v5:= `@@com.google.android.datatransport.runtime.scheduling.persistence.g0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.g0` @kind object;
  #L23c366.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.MIGRATION_TO_V5` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v5 @kind object;
  #L23c36a.  v0:= new `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`[v0];
  #L23c36e.  v6:= 0I;
  #L23c370.  v0[v6]:= v1 @kind object;
  #L23c374.  v1:= 1I;
  #L23c376.  v0[v1]:= v2 @kind object;
  #L23c37a.  v1:= 2I;
  #L23c37c.  v0[v1]:= v3 @kind object;
  #L23c380.  v1:= 3I;
  #L23c382.  v0[v1]:= v4 @kind object;
  #L23c386.  v1:= 4I;
  #L23c388.  v0[v1]:= v5 @kind object;
  #L23c38c.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L23c392.  v0:= temp @kind object;
  #L23c394.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` := v0 @kind object;
  #L23c398.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<init>:(Landroid/content/Context;Ljava/lang/String;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23c3ac.  v0:= 0I;
  #L23c3ae.  call `<init>`(v1, v2, v3, v0, v4) @signature `Landroid/database/sqlite/SQLiteOpenHelper;.<init>:(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)V` @kind direct;
  #L23c3b4.  v2:= 0I;
  #L23c3b6.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` := v2 @kind boolean;
  #L23c3ba.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @type ^`int` := v4;
  #L23c3be.  return @kind void;
}
procedure `void` `K`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.K:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L23c2d4.  call `lambda$static$0`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$0:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L23c2da.  return @kind void;
}
procedure `void` `R`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.R:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L23c2ec.  call `lambda$static$4`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$4:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L23c2f2.  return @kind void;
}
procedure `void` `ensureConfigured`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23c3d0.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` @kind boolean;
  #L23c3d4.  if v0 != 0 then goto L23c3de;
  #L23c3d8.  call `onConfigure`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind virtual;
  #L23c3de.  return @kind void;
}
procedure `void` `g`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L23c28c.  call `lambda$static$1`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$1:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L23c292.  return @kind void;
}
procedure `void` `h`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.h:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L23c2a4.  call `lambda$static$2`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$2:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L23c2aa.  return @kind void;
}
procedure `void` `lambda$static$0`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$0:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c3f0.  v0:= "CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)" @kind object;
  #L23c3f4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c3fa.  v0:= "CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)" @kind object;
  #L23c3fe.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c404.  v0:= "CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)" @kind object;
  #L23c408.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c40e.  v0:= "CREATE INDEX events_backend_id on events(context_id)" @kind object;
  #L23c412.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c418.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)" @kind object;
  #L23c41c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c422.  return @kind void;
}
procedure `void` `lambda$static$1`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$1:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c434.  v0:= "ALTER TABLE transport_contexts ADD COLUMN extras BLOB" @kind object;
  #L23c438.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c43e.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority_extras on transport_contexts(backend_name, priority, extras)" @kind object;
  #L23c442.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c448.  v0:= "DROP INDEX contexts_backend_priority" @kind object;
  #L23c44c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c452.  return @kind void;
}
procedure `void` `lambda$static$2`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$2:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c464.  v0:= "ALTER TABLE events ADD COLUMN payload_encoding TEXT" @kind object;
  #L23c468.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c46e.  return @kind void;
}
procedure `void` `lambda$static$3`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$3:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c480.  v0:= "ALTER TABLE events ADD COLUMN inline BOOLEAN NOT NULL DEFAULT 1" @kind object;
  #L23c484.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c48a.  v0:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L23c48e.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c494.  v0:= "CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))" @kind object;
  #L23c498.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c49e.  return @kind void;
}
procedure `void` `lambda$static$4`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$4:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c4b0.  v0:= "DROP TABLE IF EXISTS log_event_dropped" @kind object;
  #L23c4b4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c4ba.  v0:= "DROP TABLE IF EXISTS global_log_event_state" @kind object;
  #L23c4be.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c4c4.  v0:= "CREATE TABLE log_event_dropped (log_source VARCHAR(45) NOT NULL,reason INTEGER NOT NULL,events_dropped_count BIGINT NOT NULL,PRIMARY KEY(log_source, reason))" @kind object;
  #L23c4c8.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c4ce.  v0:= "CREATE TABLE global_log_event_state (last_metrics_upload_ms BIGINT PRIMARY KEY)" @kind object;
  #L23c4d2.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c4d8.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.CREATE_INITIAL_GLOBAL_LOG_EVENT_STATE_VALUE_SQL` @type ^`java.lang.String` @kind object;
  #L23c4dc.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c4e2.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object, `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23c548.  call `ensureConfigured`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L23c54e.  v0:= 0I;
  #L23c550.  call `upgrade`(v1, v2, v0, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L23c556.  return @kind void;
}
procedure `void` `s`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.s:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L23c2bc.  call `lambda$static$3`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.lambda$static$3:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L23c2c2.  return @kind void;
}
procedure `void` `upgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L23c5f4.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` @kind object;
  #L23c5f8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23c5fe.  v1:= temp;
  #L23c600.  if v6 > v1 then goto L23c626;
  #L23c604.  if v5 >= v6 then goto L23c624;
  #L23c608.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.INCREMENTAL_MIGRATIONS` @type ^`java.util.List` @kind object;
  #L23c60c.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23c612.  v0:= temp @kind object;
  #L23c614.  v0:= (`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`) v0 @kind object;
  #L23c618.  call `upgrade`(v0, v4) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind interface;
  #L23c61e.  v5:= v5 + 1;
  #L23c622.  goto L23c604;
  #L23c624.  return @kind void;
  #L23c626.  v4:= new `java.lang.IllegalArgumentException`;
  #L23c62a.  v1:= new `java.lang.StringBuilder`;
  #L23c62e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c634.  v2:= "Migration from " @kind object;
  #L23c638.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c63e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c644.  v5:= " to " @kind object;
  #L23c648.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c64e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c654.  v5:= " was requested, but cannot be performed. Only " @kind object;
  #L23c658.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c65e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23c664.  v5:= temp;
  #L23c666.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c66c.  v5:= " migrations are provided" @kind object;
  #L23c670.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c676.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c67c.  v5:= temp @kind object;
  #L23c67e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c684.  throw v4;
}
procedure `void` `onConfigure`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c4f4.  v0:= 1I;
  #L23c4f6.  v3.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.configured` @type ^`boolean` := v0 @kind boolean;
  #L23c4fa.  v1:= 0I;
  #L23c4fc.  v1:= new `java.lang.String`[v1];
  #L23c500.  v2:= "PRAGMA busy_timeout=0;" @kind object;
  #L23c504.  call temp:= `rawQuery`(v4, v2, v1) @signature `Landroid/database/sqlite/SQLiteDatabase;.rawQuery:(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;` @kind virtual;
  #L23c50a.  v1:= temp @kind object;
  #L23c50c.  call `close`(v1) @signature `Landroid/database/Cursor;.close:()V` @kind interface;
  #L23c512.  call `setForeignKeyConstraintsEnabled`(v4, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.setForeignKeyConstraintsEnabled:(Z)V` @kind virtual;
  #L23c518.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23c52c.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.schemaVersion` @type ^`int`;
  #L23c530.  call `onCreate`(v1, v2, v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L23c536.  return @kind void;
}
procedure `void` `onDowngrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onDowngrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L23c568.  v2:= "DROP TABLE events" @kind object;
  #L23c56c.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c572.  v2:= "DROP TABLE event_metadata" @kind object;
  #L23c576.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c57c.  v2:= "DROP TABLE transport_contexts" @kind object;
  #L23c580.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c586.  v2:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L23c58a.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c590.  v2:= "DROP TABLE IF EXISTS log_event_dropped" @kind object;
  #L23c594.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c59a.  v2:= "DROP TABLE IF EXISTS global_log_event_state" @kind object;
  #L23c59e.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L23c5a4.  call `onCreate`(v0, v1, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L23c5aa.  return @kind void;
}
procedure `void` `onOpen`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onOpen:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;

  #L23c5bc.  call `ensureConfigured`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L23c5c2.  return @kind void;
}
procedure `void` `onUpgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onUpgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L23c5d4.  call `ensureConfigured`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.ensureConfigured:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L23c5da.  call `upgrade`(v0, v1, v2, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L23c5e0.  return @kind void;
}
