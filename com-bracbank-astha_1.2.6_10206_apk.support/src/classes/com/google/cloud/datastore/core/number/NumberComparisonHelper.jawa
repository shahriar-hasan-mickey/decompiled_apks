record `com.google.cloud.datastore.core.number.NumberComparisonHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `double` `@@com.google.cloud.datastore.core.number.NumberComparisonHelper.LONG_EXCLUSIVE_UPPER_BOUND_AS_DOUBLE` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@com.google.cloud.datastore.core.number.NumberComparisonHelper.LONG_INCLUSIVE_LOWER_BOUND_AS_DOUBLE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@com.google.cloud.datastore.core.number.NumberComparisonHelper.MAX_SAFE_LONG` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@com.google.cloud.datastore.core.number.NumberComparisonHelper.MIN_SAFE_LONG` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.google.cloud.datastore.core.number.NumberComparisonHelper` v0 @kind this) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L449e30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L449e36.  return @kind void;
}
procedure `int` `compareLongs`(`long` v1 , `long` v3 ) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.compareLongs:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L449d5c.  v0:= lcmp(v1, v3);
  #L449d60.  if v0 >= 0 then goto L449d68;
  #L449d64.  v1:= -1I;
  #L449d66.  return v1;
  #L449d68.  if v0 <= 0 then goto L449d70;
  #L449d6c.  v1:= 1I;
  #L449d6e.  return v1;
  #L449d70.  v1:= 0I;
  #L449d72.  return v1;
}
procedure `int` `firestoreCompareDoubleWithLong`(`double` v4 , `long` v6 ) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.firestoreCompareDoubleWithLong:(DJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449d84.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L449d8a.  v0:= temp;
  #L449d8c.  v1:= -1I;
  #L449d8e.  if v0 == 0 then goto L449d94;
  #L449d92.  return v1;
  #L449d94.  v2:= -9.223372036854776E18D;
  #L449d98.  v0:= dcmpg(v4, v2);
  #L449d9c.  if v0 >= 0 then goto L449da2;
  #L449da0.  return v1;
  #L449da2.  v0:= 9.223372036854776E18D;
  #L449da6.  v2:= dcmpl(v4, v0);
  #L449daa.  if v2 < 0 then goto L449db2;
  #L449dae.  v4:= 1I;
  #L449db0.  return v4;
  #L449db2.  v0:= (`long`) v4 @kind d2l;
  #L449db4.  call temp:= `compareLongs`(v0, v6) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.compareLongs:(JJ)I` @kind static;
  #L449dba.  v0:= temp;
  #L449dbc.  if v0 == 0 then goto L449dc2;
  #L449dc0.  return v0;
  #L449dc2.  v6:= (`double`) v6 @kind l2d;
  #L449dc4.  call temp:= `firestoreCompareDoubles`(v4, v6) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.firestoreCompareDoubles:(DD)I` @kind static;
  #L449dca.  v4:= temp;
  #L449dcc.  return v4;
}
procedure `int` `firestoreCompareDoubles`(`double` v4 , `double` v6 ) @signature `Lcom/google/cloud/datastore/core/number/NumberComparisonHelper;.firestoreCompareDoubles:(DD)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449de0.  v0:= -1I;
  #L449de2.  v1:= dcmpg(v4, v6);
  #L449de6.  if v1 >= 0 then goto L449dec;
  #L449dea.  return v0;
  #L449dec.  v1:= 1I;
  #L449dee.  v2:= dcmpl(v4, v6);
  #L449df2.  if v2 <= 0 then goto L449df8;
  #L449df6.  return v1;
  #L449df8.  v3:= 0I;
  #L449dfa.  if v2 != 0 then goto L449e00;
  #L449dfe.  return v3;
  #L449e00.  call temp:= `isNaN`(v6) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L449e06.  v6:= temp;
  #L449e08.  if v6 != 0 then goto L449e0e;
  #L449e0c.  return v0;
  #L449e0e.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L449e14.  v4:= temp;
  #L449e16.  if v4 != 0 then goto L449e1c;
  #L449e1a.  return v1;
  #L449e1c.  return v3;
}
