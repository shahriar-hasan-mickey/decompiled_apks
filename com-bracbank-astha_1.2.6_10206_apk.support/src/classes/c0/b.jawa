record `c0.b` @kind class @AccessFlag PUBLIC_FINAL extends `c0.c` @kind class {
}
procedure `void` `<init>`(`c0.b` v0 @kind this) @signature `Lc0/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L207e00.  call `<init>`(v0) @signature `Lc0/c;.<init>:()V` @kind direct;
  #L207e06.  return @kind void;
}
procedure `c0.b` `h`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lc0/b;.h:(Ljava/nio/ByteBuffer;)Lc0/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L207d38.  v0:= new `c0.b`;
  #L207d3c.  call `<init>`(v0) @signature `Lc0/b;.<init>:()V` @kind direct;
  #L207d42.  call temp:= `i`(v1, v0) @signature `Lc0/b;.i:(Ljava/nio/ByteBuffer;Lc0/b;)Lc0/b;` @kind static;
  #L207d48.  v1:= temp @kind object;
  #L207d4a.  return v1 @kind object;
}
procedure `c0.b` `i`(`java.nio.ByteBuffer` v2 @kind object, `c0.b` v3 @kind object) @signature `Lc0/b;.i:(Ljava/nio/ByteBuffer;Lc0/b;)Lc0/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L207d5c.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L207d60.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L207d66.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L207d6c.  v0:= temp;
  #L207d6e.  call temp:= `getInt`(v2, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207d74.  v0:= temp;
  #L207d76.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L207d7c.  v1:= temp;
  #L207d7e.  v0:= v0 + v1 @kind int;
  #L207d80.  call temp:= `f`(v3, v0, v2) @signature `Lc0/b;.f:(ILjava/nio/ByteBuffer;)Lc0/b;` @kind virtual;
  #L207d86.  v2:= temp @kind object;
  #L207d88.  return v2 @kind object;
}
procedure `c0.b` `f`(`c0.b` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/b;.f:(ILjava/nio/ByteBuffer;)Lc0/b;` @AccessFlag PUBLIC {
    temp;

  #L207d20.  call `g`(v0, v1, v2) @signature `Lc0/b;.g:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L207d26.  return v0 @kind object;
}
procedure `void` `g`(`c0.b` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/b;.g:(ILjava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;

  #L207e18.  call `c`(v0, v1, v2) @signature `Lc0/c;.c:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L207e1e.  return @kind void;
}
procedure `c0.a` `j`(`c0.b` v1 @kind this, `c0.a` v2 @kind object, `int` v3 ) @signature `Lc0/b;.j:(Lc0/a;I)Lc0/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L207cd8.  v0:= 6I;
  #L207cda.  call temp:= `b`(v1, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207ce0.  v0:= temp;
  #L207ce2.  if v0 == 0 then goto L207d0a;
  #L207ce6.  call temp:= `d`(v1, v0) @signature `Lc0/c;.d:(I)I` @kind virtual;
  #L207cec.  v0:= temp;
  #L207cee.  v3:= v3 * 4;
  #L207cf2.  v0:= v0 + v3 @kind int;
  #L207cf4.  call temp:= `a`(v1, v0) @signature `Lc0/c;.a:(I)I` @kind virtual;
  #L207cfa.  v3:= temp;
  #L207cfc.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207d00.  call temp:= `f`(v2, v3, v0) @signature `Lc0/a;.f:(ILjava/nio/ByteBuffer;)Lc0/a;` @kind virtual;
  #L207d06.  v2:= temp @kind object;
  #L207d08.  goto L207d0c;
  #L207d0a.  v2:= 0I;
  #L207d0c.  return v2 @kind object;
}
procedure `int` `k`(`c0.b` v1 @kind this) @signature `Lc0/b;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L207d9c.  v0:= 6I;
  #L207d9e.  call temp:= `b`(v1, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207da4.  v0:= temp;
  #L207da6.  if v0 == 0 then goto L207db4;
  #L207daa.  call temp:= `e`(v1, v0) @signature `Lc0/c;.e:(I)I` @kind virtual;
  #L207db0.  v0:= temp;
  #L207db2.  goto L207db6;
  #L207db4.  v0:= 0I;
  #L207db6.  return v0;
}
procedure `int` `l`(`c0.b` v3 @kind this) @signature `Lc0/b;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L207dc8.  v0:= 4I;
  #L207dca.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207dd0.  v0:= temp;
  #L207dd2.  if v0 == 0 then goto L207dea;
  #L207dd6.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207dda.  v2:= v3.`c0.c.a` @type ^`int`;
  #L207dde.  v0:= v0 + v2 @kind int;
  #L207de0.  call temp:= `getInt`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207de6.  v0:= temp;
  #L207de8.  goto L207dec;
  #L207dea.  v0:= 0I;
  #L207dec.  return v0;
}
