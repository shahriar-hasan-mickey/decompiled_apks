record `c0.c` @kind class @AccessFlag PUBLIC {
  `int` `c0.c.a` @AccessFlag PROTECTED;
  `java.nio.ByteBuffer` `c0.c.b` @AccessFlag PROTECTED;
  `int` `c0.c.c` @AccessFlag PRIVATE;
  `int` `c0.c.d` @AccessFlag PRIVATE;
  `c0.d` `c0.c.e` @AccessFlag ;
}
procedure `void` `<init>`(`c0.c` v1 @kind this) @signature `Lc0/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L207ee0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L207ee6.  call temp:= `a`() @signature `Lc0/d;.a:()Lc0/d;` @kind static;
  #L207eec.  v0:= temp @kind object;
  #L207eee.  v1.`c0.c.e` @type ^`c0.d` := v0 @kind object;
  #L207ef2.  return @kind void;
}
procedure `int` `a`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.a:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L207e30.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207e34.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207e3a.  v0:= temp;
  #L207e3c.  v2:= v2 + v0 @kind int;
  #L207e3e.  return v2;
}
procedure `int` `b`(`c0.c` v2 @kind this, `int` v3 ) @signature `Lc0/c;.b:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L207e50.  v0:= v2.`c0.c.d` @type ^`int`;
  #L207e54.  if v3 >= v0 then goto L207e6c;
  #L207e58.  v0:= v2.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207e5c.  v1:= v2.`c0.c.c` @type ^`int`;
  #L207e60.  v1:= v1 + v3 @kind int;
  #L207e62.  call temp:= `getShort`(v0, v1) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L207e68.  v3:= temp;
  #L207e6a.  goto L207e6e;
  #L207e6c.  v3:= 0I;
  #L207e6e.  return v3;
}
procedure `void` `c`(`c0.c` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/c;.c:(ILjava/nio/ByteBuffer;)V` @AccessFlag PROTECTED {
    temp;

  #L207f04.  v0.`c0.c.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L207f08.  if v2 == 0 then goto L207f30;
  #L207f0c.  v0.`c0.c.a` @type ^`int` := v1;
  #L207f10.  call temp:= `getInt`(v2, v1) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207f16.  v2:= temp;
  #L207f18.  v1:= v1 - v2 @kind int;
  #L207f1a.  v0.`c0.c.c` @type ^`int` := v1;
  #L207f1e.  v2:= v0.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207f22.  call temp:= `getShort`(v2, v1) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L207f28.  v1:= temp;
  #L207f2a.  v0.`c0.c.d` @type ^`int` := v1;
  #L207f2e.  goto L207f3e;
  #L207f30.  v1:= 0I;
  #L207f32.  v0.`c0.c.a` @type ^`int` := v1;
  #L207f36.  v0.`c0.c.c` @type ^`int` := v1;
  #L207f3a.  v0.`c0.c.d` @type ^`int` := v1;
  #L207f3e.  return @kind void;
}
procedure `int` `d`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.d:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L207e80.  v0:= v1.`c0.c.a` @type ^`int`;
  #L207e84.  v2:= v2 + v0 @kind int;
  #L207e86.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207e8a.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207e90.  v0:= temp;
  #L207e92.  v2:= v2 + v0 @kind int;
  #L207e94.  v2:= v2 + 4;
  #L207e98.  return v2;
}
procedure `int` `e`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.e:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L207eac.  v0:= v1.`c0.c.a` @type ^`int`;
  #L207eb0.  v2:= v2 + v0 @kind int;
  #L207eb2.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207eb6.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207ebc.  v0:= temp;
  #L207ebe.  v2:= v2 + v0 @kind int;
  #L207ec0.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207ec4.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207eca.  v2:= temp;
  #L207ecc.  return v2;
}
