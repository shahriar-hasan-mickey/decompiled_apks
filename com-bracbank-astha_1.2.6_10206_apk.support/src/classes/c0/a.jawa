record `c0.a` @kind class @AccessFlag PUBLIC_FINAL extends `c0.c` @kind class {
}
procedure `void` `<init>`(`c0.a` v0 @kind this) @signature `Lc0/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L207ca8.  call `<init>`(v0) @signature `Lc0/c;.<init>:()V` @kind direct;
  #L207cae.  return @kind void;
}
procedure `c0.a` `f`(`c0.a` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/a;.f:(ILjava/nio/ByteBuffer;)Lc0/a;` @AccessFlag PUBLIC {
    temp;

  #L207b40.  call `g`(v0, v1, v2) @signature `Lc0/a;.g:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L207b46.  return v0 @kind object;
}
procedure `void` `g`(`c0.a` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/a;.g:(ILjava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;

  #L207cc0.  call `c`(v0, v1, v2) @signature `Lc0/c;.c:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L207cc6.  return @kind void;
}
procedure `int` `h`(`c0.a` v2 @kind this, `int` v3 ) @signature `Lc0/a;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L207b58.  v0:= 16I;
  #L207b5c.  call temp:= `b`(v2, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207b62.  v0:= temp;
  #L207b64.  if v0 == 0 then goto L207b84;
  #L207b68.  v1:= v2.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207b6c.  call temp:= `d`(v2, v0) @signature `Lc0/c;.d:(I)I` @kind virtual;
  #L207b72.  v0:= temp;
  #L207b74.  v3:= v3 * 4;
  #L207b78.  v0:= v0 + v3 @kind int;
  #L207b7a.  call temp:= `getInt`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207b80.  v3:= temp;
  #L207b82.  goto L207b86;
  #L207b84.  v3:= 0I;
  #L207b86.  return v3;
}
procedure `int` `i`(`c0.a` v1 @kind this) @signature `Lc0/a;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L207b98.  v0:= 16I;
  #L207b9c.  call temp:= `b`(v1, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207ba2.  v0:= temp;
  #L207ba4.  if v0 == 0 then goto L207bb2;
  #L207ba8.  call temp:= `e`(v1, v0) @signature `Lc0/c;.e:(I)I` @kind virtual;
  #L207bae.  v0:= temp;
  #L207bb0.  goto L207bb4;
  #L207bb2.  v0:= 0I;
  #L207bb4.  return v0;
}
procedure `boolean` `j`(`c0.a` v4 @kind this) @signature `Lc0/a;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L207b04.  v0:= 6I;
  #L207b06.  call temp:= `b`(v4, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207b0c.  v0:= temp;
  #L207b0e.  v1:= 0I;
  #L207b10.  if v0 == 0 then goto L207b2c;
  #L207b14.  v2:= v4.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207b18.  v3:= v4.`c0.c.a` @type ^`int`;
  #L207b1c.  v0:= v0 + v3 @kind int;
  #L207b1e.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L207b24.  v0:= temp;
  #L207b26.  if v0 == 0 then goto L207b2c;
  #L207b2a.  v1:= 1I;
  #L207b2c.  return v1;
}
procedure `short` `k`(`c0.a` v3 @kind this) @signature `Lc0/a;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L207c00.  v0:= 14I;
  #L207c04.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207c0a.  v0:= temp;
  #L207c0c.  if v0 == 0 then goto L207c24;
  #L207c10.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207c14.  v2:= v3.`c0.c.a` @type ^`int`;
  #L207c18.  v0:= v0 + v2 @kind int;
  #L207c1a.  call temp:= `getShort`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L207c20.  v0:= temp;
  #L207c22.  goto L207c26;
  #L207c24.  v0:= 0I;
  #L207c26.  return v0;
}
procedure `int` `l`(`c0.a` v3 @kind this) @signature `Lc0/a;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L207bc8.  v0:= 4I;
  #L207bca.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207bd0.  v0:= temp;
  #L207bd2.  if v0 == 0 then goto L207bea;
  #L207bd6.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207bda.  v2:= v3.`c0.c.a` @type ^`int`;
  #L207bde.  v0:= v0 + v2 @kind int;
  #L207be0.  call temp:= `getInt`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L207be6.  v0:= temp;
  #L207be8.  goto L207bec;
  #L207bea.  v0:= 0I;
  #L207bec.  return v0;
}
procedure `short` `m`(`c0.a` v3 @kind this) @signature `Lc0/a;.m:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L207c38.  v0:= 8I;
  #L207c3c.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207c42.  v0:= temp;
  #L207c44.  if v0 == 0 then goto L207c5c;
  #L207c48.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207c4c.  v2:= v3.`c0.c.a` @type ^`int`;
  #L207c50.  v0:= v0 + v2 @kind int;
  #L207c52.  call temp:= `getShort`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L207c58.  v0:= temp;
  #L207c5a.  goto L207c5e;
  #L207c5c.  v0:= 0I;
  #L207c5e.  return v0;
}
procedure `short` `n`(`c0.a` v3 @kind this) @signature `Lc0/a;.n:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L207c70.  v0:= 12I;
  #L207c74.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L207c7a.  v0:= temp;
  #L207c7c.  if v0 == 0 then goto L207c94;
  #L207c80.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L207c84.  v2:= v3.`c0.c.a` @type ^`int`;
  #L207c88.  v0:= v0 + v2 @kind int;
  #L207c8a.  call temp:= `getShort`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L207c90.  v0:= temp;
  #L207c92.  goto L207c96;
  #L207c94.  v0:= 0I;
  #L207c96.  return v0;
}
