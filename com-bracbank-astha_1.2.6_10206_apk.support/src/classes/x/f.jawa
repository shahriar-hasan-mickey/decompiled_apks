record `x.f` @kind class @AccessFlag PUBLIC extends `x.e` @kind interface {
  `java.lang.Object`[] `x.f.a` @AccessFlag PRIVATE_FINAL;
  `int` `x.f.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`x.f` v1 @kind this, `int` v2 ) @signature `Lx/f;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5006c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5006ce.  if v2 <= 0 then goto L5006dc;
  #L5006d2.  v2:= new `java.lang.Object`[v2];
  #L5006d6.  v1.`x.f.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L5006da.  return @kind void;
  #L5006dc.  v2:= new `java.lang.IllegalArgumentException`;
  #L5006e0.  v0:= "The max pool size must be > 0" @kind object;
  #L5006e4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5006ea.  throw v2;
}
procedure `boolean` `c`(`x.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lx/f;.c:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L500610.  v0:= 0I;
  #L500612.  v1:= 0I;
  #L500614.  v2:= v3.`x.f.b` @type ^`int`;
  #L500618.  if v1 >= v2 then goto L500632;
  #L50061c.  v2:= v3.`x.f.a` @type ^`java.lang.Object`[] @kind object;
  #L500620.  v2:= v2[v1] @kind object;
  #L500624.  if v2 != v4 then goto L50062c;
  #L500628.  v4:= 1I;
  #L50062a.  return v4;
  #L50062c.  v1:= v1 + 1;
  #L500630.  goto L500614;
  #L500632.  return v0;
}
procedure `boolean` `a`(`x.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lx/f;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L500644.  call temp:= `c`(v3, v4) @signature `Lx/f;.c:(Ljava/lang/Object;)Z` @kind direct;
  #L50064a.  v0:= temp;
  #L50064c.  if v0 != 0 then goto L500670;
  #L500650.  v0:= v3.`x.f.b` @type ^`int`;
  #L500654.  v1:= v3.`x.f.a` @type ^`java.lang.Object`[] @kind object;
  #L500658.  v2:= length @variable v1;
  #L50065a.  if v0 >= v2 then goto L50066c;
  #L50065e.  v1[v0]:= v4 @kind object;
  #L500662.  v4:= 1I;
  #L500664.  v0:= v0 + v4 @kind int;
  #L500666.  v3.`x.f.b` @type ^`int` := v0;
  #L50066a.  return v4;
  #L50066c.  v4:= 0I;
  #L50066e.  return v4;
  #L500670.  v4:= new `java.lang.IllegalStateException`;
  #L500674.  v0:= "Already in the pool!" @kind object;
  #L500678.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50067e.  throw v4;
}
procedure `java.lang.Object` `b`(`x.f` v5 @kind this) @signature `Lx/f;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L500690.  v0:= v5.`x.f.b` @type ^`int`;
  #L500694.  v1:= 0I;
  #L500696.  if v0 <= 0 then goto L5006b4;
  #L50069a.  v2:= v0 + -1;
  #L50069e.  v3:= v5.`x.f.a` @type ^`java.lang.Object`[] @kind object;
  #L5006a2.  v4:= v3[v2] @kind object;
  #L5006a6.  v3[v2]:= v1 @kind object;
  #L5006aa.  v0:= v0 + -1;
  #L5006ae.  v5.`x.f.b` @type ^`int` := v0;
  #L5006b2.  return v4 @kind object;
  #L5006b4.  return v1 @kind object;
}
