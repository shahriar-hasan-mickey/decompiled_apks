record `x.h` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lx/h;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L500928.  if v0 == 0 then goto L50092e;
  #L50092c.  return @kind void;
  #L50092e.  v0:= new `java.lang.IllegalArgumentException`;
  #L500932.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L500938.  v1:= temp @kind object;
  #L50093a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500940.  throw v0;
}
procedure `int` `b`(`int` v5 , `int` v6 , `int` v7 , `java.lang.String` v8 @kind object) @signature `Lx/h;.b:(IIILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50078c.  v0:= 2I;
  #L50078e.  v1:= 1I;
  #L500790.  v2:= 0I;
  #L500792.  v3:= 3I;
  #L500794.  if v5 < v6 then goto L5007da;
  #L500798.  if v5 > v7 then goto L50079e;
  #L50079c.  return v5;
  #L50079e.  v5:= new `java.lang.IllegalArgumentException`;
  #L5007a2.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L5007a6.  v3:= new `java.lang.Object`[v3];
  #L5007aa.  v3[v2]:= v8 @kind object;
  #L5007ae.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L5007b4.  v6:= temp @kind object;
  #L5007b6.  v3[v1]:= v6 @kind object;
  #L5007ba.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L5007c0.  v6:= temp @kind object;
  #L5007c2.  v3[v0]:= v6 @kind object;
  #L5007c6.  v6:= "%s is out of range of [%d, %d] (too high)" @kind object;
  #L5007ca.  call temp:= `format`(v4, v6, v3) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L5007d0.  v6:= temp @kind object;
  #L5007d2.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5007d8.  throw v5;
  #L5007da.  v5:= new `java.lang.IllegalArgumentException`;
  #L5007de.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L5007e2.  v3:= new `java.lang.Object`[v3];
  #L5007e6.  v3[v2]:= v8 @kind object;
  #L5007ea.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L5007f0.  v6:= temp @kind object;
  #L5007f2.  v3[v1]:= v6 @kind object;
  #L5007f6.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L5007fc.  v6:= temp @kind object;
  #L5007fe.  v3[v0]:= v6 @kind object;
  #L500802.  v6:= "%s is out of range of [%d, %d] (too low)" @kind object;
  #L500806.  call temp:= `format`(v4, v6, v3) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50080c.  v6:= temp @kind object;
  #L50080e.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500814.  throw v5;
}
procedure `int` `c`(`int` v0 ) @signature `Lx/h;.c:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L500828.  if v0 < 0 then goto L50082e;
  #L50082c.  return v0;
  #L50082e.  v0:= new `java.lang.IllegalArgumentException`;
  #L500832.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L500838.  throw v0;
}
procedure `int` `d`(`int` v0 , `java.lang.String` v1 @kind object) @signature `Lx/h;.d:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50084c.  if v0 < 0 then goto L500852;
  #L500850.  return v0;
  #L500852.  v0:= new `java.lang.IllegalArgumentException`;
  #L500856.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50085c.  throw v0;
}
procedure `int` `e`(`int` v3 , `int` v4 ) @signature `Lx/h;.e:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L500870.  v0:= v3 ^& v4 @kind int;
  #L500874.  if v0 != v3 then goto L50087a;
  #L500878.  return v3;
  #L50087a.  v0:= new `java.lang.IllegalArgumentException`;
  #L50087e.  v1:= new `java.lang.StringBuilder`;
  #L500882.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500888.  v2:= "Requested flags 0x" @kind object;
  #L50088c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500892.  call temp:= `toHexString`(v3) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L500898.  v3:= temp @kind object;
  #L50089a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5008a0.  v3:= ", but only 0x" @kind object;
  #L5008a4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5008aa.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L5008b0.  v3:= temp @kind object;
  #L5008b2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5008b8.  v3:= " are allowed" @kind object;
  #L5008bc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5008c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5008c8.  v3:= temp @kind object;
  #L5008ca.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5008d0.  throw v0;
}
procedure `java.lang.Object` `f`(`java.lang.Object` v0 @kind object) @signature `Lx/h;.f:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5008e4.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L5008ea.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lx/h;.g:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5008fc.  if v0 == 0 then goto L500902;
  #L500900.  return v0 @kind object;
  #L500902.  v0:= new `java.lang.NullPointerException`;
  #L500906.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50090c.  v1:= temp @kind object;
  #L50090e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500914.  throw v0;
}
procedure `void` `h`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lx/h;.h:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L500954.  if v0 == 0 then goto L50095a;
  #L500958.  return @kind void;
  #L50095a.  v0:= new `java.lang.IllegalStateException`;
  #L50095e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500964.  throw v0;
}
