record `i1.e` @kind class @AccessFlag PUBLIC {
  `java.util.List` `i1.e.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `i1.e.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`i1.e` v1 @kind this) @signature `Li1/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4eaec0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eaec6.  v0:= new `java.util.ArrayList`;
  #L4eaeca.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4eaed0.  v1.`i1.e.a` @type ^`java.util.List` := v0 @kind object;
  #L4eaed4.  v0:= new `java.util.HashMap`;
  #L4eaed8.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L4eaede.  v1.`i1.e.b` @type ^`java.util.Map` := v0 @kind object;
  #L4eaee2.  return @kind void;
}
procedure `java.util.List` `c`(`i1.e` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Li1/e;.c:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4eada0.  @monitorenter v2
  #L4eada2.  v0:= v2.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eada6.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4eadac.  v0:= temp;
  #L4eadae.  if v0 != 0 then goto L4eadbc;
  #L4eadb2.  v0:= v2.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eadb6.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eadbc.  v0:= v2.`i1.e.b` @type ^`java.util.Map` @kind object;
  #L4eadc0.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eadc6.  v0:= temp @kind object;
  #L4eadc8.  v0:= (`java.util.List`) v0 @kind object;
  #L4eadcc.  if v0 != 0 then goto L4eade4;
  #L4eadd0.  v0:= new `java.util.ArrayList`;
  #L4eadd4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4eadda.  v1:= v2.`i1.e.b` @type ^`java.util.Map` @kind object;
  #L4eadde.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eade4.  @monitorexit v2
  #L4eade6.  return v0 @kind object;
  #L4eade8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eadea.  @monitorexit v2
  #L4eadec.  throw v3;
  catch `java.lang.Throwable` @[L4eada2..L4eade4] goto L4eade8;
}
procedure `void` `a`(`i1.e` v1 @kind this, `java.lang.String` v2 @kind object, `q0.e` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Li1/e;.a:(Ljava/lang/String;Lq0/e;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eaef4.  @monitorenter v1
  #L4eaef6.  call temp:= `c`(v1, v2) @signature `Li1/e;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L4eaefc.  v2:= temp @kind object;
  #L4eaefe.  v0:= new `i1.e$a`;
  #L4eaf02.  call `<init>`(v0, v4, v5, v3) @signature `Li1/e$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lq0/e;)V` @kind direct;
  #L4eaf08.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eaf0e.  @monitorexit v1
  #L4eaf10.  return @kind void;
  #L4eaf12.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eaf14.  @monitorexit v1
  #L4eaf16.  throw v2;
  catch `java.lang.Throwable` @[L4eaef6..L4eaf0e] goto L4eaf12;
}
procedure `java.util.List` `b`(`i1.e` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Li1/e;.b:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eacfc.  @monitorenter v5
  #L4eacfe.  v0:= new `java.util.ArrayList`;
  #L4ead02.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ead08.  v1:= v5.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4ead0c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ead12.  v1:= temp @kind object;
  #L4ead14.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ead1a.  v2:= temp;
  #L4ead1c.  if v2 == 0 then goto L4ead7a;
  #L4ead20.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ead26.  v2:= temp @kind object;
  #L4ead28.  v2:= (`java.lang.String`) v2 @kind object;
  #L4ead2c.  v3:= v5.`i1.e.b` @type ^`java.util.Map` @kind object;
  #L4ead30.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ead36.  v2:= temp @kind object;
  #L4ead38.  v2:= (`java.util.List`) v2 @kind object;
  #L4ead3c.  if v2 != 0 then goto L4ead42;
  #L4ead40.  goto L4ead14;
  #L4ead42.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4ead48.  v2:= temp @kind object;
  #L4ead4a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4ead50.  v3:= temp;
  #L4ead52.  if v3 == 0 then goto L4ead14;
  #L4ead56.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4ead5c.  v3:= temp @kind object;
  #L4ead5e.  v3:= (`i1.e$a`) v3 @kind object;
  #L4ead62.  call temp:= `a`(v3, v6, v7) @signature `Li1/e$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L4ead68.  v4:= temp;
  #L4ead6a.  if v4 == 0 then goto L4ead4a;
  #L4ead6e.  v3:= v3.`i1.e$a.c` @type ^`q0.e` @kind object;
  #L4ead72.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ead78.  goto L4ead4a;
  #L4ead7a.  @monitorexit v5
  #L4ead7c.  return v0 @kind object;
  #L4ead7e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ead80.  @monitorexit v5
  #L4ead82.  throw v6;
  catch `java.lang.Throwable` @[L4eacfe..L4ead78] goto L4ead7e;
}
procedure `java.util.List` `d`(`i1.e` v5 @kind this, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Li1/e;.d:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eae0c.  @monitorenter v5
  #L4eae0e.  v0:= new `java.util.ArrayList`;
  #L4eae12.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4eae18.  v1:= v5.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eae1c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eae22.  v1:= temp @kind object;
  #L4eae24.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eae2a.  v2:= temp;
  #L4eae2c.  if v2 == 0 then goto L4eae9a;
  #L4eae30.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eae36.  v2:= temp @kind object;
  #L4eae38.  v2:= (`java.lang.String`) v2 @kind object;
  #L4eae3c.  v3:= v5.`i1.e.b` @type ^`java.util.Map` @kind object;
  #L4eae40.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4eae46.  v2:= temp @kind object;
  #L4eae48.  v2:= (`java.util.List`) v2 @kind object;
  #L4eae4c.  if v2 != 0 then goto L4eae52;
  #L4eae50.  goto L4eae24;
  #L4eae52.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eae58.  v2:= temp @kind object;
  #L4eae5a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eae60.  v3:= temp;
  #L4eae62.  if v3 == 0 then goto L4eae24;
  #L4eae66.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eae6c.  v3:= temp @kind object;
  #L4eae6e.  v3:= (`i1.e$a`) v3 @kind object;
  #L4eae72.  call temp:= `a`(v3, v6, v7) @signature `Li1/e$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L4eae78.  v4:= temp;
  #L4eae7a.  if v4 == 0 then goto L4eae5a;
  #L4eae7e.  v4:= v3.`i1.e$a.b` @type ^`java.lang.Class` @kind object;
  #L4eae82.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4eae88.  v4:= temp;
  #L4eae8a.  if v4 != 0 then goto L4eae5a;
  #L4eae8e.  v3:= v3.`i1.e$a.b` @type ^`java.lang.Class` @kind object;
  #L4eae92.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eae98.  goto L4eae5a;
  #L4eae9a.  @monitorexit v5
  #L4eae9c.  return v0 @kind object;
  #L4eae9e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eaea0.  @monitorexit v5
  #L4eaea2.  throw v6;
  catch `java.lang.Throwable` @[L4eae0e..L4eae98] goto L4eae9e;
}
procedure `void` `e`(`i1.e` v4 @kind this, `java.util.List` v5 @kind object) @signature `Li1/e;.e:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eaf34.  @monitorenter v4
  #L4eaf36.  v0:= new `java.util.ArrayList`;
  #L4eaf3a.  v1:= v4.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eaf3e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4eaf44.  v1:= v4.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eaf48.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4eaf4e.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eaf54.  v1:= temp @kind object;
  #L4eaf56.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eaf5c.  v2:= temp;
  #L4eaf5e.  if v2 == 0 then goto L4eaf7a;
  #L4eaf62.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eaf68.  v2:= temp @kind object;
  #L4eaf6a.  v2:= (`java.lang.String`) v2 @kind object;
  #L4eaf6e.  v3:= v4.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eaf72.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eaf78.  goto L4eaf56;
  #L4eaf7a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4eaf80.  v0:= temp @kind object;
  #L4eaf82.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4eaf88.  v1:= temp;
  #L4eaf8a.  if v1 == 0 then goto L4eafb2;
  #L4eaf8e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4eaf94.  v1:= temp @kind object;
  #L4eaf96.  v1:= (`java.lang.String`) v1 @kind object;
  #L4eaf9a.  call temp:= `contains`(v5, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4eafa0.  v2:= temp;
  #L4eafa2.  if v2 != 0 then goto L4eaf82;
  #L4eafa6.  v2:= v4.`i1.e.a` @type ^`java.util.List` @kind object;
  #L4eafaa.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eafb0.  goto L4eaf82;
  #L4eafb2.  @monitorexit v4
  #L4eafb4.  return @kind void;
  #L4eafb6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eafb8.  @monitorexit v4
  #L4eafba.  throw v5;
  catch `java.lang.Throwable` @[L4eaf36..L4eafb0] goto L4eafb6;
}
