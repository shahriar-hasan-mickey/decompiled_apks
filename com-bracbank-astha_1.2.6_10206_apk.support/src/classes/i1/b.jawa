record `i1.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `i1.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`i1.b` v1 @kind this) @signature `Li1/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ea9c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ea9ca.  v0:= new `java.util.ArrayList`;
  #L4ea9ce.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4ea9d4.  v1.`i1.b.a` @type ^`java.util.List` := v0 @kind object;
  #L4ea9d8.  return @kind void;
}
procedure `void` `a`(`i1.b` v1 @kind this, `com.bumptech.glide.load.ImageHeaderParser` v2 @kind object) @signature `Li1/b;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea9ec.  @monitorenter v1
  #L4ea9ee.  v0:= v1.`i1.b.a` @type ^`java.util.List` @kind object;
  #L4ea9f2.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4ea9f8.  @monitorexit v1
  #L4ea9fa.  return @kind void;
  #L4ea9fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ea9fe.  @monitorexit v1
  #L4eaa00.  throw v2;
  catch `java.lang.Throwable` @[L4ea9ee..L4ea9f8] goto L4ea9fc;
}
procedure `java.util.List` `b`(`i1.b` v1 @kind this) @signature `Li1/b;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ea998.  @monitorenter v1
  #L4ea99a.  v0:= v1.`i1.b.a` @type ^`java.util.List` @kind object;
  #L4ea99e.  @monitorexit v1
  #L4ea9a0.  return v0 @kind object;
  #L4ea9a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ea9a4.  @monitorexit v1
  #L4ea9a6.  throw v0;
  catch `java.lang.Throwable` @[L4ea99a..L4ea99e] goto L4ea9a2;
}
