record `g1.i` @kind class @AccessFlag PUBLIC {
  `java.util.Set` `g1.i.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `g1.i.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `g1.i.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`g1.i` v1 @kind this) @signature `Lg1/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e84a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e84aa.  v0:= new `java.util.WeakHashMap`;
  #L4e84ae.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L4e84b4.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L4e84ba.  v0:= temp @kind object;
  #L4e84bc.  v1.`g1.i.a` @type ^`java.util.Set` := v0 @kind object;
  #L4e84c0.  v0:= new `java.util.ArrayList`;
  #L4e84c4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4e84ca.  v1.`g1.i.b` @type ^`java.util.List` := v0 @kind object;
  #L4e84ce.  return @kind void;
}
procedure `boolean` `a`(`g1.i` v3 @kind this, `j1.a` v4 @kind object) @signature `Lg1/i;.a:(Lj1/a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e83f0.  v0:= 1I;
  #L4e83f2.  if v4 != 0 then goto L4e83f8;
  #L4e83f6.  return v0;
  #L4e83f8.  v1:= v3.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e83fc.  call temp:= `remove`(v1, v4) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8402.  v1:= temp;
  #L4e8404.  v2:= v3.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e8408.  call temp:= `remove`(v2, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4e840e.  v2:= temp;
  #L4e8410.  if v2 != 0 then goto L4e841c;
  #L4e8414.  if v1 == 0 then goto L4e841a;
  #L4e8418.  goto L4e841c;
  #L4e841a.  v0:= 0I;
  #L4e841c.  if v0 == 0 then goto L4e8426;
  #L4e8420.  call `clear`(v4) @signature `Lj1/a;.clear:()V` @kind interface;
  #L4e8426.  return v0;
}
procedure `void` `b`(`g1.i` v2 @kind this) @signature `Lg1/i;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e84e0.  v0:= v2.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e84e4.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L4e84ea.  v0:= temp @kind object;
  #L4e84ec.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e84f2.  v0:= temp @kind object;
  #L4e84f4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e84fa.  v1:= temp;
  #L4e84fc.  if v1 == 0 then goto L4e8514;
  #L4e8500.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e8506.  v1:= temp @kind object;
  #L4e8508.  v1:= (`j1.a`) v1 @kind object;
  #L4e850c.  call temp:= `a`(v2, v1) @signature `Lg1/i;.a:(Lj1/a;)Z` @kind virtual;
  #L4e8512.  goto L4e84f4;
  #L4e8514.  v0:= v2.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e8518.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4e851e.  return @kind void;
}
procedure `void` `c`(`g1.i` v3 @kind this) @signature `Lg1/i;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8530.  v0:= 1I;
  #L4e8532.  v3.`g1.i.c` @type ^`boolean` := v0 @kind boolean;
  #L4e8536.  v0:= v3.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e853a.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L4e8540.  v0:= temp @kind object;
  #L4e8542.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e8548.  v0:= temp @kind object;
  #L4e854a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e8550.  v1:= temp;
  #L4e8552.  if v1 == 0 then goto L4e858c;
  #L4e8556.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e855c.  v1:= temp @kind object;
  #L4e855e.  v1:= (`j1.a`) v1 @kind object;
  #L4e8562.  call temp:= `isRunning`(v1) @signature `Lj1/a;.isRunning:()Z` @kind interface;
  #L4e8568.  v2:= temp;
  #L4e856a.  if v2 != 0 then goto L4e857a;
  #L4e856e.  call temp:= `k`(v1) @signature `Lj1/a;.k:()Z` @kind interface;
  #L4e8574.  v2:= temp;
  #L4e8576.  if v2 == 0 then goto L4e854a;
  #L4e857a.  call `clear`(v1) @signature `Lj1/a;.clear:()V` @kind interface;
  #L4e8580.  v2:= v3.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e8584.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e858a.  goto L4e854a;
  #L4e858c.  return @kind void;
}
procedure `void` `d`(`g1.i` v3 @kind this) @signature `Lg1/i;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e85a0.  v0:= 1I;
  #L4e85a2.  v3.`g1.i.c` @type ^`boolean` := v0 @kind boolean;
  #L4e85a6.  v0:= v3.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e85aa.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L4e85b0.  v0:= temp @kind object;
  #L4e85b2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e85b8.  v0:= temp @kind object;
  #L4e85ba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e85c0.  v1:= temp;
  #L4e85c2.  if v1 == 0 then goto L4e85f0;
  #L4e85c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e85cc.  v1:= temp @kind object;
  #L4e85ce.  v1:= (`j1.a`) v1 @kind object;
  #L4e85d2.  call temp:= `isRunning`(v1) @signature `Lj1/a;.isRunning:()Z` @kind interface;
  #L4e85d8.  v2:= temp;
  #L4e85da.  if v2 == 0 then goto L4e85ba;
  #L4e85de.  call `pause`(v1) @signature `Lj1/a;.pause:()V` @kind interface;
  #L4e85e4.  v2:= v3.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e85e8.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e85ee.  goto L4e85ba;
  #L4e85f0.  return @kind void;
}
procedure `void` `e`(`g1.i` v3 @kind this) @signature `Lg1/i;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e8604.  v0:= v3.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e8608.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L4e860e.  v0:= temp @kind object;
  #L4e8610.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e8616.  v0:= temp @kind object;
  #L4e8618.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e861e.  v1:= temp;
  #L4e8620.  if v1 == 0 then goto L4e866a;
  #L4e8624.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e862a.  v1:= temp @kind object;
  #L4e862c.  v1:= (`j1.a`) v1 @kind object;
  #L4e8630.  call temp:= `k`(v1) @signature `Lj1/a;.k:()Z` @kind interface;
  #L4e8636.  v2:= temp;
  #L4e8638.  if v2 != 0 then goto L4e8618;
  #L4e863c.  call temp:= `g`(v1) @signature `Lj1/a;.g:()Z` @kind interface;
  #L4e8642.  v2:= temp;
  #L4e8644.  if v2 != 0 then goto L4e8618;
  #L4e8648.  call `clear`(v1) @signature `Lj1/a;.clear:()V` @kind interface;
  #L4e864e.  v2:= v3.`g1.i.c` @type ^`boolean` @kind boolean;
  #L4e8652.  if v2 != 0 then goto L4e865e;
  #L4e8656.  call `j`(v1) @signature `Lj1/a;.j:()V` @kind interface;
  #L4e865c.  goto L4e8618;
  #L4e865e.  v2:= v3.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e8662.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8668.  goto L4e8618;
  #L4e866a.  return @kind void;
}
procedure `void` `f`(`g1.i` v3 @kind this) @signature `Lg1/i;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4e867c.  v0:= 0I;
  #L4e867e.  v3.`g1.i.c` @type ^`boolean` := v0 @kind boolean;
  #L4e8682.  v0:= v3.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e8686.  call temp:= `i`(v0) @signature `Ln1/k;.i:(Ljava/util/Collection;)Ljava/util/List;` @kind static;
  #L4e868c.  v0:= temp @kind object;
  #L4e868e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e8694.  v0:= temp @kind object;
  #L4e8696.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e869c.  v1:= temp;
  #L4e869e.  if v1 == 0 then goto L4e86ce;
  #L4e86a2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e86a8.  v1:= temp @kind object;
  #L4e86aa.  v1:= (`j1.a`) v1 @kind object;
  #L4e86ae.  call temp:= `k`(v1) @signature `Lj1/a;.k:()Z` @kind interface;
  #L4e86b4.  v2:= temp;
  #L4e86b6.  if v2 != 0 then goto L4e8696;
  #L4e86ba.  call temp:= `isRunning`(v1) @signature `Lj1/a;.isRunning:()Z` @kind interface;
  #L4e86c0.  v2:= temp;
  #L4e86c2.  if v2 != 0 then goto L4e8696;
  #L4e86c6.  call `j`(v1) @signature `Lj1/a;.j:()V` @kind interface;
  #L4e86cc.  goto L4e8696;
  #L4e86ce.  v0:= v3.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e86d2.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4e86d8.  return @kind void;
}
procedure `void` `g`(`g1.i` v2 @kind this, `j1.a` v3 @kind object) @signature `Lg1/i;.g:(Lj1/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e86ec.  v0:= v2.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e86f0.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e86f6.  v0:= v2.`g1.i.c` @type ^`boolean` @kind boolean;
  #L4e86fa.  if v0 != 0 then goto L4e8706;
  #L4e86fe.  call `j`(v3) @signature `Lj1/a;.j:()V` @kind interface;
  #L4e8704.  goto L4e8732;
  #L4e8706.  call `clear`(v3) @signature `Lj1/a;.clear:()V` @kind interface;
  #L4e870c.  v0:= 2I;
  #L4e870e.  v1:= "RequestTracker" @kind object;
  #L4e8712.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L4e8718.  v0:= temp;
  #L4e871a.  if v0 == 0 then goto L4e8728;
  #L4e871e.  v0:= "Paused, delaying request" @kind object;
  #L4e8722.  call temp:= `v`(v1, v0) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L4e8728.  v0:= v2.`g1.i.b` @type ^`java.util.List` @kind object;
  #L4e872c.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8732.  return @kind void;
}
procedure `java.lang.String` `toString`(`g1.i` v2 @kind this) @signature `Lg1/i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4e8438.  v0:= new `java.lang.StringBuilder`;
  #L4e843c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e8442.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L4e8448.  v1:= temp @kind object;
  #L4e844a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8450.  v1:= "{numRequests=" @kind object;
  #L4e8454.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e845a.  v1:= v2.`g1.i.a` @type ^`java.util.Set` @kind object;
  #L4e845e.  call temp:= `size`(v1) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L4e8464.  v1:= temp;
  #L4e8466.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e846c.  v1:= ", isPaused=" @kind object;
  #L4e8470.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8476.  v1:= v2.`g1.i.c` @type ^`boolean` @kind boolean;
  #L4e847a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8480.  v1:= "}" @kind object;
  #L4e8484.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e848a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e8490.  v0:= temp @kind object;
  #L4e8492.  return v0 @kind object;
}
