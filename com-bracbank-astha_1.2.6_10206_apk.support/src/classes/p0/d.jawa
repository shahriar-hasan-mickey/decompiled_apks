record `p0.d` @kind class @AccessFlag PUBLIC {
  `byte`[] `p0.d.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `p0.d.b` @AccessFlag PRIVATE;
  `p0.c` `p0.d.c` @AccessFlag PRIVATE;
  `int` `p0.d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`p0.d` v1 @kind this) @signature `Lp0/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f3100.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f3106.  v0:= 256I;
  #L4f310a.  v0:= new `byte`[v0];
  #L4f310e.  v1.`p0.d.a` @type ^`byte`[] := v0 @kind object;
  #L4f3112.  v0:= 0I;
  #L4f3114.  v1.`p0.d.d` @type ^`int` := v0;
  #L4f3118.  return @kind void;
}
procedure `boolean` `b`(`p0.d` v1 @kind this) @signature `Lp0/d;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f2f34.  v0:= v1.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f2f38.  v0:= v0.`p0.c.b` @type ^`int`;
  #L4f2f3c.  if v0 == 0 then goto L4f2f44;
  #L4f2f40.  v0:= 1I;
  #L4f2f42.  goto L4f2f46;
  #L4f2f44.  v0:= 0I;
  #L4f2f46.  return v0;
}
procedure `int` `d`(`p0.d` v2 @kind this) @signature `Lp0/d;.d:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f2f58.  v0:= v2.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f2f5c.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L4f2f62.  v0:= temp;
  #L4f2f64.  v0:= v0 ^& 255;
  #L4f2f68.  goto L4f2f76;
  #L4f2f6a.  v0:= v2.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f2f6e.  v1:= 1I;
  #L4f2f70.  v0.`p0.c.b` @type ^`int` := v1;
  #L4f2f74.  v0:= 0I;
  #L4f2f76.  return v0;
  catch `java.lang.Exception` @[L4f2f58..L4f2f64] goto L4f2f6a;
}
procedure `void` `e`(`p0.d` v8 @kind this) @signature `Lp0/d;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f3148.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f314c.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f3150.  call temp:= `n`(v8) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f3156.  v1:= temp;
  #L4f3158.  v0.`p0.b.a` @type ^`int` := v1;
  #L4f315c.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3160.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f3164.  call temp:= `n`(v8) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f316a.  v1:= temp;
  #L4f316c.  v0.`p0.b.b` @type ^`int` := v1;
  #L4f3170.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3174.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f3178.  call temp:= `n`(v8) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f317e.  v1:= temp;
  #L4f3180.  v0.`p0.b.c` @type ^`int` := v1;
  #L4f3184.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3188.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f318c.  call temp:= `n`(v8) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f3192.  v1:= temp;
  #L4f3194.  v0.`p0.b.d` @type ^`int` := v1;
  #L4f3198.  call temp:= `d`(v8) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f319e.  v0:= temp;
  #L4f31a0.  v1:= v0 ^& 128;
  #L4f31a4.  v2:= 0I;
  #L4f31a6.  v3:= 1I;
  #L4f31a8.  if v1 == 0 then goto L4f31b0;
  #L4f31ac.  v1:= 1I;
  #L4f31ae.  goto L4f31b2;
  #L4f31b0.  v1:= 0I;
  #L4f31b2.  v4:= 2.0D;
  #L4f31b6.  v6:= v0 ^& 7;
  #L4f31ba.  v6:= v6 + v3 @kind int;
  #L4f31bc.  v6:= (`double`) v6 @kind i2d;
  #L4f31be.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f31c4.  v4:= temp @kind wide;
  #L4f31c6.  v4:= (`int`) v4 @kind d2i;
  #L4f31c8.  v5:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f31cc.  v5:= v5.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f31d0.  v0:= v0 ^& 64;
  #L4f31d4.  if v0 == 0 then goto L4f31da;
  #L4f31d8.  v2:= 1I;
  #L4f31da.  v5.`p0.b.e` @type ^`boolean` := v2 @kind boolean;
  #L4f31de.  if v1 == 0 then goto L4f31f0;
  #L4f31e2.  call temp:= `g`(v8, v4) @signature `Lp0/d;.g:(I)[I` @kind direct;
  #L4f31e8.  v0:= temp @kind object;
  #L4f31ea.  v5.`p0.b.k` @type ^`int`[] := v0 @kind object;
  #L4f31ee.  goto L4f31f6;
  #L4f31f0.  v0:= 0I;
  #L4f31f2.  v5.`p0.b.k` @type ^`int`[] := v0 @kind object;
  #L4f31f6.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f31fa.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f31fe.  v1:= v8.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f3202.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4f3208.  v1:= temp;
  #L4f320a.  v0.`p0.b.j` @type ^`int` := v1;
  #L4f320e.  call `r`(v8) @signature `Lp0/d;.r:()V` @kind direct;
  #L4f3214.  call temp:= `b`(v8) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f321a.  v0:= temp;
  #L4f321c.  if v0 == 0 then goto L4f3222;
  #L4f3220.  return @kind void;
  #L4f3222.  v0:= v8.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3226.  v1:= v0.`p0.c.c` @type ^`int`;
  #L4f322a.  v1:= v1 + v3 @kind int;
  #L4f322c.  v0.`p0.c.c` @type ^`int` := v1;
  #L4f3230.  v1:= v0.`p0.c.e` @type ^`java.util.List` @kind object;
  #L4f3234.  v0:= v0.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f3238.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f323e.  return @kind void;
}
procedure `void` `f`(`p0.d` v4 @kind this) @signature `Lp0/d;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f3250.  call temp:= `d`(v4) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f3256.  v0:= temp;
  #L4f3258.  v4.`p0.d.d` @type ^`int` := v0;
  #L4f325c.  if v0 <= 0 then goto L4f32dc;
  #L4f3260.  v0:= 0I;
  #L4f3262.  v1:= 0I;
  #L4f3264.  v1:= v4.`p0.d.d` @type ^`int`;
  #L4f3268.  if v0 >= v1 then goto L4f32dc;
  #L4f326c.  v1:= v1 - v0 @kind int;
  #L4f326e.  v2:= v4.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f3272.  v3:= v4.`p0.d.a` @type ^`byte`[] @kind object;
  #L4f3276.  call temp:= `get`(v2, v3, v0, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f327c.  v0:= v0 + v1 @kind int;
  #L4f327e.  goto L4f3264;
  #L4f3280.  
  #L4f3282.  v2:= 3I;
  #L4f3284.  v3:= "GifHeaderParser" @kind object;
  #L4f3288.  call temp:= `isLoggable`(v3, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L4f328e.  v2:= temp;
  #L4f3290.  if v2 == 0 then goto L4f32d2;
  #L4f3294.  v2:= new `java.lang.StringBuilder`;
  #L4f3298.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f329e.  v3:= "Error Reading Block n: " @kind object;
  #L4f32a2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32a8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32ae.  v0:= " count: " @kind object;
  #L4f32b2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32b8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32be.  v0:= " blockSize: " @kind object;
  #L4f32c2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32c8.  v0:= v4.`p0.d.d` @type ^`int`;
  #L4f32cc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f32d2.  v0:= v4.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f32d6.  v1:= 1I;
  #L4f32d8.  v0.`p0.c.b` @type ^`int` := v1;
  #L4f32dc.  return @kind void;
  catch `java.lang.Exception` @[L4f3264..L4f327c] goto L4f3280;
}
procedure `int`[] `g`(`p0.d` v9 @kind this, `int` v10 ) @signature `Lp0/d;.g:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f2fb8.  v0:= v10 * 3;
  #L4f2fbc.  v0:= new `byte`[v0];
  #L4f2fc0.  v1:= 0I;
  #L4f2fc2.  v2:= v9.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f2fc6.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f2fcc.  v2:= 256I;
  #L4f2fd0.  v1:= new `int`[v2];
  #L4f2fd4.  v2:= 0I;
  #L4f2fd6.  v3:= 0I;
  #L4f2fd8.  if v2 >= v10 then goto L4f3036;
  #L4f2fdc.  v4:= v3 + 1;
  #L4f2fe0.  v3:= v0[v3] @kind byte;
  #L4f2fe4.  v3:= v3 ^& 255;
  #L4f2fe8.  v5:= v4 + 1;
  #L4f2fec.  v4:= v0[v4] @kind byte;
  #L4f2ff0.  v4:= v4 ^& 255;
  #L4f2ff4.  v6:= v5 + 1;
  #L4f2ff8.  v5:= v0[v5] @kind byte;
  #L4f2ffc.  v5:= v5 ^& 255;
  #L4f3000.  v7:= v2 + 1;
  #L4f3004.  v8:= -16777216I;
  #L4f3008.  v3:= v3 ^< 16;
  #L4f300c.  v3:= v3 ^| v8 @kind int;
  #L4f300e.  v4:= v4 ^< 8;
  #L4f3012.  v3:= v3 ^| v4 @kind int;
  #L4f3014.  v3:= v3 ^| v5 @kind int;
  #L4f3016.  v1[v2]:= v3;
  #L4f301a.  v3:= v6;
  #L4f301c.  v2:= v7;
  #L4f301e.  goto L4f2fd8;
  #L4f3020.  v10:= "GifHeaderParser" @kind object;
  #L4f3024.  v0:= 3I;
  #L4f3026.  call temp:= `isLoggable`(v10, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L4f302c.  v10:= v9.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3030.  v0:= 1I;
  #L4f3032.  v10.`p0.c.b` @type ^`int` := v0;
  #L4f3036.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L4f2fc2..L4f301a] goto L4f3020;
}
procedure `void` `h`(`p0.d` v1 @kind this) @signature `Lp0/d;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f3300.  v0:= 2147483647I;
  #L4f3306.  call `i`(v1, v0) @signature `Lp0/d;.i:(I)V` @kind direct;
  #L4f330c.  return @kind void;
}
procedure `void` `i`(`p0.d` v5 @kind this, `int` v6 ) @signature `Lp0/d;.i:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f3320.  v0:= 0I;
  #L4f3322.  v1:= 0I;
  #L4f3324.  if v1 != 0 then goto L4f3444;
  #L4f3328.  call temp:= `b`(v5) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f332e.  v2:= temp;
  #L4f3330.  if v2 != 0 then goto L4f3444;
  #L4f3334.  v2:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3338.  v2:= v2.`p0.c.c` @type ^`int`;
  #L4f333c.  if v2 > v6 then goto L4f3444;
  #L4f3340.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f3346.  v2:= temp;
  #L4f3348.  v3:= 33I;
  #L4f334c.  v4:= 1I;
  #L4f334e.  if v2 == v3 then goto L4f3392;
  #L4f3352.  v3:= 44I;
  #L4f3356.  if v2 == v3 then goto L4f3370;
  #L4f335a.  v3:= 59I;
  #L4f335e.  if v2 == v3 then goto L4f336c;
  #L4f3362.  v2:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3366.  v2.`p0.c.b` @type ^`int` := v4;
  #L4f336a.  goto L4f3324;
  #L4f336c.  v1:= 1I;
  #L4f336e.  goto L4f3324;
  #L4f3370.  v2:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3374.  v3:= v2.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f3378.  if v3 != 0 then goto L4f338a;
  #L4f337c.  v3:= new `p0.b`;
  #L4f3380.  call `<init>`(v3) @signature `Lp0/b;.<init>:()V` @kind direct;
  #L4f3386.  v2.`p0.c.d` @type ^`p0.b` := v3 @kind object;
  #L4f338a.  call `e`(v5) @signature `Lp0/d;.e:()V` @kind direct;
  #L4f3390.  goto L4f3324;
  #L4f3392.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f3398.  v2:= temp;
  #L4f339a.  if v2 == v4 then goto L4f343a;
  #L4f339e.  v3:= 249I;
  #L4f33a2.  if v2 == v3 then goto L4f341e;
  #L4f33a6.  v3:= 254I;
  #L4f33aa.  if v2 == v3 then goto L4f3416;
  #L4f33ae.  v3:= 255I;
  #L4f33b2.  if v2 == v3 then goto L4f33be;
  #L4f33b6.  call `q`(v5) @signature `Lp0/d;.q:()V` @kind direct;
  #L4f33bc.  goto L4f3324;
  #L4f33be.  call `f`(v5) @signature `Lp0/d;.f:()V` @kind direct;
  #L4f33c4.  v2:= new `java.lang.StringBuilder`;
  #L4f33c8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f33ce.  v3:= 0I;
  #L4f33d0.  v4:= 11I;
  #L4f33d4.  if v3 >= v4 then goto L4f33ee;
  #L4f33d8.  v4:= v5.`p0.d.a` @type ^`byte`[] @kind object;
  #L4f33dc.  v4:= v4[v3] @kind byte;
  #L4f33e0.  v4:= (`char`) v4 @kind i2c;
  #L4f33e2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f33e8.  v3:= v3 + 1;
  #L4f33ec.  goto L4f33d0;
  #L4f33ee.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f33f4.  v2:= temp @kind object;
  #L4f33f6.  v3:= "NETSCAPE2.0" @kind object;
  #L4f33fa.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f3400.  v2:= temp;
  #L4f3402.  if v2 == 0 then goto L4f340e;
  #L4f3406.  call `m`(v5) @signature `Lp0/d;.m:()V` @kind direct;
  #L4f340c.  goto L4f3324;
  #L4f340e.  call `q`(v5) @signature `Lp0/d;.q:()V` @kind direct;
  #L4f3414.  goto L4f3324;
  #L4f3416.  call `q`(v5) @signature `Lp0/d;.q:()V` @kind direct;
  #L4f341c.  goto L4f3324;
  #L4f341e.  v2:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3422.  v3:= new `p0.b`;
  #L4f3426.  call `<init>`(v3) @signature `Lp0/b;.<init>:()V` @kind direct;
  #L4f342c.  v2.`p0.c.d` @type ^`p0.b` := v3 @kind object;
  #L4f3430.  call `j`(v5) @signature `Lp0/d;.j:()V` @kind direct;
  #L4f3436.  goto L4f3324;
  #L4f343a.  call `q`(v5) @signature `Lp0/d;.q:()V` @kind direct;
  #L4f3440.  goto L4f3324;
  #L4f3444.  return @kind void;
}
procedure `void` `j`(`p0.d` v5 @kind this) @signature `Lp0/d;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f3458.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f345e.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f3464.  v0:= temp;
  #L4f3466.  v1:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f346a.  v1:= v1.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f346e.  v2:= v0 ^& 28;
  #L4f3472.  v3:= 2I;
  #L4f3474.  v2:= v2 ^> v3 @kind int;
  #L4f3476.  v1.`p0.b.g` @type ^`int` := v2;
  #L4f347a.  v4:= 1I;
  #L4f347c.  if v2 != 0 then goto L4f3484;
  #L4f3480.  v1.`p0.b.g` @type ^`int` := v4;
  #L4f3484.  v0:= v0 ^& v4 @kind int;
  #L4f3486.  if v0 == 0 then goto L4f348c;
  #L4f348a.  goto L4f348e;
  #L4f348c.  v4:= 0I;
  #L4f348e.  v1.`p0.b.f` @type ^`boolean` := v4 @kind boolean;
  #L4f3492.  call temp:= `n`(v5) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f3498.  v0:= temp;
  #L4f349a.  v1:= 10I;
  #L4f349e.  if v0 >= v3 then goto L4f34a6;
  #L4f34a2.  v0:= 10I;
  #L4f34a6.  v2:= v5.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f34aa.  v2:= v2.`p0.c.d` @type ^`p0.b` @kind object;
  #L4f34ae.  v0:= v0 * 10;
  #L4f34b2.  v2.`p0.b.i` @type ^`int` := v0;
  #L4f34b6.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f34bc.  v0:= temp;
  #L4f34be.  v2.`p0.b.h` @type ^`int` := v0;
  #L4f34c2.  call temp:= `d`(v5) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f34c8.  return @kind void;
}
procedure `void` `k`(`p0.d` v3 @kind this) @signature `Lp0/d;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4f34dc.  v0:= new `java.lang.StringBuilder`;
  #L4f34e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f34e6.  v1:= 0I;
  #L4f34e8.  v2:= 6I;
  #L4f34ea.  if v1 >= v2 then goto L4f3504;
  #L4f34ee.  call temp:= `d`(v3) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f34f4.  v2:= temp;
  #L4f34f6.  v2:= (`char`) v2 @kind i2c;
  #L4f34f8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f34fe.  v1:= v1 + 1;
  #L4f3502.  goto L4f34e8;
  #L4f3504.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f350a.  v0:= temp @kind object;
  #L4f350c.  v1:= "GIF" @kind object;
  #L4f3510.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4f3516.  v0:= temp;
  #L4f3518.  if v0 != 0 then goto L4f3528;
  #L4f351c.  v0:= v3.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3520.  v1:= 1I;
  #L4f3522.  v0.`p0.c.b` @type ^`int` := v1;
  #L4f3526.  return @kind void;
  #L4f3528.  call `l`(v3) @signature `Lp0/d;.l:()V` @kind direct;
  #L4f352e.  v0:= v3.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3532.  v0:= v0.`p0.c.h` @type ^`boolean` @kind boolean;
  #L4f3536.  if v0 == 0 then goto L4f356e;
  #L4f353a.  call temp:= `b`(v3) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f3540.  v0:= temp;
  #L4f3542.  if v0 != 0 then goto L4f356e;
  #L4f3546.  v0:= v3.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f354a.  v1:= v0.`p0.c.i` @type ^`int`;
  #L4f354e.  call temp:= `g`(v3, v1) @signature `Lp0/d;.g:(I)[I` @kind direct;
  #L4f3554.  v1:= temp @kind object;
  #L4f3556.  v0.`p0.c.a` @type ^`int`[] := v1 @kind object;
  #L4f355a.  v0:= v3.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f355e.  v1:= v0.`p0.c.a` @type ^`int`[] @kind object;
  #L4f3562.  v2:= v0.`p0.c.j` @type ^`int`;
  #L4f3566.  v1:= v1[v2];
  #L4f356a.  v0.`p0.c.l` @type ^`int` := v1;
  #L4f356e.  return @kind void;
}
procedure `void` `l`(`p0.d` v6 @kind this) @signature `Lp0/d;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f3580.  v0:= v6.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3584.  call temp:= `n`(v6) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f358a.  v1:= temp;
  #L4f358c.  v0.`p0.c.f` @type ^`int` := v1;
  #L4f3590.  v0:= v6.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3594.  call temp:= `n`(v6) @signature `Lp0/d;.n:()I` @kind direct;
  #L4f359a.  v1:= temp;
  #L4f359c.  v0.`p0.c.g` @type ^`int` := v1;
  #L4f35a0.  call temp:= `d`(v6) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f35a6.  v0:= temp;
  #L4f35a8.  v1:= v6.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f35ac.  v2:= v0 ^& 128;
  #L4f35b0.  v3:= 1I;
  #L4f35b2.  if v2 == 0 then goto L4f35ba;
  #L4f35b6.  v2:= 1I;
  #L4f35b8.  goto L4f35bc;
  #L4f35ba.  v2:= 0I;
  #L4f35bc.  v1.`p0.c.h` @type ^`boolean` := v2 @kind boolean;
  #L4f35c0.  v4:= 2.0D;
  #L4f35c4.  v0:= v0 ^& 7;
  #L4f35c8.  v0:= v0 + v3 @kind int;
  #L4f35ca.  v2:= (`double`) v0 @kind i2d;
  #L4f35cc.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L4f35d2.  v2:= temp @kind wide;
  #L4f35d4.  v0:= (`int`) v2 @kind d2i;
  #L4f35d6.  v1.`p0.c.i` @type ^`int` := v0;
  #L4f35da.  v0:= v6.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f35de.  call temp:= `d`(v6) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f35e4.  v1:= temp;
  #L4f35e6.  v0.`p0.c.j` @type ^`int` := v1;
  #L4f35ea.  v0:= v6.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f35ee.  call temp:= `d`(v6) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f35f4.  v1:= temp;
  #L4f35f6.  v0.`p0.c.k` @type ^`int` := v1;
  #L4f35fa.  return @kind void;
}
procedure `void` `m`(`p0.d` v3 @kind this) @signature `Lp0/d;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4f360c.  call `f`(v3) @signature `Lp0/d;.f:()V` @kind direct;
  #L4f3612.  v0:= v3.`p0.d.a` @type ^`byte`[] @kind object;
  #L4f3616.  v1:= 0I;
  #L4f3618.  v1:= v0[v1] @kind byte;
  #L4f361c.  v2:= 1I;
  #L4f361e.  if v1 != v2 then goto L4f3642;
  #L4f3622.  v1:= v0[v2] @kind byte;
  #L4f3626.  v1:= v1 ^& 255;
  #L4f362a.  v2:= 2I;
  #L4f362c.  v0:= v0[v2] @kind byte;
  #L4f3630.  v0:= v0 ^& 255;
  #L4f3634.  v2:= v3.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3638.  v0:= v0 ^< 8;
  #L4f363c.  v0:= v0 ^| v1 @kind int;
  #L4f363e.  v2.`p0.c.m` @type ^`int` := v0;
  #L4f3642.  v0:= v3.`p0.d.d` @type ^`int`;
  #L4f3646.  if v0 <= 0 then goto L4f3656;
  #L4f364a.  call temp:= `b`(v3) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f3650.  v0:= temp;
  #L4f3652.  if v0 == 0 then goto L4f360c;
  #L4f3656.  return @kind void;
}
procedure `int` `n`(`p0.d` v1 @kind this) @signature `Lp0/d;.n:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f2f98.  v0:= v1.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f2f9c.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L4f2fa2.  v0:= temp;
  #L4f2fa4.  return v0;
}
procedure `void` `o`(`p0.d` v2 @kind this) @signature `Lp0/d;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4f3668.  v0:= 0I;
  #L4f366a.  v2.`p0.d.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4f366e.  v0:= v2.`p0.d.a` @type ^`byte`[] @kind object;
  #L4f3672.  v1:= 0I;
  #L4f3674.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L4f367a.  v0:= new `p0.c`;
  #L4f367e.  call `<init>`(v0) @signature `Lp0/c;.<init>:()V` @kind direct;
  #L4f3684.  v2.`p0.d.c` @type ^`p0.c` := v0 @kind object;
  #L4f3688.  v2.`p0.d.d` @type ^`int` := v1;
  #L4f368c.  return @kind void;
}
procedure `void` `q`(`p0.d` v3 @kind this) @signature `Lp0/d;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4f36a0.  call temp:= `d`(v3) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f36a6.  v0:= temp;
  #L4f36a8.  v1:= v3.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f36ac.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L4f36b2.  v1:= temp;
  #L4f36b4.  v1:= v1 + v0 @kind int;
  #L4f36b6.  v2:= v3.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f36ba.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L4f36c0.  v2:= temp;
  #L4f36c2.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4f36c8.  v1:= temp;
  #L4f36ca.  v2:= v3.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f36ce.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4f36d4.  if v0 > 0 then goto L4f36a0;
  #L4f36d8.  return @kind void;
}
procedure `void` `r`(`p0.d` v0 @kind this) @signature `Lp0/d;.r:()V` @AccessFlag PRIVATE {
    temp;

  #L4f36ec.  call temp:= `d`(v0) @signature `Lp0/d;.d:()I` @kind direct;
  #L4f36f2.  call `q`(v0) @signature `Lp0/d;.q:()V` @kind direct;
  #L4f36f8.  return @kind void;
}
procedure `void` `a`(`p0.d` v1 @kind this) @signature `Lp0/d;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f312c.  v0:= 0I;
  #L4f312e.  v1.`p0.d.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L4f3132.  v1.`p0.d.c` @type ^`p0.c` := v0 @kind object;
  #L4f3136.  return @kind void;
}
procedure `p0.c` `c`(`p0.d` v2 @kind this) @signature `Lp0/d;.c:()Lp0/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3058.  v0:= v2.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f305c.  if v0 == 0 then goto L4f30a2;
  #L4f3060.  call temp:= `b`(v2) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f3066.  v0:= temp;
  #L4f3068.  if v0 == 0 then goto L4f3072;
  #L4f306c.  v0:= v2.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f3070.  return v0 @kind object;
  #L4f3072.  call `k`(v2) @signature `Lp0/d;.k:()V` @kind direct;
  #L4f3078.  call temp:= `b`(v2) @signature `Lp0/d;.b:()Z` @kind direct;
  #L4f307e.  v0:= temp;
  #L4f3080.  if v0 != 0 then goto L4f309c;
  #L4f3084.  call `h`(v2) @signature `Lp0/d;.h:()V` @kind direct;
  #L4f308a.  v0:= v2.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f308e.  v1:= v0.`p0.c.c` @type ^`int`;
  #L4f3092.  if v1 >= 0 then goto L4f309c;
  #L4f3096.  v1:= 1I;
  #L4f3098.  v0.`p0.c.b` @type ^`int` := v1;
  #L4f309c.  v0:= v2.`p0.d.c` @type ^`p0.c` @kind object;
  #L4f30a0.  return v0 @kind object;
  #L4f30a2.  v0:= new `java.lang.IllegalStateException`;
  #L4f30a6.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L4f30aa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f30b0.  throw v0;
}
procedure `p0.d` `p`(`p0.d` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lp0/d;.p:(Ljava/nio/ByteBuffer;)Lp0/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f30c4.  call `o`(v1) @signature `Lp0/d;.o:()V` @kind direct;
  #L4f30ca.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f30d0.  v2:= temp @kind object;
  #L4f30d2.  v1.`p0.d.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L4f30d6.  v0:= 0I;
  #L4f30d8.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L4f30de.  v2:= v1.`p0.d.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L4f30e2.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L4f30e6.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L4f30ec.  return v1 @kind object;
}
