record `e.a$f` @kind class @AccessFlag  extends `android.animation.TimeInterpolator` @kind interface {
  `int`[] `e.a$f.a` @AccessFlag PRIVATE;
  `int` `e.a$f.b` @AccessFlag PRIVATE;
  `int` `e.a$f.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`e.a$f` v0 @kind this, `android.graphics.drawable.AnimationDrawable` v1 @kind object, `boolean` v2 ) @signature `Le/a$f;.<init>:(Landroid/graphics/drawable/AnimationDrawable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4dcfcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4dcfd2.  call temp:= `b`(v0, v1, v2) @signature `Le/a$f;.b:(Landroid/graphics/drawable/AnimationDrawable;Z)I` @kind virtual;
  #L4dcfd8.  return @kind void;
}
procedure `int` `a`(`e.a$f` v1 @kind this) @signature `Le/a$f;.a:()I` @AccessFlag  {
    temp;
    v0;

  #L4dcf4c.  v0:= v1.`e.a$f.c` @type ^`int`;
  #L4dcf50.  return v0;
}
procedure `int` `b`(`e.a$f` v5 @kind this, `android.graphics.drawable.AnimationDrawable` v6 @kind object, `boolean` v7 ) @signature `Le/a$f;.b:(Landroid/graphics/drawable/AnimationDrawable;Z)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4dcf64.  call temp:= `getNumberOfFrames`(v6) @signature `Landroid/graphics/drawable/AnimationDrawable;.getNumberOfFrames:()I` @kind virtual;
  #L4dcf6a.  v0:= temp;
  #L4dcf6c.  v5.`e.a$f.b` @type ^`int` := v0;
  #L4dcf70.  v1:= v5.`e.a$f.a` @type ^`int`[] @kind object;
  #L4dcf74.  if v1 == 0 then goto L4dcf7e;
  #L4dcf78.  v1:= length @variable v1;
  #L4dcf7a.  if v1 >= v0 then goto L4dcf86;
  #L4dcf7e.  v1:= new `int`[v0];
  #L4dcf82.  v5.`e.a$f.a` @type ^`int`[] := v1 @kind object;
  #L4dcf86.  v1:= v5.`e.a$f.a` @type ^`int`[] @kind object;
  #L4dcf8a.  v2:= 0I;
  #L4dcf8c.  v3:= 0I;
  #L4dcf8e.  if v2 >= v0 then goto L4dcfb6;
  #L4dcf92.  if v7 == 0 then goto L4dcfa0;
  #L4dcf96.  v4:= v0 - v2 @kind int;
  #L4dcf9a.  v4:= v4 + -1;
  #L4dcf9e.  goto L4dcfa2;
  #L4dcfa0.  v4:= v2;
  #L4dcfa2.  call temp:= `getDuration`(v6, v4) @signature `Landroid/graphics/drawable/AnimationDrawable;.getDuration:(I)I` @kind virtual;
  #L4dcfa8.  v4:= temp;
  #L4dcfaa.  v1[v2]:= v4;
  #L4dcfae.  v3:= v3 + v4 @kind int;
  #L4dcfb0.  v2:= v2 + 1;
  #L4dcfb4.  goto L4dcf8e;
  #L4dcfb6.  v5.`e.a$f.c` @type ^`int` := v3;
  #L4dcfba.  return v3;
}
procedure `float` `getInterpolation`(`e.a$f` v4 @kind this, `float` v5 ) @signature `Le/a$f;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4dceec.  v0:= v4.`e.a$f.c` @type ^`int`;
  #L4dcef0.  v0:= (`float`) v0 @kind i2f;
  #L4dcef2.  v5:= v5 * v0 @kind float;
  #L4dcef6.  v0:= 0.5F;
  #L4dcefa.  v5:= v5 + v0 @kind float;
  #L4dcefc.  v5:= (`int`) v5 @kind f2i;
  #L4dcefe.  v0:= v4.`e.a$f.b` @type ^`int`;
  #L4dcf02.  v1:= v4.`e.a$f.a` @type ^`int`[] @kind object;
  #L4dcf06.  v2:= 0I;
  #L4dcf08.  if v2 >= v0 then goto L4dcf20;
  #L4dcf0c.  v3:= v1[v2];
  #L4dcf10.  if v5 < v3 then goto L4dcf20;
  #L4dcf14.  v3:= v1[v2];
  #L4dcf18.  v5:= v5 - v3 @kind int;
  #L4dcf1a.  v2:= v2 + 1;
  #L4dcf1e.  goto L4dcf08;
  #L4dcf20.  if v2 >= v0 then goto L4dcf30;
  #L4dcf24.  v5:= (`float`) v5 @kind i2f;
  #L4dcf26.  v1:= v4.`e.a$f.c` @type ^`int`;
  #L4dcf2a.  v1:= (`float`) v1 @kind i2f;
  #L4dcf2c.  v5:= v5 / v1 @kind float;
  #L4dcf2e.  goto L4dcf32;
  #L4dcf30.  v5:= 0I;
  #L4dcf32.  v1:= (`float`) v2 @kind i2f;
  #L4dcf34.  v0:= (`float`) v0 @kind i2f;
  #L4dcf36.  v1:= v1 / v0 @kind float;
  #L4dcf38.  v1:= v1 + v5 @kind float;
  #L4dcf3a.  return v1;
}
