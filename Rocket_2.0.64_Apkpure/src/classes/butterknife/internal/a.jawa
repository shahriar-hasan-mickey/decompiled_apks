record `butterknife.internal.a` @kind class @AccessFlag FINAL extends `java.util.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `butterknife.internal.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`butterknife.internal.a` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lbutterknife/internal/a;.<init>:([Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L38ef64.  call `<init>`(v0) @signature `Ljava/util/AbstractList;.<init>:()V` @kind direct;
  #L38ef6a.  v0.`butterknife.internal.a.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L38ef6e.  return @kind void;
}
procedure `boolean` `contains`(`butterknife.internal.a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lbutterknife/internal/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L38eefc.  v0:= v5.`butterknife.internal.a.a` @type ^`java.lang.Object`[] @kind object;
  #L38ef00.  v1:= length @variable v0;
  #L38ef02.  v2:= 0I;
  #L38ef04.  v3:= 0I;
  #L38ef06.  if v3 >= v1 then goto L38ef1c;
  #L38ef0a.  v4:= v0[v3] @kind object;
  #L38ef0e.  if v4 != v6 then goto L38ef16;
  #L38ef12.  v6:= 1I;
  #L38ef14.  return v6;
  #L38ef16.  v3:= v3 + 1;
  #L38ef1a.  goto L38ef06;
  #L38ef1c.  return v2;
}
procedure `java.lang.Object` `get`(`butterknife.internal.a` v1 @kind this, `int` v2 ) @signature `Lbutterknife/internal/a;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38ef48.  v0:= v1.`butterknife.internal.a.a` @type ^`java.lang.Object`[] @kind object;
  #L38ef4c.  v2:= v0[v2] @kind object;
  #L38ef50.  return v2 @kind object;
}
procedure `int` `size`(`butterknife.internal.a` v1 @kind this) @signature `Lbutterknife/internal/a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38ef30.  v0:= v1.`butterknife.internal.a.a` @type ^`java.lang.Object`[] @kind object;
  #L38ef34.  v0:= length @variable v0;
  #L38ef36.  return v0;
}
