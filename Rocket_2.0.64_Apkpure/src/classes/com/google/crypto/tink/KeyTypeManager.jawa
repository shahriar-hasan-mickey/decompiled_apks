record `com.google.crypto.tink.KeyTypeManager` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.Class` `com.google.crypto.tink.KeyTypeManager.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.google.crypto.tink.KeyTypeManager.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.google.crypto.tink.KeyTypeManager.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeyTypeManager` v5 @kind this, `java.lang.Class` v6 @kind object, `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[] v7 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438a74.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438a7a.  v5.`com.google.crypto.tink.KeyTypeManager.a` @type ^`java.lang.Class` := v6 @kind object;
  #L438a7e.  v6:= new `java.util.HashMap`;
  #L438a82.  call `<init>`(v6) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L438a88.  v0:= length @variable v7;
  #L438a8a.  v1:= 0I;
  #L438a8c.  v2:= 0I;
  #L438a8e.  if v2 >= v0 then goto L438afc;
  #L438a92.  v3:= v7[v2] @kind object;
  #L438a96.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L438a9c.  v4:= temp @kind object;
  #L438a9e.  call temp:= `containsKey`(v6, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L438aa4.  v4:= temp;
  #L438aa6.  if v4 != 0 then goto L438abe;
  #L438aaa.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L438ab0.  v4:= temp @kind object;
  #L438ab2.  call temp:= `put`(v6, v4, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L438ab8.  v2:= v2 + 1;
  #L438abc.  goto L438a8e;
  #L438abe.  v6:= new `java.lang.IllegalArgumentException`;
  #L438ac2.  v7:= new `java.lang.StringBuilder`;
  #L438ac6.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L438acc.  v0:= "KeyTypeManager constructed with duplicate factories for primitive " @kind object;
  #L438ad0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438ad6.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L438adc.  v0:= temp @kind object;
  #L438ade.  call temp:= `getCanonicalName`(v0) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L438ae4.  v0:= temp @kind object;
  #L438ae6.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438aec.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L438af2.  v7:= temp @kind object;
  #L438af4.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438afa.  throw v6;
  #L438afc.  v0:= length @variable v7;
  #L438afe.  if v0 <= 0 then goto L438b14;
  #L438b02.  v7:= v7[v1] @kind object;
  #L438b06.  call temp:= `a`(v7) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.a:()Ljava/lang/Class;` @kind virtual;
  #L438b0c.  v7:= temp @kind object;
  #L438b0e.  v5.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` := v7 @kind object;
  #L438b12.  goto L438b1c;
  #L438b14.  v7:= constclass @type ^`java.lang.Void` @kind object;
  #L438b18.  v5.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` := v7 @kind object;
  #L438b1c.  call temp:= `unmodifiableMap`(v6) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L438b22.  v6:= temp @kind object;
  #L438b24.  v5.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` := v6 @kind object;
  #L438b28.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.a:()Ljava/lang/Class;` @AccessFlag FINAL {
    temp;
    v0;

  #L4389b4.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.c` @type ^`java.lang.Class` @kind object;
  #L4389b8.  return v0 @kind object;
}
procedure `java.lang.Class` `getKeyClass`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyClass:()Ljava/lang/Class;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4389cc.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.a` @type ^`java.lang.Class` @kind object;
  #L4389d0.  return v0 @kind object;
}
procedure `java.lang.String` `getKeyType`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeyTypeManager` v2 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4389e4.  v0:= v2.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` @kind object;
  #L4389e8.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4389ee.  v0:= temp @kind object;
  #L4389f0.  v0:= (`com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`) v0 @kind object;
  #L4389f4.  if v0 == 0 then goto L438a02;
  #L4389f8.  call temp:= `getPrimitive`(v0, v3) @signature `Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;.getPrimitive:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4389fe.  v3:= temp @kind object;
  #L438a00.  return v3 @kind object;
  #L438a02.  v3:= new `java.lang.IllegalArgumentException`;
  #L438a06.  v0:= new `java.lang.StringBuilder`;
  #L438a0a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L438a10.  v1:= "Requested primitive class " @kind object;
  #L438a14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438a1a.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L438a20.  v4:= temp @kind object;
  #L438a22.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438a28.  v4:= " not supported." @kind object;
  #L438a2c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438a32.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L438a38.  v4:= temp @kind object;
  #L438a3a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438a40.  throw v3;
}
procedure `int` `getVersion`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.getVersion:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.KeyTypeManager` v2 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438994.  v0:= new `java.lang.UnsupportedOperationException`;
  #L438998.  v1:= "Creating keys is not supported." @kind object;
  #L43899c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4389a2.  throw v0;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`() @signature `Lcom/google/crypto/tink/KeyTypeManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.shaded.protobuf.ByteString` v0 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Set` `supportedPrimitives`(`com.google.crypto.tink.KeyTypeManager` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTypeManager;.supportedPrimitives:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L438a54.  v0:= v1.`com.google.crypto.tink.KeyTypeManager.b` @type ^`java.util.Map` @kind object;
  #L438a58.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L438a5e.  v0:= temp @kind object;
  #L438a60.  return v0 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.shaded.protobuf.MessageLite` v0 @kind object) @signature `Lcom/google/crypto/tink/KeyTypeManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
