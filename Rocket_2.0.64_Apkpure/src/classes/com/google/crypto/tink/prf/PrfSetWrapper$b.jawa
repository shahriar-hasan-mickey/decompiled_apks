record `com.google.crypto.tink.prf.PrfSetWrapper$b` @kind class @AccessFlag  extends `com.google.crypto.tink.prf.PrfSet` @kind class {
  `java.util.Map` `com.google.crypto.tink.prf.PrfSetWrapper$b.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.prf.PrfSetWrapper$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v4 @kind this, `com.google.crypto.tink.PrimitiveSet` v5 @kind object) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444834.  call `<init>`(v4) @signature `Lcom/google/crypto/tink/prf/PrfSet;.<init>:()V` @kind direct;
  #L44483a.  call temp:= `getRawPrimitives`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L444840.  v0:= temp @kind object;
  #L444842.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L444848.  v0:= temp;
  #L44484a.  if v0 != 0 then goto L44493a;
  #L44484e.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L444854.  v0:= temp @kind object;
  #L444856.  if v0 == 0 then goto L44492a;
  #L44485a.  call temp:= `getPrimary`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L444860.  v0:= temp @kind object;
  #L444862.  call temp:= `getKeyId`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L444868.  v0:= temp;
  #L44486a.  v4.`com.google.crypto.tink.prf.PrfSetWrapper$b.b` @type ^`int` := v0;
  #L44486e.  call temp:= `getRawPrimitives`(v5) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L444874.  v5:= temp @kind object;
  #L444876.  v0:= new `java.util.HashMap`;
  #L44487a.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L444880.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L444886.  v5:= temp @kind object;
  #L444888.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44488e.  v1:= temp;
  #L444890.  if v1 == 0 then goto L44491c;
  #L444894.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44489a.  v1:= temp @kind object;
  #L44489c.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L4448a0.  call temp:= `getOutputPrefixType`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L4448a6.  v2:= temp @kind object;
  #L4448a8.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L4448ac.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4448b2.  v2:= temp;
  #L4448b4.  if v2 == 0 then goto L4448dc;
  #L4448b8.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L4448be.  v2:= temp;
  #L4448c0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4448c6.  v2:= temp @kind object;
  #L4448c8.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L4448ce.  v1:= temp @kind object;
  #L4448d0.  v1:= (`com.google.crypto.tink.prf.Prf`) v1 @kind object;
  #L4448d4.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4448da.  goto L444888;
  #L4448dc.  v5:= new `java.security.GeneralSecurityException`;
  #L4448e0.  v0:= new `java.lang.StringBuilder`;
  #L4448e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4448ea.  v2:= "Key " @kind object;
  #L4448ee.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4448f4.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getKeyId:()I` @kind virtual;
  #L4448fa.  v1:= temp;
  #L4448fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L444902.  v1:= " has non raw prefix type" @kind object;
  #L444906.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44490c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L444912.  v0:= temp @kind object;
  #L444914.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44491a.  throw v5;
  #L44491c.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L444922.  v5:= temp @kind object;
  #L444924.  v4.`com.google.crypto.tink.prf.PrfSetWrapper$b.a` @type ^`java.util.Map` := v5 @kind object;
  #L444928.  return @kind void;
  #L44492a.  v5:= new `java.security.GeneralSecurityException`;
  #L44492e.  v0:= "Primary key not set." @kind object;
  #L444932.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L444938.  throw v5;
  #L44493a.  v5:= new `java.security.GeneralSecurityException`;
  #L44493e.  v0:= "No primitives provided." @kind object;
  #L444942.  call `<init>`(v5, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L444948.  throw v5;
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object, `com.google.crypto.tink.prf.PrfSetWrapper$a` v2 @kind object) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Lcom/google/crypto/tink/prf/PrfSetWrapper$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L44495c.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L444962.  return @kind void;
}
procedure `java.util.Map` `getPrfs`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.getPrfs:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44481c.  v0:= v1.`com.google.crypto.tink.prf.PrfSetWrapper$b.a` @type ^`java.util.Map` @kind object;
  #L444820.  return v0 @kind object;
}
procedure `int` `getPrimaryId`(`com.google.crypto.tink.prf.PrfSetWrapper$b` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/PrfSetWrapper$b;.getPrimaryId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444804.  v0:= v1.`com.google.crypto.tink.prf.PrfSetWrapper$b.b` @type ^`int`;
  #L444808.  return v0;
}
