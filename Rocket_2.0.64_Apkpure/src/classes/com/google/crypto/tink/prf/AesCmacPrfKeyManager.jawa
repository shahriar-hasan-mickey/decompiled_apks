record `com.google.crypto.tink.prf.AesCmacPrfKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4437e8.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesCmacPrfKey` @kind object;
  #L4437ec.  v1:= 1I;
  #L4437ee.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L4437f2.  v2:= new `com.google.crypto.tink.prf.AesCmacPrfKeyManager$a`;
  #L4437f6.  v3:= constclass @type ^`com.google.crypto.tink.prf.Prf` @kind object;
  #L4437fa.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L443800.  v3:= 0I;
  #L443802.  v1[v3]:= v2 @kind object;
  #L443806.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L44380c.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256CmacTemplate`() @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.aes256CmacTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4436ec.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacPrfKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacPrfKeyFormat$Builder;` @kind static;
  #L4436f2.  v0:= temp @kind object;
  #L4436f4.  v1:= 32I;
  #L4436f8.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacPrfKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCmacPrfKeyFormat$Builder;` @kind virtual;
  #L4436fe.  v0:= temp @kind object;
  #L443700.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L443706.  v0:= temp @kind object;
  #L443708.  v0:= (`com.google.crypto.tink.proto.AesCmacPrfKeyFormat`) v0 @kind object;
  #L44370c.  v1:= new `com.google.crypto.tink.prf.AesCmacPrfKeyManager`;
  #L443710.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.<init>:()V` @kind direct;
  #L443716.  call temp:= `getKeyType`(v1) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L44371c.  v1:= temp @kind object;
  #L44371e.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L443724.  v0:= temp @kind object;
  #L443726.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L44372a.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L443730.  v0:= temp @kind object;
  #L443732.  return v0 @kind object;
}
procedure `void` `b`(`int` v0 ) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.b:(I)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L443820.  call `c`(v0) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.c:(I)V` @kind static;
  #L443826.  return @kind void;
}
procedure `void` `c`(`int` v1 ) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.c:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4438b8.  v0:= 32I;
  #L4438bc.  if v1 != v0 then goto L4438c2;
  #L4438c0.  return @kind void;
  #L4438c2.  v1:= new `java.security.GeneralSecurityException`;
  #L4438c6.  v0:= "AesCmacPrfKey size wrong, must be 32 bytes" @kind object;
  #L4438ca.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4438d0.  throw v1;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L443838.  v0:= new `com.google.crypto.tink.prf.AesCmacPrfKeyManager`;
  #L44383c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.<init>:()V` @kind direct;
  #L443842.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L443848.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4437d0.  v0:= "type.googleapis.com/google.crypto.tink.AesCmacPrfKey" @kind object;
  #L4437d4.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4437bc.  v0:= 0I;
  #L4437be.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443744.  v0:= new `com.google.crypto.tink.prf.AesCmacPrfKeyManager$b`;
  #L443748.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesCmacPrfKeyFormat` @kind object;
  #L44374c.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager$b;.<init>:(Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L443752.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443788.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L44378c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesCmacPrfKey` `parseKey`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacPrfKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443764.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L44376a.  v0:= temp @kind object;
  #L44376c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesCmacPrfKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCmacPrfKey;` @kind static;
  #L443772.  v2:= temp @kind object;
  #L443774.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4437a0.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacPrfKey;` @kind virtual;
  #L4437a6.  v1:= temp @kind object;
  #L4437a8.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesCmacPrfKey` v3 @kind object) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacPrfKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44385c.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacPrfKey;.getVersion:()I` @kind virtual;
  #L443862.  v0:= temp;
  #L443864.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.getVersion:()I` @kind virtual;
  #L44386a.  v1:= temp;
  #L44386c.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L443872.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacPrfKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L443878.  v3:= temp @kind object;
  #L44387a.  call temp:= `size`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L443880.  v3:= temp;
  #L443882.  call `c`(v3) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.c:(I)V` @kind static;
  #L443888.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.prf.AesCmacPrfKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L44389c.  v1:= (`com.google.crypto.tink.proto.AesCmacPrfKey`) v1 @kind object;
  #L4438a0.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/prf/AesCmacPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacPrfKey;)V` @kind virtual;
  #L4438a6.  return @kind void;
}
