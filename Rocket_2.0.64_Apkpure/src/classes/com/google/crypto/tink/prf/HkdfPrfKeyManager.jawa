record `com.google.crypto.tink.prf.HkdfPrfKeyManager` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L443dd4.  v0:= constclass @type ^`com.google.crypto.tink.proto.HkdfPrfKey` @kind object;
  #L443dd8.  v1:= 2I;
  #L443dda.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L443dde.  v2:= new `com.google.crypto.tink.prf.HkdfPrfKeyManager$a`;
  #L443de2.  v3:= constclass @type ^`com.google.crypto.tink.subtle.prf.StreamingPrf` @kind object;
  #L443de6.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L443dec.  v3:= 0I;
  #L443dee.  v1[v3]:= v2 @kind object;
  #L443df2.  v2:= new `com.google.crypto.tink.prf.HkdfPrfKeyManager$b`;
  #L443df6.  v3:= constclass @type ^`com.google.crypto.tink.prf.Prf` @kind object;
  #L443dfa.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager$b;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L443e00.  v3:= 1I;
  #L443e02.  v1[v3]:= v2 @kind object;
  #L443e06.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L443e0c.  return @kind void;
}
procedure `com.google.crypto.tink.subtle.Enums$HashType` `b`(`com.google.crypto.tink.proto.HashType` v0 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.b:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L443cd8.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.e:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @kind static;
  #L443cde.  v0:= temp @kind object;
  #L443ce0.  return v0 @kind object;
}
procedure `void` `c`(`int` v0 ) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.c:(I)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L443e20.  call `f`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.f:(I)V` @kind static;
  #L443e26.  return @kind void;
}
procedure `void` `d`(`com.google.crypto.tink.proto.HkdfPrfParams` v0 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.d:(Lcom/google/crypto/tink/proto/HkdfPrfParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L443e38.  call `g`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.g:(Lcom/google/crypto/tink/proto/HkdfPrfParams;)V` @kind static;
  #L443e3e.  return @kind void;
}
procedure `com.google.crypto.tink.subtle.Enums$HashType` `e`(`com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.e:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/subtle/Enums$HashType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L443cf4.  v0:= `@@com.google.crypto.tink.prf.HkdfPrfKeyManager$d.a` @type ^`int`[] @kind object;
  #L443cf8.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L443cfe.  v1:= temp;
  #L443d00.  v0:= v0[v1];
  #L443d04.  v1:= 1I;
  #L443d06.  if v0 == v1 then goto L443d6e;
  #L443d0a.  v1:= 2I;
  #L443d0c.  if v0 == v1 then goto L443d68;
  #L443d10.  v1:= 3I;
  #L443d12.  if v0 == v1 then goto L443d62;
  #L443d16.  v1:= 4I;
  #L443d18.  if v0 != v1 then goto L443d22;
  #L443d1c.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA512` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L443d20.  return v3 @kind object;
  #L443d22.  v0:= new `java.security.GeneralSecurityException`;
  #L443d26.  v1:= new `java.lang.StringBuilder`;
  #L443d2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L443d30.  v2:= "HashType " @kind object;
  #L443d34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L443d3a.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L443d40.  v3:= temp @kind object;
  #L443d42.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L443d48.  v3:= " not known in" @kind object;
  #L443d4c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L443d52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L443d58.  v3:= temp @kind object;
  #L443d5a.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443d60.  throw v0;
  #L443d62.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA384` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L443d66.  return v3 @kind object;
  #L443d68.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA256` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L443d6c.  return v3 @kind object;
  #L443d6e.  v3:= `@@com.google.crypto.tink.subtle.Enums$HashType.SHA1` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L443d72.  return v3 @kind object;
}
procedure `void` `f`(`int` v1 ) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.f:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L443edc.  v0:= 32I;
  #L443ee0.  if v1 < v0 then goto L443ee6;
  #L443ee4.  return @kind void;
  #L443ee6.  v1:= new `java.security.GeneralSecurityException`;
  #L443eea.  v0:= "Invalid HkdfPrfKey/HkdfPrfKeyFormat: Key size too short" @kind object;
  #L443eee.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443ef4.  throw v1;
}
procedure `void` `g`(`com.google.crypto.tink.proto.HkdfPrfParams` v2 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.g:(Lcom/google/crypto/tink/proto/HkdfPrfParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L443f08.  call temp:= `getHash`(v2) @signature `Lcom/google/crypto/tink/proto/HkdfPrfParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L443f0e.  v0:= temp @kind object;
  #L443f10.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L443f14.  if v0 == v1 then goto L443f3a;
  #L443f18.  call temp:= `getHash`(v2) @signature `Lcom/google/crypto/tink/proto/HkdfPrfParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L443f1e.  v2:= temp @kind object;
  #L443f20.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L443f24.  if v2 != v0 then goto L443f2a;
  #L443f28.  goto L443f3a;
  #L443f2a.  v2:= new `java.security.GeneralSecurityException`;
  #L443f2e.  v0:= "Invalid HkdfPrfKey/HkdfPrfKeyFormat: Unsupported hash" @kind object;
  #L443f32.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443f38.  throw v2;
  #L443f3a.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `hkdfSha256Template`() @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.hkdfSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L443bf4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat$Builder;` @kind static;
  #L443bfa.  v0:= temp @kind object;
  #L443bfc.  v1:= 32I;
  #L443c00.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat$Builder;` @kind virtual;
  #L443c06.  v0:= temp @kind object;
  #L443c08.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HkdfPrfParams;.newBuilder:()Lcom/google/crypto/tink/proto/HkdfPrfParams$Builder;` @kind static;
  #L443c0e.  v1:= temp @kind object;
  #L443c10.  v2:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L443c14.  call temp:= `setHash`(v1, v2) @signature `Lcom/google/crypto/tink/proto/HkdfPrfParams$Builder;.setHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/HkdfPrfParams$Builder;` @kind virtual;
  #L443c1a.  v1:= temp @kind object;
  #L443c1c.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/HkdfPrfParams$Builder;)Lcom/google/crypto/tink/proto/HkdfPrfKeyFormat$Builder;` @kind virtual;
  #L443c22.  v0:= temp @kind object;
  #L443c24.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L443c2a.  v0:= temp @kind object;
  #L443c2c.  v0:= (`com.google.crypto.tink.proto.HkdfPrfKeyFormat`) v0 @kind object;
  #L443c30.  call temp:= `staticKeyType`() @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.staticKeyType:()Ljava/lang/String;` @kind static;
  #L443c36.  v1:= temp @kind object;
  #L443c38.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L443c3e.  v0:= temp @kind object;
  #L443c40.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L443c44.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L443c4a.  v0:= temp @kind object;
  #L443c4c.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L443e50.  v0:= new `com.google.crypto.tink.prf.HkdfPrfKeyManager`;
  #L443e54.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.<init>:()V` @kind direct;
  #L443e5a.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L443e60.  return @kind void;
}
procedure `java.lang.String` `staticKeyType`() @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.staticKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L443db0.  v0:= new `com.google.crypto.tink.prf.HkdfPrfKeyManager`;
  #L443db4.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.<init>:()V` @kind direct;
  #L443dba.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L443dc0.  v0:= temp @kind object;
  #L443dc2.  return v0 @kind object;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443d98.  v0:= "type.googleapis.com/google.crypto.tink.HkdfPrfKey" @kind object;
  #L443d9c.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443d84.  v0:= 0I;
  #L443d86.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443c60.  v0:= new `com.google.crypto.tink.prf.HkdfPrfKeyManager$c`;
  #L443c64.  v1:= constclass @type ^`com.google.crypto.tink.proto.HkdfPrfKeyFormat` @kind object;
  #L443c68.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager$c;.<init>:(Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L443c6e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443ca4.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L443ca8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.HkdfPrfKey` `parseKey`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HkdfPrfKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443c80.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L443c86.  v0:= temp @kind object;
  #L443c88.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/HkdfPrfKey;` @kind static;
  #L443c8e.  v2:= temp @kind object;
  #L443c90.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L443cbc.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HkdfPrfKey;` @kind virtual;
  #L443cc2.  v1:= temp @kind object;
  #L443cc4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v2 @kind this, `com.google.crypto.tink.proto.HkdfPrfKey` v3 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HkdfPrfKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443e74.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKey;.getVersion:()I` @kind virtual;
  #L443e7a.  v0:= temp;
  #L443e7c.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.getVersion:()I` @kind virtual;
  #L443e82.  v1:= temp;
  #L443e84.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L443e8a.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L443e90.  v0:= temp @kind object;
  #L443e92.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L443e98.  v0:= temp;
  #L443e9a.  call `f`(v0) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.f:(I)V` @kind static;
  #L443ea0.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HkdfPrfKey;.getParams:()Lcom/google/crypto/tink/proto/HkdfPrfParams;` @kind virtual;
  #L443ea6.  v3:= temp @kind object;
  #L443ea8.  call `g`(v3) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.g:(Lcom/google/crypto/tink/proto/HkdfPrfParams;)V` @kind static;
  #L443eae.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.prf.HkdfPrfKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L443ec0.  v1:= (`com.google.crypto.tink.proto.HkdfPrfKey`) v1 @kind object;
  #L443ec4.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/prf/HkdfPrfKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HkdfPrfKey;)V` @kind virtual;
  #L443eca.  return @kind void;
}
