record `com.google.crypto.tink.NoSecretKeysetHandle` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.NoSecretKeysetHandle` v0 @kind this) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L439ca0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L439ca6.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.proto.Keyset` v3 @kind object) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L439cb8.  call temp:= `getKeyList`(v3) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L439cbe.  v3:= temp @kind object;
  #L439cc0.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L439cc6.  v3:= temp @kind object;
  #L439cc8.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L439cce.  v0:= temp;
  #L439cd0.  if v0 == 0 then goto L439d3a;
  #L439cd4.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L439cda.  v0:= temp @kind object;
  #L439cdc.  v0:= (`com.google.crypto.tink.proto.Keyset$Key`) v0 @kind object;
  #L439ce0.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L439ce6.  v1:= temp @kind object;
  #L439ce8.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L439cee.  v1:= temp @kind object;
  #L439cf0.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.UNKNOWN_KEYMATERIAL` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L439cf4.  if v1 == v2 then goto L439d2a;
  #L439cf8.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L439cfe.  v1:= temp @kind object;
  #L439d00.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L439d06.  v1:= temp @kind object;
  #L439d08.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L439d0c.  if v1 == v2 then goto L439d2a;
  #L439d10.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L439d16.  v0:= temp @kind object;
  #L439d18.  call temp:= `getKeyMaterialType`(v0) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L439d1e.  v0:= temp @kind object;
  #L439d20.  v1:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L439d24.  if v0 == v1 then goto L439d2a;
  #L439d28.  goto L439cc8;
  #L439d2a.  v3:= new `java.security.GeneralSecurityException`;
  #L439d2e.  v0:= "keyset contains secret key material" @kind object;
  #L439d32.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439d38.  throw v3;
  #L439d3a.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetHandle` `parseFrom`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.parseFrom:([B)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L439c28.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L439c2e.  v0:= temp @kind object;
  #L439c30.  call temp:= `parseFrom`(v1, v0) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L439c36.  v1:= temp @kind object;
  #L439c38.  call `a`(v1) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L439c3e.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L439c44.  v1:= temp @kind object;
  #L439c46.  return v1 @kind object;
  #L439c48.  v1:= new `java.security.GeneralSecurityException`;
  #L439c4c.  v0:= "invalid keyset" @kind object;
  #L439c50.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439c56.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L439c28..L439c46] goto L439c48;
}
procedure `com.google.crypto.tink.KeysetHandle` `read`(`com.google.crypto.tink.KeysetReader` v0 @kind object) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L439c78.  call temp:= `read`(v0) @signature `Lcom/google/crypto/tink/KeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @kind interface;
  #L439c7e.  v0:= temp @kind object;
  #L439c80.  call `a`(v0) @signature `Lcom/google/crypto/tink/NoSecretKeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L439c86.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L439c8c.  v0:= temp @kind object;
  #L439c8e.  return v0 @kind object;
}
