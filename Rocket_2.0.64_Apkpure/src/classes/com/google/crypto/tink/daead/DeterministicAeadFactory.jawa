record `com.google.crypto.tink.daead.DeterministicAeadFactory` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.daead.DeterministicAeadFactory` v0 @kind this) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43f200.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f206.  return @kind void;
}
procedure `com.google.crypto.tink.DeterministicAead` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadFactory;.getPrimitive:(Lcom/google/crypto/tink/KeysetHandle;)Lcom/google/crypto/tink/DeterministicAead;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f1a8.  v0:= 0I;
  #L43f1aa.  call temp:= `getPrimitive`(v1, v0) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadFactory;.getPrimitive:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/DeterministicAead;` @kind static;
  #L43f1b0.  v1:= temp @kind object;
  #L43f1b2.  return v1 @kind object;
}
procedure `com.google.crypto.tink.DeterministicAead` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v1 @kind object, `com.google.crypto.tink.KeyManager` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadFactory;.getPrimitive:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/DeterministicAead;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f1c4.  v0:= new `com.google.crypto.tink.daead.DeterministicAeadWrapper`;
  #L43f1c8.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadWrapper;.<init>:()V` @kind direct;
  #L43f1ce.  call `registerPrimitiveWrapper`(v0) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @kind static;
  #L43f1d4.  v0:= constclass @type ^`com.google.crypto.tink.DeterministicAead` @kind object;
  #L43f1d8.  call temp:= `getPrimitives`(v1, v2, v0) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L43f1de.  v1:= temp @kind object;
  #L43f1e0.  call temp:= `wrap`(v1) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @kind static;
  #L43f1e6.  v1:= temp @kind object;
  #L43f1e8.  v1:= (`com.google.crypto.tink.DeterministicAead`) v1 @kind object;
  #L43f1ec.  return v1 @kind object;
}
