record `com.google.crypto.tink.daead.DeterministicAeadWrapper$a` @kind class @AccessFlag  extends `com.google.crypto.tink.DeterministicAead` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.daead.DeterministicAeadWrapper$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43f448.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f44e.  v0.`com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L43f452.  return @kind void;
}
procedure `byte`[] `decryptDeterministically`(`com.google.crypto.tink.daead.DeterministicAeadWrapper$a` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadWrapper$a;.decryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f2cc.  v0:= length @variable v7;
  #L43f2ce.  v1:= 5I;
  #L43f2d0.  if v0 <= v1 then goto L43f366;
  #L43f2d4.  v0:= 0I;
  #L43f2d6.  call temp:= `copyOfRange`(v7, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L43f2dc.  v0:= temp @kind object;
  #L43f2de.  v2:= length @variable v7;
  #L43f2e0.  call temp:= `copyOfRange`(v7, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L43f2e6.  v1:= temp @kind object;
  #L43f2e8.  v2:= v6.`com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L43f2ec.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L43f2f2.  v0:= temp @kind object;
  #L43f2f4.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f2fa.  v0:= temp @kind object;
  #L43f2fc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f302.  v2:= temp;
  #L43f304.  if v2 == 0 then goto L43f366;
  #L43f308.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f30e.  v2:= temp @kind object;
  #L43f310.  v2:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v2 @kind object;
  #L43f314.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L43f31a.  v2:= temp @kind object;
  #L43f31c.  v2:= (`com.google.crypto.tink.DeterministicAead`) v2 @kind object;
  #L43f320.  call temp:= `decryptDeterministically`(v2, v1, v8) @signature `Lcom/google/crypto/tink/DeterministicAead;.decryptDeterministically:([B[B)[B` @kind interface;
  #L43f326.  v7:= temp @kind object;
  #L43f328.  return v7 @kind object;
  #L43f32a.  v2:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L43f32c.  call temp:= `a`() @signature `Lcom/google/crypto/tink/daead/DeterministicAeadWrapper;.a:()Ljava/util/logging/Logger;` @kind static;
  #L43f332.  v3:= temp @kind object;
  #L43f334.  v4:= new `java.lang.StringBuilder`;
  #L43f338.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43f33e.  v5:= "ciphertext prefix matches a key, but cannot decrypt: " @kind object;
  #L43f342.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43f348.  call temp:= `toString`(v2) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L43f34e.  v2:= temp @kind object;
  #L43f350.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43f356.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43f35c.  v2:= temp @kind object;
  #L43f35e.  call `info`(v3, v2) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L43f364.  goto L43f2fc;
  #L43f366.  v0:= v6.`com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L43f36a.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L43f370.  v0:= temp @kind object;
  #L43f372.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f378.  v0:= temp @kind object;
  #L43f37a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f380.  v1:= temp;
  #L43f382.  if v1 == 0 then goto L43f3ac;
  #L43f386.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f38c.  v1:= temp @kind object;
  #L43f38e.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L43f392.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L43f398.  v1:= temp @kind object;
  #L43f39a.  v1:= (`com.google.crypto.tink.DeterministicAead`) v1 @kind object;
  #L43f39e.  call temp:= `decryptDeterministically`(v1, v7, v8) @signature `Lcom/google/crypto/tink/DeterministicAead;.decryptDeterministically:([B[B)[B` @kind interface;
  #L43f3a4.  v7:= temp @kind object;
  #L43f3a6.  return v7 @kind object;
  #L43f3a8.  
  #L43f3aa.  goto L43f37a;
  #L43f3ac.  v7:= new `java.security.GeneralSecurityException`;
  #L43f3b0.  v8:= "decryption failed" @kind object;
  #L43f3b4.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43f3ba.  throw v7;
  catch `java.security.GeneralSecurityException` @[L43f314..L43f328] goto L43f32a;
  catch `java.security.GeneralSecurityException` @[L43f392..L43f3a6] goto L43f3a8;
}
procedure `byte`[] `encryptDeterministically`(`com.google.crypto.tink.daead.DeterministicAeadWrapper$a` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/daead/DeterministicAeadWrapper$a;.encryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43f3e8.  v0:= 2I;
  #L43f3ea.  v0:= new `byte`[][v0];
  #L43f3ee.  v1:= v3.`com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L43f3f2.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L43f3f8.  v1:= temp @kind object;
  #L43f3fa.  call temp:= `getIdentifier`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L43f400.  v1:= temp @kind object;
  #L43f402.  v2:= 0I;
  #L43f404.  v0[v2]:= v1 @kind object;
  #L43f408.  v1:= v3.`com.google.crypto.tink.daead.DeterministicAeadWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L43f40c.  call temp:= `getPrimary`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L43f412.  v1:= temp @kind object;
  #L43f414.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L43f41a.  v1:= temp @kind object;
  #L43f41c.  v1:= (`com.google.crypto.tink.DeterministicAead`) v1 @kind object;
  #L43f420.  call temp:= `encryptDeterministically`(v1, v4, v5) @signature `Lcom/google/crypto/tink/DeterministicAead;.encryptDeterministically:([B[B)[B` @kind interface;
  #L43f426.  v4:= temp @kind object;
  #L43f428.  v5:= 1I;
  #L43f42a.  v0[v5]:= v4 @kind object;
  #L43f42e.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L43f434.  v4:= temp @kind object;
  #L43f436.  return v4 @kind object;
}
