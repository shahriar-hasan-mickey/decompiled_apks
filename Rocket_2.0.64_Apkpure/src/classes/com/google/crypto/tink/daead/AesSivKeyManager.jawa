record `com.google.crypto.tink.daead.AesSivKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.daead.AesSivKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43eff4.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesSivKey` @kind object;
  #L43eff8.  v1:= 1I;
  #L43effa.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L43effe.  v2:= new `com.google.crypto.tink.daead.AesSivKeyManager$a`;
  #L43f002.  v3:= constclass @type ^`com.google.crypto.tink.DeterministicAead` @kind object;
  #L43f006.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43f00c.  v3:= 0I;
  #L43f00e.  v1[v3]:= v2 @kind object;
  #L43f012.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L43f018.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256SivTemplate`() @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.aes256SivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43eeb8.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43eebc.  v1:= 64I;
  #L43eec0.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43eec6.  v0:= temp @kind object;
  #L43eec8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43eedc.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;` @kind static;
  #L43eee2.  v0:= temp @kind object;
  #L43eee4.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesSivKeyFormat$Builder;` @kind virtual;
  #L43eeea.  v1:= temp @kind object;
  #L43eeec.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43eef2.  v1:= temp @kind object;
  #L43eef4.  v1:= (`com.google.crypto.tink.proto.AesSivKeyFormat`) v1 @kind object;
  #L43eef8.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager`;
  #L43eefc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @kind direct;
  #L43ef02.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43ef08.  v0:= temp @kind object;
  #L43ef0a.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L43ef10.  v1:= temp @kind object;
  #L43ef12.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ef18.  v1:= temp @kind object;
  #L43ef1a.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256SivTemplate`() @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.rawAes256SivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43ef2c.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43ef30.  v1:= 64I;
  #L43ef34.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ef3a.  v0:= temp @kind object;
  #L43ef3c.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43f02c.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager`;
  #L43f030.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.<init>:()V` @kind direct;
  #L43f036.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L43f03c.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43efdc.  v0:= "type.googleapis.com/google.crypto.tink.AesSivKey" @kind object;
  #L43efe0.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43efc8.  v0:= 0I;
  #L43efca.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.daead.AesSivKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ef50.  v0:= new `com.google.crypto.tink.daead.AesSivKeyManager$b`;
  #L43ef54.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesSivKeyFormat` @kind object;
  #L43ef58.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager$b;.<init>:(Lcom/google/crypto/tink/daead/AesSivKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L43ef5e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ef94.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43ef98.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesSivKey` `parseKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ef70.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43ef76.  v0:= temp @kind object;
  #L43ef78.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesSivKey;` @kind static;
  #L43ef7e.  v2:= temp @kind object;
  #L43ef80.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43efac.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesSivKey;` @kind virtual;
  #L43efb2.  v1:= temp @kind object;
  #L43efb4.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v3 @kind this, `com.google.crypto.tink.proto.AesSivKey` v4 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesSivKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43f050.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getVersion:()I` @kind virtual;
  #L43f056.  v0:= temp;
  #L43f058.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.getVersion:()I` @kind virtual;
  #L43f05e.  v1:= temp;
  #L43f060.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43f066.  call temp:= `getKeyValue`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43f06c.  v0:= temp @kind object;
  #L43f06e.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43f074.  v0:= temp;
  #L43f076.  v1:= 64I;
  #L43f07a.  if v0 != v1 then goto L43f080;
  #L43f07e.  return @kind void;
  #L43f080.  v0:= new `java.security.InvalidKeyException`;
  #L43f084.  v1:= new `java.lang.StringBuilder`;
  #L43f088.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43f08e.  v2:= "invalid key size: " @kind object;
  #L43f092.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43f098.  call temp:= `getKeyValue`(v4) @signature `Lcom/google/crypto/tink/proto/AesSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43f09e.  v4:= temp @kind object;
  #L43f0a0.  call temp:= `size`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43f0a6.  v4:= temp;
  #L43f0a8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43f0ae.  v4:= ". Valid keys must have 64 bytes." @kind object;
  #L43f0b2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43f0b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43f0be.  v4:= temp @kind object;
  #L43f0c0.  call `<init>`(v0, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43f0c6.  throw v0;
}
procedure `void` `validateKey`(`com.google.crypto.tink.daead.AesSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43f0d8.  v1:= (`com.google.crypto.tink.proto.AesSivKey`) v1 @kind object;
  #L43f0dc.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/daead/AesSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesSivKey;)V` @kind virtual;
  #L43f0e2.  return @kind void;
}
