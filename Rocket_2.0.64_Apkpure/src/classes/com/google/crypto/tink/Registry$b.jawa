record `com.google.crypto.tink.Registry$b` @kind class @AccessFlag  extends `com.google.crypto.tink.Registry$f` @kind interface {
  `com.google.crypto.tink.KeyTypeManager` `com.google.crypto.tink.Registry$b.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.Registry$b` v0 @kind this, `com.google.crypto.tink.KeyTypeManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry$b;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a420.  v0.`com.google.crypto.tink.Registry$b.a` @type ^`com.google.crypto.tink.KeyTypeManager` := v1 @kind object;
  #L43a424.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a42a.  return @kind void;
}
procedure `java.lang.Class` `a`(`com.google.crypto.tink.Registry$b` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$b;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a3ec.  v0:= 0I;
  #L43a3ee.  return v0 @kind object;
}
procedure `java.lang.Class` `b`(`com.google.crypto.tink.Registry$b` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$b;.b:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a3cc.  v0:= v1.`com.google.crypto.tink.Registry$b.a` @type ^`com.google.crypto.tink.KeyTypeManager` @kind object;
  #L43a3d0.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43a3d6.  v0:= temp @kind object;
  #L43a3d8.  return v0 @kind object;
}
procedure `java.util.Set` `c`(`com.google.crypto.tink.Registry$b` v1 @kind this) @signature `Lcom/google/crypto/tink/Registry$b;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a400.  v0:= v1.`com.google.crypto.tink.Registry$b.a` @type ^`com.google.crypto.tink.KeyTypeManager` @kind object;
  #L43a404.  call temp:= `supportedPrimitives`(v0) @signature `Lcom/google/crypto/tink/KeyTypeManager;.supportedPrimitives:()Ljava/util/Set;` @kind virtual;
  #L43a40a.  v0:= temp @kind object;
  #L43a40c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `d`(`com.google.crypto.tink.Registry$b` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry$b;.d:(Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a360.  v0:= new `com.google.crypto.tink.KeyManagerImpl`;
  #L43a364.  v1:= v2.`com.google.crypto.tink.Registry$b.a` @type ^`com.google.crypto.tink.KeyTypeManager` @kind object;
  #L43a368.  call `<init>`(v0, v1, v3) @signature `Lcom/google/crypto/tink/KeyManagerImpl;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;Ljava/lang/Class;)V` @kind direct;
  #L43a36e.  return v0 @kind object;
  #L43a370.  v3:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L43a372.  v0:= new `java.security.GeneralSecurityException`;
  #L43a376.  v1:= "Primitive type not supported" @kind object;
  #L43a37a.  call `<init>`(v0, v1, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L43a380.  throw v0;
  catch `java.lang.IllegalArgumentException` @[L43a360..L43a36e] goto L43a370;
}
procedure `com.google.crypto.tink.KeyManager` `e`(`com.google.crypto.tink.Registry$b` v3 @kind this) @signature `Lcom/google/crypto/tink/Registry$b;.e:()Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43a3a4.  v0:= new `com.google.crypto.tink.KeyManagerImpl`;
  #L43a3a8.  v1:= v3.`com.google.crypto.tink.Registry$b.a` @type ^`com.google.crypto.tink.KeyTypeManager` @kind object;
  #L43a3ac.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.a:()Ljava/lang/Class;` @kind virtual;
  #L43a3b2.  v2:= temp @kind object;
  #L43a3b4.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyManagerImpl;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;Ljava/lang/Class;)V` @kind direct;
  #L43a3ba.  return v0 @kind object;
}
