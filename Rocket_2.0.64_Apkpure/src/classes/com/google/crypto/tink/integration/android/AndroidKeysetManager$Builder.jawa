record `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.KeysetReader` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeysetWriter` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @AccessFlag PRIVATE;
  `java.lang.String` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @AccessFlag PRIVATE;
  `com.google.crypto.tink.Aead` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeyTemplate` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @AccessFlag PRIVATE;
  `java.security.KeyStore` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @AccessFlag PRIVATE;
  `com.google.crypto.tink.KeysetManager` `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L441410.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L441416.  v0:= 0I;
  #L441418.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` := v0 @kind object;
  #L44141c.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` := v0 @kind object;
  #L441420.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v0 @kind object;
  #L441424.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` := v0 @kind object;
  #L441428.  v1:= 1I;
  #L44142a.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` := v1 @kind boolean;
  #L44142e.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v0 @kind object;
  #L441432.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` := v0 @kind object;
  #L441436.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetWriter` `a`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.a:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/KeysetWriter;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L44127c.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L441280.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Aead` `b`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.b:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/Aead;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L44100c.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L441010.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetManager` `c`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.c:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;)Lcom/google/crypto/tink/KeysetManager;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L441130.  v0:= v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @type ^`com.google.crypto.tink.KeysetManager` @kind object;
  #L441134.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetManager` `d`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v3 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.d:()Lcom/google/crypto/tink/KeysetManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L441148.  v0:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L44114c.  if v0 == 0 then goto L44117e;
  #L441150.  v1:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` @kind object;
  #L441154.  call temp:= `read`(v1, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L44115a.  v0:= temp @kind object;
  #L44115c.  call temp:= `withKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.withKeysetHandle:(Lcom/google/crypto/tink/KeysetHandle;)Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L441162.  v0:= temp @kind object;
  #L441164.  return v0 @kind object;
  #L441166.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L441168.  goto L44116c;
  #L44116a.  v0:= Exception @type ^`com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @kind object;
  #L44116c.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L441172.  v1:= temp @kind object;
  #L441174.  v2:= "cannot decrypt keyset: " @kind object;
  #L441178.  call temp:= `w`(v1, v2, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L44117e.  v0:= v3.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` @kind object;
  #L441182.  call temp:= `read`(v0) @signature `Lcom/google/crypto/tink/CleartextKeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L441188.  v0:= temp @kind object;
  #L44118a.  call temp:= `withKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.withKeysetHandle:(Lcom/google/crypto/tink/KeysetHandle;)Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L441190.  v0:= temp @kind object;
  #L441192.  return v0 @kind object;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L441150..L441164] goto L44116a;
  catch `java.security.GeneralSecurityException` @[L441150..L441164] goto L441166;
}
procedure `com.google.crypto.tink.KeysetManager` `e`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v4 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.e:()Lcom/google/crypto/tink/KeysetManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4411b4.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.d:()Lcom/google/crypto/tink/KeysetManager;` @kind direct;
  #L4411ba.  v0:= temp @kind object;
  #L4411bc.  return v0 @kind object;
  #L4411be.  v0:= Exception @type ^`java.io.FileNotFoundException` @kind object;
  #L4411c0.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L4411c6.  v1:= temp @kind object;
  #L4411c8.  v2:= "keyset not found, will generate a new one" @kind object;
  #L4411cc.  call temp:= `w`(v1, v2, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L4411d2.  v0:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` @kind object;
  #L4411d6.  if v0 == 0 then goto L44124c;
  #L4411da.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L4411e0.  v0:= temp @kind object;
  #L4411e2.  v1:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` @kind object;
  #L4411e6.  call temp:= `add`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.add:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L4411ec.  v0:= temp @kind object;
  #L4411ee.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L4411f4.  v1:= temp @kind object;
  #L4411f6.  call temp:= `getKeysetInfo`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @kind virtual;
  #L4411fc.  v1:= temp @kind object;
  #L4411fe.  v2:= 0I;
  #L441200.  call temp:= `getKeyInfo`(v1, v2) @signature `Lcom/google/crypto/tink/proto/KeysetInfo;.getKeyInfo:(I)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @kind virtual;
  #L441206.  v1:= temp @kind object;
  #L441208.  call temp:= `getKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;.getKeyId:()I` @kind virtual;
  #L44120e.  v1:= temp;
  #L441210.  call temp:= `setPrimary`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.setPrimary:(I)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L441216.  v0:= temp @kind object;
  #L441218.  v1:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L44121c.  if v1 == 0 then goto L441238;
  #L441220.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L441226.  v1:= temp @kind object;
  #L441228.  v2:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L44122c.  v3:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` @kind object;
  #L441230.  call `write`(v1, v2, v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.write:(Lcom/google/crypto/tink/KeysetWriter;Lcom/google/crypto/tink/Aead;)V` @kind virtual;
  #L441236.  goto L44124a;
  #L441238.  call temp:= `getKeysetHandle`(v0) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L44123e.  v1:= temp @kind object;
  #L441240.  v2:= v4.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` @kind object;
  #L441244.  call `write`(v1, v2) @signature `Lcom/google/crypto/tink/CleartextKeysetHandle;.write:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeysetWriter;)V` @kind static;
  #L44124a.  return v0 @kind object;
  #L44124c.  v0:= new `java.security.GeneralSecurityException`;
  #L441250.  v1:= "cannot read or generate keyset" @kind object;
  #L441254.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44125a.  throw v0;
  catch `java.io.FileNotFoundException` @[L4411b4..L4411bc] goto L4411be;
}
procedure `com.google.crypto.tink.Aead` `f`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v5 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.f:()Lcom/google/crypto/tink/Aead;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L441024.  call temp:= `b`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.b:()Z` @kind static;
  #L44102a.  v0:= temp;
  #L44102c.  v1:= 0I;
  #L44102e.  if v0 != 0 then goto L441046;
  #L441032.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L441038.  v0:= temp @kind object;
  #L44103a.  v2:= "Android Keystore requires at least Android M" @kind object;
  #L44103e.  call temp:= `w`(v0, v2) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L441044.  return v1 @kind object;
  #L441046.  v0:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` @kind object;
  #L44104a.  if v0 == 0 then goto L44106e;
  #L44104e.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder`;
  #L441052.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.<init>:()V` @kind direct;
  #L441058.  v2:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.g` @type ^`java.security.KeyStore` @kind object;
  #L44105c.  call temp:= `setKeyStore`(v0, v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.setKeyStore:(Ljava/security/KeyStore;)Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;` @kind virtual;
  #L441062.  v0:= temp @kind object;
  #L441064.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.build:()Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;` @kind virtual;
  #L44106a.  v0:= temp @kind object;
  #L44106c.  goto L441078;
  #L44106e.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient`;
  #L441072.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.<init>:()V` @kind direct;
  #L441078.  v2:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L44107c.  call temp:= `b`(v0, v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.b:(Ljava/lang/String;)Z` @kind virtual;
  #L441082.  v2:= temp;
  #L441084.  v3:= "cannot use Android Keystore, it'll be disabled" @kind object;
  #L441088.  if v2 != 0 then goto L4410ae;
  #L44108c.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L441090.  call `generateNewAeadKey`(v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.generateNewAeadKey:(Ljava/lang/String;)V` @kind static;
  #L441096.  goto L4410ae;
  #L441098.  v0:= Exception @type ^`java.security.ProviderException` @kind object;
  #L44109a.  goto L44109e;
  #L44109c.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L44109e.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L4410a4.  v2:= temp @kind object;
  #L4410a6.  call temp:= `w`(v2, v3, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L4410ac.  return v1 @kind object;
  #L4410ae.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L4410b2.  call temp:= `getAead`(v0, v4) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.getAead:(Ljava/lang/String;)Lcom/google/crypto/tink/Aead;` @kind virtual;
  #L4410b8.  v0:= temp @kind object;
  #L4410ba.  return v0 @kind object;
  #L4410bc.  v0:= Exception @type ^`java.security.ProviderException` @kind object;
  #L4410be.  goto L4410c2;
  #L4410c0.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4410c2.  if v2 != 0 then goto L4410d6;
  #L4410c6.  call temp:= `c`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.c:()Ljava/lang/String;` @kind static;
  #L4410cc.  v2:= temp @kind object;
  #L4410ce.  call temp:= `w`(v2, v3, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L4410d4.  return v1 @kind object;
  #L4410d6.  v1:= new `java.security.KeyStoreException`;
  #L4410da.  v2:= 1I;
  #L4410dc.  v2:= new `java.lang.Object`[v2];
  #L4410e0.  v3:= 0I;
  #L4410e2.  v4:= v5.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L4410e6.  v2[v3]:= v4 @kind object;
  #L4410ea.  v3:= "the master key %s exists but is unusable" @kind object;
  #L4410ee.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4410f4.  v2:= temp @kind object;
  #L4410f6.  call `<init>`(v1, v2, v0) @signature `Ljava/security/KeyStoreException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L4410fc.  throw v1;
  catch `java.security.GeneralSecurityException` @[L44108c..L441096] goto L44109c;
  catch `java.security.ProviderException` @[L44108c..L441096] goto L441098;
  catch `java.security.GeneralSecurityException` @[L4410ae..L4410ba] goto L4410c0;
  catch `java.security.ProviderException` @[L4410ae..L4410ba] goto L4410bc;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager` `build`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.build:()Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441294.  @monitorenter v2
  #L441296.  v0:= v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` @kind object;
  #L44129a.  if v0 == 0 then goto L4412aa;
  #L44129e.  call temp:= `f`(v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.f:()Lcom/google/crypto/tink/Aead;` @kind direct;
  #L4412a4.  v0:= temp @kind object;
  #L4412a6.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.d` @type ^`com.google.crypto.tink.Aead` := v0 @kind object;
  #L4412aa.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.e:()Lcom/google/crypto/tink/KeysetManager;` @kind direct;
  #L4412b0.  v0:= temp @kind object;
  #L4412b2.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.h` @type ^`com.google.crypto.tink.KeysetManager` := v0 @kind object;
  #L4412b6.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeysetManager`;
  #L4412ba.  v1:= 0I;
  #L4412bc.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.<init>:(Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$a;)V` @kind direct;
  #L4412c2.  @monitorexit v2
  #L4412c4.  return v0 @kind object;
  #L4412c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4412c8.  @monitorexit v2
  #L4412ca.  throw v0;
  catch `java.lang.Throwable` @[L441296..L4412c2] goto L4412c6;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `doNotUseKeystore`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.doNotUseKeystore:()Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4412e8.  v0:= 0I;
  #L4412ea.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v0 @kind object;
  #L4412ee.  v0:= 0I;
  #L4412f0.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` := v0 @kind boolean;
  #L4412f4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withKeyTemplate`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v0 @kind this, `com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withKeyTemplate:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;

  #L441308.  v0.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v1 @kind object;
  #L44130c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withKeyTemplate`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v2 @kind this, `com.google.crypto.tink.proto.KeyTemplate` v3 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withKeyTemplate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441320.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L441326.  v0:= temp @kind object;
  #L441328.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L44132e.  v1:= temp @kind object;
  #L441330.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L441336.  v1:= temp @kind object;
  #L441338.  call temp:= `getOutputPrefixType`(v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L44133e.  v3:= temp @kind object;
  #L441340.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind static;
  #L441346.  v3:= temp @kind object;
  #L441348.  call temp:= `create`(v0, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L44134e.  v3:= temp @kind object;
  #L441350.  v2.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.f` @type ^`com.google.crypto.tink.KeyTemplate` := v3 @kind object;
  #L441354.  return v2 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withMasterKeyUri`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withMasterKeyUri:(Ljava/lang/String;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441368.  v0:= "android-keystore://" @kind object;
  #L44136c.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L441372.  v0:= temp;
  #L441374.  if v0 == 0 then goto L441396;
  #L441378.  v0:= v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.e` @type ^`boolean` @kind boolean;
  #L44137c.  if v0 == 0 then goto L441386;
  #L441380.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.c` @type ^`java.lang.String` := v2 @kind object;
  #L441384.  return v1 @kind object;
  #L441386.  v2:= new `java.lang.IllegalArgumentException`;
  #L44138a.  v0:= "cannot call withMasterKeyUri() after calling doNotUseKeystore()" @kind object;
  #L44138e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L441394.  throw v2;
  #L441396.  v2:= new `java.lang.IllegalArgumentException`;
  #L44139a.  v0:= "key URI must start with android-keystore://" @kind object;
  #L44139e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4413a4.  throw v2;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` `withSharedPref`(`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;.withSharedPref:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Lcom/google/crypto/tink/integration/android/AndroidKeysetManager$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4413b8.  if v2 == 0 then goto L4413ee;
  #L4413bc.  if v3 == 0 then goto L4413de;
  #L4413c0.  v0:= new `com.google.crypto.tink.integration.android.SharedPrefKeysetReader`;
  #L4413c4.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/google/crypto/tink/integration/android/SharedPrefKeysetReader;.<init>:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4413ca.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.a` @type ^`com.google.crypto.tink.KeysetReader` := v0 @kind object;
  #L4413ce.  v0:= new `com.google.crypto.tink.integration.android.SharedPrefKeysetWriter`;
  #L4413d2.  call `<init>`(v0, v2, v3, v4) @signature `Lcom/google/crypto/tink/integration/android/SharedPrefKeysetWriter;.<init>:(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L4413d8.  v1.`com.google.crypto.tink.integration.android.AndroidKeysetManager$Builder.b` @type ^`com.google.crypto.tink.KeysetWriter` := v0 @kind object;
  #L4413dc.  return v1 @kind object;
  #L4413de.  v2:= new `java.lang.IllegalArgumentException`;
  #L4413e2.  v3:= "need a keyset name" @kind object;
  #L4413e6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4413ec.  throw v2;
  #L4413ee.  v2:= new `java.lang.IllegalArgumentException`;
  #L4413f2.  v3:= "need an Android context" @kind object;
  #L4413f6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4413fc.  throw v2;
}
