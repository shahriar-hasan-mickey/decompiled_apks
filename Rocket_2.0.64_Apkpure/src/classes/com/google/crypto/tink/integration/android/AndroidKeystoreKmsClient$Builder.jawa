record `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.a` @AccessFlag ;
  `java.security.KeyStore` `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.b` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L441be8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L441bee.  v0:= 0I;
  #L441bf0.  v2.`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.a` @type ^`java.lang.String` := v0 @kind object;
  #L441bf4.  v2.`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.b` @type ^`java.security.KeyStore` := v0 @kind object;
  #L441bf8.  call temp:= `a`() @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.a:()Z` @kind static;
  #L441bfe.  v1:= temp;
  #L441c00.  if v1 == 0 then goto L441c2e;
  #L441c04.  v1:= "AndroidKeyStore" @kind object;
  #L441c08.  call temp:= `getInstance`(v1) @signature `Ljava/security/KeyStore;.getInstance:(Ljava/lang/String;)Ljava/security/KeyStore;` @kind static;
  #L441c0e.  v1:= temp @kind object;
  #L441c10.  v2.`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.b` @type ^`java.security.KeyStore` := v1 @kind object;
  #L441c14.  call `load`(v1, v0) @signature `Ljava/security/KeyStore;.load:(Ljava/security/KeyStore$LoadStoreParameter;)V` @kind virtual;
  #L441c1a.  return @kind void;
  #L441c1c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L441c1e.  goto L441c22;
  #L441c20.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L441c22.  v1:= new `java.lang.IllegalStateException`;
  #L441c26.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L441c2c.  throw v1;
  #L441c2e.  v0:= new `java.lang.IllegalStateException`;
  #L441c32.  v1:= "need Android Keystore on Android M or newer" @kind object;
  #L441c36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L441c3c.  throw v0;
  catch `java.security.GeneralSecurityException` @[L441c04..L441c1a] goto L441c20;
  catch `java.io.IOException` @[L441c04..L441c1a] goto L441c1c;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient` `build`(`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` v2 @kind this) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.build:()Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441b54.  v0:= new `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient`;
  #L441b58.  v1:= 0I;
  #L441b5a.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient;.<init>:(Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$a;)V` @kind direct;
  #L441b60.  return v0 @kind object;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` `setKeyStore`(`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` v1 @kind this, `java.security.KeyStore` v2 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.setKeyStore:(Ljava/security/KeyStore;)Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441b74.  if v2 == 0 then goto L441b7e;
  #L441b78.  v1.`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.b` @type ^`java.security.KeyStore` := v2 @kind object;
  #L441b7c.  return v1 @kind object;
  #L441b7e.  v2:= new `java.lang.IllegalArgumentException`;
  #L441b82.  v0:= "val cannot be null" @kind object;
  #L441b86.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L441b8c.  throw v2;
}
procedure `com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` `setKeyUri`(`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;.setKeyUri:(Ljava/lang/String;)Lcom/google/crypto/tink/integration/android/AndroidKeystoreKmsClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441ba0.  if v3 == 0 then goto L441bc6;
  #L441ba4.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L441ba8.  call temp:= `toLowerCase`(v3, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L441bae.  v0:= temp @kind object;
  #L441bb0.  v1:= "android-keystore://" @kind object;
  #L441bb4.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L441bba.  v0:= temp;
  #L441bbc.  if v0 == 0 then goto L441bc6;
  #L441bc0.  v2.`com.google.crypto.tink.integration.android.AndroidKeystoreKmsClient$Builder.a` @type ^`java.lang.String` := v3 @kind object;
  #L441bc4.  return v2 @kind object;
  #L441bc6.  v3:= new `java.lang.IllegalArgumentException`;
  #L441bca.  v0:= "val must start with android-keystore://" @kind object;
  #L441bce.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L441bd4.  throw v3;
}
