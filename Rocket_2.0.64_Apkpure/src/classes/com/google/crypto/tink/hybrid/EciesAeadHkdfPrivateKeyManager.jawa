record `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PrivateKeyTypeManager` @kind class {
}
global `byte`[] `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43fc10.  v0:= 0I;
  #L43fc12.  v0:= new `byte`[v0];
  #L43fc16.  `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] := v0 @kind object;
  #L43fc1a.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v5 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43fc2c.  v0:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` @kind object;
  #L43fc30.  v1:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfPublicKey` @kind object;
  #L43fc34.  v2:= 1I;
  #L43fc36.  v2:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v2];
  #L43fc3a.  v3:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$a`;
  #L43fc3e.  v4:= constclass @type ^`com.google.crypto.tink.HybridDecrypt` @kind object;
  #L43fc42.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43fc48.  v4:= 0I;
  #L43fc4a.  v2[v4]:= v3 @kind object;
  #L43fc4e.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/google/crypto/tink/PrivateKeyTypeManager;.<init>:(Ljava/lang/Class;Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L43fc54.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`com.google.crypto.tink.proto.EllipticCurveType` v1 @kind object, `com.google.crypto.tink.proto.HashType` v2 @kind object, `com.google.crypto.tink.proto.EcPointFormat` v3 @kind object, `com.google.crypto.tink.KeyTemplate` v4 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43f8b4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;` @kind static;
  #L43f8ba.  v0:= temp @kind object;
  #L43f8bc.  call temp:= `c`(v1, v2, v3, v4, v6) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.c:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;[B)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @kind static;
  #L43f8c2.  v1:= temp @kind object;
  #L43f8c4.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfKeyFormat$Builder;` @kind virtual;
  #L43f8ca.  v1:= temp @kind object;
  #L43f8cc.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43f8d2.  v1:= temp @kind object;
  #L43f8d4.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfKeyFormat`) v1 @kind object;
  #L43f8d8.  v2:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager`;
  #L43f8dc.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @kind direct;
  #L43f8e2.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43f8e8.  v2:= temp @kind object;
  #L43f8ea.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L43f8f0.  v1:= temp @kind object;
  #L43f8f2.  call temp:= `create`(v2, v1, v5) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f8f8.  v1:= temp @kind object;
  #L43f8fa.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfParams` `c`(`com.google.crypto.tink.proto.EllipticCurveType` v1 @kind object, `com.google.crypto.tink.proto.HashType` v2 @kind object, `com.google.crypto.tink.proto.EcPointFormat` v3 @kind object, `com.google.crypto.tink.KeyTemplate` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.c:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;[B)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @AccessFlag STATIC {
    temp;
    v0;

  #L43fa0c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind static;
  #L43fa12.  v0:= temp @kind object;
  #L43fa14.  call temp:= `setCurveType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setCurveType:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L43fa1a.  v1:= temp @kind object;
  #L43fa1c.  call temp:= `setHkdfHashType`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setHkdfHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L43fa22.  v1:= temp @kind object;
  #L43fa24.  call temp:= `copyFrom`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43fa2a.  v2:= temp @kind object;
  #L43fa2c.  call temp:= `setHkdfSalt`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;.setHkdfSalt:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesHkdfKemParams$Builder;` @kind virtual;
  #L43fa32.  v1:= temp @kind object;
  #L43fa34.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43fa3a.  v1:= temp @kind object;
  #L43fa3c.  v1:= (`com.google.crypto.tink.proto.EciesHkdfKemParams`) v1 @kind object;
  #L43fa40.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.newBuilder:()Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind static;
  #L43fa46.  v2:= temp @kind object;
  #L43fa48.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43fa4e.  v5:= temp @kind object;
  #L43fa50.  call temp:= `setTypeUrl`(v2, v5) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43fa56.  v2:= temp @kind object;
  #L43fa58.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getValue:()[B` @kind virtual;
  #L43fa5e.  v5:= temp @kind object;
  #L43fa60.  call temp:= `copyFrom`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43fa66.  v5:= temp @kind object;
  #L43fa68.  call temp:= `setValue`(v2, v5) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43fa6e.  v2:= temp @kind object;
  #L43fa70.  call temp:= `getOutputPrefixType`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind virtual;
  #L43fa76.  v4:= temp @kind object;
  #L43fa78.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.d:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind static;
  #L43fa7e.  v4:= temp @kind object;
  #L43fa80.  call temp:= `setOutputPrefixType`(v2, v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43fa86.  v2:= temp @kind object;
  #L43fa88.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43fa8e.  v2:= temp @kind object;
  #L43fa90.  v2:= (`com.google.crypto.tink.proto.KeyTemplate`) v2 @kind object;
  #L43fa94.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;` @kind static;
  #L43fa9a.  v4:= temp @kind object;
  #L43fa9c.  call temp:= `setAeadDem`(v4, v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;.setAeadDem:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/EciesAeadDemParams$Builder;` @kind virtual;
  #L43faa2.  v2:= temp @kind object;
  #L43faa4.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43faaa.  v2:= temp @kind object;
  #L43faac.  v2:= (`com.google.crypto.tink.proto.EciesAeadDemParams`) v2 @kind object;
  #L43fab0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.newBuilder:()Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind static;
  #L43fab6.  v4:= temp @kind object;
  #L43fab8.  call temp:= `setKemParams`(v4, v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setKemParams:(Lcom/google/crypto/tink/proto/EciesHkdfKemParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L43fabe.  v1:= temp @kind object;
  #L43fac0.  call temp:= `setDemParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setDemParams:(Lcom/google/crypto/tink/proto/EciesAeadDemParams;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L43fac6.  v1:= temp @kind object;
  #L43fac8.  call temp:= `setEcPointFormat`(v1, v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;.setEcPointFormat:(Lcom/google/crypto/tink/proto/EcPointFormat;)Lcom/google/crypto/tink/proto/EciesAeadHkdfParams$Builder;` @kind virtual;
  #L43face.  v1:= temp @kind object;
  #L43fad0.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43fad6.  v1:= temp @kind object;
  #L43fad8.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfParams`) v1 @kind object;
  #L43fadc.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.OutputPrefixType` `d`(`com.google.crypto.tink.KeyTemplate$OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.d:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43fb48.  v0:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$c.a` @type ^`int`[] @kind object;
  #L43fb4c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L43fb52.  v1:= temp;
  #L43fb54.  v1:= v0[v1];
  #L43fb58.  v0:= 1I;
  #L43fb5a.  if v1 == v0 then goto L43fb92;
  #L43fb5e.  v0:= 2I;
  #L43fb60.  if v1 == v0 then goto L43fb8c;
  #L43fb64.  v0:= 3I;
  #L43fb66.  if v1 == v0 then goto L43fb86;
  #L43fb6a.  v0:= 4I;
  #L43fb6c.  if v1 != v0 then goto L43fb76;
  #L43fb70.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43fb74.  return v1 @kind object;
  #L43fb76.  v1:= new `java.lang.IllegalArgumentException`;
  #L43fb7a.  v0:= "Unknown output prefix type" @kind object;
  #L43fb7e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43fb84.  throw v1;
  #L43fb86.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43fb8a.  return v1 @kind object;
  #L43fb8c.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43fb90.  return v1 @kind object;
  #L43fb92.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.TINK` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43fb96.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f90c.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L43f910.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L43f914.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.UNCOMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L43f918.  call temp:= `aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/aead/AesCtrHmacAeadKeyManager;.aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f91e.  v3:= temp @kind object;
  #L43f920.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43f924.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L43f928.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f92e.  v0:= temp @kind object;
  #L43f930.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `eciesP256HkdfHmacSha256Aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.eciesP256HkdfHmacSha256Aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f944.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L43f948.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L43f94c.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.UNCOMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L43f950.  call temp:= `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f956.  v3:= temp @kind object;
  #L43f958.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43f95c.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L43f960.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f966.  v0:= temp @kind object;
  #L43f968.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f97c.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L43f980.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L43f984.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.COMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L43f988.  call temp:= `aes128CtrHmacSha256Template`() @signature `Lcom/google/crypto/tink/aead/AesCtrHmacAeadKeyManager;.aes128CtrHmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f98e.  v3:= temp @kind object;
  #L43f990.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43f994.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L43f998.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f99e.  v0:= temp @kind object;
  #L43f9a0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate`() @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43f9b4.  v0:= `@@com.google.crypto.tink.proto.EllipticCurveType.NIST_P256` @type ^`com.google.crypto.tink.proto.EllipticCurveType` @kind object;
  #L43f9b8.  v1:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L43f9bc.  v2:= `@@com.google.crypto.tink.proto.EcPointFormat.COMPRESSED` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L43f9c0.  call temp:= `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f9c6.  v3:= temp @kind object;
  #L43f9c8.  v4:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43f9cc.  v5:= `@@com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager.e` @type ^`byte`[] @kind object;
  #L43f9d0.  call temp:= `b`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.b:(Lcom/google/crypto/tink/proto/EllipticCurveType;Lcom/google/crypto/tink/proto/HashType;Lcom/google/crypto/tink/proto/EcPointFormat;Lcom/google/crypto/tink/KeyTemplate;Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;[B)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43f9d6.  v0:= temp @kind object;
  #L43f9d8.  return v0 @kind object;
}
procedure `void` `registerPair`(`boolean` v2 ) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.registerPair:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43fc68.  v0:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager`;
  #L43fc6c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.<init>:()V` @kind direct;
  #L43fc72.  v1:= new `com.google.crypto.tink.hybrid.a`;
  #L43fc76.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/hybrid/a;.<init>:()V` @kind direct;
  #L43fc7c.  call `registerAsymmetricKeyManagers`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L43fc82.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fbf8.  v0:= "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey" @kind object;
  #L43fbfc.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfPublicKey` `getPublicKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @AccessFlag PUBLIC {
    temp;

  #L43fb14.  call temp:= `getPublicKey`(v1) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L43fb1a.  v1:= temp @kind object;
  #L43fb1c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `getPublicKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43fba8.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey`) v1 @kind object;
  #L43fbac.  call temp:= `getPublicKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getPublicKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L43fbb2.  v1:= temp @kind object;
  #L43fbb4.  return v1 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fbe4.  v0:= 0I;
  #L43fbe6.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f9ec.  v0:= new `com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager$b`;
  #L43f9f0.  v1:= constclass @type ^`com.google.crypto.tink.proto.EciesAeadHkdfKeyFormat` @kind object;
  #L43f9f4.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager$b;.<init>:(Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L43f9fa.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fb30.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43fb34.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` `parseKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43faf0.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43faf6.  v0:= temp @kind object;
  #L43faf8.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @kind static;
  #L43fafe.  v2:= temp @kind object;
  #L43fb00.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43fbc8.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;` @kind virtual;
  #L43fbce.  v1:= temp @kind object;
  #L43fbd0.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v2 @kind this, `com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fc94.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43fc9a.  v0:= temp @kind object;
  #L43fc9c.  call temp:= `isEmpty`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.isEmpty:()Z` @kind virtual;
  #L43fca2.  v0:= temp;
  #L43fca4.  if v0 != 0 then goto L43fcd6;
  #L43fca8.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getVersion:()I` @kind virtual;
  #L43fcae.  v0:= temp;
  #L43fcb0.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.getVersion:()I` @kind virtual;
  #L43fcb6.  v1:= temp;
  #L43fcb8.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43fcbe.  call temp:= `getPublicKey`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;.getPublicKey:()Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;` @kind virtual;
  #L43fcc4.  v3:= temp @kind object;
  #L43fcc6.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfPublicKey;.getParams:()Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;` @kind virtual;
  #L43fccc.  v3:= temp @kind object;
  #L43fcce.  call `d`(v3) @signature `Lcom/google/crypto/tink/hybrid/c;.d:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)V` @kind static;
  #L43fcd4.  return @kind void;
  #L43fcd6.  v3:= new `java.security.GeneralSecurityException`;
  #L43fcda.  v0:= "invalid ECIES private key" @kind object;
  #L43fcde.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43fce4.  throw v3;
}
procedure `void` `validateKey`(`com.google.crypto.tink.hybrid.EciesAeadHkdfPrivateKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43fcf8.  v1:= (`com.google.crypto.tink.proto.EciesAeadHkdfPrivateKey`) v1 @kind object;
  #L43fcfc.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/hybrid/EciesAeadHkdfPrivateKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/EciesAeadHkdfPrivateKey;)V` @kind virtual;
  #L43fd02.  return @kind void;
}
