record `com.google.crypto.tink.hybrid.c` @kind class @AccessFlag  {
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$CurveType` `a`(`com.google.crypto.tink.proto.EllipticCurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L440710.  v0:= `@@com.google.crypto.tink.hybrid.c$a.b` @type ^`int`[] @kind object;
  #L440714.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44071a.  v1:= temp;
  #L44071c.  v0:= v0[v1];
  #L440720.  v1:= 1I;
  #L440722.  if v0 == v1 then goto L44076c;
  #L440726.  v1:= 2I;
  #L440728.  if v0 == v1 then goto L440766;
  #L44072c.  v1:= 3I;
  #L44072e.  if v0 != v1 then goto L440738;
  #L440732.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P521` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L440736.  return v3 @kind object;
  #L440738.  v0:= new `java.security.GeneralSecurityException`;
  #L44073c.  v1:= new `java.lang.StringBuilder`;
  #L440740.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L440746.  v2:= "unknown curve type: " @kind object;
  #L44074a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L440750.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L440756.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44075c.  v3:= temp @kind object;
  #L44075e.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440764.  throw v0;
  #L440766.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P384` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L44076a.  return v3 @kind object;
  #L44076c.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$CurveType.NIST_P256` @type ^`com.google.crypto.tink.subtle.EllipticCurves$CurveType` @kind object;
  #L440770.  return v3 @kind object;
}
procedure `java.lang.String` `b`(`com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.b:(Lcom/google/crypto/tink/proto/HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4407f8.  v0:= `@@com.google.crypto.tink.hybrid.c$a.a` @type ^`int`[] @kind object;
  #L4407fc.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L440802.  v1:= temp;
  #L440804.  v0:= v0[v1];
  #L440808.  v1:= 1I;
  #L44080a.  if v0 == v1 then goto L440854;
  #L44080e.  v1:= 2I;
  #L440810.  if v0 == v1 then goto L44084e;
  #L440814.  v1:= 3I;
  #L440816.  if v0 != v1 then goto L440820;
  #L44081a.  v3:= "HmacSha512" @kind object;
  #L44081e.  return v3 @kind object;
  #L440820.  v0:= new `java.security.NoSuchAlgorithmException`;
  #L440824.  v1:= new `java.lang.StringBuilder`;
  #L440828.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44082e.  v2:= "hash unsupported for HMAC: " @kind object;
  #L440832.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L440838.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44083e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L440844.  v3:= temp @kind object;
  #L440846.  call `<init>`(v0, v3) @signature `Ljava/security/NoSuchAlgorithmException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44084c.  throw v0;
  #L44084e.  v3:= "HmacSha256" @kind object;
  #L440852.  return v3 @kind object;
  #L440854.  v3:= "HmacSha1" @kind object;
  #L440858.  return v3 @kind object;
}
procedure `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` `c`(`com.google.crypto.tink.proto.EcPointFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.c:(Lcom/google/crypto/tink/proto/EcPointFormat;)Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L440784.  v0:= `@@com.google.crypto.tink.hybrid.c$a.c` @type ^`int`[] @kind object;
  #L440788.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L44078e.  v1:= temp;
  #L440790.  v0:= v0[v1];
  #L440794.  v1:= 1I;
  #L440796.  if v0 == v1 then goto L4407e0;
  #L44079a.  v1:= 2I;
  #L44079c.  if v0 == v1 then goto L4407da;
  #L4407a0.  v1:= 3I;
  #L4407a2.  if v0 != v1 then goto L4407ac;
  #L4407a6.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.COMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L4407aa.  return v3 @kind object;
  #L4407ac.  v0:= new `java.security.GeneralSecurityException`;
  #L4407b0.  v1:= new `java.lang.StringBuilder`;
  #L4407b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4407ba.  v2:= "unknown point format: " @kind object;
  #L4407be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4407c4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4407ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4407d0.  v3:= temp @kind object;
  #L4407d2.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4407d8.  throw v0;
  #L4407da.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.DO_NOT_USE_CRUNCHY_UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L4407de.  return v3 @kind object;
  #L4407e0.  v3:= `@@com.google.crypto.tink.subtle.EllipticCurves$PointFormatType.UNCOMPRESSED` @type ^`com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` @kind object;
  #L4407e4.  return v3 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.EciesAeadHkdfParams` v2 @kind object) @signature `Lcom/google/crypto/tink/hybrid/c;.d:(Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L44086c.  call temp:= `getKemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getKemParams:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams;` @kind virtual;
  #L440872.  v0:= temp @kind object;
  #L440874.  call temp:= `getCurveType`(v0) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getCurveType:()Lcom/google/crypto/tink/proto/EllipticCurveType;` @kind virtual;
  #L44087a.  v0:= temp @kind object;
  #L44087c.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/hybrid/c;.a:(Lcom/google/crypto/tink/proto/EllipticCurveType;)Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;` @kind static;
  #L440882.  v0:= temp @kind object;
  #L440884.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L44088a.  call temp:= `getKemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getKemParams:()Lcom/google/crypto/tink/proto/EciesHkdfKemParams;` @kind virtual;
  #L440890.  v0:= temp @kind object;
  #L440892.  call temp:= `getHkdfHashType`(v0) @signature `Lcom/google/crypto/tink/proto/EciesHkdfKemParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L440898.  v0:= temp @kind object;
  #L44089a.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/hybrid/c;.b:(Lcom/google/crypto/tink/proto/HashType;)Ljava/lang/String;` @kind static;
  #L4408a0.  call temp:= `getEcPointFormat`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getEcPointFormat:()Lcom/google/crypto/tink/proto/EcPointFormat;` @kind virtual;
  #L4408a6.  v0:= temp @kind object;
  #L4408a8.  v1:= `@@com.google.crypto.tink.proto.EcPointFormat.UNKNOWN_FORMAT` @type ^`com.google.crypto.tink.proto.EcPointFormat` @kind object;
  #L4408ac.  if v0 == v1 then goto L4408c8;
  #L4408b0.  call temp:= `getDemParams`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadHkdfParams;.getDemParams:()Lcom/google/crypto/tink/proto/EciesAeadDemParams;` @kind virtual;
  #L4408b6.  v2:= temp @kind object;
  #L4408b8.  call temp:= `getAeadDem`(v2) @signature `Lcom/google/crypto/tink/proto/EciesAeadDemParams;.getAeadDem:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L4408be.  v2:= temp @kind object;
  #L4408c0.  call temp:= `newKeyData`(v2) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L4408c6.  return @kind void;
  #L4408c8.  v2:= new `java.security.GeneralSecurityException`;
  #L4408cc.  v0:= "unknown EC point format" @kind object;
  #L4408d0.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4408d6.  throw v2;
}
