record `com.google.crypto.tink.hybrid.subtle.a` @kind class @AccessFlag  {
}
global `byte`[] `@@com.google.crypto.tink.hybrid.subtle.a.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L440ee0.  v0:= 0I;
  #L440ee2.  v0:= new `byte`[v0];
  #L440ee6.  `@@com.google.crypto.tink.hybrid.subtle.a.a` @type ^`byte`[] := v0 @kind object;
  #L440eea.  return @kind void;
}
procedure `int` `a`(`java.math.BigInteger` v0 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.a:(Ljava/math/BigInteger;)I` @AccessFlag STATIC {
    temp;

  #L440ebc.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L440ec2.  v0:= temp;
  #L440ec4.  v0:= v0 + 7;
  #L440ec8.  v0:= v0 / 8;
  #L440ecc.  return v0;
}
procedure `byte`[] `b`(`java.math.BigInteger` v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.b:(Ljava/math/BigInteger;I)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L440dc4.  call temp:= `toByteArray`(v5) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L440dca.  v5:= temp @kind object;
  #L440dcc.  v0:= length @variable v5;
  #L440dce.  if v0 != v6 then goto L440dd4;
  #L440dd2.  return v5 @kind object;
  #L440dd4.  v0:= new `byte`[v6];
  #L440dd8.  v1:= length @variable v5;
  #L440dda.  v2:= v6 + 1;
  #L440dde.  v3:= 1I;
  #L440de0.  v4:= 0I;
  #L440de2.  if v1 != v2 then goto L440e06;
  #L440de6.  v1:= v5[v4] @kind byte;
  #L440dea.  if v1 != 0 then goto L440df6;
  #L440dee.  call `arraycopy`(v5, v3, v0, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L440df4.  goto L440e18;
  #L440df6.  v5:= new `java.lang.IllegalArgumentException`;
  #L440dfa.  v6:= "Value is one-byte longer than the expected size, but its first byte is not 0" @kind object;
  #L440dfe.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440e04.  throw v5;
  #L440e06.  v1:= length @variable v5;
  #L440e08.  if v1 >= v6 then goto L440e1a;
  #L440e0c.  v1:= length @variable v5;
  #L440e0e.  v6:= v6 - v1 @kind int;
  #L440e10.  v1:= length @variable v5;
  #L440e12.  call `arraycopy`(v5, v4, v0, v6, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L440e18.  return v0 @kind object;
  #L440e1a.  v0:= new `java.lang.IllegalArgumentException`;
  #L440e1e.  v1:= 2I;
  #L440e20.  v1:= new `java.lang.Object`[v1];
  #L440e24.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440e2a.  v6:= temp @kind object;
  #L440e2c.  v1[v4]:= v6 @kind object;
  #L440e30.  v5:= length @variable v5;
  #L440e32.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440e38.  v5:= temp @kind object;
  #L440e3a.  v1[v3]:= v5 @kind object;
  #L440e3e.  v5:= "Value has invalid length, must be of length at most (%d + 1), but got %d" @kind object;
  #L440e42.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L440e48.  v5:= temp @kind object;
  #L440e4a.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440e50.  throw v0;
}
procedure `byte`[] `c`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.c:(Ljava/math/BigInteger;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L440e64.  call temp:= `a`(v4) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.a:(Ljava/math/BigInteger;)I` @kind static;
  #L440e6a.  v0:= temp;
  #L440e6c.  v1:= new `java.security.SecureRandom`;
  #L440e70.  call `<init>`(v1) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L440e76.  v2:= new `java.math.BigInteger`;
  #L440e7a.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L440e80.  v3:= temp;
  #L440e82.  call `<init>`(v2, v3, v1) @signature `Ljava/math/BigInteger;.<init>:(ILjava/util/Random;)V` @kind direct;
  #L440e88.  call temp:= `signum`(v2) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L440e8e.  v3:= temp;
  #L440e90.  if v3 <= 0 then goto L440e76;
  #L440e94.  call temp:= `compareTo`(v2, v4) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L440e9a.  v3:= temp;
  #L440e9c.  if v3 >= 0 then goto L440e76;
  #L440ea0.  call temp:= `b`(v2, v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.b:(Ljava/math/BigInteger;I)[B` @kind static;
  #L440ea6.  v4:= temp @kind object;
  #L440ea8.  return v4 @kind object;
}
procedure `void` `d`(`java.math.BigInteger` v4 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.d:(Ljava/math/BigInteger;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L440efc.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L440f02.  v0:= temp;
  #L440f04.  v1:= 2048I;
  #L440f08.  if v0 < v1 then goto L440f0e;
  #L440f0c.  return @kind void;
  #L440f0e.  v0:= new `java.security.GeneralSecurityException`;
  #L440f12.  v2:= 2I;
  #L440f14.  v2:= new `java.lang.Object`[v2];
  #L440f18.  v3:= 0I;
  #L440f1a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440f20.  v1:= temp @kind object;
  #L440f22.  v2[v3]:= v1 @kind object;
  #L440f26.  v1:= 1I;
  #L440f28.  call temp:= `bitLength`(v4) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L440f2e.  v4:= temp;
  #L440f30.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440f36.  v4:= temp @kind object;
  #L440f38.  v2[v1]:= v4 @kind object;
  #L440f3c.  v4:= "RSA key must be of at least size %d bits, but got %d" @kind object;
  #L440f40.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L440f46.  v4:= temp @kind object;
  #L440f48.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440f4e.  throw v0;
}
