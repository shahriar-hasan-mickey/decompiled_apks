record `com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.HybridEncrypt` @kind interface {
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.c` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.aead.subtle.AeadFactory` `com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt` v1 @kind this, `java.security.interfaces.RSAPublicKey` v2 @kind object, `java.lang.String` v3 @kind object, `byte`[] v4 @kind object, `com.google.crypto.tink.aead.subtle.AeadFactory` v5 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/RsaKemHybridEncrypt;.<init>:(Ljava/security/interfaces/RSAPublicKey;Ljava/lang/String;[BLcom/google/crypto/tink/aead/subtle/AeadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L440d8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L440d92.  call temp:= `getModulus`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L440d98.  v0:= temp @kind object;
  #L440d9a.  call `d`(v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.d:(Ljava/math/BigInteger;)V` @kind static;
  #L440da0.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.a` @type ^`java.security.interfaces.RSAPublicKey` := v2 @kind object;
  #L440da4.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.b` @type ^`java.lang.String` := v3 @kind object;
  #L440da8.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.c` @type ^`byte`[] := v4 @kind object;
  #L440dac.  v1.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` := v5 @kind object;
  #L440db0.  return @kind void;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt` v5 @kind this, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/hybrid/subtle/RsaKemHybridEncrypt;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L440cec.  v0:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L440cf0.  call temp:= `getModulus`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L440cf6.  v0:= temp @kind object;
  #L440cf8.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/hybrid/subtle/a;.c:(Ljava/math/BigInteger;)[B` @kind static;
  #L440cfe.  v0:= temp @kind object;
  #L440d00.  v1:= "RSA/ECB/NoPadding" @kind object;
  #L440d04.  call temp:= `getInstance`(v1) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L440d0a.  v1:= temp @kind object;
  #L440d0c.  v2:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L440d10.  v3:= 1I;
  #L440d12.  call `init`(v1, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L440d18.  call temp:= `doFinal`(v1, v0) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L440d1e.  v1:= temp @kind object;
  #L440d20.  v2:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.b` @type ^`java.lang.String` @kind object;
  #L440d24.  v3:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.c` @type ^`byte`[] @kind object;
  #L440d28.  v4:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` @kind object;
  #L440d2c.  call temp:= `getKeySizeInBytes`(v4) @signature `Lcom/google/crypto/tink/aead/subtle/AeadFactory;.getKeySizeInBytes:()I` @kind interface;
  #L440d32.  v4:= temp;
  #L440d34.  call temp:= `computeHkdf`(v2, v0, v3, v7, v4) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L440d3a.  v7:= temp @kind object;
  #L440d3c.  v0:= v5.`com.google.crypto.tink.hybrid.subtle.RsaKemHybridEncrypt.d` @type ^`com.google.crypto.tink.aead.subtle.AeadFactory` @kind object;
  #L440d40.  call temp:= `createAead`(v0, v7) @signature `Lcom/google/crypto/tink/aead/subtle/AeadFactory;.createAead:([B)Lcom/google/crypto/tink/Aead;` @kind interface;
  #L440d46.  v7:= temp @kind object;
  #L440d48.  v0:= `@@com.google.crypto.tink.hybrid.subtle.a.a` @type ^`byte`[] @kind object;
  #L440d4c.  call temp:= `encrypt`(v7, v6, v0) @signature `Lcom/google/crypto/tink/Aead;.encrypt:([B[B)[B` @kind interface;
  #L440d52.  v6:= temp @kind object;
  #L440d54.  v7:= length @variable v1;
  #L440d56.  v0:= length @variable v6;
  #L440d58.  v7:= v7 + v0 @kind int;
  #L440d5a.  call temp:= `allocate`(v7) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L440d60.  v7:= temp @kind object;
  #L440d62.  call temp:= `put`(v7, v1) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L440d68.  v7:= temp @kind object;
  #L440d6a.  call temp:= `put`(v7, v6) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L440d70.  v6:= temp @kind object;
  #L440d72.  call temp:= `array`(v6) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L440d78.  v6:= temp @kind object;
  #L440d7a.  return v6 @kind object;
}
