record `com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` @kind class @AccessFlag  extends `com.google.crypto.tink.HybridDecrypt` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper$a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44017c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L440182.  v0.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v1 @kind object;
  #L440186.  return @kind void;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper$a;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L440060.  v0:= length @variable v7;
  #L440062.  v1:= 5I;
  #L440064.  if v0 <= v1 then goto L4400fa;
  #L440068.  v0:= 0I;
  #L44006a.  call temp:= `copyOfRange`(v7, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L440070.  v0:= temp @kind object;
  #L440072.  v2:= length @variable v7;
  #L440074.  call temp:= `copyOfRange`(v7, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L44007a.  v1:= temp @kind object;
  #L44007c.  v2:= v6.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L440080.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L440086.  v0:= temp @kind object;
  #L440088.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44008e.  v0:= temp @kind object;
  #L440090.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L440096.  v2:= temp;
  #L440098.  if v2 == 0 then goto L4400fa;
  #L44009c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4400a2.  v2:= temp @kind object;
  #L4400a4.  v2:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v2 @kind object;
  #L4400a8.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L4400ae.  v2:= temp @kind object;
  #L4400b0.  v2:= (`com.google.crypto.tink.HybridDecrypt`) v2 @kind object;
  #L4400b4.  call temp:= `decrypt`(v2, v1, v8) @signature `Lcom/google/crypto/tink/HybridDecrypt;.decrypt:([B[B)[B` @kind interface;
  #L4400ba.  v7:= temp @kind object;
  #L4400bc.  return v7 @kind object;
  #L4400be.  v2:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4400c0.  call temp:= `a`() @signature `Lcom/google/crypto/tink/hybrid/HybridDecryptWrapper;.a:()Ljava/util/logging/Logger;` @kind static;
  #L4400c6.  v3:= temp @kind object;
  #L4400c8.  v4:= new `java.lang.StringBuilder`;
  #L4400cc.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4400d2.  v5:= "ciphertext prefix matches a key, but cannot decrypt: " @kind object;
  #L4400d6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4400dc.  call temp:= `toString`(v2) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L4400e2.  v2:= temp @kind object;
  #L4400e4.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4400ea.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4400f0.  v2:= temp @kind object;
  #L4400f2.  call `info`(v3, v2) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L4400f8.  goto L440090;
  #L4400fa.  v0:= v6.`com.google.crypto.tink.hybrid.HybridDecryptWrapper$a.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L4400fe.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L440104.  v0:= temp @kind object;
  #L440106.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44010c.  v0:= temp @kind object;
  #L44010e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L440114.  v1:= temp;
  #L440116.  if v1 == 0 then goto L440140;
  #L44011a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L440120.  v1:= temp @kind object;
  #L440122.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L440126.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L44012c.  v1:= temp @kind object;
  #L44012e.  v1:= (`com.google.crypto.tink.HybridDecrypt`) v1 @kind object;
  #L440132.  call temp:= `decrypt`(v1, v7, v8) @signature `Lcom/google/crypto/tink/HybridDecrypt;.decrypt:([B[B)[B` @kind interface;
  #L440138.  v7:= temp @kind object;
  #L44013a.  return v7 @kind object;
  #L44013c.  
  #L44013e.  goto L44010e;
  #L440140.  v7:= new `java.security.GeneralSecurityException`;
  #L440144.  v8:= "decryption failed" @kind object;
  #L440148.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44014e.  throw v7;
  catch `java.security.GeneralSecurityException` @[L4400a8..L4400bc] goto L4400be;
  catch `java.security.GeneralSecurityException` @[L440126..L44013a] goto L44013c;
}
