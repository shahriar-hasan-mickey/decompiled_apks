record `com.google.crypto.tink.BinaryKeysetReader` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeysetReader` @kind interface {
  `java.io.InputStream` `com.google.crypto.tink.BinaryKeysetReader.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.BinaryKeysetReader.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.BinaryKeysetReader` v0 @kind this, `java.io.InputStream` v1 @kind object, `boolean` v2 ) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L436c24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436c2a.  v0.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L436c2e.  v0.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` := v2 @kind boolean;
  #L436c32.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetReader` `withBytes`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withBytes:([B)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L436afc.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L436b00.  v1:= new `java.io.ByteArrayInputStream`;
  #L436b04.  call `<init>`(v1, v2) @signature `Ljava/io/ByteArrayInputStream;.<init>:([B)V` @kind direct;
  #L436b0a.  v2:= 1I;
  #L436b0c.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L436b12.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetReader` `withFile`(`java.io.File` v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withFile:(Ljava/io/File;)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L436b24.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L436b28.  v1:= new `java.io.FileInputStream`;
  #L436b2c.  call `<init>`(v1, v2) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L436b32.  v2:= 1I;
  #L436b34.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L436b3a.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetReader` `withInputStream`(`java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.withInputStream:(Ljava/io/InputStream;)Lcom/google/crypto/tink/KeysetReader;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L436b4c.  v0:= new `com.google.crypto.tink.BinaryKeysetReader`;
  #L436b50.  v1:= 0I;
  #L436b52.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L436b58.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.Keyset` `read`(`com.google.crypto.tink.BinaryKeysetReader` v2 @kind this) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436bc8.  v0:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436bcc.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L436bd2.  v1:= temp @kind object;
  #L436bd4.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:(Ljava/io/InputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L436bda.  v0:= temp @kind object;
  #L436bdc.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L436be0.  if v1 == 0 then goto L436bee;
  #L436be4.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436be8.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L436bee.  return v0 @kind object;
  #L436bf0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436bf2.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L436bf6.  if v1 == 0 then goto L436c04;
  #L436bfa.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436bfe.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L436c04.  throw v0;
  catch `java.lang.Throwable` @[L436bc8..L436bdc] goto L436bf0;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `readEncrypted`(`com.google.crypto.tink.BinaryKeysetReader` v2 @kind this) @signature `Lcom/google/crypto/tink/BinaryKeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436b6c.  v0:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436b70.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L436b76.  v1:= temp @kind object;
  #L436b78.  call temp:= `parseFrom`(v0, v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.parseFrom:(Ljava/io/InputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind static;
  #L436b7e.  v0:= temp @kind object;
  #L436b80.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L436b84.  if v1 == 0 then goto L436b92;
  #L436b88.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436b8c.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L436b92.  return v0 @kind object;
  #L436b94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436b96.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.b` @type ^`boolean` @kind boolean;
  #L436b9a.  if v1 == 0 then goto L436ba8;
  #L436b9e.  v1:= v2.`com.google.crypto.tink.BinaryKeysetReader.a` @type ^`java.io.InputStream` @kind object;
  #L436ba2.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L436ba8.  throw v0;
  catch `java.lang.Throwable` @[L436b6c..L436b80] goto L436b94;
}
