record `com.google.crypto.tink.a` @kind class @AccessFlag  {
}
global `java.nio.charset.Charset` `@@com.google.crypto.tink.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43b9a4.  v0:= "UTF-8" @kind object;
  #L43b9a8.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L43b9ae.  v0:= temp @kind object;
  #L43b9b0.  `@@com.google.crypto.tink.a.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L43b9b4.  return @kind void;
}
procedure `com.google.crypto.tink.proto.KeysetInfo$KeyInfo` `a`(`com.google.crypto.tink.proto.Keyset$Key` v2 @kind object) @signature `Lcom/google/crypto/tink/a;.a:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43b934.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;.newBuilder:()Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind static;
  #L43b93a.  v0:= temp @kind object;
  #L43b93c.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43b942.  v1:= temp @kind object;
  #L43b944.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43b94a.  v1:= temp @kind object;
  #L43b94c.  call temp:= `setTypeUrl`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L43b952.  v0:= temp @kind object;
  #L43b954.  call temp:= `getStatus`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L43b95a.  v1:= temp @kind object;
  #L43b95c.  call temp:= `setStatus`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setStatus:(Lcom/google/crypto/tink/proto/KeyStatusType;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L43b962.  v0:= temp @kind object;
  #L43b964.  call temp:= `getOutputPrefixType`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L43b96a.  v1:= temp @kind object;
  #L43b96c.  call temp:= `setOutputPrefixType`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L43b972.  v0:= temp @kind object;
  #L43b974.  call temp:= `getKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43b97a.  v2:= temp;
  #L43b97c.  call temp:= `setKeyId`(v0, v2) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;.setKeyId:(I)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo$Builder;` @kind virtual;
  #L43b982.  v2:= temp @kind object;
  #L43b984.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43b98a.  v2:= temp @kind object;
  #L43b98c.  v2:= (`com.google.crypto.tink.proto.KeysetInfo$KeyInfo`) v2 @kind object;
  #L43b990.  return v2 @kind object;
}
procedure `com.google.crypto.tink.proto.KeysetInfo` `b`(`com.google.crypto.tink.proto.Keyset` v2 @kind object) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43b8c4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeysetInfo;.newBuilder:()Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind static;
  #L43b8ca.  v0:= temp @kind object;
  #L43b8cc.  call temp:= `getPrimaryKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L43b8d2.  v1:= temp;
  #L43b8d4.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind virtual;
  #L43b8da.  v0:= temp @kind object;
  #L43b8dc.  call temp:= `getKeyList`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L43b8e2.  v2:= temp @kind object;
  #L43b8e4.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43b8ea.  v2:= temp @kind object;
  #L43b8ec.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43b8f2.  v1:= temp;
  #L43b8f4.  if v1 == 0 then goto L43b914;
  #L43b8f8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43b8fe.  v1:= temp @kind object;
  #L43b900.  v1:= (`com.google.crypto.tink.proto.Keyset$Key`) v1 @kind object;
  #L43b904.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/a;.a:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;` @kind static;
  #L43b90a.  v1:= temp @kind object;
  #L43b90c.  call temp:= `addKeyInfo`(v0, v1) @signature `Lcom/google/crypto/tink/proto/KeysetInfo$Builder;.addKeyInfo:(Lcom/google/crypto/tink/proto/KeysetInfo$KeyInfo;)Lcom/google/crypto/tink/proto/KeysetInfo$Builder;` @kind virtual;
  #L43b912.  goto L43b8ec;
  #L43b914.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43b91a.  v2:= temp @kind object;
  #L43b91c.  v2:= (`com.google.crypto.tink.proto.KeysetInfo`) v2 @kind object;
  #L43b920.  return v2 @kind object;
}
procedure `byte`[] `c`(`java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/a;.c:(Ljava/io/InputStream;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43b880.  v0:= new `java.io.ByteArrayOutputStream`;
  #L43b884.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L43b88a.  v1:= 1024I;
  #L43b88e.  v1:= new `byte`[v1];
  #L43b892.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L43b898.  v2:= temp;
  #L43b89a.  v3:= -1I;
  #L43b89c.  if v2 == v3 then goto L43b8aa;
  #L43b8a0.  v3:= 0I;
  #L43b8a2.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L43b8a8.  goto L43b892;
  #L43b8aa.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L43b8b0.  v4:= temp @kind object;
  #L43b8b2.  return v4 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.Keyset$Key` v4 @kind object) @signature `Lcom/google/crypto/tink/a;.d:(Lcom/google/crypto/tink/proto/Keyset$Key;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43b9c8.  call temp:= `hasKeyData`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.hasKeyData:()Z` @kind virtual;
  #L43b9ce.  v0:= temp;
  #L43b9d0.  v1:= 0I;
  #L43b9d2.  v2:= 1I;
  #L43b9d4.  if v0 == 0 then goto L43ba5a;
  #L43b9d8.  call temp:= `getOutputPrefixType`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L43b9de.  v0:= temp @kind object;
  #L43b9e0.  v3:= `@@com.google.crypto.tink.proto.OutputPrefixType.UNKNOWN_PREFIX` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43b9e4.  if v0 == v3 then goto L43ba2a;
  #L43b9e8.  call temp:= `getStatus`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L43b9ee.  v0:= temp @kind object;
  #L43b9f0.  v3:= `@@com.google.crypto.tink.proto.KeyStatusType.UNKNOWN_STATUS` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L43b9f4.  if v0 == v3 then goto L43b9fa;
  #L43b9f8.  return @kind void;
  #L43b9fa.  v0:= new `java.security.GeneralSecurityException`;
  #L43b9fe.  v2:= new `java.lang.Object`[v2];
  #L43ba02.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43ba08.  v4:= temp;
  #L43ba0a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43ba10.  v4:= temp @kind object;
  #L43ba12.  v2[v1]:= v4 @kind object;
  #L43ba16.  v4:= "key %d has unknown status" @kind object;
  #L43ba1a.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43ba20.  v4:= temp @kind object;
  #L43ba22.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ba28.  throw v0;
  #L43ba2a.  v0:= new `java.security.GeneralSecurityException`;
  #L43ba2e.  v2:= new `java.lang.Object`[v2];
  #L43ba32.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43ba38.  v4:= temp;
  #L43ba3a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43ba40.  v4:= temp @kind object;
  #L43ba42.  v2[v1]:= v4 @kind object;
  #L43ba46.  v4:= "key %d has unknown prefix" @kind object;
  #L43ba4a.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43ba50.  v4:= temp @kind object;
  #L43ba52.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ba58.  throw v0;
  #L43ba5a.  v0:= new `java.security.GeneralSecurityException`;
  #L43ba5e.  v2:= new `java.lang.Object`[v2];
  #L43ba62.  call temp:= `getKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43ba68.  v4:= temp;
  #L43ba6a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43ba70.  v4:= temp @kind object;
  #L43ba72.  v2[v1]:= v4 @kind object;
  #L43ba76.  v4:= "key %d has no key data" @kind object;
  #L43ba7a.  call temp:= `format`(v4, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43ba80.  v4:= temp @kind object;
  #L43ba82.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ba88.  throw v0;
}
procedure `void` `e`(`com.google.crypto.tink.proto.Keyset` v9 @kind object) @signature `Lcom/google/crypto/tink/a;.e:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43ba9c.  call temp:= `getPrimaryKeyId`(v9) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L43baa2.  v0:= temp;
  #L43baa4.  call temp:= `getKeyList`(v9) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L43baaa.  v9:= temp @kind object;
  #L43baac.  call temp:= `iterator`(v9) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43bab2.  v9:= temp @kind object;
  #L43bab4.  v1:= 1I;
  #L43bab6.  v2:= 0I;
  #L43bab8.  v3:= 0I;
  #L43baba.  v4:= 0I;
  #L43babc.  v5:= 1I;
  #L43babe.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43bac4.  v6:= temp;
  #L43bac6.  if v6 == 0 then goto L43bb32;
  #L43baca.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43bad0.  v6:= temp @kind object;
  #L43bad2.  v6:= (`com.google.crypto.tink.proto.Keyset$Key`) v6 @kind object;
  #L43bad6.  call temp:= `getStatus`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L43badc.  v7:= temp @kind object;
  #L43bade.  v8:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L43bae2.  if v7 == v8 then goto L43bae8;
  #L43bae6.  goto L43babe;
  #L43bae8.  call `d`(v6) @signature `Lcom/google/crypto/tink/a;.d:(Lcom/google/crypto/tink/proto/Keyset$Key;)V` @kind static;
  #L43baee.  call temp:= `getKeyId`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43baf4.  v7:= temp;
  #L43baf6.  if v7 != v0 then goto L43bb12;
  #L43bafa.  if v4 != 0 then goto L43bb02;
  #L43bafe.  v4:= 1I;
  #L43bb00.  goto L43bb12;
  #L43bb02.  v9:= new `java.security.GeneralSecurityException`;
  #L43bb06.  v0:= "keyset contains multiple primary keys" @kind object;
  #L43bb0a.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43bb10.  throw v9;
  #L43bb12.  call temp:= `getKeyData`(v6) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43bb18.  v6:= temp @kind object;
  #L43bb1a.  call temp:= `getKeyMaterialType`(v6) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L43bb20.  v6:= temp @kind object;
  #L43bb22.  v7:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PUBLIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43bb26.  if v6 == v7 then goto L43bb2c;
  #L43bb2a.  v5:= 0I;
  #L43bb2c.  v3:= v3 + 1;
  #L43bb30.  goto L43babe;
  #L43bb32.  if v3 == 0 then goto L43bb52;
  #L43bb36.  if v4 != 0 then goto L43bb50;
  #L43bb3a.  if v5 == 0 then goto L43bb40;
  #L43bb3e.  goto L43bb50;
  #L43bb40.  v9:= new `java.security.GeneralSecurityException`;
  #L43bb44.  v0:= "keyset doesn't contain a valid primary key" @kind object;
  #L43bb48.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43bb4e.  throw v9;
  #L43bb50.  return @kind void;
  #L43bb52.  v9:= new `java.security.GeneralSecurityException`;
  #L43bb56.  v0:= "keyset must contain at least one ENABLED key" @kind object;
  #L43bb5a.  call `<init>`(v9, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43bb60.  throw v9;
}
