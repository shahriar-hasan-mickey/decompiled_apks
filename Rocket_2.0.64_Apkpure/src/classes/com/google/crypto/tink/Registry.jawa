record `com.google.crypto.tink.Registry` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@com.google.crypto.tink.Registry.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentMap` `@@com.google.crypto.tink.Registry.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/Registry;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43b084.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b088.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b08e.  v0:= temp @kind object;
  #L43b090.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L43b096.  v0:= temp @kind object;
  #L43b098.  `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L43b09c.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43b0a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43b0a6.  `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43b0aa.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43b0ae.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43b0b4.  `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43b0b8.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43b0bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43b0c2.  `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43b0c6.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43b0ca.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43b0d0.  `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43b0d4.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43b0d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43b0de.  `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43b0e2.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.Registry` v0 @kind this) @signature `Lcom/google/crypto/tink/Registry;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L43b0f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43b0fa.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43ad98.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43ad9e.  return v0 @kind object;
}
procedure `void` `addCatalogue`(`java.lang.String` v5 @kind object, `com.google.crypto.tink.Catalogue` v6 @kind object) @signature `Lcom/google/crypto/tink/Registry;.addCatalogue:(Ljava/lang/String;Lcom/google/crypto/tink/Catalogue;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43b10c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b110.  @monitorenter v0
  #L43b112.  if v5 == 0 then goto L43b1ee;
  #L43b116.  if v6 == 0 then goto L43b1de;
  #L43b11a.  v1:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b11e.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L43b122.  call temp:= `toLowerCase`(v5, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43b128.  v3:= temp @kind object;
  #L43b12a.  call temp:= `containsKey`(v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b130.  v3:= temp;
  #L43b132.  if v3 == 0 then goto L43b1cc;
  #L43b136.  call temp:= `toLowerCase`(v5, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43b13c.  v3:= temp @kind object;
  #L43b13e.  call temp:= `get`(v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b144.  v3:= temp @kind object;
  #L43b146.  v3:= (`com.google.crypto.tink.Catalogue`) v3 @kind object;
  #L43b14a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b150.  v4:= temp @kind object;
  #L43b152.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b158.  v3:= temp @kind object;
  #L43b15a.  call temp:= `equals`(v4, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b160.  v3:= temp;
  #L43b162.  if v3 == 0 then goto L43b168;
  #L43b166.  goto L43b1cc;
  #L43b168.  v6:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L43b16c.  v1:= new `java.lang.StringBuilder`;
  #L43b170.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b176.  v2:= "Attempted overwrite of a catalogueName catalogue for name " @kind object;
  #L43b17a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b180.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b186.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b18c.  v1:= temp @kind object;
  #L43b18e.  call `warning`(v6, v1) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L43b194.  v6:= new `java.security.GeneralSecurityException`;
  #L43b198.  v1:= new `java.lang.StringBuilder`;
  #L43b19c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b1a2.  v2:= "catalogue for name " @kind object;
  #L43b1a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b1ac.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b1b2.  v5:= " has been already registered" @kind object;
  #L43b1b6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b1bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b1c2.  v5:= temp @kind object;
  #L43b1c4.  call `<init>`(v6, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b1ca.  throw v6;
  #L43b1cc.  call temp:= `toLowerCase`(v5, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43b1d2.  v5:= temp @kind object;
  #L43b1d4.  call temp:= `put`(v1, v5, v6) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b1da.  @monitorexit v0
  #L43b1dc.  return @kind void;
  #L43b1de.  v5:= new `java.lang.IllegalArgumentException`;
  #L43b1e2.  v6:= "catalogue must be non-null." @kind object;
  #L43b1e6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b1ec.  throw v5;
  #L43b1ee.  v5:= new `java.lang.IllegalArgumentException`;
  #L43b1f2.  v6:= "catalogueName must be non-null." @kind object;
  #L43b1f6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b1fc.  throw v5;
  #L43b1fe.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b200.  @monitorexit v0
  #L43b202.  throw v5;
  catch `java.lang.Throwable` @[L43b11a..L43b1da] goto L43b1fe;
  catch `java.lang.Throwable` @[L43b1de..L43b1fe] goto L43b1fe;
}
procedure `com.google.crypto.tink.Registry$f` `b`(`com.google.crypto.tink.KeyManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.b:(Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43a9fc.  v0:= new `com.google.crypto.tink.Registry$a`;
  #L43aa00.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$a;.<init>:(Lcom/google/crypto/tink/KeyManager;)V` @kind direct;
  #L43aa06.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$f` `c`(`com.google.crypto.tink.KeyTypeManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43aa18.  v0:= new `com.google.crypto.tink.Registry$b`;
  #L43aa1c.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$b;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L43aa22.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$e` `d`(`com.google.crypto.tink.KeyTypeManager` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43a9e0.  v0:= new `com.google.crypto.tink.Registry$d`;
  #L43a9e4.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/Registry$d;.<init>:(Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L43a9ea.  return v0 @kind object;
}
procedure `com.google.crypto.tink.Registry$f` `e`(`com.google.crypto.tink.PrivateKeyTypeManager` v1 @kind object, `com.google.crypto.tink.KeyTypeManager` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.e:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43aa34.  v0:= new `com.google.crypto.tink.Registry$c`;
  #L43aa38.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry$c;.<init>:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)V` @kind direct;
  #L43aa3e.  return v0 @kind object;
}
procedure `void` `f`(`java.lang.String` v5 @kind object, `java.lang.Class` v6 @kind object, `boolean` v7 ) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43b228.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b22c.  @monitorenter v0
  #L43b22e.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b232.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b238.  v2:= temp;
  #L43b23a.  if v2 != 0 then goto L43b242;
  #L43b23e.  @monitorexit v0
  #L43b240.  return @kind void;
  #L43b242.  call temp:= `get`(v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b248.  v1:= temp @kind object;
  #L43b24a.  v1:= (`com.google.crypto.tink.Registry$f`) v1 @kind object;
  #L43b24e.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L43b254.  v2:= temp @kind object;
  #L43b256.  call temp:= `equals`(v2, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b25c.  v2:= temp;
  #L43b25e.  if v2 == 0 then goto L43b2b6;
  #L43b262.  if v7 == 0 then goto L43b2b2;
  #L43b266.  v6:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b26a.  call temp:= `get`(v6, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b270.  v6:= temp @kind object;
  #L43b272.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L43b276.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L43b27c.  v6:= temp;
  #L43b27e.  if v6 == 0 then goto L43b284;
  #L43b282.  goto L43b2b2;
  #L43b284.  v6:= new `java.security.GeneralSecurityException`;
  #L43b288.  v7:= new `java.lang.StringBuilder`;
  #L43b28c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b292.  v1:= "New keys are already disallowed for key type " @kind object;
  #L43b296.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b29c.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b2a2.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b2a8.  v5:= temp @kind object;
  #L43b2aa.  call `<init>`(v6, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b2b0.  throw v6;
  #L43b2b2.  @monitorexit v0
  #L43b2b4.  return @kind void;
  #L43b2b6.  v7:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L43b2ba.  v2:= new `java.lang.StringBuilder`;
  #L43b2be.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b2c4.  v3:= "Attempted overwrite of a registered key manager for key type " @kind object;
  #L43b2c8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b2ce.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b2d4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b2da.  v2:= temp @kind object;
  #L43b2dc.  call `warning`(v7, v2) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L43b2e2.  v7:= new `java.security.GeneralSecurityException`;
  #L43b2e6.  v2:= "typeUrl (%s) is already registered with %s, cannot be re-registered with %s" @kind object;
  #L43b2ea.  v3:= 3I;
  #L43b2ec.  v3:= new `java.lang.Object`[v3];
  #L43b2f0.  v4:= 0I;
  #L43b2f2.  v3[v4]:= v5 @kind object;
  #L43b2f6.  v5:= 1I;
  #L43b2f8.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L43b2fe.  v1:= temp @kind object;
  #L43b300.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b306.  v1:= temp @kind object;
  #L43b308.  v3[v5]:= v1 @kind object;
  #L43b30c.  v5:= 2I;
  #L43b30e.  call temp:= `getName`(v6) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b314.  v6:= temp @kind object;
  #L43b316.  v3[v5]:= v6 @kind object;
  #L43b31a.  call temp:= `format`(v2, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43b320.  v5:= temp @kind object;
  #L43b322.  call `<init>`(v7, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b328.  throw v7;
  #L43b32a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b32c.  @monitorexit v0
  #L43b32e.  throw v5;
  catch `java.lang.Throwable` @[L43b22e..L43b23a] goto L43b32a;
  catch `java.lang.Throwable` @[L43b242..L43b2b2] goto L43b32a;
  catch `java.lang.Throwable` @[L43b2b6..L43b32a] goto L43b32a;
}
procedure `com.google.crypto.tink.Registry$f` `g`(`java.lang.String` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43aa50.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43aa54.  @monitorenter v0
  #L43aa56.  v1:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43aa5a.  call temp:= `containsKey`(v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43aa60.  v2:= temp;
  #L43aa62.  if v2 == 0 then goto L43aa76;
  #L43aa66.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43aa6c.  v4:= temp @kind object;
  #L43aa6e.  v4:= (`com.google.crypto.tink.Registry$f`) v4 @kind object;
  #L43aa72.  @monitorexit v0
  #L43aa74.  return v4 @kind object;
  #L43aa76.  v1:= new `java.security.GeneralSecurityException`;
  #L43aa7a.  v2:= new `java.lang.StringBuilder`;
  #L43aa7e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43aa84.  v3:= "No key manager found for key type " @kind object;
  #L43aa88.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43aa8e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43aa94.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43aa9a.  v4:= temp @kind object;
  #L43aa9c.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43aaa2.  throw v1;
  #L43aaa4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43aaa6.  @monitorexit v0
  #L43aaa8.  throw v4;
  catch `java.lang.Throwable` @[L43aa56..L43aa72] goto L43aaa4;
  catch `java.lang.Throwable` @[L43aa76..L43aaa4] goto L43aaa4;
}
procedure `com.google.crypto.tink.Catalogue` `getCatalogue`(`java.lang.String` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getCatalogue:(Ljava/lang/String;)Lcom/google/crypto/tink/Catalogue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43a54c.  if v4 == 0 then goto L43a766;
  #L43a550.  v0:= `@@com.google.crypto.tink.Registry.e` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43a554.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L43a558.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a55e.  v2:= temp @kind object;
  #L43a560.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43a566.  v0:= temp @kind object;
  #L43a568.  v0:= (`com.google.crypto.tink.Catalogue`) v0 @kind object;
  #L43a56c.  if v0 != 0 then goto L43a764;
  #L43a570.  v0:= 1I;
  #L43a572.  v0:= new `java.lang.Object`[v0];
  #L43a576.  v2:= 0I;
  #L43a578.  v0[v2]:= v4 @kind object;
  #L43a57c.  v2:= "no catalogue found for %s. " @kind object;
  #L43a580.  call temp:= `format`(v2, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43a586.  v0:= temp @kind object;
  #L43a588.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a58e.  v2:= temp @kind object;
  #L43a590.  v3:= "tinkaead" @kind object;
  #L43a594.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a59a.  v2:= temp;
  #L43a59c.  if v2 == 0 then goto L43a5c2;
  #L43a5a0.  v2:= new `java.lang.StringBuilder`;
  #L43a5a4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a5aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a5b0.  v0:= "Maybe call AeadConfig.register()." @kind object;
  #L43a5b4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a5ba.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a5c0.  v0:= temp @kind object;
  #L43a5c2.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a5c8.  v2:= temp @kind object;
  #L43a5ca.  v3:= "tinkdeterministicaead" @kind object;
  #L43a5ce.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a5d4.  v2:= temp;
  #L43a5d6.  if v2 != 0 then goto L43a736;
  #L43a5da.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a5e0.  v2:= temp @kind object;
  #L43a5e2.  v3:= "tinkstreamingaead" @kind object;
  #L43a5e6.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a5ec.  v2:= temp;
  #L43a5ee.  if v2 != 0 then goto L43a712;
  #L43a5f2.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a5f8.  v2:= temp @kind object;
  #L43a5fa.  v3:= "tinkhybriddecrypt" @kind object;
  #L43a5fe.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a604.  v2:= temp;
  #L43a606.  if v2 != 0 then goto L43a6ee;
  #L43a60a.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a610.  v2:= temp @kind object;
  #L43a612.  v3:= "tinkhybridencrypt" @kind object;
  #L43a616.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a61c.  v2:= temp;
  #L43a61e.  if v2 != 0 then goto L43a6ee;
  #L43a622.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a628.  v2:= temp @kind object;
  #L43a62a.  v3:= "tinkmac" @kind object;
  #L43a62e.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a634.  v2:= temp;
  #L43a636.  if v2 != 0 then goto L43a6ca;
  #L43a63a.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a640.  v2:= temp @kind object;
  #L43a642.  v3:= "tinkpublickeysign" @kind object;
  #L43a646.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a64c.  v2:= temp;
  #L43a64e.  if v2 != 0 then goto L43a6a6;
  #L43a652.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a658.  v2:= temp @kind object;
  #L43a65a.  v3:= "tinkpublickeyverify" @kind object;
  #L43a65e.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a664.  v2:= temp;
  #L43a666.  if v2 != 0 then goto L43a6a6;
  #L43a66a.  call temp:= `toLowerCase`(v4, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L43a670.  v4:= temp @kind object;
  #L43a672.  v1:= "tink" @kind object;
  #L43a676.  call temp:= `startsWith`(v4, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L43a67c.  v4:= temp;
  #L43a67e.  if v4 == 0 then goto L43a758;
  #L43a682.  v4:= new `java.lang.StringBuilder`;
  #L43a686.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a68c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a692.  v0:= "Maybe call TinkConfig.register()." @kind object;
  #L43a696.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a69c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a6a2.  v0:= temp @kind object;
  #L43a6a4.  goto L43a758;
  #L43a6a6.  v4:= new `java.lang.StringBuilder`;
  #L43a6aa.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a6b0.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a6b6.  v0:= "Maybe call SignatureConfig.register()." @kind object;
  #L43a6ba.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a6c0.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a6c6.  v0:= temp @kind object;
  #L43a6c8.  goto L43a758;
  #L43a6ca.  v4:= new `java.lang.StringBuilder`;
  #L43a6ce.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a6d4.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a6da.  v0:= "Maybe call MacConfig.register()." @kind object;
  #L43a6de.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a6e4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a6ea.  v0:= temp @kind object;
  #L43a6ec.  goto L43a758;
  #L43a6ee.  v4:= new `java.lang.StringBuilder`;
  #L43a6f2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a6f8.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a6fe.  v0:= "Maybe call HybridConfig.register()." @kind object;
  #L43a702.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a708.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a70e.  v0:= temp @kind object;
  #L43a710.  goto L43a758;
  #L43a712.  v4:= new `java.lang.StringBuilder`;
  #L43a716.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a71c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a722.  v0:= "Maybe call StreamingAeadConfig.register()." @kind object;
  #L43a726.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a72c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a732.  v0:= temp @kind object;
  #L43a734.  goto L43a758;
  #L43a736.  v4:= new `java.lang.StringBuilder`;
  #L43a73a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a740.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a746.  v0:= "Maybe call DeterministicAeadConfig.register()." @kind object;
  #L43a74a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a750.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a756.  v0:= temp @kind object;
  #L43a758.  v4:= new `java.security.GeneralSecurityException`;
  #L43a75c.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a762.  throw v4;
  #L43a764.  return v0 @kind object;
  #L43a766.  v4:= new `java.lang.IllegalArgumentException`;
  #L43a76a.  v0:= "catalogueName must be non-null." @kind object;
  #L43a76e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a774.  throw v4;
}
procedure `java.lang.Class` `getInputPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getInputPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43ad64.  v0:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43ad68.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ad6e.  v1:= temp @kind object;
  #L43ad70.  v1:= (`com.google.crypto.tink.PrimitiveWrapper`) v1 @kind object;
  #L43ad74.  if v1 != 0 then goto L43ad7c;
  #L43ad78.  v1:= 0I;
  #L43ad7a.  return v1 @kind object;
  #L43ad7c.  call temp:= `getInputPrimitiveClass`(v1) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L43ad82.  v1:= temp @kind object;
  #L43ad84.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `getKeyManager`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43a788.  v0:= 0I;
  #L43a78a.  call temp:= `h`(v1, v0) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43a790.  v1:= temp @kind object;
  #L43a792.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `getKeyManager`(`java.lang.String` v0 @kind object, `java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43a7a4.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43a7aa.  v1:= temp @kind object;
  #L43a7ac.  v1:= (`java.lang.Class`) v1 @kind object;
  #L43a7b0.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43a7b6.  v0:= temp @kind object;
  #L43a7b8.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.proto.KeyData` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43adb0.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43adb6.  v0:= temp @kind object;
  #L43adb8.  call temp:= `getValue`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43adbe.  v1:= temp @kind object;
  #L43adc0.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind static;
  #L43adc6.  v1:= temp @kind object;
  #L43adc8.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.proto.KeyData` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43addc.  call temp:= `getTypeUrl`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ade2.  v0:= temp @kind object;
  #L43ade4.  call temp:= `getValue`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43adea.  v1:= temp @kind object;
  #L43adec.  call temp:= `getPrimitive`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43adf2.  v1:= temp @kind object;
  #L43adf4.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v1 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43ae50.  v0:= 0I;
  #L43ae52.  call temp:= `i`(v1, v2, v0) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43ae58.  v1:= temp @kind object;
  #L43ae5a.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43ae6c.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43ae72.  v2:= temp @kind object;
  #L43ae74.  v2:= (`java.lang.Class`) v2 @kind object;
  #L43ae78.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43ae7e.  v0:= temp @kind object;
  #L43ae80.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v1 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43ae94.  v0:= 0I;
  #L43ae96.  call temp:= `j`(v1, v2, v0) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43ae9c.  v1:= temp @kind object;
  #L43ae9e.  return v1 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43aeb0.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43aeb6.  v2:= temp @kind object;
  #L43aeb8.  v2:= (`java.lang.Class`) v2 @kind object;
  #L43aebc.  call temp:= `j`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43aec2.  v0:= temp @kind object;
  #L43aec4.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;[B)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43ae08.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43ae0e.  v1:= temp @kind object;
  #L43ae10.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind static;
  #L43ae16.  v0:= temp @kind object;
  #L43ae18.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`java.lang.String` v0 @kind object, `byte`[] v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;[BLjava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43ae2c.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43ae32.  v1:= temp @kind object;
  #L43ae34.  call temp:= `getPrimitive`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43ae3a.  v0:= temp @kind object;
  #L43ae3c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `getPrimitives`(`com.google.crypto.tink.KeysetHandle` v0 @kind object, `com.google.crypto.tink.KeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43a8a4.  call temp:= `a`(v2) @signature `Lcom/google/crypto/tink/Registry;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L43a8aa.  v2:= temp @kind object;
  #L43a8ac.  v2:= (`java.lang.Class`) v2 @kind object;
  #L43a8b0.  call temp:= `k`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.k:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L43a8b6.  v0:= temp @kind object;
  #L43a8b8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `getPrimitives`(`com.google.crypto.tink.KeysetHandle` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43a8cc.  v0:= 0I;
  #L43a8ce.  call temp:= `getPrimitives`(v1, v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L43a8d4.  v1:= temp @kind object;
  #L43a8d6.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData` `getPublicKeyData`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getPublicKeyData:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43aad0.  call temp:= `getKeyManager`(v2) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43aad6.  v0:= temp @kind object;
  #L43aad8.  v1:= instanceof @variable v0 @type ^`com.google.crypto.tink.PrivateKeyManager` @kind boolean;
  #L43aadc.  if v1 == 0 then goto L43aaee;
  #L43aae0.  v0:= (`com.google.crypto.tink.PrivateKeyManager`) v0 @kind object;
  #L43aae4.  call temp:= `getPublicKeyData`(v0, v3) @signature `Lcom/google/crypto/tink/PrivateKeyManager;.getPublicKeyData:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind interface;
  #L43aaea.  v2:= temp @kind object;
  #L43aaec.  return v2 @kind object;
  #L43aaee.  v3:= new `java.security.GeneralSecurityException`;
  #L43aaf2.  v0:= new `java.lang.StringBuilder`;
  #L43aaf6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43aafc.  v1:= "manager for key type " @kind object;
  #L43ab00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ab06.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ab0c.  v2:= " is not a PrivateKeyManager" @kind object;
  #L43ab10.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ab16.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43ab1c.  v2:= temp @kind object;
  #L43ab1e.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ab24.  throw v3;
}
procedure `com.google.crypto.tink.KeyManager` `getUntypedKeyManager`(`java.lang.String` v0 @kind object) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L43a880.  call temp:= `g`(v0) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43a886.  v0:= temp @kind object;
  #L43a888.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/Registry$f;.e:()Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L43a88e.  v0:= temp @kind object;
  #L43a890.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyManager` `h`(`java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43a7cc.  call temp:= `g`(v3) @signature `Lcom/google/crypto/tink/Registry;.g:(Ljava/lang/String;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43a7d2.  v3:= temp @kind object;
  #L43a7d4.  if v4 != 0 then goto L43a7e2;
  #L43a7d8.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.e:()Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L43a7de.  v3:= temp @kind object;
  #L43a7e0.  return v3 @kind object;
  #L43a7e2.  call temp:= `c`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.c:()Ljava/util/Set;` @kind interface;
  #L43a7e8.  v0:= temp @kind object;
  #L43a7ea.  call temp:= `contains`(v0, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L43a7f0.  v0:= temp;
  #L43a7f2.  if v0 == 0 then goto L43a800;
  #L43a7f6.  call temp:= `d`(v3, v4) @signature `Lcom/google/crypto/tink/Registry$f;.d:(Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind interface;
  #L43a7fc.  v3:= temp @kind object;
  #L43a7fe.  return v3 @kind object;
  #L43a800.  v0:= new `java.security.GeneralSecurityException`;
  #L43a804.  v1:= new `java.lang.StringBuilder`;
  #L43a808.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43a80e.  v2:= "Primitive type " @kind object;
  #L43a812.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a818.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43a81e.  v4:= temp @kind object;
  #L43a820.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a826.  v4:= " not supported by key manager of type " @kind object;
  #L43a82a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a830.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.b:()Ljava/lang/Class;` @kind interface;
  #L43a836.  v4:= temp @kind object;
  #L43a838.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a83e.  v4:= ", supported primitives: " @kind object;
  #L43a842.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a848.  call temp:= `c`(v3) @signature `Lcom/google/crypto/tink/Registry$f;.c:()Ljava/util/Set;` @kind interface;
  #L43a84e.  v3:= temp @kind object;
  #L43a850.  call temp:= `l`(v3) @signature `Lcom/google/crypto/tink/Registry;.l:(Ljava/util/Set;)Ljava/lang/String;` @kind static;
  #L43a856.  v3:= temp @kind object;
  #L43a858.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43a85e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43a864.  v3:= temp @kind object;
  #L43a866.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a86c.  throw v0;
}
procedure `java.lang.Object` `i`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43aed8.  call temp:= `h`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43aede.  v0:= temp @kind object;
  #L43aee0.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind interface;
  #L43aee6.  v0:= temp @kind object;
  #L43aee8.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`java.lang.String` v0 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.j:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L43aefc.  call temp:= `h`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.h:(Ljava/lang/String;Ljava/lang/Class;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43af02.  v0:= temp @kind object;
  #L43af04.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @kind interface;
  #L43af0a.  v0:= temp @kind object;
  #L43af0c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet` `k`(`com.google.crypto.tink.KeysetHandle` v5 @kind object, `com.google.crypto.tink.KeyManager` v6 @kind object, `java.lang.Class` v7 @kind object) @signature `Lcom/google/crypto/tink/Registry;.k:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43a8e8.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L43a8ee.  v0:= temp @kind object;
  #L43a8f0.  call `e`(v0) @signature `Lcom/google/crypto/tink/a;.e:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L43a8f6.  call temp:= `newPrimitiveSet`(v7) @signature `Lcom/google/crypto/tink/PrimitiveSet;.newPrimitiveSet:(Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L43a8fc.  v0:= temp @kind object;
  #L43a8fe.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L43a904.  v1:= temp @kind object;
  #L43a906.  call temp:= `getKeyList`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L43a90c.  v1:= temp @kind object;
  #L43a90e.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43a914.  v1:= temp @kind object;
  #L43a916.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43a91c.  v2:= temp;
  #L43a91e.  if v2 == 0 then goto L43a9cc;
  #L43a922.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43a928.  v2:= temp @kind object;
  #L43a92a.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L43a92e.  call temp:= `getStatus`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L43a934.  v3:= temp @kind object;
  #L43a936.  v4:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L43a93a.  if v3 != v4 then goto L43a916;
  #L43a93e.  if v6 == 0 then goto L43a978;
  #L43a942.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43a948.  v3:= temp @kind object;
  #L43a94a.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43a950.  v3:= temp @kind object;
  #L43a952.  call temp:= `doesSupport`(v6, v3) @signature `Lcom/google/crypto/tink/KeyManager;.doesSupport:(Ljava/lang/String;)Z` @kind interface;
  #L43a958.  v3:= temp;
  #L43a95a.  if v3 == 0 then goto L43a978;
  #L43a95e.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43a964.  v3:= temp @kind object;
  #L43a966.  call temp:= `getValue`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43a96c.  v3:= temp @kind object;
  #L43a96e.  call temp:= `getPrimitive`(v6, v3) @signature `Lcom/google/crypto/tink/KeyManager;.getPrimitive:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Ljava/lang/Object;` @kind interface;
  #L43a974.  v3:= temp @kind object;
  #L43a976.  goto L43a9a0;
  #L43a978.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43a97e.  v3:= temp @kind object;
  #L43a980.  call temp:= `getTypeUrl`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43a986.  v3:= temp @kind object;
  #L43a988.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L43a98e.  v4:= temp @kind object;
  #L43a990.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43a996.  v4:= temp @kind object;
  #L43a998.  call temp:= `i`(v3, v4, v7) @signature `Lcom/google/crypto/tink/Registry;.i:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43a99e.  v3:= temp @kind object;
  #L43a9a0.  call temp:= `addPrimitive`(v0, v3, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet;.addPrimitive:(Ljava/lang/Object;Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L43a9a6.  v3:= temp @kind object;
  #L43a9a8.  call temp:= `getKeyId`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L43a9ae.  v2:= temp;
  #L43a9b0.  call temp:= `f`(v5) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @kind virtual;
  #L43a9b6.  v4:= temp @kind object;
  #L43a9b8.  call temp:= `getPrimaryKeyId`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L43a9be.  v4:= temp;
  #L43a9c0.  if v2 != v4 then goto L43a916;
  #L43a9c4.  call `setPrimary`(v0, v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.setPrimary:(Lcom/google/crypto/tink/PrimitiveSet$Entry;)V` @kind virtual;
  #L43a9ca.  goto L43a916;
  #L43a9cc.  return v0 @kind object;
}
procedure `java.lang.String` `l`(`java.util.Set` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.l:(Ljava/util/Set;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43b01c.  v0:= new `java.lang.StringBuilder`;
  #L43b020.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b026.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43b02c.  v3:= temp @kind object;
  #L43b02e.  v1:= 1I;
  #L43b030.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43b036.  v2:= temp;
  #L43b038.  if v2 == 0 then goto L43b068;
  #L43b03c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43b042.  v2:= temp @kind object;
  #L43b044.  v2:= (`java.lang.Class`) v2 @kind object;
  #L43b048.  if v1 != 0 then goto L43b056;
  #L43b04c.  v1:= ", " @kind object;
  #L43b050.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b056.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L43b05c.  v1:= temp @kind object;
  #L43b05e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b064.  v1:= 0I;
  #L43b066.  goto L43b030;
  #L43b068.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b06e.  v3:= temp @kind object;
  #L43b070.  return v3 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `newKey`(`com.google.crypto.tink.proto.KeyTemplate` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43ac24.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43ac28.  @monitorenter v0
  #L43ac2a.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ac30.  v1:= temp @kind object;
  #L43ac32.  call temp:= `getUntypedKeyManager`(v1) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43ac38.  v1:= temp @kind object;
  #L43ac3a.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43ac3e.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ac44.  v3:= temp @kind object;
  #L43ac46.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ac4c.  v2:= temp @kind object;
  #L43ac4e.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L43ac52.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L43ac58.  v2:= temp;
  #L43ac5a.  if v2 == 0 then goto L43ac72;
  #L43ac5e.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43ac64.  v4:= temp @kind object;
  #L43ac66.  call temp:= `newKey`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind interface;
  #L43ac6c.  v4:= temp @kind object;
  #L43ac6e.  @monitorexit v0
  #L43ac70.  return v4 @kind object;
  #L43ac72.  v1:= new `java.security.GeneralSecurityException`;
  #L43ac76.  v2:= new `java.lang.StringBuilder`;
  #L43ac7a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43ac80.  v3:= "newKey-operation not permitted for key type " @kind object;
  #L43ac84.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ac8a.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ac90.  v4:= temp @kind object;
  #L43ac92.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ac98.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43ac9e.  v4:= temp @kind object;
  #L43aca0.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43aca6.  throw v1;
  #L43aca8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43acaa.  @monitorexit v0
  #L43acac.  throw v4;
  catch `java.lang.Throwable` @[L43ac2a..L43ac6e] goto L43aca8;
  catch `java.lang.Throwable` @[L43ac72..L43aca8] goto L43aca8;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `newKey`(`java.lang.String` v3 @kind object, `com.google.crypto.tink.shaded.protobuf.MessageLite` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKey:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43acd4.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43acd8.  @monitorenter v0
  #L43acda.  call temp:= `getKeyManager`(v3) @signature `Lcom/google/crypto/tink/Registry;.getKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43ace0.  v1:= temp @kind object;
  #L43ace2.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43ace6.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43acec.  v2:= temp @kind object;
  #L43acee.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L43acf2.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L43acf8.  v2:= temp;
  #L43acfa.  if v2 == 0 then goto L43ad0a;
  #L43acfe.  call temp:= `newKey`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @kind interface;
  #L43ad04.  v3:= temp @kind object;
  #L43ad06.  @monitorexit v0
  #L43ad08.  return v3 @kind object;
  #L43ad0a.  v4:= new `java.security.GeneralSecurityException`;
  #L43ad0e.  v1:= new `java.lang.StringBuilder`;
  #L43ad12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43ad18.  v2:= "newKey-operation not permitted for key type " @kind object;
  #L43ad1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ad22.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43ad28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43ad2e.  v3:= temp @kind object;
  #L43ad30.  call `<init>`(v4, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ad36.  throw v4;
  #L43ad38.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ad3a.  @monitorexit v0
  #L43ad3c.  throw v3;
  catch `java.lang.Throwable` @[L43acda..L43ad06] goto L43ad38;
  catch `java.lang.Throwable` @[L43ad0a..L43ad38] goto L43ad38;
}
procedure `com.google.crypto.tink.proto.KeyData` `newKeyData`(`com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43ab38.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43ab3c.  @monitorenter v0
  #L43ab3e.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L43ab44.  v1:= temp @kind object;
  #L43ab46.  call temp:= `newKeyData`(v1) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L43ab4c.  v1:= temp @kind object;
  #L43ab4e.  @monitorexit v0
  #L43ab50.  return v1 @kind object;
  #L43ab52.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ab54.  @monitorexit v0
  #L43ab56.  throw v1;
  catch `java.lang.Throwable` @[L43ab3e..L43ab4e] goto L43ab52;
}
procedure `com.google.crypto.tink.proto.KeyData` `newKeyData`(`com.google.crypto.tink.proto.KeyTemplate` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.newKeyData:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43ab74.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43ab78.  @monitorenter v0
  #L43ab7a.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ab80.  v1:= temp @kind object;
  #L43ab82.  call temp:= `getUntypedKeyManager`(v1) @signature `Lcom/google/crypto/tink/Registry;.getUntypedKeyManager:(Ljava/lang/String;)Lcom/google/crypto/tink/KeyManager;` @kind static;
  #L43ab88.  v1:= temp @kind object;
  #L43ab8a.  v2:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43ab8e.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43ab94.  v3:= temp @kind object;
  #L43ab96.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ab9c.  v2:= temp @kind object;
  #L43ab9e.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L43aba2.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L43aba8.  v2:= temp;
  #L43abaa.  if v2 == 0 then goto L43abc2;
  #L43abae.  call temp:= `getValue`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43abb4.  v4:= temp @kind object;
  #L43abb6.  call temp:= `newKeyData`(v1, v4) @signature `Lcom/google/crypto/tink/KeyManager;.newKeyData:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind interface;
  #L43abbc.  v4:= temp @kind object;
  #L43abbe.  @monitorexit v0
  #L43abc0.  return v4 @kind object;
  #L43abc2.  v1:= new `java.security.GeneralSecurityException`;
  #L43abc6.  v2:= new `java.lang.StringBuilder`;
  #L43abca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43abd0.  v3:= "newKey-operation not permitted for key type " @kind object;
  #L43abd4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43abda.  call temp:= `getTypeUrl`(v4) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43abe0.  v4:= temp @kind object;
  #L43abe2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43abe8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43abee.  v4:= temp @kind object;
  #L43abf0.  call `<init>`(v1, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43abf6.  throw v1;
  #L43abf8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43abfa.  @monitorexit v0
  #L43abfc.  throw v4;
  catch `java.lang.Throwable` @[L43ab7a..L43abbe] goto L43abf8;
  catch `java.lang.Throwable` @[L43abc2..L43abf8] goto L43abf8;
}
procedure `void` `registerAsymmetricKeyManagers`(`com.google.crypto.tink.PrivateKeyTypeManager` v7 @kind object, `com.google.crypto.tink.KeyTypeManager` v8 @kind object, `boolean` v9 ) @signature `Lcom/google/crypto/tink/Registry;.registerAsymmetricKeyManagers:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43b35c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b360.  @monitorenter v0
  #L43b362.  if v7 == 0 then goto L43b502;
  #L43b366.  if v8 == 0 then goto L43b502;
  #L43b36a.  call temp:= `getKeyType`(v7) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43b370.  v1:= temp @kind object;
  #L43b372.  call temp:= `getKeyType`(v8) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43b378.  v2:= temp @kind object;
  #L43b37a.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b380.  v3:= temp @kind object;
  #L43b382.  call `f`(v1, v3, v9) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L43b388.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b38e.  v3:= temp @kind object;
  #L43b390.  v4:= 0I;
  #L43b392.  call `f`(v2, v3, v4) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L43b398.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b39e.  v3:= temp;
  #L43b3a0.  if v3 != 0 then goto L43b4f2;
  #L43b3a4.  v3:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b3a8.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b3ae.  v5:= temp;
  #L43b3b0.  if v5 == 0 then goto L43b474;
  #L43b3b4.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b3ba.  v5:= temp @kind object;
  #L43b3bc.  v5:= (`com.google.crypto.tink.Registry$f`) v5 @kind object;
  #L43b3c0.  call temp:= `a`(v5) @signature `Lcom/google/crypto/tink/Registry$f;.a:()Ljava/lang/Class;` @kind interface;
  #L43b3c6.  v5:= temp @kind object;
  #L43b3c8.  if v5 == 0 then goto L43b474;
  #L43b3cc.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b3d2.  v6:= temp @kind object;
  #L43b3d4.  call temp:= `equals`(v5, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b3da.  v6:= temp;
  #L43b3dc.  if v6 == 0 then goto L43b3e2;
  #L43b3e0.  goto L43b474;
  #L43b3e2.  v9:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L43b3e6.  v3:= new `java.lang.StringBuilder`;
  #L43b3ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b3f0.  v6:= "Attempted overwrite of a registered key manager for key type " @kind object;
  #L43b3f4.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b3fa.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b400.  v1:= " with inconsistent public key type " @kind object;
  #L43b404.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b40a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b410.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b416.  v1:= temp @kind object;
  #L43b418.  call `warning`(v9, v1) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L43b41e.  v9:= new `java.security.GeneralSecurityException`;
  #L43b422.  v1:= "public key manager corresponding to %s is already registered with %s, cannot be re-registered with %s" @kind object;
  #L43b426.  v2:= 3I;
  #L43b428.  v2:= new `java.lang.Object`[v2];
  #L43b42c.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b432.  v7:= temp @kind object;
  #L43b434.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b43a.  v7:= temp @kind object;
  #L43b43c.  v2[v4]:= v7 @kind object;
  #L43b440.  v7:= 1I;
  #L43b442.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b448.  v3:= temp @kind object;
  #L43b44a.  v2[v7]:= v3 @kind object;
  #L43b44e.  v7:= 2I;
  #L43b450.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b456.  v8:= temp @kind object;
  #L43b458.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b45e.  v8:= temp @kind object;
  #L43b460.  v2[v7]:= v8 @kind object;
  #L43b464.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43b46a.  v7:= temp @kind object;
  #L43b46c.  call `<init>`(v9, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b472.  throw v9;
  #L43b474.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b47a.  v4:= temp;
  #L43b47c.  if v4 == 0 then goto L43b498;
  #L43b480.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b486.  v4:= temp @kind object;
  #L43b488.  v4:= (`com.google.crypto.tink.Registry$f`) v4 @kind object;
  #L43b48c.  call temp:= `a`(v4) @signature `Lcom/google/crypto/tink/Registry$f;.a:()Ljava/lang/Class;` @kind interface;
  #L43b492.  v4:= temp @kind object;
  #L43b494.  if v4 != 0 then goto L43b4b8;
  #L43b498.  call temp:= `e`(v7, v8) @signature `Lcom/google/crypto/tink/Registry;.e:(Lcom/google/crypto/tink/PrivateKeyTypeManager;Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43b49e.  v4:= temp @kind object;
  #L43b4a0.  call temp:= `put`(v3, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b4a6.  v4:= `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b4aa.  call temp:= `d`(v7) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @kind static;
  #L43b4b0.  v7:= temp @kind object;
  #L43b4b2.  call temp:= `put`(v4, v1, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b4b8.  v7:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b4bc.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43b4c2.  v9:= temp @kind object;
  #L43b4c4.  call temp:= `put`(v7, v1, v9) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b4ca.  call temp:= `containsKey`(v3, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b4d0.  v9:= temp;
  #L43b4d2.  if v9 != 0 then goto L43b4e4;
  #L43b4d6.  call temp:= `c`(v8) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43b4dc.  v8:= temp @kind object;
  #L43b4de.  call temp:= `put`(v3, v2, v8) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b4e4.  v8:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L43b4e8.  call temp:= `put`(v7, v2, v8) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b4ee.  @monitorexit v0
  #L43b4f0.  return @kind void;
  #L43b4f2.  v7:= new `java.security.GeneralSecurityException`;
  #L43b4f6.  v8:= "Private and public key type must be different." @kind object;
  #L43b4fa.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b500.  throw v7;
  #L43b502.  v7:= new `java.lang.IllegalArgumentException`;
  #L43b506.  v8:= "given key managers must be non-null." @kind object;
  #L43b50a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b510.  throw v7;
  #L43b512.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b514.  @monitorexit v0
  #L43b516.  throw v7;
  catch `java.lang.Throwable` @[L43b36a..L43b4ee] goto L43b512;
  catch `java.lang.Throwable` @[L43b4f2..L43b512] goto L43b512;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyManager` v2 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43b53c.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b540.  @monitorenter v0
  #L43b542.  v1:= 1I;
  #L43b544.  call `registerKeyManager`(v2, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L43b54a.  @monitorexit v0
  #L43b54c.  return @kind void;
  #L43b54e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b550.  @monitorexit v0
  #L43b552.  throw v2;
  catch `java.lang.Throwable` @[L43b544..L43b54a] goto L43b54e;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyManager` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43b570.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b574.  @monitorenter v0
  #L43b576.  if v3 == 0 then goto L43b5bc;
  #L43b57a.  call temp:= `getKeyType`(v3) @signature `Lcom/google/crypto/tink/KeyManager;.getKeyType:()Ljava/lang/String;` @kind interface;
  #L43b580.  v1:= temp @kind object;
  #L43b582.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b588.  v2:= temp @kind object;
  #L43b58a.  call `f`(v1, v2, v4) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L43b590.  v2:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b594.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/Registry;.b:(Lcom/google/crypto/tink/KeyManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43b59a.  v3:= temp @kind object;
  #L43b59c.  call temp:= `putIfAbsent`(v2, v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b5a2.  v3:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b5a6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43b5ac.  v4:= temp @kind object;
  #L43b5ae.  call temp:= `put`(v3, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b5b4.  @monitorexit v0
  #L43b5b6.  return @kind void;
  #L43b5b8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b5ba.  goto L43b5cc;
  #L43b5bc.  v3:= new `java.lang.IllegalArgumentException`;
  #L43b5c0.  v4:= "key manager must be non-null." @kind object;
  #L43b5c4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b5ca.  throw v3;
  #L43b5cc.  @monitorexit v0
  #L43b5ce.  throw v3;
  catch `java.lang.Throwable` @[L43b57a..L43b5b4] goto L43b5b8;
  catch `java.lang.Throwable` @[L43b5bc..L43b5cc] goto L43b5b8;
}
procedure `void` `registerKeyManager`(`com.google.crypto.tink.KeyTypeManager` v4 @kind object, `boolean` v5 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43b5f4.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b5f8.  @monitorenter v0
  #L43b5fa.  if v4 == 0 then goto L43b65e;
  #L43b5fe.  call temp:= `getKeyType`(v4) @signature `Lcom/google/crypto/tink/KeyTypeManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43b604.  v1:= temp @kind object;
  #L43b606.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b60c.  v2:= temp @kind object;
  #L43b60e.  call `f`(v1, v2, v5) @signature `Lcom/google/crypto/tink/Registry;.f:(Ljava/lang/String;Ljava/lang/Class;Z)V` @kind static;
  #L43b614.  v2:= `@@com.google.crypto.tink.Registry.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b618.  call temp:= `containsKey`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b61e.  v3:= temp;
  #L43b620.  if v3 != 0 then goto L43b644;
  #L43b624.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/Registry;.c:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$f;` @kind static;
  #L43b62a.  v3:= temp @kind object;
  #L43b62c.  call temp:= `put`(v2, v1, v3) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b632.  v2:= `@@com.google.crypto.tink.Registry.c` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b636.  call temp:= `d`(v4) @signature `Lcom/google/crypto/tink/Registry;.d:(Lcom/google/crypto/tink/KeyTypeManager;)Lcom/google/crypto/tink/Registry$e;` @kind static;
  #L43b63c.  v4:= temp @kind object;
  #L43b63e.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b644.  v4:= `@@com.google.crypto.tink.Registry.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b648.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43b64e.  v5:= temp @kind object;
  #L43b650.  call temp:= `put`(v4, v1, v5) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b656.  @monitorexit v0
  #L43b658.  return @kind void;
  #L43b65a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b65c.  goto L43b66e;
  #L43b65e.  v4:= new `java.lang.IllegalArgumentException`;
  #L43b662.  v5:= "key manager must be non-null." @kind object;
  #L43b666.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b66c.  throw v4;
  #L43b66e.  @monitorexit v0
  #L43b670.  throw v4;
  catch `java.lang.Throwable` @[L43b5fe..L43b656] goto L43b65a;
  catch `java.lang.Throwable` @[L43b65e..L43b66e] goto L43b65a;
}
procedure `void` `registerKeyManager`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.KeyManager` v3 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43b698.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b69c.  @monitorenter v0
  #L43b69e.  v1:= 1I;
  #L43b6a0.  call `registerKeyManager`(v2, v3, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L43b6a6.  @monitorexit v0
  #L43b6a8.  return @kind void;
  #L43b6aa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b6ac.  @monitorexit v0
  #L43b6ae.  throw v2;
  catch `java.lang.Throwable` @[L43b6a0..L43b6a6] goto L43b6aa;
}
procedure `void` `registerKeyManager`(`java.lang.String` v2 @kind object, `com.google.crypto.tink.KeyManager` v3 @kind object, `boolean` v4 ) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Ljava/lang/String;Lcom/google/crypto/tink/KeyManager;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43b6cc.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b6d0.  @monitorenter v0
  #L43b6d2.  if v3 == 0 then goto L43b730;
  #L43b6d6.  call temp:= `getKeyType`(v3) @signature `Lcom/google/crypto/tink/KeyManager;.getKeyType:()Ljava/lang/String;` @kind interface;
  #L43b6dc.  v1:= temp @kind object;
  #L43b6de.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b6e4.  v1:= temp;
  #L43b6e6.  if v1 == 0 then goto L43b6f4;
  #L43b6ea.  call `registerKeyManager`(v3, v4) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyManager;Z)V` @kind static;
  #L43b6f0.  @monitorexit v0
  #L43b6f2.  return @kind void;
  #L43b6f4.  v3:= new `java.security.GeneralSecurityException`;
  #L43b6f8.  v4:= new `java.lang.StringBuilder`;
  #L43b6fc.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b702.  v1:= "Manager does not support key type " @kind object;
  #L43b706.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b70c.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b712.  v2:= "." @kind object;
  #L43b716.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b71c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b722.  v2:= temp @kind object;
  #L43b724.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b72a.  throw v3;
  #L43b72c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b72e.  goto L43b740;
  #L43b730.  v2:= new `java.lang.IllegalArgumentException`;
  #L43b734.  v3:= "key manager must be non-null." @kind object;
  #L43b738.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b73e.  throw v2;
  #L43b740.  @monitorexit v0
  #L43b742.  throw v2;
  catch `java.lang.Throwable` @[L43b6d6..L43b6f0] goto L43b72c;
  catch `java.lang.Throwable` @[L43b6f4..L43b740] goto L43b72c;
}
procedure `void` `registerPrimitiveWrapper`(`com.google.crypto.tink.PrimitiveWrapper` v7 @kind object) @signature `Lcom/google/crypto/tink/Registry;.registerPrimitiveWrapper:(Lcom/google/crypto/tink/PrimitiveWrapper;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43b768.  v0:= constclass @type ^`com.google.crypto.tink.Registry` @kind object;
  #L43b76c.  @monitorenter v0
  #L43b76e.  if v7 == 0 then goto L43b846;
  #L43b772.  call temp:= `getPrimitiveClass`(v7) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L43b778.  v1:= temp @kind object;
  #L43b77a.  v2:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43b77e.  call temp:= `containsKey`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L43b784.  v3:= temp;
  #L43b786.  if v3 == 0 then goto L43b838;
  #L43b78a.  call temp:= `get`(v2, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b790.  v3:= temp @kind object;
  #L43b792.  v3:= (`com.google.crypto.tink.PrimitiveWrapper`) v3 @kind object;
  #L43b796.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b79c.  v4:= temp @kind object;
  #L43b79e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b7a4.  v5:= temp @kind object;
  #L43b7a6.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43b7ac.  v4:= temp;
  #L43b7ae.  if v4 == 0 then goto L43b7b4;
  #L43b7b2.  goto L43b838;
  #L43b7b4.  v2:= `@@com.google.crypto.tink.Registry.a` @type ^`java.util.logging.Logger` @kind object;
  #L43b7b8.  v4:= new `java.lang.StringBuilder`;
  #L43b7bc.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43b7c2.  v5:= "Attempted overwrite of a registered SetWrapper for type " @kind object;
  #L43b7c6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b7cc.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43b7d2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b7d8.  v4:= temp @kind object;
  #L43b7da.  call `warning`(v2, v4) @signature `Ljava/util/logging/Logger;.warning:(Ljava/lang/String;)V` @kind virtual;
  #L43b7e0.  v2:= new `java.security.GeneralSecurityException`;
  #L43b7e4.  v4:= "SetWrapper for primitive (%s) is already registered to be %s, cannot be re-registered with %s" @kind object;
  #L43b7e8.  v5:= 3I;
  #L43b7ea.  v5:= new `java.lang.Object`[v5];
  #L43b7ee.  v6:= 0I;
  #L43b7f0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b7f6.  v1:= temp @kind object;
  #L43b7f8.  v5[v6]:= v1 @kind object;
  #L43b7fc.  v1:= 1I;
  #L43b7fe.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b804.  v3:= temp @kind object;
  #L43b806.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b80c.  v3:= temp @kind object;
  #L43b80e.  v5[v1]:= v3 @kind object;
  #L43b812.  v1:= 2I;
  #L43b814.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43b81a.  v7:= temp @kind object;
  #L43b81c.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43b822.  v7:= temp @kind object;
  #L43b824.  v5[v1]:= v7 @kind object;
  #L43b828.  call temp:= `format`(v4, v5) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43b82e.  v7:= temp @kind object;
  #L43b830.  call `<init>`(v2, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b836.  throw v2;
  #L43b838.  call temp:= `put`(v2, v1, v7) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b83e.  @monitorexit v0
  #L43b840.  return @kind void;
  #L43b842.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b844.  goto L43b856;
  #L43b846.  v7:= new `java.lang.IllegalArgumentException`;
  #L43b84a.  v1:= "wrapper must be non-null" @kind object;
  #L43b84e.  call `<init>`(v7, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b854.  throw v7;
  #L43b856.  @monitorexit v0
  #L43b858.  throw v7;
  catch `java.lang.Throwable` @[L43b772..L43b83e] goto L43b842;
  catch `java.lang.Throwable` @[L43b846..L43b856] goto L43b842;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.PrimitiveSet` v1 @kind object) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43af20.  call temp:= `getPrimitiveClass`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L43af26.  v0:= temp @kind object;
  #L43af28.  call temp:= `wrap`(v1, v0) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L43af2e.  v1:= temp @kind object;
  #L43af30.  return v1 @kind object;
}
procedure `java.lang.Object` `wrap`(`com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L43af44.  v0:= `@@com.google.crypto.tink.Registry.f` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43af48.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43af4e.  v4:= temp @kind object;
  #L43af50.  v4:= (`com.google.crypto.tink.PrimitiveWrapper`) v4 @kind object;
  #L43af54.  if v4 == 0 then goto L43afcc;
  #L43af58.  call temp:= `getInputPrimitiveClass`(v4) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L43af5e.  v0:= temp @kind object;
  #L43af60.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L43af66.  v1:= temp @kind object;
  #L43af68.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43af6e.  v0:= temp;
  #L43af70.  if v0 == 0 then goto L43af7e;
  #L43af74.  call temp:= `wrap`(v4, v3) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @kind interface;
  #L43af7a.  v3:= temp @kind object;
  #L43af7c.  return v3 @kind object;
  #L43af7e.  v0:= new `java.security.GeneralSecurityException`;
  #L43af82.  v1:= new `java.lang.StringBuilder`;
  #L43af86.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43af8c.  v2:= "Wrong input primitive class, expected " @kind object;
  #L43af90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43af96.  call temp:= `getInputPrimitiveClass`(v4) @signature `Lcom/google/crypto/tink/PrimitiveWrapper;.getInputPrimitiveClass:()Ljava/lang/Class;` @kind interface;
  #L43af9c.  v4:= temp @kind object;
  #L43af9e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43afa4.  v4:= ", got " @kind object;
  #L43afa8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43afae.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L43afb4.  v3:= temp @kind object;
  #L43afb6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43afbc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43afc2.  v3:= temp @kind object;
  #L43afc4.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43afca.  throw v0;
  #L43afcc.  v4:= new `java.security.GeneralSecurityException`;
  #L43afd0.  v0:= new `java.lang.StringBuilder`;
  #L43afd4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43afda.  v1:= "No wrapper found for " @kind object;
  #L43afde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43afe4.  call temp:= `getPrimitiveClass`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @kind virtual;
  #L43afea.  v3:= temp @kind object;
  #L43afec.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43aff2.  v3:= temp @kind object;
  #L43aff4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43affa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43b000.  v3:= temp @kind object;
  #L43b002.  call `<init>`(v4, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43b008.  throw v4;
}
