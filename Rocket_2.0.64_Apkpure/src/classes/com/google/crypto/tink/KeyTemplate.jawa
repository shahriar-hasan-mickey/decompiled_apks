record `com.google.crypto.tink.KeyTemplate` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.proto.KeyTemplate` `com.google.crypto.tink.KeyTemplate.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeyTemplate` v0 @kind this, `com.google.crypto.tink.proto.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4388c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4388ca.  v0.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` := v1 @kind object;
  #L4388ce.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate$OutputPrefixType` `a`(`com.google.crypto.tink.proto.OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4387a4.  v0:= `@@com.google.crypto.tink.KeyTemplate$a.a` @type ^`int`[] @kind object;
  #L4387a8.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4387ae.  v1:= temp;
  #L4387b0.  v1:= v0[v1];
  #L4387b4.  v0:= 1I;
  #L4387b6.  if v1 == v0 then goto L4387ee;
  #L4387ba.  v0:= 2I;
  #L4387bc.  if v1 == v0 then goto L4387e8;
  #L4387c0.  v0:= 3I;
  #L4387c2.  if v1 == v0 then goto L4387e2;
  #L4387c6.  v0:= 4I;
  #L4387c8.  if v1 != v0 then goto L4387d2;
  #L4387cc.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4387d0.  return v1 @kind object;
  #L4387d2.  v1:= new `java.lang.IllegalArgumentException`;
  #L4387d6.  v0:= "Unknown output prefix type" @kind object;
  #L4387da.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4387e0.  throw v1;
  #L4387e2.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4387e6.  return v1 @kind object;
  #L4387e8.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4387ec.  return v1 @kind object;
  #L4387ee.  v1:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4387f2.  return v1 @kind object;
}
procedure `com.google.crypto.tink.proto.OutputPrefixType` `c`(`com.google.crypto.tink.KeyTemplate$OutputPrefixType` v1 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.c:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L438844.  v0:= `@@com.google.crypto.tink.KeyTemplate$a.b` @type ^`int`[] @kind object;
  #L438848.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L43884e.  v1:= temp;
  #L438850.  v1:= v0[v1];
  #L438854.  v0:= 1I;
  #L438856.  if v1 == v0 then goto L43888e;
  #L43885a.  v0:= 2I;
  #L43885c.  if v1 == v0 then goto L438888;
  #L438860.  v0:= 3I;
  #L438862.  if v1 == v0 then goto L438882;
  #L438866.  v0:= 4I;
  #L438868.  if v1 != v0 then goto L438872;
  #L43886c.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.CRUNCHY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L438870.  return v1 @kind object;
  #L438872.  v1:= new `java.lang.IllegalArgumentException`;
  #L438876.  v0:= "Unknown output prefix type" @kind object;
  #L43887a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438880.  throw v1;
  #L438882.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.RAW` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L438886.  return v1 @kind object;
  #L438888.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L43888c.  return v1 @kind object;
  #L43888e.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.TINK` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L438892.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `create`(`java.lang.String` v2 @kind object, `byte`[] v3 @kind object, `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v4 @kind object) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43874c.  v0:= new `com.google.crypto.tink.KeyTemplate`;
  #L438750.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.newBuilder:()Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind static;
  #L438756.  v1:= temp @kind object;
  #L438758.  call temp:= `setTypeUrl`(v1, v2) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setTypeUrl:(Ljava/lang/String;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43875e.  v2:= temp @kind object;
  #L438760.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L438766.  v3:= temp @kind object;
  #L438768.  call temp:= `setValue`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43876e.  v2:= temp @kind object;
  #L438770.  call temp:= `c`(v4) @signature `Lcom/google/crypto/tink/KeyTemplate;.c:(Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind static;
  #L438776.  v3:= temp @kind object;
  #L438778.  call temp:= `setOutputPrefixType`(v2, v3) @signature `Lcom/google/crypto/tink/proto/KeyTemplate$Builder;.setOutputPrefixType:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/proto/KeyTemplate$Builder;` @kind virtual;
  #L43877e.  v2:= temp @kind object;
  #L438780.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L438786.  v2:= temp @kind object;
  #L438788.  v2:= (`com.google.crypto.tink.proto.KeyTemplate`) v2 @kind object;
  #L43878c.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.<init>:(Lcom/google/crypto/tink/proto/KeyTemplate;)V` @kind direct;
  #L438792.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyTemplate` `b`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @AccessFlag  {
    temp;
    v0;

  #L43882c.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L438830.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate$OutputPrefixType` `getOutputPrefixType`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438804.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L438808.  call temp:= `getOutputPrefixType`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L43880e.  v0:= temp @kind object;
  #L438810.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/KeyTemplate;.a:(Lcom/google/crypto/tink/proto/OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate$OutputPrefixType;` @kind static;
  #L438816.  v0:= temp @kind object;
  #L438818.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeUrl`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4388a4.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L4388a8.  call temp:= `getTypeUrl`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L4388ae.  v0:= temp @kind object;
  #L4388b0.  return v0 @kind object;
}
procedure `byte`[] `getValue`(`com.google.crypto.tink.KeyTemplate` v1 @kind this) @signature `Lcom/google/crypto/tink/KeyTemplate;.getValue:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438724.  v0:= v1.`com.google.crypto.tink.KeyTemplate.a` @type ^`com.google.crypto.tink.proto.KeyTemplate` @kind object;
  #L438728.  call temp:= `getValue`(v0) @signature `Lcom/google/crypto/tink/proto/KeyTemplate;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43872e.  v0:= temp @kind object;
  #L438730.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L438736.  v0:= temp @kind object;
  #L438738.  return v0 @kind object;
}
