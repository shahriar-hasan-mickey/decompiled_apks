record `com.google.crypto.tink.aead.AesEaxKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesEaxKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43cfb4.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesEaxKey` @kind object;
  #L43cfb8.  v1:= 1I;
  #L43cfba.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L43cfbe.  v2:= new `com.google.crypto.tink.aead.AesEaxKeyManager$a`;
  #L43cfc2.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L43cfc6.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43cfcc.  v3:= 0I;
  #L43cfce.  v1[v3]:= v2 @kind object;
  #L43cfd2.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L43cfd8.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.aes128EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43ce04.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43ce08.  v1:= 16I;
  #L43ce0c.  call temp:= `b`(v1, v1, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ce12.  v0:= temp @kind object;
  #L43ce14.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.aes256EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43ce28.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43ce2c.  v1:= 32I;
  #L43ce30.  v2:= 16I;
  #L43ce34.  call temp:= `b`(v1, v2, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ce3a.  v0:= temp @kind object;
  #L43ce3c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `int` v2 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43ce50.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind static;
  #L43ce56.  v0:= temp @kind object;
  #L43ce58.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind virtual;
  #L43ce5e.  v1:= temp @kind object;
  #L43ce60.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesEaxParams$Builder;` @kind static;
  #L43ce66.  v0:= temp @kind object;
  #L43ce68.  call temp:= `setIvSize`(v0, v2) @signature `Lcom/google/crypto/tink/proto/AesEaxParams$Builder;.setIvSize:(I)Lcom/google/crypto/tink/proto/AesEaxParams$Builder;` @kind virtual;
  #L43ce6e.  v2:= temp @kind object;
  #L43ce70.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43ce76.  v2:= temp @kind object;
  #L43ce78.  v2:= (`com.google.crypto.tink.proto.AesEaxParams`) v2 @kind object;
  #L43ce7c.  call temp:= `setParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesEaxParams;)Lcom/google/crypto/tink/proto/AesEaxKeyFormat$Builder;` @kind virtual;
  #L43ce82.  v1:= temp @kind object;
  #L43ce84.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43ce8a.  v1:= temp @kind object;
  #L43ce8c.  v1:= (`com.google.crypto.tink.proto.AesEaxKeyFormat`) v1 @kind object;
  #L43ce90.  v2:= new `com.google.crypto.tink.aead.AesEaxKeyManager`;
  #L43ce94.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @kind direct;
  #L43ce9a.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43cea0.  v2:= temp @kind object;
  #L43cea2.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L43cea8.  v1:= temp @kind object;
  #L43ceaa.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ceb0.  v1:= temp @kind object;
  #L43ceb2.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.rawAes128EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43cec4.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43cec8.  v1:= 16I;
  #L43cecc.  call temp:= `b`(v1, v1, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43ced2.  v0:= temp @kind object;
  #L43ced4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256EaxTemplate`() @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.rawAes256EaxTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43cee8.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43ceec.  v1:= 32I;
  #L43cef0.  v2:= 16I;
  #L43cef4.  call temp:= `b`(v1, v2, v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.b:(IILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43cefa.  v0:= temp @kind object;
  #L43cefc.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43cfec.  v0:= new `com.google.crypto.tink.aead.AesEaxKeyManager`;
  #L43cff0.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.<init>:()V` @kind direct;
  #L43cff6.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L43cffc.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf9c.  v0:= "type.googleapis.com/google.crypto.tink.AesEaxKey" @kind object;
  #L43cfa0.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf88.  v0:= 0I;
  #L43cf8a.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesEaxKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43cf10.  v0:= new `com.google.crypto.tink.aead.AesEaxKeyManager$b`;
  #L43cf14.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesEaxKeyFormat` @kind object;
  #L43cf18.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesEaxKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L43cf1e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf54.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43cf58.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesEaxKey` `parseKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesEaxKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cf30.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43cf36.  v0:= temp @kind object;
  #L43cf38.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesEaxKey;` @kind static;
  #L43cf3e.  v2:= temp @kind object;
  #L43cf40.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43cf6c.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesEaxKey;` @kind virtual;
  #L43cf72.  v1:= temp @kind object;
  #L43cf74.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesEaxKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesEaxKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d010.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getVersion:()I` @kind virtual;
  #L43d016.  v0:= temp;
  #L43d018.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.getVersion:()I` @kind virtual;
  #L43d01e.  v1:= temp;
  #L43d020.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43d026.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43d02c.  v0:= temp @kind object;
  #L43d02e.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43d034.  v0:= temp;
  #L43d036.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L43d03c.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getParams:()Lcom/google/crypto/tink/proto/AesEaxParams;` @kind virtual;
  #L43d042.  v0:= temp @kind object;
  #L43d044.  call temp:= `getIvSize`(v0) @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.getIvSize:()I` @kind virtual;
  #L43d04a.  v0:= temp;
  #L43d04c.  v1:= 12I;
  #L43d050.  if v0 == v1 then goto L43d07e;
  #L43d054.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxKey;.getParams:()Lcom/google/crypto/tink/proto/AesEaxParams;` @kind virtual;
  #L43d05a.  v3:= temp @kind object;
  #L43d05c.  call temp:= `getIvSize`(v3) @signature `Lcom/google/crypto/tink/proto/AesEaxParams;.getIvSize:()I` @kind virtual;
  #L43d062.  v3:= temp;
  #L43d064.  v0:= 16I;
  #L43d068.  if v3 != v0 then goto L43d06e;
  #L43d06c.  goto L43d07e;
  #L43d06e.  v3:= new `java.security.GeneralSecurityException`;
  #L43d072.  v0:= "invalid IV size; acceptable values have 12 or 16 bytes" @kind object;
  #L43d076.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d07c.  throw v3;
  #L43d07e.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesEaxKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d090.  v1:= (`com.google.crypto.tink.proto.AesEaxKey`) v1 @kind object;
  #L43d094.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesEaxKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesEaxKey;)V` @kind virtual;
  #L43d09a.  return @kind void;
}
