record `com.google.crypto.tink.aead.AesGcmKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43d480.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmKey` @kind object;
  #L43d484.  v1:= 1I;
  #L43d486.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L43d48a.  v2:= new `com.google.crypto.tink.aead.AesGcmKeyManager$a`;
  #L43d48e.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L43d492.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43d498.  v3:= 0I;
  #L43d49a.  v1[v3]:= v2 @kind object;
  #L43d49e.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L43d4a4.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d2fc.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d300.  v1:= 16I;
  #L43d304.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d30a.  v0:= temp @kind object;
  #L43d30c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.aes256GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d320.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d324.  v1:= 32I;
  #L43d328.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d32e.  v0:= temp @kind object;
  #L43d330.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `b`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43d344.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;` @kind static;
  #L43d34a.  v0:= temp @kind object;
  #L43d34c.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmKeyFormat$Builder;` @kind virtual;
  #L43d352.  v1:= temp @kind object;
  #L43d354.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43d35a.  v1:= temp @kind object;
  #L43d35c.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L43d360.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager`;
  #L43d364.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @kind direct;
  #L43d36a.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43d370.  v0:= temp @kind object;
  #L43d372.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L43d378.  v1:= temp @kind object;
  #L43d37a.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d380.  v1:= temp @kind object;
  #L43d382.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.rawAes128GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d394.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d398.  v1:= 16I;
  #L43d39c.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d3a2.  v0:= temp @kind object;
  #L43d3a4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256GcmTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.rawAes256GcmTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d3b8.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d3bc.  v1:= 32I;
  #L43d3c0.  call temp:= `b`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.b:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d3c6.  v0:= temp @kind object;
  #L43d3c8.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43d4b8.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager`;
  #L43d4bc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.<init>:()V` @kind direct;
  #L43d4c2.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L43d4c8.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d468.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmKey" @kind object;
  #L43d46c.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d454.  v0:= 0I;
  #L43d456.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesGcmKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d3dc.  v0:= new `com.google.crypto.tink.aead.AesGcmKeyManager$b`;
  #L43d3e0.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmKeyFormat` @kind object;
  #L43d3e4.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L43d3ea.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d420.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43d424.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `parseKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d3fc.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43d402.  v0:= temp @kind object;
  #L43d404.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind static;
  #L43d40a.  v2:= temp @kind object;
  #L43d40c.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d438.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L43d43e.  v1:= temp @kind object;
  #L43d440.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d4dc.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.getVersion:()I` @kind virtual;
  #L43d4e2.  v0:= temp;
  #L43d4e4.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L43d4ea.  v1:= temp;
  #L43d4ec.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43d4f2.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43d4f8.  v3:= temp @kind object;
  #L43d4fa.  call temp:= `size`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43d500.  v3:= temp;
  #L43d502.  call `validateAesKeySize`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L43d508.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d51c.  v1:= (`com.google.crypto.tink.proto.AesGcmKey`) v1 @kind object;
  #L43d520.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmKey;)V` @kind virtual;
  #L43d526.  return @kind void;
}
