record `com.google.crypto.tink.aead.AesGcmKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.aead.AesGcmKeyManager` `com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.aead.AesGcmKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d2a4.  v0.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` := v1 @kind object;
  #L43d2a8.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43d2ae.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `a`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v1 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d110.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind static;
  #L43d116.  v0:= temp @kind object;
  #L43d118.  call temp:= `getKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L43d11e.  v2:= temp;
  #L43d120.  call temp:= `randBytes`(v2) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L43d126.  v2:= temp @kind object;
  #L43d128.  call temp:= `copyFrom`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43d12e.  v2:= temp @kind object;
  #L43d130.  call temp:= `setKeyValue`(v0, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L43d136.  v2:= temp @kind object;
  #L43d138.  v0:= v1.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L43d13c.  call temp:= `getVersion`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L43d142.  v0:= temp;
  #L43d144.  call temp:= `setVersion`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L43d14a.  v2:= temp @kind object;
  #L43d14c.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43d152.  v2:= temp @kind object;
  #L43d154.  v2:= (`com.google.crypto.tink.proto.AesGcmKey`) v2 @kind object;
  #L43d158.  return v2 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmKey` `b`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d16c.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getVersion:()I` @kind virtual;
  #L43d172.  v0:= temp;
  #L43d174.  v1:= v2.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L43d178.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L43d17e.  v1:= temp;
  #L43d180.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43d186.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L43d18c.  v0:= temp;
  #L43d18e.  v0:= new `byte`[v0];
  #L43d192.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L43d198.  v4:= temp;
  #L43d19a.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L43d1a0.  v3:= temp;
  #L43d1a2.  if v4 != v3 then goto L43d1e0;
  #L43d1a6.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind static;
  #L43d1ac.  v3:= temp @kind object;
  #L43d1ae.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L43d1b4.  v4:= temp @kind object;
  #L43d1b6.  call temp:= `setKeyValue`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L43d1bc.  v3:= temp @kind object;
  #L43d1be.  v4:= v2.`com.google.crypto.tink.aead.AesGcmKeyManager$b.b` @type ^`com.google.crypto.tink.aead.AesGcmKeyManager` @kind object;
  #L43d1c2.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager;.getVersion:()I` @kind virtual;
  #L43d1c8.  v4:= temp;
  #L43d1ca.  call temp:= `setVersion`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmKey$Builder;` @kind virtual;
  #L43d1d0.  v3:= temp @kind object;
  #L43d1d2.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43d1d8.  v3:= temp @kind object;
  #L43d1da.  v3:= (`com.google.crypto.tink.proto.AesGcmKey`) v3 @kind object;
  #L43d1de.  return v3 @kind object;
  #L43d1e0.  v3:= new `java.security.GeneralSecurityException`;
  #L43d1e4.  v4:= "Not enough pseudorandomness given" @kind object;
  #L43d1e8.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d1ee.  throw v3;
  #L43d1f0.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L43d1f2.  v4:= new `java.security.GeneralSecurityException`;
  #L43d1f6.  v0:= "Reading pseudorandomness failed" @kind object;
  #L43d1fa.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L43d200.  throw v4;
  catch `java.io.IOException` @[L43d192..L43d1f0] goto L43d1f0;
}
procedure `com.google.crypto.tink.proto.AesGcmKeyFormat` `c`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d224.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43d22a.  v0:= temp @kind object;
  #L43d22c.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @kind static;
  #L43d232.  v2:= temp @kind object;
  #L43d234.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d264.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L43d268.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L43d26e.  v1:= temp @kind object;
  #L43d270.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.proto.AesGcmKeyFormat` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)V` @AccessFlag PUBLIC {
    temp;

  #L43d2c0.  call temp:= `getKeySize`(v1) @signature `Lcom/google/crypto/tink/proto/AesGcmKeyFormat;.getKeySize:()I` @kind virtual;
  #L43d2c6.  v1:= temp;
  #L43d2c8.  call `validateAesKeySize`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L43d2ce.  return @kind void;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d284.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L43d288.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmKey;` @kind virtual;
  #L43d28e.  v1:= temp @kind object;
  #L43d290.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d248.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmKeyFormat;` @kind virtual;
  #L43d24e.  v1:= temp @kind object;
  #L43d250.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.aead.AesGcmKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d2e0.  v1:= (`com.google.crypto.tink.proto.AesGcmKeyFormat`) v1 @kind object;
  #L43d2e4.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmKeyFormat;)V` @kind virtual;
  #L43d2ea.  return @kind void;
}
