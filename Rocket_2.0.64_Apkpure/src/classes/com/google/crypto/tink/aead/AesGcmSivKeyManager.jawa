record `com.google.crypto.tink.aead.AesGcmSivKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43d940.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmSivKey` @kind object;
  #L43d944.  v1:= 1I;
  #L43d946.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L43d94a.  v2:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager$a`;
  #L43d94e.  v3:= constclass @type ^`com.google.crypto.tink.Aead` @kind object;
  #L43d952.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L43d958.  v3:= 0I;
  #L43d95a.  v1[v3]:= v2 @kind object;
  #L43d95e.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L43d964.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.aes128GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d7bc.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d7c0.  v1:= 16I;
  #L43d7c4.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d7ca.  v0:= temp @kind object;
  #L43d7cc.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.aes256GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d7e0.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d7e4.  v1:= 32I;
  #L43d7e8.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d7ee.  v0:= temp @kind object;
  #L43d7f0.  return v0 @kind object;
}
procedure `boolean` `b`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.b:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43d788.  v0:= "AES/GCM-SIV/NoPadding" @kind object;
  #L43d78c.  call temp:= `getInstance`(v0) @signature `Ljavax/crypto/Cipher;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Cipher;` @kind static;
  #L43d792.  v0:= 1I;
  #L43d794.  return v0;
  #L43d796.  v0:= 0I;
  #L43d798.  return v0;
  catch `java.security.NoSuchAlgorithmException` @[L43d788..L43d792] goto L43d796;
  catch `javax.crypto.NoSuchPaddingException` @[L43d788..L43d792] goto L43d796;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `com.google.crypto.tink.KeyTemplate$OutputPrefixType` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L43d804.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;` @kind static;
  #L43d80a.  v0:= temp @kind object;
  #L43d80c.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmSivKeyFormat$Builder;` @kind virtual;
  #L43d812.  v1:= temp @kind object;
  #L43d814.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L43d81a.  v1:= temp @kind object;
  #L43d81c.  v1:= (`com.google.crypto.tink.proto.AesGcmSivKeyFormat`) v1 @kind object;
  #L43d820.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager`;
  #L43d824.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @kind direct;
  #L43d82a.  call temp:= `getKeyType`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L43d830.  v0:= temp @kind object;
  #L43d832.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L43d838.  v1:= temp @kind object;
  #L43d83a.  call temp:= `create`(v0, v1, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d840.  v1:= temp @kind object;
  #L43d842.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes128GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.rawAes128GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d854.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d858.  v1:= 16I;
  #L43d85c.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d862.  v0:= temp @kind object;
  #L43d864.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256GcmSivTemplate`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.rawAes256GcmSivTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L43d878.  v0:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L43d87c.  v1:= 32I;
  #L43d880.  call temp:= `c`(v1, v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.c:(ILcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L43d886.  v0:= temp @kind object;
  #L43d888.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L43d978.  call temp:= `b`() @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.b:()Z` @kind static;
  #L43d97e.  v0:= temp;
  #L43d980.  if v0 == 0 then goto L43d994;
  #L43d984.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager`;
  #L43d988.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.<init>:()V` @kind direct;
  #L43d98e.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L43d994.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d928.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmSivKey" @kind object;
  #L43d92c.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d914.  v0:= 0I;
  #L43d916.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d89c.  v0:= new `com.google.crypto.tink.aead.AesGcmSivKeyManager$b`;
  #L43d8a0.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmSivKeyFormat` @kind object;
  #L43d8a4.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager$b;.<init>:(Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L43d8aa.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d8e0.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L43d8e4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmSivKey` `parseKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d8bc.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L43d8c2.  v0:= temp @kind object;
  #L43d8c4.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @kind static;
  #L43d8ca.  v2:= temp @kind object;
  #L43d8cc.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d8f8.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmSivKey;` @kind virtual;
  #L43d8fe.  v1:= temp @kind object;
  #L43d900.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmSivKey` v3 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmSivKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d9a8.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.getVersion:()I` @kind virtual;
  #L43d9ae.  v0:= temp;
  #L43d9b0.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.getVersion:()I` @kind virtual;
  #L43d9b6.  v1:= temp;
  #L43d9b8.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L43d9be.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmSivKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L43d9c4.  v3:= temp @kind object;
  #L43d9c6.  call temp:= `size`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43d9cc.  v3:= temp;
  #L43d9ce.  call `validateAesKeySize`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L43d9d4.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.aead.AesGcmSivKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43d9e8.  v1:= (`com.google.crypto.tink.proto.AesGcmSivKey`) v1 @kind object;
  #L43d9ec.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/aead/AesGcmSivKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmSivKey;)V` @kind virtual;
  #L43d9f2.  return @kind void;
}
