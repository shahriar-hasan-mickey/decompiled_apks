record `com.google.crypto.tink.KeysetHandle` @kind class @AccessFlag PUBLIC_FINAL {
  `com.google.crypto.tink.proto.Keyset` `com.google.crypto.tink.KeysetHandle.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L438fdc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L438fe2.  v0.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` := v1 @kind object;
  #L438fe6.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.proto.Keyset` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L439068.  call temp:= `getKeyList`(v4) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L43906e.  v4:= temp @kind object;
  #L439070.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L439076.  v4:= temp @kind object;
  #L439078.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43907e.  v0:= temp;
  #L439080.  if v0 == 0 then goto L439124;
  #L439084.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43908a.  v0:= temp @kind object;
  #L43908c.  v0:= (`com.google.crypto.tink.proto.Keyset$Key`) v0 @kind object;
  #L439090.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L439096.  v1:= temp @kind object;
  #L439098.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L43909e.  v1:= temp @kind object;
  #L4390a0.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.UNKNOWN_KEYMATERIAL` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L4390a4.  if v1 == v2 then goto L4390da;
  #L4390a8.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4390ae.  v1:= temp @kind object;
  #L4390b0.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4390b6.  v1:= temp @kind object;
  #L4390b8.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L4390bc.  if v1 == v2 then goto L4390da;
  #L4390c0.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4390c6.  v1:= temp @kind object;
  #L4390c8.  call temp:= `getKeyMaterialType`(v1) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4390ce.  v1:= temp @kind object;
  #L4390d0.  v2:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L4390d4.  if v1 == v2 then goto L4390da;
  #L4390d8.  goto L439078;
  #L4390da.  v4:= new `java.security.GeneralSecurityException`;
  #L4390de.  v1:= 2I;
  #L4390e0.  v1:= new `java.lang.Object`[v1];
  #L4390e4.  v2:= 0I;
  #L4390e6.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L4390ec.  v3:= temp @kind object;
  #L4390ee.  call temp:= `getKeyMaterialType`(v3) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L4390f4.  v3:= temp @kind object;
  #L4390f6.  v1[v2]:= v3 @kind object;
  #L4390fa.  v2:= 1I;
  #L4390fc.  call temp:= `getKeyData`(v0) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L439102.  v0:= temp @kind object;
  #L439104.  call temp:= `getTypeUrl`(v0) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L43910a.  v0:= temp @kind object;
  #L43910c.  v1[v2]:= v0 @kind object;
  #L439110.  v0:= "keyset contains key material of type %s for type url %s" @kind object;
  #L439114.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L43911a.  v0:= temp @kind object;
  #L43911c.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439122.  throw v4;
  #L439124.  return @kind void;
}
procedure `void` `assertEnoughEncryptedKeyMaterial`(`com.google.crypto.tink.proto.EncryptedKeyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughEncryptedKeyMaterial:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L438ff8.  if v1 == 0 then goto L439012;
  #L438ffc.  call temp:= `getEncryptedKeyset`(v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.getEncryptedKeyset:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L439002.  v1:= temp @kind object;
  #L439004.  call temp:= `size`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L43900a.  v1:= temp;
  #L43900c.  if v1 == 0 then goto L439012;
  #L439010.  return @kind void;
  #L439012.  v1:= new `java.security.GeneralSecurityException`;
  #L439016.  v0:= "empty keyset" @kind object;
  #L43901a.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439020.  throw v1;
}
procedure `void` `assertEnoughKeyMaterial`(`com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L439034.  if v1 == 0 then goto L439046;
  #L439038.  call temp:= `getKeyCount`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyCount:()I` @kind virtual;
  #L43903e.  v1:= temp;
  #L439040.  if v1 <= 0 then goto L439046;
  #L439044.  return @kind void;
  #L439046.  v1:= new `java.security.GeneralSecurityException`;
  #L43904a.  v0:= "empty keyset" @kind object;
  #L43904e.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L439054.  throw v1;
}
procedure `com.google.crypto.tink.proto.KeyData` `b`(`com.google.crypto.tink.proto.KeyData` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.b:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/KeyData;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L438e10.  call temp:= `getKeyMaterialType`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getKeyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @kind virtual;
  #L438e16.  v0:= temp @kind object;
  #L438e18.  v1:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.ASYMMETRIC_PRIVATE` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L438e1c.  if v0 != v1 then goto L438e40;
  #L438e20.  call temp:= `getTypeUrl`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getTypeUrl:()Ljava/lang/String;` @kind virtual;
  #L438e26.  v0:= temp @kind object;
  #L438e28.  call temp:= `getValue`(v2) @signature `Lcom/google/crypto/tink/proto/KeyData;.getValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L438e2e.  v2:= temp @kind object;
  #L438e30.  call temp:= `getPublicKeyData`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPublicKeyData:(Ljava/lang/String;Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L438e36.  v2:= temp @kind object;
  #L438e38.  call `h`(v2) @signature `Lcom/google/crypto/tink/KeysetHandle;.h:(Lcom/google/crypto/tink/proto/KeyData;)V` @kind static;
  #L438e3e.  return v2 @kind object;
  #L438e40.  v2:= new `java.security.GeneralSecurityException`;
  #L438e44.  v0:= "The keyset contains a non-private key" @kind object;
  #L438e48.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438e4e.  throw v2;
}
procedure `com.google.crypto.tink.proto.Keyset` `c`(`com.google.crypto.tink.proto.EncryptedKeyset` v1 @kind object, `com.google.crypto.tink.Aead` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.c:(Lcom/google/crypto/tink/proto/EncryptedKeyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L438e60.  call temp:= `getEncryptedKeyset`(v1) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.getEncryptedKeyset:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L438e66.  v1:= temp @kind object;
  #L438e68.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.toByteArray:()[B` @kind virtual;
  #L438e6e.  v1:= temp @kind object;
  #L438e70.  v0:= 0I;
  #L438e72.  v0:= new `byte`[v0];
  #L438e76.  call temp:= `decrypt`(v2, v1, v0) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L438e7c.  v1:= temp @kind object;
  #L438e7e.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L438e84.  v2:= temp @kind object;
  #L438e86.  call temp:= `parseFrom`(v1, v2) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L438e8c.  v1:= temp @kind object;
  #L438e8e.  call `assertEnoughKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L438e94.  return v1 @kind object;
  #L438e96.  v1:= new `java.security.GeneralSecurityException`;
  #L438e9a.  v2:= "invalid keyset, corrupted key material" @kind object;
  #L438e9e.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438ea4.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L438e60..L438e94] goto L438e96;
}
procedure `com.google.crypto.tink.proto.EncryptedKeyset` `d`(`com.google.crypto.tink.proto.Keyset` v3 @kind object, `com.google.crypto.tink.Aead` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.d:(Lcom/google/crypto/tink/proto/Keyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L438d54.  call temp:= `toByteArray`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L438d5a.  v0:= temp @kind object;
  #L438d5c.  v1:= 0I;
  #L438d5e.  v2:= new `byte`[v1];
  #L438d62.  call temp:= `encrypt`(v4, v0, v2) @signature `Lcom/google/crypto/tink/Aead;.encrypt:([B[B)[B` @kind interface;
  #L438d68.  v0:= temp @kind object;
  #L438d6a.  v1:= new `byte`[v1];
  #L438d6e.  call temp:= `decrypt`(v4, v0, v1) @signature `Lcom/google/crypto/tink/Aead;.decrypt:([B[B)[B` @kind interface;
  #L438d74.  v4:= temp @kind object;
  #L438d76.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L438d7c.  v1:= temp @kind object;
  #L438d7e.  call temp:= `parseFrom`(v4, v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L438d84.  v4:= temp @kind object;
  #L438d86.  call temp:= `equals`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L438d8c.  v4:= temp;
  #L438d8e.  if v4 == 0 then goto L438dc8;
  #L438d92.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset;.newBuilder:()Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind static;
  #L438d98.  v4:= temp @kind object;
  #L438d9a.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L438da0.  v0:= temp @kind object;
  #L438da2.  call temp:= `setEncryptedKeyset`(v4, v0) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;.setEncryptedKeyset:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind virtual;
  #L438da8.  v4:= temp @kind object;
  #L438daa.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @kind static;
  #L438db0.  v3:= temp @kind object;
  #L438db2.  call temp:= `setKeysetInfo`(v4, v3) @signature `Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;.setKeysetInfo:(Lcom/google/crypto/tink/proto/KeysetInfo;)Lcom/google/crypto/tink/proto/EncryptedKeyset$Builder;` @kind virtual;
  #L438db8.  v3:= temp @kind object;
  #L438dba.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L438dc0.  v3:= temp @kind object;
  #L438dc2.  v3:= (`com.google.crypto.tink.proto.EncryptedKeyset`) v3 @kind object;
  #L438dc6.  return v3 @kind object;
  #L438dc8.  v3:= new `java.security.GeneralSecurityException`;
  #L438dcc.  v4:= "cannot encrypt keyset" @kind object;
  #L438dd0.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438dd6.  throw v3;
  #L438dd8.  v3:= new `java.security.GeneralSecurityException`;
  #L438ddc.  v4:= "invalid keyset, corrupted key material" @kind object;
  #L438de0.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438de6.  throw v3;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L438d6a..L438d8e] goto L438dd8;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L438dc8..L438dd8] goto L438dd8;
}
procedure `com.google.crypto.tink.KeysetHandle` `e`(`com.google.crypto.tink.proto.Keyset` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag STATIC_FINAL {
    temp;
    v0;

  #L438b3c.  call `assertEnoughKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughKeyMaterial:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L438b42.  v0:= new `com.google.crypto.tink.KeysetHandle`;
  #L438b46.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L438b4c.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.g:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L438f94.  call temp:= `getPrimitives`(v0, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L438f9a.  v2:= temp @kind object;
  #L438f9c.  call temp:= `wrap`(v2, v1) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L438fa2.  v1:= temp @kind object;
  #L438fa4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `generateNew`(`com.google.crypto.tink.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.generateNew:(Lcom/google/crypto/tink/KeyTemplate;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L438b60.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L438b66.  v0:= temp @kind object;
  #L438b68.  call temp:= `b`(v1) @signature `Lcom/google/crypto/tink/KeyTemplate;.b:()Lcom/google/crypto/tink/proto/KeyTemplate;` @kind virtual;
  #L438b6e.  v1:= temp @kind object;
  #L438b70.  call temp:= `rotate`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.rotate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L438b76.  v1:= temp @kind object;
  #L438b78.  call temp:= `getKeysetHandle`(v1) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L438b7e.  v1:= temp @kind object;
  #L438b80.  return v1 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `generateNew`(`com.google.crypto.tink.proto.KeyTemplate` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.generateNew:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L438b94.  call temp:= `withEmptyKeyset`() @signature `Lcom/google/crypto/tink/KeysetManager;.withEmptyKeyset:()Lcom/google/crypto/tink/KeysetManager;` @kind static;
  #L438b9a.  v0:= temp @kind object;
  #L438b9c.  call temp:= `rotate`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetManager;.rotate:(Lcom/google/crypto/tink/proto/KeyTemplate;)Lcom/google/crypto/tink/KeysetManager;` @kind virtual;
  #L438ba2.  v1:= temp @kind object;
  #L438ba4.  call temp:= `getKeysetHandle`(v1) @signature `Lcom/google/crypto/tink/KeysetManager;.getKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @kind virtual;
  #L438baa.  v1:= temp @kind object;
  #L438bac.  return v1 @kind object;
}
procedure `void` `h`(`com.google.crypto.tink.proto.KeyData` v0 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.h:(Lcom/google/crypto/tink/proto/KeyData;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L439138.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/Registry;.getPrimitive:(Lcom/google/crypto/tink/proto/KeyData;)Ljava/lang/Object;` @kind static;
  #L43913e.  return @kind void;
}
procedure `com.google.crypto.tink.KeysetHandle` `read`(`com.google.crypto.tink.KeysetReader` v1 @kind object, `com.google.crypto.tink.Aead` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.read:(Lcom/google/crypto/tink/KeysetReader;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L438c88.  call temp:= `readEncrypted`(v1) @signature `Lcom/google/crypto/tink/KeysetReader;.readEncrypted:()Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind interface;
  #L438c8e.  v1:= temp @kind object;
  #L438c90.  call `assertEnoughEncryptedKeyMaterial`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.assertEnoughEncryptedKeyMaterial:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @kind static;
  #L438c96.  v0:= new `com.google.crypto.tink.KeysetHandle`;
  #L438c9a.  call temp:= `c`(v1, v2) @signature `Lcom/google/crypto/tink/KeysetHandle;.c:(Lcom/google/crypto/tink/proto/EncryptedKeyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L438ca0.  v1:= temp @kind object;
  #L438ca2.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L438ca8.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeysetHandle` `readNoSecret`(`com.google.crypto.tink.KeysetReader` v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.readNoSecret:(Lcom/google/crypto/tink/KeysetReader;)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L438d0c.  call temp:= `read`(v1) @signature `Lcom/google/crypto/tink/KeysetReader;.read:()Lcom/google/crypto/tink/proto/Keyset;` @kind interface;
  #L438d12.  v1:= temp @kind object;
  #L438d14.  call `a`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L438d1a.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L438d20.  v1:= temp @kind object;
  #L438d22.  return v1 @kind object;
  #L438d24.  v1:= new `java.security.GeneralSecurityException`;
  #L438d28.  v0:= "invalid keyset" @kind object;
  #L438d2c.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438d32.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L438d0c..L438d22] goto L438d24;
}
procedure `com.google.crypto.tink.KeysetHandle` `readNoSecret`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.readNoSecret:([B)Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L438cbc.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L438cc2.  v0:= temp @kind object;
  #L438cc4.  call temp:= `parseFrom`(v1, v0) @signature `Lcom/google/crypto/tink/proto/Keyset;.parseFrom:([BLcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/Keyset;` @kind static;
  #L438cca.  v1:= temp @kind object;
  #L438ccc.  call `a`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L438cd2.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.e:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/KeysetHandle;` @kind static;
  #L438cd8.  v1:= temp @kind object;
  #L438cda.  return v1 @kind object;
  #L438cdc.  v1:= new `java.security.GeneralSecurityException`;
  #L438ce0.  v0:= "invalid keyset" @kind object;
  #L438ce4.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438cea.  throw v1;
  catch `com.google.crypto.tink.shaded.protobuf.InvalidProtocolBufferException` @[L438cbc..L438cda] goto L438cdc;
}
procedure `com.google.crypto.tink.proto.Keyset` `f`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.f:()Lcom/google/crypto/tink/proto/Keyset;` @AccessFlag  {
    temp;
    v0;

  #L438ec8.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L438ecc.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeysetInfo` `getKeysetInfo`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438ee0.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L438ee4.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/a;.b:(Lcom/google/crypto/tink/proto/Keyset;)Lcom/google/crypto/tink/proto/KeysetInfo;` @kind static;
  #L438eea.  v0:= temp @kind object;
  #L438eec.  return v0 @kind object;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v0 @kind this, `com.google.crypto.tink.KeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPrimitive:(Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L438f00.  if v1 == 0 then goto L438f16;
  #L438f04.  call temp:= `getPrimitives`(v0, v1, v2) @signature `Lcom/google/crypto/tink/Registry;.getPrimitives:(Lcom/google/crypto/tink/KeysetHandle;Lcom/google/crypto/tink/KeyManager;Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @kind static;
  #L438f0a.  v1:= temp @kind object;
  #L438f0c.  call temp:= `wrap`(v1) @signature `Lcom/google/crypto/tink/Registry;.wrap:(Lcom/google/crypto/tink/PrimitiveSet;)Ljava/lang/Object;` @kind static;
  #L438f12.  v1:= temp @kind object;
  #L438f14.  return v1 @kind object;
  #L438f16.  v1:= new `java.lang.IllegalArgumentException`;
  #L438f1a.  v2:= "customKeyManager must be non-null." @kind object;
  #L438f1e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438f24.  throw v1;
}
procedure `java.lang.Object` `getPrimitive`(`com.google.crypto.tink.KeysetHandle` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPrimitive:(Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L438f38.  call temp:= `getInputPrimitive`(v4) @signature `Lcom/google/crypto/tink/Registry;.getInputPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L438f3e.  v0:= temp @kind object;
  #L438f40.  if v0 == 0 then goto L438f4e;
  #L438f44.  call temp:= `g`(v3, v4, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.g:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L438f4a.  v4:= temp @kind object;
  #L438f4c.  return v4 @kind object;
  #L438f4e.  v0:= new `java.security.GeneralSecurityException`;
  #L438f52.  v1:= new `java.lang.StringBuilder`;
  #L438f56.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L438f5c.  v2:= "No wrapper found for " @kind object;
  #L438f60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438f66.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L438f6c.  v4:= temp @kind object;
  #L438f6e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L438f74.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L438f7a.  v4:= temp @kind object;
  #L438f7c.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438f82.  throw v0;
}
procedure `com.google.crypto.tink.KeysetHandle` `getPublicKeysetHandle`(`com.google.crypto.tink.KeysetHandle` v5 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.getPublicKeysetHandle:()Lcom/google/crypto/tink/KeysetHandle;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438bc0.  v0:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L438bc4.  if v0 == 0 then goto L438c66;
  #L438bc8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind static;
  #L438bce.  v0:= temp @kind object;
  #L438bd0.  v1:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L438bd4.  call temp:= `getKeyList`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getKeyList:()Ljava/util/List;` @kind virtual;
  #L438bda.  v1:= temp @kind object;
  #L438bdc.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L438be2.  v1:= temp @kind object;
  #L438be4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L438bea.  v2:= temp;
  #L438bec.  if v2 == 0 then goto L438c3c;
  #L438bf0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L438bf6.  v2:= temp @kind object;
  #L438bf8.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L438bfc.  call temp:= `getKeyData`(v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyData:()Lcom/google/crypto/tink/proto/KeyData;` @kind virtual;
  #L438c02.  v3:= temp @kind object;
  #L438c04.  call temp:= `b`(v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.b:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/KeyData;` @kind static;
  #L438c0a.  v3:= temp @kind object;
  #L438c0c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.newBuilder:()Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind static;
  #L438c12.  v4:= temp @kind object;
  #L438c14.  call temp:= `mergeFrom`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;)Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;` @kind virtual;
  #L438c1a.  v2:= temp @kind object;
  #L438c1c.  v2:= (`com.google.crypto.tink.proto.Keyset$Key$Builder`) v2 @kind object;
  #L438c20.  call temp:= `setKeyData`(v2, v3) @signature `Lcom/google/crypto/tink/proto/Keyset$Key$Builder;.setKeyData:(Lcom/google/crypto/tink/proto/KeyData;)Lcom/google/crypto/tink/proto/Keyset$Key$Builder;` @kind virtual;
  #L438c26.  v2:= temp @kind object;
  #L438c28.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L438c2e.  v2:= temp @kind object;
  #L438c30.  v2:= (`com.google.crypto.tink.proto.Keyset$Key`) v2 @kind object;
  #L438c34.  call temp:= `addKey`(v0, v2) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.addKey:(Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L438c3a.  goto L438be4;
  #L438c3c.  v1:= v5.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L438c40.  call temp:= `getPrimaryKeyId`(v1) @signature `Lcom/google/crypto/tink/proto/Keyset;.getPrimaryKeyId:()I` @kind virtual;
  #L438c46.  v1:= temp;
  #L438c48.  call temp:= `setPrimaryKeyId`(v0, v1) @signature `Lcom/google/crypto/tink/proto/Keyset$Builder;.setPrimaryKeyId:(I)Lcom/google/crypto/tink/proto/Keyset$Builder;` @kind virtual;
  #L438c4e.  v1:= new `com.google.crypto.tink.KeysetHandle`;
  #L438c52.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L438c58.  v0:= temp @kind object;
  #L438c5a.  v0:= (`com.google.crypto.tink.proto.Keyset`) v0 @kind object;
  #L438c5e.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.<init>:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind direct;
  #L438c64.  return v1 @kind object;
  #L438c66.  v0:= new `java.security.GeneralSecurityException`;
  #L438c6a.  v1:= "cleartext keyset is not available" @kind object;
  #L438c6e.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L438c74.  throw v0;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.KeysetHandle` v1 @kind this) @signature `Lcom/google/crypto/tink/KeysetHandle;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438fb8.  call temp:= `getKeysetInfo`(v1) @signature `Lcom/google/crypto/tink/KeysetHandle;.getKeysetInfo:()Lcom/google/crypto/tink/proto/KeysetInfo;` @kind virtual;
  #L438fbe.  v0:= temp @kind object;
  #L438fc0.  call temp:= `toString`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;.toString:()Ljava/lang/String;` @kind virtual;
  #L438fc6.  v0:= temp @kind object;
  #L438fc8.  return v0 @kind object;
}
procedure `void` `write`(`com.google.crypto.tink.KeysetHandle` v1 @kind this, `com.google.crypto.tink.KeysetWriter` v2 @kind object, `com.google.crypto.tink.Aead` v3 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.write:(Lcom/google/crypto/tink/KeysetWriter;Lcom/google/crypto/tink/Aead;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439150.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L439154.  call temp:= `d`(v0, v3) @signature `Lcom/google/crypto/tink/KeysetHandle;.d:(Lcom/google/crypto/tink/proto/Keyset;Lcom/google/crypto/tink/Aead;)Lcom/google/crypto/tink/proto/EncryptedKeyset;` @kind static;
  #L43915a.  v3:= temp @kind object;
  #L43915c.  call `write`(v2, v3) @signature `Lcom/google/crypto/tink/KeysetWriter;.write:(Lcom/google/crypto/tink/proto/EncryptedKeyset;)V` @kind interface;
  #L439162.  return @kind void;
}
procedure `void` `writeNoSecret`(`com.google.crypto.tink.KeysetHandle` v1 @kind this, `com.google.crypto.tink.KeysetWriter` v2 @kind object) @signature `Lcom/google/crypto/tink/KeysetHandle;.writeNoSecret:(Lcom/google/crypto/tink/KeysetWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439174.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L439178.  call `a`(v0) @signature `Lcom/google/crypto/tink/KeysetHandle;.a:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind static;
  #L43917e.  v0:= v1.`com.google.crypto.tink.KeysetHandle.a` @type ^`com.google.crypto.tink.proto.Keyset` @kind object;
  #L439182.  call `write`(v2, v0) @signature `Lcom/google/crypto/tink/KeysetWriter;.write:(Lcom/google/crypto/tink/proto/Keyset;)V` @kind interface;
  #L439188.  return @kind void;
}
