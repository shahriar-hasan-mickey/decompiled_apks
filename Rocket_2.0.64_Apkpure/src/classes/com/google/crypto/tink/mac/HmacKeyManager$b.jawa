record `com.google.crypto.tink.mac.HmacKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.mac.HmacKeyManager` `com.google.crypto.tink.mac.HmacKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.mac.HmacKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/HmacKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442aa8.  v0.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` := v1 @kind object;
  #L442aac.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L442ab2.  return @kind void;
}
procedure `com.google.crypto.tink.proto.HmacKey` `a`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4428f4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind static;
  #L4428fa.  v0:= temp @kind object;
  #L4428fc.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L442900.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L442906.  v1:= temp;
  #L442908.  call temp:= `setVersion`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L44290e.  v0:= temp @kind object;
  #L442910.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L442916.  v1:= temp @kind object;
  #L442918.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L44291e.  v0:= temp @kind object;
  #L442920.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L442926.  v3:= temp;
  #L442928.  call temp:= `randBytes`(v3) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L44292e.  v3:= temp @kind object;
  #L442930.  call temp:= `copyFrom`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L442936.  v3:= temp @kind object;
  #L442938.  call temp:= `setKeyValue`(v0, v3) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L44293e.  v3:= temp @kind object;
  #L442940.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442946.  v3:= temp @kind object;
  #L442948.  v3:= (`com.google.crypto.tink.proto.HmacKey`) v3 @kind object;
  #L44294c.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.HmacKey` `b`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.b:(Lcom/google/crypto/tink/proto/HmacKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442960.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getVersion:()I` @kind virtual;
  #L442966.  v0:= temp;
  #L442968.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L44296c.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L442972.  v1:= temp;
  #L442974.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L44297a.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L442980.  v0:= temp;
  #L442982.  v0:= new `byte`[v0];
  #L442986.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L44298c.  v4:= temp;
  #L44298e.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L442994.  v1:= temp;
  #L442996.  if v4 != v1 then goto L4429e4;
  #L44299a.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKey;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind static;
  #L4429a0.  v4:= temp @kind object;
  #L4429a2.  v1:= v2.`com.google.crypto.tink.mac.HmacKeyManager$b.b` @type ^`com.google.crypto.tink.mac.HmacKeyManager` @kind object;
  #L4429a6.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L4429ac.  v1:= temp;
  #L4429ae.  call temp:= `setVersion`(v4, v1) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L4429b4.  v4:= temp @kind object;
  #L4429b6.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L4429bc.  v3:= temp @kind object;
  #L4429be.  call temp:= `setParams`(v4, v3) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L4429c4.  v3:= temp @kind object;
  #L4429c6.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L4429cc.  v4:= temp @kind object;
  #L4429ce.  call temp:= `setKeyValue`(v3, v4) @signature `Lcom/google/crypto/tink/proto/HmacKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey$Builder;` @kind virtual;
  #L4429d4.  v3:= temp @kind object;
  #L4429d6.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L4429dc.  v3:= temp @kind object;
  #L4429de.  v3:= (`com.google.crypto.tink.proto.HmacKey`) v3 @kind object;
  #L4429e2.  return v3 @kind object;
  #L4429e4.  v3:= new `java.security.GeneralSecurityException`;
  #L4429e8.  v4:= "Not enough pseudorandomness given" @kind object;
  #L4429ec.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4429f2.  throw v3;
  #L4429f4.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L4429f6.  v4:= new `java.security.GeneralSecurityException`;
  #L4429fa.  v0:= "Reading pseudorandomness failed" @kind object;
  #L4429fe.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L442a04.  throw v4;
  catch `java.io.IOException` @[L442986..L4429f4] goto L4429f4;
}
procedure `com.google.crypto.tink.proto.HmacKeyFormat` `c`(`com.google.crypto.tink.mac.HmacKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442a28.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L442a2e.  v0:= temp @kind object;
  #L442a30.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @kind static;
  #L442a36.  v2:= temp @kind object;
  #L442a38.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442a68.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L442a6c.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.a:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L442a72.  v1:= temp @kind object;
  #L442a74.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.mac.HmacKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.HmacKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.d:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442ac4.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getKeySize:()I` @kind virtual;
  #L442aca.  v0:= temp;
  #L442acc.  v1:= 16I;
  #L442ad0.  if v0 < v1 then goto L442ae4;
  #L442ad4.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L442ada.  v3:= temp @kind object;
  #L442adc.  call `b`(v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.b:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L442ae2.  return @kind void;
  #L442ae4.  v3:= new `java.security.GeneralSecurityException`;
  #L442ae8.  v0:= "key too short" @kind object;
  #L442aec.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442af2.  throw v3;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442a88.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L442a8c.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.b:(Lcom/google/crypto/tink/proto/HmacKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L442a92.  v1:= temp @kind object;
  #L442a94.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442a4c.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKeyFormat;` @kind virtual;
  #L442a52.  v1:= temp @kind object;
  #L442a54.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.mac.HmacKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442b04.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L442b08.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.d:(Lcom/google/crypto/tink/proto/HmacKeyFormat;)V` @kind virtual;
  #L442b0e.  return @kind void;
}
