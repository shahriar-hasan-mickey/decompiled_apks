record `com.google.crypto.tink.mac.HmacKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.HmacKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442d68.  v0:= constclass @type ^`com.google.crypto.tink.proto.HmacKey` @kind object;
  #L442d6c.  v1:= 1I;
  #L442d6e.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L442d72.  v2:= new `com.google.crypto.tink.mac.HmacKeyManager$a`;
  #L442d76.  v3:= constclass @type ^`com.google.crypto.tink.Mac` @kind object;
  #L442d7a.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L442d80.  v3:= 0I;
  #L442d82.  v1[v3]:= v2 @kind object;
  #L442d86.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L442d8c.  return @kind void;
}
procedure `void` `b`(`com.google.crypto.tink.proto.HmacParams` v0 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.b:(Lcom/google/crypto/tink/proto/HmacParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L442da0.  call `d`(v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L442da6.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `int` v2 , `com.google.crypto.tink.proto.HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L442bac.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind static;
  #L442bb2.  v0:= temp @kind object;
  #L442bb4.  call temp:= `setHash`(v0, v3) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setHash:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L442bba.  v3:= temp @kind object;
  #L442bbc.  call temp:= `setTagSize`(v3, v2) @signature `Lcom/google/crypto/tink/proto/HmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/HmacParams$Builder;` @kind virtual;
  #L442bc2.  v2:= temp @kind object;
  #L442bc4.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442bca.  v2:= temp @kind object;
  #L442bcc.  v2:= (`com.google.crypto.tink.proto.HmacParams`) v2 @kind object;
  #L442bd0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind static;
  #L442bd6.  v3:= temp @kind object;
  #L442bd8.  call temp:= `setParams`(v3, v2) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/HmacParams;)Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind virtual;
  #L442bde.  v2:= temp @kind object;
  #L442be0.  call temp:= `setKeySize`(v2, v1) @signature `Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/HmacKeyFormat$Builder;` @kind virtual;
  #L442be6.  v1:= temp @kind object;
  #L442be8.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442bee.  v1:= temp @kind object;
  #L442bf0.  v1:= (`com.google.crypto.tink.proto.HmacKeyFormat`) v1 @kind object;
  #L442bf4.  v2:= new `com.google.crypto.tink.mac.HmacKeyManager`;
  #L442bf8.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @kind direct;
  #L442bfe.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L442c04.  v2:= temp @kind object;
  #L442c06.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L442c0c.  v1:= temp @kind object;
  #L442c0e.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L442c12.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442c18.  v1:= temp @kind object;
  #L442c1a.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.HmacParams` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L442e58.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L442e5e.  v0:= temp;
  #L442e60.  v1:= 10I;
  #L442e64.  if v0 < v1 then goto L442f00;
  #L442e68.  v0:= `@@com.google.crypto.tink.mac.HmacKeyManager$c.a` @type ^`int`[] @kind object;
  #L442e6c.  call temp:= `getHash`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getHash:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L442e72.  v1:= temp @kind object;
  #L442e74.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L442e7a.  v1:= temp;
  #L442e7c.  v0:= v0[v1];
  #L442e80.  v1:= 1I;
  #L442e82.  v2:= "tag size too big" @kind object;
  #L442e86.  if v0 == v1 then goto L442ee2;
  #L442e8a.  v1:= 2I;
  #L442e8c.  if v0 == v1 then goto L442ec4;
  #L442e90.  v1:= 3I;
  #L442e92.  if v0 != v1 then goto L442eb4;
  #L442e96.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L442e9c.  v3:= temp;
  #L442e9e.  v0:= 64I;
  #L442ea2.  if v3 > v0 then goto L442ea8;
  #L442ea6.  goto L442ef2;
  #L442ea8.  v3:= new `java.security.GeneralSecurityException`;
  #L442eac.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442eb2.  throw v3;
  #L442eb4.  v3:= new `java.security.GeneralSecurityException`;
  #L442eb8.  v0:= "unknown hash type" @kind object;
  #L442ebc.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442ec2.  throw v3;
  #L442ec4.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L442eca.  v3:= temp;
  #L442ecc.  v0:= 32I;
  #L442ed0.  if v3 > v0 then goto L442ed6;
  #L442ed4.  goto L442ef2;
  #L442ed6.  v3:= new `java.security.GeneralSecurityException`;
  #L442eda.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442ee0.  throw v3;
  #L442ee2.  call temp:= `getTagSize`(v3) @signature `Lcom/google/crypto/tink/proto/HmacParams;.getTagSize:()I` @kind virtual;
  #L442ee8.  v3:= temp;
  #L442eea.  v0:= 20I;
  #L442eee.  if v3 > v0 then goto L442ef4;
  #L442ef2.  return @kind void;
  #L442ef4.  v3:= new `java.security.GeneralSecurityException`;
  #L442ef8.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442efe.  throw v3;
  #L442f00.  v3:= new `java.security.GeneralSecurityException`;
  #L442f04.  v0:= "tag size too small" @kind object;
  #L442f08.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442f0e.  throw v3;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha256HalfDigestTemplate`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha256HalfDigestTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L442c2c.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L442c30.  v1:= 32I;
  #L442c34.  v2:= 16I;
  #L442c38.  call temp:= `c`(v1, v2, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442c3e.  v0:= temp @kind object;
  #L442c40.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha256Template`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha256Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L442c54.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L442c58.  v1:= 32I;
  #L442c5c.  call temp:= `c`(v1, v1, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442c62.  v0:= temp @kind object;
  #L442c64.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha512HalfDigestTemplate`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha512HalfDigestTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L442c78.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L442c7c.  v1:= 64I;
  #L442c80.  v2:= 32I;
  #L442c84.  call temp:= `c`(v1, v2, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442c8a.  v0:= temp @kind object;
  #L442c8c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `hmacSha512Template`() @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.hmacSha512Template:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L442ca0.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA512` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L442ca4.  v1:= 64I;
  #L442ca8.  call temp:= `c`(v1, v1, v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.c:(IILcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442cae.  v0:= temp @kind object;
  #L442cb0.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L442db8.  v0:= new `com.google.crypto.tink.mac.HmacKeyManager`;
  #L442dbc.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.<init>:()V` @kind direct;
  #L442dc2.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L442dc8.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d50.  v0:= "type.googleapis.com/google.crypto.tink.HmacKey" @kind object;
  #L442d54.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d3c.  v0:= 0I;
  #L442d3e.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.mac.HmacKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442cc4.  v0:= new `com.google.crypto.tink.mac.HmacKeyManager$b`;
  #L442cc8.  v1:= constclass @type ^`com.google.crypto.tink.proto.HmacKeyFormat` @kind object;
  #L442ccc.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/HmacKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L442cd2.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442d08.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L442d0c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.HmacKey` `parseKey`(`com.google.crypto.tink.mac.HmacKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442ce4.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L442cea.  v0:= temp @kind object;
  #L442cec.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/HmacKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/HmacKey;` @kind static;
  #L442cf2.  v2:= temp @kind object;
  #L442cf4.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.mac.HmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442d20.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/HmacKey;` @kind virtual;
  #L442d26.  v1:= temp @kind object;
  #L442d28.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.HmacKeyManager` v2 @kind this, `com.google.crypto.tink.proto.HmacKey` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HmacKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442ddc.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getVersion:()I` @kind virtual;
  #L442de2.  v0:= temp;
  #L442de4.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.getVersion:()I` @kind virtual;
  #L442dea.  v1:= temp;
  #L442dec.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L442df2.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L442df8.  v0:= temp @kind object;
  #L442dfa.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L442e00.  v0:= temp;
  #L442e02.  v1:= 16I;
  #L442e06.  if v0 < v1 then goto L442e1a;
  #L442e0a.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/HmacKey;.getParams:()Lcom/google/crypto/tink/proto/HmacParams;` @kind virtual;
  #L442e10.  v3:= temp @kind object;
  #L442e12.  call `d`(v3) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.d:(Lcom/google/crypto/tink/proto/HmacParams;)V` @kind static;
  #L442e18.  return @kind void;
  #L442e1a.  v3:= new `java.security.GeneralSecurityException`;
  #L442e1e.  v0:= "key too short" @kind object;
  #L442e22.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442e28.  throw v3;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.HmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442e3c.  v1:= (`com.google.crypto.tink.proto.HmacKey`) v1 @kind object;
  #L442e40.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/HmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/HmacKey;)V` @kind virtual;
  #L442e46.  return @kind void;
}
