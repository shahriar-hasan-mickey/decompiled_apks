record `com.google.crypto.tink.mac.a$b` @kind class @AccessFlag  extends `com.google.crypto.tink.Mac` @kind interface {
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.mac.a$b.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.mac.a$b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.a$b` v2 @kind this, `com.google.crypto.tink.PrimitiveSet` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/a$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4432e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4432ee.  v0:= 1I;
  #L4432f0.  v0:= new `byte`[v0];
  #L4432f4.  v1:= 0I;
  #L4432f6.  v0[v1]:= v1 @kind byte;
  #L4432fa.  v2.`com.google.crypto.tink.mac.a$b.b` @type ^`byte`[] := v0 @kind object;
  #L4432fe.  v2.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` := v3 @kind object;
  #L443302.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.a$b` v0 @kind this, `com.google.crypto.tink.PrimitiveSet` v1 @kind object, `com.google.crypto.tink.mac.a$a` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/a$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Lcom/google/crypto/tink/mac/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L443314.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/mac/a$b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;)V` @kind direct;
  #L44331a.  return @kind void;
}
procedure `byte`[] `computeMac`(`com.google.crypto.tink.mac.a$b` v5 @kind this, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/mac/a$b;.computeMac:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L443200.  v0:= v5.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L443204.  call temp:= `getPrimary`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L44320a.  v0:= temp @kind object;
  #L44320c.  call temp:= `getOutputPrefixType`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L443212.  v0:= temp @kind object;
  #L443214.  v1:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L443218.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L44321e.  v0:= temp;
  #L443220.  v1:= 1I;
  #L443222.  v2:= 0I;
  #L443224.  v3:= 2I;
  #L443226.  if v0 == 0 then goto L44328c;
  #L44322a.  v0:= new `byte`[][v3];
  #L44322e.  v4:= v5.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L443232.  call temp:= `getPrimary`(v4) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L443238.  v4:= temp @kind object;
  #L44323a.  call temp:= `getIdentifier`(v4) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L443240.  v4:= temp @kind object;
  #L443242.  v0[v2]:= v4 @kind object;
  #L443246.  v4:= v5.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L44324a.  call temp:= `getPrimary`(v4) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L443250.  v4:= temp @kind object;
  #L443252.  call temp:= `getPrimitive`(v4) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L443258.  v4:= temp @kind object;
  #L44325a.  v4:= (`com.google.crypto.tink.Mac`) v4 @kind object;
  #L44325e.  v3:= new `byte`[][v3];
  #L443262.  v3[v2]:= v6 @kind object;
  #L443266.  v6:= v5.`com.google.crypto.tink.mac.a$b.b` @type ^`byte`[] @kind object;
  #L44326a.  v3[v1]:= v6 @kind object;
  #L44326e.  call temp:= `concat`(v3) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L443274.  v6:= temp @kind object;
  #L443276.  call temp:= `computeMac`(v4, v6) @signature `Lcom/google/crypto/tink/Mac;.computeMac:([B)[B` @kind interface;
  #L44327c.  v6:= temp @kind object;
  #L44327e.  v0[v1]:= v6 @kind object;
  #L443282.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L443288.  v6:= temp @kind object;
  #L44328a.  return v6 @kind object;
  #L44328c.  v0:= new `byte`[][v3];
  #L443290.  v3:= v5.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L443294.  call temp:= `getPrimary`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L44329a.  v3:= temp @kind object;
  #L44329c.  call temp:= `getIdentifier`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L4432a2.  v3:= temp @kind object;
  #L4432a4.  v0[v2]:= v3 @kind object;
  #L4432a8.  v2:= v5.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L4432ac.  call temp:= `getPrimary`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @kind virtual;
  #L4432b2.  v2:= temp @kind object;
  #L4432b4.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L4432ba.  v2:= temp @kind object;
  #L4432bc.  v2:= (`com.google.crypto.tink.Mac`) v2 @kind object;
  #L4432c0.  call temp:= `computeMac`(v2, v6) @signature `Lcom/google/crypto/tink/Mac;.computeMac:([B)[B` @kind interface;
  #L4432c6.  v6:= temp @kind object;
  #L4432c8.  v0[v1]:= v6 @kind object;
  #L4432cc.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L4432d2.  v6:= temp @kind object;
  #L4432d4.  return v6 @kind object;
}
procedure `void` `verifyMac`(`com.google.crypto.tink.mac.a$b` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/mac/a$b;.verifyMac:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44332c.  v0:= length @variable v7;
  #L44332e.  v1:= 5I;
  #L443330.  if v0 <= v1 then goto L443458;
  #L443334.  call temp:= `copyOf`(v7, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L44333a.  v0:= temp @kind object;
  #L44333c.  v2:= length @variable v7;
  #L44333e.  call temp:= `copyOfRange`(v7, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L443344.  v1:= temp @kind object;
  #L443346.  v2:= v6.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L44334a.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L443350.  v0:= temp @kind object;
  #L443352.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L443358.  v0:= temp @kind object;
  #L44335a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L443360.  v2:= temp;
  #L443362.  if v2 == 0 then goto L443404;
  #L443366.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44336c.  v2:= temp @kind object;
  #L44336e.  v2:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v2 @kind object;
  #L443372.  call temp:= `getOutputPrefixType`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L443378.  v3:= temp @kind object;
  #L44337a.  v4:= `@@com.google.crypto.tink.proto.OutputPrefixType.LEGACY` @type ^`com.google.crypto.tink.proto.OutputPrefixType` @kind object;
  #L44337e.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L443384.  v3:= temp;
  #L443386.  if v3 == 0 then goto L4433bc;
  #L44338a.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L443390.  v2:= temp @kind object;
  #L443392.  v2:= (`com.google.crypto.tink.Mac`) v2 @kind object;
  #L443396.  v3:= 2I;
  #L443398.  v3:= new `byte`[][v3];
  #L44339c.  v4:= 0I;
  #L44339e.  v3[v4]:= v8 @kind object;
  #L4433a2.  v4:= 1I;
  #L4433a4.  v5:= v6.`com.google.crypto.tink.mac.a$b.b` @type ^`byte`[] @kind object;
  #L4433a8.  v3[v4]:= v5 @kind object;
  #L4433ac.  call temp:= `concat`(v3) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L4433b2.  v3:= temp @kind object;
  #L4433b4.  call `verifyMac`(v2, v1, v3) @signature `Lcom/google/crypto/tink/Mac;.verifyMac:([B[B)V` @kind interface;
  #L4433ba.  goto L4433ce;
  #L4433bc.  call temp:= `getPrimitive`(v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L4433c2.  v2:= temp @kind object;
  #L4433c4.  v2:= (`com.google.crypto.tink.Mac`) v2 @kind object;
  #L4433c8.  call `verifyMac`(v2, v1, v8) @signature `Lcom/google/crypto/tink/Mac;.verifyMac:([B[B)V` @kind interface;
  #L4433ce.  return @kind void;
  #L4433d0.  v2:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L4433d2.  call temp:= `a`() @signature `Lcom/google/crypto/tink/mac/a;.a:()Ljava/util/logging/Logger;` @kind static;
  #L4433d8.  v3:= temp @kind object;
  #L4433da.  v4:= new `java.lang.StringBuilder`;
  #L4433de.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4433e4.  v5:= "tag prefix matches a key, but cannot verify: " @kind object;
  #L4433e8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4433ee.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4433f4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4433fa.  v2:= temp @kind object;
  #L4433fc.  call `info`(v3, v2) @signature `Ljava/util/logging/Logger;.info:(Ljava/lang/String;)V` @kind virtual;
  #L443402.  goto L44335a;
  #L443404.  v0:= v6.`com.google.crypto.tink.mac.a$b.a` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L443408.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L44340e.  v0:= temp @kind object;
  #L443410.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L443416.  v0:= temp @kind object;
  #L443418.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44341e.  v1:= temp;
  #L443420.  if v1 == 0 then goto L443448;
  #L443424.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44342a.  v1:= temp @kind object;
  #L44342c.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L443430.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L443436.  v1:= temp @kind object;
  #L443438.  v1:= (`com.google.crypto.tink.Mac`) v1 @kind object;
  #L44343c.  call `verifyMac`(v1, v7, v8) @signature `Lcom/google/crypto/tink/Mac;.verifyMac:([B[B)V` @kind interface;
  #L443442.  return @kind void;
  #L443444.  
  #L443446.  goto L443418;
  #L443448.  v7:= new `java.security.GeneralSecurityException`;
  #L44344c.  v8:= "invalid MAC" @kind object;
  #L443450.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443456.  throw v7;
  #L443458.  v7:= new `java.security.GeneralSecurityException`;
  #L44345c.  v8:= "tag too short" @kind object;
  #L443460.  call `<init>`(v7, v8) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443466.  throw v7;
  catch `java.security.GeneralSecurityException` @[L443372..L4433ce] goto L4433d0;
  catch `java.security.GeneralSecurityException` @[L443430..L443442] goto L443444;
}
