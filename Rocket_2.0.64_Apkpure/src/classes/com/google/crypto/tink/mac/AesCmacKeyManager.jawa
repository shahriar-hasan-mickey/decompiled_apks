record `com.google.crypto.tink.mac.AesCmacKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.mac.AesCmacKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L442678.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesCmacKey` @kind object;
  #L44267c.  v1:= 1I;
  #L44267e.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L442682.  v2:= new `com.google.crypto.tink.mac.AesCmacKeyManager$a`;
  #L442686.  v3:= constclass @type ^`com.google.crypto.tink.Mac` @kind object;
  #L44268a.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L442690.  v3:= 0I;
  #L442692.  v1[v3]:= v2 @kind object;
  #L442696.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L44269c.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256CmacTemplate`() @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.aes256CmacTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4424d4.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind static;
  #L4424da.  v0:= temp @kind object;
  #L4424dc.  v1:= 32I;
  #L4424e0.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L4424e6.  v0:= temp @kind object;
  #L4424e8.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind static;
  #L4424ee.  v1:= temp @kind object;
  #L4424f0.  v2:= 16I;
  #L4424f4.  call temp:= `setTagSize`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind virtual;
  #L4424fa.  v1:= temp @kind object;
  #L4424fc.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442502.  v1:= temp @kind object;
  #L442504.  v1:= (`com.google.crypto.tink.proto.AesCmacParams`) v1 @kind object;
  #L442508.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCmacParams;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L44250e.  v0:= temp @kind object;
  #L442510.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442516.  v0:= temp @kind object;
  #L442518.  v0:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v0 @kind object;
  #L44251c.  v1:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L442520.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L442526.  call temp:= `getKeyType`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L44252c.  v1:= temp @kind object;
  #L44252e.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L442534.  v0:= temp @kind object;
  #L442536.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.TINK` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L44253a.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L442540.  v0:= temp @kind object;
  #L442542.  return v0 @kind object;
}
procedure `void` `b`(`com.google.crypto.tink.proto.AesCmacParams` v0 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.b:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4426b0.  call `d`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @kind static;
  #L4426b6.  return @kind void;
}
procedure `void` `c`(`int` v0 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.c:(I)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4426c8.  call `e`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @kind static;
  #L4426ce.  return @kind void;
}
procedure `void` `d`(`com.google.crypto.tink.proto.AesCmacParams` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L44276c.  call temp:= `getTagSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.getTagSize:()I` @kind virtual;
  #L442772.  v0:= temp;
  #L442774.  v1:= 10I;
  #L442778.  if v0 < v1 then goto L44279e;
  #L44277c.  call temp:= `getTagSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.getTagSize:()I` @kind virtual;
  #L442782.  v2:= temp;
  #L442784.  v0:= 16I;
  #L442788.  if v2 > v0 then goto L44278e;
  #L44278c.  return @kind void;
  #L44278e.  v2:= new `java.security.GeneralSecurityException`;
  #L442792.  v0:= "tag size too long" @kind object;
  #L442796.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44279c.  throw v2;
  #L44279e.  v2:= new `java.security.GeneralSecurityException`;
  #L4427a2.  v0:= "tag size too short" @kind object;
  #L4427a6.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4427ac.  throw v2;
}
procedure `void` `e`(`int` v1 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4427c0.  v0:= 32I;
  #L4427c4.  if v1 != v0 then goto L4427ca;
  #L4427c8.  return @kind void;
  #L4427ca.  v1:= new `java.security.GeneralSecurityException`;
  #L4427ce.  v0:= "AesCmacKey size wrong, must be 32 bytes" @kind object;
  #L4427d2.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4427d8.  throw v1;
}
procedure `com.google.crypto.tink.KeyTemplate` `rawAes256CmacTemplate`() @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.rawAes256CmacTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L442554.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind static;
  #L44255a.  v0:= temp @kind object;
  #L44255c.  v1:= 32I;
  #L442560.  call temp:= `setKeySize`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L442566.  v0:= temp @kind object;
  #L442568.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesCmacParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind static;
  #L44256e.  v1:= temp @kind object;
  #L442570.  v2:= 16I;
  #L442574.  call temp:= `setTagSize`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesCmacParams$Builder;.setTagSize:(I)Lcom/google/crypto/tink/proto/AesCmacParams$Builder;` @kind virtual;
  #L44257a.  v1:= temp @kind object;
  #L44257c.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442582.  v1:= temp @kind object;
  #L442584.  v1:= (`com.google.crypto.tink.proto.AesCmacParams`) v1 @kind object;
  #L442588.  call temp:= `setParams`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesCmacParams;)Lcom/google/crypto/tink/proto/AesCmacKeyFormat$Builder;` @kind virtual;
  #L44258e.  v0:= temp @kind object;
  #L442590.  call temp:= `build`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L442596.  v0:= temp @kind object;
  #L442598.  v0:= (`com.google.crypto.tink.proto.AesCmacKeyFormat`) v0 @kind object;
  #L44259c.  v1:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L4425a0.  call `<init>`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L4425a6.  call temp:= `getKeyType`(v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L4425ac.  v1:= temp @kind object;
  #L4425ae.  call temp:= `toByteArray`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L4425b4.  v0:= temp @kind object;
  #L4425b6.  v2:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L4425ba.  call temp:= `create`(v1, v0, v2) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L4425c0.  v0:= temp @kind object;
  #L4425c2.  return v0 @kind object;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4426e0.  v0:= new `com.google.crypto.tink.mac.AesCmacKeyManager`;
  #L4426e4.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.<init>:()V` @kind direct;
  #L4426ea.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L4426f0.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442660.  v0:= "type.googleapis.com/google.crypto.tink.AesCmacKey" @kind object;
  #L442664.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44264c.  v0:= 0I;
  #L44264e.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.mac.AesCmacKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4425d4.  v0:= new `com.google.crypto.tink.mac.AesCmacKeyManager$b`;
  #L4425d8.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesCmacKeyFormat` @kind object;
  #L4425dc.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager$b;.<init>:(Lcom/google/crypto/tink/mac/AesCmacKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L4425e2.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442618.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L44261c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesCmacKey` `parseKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4425f4.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L4425fa.  v0:= temp @kind object;
  #L4425fc.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesCmacKey;` @kind static;
  #L442602.  v2:= temp @kind object;
  #L442604.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442630.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesCmacKey;` @kind virtual;
  #L442636.  v1:= temp @kind object;
  #L442638.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesCmacKey` v3 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L442704.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getVersion:()I` @kind virtual;
  #L44270a.  v0:= temp;
  #L44270c.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.getVersion:()I` @kind virtual;
  #L442712.  v1:= temp;
  #L442714.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L44271a.  call temp:= `getKeyValue`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getKeyValue:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L442720.  v0:= temp @kind object;
  #L442722.  call temp:= `size`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.size:()I` @kind virtual;
  #L442728.  v0:= temp;
  #L44272a.  call `e`(v0) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.e:(I)V` @kind static;
  #L442730.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesCmacKey;.getParams:()Lcom/google/crypto/tink/proto/AesCmacParams;` @kind virtual;
  #L442736.  v3:= temp @kind object;
  #L442738.  call `d`(v3) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.d:(Lcom/google/crypto/tink/proto/AesCmacParams;)V` @kind static;
  #L44273e.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.mac.AesCmacKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L442750.  v1:= (`com.google.crypto.tink.proto.AesCmacKey`) v1 @kind object;
  #L442754.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/mac/AesCmacKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesCmacKey;)V` @kind virtual;
  #L44275a.  return @kind void;
}
