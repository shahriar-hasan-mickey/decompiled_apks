record `com.google.crypto.tink.PrimitiveSet` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.ConcurrentMap` `com.google.crypto.tink.PrimitiveSet.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.PrimitiveSet$Entry` `com.google.crypto.tink.PrimitiveSet.b` @AccessFlag PRIVATE;
  `java.lang.Class` `com.google.crypto.tink.PrimitiveSet.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.<init>:(Ljava/lang/Class;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L43a0ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a0f2.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43a0f6.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43a0fc.  v1.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L43a100.  v1.`com.google.crypto.tink.PrimitiveSet.c` @type ^`java.lang.Class` := v2 @kind object;
  #L43a104.  return @kind void;
}
procedure `com.google.crypto.tink.PrimitiveSet` `newPrimitiveSet`(`java.lang.Class` v1 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.newPrimitiveSet:(Ljava/lang/Class;)Lcom/google/crypto/tink/PrimitiveSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L439f38.  v0:= new `com.google.crypto.tink.PrimitiveSet`;
  #L439f3c.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L439f42.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet$Entry` `addPrimitive`(`com.google.crypto.tink.PrimitiveSet` v8 @kind this, `java.lang.Object` v9 @kind object, `com.google.crypto.tink.proto.Keyset$Key` v10 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.addPrimitive:(Ljava/lang/Object;Lcom/google/crypto/tink/proto/Keyset$Key;)Lcom/google/crypto/tink/PrimitiveSet$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L439f54.  call temp:= `getStatus`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L439f5a.  v0:= temp @kind object;
  #L439f5c.  v1:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L439f60.  if v0 != v1 then goto L439ffc;
  #L439f64.  v0:= new `com.google.crypto.tink.PrimitiveSet$Entry`;
  #L439f68.  call temp:= `getOutputPrefix`(v10) @signature `Lcom/google/crypto/tink/CryptoFormat;.getOutputPrefix:(Lcom/google/crypto/tink/proto/Keyset$Key;)[B` @kind static;
  #L439f6e.  v4:= temp @kind object;
  #L439f70.  call temp:= `getStatus`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L439f76.  v5:= temp @kind object;
  #L439f78.  call temp:= `getOutputPrefixType`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getOutputPrefixType:()Lcom/google/crypto/tink/proto/OutputPrefixType;` @kind virtual;
  #L439f7e.  v6:= temp @kind object;
  #L439f80.  call temp:= `getKeyId`(v10) @signature `Lcom/google/crypto/tink/proto/Keyset$Key;.getKeyId:()I` @kind virtual;
  #L439f86.  v7:= temp;
  #L439f88.  v2:= v0 @kind object;
  #L439f8a.  v3:= v9 @kind object;
  #L439f8c.  call `<init>`(v2, v3, v4, v5, v6, v7) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.<init>:(Ljava/lang/Object;[BLcom/google/crypto/tink/proto/KeyStatusType;Lcom/google/crypto/tink/proto/OutputPrefixType;I)V` @kind direct;
  #L439f92.  v9:= new `java.util.ArrayList`;
  #L439f96.  call `<init>`(v9) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L439f9c.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L439fa2.  v10:= new `com.google.crypto.tink.PrimitiveSet$b`;
  #L439fa6.  call temp:= `getIdentifier`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L439fac.  v1:= temp @kind object;
  #L439fae.  v2:= 0I;
  #L439fb0.  call `<init>`(v10, v1, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$b;.<init>:([BLcom/google/crypto/tink/PrimitiveSet$a;)V` @kind direct;
  #L439fb6.  v1:= v8.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L439fba.  call temp:= `unmodifiableList`(v9) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L439fc0.  v9:= temp @kind object;
  #L439fc2.  call temp:= `put`(v1, v10, v9) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439fc8.  v9:= temp @kind object;
  #L439fca.  v9:= (`java.util.List`) v9 @kind object;
  #L439fce.  if v9 == 0 then goto L439ffa;
  #L439fd2.  v1:= new `java.util.ArrayList`;
  #L439fd6.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L439fdc.  call temp:= `addAll`(v1, v9) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L439fe2.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L439fe8.  v9:= v8.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L439fec.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L439ff2.  v1:= temp @kind object;
  #L439ff4.  call temp:= `put`(v9, v10, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L439ffa.  return v0 @kind object;
  #L439ffc.  v9:= new `java.security.GeneralSecurityException`;
  #L43a000.  v10:= "only ENABLED key is allowed" @kind object;
  #L43a004.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a00a.  throw v9;
}
procedure `java.util.Collection` `getAll`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getAll:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a04c.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43a050.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentMap;.values:()Ljava/util/Collection;` @kind interface;
  #L43a056.  v0:= temp @kind object;
  #L43a058.  return v0 @kind object;
}
procedure `com.google.crypto.tink.PrimitiveSet$Entry` `getPrimary`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimary:()Lcom/google/crypto/tink/PrimitiveSet$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a01c.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.b` @type ^`com.google.crypto.tink.PrimitiveSet$Entry` @kind object;
  #L43a020.  return v0 @kind object;
}
procedure `java.util.List` `getPrimitive`(`com.google.crypto.tink.PrimitiveSet` v0 @kind this, `com.google.crypto.tink.proto.Keyset$Key` v1 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:(Lcom/google/crypto/tink/proto/Keyset$Key;)Ljava/util/List;` @AccessFlag PROTECTED {
    temp;

  #L43a0a8.  call temp:= `getOutputPrefix`(v1) @signature `Lcom/google/crypto/tink/CryptoFormat;.getOutputPrefix:(Lcom/google/crypto/tink/proto/Keyset$Key;)[B` @kind static;
  #L43a0ae.  v1:= temp @kind object;
  #L43a0b0.  call temp:= `getPrimitive`(v0, v1) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L43a0b6.  v1:= temp @kind object;
  #L43a0b8.  return v1 @kind object;
}
procedure `java.util.List` `getPrimitive`(`com.google.crypto.tink.PrimitiveSet` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43a06c.  v0:= v3.`com.google.crypto.tink.PrimitiveSet.a` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L43a070.  v1:= new `com.google.crypto.tink.PrimitiveSet$b`;
  #L43a074.  v2:= 0I;
  #L43a076.  call `<init>`(v1, v4, v2) @signature `Lcom/google/crypto/tink/PrimitiveSet$b;.<init>:([BLcom/google/crypto/tink/PrimitiveSet$a;)V` @kind direct;
  #L43a07c.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43a082.  v4:= temp @kind object;
  #L43a084.  v4:= (`java.util.List`) v4 @kind object;
  #L43a088.  if v4 == 0 then goto L43a08e;
  #L43a08c.  goto L43a096;
  #L43a08e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L43a094.  v4:= temp @kind object;
  #L43a096.  return v4 @kind object;
}
procedure `java.lang.Class` `getPrimitiveClass`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitiveClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a034.  v0:= v1.`com.google.crypto.tink.PrimitiveSet.c` @type ^`java.lang.Class` @kind object;
  #L43a038.  return v0 @kind object;
}
procedure `java.util.List` `getRawPrimitives`(`com.google.crypto.tink.PrimitiveSet` v1 @kind this) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a0cc.  v0:= `@@com.google.crypto.tink.CryptoFormat.RAW_PREFIX` @type ^`byte`[] @kind object;
  #L43a0d0.  call temp:= `getPrimitive`(v1, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L43a0d6.  v0:= temp @kind object;
  #L43a0d8.  return v0 @kind object;
}
procedure `void` `setPrimary`(`com.google.crypto.tink.PrimitiveSet` v2 @kind this, `com.google.crypto.tink.PrimitiveSet$Entry` v3 @kind object) @signature `Lcom/google/crypto/tink/PrimitiveSet;.setPrimary:(Lcom/google/crypto/tink/PrimitiveSet$Entry;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a118.  if v3 == 0 then goto L43a16e;
  #L43a11c.  call temp:= `getStatus`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getStatus:()Lcom/google/crypto/tink/proto/KeyStatusType;` @kind virtual;
  #L43a122.  v0:= temp @kind object;
  #L43a124.  v1:= `@@com.google.crypto.tink.proto.KeyStatusType.ENABLED` @type ^`com.google.crypto.tink.proto.KeyStatusType` @kind object;
  #L43a128.  if v0 != v1 then goto L43a15e;
  #L43a12c.  call temp:= `getIdentifier`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getIdentifier:()[B` @kind virtual;
  #L43a132.  v0:= temp @kind object;
  #L43a134.  call temp:= `getPrimitive`(v2, v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getPrimitive:([B)Ljava/util/List;` @kind virtual;
  #L43a13a.  v0:= temp @kind object;
  #L43a13c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L43a142.  v0:= temp;
  #L43a144.  if v0 != 0 then goto L43a14e;
  #L43a148.  v2.`com.google.crypto.tink.PrimitiveSet.b` @type ^`com.google.crypto.tink.PrimitiveSet$Entry` := v3 @kind object;
  #L43a14c.  return @kind void;
  #L43a14e.  v3:= new `java.lang.IllegalArgumentException`;
  #L43a152.  v0:= "the primary entry cannot be set to an entry which is not held by this primitive set" @kind object;
  #L43a156.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a15c.  throw v3;
  #L43a15e.  v3:= new `java.lang.IllegalArgumentException`;
  #L43a162.  v0:= "the primary entry has to be ENABLED" @kind object;
  #L43a166.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a16c.  throw v3;
  #L43a16e.  v3:= new `java.lang.IllegalArgumentException`;
  #L43a172.  v0:= "the primary entry must be non-null" @kind object;
  #L43a176.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43a17c.  throw v3;
}
