record `com.dbbl.rocket.api.core.codec.binary.Base64` @kind class @AccessFlag PUBLIC extends `com.dbbl.rocket.api.core.codec.binary.BaseNCodec` @kind class {
  `byte`[] `com.dbbl.rocket.api.core.codec.binary.Base64.d` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.dbbl.rocket.api.core.codec.binary.Base64.e` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.dbbl.rocket.api.core.codec.binary.Base64.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.dbbl.rocket.api.core.codec.binary.Base64.g` @AccessFlag PRIVATE_FINAL;
  `int` `com.dbbl.rocket.api.core.codec.binary.Base64.h` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.dbbl.rocket.api.core.codec.binary.Base64.i` @AccessFlag STATIC_FINAL;
global `byte`[] `@@com.dbbl.rocket.api.core.codec.binary.Base64.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.dbbl.rocket.api.core.codec.binary.Base64.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.dbbl.rocket.api.core.codec.binary.Base64.l` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L434f18.  v0:= 2I;
  #L434f1a.  v0:= new `byte`[v0];
  #L434f1e.  goto L434f5c;
  #L434f24.  `@@com.dbbl.rocket.api.core.codec.binary.Base64.i` @type ^`byte`[] := v0 @kind object;
  #L434f28.  v0:= 64I;
  #L434f2c.  v1:= new `byte`[v0];
  #L434f30.  goto L434f68;
  #L434f36.  `@@com.dbbl.rocket.api.core.codec.binary.Base64.j` @type ^`byte`[] := v1 @kind object;
  #L434f3a.  v0:= new `byte`[v0];
  #L434f3e.  goto L434fb0;
  #L434f44.  `@@com.dbbl.rocket.api.core.codec.binary.Base64.k` @type ^`byte`[] := v0 @kind object;
  #L434f48.  v0:= 123I;
  #L434f4c.  v0:= new `byte`[v0];
  #L434f50.  goto L434ff8;
  #L434f56.  `@@com.dbbl.rocket.api.core.codec.binary.Base64.l` @type ^`byte`[] := v0 @kind object;
  #L434f5a.  return @kind void;
  #L434f5c.  v0:= (13I, 10I) @kind object;
  #L434f65.  goto L434f24;
  #L434f66.  
  #L434f68.  v1:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L434faf.  goto L434f36;
  #L434fb0.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L434ff7.  goto L434f44;
  #L434ff8.  v0:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, 62I, -1I, 63I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, 63I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I) @kind object;
  #L43507b.  goto L434f56;
}
procedure `void` `<init>`(`com.dbbl.rocket.api.core.codec.binary.Base64` v1 @kind this) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43508c.  v0:= 0I;
  #L43508e.  call `<init>`(v1, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I)V` @kind direct;
  #L435094.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.rocket.api.core.codec.binary.Base64` v1 @kind this, `int` v2 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4350c8.  v0:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.i` @type ^`byte`[] @kind object;
  #L4350cc.  call `<init>`(v1, v2, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[B)V` @kind direct;
  #L4350d2.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.rocket.api.core.codec.binary.Base64` v1 @kind this, `int` v2 , `byte`[] v3 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4350e4.  v0:= 0I;
  #L4350e6.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[BZ)V` @kind direct;
  #L4350ec.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.rocket.api.core.codec.binary.Base64` v4 @kind this, `int` v5 , `byte`[] v6 @kind object, `boolean` v7 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[BZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L435100.  v0:= 0I;
  #L435102.  if v6 != 0 then goto L43510a;
  #L435106.  v1:= 0I;
  #L435108.  goto L43510c;
  #L43510a.  v1:= length @variable v6;
  #L43510c.  v2:= 3I;
  #L43510e.  v3:= 4I;
  #L435110.  call `<init>`(v4, v2, v3, v5, v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.<init>:(IIII)V` @kind direct;
  #L435116.  v1:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.l` @type ^`byte`[] @kind object;
  #L43511a.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.e` @type ^`byte`[] := v1 @kind object;
  #L43511e.  v1:= 0I;
  #L435120.  if v6 == 0 then goto L43519a;
  #L435124.  call temp:= `containsAlphabetOrPad`(v4, v6) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.containsAlphabetOrPad:([B)Z` @kind virtual;
  #L43512a.  v2:= temp;
  #L43512c.  if v2 != 0 then goto L43515a;
  #L435130.  if v5 <= 0 then goto L435150;
  #L435134.  v5:= length @variable v6;
  #L435136.  v5:= v5 + v3 @kind int;
  #L435138.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int` := v5;
  #L43513c.  v5:= length @variable v6;
  #L43513e.  v5:= new `byte`[v5];
  #L435142.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] := v5 @kind object;
  #L435146.  v1:= length @variable v6;
  #L435148.  call `arraycopy`(v6, v0, v5, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L43514e.  goto L4351a2;
  #L435150.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int` := v3;
  #L435154.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] := v1 @kind object;
  #L435158.  goto L4351a2;
  #L43515a.  call temp:= `newStringUtf8`(v6) @signature `Lcom/dbbl/rocket/api/core/codec/binary/StringUtils;.newStringUtf8:([B)Ljava/lang/String;` @kind static;
  #L435160.  v5:= temp @kind object;
  #L435162.  v6:= new `java.lang.IllegalArgumentException`;
  #L435166.  v7:= new `java.lang.StringBuilder`;
  #L43516a.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L435170.  v0:= "lineSeparator must not contain base64 characters: [" @kind object;
  #L435174.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43517a.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L435180.  v5:= "]" @kind object;
  #L435184.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43518a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L435190.  v5:= temp @kind object;
  #L435192.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L435198.  throw v6;
  #L43519a.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int` := v3;
  #L43519e.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] := v1 @kind object;
  #L4351a2.  v5:= v4.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int`;
  #L4351a6.  v5:= v5 + -1;
  #L4351aa.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.g` @type ^`int` := v5;
  #L4351ae.  if v7 == 0 then goto L4351b8;
  #L4351b2.  v5:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.k` @type ^`byte`[] @kind object;
  #L4351b6.  goto L4351bc;
  #L4351b8.  v5:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.j` @type ^`byte`[] @kind object;
  #L4351bc.  v4.`com.dbbl.rocket.api.core.codec.binary.Base64.d` @type ^`byte`[] := v5 @kind object;
  #L4351c0.  return @kind void;
}
procedure `void` `<init>`(`com.dbbl.rocket.api.core.codec.binary.Base64` v2 @kind this, `boolean` v3 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4350a8.  v0:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.i` @type ^`byte`[] @kind object;
  #L4350ac.  v1:= 76I;
  #L4350b0.  call `<init>`(v2, v1, v0, v3) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[BZ)V` @kind direct;
  #L4350b6.  return @kind void;
}
procedure `byte`[] `decodeBase64`(`java.lang.String` v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.decodeBase64:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434c9c.  v0:= new `com.dbbl.rocket.api.core.codec.binary.Base64`;
  #L434ca0.  call `<init>`(v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:()V` @kind direct;
  #L434ca6.  call temp:= `decode`(v0, v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.decode:(Ljava/lang/String;)[B` @kind virtual;
  #L434cac.  v1:= temp @kind object;
  #L434cae.  return v1 @kind object;
}
procedure `byte`[] `decodeBase64`(`byte`[] v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.decodeBase64:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434c78.  v0:= new `com.dbbl.rocket.api.core.codec.binary.Base64`;
  #L434c7c.  call `<init>`(v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:()V` @kind direct;
  #L434c82.  call temp:= `decode`(v0, v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.decode:([B)[B` @kind virtual;
  #L434c88.  v1:= temp @kind object;
  #L434c8a.  return v1 @kind object;
}
procedure `java.math.BigInteger` `decodeInteger`(`byte`[] v2 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.decodeInteger:([B)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L434ef0.  v0:= new `java.math.BigInteger`;
  #L434ef4.  call temp:= `decodeBase64`(v2) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.decodeBase64:([B)[B` @kind static;
  #L434efa.  v2:= temp @kind object;
  #L434efc.  v1:= 1I;
  #L434efe.  call `<init>`(v0, v1, v2) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L434f04.  return v0 @kind object;
}
procedure `byte`[] `encodeBase64`(`byte`[] v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434cc0.  v0:= 0I;
  #L434cc2.  call temp:= `encodeBase64`(v1, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZ)[B` @kind static;
  #L434cc8.  v1:= temp @kind object;
  #L434cca.  return v1 @kind object;
}
procedure `byte`[] `encodeBase64`(`byte`[] v1 @kind object, `boolean` v2 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZ)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434cdc.  v0:= 0I;
  #L434cde.  call temp:= `encodeBase64`(v1, v2, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZ)[B` @kind static;
  #L434ce4.  v1:= temp @kind object;
  #L434ce6.  return v1 @kind object;
}
procedure `byte`[] `encodeBase64`(`byte`[] v1 @kind object, `boolean` v2 , `boolean` v3 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZ)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434cf8.  v0:= 2147483647I;
  #L434cfe.  call temp:= `encodeBase64`(v1, v2, v3, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZI)[B` @kind static;
  #L434d04.  v1:= temp @kind object;
  #L434d06.  return v1 @kind object;
}
procedure `byte`[] `encodeBase64`(`byte`[] v4 @kind object, `boolean` v5 , `boolean` v6 , `int` v7 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434d18.  if v4 == 0 then goto L434d9e;
  #L434d1c.  v0:= length @variable v4;
  #L434d1e.  if v0 != 0 then goto L434d24;
  #L434d22.  goto L434d9e;
  #L434d24.  if v5 == 0 then goto L434d34;
  #L434d28.  v5:= new `com.dbbl.rocket.api.core.codec.binary.Base64`;
  #L434d2c.  call `<init>`(v5, v6) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(Z)V` @kind direct;
  #L434d32.  goto L434d44;
  #L434d34.  v5:= new `com.dbbl.rocket.api.core.codec.binary.Base64`;
  #L434d38.  v0:= 0I;
  #L434d3a.  v1:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.i` @type ^`byte`[] @kind object;
  #L434d3e.  call `<init>`(v5, v0, v1, v6) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.<init>:(I[BZ)V` @kind direct;
  #L434d44.  call temp:= `getEncodedLength`(v5, v4) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.getEncodedLength:([B)J` @kind virtual;
  #L434d4a.  v0:= temp @kind wide;
  #L434d4c.  v2:= (`long`) v7 @kind i2l;
  #L434d4e.  v6:= lcmp(v0, v2);
  #L434d52.  if v6 > 0 then goto L434d60;
  #L434d56.  call temp:= `encode`(v5, v4) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.encode:([B)[B` @kind virtual;
  #L434d5c.  v4:= temp @kind object;
  #L434d5e.  return v4 @kind object;
  #L434d60.  v4:= new `java.lang.IllegalArgumentException`;
  #L434d64.  v5:= new `java.lang.StringBuilder`;
  #L434d68.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L434d6e.  v6:= "Input array too big, the output array would be bigger (" @kind object;
  #L434d72.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L434d78.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L434d7e.  v6:= ") than the specified maximum size of " @kind object;
  #L434d82.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L434d88.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L434d8e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L434d94.  v5:= temp @kind object;
  #L434d96.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L434d9c.  throw v4;
  #L434d9e.  return v4 @kind object;
}
procedure `byte`[] `encodeBase64Chunked`(`byte`[] v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64Chunked:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434db0.  v0:= 1I;
  #L434db2.  call temp:= `encodeBase64`(v1, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZ)[B` @kind static;
  #L434db8.  v1:= temp @kind object;
  #L434dba.  return v1 @kind object;
}
procedure `java.lang.String` `encodeBase64String`(`byte`[] v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64String:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434ea4.  v0:= 0I;
  #L434ea6.  call temp:= `encodeBase64`(v1, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZ)[B` @kind static;
  #L434eac.  v1:= temp @kind object;
  #L434eae.  call temp:= `newStringUtf8`(v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/StringUtils;.newStringUtf8:([B)Ljava/lang/String;` @kind static;
  #L434eb4.  v1:= temp @kind object;
  #L434eb6.  return v1 @kind object;
}
procedure `byte`[] `encodeBase64URLSafe`(`byte`[] v2 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64URLSafe:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L434dcc.  v0:= 0I;
  #L434dce.  v1:= 1I;
  #L434dd0.  call temp:= `encodeBase64`(v2, v0, v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZ)[B` @kind static;
  #L434dd6.  v2:= temp @kind object;
  #L434dd8.  return v2 @kind object;
}
procedure `java.lang.String` `encodeBase64URLSafeString`(`byte`[] v2 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64URLSafeString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L434ec8.  v0:= 0I;
  #L434eca.  v1:= 1I;
  #L434ecc.  call temp:= `encodeBase64`(v2, v0, v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZZ)[B` @kind static;
  #L434ed2.  v2:= temp @kind object;
  #L434ed4.  call temp:= `newStringUtf8`(v2) @signature `Lcom/dbbl/rocket/api/core/codec/binary/StringUtils;.newStringUtf8:([B)Ljava/lang/String;` @kind static;
  #L434eda.  v2:= temp @kind object;
  #L434edc.  return v2 @kind object;
}
procedure `byte`[] `encodeInteger`(`java.math.BigInteger` v1 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeInteger:(Ljava/math/BigInteger;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L434dec.  v0:= "encodeInteger called with null parameter" @kind object;
  #L434df0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434df6.  call temp:= `f`(v1) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.f:(Ljava/math/BigInteger;)[B` @kind static;
  #L434dfc.  v1:= temp @kind object;
  #L434dfe.  v0:= 0I;
  #L434e00.  call temp:= `encodeBase64`(v1, v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.encodeBase64:([BZ)[B` @kind static;
  #L434e06.  v1:= temp @kind object;
  #L434e08.  return v1 @kind object;
}
procedure `byte`[] `f`(`java.math.BigInteger` v5 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.f:(Ljava/math/BigInteger;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L434e1c.  call temp:= `bitLength`(v5) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L434e22.  v0:= temp;
  #L434e24.  v0:= v0 + 7;
  #L434e28.  v0:= v0 ^> 3;
  #L434e2c.  v0:= v0 ^< 3;
  #L434e30.  call temp:= `toByteArray`(v5) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L434e36.  v1:= temp @kind object;
  #L434e38.  call temp:= `bitLength`(v5) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L434e3e.  v2:= temp;
  #L434e40.  v2:= v2 %% 8;
  #L434e44.  v3:= 1I;
  #L434e46.  if v2 == 0 then goto L434e62;
  #L434e4a.  call temp:= `bitLength`(v5) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L434e50.  v2:= temp;
  #L434e52.  v2:= v2 / 8;
  #L434e56.  v2:= v2 + v3 @kind int;
  #L434e58.  v4:= v0 / 8;
  #L434e5c.  if v2 != v4 then goto L434e62;
  #L434e60.  return v1 @kind object;
  #L434e62.  v2:= 0I;
  #L434e64.  v4:= length @variable v1;
  #L434e66.  call temp:= `bitLength`(v5) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L434e6c.  v5:= temp;
  #L434e6e.  v5:= v5 %% 8;
  #L434e72.  if v5 != 0 then goto L434e7c;
  #L434e76.  v4:= v4 + -1;
  #L434e7a.  goto L434e7e;
  #L434e7c.  v3:= 0I;
  #L434e7e.  v0:= v0 / 8;
  #L434e82.  v5:= v0 - v4 @kind int;
  #L434e86.  v0:= new `byte`[v0];
  #L434e8a.  call `arraycopy`(v1, v3, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L434e90.  return v0 @kind object;
}
procedure `boolean` `isArrayByteBase64`(`byte`[] v0 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isArrayByteBase64:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L434b60.  call temp:= `isBase64`(v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:([B)Z` @kind static;
  #L434b66.  v0:= temp;
  #L434b68.  return v0;
}
procedure `boolean` `isBase64`(`byte` v2 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:(B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L434b7c.  v0:= 61I;
  #L434b80.  if v2 == v0 then goto L434ba2;
  #L434b84.  if v2 < 0 then goto L434b9e;
  #L434b88.  v0:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.l` @type ^`byte`[] @kind object;
  #L434b8c.  v1:= length @variable v0;
  #L434b8e.  if v2 >= v1 then goto L434b9e;
  #L434b92.  v2:= v0[v2] @kind byte;
  #L434b96.  v0:= -1I;
  #L434b98.  if v2 == v0 then goto L434b9e;
  #L434b9c.  goto L434ba2;
  #L434b9e.  v2:= 0I;
  #L434ba0.  goto L434ba4;
  #L434ba2.  v2:= 1I;
  #L434ba4.  return v2;
}
procedure `boolean` `isBase64`(`java.lang.String` v0 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L434c00.  call temp:= `getBytesUtf8`(v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/StringUtils;.getBytesUtf8:(Ljava/lang/String;)[B` @kind static;
  #L434c06.  v0:= temp @kind object;
  #L434c08.  call temp:= `isBase64`(v0) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:([B)Z` @kind static;
  #L434c0e.  v0:= temp;
  #L434c10.  return v0;
}
procedure `boolean` `isBase64`(`byte`[] v3 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L434bb8.  v0:= 0I;
  #L434bba.  v1:= 0I;
  #L434bbc.  v2:= length @variable v3;
  #L434bbe.  if v1 >= v2 then goto L434bea;
  #L434bc2.  v2:= v3[v1] @kind byte;
  #L434bc6.  call temp:= `isBase64`(v2) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isBase64:(B)Z` @kind static;
  #L434bcc.  v2:= temp;
  #L434bce.  if v2 != 0 then goto L434be4;
  #L434bd2.  v2:= v3[v1] @kind byte;
  #L434bd6.  call temp:= `isWhiteSpace`(v2) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.isWhiteSpace:(B)Z` @kind static;
  #L434bdc.  v2:= temp;
  #L434bde.  if v2 != 0 then goto L434be4;
  #L434be2.  return v0;
  #L434be4.  v1:= v1 + 1;
  #L434be8.  goto L434bbc;
  #L434bea.  v3:= 1I;
  #L434bec.  return v3;
}
procedure `void` `b`(`com.dbbl.rocket.api.core.codec.binary.Base64` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 , `com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a` v11 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.b:([BIILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4351d4.  v0:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` @kind boolean;
  #L4351d8.  if v0 == 0 then goto L4351de;
  #L4351dc.  return @kind void;
  #L4351de.  v0:= 1I;
  #L4351e0.  if v10 >= 0 then goto L4351e8;
  #L4351e4.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4351e8.  v1:= 0I;
  #L4351ea.  if v1 >= v10 then goto L435290;
  #L4351ee.  v2:= v7.`com.dbbl.rocket.api.core.codec.binary.Base64.g` @type ^`int`;
  #L4351f2.  call temp:= `ensureBufferSize`(v7, v2, v11) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.ensureBufferSize:(ILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)[B` @kind virtual;
  #L4351f8.  v2:= temp @kind object;
  #L4351fa.  v3:= v9 + 1;
  #L4351fe.  v9:= v8[v9] @kind byte;
  #L435202.  v4:= 61I;
  #L435206.  if v9 != v4 then goto L435210;
  #L43520a.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43520e.  goto L435290;
  #L435210.  if v9 < 0 then goto L435288;
  #L435214.  v4:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.l` @type ^`byte`[] @kind object;
  #L435218.  v5:= length @variable v4;
  #L43521a.  if v9 >= v5 then goto L435288;
  #L43521e.  v9:= v4[v9] @kind byte;
  #L435222.  if v9 < 0 then goto L435288;
  #L435226.  v4:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L43522a.  v4:= v4 + v0 @kind int;
  #L43522c.  v4:= v4 %% 4;
  #L435230.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int` := v4;
  #L435234.  v5:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L435238.  v5:= v5 ^< 6;
  #L43523c.  v5:= v5 + v9 @kind int;
  #L43523e.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int` := v5;
  #L435242.  if v4 != 0 then goto L435288;
  #L435246.  v9:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L43524a.  v4:= v9 + 1;
  #L43524e.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v4;
  #L435252.  v6:= v5 ^> 16;
  #L435256.  v6:= v6 ^& 255;
  #L43525a.  v6:= (`byte`) v6 @kind i2b;
  #L43525c.  v2[v9]:= v6 @kind byte;
  #L435260.  v9:= v4 + 1;
  #L435264.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v9;
  #L435268.  v6:= v5 ^> 8;
  #L43526c.  v6:= v6 ^& 255;
  #L435270.  v6:= (`byte`) v6 @kind i2b;
  #L435272.  v2[v4]:= v6 @kind byte;
  #L435276.  v4:= v9 + 1;
  #L43527a.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v4;
  #L43527e.  v4:= v5 ^& 255;
  #L435282.  v4:= (`byte`) v4 @kind i2b;
  #L435284.  v2[v9]:= v4 @kind byte;
  #L435288.  v1:= v1 + 1;
  #L43528c.  v9:= v3;
  #L43528e.  goto L4351ea;
  #L435290.  v8:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` @kind boolean;
  #L435294.  if v8 == 0 then goto L43534c;
  #L435298.  v8:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L43529c.  if v8 == 0 then goto L43534c;
  #L4352a0.  v8:= v7.`com.dbbl.rocket.api.core.codec.binary.Base64.g` @type ^`int`;
  #L4352a4.  call temp:= `ensureBufferSize`(v7, v8, v11) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.ensureBufferSize:(ILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)[B` @kind virtual;
  #L4352aa.  v8:= temp @kind object;
  #L4352ac.  v9:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L4352b0.  if v9 == v0 then goto L43534c;
  #L4352b4.  v10:= 2I;
  #L4352b6.  if v9 == v10 then goto L43532a;
  #L4352ba.  v0:= 3I;
  #L4352bc.  if v9 != v0 then goto L4352f8;
  #L4352c0.  v9:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L4352c4.  v9:= v9 ^> v10 @kind int;
  #L4352c6.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int` := v9;
  #L4352ca.  v10:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L4352ce.  v0:= v10 + 1;
  #L4352d2.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v0;
  #L4352d6.  v1:= v9 ^> 8;
  #L4352da.  v1:= v1 ^& 255;
  #L4352de.  v1:= (`byte`) v1 @kind i2b;
  #L4352e0.  v8[v10]:= v1 @kind byte;
  #L4352e4.  v10:= v0 + 1;
  #L4352e8.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v10;
  #L4352ec.  v9:= v9 ^& 255;
  #L4352f0.  v9:= (`byte`) v9 @kind i2b;
  #L4352f2.  v8[v0]:= v9 @kind byte;
  #L4352f6.  goto L43534c;
  #L4352f8.  v8:= new `java.lang.IllegalStateException`;
  #L4352fc.  v9:= new `java.lang.StringBuilder`;
  #L435300.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L435306.  v10:= "Impossible modulus " @kind object;
  #L43530a.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L435310.  v10:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L435314.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43531a.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L435320.  v9:= temp @kind object;
  #L435322.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L435328.  throw v8;
  #L43532a.  v9:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L43532e.  v9:= v9 ^> 4;
  #L435332.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int` := v9;
  #L435336.  v10:= v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L43533a.  v0:= v10 + 1;
  #L43533e.  v11.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v0;
  #L435342.  v9:= v9 ^& 255;
  #L435346.  v9:= (`byte`) v9 @kind i2b;
  #L435348.  v8[v10]:= v9 @kind byte;
  #L43534c.  return @kind void;
}
procedure `void` `c`(`com.dbbl.rocket.api.core.codec.binary.Base64` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 , `com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a` v13 @kind object) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.c:([BIILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L435360.  v0:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` @kind boolean;
  #L435364.  if v0 == 0 then goto L43536a;
  #L435368.  return @kind void;
  #L43536a.  v0:= 0I;
  #L43536c.  v1:= 1I;
  #L43536e.  if v12 >= 0 then goto L4354da;
  #L435372.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.f` @type ^`boolean` := v1 @kind boolean;
  #L435376.  v10:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L43537a.  if v10 != 0 then goto L435388;
  #L43537e.  v10:= v9.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec.lineLength` @type ^`int`;
  #L435382.  if v10 != 0 then goto L435388;
  #L435386.  return @kind void;
  #L435388.  v10:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int`;
  #L43538c.  call temp:= `ensureBufferSize`(v9, v10, v13) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.ensureBufferSize:(ILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)[B` @kind virtual;
  #L435392.  v10:= temp @kind object;
  #L435394.  v11:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L435398.  v12:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L43539c.  if v12 == 0 then goto L43549e;
  #L4353a0.  v2:= 61I;
  #L4353a4.  if v12 == v1 then goto L435446;
  #L4353a8.  v1:= 2I;
  #L4353aa.  if v12 != v1 then goto L435414;
  #L4353ae.  v12:= v11 + 1;
  #L4353b2.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v12;
  #L4353b6.  v3:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.d` @type ^`byte`[] @kind object;
  #L4353ba.  v4:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L4353be.  v5:= v4 ^> 10;
  #L4353c2.  v5:= v5 ^& 63;
  #L4353c6.  v5:= v3[v5] @kind byte;
  #L4353ca.  v10[v11]:= v5 @kind byte;
  #L4353ce.  v5:= v12 + 1;
  #L4353d2.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v5;
  #L4353d6.  v6:= v4 ^> 4;
  #L4353da.  v6:= v6 ^& 63;
  #L4353de.  v6:= v3[v6] @kind byte;
  #L4353e2.  v10[v12]:= v6 @kind byte;
  #L4353e6.  v12:= v5 + 1;
  #L4353ea.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v12;
  #L4353ee.  v1:= v4 ^< 2;
  #L4353f2.  v1:= v1 ^& 63;
  #L4353f6.  v1:= v3[v1] @kind byte;
  #L4353fa.  v10[v5]:= v1 @kind byte;
  #L4353fe.  v1:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.j` @type ^`byte`[] @kind object;
  #L435402.  if v3 != v1 then goto L43549e;
  #L435406.  v1:= v12 + 1;
  #L43540a.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v1;
  #L43540e.  v10[v12]:= v2 @kind byte;
  #L435412.  goto L43549e;
  #L435414.  v10:= new `java.lang.IllegalStateException`;
  #L435418.  v11:= new `java.lang.StringBuilder`;
  #L43541c.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L435422.  v12:= "Impossible modulus " @kind object;
  #L435426.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43542c.  v12:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L435430.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L435436.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43543c.  v11:= temp @kind object;
  #L43543e.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L435444.  throw v10;
  #L435446.  v12:= v11 + 1;
  #L43544a.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v12;
  #L43544e.  v1:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.d` @type ^`byte`[] @kind object;
  #L435452.  v3:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L435456.  v4:= v3 ^> 2;
  #L43545a.  v4:= v4 ^& 63;
  #L43545e.  v4:= v1[v4] @kind byte;
  #L435462.  v10[v11]:= v4 @kind byte;
  #L435466.  v4:= v12 + 1;
  #L43546a.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v4;
  #L43546e.  v3:= v3 ^< 4;
  #L435472.  v3:= v3 ^& 63;
  #L435476.  v3:= v1[v3] @kind byte;
  #L43547a.  v10[v12]:= v3 @kind byte;
  #L43547e.  v12:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.j` @type ^`byte`[] @kind object;
  #L435482.  if v1 != v12 then goto L43549e;
  #L435486.  v12:= v4 + 1;
  #L43548a.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v12;
  #L43548e.  v10[v4]:= v2 @kind byte;
  #L435492.  v1:= v12 + 1;
  #L435496.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v1;
  #L43549a.  v10[v12]:= v2 @kind byte;
  #L43549e.  v12:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.g` @type ^`int`;
  #L4354a2.  v1:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L4354a6.  v11:= v1 - v11 @kind int;
  #L4354aa.  v12:= v12 + v11 @kind int;
  #L4354ac.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.g` @type ^`int` := v12;
  #L4354b0.  v11:= v9.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec.lineLength` @type ^`int`;
  #L4354b4.  if v11 <= 0 then goto L4355c0;
  #L4354b8.  if v12 <= 0 then goto L4355c0;
  #L4354bc.  v11:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] @kind object;
  #L4354c0.  v12:= length @variable v11;
  #L4354c2.  call `arraycopy`(v11, v0, v10, v1, v12) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4354c8.  v10:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L4354cc.  v11:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] @kind object;
  #L4354d0.  v11:= length @variable v11;
  #L4354d2.  v10:= v10 + v11 @kind int;
  #L4354d4.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v10;
  #L4354d8.  goto L4355c0;
  #L4354da.  v2:= 0I;
  #L4354dc.  if v2 >= v12 then goto L4355c0;
  #L4354e0.  v3:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.h` @type ^`int`;
  #L4354e4.  call temp:= `ensureBufferSize`(v9, v3, v13) @signature `Lcom/dbbl/rocket/api/core/codec/binary/BaseNCodec;.ensureBufferSize:(ILcom/dbbl/rocket/api/core/codec/binary/BaseNCodec$a;)[B` @kind virtual;
  #L4354ea.  v3:= temp @kind object;
  #L4354ec.  v4:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int`;
  #L4354f0.  v4:= v4 + v1 @kind int;
  #L4354f2.  v4:= v4 %% 3;
  #L4354f6.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.h` @type ^`int` := v4;
  #L4354fa.  v5:= v11 + 1;
  #L4354fe.  v11:= v10[v11] @kind byte;
  #L435502.  if v11 >= 0 then goto L43550a;
  #L435506.  v11:= v11 + 256;
  #L43550a.  v6:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int`;
  #L43550e.  v6:= v6 ^< 8;
  #L435512.  v6:= v6 + v11 @kind int;
  #L435514.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.a` @type ^`int` := v6;
  #L435518.  if v4 != 0 then goto L4355b8;
  #L43551c.  v11:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L435520.  v4:= v11 + 1;
  #L435524.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v4;
  #L435528.  v7:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.d` @type ^`byte`[] @kind object;
  #L43552c.  v8:= v6 ^> 18;
  #L435530.  v8:= v8 ^& 63;
  #L435534.  v8:= v7[v8] @kind byte;
  #L435538.  v3[v11]:= v8 @kind byte;
  #L43553c.  v11:= v4 + 1;
  #L435540.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v11;
  #L435544.  v8:= v6 ^> 12;
  #L435548.  v8:= v8 ^& 63;
  #L43554c.  v8:= v7[v8] @kind byte;
  #L435550.  v3[v4]:= v8 @kind byte;
  #L435554.  v4:= v11 + 1;
  #L435558.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v4;
  #L43555c.  v8:= v6 ^> 6;
  #L435560.  v8:= v8 ^& 63;
  #L435564.  v8:= v7[v8] @kind byte;
  #L435568.  v3[v11]:= v8 @kind byte;
  #L43556c.  v11:= v4 + 1;
  #L435570.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v11;
  #L435574.  v6:= v6 ^& 63;
  #L435578.  v6:= v7[v6] @kind byte;
  #L43557c.  v3[v4]:= v6 @kind byte;
  #L435580.  v4:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.g` @type ^`int`;
  #L435584.  v4:= v4 + 4;
  #L435588.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.g` @type ^`int` := v4;
  #L43558c.  v6:= v9.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec.lineLength` @type ^`int`;
  #L435590.  if v6 <= 0 then goto L4355b8;
  #L435594.  if v6 > v4 then goto L4355b8;
  #L435598.  v4:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] @kind object;
  #L43559c.  v6:= length @variable v4;
  #L43559e.  call `arraycopy`(v4, v0, v3, v11, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4355a4.  v11:= v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int`;
  #L4355a8.  v3:= v9.`com.dbbl.rocket.api.core.codec.binary.Base64.f` @type ^`byte`[] @kind object;
  #L4355ac.  v3:= length @variable v3;
  #L4355ae.  v11:= v11 + v3 @kind int;
  #L4355b0.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.d` @type ^`int` := v11;
  #L4355b4.  v13.`com.dbbl.rocket.api.core.codec.binary.BaseNCodec$a.g` @type ^`int` := v0;
  #L4355b8.  v2:= v2 + 1;
  #L4355bc.  v11:= v5;
  #L4355be.  goto L4354dc;
  #L4355c0.  return @kind void;
}
procedure `boolean` `isInAlphabet`(`com.dbbl.rocket.api.core.codec.binary.Base64` v2 @kind this, `byte` v3 ) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isInAlphabet:(B)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L434c24.  if v3 < 0 then goto L434c40;
  #L434c28.  v0:= v2.`com.dbbl.rocket.api.core.codec.binary.Base64.e` @type ^`byte`[] @kind object;
  #L434c2c.  v1:= length @variable v0;
  #L434c2e.  if v3 >= v1 then goto L434c40;
  #L434c32.  v3:= v0[v3] @kind byte;
  #L434c36.  v0:= -1I;
  #L434c38.  if v3 == v0 then goto L434c40;
  #L434c3c.  v3:= 1I;
  #L434c3e.  goto L434c42;
  #L434c40.  v3:= 0I;
  #L434c42.  return v3;
}
procedure `boolean` `isUrlSafe`(`com.dbbl.rocket.api.core.codec.binary.Base64` v2 @kind this) @signature `Lcom/dbbl/rocket/api/core/codec/binary/Base64;.isUrlSafe:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434c54.  v0:= v2.`com.dbbl.rocket.api.core.codec.binary.Base64.d` @type ^`byte`[] @kind object;
  #L434c58.  v1:= `@@com.dbbl.rocket.api.core.codec.binary.Base64.k` @type ^`byte`[] @kind object;
  #L434c5c.  if v0 != v1 then goto L434c64;
  #L434c60.  v0:= 1I;
  #L434c62.  goto L434c66;
  #L434c64.  v0:= 0I;
  #L434c66.  return v0;
}
