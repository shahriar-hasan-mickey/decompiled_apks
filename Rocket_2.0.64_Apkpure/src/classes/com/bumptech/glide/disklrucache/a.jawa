record `com.bumptech.glide.disklrucache.a` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.disklrucache.a.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.charset.Charset` `com.bumptech.glide.disklrucache.a.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.disklrucache.a.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.disklrucache.a.d` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.disklrucache.a.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.disklrucache.a` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d81a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d81a6.  if v2 == 0 then goto L3d81f4;
  #L3d81aa.  if v4 == 0 then goto L3d81f4;
  #L3d81ae.  if v3 < 0 then goto L3d81e4;
  #L3d81b2.  v0:= `@@com.bumptech.glide.disklrucache.b.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d81b6.  call temp:= `equals`(v4, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d81bc.  v0:= temp;
  #L3d81be.  if v0 == 0 then goto L3d81d4;
  #L3d81c2.  v1.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` := v2 @kind object;
  #L3d81c6.  v1.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` := v4 @kind object;
  #L3d81ca.  v2:= new `byte`[v3];
  #L3d81ce.  v1.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] := v2 @kind object;
  #L3d81d2.  return @kind void;
  #L3d81d4.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d81d8.  v3:= "Unsupported encoding" @kind object;
  #L3d81dc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d81e2.  throw v2;
  #L3d81e4.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d81e8.  v3:= "capacity <= 0" @kind object;
  #L3d81ec.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d81f2.  throw v2;
  #L3d81f4.  v2:= 0I;
  #L3d81f6.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.disklrucache.a` v1 @kind this, `java.io.InputStream` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d8208.  v0:= 8192I;
  #L3d820c.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/bumptech/glide/disklrucache/a;.<init>:(Ljava/io/InputStream;ILjava/nio/charset/Charset;)V` @kind direct;
  #L3d8212.  return @kind void;
}
procedure `java.nio.charset.Charset` `a`(`com.bumptech.glide.disklrucache.a` v0 @kind object) @signature `Lcom/bumptech/glide/disklrucache/a;.a:(Lcom/bumptech/glide/disklrucache/a;)Ljava/nio/charset/Charset;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3d8188.  v0:= v0.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` @kind object;
  #L3d818c.  return v0 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.disklrucache.a` v4 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d8268.  v0:= v4.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3d826c.  v1:= v4.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d8270.  v2:= length @variable v1;
  #L3d8272.  v3:= 0I;
  #L3d8274.  call temp:= `read`(v0, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3d827a.  v0:= temp;
  #L3d827c.  v1:= -1I;
  #L3d827e.  if v0 == v1 then goto L3d828c;
  #L3d8282.  v4.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v3;
  #L3d8286.  v4.`com.bumptech.glide.disklrucache.a.e` @type ^`int` := v0;
  #L3d828a.  return @kind void;
  #L3d828c.  v0:= new `java.io.EOFException`;
  #L3d8290.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d8296.  throw v0;
}
procedure `boolean` `c`(`com.bumptech.glide.disklrucache.a` v2 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d8034.  v0:= v2.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d8038.  v1:= -1I;
  #L3d803a.  if v0 != v1 then goto L3d8042;
  #L3d803e.  v0:= 1I;
  #L3d8040.  goto L3d8044;
  #L3d8042.  v0:= 0I;
  #L3d8044.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.disklrucache.a` v2 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d8224.  v0:= v2.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3d8228.  @monitorenter v0
  #L3d822a.  v1:= v2.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d822e.  if v1 == 0 then goto L3d8242;
  #L3d8232.  v1:= 0I;
  #L3d8234.  v2.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] := v1 @kind object;
  #L3d8238.  v1:= v2.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3d823c.  call `close`(v1) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3d8242.  @monitorexit v0
  #L3d8244.  return @kind void;
  #L3d8246.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d8248.  @monitorexit v0
  #L3d824a.  throw v1;
  catch `java.lang.Throwable` @[L3d822a..L3d824a] goto L3d8246;
}
procedure `java.lang.String` `d`(`com.bumptech.glide.disklrucache.a` v7 @kind this) @signature `Lcom/bumptech/glide/disklrucache/a;.d:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d8058.  v0:= v7.`com.bumptech.glide.disklrucache.a.a` @type ^`java.io.InputStream` @kind object;
  #L3d805c.  @monitorenter v0
  #L3d805e.  v1:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d8062.  if v1 == 0 then goto L3d8156;
  #L3d8066.  v1:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d806a.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d806e.  if v1 < v2 then goto L3d8078;
  #L3d8072.  call `b`(v7) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @kind direct;
  #L3d8078.  v1:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d807c.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d8080.  v3:= 10I;
  #L3d8084.  if v1 == v2 then goto L3d80da;
  #L3d8088.  v2:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d808c.  v4:= v2[v1] @kind byte;
  #L3d8090.  if v4 != v3 then goto L3d80d4;
  #L3d8094.  v3:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d8098.  if v1 == v3 then goto L3d80ae;
  #L3d809c.  v4:= v1 + -1;
  #L3d80a0.  v5:= v2[v4] @kind byte;
  #L3d80a4.  v6:= 13I;
  #L3d80a8.  if v5 != v6 then goto L3d80ae;
  #L3d80ac.  goto L3d80b0;
  #L3d80ae.  v4:= v1;
  #L3d80b0.  v5:= new `java.lang.String`;
  #L3d80b4.  v4:= v4 - v3 @kind int;
  #L3d80b6.  v6:= v7.`com.bumptech.glide.disklrucache.a.b` @type ^`java.nio.charset.Charset` @kind object;
  #L3d80ba.  call temp:= `name`(v6) @signature `Ljava/nio/charset/Charset;.name:()Ljava/lang/String;` @kind virtual;
  #L3d80c0.  v6:= temp @kind object;
  #L3d80c2.  call `<init>`(v5, v2, v3, v4, v6) @signature `Ljava/lang/String;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L3d80c8.  v1:= v1 + 1;
  #L3d80cc.  v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v1;
  #L3d80d0.  @monitorexit v0
  #L3d80d2.  return v5 @kind object;
  #L3d80d4.  v1:= v1 + 1;
  #L3d80d8.  goto L3d807c;
  #L3d80da.  v1:= new `com.bumptech.glide.disklrucache.a$a`;
  #L3d80de.  v2:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d80e2.  v4:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d80e6.  v2:= v2 - v4 @kind int;
  #L3d80e8.  v2:= v2 + 80;
  #L3d80ec.  call `<init>`(v1, v7, v2) @signature `Lcom/bumptech/glide/disklrucache/a$a;.<init>:(Lcom/bumptech/glide/disklrucache/a;I)V` @kind direct;
  #L3d80f2.  v2:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d80f6.  v4:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d80fa.  v5:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d80fe.  v5:= v5 - v4 @kind int;
  #L3d8100.  call `write`(v1, v2, v4, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3d8106.  v2:= -1I;
  #L3d8108.  v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int` := v2;
  #L3d810c.  call `b`(v7) @signature `Lcom/bumptech/glide/disklrucache/a;.b:()V` @kind direct;
  #L3d8112.  v2:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d8116.  v4:= v7.`com.bumptech.glide.disklrucache.a.e` @type ^`int`;
  #L3d811a.  if v2 == v4 then goto L3d80f2;
  #L3d811e.  v4:= v7.`com.bumptech.glide.disklrucache.a.c` @type ^`byte`[] @kind object;
  #L3d8122.  v5:= v4[v2] @kind byte;
  #L3d8126.  if v5 != v3 then goto L3d8150;
  #L3d812a.  v3:= v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int`;
  #L3d812e.  if v2 == v3 then goto L3d813c;
  #L3d8132.  v5:= v2 - v3 @kind int;
  #L3d8136.  call `write`(v1, v4, v3, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3d813c.  v2:= v2 + 1;
  #L3d8140.  v7.`com.bumptech.glide.disklrucache.a.d` @type ^`int` := v2;
  #L3d8144.  call temp:= `toString`(v1) @signature `Ljava/io/ByteArrayOutputStream;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d814a.  v1:= temp @kind object;
  #L3d814c.  @monitorexit v0
  #L3d814e.  return v1 @kind object;
  #L3d8150.  v2:= v2 + 1;
  #L3d8154.  goto L3d8116;
  #L3d8156.  v1:= new `java.io.IOException`;
  #L3d815a.  v2:= "LineReader is closed" @kind object;
  #L3d815e.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d8164.  throw v1;
  #L3d8166.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d8168.  @monitorexit v0
  #L3d816a.  throw v1;
  catch `java.lang.Throwable` @[L3d805e..L3d816a] goto L3d8166;
}
