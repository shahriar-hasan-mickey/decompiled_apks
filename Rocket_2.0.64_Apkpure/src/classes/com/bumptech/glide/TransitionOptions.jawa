record `com.bumptech.glide.TransitionOptions` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Cloneable` @kind interface {
  `com.bumptech.glide.request.transition.TransitionFactory` `com.bumptech.glide.TransitionOptions.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.TransitionOptions` v1 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d6524.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d652a.  call temp:= `getFactory`() @signature `Lcom/bumptech/glide/request/transition/NoTransition;.getFactory:()Lcom/bumptech/glide/request/transition/TransitionFactory;` @kind static;
  #L3d6530.  v0:= temp @kind object;
  #L3d6532.  v1.`com.bumptech.glide.TransitionOptions.a` @type ^`com.bumptech.glide.request.transition.TransitionFactory` := v0 @kind object;
  #L3d6536.  return @kind void;
}
procedure `com.bumptech.glide.TransitionOptions` `b`(`com.bumptech.glide.TransitionOptions` v0 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.b:()Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PRIVATE {
    temp;

  #L3d6468.  return v0 @kind object;
}
procedure `com.bumptech.glide.request.transition.TransitionFactory` `a`(`com.bumptech.glide.TransitionOptions` v1 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.a:()Lcom/bumptech/glide/request/transition/TransitionFactory;` @AccessFlag FINAL {
    temp;
    v0;

  #L3d64f0.  v0:= v1.`com.bumptech.glide.TransitionOptions.a` @type ^`com.bumptech.glide.request.transition.TransitionFactory` @kind object;
  #L3d64f4.  return v0 @kind object;
}
procedure `com.bumptech.glide.TransitionOptions` `clone`(`com.bumptech.glide.TransitionOptions` v2 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.clone:()Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d6408.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3d640e.  v0:= temp @kind object;
  #L3d6410.  v0:= (`com.bumptech.glide.TransitionOptions`) v0 @kind object;
  #L3d6414.  return v0 @kind object;
  #L3d6416.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L3d6418.  v1:= new `java.lang.RuntimeException`;
  #L3d641c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d6422.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L3d6408..L3d6414] goto L3d6416;
}
procedure `java.lang.Object` `clone`(`com.bumptech.glide.TransitionOptions` v1 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d6508.  call temp:= `clone`(v1) @signature `Lcom/bumptech/glide/TransitionOptions;.clone:()Lcom/bumptech/glide/TransitionOptions;` @kind virtual;
  #L3d650e.  v0:= temp @kind object;
  #L3d6510.  return v0 @kind object;
}
procedure `com.bumptech.glide.TransitionOptions` `dontTransition`(`com.bumptech.glide.TransitionOptions` v1 @kind this) @signature `Lcom/bumptech/glide/TransitionOptions;.dontTransition:()Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d6444.  call temp:= `getFactory`() @signature `Lcom/bumptech/glide/request/transition/NoTransition;.getFactory:()Lcom/bumptech/glide/request/transition/TransitionFactory;` @kind static;
  #L3d644a.  v0:= temp @kind object;
  #L3d644c.  call temp:= `transition`(v1, v0) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(Lcom/bumptech/glide/request/transition/TransitionFactory;)Lcom/bumptech/glide/TransitionOptions;` @kind virtual;
  #L3d6452.  v0:= temp @kind object;
  #L3d6454.  return v0 @kind object;
}
procedure `com.bumptech.glide.TransitionOptions` `transition`(`com.bumptech.glide.TransitionOptions` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(I)Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d64cc.  v0:= new `com.bumptech.glide.request.transition.ViewAnimationFactory`;
  #L3d64d0.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/request/transition/ViewAnimationFactory;.<init>:(I)V` @kind direct;
  #L3d64d6.  call temp:= `transition`(v1, v0) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(Lcom/bumptech/glide/request/transition/TransitionFactory;)Lcom/bumptech/glide/TransitionOptions;` @kind virtual;
  #L3d64dc.  v2:= temp @kind object;
  #L3d64de.  return v2 @kind object;
}
procedure `com.bumptech.glide.TransitionOptions` `transition`(`com.bumptech.glide.TransitionOptions` v0 @kind this, `com.bumptech.glide.request.transition.TransitionFactory` v1 @kind object) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(Lcom/bumptech/glide/request/transition/TransitionFactory;)Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L3d647c.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3d6482.  v1:= temp @kind object;
  #L3d6484.  v1:= (`com.bumptech.glide.request.transition.TransitionFactory`) v1 @kind object;
  #L3d6488.  v0.`com.bumptech.glide.TransitionOptions.a` @type ^`com.bumptech.glide.request.transition.TransitionFactory` := v1 @kind object;
  #L3d648c.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/TransitionOptions;.b:()Lcom/bumptech/glide/TransitionOptions;` @kind direct;
  #L3d6492.  v1:= temp @kind object;
  #L3d6494.  return v1 @kind object;
}
procedure `com.bumptech.glide.TransitionOptions` `transition`(`com.bumptech.glide.TransitionOptions` v1 @kind this, `com.bumptech.glide.request.transition.ViewPropertyTransition$Animator` v2 @kind object) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(Lcom/bumptech/glide/request/transition/ViewPropertyTransition$Animator;)Lcom/bumptech/glide/TransitionOptions;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d64a8.  v0:= new `com.bumptech.glide.request.transition.ViewPropertyAnimationFactory`;
  #L3d64ac.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/request/transition/ViewPropertyAnimationFactory;.<init>:(Lcom/bumptech/glide/request/transition/ViewPropertyTransition$Animator;)V` @kind direct;
  #L3d64b2.  call temp:= `transition`(v1, v0) @signature `Lcom/bumptech/glide/TransitionOptions;.transition:(Lcom/bumptech/glide/request/transition/TransitionFactory;)Lcom/bumptech/glide/TransitionOptions;` @kind virtual;
  #L3d64b8.  v2:= temp @kind object;
  #L3d64ba.  return v2 @kind object;
}
