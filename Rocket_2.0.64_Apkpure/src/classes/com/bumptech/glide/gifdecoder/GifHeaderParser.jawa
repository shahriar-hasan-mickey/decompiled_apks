record `com.bumptech.glide.gifdecoder.GifHeaderParser` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.bumptech.glide.gifdecoder.GifHeaderParser.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.bumptech.glide.gifdecoder.GifHeaderParser.b` @AccessFlag PRIVATE;
  `com.bumptech.glide.gifdecoder.GifHeader` `com.bumptech.glide.gifdecoder.GifHeaderParser.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.gifdecoder.GifHeaderParser.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d868c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d8692.  v0:= 256I;
  #L3d8696.  v0:= new `byte`[v0];
  #L3d869a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] := v0 @kind object;
  #L3d869e.  v0:= 0I;
  #L3d86a0.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v0;
  #L3d86a4.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d8434.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8438.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int`;
  #L3d843c.  if v0 == 0 then goto L3d8444;
  #L3d8440.  v0:= 1I;
  #L3d8442.  goto L3d8446;
  #L3d8444.  v0:= 0I;
  #L3d8446.  return v0;
}
procedure `int` `b`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d8578.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d857c.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L3d8582.  v0:= temp;
  #L3d8584.  v0:= v0 ^& 255;
  #L3d8588.  goto L3d8596;
  #L3d858a.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d858e.  v1:= 1I;
  #L3d8590.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3d8594.  v0:= 0I;
  #L3d8596.  return v0;
  catch `java.lang.Exception` @[L3d8578..L3d8584] goto L3d858a;
}
procedure `void` `c`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v8 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d86d4.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d86d8.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d86dc.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d86e2.  v1:= temp;
  #L3d86e4.  v0.`com.bumptech.glide.gifdecoder.a.a` @type ^`int` := v1;
  #L3d86e8.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d86ec.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d86f0.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d86f6.  v1:= temp;
  #L3d86f8.  v0.`com.bumptech.glide.gifdecoder.a.b` @type ^`int` := v1;
  #L3d86fc.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8700.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d8704.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d870a.  v1:= temp;
  #L3d870c.  v0.`com.bumptech.glide.gifdecoder.a.c` @type ^`int` := v1;
  #L3d8710.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8714.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d8718.  call temp:= `l`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d871e.  v1:= temp;
  #L3d8720.  v0.`com.bumptech.glide.gifdecoder.a.d` @type ^`int` := v1;
  #L3d8724.  call temp:= `b`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d872a.  v0:= temp;
  #L3d872c.  v1:= v0 ^& 128;
  #L3d8730.  v2:= 0I;
  #L3d8732.  v3:= 1I;
  #L3d8734.  if v1 == 0 then goto L3d873c;
  #L3d8738.  v1:= 1I;
  #L3d873a.  goto L3d873e;
  #L3d873c.  v1:= 0I;
  #L3d873e.  v4:= 2.0D;
  #L3d8742.  v6:= v0 ^& 7;
  #L3d8746.  v6:= v6 + v3 @kind int;
  #L3d8748.  v6:= (`double`) v6 @kind i2d;
  #L3d874a.  call temp:= `pow`(v4, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3d8750.  v4:= temp @kind wide;
  #L3d8752.  v4:= (`int`) v4 @kind d2i;
  #L3d8754.  v5:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8758.  v5:= v5.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d875c.  v0:= v0 ^& 64;
  #L3d8760.  if v0 == 0 then goto L3d8766;
  #L3d8764.  v2:= 1I;
  #L3d8766.  v5.`com.bumptech.glide.gifdecoder.a.e` @type ^`boolean` := v2 @kind boolean;
  #L3d876a.  if v1 == 0 then goto L3d877c;
  #L3d876e.  call temp:= `e`(v8, v4) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @kind direct;
  #L3d8774.  v0:= temp @kind object;
  #L3d8776.  v5.`com.bumptech.glide.gifdecoder.a.k` @type ^`int`[] := v0 @kind object;
  #L3d877a.  goto L3d8782;
  #L3d877c.  v0:= 0I;
  #L3d877e.  v5.`com.bumptech.glide.gifdecoder.a.k` @type ^`int`[] := v0 @kind object;
  #L3d8782.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8786.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d878a.  v1:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d878e.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3d8794.  v1:= temp;
  #L3d8796.  v0.`com.bumptech.glide.gifdecoder.a.j` @type ^`int` := v1;
  #L3d879a.  call `o`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.o:()V` @kind direct;
  #L3d87a0.  call temp:= `a`(v8) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d87a6.  v0:= temp;
  #L3d87a8.  if v0 == 0 then goto L3d87ae;
  #L3d87ac.  return @kind void;
  #L3d87ae.  v0:= v8.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d87b2.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3d87b6.  v1:= v1 + v3 @kind int;
  #L3d87b8.  v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int` := v1;
  #L3d87bc.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.e` @type ^`java.util.List` @kind object;
  #L3d87c0.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d87c4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3d87ca.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v6 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d87dc.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d87e2.  v0:= temp;
  #L3d87e4.  v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v0;
  #L3d87e8.  if v0 <= 0 then goto L3d8876;
  #L3d87ec.  v0:= 0I;
  #L3d87ee.  v1:= 0I;
  #L3d87f0.  v1:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3d87f4.  if v0 >= v1 then goto L3d8876;
  #L3d87f8.  v1:= v1 - v0 @kind int;
  #L3d87fa.  v2:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d87fe.  v3:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3d8802.  call temp:= `get`(v2, v3, v0, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d8808.  v0:= v0 + v1 @kind int;
  #L3d880a.  goto L3d87f0;
  #L3d880c.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L3d880e.  v3:= 3I;
  #L3d8810.  v4:= "GifHeaderParser" @kind object;
  #L3d8814.  call temp:= `isLoggable`(v4, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3d881a.  v3:= temp;
  #L3d881c.  if v3 == 0 then goto L3d886c;
  #L3d8820.  v3:= new `java.lang.StringBuilder`;
  #L3d8824.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d882a.  v5:= "Error Reading Block n: " @kind object;
  #L3d882e.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8834.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d883a.  v0:= " count: " @kind object;
  #L3d883e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8844.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d884a.  v0:= " blockSize: " @kind object;
  #L3d884e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8854.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3d8858.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d885e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d8864.  v0:= temp @kind object;
  #L3d8866.  call temp:= `d`(v4, v0, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3d886c.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8870.  v1:= 1I;
  #L3d8872.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3d8876.  return @kind void;
  catch `java.lang.Exception` @[L3d87f0..L3d8808] goto L3d880c;
}
procedure `int`[] `e`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v9 @kind this, `int` v10 ) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d85d8.  v0:= v10 * 3;
  #L3d85dc.  v0:= new `byte`[v0];
  #L3d85e0.  v1:= 0I;
  #L3d85e2.  v2:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d85e6.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d85ec.  v2:= 256I;
  #L3d85f0.  v1:= new `int`[v2];
  #L3d85f4.  v2:= 0I;
  #L3d85f6.  v3:= 0I;
  #L3d85f8.  if v2 >= v10 then goto L3d8668;
  #L3d85fc.  v4:= v3 + 1;
  #L3d8600.  v3:= v0[v3] @kind byte;
  #L3d8604.  v3:= v3 ^& 255;
  #L3d8608.  v5:= v4 + 1;
  #L3d860c.  v4:= v0[v4] @kind byte;
  #L3d8610.  v4:= v4 ^& 255;
  #L3d8614.  v6:= v5 + 1;
  #L3d8618.  v5:= v0[v5] @kind byte;
  #L3d861c.  v5:= v5 ^& 255;
  #L3d8620.  v7:= v2 + 1;
  #L3d8624.  v8:= -16777216I;
  #L3d8628.  v3:= v3 ^< 16;
  #L3d862c.  v3:= v3 ^| v8 @kind int;
  #L3d862e.  v4:= v4 ^< 8;
  #L3d8632.  v3:= v3 ^| v4 @kind int;
  #L3d8634.  v3:= v3 ^| v5 @kind int;
  #L3d8636.  v1[v2]:= v3;
  #L3d863a.  v3:= v6;
  #L3d863c.  v2:= v7;
  #L3d863e.  goto L3d85f8;
  #L3d8640.  v10:= Exception @type ^`java.nio.BufferUnderflowException` @kind object;
  #L3d8642.  v0:= "GifHeaderParser" @kind object;
  #L3d8646.  v2:= 3I;
  #L3d8648.  call temp:= `isLoggable`(v0, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3d864e.  v2:= temp;
  #L3d8650.  if v2 == 0 then goto L3d865e;
  #L3d8654.  v2:= "Format Error Reading Color Table" @kind object;
  #L3d8658.  call temp:= `d`(v0, v2, v10) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3d865e.  v10:= v9.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8662.  v0:= 1I;
  #L3d8664.  v10.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v0;
  #L3d8668.  return v1 @kind object;
  catch `java.nio.BufferUnderflowException` @[L3d85e2..L3d863a] goto L3d8640;
}
procedure `void` `f`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d8898.  v0:= 2147483647I;
  #L3d889e.  call `g`(v1, v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @kind direct;
  #L3d88a4.  return @kind void;
}
procedure `void` `g`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v5 @kind this, `int` v6 ) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d88b8.  v0:= 0I;
  #L3d88ba.  v1:= 0I;
  #L3d88bc.  if v1 != 0 then goto L3d89dc;
  #L3d88c0.  call temp:= `a`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d88c6.  v2:= temp;
  #L3d88c8.  if v2 != 0 then goto L3d89dc;
  #L3d88cc.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d88d0.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3d88d4.  if v2 > v6 then goto L3d89dc;
  #L3d88d8.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d88de.  v2:= temp;
  #L3d88e0.  v3:= 33I;
  #L3d88e4.  v4:= 1I;
  #L3d88e6.  if v2 == v3 then goto L3d892a;
  #L3d88ea.  v3:= 44I;
  #L3d88ee.  if v2 == v3 then goto L3d8908;
  #L3d88f2.  v3:= 59I;
  #L3d88f6.  if v2 == v3 then goto L3d8904;
  #L3d88fa.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d88fe.  v2.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v4;
  #L3d8902.  goto L3d88bc;
  #L3d8904.  v1:= 1I;
  #L3d8906.  goto L3d88bc;
  #L3d8908.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d890c.  v3:= v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d8910.  if v3 != 0 then goto L3d8922;
  #L3d8914.  v3:= new `com.bumptech.glide.gifdecoder.a`;
  #L3d8918.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/a;.<init>:()V` @kind direct;
  #L3d891e.  v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` := v3 @kind object;
  #L3d8922.  call `c`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.c:()V` @kind direct;
  #L3d8928.  goto L3d88bc;
  #L3d892a.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8930.  v2:= temp;
  #L3d8932.  if v2 == v4 then goto L3d89d2;
  #L3d8936.  v3:= 249I;
  #L3d893a.  if v2 == v3 then goto L3d89b6;
  #L3d893e.  v3:= 254I;
  #L3d8942.  if v2 == v3 then goto L3d89ae;
  #L3d8946.  v3:= 255I;
  #L3d894a.  if v2 == v3 then goto L3d8956;
  #L3d894e.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3d8954.  goto L3d88bc;
  #L3d8956.  call `d`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @kind direct;
  #L3d895c.  v2:= new `java.lang.StringBuilder`;
  #L3d8960.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d8966.  v3:= 0I;
  #L3d8968.  v4:= 11I;
  #L3d896c.  if v3 >= v4 then goto L3d8986;
  #L3d8970.  v4:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3d8974.  v4:= v4[v3] @kind byte;
  #L3d8978.  v4:= (`char`) v4 @kind i2c;
  #L3d897a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8980.  v3:= v3 + 1;
  #L3d8984.  goto L3d8968;
  #L3d8986.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d898c.  v2:= temp @kind object;
  #L3d898e.  v3:= "NETSCAPE2.0" @kind object;
  #L3d8992.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d8998.  v2:= temp;
  #L3d899a.  if v2 == 0 then goto L3d89a6;
  #L3d899e.  call `k`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.k:()V` @kind direct;
  #L3d89a4.  goto L3d88bc;
  #L3d89a6.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3d89ac.  goto L3d88bc;
  #L3d89ae.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3d89b4.  goto L3d88bc;
  #L3d89b6.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d89ba.  v3:= new `com.bumptech.glide.gifdecoder.a`;
  #L3d89be.  call `<init>`(v3) @signature `Lcom/bumptech/glide/gifdecoder/a;.<init>:()V` @kind direct;
  #L3d89c4.  v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` := v3 @kind object;
  #L3d89c8.  call `h`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.h:()V` @kind direct;
  #L3d89ce.  goto L3d88bc;
  #L3d89d2.  call `n`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3d89d8.  goto L3d88bc;
  #L3d89dc.  return @kind void;
}
procedure `void` `h`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v5 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d89f0.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d89f6.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d89fc.  v0:= temp;
  #L3d89fe.  v1:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8a02.  v1:= v1.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d8a06.  v2:= v0 ^& 28;
  #L3d8a0a.  v3:= 2I;
  #L3d8a0c.  v2:= v2 ^> v3 @kind int;
  #L3d8a0e.  v1.`com.bumptech.glide.gifdecoder.a.g` @type ^`int` := v2;
  #L3d8a12.  v4:= 1I;
  #L3d8a14.  if v2 != 0 then goto L3d8a1c;
  #L3d8a18.  v1.`com.bumptech.glide.gifdecoder.a.g` @type ^`int` := v4;
  #L3d8a1c.  v0:= v0 ^& v4 @kind int;
  #L3d8a1e.  if v0 == 0 then goto L3d8a24;
  #L3d8a22.  goto L3d8a26;
  #L3d8a24.  v4:= 0I;
  #L3d8a26.  v1.`com.bumptech.glide.gifdecoder.a.f` @type ^`boolean` := v4 @kind boolean;
  #L3d8a2a.  call temp:= `l`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d8a30.  v0:= temp;
  #L3d8a32.  v1:= 10I;
  #L3d8a36.  if v0 >= v3 then goto L3d8a3e;
  #L3d8a3a.  v0:= 10I;
  #L3d8a3e.  v2:= v5.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8a42.  v2:= v2.`com.bumptech.glide.gifdecoder.GifHeader.d` @type ^`com.bumptech.glide.gifdecoder.a` @kind object;
  #L3d8a46.  v0:= v0 * 10;
  #L3d8a4a.  v2.`com.bumptech.glide.gifdecoder.a.i` @type ^`int` := v0;
  #L3d8a4e.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8a54.  v0:= temp;
  #L3d8a56.  v2.`com.bumptech.glide.gifdecoder.a.h` @type ^`int` := v0;
  #L3d8a5a.  call temp:= `b`(v5) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8a60.  return @kind void;
}
procedure `void` `i`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d8a74.  v0:= new `java.lang.StringBuilder`;
  #L3d8a78.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d8a7e.  v1:= 0I;
  #L3d8a80.  v2:= 6I;
  #L3d8a82.  if v1 >= v2 then goto L3d8a9c;
  #L3d8a86.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8a8c.  v2:= temp;
  #L3d8a8e.  v2:= (`char`) v2 @kind i2c;
  #L3d8a90.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d8a96.  v1:= v1 + 1;
  #L3d8a9a.  goto L3d8a80;
  #L3d8a9c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d8aa2.  v0:= temp @kind object;
  #L3d8aa4.  v1:= "GIF" @kind object;
  #L3d8aa8.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3d8aae.  v0:= temp;
  #L3d8ab0.  if v0 != 0 then goto L3d8ac0;
  #L3d8ab4.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8ab8.  v1:= 1I;
  #L3d8aba.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3d8abe.  return @kind void;
  #L3d8ac0.  call `j`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.j:()V` @kind direct;
  #L3d8ac6.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8aca.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.h` @type ^`boolean` @kind boolean;
  #L3d8ace.  if v0 == 0 then goto L3d8b06;
  #L3d8ad2.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d8ad8.  v0:= temp;
  #L3d8ada.  if v0 != 0 then goto L3d8b06;
  #L3d8ade.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8ae2.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.i` @type ^`int`;
  #L3d8ae6.  call temp:= `e`(v3, v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.e:(I)[I` @kind direct;
  #L3d8aec.  v1:= temp @kind object;
  #L3d8aee.  v0.`com.bumptech.glide.gifdecoder.GifHeader.a` @type ^`int`[] := v1 @kind object;
  #L3d8af2.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8af6.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.a` @type ^`int`[] @kind object;
  #L3d8afa.  v2:= v0.`com.bumptech.glide.gifdecoder.GifHeader.j` @type ^`int`;
  #L3d8afe.  v1:= v1[v2];
  #L3d8b02.  v0.`com.bumptech.glide.gifdecoder.GifHeader.l` @type ^`int` := v1;
  #L3d8b06.  return @kind void;
}
procedure `void` `j`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v6 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d8b18.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8b1c.  call temp:= `l`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d8b22.  v1:= temp;
  #L3d8b24.  v0.`com.bumptech.glide.gifdecoder.GifHeader.f` @type ^`int` := v1;
  #L3d8b28.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8b2c.  call temp:= `l`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @kind direct;
  #L3d8b32.  v1:= temp;
  #L3d8b34.  v0.`com.bumptech.glide.gifdecoder.GifHeader.g` @type ^`int` := v1;
  #L3d8b38.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8b3e.  v0:= temp;
  #L3d8b40.  v1:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8b44.  v2:= v0 ^& 128;
  #L3d8b48.  v3:= 1I;
  #L3d8b4a.  if v2 == 0 then goto L3d8b52;
  #L3d8b4e.  v2:= 1I;
  #L3d8b50.  goto L3d8b54;
  #L3d8b52.  v2:= 0I;
  #L3d8b54.  v1.`com.bumptech.glide.gifdecoder.GifHeader.h` @type ^`boolean` := v2 @kind boolean;
  #L3d8b58.  v4:= 2.0D;
  #L3d8b5c.  v0:= v0 ^& 7;
  #L3d8b60.  v0:= v0 + v3 @kind int;
  #L3d8b62.  v2:= (`double`) v0 @kind i2d;
  #L3d8b64.  call temp:= `pow`(v4, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3d8b6a.  v2:= temp @kind wide;
  #L3d8b6c.  v0:= (`int`) v2 @kind d2i;
  #L3d8b6e.  v1.`com.bumptech.glide.gifdecoder.GifHeader.i` @type ^`int` := v0;
  #L3d8b72.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8b76.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8b7c.  v1:= temp;
  #L3d8b7e.  v0.`com.bumptech.glide.gifdecoder.GifHeader.j` @type ^`int` := v1;
  #L3d8b82.  v0:= v6.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8b86.  call temp:= `b`(v6) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8b8c.  v1:= temp;
  #L3d8b8e.  v0.`com.bumptech.glide.gifdecoder.GifHeader.k` @type ^`int` := v1;
  #L3d8b92.  return @kind void;
}
procedure `void` `k`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d8ba4.  call `d`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.d:()V` @kind direct;
  #L3d8baa.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3d8bae.  v1:= 0I;
  #L3d8bb0.  v1:= v0[v1] @kind byte;
  #L3d8bb4.  v2:= 1I;
  #L3d8bb6.  if v1 != v2 then goto L3d8bda;
  #L3d8bba.  v1:= v0[v2] @kind byte;
  #L3d8bbe.  v1:= v1 ^& 255;
  #L3d8bc2.  v2:= 2I;
  #L3d8bc4.  v0:= v0[v2] @kind byte;
  #L3d8bc8.  v0:= v0 ^& 255;
  #L3d8bcc.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8bd0.  v0:= v0 ^< 8;
  #L3d8bd4.  v0:= v0 ^| v1 @kind int;
  #L3d8bd6.  v2.`com.bumptech.glide.gifdecoder.GifHeader.m` @type ^`int` := v0;
  #L3d8bda.  v0:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int`;
  #L3d8bde.  if v0 <= 0 then goto L3d8bee;
  #L3d8be2.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d8be8.  v0:= temp;
  #L3d8bea.  if v0 == 0 then goto L3d8ba4;
  #L3d8bee.  return @kind void;
}
procedure `int` `l`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.l:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d85b8.  v0:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d85bc.  call temp:= `getShort`(v0) @signature `Ljava/nio/ByteBuffer;.getShort:()S` @kind virtual;
  #L3d85c2.  v0:= temp;
  #L3d85c4.  return v0;
}
procedure `void` `m`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d8c00.  v0:= 0I;
  #L3d8c02.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3d8c06.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.a` @type ^`byte`[] @kind object;
  #L3d8c0a.  v1:= 0I;
  #L3d8c0c.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L3d8c12.  v0:= new `com.bumptech.glide.gifdecoder.GifHeader`;
  #L3d8c16.  call `<init>`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeader;.<init>:()V` @kind direct;
  #L3d8c1c.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L3d8c20.  v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.d` @type ^`int` := v1;
  #L3d8c24.  return @kind void;
}
procedure `void` `n`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v3 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d8c38.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8c3e.  v0:= temp;
  #L3d8c40.  v1:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d8c44.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3d8c4a.  v1:= temp;
  #L3d8c4c.  v1:= v1 + v0 @kind int;
  #L3d8c4e.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d8c52.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3d8c58.  v2:= temp;
  #L3d8c5a.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d8c60.  v1:= temp;
  #L3d8c62.  v2:= v3.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d8c66.  call temp:= `position`(v2, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3d8c6c.  if v0 > 0 then goto L3d8c38;
  #L3d8c70.  return @kind void;
}
procedure `void` `o`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v0 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.o:()V` @AccessFlag PRIVATE {
    temp;

  #L3d8c84.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.b:()I` @kind direct;
  #L3d8c8a.  call `n`(v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.n:()V` @kind direct;
  #L3d8c90.  return @kind void;
}
procedure `void` `clear`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d86b8.  v0:= 0I;
  #L3d86ba.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L3d86be.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` := v0 @kind object;
  #L3d86c2.  return @kind void;
}
procedure `boolean` `isAnimated`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.isAnimated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d8458.  call `i`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @kind direct;
  #L3d845e.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d8464.  v0:= temp;
  #L3d8466.  if v0 != 0 then goto L3d8472;
  #L3d846a.  v0:= 2I;
  #L3d846c.  call `g`(v2, v0) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.g:(I)V` @kind direct;
  #L3d8472.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8476.  v0:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3d847a.  v1:= 1I;
  #L3d847c.  if v0 <= v1 then goto L3d8482;
  #L3d8480.  goto L3d8484;
  #L3d8482.  v1:= 0I;
  #L3d8484.  return v1;
}
procedure `com.bumptech.glide.gifdecoder.GifHeader` `parseHeader`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v2 @kind this) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.parseHeader:()Lcom/bumptech/glide/gifdecoder/GifHeader;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d8498.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d849c.  if v0 == 0 then goto L3d84e2;
  #L3d84a0.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d84a6.  v0:= temp;
  #L3d84a8.  if v0 == 0 then goto L3d84b2;
  #L3d84ac.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d84b0.  return v0 @kind object;
  #L3d84b2.  call `i`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.i:()V` @kind direct;
  #L3d84b8.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.a:()Z` @kind direct;
  #L3d84be.  v0:= temp;
  #L3d84c0.  if v0 != 0 then goto L3d84dc;
  #L3d84c4.  call `f`(v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.f:()V` @kind direct;
  #L3d84ca.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d84ce.  v1:= v0.`com.bumptech.glide.gifdecoder.GifHeader.c` @type ^`int`;
  #L3d84d2.  if v1 >= 0 then goto L3d84dc;
  #L3d84d6.  v1:= 1I;
  #L3d84d8.  v0.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v1;
  #L3d84dc.  v0:= v2.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d84e0.  return v0 @kind object;
  #L3d84e2.  v0:= new `java.lang.IllegalStateException`;
  #L3d84e6.  v1:= "You must call setData() before parseHeader()" @kind object;
  #L3d84ea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d84f0.  throw v0;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `setData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d853c.  call `m`(v1) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.m:()V` @kind direct;
  #L3d8542.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d8548.  v2:= temp @kind object;
  #L3d854a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3d854e.  v0:= 0I;
  #L3d8550.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3d8556.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L3d855a.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L3d855e.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d8564.  return v1 @kind object;
}
procedure `com.bumptech.glide.gifdecoder.GifHeaderParser` `setData`(`com.bumptech.glide.gifdecoder.GifHeaderParser` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:([B)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8504.  if v2 == 0 then goto L3d8518;
  #L3d8508.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L3d850e.  v2:= temp @kind object;
  #L3d8510.  call temp:= `setData`(v1, v2) @signature `Lcom/bumptech/glide/gifdecoder/GifHeaderParser;.setData:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/gifdecoder/GifHeaderParser;` @kind virtual;
  #L3d8516.  goto L3d8528;
  #L3d8518.  v2:= 0I;
  #L3d851a.  v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3d851e.  v2:= v1.`com.bumptech.glide.gifdecoder.GifHeaderParser.c` @type ^`com.bumptech.glide.gifdecoder.GifHeader` @kind object;
  #L3d8522.  v0:= 2I;
  #L3d8524.  v2.`com.bumptech.glide.gifdecoder.GifHeader.b` @type ^`int` := v0;
  #L3d8528.  return v1 @kind object;
}
