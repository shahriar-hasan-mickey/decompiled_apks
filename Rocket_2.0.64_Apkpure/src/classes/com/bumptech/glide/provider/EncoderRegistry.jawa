record `com.bumptech.glide.provider.EncoderRegistry` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.provider.EncoderRegistry.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.provider.EncoderRegistry` v1 @kind this) @signature `Lcom/bumptech/glide/provider/EncoderRegistry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f688c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f6892.  v0:= new `java.util.ArrayList`;
  #L3f6896.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f689c.  v1.`com.bumptech.glide.provider.EncoderRegistry.a` @type ^`java.util.List` := v0 @kind object;
  #L3f68a0.  return @kind void;
}
procedure `void` `append`(`com.bumptech.glide.provider.EncoderRegistry` v2 @kind this, `java.lang.Class` v3 @kind object, `com.bumptech.glide.load.Encoder` v4 @kind object) @signature `Lcom/bumptech/glide/provider/EncoderRegistry;.append:(Ljava/lang/Class;Lcom/bumptech/glide/load/Encoder;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f68b4.  @monitorenter v2
  #L3f68b6.  v0:= v2.`com.bumptech.glide.provider.EncoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f68ba.  v1:= new `com.bumptech.glide.provider.EncoderRegistry$a`;
  #L3f68be.  call `<init>`(v1, v3, v4) @signature `Lcom/bumptech/glide/provider/EncoderRegistry$a;.<init>:(Ljava/lang/Class;Lcom/bumptech/glide/load/Encoder;)V` @kind direct;
  #L3f68c4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f68ca.  @monitorexit v2
  #L3f68cc.  return @kind void;
  #L3f68ce.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f68d0.  @monitorexit v2
  #L3f68d2.  throw v3;
  catch `java.lang.Throwable` @[L3f68b6..L3f68ca] goto L3f68ce;
}
procedure `com.bumptech.glide.load.Encoder` `getEncoder`(`com.bumptech.glide.provider.EncoderRegistry` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/bumptech/glide/provider/EncoderRegistry;.getEncoder:(Ljava/lang/Class;)Lcom/bumptech/glide/load/Encoder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6828.  @monitorenter v3
  #L3f682a.  v0:= v3.`com.bumptech.glide.provider.EncoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f682e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f6834.  v0:= temp @kind object;
  #L3f6836.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f683c.  v1:= temp;
  #L3f683e.  if v1 == 0 then goto L3f6862;
  #L3f6842.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f6848.  v1:= temp @kind object;
  #L3f684a.  v1:= (`com.bumptech.glide.provider.EncoderRegistry$a`) v1 @kind object;
  #L3f684e.  call temp:= `a`(v1, v4) @signature `Lcom/bumptech/glide/provider/EncoderRegistry$a;.a:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f6854.  v2:= temp;
  #L3f6856.  if v2 == 0 then goto L3f6836;
  #L3f685a.  v4:= v1.`com.bumptech.glide.provider.EncoderRegistry$a.b` @type ^`com.bumptech.glide.load.Encoder` @kind object;
  #L3f685e.  @monitorexit v3
  #L3f6860.  return v4 @kind object;
  #L3f6862.  v4:= 0I;
  #L3f6864.  @monitorexit v3
  #L3f6866.  return v4 @kind object;
  #L3f6868.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f686a.  @monitorexit v3
  #L3f686c.  throw v4;
  catch `java.lang.Throwable` @[L3f682a..L3f685e] goto L3f6868;
}
procedure `void` `prepend`(`com.bumptech.glide.provider.EncoderRegistry` v3 @kind this, `java.lang.Class` v4 @kind object, `com.bumptech.glide.load.Encoder` v5 @kind object) @signature `Lcom/bumptech/glide/provider/EncoderRegistry;.prepend:(Ljava/lang/Class;Lcom/bumptech/glide/load/Encoder;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f68f0.  @monitorenter v3
  #L3f68f2.  v0:= v3.`com.bumptech.glide.provider.EncoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f68f6.  v1:= 0I;
  #L3f68f8.  v2:= new `com.bumptech.glide.provider.EncoderRegistry$a`;
  #L3f68fc.  call `<init>`(v2, v4, v5) @signature `Lcom/bumptech/glide/provider/EncoderRegistry$a;.<init>:(Ljava/lang/Class;Lcom/bumptech/glide/load/Encoder;)V` @kind direct;
  #L3f6902.  call `add`(v0, v1, v2) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L3f6908.  @monitorexit v3
  #L3f690a.  return @kind void;
  #L3f690c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f690e.  @monitorexit v3
  #L3f6910.  throw v4;
  catch `java.lang.Throwable` @[L3f68f2..L3f6908] goto L3f690c;
}
