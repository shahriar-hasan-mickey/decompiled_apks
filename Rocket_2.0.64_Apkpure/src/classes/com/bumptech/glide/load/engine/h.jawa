record `com.bumptech.glide.load.engine.h` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.g$b` @kind interface, `com.bumptech.glide.util.pool.FactoryPools$Poolable` @kind interface {
  `com.bumptech.glide.load.engine.h$e` `com.bumptech.glide.load.engine.h.a` @AccessFlag FINAL;
  `com.bumptech.glide.util.pool.StateVerifier` `com.bumptech.glide.load.engine.h.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.l$a` `com.bumptech.glide.load.engine.h.c` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.engine.h.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.h$c` `com.bumptech.glide.load.engine.h.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.i` `com.bumptech.glide.load.engine.h.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.h` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.i` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor` `com.bumptech.glide.load.engine.h.j` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `com.bumptech.glide.load.engine.h.k` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.h.l` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.m` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.n` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.o` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.p` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.Resource` `com.bumptech.glide.load.engine.h.q` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.DataSource` `com.bumptech.glide.load.engine.h.r` @AccessFlag ;
  `boolean` `com.bumptech.glide.load.engine.h.s` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.GlideException` `com.bumptech.glide.load.engine.h.t` @AccessFlag ;
  `boolean` `com.bumptech.glide.load.engine.h.u` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.l` `com.bumptech.glide.load.engine.h.v` @AccessFlag ;
  `com.bumptech.glide.load.engine.g` `com.bumptech.glide.load.engine.h.w` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.h.x` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.h.y` @AccessFlag PRIVATE;
}
global `com.bumptech.glide.load.engine.h$c` `@@com.bumptech.glide.load.engine.h.z` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dfa80.  v0:= new `com.bumptech.glide.load.engine.h$c`;
  #L3dfa84.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$c;.<init>:()V` @kind direct;
  #L3dfa8a.  `@@com.bumptech.glide.load.engine.h.z` @type ^`com.bumptech.glide.load.engine.h$c` := v0 @kind object;
  #L3dfa8e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.h` v9 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor` v10 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v11 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v12 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v13 @kind object, `com.bumptech.glide.load.engine.i` v14 @kind object, `com.bumptech.glide.load.engine.l$a` v15 @kind object, `androidx.core.util.Pools$Pool` v16 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3dfaa0.  v8:= `@@com.bumptech.glide.load.engine.h.z` @type ^`com.bumptech.glide.load.engine.h$c` @kind object;
  #L3dfaa4.  v0:= v9 @kind object;
  #L3dfaa6.  v1:= v10 @kind object;
  #L3dfaa8.  v2:= v11 @kind object;
  #L3dfaaa.  v3:= v12 @kind object;
  #L3dfaac.  v4:= v13 @kind object;
  #L3dfaae.  v5:= v14 @kind object;
  #L3dfab0.  v6:= v15 @kind object;
  #L3dfab2.  v7:= v16 @kind object;
  #L3dfab6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/engine/h$c;)V` @kind direct;
  #L3dfabc.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor` v2 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v3 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v4 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor` v5 @kind object, `com.bumptech.glide.load.engine.i` v6 @kind object, `com.bumptech.glide.load.engine.l$a` v7 @kind object, `androidx.core.util.Pools$Pool` v8 @kind object, `com.bumptech.glide.load.engine.h$c` v9 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/executor/GlideExecutor;Lcom/bumptech/glide/load/engine/i;Lcom/bumptech/glide/load/engine/l$a;Landroidx/core/util/Pools$Pool;Lcom/bumptech/glide/load/engine/h$c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3dfad0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dfad6.  v0:= new `com.bumptech.glide.load.engine.h$e`;
  #L3dfada.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.<init>:()V` @kind direct;
  #L3dfae0.  v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` := v0 @kind object;
  #L3dfae4.  call temp:= `newInstance`() @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.newInstance:()Lcom/bumptech/glide/util/pool/StateVerifier;` @kind static;
  #L3dfaea.  v0:= temp @kind object;
  #L3dfaec.  v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` := v0 @kind object;
  #L3dfaf0.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3dfaf4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3dfafa.  v1.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3dfafe.  v1.`com.bumptech.glide.load.engine.h.g` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v2 @kind object;
  #L3dfb02.  v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v3 @kind object;
  #L3dfb06.  v1.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v4 @kind object;
  #L3dfb0a.  v1.`com.bumptech.glide.load.engine.h.j` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` := v5 @kind object;
  #L3dfb0e.  v1.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` := v6 @kind object;
  #L3dfb12.  v1.`com.bumptech.glide.load.engine.h.c` @type ^`com.bumptech.glide.load.engine.l$a` := v7 @kind object;
  #L3dfb16.  v1.`com.bumptech.glide.load.engine.h.d` @type ^`androidx.core.util.Pools$Pool` := v8 @kind object;
  #L3dfb1a.  v1.`com.bumptech.glide.load.engine.h.e` @type ^`com.bumptech.glide.load.engine.h$c` := v9 @kind object;
  #L3dfb1e.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.executor.GlideExecutor` `g`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3dfa34.  v0:= v1.`com.bumptech.glide.load.engine.h.n` @type ^`boolean` @kind boolean;
  #L3dfa38.  if v0 == 0 then goto L3dfa42;
  #L3dfa3c.  v0:= v1.`com.bumptech.glide.load.engine.h.i` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3dfa40.  goto L3dfa54;
  #L3dfa42.  v0:= v1.`com.bumptech.glide.load.engine.h.o` @type ^`boolean` @kind boolean;
  #L3dfa46.  if v0 == 0 then goto L3dfa50;
  #L3dfa4a.  v0:= v1.`com.bumptech.glide.load.engine.h.j` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3dfa4e.  goto L3dfa54;
  #L3dfa50.  v0:= v1.`com.bumptech.glide.load.engine.h.h` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3dfa54.  return v0 @kind object;
}
procedure `boolean` `j`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3df9ac.  v0:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3df9b0.  if v0 != 0 then goto L3df9ca;
  #L3df9b4.  v0:= v1.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3df9b8.  if v0 != 0 then goto L3df9ca;
  #L3df9bc.  v0:= v1.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3df9c0.  if v0 == 0 then goto L3df9c6;
  #L3df9c4.  goto L3df9ca;
  #L3df9c6.  v0:= 0I;
  #L3df9c8.  goto L3df9cc;
  #L3df9ca.  v0:= 1I;
  #L3df9cc.  return v0;
}
procedure `void` `n`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dfff8.  @monitorenter v3
  #L3dfffa.  v0:= v3.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dfffe.  if v0 == 0 then goto L3e0050;
  #L3e0002.  v0:= v3.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3e0006.  call `clear`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.clear:()V` @kind virtual;
  #L3e000c.  v0:= 0I;
  #L3e000e.  v3.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` := v0 @kind object;
  #L3e0012.  v3.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` := v0 @kind object;
  #L3e0016.  v3.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` := v0 @kind object;
  #L3e001a.  v1:= 0I;
  #L3e001c.  v3.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` := v1 @kind boolean;
  #L3e0020.  v3.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` := v1 @kind boolean;
  #L3e0024.  v3.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` := v1 @kind boolean;
  #L3e0028.  v3.`com.bumptech.glide.load.engine.h.y` @type ^`boolean` := v1 @kind boolean;
  #L3e002c.  v2:= v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L3e0030.  call `s`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/g;.s:(Z)V` @kind virtual;
  #L3e0036.  v3.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` := v0 @kind object;
  #L3e003a.  v3.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` := v0 @kind object;
  #L3e003e.  v3.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` := v0 @kind object;
  #L3e0042.  v0:= v3.`com.bumptech.glide.load.engine.h.d` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3e0046.  call temp:= `release`(v0, v3) @signature `Landroidx/core/util/Pools$Pool;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L3e004c.  @monitorexit v3
  #L3e004e.  return @kind void;
  #L3e0050.  v0:= new `java.lang.IllegalArgumentException`;
  #L3e0054.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3e005a.  throw v0;
  #L3e005c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e005e.  @monitorexit v3
  #L3e0060.  throw v0;
  catch `java.lang.Throwable` @[L3dfffa..L3e004c] goto L3e005c;
  catch `java.lang.Throwable` @[L3e0050..L3e005c] goto L3e005c;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.g` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.a:(Lcom/bumptech/glide/load/engine/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e010c.  call temp:= `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind direct;
  #L3e0112.  v0:= temp @kind object;
  #L3e0114.  call `execute`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3e011a.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.h` v2 @kind this, `com.bumptech.glide.request.ResourceCallback` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.b:(Lcom/bumptech/glide/request/ResourceCallback;Ljava/util/concurrent/Executor;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dfb30.  @monitorenter v2
  #L3dfb32.  v0:= v2.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dfb36.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3dfb3c.  v0:= v2.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3dfb40.  call `a`(v0, v3, v4) @signature `Lcom/bumptech/glide/load/engine/h$e;.a:(Lcom/bumptech/glide/request/ResourceCallback;Ljava/util/concurrent/Executor;)V` @kind virtual;
  #L3dfb46.  v0:= v2.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3dfb4a.  v1:= 1I;
  #L3dfb4c.  if v0 == 0 then goto L3dfb68;
  #L3dfb50.  call `h`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3dfb56.  v0:= new `com.bumptech.glide.load.engine.h$b`;
  #L3dfb5a.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h$b;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3dfb60.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3dfb66.  goto L3dfb9e;
  #L3dfb68.  v0:= v2.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3dfb6c.  if v0 == 0 then goto L3dfb88;
  #L3dfb70.  call `h`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3dfb76.  v0:= new `com.bumptech.glide.load.engine.h$a`;
  #L3dfb7a.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/engine/h$a;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3dfb80.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3dfb86.  goto L3dfb9e;
  #L3dfb88.  v3:= v2.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3dfb8c.  if v3 != 0 then goto L3dfb92;
  #L3dfb90.  goto L3dfb94;
  #L3dfb92.  v1:= 0I;
  #L3dfb94.  v3:= "Cannot add callbacks to a cancelled EngineJob" @kind object;
  #L3dfb98.  call `checkArgument`(v1, v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3dfb9e.  @monitorexit v2
  #L3dfba0.  return @kind void;
  #L3dfba2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfba4.  @monitorexit v2
  #L3dfba6.  throw v3;
  catch `java.lang.Throwable` @[L3dfb32..L3dfb9e] goto L3dfba2;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.request.ResourceCallback` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.c:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;

  #L3dfbc4.  v0:= v1.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` @kind object;
  #L3dfbc8.  call `onLoadFailed`(v2, v0) @signature `Lcom/bumptech/glide/request/ResourceCallback;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @kind interface;
  #L3dfbce.  return @kind void;
  #L3dfbd0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfbd2.  v0:= new `com.bumptech.glide.load.engine.b`;
  #L3dfbd6.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/b;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3dfbdc.  throw v0;
  catch `java.lang.Throwable` @[L3dfbc4..L3dfbce] goto L3dfbd0;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.h` v3 @kind this, `com.bumptech.glide.request.ResourceCallback` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.d:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3dfbfc.  v0:= v3.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3dfc00.  v1:= v3.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3dfc04.  v2:= v3.`com.bumptech.glide.load.engine.h.y` @type ^`boolean` @kind boolean;
  #L3dfc08.  call `onResourceReady`(v4, v0, v1, v2) @signature `Lcom/bumptech/glide/request/ResourceCallback;.onResourceReady:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @kind interface;
  #L3dfc0e.  return @kind void;
  #L3dfc10.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfc12.  v0:= new `com.bumptech.glide.load.engine.b`;
  #L3dfc16.  call `<init>`(v0, v4) @signature `Lcom/bumptech/glide/load/engine/b;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3dfc1c.  throw v0;
  catch `java.lang.Throwable` @[L3dfbfc..L3dfc0e] goto L3dfc10;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.h` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dfc3c.  call temp:= `j`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3dfc42.  v0:= temp;
  #L3dfc44.  if v0 == 0 then goto L3dfc4a;
  #L3dfc48.  return @kind void;
  #L3dfc4a.  v0:= 1I;
  #L3dfc4c.  v2.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` := v0 @kind boolean;
  #L3dfc50.  v0:= v2.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` @kind object;
  #L3dfc54.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/g;.a:()V` @kind virtual;
  #L3dfc5a.  v0:= v2.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3dfc5e.  v1:= v2.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dfc62.  call `onEngineJobCancelled`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobCancelled:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;)V` @kind interface;
  #L3dfc68.  return @kind void;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.h` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3dfc7c.  @monitorenter v3
  #L3dfc7e.  v0:= v3.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dfc82.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3dfc88.  call temp:= `j`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3dfc8e.  v0:= temp;
  #L3dfc90.  v1:= "Not yet complete!" @kind object;
  #L3dfc94.  call `checkArgument`(v0, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3dfc9a.  v0:= v3.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3dfc9e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L3dfca4.  v0:= temp;
  #L3dfca6.  if v0 < 0 then goto L3dfcae;
  #L3dfcaa.  v1:= 1I;
  #L3dfcac.  goto L3dfcb0;
  #L3dfcae.  v1:= 0I;
  #L3dfcb0.  v2:= "Can't decrement below 0" @kind object;
  #L3dfcb4.  call `checkArgument`(v1, v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3dfcba.  if v0 != 0 then goto L3dfcca;
  #L3dfcbe.  v0:= v3.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3dfcc2.  call `n`(v3) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3dfcc8.  goto L3dfccc;
  #L3dfcca.  v0:= 0I;
  #L3dfccc.  @monitorexit v3
  #L3dfcce.  if v0 == 0 then goto L3dfcd8;
  #L3dfcd2.  call `d`(v0) @signature `Lcom/bumptech/glide/load/engine/l;.d:()V` @kind virtual;
  #L3dfcd8.  return @kind void;
  #L3dfcda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfcdc.  @monitorexit v3
  #L3dfcde.  throw v0;
  catch `java.lang.Throwable` @[L3dfc7e..L3dfcce] goto L3dfcda;
  catch `java.lang.Throwable` @[L3dfcdc..L3dfcde] goto L3dfcda;
}
procedure `com.bumptech.glide.util.pool.StateVerifier` `getVerifier`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.getVerifier:()Lcom/bumptech/glide/util/pool/StateVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dfa68.  v0:= v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dfa6c.  return v0 @kind object;
}
procedure `void` `h`(`com.bumptech.glide.load.engine.h` v2 @kind this, `int` v3 ) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dfd04.  @monitorenter v2
  #L3dfd06.  call temp:= `j`(v2) @signature `Lcom/bumptech/glide/load/engine/h;.j:()Z` @kind direct;
  #L3dfd0c.  v0:= temp;
  #L3dfd0e.  v1:= "Not yet complete!" @kind object;
  #L3dfd12.  call `checkArgument`(v0, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @kind static;
  #L3dfd18.  v0:= v2.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3dfd1c.  call temp:= `getAndAdd`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndAdd:(I)I` @kind virtual;
  #L3dfd22.  v3:= temp;
  #L3dfd24.  if v3 != 0 then goto L3dfd36;
  #L3dfd28.  v3:= v2.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3dfd2c.  if v3 == 0 then goto L3dfd36;
  #L3dfd30.  call `a`(v3) @signature `Lcom/bumptech/glide/load/engine/l;.a:()V` @kind virtual;
  #L3dfd36.  @monitorexit v2
  #L3dfd38.  return @kind void;
  #L3dfd3a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfd3c.  @monitorexit v2
  #L3dfd3e.  throw v3;
  catch `java.lang.Throwable` @[L3dfd06..L3dfd36] goto L3dfd3a;
}
procedure `com.bumptech.glide.load.engine.h` `i`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `boolean` v2 , `boolean` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lcom/bumptech/glide/load/engine/h;.i:(Lcom/bumptech/glide/load/Key;ZZZZ)Lcom/bumptech/glide/load/engine/h;` @AccessFlag  {
    temp;

  #L3df9f8.  @monitorenter v0
  #L3df9fa.  v0.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3df9fe.  v0.`com.bumptech.glide.load.engine.h.m` @type ^`boolean` := v2 @kind boolean;
  #L3dfa02.  v0.`com.bumptech.glide.load.engine.h.n` @type ^`boolean` := v3 @kind boolean;
  #L3dfa06.  v0.`com.bumptech.glide.load.engine.h.o` @type ^`boolean` := v4 @kind boolean;
  #L3dfa0a.  v0.`com.bumptech.glide.load.engine.h.p` @type ^`boolean` := v5 @kind boolean;
  #L3dfa0e.  @monitorexit v0
  #L3dfa10.  return v0 @kind object;
  #L3dfa12.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfa14.  @monitorexit v0
  #L3dfa16.  throw v1;
  catch `java.lang.Throwable` @[L3df9fa..L3dfa0e] goto L3dfa12;
}
procedure `void` `k`(`com.bumptech.glide.load.engine.h` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dfd5c.  @monitorenter v4
  #L3dfd5e.  v0:= v4.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dfd62.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3dfd68.  v0:= v4.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3dfd6c.  if v0 == 0 then goto L3dfd7a;
  #L3dfd70.  call `n`(v4) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3dfd76.  @monitorexit v4
  #L3dfd78.  return @kind void;
  #L3dfd7a.  v0:= v4.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3dfd7e.  call temp:= `isEmpty`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3dfd84.  v0:= temp;
  #L3dfd86.  if v0 != 0 then goto L3dfe18;
  #L3dfd8a.  v0:= v4.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3dfd8e.  if v0 != 0 then goto L3dfe08;
  #L3dfd92.  v0:= 1I;
  #L3dfd94.  v4.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` := v0 @kind boolean;
  #L3dfd98.  v1:= v4.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dfd9c.  v2:= v4.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3dfda0.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.c:()Lcom/bumptech/glide/load/engine/h$e;` @kind virtual;
  #L3dfda6.  v2:= temp @kind object;
  #L3dfda8.  call temp:= `size`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.size:()I` @kind virtual;
  #L3dfdae.  v3:= temp;
  #L3dfdb0.  v3:= v3 + v0 @kind int;
  #L3dfdb2.  call `h`(v4, v3) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3dfdb8.  @monitorexit v4
  #L3dfdba.  v0:= v4.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3dfdbe.  v3:= 0I;
  #L3dfdc0.  call `onEngineJobComplete`(v0, v4, v1, v3) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobComplete:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3dfdc6.  call temp:= `iterator`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3dfdcc.  v0:= temp @kind object;
  #L3dfdce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dfdd4.  v1:= temp;
  #L3dfdd6.  if v1 == 0 then goto L3dfe00;
  #L3dfdda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dfde0.  v1:= temp @kind object;
  #L3dfde2.  v1:= (`com.bumptech.glide.load.engine.h$d`) v1 @kind object;
  #L3dfde6.  v2:= v1.`com.bumptech.glide.load.engine.h$d.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3dfdea.  v3:= new `com.bumptech.glide.load.engine.h$a`;
  #L3dfdee.  v1:= v1.`com.bumptech.glide.load.engine.h$d.a` @type ^`com.bumptech.glide.request.ResourceCallback` @kind object;
  #L3dfdf2.  call `<init>`(v3, v4, v1) @signature `Lcom/bumptech/glide/load/engine/h$a;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3dfdf8.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3dfdfe.  goto L3dfdce;
  #L3dfe00.  call `f`(v4) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @kind virtual;
  #L3dfe06.  return @kind void;
  #L3dfe08.  v0:= new `java.lang.IllegalStateException`;
  #L3dfe0c.  v1:= "Already failed once" @kind object;
  #L3dfe10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dfe16.  throw v0;
  #L3dfe18.  v0:= new `java.lang.IllegalStateException`;
  #L3dfe1c.  v1:= "Received an exception without any callbacks to notify" @kind object;
  #L3dfe20.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dfe26.  throw v0;
  #L3dfe28.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dfe2a.  @monitorexit v4
  #L3dfe2c.  throw v0;
  catch `java.lang.Throwable` @[L3dfd5e..L3dfdba] goto L3dfe28;
  catch `java.lang.Throwable` @[L3dfe08..L3dfe2c] goto L3dfe28;
}
procedure `void` `l`(`com.bumptech.glide.load.engine.h` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dfe54.  @monitorenter v5
  #L3dfe56.  v0:= v5.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dfe5a.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3dfe60.  v0:= v5.`com.bumptech.glide.load.engine.h.x` @type ^`boolean` @kind boolean;
  #L3dfe64.  if v0 == 0 then goto L3dfe7c;
  #L3dfe68.  v0:= v5.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3dfe6c.  call `recycle`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L3dfe72.  call `n`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3dfe78.  @monitorexit v5
  #L3dfe7a.  return @kind void;
  #L3dfe7c.  v0:= v5.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3dfe80.  call temp:= `isEmpty`(v0) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3dfe86.  v0:= temp;
  #L3dfe88.  if v0 != 0 then goto L3dff3c;
  #L3dfe8c.  v0:= v5.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3dfe90.  if v0 != 0 then goto L3dff2c;
  #L3dfe94.  v0:= v5.`com.bumptech.glide.load.engine.h.e` @type ^`com.bumptech.glide.load.engine.h$c` @kind object;
  #L3dfe98.  v1:= v5.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3dfe9c.  v2:= v5.`com.bumptech.glide.load.engine.h.m` @type ^`boolean` @kind boolean;
  #L3dfea0.  v3:= v5.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dfea4.  v4:= v5.`com.bumptech.glide.load.engine.h.c` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3dfea8.  call temp:= `a`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/h$c;.a:(Lcom/bumptech/glide/load/engine/Resource;ZLcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l$a;)Lcom/bumptech/glide/load/engine/l;` @kind virtual;
  #L3dfeae.  v0:= temp @kind object;
  #L3dfeb0.  v5.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` := v0 @kind object;
  #L3dfeb4.  v0:= 1I;
  #L3dfeb6.  v5.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` := v0 @kind boolean;
  #L3dfeba.  v1:= v5.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3dfebe.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.c:()Lcom/bumptech/glide/load/engine/h$e;` @kind virtual;
  #L3dfec4.  v1:= temp @kind object;
  #L3dfec6.  call temp:= `size`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.size:()I` @kind virtual;
  #L3dfecc.  v2:= temp;
  #L3dfece.  v2:= v2 + v0 @kind int;
  #L3dfed0.  call `h`(v5, v2) @signature `Lcom/bumptech/glide/load/engine/h;.h:(I)V` @kind virtual;
  #L3dfed6.  v0:= v5.`com.bumptech.glide.load.engine.h.l` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dfeda.  v2:= v5.`com.bumptech.glide.load.engine.h.v` @type ^`com.bumptech.glide.load.engine.l` @kind object;
  #L3dfede.  @monitorexit v5
  #L3dfee0.  v3:= v5.`com.bumptech.glide.load.engine.h.f` @type ^`com.bumptech.glide.load.engine.i` @kind object;
  #L3dfee4.  call `onEngineJobComplete`(v3, v5, v0, v2) @signature `Lcom/bumptech/glide/load/engine/i;.onEngineJobComplete:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3dfeea.  call temp:= `iterator`(v1) @signature `Lcom/bumptech/glide/load/engine/h$e;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3dfef0.  v0:= temp @kind object;
  #L3dfef2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3dfef8.  v1:= temp;
  #L3dfefa.  if v1 == 0 then goto L3dff24;
  #L3dfefe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3dff04.  v1:= temp @kind object;
  #L3dff06.  v1:= (`com.bumptech.glide.load.engine.h$d`) v1 @kind object;
  #L3dff0a.  v2:= v1.`com.bumptech.glide.load.engine.h$d.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3dff0e.  v3:= new `com.bumptech.glide.load.engine.h$b`;
  #L3dff12.  v1:= v1.`com.bumptech.glide.load.engine.h$d.a` @type ^`com.bumptech.glide.request.ResourceCallback` @kind object;
  #L3dff16.  call `<init>`(v3, v5, v1) @signature `Lcom/bumptech/glide/load/engine/h$b;.<init>:(Lcom/bumptech/glide/load/engine/h;Lcom/bumptech/glide/request/ResourceCallback;)V` @kind direct;
  #L3dff1c.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3dff22.  goto L3dfef2;
  #L3dff24.  call `f`(v5) @signature `Lcom/bumptech/glide/load/engine/h;.f:()V` @kind virtual;
  #L3dff2a.  return @kind void;
  #L3dff2c.  v0:= new `java.lang.IllegalStateException`;
  #L3dff30.  v1:= "Already have resource" @kind object;
  #L3dff34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dff3a.  throw v0;
  #L3dff3c.  v0:= new `java.lang.IllegalStateException`;
  #L3dff40.  v1:= "Received a resource without any callbacks to notify" @kind object;
  #L3dff44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dff4a.  throw v0;
  #L3dff4c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dff4e.  @monitorexit v5
  #L3dff50.  throw v0;
  catch `java.lang.Throwable` @[L3dfe56..L3dfee0] goto L3dff4c;
  catch `java.lang.Throwable` @[L3dff2c..L3dff50] goto L3dff4c;
}
procedure `boolean` `m`(`com.bumptech.glide.load.engine.h` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/h;.m:()Z` @AccessFlag  {
    temp;
    v0;

  #L3df9e0.  v0:= v1.`com.bumptech.glide.load.engine.h.p` @type ^`boolean` @kind boolean;
  #L3df9e4.  return v0;
}
procedure `void` `o`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.request.ResourceCallback` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.o:(Lcom/bumptech/glide/request/ResourceCallback;)V` @AccessFlag  {
    temp;
    v0;

  #L3e0088.  @monitorenter v1
  #L3e008a.  v0:= v1.`com.bumptech.glide.load.engine.h.b` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3e008e.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3e0094.  v0:= v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3e0098.  call `e`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.e:(Lcom/bumptech/glide/request/ResourceCallback;)V` @kind virtual;
  #L3e009e.  v2:= v1.`com.bumptech.glide.load.engine.h.a` @type ^`com.bumptech.glide.load.engine.h$e` @kind object;
  #L3e00a2.  call temp:= `isEmpty`(v2) @signature `Lcom/bumptech/glide/load/engine/h$e;.isEmpty:()Z` @kind virtual;
  #L3e00a8.  v2:= temp;
  #L3e00aa.  if v2 == 0 then goto L3e00e6;
  #L3e00ae.  call `e`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.e:()V` @kind virtual;
  #L3e00b4.  v2:= v1.`com.bumptech.glide.load.engine.h.s` @type ^`boolean` @kind boolean;
  #L3e00b8.  if v2 != 0 then goto L3e00ca;
  #L3e00bc.  v2:= v1.`com.bumptech.glide.load.engine.h.u` @type ^`boolean` @kind boolean;
  #L3e00c0.  if v2 == 0 then goto L3e00c6;
  #L3e00c4.  goto L3e00ca;
  #L3e00c6.  v2:= 0I;
  #L3e00c8.  goto L3e00cc;
  #L3e00ca.  v2:= 1I;
  #L3e00cc.  if v2 == 0 then goto L3e00e6;
  #L3e00d0.  v2:= v1.`com.bumptech.glide.load.engine.h.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e00d4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L3e00da.  v2:= temp;
  #L3e00dc.  if v2 != 0 then goto L3e00e6;
  #L3e00e0.  call `n`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.n:()V` @kind direct;
  #L3e00e6.  @monitorexit v1
  #L3e00e8.  return @kind void;
  #L3e00ea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e00ec.  @monitorexit v1
  #L3e00ee.  throw v2;
  catch `java.lang.Throwable` @[L3e008a..L3e00e6] goto L3e00ea;
}
procedure `void` `onLoadFailed`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.engine.GlideException` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @AccessFlag PUBLIC {
    temp;

  #L3dff78.  @monitorenter v0
  #L3dff7a.  v0.`com.bumptech.glide.load.engine.h.t` @type ^`com.bumptech.glide.load.engine.GlideException` := v1 @kind object;
  #L3dff7e.  @monitorexit v0
  #L3dff80.  call `k`(v0) @signature `Lcom/bumptech/glide/load/engine/h;.k:()V` @kind virtual;
  #L3dff86.  return @kind void;
  #L3dff88.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dff8a.  @monitorexit v0
  #L3dff8c.  throw v1;
  catch `java.lang.Throwable` @[L3dff7a..L3dff80] goto L3dff88;
  catch `java.lang.Throwable` @[L3dff8a..L3dff8c] goto L3dff88;
}
procedure `void` `onResourceReady`(`com.bumptech.glide.load.engine.h` v0 @kind this, `com.bumptech.glide.load.engine.Resource` v1 @kind object, `com.bumptech.glide.load.DataSource` v2 @kind object, `boolean` v3 ) @signature `Lcom/bumptech/glide/load/engine/h;.onResourceReady:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @AccessFlag PUBLIC {
    temp;

  #L3dffb4.  @monitorenter v0
  #L3dffb6.  v0.`com.bumptech.glide.load.engine.h.q` @type ^`com.bumptech.glide.load.engine.Resource` := v1 @kind object;
  #L3dffba.  v0.`com.bumptech.glide.load.engine.h.r` @type ^`com.bumptech.glide.load.DataSource` := v2 @kind object;
  #L3dffbe.  v0.`com.bumptech.glide.load.engine.h.y` @type ^`boolean` := v3 @kind boolean;
  #L3dffc2.  @monitorexit v0
  #L3dffc4.  call `l`(v0) @signature `Lcom/bumptech/glide/load/engine/h;.l:()V` @kind virtual;
  #L3dffca.  return @kind void;
  #L3dffcc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dffce.  @monitorexit v0
  #L3dffd0.  throw v1;
  catch `java.lang.Throwable` @[L3dffb6..L3dffc4] goto L3dffcc;
  catch `java.lang.Throwable` @[L3dffce..L3dffd0] goto L3dffcc;
}
procedure `void` `p`(`com.bumptech.glide.load.engine.h` v1 @kind this, `com.bumptech.glide.load.engine.g` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/h;.p:(Lcom/bumptech/glide/load/engine/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e012c.  @monitorenter v1
  #L3e012e.  v1.`com.bumptech.glide.load.engine.h.w` @type ^`com.bumptech.glide.load.engine.g` := v2 @kind object;
  #L3e0132.  call temp:= `y`(v2) @signature `Lcom/bumptech/glide/load/engine/g;.y:()Z` @kind virtual;
  #L3e0138.  v0:= temp;
  #L3e013a.  if v0 == 0 then goto L3e0144;
  #L3e013e.  v0:= v1.`com.bumptech.glide.load.engine.h.g` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor` @kind object;
  #L3e0142.  goto L3e014c;
  #L3e0144.  call temp:= `g`(v1) @signature `Lcom/bumptech/glide/load/engine/h;.g:()Lcom/bumptech/glide/load/engine/executor/GlideExecutor;` @kind direct;
  #L3e014a.  v0:= temp @kind object;
  #L3e014c.  call `execute`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor;.execute:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3e0152.  @monitorexit v1
  #L3e0154.  return @kind void;
  #L3e0156.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3e0158.  @monitorexit v1
  #L3e015a.  throw v2;
  catch `java.lang.Throwable` @[L3e012e..L3e0152] goto L3e0156;
}
