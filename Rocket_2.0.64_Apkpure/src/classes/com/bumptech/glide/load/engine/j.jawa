record `com.bumptech.glide.load.engine.j` @kind class @AccessFlag  extends `com.bumptech.glide.load.Key` @kind interface {
  `java.lang.Object` `com.bumptech.glide.load.engine.j.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.j.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.j.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.j.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.j.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Options` `com.bumptech.glide.load.engine.j.h` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.j.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.j` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.Key` v2 @kind object, `int` v3 , `int` v4 , `java.util.Map` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.Options` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.<init>:(Ljava/lang/Object;Lcom/bumptech/glide/load/Key;IILjava/util/Map;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/Options;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e040c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e0412.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0418.  v1:= temp @kind object;
  #L3e041a.  v0.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` := v1 @kind object;
  #L3e041e.  v1:= "Signature must not be null" @kind object;
  #L3e0422.  call temp:= `checkNotNull`(v2, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3e0428.  v1:= temp @kind object;
  #L3e042a.  v1:= (`com.bumptech.glide.load.Key`) v1 @kind object;
  #L3e042e.  v0.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3e0432.  v0.`com.bumptech.glide.load.engine.j.b` @type ^`int` := v3;
  #L3e0436.  v0.`com.bumptech.glide.load.engine.j.c` @type ^`int` := v4;
  #L3e043a.  call temp:= `checkNotNull`(v5) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0440.  v1:= temp @kind object;
  #L3e0442.  v1:= (`java.util.Map`) v1 @kind object;
  #L3e0446.  v0.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` := v1 @kind object;
  #L3e044a.  v1:= "Resource class must not be null" @kind object;
  #L3e044e.  call temp:= `checkNotNull`(v6, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3e0454.  v1:= temp @kind object;
  #L3e0456.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3e045a.  v0.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` := v1 @kind object;
  #L3e045e.  v1:= "Transcode class must not be null" @kind object;
  #L3e0462.  call temp:= `checkNotNull`(v7, v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3e0468.  v1:= temp @kind object;
  #L3e046a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L3e046e.  v0.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` := v1 @kind object;
  #L3e0472.  call temp:= `checkNotNull`(v8) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e0478.  v1:= temp @kind object;
  #L3e047a.  v1:= (`com.bumptech.glide.load.Options`) v1 @kind object;
  #L3e047e.  v0.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` := v1 @kind object;
  #L3e0482.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.j` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e01c4.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.j` @kind boolean;
  #L3e01c8.  v1:= 0I;
  #L3e01ca.  if v0 == 0 then goto L3e0264;
  #L3e01ce.  v4:= (`com.bumptech.glide.load.engine.j`) v4 @kind object;
  #L3e01d2.  v0:= v3.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3e01d6.  v2:= v4.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3e01da.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e01e0.  v0:= temp;
  #L3e01e2.  if v0 == 0 then goto L3e0264;
  #L3e01e6.  v0:= v3.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e01ea.  v2:= v4.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e01ee.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/Key;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3e01f4.  v0:= temp;
  #L3e01f6.  if v0 == 0 then goto L3e0264;
  #L3e01fa.  v0:= v3.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3e01fe.  v2:= v4.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3e0202.  if v0 != v2 then goto L3e0264;
  #L3e0206.  v0:= v3.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3e020a.  v2:= v4.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3e020e.  if v0 != v2 then goto L3e0264;
  #L3e0212.  v0:= v3.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3e0216.  v2:= v4.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3e021a.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3e0220.  v0:= temp;
  #L3e0222.  if v0 == 0 then goto L3e0264;
  #L3e0226.  v0:= v3.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3e022a.  v2:= v4.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3e022e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e0234.  v0:= temp;
  #L3e0236.  if v0 == 0 then goto L3e0264;
  #L3e023a.  v0:= v3.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3e023e.  v2:= v4.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3e0242.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e0248.  v0:= temp;
  #L3e024a.  if v0 == 0 then goto L3e0264;
  #L3e024e.  v0:= v3.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e0252.  v4:= v4.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e0256.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/Options;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e025c.  v4:= temp;
  #L3e025e.  if v4 == 0 then goto L3e0264;
  #L3e0262.  v1:= 1I;
  #L3e0264.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.j` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/j;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0278.  v0:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3e027c.  if v0 != 0 then goto L3e0312;
  #L3e0280.  v0:= v2.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3e0284.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e028a.  v0:= temp;
  #L3e028c.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e0290.  v0:= v0 * 31;
  #L3e0294.  v1:= v2.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e0298.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Key;.hashCode:()I` @kind interface;
  #L3e029e.  v1:= temp;
  #L3e02a0.  v0:= v0 + v1 @kind int;
  #L3e02a2.  v0:= v0 * 31;
  #L3e02a6.  v1:= v2.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3e02aa.  v0:= v0 + v1 @kind int;
  #L3e02ac.  v0:= v0 * 31;
  #L3e02b0.  v1:= v2.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3e02b4.  v0:= v0 + v1 @kind int;
  #L3e02b6.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e02ba.  v0:= v0 * 31;
  #L3e02be.  v1:= v2.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3e02c2.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L3e02c8.  v1:= temp;
  #L3e02ca.  v0:= v0 + v1 @kind int;
  #L3e02cc.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e02d0.  v0:= v0 * 31;
  #L3e02d4.  v1:= v2.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3e02d8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e02de.  v1:= temp;
  #L3e02e0.  v0:= v0 + v1 @kind int;
  #L3e02e2.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e02e6.  v0:= v0 * 31;
  #L3e02ea.  v1:= v2.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3e02ee.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e02f4.  v1:= temp;
  #L3e02f6.  v0:= v0 + v1 @kind int;
  #L3e02f8.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e02fc.  v0:= v0 * 31;
  #L3e0300.  v1:= v2.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e0304.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Options;.hashCode:()I` @kind virtual;
  #L3e030a.  v1:= temp;
  #L3e030c.  v0:= v0 + v1 @kind int;
  #L3e030e.  v2.`com.bumptech.glide.load.engine.j.i` @type ^`int` := v0;
  #L3e0312.  v0:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3e0316.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.j` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0328.  v0:= new `java.lang.StringBuilder`;
  #L3e032c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e0332.  v1:= "EngineKey{model=" @kind object;
  #L3e0336.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e033c.  v1:= v2.`com.bumptech.glide.load.engine.j.a` @type ^`java.lang.Object` @kind object;
  #L3e0340.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0346.  v1:= ", width=" @kind object;
  #L3e034a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0350.  v1:= v2.`com.bumptech.glide.load.engine.j.b` @type ^`int`;
  #L3e0354.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e035a.  v1:= ", height=" @kind object;
  #L3e035e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0364.  v1:= v2.`com.bumptech.glide.load.engine.j.c` @type ^`int`;
  #L3e0368.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e036e.  v1:= ", resourceClass=" @kind object;
  #L3e0372.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0378.  v1:= v2.`com.bumptech.glide.load.engine.j.d` @type ^`java.lang.Class` @kind object;
  #L3e037c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0382.  v1:= ", transcodeClass=" @kind object;
  #L3e0386.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e038c.  v1:= v2.`com.bumptech.glide.load.engine.j.e` @type ^`java.lang.Class` @kind object;
  #L3e0390.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e0396.  v1:= ", signature=" @kind object;
  #L3e039a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03a0.  v1:= v2.`com.bumptech.glide.load.engine.j.f` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e03a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03aa.  v1:= ", hashCode=" @kind object;
  #L3e03ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03b4.  v1:= v2.`com.bumptech.glide.load.engine.j.i` @type ^`int`;
  #L3e03b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03be.  v1:= ", transformations=" @kind object;
  #L3e03c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03c8.  v1:= v2.`com.bumptech.glide.load.engine.j.g` @type ^`java.util.Map` @kind object;
  #L3e03cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03d2.  v1:= ", options=" @kind object;
  #L3e03d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03dc.  v1:= v2.`com.bumptech.glide.load.engine.j.h` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e03e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03e6.  v1:= 125I;
  #L3e03ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e03f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e03f6.  v0:= temp @kind object;
  #L3e03f8.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.engine.j` v0 @kind this, `java.security.MessageDigest` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/j;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;

  #L3e0494.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3e0498.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3e049e.  throw v1;
}
