record `com.bumptech.glide.load.engine.GlideException$a` @kind class @AccessFlag FINAL extends `java.lang.Appendable` @kind interface {
  `java.lang.Appendable` `com.bumptech.glide.load.engine.GlideException$a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.load.engine.GlideException$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.GlideException$a` v1 @kind this, `java.lang.Appendable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.<init>:(Ljava/lang/Appendable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e0e8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e0e92.  v0:= 1I;
  #L3e0e94.  v1.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v0 @kind boolean;
  #L3e0e98.  v1.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` := v2 @kind object;
  #L3e0e9c.  return @kind void;
}
procedure `java.lang.CharSequence` `a`(`com.bumptech.glide.load.engine.GlideException$a` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE {
    temp;

  #L3e0e70.  if v1 != 0 then goto L3e0e78;
  #L3e0e74.  v1:= "" @kind object;
  #L3e0e78.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `char` v4 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(C)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e0d94.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` @kind boolean;
  #L3e0d98.  v1:= 0I;
  #L3e0d9a.  if v0 == 0 then goto L3e0db0;
  #L3e0d9e.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L3e0da2.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L3e0da6.  v2:= "  " @kind object;
  #L3e0daa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3e0db0.  v0:= 10I;
  #L3e0db4.  if v4 != v0 then goto L3e0dba;
  #L3e0db8.  v1:= 1I;
  #L3e0dba.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L3e0dbe.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L3e0dc2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3e0dc8.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e0ddc.  call temp:= `a`(v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L3e0de2.  v3:= temp @kind object;
  #L3e0de4.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3e0dea.  v0:= temp;
  #L3e0dec.  v1:= 0I;
  #L3e0dee.  call temp:= `append`(v2, v3, v1, v0) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind virtual;
  #L3e0df4.  v3:= temp @kind object;
  #L3e0df6.  return v3 @kind object;
}
procedure `java.lang.Appendable` `append`(`com.bumptech.glide.load.engine.GlideException$a` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e0e08.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException$a;.a:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind direct;
  #L3e0e0e.  v4:= temp @kind object;
  #L3e0e10.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` @kind boolean;
  #L3e0e14.  v1:= 0I;
  #L3e0e16.  if v0 == 0 then goto L3e0e2c;
  #L3e0e1a.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L3e0e1e.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L3e0e22.  v2:= "  " @kind object;
  #L3e0e26.  call temp:= `append`(v0, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3e0e2c.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3e0e32.  v0:= temp;
  #L3e0e34.  if v0 <= 0 then goto L3e0e4e;
  #L3e0e38.  v0:= v6 + -1;
  #L3e0e3c.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3e0e42.  v0:= temp;
  #L3e0e44.  v2:= 10I;
  #L3e0e48.  if v0 != v2 then goto L3e0e4e;
  #L3e0e4c.  v1:= 1I;
  #L3e0e4e.  v3.`com.bumptech.glide.load.engine.GlideException$a.b` @type ^`boolean` := v1 @kind boolean;
  #L3e0e52.  v0:= v3.`com.bumptech.glide.load.engine.GlideException$a.a` @type ^`java.lang.Appendable` @kind object;
  #L3e0e56.  call temp:= `append`(v0, v4, v5, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @kind interface;
  #L3e0e5c.  return v3 @kind object;
}
