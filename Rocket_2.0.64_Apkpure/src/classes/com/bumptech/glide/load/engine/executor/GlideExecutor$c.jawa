record `com.bumptech.glide.load.engine.executor.GlideExecutor$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.ThreadFactory` `com.bumptech.glide.load.engine.executor.GlideExecutor$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.engine.executor.GlideExecutor$c.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` `com.bumptech.glide.load.engine.executor.GlideExecutor$c.c` @AccessFlag FINAL;
  `boolean` `com.bumptech.glide.load.engine.executor.GlideExecutor$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `com.bumptech.glide.load.engine.executor.GlideExecutor$c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$c` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object, `java.lang.String` v3 @kind object, `com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` v4 @kind object, `boolean` v5 ) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$c;.<init>:(Ljava/util/concurrent/ThreadFactory;Ljava/lang/String;Lcom/bumptech/glide/load/engine/executor/GlideExecutor$UncaughtThrowableStrategy;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3e5c2c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e5c32.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L3e5c36.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L3e5c3c.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L3e5c40.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.a` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L3e5c44.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.b` @type ^`java.lang.String` := v3 @kind object;
  #L3e5c48.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.c` @type ^`com.bumptech.glide.load.engine.executor.GlideExecutor$UncaughtThrowableStrategy` := v4 @kind object;
  #L3e5c4c.  v1.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.d` @type ^`boolean` := v5 @kind boolean;
  #L3e5c50.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.bumptech.glide.load.engine.executor.GlideExecutor$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$c;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e5bbc.  v0:= v2.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L3e5bc0.  v1:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$c$a`;
  #L3e5bc4.  call `<init>`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$c$a;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$c;Ljava/lang/Runnable;)V` @kind direct;
  #L3e5bca.  call temp:= `newThread`(v0, v1) @signature `Ljava/util/concurrent/ThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind interface;
  #L3e5bd0.  v3:= temp @kind object;
  #L3e5bd2.  v0:= new `java.lang.StringBuilder`;
  #L3e5bd6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e5bdc.  v1:= "glide-" @kind object;
  #L3e5be0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e5be6.  v1:= v2.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.b` @type ^`java.lang.String` @kind object;
  #L3e5bea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e5bf0.  v1:= "-thread-" @kind object;
  #L3e5bf4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e5bfa.  v1:= v2.`com.bumptech.glide.load.engine.executor.GlideExecutor$c.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L3e5bfe.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L3e5c04.  v1:= temp;
  #L3e5c06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e5c0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e5c12.  v0:= temp @kind object;
  #L3e5c14.  call `setName`(v3, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L3e5c1a.  return v3 @kind object;
}
