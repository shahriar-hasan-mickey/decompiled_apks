record `com.bumptech.glide.load.engine.p` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.Key` @kind interface {
  `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` `com.bumptech.glide.load.engine.p.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.p.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.p.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.p.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.p.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `com.bumptech.glide.load.engine.p.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Options` `com.bumptech.glide.load.engine.p.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Transformation` `com.bumptech.glide.load.engine.p.h` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.util.LruCache` `@@com.bumptech.glide.load.engine.p.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/engine/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3e1f0c.  v0:= new `com.bumptech.glide.util.LruCache`;
  #L3e1f10.  v1:= 50L;
  #L3e1f14.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/util/LruCache;.<init>:(J)V` @kind direct;
  #L3e1f1a.  `@@com.bumptech.glide.load.engine.p.i` @type ^`com.bumptech.glide.util.LruCache` := v0 @kind object;
  #L3e1f1e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.p` v0 @kind this, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v1 @kind object, `com.bumptech.glide.load.Key` v2 @kind object, `com.bumptech.glide.load.Key` v3 @kind object, `int` v4 , `int` v5 , `com.bumptech.glide.load.Transformation` v6 @kind object, `java.lang.Class` v7 @kind object, `com.bumptech.glide.load.Options` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/p;.<init>:(Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/Key;IILcom/bumptech/glide/load/Transformation;Ljava/lang/Class;Lcom/bumptech/glide/load/Options;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e1f30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e1f36.  v0.`com.bumptech.glide.load.engine.p.a` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` := v1 @kind object;
  #L3e1f3a.  v0.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` := v2 @kind object;
  #L3e1f3e.  v0.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` := v3 @kind object;
  #L3e1f42.  v0.`com.bumptech.glide.load.engine.p.d` @type ^`int` := v4;
  #L3e1f46.  v0.`com.bumptech.glide.load.engine.p.e` @type ^`int` := v5;
  #L3e1f4a.  v0.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` := v6 @kind object;
  #L3e1f4e.  v0.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` := v7 @kind object;
  #L3e1f52.  v0.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` := v8 @kind object;
  #L3e1f56.  return @kind void;
}
procedure `byte`[] `a`(`com.bumptech.glide.load.engine.p` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.a:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3e1d7c.  v0:= `@@com.bumptech.glide.load.engine.p.i` @type ^`com.bumptech.glide.util.LruCache` @kind object;
  #L3e1d80.  v1:= v3.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1d84.  call temp:= `get`(v0, v1) @signature `Lcom/bumptech/glide/util/LruCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e1d8a.  v1:= temp @kind object;
  #L3e1d8c.  v1:= (`byte`[]) v1 @kind object;
  #L3e1d90.  if v1 != 0 then goto L3e1db6;
  #L3e1d94.  v1:= v3.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1d98.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3e1d9e.  v1:= temp @kind object;
  #L3e1da0.  v2:= `@@com.bumptech.glide.load.Key.CHARSET` @type ^`java.nio.charset.Charset` @kind object;
  #L3e1da4.  call temp:= `getBytes`(v1, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3e1daa.  v1:= temp @kind object;
  #L3e1dac.  v2:= v3.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1db0.  call temp:= `put`(v0, v2, v1) @signature `Lcom/bumptech/glide/util/LruCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3e1db6.  return v1 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.engine.p` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e1cdc.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.engine.p` @kind boolean;
  #L3e1ce0.  v1:= 0I;
  #L3e1ce2.  if v0 == 0 then goto L3e1d68;
  #L3e1ce6.  v4:= (`com.bumptech.glide.load.engine.p`) v4 @kind object;
  #L3e1cea.  v0:= v3.`com.bumptech.glide.load.engine.p.e` @type ^`int`;
  #L3e1cee.  v2:= v4.`com.bumptech.glide.load.engine.p.e` @type ^`int`;
  #L3e1cf2.  if v0 != v2 then goto L3e1d68;
  #L3e1cf6.  v0:= v3.`com.bumptech.glide.load.engine.p.d` @type ^`int`;
  #L3e1cfa.  v2:= v4.`com.bumptech.glide.load.engine.p.d` @type ^`int`;
  #L3e1cfe.  if v0 != v2 then goto L3e1d68;
  #L3e1d02.  v0:= v3.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` @kind object;
  #L3e1d06.  v2:= v4.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` @kind object;
  #L3e1d0a.  call temp:= `bothNullOrEqual`(v0, v2) @signature `Lcom/bumptech/glide/util/Util;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3e1d10.  v0:= temp;
  #L3e1d12.  if v0 == 0 then goto L3e1d68;
  #L3e1d16.  v0:= v3.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1d1a.  v2:= v4.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1d1e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1d24.  v0:= temp;
  #L3e1d26.  if v0 == 0 then goto L3e1d68;
  #L3e1d2a.  v0:= v3.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1d2e.  v2:= v4.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1d32.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/Key;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3e1d38.  v0:= temp;
  #L3e1d3a.  if v0 == 0 then goto L3e1d68;
  #L3e1d3e.  v0:= v3.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1d42.  v2:= v4.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1d46.  call temp:= `equals`(v0, v2) @signature `Lcom/bumptech/glide/load/Key;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3e1d4c.  v0:= temp;
  #L3e1d4e.  if v0 == 0 then goto L3e1d68;
  #L3e1d52.  v0:= v3.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e1d56.  v4:= v4.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e1d5a.  call temp:= `equals`(v0, v4) @signature `Lcom/bumptech/glide/load/Options;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e1d60.  v4:= temp;
  #L3e1d62.  if v4 == 0 then goto L3e1d68;
  #L3e1d66.  v1:= 1I;
  #L3e1d68.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.engine.p` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e1dc8.  v0:= v2.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1dcc.  call temp:= `hashCode`(v0) @signature `Lcom/bumptech/glide/load/Key;.hashCode:()I` @kind interface;
  #L3e1dd2.  v0:= temp;
  #L3e1dd4.  v0:= v0 * 31;
  #L3e1dd8.  v1:= v2.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1ddc.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Key;.hashCode:()I` @kind interface;
  #L3e1de2.  v1:= temp;
  #L3e1de4.  v0:= v0 + v1 @kind int;
  #L3e1de6.  v0:= v0 * 31;
  #L3e1dea.  v1:= v2.`com.bumptech.glide.load.engine.p.d` @type ^`int`;
  #L3e1dee.  v0:= v0 + v1 @kind int;
  #L3e1df0.  v0:= v0 * 31;
  #L3e1df4.  v1:= v2.`com.bumptech.glide.load.engine.p.e` @type ^`int`;
  #L3e1df8.  v0:= v0 + v1 @kind int;
  #L3e1dfa.  v1:= v2.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` @kind object;
  #L3e1dfe.  if v1 == 0 then goto L3e1e10;
  #L3e1e02.  v0:= v0 * 31;
  #L3e1e06.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1e0c.  v1:= temp;
  #L3e1e0e.  v0:= v0 + v1 @kind int;
  #L3e1e10.  v0:= v0 * 31;
  #L3e1e14.  v1:= v2.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1e18.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e1e1e.  v1:= temp;
  #L3e1e20.  v0:= v0 + v1 @kind int;
  #L3e1e22.  v0:= v0 * 31;
  #L3e1e26.  v1:= v2.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e1e2a.  call temp:= `hashCode`(v1) @signature `Lcom/bumptech/glide/load/Options;.hashCode:()I` @kind virtual;
  #L3e1e30.  v1:= temp;
  #L3e1e32.  v0:= v0 + v1 @kind int;
  #L3e1e34.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.engine.p` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e1e48.  v0:= new `java.lang.StringBuilder`;
  #L3e1e4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e1e52.  v1:= "ResourceCacheKey{sourceKey=" @kind object;
  #L3e1e56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e5c.  v1:= v2.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1e60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e66.  v1:= ", signature=" @kind object;
  #L3e1e6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e70.  v1:= v2.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1e74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e7a.  v1:= ", width=" @kind object;
  #L3e1e7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e84.  v1:= v2.`com.bumptech.glide.load.engine.p.d` @type ^`int`;
  #L3e1e88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e8e.  v1:= ", height=" @kind object;
  #L3e1e92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1e98.  v1:= v2.`com.bumptech.glide.load.engine.p.e` @type ^`int`;
  #L3e1e9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ea2.  v1:= ", decodedResourceClass=" @kind object;
  #L3e1ea6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1eac.  v1:= v2.`com.bumptech.glide.load.engine.p.f` @type ^`java.lang.Class` @kind object;
  #L3e1eb0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1eb6.  v1:= ", transformation='" @kind object;
  #L3e1eba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ec0.  v1:= v2.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` @kind object;
  #L3e1ec4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1eca.  v1:= 39I;
  #L3e1ece.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ed4.  v1:= ", options=" @kind object;
  #L3e1ed8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ede.  v1:= v2.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e1ee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ee8.  v1:= 125I;
  #L3e1eec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e1ef2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e1ef8.  v0:= temp @kind object;
  #L3e1efa.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.engine.p` v3 @kind this, `java.security.MessageDigest` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/p;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e1f68.  v0:= v3.`com.bumptech.glide.load.engine.p.a` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` @kind object;
  #L3e1f6c.  v1:= constclass @type ^`byte`[] @kind object;
  #L3e1f70.  v2:= 8I;
  #L3e1f74.  call temp:= `getExact`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;.getExact:(ILjava/lang/Class;)Ljava/lang/Object;` @kind interface;
  #L3e1f7a.  v0:= temp @kind object;
  #L3e1f7c.  v0:= (`byte`[]) v0 @kind object;
  #L3e1f80.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L3e1f86.  v1:= temp @kind object;
  #L3e1f88.  v2:= v3.`com.bumptech.glide.load.engine.p.d` @type ^`int`;
  #L3e1f8c.  call temp:= `putInt`(v1, v2) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3e1f92.  v1:= temp @kind object;
  #L3e1f94.  v2:= v3.`com.bumptech.glide.load.engine.p.e` @type ^`int`;
  #L3e1f98.  call temp:= `putInt`(v1, v2) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3e1f9e.  v1:= temp @kind object;
  #L3e1fa0.  call temp:= `array`(v1) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3e1fa6.  v1:= v3.`com.bumptech.glide.load.engine.p.c` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1faa.  call `updateDiskCacheKey`(v1, v4) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L3e1fb0.  v1:= v3.`com.bumptech.glide.load.engine.p.b` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3e1fb4.  call `updateDiskCacheKey`(v1, v4) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L3e1fba.  call `update`(v4, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L3e1fc0.  v1:= v3.`com.bumptech.glide.load.engine.p.h` @type ^`com.bumptech.glide.load.Transformation` @kind object;
  #L3e1fc4.  if v1 == 0 then goto L3e1fce;
  #L3e1fc8.  call `updateDiskCacheKey`(v1, v4) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L3e1fce.  v1:= v3.`com.bumptech.glide.load.engine.p.g` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3e1fd2.  call `updateDiskCacheKey`(v1, v4) @signature `Lcom/bumptech/glide/load/Options;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind virtual;
  #L3e1fd8.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/load/engine/p;.a:()[B` @kind direct;
  #L3e1fde.  v1:= temp @kind object;
  #L3e1fe0.  call `update`(v4, v1) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L3e1fe6.  v4:= v3.`com.bumptech.glide.load.engine.p.a` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` @kind object;
  #L3e1fea.  call `put`(v4, v0) @signature `Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;.put:(Ljava/lang/Object;)V` @kind interface;
  #L3e1ff0.  return @kind void;
}
