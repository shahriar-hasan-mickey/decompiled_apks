record `com.bumptech.glide.load.engine.prefill.b` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.load.engine.prefill.b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.prefill.b.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.engine.prefill.b.c` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.prefill.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.prefill.b` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e6828.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e682e.  v2.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` := v3 @kind object;
  #L3e6832.  v0:= new `java.util.ArrayList`;
  #L3e6836.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3e683c.  v1:= temp @kind object;
  #L3e683e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3e6844.  v2.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` := v0 @kind object;
  #L3e6848.  call temp:= `values`(v3) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3e684e.  v3:= temp @kind object;
  #L3e6850.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e6856.  v3:= temp @kind object;
  #L3e6858.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e685e.  v0:= temp;
  #L3e6860.  if v0 == 0 then goto L3e6884;
  #L3e6864.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e686a.  v0:= temp @kind object;
  #L3e686c.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L3e6870.  v1:= v2.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3e6874.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3e687a.  v0:= temp;
  #L3e687c.  v1:= v1 + v0 @kind int;
  #L3e687e.  v2.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int` := v1;
  #L3e6882.  goto L3e6858;
  #L3e6884.  return @kind void;
}
procedure `boolean` `a`(`com.bumptech.glide.load.engine.prefill.b` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e6758.  v0:= v1.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3e675c.  if v0 != 0 then goto L3e6764;
  #L3e6760.  v0:= 1I;
  #L3e6762.  goto L3e6766;
  #L3e6764.  v0:= 0I;
  #L3e6766.  return v0;
}
procedure `com.bumptech.glide.load.engine.prefill.PreFillType` `b`(`com.bumptech.glide.load.engine.prefill.b` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/prefill/b;.b:()Lcom/bumptech/glide/load/engine/prefill/PreFillType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e6778.  v0:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3e677c.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3e6780.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e6786.  v0:= temp @kind object;
  #L3e6788.  v0:= (`com.bumptech.glide.load.engine.prefill.PreFillType`) v0 @kind object;
  #L3e678c.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3e6790.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e6796.  v1:= temp @kind object;
  #L3e6798.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L3e679c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3e67a2.  v2:= temp;
  #L3e67a4.  v3:= 1I;
  #L3e67a6.  if v2 != v3 then goto L3e67c4;
  #L3e67aa.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3e67ae.  call temp:= `remove`(v1, v0) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e67b4.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3e67b8.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3e67bc.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L3e67c2.  goto L3e67e0;
  #L3e67c4.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.a` @type ^`java.util.Map` @kind object;
  #L3e67c8.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3e67ce.  v1:= temp;
  #L3e67d0.  v1:= v1 - v3 @kind int;
  #L3e67d2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3e67d8.  v1:= temp @kind object;
  #L3e67da.  call temp:= `put`(v2, v0, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e67e0.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int`;
  #L3e67e4.  v1:= v1 - v3 @kind int;
  #L3e67e6.  v4.`com.bumptech.glide.load.engine.prefill.b.c` @type ^`int` := v1;
  #L3e67ea.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3e67ee.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3e67f4.  v1:= temp;
  #L3e67f6.  if v1 == 0 then goto L3e67fe;
  #L3e67fa.  v1:= 0I;
  #L3e67fc.  goto L3e6812;
  #L3e67fe.  v1:= v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int`;
  #L3e6802.  v1:= v1 + v3 @kind int;
  #L3e6804.  v2:= v4.`com.bumptech.glide.load.engine.prefill.b.b` @type ^`java.util.List` @kind object;
  #L3e6808.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e680e.  v2:= temp;
  #L3e6810.  v1:= v1 %% v2 @kind int;
  #L3e6812.  v4.`com.bumptech.glide.load.engine.prefill.b.d` @type ^`int` := v1;
  #L3e6816.  return v0 @kind object;
}
