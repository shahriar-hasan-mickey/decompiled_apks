record `com.bumptech.glide.load.engine.executor.GlideExecutor$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$b` v0 @kind this) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3e5afc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e5b02.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.executor.GlideExecutor$b` v0 @kind this, `com.bumptech.glide.load.engine.executor.GlideExecutor$a` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3e5b14.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b;.<init>:()V` @kind direct;
  #L3e5b1a.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.bumptech.glide.load.engine.executor.GlideExecutor$b` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e5ae0.  v0:= new `com.bumptech.glide.load.engine.executor.GlideExecutor$b$a`;
  #L3e5ae4.  call `<init>`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b$a;.<init>:(Lcom/bumptech/glide/load/engine/executor/GlideExecutor$b;Ljava/lang/Runnable;)V` @kind direct;
  #L3e5aea.  return v0 @kind object;
}
