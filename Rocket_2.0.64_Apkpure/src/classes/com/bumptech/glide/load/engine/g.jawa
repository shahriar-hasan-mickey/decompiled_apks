record `com.bumptech.glide.load.engine.g` @kind class @AccessFlag  extends `com.bumptech.glide.load.engine.DataFetcherGenerator$FetcherReadyCallback` @kind interface, `java.lang.Runnable` @kind interface, `java.lang.Comparable` @kind interface, `com.bumptech.glide.util.pool.FactoryPools$Poolable` @kind interface {
  `com.bumptech.glide.load.DataSource` `com.bumptech.glide.load.engine.g.A` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.data.DataFetcher` `com.bumptech.glide.load.engine.g.B` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.DataFetcherGenerator` `com.bumptech.glide.load.engine.g.C` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.g.D` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.g.E` @AccessFlag PRIVATE_VOLATILE;
  `boolean` `com.bumptech.glide.load.engine.g.F` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.f` `com.bumptech.glide.load.engine.g.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.load.engine.g.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.util.pool.StateVerifier` `com.bumptech.glide.load.engine.g.c` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.g$e` `com.bumptech.glide.load.engine.g.d` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.engine.g.e` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.g$d` `com.bumptech.glide.load.engine.g.f` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.g$f` `com.bumptech.glide.load.engine.g.g` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.GlideContext` `com.bumptech.glide.load.engine.g.h` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.g.i` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `com.bumptech.glide.load.engine.g.j` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.j` `com.bumptech.glide.load.engine.g.k` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.g.l` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.g.m` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.DiskCacheStrategy` `com.bumptech.glide.load.engine.g.n` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.Options` `com.bumptech.glide.load.engine.g.o` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.g$b` `com.bumptech.glide.load.engine.g.p` @AccessFlag PRIVATE;
  `int` `com.bumptech.glide.load.engine.g.q` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.g$h` `com.bumptech.glide.load.engine.g.r` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.engine.g$g` `com.bumptech.glide.load.engine.g.s` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.load.engine.g.t` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.g.u` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.engine.g.v` @AccessFlag PRIVATE;
  `java.lang.Thread` `com.bumptech.glide.load.engine.g.w` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.g.x` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.Key` `com.bumptech.glide.load.engine.g.y` @AccessFlag PRIVATE;
  `java.lang.Object` `com.bumptech.glide.load.engine.g.z` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.g` v1 @kind this, `com.bumptech.glide.load.engine.g$e` v2 @kind object, `androidx.core.util.Pools$Pool` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.<init>:(Lcom/bumptech/glide/load/engine/g$e;Landroidx/core/util/Pools$Pool;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3de4a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3de4aa.  v0:= new `com.bumptech.glide.load.engine.f`;
  #L3de4ae.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/f;.<init>:()V` @kind direct;
  #L3de4b4.  v1.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` := v0 @kind object;
  #L3de4b8.  v0:= new `java.util.ArrayList`;
  #L3de4bc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3de4c2.  v1.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` := v0 @kind object;
  #L3de4c6.  call temp:= `newInstance`() @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.newInstance:()Lcom/bumptech/glide/util/pool/StateVerifier;` @kind static;
  #L3de4cc.  v0:= temp @kind object;
  #L3de4ce.  v1.`com.bumptech.glide.load.engine.g.c` @type ^`com.bumptech.glide.util.pool.StateVerifier` := v0 @kind object;
  #L3de4d2.  v0:= new `com.bumptech.glide.load.engine.g$d`;
  #L3de4d6.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/g$d;.<init>:()V` @kind direct;
  #L3de4dc.  v1.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` := v0 @kind object;
  #L3de4e0.  v0:= new `com.bumptech.glide.load.engine.g$f`;
  #L3de4e4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/g$f;.<init>:()V` @kind direct;
  #L3de4ea.  v1.`com.bumptech.glide.load.engine.g.g` @type ^`com.bumptech.glide.load.engine.g$f` := v0 @kind object;
  #L3de4ee.  v1.`com.bumptech.glide.load.engine.g.d` @type ^`com.bumptech.glide.load.engine.g$e` := v2 @kind object;
  #L3de4f2.  v1.`com.bumptech.glide.load.engine.g.e` @type ^`androidx.core.util.Pools$Pool` := v3 @kind object;
  #L3de4f6.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.Resource` `c`(`com.bumptech.glide.load.engine.g` v3 @kind this, `com.bumptech.glide.load.data.DataFetcher` v4 @kind object, `java.lang.Object` v5 @kind object, `com.bumptech.glide.load.DataSource` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.c:(Lcom/bumptech/glide/load/data/DataFetcher;Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3de180.  if v5 != 0 then goto L3de18e;
  #L3de184.  v5:= 0I;
  #L3de186.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3de18c.  return v5 @kind object;
  #L3de18e.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/util/LogTime;.getLogTime:()J` @kind static;
  #L3de194.  v0:= temp @kind wide;
  #L3de196.  call temp:= `d`(v3, v5, v6) @signature `Lcom/bumptech/glide/load/engine/g;.d:(Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/engine/Resource;` @kind direct;
  #L3de19c.  v5:= temp @kind object;
  #L3de19e.  v6:= "DecodeJob" @kind object;
  #L3de1a2.  v2:= 2I;
  #L3de1a4.  call temp:= `isLoggable`(v6, v2) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3de1aa.  v6:= temp;
  #L3de1ac.  if v6 == 0 then goto L3de1d8;
  #L3de1b0.  v6:= new `java.lang.StringBuilder`;
  #L3de1b4.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de1ba.  v2:= "Decoded result " @kind object;
  #L3de1be.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de1c4.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de1ca.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de1d0.  v6:= temp @kind object;
  #L3de1d2.  call `k`(v3, v6, v0) @signature `Lcom/bumptech/glide/load/engine/g;.k:(Ljava/lang/String;J)V` @kind direct;
  #L3de1d8.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3de1de.  return v5 @kind object;
  #L3de1e0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3de1e2.  call `cleanup`(v4) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3de1e8.  throw v5;
  catch `java.lang.Throwable` @[L3de18e..L3de1d8] goto L3de1e0;
}
procedure `com.bumptech.glide.load.engine.Resource` `d`(`com.bumptech.glide.load.engine.g` v2 @kind this, `java.lang.Object` v3 @kind object, `com.bumptech.glide.load.DataSource` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.d:(Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3de208.  v0:= v2.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de20c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3de212.  v1:= temp @kind object;
  #L3de214.  call temp:= `h`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/f;.h:(Ljava/lang/Class;)Lcom/bumptech/glide/load/engine/LoadPath;` @kind virtual;
  #L3de21a.  v0:= temp @kind object;
  #L3de21c.  call temp:= `v`(v2, v3, v4, v0) @signature `Lcom/bumptech/glide/load/engine/g;.v:(Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;Lcom/bumptech/glide/load/engine/LoadPath;)Lcom/bumptech/glide/load/engine/Resource;` @kind direct;
  #L3de222.  v3:= temp @kind object;
  #L3de224.  return v3 @kind object;
}
procedure `void` `e`(`com.bumptech.glide.load.engine.g` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3de530.  v0:= "DecodeJob" @kind object;
  #L3de534.  v1:= 2I;
  #L3de536.  call temp:= `isLoggable`(v0, v1) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3de53c.  v0:= temp;
  #L3de53e.  if v0 == 0 then goto L3de59e;
  #L3de542.  v0:= v4.`com.bumptech.glide.load.engine.g.t` @type ^`long` @kind wide;
  #L3de546.  v2:= new `java.lang.StringBuilder`;
  #L3de54a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de550.  v3:= "data: " @kind object;
  #L3de554.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de55a.  v3:= v4.`com.bumptech.glide.load.engine.g.z` @type ^`java.lang.Object` @kind object;
  #L3de55e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de564.  v3:= ", cache key: " @kind object;
  #L3de568.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de56e.  v3:= v4.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de572.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de578.  v3:= ", fetcher: " @kind object;
  #L3de57c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de582.  v3:= v4.`com.bumptech.glide.load.engine.g.B` @type ^`com.bumptech.glide.load.data.DataFetcher` @kind object;
  #L3de586.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de58c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de592.  v2:= temp @kind object;
  #L3de594.  v3:= "Retrieved data" @kind object;
  #L3de598.  call `l`(v4, v3, v0, v2) @signature `Lcom/bumptech/glide/load/engine/g;.l:(Ljava/lang/String;JLjava/lang/String;)V` @kind direct;
  #L3de59e.  v0:= 0I;
  #L3de5a0.  v1:= v4.`com.bumptech.glide.load.engine.g.B` @type ^`com.bumptech.glide.load.data.DataFetcher` @kind object;
  #L3de5a4.  v2:= v4.`com.bumptech.glide.load.engine.g.z` @type ^`java.lang.Object` @kind object;
  #L3de5a8.  v3:= v4.`com.bumptech.glide.load.engine.g.A` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3de5ac.  call temp:= `c`(v4, v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/g;.c:(Lcom/bumptech/glide/load/data/DataFetcher;Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/engine/Resource;` @kind direct;
  #L3de5b2.  v0:= temp @kind object;
  #L3de5b4.  goto L3de5d0;
  #L3de5b6.  v1:= Exception @type ^`com.bumptech.glide.load.engine.GlideException` @kind object;
  #L3de5b8.  v2:= v4.`com.bumptech.glide.load.engine.g.y` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de5bc.  v3:= v4.`com.bumptech.glide.load.engine.g.A` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3de5c0.  call `f`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/engine/GlideException;.f:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/DataSource;)V` @kind virtual;
  #L3de5c6.  v2:= v4.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3de5ca.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3de5d0.  if v0 == 0 then goto L3de5e4;
  #L3de5d4.  v1:= v4.`com.bumptech.glide.load.engine.g.A` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3de5d8.  v2:= v4.`com.bumptech.glide.load.engine.g.F` @type ^`boolean` @kind boolean;
  #L3de5dc.  call `n`(v4, v0, v1, v2) @signature `Lcom/bumptech/glide/load/engine/g;.n:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @kind direct;
  #L3de5e2.  goto L3de5ea;
  #L3de5e4.  call `u`(v4) @signature `Lcom/bumptech/glide/load/engine/g;.u:()V` @kind direct;
  #L3de5ea.  return @kind void;
  catch `com.bumptech.glide.load.engine.GlideException` @[L3de5a0..L3de5b4] goto L3de5b6;
}
procedure `com.bumptech.glide.load.engine.DataFetcherGenerator` `f`(`com.bumptech.glide.load.engine.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.f:()Lcom/bumptech/glide/load/engine/DataFetcherGenerator;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ddf4c.  v0:= `@@com.bumptech.glide.load.engine.g$a.b` @type ^`int`[] @kind object;
  #L3ddf50.  v1:= v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3ddf54.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3ddf5a.  v1:= temp;
  #L3ddf5c.  v0:= v0[v1];
  #L3ddf60.  v1:= 1I;
  #L3ddf62.  if v0 == v1 then goto L3ddfce;
  #L3ddf66.  v1:= 2I;
  #L3ddf68.  if v0 == v1 then goto L3ddfbe;
  #L3ddf6c.  v1:= 3I;
  #L3ddf6e.  if v0 == v1 then goto L3ddfae;
  #L3ddf72.  v1:= 4I;
  #L3ddf74.  if v0 != v1 then goto L3ddf7c;
  #L3ddf78.  v0:= 0I;
  #L3ddf7a.  return v0 @kind object;
  #L3ddf7c.  v0:= new `java.lang.IllegalStateException`;
  #L3ddf80.  v1:= new `java.lang.StringBuilder`;
  #L3ddf84.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ddf8a.  v2:= "Unrecognized stage: " @kind object;
  #L3ddf8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddf94.  v2:= v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3ddf98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ddf9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ddfa4.  v1:= temp @kind object;
  #L3ddfa6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ddfac.  throw v0;
  #L3ddfae.  v0:= new `com.bumptech.glide.load.engine.r`;
  #L3ddfb2.  v1:= v3.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3ddfb6.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/r;.<init>:(Lcom/bumptech/glide/load/engine/f;Lcom/bumptech/glide/load/engine/DataFetcherGenerator$FetcherReadyCallback;)V` @kind direct;
  #L3ddfbc.  return v0 @kind object;
  #L3ddfbe.  v0:= new `com.bumptech.glide.load.engine.c`;
  #L3ddfc2.  v1:= v3.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3ddfc6.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/c;.<init>:(Lcom/bumptech/glide/load/engine/f;Lcom/bumptech/glide/load/engine/DataFetcherGenerator$FetcherReadyCallback;)V` @kind direct;
  #L3ddfcc.  return v0 @kind object;
  #L3ddfce.  v0:= new `com.bumptech.glide.load.engine.o`;
  #L3ddfd2.  v1:= v3.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3ddfd6.  call `<init>`(v0, v1, v3) @signature `Lcom/bumptech/glide/load/engine/o;.<init>:(Lcom/bumptech/glide/load/engine/f;Lcom/bumptech/glide/load/engine/DataFetcherGenerator$FetcherReadyCallback;)V` @kind direct;
  #L3ddfdc.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.g$h` `g`(`com.bumptech.glide.load.engine.g` v3 @kind this, `com.bumptech.glide.load.engine.g$h` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3de0b0.  v0:= `@@com.bumptech.glide.load.engine.g$a.b` @type ^`int`[] @kind object;
  #L3de0b4.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3de0ba.  v1:= temp;
  #L3de0bc.  v0:= v0[v1];
  #L3de0c0.  v1:= 1I;
  #L3de0c2.  if v0 == v1 then goto L3de14a;
  #L3de0c6.  v1:= 2I;
  #L3de0c8.  if v0 == v1 then goto L3de136;
  #L3de0cc.  v1:= 3I;
  #L3de0ce.  if v0 == v1 then goto L3de130;
  #L3de0d2.  v1:= 4I;
  #L3de0d4.  if v0 == v1 then goto L3de130;
  #L3de0d8.  v1:= 5I;
  #L3de0da.  if v0 != v1 then goto L3de102;
  #L3de0de.  v4:= v3.`com.bumptech.glide.load.engine.g.n` @type ^`com.bumptech.glide.load.engine.DiskCacheStrategy` @kind object;
  #L3de0e2.  call temp:= `decodeCachedResource`(v4) @signature `Lcom/bumptech/glide/load/engine/DiskCacheStrategy;.decodeCachedResource:()Z` @kind virtual;
  #L3de0e8.  v4:= temp;
  #L3de0ea.  if v4 == 0 then goto L3de0f4;
  #L3de0ee.  v4:= `@@com.bumptech.glide.load.engine.g$h.b` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de0f2.  goto L3de100;
  #L3de0f4.  v4:= `@@com.bumptech.glide.load.engine.g$h.b` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de0f8.  call temp:= `g`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @kind direct;
  #L3de0fe.  v4:= temp @kind object;
  #L3de100.  return v4 @kind object;
  #L3de102.  v0:= new `java.lang.IllegalArgumentException`;
  #L3de106.  v1:= new `java.lang.StringBuilder`;
  #L3de10a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de110.  v2:= "Unrecognized stage: " @kind object;
  #L3de114.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de11a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de120.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de126.  v4:= temp @kind object;
  #L3de128.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3de12e.  throw v0;
  #L3de130.  v4:= `@@com.bumptech.glide.load.engine.g$h.f` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de134.  return v4 @kind object;
  #L3de136.  v4:= v3.`com.bumptech.glide.load.engine.g.u` @type ^`boolean` @kind boolean;
  #L3de13a.  if v4 == 0 then goto L3de144;
  #L3de13e.  v4:= `@@com.bumptech.glide.load.engine.g$h.f` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de142.  goto L3de148;
  #L3de144.  v4:= `@@com.bumptech.glide.load.engine.g$h.d` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de148.  return v4 @kind object;
  #L3de14a.  v4:= v3.`com.bumptech.glide.load.engine.g.n` @type ^`com.bumptech.glide.load.engine.DiskCacheStrategy` @kind object;
  #L3de14e.  call temp:= `decodeCachedData`(v4) @signature `Lcom/bumptech/glide/load/engine/DiskCacheStrategy;.decodeCachedData:()Z` @kind virtual;
  #L3de154.  v4:= temp;
  #L3de156.  if v4 == 0 then goto L3de160;
  #L3de15a.  v4:= `@@com.bumptech.glide.load.engine.g$h.c` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de15e.  goto L3de16c;
  #L3de160.  v4:= `@@com.bumptech.glide.load.engine.g$h.c` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de164.  call temp:= `g`(v3, v4) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @kind direct;
  #L3de16a.  v4:= temp @kind object;
  #L3de16c.  return v4 @kind object;
}
procedure `com.bumptech.glide.load.Options` `h`(`com.bumptech.glide.load.engine.g` v3 @kind this, `com.bumptech.glide.load.DataSource` v4 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.h:(Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/Options;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ddec0.  v0:= v3.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3ddec4.  v1:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L3ddec8.  v2:= 26I;
  #L3ddecc.  if v1 >= v2 then goto L3dded2;
  #L3dded0.  return v0 @kind object;
  #L3dded2.  v1:= `@@com.bumptech.glide.load.DataSource.RESOURCE_DISK_CACHE` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3dded6.  if v4 == v1 then goto L3ddef0;
  #L3ddeda.  v4:= v3.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3ddede.  call temp:= `x`(v4) @signature `Lcom/bumptech/glide/load/engine/f;.x:()Z` @kind virtual;
  #L3ddee4.  v4:= temp;
  #L3ddee6.  if v4 == 0 then goto L3ddeec;
  #L3ddeea.  goto L3ddef0;
  #L3ddeec.  v4:= 0I;
  #L3ddeee.  goto L3ddef2;
  #L3ddef0.  v4:= 1I;
  #L3ddef2.  v1:= `@@com.bumptech.glide.load.resource.bitmap.Downsampler.ALLOW_HARDWARE_CONFIG` @type ^`com.bumptech.glide.load.Option` @kind object;
  #L3ddef6.  call temp:= `get`(v0, v1) @signature `Lcom/bumptech/glide/load/Options;.get:(Lcom/bumptech/glide/load/Option;)Ljava/lang/Object;` @kind virtual;
  #L3ddefc.  v2:= temp @kind object;
  #L3ddefe.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L3ddf02.  if v2 == 0 then goto L3ddf18;
  #L3ddf06.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3ddf0c.  v2:= temp;
  #L3ddf0e.  if v2 == 0 then goto L3ddf16;
  #L3ddf12.  if v4 == 0 then goto L3ddf18;
  #L3ddf16.  return v0 @kind object;
  #L3ddf18.  v0:= new `com.bumptech.glide.load.Options`;
  #L3ddf1c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/Options;.<init>:()V` @kind direct;
  #L3ddf22.  v2:= v3.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3ddf26.  call `putAll`(v0, v2) @signature `Lcom/bumptech/glide/load/Options;.putAll:(Lcom/bumptech/glide/load/Options;)V` @kind virtual;
  #L3ddf2c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L3ddf32.  v4:= temp @kind object;
  #L3ddf34.  call temp:= `set`(v0, v1, v4) @signature `Lcom/bumptech/glide/load/Options;.set:(Lcom/bumptech/glide/load/Option;Ljava/lang/Object;)Lcom/bumptech/glide/load/Options;` @kind virtual;
  #L3ddf3a.  return v0 @kind object;
}
procedure `int` `i`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de484.  v0:= v1.`com.bumptech.glide.load.engine.g.j` @type ^`com.bumptech.glide.Priority` @kind object;
  #L3de488.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3de48e.  v0:= temp;
  #L3de490.  return v0;
}
procedure `void` `k`(`com.bumptech.glide.load.engine.g` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 ) @signature `Lcom/bumptech/glide/load/engine/g;.k:(Ljava/lang/String;J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de60c.  v0:= 0I;
  #L3de60e.  call `l`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/engine/g;.l:(Ljava/lang/String;JLjava/lang/String;)V` @kind direct;
  #L3de614.  return @kind void;
}
procedure `void` `l`(`com.bumptech.glide.load.engine.g` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 , `java.lang.String` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.l:(Ljava/lang/String;JLjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de628.  v0:= new `java.lang.StringBuilder`;
  #L3de62c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de632.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de638.  v2:= " in " @kind object;
  #L3de63c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de642.  call temp:= `getElapsedMillis`(v3) @signature `Lcom/bumptech/glide/util/LogTime;.getElapsedMillis:(J)D` @kind static;
  #L3de648.  v2:= temp @kind wide;
  #L3de64a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de650.  v2:= ", load key: " @kind object;
  #L3de654.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de65a.  v2:= v1.`com.bumptech.glide.load.engine.g.k` @type ^`com.bumptech.glide.load.engine.j` @kind object;
  #L3de65e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de664.  if v5 == 0 then goto L3de68c;
  #L3de668.  v2:= new `java.lang.StringBuilder`;
  #L3de66c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de672.  v3:= ", " @kind object;
  #L3de676.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de67c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de682.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de688.  v2:= temp @kind object;
  #L3de68a.  goto L3de690;
  #L3de68c.  v2:= "" @kind object;
  #L3de690.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de696.  v2:= ", thread: " @kind object;
  #L3de69a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de6a0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3de6a6.  v2:= temp @kind object;
  #L3de6a8.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L3de6ae.  v2:= temp @kind object;
  #L3de6b0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de6b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de6bc.  v2:= temp @kind object;
  #L3de6be.  v3:= "DecodeJob" @kind object;
  #L3de6c2.  call temp:= `v`(v3, v2) @signature `Landroid/util/Log;.v:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L3de6c8.  return @kind void;
}
procedure `void` `m`(`com.bumptech.glide.load.engine.g` v1 @kind this, `com.bumptech.glide.load.engine.Resource` v2 @kind object, `com.bumptech.glide.load.DataSource` v3 @kind object, `boolean` v4 ) @signature `Lcom/bumptech/glide/load/engine/g;.m:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de6dc.  call `x`(v1) @signature `Lcom/bumptech/glide/load/engine/g;.x:()V` @kind direct;
  #L3de6e2.  v0:= v1.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` @kind object;
  #L3de6e6.  call `onResourceReady`(v0, v2, v3, v4) @signature `Lcom/bumptech/glide/load/engine/g$b;.onResourceReady:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @kind interface;
  #L3de6ec.  return @kind void;
}
procedure `void` `n`(`com.bumptech.glide.load.engine.g` v2 @kind this, `com.bumptech.glide.load.engine.Resource` v3 @kind object, `com.bumptech.glide.load.DataSource` v4 @kind object, `boolean` v5 ) @signature `Lcom/bumptech/glide/load/engine/g;.n:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3de700.  v0:= "DecodeJob.notifyEncodeAndRelease" @kind object;
  #L3de704.  call `beginSection`(v0) @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.beginSection:(Ljava/lang/String;)V` @kind static;
  #L3de70a.  v0:= instanceof @variable v3 @type ^`com.bumptech.glide.load.engine.Initializable` @kind boolean;
  #L3de70e.  if v0 == 0 then goto L3de71e;
  #L3de712.  v0:= v3 @kind object;
  #L3de714.  v0:= (`com.bumptech.glide.load.engine.Initializable`) v0 @kind object;
  #L3de718.  call `initialize`(v0) @signature `Lcom/bumptech/glide/load/engine/Initializable;.initialize:()V` @kind interface;
  #L3de71e.  v0:= 0I;
  #L3de720.  v1:= v2.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` @kind object;
  #L3de724.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/engine/g$d;.c:()Z` @kind virtual;
  #L3de72a.  v1:= temp;
  #L3de72c.  if v1 == 0 then goto L3de73a;
  #L3de730.  call temp:= `b`(v3) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Lcom/bumptech/glide/load/engine/Resource;)Lcom/bumptech/glide/load/engine/n;` @kind static;
  #L3de736.  v3:= temp @kind object;
  #L3de738.  v0:= v3 @kind object;
  #L3de73a.  call `m`(v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/engine/g;.m:(Lcom/bumptech/glide/load/engine/Resource;Lcom/bumptech/glide/load/DataSource;Z)V` @kind direct;
  #L3de740.  v3:= `@@com.bumptech.glide.load.engine.g$h.e` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3de744.  v2.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` := v3 @kind object;
  #L3de748.  v3:= v2.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` @kind object;
  #L3de74c.  call temp:= `c`(v3) @signature `Lcom/bumptech/glide/load/engine/g$d;.c:()Z` @kind virtual;
  #L3de752.  v3:= temp;
  #L3de754.  if v3 == 0 then goto L3de76a;
  #L3de758.  v3:= v2.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` @kind object;
  #L3de75c.  v4:= v2.`com.bumptech.glide.load.engine.g.d` @type ^`com.bumptech.glide.load.engine.g$e` @kind object;
  #L3de760.  v5:= v2.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3de764.  call `b`(v3, v4, v5) @signature `Lcom/bumptech/glide/load/engine/g$d;.b:(Lcom/bumptech/glide/load/engine/g$e;Lcom/bumptech/glide/load/Options;)V` @kind virtual;
  #L3de76a.  if v0 == 0 then goto L3de774;
  #L3de76e.  call `d`(v0) @signature `Lcom/bumptech/glide/load/engine/n;.d:()V` @kind virtual;
  #L3de774.  call `p`(v2) @signature `Lcom/bumptech/glide/load/engine/g;.p:()V` @kind direct;
  #L3de77a.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3de780.  return @kind void;
  #L3de782.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3de784.  if v0 == 0 then goto L3de78e;
  #L3de788.  call `d`(v0) @signature `Lcom/bumptech/glide/load/engine/n;.d:()V` @kind virtual;
  #L3de78e.  throw v3;
  #L3de790.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3de792.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3de798.  throw v3;
  catch `java.lang.Throwable` @[L3de70a..L3de748] goto L3de790;
  catch `java.lang.Throwable` @[L3de748..L3de76a] goto L3de782;
  catch `java.lang.Throwable` @[L3de76e..L3de77a] goto L3de790;
  catch `java.lang.Throwable` @[L3de788..L3de790] goto L3de790;
}
procedure `void` `o`(`com.bumptech.glide.load.engine.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3de7d4.  call `x`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.x:()V` @kind direct;
  #L3de7da.  v0:= new `com.bumptech.glide.load.engine.GlideException`;
  #L3de7de.  v1:= new `java.util.ArrayList`;
  #L3de7e2.  v2:= v3.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3de7e6.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3de7ec.  v2:= "Failed to load resource" @kind object;
  #L3de7f0.  call `<init>`(v0, v2, v1) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L3de7f6.  v1:= v3.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` @kind object;
  #L3de7fa.  call `onLoadFailed`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/g$b;.onLoadFailed:(Lcom/bumptech/glide/load/engine/GlideException;)V` @kind interface;
  #L3de800.  call `q`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.q:()V` @kind direct;
  #L3de806.  return @kind void;
}
procedure `void` `p`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.p:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de918.  v0:= v1.`com.bumptech.glide.load.engine.g.g` @type ^`com.bumptech.glide.load.engine.g$f` @kind object;
  #L3de91c.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/load/engine/g$f;.b:()Z` @kind virtual;
  #L3de922.  v0:= temp;
  #L3de924.  if v0 == 0 then goto L3de92e;
  #L3de928.  call `t`(v1) @signature `Lcom/bumptech/glide/load/engine/g;.t:()V` @kind direct;
  #L3de92e.  return @kind void;
}
procedure `void` `q`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3de940.  v0:= v1.`com.bumptech.glide.load.engine.g.g` @type ^`com.bumptech.glide.load.engine.g$f` @kind object;
  #L3de944.  call temp:= `c`(v0) @signature `Lcom/bumptech/glide/load/engine/g$f;.c:()Z` @kind virtual;
  #L3de94a.  v0:= temp;
  #L3de94c.  if v0 == 0 then goto L3de956;
  #L3de950.  call `t`(v1) @signature `Lcom/bumptech/glide/load/engine/g;.t:()V` @kind direct;
  #L3de956.  return @kind void;
}
procedure `void` `t`(`com.bumptech.glide.load.engine.g` v4 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.t:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3de990.  v0:= v4.`com.bumptech.glide.load.engine.g.g` @type ^`com.bumptech.glide.load.engine.g$f` @kind object;
  #L3de994.  call `e`(v0) @signature `Lcom/bumptech/glide/load/engine/g$f;.e:()V` @kind virtual;
  #L3de99a.  v0:= v4.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` @kind object;
  #L3de99e.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/g$d;.a:()V` @kind virtual;
  #L3de9a4.  v0:= v4.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de9a8.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/f;.a:()V` @kind virtual;
  #L3de9ae.  v0:= 0I;
  #L3de9b0.  v4.`com.bumptech.glide.load.engine.g.D` @type ^`boolean` := v0 @kind boolean;
  #L3de9b4.  v1:= 0I;
  #L3de9b6.  v4.`com.bumptech.glide.load.engine.g.h` @type ^`com.bumptech.glide.GlideContext` := v1 @kind object;
  #L3de9ba.  v4.`com.bumptech.glide.load.engine.g.i` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3de9be.  v4.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` := v1 @kind object;
  #L3de9c2.  v4.`com.bumptech.glide.load.engine.g.j` @type ^`com.bumptech.glide.Priority` := v1 @kind object;
  #L3de9c6.  v4.`com.bumptech.glide.load.engine.g.k` @type ^`com.bumptech.glide.load.engine.j` := v1 @kind object;
  #L3de9ca.  v4.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` := v1 @kind object;
  #L3de9ce.  v4.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` := v1 @kind object;
  #L3de9d2.  v4.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` := v1 @kind object;
  #L3de9d6.  v4.`com.bumptech.glide.load.engine.g.w` @type ^`java.lang.Thread` := v1 @kind object;
  #L3de9da.  v4.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3de9de.  v4.`com.bumptech.glide.load.engine.g.z` @type ^`java.lang.Object` := v1 @kind object;
  #L3de9e2.  v4.`com.bumptech.glide.load.engine.g.A` @type ^`com.bumptech.glide.load.DataSource` := v1 @kind object;
  #L3de9e6.  v4.`com.bumptech.glide.load.engine.g.B` @type ^`com.bumptech.glide.load.data.DataFetcher` := v1 @kind object;
  #L3de9ea.  v2:= 0L;
  #L3de9ee.  v4.`com.bumptech.glide.load.engine.g.t` @type ^`long` := v2 @kind wide;
  #L3de9f2.  v4.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` := v0 @kind boolean;
  #L3de9f6.  v4.`com.bumptech.glide.load.engine.g.v` @type ^`java.lang.Object` := v1 @kind object;
  #L3de9fa.  v0:= v4.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3de9fe.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3dea04.  v0:= v4.`com.bumptech.glide.load.engine.g.e` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3dea08.  call temp:= `release`(v0, v4) @signature `Landroidx/core/util/Pools$Pool;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L3dea0e.  return @kind void;
}
procedure `void` `u`(`com.bumptech.glide.load.engine.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3deb58.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3deb5e.  v0:= temp @kind object;
  #L3deb60.  v3.`com.bumptech.glide.load.engine.g.w` @type ^`java.lang.Thread` := v0 @kind object;
  #L3deb64.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/util/LogTime;.getLogTime:()J` @kind static;
  #L3deb6a.  v0:= temp @kind wide;
  #L3deb6c.  v3.`com.bumptech.glide.load.engine.g.t` @type ^`long` := v0 @kind wide;
  #L3deb70.  v0:= 0I;
  #L3deb72.  v1:= v3.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` @kind boolean;
  #L3deb76.  if v1 != 0 then goto L3debc2;
  #L3deb7a.  v1:= v3.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` @kind object;
  #L3deb7e.  if v1 == 0 then goto L3debc2;
  #L3deb82.  v0:= v3.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` @kind object;
  #L3deb86.  call temp:= `a`(v0) @signature `Lcom/bumptech/glide/load/engine/DataFetcherGenerator;.a:()Z` @kind interface;
  #L3deb8c.  v0:= temp;
  #L3deb8e.  if v0 != 0 then goto L3debc2;
  #L3deb92.  v1:= v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3deb96.  call temp:= `g`(v3, v1) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @kind direct;
  #L3deb9c.  v1:= temp @kind object;
  #L3deb9e.  v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` := v1 @kind object;
  #L3deba2.  call temp:= `f`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.f:()Lcom/bumptech/glide/load/engine/DataFetcherGenerator;` @kind direct;
  #L3deba8.  v1:= temp @kind object;
  #L3debaa.  v3.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` := v1 @kind object;
  #L3debae.  v1:= v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3debb2.  v2:= `@@com.bumptech.glide.load.engine.g$h.d` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3debb6.  if v1 != v2 then goto L3deb72;
  #L3debba.  call `reschedule`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.reschedule:()V` @kind virtual;
  #L3debc0.  return @kind void;
  #L3debc2.  v1:= v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3debc6.  v2:= `@@com.bumptech.glide.load.engine.g$h.f` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3debca.  if v1 == v2 then goto L3debd6;
  #L3debce.  v1:= v3.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` @kind boolean;
  #L3debd2.  if v1 == 0 then goto L3debe0;
  #L3debd6.  if v0 != 0 then goto L3debe0;
  #L3debda.  call `o`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.o:()V` @kind direct;
  #L3debe0.  return @kind void;
}
procedure `com.bumptech.glide.load.engine.Resource` `v`(`com.bumptech.glide.load.engine.g` v6 @kind this, `java.lang.Object` v7 @kind object, `com.bumptech.glide.load.DataSource` v8 @kind object, `com.bumptech.glide.load.engine.LoadPath` v9 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.v:(Ljava/lang/Object;Lcom/bumptech/glide/load/DataSource;Lcom/bumptech/glide/load/engine/LoadPath;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3de3b0.  call temp:= `h`(v6, v8) @signature `Lcom/bumptech/glide/load/engine/g;.h:(Lcom/bumptech/glide/load/DataSource;)Lcom/bumptech/glide/load/Options;` @kind direct;
  #L3de3b6.  v2:= temp @kind object;
  #L3de3b8.  v0:= v6.`com.bumptech.glide.load.engine.g.h` @type ^`com.bumptech.glide.GlideContext` @kind object;
  #L3de3bc.  call temp:= `getRegistry`(v0) @signature `Lcom/bumptech/glide/GlideContext;.getRegistry:()Lcom/bumptech/glide/Registry;` @kind virtual;
  #L3de3c2.  v0:= temp @kind object;
  #L3de3c4.  call temp:= `getRewinder`(v0, v7) @signature `Lcom/bumptech/glide/Registry;.getRewinder:(Ljava/lang/Object;)Lcom/bumptech/glide/load/data/DataRewinder;` @kind virtual;
  #L3de3ca.  v7:= temp @kind object;
  #L3de3cc.  v3:= v6.`com.bumptech.glide.load.engine.g.l` @type ^`int`;
  #L3de3d0.  v4:= v6.`com.bumptech.glide.load.engine.g.m` @type ^`int`;
  #L3de3d4.  v5:= new `com.bumptech.glide.load.engine.g$c`;
  #L3de3d8.  call `<init>`(v5, v6, v8) @signature `Lcom/bumptech/glide/load/engine/g$c;.<init>:(Lcom/bumptech/glide/load/engine/g;Lcom/bumptech/glide/load/DataSource;)V` @kind direct;
  #L3de3de.  v0:= v9 @kind object;
  #L3de3e0.  v1:= v7 @kind object;
  #L3de3e2.  call temp:= `load`(v0, v1, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/engine/LoadPath;.load:(Lcom/bumptech/glide/load/data/DataRewinder;Lcom/bumptech/glide/load/Options;IILcom/bumptech/glide/load/engine/DecodePath$a;)Lcom/bumptech/glide/load/engine/Resource;` @kind virtual;
  #L3de3e8.  v8:= temp @kind object;
  #L3de3ea.  call `cleanup`(v7) @signature `Lcom/bumptech/glide/load/data/DataRewinder;.cleanup:()V` @kind interface;
  #L3de3f0.  return v8 @kind object;
  #L3de3f2.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3de3f4.  call `cleanup`(v7) @signature `Lcom/bumptech/glide/load/data/DataRewinder;.cleanup:()V` @kind interface;
  #L3de3fa.  throw v8;
  catch `java.lang.Throwable` @[L3de3cc..L3de3ea] goto L3de3f2;
}
procedure `void` `w`(`com.bumptech.glide.load.engine.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3debf4.  v0:= `@@com.bumptech.glide.load.engine.g$a.a` @type ^`int`[] @kind object;
  #L3debf8.  v1:= v3.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3debfc.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3dec02.  v1:= temp;
  #L3dec04.  v0:= v0[v1];
  #L3dec08.  v1:= 1I;
  #L3dec0a.  if v0 == v1 then goto L3dec5c;
  #L3dec0e.  v1:= 2I;
  #L3dec10.  if v0 == v1 then goto L3dec54;
  #L3dec14.  v1:= 3I;
  #L3dec16.  if v0 != v1 then goto L3dec22;
  #L3dec1a.  call `e`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.e:()V` @kind direct;
  #L3dec20.  goto L3dec7e;
  #L3dec22.  v0:= new `java.lang.IllegalStateException`;
  #L3dec26.  v1:= new `java.lang.StringBuilder`;
  #L3dec2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dec30.  v2:= "Unrecognized run reason: " @kind object;
  #L3dec34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec3a.  v2:= v3.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3dec3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dec4a.  v1:= temp @kind object;
  #L3dec4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3dec52.  throw v0;
  #L3dec54.  call `u`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.u:()V` @kind direct;
  #L3dec5a.  goto L3dec7e;
  #L3dec5c.  v0:= `@@com.bumptech.glide.load.engine.g$h.a` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3dec60.  call temp:= `g`(v3, v0) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @kind direct;
  #L3dec66.  v0:= temp @kind object;
  #L3dec68.  v3.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` := v0 @kind object;
  #L3dec6c.  call temp:= `f`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.f:()Lcom/bumptech/glide/load/engine/DataFetcherGenerator;` @kind direct;
  #L3dec72.  v0:= temp @kind object;
  #L3dec74.  v3.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` := v0 @kind object;
  #L3dec78.  call `u`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.u:()V` @kind direct;
  #L3dec7e.  return @kind void;
}
procedure `void` `x`(`com.bumptech.glide.load.engine.g` v3 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.x:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3dec90.  v0:= v3.`com.bumptech.glide.load.engine.g.c` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3dec94.  call `throwIfRecycled`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @kind virtual;
  #L3dec9a.  v0:= v3.`com.bumptech.glide.load.engine.g.D` @type ^`boolean` @kind boolean;
  #L3dec9e.  v1:= 1I;
  #L3deca0.  if v0 == 0 then goto L3dece2;
  #L3deca4.  v0:= v3.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3deca8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3decae.  v0:= temp;
  #L3decb0.  if v0 == 0 then goto L3decb8;
  #L3decb4.  v0:= 0I;
  #L3decb6.  goto L3decd2;
  #L3decb8.  v0:= v3.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3decbc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3decc2.  v2:= temp;
  #L3decc4.  v2:= v2 - v1 @kind int;
  #L3decc6.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3deccc.  v0:= temp @kind object;
  #L3decce.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L3decd2.  v1:= new `java.lang.IllegalStateException`;
  #L3decd6.  v2:= "Already notified" @kind object;
  #L3decda.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3dece0.  throw v1;
  #L3dece2.  v3.`com.bumptech.glide.load.engine.g.D` @type ^`boolean` := v1 @kind boolean;
  #L3dece6.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de508.  v0:= 1I;
  #L3de50a.  v1.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` := v0 @kind boolean;
  #L3de50e.  v0:= v1.`com.bumptech.glide.load.engine.g.C` @type ^`com.bumptech.glide.load.engine.DataFetcherGenerator` @kind object;
  #L3de512.  if v0 == 0 then goto L3de51c;
  #L3de516.  call `cancel`(v0) @signature `Lcom/bumptech/glide/load/engine/DataFetcherGenerator;.cancel:()V` @kind interface;
  #L3de51c.  return @kind void;
}
procedure `int` `b`(`com.bumptech.glide.load.engine.g` v2 @kind this, `com.bumptech.glide.load.engine.g` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.b:(Lcom/bumptech/glide/load/engine/g;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de430.  call temp:= `i`(v2) @signature `Lcom/bumptech/glide/load/engine/g;.i:()I` @kind direct;
  #L3de436.  v0:= temp;
  #L3de438.  call temp:= `i`(v3) @signature `Lcom/bumptech/glide/load/engine/g;.i:()I` @kind direct;
  #L3de43e.  v1:= temp;
  #L3de440.  v0:= v0 - v1 @kind int;
  #L3de442.  if v0 != 0 then goto L3de450;
  #L3de446.  v0:= v2.`com.bumptech.glide.load.engine.g.q` @type ^`int`;
  #L3de44a.  v3:= v3.`com.bumptech.glide.load.engine.g.q` @type ^`int`;
  #L3de44e.  v0:= v0 - v3 @kind int;
  #L3de450.  return v0;
}
procedure `int` `compareTo`(`com.bumptech.glide.load.engine.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3de464.  v1:= (`com.bumptech.glide.load.engine.g`) v1 @kind object;
  #L3de468.  call temp:= `b`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/g;.b:(Lcom/bumptech/glide/load/engine/g;)I` @kind virtual;
  #L3de46e.  v1:= temp;
  #L3de470.  return v1;
}
procedure `com.bumptech.glide.util.pool.StateVerifier` `getVerifier`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.getVerifier:()Lcom/bumptech/glide/util/pool/StateVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de418.  v0:= v1.`com.bumptech.glide.load.engine.g.c` @type ^`com.bumptech.glide.util.pool.StateVerifier` @kind object;
  #L3de41c.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.engine.g` `j`(`com.bumptech.glide.load.engine.g` v16 @kind this, `com.bumptech.glide.GlideContext` v17 @kind object, `java.lang.Object` v18 @kind object, `com.bumptech.glide.load.engine.j` v19 @kind object, `com.bumptech.glide.load.Key` v20 @kind object, `int` v21 , `int` v22 , `java.lang.Class` v23 @kind object, `java.lang.Class` v24 @kind object, `com.bumptech.glide.Priority` v25 @kind object, `com.bumptech.glide.load.engine.DiskCacheStrategy` v26 @kind object, `java.util.Map` v27 @kind object, `boolean` v28 , `boolean` v29 , `boolean` v30 , `com.bumptech.glide.load.Options` v31 @kind object, `com.bumptech.glide.load.engine.g$b` v32 @kind object, `int` v33 ) @signature `Lcom/bumptech/glide/load/engine/g;.j:(Lcom/bumptech/glide/GlideContext;Ljava/lang/Object;Lcom/bumptech/glide/load/engine/j;Lcom/bumptech/glide/load/Key;IILjava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/engine/DiskCacheStrategy;Ljava/util/Map;ZZZLcom/bumptech/glide/load/Options;Lcom/bumptech/glide/load/engine/g$b;I)Lcom/bumptech/glide/load/engine/g;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3ddff0.  v0:= v16 @kind object;
  #L3ddff4.  v1:= v0.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3ddff8.  v15:= v0.`com.bumptech.glide.load.engine.g.d` @type ^`com.bumptech.glide.load.engine.g$e` @kind object;
  #L3ddffc.  v2:= v17 @kind object;
  #L3de000.  v3:= v18 @kind object;
  #L3de004.  v4:= v20 @kind object;
  #L3de008.  v5:= v21;
  #L3de00c.  v6:= v22;
  #L3de010.  v7:= v26 @kind object;
  #L3de014.  v8:= v23 @kind object;
  #L3de018.  v9:= v24 @kind object;
  #L3de01c.  v10:= v25 @kind object;
  #L3de020.  v11:= v31 @kind object;
  #L3de024.  v12:= v27 @kind object;
  #L3de028.  v13:= v28;
  #L3de02c.  v14:= v29;
  #L3de030.  call `v`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) @signature `Lcom/bumptech/glide/load/engine/f;.v:(Lcom/bumptech/glide/GlideContext;Ljava/lang/Object;Lcom/bumptech/glide/load/Key;IILcom/bumptech/glide/load/engine/DiskCacheStrategy;Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/Options;Ljava/util/Map;ZZLcom/bumptech/glide/load/engine/g$e;)V` @kind virtual;
  #L3de036.  v1:= v17 @kind object;
  #L3de03a.  v0.`com.bumptech.glide.load.engine.g.h` @type ^`com.bumptech.glide.GlideContext` := v1 @kind object;
  #L3de03e.  v1:= v20 @kind object;
  #L3de042.  v0.`com.bumptech.glide.load.engine.g.i` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3de046.  v1:= v25 @kind object;
  #L3de04a.  v0.`com.bumptech.glide.load.engine.g.j` @type ^`com.bumptech.glide.Priority` := v1 @kind object;
  #L3de04e.  v1:= v19 @kind object;
  #L3de052.  v0.`com.bumptech.glide.load.engine.g.k` @type ^`com.bumptech.glide.load.engine.j` := v1 @kind object;
  #L3de056.  v1:= v21;
  #L3de05a.  v0.`com.bumptech.glide.load.engine.g.l` @type ^`int` := v1;
  #L3de05e.  v1:= v22;
  #L3de062.  v0.`com.bumptech.glide.load.engine.g.m` @type ^`int` := v1;
  #L3de066.  v1:= v26 @kind object;
  #L3de06a.  v0.`com.bumptech.glide.load.engine.g.n` @type ^`com.bumptech.glide.load.engine.DiskCacheStrategy` := v1 @kind object;
  #L3de06e.  v1:= v30;
  #L3de072.  v0.`com.bumptech.glide.load.engine.g.u` @type ^`boolean` := v1 @kind boolean;
  #L3de076.  v1:= v31 @kind object;
  #L3de07a.  v0.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` := v1 @kind object;
  #L3de07e.  v1:= v32 @kind object;
  #L3de082.  v0.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` := v1 @kind object;
  #L3de086.  v1:= v33;
  #L3de08a.  v0.`com.bumptech.glide.load.engine.g.q` @type ^`int` := v1;
  #L3de08e.  v1:= `@@com.bumptech.glide.load.engine.g$g.a` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3de092.  v0.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` := v1 @kind object;
  #L3de096.  v1:= v18 @kind object;
  #L3de09a.  v0.`com.bumptech.glide.load.engine.g.v` @type ^`java.lang.Object` := v1 @kind object;
  #L3de09e.  return v0 @kind object;
}
procedure `void` `onDataFetcherFailed`(`com.bumptech.glide.load.engine.g` v2 @kind this, `com.bumptech.glide.load.Key` v3 @kind object, `java.lang.Exception` v4 @kind object, `com.bumptech.glide.load.data.DataFetcher` v5 @kind object, `com.bumptech.glide.load.DataSource` v6 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.onDataFetcherFailed:(Lcom/bumptech/glide/load/Key;Ljava/lang/Exception;Lcom/bumptech/glide/load/data/DataFetcher;Lcom/bumptech/glide/load/DataSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de818.  call `cleanup`(v5) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3de81e.  v0:= new `com.bumptech.glide.load.engine.GlideException`;
  #L3de822.  v1:= "Fetching data failed" @kind object;
  #L3de826.  call `<init>`(v0, v1, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3de82c.  call temp:= `getDataClass`(v5) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3de832.  v4:= temp @kind object;
  #L3de834.  call `g`(v0, v3, v6, v4) @signature `Lcom/bumptech/glide/load/engine/GlideException;.g:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/DataSource;Ljava/lang/Class;)V` @kind virtual;
  #L3de83a.  v3:= v2.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3de83e.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3de844.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3de84a.  v3:= temp @kind object;
  #L3de84c.  v4:= v2.`com.bumptech.glide.load.engine.g.w` @type ^`java.lang.Thread` @kind object;
  #L3de850.  if v3 == v4 then goto L3de868;
  #L3de854.  v3:= `@@com.bumptech.glide.load.engine.g$g.b` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3de858.  v2.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` := v3 @kind object;
  #L3de85c.  v3:= v2.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` @kind object;
  #L3de860.  call `a`(v3, v2) @signature `Lcom/bumptech/glide/load/engine/g$b;.a:(Lcom/bumptech/glide/load/engine/g;)V` @kind interface;
  #L3de866.  goto L3de86e;
  #L3de868.  call `u`(v2) @signature `Lcom/bumptech/glide/load/engine/g;.u:()V` @kind direct;
  #L3de86e.  return @kind void;
}
procedure `void` `onDataFetcherReady`(`com.bumptech.glide.load.engine.g` v0 @kind this, `com.bumptech.glide.load.Key` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.data.DataFetcher` v3 @kind object, `com.bumptech.glide.load.DataSource` v4 @kind object, `com.bumptech.glide.load.Key` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.onDataFetcherReady:(Lcom/bumptech/glide/load/Key;Ljava/lang/Object;Lcom/bumptech/glide/load/data/DataFetcher;Lcom/bumptech/glide/load/DataSource;Lcom/bumptech/glide/load/Key;)V` @AccessFlag PUBLIC {
    temp;

  #L3de880.  v0.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` := v1 @kind object;
  #L3de884.  v0.`com.bumptech.glide.load.engine.g.z` @type ^`java.lang.Object` := v2 @kind object;
  #L3de888.  v0.`com.bumptech.glide.load.engine.g.B` @type ^`com.bumptech.glide.load.data.DataFetcher` := v3 @kind object;
  #L3de88c.  v0.`com.bumptech.glide.load.engine.g.A` @type ^`com.bumptech.glide.load.DataSource` := v4 @kind object;
  #L3de890.  v0.`com.bumptech.glide.load.engine.g.y` @type ^`com.bumptech.glide.load.Key` := v5 @kind object;
  #L3de894.  v2:= v0.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de898.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/engine/f;.c:()Ljava/util/List;` @kind virtual;
  #L3de89e.  v2:= temp @kind object;
  #L3de8a0.  v3:= 0I;
  #L3de8a2.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3de8a8.  v2:= temp @kind object;
  #L3de8aa.  if v1 == v2 then goto L3de8b0;
  #L3de8ae.  v3:= 1I;
  #L3de8b0.  v0.`com.bumptech.glide.load.engine.g.F` @type ^`boolean` := v3 @kind boolean;
  #L3de8b4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3de8ba.  v1:= temp @kind object;
  #L3de8bc.  v2:= v0.`com.bumptech.glide.load.engine.g.w` @type ^`java.lang.Thread` @kind object;
  #L3de8c0.  if v1 == v2 then goto L3de8d8;
  #L3de8c4.  v1:= `@@com.bumptech.glide.load.engine.g$g.c` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3de8c8.  v0.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` := v1 @kind object;
  #L3de8cc.  v1:= v0.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` @kind object;
  #L3de8d0.  call `a`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/g$b;.a:(Lcom/bumptech/glide/load/engine/g;)V` @kind interface;
  #L3de8d6.  goto L3de8ee;
  #L3de8d8.  v1:= "DecodeJob.decodeFromRetrievedData" @kind object;
  #L3de8dc.  call `beginSection`(v1) @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.beginSection:(Ljava/lang/String;)V` @kind static;
  #L3de8e2.  call `e`(v0) @signature `Lcom/bumptech/glide/load/engine/g;.e:()V` @kind direct;
  #L3de8e8.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3de8ee.  return @kind void;
  #L3de8f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3de8f2.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3de8f8.  throw v1;
  catch `java.lang.Throwable` @[L3de8e2..L3de8e8] goto L3de8f0;
}
procedure `com.bumptech.glide.load.engine.Resource` `r`(`com.bumptech.glide.load.engine.g` v11 @kind this, `com.bumptech.glide.load.DataSource` v12 @kind object, `com.bumptech.glide.load.engine.Resource` v13 @kind object) @signature `Lcom/bumptech/glide/load/engine/g;.r:(Lcom/bumptech/glide/load/DataSource;Lcom/bumptech/glide/load/engine/Resource;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3de238.  call temp:= `get`(v13) @signature `Lcom/bumptech/glide/load/engine/Resource;.get:()Ljava/lang/Object;` @kind interface;
  #L3de23e.  v0:= temp @kind object;
  #L3de240.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3de246.  v8:= temp @kind object;
  #L3de248.  v0:= `@@com.bumptech.glide.load.DataSource.RESOURCE_DISK_CACHE` @type ^`com.bumptech.glide.load.DataSource` @kind object;
  #L3de24c.  v1:= 0I;
  #L3de24e.  if v12 == v0 then goto L3de278;
  #L3de252.  v0:= v11.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de256.  call temp:= `s`(v0, v8) @signature `Lcom/bumptech/glide/load/engine/f;.s:(Ljava/lang/Class;)Lcom/bumptech/glide/load/Transformation;` @kind virtual;
  #L3de25c.  v0:= temp @kind object;
  #L3de25e.  v2:= v11.`com.bumptech.glide.load.engine.g.h` @type ^`com.bumptech.glide.GlideContext` @kind object;
  #L3de262.  v3:= v11.`com.bumptech.glide.load.engine.g.l` @type ^`int`;
  #L3de266.  v4:= v11.`com.bumptech.glide.load.engine.g.m` @type ^`int`;
  #L3de26a.  call temp:= `transform`(v0, v2, v13, v3, v4) @signature `Lcom/bumptech/glide/load/Transformation;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @kind interface;
  #L3de270.  v2:= temp @kind object;
  #L3de272.  v7:= v0 @kind object;
  #L3de274.  v0:= v2 @kind object;
  #L3de276.  goto L3de27c;
  #L3de278.  v0:= v13 @kind object;
  #L3de27a.  v7:= v1 @kind object;
  #L3de27c.  call temp:= `equals`(v13, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3de282.  v2:= temp;
  #L3de284.  if v2 != 0 then goto L3de28e;
  #L3de288.  call `recycle`(v13) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L3de28e.  v13:= v11.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de292.  call temp:= `w`(v13, v0) @signature `Lcom/bumptech/glide/load/engine/f;.w:(Lcom/bumptech/glide/load/engine/Resource;)Z` @kind virtual;
  #L3de298.  v13:= temp;
  #L3de29a.  if v13 == 0 then goto L3de2b8;
  #L3de29e.  v13:= v11.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de2a2.  call temp:= `n`(v13, v0) @signature `Lcom/bumptech/glide/load/engine/f;.n:(Lcom/bumptech/glide/load/engine/Resource;)Lcom/bumptech/glide/load/ResourceEncoder;` @kind virtual;
  #L3de2a8.  v1:= temp @kind object;
  #L3de2aa.  v13:= v11.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3de2ae.  call temp:= `getEncodeStrategy`(v1, v13) @signature `Lcom/bumptech/glide/load/ResourceEncoder;.getEncodeStrategy:(Lcom/bumptech/glide/load/Options;)Lcom/bumptech/glide/load/EncodeStrategy;` @kind interface;
  #L3de2b4.  v13:= temp @kind object;
  #L3de2b6.  goto L3de2bc;
  #L3de2b8.  v13:= `@@com.bumptech.glide.load.EncodeStrategy.NONE` @type ^`com.bumptech.glide.load.EncodeStrategy` @kind object;
  #L3de2bc.  v10:= v1 @kind object;
  #L3de2be.  v1:= v11.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de2c2.  v2:= v11.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de2c6.  call temp:= `y`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/f;.y:(Lcom/bumptech/glide/load/Key;)Z` @kind virtual;
  #L3de2cc.  v1:= temp;
  #L3de2ce.  v2:= 1I;
  #L3de2d0.  v1:= v1 ^~ v2 @kind int;
  #L3de2d2.  v3:= v11.`com.bumptech.glide.load.engine.g.n` @type ^`com.bumptech.glide.load.engine.DiskCacheStrategy` @kind object;
  #L3de2d6.  call temp:= `isResourceCacheable`(v3, v1, v12, v13) @signature `Lcom/bumptech/glide/load/engine/DiskCacheStrategy;.isResourceCacheable:(ZLcom/bumptech/glide/load/DataSource;Lcom/bumptech/glide/load/EncodeStrategy;)Z` @kind virtual;
  #L3de2dc.  v12:= temp;
  #L3de2de.  if v12 == 0 then goto L3de39e;
  #L3de2e2.  if v10 == 0 then goto L3de382;
  #L3de2e6.  v12:= `@@com.bumptech.glide.load.engine.g$a.c` @type ^`int`[] @kind object;
  #L3de2ea.  call temp:= `ordinal`(v13) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3de2f0.  v1:= temp;
  #L3de2f2.  v12:= v12[v1];
  #L3de2f6.  if v12 == v2 then goto L3de35c;
  #L3de2fa.  v1:= 2I;
  #L3de2fc.  if v12 != v1 then goto L3de32e;
  #L3de300.  v12:= new `com.bumptech.glide.load.engine.p`;
  #L3de304.  v13:= v11.`com.bumptech.glide.load.engine.g.a` @type ^`com.bumptech.glide.load.engine.f` @kind object;
  #L3de308.  call temp:= `b`(v13) @signature `Lcom/bumptech/glide/load/engine/f;.b:()Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;` @kind virtual;
  #L3de30e.  v2:= temp @kind object;
  #L3de310.  v3:= v11.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de314.  v4:= v11.`com.bumptech.glide.load.engine.g.i` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de318.  v5:= v11.`com.bumptech.glide.load.engine.g.l` @type ^`int`;
  #L3de31c.  v6:= v11.`com.bumptech.glide.load.engine.g.m` @type ^`int`;
  #L3de320.  v9:= v11.`com.bumptech.glide.load.engine.g.o` @type ^`com.bumptech.glide.load.Options` @kind object;
  #L3de324.  v1:= v12 @kind object;
  #L3de326.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lcom/bumptech/glide/load/engine/p;.<init>:(Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/Key;IILcom/bumptech/glide/load/Transformation;Ljava/lang/Class;Lcom/bumptech/glide/load/Options;)V` @kind direct;
  #L3de32c.  goto L3de36e;
  #L3de32e.  v12:= new `java.lang.IllegalArgumentException`;
  #L3de332.  v0:= new `java.lang.StringBuilder`;
  #L3de336.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de33c.  v1:= "Unknown strategy: " @kind object;
  #L3de340.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de346.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de34c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de352.  v13:= temp @kind object;
  #L3de354.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3de35a.  throw v12;
  #L3de35c.  v12:= new `com.bumptech.glide.load.engine.d`;
  #L3de360.  v13:= v11.`com.bumptech.glide.load.engine.g.x` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de364.  v1:= v11.`com.bumptech.glide.load.engine.g.i` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3de368.  call `<init>`(v12, v13, v1) @signature `Lcom/bumptech/glide/load/engine/d;.<init>:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/Key;)V` @kind direct;
  #L3de36e.  call temp:= `b`(v0) @signature `Lcom/bumptech/glide/load/engine/n;.b:(Lcom/bumptech/glide/load/engine/Resource;)Lcom/bumptech/glide/load/engine/n;` @kind static;
  #L3de374.  v0:= temp @kind object;
  #L3de376.  v13:= v11.`com.bumptech.glide.load.engine.g.f` @type ^`com.bumptech.glide.load.engine.g$d` @kind object;
  #L3de37a.  call `d`(v13, v12, v10, v0) @signature `Lcom/bumptech/glide/load/engine/g$d;.d:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/ResourceEncoder;Lcom/bumptech/glide/load/engine/n;)V` @kind virtual;
  #L3de380.  goto L3de39e;
  #L3de382.  v12:= new `com.bumptech.glide.Registry$NoResultEncoderAvailableException`;
  #L3de386.  call temp:= `get`(v0) @signature `Lcom/bumptech/glide/load/engine/Resource;.get:()Ljava/lang/Object;` @kind interface;
  #L3de38c.  v13:= temp @kind object;
  #L3de38e.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3de394.  v13:= temp @kind object;
  #L3de396.  call `<init>`(v12, v13) @signature `Lcom/bumptech/glide/Registry$NoResultEncoderAvailableException;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L3de39c.  throw v12;
  #L3de39e.  return v0 @kind object;
}
procedure `void` `reschedule`(`com.bumptech.glide.load.engine.g` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.reschedule:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dea20.  v0:= `@@com.bumptech.glide.load.engine.g$g.b` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3dea24.  v1.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` := v0 @kind object;
  #L3dea28.  v0:= v1.`com.bumptech.glide.load.engine.g.p` @type ^`com.bumptech.glide.load.engine.g$b` @kind object;
  #L3dea2c.  call `a`(v0, v1) @signature `Lcom/bumptech/glide/load/engine/g$b;.a:(Lcom/bumptech/glide/load/engine/g;)V` @kind interface;
  #L3dea32.  return @kind void;
}
procedure `void` `run`(`com.bumptech.glide.load.engine.g` v5 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3dea44.  v0:= "DecodeJob" @kind object;
  #L3dea48.  v1:= v5.`com.bumptech.glide.load.engine.g.s` @type ^`com.bumptech.glide.load.engine.g$g` @kind object;
  #L3dea4c.  v2:= v5.`com.bumptech.glide.load.engine.g.v` @type ^`java.lang.Object` @kind object;
  #L3dea50.  v3:= "DecodeJob#run(reason=%s, model=%s)" @kind object;
  #L3dea54.  call `beginSectionFormat`(v3, v1, v2) @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.beginSectionFormat:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L3dea5a.  v1:= v5.`com.bumptech.glide.load.engine.g.B` @type ^`com.bumptech.glide.load.data.DataFetcher` @kind object;
  #L3dea5e.  v2:= v5.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` @kind boolean;
  #L3dea62.  if v2 == 0 then goto L3dea7e;
  #L3dea66.  call `o`(v5) @signature `Lcom/bumptech/glide/load/engine/g;.o:()V` @kind direct;
  #L3dea6c.  if v1 == 0 then goto L3dea76;
  #L3dea70.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3dea76.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3dea7c.  return @kind void;
  #L3dea7e.  call `w`(v5) @signature `Lcom/bumptech/glide/load/engine/g;.w:()V` @kind direct;
  #L3dea84.  if v1 == 0 then goto L3dea8e;
  #L3dea88.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3dea8e.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3dea94.  return @kind void;
  #L3dea96.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dea98.  v3:= 3I;
  #L3dea9a.  call temp:= `isLoggable`(v0, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3deaa0.  v3:= temp;
  #L3deaa2.  if v3 == 0 then goto L3deae6;
  #L3deaa6.  v3:= new `java.lang.StringBuilder`;
  #L3deaaa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3deab0.  v4:= "DecodeJob threw unexpectedly, isCancelled: " @kind object;
  #L3deab4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deaba.  v4:= v5.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` @kind boolean;
  #L3deabe.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deac4.  v4:= ", stage: " @kind object;
  #L3deac8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deace.  v4:= v5.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3dead2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dead8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3deade.  v3:= temp @kind object;
  #L3deae0.  call temp:= `d`(v0, v3, v2) @signature `Landroid/util/Log;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3deae6.  v0:= v5.`com.bumptech.glide.load.engine.g.r` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3deaea.  v3:= `@@com.bumptech.glide.load.engine.g$h.e` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3deaee.  if v0 == v3 then goto L3deb02;
  #L3deaf2.  v0:= v5.`com.bumptech.glide.load.engine.g.b` @type ^`java.util.List` @kind object;
  #L3deaf6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3deafc.  call `o`(v5) @signature `Lcom/bumptech/glide/load/engine/g;.o:()V` @kind direct;
  #L3deb02.  v0:= v5.`com.bumptech.glide.load.engine.g.E` @type ^`boolean` @kind boolean;
  #L3deb06.  if v0 != 0 then goto L3deb0c;
  #L3deb0a.  throw v2;
  #L3deb0c.  throw v2;
  #L3deb0e.  v0:= Exception @type ^`com.bumptech.glide.load.engine.b` @kind object;
  #L3deb10.  throw v0;
  #L3deb12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3deb14.  if v1 == 0 then goto L3deb1e;
  #L3deb18.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3deb1e.  call `endSection`() @signature `Lcom/bumptech/glide/util/pool/GlideTrace;.endSection:()V` @kind static;
  #L3deb24.  throw v0;
  catch `com.bumptech.glide.load.engine.b` @[L3dea5e..L3dea6c] goto L3deb0e;
  catch `java.lang.Throwable` @[L3dea5e..L3dea6c] goto L3dea96;
  catch `com.bumptech.glide.load.engine.b` @[L3dea7e..L3dea84] goto L3deb0e;
  catch `java.lang.Throwable` @[L3dea7e..L3dea84] goto L3dea96;
  catch `java.lang.Throwable` @[L3dea9a..L3deb12] goto L3deb12;
}
procedure `void` `s`(`com.bumptech.glide.load.engine.g` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/g;.s:(Z)V` @AccessFlag  {
    temp;
    v0;

  #L3de968.  v0:= v1.`com.bumptech.glide.load.engine.g.g` @type ^`com.bumptech.glide.load.engine.g$f` @kind object;
  #L3de96c.  call temp:= `d`(v0, v2) @signature `Lcom/bumptech/glide/load/engine/g$f;.d:(Z)Z` @kind virtual;
  #L3de972.  v2:= temp;
  #L3de974.  if v2 == 0 then goto L3de97e;
  #L3de978.  call `t`(v1) @signature `Lcom/bumptech/glide/load/engine/g;.t:()V` @kind direct;
  #L3de97e.  return @kind void;
}
procedure `boolean` `y`(`com.bumptech.glide.load.engine.g` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/g;.y:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dde88.  v0:= `@@com.bumptech.glide.load.engine.g$h.a` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3dde8c.  call temp:= `g`(v2, v0) @signature `Lcom/bumptech/glide/load/engine/g;.g:(Lcom/bumptech/glide/load/engine/g$h;)Lcom/bumptech/glide/load/engine/g$h;` @kind direct;
  #L3dde92.  v0:= temp @kind object;
  #L3dde94.  v1:= `@@com.bumptech.glide.load.engine.g$h.b` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3dde98.  if v0 == v1 then goto L3ddeaa;
  #L3dde9c.  v1:= `@@com.bumptech.glide.load.engine.g$h.c` @type ^`com.bumptech.glide.load.engine.g$h` @kind object;
  #L3ddea0.  if v0 != v1 then goto L3ddea6;
  #L3ddea4.  goto L3ddeaa;
  #L3ddea6.  v0:= 0I;
  #L3ddea8.  goto L3ddeac;
  #L3ddeaa.  v0:= 1I;
  #L3ddeac.  return v0;
}
