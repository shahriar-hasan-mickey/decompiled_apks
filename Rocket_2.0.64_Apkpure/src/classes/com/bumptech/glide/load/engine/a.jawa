record `com.bumptech.glide.load.engine.a` @kind class @AccessFlag FINAL {
  `boolean` `com.bumptech.glide.load.engine.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `com.bumptech.glide.load.engine.a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.bumptech.glide.load.engine.a.c` @AccessFlag FINAL;
  `java.lang.ref.ReferenceQueue` `com.bumptech.glide.load.engine.a.d` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.l$a` `com.bumptech.glide.load.engine.a.e` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.engine.a.f` @AccessFlag PRIVATE_VOLATILE;
  `com.bumptech.glide.load.engine.a$c` `com.bumptech.glide.load.engine.a.g` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 ) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3dcc80.  v0:= new `com.bumptech.glide.load.engine.a$a`;
  #L3dcc84.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/engine/a$a;.<init>:()V` @kind direct;
  #L3dcc8a.  call temp:= `newSingleThreadExecutor`(v0) @signature `Ljava/util/concurrent/Executors;.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;` @kind static;
  #L3dcc90.  v0:= temp @kind object;
  #L3dcc92.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @kind direct;
  #L3dcc98.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.engine.a` v1 @kind this, `boolean` v2 , `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.<init>:(ZLjava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3dccac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dccb2.  v0:= new `java.util.HashMap`;
  #L3dccb6.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3dccbc.  v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` := v0 @kind object;
  #L3dccc0.  v0:= new `java.lang.ref.ReferenceQueue`;
  #L3dccc4.  call `<init>`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L3dccca.  v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` := v0 @kind object;
  #L3dccce.  v1.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` := v2 @kind boolean;
  #L3dccd2.  v1.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L3dccd6.  v2:= new `com.bumptech.glide.load.engine.a$b`;
  #L3dccda.  call `<init>`(v2, v1) @signature `Lcom/bumptech/glide/load/engine/a$b;.<init>:(Lcom/bumptech/glide/load/engine/a;)V` @kind direct;
  #L3dcce0.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3dcce6.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.engine.a` v3 @kind this, `com.bumptech.glide.load.Key` v4 @kind object, `com.bumptech.glide.load.engine.l` v5 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.a:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3dccf8.  @monitorenter v3
  #L3dccfa.  v0:= new `com.bumptech.glide.load.engine.a$d`;
  #L3dccfe.  v1:= v3.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L3dcd02.  v2:= v3.`com.bumptech.glide.load.engine.a.a` @type ^`boolean` @kind boolean;
  #L3dcd06.  call `<init>`(v0, v4, v5, v1, v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.<init>:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;Ljava/lang/ref/ReferenceQueue;Z)V` @kind direct;
  #L3dcd0c.  v5:= v3.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3dcd10.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dcd16.  v4:= temp @kind object;
  #L3dcd18.  v4:= (`com.bumptech.glide.load.engine.a$d`) v4 @kind object;
  #L3dcd1c.  if v4 == 0 then goto L3dcd26;
  #L3dcd20.  call `a`(v4) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L3dcd26.  @monitorexit v3
  #L3dcd28.  return @kind void;
  #L3dcd2a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dcd2c.  @monitorexit v3
  #L3dcd2e.  throw v4;
  catch `java.lang.Throwable` @[L3dccfa..L3dcd26] goto L3dcd2a;
}
procedure `void` `b`(`com.bumptech.glide.load.engine.a` v1 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L3dcd4c.  v0:= v1.`com.bumptech.glide.load.engine.a.f` @type ^`boolean` @kind boolean;
  #L3dcd50.  if v0 != 0 then goto L3dcd8a;
  #L3dcd54.  v0:= v1.`com.bumptech.glide.load.engine.a.d` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L3dcd58.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L3dcd5e.  v0:= temp @kind object;
  #L3dcd60.  v0:= (`com.bumptech.glide.load.engine.a$d`) v0 @kind object;
  #L3dcd64.  call `c`(v1, v0) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L3dcd6a.  v0:= v1.`com.bumptech.glide.load.engine.a.g` @type ^`com.bumptech.glide.load.engine.a$c` @kind object;
  #L3dcd6e.  if v0 == 0 then goto L3dcd4c;
  #L3dcd72.  call `a`(v0) @signature `Lcom/bumptech/glide/load/engine/a$c;.a:()V` @kind interface;
  #L3dcd78.  goto L3dcd4c;
  #L3dcd7a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3dcd80.  v0:= temp @kind object;
  #L3dcd82.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3dcd88.  goto L3dcd4c;
  #L3dcd8a.  return @kind void;
  catch `java.lang.InterruptedException` @[L3dcd54..L3dcd78] goto L3dcd7a;
}
procedure `void` `c`(`com.bumptech.glide.load.engine.a` v7 @kind this, `com.bumptech.glide.load.engine.a$d` v8 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dcdac.  @monitorenter v7
  #L3dcdae.  v0:= v7.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3dcdb2.  v1:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dcdb6.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dcdbc.  v0:= v8.`com.bumptech.glide.load.engine.a$d.b` @type ^`boolean` @kind boolean;
  #L3dcdc0.  if v0 == 0 then goto L3dcdf8;
  #L3dcdc4.  v2:= v8.`com.bumptech.glide.load.engine.a$d.c` @type ^`com.bumptech.glide.load.engine.Resource` @kind object;
  #L3dcdc8.  if v2 != 0 then goto L3dcdce;
  #L3dcdcc.  goto L3dcdf8;
  #L3dcdce.  @monitorexit v7
  #L3dcdd0.  v0:= new `com.bumptech.glide.load.engine.l`;
  #L3dcdd4.  v3:= 1I;
  #L3dcdd6.  v4:= 0I;
  #L3dcdd8.  v5:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dcddc.  v6:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3dcde0.  v1:= v0 @kind object;
  #L3dcde2.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lcom/bumptech/glide/load/engine/l;.<init>:(Lcom/bumptech/glide/load/engine/Resource;ZZLcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l$a;)V` @kind direct;
  #L3dcde8.  v1:= v7.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` @kind object;
  #L3dcdec.  v8:= v8.`com.bumptech.glide.load.engine.a$d.a` @type ^`com.bumptech.glide.load.Key` @kind object;
  #L3dcdf0.  call `onResourceReleased`(v1, v8, v0) @signature `Lcom/bumptech/glide/load/engine/l$a;.onResourceReleased:(Lcom/bumptech/glide/load/Key;Lcom/bumptech/glide/load/engine/l;)V` @kind interface;
  #L3dcdf6.  return @kind void;
  #L3dcdf8.  @monitorexit v7
  #L3dcdfa.  return @kind void;
  #L3dcdfc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dcdfe.  @monitorexit v7
  #L3dce00.  throw v8;
  catch `java.lang.Throwable` @[L3dcdae..L3dcdd0] goto L3dcdfc;
  catch `java.lang.Throwable` @[L3dcdf8..L3dce00] goto L3dcdfc;
}
procedure `void` `d`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.Key` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.d:(Lcom/bumptech/glide/load/Key;)V` @AccessFlag  {
    temp;
    v0;

  #L3dce28.  @monitorenter v1
  #L3dce2a.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3dce2e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dce34.  v2:= temp @kind object;
  #L3dce36.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L3dce3a.  if v2 == 0 then goto L3dce44;
  #L3dce3e.  call `a`(v2) @signature `Lcom/bumptech/glide/load/engine/a$d;.a:()V` @kind virtual;
  #L3dce44.  @monitorexit v1
  #L3dce46.  return @kind void;
  #L3dce48.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dce4a.  @monitorexit v1
  #L3dce4c.  throw v2;
  catch `java.lang.Throwable` @[L3dce2a..L3dce44] goto L3dce48;
}
procedure `com.bumptech.glide.load.engine.l` `e`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.Key` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.e:(Lcom/bumptech/glide/load/Key;)Lcom/bumptech/glide/load/engine/l;` @AccessFlag  {
    temp;
    v0;

  #L3dcc20.  @monitorenter v1
  #L3dcc22.  v0:= v1.`com.bumptech.glide.load.engine.a.c` @type ^`java.util.Map` @kind object;
  #L3dcc26.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3dcc2c.  v2:= temp @kind object;
  #L3dcc2e.  v2:= (`com.bumptech.glide.load.engine.a$d`) v2 @kind object;
  #L3dcc32.  if v2 != 0 then goto L3dcc3c;
  #L3dcc36.  v2:= 0I;
  #L3dcc38.  @monitorexit v1
  #L3dcc3a.  return v2 @kind object;
  #L3dcc3c.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3dcc42.  v0:= temp @kind object;
  #L3dcc44.  v0:= (`com.bumptech.glide.load.engine.l`) v0 @kind object;
  #L3dcc48.  if v0 != 0 then goto L3dcc52;
  #L3dcc4c.  call `c`(v1, v2) @signature `Lcom/bumptech/glide/load/engine/a;.c:(Lcom/bumptech/glide/load/engine/a$d;)V` @kind virtual;
  #L3dcc52.  @monitorexit v1
  #L3dcc54.  return v0 @kind object;
  #L3dcc56.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dcc58.  @monitorexit v1
  #L3dcc5a.  throw v2;
  catch `java.lang.Throwable` @[L3dcc22..L3dcc32] goto L3dcc56;
  catch `java.lang.Throwable` @[L3dcc3c..L3dcc52] goto L3dcc56;
}
procedure `void` `f`(`com.bumptech.glide.load.engine.a` v1 @kind this, `com.bumptech.glide.load.engine.l$a` v2 @kind object) @signature `Lcom/bumptech/glide/load/engine/a;.f:(Lcom/bumptech/glide/load/engine/l$a;)V` @AccessFlag  {
    temp;
    v0;

  #L3dce6c.  @monitorenter v2
  #L3dce6e.  @monitorenter v1
  #L3dce70.  v1.`com.bumptech.glide.load.engine.a.e` @type ^`com.bumptech.glide.load.engine.l$a` := v2 @kind object;
  #L3dce74.  @monitorexit v1
  #L3dce76.  @monitorexit v2
  #L3dce78.  return @kind void;
  #L3dce7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dce7c.  @monitorexit v1
  #L3dce7e.  throw v0;
  #L3dce80.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3dce82.  @monitorexit v2
  #L3dce84.  throw v0;
  catch `java.lang.Throwable` @[L3dce6e..L3dce70] goto L3dce80;
  catch `java.lang.Throwable` @[L3dce70..L3dce76] goto L3dce7a;
  catch `java.lang.Throwable` @[L3dce76..L3dce78] goto L3dce80;
  catch `java.lang.Throwable` @[L3dce7c..L3dce7e] goto L3dce7a;
  catch `java.lang.Throwable` @[L3dce7e..L3dce84] goto L3dce80;
}
procedure `void` `g`(`com.bumptech.glide.load.engine.a` v2 @kind this) @signature `Lcom/bumptech/glide/load/engine/a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3dcec8.  v0:= 1I;
  #L3dceca.  v2.`com.bumptech.glide.load.engine.a.f` @type ^`boolean` := v0 @kind boolean;
  #L3dcece.  v0:= v2.`com.bumptech.glide.load.engine.a.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3dced2.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.ExecutorService` @kind boolean;
  #L3dced6.  if v1 == 0 then goto L3dcee4;
  #L3dceda.  v0:= (`java.util.concurrent.ExecutorService`) v0 @kind object;
  #L3dcede.  call `shutdownAndAwaitTermination`(v0) @signature `Lcom/bumptech/glide/util/Executors;.shutdownAndAwaitTermination:(Ljava/util/concurrent/ExecutorService;)V` @kind static;
  #L3dcee4.  return @kind void;
}
