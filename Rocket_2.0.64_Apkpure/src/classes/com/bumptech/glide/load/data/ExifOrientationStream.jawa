record `com.bumptech.glide.load.data.ExifOrientationStream` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.FilterInputStream` @kind class {
  `byte` `com.bumptech.glide.load.data.ExifOrientationStream.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.data.ExifOrientationStream.b` @AccessFlag PRIVATE;
}
global `byte`[] `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3db520.  v0:= 29I;
  #L3db524.  v0:= new `byte`[v0];
  #L3db528.  goto L3db544;
  #L3db52e.  `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] := v0 @kind object;
  #L3db532.  v0:= length @variable v0;
  #L3db534.  `@@com.bumptech.glide.load.data.ExifOrientationStream.d` @type ^`int` := v0;
  #L3db538.  v0:= v0 + 2;
  #L3db53c.  `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int` := v0;
  #L3db540.  return @kind void;
  #L3db542.  
  #L3db544.  v0:= (-1I, -31I, 0I, 28I, 69I, 120I, 105I, 102I, 0I, 0I, 77I, 77I, 0I, 0I, 0I, 0I, 0I, 8I, 0I, 1I, 1I, 18I, 0I, 2I, 0I, 0I, 0I, 1I, 0I) @kind object;
  #L3db569.  goto L3db52e;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.ExifOrientationStream` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3db57c.  call `<init>`(v2, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3db582.  v3:= -1I;
  #L3db584.  if v4 < v3 then goto L3db598;
  #L3db588.  v3:= 8I;
  #L3db58c.  if v4 > v3 then goto L3db598;
  #L3db590.  v3:= (`byte`) v4 @kind i2b;
  #L3db592.  v2.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` := v3 @kind byte;
  #L3db596.  return @kind void;
  #L3db598.  v3:= new `java.lang.IllegalArgumentException`;
  #L3db59c.  v0:= new `java.lang.StringBuilder`;
  #L3db5a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3db5a6.  v1:= "Cannot add invalid orientation: " @kind object;
  #L3db5aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db5b0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3db5b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3db5bc.  v4:= temp @kind object;
  #L3db5be.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3db5c4.  throw v3;
}
procedure `void` `mark`(`com.bumptech.glide.load.data.ExifOrientationStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3db5d8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3db5dc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3db5e2.  throw v1;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db408.  v0:= 0I;
  #L3db40a.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db41c.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db420.  v1:= 2I;
  #L3db422.  if v0 < v1 then goto L3db44a;
  #L3db426.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int`;
  #L3db42a.  if v0 <= v2 then goto L3db430;
  #L3db42e.  goto L3db44a;
  #L3db430.  if v0 != v2 then goto L3db43a;
  #L3db434.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` @kind byte;
  #L3db438.  goto L3db452;
  #L3db43a.  v2:= `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] @kind object;
  #L3db43e.  v0:= v0 - v1 @kind int;
  #L3db440.  v0:= v2[v0] @kind byte;
  #L3db444.  v0:= v0 ^& 255;
  #L3db448.  goto L3db452;
  #L3db44a.  call temp:= `read`(v3) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L3db450.  v0:= temp;
  #L3db452.  v1:= -1I;
  #L3db454.  if v0 == v1 then goto L3db464;
  #L3db458.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db45c.  v1:= v1 + 1;
  #L3db460.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v1;
  #L3db464.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db478.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db47c.  v1:= `@@com.bumptech.glide.load.data.ExifOrientationStream.e` @type ^`int`;
  #L3db480.  if v0 <= v1 then goto L3db48e;
  #L3db484.  call temp:= `read`(v3, v4, v5, v6) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3db48a.  v4:= temp;
  #L3db48c.  goto L3db4cc;
  #L3db48e.  if v0 != v1 then goto L3db49e;
  #L3db492.  v6:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.a` @type ^`byte` @kind byte;
  #L3db496.  v4[v5]:= v6 @kind byte;
  #L3db49a.  v4:= 1I;
  #L3db49c.  goto L3db4cc;
  #L3db49e.  v2:= 2I;
  #L3db4a0.  if v0 >= v2 then goto L3db4b0;
  #L3db4a4.  v2:= v2 - v0 @kind int;
  #L3db4a6.  call temp:= `read`(v3, v4, v5, v2) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3db4ac.  v4:= temp;
  #L3db4ae.  goto L3db4cc;
  #L3db4b0.  v1:= v1 - v0 @kind int;
  #L3db4b2.  call temp:= `min`(v1, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3db4b8.  v6:= temp;
  #L3db4ba.  v0:= `@@com.bumptech.glide.load.data.ExifOrientationStream.c` @type ^`byte`[] @kind object;
  #L3db4be.  v1:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db4c2.  v1:= v1 - v2 @kind int;
  #L3db4c4.  call `arraycopy`(v0, v1, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3db4ca.  v4:= v6;
  #L3db4cc.  if v4 <= 0 then goto L3db4da;
  #L3db4d0.  v5:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db4d4.  v5:= v5 + v4 @kind int;
  #L3db4d6.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v5;
  #L3db4da.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.load.data.ExifOrientationStream` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db5f4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3db5f8.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3db5fe.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.data.ExifOrientationStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/load/data/ExifOrientationStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db4ec.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L3db4f2.  v4:= temp @kind wide;
  #L3db4f4.  v0:= 0L;
  #L3db4f8.  v2:= lcmp(v4, v0);
  #L3db4fc.  if v2 <= 0 then goto L3db50e;
  #L3db500.  v0:= v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int`;
  #L3db504.  v0:= (`long`) v0 @kind i2l;
  #L3db506.  v0:= v0 + v4 @kind long;
  #L3db508.  v1:= (`int`) v0 @kind l2i;
  #L3db50a.  v3.`com.bumptech.glide.load.data.ExifOrientationStream.b` @type ^`int` := v1;
  #L3db50e.  return v4 @kind wide;
}
