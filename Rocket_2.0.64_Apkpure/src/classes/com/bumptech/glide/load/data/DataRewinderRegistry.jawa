record `com.bumptech.glide.load.data.DataRewinderRegistry` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.load.data.DataRewinderRegistry.a` @AccessFlag PRIVATE_FINAL;
}
global `com.bumptech.glide.load.data.DataRewinder$Factory` `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3db384.  v0:= new `com.bumptech.glide.load.data.DataRewinderRegistry$a`;
  #L3db388.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry$a;.<init>:()V` @kind direct;
  #L3db38e.  `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @type ^`com.bumptech.glide.load.data.DataRewinder$Factory` := v0 @kind object;
  #L3db392.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.data.DataRewinderRegistry` v1 @kind this) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3db3a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db3aa.  v0:= new `java.util.HashMap`;
  #L3db3ae.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3db3b4.  v1.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` := v0 @kind object;
  #L3db3b8.  return @kind void;
}
procedure `com.bumptech.glide.load.data.DataRewinder` `build`(`com.bumptech.glide.load.data.DataRewinderRegistry` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/data/DataRewinder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3db2e0.  @monitorenter v5
  #L3db2e2.  call temp:= `checkNotNull`(v6) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3db2e8.  v0:= v5.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3db2ec.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3db2f2.  v1:= temp @kind object;
  #L3db2f4.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3db2fa.  v0:= temp @kind object;
  #L3db2fc.  v0:= (`com.bumptech.glide.load.data.DataRewinder$Factory`) v0 @kind object;
  #L3db300.  if v0 != 0 then goto L3db34e;
  #L3db304.  v1:= v5.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3db308.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L3db30e.  v1:= temp @kind object;
  #L3db310.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3db316.  v1:= temp @kind object;
  #L3db318.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3db31e.  v2:= temp;
  #L3db320.  if v2 == 0 then goto L3db34e;
  #L3db324.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3db32a.  v2:= temp @kind object;
  #L3db32c.  v2:= (`com.bumptech.glide.load.data.DataRewinder$Factory`) v2 @kind object;
  #L3db330.  call temp:= `getDataClass`(v2) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3db336.  v3:= temp @kind object;
  #L3db338.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3db33e.  v4:= temp @kind object;
  #L3db340.  call temp:= `isAssignableFrom`(v3, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3db346.  v3:= temp;
  #L3db348.  if v3 == 0 then goto L3db318;
  #L3db34c.  v0:= v2 @kind object;
  #L3db34e.  if v0 != 0 then goto L3db356;
  #L3db352.  v0:= `@@com.bumptech.glide.load.data.DataRewinderRegistry.b` @type ^`com.bumptech.glide.load.data.DataRewinder$Factory` @kind object;
  #L3db356.  call temp:= `build`(v0, v6) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.build:(Ljava/lang/Object;)Lcom/bumptech/glide/load/data/DataRewinder;` @kind interface;
  #L3db35c.  v6:= temp @kind object;
  #L3db35e.  @monitorexit v5
  #L3db360.  return v6 @kind object;
  #L3db362.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db364.  @monitorexit v5
  #L3db366.  throw v6;
  catch `java.lang.Throwable` @[L3db2e2..L3db35e] goto L3db362;
}
procedure `void` `register`(`com.bumptech.glide.load.data.DataRewinderRegistry` v2 @kind this, `com.bumptech.glide.load.data.DataRewinder$Factory` v3 @kind object) @signature `Lcom/bumptech/glide/load/data/DataRewinderRegistry;.register:(Lcom/bumptech/glide/load/data/DataRewinder$Factory;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db3cc.  @monitorenter v2
  #L3db3ce.  v0:= v2.`com.bumptech.glide.load.data.DataRewinderRegistry.a` @type ^`java.util.Map` @kind object;
  #L3db3d2.  call temp:= `getDataClass`(v3) @signature `Lcom/bumptech/glide/load/data/DataRewinder$Factory;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3db3d8.  v1:= temp @kind object;
  #L3db3da.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3db3e0.  @monitorexit v2
  #L3db3e2.  return @kind void;
  #L3db3e4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3db3e6.  @monitorexit v2
  #L3db3e8.  throw v3;
  catch `java.lang.Throwable` @[L3db3ce..L3db3e0] goto L3db3e4;
}
