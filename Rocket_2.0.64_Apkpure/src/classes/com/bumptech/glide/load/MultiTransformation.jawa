record `com.bumptech.glide.load.MultiTransformation` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Transformation` @kind interface {
  `java.util.Collection` `com.bumptech.glide.load.MultiTransformation.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da9a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da9ae.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3da9b4.  v0:= temp;
  #L3da9b6.  if v0 != 0 then goto L3da9c0;
  #L3da9ba.  v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` := v2 @kind object;
  #L3da9be.  return @kind void;
  #L3da9c0.  v2:= new `java.lang.IllegalArgumentException`;
  #L3da9c4.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L3da9c8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da9ce.  throw v2;
}
procedure `void` `<init>`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `com.bumptech.glide.load.Transformation`[] v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.<init>:([Lcom/bumptech/glide/load/Transformation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da96c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da972.  v0:= length @variable v2;
  #L3da974.  if v0 == 0 then goto L3da986;
  #L3da978.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3da97e.  v2:= temp @kind object;
  #L3da980.  v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` := v2 @kind object;
  #L3da984.  return @kind void;
  #L3da986.  v2:= new `java.lang.IllegalArgumentException`;
  #L3da98a.  v0:= "MultiTransformation must contain at least one Transformation" @kind object;
  #L3da98e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3da994.  throw v2;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da8b0.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.MultiTransformation` @kind boolean;
  #L3da8b4.  if v0 == 0 then goto L3da8ce;
  #L3da8b8.  v2:= (`com.bumptech.glide.load.MultiTransformation`) v2 @kind object;
  #L3da8bc.  v0:= v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3da8c0.  v2:= v2.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3da8c4.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Collection;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3da8ca.  v2:= temp;
  #L3da8cc.  return v2;
  #L3da8ce.  v2:= 0I;
  #L3da8d0.  return v2;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.MultiTransformation` v1 @kind this) @signature `Lcom/bumptech/glide/load/MultiTransformation;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da94c.  v0:= v1.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3da950.  call temp:= `hashCode`(v0) @signature `Ljava/util/Collection;.hashCode:()I` @kind interface;
  #L3da956.  v0:= temp;
  #L3da958.  return v0;
}
procedure `com.bumptech.glide.load.engine.Resource` `transform`(`com.bumptech.glide.load.MultiTransformation` v4 @kind this, `android.content.Context` v5 @kind object, `com.bumptech.glide.load.engine.Resource` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/bumptech/glide/load/MultiTransformation;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3da8e4.  v0:= v4.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3da8e8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3da8ee.  v0:= temp @kind object;
  #L3da8f0.  v1:= v6 @kind object;
  #L3da8f2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3da8f8.  v2:= temp;
  #L3da8fa.  if v2 == 0 then goto L3da938;
  #L3da8fe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3da904.  v2:= temp @kind object;
  #L3da906.  v2:= (`com.bumptech.glide.load.Transformation`) v2 @kind object;
  #L3da90a.  call temp:= `transform`(v2, v5, v1, v7, v8) @signature `Lcom/bumptech/glide/load/Transformation;.transform:(Landroid/content/Context;Lcom/bumptech/glide/load/engine/Resource;II)Lcom/bumptech/glide/load/engine/Resource;` @kind interface;
  #L3da910.  v2:= temp @kind object;
  #L3da912.  if v1 == 0 then goto L3da934;
  #L3da916.  call temp:= `equals`(v1, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da91c.  v3:= temp;
  #L3da91e.  if v3 != 0 then goto L3da934;
  #L3da922.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3da928.  v3:= temp;
  #L3da92a.  if v3 != 0 then goto L3da934;
  #L3da92e.  call `recycle`(v1) @signature `Lcom/bumptech/glide/load/engine/Resource;.recycle:()V` @kind interface;
  #L3da934.  v1:= v2 @kind object;
  #L3da936.  goto L3da8f2;
  #L3da938.  return v1 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.MultiTransformation` v2 @kind this, `java.security.MessageDigest` v3 @kind object) @signature `Lcom/bumptech/glide/load/MultiTransformation;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3da9e0.  v0:= v2.`com.bumptech.glide.load.MultiTransformation.a` @type ^`java.util.Collection` @kind object;
  #L3da9e4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3da9ea.  v0:= temp @kind object;
  #L3da9ec.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3da9f2.  v1:= temp;
  #L3da9f4.  if v1 == 0 then goto L3daa0c;
  #L3da9f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3da9fe.  v1:= temp @kind object;
  #L3daa00.  v1:= (`com.bumptech.glide.load.Transformation`) v1 @kind object;
  #L3daa04.  call `updateDiskCacheKey`(v1, v3) @signature `Lcom/bumptech/glide/load/Key;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @kind interface;
  #L3daa0a.  goto L3da9ec;
  #L3daa0c.  return @kind void;
}
