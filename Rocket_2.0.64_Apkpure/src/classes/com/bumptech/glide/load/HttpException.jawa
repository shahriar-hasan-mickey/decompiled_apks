record `com.bumptech.glide.load.HttpException` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.IOException` @kind class {
  `int` `com.bumptech.glide.load.HttpException.a` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@com.bumptech.glide.load.HttpException.UNKNOWN` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@com.bumptech.glide.load.HttpException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.bumptech.glide.load.HttpException` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da0d0.  v0:= "Http request failed" @kind object;
  #L3da0d4.  call `<init>`(v1, v0, v2) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3da0da.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.HttpException` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da0ec.  v0:= -1I;
  #L3da0ee.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3da0f4.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.HttpException` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da108.  v0:= 0I;
  #L3da10a.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;ILjava/lang/Throwable;)V` @kind direct;
  #L3da110.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.HttpException` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `java.lang.Throwable` v4 @kind object) @signature `Lcom/bumptech/glide/load/HttpException;.<init>:(Ljava/lang/String;ILjava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3da124.  v0:= new `java.lang.StringBuilder`;
  #L3da128.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3da12e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3da134.  v2:= ", status code: " @kind object;
  #L3da138.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3da13e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3da144.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3da14a.  v2:= temp @kind object;
  #L3da14c.  call `<init>`(v1, v2, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3da152.  v1.`com.bumptech.glide.load.HttpException.a` @type ^`int` := v3;
  #L3da156.  return @kind void;
}
procedure `int` `getStatusCode`(`com.bumptech.glide.load.HttpException` v1 @kind this) @signature `Lcom/bumptech/glide/load/HttpException;.getStatusCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3da0b8.  v0:= v1.`com.bumptech.glide.load.HttpException.a` @type ^`int`;
  #L3da0bc.  return v0;
}
