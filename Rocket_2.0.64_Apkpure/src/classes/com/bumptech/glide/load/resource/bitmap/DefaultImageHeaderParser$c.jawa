record `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` @kind class @AccessFlag FINAL extends `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader` @kind interface {
  `java.io.InputStream` `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.<init>:(Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ec048.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ec04e.  v0.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L3ec052.  return @kind void;
}
procedure `int` `a`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ebf40.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.c:()S` @kind virtual;
  #L3ebf46.  v0:= temp;
  #L3ebf48.  v0:= v0 ^< 8;
  #L3ebf4c.  call temp:= `c`(v2) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.c:()S` @kind virtual;
  #L3ebf52.  v1:= temp;
  #L3ebf54.  v0:= v0 ^| v1 @kind int;
  #L3ebf56.  return v0;
}
procedure `int` `b`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.b:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ebf68.  v0:= 0I;
  #L3ebf6a.  v1:= 0I;
  #L3ebf6c.  v2:= -1I;
  #L3ebf6e.  if v0 >= v6 then goto L3ebf8a;
  #L3ebf72.  v1:= v4.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3ebf76.  v3:= v6 - v0 @kind int;
  #L3ebf7a.  call temp:= `read`(v1, v5, v0, v3) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3ebf80.  v1:= temp;
  #L3ebf82.  if v1 == v2 then goto L3ebf8a;
  #L3ebf86.  v0:= v0 + v1 @kind int;
  #L3ebf88.  goto L3ebf6c;
  #L3ebf8a.  if v0 != 0 then goto L3ebfa0;
  #L3ebf8e.  if v1 == v2 then goto L3ebf94;
  #L3ebf92.  goto L3ebfa0;
  #L3ebf94.  v5:= new `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader$EndOfFileException`;
  #L3ebf98.  call `<init>`(v5) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$Reader$EndOfFileException;.<init>:()V` @kind direct;
  #L3ebf9e.  throw v5;
  #L3ebfa0.  return v0;
}
procedure `short` `c`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v2 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.c:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ec014.  v0:= v2.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3ec018.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ec01e.  v0:= temp;
  #L3ec020.  v1:= -1I;
  #L3ec022.  if v0 == v1 then goto L3ec02a;
  #L3ec026.  v0:= (`short`) v0 @kind i2s;
  #L3ec028.  return v0;
  #L3ec02a.  v0:= new `com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$Reader$EndOfFileException`;
  #L3ec02e.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$Reader$EndOfFileException;.<init>:()V` @kind direct;
  #L3ec034.  throw v0;
}
procedure `long` `skip`(`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser$c;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ebfb4.  v0:= 0L;
  #L3ebfb8.  v2:= lcmp(v8, v0);
  #L3ebfbc.  if v2 >= 0 then goto L3ebfc2;
  #L3ebfc0.  return v0 @kind wide;
  #L3ebfc2.  v2:= v8 @kind wide;
  #L3ebfc4.  v4:= lcmp(v2, v0);
  #L3ebfc8.  if v4 <= 0 then goto L3ebffe;
  #L3ebfcc.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3ebfd0.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3ebfd6.  v4:= temp @kind wide;
  #L3ebfd8.  v6:= lcmp(v4, v0);
  #L3ebfdc.  if v6 <= 0 then goto L3ebfe4;
  #L3ebfe0.  v2:= v2 - v4 @kind long;
  #L3ebfe2.  goto L3ebfc4;
  #L3ebfe4.  v4:= v7.`com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3ebfe8.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ebfee.  v4:= temp;
  #L3ebff0.  v5:= -1I;
  #L3ebff2.  if v4 != v5 then goto L3ebff8;
  #L3ebff6.  goto L3ebffe;
  #L3ebff8.  v4:= 1L;
  #L3ebffc.  goto L3ebfe0;
  #L3ebffe.  v8:= v8 - v2 @kind long;
  #L3ec000.  return v8 @kind wide;
}
