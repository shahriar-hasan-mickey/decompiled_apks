record `com.bumptech.glide.load.resource.gif.StreamGifDecoder` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.ResourceDecoder` @kind interface {
  `java.util.List` `com.bumptech.glide.load.resource.gif.StreamGifDecoder.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.ResourceDecoder` `com.bumptech.glide.load.resource.gif.StreamGifDecoder.b` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` `com.bumptech.glide.load.resource.gif.StreamGifDecoder.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.gif.StreamGifDecoder` v0 @kind this, `java.util.List` v1 @kind object, `com.bumptech.glide.load.ResourceDecoder` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.<init>:(Ljava/util/List;Lcom/bumptech/glide/load/ResourceDecoder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f39a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f39a6.  v0.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.a` @type ^`java.util.List` := v1 @kind object;
  #L3f39aa.  v0.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.b` @type ^`com.bumptech.glide.load.ResourceDecoder` := v2 @kind object;
  #L3f39ae.  v0.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` := v3 @kind object;
  #L3f39b2.  return @kind void;
}
procedure `byte`[] `a`(`java.io.InputStream` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.a:(Ljava/io/InputStream;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f38cc.  v0:= new `java.io.ByteArrayOutputStream`;
  #L3f38d0.  v1:= 16384I;
  #L3f38d4.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L3f38da.  v1:= new `byte`[v1];
  #L3f38de.  call temp:= `read`(v4, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L3f38e4.  v2:= temp;
  #L3f38e6.  v3:= -1I;
  #L3f38e8.  if v2 == v3 then goto L3f38f6;
  #L3f38ec.  v3:= 0I;
  #L3f38ee.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3f38f4.  goto L3f38de;
  #L3f38f6.  call `flush`(v0) @signature `Ljava/io/ByteArrayOutputStream;.flush:()V` @kind virtual;
  #L3f38fc.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L3f3902.  v4:= temp @kind object;
  #L3f3904.  return v4 @kind object;
  #L3f3906.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L3f3908.  v0:= 5I;
  #L3f390a.  v1:= "StreamGifDecoder" @kind object;
  #L3f390e.  call temp:= `isLoggable`(v1, v0) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3f3914.  v0:= temp;
  #L3f3916.  if v0 == 0 then goto L3f3924;
  #L3f391a.  v0:= "Error reading data from stream" @kind object;
  #L3f391e.  call temp:= `w`(v1, v0, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L3f3924.  v4:= 0I;
  #L3f3926.  return v4 @kind object;
  catch `java.io.IOException` @[L3f38da..L3f38fc] goto L3f3906;
}
procedure `com.bumptech.glide.load.engine.Resource` `decode`(`com.bumptech.glide.load.resource.gif.StreamGifDecoder` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 , `int` v4 , `com.bumptech.glide.load.Options` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.decode:(Ljava/io/InputStream;IILcom/bumptech/glide/load/Options;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3948.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.a:(Ljava/io/InputStream;)[B` @kind static;
  #L3f394e.  v2:= temp @kind object;
  #L3f3950.  if v2 != 0 then goto L3f3958;
  #L3f3954.  v2:= 0I;
  #L3f3956.  return v2 @kind object;
  #L3f3958.  call temp:= `wrap`(v2) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L3f395e.  v2:= temp @kind object;
  #L3f3960.  v0:= v1.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.b` @type ^`com.bumptech.glide.load.ResourceDecoder` @kind object;
  #L3f3964.  call temp:= `decode`(v0, v2, v3, v4, v5) @signature `Lcom/bumptech/glide/load/ResourceDecoder;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/Options;)Lcom/bumptech/glide/load/engine/Resource;` @kind interface;
  #L3f396a.  v2:= temp @kind object;
  #L3f396c.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.engine.Resource` `decode`(`com.bumptech.glide.load.resource.gif.StreamGifDecoder` v0 @kind this, `java.lang.Object` v1 @kind object, `int` v2 , `int` v3 , `com.bumptech.glide.load.Options` v4 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.decode:(Ljava/lang/Object;IILcom/bumptech/glide/load/Options;)Lcom/bumptech/glide/load/engine/Resource;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f3980.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L3f3984.  call temp:= `decode`(v0, v1, v2, v3, v4) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.decode:(Ljava/io/InputStream;IILcom/bumptech/glide/load/Options;)Lcom/bumptech/glide/load/engine/Resource;` @kind virtual;
  #L3f398a.  v1:= temp @kind object;
  #L3f398c.  return v1 @kind object;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.gif.StreamGifDecoder` v1 @kind this, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.Options` v3 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.handles:(Ljava/io/InputStream;Lcom/bumptech/glide/load/Options;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3860.  v0:= `@@com.bumptech.glide.load.resource.gif.GifOptions.DISABLE_ANIMATION` @type ^`com.bumptech.glide.load.Option` @kind object;
  #L3f3864.  call temp:= `get`(v3, v0) @signature `Lcom/bumptech/glide/load/Options;.get:(Lcom/bumptech/glide/load/Option;)Ljava/lang/Object;` @kind virtual;
  #L3f386a.  v3:= temp @kind object;
  #L3f386c.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L3f3870.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L3f3876.  v3:= temp;
  #L3f3878.  if v3 != 0 then goto L3f3898;
  #L3f387c.  v3:= v1.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.a` @type ^`java.util.List` @kind object;
  #L3f3880.  v0:= v1.`com.bumptech.glide.load.resource.gif.StreamGifDecoder.c` @type ^`com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` @kind object;
  #L3f3884.  call temp:= `getType`(v3, v2, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3f388a.  v2:= temp @kind object;
  #L3f388c.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.GIF` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3f3890.  if v2 != v3 then goto L3f3898;
  #L3f3894.  v2:= 1I;
  #L3f3896.  goto L3f389a;
  #L3f3898.  v2:= 0I;
  #L3f389a.  return v2;
}
procedure `boolean` `handles`(`com.bumptech.glide.load.resource.gif.StreamGifDecoder` v0 @kind this, `java.lang.Object` v1 @kind object, `com.bumptech.glide.load.Options` v2 @kind object) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.handles:(Ljava/lang/Object;Lcom/bumptech/glide/load/Options;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3f38ac.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L3f38b0.  call temp:= `handles`(v0, v1, v2) @signature `Lcom/bumptech/glide/load/resource/gif/StreamGifDecoder;.handles:(Ljava/io/InputStream;Lcom/bumptech/glide/load/Options;)Z` @kind virtual;
  #L3f38b6.  v1:= temp;
  #L3f38b8.  return v1;
}
