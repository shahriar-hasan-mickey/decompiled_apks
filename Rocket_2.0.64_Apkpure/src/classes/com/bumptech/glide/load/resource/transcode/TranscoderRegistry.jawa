record `com.bumptech.glide.load.resource.transcode.TranscoderRegistry` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.bumptech.glide.load.resource.transcode.TranscoderRegistry.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.transcode.TranscoderRegistry` v1 @kind this) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f3d84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f3d8a.  v0:= new `java.util.ArrayList`;
  #L3f3d8e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f3d94.  v1.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry.a` @type ^`java.util.List` := v0 @kind object;
  #L3f3d98.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.transcode.ResourceTranscoder` `get`(`com.bumptech.glide.load.resource.transcode.TranscoderRegistry` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry;.get:(Ljava/lang/Class;Ljava/lang/Class;)Lcom/bumptech/glide/load/resource/transcode/ResourceTranscoder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f3c24.  @monitorenter v3
  #L3f3c26.  call temp:= `isAssignableFrom`(v5, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f3c2c.  v0:= temp;
  #L3f3c2e.  if v0 == 0 then goto L3f3c3e;
  #L3f3c32.  call temp:= `get`() @signature `Lcom/bumptech/glide/load/resource/transcode/UnitTranscoder;.get:()Lcom/bumptech/glide/load/resource/transcode/ResourceTranscoder;` @kind static;
  #L3f3c38.  v4:= temp @kind object;
  #L3f3c3a.  @monitorexit v3
  #L3f3c3c.  return v4 @kind object;
  #L3f3c3e.  v0:= v3.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f3c42.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f3c48.  v0:= temp @kind object;
  #L3f3c4a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f3c50.  v1:= temp;
  #L3f3c52.  if v1 == 0 then goto L3f3c76;
  #L3f3c56.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f3c5c.  v1:= temp @kind object;
  #L3f3c5e.  v1:= (`com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a`) v1 @kind object;
  #L3f3c62.  call temp:= `a`(v1, v4, v5) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L3f3c68.  v2:= temp;
  #L3f3c6a.  if v2 == 0 then goto L3f3c4a;
  #L3f3c6e.  v4:= v1.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a.c` @type ^`com.bumptech.glide.load.resource.transcode.ResourceTranscoder` @kind object;
  #L3f3c72.  @monitorexit v3
  #L3f3c74.  return v4 @kind object;
  #L3f3c76.  v0:= new `java.lang.IllegalArgumentException`;
  #L3f3c7a.  v1:= new `java.lang.StringBuilder`;
  #L3f3c7e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f3c84.  v2:= "No transcoder registered to transcode from " @kind object;
  #L3f3c88.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3c8e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3c94.  v4:= " to " @kind object;
  #L3f3c98.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3c9e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f3ca4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f3caa.  v4:= temp @kind object;
  #L3f3cac.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3cb2.  throw v0;
  #L3f3cb4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f3cb6.  @monitorexit v3
  #L3f3cb8.  throw v4;
  catch `java.lang.Throwable` @[L3f3c26..L3f3c3a] goto L3f3cb4;
  catch `java.lang.Throwable` @[L3f3c3e..L3f3c72] goto L3f3cb4;
  catch `java.lang.Throwable` @[L3f3c76..L3f3cb4] goto L3f3cb4;
}
procedure `java.util.List` `getTranscodeClasses`(`com.bumptech.glide.load.resource.transcode.TranscoderRegistry` v4 @kind this, `java.lang.Class` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry;.getTranscodeClasses:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f3ce8.  @monitorenter v4
  #L3f3cea.  v0:= new `java.util.ArrayList`;
  #L3f3cee.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f3cf4.  call temp:= `isAssignableFrom`(v6, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f3cfa.  v1:= temp;
  #L3f3cfc.  if v1 == 0 then goto L3f3d0a;
  #L3f3d00.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f3d06.  @monitorexit v4
  #L3f3d08.  return v0 @kind object;
  #L3f3d0a.  v1:= v4.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f3d0e.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3f3d14.  v1:= temp @kind object;
  #L3f3d16.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3f3d1c.  v2:= temp;
  #L3f3d1e.  if v2 == 0 then goto L3f3d56;
  #L3f3d22.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3f3d28.  v2:= temp @kind object;
  #L3f3d2a.  v2:= (`com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a`) v2 @kind object;
  #L3f3d2e.  call temp:= `a`(v2, v5, v6) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry$a;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind virtual;
  #L3f3d34.  v3:= temp;
  #L3f3d36.  if v3 == 0 then goto L3f3d16;
  #L3f3d3a.  v3:= v2.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a.b` @type ^`java.lang.Class` @kind object;
  #L3f3d3e.  call temp:= `contains`(v0, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f3d44.  v3:= temp;
  #L3f3d46.  if v3 != 0 then goto L3f3d16;
  #L3f3d4a.  v2:= v2.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a.b` @type ^`java.lang.Class` @kind object;
  #L3f3d4e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f3d54.  goto L3f3d16;
  #L3f3d56.  @monitorexit v4
  #L3f3d58.  return v0 @kind object;
  #L3f3d5a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f3d5c.  @monitorexit v4
  #L3f3d5e.  throw v5;
  catch `java.lang.Throwable` @[L3f3cea..L3f3d06] goto L3f3d5a;
  catch `java.lang.Throwable` @[L3f3d0a..L3f3d54] goto L3f3d5a;
}
procedure `void` `register`(`com.bumptech.glide.load.resource.transcode.TranscoderRegistry` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Class` v4 @kind object, `com.bumptech.glide.load.resource.transcode.ResourceTranscoder` v5 @kind object) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry;.register:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/resource/transcode/ResourceTranscoder;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3dac.  @monitorenter v2
  #L3f3dae.  v0:= v2.`com.bumptech.glide.load.resource.transcode.TranscoderRegistry.a` @type ^`java.util.List` @kind object;
  #L3f3db2.  v1:= new `com.bumptech.glide.load.resource.transcode.TranscoderRegistry$a`;
  #L3f3db6.  call `<init>`(v1, v3, v4, v5) @signature `Lcom/bumptech/glide/load/resource/transcode/TranscoderRegistry$a;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Lcom/bumptech/glide/load/resource/transcode/ResourceTranscoder;)V` @kind direct;
  #L3f3dbc.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f3dc2.  @monitorexit v2
  #L3f3dc4.  return @kind void;
  #L3f3dc6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3f3dc8.  @monitorexit v2
  #L3f3dca.  throw v3;
  catch `java.lang.Throwable` @[L3f3dae..L3f3dc2] goto L3f3dc6;
}
