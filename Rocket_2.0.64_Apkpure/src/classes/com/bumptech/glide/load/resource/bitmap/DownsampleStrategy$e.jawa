record `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` @kind class @AccessFlag  extends `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy` @kind class {
}
procedure `void` `<init>`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v0 @kind this) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ecc24.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy;.<init>:()V` @kind direct;
  #L3ecc2a.  return @kind void;
}
procedure `com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` `getSampleSizeRounding`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.getSampleSizeRounding:(IIII)Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$SampleSizeRounding;` @AccessFlag PUBLIC {
    temp;

  #L3ecbac.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.a` @type ^`boolean` @kind boolean;
  #L3ecbb0.  if v1 == 0 then goto L3ecbba;
  #L3ecbb4.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding.QUALITY` @type ^`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` @kind object;
  #L3ecbb8.  return v1 @kind object;
  #L3ecbba.  v1:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding.MEMORY` @type ^`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$SampleSizeRounding` @kind object;
  #L3ecbbe.  return v1 @kind object;
}
procedure `float` `getScaleFactor`(`com.bumptech.glide.load.resource.bitmap.DownsampleStrategy$e` v1 @kind this, `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy$e;.getScaleFactor:(IIII)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ecbd0.  v0:= `@@com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.a` @type ^`boolean` @kind boolean;
  #L3ecbd4.  if v0 == 0 then goto L3ecbee;
  #L3ecbd8.  v4:= (`float`) v4 @kind i2f;
  #L3ecbda.  v2:= (`float`) v2 @kind i2f;
  #L3ecbdc.  v4:= v4 / v2 @kind float;
  #L3ecbde.  v2:= (`float`) v5 @kind i2f;
  #L3ecbe0.  v3:= (`float`) v3 @kind i2f;
  #L3ecbe2.  v2:= v2 / v3 @kind float;
  #L3ecbe4.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L3ecbea.  v2:= temp;
  #L3ecbec.  return v2;
  #L3ecbee.  v3:= v3 / v5 @kind int;
  #L3ecbf0.  v2:= v2 / v4 @kind int;
  #L3ecbf2.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3ecbf8.  v2:= temp;
  #L3ecbfa.  v3:= 1.0F;
  #L3ecbfe.  if v2 != 0 then goto L3ecc04;
  #L3ecc02.  goto L3ecc10;
  #L3ecc04.  call temp:= `highestOneBit`(v2) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L3ecc0a.  v2:= temp;
  #L3ecc0c.  v2:= (`float`) v2 @kind i2f;
  #L3ecc0e.  v3:= v3 / v2 @kind float;
  #L3ecc10.  return v3;
}
