record `com.bumptech.glide.load.Option` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `com.bumptech.glide.load.Option.a` @AccessFlag PRIVATE_FINAL;
  `com.bumptech.glide.load.Option$CacheKeyUpdater` `com.bumptech.glide.load.Option.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.Option.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.bumptech.glide.load.Option.d` @AccessFlag PRIVATE_VOLATILE;
}
global `com.bumptech.glide.load.Option$CacheKeyUpdater` `@@com.bumptech.glide.load.Option.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/Option;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dad70.  v0:= new `com.bumptech.glide.load.Option$a`;
  #L3dad74.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/Option$a;.<init>:()V` @kind direct;
  #L3dad7a.  `@@com.bumptech.glide.load.Option.e` @type ^`com.bumptech.glide.load.Option$CacheKeyUpdater` := v0 @kind object;
  #L3dad7e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.Option` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.Option$CacheKeyUpdater` v3 @kind object) @signature `Lcom/bumptech/glide/load/Option;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3dad90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dad96.  call temp:= `checkNotEmpty`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3dad9c.  v1:= temp @kind object;
  #L3dad9e.  v0.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` := v1 @kind object;
  #L3dada2.  v0.`com.bumptech.glide.load.Option.a` @type ^`java.lang.Object` := v2 @kind object;
  #L3dada6.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3dadac.  v1:= temp @kind object;
  #L3dadae.  v1:= (`com.bumptech.glide.load.Option$CacheKeyUpdater`) v1 @kind object;
  #L3dadb2.  v0.`com.bumptech.glide.load.Option.b` @type ^`com.bumptech.glide.load.Option$CacheKeyUpdater` := v1 @kind object;
  #L3dadb6.  return @kind void;
}
procedure `com.bumptech.glide.load.Option$CacheKeyUpdater` `a`() @signature `Lcom/bumptech/glide/load/Option;.a:()Lcom/bumptech/glide/load/Option$CacheKeyUpdater;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3dab3c.  v0:= `@@com.bumptech.glide.load.Option.e` @type ^`com.bumptech.glide.load.Option$CacheKeyUpdater` @kind object;
  #L3dab40.  return v0 @kind object;
}
procedure `byte`[] `b`(`com.bumptech.glide.load.Option` v2 @kind this) @signature `Lcom/bumptech/glide/load/Option;.b:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3daa80.  v0:= v2.`com.bumptech.glide.load.Option.d` @type ^`byte`[] @kind object;
  #L3daa84.  if v0 != 0 then goto L3daa9c;
  #L3daa88.  v0:= v2.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` @kind object;
  #L3daa8c.  v1:= `@@com.bumptech.glide.load.Key.CHARSET` @type ^`java.nio.charset.Charset` @kind object;
  #L3daa90.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3daa96.  v0:= temp @kind object;
  #L3daa98.  v2.`com.bumptech.glide.load.Option.d` @type ^`byte`[] := v0 @kind object;
  #L3daa9c.  v0:= v2.`com.bumptech.glide.load.Option.d` @type ^`byte`[] @kind object;
  #L3daaa0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.Option` `disk`(`java.lang.String` v2 @kind object, `com.bumptech.glide.load.Option$CacheKeyUpdater` v3 @kind object) @signature `Lcom/bumptech/glide/load/Option;.disk:(Ljava/lang/String;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)Lcom/bumptech/glide/load/Option;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3daab4.  v0:= new `com.bumptech.glide.load.Option`;
  #L3daab8.  v1:= 0I;
  #L3daaba.  call `<init>`(v0, v2, v1, v3) @signature `Lcom/bumptech/glide/load/Option;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)V` @kind direct;
  #L3daac0.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.Option` `disk`(`java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object, `com.bumptech.glide.load.Option$CacheKeyUpdater` v3 @kind object) @signature `Lcom/bumptech/glide/load/Option;.disk:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)Lcom/bumptech/glide/load/Option;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3daad4.  v0:= new `com.bumptech.glide.load.Option`;
  #L3daad8.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/load/Option;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)V` @kind direct;
  #L3daade.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.Option` `memory`(`java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/Option;.memory:(Ljava/lang/String;)Lcom/bumptech/glide/load/Option;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3daaf0.  v0:= new `com.bumptech.glide.load.Option`;
  #L3daaf4.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/Option;.a:()Lcom/bumptech/glide/load/Option$CacheKeyUpdater;` @kind static;
  #L3daafa.  v1:= temp @kind object;
  #L3daafc.  v2:= 0I;
  #L3daafe.  call `<init>`(v0, v3, v2, v1) @signature `Lcom/bumptech/glide/load/Option;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)V` @kind direct;
  #L3dab04.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.Option` `memory`(`java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/bumptech/glide/load/Option;.memory:(Ljava/lang/String;Ljava/lang/Object;)Lcom/bumptech/glide/load/Option;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3dab18.  v0:= new `com.bumptech.glide.load.Option`;
  #L3dab1c.  call temp:= `a`() @signature `Lcom/bumptech/glide/load/Option;.a:()Lcom/bumptech/glide/load/Option$CacheKeyUpdater;` @kind static;
  #L3dab22.  v1:= temp @kind object;
  #L3dab24.  call `<init>`(v0, v2, v3, v1) @signature `Lcom/bumptech/glide/load/Option;.<init>:(Ljava/lang/String;Ljava/lang/Object;Lcom/bumptech/glide/load/Option$CacheKeyUpdater;)V` @kind direct;
  #L3dab2a.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.Option` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/Option;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3daa4c.  v0:= instanceof @variable v2 @type ^`com.bumptech.glide.load.Option` @kind boolean;
  #L3daa50.  if v0 == 0 then goto L3daa6a;
  #L3daa54.  v2:= (`com.bumptech.glide.load.Option`) v2 @kind object;
  #L3daa58.  v0:= v1.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` @kind object;
  #L3daa5c.  v2:= v2.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` @kind object;
  #L3daa60.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3daa66.  v2:= temp;
  #L3daa68.  return v2;
  #L3daa6a.  v2:= 0I;
  #L3daa6c.  return v2;
}
procedure `java.lang.Object` `getDefaultValue`(`com.bumptech.glide.load.Option` v1 @kind this) @signature `Lcom/bumptech/glide/load/Option;.getDefaultValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dab74.  v0:= v1.`com.bumptech.glide.load.Option.a` @type ^`java.lang.Object` @kind object;
  #L3dab78.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.Option` v1 @kind this) @signature `Lcom/bumptech/glide/load/Option;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dab54.  v0:= v1.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` @kind object;
  #L3dab58.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3dab5e.  v0:= temp;
  #L3dab60.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.Option` v2 @kind this) @signature `Lcom/bumptech/glide/load/Option;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dab8c.  v0:= new `java.lang.StringBuilder`;
  #L3dab90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dab96.  v1:= "Option{key='" @kind object;
  #L3dab9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3daba0.  v1:= v2.`com.bumptech.glide.load.Option.c` @type ^`java.lang.String` @kind object;
  #L3daba4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dabaa.  v1:= 39I;
  #L3dabae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dabb4.  v1:= 125I;
  #L3dabb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dabbe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dabc4.  v0:= temp @kind object;
  #L3dabc6.  return v0 @kind object;
}
procedure `void` `update`(`com.bumptech.glide.load.Option` v2 @kind this, `java.lang.Object` v3 @kind object, `java.security.MessageDigest` v4 @kind object) @signature `Lcom/bumptech/glide/load/Option;.update:(Ljava/lang/Object;Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dadc8.  v0:= v2.`com.bumptech.glide.load.Option.b` @type ^`com.bumptech.glide.load.Option$CacheKeyUpdater` @kind object;
  #L3dadcc.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/Option;.b:()[B` @kind direct;
  #L3dadd2.  v1:= temp @kind object;
  #L3dadd4.  call `update`(v0, v1, v3, v4) @signature `Lcom/bumptech/glide/load/Option$CacheKeyUpdater;.update:([BLjava/lang/Object;Ljava/security/MessageDigest;)V` @kind interface;
  #L3dadda.  return @kind void;
}
