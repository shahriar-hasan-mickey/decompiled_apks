record `com.bumptech.glide.load.model.LazyHeaders$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.a` @AccessFlag PRIVATE;
  `java.util.Map` `com.bumptech.glide.load.model.LazyHeaders$Builder.b` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.LazyHeaders$Builder.c` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Map` `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3e7e5c.  call temp:= `d`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.d:()Ljava/lang/String;` @kind static;
  #L3e7e62.  v0:= temp @kind object;
  #L3e7e64.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.d` @type ^`java.lang.String` := v0 @kind object;
  #L3e7e68.  v1:= new `java.util.HashMap`;
  #L3e7e6c.  v2:= 2I;
  #L3e7e6e.  call `<init>`(v1, v2) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L3e7e74.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3e7e7a.  v2:= temp;
  #L3e7e7c.  if v2 != 0 then goto L3e7e9c;
  #L3e7e80.  v2:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3e7e84.  call `<init>`(v2, v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7e8a.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3e7e90.  v0:= temp @kind object;
  #L3e7e92.  v2:= "User-Agent" @kind object;
  #L3e7e96.  call temp:= `put`(v1, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e7e9c.  call temp:= `unmodifiableMap`(v1) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3e7ea2.  v0:= temp @kind object;
  #L3e7ea4.  `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @type ^`java.util.Map` := v0 @kind object;
  #L3e7ea8.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e7ebc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e7ec2.  v0:= 1I;
  #L3e7ec4.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3e7ec8.  v1:= `@@com.bumptech.glide.load.model.LazyHeaders$Builder.e` @type ^`java.util.Map` @kind object;
  #L3e7ecc.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` := v1 @kind object;
  #L3e7ed0.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` := v0 @kind boolean;
  #L3e7ed4.  return @kind void;
}
procedure `java.util.Map` `a`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v5 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.a:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e7de0.  v0:= new `java.util.HashMap`;
  #L3e7de4.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7de8.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3e7dee.  v1:= temp;
  #L3e7df0.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(I)V` @kind direct;
  #L3e7df6.  v1:= v5.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7dfa.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3e7e00.  v1:= temp @kind object;
  #L3e7e02.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e7e08.  v1:= temp @kind object;
  #L3e7e0a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e7e10.  v2:= temp;
  #L3e7e12.  if v2 == 0 then goto L3e7e48;
  #L3e7e16.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e7e1c.  v2:= temp @kind object;
  #L3e7e1e.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L3e7e22.  v3:= new `java.util.ArrayList`;
  #L3e7e26.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3e7e2c.  v4:= temp @kind object;
  #L3e7e2e.  v4:= (`java.util.Collection`) v4 @kind object;
  #L3e7e32.  call `<init>`(v3, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3e7e38.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3e7e3e.  v2:= temp @kind object;
  #L3e7e40.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e7e46.  goto L3e7e0a;
  #L3e7e48.  return v0 @kind object;
}
procedure `void` `b`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3e7ee8.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` @kind boolean;
  #L3e7eec.  if v0 == 0 then goto L3e7f02;
  #L3e7ef0.  v0:= 0I;
  #L3e7ef2.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3e7ef6.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.a:()Ljava/util/Map;` @kind direct;
  #L3e7efc.  v0:= temp @kind object;
  #L3e7efe.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` := v0 @kind object;
  #L3e7f02.  return @kind void;
}
procedure `java.util.List` `c`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e7da4.  v0:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7da8.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e7dae.  v0:= temp @kind object;
  #L3e7db0.  v0:= (`java.util.List`) v0 @kind object;
  #L3e7db4.  if v0 != 0 then goto L3e7dcc;
  #L3e7db8.  v0:= new `java.util.ArrayList`;
  #L3e7dbc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3e7dc2.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7dc6.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e7dcc.  return v0 @kind object;
}
procedure `java.lang.String` `d`() @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.d:()Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e7d18.  v0:= "http.agent" @kind object;
  #L3e7d1c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3e7d22.  v0:= temp @kind object;
  #L3e7d24.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3e7d2a.  v1:= temp;
  #L3e7d2c.  if v1 == 0 then goto L3e7d32;
  #L3e7d30.  return v0 @kind object;
  #L3e7d32.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e7d38.  v1:= temp;
  #L3e7d3a.  v2:= new `java.lang.StringBuilder`;
  #L3e7d3e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3e7d44.  v3:= temp;
  #L3e7d46.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3e7d4c.  v3:= 0I;
  #L3e7d4e.  if v3 >= v1 then goto L3e7d8a;
  #L3e7d52.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3e7d58.  v4:= temp;
  #L3e7d5a.  v5:= 31I;
  #L3e7d5e.  if v4 > v5 then goto L3e7d6a;
  #L3e7d62.  v5:= 9I;
  #L3e7d66.  if v4 != v5 then goto L3e7d7a;
  #L3e7d6a.  v5:= 127I;
  #L3e7d6e.  if v4 >= v5 then goto L3e7d7a;
  #L3e7d72.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7d78.  goto L3e7d84;
  #L3e7d7a.  v4:= 63I;
  #L3e7d7e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7d84.  v3:= v3 + 1;
  #L3e7d88.  goto L3e7d4e;
  #L3e7d8a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7d90.  v0:= temp @kind object;
  #L3e7d92.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7c20.  v0:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` @kind boolean;
  #L3e7c24.  if v0 == 0 then goto L3e7c42;
  #L3e7c28.  v0:= "User-Agent" @kind object;
  #L3e7c2c.  call temp:= `equalsIgnoreCase`(v0, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3e7c32.  v0:= temp;
  #L3e7c34.  if v0 == 0 then goto L3e7c42;
  #L3e7c38.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3e7c3e.  v2:= temp @kind object;
  #L3e7c40.  return v2 @kind object;
  #L3e7c42.  call `b`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @kind direct;
  #L3e7c48.  call temp:= `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L3e7c4e.  v2:= temp @kind object;
  #L3e7c50.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e7c56.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `addHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7c68.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3e7c6c.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7c72.  call temp:= `addHeader`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.addHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3e7c78.  v2:= temp @kind object;
  #L3e7c7a.  return v2 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders` `build`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.build:()Lcom/bumptech/glide/load/model/LazyHeaders;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e7bf8.  v0:= 1I;
  #L3e7bfa.  v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L3e7bfe.  v0:= new `com.bumptech.glide.load.model.LazyHeaders`;
  #L3e7c02.  v1:= v2.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7c06.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3e7c0c.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.LazyHeaderFactory` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7c8c.  call `b`(v1) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.b:()V` @kind direct;
  #L3e7c92.  if v3 != 0 then goto L3e7ca2;
  #L3e7c96.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.b` @type ^`java.util.Map` @kind object;
  #L3e7c9a.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3e7ca0.  goto L3e7cb6;
  #L3e7ca2.  call temp:= `c`(v1, v2) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.c:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L3e7ca8.  v0:= temp @kind object;
  #L3e7caa.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3e7cb0.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e7cb6.  v3:= v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` @kind boolean;
  #L3e7cba.  if v3 == 0 then goto L3e7cd4;
  #L3e7cbe.  v3:= "User-Agent" @kind object;
  #L3e7cc2.  call temp:= `equalsIgnoreCase`(v3, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3e7cc8.  v2:= temp;
  #L3e7cca.  if v2 == 0 then goto L3e7cd4;
  #L3e7cce.  v2:= 0I;
  #L3e7cd0.  v1.`com.bumptech.glide.load.model.LazyHeaders$Builder.c` @type ^`boolean` := v2 @kind boolean;
  #L3e7cd4.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.model.LazyHeaders$Builder` `setHeader`(`com.bumptech.glide.load.model.LazyHeaders$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Ljava/lang/String;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7ce8.  if v3 != 0 then goto L3e7cf0;
  #L3e7cec.  v3:= 0I;
  #L3e7cee.  goto L3e7cfc;
  #L3e7cf0.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$a`;
  #L3e7cf4.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7cfa.  v3:= v0 @kind object;
  #L3e7cfc.  call temp:= `setHeader`(v1, v2, v3) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.setHeader:(Ljava/lang/String;Lcom/bumptech/glide/load/model/LazyHeaderFactory;)Lcom/bumptech/glide/load/model/LazyHeaders$Builder;` @kind virtual;
  #L3e7d02.  v2:= temp @kind object;
  #L3e7d04.  return v2 @kind object;
}
