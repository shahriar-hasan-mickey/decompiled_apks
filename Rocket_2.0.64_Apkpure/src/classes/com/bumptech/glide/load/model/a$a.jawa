record `com.bumptech.glide.load.model.a$a` @kind class @AccessFlag  extends `com.bumptech.glide.load.data.DataFetcher` @kind interface, `com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind interface {
  `java.util.List` `com.bumptech.glide.load.model.a$a.a` @AccessFlag PRIVATE_FINAL;
  `androidx.core.util.Pools$Pool` `com.bumptech.glide.load.model.a$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.load.model.a$a.c` @AccessFlag PRIVATE;
  `com.bumptech.glide.Priority` `com.bumptech.glide.load.model.a$a.d` @AccessFlag PRIVATE;
  `com.bumptech.glide.load.data.DataFetcher$DataCallback` `com.bumptech.glide.load.model.a$a.e` @AccessFlag PRIVATE;
  `java.util.List` `com.bumptech.glide.load.model.a$a.f` @AccessFlag PRIVATE;
  `boolean` `com.bumptech.glide.load.model.a$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.a$a` v0 @kind this, `java.util.List` v1 @kind object, `androidx.core.util.Pools$Pool` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.<init>:(Ljava/util/List;Landroidx/core/util/Pools$Pool;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3e8b6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e8b72.  v0.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` := v2 @kind object;
  #L3e8b76.  call temp:= `checkNotEmpty`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L3e8b7c.  v0.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` := v1 @kind object;
  #L3e8b80.  v1:= 0I;
  #L3e8b82.  v0.`com.bumptech.glide.load.model.a$a.c` @type ^`int` := v1;
  #L3e8b86.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.load.model.a$a` v4 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e8ce4.  v0:= v4.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` @kind boolean;
  #L3e8ce8.  if v0 == 0 then goto L3e8cee;
  #L3e8cec.  return @kind void;
  #L3e8cee.  v0:= v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3e8cf2.  v1:= v4.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8cf6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3e8cfc.  v1:= temp;
  #L3e8cfe.  v1:= v1 + -1;
  #L3e8d02.  if v0 >= v1 then goto L3e8d22;
  #L3e8d06.  v0:= v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3e8d0a.  v0:= v0 + 1;
  #L3e8d0e.  v4.`com.bumptech.glide.load.model.a$a.c` @type ^`int` := v0;
  #L3e8d12.  v0:= v4.`com.bumptech.glide.load.model.a$a.d` @type ^`com.bumptech.glide.Priority` @kind object;
  #L3e8d16.  v1:= v4.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3e8d1a.  call `loadData`(v4, v0, v1) @signature `Lcom/bumptech/glide/load/model/a$a;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @kind virtual;
  #L3e8d20.  goto L3e8d52;
  #L3e8d22.  v0:= v4.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3e8d26.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e8d2c.  v0:= v4.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3e8d30.  v1:= new `com.bumptech.glide.load.engine.GlideException`;
  #L3e8d34.  v2:= new `java.util.ArrayList`;
  #L3e8d38.  v3:= v4.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3e8d3c.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3e8d42.  v3:= "Fetch failed" @kind object;
  #L3e8d46.  call `<init>`(v1, v3, v2) @signature `Lcom/bumptech/glide/load/engine/GlideException;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L3e8d4c.  call `onLoadFailed`(v0, v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onLoadFailed:(Ljava/lang/Exception;)V` @kind interface;
  #L3e8d52.  return @kind void;
}
procedure `void` `cancel`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8b98.  v0:= 1I;
  #L3e8b9a.  v2.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` := v0 @kind boolean;
  #L3e8b9e.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8ba2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e8ba8.  v0:= temp @kind object;
  #L3e8baa.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8bb0.  v1:= temp;
  #L3e8bb2.  if v1 == 0 then goto L3e8bca;
  #L3e8bb6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e8bbc.  v1:= temp @kind object;
  #L3e8bbe.  v1:= (`com.bumptech.glide.load.data.DataFetcher`) v1 @kind object;
  #L3e8bc2.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cancel:()V` @kind interface;
  #L3e8bc8.  goto L3e8baa;
  #L3e8bca.  return @kind void;
}
procedure `void` `cleanup`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.cleanup:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8bdc.  v0:= v2.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3e8be0.  if v0 == 0 then goto L3e8bee;
  #L3e8be4.  v1:= v2.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3e8be8.  call temp:= `release`(v1, v0) @signature `Landroidx/core/util/Pools$Pool;.release:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8bee.  v0:= 0I;
  #L3e8bf0.  v2.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` := v0 @kind object;
  #L3e8bf4.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8bf8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3e8bfe.  v0:= temp @kind object;
  #L3e8c00.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3e8c06.  v1:= temp;
  #L3e8c08.  if v1 == 0 then goto L3e8c20;
  #L3e8c0c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3e8c12.  v1:= temp @kind object;
  #L3e8c14.  v1:= (`com.bumptech.glide.load.data.DataFetcher`) v1 @kind object;
  #L3e8c18.  call `cleanup`(v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.cleanup:()V` @kind interface;
  #L3e8c1e.  goto L3e8c00;
  #L3e8c20.  return @kind void;
}
procedure `java.lang.Class` `getDataClass`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8b40.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8b44.  v1:= 0I;
  #L3e8b46.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e8b4c.  v0:= temp @kind object;
  #L3e8b4e.  v0:= (`com.bumptech.glide.load.data.DataFetcher`) v0 @kind object;
  #L3e8b52.  call temp:= `getDataClass`(v0) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.getDataClass:()Ljava/lang/Class;` @kind interface;
  #L3e8b58.  v0:= temp @kind object;
  #L3e8b5a.  return v0 @kind object;
}
procedure `com.bumptech.glide.load.DataSource` `getDataSource`(`com.bumptech.glide.load.model.a$a` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/a$a;.getDataSource:()Lcom/bumptech/glide/load/DataSource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e8b14.  v0:= v2.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8b18.  v1:= 0I;
  #L3e8b1a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e8b20.  v0:= temp @kind object;
  #L3e8b22.  v0:= (`com.bumptech.glide.load.data.DataFetcher`) v0 @kind object;
  #L3e8b26.  call temp:= `getDataSource`(v0) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.getDataSource:()Lcom/bumptech/glide/load/DataSource;` @kind interface;
  #L3e8b2c.  v0:= temp @kind object;
  #L3e8b2e.  return v0 @kind object;
}
procedure `void` `loadData`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `com.bumptech.glide.Priority` v2 @kind object, `com.bumptech.glide.load.data.DataFetcher$DataCallback` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8c34.  v1.`com.bumptech.glide.load.model.a$a.d` @type ^`com.bumptech.glide.Priority` := v2 @kind object;
  #L3e8c38.  v1.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` := v3 @kind object;
  #L3e8c3c.  v3:= v1.`com.bumptech.glide.load.model.a$a.b` @type ^`androidx.core.util.Pools$Pool` @kind object;
  #L3e8c40.  call temp:= `acquire`(v3) @signature `Landroidx/core/util/Pools$Pool;.acquire:()Ljava/lang/Object;` @kind interface;
  #L3e8c46.  v3:= temp @kind object;
  #L3e8c48.  v3:= (`java.util.List`) v3 @kind object;
  #L3e8c4c.  v1.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` := v3 @kind object;
  #L3e8c50.  v3:= v1.`com.bumptech.glide.load.model.a$a.a` @type ^`java.util.List` @kind object;
  #L3e8c54.  v0:= v1.`com.bumptech.glide.load.model.a$a.c` @type ^`int`;
  #L3e8c58.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3e8c5e.  v3:= temp @kind object;
  #L3e8c60.  v3:= (`com.bumptech.glide.load.data.DataFetcher`) v3 @kind object;
  #L3e8c64.  call `loadData`(v3, v2, v1) @signature `Lcom/bumptech/glide/load/data/DataFetcher;.loadData:(Lcom/bumptech/glide/Priority;Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;)V` @kind interface;
  #L3e8c6a.  v2:= v1.`com.bumptech.glide.load.model.a$a.g` @type ^`boolean` @kind boolean;
  #L3e8c6e.  if v2 == 0 then goto L3e8c78;
  #L3e8c72.  call `cancel`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.cancel:()V` @kind virtual;
  #L3e8c78.  return @kind void;
}
procedure `void` `onDataReady`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.onDataReady:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8c8c.  if v2 == 0 then goto L3e8c9c;
  #L3e8c90.  v0:= v1.`com.bumptech.glide.load.model.a$a.e` @type ^`com.bumptech.glide.load.data.DataFetcher$DataCallback` @kind object;
  #L3e8c94.  call `onDataReady`(v0, v2) @signature `Lcom/bumptech/glide/load/data/DataFetcher$DataCallback;.onDataReady:(Ljava/lang/Object;)V` @kind interface;
  #L3e8c9a.  goto L3e8ca2;
  #L3e8c9c.  call `a`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @kind direct;
  #L3e8ca2.  return @kind void;
}
procedure `void` `onLoadFailed`(`com.bumptech.glide.load.model.a$a` v1 @kind this, `java.lang.Exception` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/a$a;.onLoadFailed:(Ljava/lang/Exception;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e8cb4.  v0:= v1.`com.bumptech.glide.load.model.a$a.f` @type ^`java.util.List` @kind object;
  #L3e8cb8.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e8cbe.  v0:= temp @kind object;
  #L3e8cc0.  v0:= (`java.util.List`) v0 @kind object;
  #L3e8cc4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3e8cca.  call `a`(v1) @signature `Lcom/bumptech/glide/load/model/a$a;.a:()V` @kind direct;
  #L3e8cd0.  return @kind void;
}
