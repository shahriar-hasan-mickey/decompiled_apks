record `com.bumptech.glide.load.model.GlideUrl` @kind class @AccessFlag PUBLIC extends `com.bumptech.glide.load.Key` @kind interface {
  `com.bumptech.glide.load.model.Headers` `com.bumptech.glide.load.model.GlideUrl.a` @AccessFlag PRIVATE_FINAL;
  `java.net.URL` `com.bumptech.glide.load.model.GlideUrl.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.model.GlideUrl.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.bumptech.glide.load.model.GlideUrl.d` @AccessFlag PRIVATE;
  `java.net.URL` `com.bumptech.glide.load.model.GlideUrl.e` @AccessFlag PRIVATE;
  `byte`[] `com.bumptech.glide.load.model.GlideUrl.f` @AccessFlag PRIVATE_VOLATILE;
  `int` `com.bumptech.glide.load.model.GlideUrl.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7ab8.  v0:= `@@com.bumptech.glide.load.model.Headers.DEFAULT` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e7abc.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/model/Headers;)V` @kind direct;
  #L3e7ac2.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.lang.String` v2 @kind object, `com.bumptech.glide.load.model.Headers` v3 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/lang/String;Lcom/bumptech/glide/load/model/Headers;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7ad4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e7ada.  v0:= 0I;
  #L3e7adc.  v1.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` := v0 @kind object;
  #L3e7ae0.  call temp:= `checkNotEmpty`(v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3e7ae6.  v2:= temp @kind object;
  #L3e7ae8.  v1.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` := v2 @kind object;
  #L3e7aec.  call temp:= `checkNotNull`(v3) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e7af2.  v2:= temp @kind object;
  #L3e7af4.  v2:= (`com.bumptech.glide.load.model.Headers`) v2 @kind object;
  #L3e7af8.  v1.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` := v2 @kind object;
  #L3e7afc.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7b10.  v0:= `@@com.bumptech.glide.load.model.Headers.DEFAULT` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e7b14.  call `<init>`(v1, v2, v0) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;Lcom/bumptech/glide/load/model/Headers;)V` @kind direct;
  #L3e7b1a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.load.model.GlideUrl` v0 @kind this, `java.net.URL` v1 @kind object, `com.bumptech.glide.load.model.Headers` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.<init>:(Ljava/net/URL;Lcom/bumptech/glide/load/model/Headers;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3e7b2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e7b32.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e7b38.  v1:= temp @kind object;
  #L3e7b3a.  v1:= (`java.net.URL`) v1 @kind object;
  #L3e7b3e.  v0.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` := v1 @kind object;
  #L3e7b42.  v1:= 0I;
  #L3e7b44.  v0.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` := v1 @kind object;
  #L3e7b48.  call temp:= `checkNotNull`(v2) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e7b4e.  v1:= temp @kind object;
  #L3e7b50.  v1:= (`com.bumptech.glide.load.model.Headers`) v1 @kind object;
  #L3e7b54.  v0.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` := v1 @kind object;
  #L3e7b58.  return @kind void;
}
procedure `byte`[] `a`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.a:()[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e78fc.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] @kind object;
  #L3e7900.  if v0 != 0 then goto L3e791c;
  #L3e7904.  call temp:= `getCacheKey`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3e790a.  v0:= temp @kind object;
  #L3e790c.  v1:= `@@com.bumptech.glide.load.Key.CHARSET` @type ^`java.nio.charset.Charset` @kind object;
  #L3e7910.  call temp:= `getBytes`(v0, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3e7916.  v0:= temp @kind object;
  #L3e7918.  v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] := v0 @kind object;
  #L3e791c.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.f` @type ^`byte`[] @kind object;
  #L3e7920.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e79b0.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` @kind object;
  #L3e79b4.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3e79ba.  v0:= temp;
  #L3e79bc.  if v0 == 0 then goto L3e79f8;
  #L3e79c0.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` @kind object;
  #L3e79c4.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3e79ca.  v1:= temp;
  #L3e79cc.  if v1 == 0 then goto L3e79e8;
  #L3e79d0.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` @kind object;
  #L3e79d4.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e79da.  v0:= temp @kind object;
  #L3e79dc.  v0:= (`java.net.URL`) v0 @kind object;
  #L3e79e0.  call temp:= `toString`(v0) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e79e6.  v0:= temp @kind object;
  #L3e79e8.  v1:= "@#&=*+-_.,:!?()/~'%;$" @kind object;
  #L3e79ec.  call temp:= `encode`(v0, v1) @signature `Landroid/net/Uri;.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3e79f2.  v0:= temp @kind object;
  #L3e79f4.  v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` := v0 @kind object;
  #L3e79f8.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.d` @type ^`java.lang.String` @kind object;
  #L3e79fc.  return v0 @kind object;
}
procedure `java.net.URL` `c`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.c:()Ljava/net/URL;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3e7a48.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` @kind object;
  #L3e7a4c.  if v0 != 0 then goto L3e7a66;
  #L3e7a50.  v0:= new `java.net.URL`;
  #L3e7a54.  call temp:= `b`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @kind direct;
  #L3e7a5a.  v1:= temp @kind object;
  #L3e7a5c.  call `<init>`(v0, v1) @signature `Ljava/net/URL;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7a62.  v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` := v0 @kind object;
  #L3e7a66.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.e` @type ^`java.net.URL` @kind object;
  #L3e7a6a.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.bumptech.glide.load.model.GlideUrl` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e78a8.  v0:= instanceof @variable v4 @type ^`com.bumptech.glide.load.model.GlideUrl` @kind boolean;
  #L3e78ac.  v1:= 0I;
  #L3e78ae.  if v0 == 0 then goto L3e78e8;
  #L3e78b2.  v4:= (`com.bumptech.glide.load.model.GlideUrl`) v4 @kind object;
  #L3e78b6.  call temp:= `getCacheKey`(v3) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3e78bc.  v0:= temp @kind object;
  #L3e78be.  call temp:= `getCacheKey`(v4) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3e78c4.  v2:= temp @kind object;
  #L3e78c6.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e78cc.  v0:= temp;
  #L3e78ce.  if v0 == 0 then goto L3e78e8;
  #L3e78d2.  v0:= v3.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e78d6.  v4:= v4.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e78da.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e78e0.  v4:= temp;
  #L3e78e2.  if v4 == 0 then goto L3e78e8;
  #L3e78e6.  v1:= 1I;
  #L3e78e8.  return v1;
}
procedure `java.lang.String` `getCacheKey`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e797c.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.c` @type ^`java.lang.String` @kind object;
  #L3e7980.  if v0 == 0 then goto L3e7986;
  #L3e7984.  goto L3e799e;
  #L3e7986.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.b` @type ^`java.net.URL` @kind object;
  #L3e798a.  call temp:= `checkNotNull`(v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3e7990.  v0:= temp @kind object;
  #L3e7992.  v0:= (`java.net.URL`) v0 @kind object;
  #L3e7996.  call temp:= `toString`(v0) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e799c.  v0:= temp @kind object;
  #L3e799e.  return v0 @kind object;
}
procedure `java.util.Map` `getHeaders`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7a98.  v0:= v1.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e7a9c.  call temp:= `getHeaders`(v0) @signature `Lcom/bumptech/glide/load/model/Headers;.getHeaders:()Ljava/util/Map;` @kind interface;
  #L3e7aa2.  v0:= temp @kind object;
  #L3e7aa4.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.bumptech.glide.load.model.GlideUrl` v2 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3e7934.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int`;
  #L3e7938.  if v0 != 0 then goto L3e7966;
  #L3e793c.  call temp:= `getCacheKey`(v2) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3e7942.  v0:= temp @kind object;
  #L3e7944.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3e794a.  v0:= temp;
  #L3e794c.  v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int` := v0;
  #L3e7950.  v0:= v0 * 31;
  #L3e7954.  v1:= v2.`com.bumptech.glide.load.model.GlideUrl.a` @type ^`com.bumptech.glide.load.model.Headers` @kind object;
  #L3e7958.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3e795e.  v1:= temp;
  #L3e7960.  v0:= v0 + v1 @kind int;
  #L3e7962.  v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int` := v0;
  #L3e7966.  v0:= v2.`com.bumptech.glide.load.model.GlideUrl.g` @type ^`int`;
  #L3e796a.  return v0;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7a10.  call temp:= `getCacheKey`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.getCacheKey:()Ljava/lang/String;` @kind virtual;
  #L3e7a16.  v0:= temp @kind object;
  #L3e7a18.  return v0 @kind object;
}
procedure `java.lang.String` `toStringUrl`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toStringUrl:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7a2c.  call temp:= `b`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.b:()Ljava/lang/String;` @kind direct;
  #L3e7a32.  v0:= temp @kind object;
  #L3e7a34.  return v0 @kind object;
}
procedure `java.net.URL` `toURL`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.toURL:()Ljava/net/URL;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7a7c.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.c:()Ljava/net/URL;` @kind direct;
  #L3e7a82.  v0:= temp @kind object;
  #L3e7a84.  return v0 @kind object;
}
procedure `void` `updateDiskCacheKey`(`com.bumptech.glide.load.model.GlideUrl` v1 @kind this, `java.security.MessageDigest` v2 @kind object) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.updateDiskCacheKey:(Ljava/security/MessageDigest;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e7b6c.  call temp:= `a`(v1) @signature `Lcom/bumptech/glide/load/model/GlideUrl;.a:()[B` @kind direct;
  #L3e7b72.  v0:= temp @kind object;
  #L3e7b74.  call `update`(v2, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L3e7b7a.  return @kind void;
}
