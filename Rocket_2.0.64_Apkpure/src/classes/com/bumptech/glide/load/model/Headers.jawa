record `com.bumptech.glide.load.model.Headers` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `com.bumptech.glide.load.model.Headers` `@@com.bumptech.glide.load.model.Headers.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.bumptech.glide.load.model.Headers` `@@com.bumptech.glide.load.model.Headers.NONE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/load/model/Headers;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e7bc0.  v0:= new `com.bumptech.glide.load.model.Headers$a`;
  #L3e7bc4.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/Headers$a;.<init>:()V` @kind direct;
  #L3e7bca.  `@@com.bumptech.glide.load.model.Headers.NONE` @type ^`com.bumptech.glide.load.model.Headers` := v0 @kind object;
  #L3e7bce.  v0:= new `com.bumptech.glide.load.model.LazyHeaders$Builder`;
  #L3e7bd2.  call `<init>`(v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.<init>:()V` @kind direct;
  #L3e7bd8.  call temp:= `build`(v0) @signature `Lcom/bumptech/glide/load/model/LazyHeaders$Builder;.build:()Lcom/bumptech/glide/load/model/LazyHeaders;` @kind virtual;
  #L3e7bde.  v0:= temp @kind object;
  #L3e7be0.  `@@com.bumptech.glide.load.model.Headers.DEFAULT` @type ^`com.bumptech.glide.load.model.Headers` := v0 @kind object;
  #L3e7be4.  return @kind void;
}
procedure `java.util.Map` `getHeaders`() @signature `Lcom/bumptech/glide/load/model/Headers;.getHeaders:()Ljava/util/Map;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
