record `com.bumptech.glide.load.ImageHeaderParserUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.bumptech.glide.load.ImageHeaderParserUtils` v0 @kind this) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3da874.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3da87a.  return @kind void;
}
procedure `int` `a`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.ImageHeaderParserUtils$g` v5 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3da830.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3da836.  v0:= temp;
  #L3da838.  v1:= 0I;
  #L3da83a.  v2:= -1I;
  #L3da83c.  if v1 >= v0 then goto L3da860;
  #L3da840.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3da846.  v3:= temp @kind object;
  #L3da848.  v3:= (`com.bumptech.glide.load.ImageHeaderParser`) v3 @kind object;
  #L3da84c.  call temp:= `a`(v5, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)I` @kind interface;
  #L3da852.  v3:= temp;
  #L3da854.  if v3 == v2 then goto L3da85a;
  #L3da858.  return v3;
  #L3da85a.  v1:= v1 + 1;
  #L3da85e.  goto L3da83a;
  #L3da860.  return v2;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `b`(`java.util.List` v4 @kind object, `com.bumptech.glide.load.ImageHeaderParserUtils$h` v5 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$h;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3da748.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3da74e.  v0:= temp;
  #L3da750.  v1:= 0I;
  #L3da752.  if v1 >= v0 then goto L3da77a;
  #L3da756.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3da75c.  v2:= temp @kind object;
  #L3da75e.  v2:= (`com.bumptech.glide.load.ImageHeaderParser`) v2 @kind object;
  #L3da762.  call temp:= `a`(v5, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$h;.a:(Lcom/bumptech/glide/load/ImageHeaderParser;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind interface;
  #L3da768.  v2:= temp @kind object;
  #L3da76a.  v3:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3da76e.  if v2 == v3 then goto L3da774;
  #L3da772.  return v2 @kind object;
  #L3da774.  v1:= v1 + 1;
  #L3da778.  goto L3da752;
  #L3da77a.  v4:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3da77e.  return v4 @kind object;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.data.ParcelFileDescriptorRewinder` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getOrientation:(Ljava/util/List;Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da790.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$f`;
  #L3da794.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$f;.<init>:(Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da79a.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)I` @kind static;
  #L3da7a0.  v1:= temp;
  #L3da7a2.  return v1;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getOrientation:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da7b4.  if v2 != 0 then goto L3da7bc;
  #L3da7b8.  v1:= -1I;
  #L3da7ba.  return v1;
  #L3da7bc.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3da7c2.  v0:= temp;
  #L3da7c4.  if v0 != 0 then goto L3da7d4;
  #L3da7c8.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L3da7cc.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da7d2.  v2:= v0 @kind object;
  #L3da7d4.  v0:= 5242880I;
  #L3da7d8.  call `mark`(v2, v0) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3da7de.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$e`;
  #L3da7e2.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$e;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da7e8.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)I` @kind static;
  #L3da7ee.  v1:= temp;
  #L3da7f0.  return v1;
}
procedure `int` `getOrientation`(`java.util.List` v1 @kind object, `java.nio.ByteBuffer` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getOrientation:(Ljava/util/List;Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da804.  if v2 != 0 then goto L3da80c;
  #L3da808.  v1:= -1I;
  #L3da80a.  return v1;
  #L3da80c.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$d`;
  #L3da810.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$d;.<init>:(Ljava/nio/ByteBuffer;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da816.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.a:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$g;)I` @kind static;
  #L3da81c.  v1:= temp;
  #L3da81e.  return v1;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `com.bumptech.glide.load.data.ParcelFileDescriptorRewinder` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da6a4.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$c`;
  #L3da6a8.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$c;.<init>:(Lcom/bumptech/glide/load/data/ParcelFileDescriptorRewinder;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da6ae.  call temp:= `b`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$h;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3da6b4.  v1:= temp @kind object;
  #L3da6b6.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.io.InputStream` v2 @kind object, `com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool` v3 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da6c8.  if v2 != 0 then goto L3da6d2;
  #L3da6cc.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3da6d0.  return v1 @kind object;
  #L3da6d2.  call temp:= `markSupported`(v2) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3da6d8.  v0:= temp;
  #L3da6da.  if v0 != 0 then goto L3da6ea;
  #L3da6de.  v0:= new `com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream`;
  #L3da6e2.  call `<init>`(v0, v2, v3) @signature `Lcom/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream;.<init>:(Ljava/io/InputStream;Lcom/bumptech/glide/load/engine/bitmap_recycle/ArrayPool;)V` @kind direct;
  #L3da6e8.  v2:= v0 @kind object;
  #L3da6ea.  v3:= 5242880I;
  #L3da6ee.  call `mark`(v2, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3da6f4.  v3:= new `com.bumptech.glide.load.ImageHeaderParserUtils$a`;
  #L3da6f8.  call `<init>`(v3, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$a;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3da6fe.  call temp:= `b`(v1, v3) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$h;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3da704.  v1:= temp @kind object;
  #L3da706.  return v1 @kind object;
}
procedure `com.bumptech.glide.load.ImageHeaderParser$ImageType` `getType`(`java.util.List` v1 @kind object, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.getType:(Ljava/util/List;Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3da718.  if v2 != 0 then goto L3da722;
  #L3da71c.  v1:= `@@com.bumptech.glide.load.ImageHeaderParser$ImageType.UNKNOWN` @type ^`com.bumptech.glide.load.ImageHeaderParser$ImageType` @kind object;
  #L3da720.  return v1 @kind object;
  #L3da722.  v0:= new `com.bumptech.glide.load.ImageHeaderParserUtils$b`;
  #L3da726.  call `<init>`(v0, v2) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils$b;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L3da72c.  call temp:= `b`(v1, v0) @signature `Lcom/bumptech/glide/load/ImageHeaderParserUtils;.b:(Ljava/util/List;Lcom/bumptech/glide/load/ImageHeaderParserUtils$h;)Lcom/bumptech/glide/load/ImageHeaderParser$ImageType;` @kind static;
  #L3da732.  v1:= temp @kind object;
  #L3da734.  return v1 @kind object;
}
