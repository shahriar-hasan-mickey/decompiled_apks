record `com.bumptech.glide.GlideExperiments$a` @kind class @AccessFlag FINAL {
  `java.util.Map` `com.bumptech.glide.GlideExperiments$a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.GlideExperiments$a` v1 @kind this) @signature `Lcom/bumptech/glide/GlideExperiments$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d1a74.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d1a7a.  v0:= new `java.util.HashMap`;
  #L3d1a7e.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3d1a84.  v1.`com.bumptech.glide.GlideExperiments$a.a` @type ^`java.util.Map` := v0 @kind object;
  #L3d1a88.  return @kind void;
}
procedure `java.util.Map` `a`(`com.bumptech.glide.GlideExperiments$a` v0 @kind object) @signature `Lcom/bumptech/glide/GlideExperiments$a;.a:(Lcom/bumptech/glide/GlideExperiments$a;)Ljava/util/Map;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3d1a5c.  v0:= v0.`com.bumptech.glide.GlideExperiments$a.a` @type ^`java.util.Map` @kind object;
  #L3d1a60.  return v0 @kind object;
}
procedure `com.bumptech.glide.GlideExperiments$a` `b`(`com.bumptech.glide.GlideExperiments$a` v2 @kind this, `com.bumptech.glide.GlideExperiments$b` v3 @kind object) @signature `Lcom/bumptech/glide/GlideExperiments$a;.b:(Lcom/bumptech/glide/GlideExperiments$b;)Lcom/bumptech/glide/GlideExperiments$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3d1a08.  v0:= v2.`com.bumptech.glide.GlideExperiments$a.a` @type ^`java.util.Map` @kind object;
  #L3d1a0c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3d1a12.  v1:= temp @kind object;
  #L3d1a14.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d1a1a.  return v2 @kind object;
}
procedure `com.bumptech.glide.GlideExperiments` `c`(`com.bumptech.glide.GlideExperiments$a` v1 @kind this) @signature `Lcom/bumptech/glide/GlideExperiments$a;.c:()Lcom/bumptech/glide/GlideExperiments;` @AccessFlag  {
    temp;
    v0;

  #L3d19ec.  v0:= new `com.bumptech.glide.GlideExperiments`;
  #L3d19f0.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/GlideExperiments;.<init>:(Lcom/bumptech/glide/GlideExperiments$a;)V` @kind direct;
  #L3d19f6.  return v0 @kind object;
}
procedure `com.bumptech.glide.GlideExperiments$a` `d`(`com.bumptech.glide.GlideExperiments$a` v0 @kind this, `com.bumptech.glide.GlideExperiments$b` v1 @kind object, `boolean` v2 ) @signature `Lcom/bumptech/glide/GlideExperiments$a;.d:(Lcom/bumptech/glide/GlideExperiments$b;Z)Lcom/bumptech/glide/GlideExperiments$a;` @AccessFlag  {
    temp;

  #L3d1a2c.  if v2 == 0 then goto L3d1a38;
  #L3d1a30.  call temp:= `b`(v0, v1) @signature `Lcom/bumptech/glide/GlideExperiments$a;.b:(Lcom/bumptech/glide/GlideExperiments$b;)Lcom/bumptech/glide/GlideExperiments$a;` @kind virtual;
  #L3d1a36.  goto L3d1a4a;
  #L3d1a38.  v2:= v0.`com.bumptech.glide.GlideExperiments$a.a` @type ^`java.util.Map` @kind object;
  #L3d1a3c.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3d1a42.  v1:= temp @kind object;
  #L3d1a44.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3d1a4a.  return v0 @kind object;
}
