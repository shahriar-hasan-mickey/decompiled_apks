record `com.bumptech.glide.GlideExperiments` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.GlideExperiments.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.GlideExperiments` v1 @kind this, `com.bumptech.glide.GlideExperiments$a` v2 @kind object) @signature `Lcom/bumptech/glide/GlideExperiments;.<init>:(Lcom/bumptech/glide/GlideExperiments$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d1abc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d1ac2.  v0:= new `java.util.HashMap`;
  #L3d1ac6.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/GlideExperiments$a;.a:(Lcom/bumptech/glide/GlideExperiments$a;)Ljava/util/Map;` @kind static;
  #L3d1acc.  v2:= temp @kind object;
  #L3d1ace.  call `<init>`(v0, v2) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L3d1ad4.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L3d1ada.  v2:= temp @kind object;
  #L3d1adc.  v1.`com.bumptech.glide.GlideExperiments.a` @type ^`java.util.Map` := v2 @kind object;
  #L3d1ae0.  return @kind void;
}
procedure `boolean` `isEnabled`(`com.bumptech.glide.GlideExperiments` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/GlideExperiments;.isEnabled:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d1a9c.  v0:= v1.`com.bumptech.glide.GlideExperiments.a` @type ^`java.util.Map` @kind object;
  #L3d1aa0.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3d1aa6.  v2:= temp;
  #L3d1aa8.  return v2;
}
