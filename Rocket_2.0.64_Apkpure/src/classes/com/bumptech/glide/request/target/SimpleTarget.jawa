record `com.bumptech.glide.request.target.SimpleTarget` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.bumptech.glide.request.target.BaseTarget` @kind class {
  `int` `com.bumptech.glide.request.target.SimpleTarget.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.request.target.SimpleTarget.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.bumptech.glide.request.target.SimpleTarget` v1 @kind this) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fc944.  v0:= -2147483648I;
  #L3fc948.  call `<init>`(v1, v0, v0) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:(II)V` @kind direct;
  #L3fc94e.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.request.target.SimpleTarget` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fc960.  call `<init>`(v0) @signature `Lcom/bumptech/glide/request/target/BaseTarget;.<init>:()V` @kind direct;
  #L3fc966.  v0.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int` := v1;
  #L3fc96a.  v0.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int` := v2;
  #L3fc96e.  return @kind void;
}
procedure `void` `getSize`(`com.bumptech.glide.request.target.SimpleTarget` v2 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v3 @kind object) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.getSize:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3fc980.  v0:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3fc984.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3fc988.  call temp:= `isValidDimensions`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.isValidDimensions:(II)Z` @kind static;
  #L3fc98e.  v0:= temp;
  #L3fc990.  if v0 == 0 then goto L3fc9a4;
  #L3fc994.  v0:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3fc998.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3fc99c.  call `onSizeReady`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/target/SizeReadyCallback;.onSizeReady:(II)V` @kind interface;
  #L3fc9a2.  return @kind void;
  #L3fc9a4.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fc9a8.  v0:= new `java.lang.StringBuilder`;
  #L3fc9ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fc9b2.  v1:= "Width and height must both be > 0 or Target#SIZE_ORIGINAL, but given width: " @kind object;
  #L3fc9b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc9bc.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.b` @type ^`int`;
  #L3fc9c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc9c6.  v1:= " and height: " @kind object;
  #L3fc9ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc9d0.  v1:= v2.`com.bumptech.glide.request.target.SimpleTarget.c` @type ^`int`;
  #L3fc9d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc9da.  v1:= ", either provide dimensions in the constructor or call override()" @kind object;
  #L3fc9de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fc9e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fc9ea.  v0:= temp @kind object;
  #L3fc9ec.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc9f2.  throw v3;
}
procedure `void` `removeCallback`(`com.bumptech.glide.request.target.SimpleTarget` v0 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v1 @kind object) @signature `Lcom/bumptech/glide/request/target/SimpleTarget;.removeCallback:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag PUBLIC {
    temp;

  #L3fca04.  return @kind void;
}
