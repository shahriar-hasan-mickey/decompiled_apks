record `com.bumptech.glide.request.target.ViewTarget$b` @kind class @AccessFlag FINAL {
  `android.view.View` `com.bumptech.glide.request.target.ViewTarget$b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `com.bumptech.glide.request.target.ViewTarget$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.bumptech.glide.request.target.ViewTarget$b.c` @AccessFlag ;
  `com.bumptech.glide.request.target.ViewTarget$b$a` `com.bumptech.glide.request.target.ViewTarget$b.d` @AccessFlag PRIVATE;
}
global `java.lang.Integer` `@@com.bumptech.glide.request.target.ViewTarget$b.e` @AccessFlag STATIC;
procedure `void` `<init>`(`com.bumptech.glide.request.target.ViewTarget$b` v1 @kind this, `android.view.View` v2 @kind object) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.<init>:(Landroid/view/View;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fcd94.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fcd9a.  v0:= new `java.util.ArrayList`;
  #L3fcd9e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3fcda4.  v1.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` := v0 @kind object;
  #L3fcda8.  v1.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` := v2 @kind object;
  #L3fcdac.  return @kind void;
}
procedure `int` `c`(`android.content.Context` v1 @kind object) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.c:(Landroid/content/Context;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3fcbe4.  v0:= `@@com.bumptech.glide.request.target.ViewTarget$b.e` @type ^`java.lang.Integer` @kind object;
  #L3fcbe8.  if v0 != 0 then goto L3fcc3c;
  #L3fcbec.  v0:= "window" @kind object;
  #L3fcbf0.  call temp:= `getSystemService`(v1, v0) @signature `Landroid/content/Context;.getSystemService:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L3fcbf6.  v1:= temp @kind object;
  #L3fcbf8.  v1:= (`android.view.WindowManager`) v1 @kind object;
  #L3fcbfc.  call temp:= `checkNotNull`(v1) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3fcc02.  v1:= temp @kind object;
  #L3fcc04.  v1:= (`android.view.WindowManager`) v1 @kind object;
  #L3fcc08.  call temp:= `getDefaultDisplay`(v1) @signature `Landroid/view/WindowManager;.getDefaultDisplay:()Landroid/view/Display;` @kind interface;
  #L3fcc0e.  v1:= temp @kind object;
  #L3fcc10.  v0:= new `android.graphics.Point`;
  #L3fcc14.  call `<init>`(v0) @signature `Landroid/graphics/Point;.<init>:()V` @kind direct;
  #L3fcc1a.  call `getSize`(v1, v0) @signature `Landroid/view/Display;.getSize:(Landroid/graphics/Point;)V` @kind virtual;
  #L3fcc20.  v1:= v0.`android.graphics.Point.x` @type ^`int`;
  #L3fcc24.  v0:= v0.`android.graphics.Point.y` @type ^`int`;
  #L3fcc28.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3fcc2e.  v1:= temp;
  #L3fcc30.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3fcc36.  v1:= temp @kind object;
  #L3fcc38.  `@@com.bumptech.glide.request.target.ViewTarget$b.e` @type ^`java.lang.Integer` := v1 @kind object;
  #L3fcc3c.  v1:= `@@com.bumptech.glide.request.target.ViewTarget$b.e` @type ^`java.lang.Integer` @kind object;
  #L3fcc40.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3fcc46.  v1:= temp;
  #L3fcc48.  return v1;
}
procedure `int` `e`(`com.bumptech.glide.request.target.ViewTarget$b` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.e:(III)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3fcc5c.  v0:= v4 - v5 @kind int;
  #L3fcc60.  if v0 <= 0 then goto L3fcc66;
  #L3fcc64.  return v0;
  #L3fcc66.  v0:= v2.`com.bumptech.glide.request.target.ViewTarget$b.c` @type ^`boolean` @kind boolean;
  #L3fcc6a.  v1:= 0I;
  #L3fcc6c.  if v0 == 0 then goto L3fcc82;
  #L3fcc70.  v0:= v2.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcc74.  call temp:= `isLayoutRequested`(v0) @signature `Landroid/view/View;.isLayoutRequested:()Z` @kind virtual;
  #L3fcc7a.  v0:= temp;
  #L3fcc7c.  if v0 == 0 then goto L3fcc82;
  #L3fcc80.  return v1;
  #L3fcc82.  v3:= v3 - v5 @kind int;
  #L3fcc84.  if v3 <= 0 then goto L3fcc8a;
  #L3fcc88.  return v3;
  #L3fcc8a.  v3:= v2.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcc8e.  call temp:= `isLayoutRequested`(v3) @signature `Landroid/view/View;.isLayoutRequested:()Z` @kind virtual;
  #L3fcc94.  v3:= temp;
  #L3fcc96.  if v3 != 0 then goto L3fccd2;
  #L3fcc9a.  v3:= -2I;
  #L3fcc9c.  if v4 != v3 then goto L3fccd2;
  #L3fcca0.  v3:= 4I;
  #L3fcca2.  v4:= "ViewTarget" @kind object;
  #L3fcca6.  call temp:= `isLoggable`(v4, v3) @signature `Landroid/util/Log;.isLoggable:(Ljava/lang/String;I)Z` @kind static;
  #L3fccac.  v3:= temp;
  #L3fccae.  if v3 == 0 then goto L3fccbc;
  #L3fccb2.  v3:= "Glide treats LayoutParams.WRAP_CONTENT as a request for an image the size of this device's screen dimensions. If you want to load the original image and are ok with the corresponding memory cost and OOMs (depending on the input size), use override(Target.SIZE_ORIGINAL). Otherwise, use LayoutParams.MATCH_PARENT, set layout_width and layout_height to fixed dimension, or use .override() with fixed dimensions." @kind object;
  #L3fccb6.  call temp:= `i`(v4, v3) @signature `Landroid/util/Log;.i:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L3fccbc.  v3:= v2.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fccc0.  call temp:= `getContext`(v3) @signature `Landroid/view/View;.getContext:()Landroid/content/Context;` @kind virtual;
  #L3fccc6.  v3:= temp @kind object;
  #L3fccc8.  call temp:= `c`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.c:(Landroid/content/Context;)I` @kind static;
  #L3fccce.  v3:= temp;
  #L3fccd0.  return v3;
  #L3fccd2.  return v1;
}
procedure `int` `f`(`com.bumptech.glide.request.target.ViewTarget$b` v3 @kind this) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.f:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3fcce4.  v0:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcce8.  call temp:= `getPaddingTop`(v0) @signature `Landroid/view/View;.getPaddingTop:()I` @kind virtual;
  #L3fccee.  v0:= temp;
  #L3fccf0.  v1:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fccf4.  call temp:= `getPaddingBottom`(v1) @signature `Landroid/view/View;.getPaddingBottom:()I` @kind virtual;
  #L3fccfa.  v1:= temp;
  #L3fccfc.  v0:= v0 + v1 @kind int;
  #L3fccfe.  v1:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd02.  call temp:= `getLayoutParams`(v1) @signature `Landroid/view/View;.getLayoutParams:()Landroid/view/ViewGroup$LayoutParams;` @kind virtual;
  #L3fcd08.  v1:= temp @kind object;
  #L3fcd0a.  if v1 == 0 then goto L3fcd14;
  #L3fcd0e.  v1:= v1.`android.view.ViewGroup$LayoutParams.height` @type ^`int`;
  #L3fcd12.  goto L3fcd16;
  #L3fcd14.  v1:= 0I;
  #L3fcd16.  v2:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd1a.  call temp:= `getHeight`(v2) @signature `Landroid/view/View;.getHeight:()I` @kind virtual;
  #L3fcd20.  v2:= temp;
  #L3fcd22.  call temp:= `e`(v3, v2, v1, v0) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.e:(III)I` @kind direct;
  #L3fcd28.  v0:= temp;
  #L3fcd2a.  return v0;
}
procedure `int` `g`(`com.bumptech.glide.request.target.ViewTarget$b` v3 @kind this) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.g:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3fcd3c.  v0:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd40.  call temp:= `getPaddingLeft`(v0) @signature `Landroid/view/View;.getPaddingLeft:()I` @kind virtual;
  #L3fcd46.  v0:= temp;
  #L3fcd48.  v1:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd4c.  call temp:= `getPaddingRight`(v1) @signature `Landroid/view/View;.getPaddingRight:()I` @kind virtual;
  #L3fcd52.  v1:= temp;
  #L3fcd54.  v0:= v0 + v1 @kind int;
  #L3fcd56.  v1:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd5a.  call temp:= `getLayoutParams`(v1) @signature `Landroid/view/View;.getLayoutParams:()Landroid/view/ViewGroup$LayoutParams;` @kind virtual;
  #L3fcd60.  v1:= temp @kind object;
  #L3fcd62.  if v1 == 0 then goto L3fcd6c;
  #L3fcd66.  v1:= v1.`android.view.ViewGroup$LayoutParams.width` @type ^`int`;
  #L3fcd6a.  goto L3fcd6e;
  #L3fcd6c.  v1:= 0I;
  #L3fcd6e.  v2:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fcd72.  call temp:= `getWidth`(v2) @signature `Landroid/view/View;.getWidth:()I` @kind virtual;
  #L3fcd78.  v2:= temp;
  #L3fcd7a.  call temp:= `e`(v3, v2, v1, v0) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.e:(III)I` @kind direct;
  #L3fcd80.  v0:= temp;
  #L3fcd82.  return v0;
}
procedure `boolean` `h`(`com.bumptech.glide.request.target.ViewTarget$b` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.h:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fcb8c.  if v2 > 0 then goto L3fcb9e;
  #L3fcb90.  v0:= -2147483648I;
  #L3fcb94.  if v2 != v0 then goto L3fcb9a;
  #L3fcb98.  goto L3fcb9e;
  #L3fcb9a.  v2:= 0I;
  #L3fcb9c.  goto L3fcba0;
  #L3fcb9e.  v2:= 1I;
  #L3fcba0.  return v2;
}
procedure `boolean` `i`(`com.bumptech.glide.request.target.ViewTarget$b` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.i:(II)Z` @AccessFlag PRIVATE {
    temp;

  #L3fcbb4.  call temp:= `h`(v0, v1) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.h:(I)Z` @kind direct;
  #L3fcbba.  v1:= temp;
  #L3fcbbc.  if v1 == 0 then goto L3fcbd0;
  #L3fcbc0.  call temp:= `h`(v0, v2) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.h:(I)Z` @kind direct;
  #L3fcbc6.  v1:= temp;
  #L3fcbc8.  if v1 == 0 then goto L3fcbd0;
  #L3fcbcc.  v1:= 1I;
  #L3fcbce.  goto L3fcbd2;
  #L3fcbd0.  v1:= 0I;
  #L3fcbd2.  return v1;
}
procedure `void` `j`(`com.bumptech.glide.request.target.ViewTarget$b` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.j:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3fcecc.  v0:= new `java.util.ArrayList`;
  #L3fced0.  v1:= v2.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fced4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3fceda.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3fcee0.  v0:= temp @kind object;
  #L3fcee2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3fcee8.  v1:= temp;
  #L3fceea.  if v1 == 0 then goto L3fcf02;
  #L3fceee.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3fcef4.  v1:= temp @kind object;
  #L3fcef6.  v1:= (`com.bumptech.glide.request.target.SizeReadyCallback`) v1 @kind object;
  #L3fcefa.  call `onSizeReady`(v1, v3, v4) @signature `Lcom/bumptech/glide/request/target/SizeReadyCallback;.onSizeReady:(II)V` @kind interface;
  #L3fcf00.  goto L3fcee2;
  #L3fcf02.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.request.target.ViewTarget$b` v3 @kind this) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3fcdc0.  v0:= v3.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fcdc4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3fcdca.  v0:= temp;
  #L3fcdcc.  if v0 == 0 then goto L3fcdd2;
  #L3fcdd0.  return @kind void;
  #L3fcdd2.  call temp:= `g`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.g:()I` @kind direct;
  #L3fcdd8.  v0:= temp;
  #L3fcdda.  call temp:= `f`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.f:()I` @kind direct;
  #L3fcde0.  v1:= temp;
  #L3fcde2.  call temp:= `i`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.i:(II)Z` @kind direct;
  #L3fcde8.  v2:= temp;
  #L3fcdea.  if v2 != 0 then goto L3fcdf0;
  #L3fcdee.  return @kind void;
  #L3fcdf0.  call `j`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.j:(II)V` @kind direct;
  #L3fcdf6.  call `b`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.b:()V` @kind virtual;
  #L3fcdfc.  return @kind void;
}
procedure `void` `b`(`com.bumptech.glide.request.target.ViewTarget$b` v2 @kind this) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fce10.  v0:= v2.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fce14.  call temp:= `getViewTreeObserver`(v0) @signature `Landroid/view/View;.getViewTreeObserver:()Landroid/view/ViewTreeObserver;` @kind virtual;
  #L3fce1a.  v0:= temp @kind object;
  #L3fce1c.  call temp:= `isAlive`(v0) @signature `Landroid/view/ViewTreeObserver;.isAlive:()Z` @kind virtual;
  #L3fce22.  v1:= temp;
  #L3fce24.  if v1 == 0 then goto L3fce32;
  #L3fce28.  v1:= v2.`com.bumptech.glide.request.target.ViewTarget$b.d` @type ^`com.bumptech.glide.request.target.ViewTarget$b$a` @kind object;
  #L3fce2c.  call `removeOnPreDrawListener`(v0, v1) @signature `Landroid/view/ViewTreeObserver;.removeOnPreDrawListener:(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V` @kind virtual;
  #L3fce32.  v0:= 0I;
  #L3fce34.  v2.`com.bumptech.glide.request.target.ViewTarget$b.d` @type ^`com.bumptech.glide.request.target.ViewTarget$b$a` := v0 @kind object;
  #L3fce38.  v0:= v2.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fce3c.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L3fce42.  return @kind void;
}
procedure `void` `d`(`com.bumptech.glide.request.target.ViewTarget$b` v3 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v4 @kind object) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.d:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3fce54.  call temp:= `g`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.g:()I` @kind direct;
  #L3fce5a.  v0:= temp;
  #L3fce5c.  call temp:= `f`(v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.f:()I` @kind direct;
  #L3fce62.  v1:= temp;
  #L3fce64.  call temp:= `i`(v3, v0, v1) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.i:(II)Z` @kind direct;
  #L3fce6a.  v2:= temp;
  #L3fce6c.  if v2 == 0 then goto L3fce78;
  #L3fce70.  call `onSizeReady`(v4, v0, v1) @signature `Lcom/bumptech/glide/request/target/SizeReadyCallback;.onSizeReady:(II)V` @kind interface;
  #L3fce76.  return @kind void;
  #L3fce78.  v0:= v3.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fce7c.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3fce82.  v0:= temp;
  #L3fce84.  if v0 != 0 then goto L3fce92;
  #L3fce88.  v0:= v3.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fce8c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3fce92.  v4:= v3.`com.bumptech.glide.request.target.ViewTarget$b.d` @type ^`com.bumptech.glide.request.target.ViewTarget$b$a` @kind object;
  #L3fce96.  if v4 != 0 then goto L3fceba;
  #L3fce9a.  v4:= v3.`com.bumptech.glide.request.target.ViewTarget$b.a` @type ^`android.view.View` @kind object;
  #L3fce9e.  call temp:= `getViewTreeObserver`(v4) @signature `Landroid/view/View;.getViewTreeObserver:()Landroid/view/ViewTreeObserver;` @kind virtual;
  #L3fcea4.  v4:= temp @kind object;
  #L3fcea6.  v0:= new `com.bumptech.glide.request.target.ViewTarget$b$a`;
  #L3fceaa.  call `<init>`(v0, v3) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b$a;.<init>:(Lcom/bumptech/glide/request/target/ViewTarget$b;)V` @kind direct;
  #L3fceb0.  v3.`com.bumptech.glide.request.target.ViewTarget$b.d` @type ^`com.bumptech.glide.request.target.ViewTarget$b$a` := v0 @kind object;
  #L3fceb4.  call `addOnPreDrawListener`(v4, v0) @signature `Landroid/view/ViewTreeObserver;.addOnPreDrawListener:(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V` @kind virtual;
  #L3fceba.  return @kind void;
}
procedure `void` `k`(`com.bumptech.glide.request.target.ViewTarget$b` v1 @kind this, `com.bumptech.glide.request.target.SizeReadyCallback` v2 @kind object) @signature `Lcom/bumptech/glide/request/target/ViewTarget$b;.k:(Lcom/bumptech/glide/request/target/SizeReadyCallback;)V` @AccessFlag  {
    temp;
    v0;

  #L3fcf14.  v0:= v1.`com.bumptech.glide.request.target.ViewTarget$b.b` @type ^`java.util.List` @kind object;
  #L3fcf18.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L3fcf1e.  return @kind void;
}
