record `com.bumptech.glide.util.MarkEnforcingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `com.bumptech.glide.util.MarkEnforcingInputStream.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff28c.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3ff292.  v1:= -2147483648I;
  #L3ff296.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v1;
  #L3ff29a.  return @kind void;
}
procedure `long` `a`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff21c.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3ff220.  if v0 != 0 then goto L3ff22a;
  #L3ff224.  v5:= -1L;
  #L3ff228.  return v5 @kind wide;
  #L3ff22a.  v1:= -2147483648I;
  #L3ff22e.  if v0 == v1 then goto L3ff23e;
  #L3ff232.  v1:= (`long`) v0 @kind i2l;
  #L3ff234.  v3:= lcmp(v5, v1);
  #L3ff238.  if v3 <= 0 then goto L3ff23e;
  #L3ff23c.  v5:= (`long`) v0 @kind i2l;
  #L3ff23e.  return v5 @kind wide;
}
procedure `void` `b`(`com.bumptech.glide.util.MarkEnforcingInputStream` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff318.  v0:= v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3ff31c.  v1:= -2147483648I;
  #L3ff320.  if v0 == v1 then goto L3ff33a;
  #L3ff324.  v1:= -1L;
  #L3ff328.  v3:= lcmp(v5, v1);
  #L3ff32c.  if v3 == 0 then goto L3ff33a;
  #L3ff330.  v0:= (`long`) v0 @kind i2l;
  #L3ff332.  v0:= v0 - v5 @kind long;
  #L3ff334.  v5:= (`int`) v0 @kind l2i;
  #L3ff336.  v4.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v5;
  #L3ff33a.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff170.  v0:= v2.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int`;
  #L3ff174.  v1:= -2147483648I;
  #L3ff178.  if v0 != v1 then goto L3ff186;
  #L3ff17c.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L3ff182.  v0:= temp;
  #L3ff184.  goto L3ff196;
  #L3ff186.  call temp:= `available`(v2) @signature `Ljava/io/FilterInputStream;.available:()I` @kind super;
  #L3ff18c.  v1:= temp;
  #L3ff18e.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3ff194.  v0:= temp;
  #L3ff196.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.util.MarkEnforcingInputStream` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3ff2ac.  @monitorenter v0
  #L3ff2ae.  call `mark`(v0, v1) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L3ff2b4.  v0.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v1;
  #L3ff2b8.  @monitorexit v0
  #L3ff2ba.  return @kind void;
  #L3ff2bc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ff2be.  @monitorexit v0
  #L3ff2c0.  throw v1;
  catch `java.lang.Throwable` @[L3ff2ae..L3ff2b8] goto L3ff2bc;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v7 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff1a8.  v0:= 1L;
  #L3ff1ac.  call temp:= `a`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3ff1b2.  v2:= temp @kind wide;
  #L3ff1b4.  v4:= -1L;
  #L3ff1b8.  v6:= lcmp(v2, v4);
  #L3ff1bc.  if v6 != 0 then goto L3ff1c4;
  #L3ff1c0.  v0:= -1I;
  #L3ff1c2.  return v0;
  #L3ff1c4.  call temp:= `read`(v7) @signature `Ljava/io/FilterInputStream;.read:()I` @kind super;
  #L3ff1ca.  v2:= temp;
  #L3ff1cc.  call `b`(v7, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3ff1d2.  return v2;
}
procedure `int` `read`(`com.bumptech.glide.util.MarkEnforcingInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff1e4.  v0:= (`long`) v5 @kind i2l;
  #L3ff1e6.  call temp:= `a`(v2, v0) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3ff1ec.  v0:= temp @kind wide;
  #L3ff1ee.  v5:= (`int`) v0 @kind l2i;
  #L3ff1f0.  v0:= -1I;
  #L3ff1f2.  if v5 != v0 then goto L3ff1f8;
  #L3ff1f6.  return v0;
  #L3ff1f8.  call temp:= `read`(v2, v3, v4, v5) @signature `Ljava/io/FilterInputStream;.read:([BII)I` @kind super;
  #L3ff1fe.  v3:= temp;
  #L3ff200.  v4:= (`long`) v3 @kind i2l;
  #L3ff202.  call `b`(v2, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3ff208.  return v3;
}
procedure `void` `reset`(`com.bumptech.glide.util.MarkEnforcingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff2e0.  @monitorenter v1
  #L3ff2e2.  call `reset`(v1) @signature `Ljava/io/FilterInputStream;.reset:()V` @kind super;
  #L3ff2e8.  v0:= -2147483648I;
  #L3ff2ec.  v1.`com.bumptech.glide.util.MarkEnforcingInputStream.a` @type ^`int` := v0;
  #L3ff2f0.  @monitorexit v1
  #L3ff2f2.  return @kind void;
  #L3ff2f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ff2f6.  @monitorexit v1
  #L3ff2f8.  throw v0;
  catch `java.lang.Throwable` @[L3ff2e2..L3ff2f0] goto L3ff2f4;
}
procedure `long` `skip`(`com.bumptech.glide.util.MarkEnforcingInputStream` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff250.  call temp:= `a`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.a:(J)J` @kind direct;
  #L3ff256.  v4:= temp @kind wide;
  #L3ff258.  v0:= -1L;
  #L3ff25c.  v2:= lcmp(v4, v0);
  #L3ff260.  if v2 != 0 then goto L3ff26a;
  #L3ff264.  v4:= 0L;
  #L3ff268.  return v4 @kind wide;
  #L3ff26a.  call temp:= `skip`(v3, v4) @signature `Ljava/io/FilterInputStream;.skip:(J)J` @kind super;
  #L3ff270.  v4:= temp @kind wide;
  #L3ff272.  call `b`(v3, v4) @signature `Lcom/bumptech/glide/util/MarkEnforcingInputStream;.b:(J)V` @kind direct;
  #L3ff278.  return v4 @kind wide;
}
