record `com.bumptech.glide.util.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `char`[] `@@com.bumptech.glide.util.Util.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@com.bumptech.glide.util.Util.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `android.os.Handler` `@@com.bumptech.glide.util.Util.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ffb3c.  v0:= "0123456789abcdef" @kind object;
  #L3ffb40.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L3ffb46.  v0:= temp @kind object;
  #L3ffb48.  `@@com.bumptech.glide.util.Util.a` @type ^`char`[] := v0 @kind object;
  #L3ffb4c.  v0:= 64I;
  #L3ffb50.  v0:= new `char`[v0];
  #L3ffb54.  `@@com.bumptech.glide.util.Util.b` @type ^`char`[] := v0 @kind object;
  #L3ffb58.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.Util` v0 @kind this) @signature `Lcom/bumptech/glide/util/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3ffb6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ffb72.  return @kind void;
}
procedure `java.lang.String` `a`(`byte`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lcom/bumptech/glide/util/Util;.a:([B[C)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ffa48.  v0:= 0I;
  #L3ffa4a.  v1:= length @variable v5;
  #L3ffa4c.  if v0 >= v1 then goto L3ffa82;
  #L3ffa50.  v1:= v5[v0] @kind byte;
  #L3ffa54.  v1:= v1 ^& 255;
  #L3ffa58.  v2:= v0 * 2;
  #L3ffa5c.  v3:= `@@com.bumptech.glide.util.Util.a` @type ^`char`[] @kind object;
  #L3ffa60.  v4:= v1 ^>> 4;
  #L3ffa64.  v4:= v3[v4] @kind char;
  #L3ffa68.  v6[v2]:= v4 @kind char;
  #L3ffa6c.  v2:= v2 + 1;
  #L3ffa70.  v1:= v1 ^& 15;
  #L3ffa74.  v1:= v3[v1] @kind char;
  #L3ffa78.  v6[v2]:= v1 @kind char;
  #L3ffa7c.  v0:= v0 + 1;
  #L3ffa80.  goto L3ffa4a;
  #L3ffa82.  v5:= new `java.lang.String`;
  #L3ffa86.  call `<init>`(v5, v6) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3ffa8c.  return v5 @kind object;
}
procedure `void` `assertBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.assertBackgroundThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ffb84.  call temp:= `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @kind static;
  #L3ffb8a.  v0:= temp;
  #L3ffb8c.  if v0 == 0 then goto L3ffb92;
  #L3ffb90.  return @kind void;
  #L3ffb92.  v0:= new `java.lang.IllegalArgumentException`;
  #L3ffb96.  v1:= "You must call this method on a background thread" @kind object;
  #L3ffb9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffba0.  throw v0;
}
procedure `void` `assertMainThread`() @signature `Lcom/bumptech/glide/util/Util;.assertMainThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ffbb4.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L3ffbba.  v0:= temp;
  #L3ffbbc.  if v0 == 0 then goto L3ffbc2;
  #L3ffbc0.  return @kind void;
  #L3ffbc2.  v0:= new `java.lang.IllegalArgumentException`;
  #L3ffbc6.  v1:= "You must call this method on the main thread" @kind object;
  #L3ffbca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ffbd0.  throw v0;
}
procedure `android.os.Handler` `b`() @signature `Lcom/bumptech/glide/util/Util;.b:()Landroid/os/Handler;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff6a8.  v0:= `@@com.bumptech.glide.util.Util.c` @type ^`android.os.Handler` @kind object;
  #L3ff6ac.  if v0 != 0 then goto L3ff6de;
  #L3ff6b0.  v0:= constclass @type ^`com.bumptech.glide.util.Util` @kind object;
  #L3ff6b4.  @monitorenter v0
  #L3ff6b6.  v1:= `@@com.bumptech.glide.util.Util.c` @type ^`android.os.Handler` @kind object;
  #L3ff6ba.  if v1 != 0 then goto L3ff6d4;
  #L3ff6be.  v1:= new `android.os.Handler`;
  #L3ff6c2.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3ff6c8.  v2:= temp @kind object;
  #L3ff6ca.  call `<init>`(v1, v2) @signature `Landroid/os/Handler;.<init>:(Landroid/os/Looper;)V` @kind direct;
  #L3ff6d0.  `@@com.bumptech.glide.util.Util.c` @type ^`android.os.Handler` := v1 @kind object;
  #L3ff6d4.  @monitorexit v0
  #L3ff6d6.  goto L3ff6de;
  #L3ff6d8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ff6da.  @monitorexit v0
  #L3ff6dc.  throw v1;
  #L3ff6de.  v0:= `@@com.bumptech.glide.util.Util.c` @type ^`android.os.Handler` @kind object;
  #L3ff6e2.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3ff6b6..L3ff6dc] goto L3ff6d8;
}
procedure `boolean` `bothModelsNullEquivalentOrEquals`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.bothModelsNullEquivalentOrEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff700.  if v1 != 0 then goto L3ff710;
  #L3ff704.  if v2 != 0 then goto L3ff70c;
  #L3ff708.  v1:= 1I;
  #L3ff70a.  goto L3ff70e;
  #L3ff70c.  v1:= 0I;
  #L3ff70e.  return v1;
  #L3ff710.  v0:= instanceof @variable v1 @type ^`com.bumptech.glide.load.model.Model` @kind boolean;
  #L3ff714.  if v0 == 0 then goto L3ff726;
  #L3ff718.  v1:= (`com.bumptech.glide.load.model.Model`) v1 @kind object;
  #L3ff71c.  call temp:= `isEquivalentTo`(v1, v2) @signature `Lcom/bumptech/glide/load/model/Model;.isEquivalentTo:(Ljava/lang/Object;)Z` @kind interface;
  #L3ff722.  v1:= temp;
  #L3ff724.  return v1;
  #L3ff726.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ff72c.  v1:= temp;
  #L3ff72e.  return v1;
}
procedure `boolean` `bothNullOrEqual`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/Util;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff740.  if v0 != 0 then goto L3ff750;
  #L3ff744.  if v1 != 0 then goto L3ff74c;
  #L3ff748.  v0:= 1I;
  #L3ff74a.  goto L3ff758;
  #L3ff74c.  v0:= 0I;
  #L3ff74e.  goto L3ff758;
  #L3ff750.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ff756.  v0:= temp;
  #L3ff758.  return v0;
}
procedure `boolean` `c`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ff7b8.  if v1 > 0 then goto L3ff7ca;
  #L3ff7bc.  v0:= -2147483648I;
  #L3ff7c0.  if v1 != v0 then goto L3ff7c6;
  #L3ff7c4.  goto L3ff7ca;
  #L3ff7c6.  v1:= 0I;
  #L3ff7c8.  goto L3ff7cc;
  #L3ff7ca.  v1:= 1I;
  #L3ff7cc.  return v1;
}
procedure `java.util.Queue` `createQueue`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ffb20.  v0:= new `java.util.ArrayDeque`;
  #L3ffb24.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L3ffb2a.  return v0 @kind object;
}
procedure `int` `getBitmapByteSize`(`int` v0 , `int` v1 , `android.graphics.Bitmap$Config` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(IILandroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff8d4.  v0:= v0 * v1 @kind int;
  #L3ff8d8.  call temp:= `getBytesPerPixel`(v2) @signature `Lcom/bumptech/glide/util/Util;.getBytesPerPixel:(Landroid/graphics/Bitmap$Config;)I` @kind static;
  #L3ff8de.  v1:= temp;
  #L3ff8e0.  v0:= v0 * v1 @kind int;
  #L3ff8e4.  return v0;
}
procedure `int` `getBitmapByteSize`(`android.graphics.Bitmap` v3 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff810.  call temp:= `isRecycled`(v3) @signature `Landroid/graphics/Bitmap;.isRecycled:()Z` @kind virtual;
  #L3ff816.  v0:= temp;
  #L3ff818.  if v0 != 0 then goto L3ff83c;
  #L3ff81c.  call temp:= `getAllocationByteCount`(v3) @signature `Landroid/graphics/Bitmap;.getAllocationByteCount:()I` @kind virtual;
  #L3ff822.  v3:= temp;
  #L3ff824.  return v3;
  #L3ff826.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L3ff82c.  v0:= temp;
  #L3ff82e.  call temp:= `getRowBytes`(v3) @signature `Landroid/graphics/Bitmap;.getRowBytes:()I` @kind virtual;
  #L3ff834.  v3:= temp;
  #L3ff836.  v0:= v0 * v3 @kind int;
  #L3ff83a.  return v0;
  #L3ff83c.  v0:= new `java.lang.IllegalStateException`;
  #L3ff840.  v1:= new `java.lang.StringBuilder`;
  #L3ff844.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ff84a.  v2:= "Cannot obtain size for recycled Bitmap: " @kind object;
  #L3ff84e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff854.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff85a.  v2:= "[" @kind object;
  #L3ff85e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff864.  call temp:= `getWidth`(v3) @signature `Landroid/graphics/Bitmap;.getWidth:()I` @kind virtual;
  #L3ff86a.  v2:= temp;
  #L3ff86c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff872.  v2:= "x" @kind object;
  #L3ff876.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff87c.  call temp:= `getHeight`(v3) @signature `Landroid/graphics/Bitmap;.getHeight:()I` @kind virtual;
  #L3ff882.  v2:= temp;
  #L3ff884.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff88a.  v2:= "] " @kind object;
  #L3ff88e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff894.  call temp:= `getConfig`(v3) @signature `Landroid/graphics/Bitmap;.getConfig:()Landroid/graphics/Bitmap$Config;` @kind virtual;
  #L3ff89a.  v3:= temp @kind object;
  #L3ff89c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff8a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ff8a8.  v3:= temp @kind object;
  #L3ff8aa.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff8b0.  throw v0;
  catch `java.lang.NullPointerException` @[L3ff81c..L3ff824] goto L3ff826;
}
procedure `int` `getBytesPerPixel`(`android.graphics.Bitmap$Config` v3 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getBytesPerPixel:(Landroid/graphics/Bitmap$Config;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff8f8.  if v3 != 0 then goto L3ff900;
  #L3ff8fc.  v3:= `@@android.graphics.Bitmap$Config.ARGB_8888` @type ^`android.graphics.Bitmap$Config` @kind object;
  #L3ff900.  v0:= `@@com.bumptech.glide.util.Util$a.a` @type ^`int`[] @kind object;
  #L3ff904.  call temp:= `ordinal`(v3) @signature `Landroid/graphics/Bitmap$Config;.ordinal:()I` @kind virtual;
  #L3ff90a.  v3:= temp;
  #L3ff90c.  v3:= v0[v3];
  #L3ff910.  v0:= 4I;
  #L3ff912.  v1:= 2I;
  #L3ff914.  v2:= 1I;
  #L3ff916.  if v3 == v2 then goto L3ff934;
  #L3ff91a.  if v3 == v1 then goto L3ff930;
  #L3ff91e.  v2:= 3I;
  #L3ff920.  if v3 == v2 then goto L3ff930;
  #L3ff924.  if v3 == v0 then goto L3ff92a;
  #L3ff928.  goto L3ff936;
  #L3ff92a.  v0:= 8I;
  #L3ff92e.  goto L3ff936;
  #L3ff930.  v0:= 2I;
  #L3ff932.  goto L3ff936;
  #L3ff934.  v0:= 1I;
  #L3ff936.  return v0;
}
procedure `int` `getSize`(`android.graphics.Bitmap` v0 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSize:(Landroid/graphics/Bitmap;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff948.  call temp:= `getBitmapByteSize`(v0) @signature `Lcom/bumptech/glide/util/Util;.getBitmapByteSize:(Landroid/graphics/Bitmap;)I` @kind static;
  #L3ff94e.  v0:= temp;
  #L3ff950.  return v0;
}
procedure `java.util.List` `getSnapshot`(`java.util.Collection` v2 @kind object) @signature `Lcom/bumptech/glide/util/Util;.getSnapshot:(Ljava/util/Collection;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ffad4.  v0:= new `java.util.ArrayList`;
  #L3ffad8.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3ffade.  v1:= temp;
  #L3ffae0.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3ffae6.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ffaec.  v2:= temp @kind object;
  #L3ffaee.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ffaf4.  v1:= temp;
  #L3ffaf6.  if v1 == 0 then goto L3ffb0e;
  #L3ffafa.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ffb00.  v1:= temp @kind object;
  #L3ffb02.  if v1 == 0 then goto L3ffaee;
  #L3ffb06.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ffb0c.  goto L3ffaee;
  #L3ffb0e.  return v0 @kind object;
}
procedure `int` `hashCode`(`float` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff9a0.  v0:= 17I;
  #L3ff9a4.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(FI)I` @kind static;
  #L3ff9aa.  v1:= temp;
  #L3ff9ac.  return v1;
}
procedure `int` `hashCode`(`float` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(FI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff9c0.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3ff9c6.  v0:= temp;
  #L3ff9c8.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3ff9ce.  v0:= temp;
  #L3ff9d0.  return v0;
}
procedure `int` `hashCode`(`int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff9e4.  v0:= 17I;
  #L3ff9e8.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3ff9ee.  v1:= temp;
  #L3ff9f0.  return v1;
}
procedure `int` `hashCode`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ffa04.  v1:= v1 * 31;
  #L3ffa08.  v1:= v1 + v0 @kind int;
  #L3ffa0a.  return v1;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object, `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ffa1c.  if v0 != 0 then goto L3ffa24;
  #L3ffa20.  v0:= 0I;
  #L3ffa22.  goto L3ffa2c;
  #L3ffa24.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ffa2a.  v0:= temp;
  #L3ffa2c.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3ffa32.  v0:= temp;
  #L3ffa34.  return v0;
}
procedure `int` `hashCode`(`boolean` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(Z)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff964.  v0:= 17I;
  #L3ff968.  call temp:= `hashCode`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(ZI)I` @kind static;
  #L3ff96e.  v1:= temp;
  #L3ff970.  return v1;
}
procedure `int` `hashCode`(`boolean` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(ZI)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff984.  call temp:= `hashCode`(v0, v1) @signature `Lcom/bumptech/glide/util/Util;.hashCode:(II)I` @kind static;
  #L3ff98a.  v0:= temp;
  #L3ff98c.  return v0;
}
procedure `boolean` `isOnBackgroundThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnBackgroundThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff76c.  call temp:= `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @kind static;
  #L3ff772.  v0:= temp;
  #L3ff774.  v0:= v0 ^~ 1;
  #L3ff778.  return v0;
}
procedure `boolean` `isOnMainThread`() @signature `Lcom/bumptech/glide/util/Util;.isOnMainThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ff78c.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L3ff792.  v0:= temp @kind object;
  #L3ff794.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3ff79a.  v1:= temp @kind object;
  #L3ff79c.  if v0 != v1 then goto L3ff7a4;
  #L3ff7a0.  v0:= 1I;
  #L3ff7a2.  goto L3ff7a6;
  #L3ff7a4.  v0:= 0I;
  #L3ff7a6.  return v0;
}
procedure `boolean` `isValidDimensions`(`int` v0 , `int` v1 ) @signature `Lcom/bumptech/glide/util/Util;.isValidDimensions:(II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff7e0.  call temp:= `c`(v0) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @kind static;
  #L3ff7e6.  v0:= temp;
  #L3ff7e8.  if v0 == 0 then goto L3ff7fc;
  #L3ff7ec.  call temp:= `c`(v1) @signature `Lcom/bumptech/glide/util/Util;.c:(I)Z` @kind static;
  #L3ff7f2.  v0:= temp;
  #L3ff7f4.  if v0 == 0 then goto L3ff7fc;
  #L3ff7f8.  v0:= 1I;
  #L3ff7fa.  goto L3ff7fe;
  #L3ff7fc.  v0:= 0I;
  #L3ff7fe.  return v0;
}
procedure `void` `postOnUiThread`(`java.lang.Runnable` v1 @kind object) @signature `Lcom/bumptech/glide/util/Util;.postOnUiThread:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ffbe4.  call temp:= `b`() @signature `Lcom/bumptech/glide/util/Util;.b:()Landroid/os/Handler;` @kind static;
  #L3ffbea.  v0:= temp @kind object;
  #L3ffbec.  call temp:= `post`(v0, v1) @signature `Landroid/os/Handler;.post:(Ljava/lang/Runnable;)Z` @kind virtual;
  #L3ffbf2.  return @kind void;
}
procedure `void` `removeCallbacksOnUiThread`(`java.lang.Runnable` v1 @kind object) @signature `Lcom/bumptech/glide/util/Util;.removeCallbacksOnUiThread:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ffc04.  call temp:= `b`() @signature `Lcom/bumptech/glide/util/Util;.b:()Landroid/os/Handler;` @kind static;
  #L3ffc0a.  v0:= temp @kind object;
  #L3ffc0c.  call `removeCallbacks`(v0, v1) @signature `Landroid/os/Handler;.removeCallbacks:(Ljava/lang/Runnable;)V` @kind virtual;
  #L3ffc12.  return @kind void;
}
procedure `java.lang.String` `sha256BytesToHex`(`byte`[] v1 @kind object) @signature `Lcom/bumptech/glide/util/Util;.sha256BytesToHex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ffaa0.  v0:= `@@com.bumptech.glide.util.Util.b` @type ^`char`[] @kind object;
  #L3ffaa4.  @monitorenter v0
  #L3ffaa6.  call temp:= `a`(v1, v0) @signature `Lcom/bumptech/glide/util/Util;.a:([B[C)Ljava/lang/String;` @kind static;
  #L3ffaac.  v1:= temp @kind object;
  #L3ffaae.  @monitorexit v0
  #L3ffab0.  return v1 @kind object;
  #L3ffab2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ffab4.  @monitorexit v0
  #L3ffab6.  throw v1;
  catch `java.lang.Throwable` @[L3ffaa6..L3ffab6] goto L3ffab2;
}
