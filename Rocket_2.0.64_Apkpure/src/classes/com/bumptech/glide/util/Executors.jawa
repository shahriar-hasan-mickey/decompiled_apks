record `com.bumptech.glide.util.Executors` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.Executor` `@@com.bumptech.glide.util.Executors.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@com.bumptech.glide.util.Executors.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/Executors;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3feb58.  v0:= new `com.bumptech.glide.util.Executors$a`;
  #L3feb5c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/Executors$a;.<init>:()V` @kind direct;
  #L3feb62.  `@@com.bumptech.glide.util.Executors.a` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L3feb66.  v0:= new `com.bumptech.glide.util.Executors$b`;
  #L3feb6a.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/Executors$b;.<init>:()V` @kind direct;
  #L3feb70.  `@@com.bumptech.glide.util.Executors.b` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L3feb74.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.Executors` v0 @kind this) @signature `Lcom/bumptech/glide/util/Executors;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3feb88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3feb8e.  return @kind void;
}
procedure `java.util.concurrent.Executor` `directExecutor`() @signature `Lcom/bumptech/glide/util/Executors;.directExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3feb28.  v0:= `@@com.bumptech.glide.util.Executors.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L3feb2c.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `mainThreadExecutor`() @signature `Lcom/bumptech/glide/util/Executors;.mainThreadExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3feb40.  v0:= `@@com.bumptech.glide.util.Executors.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L3feb44.  return v0 @kind object;
}
procedure `void` `shutdownAndAwaitTermination`(`java.util.concurrent.ExecutorService` v4 @kind object) @signature `Lcom/bumptech/glide/util/Executors;.shutdownAndAwaitTermination:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3feba0.  call temp:= `shutdownNow`(v4) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3feba6.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3febaa.  v1:= 5L;
  #L3febae.  call temp:= `awaitTermination`(v4, v1, v0) @signature `Ljava/util/concurrent/ExecutorService;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @kind interface;
  #L3febb4.  v3:= temp;
  #L3febb6.  if v3 != 0 then goto L3febde;
  #L3febba.  call temp:= `shutdownNow`(v4) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3febc0.  call temp:= `awaitTermination`(v4, v1, v0) @signature `Ljava/util/concurrent/ExecutorService;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @kind interface;
  #L3febc6.  v0:= temp;
  #L3febc8.  if v0 == 0 then goto L3febce;
  #L3febcc.  goto L3febde;
  #L3febce.  v0:= new `java.lang.RuntimeException`;
  #L3febd2.  v1:= "Failed to shutdown" @kind object;
  #L3febd6.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3febdc.  throw v0;
  #L3febde.  return @kind void;
  #L3febe0.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L3febe2.  call temp:= `shutdownNow`(v4) @signature `Ljava/util/concurrent/ExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L3febe8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3febee.  v4:= temp @kind object;
  #L3febf0.  call `interrupt`(v4) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L3febf6.  v4:= new `java.lang.RuntimeException`;
  #L3febfa.  call `<init>`(v4, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3fec00.  throw v4;
  catch `java.lang.InterruptedException` @[L3feba6..L3febde] goto L3febe0;
}
