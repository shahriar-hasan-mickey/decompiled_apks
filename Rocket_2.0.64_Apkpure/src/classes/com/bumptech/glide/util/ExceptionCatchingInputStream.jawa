record `com.bumptech.glide.util.ExceptionCatchingInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `com.bumptech.glide.util.ExceptionCatchingInputStream.a` @AccessFlag PRIVATE;
  `java.io.IOException` `com.bumptech.glide.util.ExceptionCatchingInputStream.b` @AccessFlag PRIVATE;
}
global `java.util.Queue` `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fe74c.  v0:= 0I;
  #L3fe74e.  call temp:= `createQueue`(v0) @signature `Lcom/bumptech/glide/util/Util;.createQueue:(I)Ljava/util/Queue;` @kind static;
  #L3fe754.  v0:= temp @kind object;
  #L3fe756.  `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` := v0 @kind object;
  #L3fe75a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fe76c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L3fe772.  return @kind void;
}
procedure `com.bumptech.glide.util.ExceptionCatchingInputStream` `obtain`(`java.io.InputStream` v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.obtain:(Ljava/io/InputStream;)Lcom/bumptech/glide/util/ExceptionCatchingInputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fe5dc.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3fe5e0.  @monitorenter v0
  #L3fe5e2.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L3fe5e8.  v1:= temp @kind object;
  #L3fe5ea.  v1:= (`com.bumptech.glide.util.ExceptionCatchingInputStream`) v1 @kind object;
  #L3fe5ee.  @monitorexit v0
  #L3fe5f0.  if v1 != 0 then goto L3fe5fe;
  #L3fe5f4.  v1:= new `com.bumptech.glide.util.ExceptionCatchingInputStream`;
  #L3fe5f8.  call `<init>`(v1) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.<init>:()V` @kind direct;
  #L3fe5fe.  call `a`(v1, v2) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.a:(Ljava/io/InputStream;)V` @kind virtual;
  #L3fe604.  return v1 @kind object;
  #L3fe606.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe608.  @monitorexit v0
  #L3fe60a.  throw v2;
  catch `java.lang.Throwable` @[L3fe5e2..L3fe5f0] goto L3fe606;
  catch `java.lang.Throwable` @[L3fe608..L3fe60a] goto L3fe606;
}
procedure `void` `a`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.a:(Ljava/io/InputStream;)V` @AccessFlag  {
    temp;

  #L3fe82c.  v0.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L3fe830.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe630.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe634.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L3fe63a.  v0:= temp;
  #L3fe63c.  return v0;
}
procedure `void` `close`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe784.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe788.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3fe78e.  return @kind void;
}
procedure `java.io.IOException` `getException`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.getException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe6f8.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` @kind object;
  #L3fe6fc.  return v0 @kind object;
}
procedure `void` `mark`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `int` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe7a0.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe7a4.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L3fe7aa.  return @kind void;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe5bc.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe5c0.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L3fe5c6.  v0:= temp;
  #L3fe5c8.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe650.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe654.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3fe65a.  v0:= temp;
  #L3fe65c.  goto L3fe666;
  #L3fe65e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3fe660.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v0 @kind object;
  #L3fe664.  v0:= -1I;
  #L3fe666.  return v0;
  catch `java.io.IOException` @[L3fe650..L3fe65c] goto L3fe65e;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe688.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe68c.  call temp:= `read`(v0, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L3fe692.  v2:= temp;
  #L3fe694.  goto L3fe69e;
  #L3fe696.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3fe698.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3fe69c.  v2:= -1I;
  #L3fe69e.  return v2;
  catch `java.io.IOException` @[L3fe688..L3fe694] goto L3fe696;
}
procedure `int` `read`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe6c0.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe6c4.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3fe6ca.  v2:= temp;
  #L3fe6cc.  goto L3fe6d6;
  #L3fe6ce.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3fe6d0.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3fe6d4.  v2:= -1I;
  #L3fe6d6.  return v2;
  catch `java.io.IOException` @[L3fe6c0..L3fe6cc] goto L3fe6ce;
}
procedure `void` `release`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v2 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe7bc.  v0:= 0I;
  #L3fe7be.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v0 @kind object;
  #L3fe7c2.  v2.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` := v0 @kind object;
  #L3fe7c6.  v0:= `@@com.bumptech.glide.util.ExceptionCatchingInputStream.c` @type ^`java.util.Queue` @kind object;
  #L3fe7ca.  @monitorenter v0
  #L3fe7cc.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L3fe7d2.  @monitorexit v0
  #L3fe7d4.  return @kind void;
  #L3fe7d6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe7d8.  @monitorexit v0
  #L3fe7da.  throw v1;
  catch `java.lang.Throwable` @[L3fe7cc..L3fe7da] goto L3fe7d6;
}
procedure `void` `reset`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe7f8.  @monitorenter v1
  #L3fe7fa.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe7fe.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L3fe804.  @monitorexit v1
  #L3fe806.  return @kind void;
  #L3fe808.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe80a.  @monitorexit v1
  #L3fe80c.  throw v0;
  catch `java.lang.Throwable` @[L3fe7fa..L3fe804] goto L3fe808;
}
procedure `long` `skip`(`com.bumptech.glide.util.ExceptionCatchingInputStream` v1 @kind this, `long` v2 ) @signature `Lcom/bumptech/glide/util/ExceptionCatchingInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe710.  v0:= v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.a` @type ^`java.io.InputStream` @kind object;
  #L3fe714.  call temp:= `skip`(v0, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3fe71a.  v2:= temp @kind wide;
  #L3fe71c.  goto L3fe728;
  #L3fe71e.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3fe720.  v1.`com.bumptech.glide.util.ExceptionCatchingInputStream.b` @type ^`java.io.IOException` := v2 @kind object;
  #L3fe724.  v2:= 0L;
  #L3fe728.  return v2 @kind wide;
  catch `java.io.IOException` @[L3fe710..L3fe71c] goto L3fe71e;
}
