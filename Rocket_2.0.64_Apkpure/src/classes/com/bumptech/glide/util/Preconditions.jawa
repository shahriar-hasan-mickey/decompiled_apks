record `com.bumptech.glide.util.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.bumptech.glide.util.Preconditions` v0 @kind this) @signature `Lcom/bumptech/glide/util/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3ff59c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ff5a2.  return @kind void;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkArgument:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff5b4.  if v0 == 0 then goto L3ff5ba;
  #L3ff5b8.  return @kind void;
  #L3ff5ba.  v0:= new `java.lang.IllegalArgumentException`;
  #L3ff5be.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff5c4.  throw v0;
}
procedure `java.lang.String` `checkNotEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff53c.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L3ff542.  v0:= temp;
  #L3ff544.  if v0 != 0 then goto L3ff54a;
  #L3ff548.  return v1 @kind object;
  #L3ff54a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ff54e.  v0:= "Must not be null or empty" @kind object;
  #L3ff552.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff558.  throw v1;
}
procedure `java.util.Collection` `checkNotEmpty`(`java.util.Collection` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotEmpty:(Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff56c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3ff572.  v0:= temp;
  #L3ff574.  if v0 != 0 then goto L3ff57a;
  #L3ff578.  return v1 @kind object;
  #L3ff57a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3ff57e.  v0:= "Must not be empty." @kind object;
  #L3ff582.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff588.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ff504.  v0:= "Argument must not be null" @kind object;
  #L3ff508.  call temp:= `checkNotNull`(v1, v0) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ff50e.  v1:= temp @kind object;
  #L3ff510.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/bumptech/glide/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3ff524.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ff52a.  return v0 @kind object;
}
