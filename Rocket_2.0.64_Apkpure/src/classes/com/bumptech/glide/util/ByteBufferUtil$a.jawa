record `com.bumptech.glide.util.ByteBufferUtil$a` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `java.nio.ByteBuffer` `com.bumptech.glide.util.ByteBufferUtil$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.bumptech.glide.util.ByteBufferUtil$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.<init>:(Ljava/nio/ByteBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3fdddc.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L3fdde2.  v0:= -1I;
  #L3fdde4.  v1.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int` := v0;
  #L3fdde8.  v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L3fddec.  return @kind void;
}
procedure `int` `available`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fdcf0.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdcf4.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3fdcfa.  v0:= temp;
  #L3fdcfc.  return v0;
}
procedure `void` `mark`(`com.bumptech.glide.util.ByteBufferUtil$a` v0 @kind this, `int` v1 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3fde00.  @monitorenter v0
  #L3fde02.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fde06.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3fde0c.  v1:= temp;
  #L3fde0e.  v0.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int` := v1;
  #L3fde12.  @monitorexit v0
  #L3fde14.  return @kind void;
  #L3fde16.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fde18.  @monitorexit v0
  #L3fde1a.  throw v1;
  catch `java.lang.Throwable` @[L3fde02..L3fde12] goto L3fde16;
}
procedure `boolean` `markSupported`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fdcdc.  v0:= 1I;
  #L3fdcde.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fdd10.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdd14.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3fdd1a.  v0:= temp;
  #L3fdd1c.  if v0 != 0 then goto L3fdd24;
  #L3fdd20.  v0:= -1I;
  #L3fdd22.  return v0;
  #L3fdd24.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdd28.  call temp:= `get`(v0) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L3fdd2e.  v0:= temp;
  #L3fdd30.  v0:= v0 ^& 255;
  #L3fdd34.  return v0;
}
procedure `int` `read`(`com.bumptech.glide.util.ByteBufferUtil$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fdd48.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdd4c.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3fdd52.  v0:= temp;
  #L3fdd54.  if v0 != 0 then goto L3fdd5c;
  #L3fdd58.  v2:= -1I;
  #L3fdd5a.  return v2;
  #L3fdd5c.  call temp:= `available`(v1) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @kind virtual;
  #L3fdd62.  v0:= temp;
  #L3fdd64.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3fdd6a.  v4:= temp;
  #L3fdd6c.  v0:= v1.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdd70.  call temp:= `get`(v0, v2, v3, v4) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3fdd76.  return v4;
}
procedure `void` `reset`(`com.bumptech.glide.util.ByteBufferUtil$a` v2 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fde38.  @monitorenter v2
  #L3fde3a.  v0:= v2.`com.bumptech.glide.util.ByteBufferUtil$a.b` @type ^`int`;
  #L3fde3e.  v1:= -1I;
  #L3fde40.  if v0 == v1 then goto L3fde52;
  #L3fde44.  v1:= v2.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fde48.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3fde4e.  @monitorexit v2
  #L3fde50.  return @kind void;
  #L3fde52.  v0:= new `java.io.IOException`;
  #L3fde56.  v1:= "Cannot reset to unset mark position" @kind object;
  #L3fde5a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fde60.  throw v0;
  #L3fde62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fde64.  @monitorexit v2
  #L3fde66.  throw v0;
  catch `java.lang.Throwable` @[L3fde3a..L3fde4e] goto L3fde62;
  catch `java.lang.Throwable` @[L3fde52..L3fde62] goto L3fde62;
}
procedure `long` `skip`(`com.bumptech.glide.util.ByteBufferUtil$a` v3 @kind this, `long` v4 ) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fdd88.  v0:= v3.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fdd8c.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L3fdd92.  v0:= temp;
  #L3fdd94.  if v0 != 0 then goto L3fdd9e;
  #L3fdd98.  v4:= -1L;
  #L3fdd9c.  return v4 @kind wide;
  #L3fdd9e.  call temp:= `available`(v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.available:()I` @kind virtual;
  #L3fdda4.  v0:= temp;
  #L3fdda6.  v0:= (`long`) v0 @kind i2l;
  #L3fdda8.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3fddae.  v4:= temp @kind wide;
  #L3fddb0.  v0:= v3.`com.bumptech.glide.util.ByteBufferUtil$a.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L3fddb4.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L3fddba.  v1:= temp;
  #L3fddbc.  v1:= (`long`) v1 @kind i2l;
  #L3fddbe.  v1:= v1 + v4 @kind long;
  #L3fddc0.  v2:= (`int`) v1 @kind l2i;
  #L3fddc2.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3fddc8.  return v4 @kind wide;
}
