record `com.bumptech.glide.util.pool.StateVerifier` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.bumptech.glide.util.pool.StateVerifier` v0 @kind this) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L400174.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40017a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.pool.StateVerifier` v0 @kind this, `com.bumptech.glide.util.pool.StateVerifier$a` v1 @kind object) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.<init>:(Lcom/bumptech/glide/util/pool/StateVerifier$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L40018c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.<init>:()V` @kind direct;
  #L400192.  return @kind void;
}
procedure `com.bumptech.glide.util.pool.StateVerifier` `newInstance`() @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.newInstance:()Lcom/bumptech/glide/util/pool/StateVerifier;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L400158.  v0:= new `com.bumptech.glide.util.pool.StateVerifier$b`;
  #L40015c.  call `<init>`(v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier$b;.<init>:()V` @kind direct;
  #L400162.  return v0 @kind object;
}
procedure `void` `a`(`boolean` v0 ) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.a:(Z)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `throwIfRecycled`() @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.throwIfRecycled:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
