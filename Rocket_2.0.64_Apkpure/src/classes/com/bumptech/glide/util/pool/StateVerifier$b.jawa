record `com.bumptech.glide.util.pool.StateVerifier$b` @kind class @AccessFlag  extends `com.bumptech.glide.util.pool.StateVerifier` @kind class {
  `boolean` `com.bumptech.glide.util.pool.StateVerifier$b.a` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.pool.StateVerifier$b` v1 @kind this) @signature `Lcom/bumptech/glide/util/pool/StateVerifier$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4000f8.  v0:= 0I;
  #L4000fa.  call `<init>`(v1, v0) @signature `Lcom/bumptech/glide/util/pool/StateVerifier;.<init>:(Lcom/bumptech/glide/util/pool/StateVerifier$a;)V` @kind direct;
  #L400100.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.util.pool.StateVerifier$b` v0 @kind this, `boolean` v1 ) @signature `Lcom/bumptech/glide/util/pool/StateVerifier$b;.a:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L400114.  v0.`com.bumptech.glide.util.pool.StateVerifier$b.a` @type ^`boolean` := v1 @kind boolean;
  #L400118.  return @kind void;
}
procedure `void` `throwIfRecycled`(`com.bumptech.glide.util.pool.StateVerifier$b` v2 @kind this) @signature `Lcom/bumptech/glide/util/pool/StateVerifier$b;.throwIfRecycled:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40012c.  v0:= v2.`com.bumptech.glide.util.pool.StateVerifier$b.a` @type ^`boolean` @kind boolean;
  #L400130.  if v0 != 0 then goto L400136;
  #L400134.  return @kind void;
  #L400136.  v0:= new `java.lang.IllegalStateException`;
  #L40013a.  v1:= "Already released" @kind object;
  #L40013e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L400144.  throw v0;
}
