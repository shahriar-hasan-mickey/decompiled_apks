record `com.bumptech.glide.util.MultiClassKey` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `com.bumptech.glide.util.MultiClassKey.a` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.util.MultiClassKey.b` @AccessFlag PRIVATE;
  `java.lang.Class` `com.bumptech.glide.util.MultiClassKey.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff470.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ff476.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.<init>:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff488.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ff48e.  call `set`(v0, v1, v2) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L3ff494.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff4a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ff4ae.  call `set`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L3ff4b4.  return @kind void;
}
procedure `boolean` `equals`(`com.bumptech.glide.util.MultiClassKey` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ff34c.  v0:= 1I;
  #L3ff34e.  if v4 != v5 then goto L3ff354;
  #L3ff352.  return v0;
  #L3ff354.  v1:= 0I;
  #L3ff356.  if v5 == 0 then goto L3ff3b8;
  #L3ff35a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ff360.  v2:= temp @kind object;
  #L3ff362.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ff368.  v3:= temp @kind object;
  #L3ff36a.  if v2 == v3 then goto L3ff370;
  #L3ff36e.  goto L3ff3b8;
  #L3ff370.  v5:= (`com.bumptech.glide.util.MultiClassKey`) v5 @kind object;
  #L3ff374.  v2:= v4.`com.bumptech.glide.util.MultiClassKey.a` @type ^`java.lang.Class` @kind object;
  #L3ff378.  v3:= v5.`com.bumptech.glide.util.MultiClassKey.a` @type ^`java.lang.Class` @kind object;
  #L3ff37c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ff382.  v2:= temp;
  #L3ff384.  if v2 != 0 then goto L3ff38a;
  #L3ff388.  return v1;
  #L3ff38a.  v2:= v4.`com.bumptech.glide.util.MultiClassKey.b` @type ^`java.lang.Class` @kind object;
  #L3ff38e.  v3:= v5.`com.bumptech.glide.util.MultiClassKey.b` @type ^`java.lang.Class` @kind object;
  #L3ff392.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ff398.  v2:= temp;
  #L3ff39a.  if v2 != 0 then goto L3ff3a0;
  #L3ff39e.  return v1;
  #L3ff3a0.  v2:= v4.`com.bumptech.glide.util.MultiClassKey.c` @type ^`java.lang.Class` @kind object;
  #L3ff3a4.  v5:= v5.`com.bumptech.glide.util.MultiClassKey.c` @type ^`java.lang.Class` @kind object;
  #L3ff3a8.  call temp:= `bothNullOrEqual`(v2, v5) @signature `Lcom/bumptech/glide/util/Util;.bothNullOrEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3ff3ae.  v5:= temp;
  #L3ff3b0.  if v5 != 0 then goto L3ff3b6;
  #L3ff3b4.  return v1;
  #L3ff3b6.  return v0;
  #L3ff3b8.  return v1;
}
procedure `int` `hashCode`(`com.bumptech.glide.util.MultiClassKey` v2 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff3cc.  v0:= v2.`com.bumptech.glide.util.MultiClassKey.a` @type ^`java.lang.Class` @kind object;
  #L3ff3d0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ff3d6.  v0:= temp;
  #L3ff3d8.  v0:= v0 * 31;
  #L3ff3dc.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.b` @type ^`java.lang.Class` @kind object;
  #L3ff3e0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ff3e6.  v1:= temp;
  #L3ff3e8.  v0:= v0 + v1 @kind int;
  #L3ff3ea.  v0:= v0 * 31;
  #L3ff3ee.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.c` @type ^`java.lang.Class` @kind object;
  #L3ff3f2.  if v1 == 0 then goto L3ff400;
  #L3ff3f6.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ff3fc.  v1:= temp;
  #L3ff3fe.  goto L3ff402;
  #L3ff400.  v1:= 0I;
  #L3ff402.  v0:= v0 + v1 @kind int;
  #L3ff404.  return v0;
}
procedure `void` `set`(`com.bumptech.glide.util.MultiClassKey` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff4c8.  v0:= 0I;
  #L3ff4ca.  call `set`(v1, v2, v3, v0) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @kind virtual;
  #L3ff4d0.  return @kind void;
}
procedure `void` `set`(`com.bumptech.glide.util.MultiClassKey` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/bumptech/glide/util/MultiClassKey;.set:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L3ff4e4.  v0.`com.bumptech.glide.util.MultiClassKey.a` @type ^`java.lang.Class` := v1 @kind object;
  #L3ff4e8.  v0.`com.bumptech.glide.util.MultiClassKey.b` @type ^`java.lang.Class` := v2 @kind object;
  #L3ff4ec.  v0.`com.bumptech.glide.util.MultiClassKey.c` @type ^`java.lang.Class` := v3 @kind object;
  #L3ff4f0.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.bumptech.glide.util.MultiClassKey` v2 @kind this) @signature `Lcom/bumptech/glide/util/MultiClassKey;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff418.  v0:= new `java.lang.StringBuilder`;
  #L3ff41c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ff422.  v1:= "MultiClassKey{first=" @kind object;
  #L3ff426.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff42c.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.a` @type ^`java.lang.Class` @kind object;
  #L3ff430.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff436.  v1:= ", second=" @kind object;
  #L3ff43a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff440.  v1:= v2.`com.bumptech.glide.util.MultiClassKey.b` @type ^`java.lang.Class` @kind object;
  #L3ff444.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff44a.  v1:= 125I;
  #L3ff44e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ff454.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ff45a.  v0:= temp @kind object;
  #L3ff45c.  return v0 @kind object;
}
