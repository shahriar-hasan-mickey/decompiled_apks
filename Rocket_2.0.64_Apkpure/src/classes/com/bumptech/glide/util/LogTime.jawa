record `com.bumptech.glide.util.LogTime` @kind class @AccessFlag PUBLIC_FINAL {
}
global `double` `@@com.bumptech.glide.util.LogTime.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/LogTime;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3fed58.  v0:= 1.0D;
  #L3fed5c.  v2:= 10.0D;
  #L3fed60.  v4:= 6.0D;
  #L3fed64.  call temp:= `pow`(v2, v4) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3fed6a.  v2:= temp @kind wide;
  #L3fed6c.  v0:= v0 / v2 @kind double;
  #L3fed6e.  `@@com.bumptech.glide.util.LogTime.a` @type ^`double` := v0 @kind wide;
  #L3fed72.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.LogTime` v0 @kind this) @signature `Lcom/bumptech/glide/util/LogTime;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3fed84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fed8a.  return @kind void;
}
procedure `double` `getElapsedMillis`(`long` v2 ) @signature `Lcom/bumptech/glide/util/LogTime;.getElapsedMillis:(J)D` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fed14.  call temp:= `getLogTime`() @signature `Lcom/bumptech/glide/util/LogTime;.getLogTime:()J` @kind static;
  #L3fed1a.  v0:= temp @kind wide;
  #L3fed1c.  v0:= v0 - v2 @kind long;
  #L3fed1e.  v2:= (`double`) v0 @kind l2d;
  #L3fed20.  v0:= `@@com.bumptech.glide.util.LogTime.a` @type ^`double` @kind wide;
  #L3fed24.  v2:= v2 * v0 @kind double;
  #L3fed28.  return v2 @kind wide;
}
procedure `long` `getLogTime`() @signature `Lcom/bumptech/glide/util/LogTime;.getLogTime:()J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fed3c.  call temp:= `elapsedRealtimeNanos`() @signature `Landroid/os/SystemClock;.elapsedRealtimeNanos:()J` @kind static;
  #L3fed42.  v0:= temp @kind wide;
  #L3fed44.  return v0 @kind wide;
}
