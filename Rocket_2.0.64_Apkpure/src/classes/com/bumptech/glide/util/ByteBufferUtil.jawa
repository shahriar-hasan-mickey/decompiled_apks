record `com.bumptech.glide.util.ByteBufferUtil` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.concurrent.atomic.AtomicReference` `@@com.bumptech.glide.util.ByteBufferUtil.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fe11c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L3fe120.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L3fe126.  `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L3fe12a.  return @kind void;
}
procedure `void` `<init>`(`com.bumptech.glide.util.ByteBufferUtil` v0 @kind this) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3fe13c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fe142.  return @kind void;
}
procedure `com.bumptech.glide.util.ByteBufferUtil$b` `a`(`java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fdf10.  call temp:= `isReadOnly`(v3) @signature `Ljava/nio/ByteBuffer;.isReadOnly:()Z` @kind virtual;
  #L3fdf16.  v0:= temp;
  #L3fdf18.  if v0 != 0 then goto L3fdf4c;
  #L3fdf1c.  call temp:= `hasArray`(v3) @signature `Ljava/nio/ByteBuffer;.hasArray:()Z` @kind virtual;
  #L3fdf22.  v0:= temp;
  #L3fdf24.  if v0 == 0 then goto L3fdf4c;
  #L3fdf28.  v0:= new `com.bumptech.glide.util.ByteBufferUtil$b`;
  #L3fdf2c.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3fdf32.  v1:= temp @kind object;
  #L3fdf34.  call temp:= `arrayOffset`(v3) @signature `Ljava/nio/ByteBuffer;.arrayOffset:()I` @kind virtual;
  #L3fdf3a.  v2:= temp;
  #L3fdf3c.  call temp:= `limit`(v3) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3fdf42.  v3:= temp;
  #L3fdf44.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$b;.<init>:([BII)V` @kind direct;
  #L3fdf4a.  return v0 @kind object;
  #L3fdf4c.  v3:= 0I;
  #L3fdf4e.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `fromFile`(`java.io.File` v8 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.fromFile:(Ljava/io/File;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3fdf7c.  v0:= 0I;
  #L3fdf7e.  call temp:= `length`(v8) @signature `Ljava/io/File;.length:()J` @kind virtual;
  #L3fdf84.  v5:= temp @kind wide;
  #L3fdf86.  v1:= 2147483647L;
  #L3fdf8c.  v3:= lcmp(v5, v1);
  #L3fdf90.  if v3 > 0 then goto L3fdff2;
  #L3fdf94.  v1:= 0L;
  #L3fdf98.  v3:= lcmp(v5, v1);
  #L3fdf9c.  if v3 == 0 then goto L3fdfe2;
  #L3fdfa0.  v7:= new `java.io.RandomAccessFile`;
  #L3fdfa4.  v1:= "r" @kind object;
  #L3fdfa8.  call `<init>`(v7, v8, v1) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L3fdfae.  call temp:= `getChannel`(v7) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3fdfb4.  v0:= temp @kind object;
  #L3fdfb6.  v2:= `@@java.nio.channels.FileChannel$MapMode.READ_ONLY` @type ^`java.nio.channels.FileChannel$MapMode` @kind object;
  #L3fdfba.  v3:= 0L;
  #L3fdfbe.  v1:= v0 @kind object;
  #L3fdfc0.  call temp:= `map`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L3fdfc6.  v8:= temp @kind object;
  #L3fdfc8.  call temp:= `load`(v8) @signature `Ljava/nio/MappedByteBuffer;.load:()Ljava/nio/MappedByteBuffer;` @kind virtual;
  #L3fdfce.  v8:= temp @kind object;
  #L3fdfd0.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3fdfd6.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3fdfdc.  return v8 @kind object;
  #L3fdfde.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fdfe0.  goto L3fe006;
  #L3fdfe2.  v8:= new `java.io.IOException`;
  #L3fdfe6.  v1:= "File unsuitable for memory mapping" @kind object;
  #L3fdfea.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fdff0.  throw v8;
  #L3fdff2.  v8:= new `java.io.IOException`;
  #L3fdff6.  v1:= "File too large to map into memory" @kind object;
  #L3fdffa.  call `<init>`(v8, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fe000.  throw v8;
  #L3fe002.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe004.  v7:= v0 @kind object;
  #L3fe006.  if v0 == 0 then goto L3fe014;
  #L3fe00a.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3fe010.  goto L3fe014;
  #L3fe012.  
  #L3fe014.  if v7 == 0 then goto L3fe01e;
  #L3fe018.  call `close`(v7) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3fe01e.  throw v8;
  catch `java.lang.Throwable` @[L3fdf7e..L3fdfae] goto L3fe002;
  catch `java.lang.Throwable` @[L3fdfae..L3fdfd0] goto L3fdfde;
  catch `java.io.IOException` @[L3fdfd0..L3fdfd6] goto L3fdfd6;
  catch `java.io.IOException` @[L3fdfd6..L3fdfdc] goto L3fdfdc;
  catch `java.lang.Throwable` @[L3fdfe2..L3fe002] goto L3fe002;
  catch `java.io.IOException` @[L3fe00a..L3fe010] goto L3fe012;
  catch `java.io.IOException` @[L3fe018..L3fe01e] goto L3fe01e;
}
procedure `java.nio.ByteBuffer` `fromStream`(`java.io.InputStream` v4 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.fromStream:(Ljava/io/InputStream;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fe080.  v0:= new `java.io.ByteArrayOutputStream`;
  #L3fe084.  v1:= 16384I;
  #L3fe088.  call `<init>`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.<init>:(I)V` @kind direct;
  #L3fe08e.  v2:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fe092.  v3:= 0I;
  #L3fe094.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3fe09a.  v2:= temp @kind object;
  #L3fe09c.  v2:= (`byte`[]) v2 @kind object;
  #L3fe0a0.  if v2 != 0 then goto L3fe0a8;
  #L3fe0a4.  v2:= new `byte`[v1];
  #L3fe0a8.  call temp:= `read`(v4, v2) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L3fe0ae.  v1:= temp;
  #L3fe0b0.  if v1 < 0 then goto L3fe0be;
  #L3fe0b4.  v3:= 0I;
  #L3fe0b6.  call `write`(v0, v2, v3, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:([BII)V` @kind virtual;
  #L3fe0bc.  goto L3fe0a8;
  #L3fe0be.  v4:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fe0c2.  call `set`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3fe0c8.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L3fe0ce.  v4:= temp @kind object;
  #L3fe0d0.  v0:= length @variable v4;
  #L3fe0d2.  call temp:= `allocateDirect`(v0) @signature `Ljava/nio/ByteBuffer;.allocateDirect:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L3fe0d8.  v0:= temp @kind object;
  #L3fe0da.  call temp:= `put`(v0, v4) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3fe0e0.  v4:= temp @kind object;
  #L3fe0e2.  call temp:= `rewind`(v4) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.rewind:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind static;
  #L3fe0e8.  v4:= temp @kind object;
  #L3fe0ea.  return v4 @kind object;
}
procedure `java.nio.ByteBuffer` `rewind`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.rewind:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fe0fc.  v0:= 0I;
  #L3fe0fe.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L3fe104.  v1:= temp @kind object;
  #L3fe106.  v1:= (`java.nio.ByteBuffer`) v1 @kind object;
  #L3fe10a.  return v1 @kind object;
}
procedure `byte`[] `toBytes`(`java.nio.ByteBuffer` v2 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toBytes:(Ljava/nio/ByteBuffer;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fdeb0.  call temp:= `a`(v2) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @kind static;
  #L3fdeb6.  v0:= temp @kind object;
  #L3fdeb8.  if v0 == 0 then goto L3fdedc;
  #L3fdebc.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.a` @type ^`int`;
  #L3fdec0.  if v1 != 0 then goto L3fdedc;
  #L3fdec4.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.b` @type ^`int`;
  #L3fdec8.  v0:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.c` @type ^`byte`[] @kind object;
  #L3fdecc.  v0:= length @variable v0;
  #L3fdece.  if v1 != v0 then goto L3fdedc;
  #L3fded2.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3fded8.  v2:= temp @kind object;
  #L3fdeda.  goto L3fdefe;
  #L3fdedc.  call temp:= `asReadOnlyBuffer`(v2) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L3fdee2.  v2:= temp @kind object;
  #L3fdee4.  call temp:= `limit`(v2) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L3fdeea.  v0:= temp;
  #L3fdeec.  v0:= new `byte`[v0];
  #L3fdef0.  call temp:= `rewind`(v2) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.rewind:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind static;
  #L3fdef6.  call temp:= `get`(v2, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3fdefc.  v2:= v0 @kind object;
  #L3fdefe.  return v2 @kind object;
}
procedure `void` `toFile`(`java.nio.ByteBuffer` v3 @kind object, `java.io.File` v4 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toFile:(Ljava/nio/ByteBuffer;Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fe154.  call temp:= `rewind`(v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.rewind:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind static;
  #L3fe15a.  v0:= 0I;
  #L3fe15c.  v1:= new `java.io.RandomAccessFile`;
  #L3fe160.  v2:= "rw" @kind object;
  #L3fe164.  call `<init>`(v1, v4, v2) @signature `Ljava/io/RandomAccessFile;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L3fe16a.  call temp:= `getChannel`(v1) @signature `Ljava/io/RandomAccessFile;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L3fe170.  v0:= temp @kind object;
  #L3fe172.  call temp:= `write`(v0, v3) @signature `Ljava/nio/channels/FileChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3fe178.  v3:= 0I;
  #L3fe17a.  call `force`(v0, v3) @signature `Ljava/nio/channels/FileChannel;.force:(Z)V` @kind virtual;
  #L3fe180.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3fe186.  call `close`(v1) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3fe18c.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3fe192.  call `close`(v1) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3fe198.  return @kind void;
  #L3fe19a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe19c.  goto L3fe1a2;
  #L3fe19e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe1a0.  v1:= v0 @kind object;
  #L3fe1a2.  if v0 == 0 then goto L3fe1b0;
  #L3fe1a6.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L3fe1ac.  goto L3fe1b0;
  #L3fe1ae.  
  #L3fe1b0.  if v1 == 0 then goto L3fe1ba;
  #L3fe1b4.  call `close`(v1) @signature `Ljava/io/RandomAccessFile;.close:()V` @kind virtual;
  #L3fe1ba.  throw v3;
  catch `java.lang.Throwable` @[L3fe15c..L3fe16a] goto L3fe19e;
  catch `java.lang.Throwable` @[L3fe16a..L3fe18c] goto L3fe19a;
  catch `java.io.IOException` @[L3fe18c..L3fe192] goto L3fe192;
  catch `java.io.IOException` @[L3fe192..L3fe198] goto L3fe198;
  catch `java.io.IOException` @[L3fe1a6..L3fe1ac] goto L3fe1ae;
  catch `java.io.IOException` @[L3fe1b4..L3fe1ba] goto L3fe1ba;
}
procedure `java.io.InputStream` `toStream`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toStream:(Ljava/nio/ByteBuffer;)Ljava/io/InputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fdf60.  v0:= new `com.bumptech.glide.util.ByteBufferUtil$a`;
  #L3fdf64.  call `<init>`(v0, v1) @signature `Lcom/bumptech/glide/util/ByteBufferUtil$a;.<init>:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L3fdf6a.  return v0 @kind object;
}
procedure `void` `toStream`(`java.nio.ByteBuffer` v3 @kind object, `java.io.OutputStream` v4 @kind object) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.toStream:(Ljava/nio/ByteBuffer;Ljava/io/OutputStream;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fe214.  call temp:= `a`(v3) @signature `Lcom/bumptech/glide/util/ByteBufferUtil;.a:(Ljava/nio/ByteBuffer;)Lcom/bumptech/glide/util/ByteBufferUtil$b;` @kind static;
  #L3fe21a.  v0:= temp @kind object;
  #L3fe21c.  if v0 == 0 then goto L3fe236;
  #L3fe220.  v3:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.c` @type ^`byte`[] @kind object;
  #L3fe224.  v1:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.a` @type ^`int`;
  #L3fe228.  v0:= v0.`com.bumptech.glide.util.ByteBufferUtil$b.b` @type ^`int`;
  #L3fe22c.  v0:= v0 + v1 @kind int;
  #L3fe22e.  call `write`(v4, v3, v1, v0) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3fe234.  goto L3fe28c;
  #L3fe236.  v0:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fe23a.  v1:= 0I;
  #L3fe23c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3fe242.  v0:= temp @kind object;
  #L3fe244.  v0:= (`byte`[]) v0 @kind object;
  #L3fe248.  if v0 != 0 then goto L3fe254;
  #L3fe24c.  v0:= 16384I;
  #L3fe250.  v0:= new `byte`[v0];
  #L3fe254.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3fe25a.  v1:= temp;
  #L3fe25c.  if v1 <= 0 then goto L3fe282;
  #L3fe260.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3fe266.  v1:= temp;
  #L3fe268.  v2:= length @variable v0;
  #L3fe26a.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3fe270.  v1:= temp;
  #L3fe272.  v2:= 0I;
  #L3fe274.  call temp:= `get`(v3, v0, v2, v1) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3fe27a.  call `write`(v4, v0, v2, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L3fe280.  goto L3fe254;
  #L3fe282.  v3:= `@@com.bumptech.glide.util.ByteBufferUtil.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3fe286.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3fe28c.  return @kind void;
}
