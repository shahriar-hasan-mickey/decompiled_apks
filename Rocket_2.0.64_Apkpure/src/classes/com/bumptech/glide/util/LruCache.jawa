record `com.bumptech.glide.util.LruCache` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `com.bumptech.glide.util.LruCache.a` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.util.LruCache.b` @AccessFlag PRIVATE_FINAL;
  `long` `com.bumptech.glide.util.LruCache.c` @AccessFlag PRIVATE;
  `long` `com.bumptech.glide.util.LruCache.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.bumptech.glide.util.LruCache` v4 @kind this, `long` v5 ) @signature `Lcom/bumptech/glide/util/LruCache;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3feff4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3feffa.  v0:= new `java.util.LinkedHashMap`;
  #L3feffe.  v1:= 100I;
  #L3ff002.  v2:= 0.75F;
  #L3ff006.  v3:= 1I;
  #L3ff008.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/util/LinkedHashMap;.<init>:(IFZ)V` @kind direct;
  #L3ff00e.  v4.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` := v0 @kind object;
  #L3ff012.  v4.`com.bumptech.glide.util.LruCache.b` @type ^`long` := v5 @kind wide;
  #L3ff016.  v4.`com.bumptech.glide.util.LruCache.c` @type ^`long` := v5 @kind wide;
  #L3ff01a.  return @kind void;
}
procedure `void` `a`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ff048.  v0:= v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3ff04c.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @kind virtual;
  #L3ff052.  return @kind void;
}
procedure `void` `clearMemory`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.clearMemory:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff02c.  v0:= 0L;
  #L3ff030.  call `trimToSize`(v2, v0) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @kind virtual;
  #L3ff036.  return @kind void;
}
procedure `boolean` `contains`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fedbc.  @monitorenter v1
  #L3fedbe.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3fedc2.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3fedc8.  v2:= temp;
  #L3fedca.  @monitorexit v1
  #L3fedcc.  return v2;
  #L3fedce.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fedd0.  @monitorexit v1
  #L3fedd2.  throw v2;
  catch `java.lang.Throwable` @[L3fedbe..L3fedca] goto L3fedce;
}
procedure `java.lang.Object` `get`(`com.bumptech.glide.util.LruCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fee38.  @monitorenter v1
  #L3fee3a.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3fee3e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fee44.  v2:= temp @kind object;
  #L3fee46.  v2:= (`com.bumptech.glide.util.LruCache$a`) v2 @kind object;
  #L3fee4a.  if v2 == 0 then goto L3fee54;
  #L3fee4e.  v2:= v2.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3fee52.  goto L3fee56;
  #L3fee54.  v2:= 0I;
  #L3fee56.  @monitorexit v1
  #L3fee58.  return v2 @kind object;
  #L3fee5a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fee5c.  @monitorexit v1
  #L3fee5e.  throw v2;
  catch `java.lang.Throwable` @[L3fee3a..L3fee52] goto L3fee5a;
}
procedure `int` `getCount`(`com.bumptech.glide.util.LruCache` v1 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getCount:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3fedf0.  @monitorenter v1
  #L3fedf2.  v0:= v1.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3fedf6.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L3fedfc.  v0:= temp;
  #L3fedfe.  @monitorexit v1
  #L3fee00.  return v0;
  #L3fee02.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fee04.  @monitorexit v1
  #L3fee06.  throw v0;
  catch `java.lang.Throwable` @[L3fedf2..L3fedfe] goto L3fee02;
}
procedure `long` `getCurrentSize`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getCurrentSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fef9c.  @monitorenter v2
  #L3fef9e.  v0:= v2.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3fefa2.  @monitorexit v2
  #L3fefa4.  return v0 @kind wide;
  #L3fefa6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fefa8.  @monitorexit v2
  #L3fefaa.  throw v0;
  catch `java.lang.Throwable` @[L3fef9e..L3fefa2] goto L3fefa6;
}
procedure `long` `getMaxSize`(`com.bumptech.glide.util.LruCache` v2 @kind this) @signature `Lcom/bumptech/glide/util/LruCache;.getMaxSize:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fefc8.  @monitorenter v2
  #L3fefca.  v0:= v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3fefce.  @monitorexit v2
  #L3fefd0.  return v0 @kind wide;
  #L3fefd2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fefd4.  @monitorexit v2
  #L3fefd6.  throw v0;
  catch `java.lang.Throwable` @[L3fefca..L3fefce] goto L3fefd2;
}
procedure `int` `getSize`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED {
    temp;

  #L3fee24.  v1:= 1I;
  #L3fee26.  return v1;
}
procedure `void` `onItemEvicted`(`com.bumptech.glide.util.LruCache` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L3ff064.  return @kind void;
}
procedure `java.lang.Object` `put`(`com.bumptech.glide.util.LruCache` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fee7c.  @monitorenter v7
  #L3fee7e.  call temp:= `getSize`(v7, v9) @signature `Lcom/bumptech/glide/util/LruCache;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L3fee84.  v0:= temp;
  #L3fee86.  v1:= (`long`) v0 @kind i2l;
  #L3fee88.  v3:= v7.`com.bumptech.glide.util.LruCache.c` @type ^`long` @kind wide;
  #L3fee8c.  v5:= 0I;
  #L3fee8e.  v6:= lcmp(v1, v3);
  #L3fee92.  if v6 < 0 then goto L3feea0;
  #L3fee96.  call `onItemEvicted`(v7, v8, v9) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3fee9c.  @monitorexit v7
  #L3fee9e.  return v5 @kind object;
  #L3feea0.  if v9 == 0 then goto L3feeae;
  #L3feea4.  v3:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3feea8.  v3:= v3 + v1 @kind long;
  #L3feeaa.  v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v3 @kind wide;
  #L3feeae.  v1:= v7.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3feeb2.  if v9 != 0 then goto L3feeba;
  #L3feeb6.  v2:= v5 @kind object;
  #L3feeb8.  goto L3feec4;
  #L3feeba.  v2:= new `com.bumptech.glide.util.LruCache$a`;
  #L3feebe.  call `<init>`(v2, v9, v0) @signature `Lcom/bumptech/glide/util/LruCache$a;.<init>:(Ljava/lang/Object;I)V` @kind direct;
  #L3feec4.  call temp:= `put`(v1, v8, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3feeca.  v0:= temp @kind object;
  #L3feecc.  v0:= (`com.bumptech.glide.util.LruCache$a`) v0 @kind object;
  #L3feed0.  if v0 == 0 then goto L3feefe;
  #L3feed4.  v1:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3feed8.  v3:= v0.`com.bumptech.glide.util.LruCache$a.b` @type ^`int`;
  #L3feedc.  v3:= (`long`) v3 @kind i2l;
  #L3feede.  v1:= v1 - v3 @kind long;
  #L3feee0.  v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v1 @kind wide;
  #L3feee4.  v1:= v0.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3feee8.  call temp:= `equals`(v1, v9) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3feeee.  v9:= temp;
  #L3feef0.  if v9 != 0 then goto L3feefe;
  #L3feef4.  v9:= v0.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3feef8.  call `onItemEvicted`(v7, v8, v9) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3feefe.  call `a`(v7) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @kind direct;
  #L3fef04.  if v0 == 0 then goto L3fef0c;
  #L3fef08.  v5:= v0.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3fef0c.  @monitorexit v7
  #L3fef0e.  return v5 @kind object;
  #L3fef10.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fef12.  @monitorexit v7
  #L3fef14.  throw v8;
  catch `java.lang.Throwable` @[L3fee7e..L3fee9c] goto L3fef10;
  catch `java.lang.Throwable` @[L3feea4..L3fef0c] goto L3fef10;
}
procedure `java.lang.Object` `remove`(`com.bumptech.glide.util.LruCache` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/bumptech/glide/util/LruCache;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fef3c.  @monitorenter v4
  #L3fef3e.  v0:= v4.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3fef42.  call temp:= `remove`(v0, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3fef48.  v5:= temp @kind object;
  #L3fef4a.  v5:= (`com.bumptech.glide.util.LruCache$a`) v5 @kind object;
  #L3fef4e.  if v5 != 0 then goto L3fef58;
  #L3fef52.  v5:= 0I;
  #L3fef54.  @monitorexit v4
  #L3fef56.  return v5 @kind object;
  #L3fef58.  v0:= v4.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3fef5c.  v2:= v5.`com.bumptech.glide.util.LruCache$a.b` @type ^`int`;
  #L3fef60.  v2:= (`long`) v2 @kind i2l;
  #L3fef62.  v0:= v0 - v2 @kind long;
  #L3fef64.  v4.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v0 @kind wide;
  #L3fef68.  v5:= v5.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3fef6c.  @monitorexit v4
  #L3fef6e.  return v5 @kind object;
  #L3fef70.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fef72.  @monitorexit v4
  #L3fef74.  throw v5;
  catch `java.lang.Throwable` @[L3fef3e..L3fef4e] goto L3fef70;
  catch `java.lang.Throwable` @[L3fef58..L3fef6c] goto L3fef70;
}
procedure `void` `setSizeMultiplier`(`com.bumptech.glide.util.LruCache` v2 @kind this, `float` v3 ) @signature `Lcom/bumptech/glide/util/LruCache;.setSizeMultiplier:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff078.  @monitorenter v2
  #L3ff07a.  v0:= 0I;
  #L3ff07c.  v0:= fcmpg(v3, v0);
  #L3ff080.  if v0 < 0 then goto L3ff0aa;
  #L3ff084.  v0:= v2.`com.bumptech.glide.util.LruCache.b` @type ^`long` @kind wide;
  #L3ff088.  v0:= (`float`) v0 @kind l2f;
  #L3ff08a.  v0:= v0 * v3 @kind float;
  #L3ff08e.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3ff094.  v3:= temp;
  #L3ff096.  v0:= (`long`) v3 @kind i2l;
  #L3ff098.  v2.`com.bumptech.glide.util.LruCache.c` @type ^`long` := v0 @kind wide;
  #L3ff09c.  call `a`(v2) @signature `Lcom/bumptech/glide/util/LruCache;.a:()V` @kind direct;
  #L3ff0a2.  @monitorexit v2
  #L3ff0a4.  return @kind void;
  #L3ff0a6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ff0a8.  goto L3ff0ba;
  #L3ff0aa.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ff0ae.  v0:= "Multiplier must be >= 0" @kind object;
  #L3ff0b2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ff0b8.  throw v3;
  #L3ff0ba.  @monitorexit v2
  #L3ff0bc.  throw v3;
  catch `java.lang.Throwable` @[L3ff084..L3ff0a2] goto L3ff0a6;
  catch `java.lang.Throwable` @[L3ff0aa..L3ff0ba] goto L3ff0a6;
}
procedure `void` `trimToSize`(`com.bumptech.glide.util.LruCache` v7 @kind this, `long` v8 ) @signature `Lcom/bumptech/glide/util/LruCache;.trimToSize:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff0e4.  @monitorenter v7
  #L3ff0e6.  v0:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3ff0ea.  v2:= lcmp(v0, v8);
  #L3ff0ee.  if v2 <= 0 then goto L3ff148;
  #L3ff0f2.  v0:= v7.`com.bumptech.glide.util.LruCache.a` @type ^`java.util.Map` @kind object;
  #L3ff0f6.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3ff0fc.  v0:= temp @kind object;
  #L3ff0fe.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ff104.  v0:= temp @kind object;
  #L3ff106.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ff10c.  v1:= temp @kind object;
  #L3ff10e.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3ff112.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3ff118.  v2:= temp @kind object;
  #L3ff11a.  v2:= (`com.bumptech.glide.util.LruCache$a`) v2 @kind object;
  #L3ff11e.  v3:= v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` @kind wide;
  #L3ff122.  v5:= v2.`com.bumptech.glide.util.LruCache$a.b` @type ^`int`;
  #L3ff126.  v5:= (`long`) v5 @kind i2l;
  #L3ff128.  v3:= v3 - v5 @kind long;
  #L3ff12a.  v7.`com.bumptech.glide.util.LruCache.d` @type ^`long` := v3 @kind wide;
  #L3ff12e.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L3ff134.  v1:= temp @kind object;
  #L3ff136.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3ff13c.  v0:= v2.`com.bumptech.glide.util.LruCache$a.a` @type ^`java.lang.Object` @kind object;
  #L3ff140.  call `onItemEvicted`(v7, v1, v0) @signature `Lcom/bumptech/glide/util/LruCache;.onItemEvicted:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3ff146.  goto L3ff0e6;
  #L3ff148.  @monitorexit v7
  #L3ff14a.  return @kind void;
  #L3ff14c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3ff14e.  @monitorexit v7
  #L3ff150.  throw v8;
  catch `java.lang.Throwable` @[L3ff0e6..L3ff146] goto L3ff14c;
}
