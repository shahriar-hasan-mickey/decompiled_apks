record `com.airbnb.paris.spannables.StyleConverter$MarkupItem` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlin.ranges.IntRange` `com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @AccessFlag PRIVATE_FINAL;
  `com.airbnb.paris.styles.Style` `com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this, `kotlin.ranges.IntRange` v2 @kind object, `com.airbnb.paris.styles.Style` v3 @kind object) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.<init>:(Lkotlin/ranges/IntRange;Lcom/airbnb/paris/styles/Style;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b2e50.  v0:= "range" @kind object;
  #L3b2e54.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2e5a.  v0:= "style" @kind object;
  #L3b2e5e.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2e64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b2e6a.  v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` := v2 @kind object;
  #L3b2e6e.  v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` := v3 @kind object;
  #L3b2e72.  return @kind void;
}
procedure `com.airbnb.paris.spannables.StyleConverter$MarkupItem` `copy$default`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v0 @kind object, `kotlin.ranges.IntRange` v1 @kind object, `com.airbnb.paris.styles.Style` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.copy$default:(Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;Lkotlin/ranges/IntRange;Lcom/airbnb/paris/styles/Style;ILjava/lang/Object;)Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L3b2cf4.  v4:= v3 ^& 1;
  #L3b2cf8.  if v4 == 0 then goto L3b2d00;
  #L3b2cfc.  v1:= v0.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2d00.  v3:= v3 ^& 2;
  #L3b2d04.  if v3 == 0 then goto L3b2d0c;
  #L3b2d08.  v2:= v0.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2d0c.  call temp:= `copy`(v0, v1, v2) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.copy:(Lkotlin/ranges/IntRange;Lcom/airbnb/paris/styles/Style;)Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;` @kind virtual;
  #L3b2d12.  v0:= temp @kind object;
  #L3b2d14.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `component1`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.component1:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2e20.  v0:= v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2e24.  return v0 @kind object;
}
procedure `com.airbnb.paris.styles.Style` `component2`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.component2:()Lcom/airbnb/paris/styles/Style;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2d58.  v0:= v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2d5c.  return v0 @kind object;
}
procedure `com.airbnb.paris.spannables.StyleConverter$MarkupItem` `copy`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this, `kotlin.ranges.IntRange` v2 @kind object, `com.airbnb.paris.styles.Style` v3 @kind object) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.copy:(Lkotlin/ranges/IntRange;Lcom/airbnb/paris/styles/Style;)Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2d28.  v0:= "range" @kind object;
  #L3b2d2c.  call `checkParameterIsNotNull`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2d32.  v0:= "style" @kind object;
  #L3b2d36.  call `checkParameterIsNotNull`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3b2d3c.  v0:= new `com.airbnb.paris.spannables.StyleConverter$MarkupItem`;
  #L3b2d40.  call `<init>`(v0, v2, v3) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.<init>:(Lkotlin/ranges/IntRange;Lcom/airbnb/paris/styles/Style;)V` @kind direct;
  #L3b2d46.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b2ca0.  if v2 == v3 then goto L3b2cde;
  #L3b2ca4.  v0:= instanceof @variable v3 @type ^`com.airbnb.paris.spannables.StyleConverter$MarkupItem` @kind boolean;
  #L3b2ca8.  if v0 == 0 then goto L3b2cda;
  #L3b2cac.  v3:= (`com.airbnb.paris.spannables.StyleConverter$MarkupItem`) v3 @kind object;
  #L3b2cb0.  v0:= v2.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2cb4.  v1:= v3.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2cb8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3b2cbe.  v0:= temp;
  #L3b2cc0.  if v0 == 0 then goto L3b2cda;
  #L3b2cc4.  v0:= v2.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2cc8.  v3:= v3.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2ccc.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3b2cd2.  v3:= temp;
  #L3b2cd4.  if v3 == 0 then goto L3b2cda;
  #L3b2cd8.  goto L3b2cde;
  #L3b2cda.  v3:= 0I;
  #L3b2cdc.  return v3;
  #L3b2cde.  v3:= 1I;
  #L3b2ce0.  return v3;
}
procedure `kotlin.ranges.IntRange` `getRange`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.getRange:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2e38.  v0:= v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2e3c.  return v0 @kind object;
}
procedure `com.airbnb.paris.styles.Style` `getStyle`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v1 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.getStyle:()Lcom/airbnb/paris/styles/Style;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b2d70.  v0:= v1.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2d74.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v3 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2d88.  v0:= v3.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2d8c.  v1:= 0I;
  #L3b2d8e.  if v0 == 0 then goto L3b2d9c;
  #L3b2d92.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3b2d98.  v0:= temp;
  #L3b2d9a.  goto L3b2d9e;
  #L3b2d9c.  v0:= 0I;
  #L3b2d9e.  v0:= v0 * 31;
  #L3b2da2.  v2:= v3.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2da6.  if v2 == 0 then goto L3b2db2;
  #L3b2daa.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3b2db0.  v1:= temp;
  #L3b2db2.  v0:= v0 + v1 @kind int;
  #L3b2db4.  return v0;
}
procedure `java.lang.String` `toString`(`com.airbnb.paris.spannables.StyleConverter$MarkupItem` v2 @kind this) @signature `Lcom/airbnb/paris/spannables/StyleConverter$MarkupItem;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b2dc8.  v0:= new `java.lang.StringBuilder`;
  #L3b2dcc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b2dd2.  v1:= "MarkupItem(range=" @kind object;
  #L3b2dd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2ddc.  v1:= v2.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L3b2de0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2de6.  v1:= ", style=" @kind object;
  #L3b2dea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2df0.  v1:= v2.`com.airbnb.paris.spannables.StyleConverter$MarkupItem.b` @type ^`com.airbnb.paris.styles.Style` @kind object;
  #L3b2df4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2dfa.  v1:= ")" @kind object;
  #L3b2dfe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2e04.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b2e0a.  v0:= temp @kind object;
  #L3b2e0c.  return v0 @kind object;
}
