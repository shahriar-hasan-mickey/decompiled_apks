record `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v0 @kind this, `com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` v1 @kind object) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.<init>:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b4f28.  v0.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` := v1 @kind object;
  #L3b4f2c.  v1:= 0I;
  #L3b4f2e.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L3b4f34.  return @kind void;
}
procedure `java.util.List` `a`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v5 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.a:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b4e54.  v0:= v5.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` @kind object;
  #L3b4e58.  call temp:= `access$getAttrResToValueMap$p`(v0) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;.access$getAttrResToValueMap$p:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)Ljava/util/Map;` @kind static;
  #L3b4e5e.  v0:= temp @kind object;
  #L3b4e60.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L3b4e66.  v0:= temp @kind object;
  #L3b4e68.  v1:= new `java.util.ArrayList`;
  #L3b4e6c.  v2:= 10I;
  #L3b4e70.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L3b4e76.  v2:= temp;
  #L3b4e78.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3b4e7e.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b4e84.  v0:= temp @kind object;
  #L3b4e86.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b4e8c.  v2:= temp;
  #L3b4e8e.  if v2 == 0 then goto L3b4eca;
  #L3b4e92.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b4e98.  v2:= temp @kind object;
  #L3b4e9a.  v2:= (`java.lang.Number`) v2 @kind object;
  #L3b4e9e.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3b4ea4.  v2:= temp;
  #L3b4ea6.  v3:= v5.`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q.a` @type ^`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper` @kind object;
  #L3b4eaa.  call temp:= `access$getStyleableAttrs$p`(v3) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;.access$getStyleableAttrs$p:(Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper;)[I` @kind static;
  #L3b4eb0.  v3:= temp @kind object;
  #L3b4eb2.  call temp:= `indexOf`(v3, v2) @signature `Lkotlin/collections/ArraysKt;.indexOf:([II)I` @kind static;
  #L3b4eb8.  v2:= temp;
  #L3b4eba.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b4ec0.  v2:= temp @kind object;
  #L3b4ec2.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3b4ec8.  goto L3b4e86;
  #L3b4eca.  v0:= new `java.util.ArrayList`;
  #L3b4ece.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3b4ed4.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b4eda.  v1:= temp @kind object;
  #L3b4edc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b4ee2.  v2:= temp;
  #L3b4ee4.  if v2 == 0 then goto L3b4f16;
  #L3b4ee8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b4eee.  v2:= temp @kind object;
  #L3b4ef0.  v3:= v2 @kind object;
  #L3b4ef2.  v3:= (`java.lang.Number`) v3 @kind object;
  #L3b4ef6.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L3b4efc.  v3:= temp;
  #L3b4efe.  v4:= -1I;
  #L3b4f00.  if v3 == v4 then goto L3b4f08;
  #L3b4f04.  v3:= 1I;
  #L3b4f06.  goto L3b4f0a;
  #L3b4f08.  v3:= 0I;
  #L3b4f0a.  if v3 == 0 then goto L3b4edc;
  #L3b4f0e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3b4f14.  goto L3b4edc;
  #L3b4f16.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`com.airbnb.paris.typed_array_wrappers.MapTypedArrayWrapper$q` v1 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b4e38.  call temp:= `a`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MapTypedArrayWrapper$q;.a:()Ljava/util/List;` @kind virtual;
  #L3b4e3e.  v0:= temp @kind object;
  #L3b4e40.  return v0 @kind object;
}
