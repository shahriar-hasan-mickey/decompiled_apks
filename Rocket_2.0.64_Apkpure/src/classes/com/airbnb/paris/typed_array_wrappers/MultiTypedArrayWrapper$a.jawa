record `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v0 @kind this, `com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` v1 @kind object) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.<init>:(Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b56dc.  v0.`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @type ^`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` := v1 @kind object;
  #L3b56e0.  v1:= 0I;
  #L3b56e2.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L3b56e8.  return @kind void;
}
procedure `java.util.HashMap` `a`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v7 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.a:()Ljava/util/HashMap;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b55fc.  v0:= new `java.util.HashMap`;
  #L3b5600.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3b5606.  v1:= v7.`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a.a` @type ^`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper` @kind object;
  #L3b560a.  call temp:= `access$getWrappers$p`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;.access$getWrappers$p:(Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper;)Ljava/util/List;` @kind static;
  #L3b5610.  v1:= temp @kind object;
  #L3b5612.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b5618.  v1:= temp @kind object;
  #L3b561a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b5620.  v2:= temp;
  #L3b5622.  if v2 == 0 then goto L3b56ca;
  #L3b5626.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3b562c.  v2:= temp @kind object;
  #L3b562e.  v2:= (`com.airbnb.paris.typed_array_wrappers.TypedArrayWrapper`) v2 @kind object;
  #L3b5632.  call temp:= `getIndexCount`(v2) @signature `Lcom/airbnb/paris/typed_array_wrappers/TypedArrayWrapper;.getIndexCount:()I` @kind virtual;
  #L3b5638.  v3:= temp;
  #L3b563a.  v4:= 0I;
  #L3b563c.  call temp:= `until`(v4, v3) @signature `Lkotlin/ranges/RangesKt;.until:(II)Lkotlin/ranges/IntRange;` @kind static;
  #L3b5642.  v3:= temp @kind object;
  #L3b5644.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3b564a.  v3:= temp @kind object;
  #L3b564c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3b5652.  v5:= temp;
  #L3b5654.  if v5 == 0 then goto L3b561a;
  #L3b5658.  v5:= v3 @kind object;
  #L3b565a.  v5:= (`kotlin.collections.IntIterator`) v5 @kind object;
  #L3b565e.  call temp:= `nextInt`(v5) @signature `Lkotlin/collections/IntIterator;.nextInt:()I` @kind virtual;
  #L3b5664.  v5:= temp;
  #L3b5666.  call temp:= `getIndex`(v2, v5) @signature `Lcom/airbnb/paris/typed_array_wrappers/TypedArrayWrapper;.getIndex:(I)I` @kind virtual;
  #L3b566c.  v5:= temp;
  #L3b566e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b5674.  v6:= temp @kind object;
  #L3b5676.  call temp:= `containsKey`(v0, v6) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b567c.  v6:= temp;
  #L3b567e.  if v6 != 0 then goto L3b56a4;
  #L3b5682.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b5688.  v5:= temp @kind object;
  #L3b568a.  v6:= 1I;
  #L3b568c.  v6:= new `com.airbnb.paris.typed_array_wrappers.TypedArrayWrapper`[v6];
  #L3b5690.  v6[v4]:= v2 @kind object;
  #L3b5694.  call temp:= `mutableListOf`(v6) @signature `Lkotlin/collections/CollectionsKt;.mutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3b569a.  v6:= temp @kind object;
  #L3b569c.  call temp:= `put`(v0, v5, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3b56a2.  goto L3b564c;
  #L3b56a4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b56aa.  v5:= temp @kind object;
  #L3b56ac.  call temp:= `get`(v0, v5) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b56b2.  v5:= temp @kind object;
  #L3b56b4.  if v5 != 0 then goto L3b56be;
  #L3b56b8.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L3b56be.  v5:= (`java.util.List`) v5 @kind object;
  #L3b56c2.  call temp:= `add`(v5, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3b56c8.  goto L3b564c;
  #L3b56ca.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`com.airbnb.paris.typed_array_wrappers.MultiTypedArrayWrapper$a` v1 @kind this) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b55e0.  call temp:= `a`(v1) @signature `Lcom/airbnb/paris/typed_array_wrappers/MultiTypedArrayWrapper$a;.a:()Ljava/util/HashMap;` @kind virtual;
  #L3b55e6.  v0:= temp @kind object;
  #L3b55e8.  return v0 @kind object;
}
