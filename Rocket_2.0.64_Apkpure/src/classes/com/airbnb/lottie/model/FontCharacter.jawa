record `com.airbnb.lottie.model.FontCharacter` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.model.FontCharacter.a` @AccessFlag PRIVATE_FINAL;
  `char` `com.airbnb.lottie.model.FontCharacter.b` @AccessFlag PRIVATE_FINAL;
  `double` `com.airbnb.lottie.model.FontCharacter.c` @AccessFlag PRIVATE_FINAL;
  `double` `com.airbnb.lottie.model.FontCharacter.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.airbnb.lottie.model.FontCharacter.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.airbnb.lottie.model.FontCharacter.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.FontCharacter` v0 @kind this, `java.util.List` v1 @kind object, `char` v2 , `double` v3 , `double` v5 , `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lcom/airbnb/lottie/model/FontCharacter;.<init>:(Ljava/util/List;CDDLjava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39c7c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39c7c6.  v0.`com.airbnb.lottie.model.FontCharacter.a` @type ^`java.util.List` := v1 @kind object;
  #L39c7ca.  v0.`com.airbnb.lottie.model.FontCharacter.b` @type ^`char` := v2 @kind char;
  #L39c7ce.  v0.`com.airbnb.lottie.model.FontCharacter.c` @type ^`double` := v3 @kind wide;
  #L39c7d2.  v0.`com.airbnb.lottie.model.FontCharacter.d` @type ^`double` := v5 @kind wide;
  #L39c7d6.  v0.`com.airbnb.lottie.model.FontCharacter.e` @type ^`java.lang.String` := v7 @kind object;
  #L39c7da.  v0.`com.airbnb.lottie.model.FontCharacter.f` @type ^`java.lang.String` := v8 @kind object;
  #L39c7de.  return @kind void;
}
procedure `int` `hashFor`(`char` v1 , `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/model/FontCharacter;.hashFor:(CLjava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39c774.  v0:= 0I;
  #L39c776.  v0:= v0 + v1 @kind int;
  #L39c778.  v0:= v0 * 31;
  #L39c77c.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L39c782.  v1:= temp;
  #L39c784.  v0:= v0 + v1 @kind int;
  #L39c786.  v0:= v0 * 31;
  #L39c78a.  call temp:= `hashCode`(v3) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L39c790.  v1:= temp;
  #L39c792.  v0:= v0 + v1 @kind int;
  #L39c794.  return v0;
}
procedure `java.util.List` `getShapes`(`com.airbnb.lottie.model.FontCharacter` v1 @kind this) @signature `Lcom/airbnb/lottie/model/FontCharacter;.getShapes:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39c7a8.  v0:= v1.`com.airbnb.lottie.model.FontCharacter.a` @type ^`java.util.List` @kind object;
  #L39c7ac.  return v0 @kind object;
}
procedure `double` `getWidth`(`com.airbnb.lottie.model.FontCharacter` v2 @kind this) @signature `Lcom/airbnb/lottie/model/FontCharacter;.getWidth:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39c734.  v0:= v2.`com.airbnb.lottie.model.FontCharacter.d` @type ^`double` @kind wide;
  #L39c738.  return v0 @kind wide;
}
procedure `int` `hashCode`(`com.airbnb.lottie.model.FontCharacter` v3 @kind this) @signature `Lcom/airbnb/lottie/model/FontCharacter;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39c74c.  v0:= v3.`com.airbnb.lottie.model.FontCharacter.b` @type ^`char` @kind char;
  #L39c750.  v1:= v3.`com.airbnb.lottie.model.FontCharacter.f` @type ^`java.lang.String` @kind object;
  #L39c754.  v2:= v3.`com.airbnb.lottie.model.FontCharacter.e` @type ^`java.lang.String` @kind object;
  #L39c758.  call temp:= `hashFor`(v0, v1, v2) @signature `Lcom/airbnb/lottie/model/FontCharacter;.hashFor:(CLjava/lang/String;Ljava/lang/String;)I` @kind static;
  #L39c75e.  v0:= temp;
  #L39c760.  return v0;
}
