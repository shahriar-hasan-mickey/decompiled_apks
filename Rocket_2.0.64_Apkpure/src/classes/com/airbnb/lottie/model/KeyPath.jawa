record `com.airbnb.lottie.model.KeyPath` @kind class @AccessFlag PUBLIC {
  `java.util.List` `com.airbnb.lottie.model.KeyPath.a` @AccessFlag PRIVATE_FINAL;
  `com.airbnb.lottie.model.KeyPathElement` `com.airbnb.lottie.model.KeyPath.b` @AccessFlag PRIVATE;
}
global `com.airbnb.lottie.model.KeyPath` `@@com.airbnb.lottie.model.KeyPath.COMPOSITION` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/model/KeyPath;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39cc58.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L39cc5c.  v1:= "COMPOSITION" @kind object;
  #L39cc60.  temp:= new `java.lang.String`[v1];
  #L39cc66.  v1:= temp @kind object;
  #L39cc68.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L39cc6e.  `@@com.airbnb.lottie.model.KeyPath.COMPOSITION` @type ^`com.airbnb.lottie.model.KeyPath` := v0 @kind object;
  #L39cc72.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.KeyPath` v2 @kind this, `com.airbnb.lottie.model.KeyPath` v3 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39cc84.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39cc8a.  v0:= new `java.util.ArrayList`;
  #L39cc8e.  v1:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cc92.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L39cc98.  v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` := v0 @kind object;
  #L39cc9c.  v3:= v3.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L39cca0.  v2.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` := v3 @kind object;
  #L39cca4.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.model.KeyPath` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:([Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39ccb8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L39ccbe.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L39ccc4.  v1:= temp @kind object;
  #L39ccc6.  v0.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` := v1 @kind object;
  #L39ccca.  return @kind void;
}
procedure `boolean` `a`(`com.airbnb.lottie.model.KeyPath` v2 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L39c860.  v0:= v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c864.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c86a.  v1:= temp;
  #L39c86c.  v1:= v1 + -1;
  #L39c870.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39c876.  v0:= temp @kind object;
  #L39c878.  v0:= (`java.lang.String`) v0 @kind object;
  #L39c87c.  v1:= "**" @kind object;
  #L39c880.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c886.  v0:= temp;
  #L39c888.  return v0;
}
procedure `boolean` `b`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L39c9e8.  v0:= "__container" @kind object;
  #L39c9ec.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c9f2.  v2:= temp;
  #L39c9f4.  return v2;
}
procedure `com.airbnb.lottie.model.KeyPath` `addKey`(`com.airbnb.lottie.model.KeyPath` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.addKey:(Ljava/lang/String;)Lcom/airbnb/lottie/model/KeyPath;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39cafc.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L39cb00.  call `<init>`(v0, v2) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @kind direct;
  #L39cb06.  v1:= v0.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cb0a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L39cb10.  return v0 @kind object;
}
procedure `boolean` `fullyResolvesTo`(`com.airbnb.lottie.model.KeyPath` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.fullyResolvesTo:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39c89c.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c8a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c8a6.  v0:= temp;
  #L39c8a8.  v1:= 0I;
  #L39c8aa.  if v7 < v0 then goto L39c8b0;
  #L39c8ae.  return v1;
  #L39c8b0.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c8b4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c8ba.  v0:= temp;
  #L39c8bc.  v2:= 1I;
  #L39c8be.  v0:= v0 - v2 @kind int;
  #L39c8c0.  if v7 != v0 then goto L39c8c8;
  #L39c8c4.  v0:= 1I;
  #L39c8c6.  goto L39c8ca;
  #L39c8c8.  v0:= 0I;
  #L39c8ca.  v3:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c8ce.  call temp:= `get`(v3, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39c8d4.  v3:= temp @kind object;
  #L39c8d6.  v3:= (`java.lang.String`) v3 @kind object;
  #L39c8da.  v4:= "**" @kind object;
  #L39c8de.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c8e4.  v4:= temp;
  #L39c8e6.  if v4 != 0 then goto L39c93a;
  #L39c8ea.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c8f0.  v6:= temp;
  #L39c8f2.  if v6 != 0 then goto L39c90c;
  #L39c8f6.  v6:= "*" @kind object;
  #L39c8fa.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c900.  v6:= temp;
  #L39c902.  if v6 == 0 then goto L39c908;
  #L39c906.  goto L39c90c;
  #L39c908.  v6:= 0I;
  #L39c90a.  goto L39c90e;
  #L39c90c.  v6:= 1I;
  #L39c90e.  if v0 != 0 then goto L39c932;
  #L39c912.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c916.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c91c.  v0:= temp;
  #L39c91e.  v0:= v0 + -2;
  #L39c922.  if v7 != v0 then goto L39c938;
  #L39c926.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @kind direct;
  #L39c92c.  v7:= temp;
  #L39c92e.  if v7 == 0 then goto L39c938;
  #L39c932.  if v6 == 0 then goto L39c938;
  #L39c936.  v1:= 1I;
  #L39c938.  return v1;
  #L39c93a.  if v0 != 0 then goto L39c962;
  #L39c93e.  v3:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c942.  v4:= v7 + 1;
  #L39c946.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39c94c.  v3:= temp @kind object;
  #L39c94e.  v3:= (`java.lang.String`) v3 @kind object;
  #L39c952.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c958.  v3:= temp;
  #L39c95a.  if v3 == 0 then goto L39c962;
  #L39c95e.  v3:= 1I;
  #L39c960.  goto L39c964;
  #L39c962.  v3:= 0I;
  #L39c964.  if v3 == 0 then goto L39c9a0;
  #L39c968.  v6:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c96c.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c972.  v6:= temp;
  #L39c974.  v6:= v6 + -2;
  #L39c978.  if v7 == v6 then goto L39c99c;
  #L39c97c.  v6:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c980.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c986.  v6:= temp;
  #L39c988.  v6:= v6 + -3;
  #L39c98c.  if v7 != v6 then goto L39c99e;
  #L39c990.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/model/KeyPath;.a:()Z` @kind direct;
  #L39c996.  v6:= temp;
  #L39c998.  if v6 == 0 then goto L39c99e;
  #L39c99c.  v1:= 1I;
  #L39c99e.  return v1;
  #L39c9a0.  if v0 == 0 then goto L39c9a6;
  #L39c9a4.  return v2;
  #L39c9a6.  v7:= v7 + v2 @kind int;
  #L39c9a8.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c9ac.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39c9b2.  v0:= temp;
  #L39c9b4.  v0:= v0 - v2 @kind int;
  #L39c9b6.  if v7 >= v0 then goto L39c9bc;
  #L39c9ba.  return v1;
  #L39c9bc.  v0:= v5.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39c9c0.  call temp:= `get`(v0, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39c9c6.  v7:= temp @kind object;
  #L39c9c8.  v7:= (`java.lang.String`) v7 @kind object;
  #L39c9cc.  call temp:= `equals`(v7, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39c9d2.  v6:= temp;
  #L39c9d4.  return v6;
}
procedure `com.airbnb.lottie.model.KeyPathElement` `getResolvedElement`(`com.airbnb.lottie.model.KeyPath` v1 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.getResolvedElement:()Lcom/airbnb/lottie/model/KeyPathElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39cb44.  v0:= v1.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L39cb48.  return v0 @kind object;
}
procedure `int` `incrementDepthBy`(`com.airbnb.lottie.model.KeyPath` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.incrementDepthBy:(Ljava/lang/String;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39cb5c.  call temp:= `b`(v3, v4) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @kind direct;
  #L39cb62.  v0:= temp;
  #L39cb64.  v1:= 0I;
  #L39cb66.  if v0 == 0 then goto L39cb6c;
  #L39cb6a.  return v1;
  #L39cb6c.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cb70.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39cb76.  v0:= temp @kind object;
  #L39cb78.  v0:= (`java.lang.String`) v0 @kind object;
  #L39cb7c.  v2:= "**" @kind object;
  #L39cb80.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39cb86.  v0:= temp;
  #L39cb88.  v2:= 1I;
  #L39cb8a.  if v0 != 0 then goto L39cb90;
  #L39cb8e.  return v2;
  #L39cb90.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cb94.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39cb9a.  v0:= temp;
  #L39cb9c.  v0:= v0 - v2 @kind int;
  #L39cb9e.  if v5 != v0 then goto L39cba4;
  #L39cba2.  return v1;
  #L39cba4.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cba8.  v5:= v5 + v2 @kind int;
  #L39cbaa.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39cbb0.  v5:= temp @kind object;
  #L39cbb2.  v5:= (`java.lang.String`) v5 @kind object;
  #L39cbb6.  call temp:= `equals`(v5, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39cbbc.  v4:= temp;
  #L39cbbe.  if v4 == 0 then goto L39cbc6;
  #L39cbc2.  v4:= 2I;
  #L39cbc4.  return v4;
  #L39cbc6.  return v1;
}
procedure `java.lang.String` `keysToString`(`com.airbnb.lottie.model.KeyPath` v1 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.keysToString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39cbd8.  v0:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cbdc.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L39cbe2.  v0:= temp @kind object;
  #L39cbe4.  return v0 @kind object;
}
procedure `boolean` `matches`(`com.airbnb.lottie.model.KeyPath` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.matches:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L39ca08.  call temp:= `b`(v3, v4) @signature `Lcom/airbnb/lottie/model/KeyPath;.b:(Ljava/lang/String;)Z` @kind direct;
  #L39ca0e.  v0:= temp;
  #L39ca10.  v1:= 1I;
  #L39ca12.  if v0 == 0 then goto L39ca18;
  #L39ca16.  return v1;
  #L39ca18.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39ca1c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39ca22.  v0:= temp;
  #L39ca24.  v2:= 0I;
  #L39ca26.  if v5 < v0 then goto L39ca2c;
  #L39ca2a.  return v2;
  #L39ca2c.  v0:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39ca30.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39ca36.  v0:= temp @kind object;
  #L39ca38.  v0:= (`java.lang.String`) v0 @kind object;
  #L39ca3c.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39ca42.  v4:= temp;
  #L39ca44.  if v4 != 0 then goto L39ca8c;
  #L39ca48.  v4:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39ca4c.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39ca52.  v4:= temp @kind object;
  #L39ca54.  v4:= (`java.lang.String`) v4 @kind object;
  #L39ca58.  v0:= "**" @kind object;
  #L39ca5c.  call temp:= `equals`(v4, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39ca62.  v4:= temp;
  #L39ca64.  if v4 != 0 then goto L39ca8c;
  #L39ca68.  v4:= v3.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39ca6c.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39ca72.  v4:= temp @kind object;
  #L39ca74.  v4:= (`java.lang.String`) v4 @kind object;
  #L39ca78.  v5:= "*" @kind object;
  #L39ca7c.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39ca82.  v4:= temp;
  #L39ca84.  if v4 == 0 then goto L39ca8a;
  #L39ca88.  goto L39ca8c;
  #L39ca8a.  return v2;
  #L39ca8c.  return v1;
}
procedure `boolean` `propagateToChildren`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/airbnb/lottie/model/KeyPath;.propagateToChildren:(Ljava/lang/String;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39caa0.  v0:= "__container" @kind object;
  #L39caa4.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39caaa.  v2:= temp;
  #L39caac.  v0:= 1I;
  #L39caae.  if v2 == 0 then goto L39cab4;
  #L39cab2.  return v0;
  #L39cab4.  v2:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cab8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L39cabe.  v2:= temp;
  #L39cac0.  v2:= v2 - v0 @kind int;
  #L39cac2.  if v3 < v2 then goto L39caea;
  #L39cac6.  v2:= v1.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39caca.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L39cad0.  v2:= temp @kind object;
  #L39cad2.  v2:= (`java.lang.String`) v2 @kind object;
  #L39cad6.  v3:= "**" @kind object;
  #L39cada.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L39cae0.  v2:= temp;
  #L39cae2.  if v2 == 0 then goto L39cae8;
  #L39cae6.  goto L39caea;
  #L39cae8.  v0:= 0I;
  #L39caea.  return v0;
}
procedure `com.airbnb.lottie.model.KeyPath` `resolve`(`com.airbnb.lottie.model.KeyPath` v1 @kind this, `com.airbnb.lottie.model.KeyPathElement` v2 @kind object) @signature `Lcom/airbnb/lottie/model/KeyPath;.resolve:(Lcom/airbnb/lottie/model/KeyPathElement;)Lcom/airbnb/lottie/model/KeyPath;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39cb24.  v0:= new `com.airbnb.lottie.model.KeyPath`;
  #L39cb28.  call `<init>`(v0, v1) @signature `Lcom/airbnb/lottie/model/KeyPath;.<init>:(Lcom/airbnb/lottie/model/KeyPath;)V` @kind direct;
  #L39cb2e.  v0.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` := v2 @kind object;
  #L39cb32.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.model.KeyPath` v2 @kind this) @signature `Lcom/airbnb/lottie/model/KeyPath;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39cbf8.  v0:= new `java.lang.StringBuilder`;
  #L39cbfc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39cc02.  v1:= "KeyPath{keys=" @kind object;
  #L39cc06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39cc0c.  v1:= v2.`com.airbnb.lottie.model.KeyPath.a` @type ^`java.util.List` @kind object;
  #L39cc10.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39cc16.  v1:= ",resolved=" @kind object;
  #L39cc1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39cc20.  v1:= v2.`com.airbnb.lottie.model.KeyPath.b` @type ^`com.airbnb.lottie.model.KeyPathElement` @kind object;
  #L39cc24.  if v1 == 0 then goto L39cc2c;
  #L39cc28.  v1:= 1I;
  #L39cc2a.  goto L39cc2e;
  #L39cc2c.  v1:= 0I;
  #L39cc2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L39cc34.  v1:= 125I;
  #L39cc38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39cc3e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39cc44.  v0:= temp @kind object;
  #L39cc46.  return v0 @kind object;
}
