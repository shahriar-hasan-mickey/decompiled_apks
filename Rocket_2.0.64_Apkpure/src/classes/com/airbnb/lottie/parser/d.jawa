record `com.airbnb.lottie.parser.d` @kind class @AccessFlag  {
}
global `com.airbnb.lottie.parser.moshi.JsonReader$Options` `@@com.airbnb.lottie.parser.d.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a49dc.  v0:= "fFamily" @kind object;
  #L3a49e0.  v1:= "fName" @kind object;
  #L3a49e4.  v2:= "fStyle" @kind object;
  #L3a49e8.  v3:= "ascent" @kind object;
  #L3a49ec.  temp:= new `java.lang.String`[v0, v1, v2, v3];
  #L3a49f2.  v0:= temp @kind object;
  #L3a49f4.  call temp:= `of`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @kind static;
  #L3a49fa.  v0:= temp @kind object;
  #L3a49fc.  `@@com.airbnb.lottie.parser.d.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` := v0 @kind object;
  #L3a4a00.  return @kind void;
}
procedure `com.airbnb.lottie.model.Font` `a`(`com.airbnb.lottie.parser.moshi.JsonReader` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/d;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;)Lcom/airbnb/lottie/model/Font;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a4944.  call `beginObject`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.beginObject:()V` @kind virtual;
  #L3a494a.  v0:= 0I;
  #L3a494c.  v1:= 0I;
  #L3a494e.  v1:= v0 @kind object;
  #L3a4950.  v2:= v1 @kind object;
  #L3a4952.  v3:= 0I;
  #L3a4954.  call temp:= `hasNext`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L3a495a.  v4:= temp;
  #L3a495c.  if v4 == 0 then goto L3a49ba;
  #L3a4960.  v4:= `@@com.airbnb.lottie.parser.d.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind object;
  #L3a4964.  call temp:= `selectName`(v6, v4) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @kind virtual;
  #L3a496a.  v4:= temp;
  #L3a496c.  if v4 == 0 then goto L3a49b0;
  #L3a4970.  v5:= 1I;
  #L3a4972.  if v4 == v5 then goto L3a49a6;
  #L3a4976.  v5:= 2I;
  #L3a4978.  if v4 == v5 then goto L3a499c;
  #L3a497c.  v5:= 3I;
  #L3a497e.  if v4 == v5 then goto L3a4990;
  #L3a4982.  call `skipName`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipName:()V` @kind virtual;
  #L3a4988.  call `skipValue`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @kind virtual;
  #L3a498e.  goto L3a4954;
  #L3a4990.  call temp:= `nextDouble`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextDouble:()D` @kind virtual;
  #L3a4996.  v3:= temp @kind wide;
  #L3a4998.  v3:= (`float`) v3 @kind d2f;
  #L3a499a.  goto L3a4954;
  #L3a499c.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L3a49a2.  v2:= temp @kind object;
  #L3a49a4.  goto L3a4954;
  #L3a49a6.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L3a49ac.  v1:= temp @kind object;
  #L3a49ae.  goto L3a4954;
  #L3a49b0.  call temp:= `nextString`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L3a49b6.  v0:= temp @kind object;
  #L3a49b8.  goto L3a4954;
  #L3a49ba.  call `endObject`(v6) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.endObject:()V` @kind virtual;
  #L3a49c0.  v6:= new `com.airbnb.lottie.model.Font`;
  #L3a49c4.  call `<init>`(v6, v0, v1, v2, v3) @signature `Lcom/airbnb/lottie/model/Font;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;F)V` @kind direct;
  #L3a49ca.  return v6 @kind object;
}
