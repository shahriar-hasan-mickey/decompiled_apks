record `com.airbnb.lottie.parser.k` @kind class @AccessFlag  {
}
global `com.airbnb.lottie.parser.moshi.JsonReader$Options` `@@com.airbnb.lottie.parser.k.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a73e4.  v0:= "nm" @kind object;
  #L3a73e8.  v1:= "mm" @kind object;
  #L3a73ec.  v2:= "hd" @kind object;
  #L3a73f0.  temp:= new `java.lang.String`[v0, v1, v2];
  #L3a73f6.  v0:= temp @kind object;
  #L3a73f8.  call temp:= `of`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @kind static;
  #L3a73fe.  v0:= temp @kind object;
  #L3a7400.  `@@com.airbnb.lottie.parser.k.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` := v0 @kind object;
  #L3a7404.  return @kind void;
}
procedure `com.airbnb.lottie.model.content.MergePaths` `a`(`com.airbnb.lottie.parser.moshi.JsonReader` v5 @kind object) @signature `Lcom/airbnb/lottie/parser/k;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;)Lcom/airbnb/lottie/model/content/MergePaths;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a7364.  v0:= 0I;
  #L3a7366.  v1:= 0I;
  #L3a7368.  v1:= v0 @kind object;
  #L3a736a.  v2:= 0I;
  #L3a736c.  call temp:= `hasNext`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L3a7372.  v3:= temp;
  #L3a7374.  if v3 == 0 then goto L3a73c8;
  #L3a7378.  v3:= `@@com.airbnb.lottie.parser.k.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind object;
  #L3a737c.  call temp:= `selectName`(v5, v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @kind virtual;
  #L3a7382.  v3:= temp;
  #L3a7384.  if v3 == 0 then goto L3a73be;
  #L3a7388.  v4:= 1I;
  #L3a738a.  if v3 == v4 then goto L3a73ac;
  #L3a738e.  v4:= 2I;
  #L3a7390.  if v3 == v4 then goto L3a73a2;
  #L3a7394.  call `skipName`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipName:()V` @kind virtual;
  #L3a739a.  call `skipValue`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @kind virtual;
  #L3a73a0.  goto L3a736c;
  #L3a73a2.  call temp:= `nextBoolean`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextBoolean:()Z` @kind virtual;
  #L3a73a8.  v2:= temp;
  #L3a73aa.  goto L3a736c;
  #L3a73ac.  call temp:= `nextInt`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextInt:()I` @kind virtual;
  #L3a73b2.  v1:= temp;
  #L3a73b4.  call temp:= `forId`(v1) @signature `Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;.forId:(I)Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;` @kind static;
  #L3a73ba.  v1:= temp @kind object;
  #L3a73bc.  goto L3a736c;
  #L3a73be.  call temp:= `nextString`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L3a73c4.  v0:= temp @kind object;
  #L3a73c6.  goto L3a736c;
  #L3a73c8.  v5:= new `com.airbnb.lottie.model.content.MergePaths`;
  #L3a73cc.  call `<init>`(v5, v0, v1, v2) @signature `Lcom/airbnb/lottie/model/content/MergePaths;.<init>:(Ljava/lang/String;Lcom/airbnb/lottie/model/content/MergePaths$MergePathsMode;Z)V` @kind direct;
  #L3a73d2.  return v5 @kind object;
}
