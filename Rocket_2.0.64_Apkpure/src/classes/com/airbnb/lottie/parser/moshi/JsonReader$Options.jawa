record `com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `com.airbnb.lottie.parser.moshi.JsonReader$Options.a` @AccessFlag FINAL;
  `okio.Options` `com.airbnb.lottie.parser.moshi.JsonReader$Options.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.airbnb.lottie.parser.moshi.JsonReader$Options` v0 @kind this, `java.lang.String`[] v1 @kind object, `okio.Options` v2 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.<init>:([Ljava/lang/String;Lokio/Options;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3a838c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a8392.  v0.`com.airbnb.lottie.parser.moshi.JsonReader$Options.a` @type ^`java.lang.String`[] := v1 @kind object;
  #L3a8396.  v0.`com.airbnb.lottie.parser.moshi.JsonReader$Options.b` @type ^`okio.Options` := v2 @kind object;
  #L3a839a.  return @kind void;
}
procedure `com.airbnb.lottie.parser.moshi.JsonReader$Options` `of`(`java.lang.String`[] v4 @kind object) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a8304.  v0:= length @variable v4;
  #L3a8306.  v0:= new `okio.ByteString`[v0];
  #L3a830a.  v1:= new `okio.Buffer`;
  #L3a830e.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L3a8314.  v2:= 0I;
  #L3a8316.  v3:= length @variable v4;
  #L3a8318.  if v2 >= v3 then goto L3a833e;
  #L3a831c.  v3:= v4[v2] @kind object;
  #L3a8320.  call `a`(v1, v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.a:(Lokio/BufferedSink;Ljava/lang/String;)V` @kind static;
  #L3a8326.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L3a832c.  call temp:= `readByteString`(v1) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L3a8332.  v3:= temp @kind object;
  #L3a8334.  v0[v2]:= v3 @kind object;
  #L3a8338.  v2:= v2 + 1;
  #L3a833c.  goto L3a8316;
  #L3a833e.  v1:= new `com.airbnb.lottie.parser.moshi.JsonReader$Options`;
  #L3a8342.  call temp:= `clone`(v4) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a8348.  v4:= temp @kind object;
  #L3a834a.  v4:= (`java.lang.String`[]) v4 @kind object;
  #L3a834e.  call temp:= `of`(v0) @signature `Lokio/Options;.of:([Lokio/ByteString;)Lokio/Options;` @kind static;
  #L3a8354.  v0:= temp @kind object;
  #L3a8356.  call `<init>`(v1, v4, v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.<init>:([Ljava/lang/String;Lokio/Options;)V` @kind direct;
  #L3a835c.  return v1 @kind object;
  #L3a835e.  v4:= Exception @type ^`java.io.IOException` @kind object;
  #L3a8360.  v0:= new `java.lang.AssertionError`;
  #L3a8364.  call `<init>`(v0, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3a836a.  throw v0;
  catch `java.io.IOException` @[L3a8304..L3a835c] goto L3a835e;
}
