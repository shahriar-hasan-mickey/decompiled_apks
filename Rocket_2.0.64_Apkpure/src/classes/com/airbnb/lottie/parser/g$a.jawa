record `com.airbnb.lottie.parser.g$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@com.airbnb.lottie.parser.g$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/g$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a52fc.  call temp:= `values`() @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Token;.values:()[Lcom/airbnb/lottie/parser/moshi/JsonReader$Token;` @kind static;
  #L3a5302.  v0:= temp @kind object;
  #L3a5304.  v0:= length @variable v0;
  #L3a5306.  v0:= new `int`[v0];
  #L3a530a.  `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] := v0 @kind object;
  #L3a530e.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.NUMBER` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L3a5312.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3a5318.  v1:= temp;
  #L3a531a.  v2:= 1I;
  #L3a531c.  v0[v1]:= v2;
  #L3a5320.  v0:= `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] @kind object;
  #L3a5324.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.BEGIN_ARRAY` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L3a5328.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3a532e.  v1:= temp;
  #L3a5330.  v2:= 2I;
  #L3a5332.  v0[v1]:= v2;
  #L3a5336.  v0:= `@@com.airbnb.lottie.parser.g$a.a` @type ^`int`[] @kind object;
  #L3a533a.  v1:= `@@com.airbnb.lottie.parser.moshi.JsonReader$Token.BEGIN_OBJECT` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Token` @kind object;
  #L3a533e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L3a5344.  v1:= temp;
  #L3a5346.  v2:= 3I;
  #L3a5348.  v0[v1]:= v2;
  #L3a534c.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L3a530e..L3a5320] goto L3a5320;
  catch `java.lang.NoSuchFieldError` @[L3a5320..L3a5336] goto L3a5336;
  catch `java.lang.NoSuchFieldError` @[L3a5336..L3a534c] goto L3a534c;
}
