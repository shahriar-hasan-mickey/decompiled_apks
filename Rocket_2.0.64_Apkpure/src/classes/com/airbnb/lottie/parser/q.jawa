record `com.airbnb.lottie.parser.q` @kind class @AccessFlag  {
}
global `com.airbnb.lottie.parser.moshi.JsonReader$Options` `@@com.airbnb.lottie.parser.q.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/airbnb/lottie/parser/q;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a7dd4.  v0:= "nm" @kind object;
  #L3a7dd8.  v1:= "hd" @kind object;
  #L3a7ddc.  v2:= "it" @kind object;
  #L3a7de0.  temp:= new `java.lang.String`[v0, v1, v2];
  #L3a7de6.  v0:= temp @kind object;
  #L3a7de8.  call temp:= `of`(v0) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;.of:([Ljava/lang/String;)Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;` @kind static;
  #L3a7dee.  v0:= temp @kind object;
  #L3a7df0.  `@@com.airbnb.lottie.parser.q.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` := v0 @kind object;
  #L3a7df4.  return @kind void;
}
procedure `com.airbnb.lottie.model.content.ShapeGroup` `a`(`com.airbnb.lottie.parser.moshi.JsonReader` v5 @kind object, `com.airbnb.lottie.LottieComposition` v6 @kind object) @signature `Lcom/airbnb/lottie/parser/q;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;Lcom/airbnb/lottie/LottieComposition;)Lcom/airbnb/lottie/model/content/ShapeGroup;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a7d38.  v0:= new `java.util.ArrayList`;
  #L3a7d3c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3a7d42.  v1:= 0I;
  #L3a7d44.  v2:= 0I;
  #L3a7d46.  call temp:= `hasNext`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L3a7d4c.  v3:= temp;
  #L3a7d4e.  if v3 == 0 then goto L3a7db8;
  #L3a7d52.  v3:= `@@com.airbnb.lottie.parser.q.a` @type ^`com.airbnb.lottie.parser.moshi.JsonReader$Options` @kind object;
  #L3a7d56.  call temp:= `selectName`(v5, v3) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.selectName:(Lcom/airbnb/lottie/parser/moshi/JsonReader$Options;)I` @kind virtual;
  #L3a7d5c.  v3:= temp;
  #L3a7d5e.  if v3 == 0 then goto L3a7dae;
  #L3a7d62.  v4:= 1I;
  #L3a7d64.  if v3 == v4 then goto L3a7da4;
  #L3a7d68.  v4:= 2I;
  #L3a7d6a.  if v3 == v4 then goto L3a7d76;
  #L3a7d6e.  call `skipValue`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.skipValue:()V` @kind virtual;
  #L3a7d74.  goto L3a7d46;
  #L3a7d76.  call `beginArray`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.beginArray:()V` @kind virtual;
  #L3a7d7c.  call temp:= `hasNext`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.hasNext:()Z` @kind virtual;
  #L3a7d82.  v3:= temp;
  #L3a7d84.  if v3 == 0 then goto L3a7d9c;
  #L3a7d88.  call temp:= `a`(v5, v6) @signature `Lcom/airbnb/lottie/parser/b;.a:(Lcom/airbnb/lottie/parser/moshi/JsonReader;Lcom/airbnb/lottie/LottieComposition;)Lcom/airbnb/lottie/model/content/ContentModel;` @kind static;
  #L3a7d8e.  v3:= temp @kind object;
  #L3a7d90.  if v3 == 0 then goto L3a7d7c;
  #L3a7d94.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3a7d9a.  goto L3a7d7c;
  #L3a7d9c.  call `endArray`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.endArray:()V` @kind virtual;
  #L3a7da2.  goto L3a7d46;
  #L3a7da4.  call temp:= `nextBoolean`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextBoolean:()Z` @kind virtual;
  #L3a7daa.  v2:= temp;
  #L3a7dac.  goto L3a7d46;
  #L3a7dae.  call temp:= `nextString`(v5) @signature `Lcom/airbnb/lottie/parser/moshi/JsonReader;.nextString:()Ljava/lang/String;` @kind virtual;
  #L3a7db4.  v1:= temp @kind object;
  #L3a7db6.  goto L3a7d46;
  #L3a7db8.  v5:= new `com.airbnb.lottie.model.content.ShapeGroup`;
  #L3a7dbc.  call `<init>`(v5, v1, v0, v2) @signature `Lcom/airbnb/lottie/model/content/ShapeGroup;.<init>:(Ljava/lang/String;Ljava/util/List;Z)V` @kind direct;
  #L3a7dc2.  return v5 @kind object;
}
