record `com.airbnb.lottie.value.ScaleXY` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.value.ScaleXY.a` @AccessFlag PRIVATE;
  `float` `com.airbnb.lottie.value.ScaleXY.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3acbb4.  v0:= 1.0F;
  #L3acbb8.  call `<init>`(v1, v0, v0) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:(FF)V` @kind direct;
  #L3acbbe.  return @kind void;
}
procedure `void` `<init>`(`com.airbnb.lottie.value.ScaleXY` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3acbd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3acbd6.  v0.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float` := v1;
  #L3acbda.  v0.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float` := v2;
  #L3acbde.  return @kind void;
}
procedure `boolean` `equals`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this, `float` v2 , `float` v3 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.equals:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3acb08.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float`;
  #L3acb0c.  v2:= fcmpl(v0, v2);
  #L3acb10.  if v2 != 0 then goto L3acb24;
  #L3acb14.  v2:= v1.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float`;
  #L3acb18.  v2:= fcmpl(v2, v3);
  #L3acb1c.  if v2 != 0 then goto L3acb24;
  #L3acb20.  v2:= 1I;
  #L3acb22.  goto L3acb26;
  #L3acb24.  v2:= 0I;
  #L3acb26.  return v2;
}
procedure `float` `getScaleX`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3acb38.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float`;
  #L3acb3c.  return v0;
}
procedure `float` `getScaleY`(`com.airbnb.lottie.value.ScaleXY` v1 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3acb50.  v0:= v1.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float`;
  #L3acb54.  return v0;
}
procedure `void` `set`(`com.airbnb.lottie.value.ScaleXY` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/airbnb/lottie/value/ScaleXY;.set:(FF)V` @AccessFlag PUBLIC {
    temp;

  #L3acbf0.  v0.`com.airbnb.lottie.value.ScaleXY.a` @type ^`float` := v1;
  #L3acbf4.  v0.`com.airbnb.lottie.value.ScaleXY.b` @type ^`float` := v2;
  #L3acbf8.  return @kind void;
}
procedure `java.lang.String` `toString`(`com.airbnb.lottie.value.ScaleXY` v2 @kind this) @signature `Lcom/airbnb/lottie/value/ScaleXY;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3acb68.  v0:= new `java.lang.StringBuilder`;
  #L3acb6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3acb72.  call temp:= `getScaleX`(v2) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleX:()F` @kind virtual;
  #L3acb78.  v1:= temp;
  #L3acb7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acb80.  v1:= "x" @kind object;
  #L3acb84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acb8a.  call temp:= `getScaleY`(v2) @signature `Lcom/airbnb/lottie/value/ScaleXY;.getScaleY:()F` @kind virtual;
  #L3acb90.  v1:= temp;
  #L3acb92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acb98.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3acb9e.  v0:= temp @kind object;
  #L3acba0.  return v0 @kind object;
}
