record `com.airbnb.lottie.utils.MeanCalculator` @kind class @AccessFlag PUBLIC {
  `float` `com.airbnb.lottie.utils.MeanCalculator.a` @AccessFlag PRIVATE;
  `int` `com.airbnb.lottie.utils.MeanCalculator.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.airbnb.lottie.utils.MeanCalculator` v0 @kind this) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab448.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ab44e.  return @kind void;
}
procedure `void` `add`(`com.airbnb.lottie.utils.MeanCalculator` v2 @kind this, `float` v3 ) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.add:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ab460.  v0:= v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float`;
  #L3ab464.  v0:= v0 + v3 @kind float;
  #L3ab466.  v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float` := v0;
  #L3ab46a.  v3:= v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int`;
  #L3ab46e.  v3:= v3 + 1;
  #L3ab472.  v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int` := v3;
  #L3ab476.  v1:= 2147483647I;
  #L3ab47c.  if v3 != v1 then goto L3ab492;
  #L3ab480.  v1:= 2.0F;
  #L3ab484.  v0:= v0 / v1 @kind float;
  #L3ab486.  v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float` := v0;
  #L3ab48a.  v3:= v3 / 2;
  #L3ab48e.  v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int` := v3;
  #L3ab492.  return @kind void;
}
procedure `float` `getMean`(`com.airbnb.lottie.utils.MeanCalculator` v2 @kind this) @signature `Lcom/airbnb/lottie/utils/MeanCalculator;.getMean:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ab420.  v0:= v2.`com.airbnb.lottie.utils.MeanCalculator.b` @type ^`int`;
  #L3ab424.  if v0 != 0 then goto L3ab42c;
  #L3ab428.  v0:= 0I;
  #L3ab42a.  return v0;
  #L3ab42c.  v1:= v2.`com.airbnb.lottie.utils.MeanCalculator.a` @type ^`float`;
  #L3ab430.  v0:= (`float`) v0 @kind i2f;
  #L3ab432.  v1:= v1 / v0 @kind float;
  #L3ab434.  return v1;
}
