record `com.airbnb.lottie.utils.GammaEvaluator` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.airbnb.lottie.utils.GammaEvaluator` v0 @kind this) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3aa98c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aa992.  return @kind void;
}
procedure `float` `a`(`float` v4 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3aa7c0.  v0:= 1025879782I;
  #L3aa7c6.  v0:= fcmpg(v4, v0);
  #L3aa7ca.  if v0 > 0 then goto L3aa7d8;
  #L3aa7ce.  v0:= 1095678034I;
  #L3aa7d4.  v4:= v4 / v0 @kind float;
  #L3aa7d6.  goto L3aa7fe;
  #L3aa7d8.  v0:= 1029785518I;
  #L3aa7de.  v4:= v4 + v0 @kind float;
  #L3aa7e0.  v0:= 1065814589I;
  #L3aa7e6.  v4:= v4 / v0 @kind float;
  #L3aa7e8.  v0:= (`double`) v4 @kind f2d;
  #L3aa7ea.  v2:= 2.4000000953674316D;
  #L3aa7f4.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3aa7fa.  v0:= temp @kind wide;
  #L3aa7fc.  v4:= (`float`) v0 @kind d2f;
  #L3aa7fe.  return v4;
}
procedure `float` `b`(`float` v4 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3aa810.  v0:= 994913820I;
  #L3aa816.  v0:= fcmpg(v4, v0);
  #L3aa81a.  if v0 > 0 then goto L3aa82a;
  #L3aa81e.  v0:= 1095678034I;
  #L3aa824.  v4:= v4 * v0 @kind float;
  #L3aa828.  goto L3aa85a;
  #L3aa82a.  v0:= (`double`) v4 @kind f2d;
  #L3aa82c.  v2:= 0.4166666567325592D;
  #L3aa836.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3aa83c.  v0:= temp @kind wide;
  #L3aa83e.  v2:= 1.0549999475479126D;
  #L3aa848.  v0:= v0 * v2 @kind double;
  #L3aa84c.  v2:= 0.054999999701976776D;
  #L3aa856.  v0:= v0 - v2 @kind double;
  #L3aa858.  v4:= (`float`) v0 @kind d2f;
  #L3aa85a.  return v4;
}
procedure `int` `evaluate`(`float` v7 , `int` v8 , `int` v9 ) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.evaluate:(FII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3aa86c.  if v8 != v9 then goto L3aa872;
  #L3aa870.  return v8;
  #L3aa872.  v0:= v8 ^> 24;
  #L3aa876.  v0:= v0 ^& 255;
  #L3aa87a.  v0:= (`float`) v0 @kind i2f;
  #L3aa87c.  v1:= 255.0F;
  #L3aa880.  v0:= v0 / v1 @kind float;
  #L3aa882.  v2:= v8 ^> 16;
  #L3aa886.  v2:= v2 ^& 255;
  #L3aa88a.  v2:= (`float`) v2 @kind i2f;
  #L3aa88c.  v2:= v2 / v1 @kind float;
  #L3aa88e.  v3:= v8 ^> 8;
  #L3aa892.  v3:= v3 ^& 255;
  #L3aa896.  v3:= (`float`) v3 @kind i2f;
  #L3aa898.  v3:= v3 / v1 @kind float;
  #L3aa89a.  v8:= v8 ^& 255;
  #L3aa89e.  v8:= (`float`) v8 @kind i2f;
  #L3aa8a0.  v8:= v8 / v1 @kind float;
  #L3aa8a2.  v4:= v9 ^> 24;
  #L3aa8a6.  v4:= v4 ^& 255;
  #L3aa8aa.  v4:= (`float`) v4 @kind i2f;
  #L3aa8ac.  v4:= v4 / v1 @kind float;
  #L3aa8ae.  v5:= v9 ^> 16;
  #L3aa8b2.  v5:= v5 ^& 255;
  #L3aa8b6.  v5:= (`float`) v5 @kind i2f;
  #L3aa8b8.  v5:= v5 / v1 @kind float;
  #L3aa8ba.  v6:= v9 ^> 8;
  #L3aa8be.  v6:= v6 ^& 255;
  #L3aa8c2.  v6:= (`float`) v6 @kind i2f;
  #L3aa8c4.  v6:= v6 / v1 @kind float;
  #L3aa8c6.  v9:= v9 ^& 255;
  #L3aa8ca.  v9:= (`float`) v9 @kind i2f;
  #L3aa8cc.  v9:= v9 / v1 @kind float;
  #L3aa8ce.  call temp:= `a`(v2) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8d4.  v2:= temp;
  #L3aa8d6.  call temp:= `a`(v3) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8dc.  v3:= temp;
  #L3aa8de.  call temp:= `a`(v8) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8e4.  v8:= temp;
  #L3aa8e6.  call temp:= `a`(v5) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8ec.  v5:= temp;
  #L3aa8ee.  call temp:= `a`(v6) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8f4.  v6:= temp;
  #L3aa8f6.  call temp:= `a`(v9) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.a:(F)F` @kind static;
  #L3aa8fc.  v9:= temp;
  #L3aa8fe.  v4:= v4 - v0 @kind float;
  #L3aa900.  v4:= v4 * v7 @kind float;
  #L3aa904.  v0:= v0 + v4 @kind float;
  #L3aa906.  v5:= v5 - v2 @kind float;
  #L3aa908.  v5:= v5 * v7 @kind float;
  #L3aa90c.  v2:= v2 + v5 @kind float;
  #L3aa90e.  v6:= v6 - v3 @kind float;
  #L3aa910.  v6:= v6 * v7 @kind float;
  #L3aa914.  v3:= v3 + v6 @kind float;
  #L3aa916.  v9:= v9 - v8 @kind float;
  #L3aa918.  v7:= v7 * v9 @kind float;
  #L3aa91c.  v8:= v8 + v7 @kind float;
  #L3aa91e.  v0:= v0 * v1 @kind float;
  #L3aa922.  call temp:= `b`(v2) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L3aa928.  v7:= temp;
  #L3aa92a.  v7:= v7 * v1 @kind float;
  #L3aa92e.  call temp:= `b`(v3) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L3aa934.  v9:= temp;
  #L3aa936.  v9:= v9 * v1 @kind float;
  #L3aa93a.  call temp:= `b`(v8) @signature `Lcom/airbnb/lottie/utils/GammaEvaluator;.b:(F)F` @kind static;
  #L3aa940.  v8:= temp;
  #L3aa942.  v8:= v8 * v1 @kind float;
  #L3aa946.  call temp:= `round`(v0) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3aa94c.  v0:= temp;
  #L3aa94e.  v0:= v0 ^< 24;
  #L3aa952.  call temp:= `round`(v7) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3aa958.  v7:= temp;
  #L3aa95a.  v7:= v7 ^< 16;
  #L3aa95e.  v7:= v7 ^| v0 @kind int;
  #L3aa960.  call temp:= `round`(v9) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3aa966.  v9:= temp;
  #L3aa968.  v9:= v9 ^< 8;
  #L3aa96c.  v7:= v7 ^| v9 @kind int;
  #L3aa96e.  call temp:= `round`(v8) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3aa974.  v8:= temp;
  #L3aa976.  v7:= v7 ^| v8 @kind int;
  #L3aa978.  return v7;
}
