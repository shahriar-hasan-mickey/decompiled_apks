record `kotlin.m` @kind class @AccessFlag FINAL extends `kotlin.Lazy` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.jvm.functions.Function0` `kotlin.m.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.m.b` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.m.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.m` v1 @kind this, `kotlin.jvm.functions.Function0` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/m;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50f668.  v0:= "initializer" @kind object;
  #L50f66c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50f672.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50f678.  v1.`kotlin.m.a` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L50f67c.  v2:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L50f680.  v1.`kotlin.m.b` @type ^`java.lang.Object` := v2 @kind object;
  #L50f684.  if v3 != 0 then goto L50f68a;
  #L50f688.  v3:= v1 @kind object;
  #L50f68a.  v1.`kotlin.m.c` @type ^`java.lang.Object` := v3 @kind object;
  #L50f68e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.m` v0 @kind this, `kotlin.jvm.functions.Function0` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/m;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L50f6a0.  v3:= v3 ^& 2;
  #L50f6a4.  if v3 == 0 then goto L50f6aa;
  #L50f6a8.  v2:= 0I;
  #L50f6aa.  call `<init>`(v0, v1, v2) @signature `Lkotlin/m;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V` @kind direct;
  #L50f6b0.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.m` v2 @kind this) @signature `Lkotlin/m;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L50f610.  v0:= new `kotlin.InitializedLazyImpl`;
  #L50f614.  call temp:= `getValue`(v2) @signature `Lkotlin/m;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L50f61a.  v1:= temp @kind object;
  #L50f61c.  call `<init>`(v0, v1) @signature `Lkotlin/InitializedLazyImpl;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50f622.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlin.m` v3 @kind this) @signature `Lkotlin/m;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50f5b0.  v0:= v3.`kotlin.m.b` @type ^`java.lang.Object` @kind object;
  #L50f5b4.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L50f5b8.  if v0 == v1 then goto L50f5be;
  #L50f5bc.  return v0 @kind object;
  #L50f5be.  v0:= v3.`kotlin.m.c` @type ^`java.lang.Object` @kind object;
  #L50f5c2.  @monitorenter v0
  #L50f5c4.  v2:= v3.`kotlin.m.b` @type ^`java.lang.Object` @kind object;
  #L50f5c8.  if v2 == v1 then goto L50f5ce;
  #L50f5cc.  goto L50f5ea;
  #L50f5ce.  v1:= v3.`kotlin.m.a` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L50f5d2.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L50f5d8.  call temp:= `invoke`(v1) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L50f5de.  v2:= temp @kind object;
  #L50f5e0.  v3.`kotlin.m.b` @type ^`java.lang.Object` := v2 @kind object;
  #L50f5e4.  v1:= 0I;
  #L50f5e6.  v3.`kotlin.m.a` @type ^`kotlin.jvm.functions.Function0` := v1 @kind object;
  #L50f5ea.  @monitorexit v0
  #L50f5ec.  return v2 @kind object;
  #L50f5ee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50f5f0.  @monitorexit v0
  #L50f5f2.  throw v1;
  catch `java.lang.Throwable` @[L50f5c4..L50f5ea] goto L50f5ee;
}
procedure `boolean` `isInitialized`(`kotlin.m` v2 @kind this) @signature `Lkotlin/m;.isInitialized:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50f58c.  v0:= v2.`kotlin.m.b` @type ^`java.lang.Object` @kind object;
  #L50f590.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L50f594.  if v0 == v1 then goto L50f59c;
  #L50f598.  v0:= 1I;
  #L50f59a.  goto L50f59e;
  #L50f59c.  v0:= 0I;
  #L50f59e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.m` v1 @kind this) @signature `Lkotlin/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50f634.  call temp:= `isInitialized`(v1) @signature `Lkotlin/m;.isInitialized:()Z` @kind virtual;
  #L50f63a.  v0:= temp;
  #L50f63c.  if v0 == 0 then goto L50f652;
  #L50f640.  call temp:= `getValue`(v1) @signature `Lkotlin/m;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L50f646.  v0:= temp @kind object;
  #L50f648.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50f64e.  v0:= temp @kind object;
  #L50f650.  goto L50f656;
  #L50f652.  v0:= "Lazy value not initialized yet." @kind object;
  #L50f656.  return v0 @kind object;
}
