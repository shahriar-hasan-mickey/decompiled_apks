record `kotlin.UShortArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `short`[] `kotlin.UShortArray.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UShortArray` v0 @kind this, `short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.<init>:([S)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L51182c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L511832.  v0.`kotlin.UShortArray.a` @type ^`short`[] := v1 @kind object;
  #L511836.  return @kind void;
}
procedure `kotlin.UShortArray` `box-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.box-impl:([S)Lkotlin/UShortArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L51179c.  v0:= new `kotlin.UShortArray`;
  #L5117a0.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray;.<init>:([S)V` @kind direct;
  #L5117a6.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UShortArray;.constructor-impl:(I)[S` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5117d8.  v0:= new `short`[v0];
  #L5117dc.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @kind static;
  #L5117e2.  v0:= temp @kind object;
  #L5117e4.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5117f8.  v0:= "storage" @kind object;
  #L5117fc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L511802.  return v1 @kind object;
}
procedure `boolean` `contains-xj2QHRw`(`short`[] v0 @kind object, `short` v1 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511458.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L51145e.  v0:= temp;
  #L511460.  return v0;
}
procedure `boolean` `containsAll-impl`(`short`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L51149c.  v0:= "elements" @kind object;
  #L5114a0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5114a6.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L5114ac.  v0:= temp;
  #L5114ae.  v1:= 0I;
  #L5114b0.  v2:= 1I;
  #L5114b2.  if v0 == 0 then goto L5114ba;
  #L5114b6.  v1:= 1I;
  #L5114b8.  goto L511500;
  #L5114ba.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L5114c0.  v5:= temp @kind object;
  #L5114c2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5114c8.  v0:= temp;
  #L5114ca.  if v0 == 0 then goto L5114b6;
  #L5114ce.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5114d4.  v0:= temp @kind object;
  #L5114d6.  v3:= instanceof @variable v0 @type ^`kotlin.UShort` @kind boolean;
  #L5114da.  if v3 == 0 then goto L5114fa;
  #L5114de.  v0:= (`kotlin.UShort`) v0 @kind object;
  #L5114e2.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L5114e8.  v0:= temp;
  #L5114ea.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L5114f0.  v0:= temp;
  #L5114f2.  if v0 == 0 then goto L5114fa;
  #L5114f6.  v0:= 1I;
  #L5114f8.  goto L5114fc;
  #L5114fa.  v0:= 0I;
  #L5114fc.  if v0 != 0 then goto L5114c2;
  #L511500.  return v1;
}
procedure `boolean` `equals-impl`(`short`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L511534.  v0:= instanceof @variable v3 @type ^`kotlin.UShortArray` @kind boolean;
  #L511538.  v1:= 0I;
  #L51153a.  if v0 != 0 then goto L511540;
  #L51153e.  return v1;
  #L511540.  v3:= (`kotlin.UShortArray`) v3 @kind object;
  #L511544.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @kind virtual;
  #L51154a.  v3:= temp @kind object;
  #L51154c.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L511552.  v2:= temp;
  #L511554.  if v2 != 0 then goto L51155a;
  #L511558.  return v1;
  #L51155a.  v2:= 1I;
  #L51155c.  return v2;
}
procedure `boolean` `equals-impl0`(`short`[] v0 @kind object, `short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.equals-impl0:([S[S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L511570.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L511576.  v0:= temp;
  #L511578.  return v0;
}
procedure `short` `get-Mh2AYeg`(`short`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UShortArray;.get-Mh2AYeg:([SI)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L5117b8.  v0:= v0[v1] @kind short;
  #L5117bc.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShort;.constructor-impl:(S)S` @kind static;
  #L5117c2.  v0:= temp;
  #L5117c4.  return v0;
}
procedure `int` `getSize-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L51164c.  v0:= length @variable v0;
  #L51164e.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UShortArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L511868.  return @kind void;
}
procedure `int` `hashCode-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L511680.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([S)I` @kind static;
  #L511686.  v0:= temp;
  #L511688.  return v0;
}
procedure `boolean` `isEmpty-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5115ac.  v0:= length @variable v0;
  #L5115ae.  if v0 != 0 then goto L5115b6;
  #L5115b2.  v0:= 1I;
  #L5115b4.  goto L5115b8;
  #L5115b6.  v0:= 0I;
  #L5115b8.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L511780.  v0:= new `kotlin.UShortArray$a`;
  #L511784.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray$a;.<init>:([S)V` @kind direct;
  #L51178a.  return v0 @kind object;
}
procedure `void` `set-01HTLdE`(`short`[] v0 @kind object, `int` v1 , `short` v2 ) @signature `Lkotlin/UShortArray;.set-01HTLdE:([SIS)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L51187c.  v0[v1]:= v2 @kind short;
  #L511880.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`short`[] v2 @kind object) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L511718.  v0:= new `java.lang.StringBuilder`;
  #L51171c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L511722.  v1:= "UShortArray(storage=" @kind object;
  #L511726.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L51172c.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([S)Ljava/lang/String;` @kind static;
  #L511732.  v2:= temp @kind object;
  #L511734.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L51173a.  v2:= 41I;
  #L51173e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L511744.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L51174a.  v2:= temp @kind object;
  #L51174c.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L5113a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5113a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5113ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5113b2.  throw v2;
}
procedure `boolean` `add-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.add-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5113c4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5113c8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5113cc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5113d2.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5113e4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5113e8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5113ec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5113f2.  throw v2;
}
procedure `void` `clear`(`kotlin.UShortArray` v2 @kind this) @signature `Lkotlin/UShortArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L511848.  v0:= new `java.lang.UnsupportedOperationException`;
  #L51184c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L511850.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L511856.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L511404.  v0:= instanceof @variable v2 @type ^`kotlin.UShort` @kind boolean;
  #L511408.  if v0 != 0 then goto L511410;
  #L51140c.  v2:= 0I;
  #L51140e.  return v2;
  #L511410.  v2:= (`kotlin.UShort`) v2 @kind object;
  #L511414.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L51141a.  v2:= temp;
  #L51141c.  call temp:= `contains-xj2QHRw`(v1, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @kind virtual;
  #L511422.  v2:= temp;
  #L511424.  return v2;
}
procedure `boolean` `contains-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511438.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L51143c.  call temp:= `contains-xj2QHRw`(v0, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @kind static;
  #L511442.  v2:= temp;
  #L511444.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511474.  v0:= "elements" @kind object;
  #L511478.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L51147e.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511482.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @kind static;
  #L511488.  v2:= temp;
  #L51148a.  return v2;
}
procedure `boolean` `equals`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511514.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511518.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @kind static;
  #L51151e.  v2:= temp;
  #L511520.  return v2;
}
procedure `int` `getSize`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51162c.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511630.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @kind static;
  #L511636.  v0:= temp;
  #L511638.  return v0;
}
procedure `int` `hashCode`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511660.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511664.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @kind static;
  #L51166a.  v0:= temp;
  #L51166c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51158c.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511590.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @kind static;
  #L511596.  v0:= temp;
  #L511598.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L511760.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511764.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @kind static;
  #L51176a.  v0:= temp @kind object;
  #L51176c.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5115cc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5115d0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5115d4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5115da.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5115ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5115f0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5115f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5115fa.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51160c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L511610.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L511614.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51161a.  throw v2;
}
procedure `int` `size`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L51169c.  call temp:= `getSize`(v1) @signature `Lkotlin/UShortArray;.getSize:()I` @kind virtual;
  #L5116a2.  v0:= temp;
  #L5116a4.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5116b8.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L5116be.  v0:= temp @kind object;
  #L5116c0.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/UShortArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5116d4.  v0:= "array" @kind object;
  #L5116d8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5116de.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L5116e4.  v2:= temp @kind object;
  #L5116e6.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5116f8.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L5116fc.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @kind static;
  #L511702.  v0:= temp @kind object;
  #L511704.  return v0 @kind object;
}
procedure `short`[] `unbox-impl`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L511814.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L511818.  return v0 @kind object;
}
