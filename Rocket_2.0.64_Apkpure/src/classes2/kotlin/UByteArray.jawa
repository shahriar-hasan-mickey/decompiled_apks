record `kotlin.UByteArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `byte`[] `kotlin.UByteArray.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UByteArray` v0 @kind this, `byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.<init>:([B)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L5100c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5100ca.  v0.`kotlin.UByteArray.a` @type ^`byte`[] := v1 @kind object;
  #L5100ce.  return @kind void;
}
procedure `kotlin.UByteArray` `box-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.box-impl:([B)Lkotlin/UByteArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L5100a8.  v0:= new `kotlin.UByteArray`;
  #L5100ac.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray;.<init>:([B)V` @kind direct;
  #L5100b2.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UByteArray;.constructor-impl:(I)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50ff00.  v0:= new `byte`[v0];
  #L50ff04.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @kind static;
  #L50ff0a.  v0:= temp @kind object;
  #L50ff0c.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50fee4.  v0:= "storage" @kind object;
  #L50fee8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50feee.  return v1 @kind object;
}
procedure `boolean` `contains-7apg3OU`(`byte`[] v0 @kind object, `byte` v1 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50fcf0.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L50fcf6.  v0:= temp;
  #L50fcf8.  return v0;
}
procedure `boolean` `containsAll-impl`(`byte`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50fd34.  v0:= "elements" @kind object;
  #L50fd38.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50fd3e.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L50fd44.  v0:= temp;
  #L50fd46.  v1:= 0I;
  #L50fd48.  v2:= 1I;
  #L50fd4a.  if v0 == 0 then goto L50fd52;
  #L50fd4e.  v1:= 1I;
  #L50fd50.  goto L50fd98;
  #L50fd52.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L50fd58.  v5:= temp @kind object;
  #L50fd5a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50fd60.  v0:= temp;
  #L50fd62.  if v0 == 0 then goto L50fd4e;
  #L50fd66.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50fd6c.  v0:= temp @kind object;
  #L50fd6e.  v3:= instanceof @variable v0 @type ^`kotlin.UByte` @kind boolean;
  #L50fd72.  if v3 == 0 then goto L50fd92;
  #L50fd76.  v0:= (`kotlin.UByte`) v0 @kind object;
  #L50fd7a.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L50fd80.  v0:= temp;
  #L50fd82.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L50fd88.  v0:= temp;
  #L50fd8a.  if v0 == 0 then goto L50fd92;
  #L50fd8e.  v0:= 1I;
  #L50fd90.  goto L50fd94;
  #L50fd92.  v0:= 0I;
  #L50fd94.  if v0 != 0 then goto L50fd5a;
  #L50fd98.  return v1;
}
procedure `boolean` `equals-impl`(`byte`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50fdcc.  v0:= instanceof @variable v3 @type ^`kotlin.UByteArray` @kind boolean;
  #L50fdd0.  v1:= 0I;
  #L50fdd2.  if v0 != 0 then goto L50fdd8;
  #L50fdd6.  return v1;
  #L50fdd8.  v3:= (`kotlin.UByteArray`) v3 @kind object;
  #L50fddc.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @kind virtual;
  #L50fde2.  v3:= temp @kind object;
  #L50fde4.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L50fdea.  v2:= temp;
  #L50fdec.  if v2 != 0 then goto L50fdf2;
  #L50fdf0.  return v1;
  #L50fdf2.  v2:= 1I;
  #L50fdf4.  return v2;
}
procedure `boolean` `equals-impl0`(`byte`[] v0 @kind object, `byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.equals-impl0:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L50fe08.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L50fe0e.  v0:= temp;
  #L50fe10.  return v0;
}
procedure `byte` `get-w2LRezQ`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UByteArray;.get-w2LRezQ:([BI)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L50fec4.  v0:= v0[v1] @kind byte;
  #L50fec8.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByte;.constructor-impl:(B)B` @kind static;
  #L50fece.  v0:= temp;
  #L50fed0.  return v0;
}
procedure `int` `getSize-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50ff58.  v0:= length @variable v0;
  #L50ff5a.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UByteArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L510100.  return @kind void;
}
procedure `int` `hashCode-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50ff8c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L50ff92.  v0:= temp;
  #L50ff94.  return v0;
}
procedure `boolean` `isEmpty-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50fe44.  v0:= length @variable v0;
  #L50fe46.  if v0 != 0 then goto L50fe4e;
  #L50fe4a.  v0:= 1I;
  #L50fe4c.  goto L50fe50;
  #L50fe4e.  v0:= 0I;
  #L50fe50.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L51008c.  v0:= new `kotlin.UByteArray$a`;
  #L510090.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray$a;.<init>:([B)V` @kind direct;
  #L510096.  return v0 @kind object;
}
procedure `void` `set-VurrAj0`(`byte`[] v0 @kind object, `int` v1 , `byte` v2 ) @signature `Lkotlin/UByteArray;.set-VurrAj0:([BIB)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L510114.  v0[v1]:= v2 @kind byte;
  #L510118.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`byte`[] v2 @kind object) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L510024.  v0:= new `java.lang.StringBuilder`;
  #L510028.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L51002e.  v1:= "UByteArray(storage=" @kind object;
  #L510032.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L510038.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L51003e.  v2:= temp @kind object;
  #L510040.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L510046.  v2:= 41I;
  #L51004a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L510050.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L510056.  v2:= temp @kind object;
  #L510058.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50fc3c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fc40.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50fc44.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fc4a.  throw v2;
}
procedure `boolean` `add-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.add-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fc5c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fc60.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50fc64.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fc6a.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fc7c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fc80.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50fc84.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fc8a.  throw v2;
}
procedure `void` `clear`(`kotlin.UByteArray` v2 @kind this) @signature `Lkotlin/UByteArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5100e0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L5100e4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L5100e8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5100ee.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50fc9c.  v0:= instanceof @variable v2 @type ^`kotlin.UByte` @kind boolean;
  #L50fca0.  if v0 != 0 then goto L50fca8;
  #L50fca4.  v2:= 0I;
  #L50fca6.  return v2;
  #L50fca8.  v2:= (`kotlin.UByte`) v2 @kind object;
  #L50fcac.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L50fcb2.  v2:= temp;
  #L50fcb4.  call temp:= `contains-7apg3OU`(v1, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @kind virtual;
  #L50fcba.  v2:= temp;
  #L50fcbc.  return v2;
}
procedure `boolean` `contains-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fcd0.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50fcd4.  call temp:= `contains-7apg3OU`(v0, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @kind static;
  #L50fcda.  v2:= temp;
  #L50fcdc.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fd0c.  v0:= "elements" @kind object;
  #L50fd10.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50fd16.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50fd1a.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @kind static;
  #L50fd20.  v2:= temp;
  #L50fd22.  return v2;
}
procedure `boolean` `equals`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fdac.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50fdb0.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @kind static;
  #L50fdb6.  v2:= temp;
  #L50fdb8.  return v2;
}
procedure `int` `getSize`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ff38.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50ff3c.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @kind static;
  #L50ff42.  v0:= temp;
  #L50ff44.  return v0;
}
procedure `int` `hashCode`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ff6c.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50ff70.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @kind static;
  #L50ff76.  v0:= temp;
  #L50ff78.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fe24.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50fe28.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @kind static;
  #L50fe2e.  v0:= temp;
  #L50fe30.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51006c.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L510070.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @kind static;
  #L510076.  v0:= temp @kind object;
  #L510078.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fe64.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fe68.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50fe6c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fe72.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fe84.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fe88.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50fe8c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fe92.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50fea4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50fea8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L50feac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50feb2.  throw v2;
}
procedure `int` `size`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50ffa8.  call temp:= `getSize`(v1) @signature `Lkotlin/UByteArray;.getSize:()I` @kind virtual;
  #L50ffae.  v0:= temp;
  #L50ffb0.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ffc4.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L50ffca.  v0:= temp @kind object;
  #L50ffcc.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/UByteArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ffe0.  v0:= "array" @kind object;
  #L50ffe4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50ffea.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L50fff0.  v2:= temp @kind object;
  #L50fff2.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L510004.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L510008.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @kind static;
  #L51000e.  v0:= temp @kind object;
  #L510010.  return v0 @kind object;
}
procedure `byte`[] `unbox-impl`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L50ff20.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L50ff24.  return v0 @kind object;
}
