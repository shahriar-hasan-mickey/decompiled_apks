record `kotlin.ResultKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `createFailure`(`java.lang.Throwable` v1 @kind object) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L50f168.  v0:= "exception" @kind object;
  #L50f16c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50f172.  v0:= new `kotlin.Result$Failure`;
  #L50f176.  call `<init>`(v0, v1) @signature `Lkotlin/Result$Failure;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50f17c.  return v0 @kind object;
}
procedure `void` `throwOnFailure`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L50f190.  v0:= instanceof @variable v1 @type ^`kotlin.Result$Failure` @kind boolean;
  #L50f194.  if v0 != 0 then goto L50f19a;
  #L50f198.  return @kind void;
  #L50f19a.  v1:= (`kotlin.Result$Failure`) v1 @kind object;
  #L50f19e.  v1:= v1.`kotlin.Result$Failure.exception` @type ^`java.lang.Throwable` @kind object;
  #L50f1a2.  throw v1;
}
