record `kotlin.KotlinVersion` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `kotlin.KotlinVersion.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.d` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.KotlinVersion` `@@kotlin.KotlinVersion.CURRENT` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.KotlinVersion$Companion` `@@kotlin.KotlinVersion.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.KotlinVersion.MAX_COMPONENT_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/KotlinVersion;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50e834.  v0:= new `kotlin.KotlinVersion$Companion`;
  #L50e838.  v1:= 0I;
  #L50e83a.  call `<init>`(v0, v1) @signature `Lkotlin/KotlinVersion$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L50e840.  `@@kotlin.KotlinVersion.Companion` @type ^`kotlin.KotlinVersion$Companion` := v0 @kind object;
  #L50e844.  call temp:= `a`() @signature `Lkotlin/b;.a:()Lkotlin/KotlinVersion;` @kind static;
  #L50e84a.  v0:= temp @kind object;
  #L50e84c.  `@@kotlin.KotlinVersion.CURRENT` @type ^`kotlin.KotlinVersion` := v0 @kind object;
  #L50e850.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50e864.  v0:= 0I;
  #L50e866.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @kind direct;
  #L50e86c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L50e880.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50e886.  v0.`kotlin.KotlinVersion.a` @type ^`int` := v1;
  #L50e88a.  v0.`kotlin.KotlinVersion.b` @type ^`int` := v2;
  #L50e88e.  v0.`kotlin.KotlinVersion.c` @type ^`int` := v3;
  #L50e892.  call temp:= `a`(v0, v1, v2, v3) @signature `Lkotlin/KotlinVersion;.a:(III)I` @kind direct;
  #L50e898.  v1:= temp;
  #L50e89a.  v0.`kotlin.KotlinVersion.d` @type ^`int` := v1;
  #L50e89e.  return @kind void;
}
procedure `int` `a`(`kotlin.KotlinVersion` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/KotlinVersion;.a:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50e720.  v0:= new `kotlin.ranges.IntRange`;
  #L50e724.  v1:= 0I;
  #L50e726.  v2:= 255I;
  #L50e72a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L50e730.  call temp:= `contains`(v0, v4) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L50e736.  v0:= temp;
  #L50e738.  if v0 == 0 then goto L50e76a;
  #L50e73c.  v0:= new `kotlin.ranges.IntRange`;
  #L50e740.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L50e746.  call temp:= `contains`(v0, v5) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L50e74c.  v0:= temp;
  #L50e74e.  if v0 == 0 then goto L50e76a;
  #L50e752.  v0:= new `kotlin.ranges.IntRange`;
  #L50e756.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L50e75c.  call temp:= `contains`(v0, v6) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L50e762.  v0:= temp;
  #L50e764.  if v0 == 0 then goto L50e76a;
  #L50e768.  v1:= 1I;
  #L50e76a.  if v1 == 0 then goto L50e77c;
  #L50e76e.  v4:= v4 ^< 16;
  #L50e772.  v5:= v5 ^< 8;
  #L50e776.  v4:= v4 + v5 @kind int;
  #L50e778.  v4:= v4 + v6 @kind int;
  #L50e77a.  return v4;
  #L50e77c.  v0:= new `java.lang.StringBuilder`;
  #L50e780.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50e786.  v1:= "Version components are out of range: " @kind object;
  #L50e78a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e790.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e796.  v4:= 46I;
  #L50e79a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7a0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7a6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7ac.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50e7b8.  v4:= temp @kind object;
  #L50e7ba.  v5:= new `java.lang.IllegalArgumentException`;
  #L50e7be.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L50e7c4.  v4:= temp @kind object;
  #L50e7c6.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50e7cc.  throw v5;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50e678.  v1:= (`kotlin.KotlinVersion`) v1 @kind object;
  #L50e67c.  call temp:= `compareTo`(v0, v1) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @kind virtual;
  #L50e682.  v1:= temp;
  #L50e684.  return v1;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v1 @kind this, `kotlin.KotlinVersion` v2 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e698.  v0:= "other" @kind object;
  #L50e69c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50e6a2.  v0:= v1.`kotlin.KotlinVersion.d` @type ^`int`;
  #L50e6a6.  v2:= v2.`kotlin.KotlinVersion.d` @type ^`int`;
  #L50e6aa.  v0:= v0 - v2 @kind int;
  #L50e6ac.  return v0;
}
procedure `boolean` `equals`(`kotlin.KotlinVersion` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/KotlinVersion;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e5c8.  v0:= 1I;
  #L50e5ca.  if v3 != v4 then goto L50e5d0;
  #L50e5ce.  return v0;
  #L50e5d0.  v1:= instanceof @variable v4 @type ^`kotlin.KotlinVersion` @kind boolean;
  #L50e5d4.  if v1 == 0 then goto L50e5de;
  #L50e5d8.  v4:= (`kotlin.KotlinVersion`) v4 @kind object;
  #L50e5dc.  goto L50e5e0;
  #L50e5de.  v4:= 0I;
  #L50e5e0.  v1:= 0I;
  #L50e5e2.  if v4 != 0 then goto L50e5e8;
  #L50e5e6.  return v1;
  #L50e5e8.  v2:= v3.`kotlin.KotlinVersion.d` @type ^`int`;
  #L50e5ec.  v4:= v4.`kotlin.KotlinVersion.d` @type ^`int`;
  #L50e5f0.  if v2 != v4 then goto L50e5f6;
  #L50e5f4.  goto L50e5f8;
  #L50e5f6.  v0:= 0I;
  #L50e5f8.  return v0;
}
procedure `int` `getMajor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMajor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50e6c0.  v0:= v1.`kotlin.KotlinVersion.a` @type ^`int`;
  #L50e6c4.  return v0;
}
procedure `int` `getMinor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMinor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50e6d8.  v0:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L50e6dc.  return v0;
}
procedure `int` `getPatch`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getPatch:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50e6f0.  v0:= v1.`kotlin.KotlinVersion.c` @type ^`int`;
  #L50e6f4.  return v0;
}
procedure `int` `hashCode`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e708.  v0:= v1.`kotlin.KotlinVersion.d` @type ^`int`;
  #L50e70c.  return v0;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(II)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50e60c.  v0:= v1.`kotlin.KotlinVersion.a` @type ^`int`;
  #L50e610.  if v0 > v2 then goto L50e626;
  #L50e614.  if v0 != v2 then goto L50e622;
  #L50e618.  v2:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L50e61c.  if v2 < v3 then goto L50e622;
  #L50e620.  goto L50e626;
  #L50e622.  v2:= 0I;
  #L50e624.  goto L50e628;
  #L50e626.  v2:= 1I;
  #L50e628.  return v2;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(III)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50e63c.  v0:= v1.`kotlin.KotlinVersion.a` @type ^`int`;
  #L50e640.  if v0 > v2 then goto L50e662;
  #L50e644.  if v0 != v2 then goto L50e65e;
  #L50e648.  v2:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L50e64c.  if v2 > v3 then goto L50e662;
  #L50e650.  if v2 != v3 then goto L50e65e;
  #L50e654.  v2:= v1.`kotlin.KotlinVersion.c` @type ^`int`;
  #L50e658.  if v2 < v4 then goto L50e65e;
  #L50e65c.  goto L50e662;
  #L50e65e.  v2:= 0I;
  #L50e660.  goto L50e664;
  #L50e662.  v2:= 1I;
  #L50e664.  return v2;
}
procedure `java.lang.String` `toString`(`kotlin.KotlinVersion` v3 @kind this) @signature `Lkotlin/KotlinVersion;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e7e0.  v0:= new `java.lang.StringBuilder`;
  #L50e7e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50e7ea.  v1:= v3.`kotlin.KotlinVersion.a` @type ^`int`;
  #L50e7ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7f4.  v1:= 46I;
  #L50e7f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e7fe.  v2:= v3.`kotlin.KotlinVersion.b` @type ^`int`;
  #L50e802.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e808.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e80e.  v1:= v3.`kotlin.KotlinVersion.c` @type ^`int`;
  #L50e812.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e818.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50e81e.  v0:= temp @kind object;
  #L50e820.  return v0 @kind object;
}
