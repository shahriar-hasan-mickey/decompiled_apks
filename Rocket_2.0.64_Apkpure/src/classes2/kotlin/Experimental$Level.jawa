record `kotlin.Experimental$Level` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `kotlin.Experimental$Level` `@@kotlin.Experimental$Level.ERROR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlin.Experimental$Level` `@@kotlin.Experimental$Level.WARNING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlin.Experimental$Level`[] `@@kotlin.Experimental$Level.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlin/Experimental$Level;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L50e3e0.  v0:= new `kotlin.Experimental$Level`;
  #L50e3e4.  v1:= "WARNING" @kind object;
  #L50e3e8.  v2:= 0I;
  #L50e3ea.  call `<init>`(v0, v1, v2) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L50e3f0.  `@@kotlin.Experimental$Level.WARNING` @type ^`kotlin.Experimental$Level` := v0 @kind object;
  #L50e3f4.  v0:= new `kotlin.Experimental$Level`;
  #L50e3f8.  v1:= "ERROR" @kind object;
  #L50e3fc.  v2:= 1I;
  #L50e3fe.  call `<init>`(v0, v1, v2) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L50e404.  `@@kotlin.Experimental$Level.ERROR` @type ^`kotlin.Experimental$Level` := v0 @kind object;
  #L50e408.  call temp:= `a`() @signature `Lkotlin/Experimental$Level;.a:()[Lkotlin/Experimental$Level;` @kind static;
  #L50e40e.  v0:= temp @kind object;
  #L50e410.  `@@kotlin.Experimental$Level.a` @type ^`kotlin.Experimental$Level`[] := v0 @kind object;
  #L50e414.  return @kind void;
}
procedure `void` `<init>`(`kotlin.Experimental$Level` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L50e428.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L50e42e.  return @kind void;
}
procedure `kotlin.Experimental$Level`[] `a`() @signature `Lkotlin/Experimental$Level;.a:()[Lkotlin/Experimental$Level;` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L50e390.  v0:= 2I;
  #L50e392.  v0:= new `kotlin.Experimental$Level`[v0];
  #L50e396.  v1:= `@@kotlin.Experimental$Level.WARNING` @type ^`kotlin.Experimental$Level` @kind object;
  #L50e39a.  v2:= 0I;
  #L50e39c.  v0[v2]:= v1 @kind object;
  #L50e3a0.  v1:= `@@kotlin.Experimental$Level.ERROR` @type ^`kotlin.Experimental$Level` @kind object;
  #L50e3a4.  v2:= 1I;
  #L50e3a6.  v0[v2]:= v1 @kind object;
  #L50e3aa.  return v0 @kind object;
}
procedure `kotlin.Experimental$Level` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lkotlin/Experimental$Level;.valueOf:(Ljava/lang/String;)Lkotlin/Experimental$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50e36c.  v0:= constclass @type ^`kotlin.Experimental$Level` @kind object;
  #L50e370.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L50e376.  v1:= temp @kind object;
  #L50e378.  v1:= (`kotlin.Experimental$Level`) v1 @kind object;
  #L50e37c.  return v1 @kind object;
}
procedure `kotlin.Experimental$Level`[] `values`() @signature `Lkotlin/Experimental$Level;.values:()[Lkotlin/Experimental$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50e3bc.  v0:= `@@kotlin.Experimental$Level.a` @type ^`kotlin.Experimental$Level`[] @kind object;
  #L50e3c0.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L50e3c6.  v0:= temp @kind object;
  #L50e3c8.  v0:= (`kotlin.Experimental$Level`[]) v0 @kind object;
  #L50e3cc.  return v0 @kind object;
}
