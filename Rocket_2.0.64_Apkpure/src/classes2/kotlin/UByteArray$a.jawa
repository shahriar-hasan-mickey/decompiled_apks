record `kotlin.UByteArray$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `byte`[] `kotlin.UByteArray$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.UByteArray$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.UByteArray$a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/UByteArray$a;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50fbf4.  v0:= "array" @kind object;
  #L50fbf8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L50fbfe.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50fc04.  v1.`kotlin.UByteArray$a.a` @type ^`byte`[] := v2 @kind object;
  #L50fc08.  return @kind void;
}
procedure `byte` `b`(`kotlin.UByteArray$a` v3 @kind this) @signature `Lkotlin/UByteArray$a;.b:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50fb84.  v0:= v3.`kotlin.UByteArray$a.b` @type ^`int`;
  #L50fb88.  v1:= v3.`kotlin.UByteArray$a.a` @type ^`byte`[] @kind object;
  #L50fb8c.  v2:= length @variable v1;
  #L50fb8e.  if v0 >= v2 then goto L50fba8;
  #L50fb92.  v2:= v0 + 1;
  #L50fb96.  v3.`kotlin.UByteArray$a.b` @type ^`int` := v2;
  #L50fb9a.  v0:= v1[v0] @kind byte;
  #L50fb9e.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByte;.constructor-impl:(B)B` @kind static;
  #L50fba4.  v0:= temp;
  #L50fba6.  return v0;
  #L50fba8.  v0:= new `java.util.NoSuchElementException`;
  #L50fbac.  v1:= v3.`kotlin.UByteArray$a.b` @type ^`int`;
  #L50fbb0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L50fbb6.  v1:= temp @kind object;
  #L50fbb8.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fbbe.  throw v0;
}
procedure `boolean` `hasNext`(`kotlin.UByteArray$a` v2 @kind this) @signature `Lkotlin/UByteArray$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50fb5c.  v0:= v2.`kotlin.UByteArray$a.b` @type ^`int`;
  #L50fb60.  v1:= v2.`kotlin.UByteArray$a.a` @type ^`byte`[] @kind object;
  #L50fb64.  v1:= length @variable v1;
  #L50fb66.  if v0 >= v1 then goto L50fb6e;
  #L50fb6a.  v0:= 1I;
  #L50fb6c.  goto L50fb70;
  #L50fb6e.  v0:= 0I;
  #L50fb70.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.UByteArray$a` v1 @kind this) @signature `Lkotlin/UByteArray$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50fbd0.  call temp:= `b`(v1) @signature `Lkotlin/UByteArray$a;.b:()B` @kind virtual;
  #L50fbd6.  v0:= temp;
  #L50fbd8.  call temp:= `box-impl`(v0) @signature `Lkotlin/UByte;.box-impl:(B)Lkotlin/UByte;` @kind static;
  #L50fbde.  v0:= temp @kind object;
  #L50fbe0.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.UByteArray$a` v2 @kind this) @signature `Lkotlin/UByteArray$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50fc1c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L50fc20.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L50fc24.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50fc2a.  throw v0;
}
