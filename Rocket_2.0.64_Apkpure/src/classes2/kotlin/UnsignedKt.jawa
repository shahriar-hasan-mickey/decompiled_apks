record `kotlin.UnsignedKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `doubleToUInt`(`double` v5 ) @signature `Lkotlin/UnsignedKt;.doubleToUInt:(D)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L511c4c.  call temp:= `isNaN`(v5) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L511c52.  v0:= temp;
  #L511c54.  v1:= -1I;
  #L511c56.  v2:= 0I;
  #L511c58.  if v0 == 0 then goto L511c60;
  #L511c5c.  v1:= 0I;
  #L511c5e.  goto L511cc8;
  #L511c60.  call temp:= `uintToDouble`(v2) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L511c66.  v3:= temp @kind wide;
  #L511c68.  v0:= dcmpg(v5, v3);
  #L511c6c.  if v0 > 0 then goto L511c72;
  #L511c70.  goto L511c5c;
  #L511c72.  call temp:= `uintToDouble`(v1) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L511c78.  v2:= temp @kind wide;
  #L511c7a.  v0:= dcmpl(v5, v2);
  #L511c7e.  if v0 < 0 then goto L511c84;
  #L511c82.  goto L511cc8;
  #L511c84.  v0:= 2.147483647E9D;
  #L511c8e.  v2:= dcmpg(v5, v0);
  #L511c92.  if v2 > 0 then goto L511ca2;
  #L511c96.  v5:= (`int`) v5 @kind d2i;
  #L511c98.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511c9e.  v1:= temp;
  #L511ca0.  goto L511cc8;
  #L511ca2.  v0:= 2147483647I;
  #L511ca8.  v1:= (`double`) v0 @kind i2d;
  #L511caa.  v5:= v5 - v1 @kind double;
  #L511cac.  v5:= (`int`) v5 @kind d2i;
  #L511cae.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511cb4.  v5:= temp;
  #L511cb6.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511cbc.  v6:= temp;
  #L511cbe.  v5:= v5 + v6 @kind int;
  #L511cc0.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511cc6.  v1:= temp;
  #L511cc8.  return v1;
}
procedure `long` `doubleToULong`(`double` v7 ) @signature `Lkotlin/UnsignedKt;.doubleToULong:(D)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L511e4c.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L511e52.  v0:= temp;
  #L511e54.  v1:= -1L;
  #L511e58.  v3:= 0L;
  #L511e5c.  if v0 == 0 then goto L511e64;
  #L511e60.  v1:= v3 @kind wide;
  #L511e62.  goto L511eba;
  #L511e64.  call temp:= `ulongToDouble`(v3) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L511e6a.  v5:= temp @kind wide;
  #L511e6c.  v0:= dcmpg(v7, v5);
  #L511e70.  if v0 > 0 then goto L511e76;
  #L511e74.  goto L511e60;
  #L511e76.  call temp:= `ulongToDouble`(v1) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L511e7c.  v3:= temp @kind wide;
  #L511e7e.  v0:= dcmpl(v7, v3);
  #L511e82.  if v0 < 0 then goto L511e88;
  #L511e86.  goto L511eba;
  #L511e88.  v0:= 9.223372036854776E18D;
  #L511e8c.  v2:= dcmpg(v7, v0);
  #L511e90.  if v2 >= 0 then goto L511ea0;
  #L511e94.  v7:= (`long`) v7 @kind d2l;
  #L511e96.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511e9c.  v1:= temp @kind wide;
  #L511e9e.  goto L511eba;
  #L511ea0.  v7:= v7 - v0 @kind double;
  #L511ea2.  v7:= (`long`) v7 @kind d2l;
  #L511ea4.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511eaa.  v7:= temp @kind wide;
  #L511eac.  v0:= -9223372036854775808L;
  #L511eb0.  v7:= v7 + v0 @kind long;
  #L511eb2.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511eb8.  v1:= temp @kind wide;
  #L511eba.  return v1 @kind wide;
}
procedure `int` `uintCompare`(`int` v1 , `int` v2 ) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L511cdc.  v0:= -2147483648I;
  #L511ce0.  v1:= v1 ^~ v0 @kind int;
  #L511ce2.  v2:= v2 ^~ v0 @kind int;
  #L511ce4.  call temp:= `compare`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L511cea.  v1:= temp;
  #L511cec.  return v1;
}
procedure `int` `uintDivide-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintDivide-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L511d00.  v0:= (`long`) v4 @kind i2l;
  #L511d02.  v2:= 4294967295L;
  #L511d0c.  v0:= v0 ^& v2 @kind long;
  #L511d0e.  v4:= (`long`) v5 @kind i2l;
  #L511d10.  v4:= v4 ^& v2 @kind long;
  #L511d12.  v0:= v0 / v4 @kind long;
  #L511d14.  v4:= (`int`) v0 @kind l2i;
  #L511d16.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511d1c.  v4:= temp;
  #L511d1e.  return v4;
}
procedure `int` `uintRemainder-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L511d30.  v0:= (`long`) v4 @kind i2l;
  #L511d32.  v2:= 4294967295L;
  #L511d3c.  v0:= v0 ^& v2 @kind long;
  #L511d3e.  v4:= (`long`) v5 @kind i2l;
  #L511d40.  v4:= v4 ^& v2 @kind long;
  #L511d42.  v0:= v0 %% v4 @kind long;
  #L511d44.  v4:= (`int`) v0 @kind l2i;
  #L511d46.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L511d4c.  v4:= temp;
  #L511d4e.  return v4;
}
procedure `double` `uintToDouble`(`int` v6 ) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L511bec.  v0:= 2147483647I;
  #L511bf2.  v0:= v0 ^& v6 @kind int;
  #L511bf4.  v0:= (`double`) v0 @kind i2d;
  #L511bf6.  v6:= v6 ^>> 31;
  #L511bfa.  v6:= v6 ^< 30;
  #L511bfe.  v2:= (`double`) v6 @kind i2d;
  #L511c00.  v6:= 2I;
  #L511c02.  v4:= (`double`) v6 @kind i2d;
  #L511c04.  v2:= v2 * v4 @kind double;
  #L511c08.  v0:= v0 + v2 @kind double;
  #L511c0a.  return v0 @kind wide;
}
procedure `int` `ulongCompare`(`long` v2 , `long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L511d60.  v0:= -9223372036854775808L;
  #L511d64.  v2:= v2 ^~ v0 @kind long;
  #L511d66.  v4:= v4 ^~ v0 @kind long;
  #L511d68.  call temp:= `compare`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(JJ)I` @kind static;
  #L511d6e.  v2:= temp;
  #L511d70.  return v2;
}
procedure `long` `ulongDivide-eb3DHEI`(`long` v5 , `long` v7 ) @signature `Lkotlin/UnsignedKt;.ulongDivide-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L511ecc.  v0:= 0L;
  #L511ed0.  v2:= lcmp(v7, v0);
  #L511ed4.  if v2 >= 0 then goto L511efc;
  #L511ed8.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L511ede.  v5:= temp;
  #L511ee0.  if v5 >= 0 then goto L511eee;
  #L511ee4.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511eea.  v5:= temp @kind wide;
  #L511eec.  goto L511efa;
  #L511eee.  v5:= 1L;
  #L511ef2.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511ef8.  v5:= temp @kind wide;
  #L511efa.  return v5 @kind wide;
  #L511efc.  v2:= lcmp(v5, v0);
  #L511f00.  if v2 < 0 then goto L511f10;
  #L511f04.  v5:= v5 / v7 @kind long;
  #L511f06.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f0c.  v5:= temp @kind wide;
  #L511f0e.  return v5 @kind wide;
  #L511f10.  v0:= 1I;
  #L511f12.  v1:= v5 ^>> v0 @kind long;
  #L511f16.  v1:= v1 / v7 @kind long;
  #L511f18.  v1:= v1 ^< v0 @kind long;
  #L511f1a.  v3:= v1 * v7 @kind long;
  #L511f1e.  v5:= v5 - v3 @kind long;
  #L511f20.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f26.  v5:= temp @kind wide;
  #L511f28.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f2e.  v7:= temp @kind wide;
  #L511f30.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L511f36.  v5:= temp;
  #L511f38.  if v5 < 0 then goto L511f3e;
  #L511f3c.  goto L511f40;
  #L511f3e.  v0:= 0I;
  #L511f40.  v5:= (`long`) v0 @kind i2l;
  #L511f42.  v1:= v1 + v5 @kind long;
  #L511f44.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f4a.  v5:= temp @kind wide;
  #L511f4c.  return v5 @kind wide;
}
procedure `long` `ulongRemainder-eb3DHEI`(`long` v6 , `long` v8 ) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L511f60.  v0:= 0L;
  #L511f64.  v2:= lcmp(v8, v0);
  #L511f68.  if v2 >= 0 then goto L511f86;
  #L511f6c.  call temp:= `ulongCompare`(v6, v8) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L511f72.  v0:= temp;
  #L511f74.  if v0 >= 0 then goto L511f7a;
  #L511f78.  goto L511f84;
  #L511f7a.  v6:= v6 - v8 @kind long;
  #L511f7c.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f82.  v6:= temp @kind wide;
  #L511f84.  return v6 @kind wide;
  #L511f86.  v2:= lcmp(v6, v0);
  #L511f8a.  if v2 < 0 then goto L511f9a;
  #L511f8e.  v6:= v6 %% v8 @kind long;
  #L511f90.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511f96.  v6:= temp @kind wide;
  #L511f98.  return v6 @kind wide;
  #L511f9a.  v2:= 1I;
  #L511f9c.  v3:= v6 ^>> v2 @kind long;
  #L511fa0.  v3:= v3 / v8 @kind long;
  #L511fa2.  v2:= v3 ^< v2 @kind long;
  #L511fa6.  v2:= v2 * v8 @kind long;
  #L511faa.  v6:= v6 - v2 @kind long;
  #L511fac.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511fb2.  v2:= temp @kind wide;
  #L511fb4.  call temp:= `constructor-impl`(v8) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511fba.  v4:= temp @kind wide;
  #L511fbc.  call temp:= `ulongCompare`(v2, v4) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L511fc2.  v2:= temp;
  #L511fc4.  if v2 < 0 then goto L511fca;
  #L511fc8.  goto L511fcc;
  #L511fca.  v8:= v0 @kind wide;
  #L511fcc.  v6:= v6 - v8 @kind long;
  #L511fce.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L511fd4.  v6:= temp @kind wide;
  #L511fd6.  return v6 @kind wide;
}
procedure `double` `ulongToDouble`(`long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L511c1c.  v0:= 11I;
  #L511c20.  v0:= v4 ^>> v0 @kind long;
  #L511c24.  v0:= (`double`) v0 @kind l2d;
  #L511c26.  v2:= 2048I;
  #L511c2a.  v2:= (`double`) v2 @kind i2d;
  #L511c2c.  v0:= v0 * v2 @kind double;
  #L511c30.  v2:= 2047L;
  #L511c34.  v4:= v4 ^& v2 @kind long;
  #L511c36.  v4:= (`double`) v4 @kind l2d;
  #L511c38.  v0:= v0 + v4 @kind double;
  #L511c3a.  return v0 @kind wide;
}
procedure `java.lang.String` `ulongToString`(`long` v1 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L511d84.  v0:= 10I;
  #L511d88.  call temp:= `ulongToString`(v1, v0) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @kind static;
  #L511d8e.  v1:= temp @kind object;
  #L511d90.  return v1 @kind object;
}
procedure `java.lang.String` `ulongToString`(`long` v8 , `int` v10 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L511da4.  v0:= "toString(this, checkRadix(radix))" @kind object;
  #L511da8.  v1:= 0L;
  #L511dac.  v3:= lcmp(v8, v1);
  #L511db0.  if v3 < 0 then goto L511dcc;
  #L511db4.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L511dba.  v10:= temp;
  #L511dbc.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L511dc2.  v8:= temp @kind object;
  #L511dc4.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L511dca.  return v8 @kind object;
  #L511dcc.  v1:= 1I;
  #L511dce.  v2:= v8 ^>> v1 @kind long;
  #L511dd2.  v4:= (`long`) v10 @kind i2l;
  #L511dd4.  v2:= v2 / v4 @kind long;
  #L511dd6.  v1:= v2 ^< v1 @kind long;
  #L511dda.  v6:= v1 * v4 @kind long;
  #L511dde.  v8:= v8 - v6 @kind long;
  #L511de0.  v3:= lcmp(v8, v4);
  #L511de4.  if v3 < 0 then goto L511df0;
  #L511de8.  v8:= v8 - v4 @kind long;
  #L511dea.  v3:= 1L;
  #L511dee.  v1:= v1 + v3 @kind long;
  #L511df0.  v3:= new `java.lang.StringBuilder`;
  #L511df4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L511dfa.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L511e00.  v4:= temp;
  #L511e02.  call temp:= `toString`(v1, v4) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L511e08.  v1:= temp @kind object;
  #L511e0a.  call `checkNotNullExpressionValue`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L511e10.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L511e16.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L511e1c.  v10:= temp;
  #L511e1e.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L511e24.  v8:= temp @kind object;
  #L511e26.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L511e2c.  call temp:= `append`(v3, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L511e32.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L511e38.  v8:= temp @kind object;
  #L511e3a.  return v8 @kind object;
}
