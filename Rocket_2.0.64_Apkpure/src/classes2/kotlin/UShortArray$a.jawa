record `kotlin.UShortArray$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `short`[] `kotlin.UShortArray$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.UShortArray$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.UShortArray$a` v1 @kind this, `short`[] v2 @kind object) @signature `Lkotlin/UShortArray$a;.<init>:([S)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L51135c.  v0:= "array" @kind object;
  #L511360.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L511366.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L51136c.  v1.`kotlin.UShortArray$a.a` @type ^`short`[] := v2 @kind object;
  #L511370.  return @kind void;
}
procedure `short` `b`(`kotlin.UShortArray$a` v3 @kind this) @signature `Lkotlin/UShortArray$a;.b:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L511310.  v0:= v3.`kotlin.UShortArray$a.b` @type ^`int`;
  #L511314.  v1:= v3.`kotlin.UShortArray$a.a` @type ^`short`[] @kind object;
  #L511318.  v2:= length @variable v1;
  #L51131a.  if v0 >= v2 then goto L511334;
  #L51131e.  v2:= v0 + 1;
  #L511322.  v3.`kotlin.UShortArray$a.b` @type ^`int` := v2;
  #L511326.  v0:= v1[v0] @kind short;
  #L51132a.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShort;.constructor-impl:(S)S` @kind static;
  #L511330.  v0:= temp;
  #L511332.  return v0;
  #L511334.  v0:= new `java.util.NoSuchElementException`;
  #L511338.  v1:= v3.`kotlin.UShortArray$a.b` @type ^`int`;
  #L51133c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L511342.  v1:= temp @kind object;
  #L511344.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L51134a.  throw v0;
}
procedure `boolean` `hasNext`(`kotlin.UShortArray$a` v2 @kind this) @signature `Lkotlin/UShortArray$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5112c4.  v0:= v2.`kotlin.UShortArray$a.b` @type ^`int`;
  #L5112c8.  v1:= v2.`kotlin.UShortArray$a.a` @type ^`short`[] @kind object;
  #L5112cc.  v1:= length @variable v1;
  #L5112ce.  if v0 >= v1 then goto L5112d6;
  #L5112d2.  v0:= 1I;
  #L5112d4.  goto L5112d8;
  #L5112d6.  v0:= 0I;
  #L5112d8.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.UShortArray$a` v1 @kind this) @signature `Lkotlin/UShortArray$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L5112ec.  call temp:= `b`(v1) @signature `Lkotlin/UShortArray$a;.b:()S` @kind virtual;
  #L5112f2.  v0:= temp;
  #L5112f4.  call temp:= `box-impl`(v0) @signature `Lkotlin/UShort;.box-impl:(S)Lkotlin/UShort;` @kind static;
  #L5112fa.  v0:= temp @kind object;
  #L5112fc.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.UShortArray$a` v2 @kind this) @signature `Lkotlin/UShortArray$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L511384.  v0:= new `java.lang.UnsupportedOperationException`;
  #L511388.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L51138c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L511392.  throw v0;
}
