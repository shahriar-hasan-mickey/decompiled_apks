record `kotlin.UIntArray$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int`[] `kotlin.UIntArray$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.UIntArray$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.UIntArray$a` v1 @kind this, `int`[] v2 @kind object) @signature `Lkotlin/UIntArray$a;.<init>:([I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5103ac.  v0:= "array" @kind object;
  #L5103b0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5103b6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5103bc.  v1.`kotlin.UIntArray$a.a` @type ^`int`[] := v2 @kind object;
  #L5103c0.  return @kind void;
}
procedure `int` `b`(`kotlin.UIntArray$a` v3 @kind this) @signature `Lkotlin/UIntArray$a;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L51033c.  v0:= v3.`kotlin.UIntArray$a.b` @type ^`int`;
  #L510340.  v1:= v3.`kotlin.UIntArray$a.a` @type ^`int`[] @kind object;
  #L510344.  v2:= length @variable v1;
  #L510346.  if v0 >= v2 then goto L510360;
  #L51034a.  v2:= v0 + 1;
  #L51034e.  v3.`kotlin.UIntArray$a.b` @type ^`int` := v2;
  #L510352.  v0:= v1[v0];
  #L510356.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L51035c.  v0:= temp;
  #L51035e.  return v0;
  #L510360.  v0:= new `java.util.NoSuchElementException`;
  #L510364.  v1:= v3.`kotlin.UIntArray$a.b` @type ^`int`;
  #L510368.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L51036e.  v1:= temp @kind object;
  #L510370.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510376.  throw v0;
}
procedure `boolean` `hasNext`(`kotlin.UIntArray$a` v2 @kind this) @signature `Lkotlin/UIntArray$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L510314.  v0:= v2.`kotlin.UIntArray$a.b` @type ^`int`;
  #L510318.  v1:= v2.`kotlin.UIntArray$a.a` @type ^`int`[] @kind object;
  #L51031c.  v1:= length @variable v1;
  #L51031e.  if v0 >= v1 then goto L510326;
  #L510322.  v0:= 1I;
  #L510324.  goto L510328;
  #L510326.  v0:= 0I;
  #L510328.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.UIntArray$a` v1 @kind this) @signature `Lkotlin/UIntArray$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L510388.  call temp:= `b`(v1) @signature `Lkotlin/UIntArray$a;.b:()I` @kind virtual;
  #L51038e.  v0:= temp;
  #L510390.  call temp:= `box-impl`(v0) @signature `Lkotlin/UInt;.box-impl:(I)Lkotlin/UInt;` @kind static;
  #L510396.  v0:= temp @kind object;
  #L510398.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.UIntArray$a` v2 @kind this) @signature `Lkotlin/UIntArray$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5103d4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L5103d8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L5103dc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5103e2.  throw v0;
}
