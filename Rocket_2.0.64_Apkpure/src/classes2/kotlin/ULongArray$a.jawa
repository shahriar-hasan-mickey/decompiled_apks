record `kotlin.ULongArray$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long`[] `kotlin.ULongArray$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ULongArray$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ULongArray$a` v1 @kind this, `long`[] v2 @kind object) @signature `Lkotlin/ULongArray$a;.<init>:([J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L510b64.  v0:= "array" @kind object;
  #L510b68.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L510b6e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L510b74.  v1.`kotlin.ULongArray$a.a` @type ^`long`[] := v2 @kind object;
  #L510b78.  return @kind void;
}
procedure `long` `b`(`kotlin.ULongArray$a` v3 @kind this) @signature `Lkotlin/ULongArray$a;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L510b18.  v0:= v3.`kotlin.ULongArray$a.b` @type ^`int`;
  #L510b1c.  v1:= v3.`kotlin.ULongArray$a.a` @type ^`long`[] @kind object;
  #L510b20.  v2:= length @variable v1;
  #L510b22.  if v0 >= v2 then goto L510b3c;
  #L510b26.  v2:= v0 + 1;
  #L510b2a.  v3.`kotlin.ULongArray$a.b` @type ^`int` := v2;
  #L510b2e.  v0:= v1[v0] @kind wide;
  #L510b32.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L510b38.  v0:= temp @kind wide;
  #L510b3a.  return v0 @kind wide;
  #L510b3c.  v0:= new `java.util.NoSuchElementException`;
  #L510b40.  v1:= v3.`kotlin.ULongArray$a.b` @type ^`int`;
  #L510b44.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L510b4a.  v1:= temp @kind object;
  #L510b4c.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510b52.  throw v0;
}
procedure `boolean` `hasNext`(`kotlin.ULongArray$a` v2 @kind this) @signature `Lkotlin/ULongArray$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L510acc.  v0:= v2.`kotlin.ULongArray$a.b` @type ^`int`;
  #L510ad0.  v1:= v2.`kotlin.ULongArray$a.a` @type ^`long`[] @kind object;
  #L510ad4.  v1:= length @variable v1;
  #L510ad6.  if v0 >= v1 then goto L510ade;
  #L510ada.  v0:= 1I;
  #L510adc.  goto L510ae0;
  #L510ade.  v0:= 0I;
  #L510ae0.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.ULongArray$a` v2 @kind this) @signature `Lkotlin/ULongArray$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L510af4.  call temp:= `b`(v2) @signature `Lkotlin/ULongArray$a;.b:()J` @kind virtual;
  #L510afa.  v0:= temp @kind wide;
  #L510afc.  call temp:= `box-impl`(v0) @signature `Lkotlin/ULong;.box-impl:(J)Lkotlin/ULong;` @kind static;
  #L510b02.  v0:= temp @kind object;
  #L510b04.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.ULongArray$a` v2 @kind this) @signature `Lkotlin/ULongArray$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L510b8c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L510b90.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L510b94.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L510b9a.  throw v0;
}
