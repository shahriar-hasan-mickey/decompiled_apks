record `com.google.android.datatransport.runtime.dagger.internal.DoubleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface, `com.google.android.datatransport.runtime.dagger.Lazy` @kind interface {
  `javax.inject.Provider` `com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L287a98.  v0:= new `java.lang.Object`;
  #L287a9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L287aa2.  `@@com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` := v0 @kind object;
  #L287aa6.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L287ab8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L287abe.  v0:= `@@com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L287ac2.  v1.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L287ac6.  v1.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L287aca.  return @kind void;
}
procedure `com.google.android.datatransport.runtime.dagger.Lazy` `lazy`(`javax.inject.Provider` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.lazy:(Ljavax/inject/Provider;)Lcom/google/android/datatransport/runtime/dagger/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L287958.  v0:= instanceof @variable v1 @type ^`com.google.android.datatransport.runtime.dagger.Lazy` @kind boolean;
  #L28795c.  if v0 == 0 then goto L287966;
  #L287960.  v1:= (`com.google.android.datatransport.runtime.dagger.Lazy`) v1 @kind object;
  #L287964.  return v1 @kind object;
  #L287966.  v0:= new `com.google.android.datatransport.runtime.dagger.internal.DoubleCheck`;
  #L28796a.  call temp:= `checkNotNull`(v1) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L287970.  v1:= temp @kind object;
  #L287972.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L287976.  call `<init>`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L28797c.  return v0 @kind object;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L287a6c.  call temp:= `checkNotNull`(v1) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L287a72.  v0:= instanceof @variable v1 @type ^`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck` @kind boolean;
  #L287a76.  if v0 == 0 then goto L287a7c;
  #L287a7a.  return v1 @kind object;
  #L287a7c.  v0:= new `com.google.android.datatransport.runtime.dagger.internal.DoubleCheck`;
  #L287a80.  call `<init>`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L287a86.  return v0 @kind object;
}
procedure `java.lang.Object` `reentrantCheck`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2879f0.  v0:= `@@com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L2879f4.  if v3 == v0 then goto L287a04;
  #L2879f8.  v0:= instanceof @variable v3 @type ^`com.google.android.datatransport.runtime.dagger.internal.MemoizedSentinel` @kind boolean;
  #L2879fc.  if v0 != 0 then goto L287a04;
  #L287a00.  v0:= 1I;
  #L287a02.  goto L287a06;
  #L287a04.  v0:= 0I;
  #L287a06.  if v0 == 0 then goto L287a58;
  #L287a0a.  if v3 != v4 then goto L287a10;
  #L287a0e.  goto L287a58;
  #L287a10.  v0:= new `java.lang.IllegalStateException`;
  #L287a14.  v1:= new `java.lang.StringBuilder`;
  #L287a18.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L287a1e.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L287a22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287a28.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287a2e.  v3:= " & " @kind object;
  #L287a32.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287a38.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287a3e.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L287a42.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L287a48.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L287a4e.  v3:= temp @kind object;
  #L287a50.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287a56.  throw v0;
  #L287a58.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck` v2 @kind this) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L287990.  v0:= v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L287994.  v1:= `@@com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L287998.  if v0 != v1 then goto L2879d2;
  #L28799c.  @monitorenter v2
  #L28799e.  v0:= v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L2879a2.  if v0 != v1 then goto L2879c8;
  #L2879a6.  v0:= v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` @kind object;
  #L2879aa.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2879b0.  v0:= temp @kind object;
  #L2879b2.  v1:= v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L2879b6.  call temp:= `reentrantCheck`(v1, v0) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/DoubleCheck;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2879bc.  v1:= temp @kind object;
  #L2879be.  v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2879c2.  v1:= 0I;
  #L2879c4.  v2.`com.google.android.datatransport.runtime.dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L2879c8.  @monitorexit v2
  #L2879ca.  goto L2879d2;
  #L2879cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2879ce.  @monitorexit v2
  #L2879d0.  throw v0;
  #L2879d2.  return v0 @kind object;
  catch `java.lang.Throwable` @[L28799e..L2879d0] goto L2879cc;
}
