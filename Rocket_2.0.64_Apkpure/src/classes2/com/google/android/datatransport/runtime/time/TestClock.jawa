record `com.google.android.datatransport.runtime.time.TestClock` @kind class @AccessFlag PUBLIC extends `com.google.android.datatransport.runtime.time.Clock` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `com.google.android.datatransport.runtime.time.TestClock.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.time.TestClock` v1 @kind this, `long` v2 ) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28e868.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28e86e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L28e872.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L28e878.  v1.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L28e87c.  return @kind void;
}
procedure `void` `advance`(`com.google.android.datatransport.runtime.time.TestClock` v3 @kind this, `long` v4 ) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.advance:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e890.  v0:= 0L;
  #L28e894.  v2:= lcmp(v4, v0);
  #L28e898.  if v2 < 0 then goto L28e8a8;
  #L28e89c.  v0:= v3.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28e8a0.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L28e8a6.  return @kind void;
  #L28e8a8.  v4:= new `java.lang.IllegalArgumentException`;
  #L28e8ac.  v5:= "cannot advance time backwards." @kind object;
  #L28e8b0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28e8b6.  throw v4;
}
procedure `long` `getTime`(`com.google.android.datatransport.runtime.time.TestClock` v2 @kind this) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.getTime:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e848.  v0:= v2.`com.google.android.datatransport.runtime.time.TestClock.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28e84c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28e852.  v0:= temp @kind wide;
  #L28e854.  return v0 @kind wide;
}
procedure `void` `tick`(`com.google.android.datatransport.runtime.time.TestClock` v2 @kind this) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.tick:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e8c8.  v0:= 1L;
  #L28e8cc.  call `advance`(v2, v0) @signature `Lcom/google/android/datatransport/runtime/time/TestClock;.advance:(J)V` @kind virtual;
  #L28e8d2.  return @kind void;
}
