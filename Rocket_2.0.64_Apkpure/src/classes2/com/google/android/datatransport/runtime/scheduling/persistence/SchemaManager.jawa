record `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` @kind class @AccessFlag FINAL extends `android.database.sqlite.SQLiteOpenHelper` @kind class {
  `int` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.d` @AccessFlag STATIC;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28e49c.  v0:= new `java.lang.StringBuilder`;
  #L28e4a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28e4a6.  v1:= "INSERT INTO global_log_event_state VALUES (" @kind object;
  #L28e4aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e4b0.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L28e4b6.  v1:= temp @kind wide;
  #L28e4b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e4be.  v1:= ")" @kind object;
  #L28e4c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e4c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28e4ce.  v0:= temp @kind object;
  #L28e4d0.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.c` @type ^`java.lang.String` := v0 @kind object;
  #L28e4d4.  v0:= 5I;
  #L28e4d6.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.d` @type ^`int` := v0;
  #L28e4da.  v1:= `@@com.google.android.datatransport.runtime.scheduling.persistence.i0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.i0` @kind object;
  #L28e4de.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.e` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v1 @kind object;
  #L28e4e2.  v2:= `@@com.google.android.datatransport.runtime.scheduling.persistence.f0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.f0` @kind object;
  #L28e4e6.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.f` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v2 @kind object;
  #L28e4ea.  v3:= `@@com.google.android.datatransport.runtime.scheduling.persistence.g0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.g0` @kind object;
  #L28e4ee.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.g` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v3 @kind object;
  #L28e4f2.  v4:= `@@com.google.android.datatransport.runtime.scheduling.persistence.h0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.h0` @kind object;
  #L28e4f6.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.h` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v4 @kind object;
  #L28e4fa.  v5:= `@@com.google.android.datatransport.runtime.scheduling.persistence.j0.a` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.j0` @kind object;
  #L28e4fe.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.i` @type ^`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration` := v5 @kind object;
  #L28e502.  v0:= new `com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`[v0];
  #L28e506.  v6:= 0I;
  #L28e508.  v0[v6]:= v1 @kind object;
  #L28e50c.  v1:= 1I;
  #L28e50e.  v0[v1]:= v2 @kind object;
  #L28e512.  v1:= 2I;
  #L28e514.  v0[v1]:= v3 @kind object;
  #L28e518.  v1:= 3I;
  #L28e51a.  v0[v1]:= v4 @kind object;
  #L28e51e.  v1:= 4I;
  #L28e520.  v0[v1]:= v5 @kind object;
  #L28e524.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L28e52a.  v0:= temp @kind object;
  #L28e52c.  `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.j` @type ^`java.util.List` := v0 @kind object;
  #L28e530.  return @kind void;
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.content.Context` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.<init>:(Landroid/content/Context;Ljava/lang/String;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L28e544.  v0:= 0I;
  #L28e546.  call `<init>`(v1, v2, v3, v0, v4) @signature `Landroid/database/sqlite/SQLiteOpenHelper;.<init>:(Landroid/content/Context;Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)V` @kind direct;
  #L28e54c.  v2:= 0I;
  #L28e54e.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` := v2 @kind boolean;
  #L28e552.  v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @type ^`int` := v4;
  #L28e556.  return @kind void;
}
procedure `void` `a`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.a:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L28e424.  call `h`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.h:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L28e42a.  return @kind void;
}
procedure `void` `b`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.b:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L28e43c.  call `i`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.i:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L28e442.  return @kind void;
}
procedure `void` `c`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.c:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L28e454.  call `j`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.j:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L28e45a.  return @kind void;
}
procedure `void` `d`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.d:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L28e46c.  call `g`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L28e472.  return @kind void;
}
procedure `void` `e`(`android.database.sqlite.SQLiteDatabase` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.e:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L28e484.  call `k`(v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.k:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind static;
  #L28e48a.  return @kind void;
}
procedure `void` `f`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28e568.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` @kind boolean;
  #L28e56c.  if v0 != 0 then goto L28e576;
  #L28e570.  call `onConfigure`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind virtual;
  #L28e576.  return @kind void;
}
procedure `void` `g`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.g:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L28e588.  v0:= "CREATE TABLE events (_id INTEGER PRIMARY KEY, context_id INTEGER NOT NULL, transport_name TEXT NOT NULL, timestamp_ms INTEGER NOT NULL, uptime_ms INTEGER NOT NULL, payload BLOB NOT NULL, code INTEGER, num_attempts INTEGER NOT NULL,FOREIGN KEY (context_id) REFERENCES transport_contexts(_id) ON DELETE CASCADE)" @kind object;
  #L28e58c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e592.  v0:= "CREATE TABLE event_metadata (_id INTEGER PRIMARY KEY, event_id INTEGER NOT NULL, name TEXT NOT NULL, value TEXT NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE)" @kind object;
  #L28e596.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e59c.  v0:= "CREATE TABLE transport_contexts (_id INTEGER PRIMARY KEY, backend_name TEXT NOT NULL, priority INTEGER NOT NULL, next_request_ms INTEGER NOT NULL)" @kind object;
  #L28e5a0.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5a6.  v0:= "CREATE INDEX events_backend_id on events(context_id)" @kind object;
  #L28e5aa.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5b0.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority on transport_contexts(backend_name, priority)" @kind object;
  #L28e5b4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5ba.  return @kind void;
}
procedure `void` `h`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.h:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L28e5cc.  v0:= "ALTER TABLE transport_contexts ADD COLUMN extras BLOB" @kind object;
  #L28e5d0.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5d6.  v0:= "CREATE UNIQUE INDEX contexts_backend_priority_extras on transport_contexts(backend_name, priority, extras)" @kind object;
  #L28e5da.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5e0.  v0:= "DROP INDEX contexts_backend_priority" @kind object;
  #L28e5e4.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e5ea.  return @kind void;
}
procedure `void` `i`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.i:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L28e5fc.  v0:= "ALTER TABLE events ADD COLUMN payload_encoding TEXT" @kind object;
  #L28e600.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e606.  return @kind void;
}
procedure `void` `j`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.j:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L28e618.  v0:= "ALTER TABLE events ADD COLUMN inline BOOLEAN NOT NULL DEFAULT 1" @kind object;
  #L28e61c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e622.  v0:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L28e626.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e62c.  v0:= "CREATE TABLE event_payloads (sequence_num INTEGER NOT NULL, event_id INTEGER NOT NULL, bytes BLOB NOT NULL,FOREIGN KEY (event_id) REFERENCES events(_id) ON DELETE CASCADE,PRIMARY KEY (sequence_num, event_id))" @kind object;
  #L28e630.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e636.  return @kind void;
}
procedure `void` `k`(`android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.k:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;
    v0;

  #L28e648.  v0:= "DROP TABLE IF EXISTS log_event_dropped" @kind object;
  #L28e64c.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e652.  v0:= "DROP TABLE IF EXISTS global_log_event_state" @kind object;
  #L28e656.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e65c.  v0:= "CREATE TABLE log_event_dropped (log_source VARCHAR(45) NOT NULL,reason INTEGER NOT NULL,events_dropped_count BIGINT NOT NULL,PRIMARY KEY(log_source, reason))" @kind object;
  #L28e660.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e666.  v0:= "CREATE TABLE global_log_event_state (last_metrics_upload_ms BIGINT PRIMARY KEY)" @kind object;
  #L28e66a.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e670.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.c` @type ^`java.lang.String` @kind object;
  #L28e674.  call `execSQL`(v1, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e67a.  return @kind void;
}
procedure `void` `l`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object, `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.l:(Landroid/database/sqlite/SQLiteDatabase;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28e6e0.  call `f`(v1, v2) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L28e6e6.  v0:= 0I;
  #L28e6e8.  call `m`(v1, v2, v0, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.m:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L28e6ee.  return @kind void;
}
procedure `void` `m`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.m:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28e78c.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.j` @type ^`java.util.List` @kind object;
  #L28e790.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L28e796.  v1:= temp;
  #L28e798.  if v6 > v1 then goto L28e7be;
  #L28e79c.  if v5 >= v6 then goto L28e7bc;
  #L28e7a0.  v0:= `@@com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.j` @type ^`java.util.List` @kind object;
  #L28e7a4.  call temp:= `get`(v0, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L28e7aa.  v0:= temp @kind object;
  #L28e7ac.  v0:= (`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager$Migration`) v0 @kind object;
  #L28e7b0.  call `upgrade`(v0, v4) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager$Migration;.upgrade:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind interface;
  #L28e7b6.  v5:= v5 + 1;
  #L28e7ba.  goto L28e79c;
  #L28e7bc.  return @kind void;
  #L28e7be.  v4:= new `java.lang.IllegalArgumentException`;
  #L28e7c2.  v1:= new `java.lang.StringBuilder`;
  #L28e7c6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28e7cc.  v2:= "Migration from " @kind object;
  #L28e7d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e7d6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e7dc.  v5:= " to " @kind object;
  #L28e7e0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e7e6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e7ec.  v5:= " was requested, but cannot be performed. Only " @kind object;
  #L28e7f0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e7f6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L28e7fc.  v5:= temp;
  #L28e7fe.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e804.  v5:= " migrations are provided" @kind object;
  #L28e808.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e80e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28e814.  v5:= temp @kind object;
  #L28e816.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28e81c.  throw v4;
}
procedure `void` `onConfigure`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v3 @kind this, `android.database.sqlite.SQLiteDatabase` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onConfigure:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e68c.  v0:= 1I;
  #L28e68e.  v3.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.b` @type ^`boolean` := v0 @kind boolean;
  #L28e692.  v1:= 0I;
  #L28e694.  v1:= new `java.lang.String`[v1];
  #L28e698.  v2:= "PRAGMA busy_timeout=0;" @kind object;
  #L28e69c.  call temp:= `rawQuery`(v4, v2, v1) @signature `Landroid/database/sqlite/SQLiteDatabase;.rawQuery:(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;` @kind virtual;
  #L28e6a2.  v1:= temp @kind object;
  #L28e6a4.  call `close`(v1) @signature `Landroid/database/Cursor;.close:()V` @kind interface;
  #L28e6aa.  call `setForeignKeyConstraintsEnabled`(v4, v0) @signature `Landroid/database/sqlite/SQLiteDatabase;.setForeignKeyConstraintsEnabled:(Z)V` @kind virtual;
  #L28e6b0.  return @kind void;
}
procedure `void` `onCreate`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v1 @kind this, `android.database.sqlite.SQLiteDatabase` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onCreate:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e6c4.  v0:= v1.`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager.a` @type ^`int`;
  #L28e6c8.  call `l`(v1, v2, v0) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.l:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L28e6ce.  return @kind void;
}
procedure `void` `onDowngrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onDowngrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L28e700.  v2:= "DROP TABLE events" @kind object;
  #L28e704.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e70a.  v2:= "DROP TABLE event_metadata" @kind object;
  #L28e70e.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e714.  v2:= "DROP TABLE transport_contexts" @kind object;
  #L28e718.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e71e.  v2:= "DROP TABLE IF EXISTS event_payloads" @kind object;
  #L28e722.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e728.  v2:= "DROP TABLE IF EXISTS log_event_dropped" @kind object;
  #L28e72c.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e732.  v2:= "DROP TABLE IF EXISTS global_log_event_state" @kind object;
  #L28e736.  call `execSQL`(v1, v2) @signature `Landroid/database/sqlite/SQLiteDatabase;.execSQL:(Ljava/lang/String;)V` @kind virtual;
  #L28e73c.  call `l`(v0, v1, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.l:(Landroid/database/sqlite/SQLiteDatabase;I)V` @kind direct;
  #L28e742.  return @kind void;
}
procedure `void` `onOpen`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onOpen:(Landroid/database/sqlite/SQLiteDatabase;)V` @AccessFlag PUBLIC {
    temp;

  #L28e754.  call `f`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L28e75a.  return @kind void;
}
procedure `void` `onUpgrade`(`com.google.android.datatransport.runtime.scheduling.persistence.SchemaManager` v0 @kind this, `android.database.sqlite.SQLiteDatabase` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.onUpgrade:(Landroid/database/sqlite/SQLiteDatabase;II)V` @AccessFlag PUBLIC {
    temp;

  #L28e76c.  call `f`(v0, v1) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.f:(Landroid/database/sqlite/SQLiteDatabase;)V` @kind direct;
  #L28e772.  call `m`(v0, v1, v2, v3) @signature `Lcom/google/android/datatransport/runtime/scheduling/persistence/SchemaManager;.m:(Landroid/database/sqlite/SQLiteDatabase;II)V` @kind direct;
  #L28e778.  return @kind void;
}
