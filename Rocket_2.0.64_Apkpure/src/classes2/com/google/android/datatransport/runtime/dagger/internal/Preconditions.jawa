record `com.google.android.datatransport.runtime.dagger.internal.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.android.datatransport.runtime.dagger.internal.Preconditions` v0 @kind this) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L288138.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28813e.  return @kind void;
}
procedure `void` `checkBuilderRequirement`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkBuilderRequirement:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L288150.  if v1 == 0 then goto L288156;
  #L288154.  return @kind void;
  #L288156.  v1:= new `java.lang.IllegalStateException`;
  #L28815a.  v0:= new `java.lang.StringBuilder`;
  #L28815e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L288164.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L28816a.  v2:= temp @kind object;
  #L28816c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L288172.  v2:= " must be set" @kind object;
  #L288176.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28817c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L288182.  v2:= temp @kind object;
  #L288184.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28818a.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L28807c.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L288082.  return v0 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L288094.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28809a.  return v0 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/google/android/datatransport/runtime/dagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2880ac.  if v2 != 0 then goto L288126;
  #L2880b0.  v2:= "%s" @kind object;
  #L2880b4.  call temp:= `contains`(v3, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L2880ba.  v0:= temp;
  #L2880bc.  if v0 == 0 then goto L288116;
  #L2880c0.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L2880c6.  v0:= temp;
  #L2880c8.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L2880ce.  v1:= temp;
  #L2880d0.  if v0 != v1 then goto L288106;
  #L2880d4.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L2880d8.  if v0 == 0 then goto L2880ea;
  #L2880dc.  v4:= (`java.lang.Class`) v4 @kind object;
  #L2880e0.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L2880e6.  v4:= temp @kind object;
  #L2880e8.  goto L2880f2;
  #L2880ea.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2880f0.  v4:= temp @kind object;
  #L2880f2.  v0:= new `java.lang.NullPointerException`;
  #L2880f6.  call temp:= `replace`(v3, v2, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L2880fc.  v2:= temp @kind object;
  #L2880fe.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L288104.  throw v0;
  #L288106.  v2:= new `java.lang.IllegalArgumentException`;
  #L28810a.  v3:= "errorMessageTemplate has more than one format specifier" @kind object;
  #L28810e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L288114.  throw v2;
  #L288116.  v2:= new `java.lang.IllegalArgumentException`;
  #L28811a.  v3:= "errorMessageTemplate has no format specifiers" @kind object;
  #L28811e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L288124.  throw v2;
  #L288126.  return v2 @kind object;
}
