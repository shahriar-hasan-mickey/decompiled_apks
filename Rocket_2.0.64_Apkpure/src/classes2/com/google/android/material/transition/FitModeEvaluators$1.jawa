record `com.google.android.material.transition.FitModeEvaluators$1` @kind class @AccessFlag  extends `com.google.android.material.transition.FitModeEvaluator` @kind interface {
}
procedure `void` `<init>`(`com.google.android.material.transition.FitModeEvaluators$1` v0 @kind this) @signature `Lcom/google/android/material/transition/FitModeEvaluators$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ce5b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ce5be.  return @kind void;
}
procedure `void` `applyMask`(`com.google.android.material.transition.FitModeEvaluators$1` v1 @kind this, `android.graphics.RectF` v2 @kind object, `float` v3 , `com.google.android.material.transition.FitModeResult` v4 @kind object) @signature `Lcom/google/android/material/transition/FitModeEvaluators$1;.applyMask:(Landroid/graphics/RectF;FLcom/google/android/material/transition/FitModeResult;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce5d0.  v0:= v4.`com.google.android.material.transition.FitModeResult.currentEndHeight` @type ^`float`;
  #L4ce5d4.  v4:= v4.`com.google.android.material.transition.FitModeResult.currentStartHeight` @type ^`float`;
  #L4ce5d8.  v0:= v0 - v4 @kind float;
  #L4ce5da.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L4ce5e0.  v4:= temp;
  #L4ce5e2.  v0:= v2.`android.graphics.RectF.bottom` @type ^`float`;
  #L4ce5e6.  v4:= v4 * v3 @kind float;
  #L4ce5ea.  v0:= v0 - v4 @kind float;
  #L4ce5ec.  v2.`android.graphics.RectF.bottom` @type ^`float` := v0;
  #L4ce5f0.  return @kind void;
}
procedure `com.google.android.material.transition.FitModeResult` `evaluate`(`com.google.android.material.transition.FitModeEvaluators$1` v6 @kind this, `float` v7 , `float` v8 , `float` v9 , `float` v10 , `float` v11 , `float` v12 , `float` v13 ) @signature `Lcom/google/android/material/transition/FitModeEvaluators$1;.evaluate:(FFFFFFF)Lcom/google/android/material/transition/FitModeResult;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ce570.  v5:= 1I;
  #L4ce572.  v0:= v10;
  #L4ce574.  v1:= v12;
  #L4ce576.  v2:= v8;
  #L4ce578.  v3:= v9;
  #L4ce57a.  v4:= v7;
  #L4ce57c.  call temp:= `lerp`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/android/material/transition/TransitionUtils;.lerp:(FFFFFZ)F` @kind static;
  #L4ce582.  v0:= temp;
  #L4ce584.  v8:= v0 / v10 @kind float;
  #L4ce588.  v9:= v0 / v12 @kind float;
  #L4ce58c.  v11:= v11 * v8 @kind float;
  #L4ce590.  v13:= v13 * v9 @kind float;
  #L4ce594.  v1:= new `com.google.android.material.transition.FitModeResult`;
  #L4ce598.  v7:= v1 @kind object;
  #L4ce59a.  v10:= v0;
  #L4ce59c.  v12:= v0;
  #L4ce59e.  call `<init>`(v7, v8, v9, v10, v11, v12, v13) @signature `Lcom/google/android/material/transition/FitModeResult;.<init>:(FFFFFF)V` @kind direct;
  #L4ce5a4.  return v1 @kind object;
}
procedure `boolean` `shouldMaskStartBounds`(`com.google.android.material.transition.FitModeEvaluators$1` v1 @kind this, `com.google.android.material.transition.FitModeResult` v2 @kind object) @signature `Lcom/google/android/material/transition/FitModeEvaluators$1;.shouldMaskStartBounds:(Lcom/google/android/material/transition/FitModeResult;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ce548.  v0:= v2.`com.google.android.material.transition.FitModeResult.currentStartHeight` @type ^`float`;
  #L4ce54c.  v2:= v2.`com.google.android.material.transition.FitModeResult.currentEndHeight` @type ^`float`;
  #L4ce550.  v2:= fcmpl(v0, v2);
  #L4ce554.  if v2 <= 0 then goto L4ce55c;
  #L4ce558.  v2:= 1I;
  #L4ce55a.  goto L4ce55e;
  #L4ce55c.  v2:= 0I;
  #L4ce55e.  return v2;
}
