record `com.google.android.material.color.MathUtils` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`com.google.android.material.color.MathUtils` v0 @kind this) @signature `Lcom/google/android/material/color/MathUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48870c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L488712.  return @kind void;
}
procedure `float` `clamp`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lcom/google/android/material/color/MathUtils;.clamp:(FFF)F` @AccessFlag STATIC {
    temp;

  #L4885f8.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L4885fe.  v0:= temp;
  #L488600.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L488606.  v0:= temp;
  #L488608.  return v0;
}
procedure `float` `differenceDegrees`(`float` v0 , `float` v1 ) @signature `Lcom/google/android/material/color/MathUtils;.differenceDegrees:(FF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48861c.  v0:= v0 - v1 @kind float;
  #L48861e.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L488624.  v0:= temp;
  #L488626.  v1:= 180.0F;
  #L48862a.  v0:= v0 - v1 @kind float;
  #L48862c.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L488632.  v0:= temp;
  #L488634.  v1:= v1 - v0 @kind float;
  #L488636.  return v1;
}
procedure `float` `lerp`(`float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/google/android/material/color/MathUtils;.lerp:(FFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L488648.  v0:= 1.0F;
  #L48864c.  v0:= v0 - v3 @kind float;
  #L48864e.  v0:= v0 * v1 @kind float;
  #L488652.  v3:= v3 * v2 @kind float;
  #L488656.  v0:= v0 + v3 @kind float;
  #L488658.  return v0;
}
procedure `float` `sanitizeDegrees`(`float` v2 ) @signature `Lcom/google/android/material/color/MathUtils;.sanitizeDegrees:(F)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48866c.  v0:= 360.0F;
  #L488670.  v1:= 0I;
  #L488672.  v1:= fcmpg(v2, v1);
  #L488676.  if v1 >= 0 then goto L488680;
  #L48867a.  v2:= v2 %% v0 @kind float;
  #L48867c.  v2:= v2 + v0 @kind float;
  #L48867e.  return v2;
  #L488680.  v1:= fcmpl(v2, v0);
  #L488684.  if v1 < 0 then goto L48868a;
  #L488688.  v2:= v2 %% v0 @kind float;
  #L48868a.  return v2;
}
procedure `int` `sanitizeDegrees`(`int` v1 ) @signature `Lcom/google/android/material/color/MathUtils;.sanitizeDegrees:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4886e4.  v0:= 360I;
  #L4886e8.  if v1 >= 0 then goto L4886f2;
  #L4886ec.  v1:= v1 %% v0 @kind int;
  #L4886ee.  v1:= v1 + v0 @kind int;
  #L4886f0.  return v1;
  #L4886f2.  if v1 < v0 then goto L4886f8;
  #L4886f6.  v1:= v1 %% v0 @kind int;
  #L4886f8.  return v1;
}
procedure `float` `toDegrees`(`float` v1 ) @signature `Lcom/google/android/material/color/MathUtils;.toDegrees:(F)F` @AccessFlag STATIC {
    temp;
    v0;

  #L48869c.  v0:= 180.0F;
  #L4886a0.  v1:= v1 * v0 @kind float;
  #L4886a4.  v0:= 1078530011I;
  #L4886aa.  v1:= v1 / v0 @kind float;
  #L4886ac.  return v1;
}
procedure `float` `toRadians`(`float` v1 ) @signature `Lcom/google/android/material/color/MathUtils;.toRadians:(F)F` @AccessFlag STATIC {
    temp;
    v0;

  #L4886c0.  v0:= 180.0F;
  #L4886c4.  v1:= v1 / v0 @kind float;
  #L4886c6.  v0:= 1078530011I;
  #L4886cc.  v1:= v1 * v0 @kind float;
  #L4886d0.  return v1;
}
