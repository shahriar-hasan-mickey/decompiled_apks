record `com.google.android.odml.image.BitmapExtractor` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.android.odml.image.BitmapExtractor` v0 @kind this) @signature `Lcom/google/android/odml/image/BitmapExtractor;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4d64e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d64ee.  return @kind void;
}
procedure `android.graphics.Bitmap` `extract`(`com.google.android.odml.image.MlImage` v2 @kind object) @signature `Lcom/google/android/odml/image/BitmapExtractor;.extract:(Lcom/google/android/odml/image/MlImage;)Landroid/graphics/Bitmap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4d649c.  call temp:= `a`(v2) @signature `Lcom/google/android/odml/image/MlImage;.a:()Lcom/google/android/odml/image/g;` @kind virtual;
  #L4d64a2.  v2:= temp @kind object;
  #L4d64a4.  call temp:= `zzb`(v2) @signature `Lcom/google/android/odml/image/g;.zzb:()Lcom/google/android/odml/image/ImageProperties;` @kind interface;
  #L4d64aa.  v0:= temp @kind object;
  #L4d64ac.  call temp:= `getStorageType`(v0) @signature `Lcom/google/android/odml/image/ImageProperties;.getStorageType:()I` @kind virtual;
  #L4d64b2.  v0:= temp;
  #L4d64b4.  v1:= 1I;
  #L4d64b6.  if v0 != v1 then goto L4d64c8;
  #L4d64ba.  v2:= (`com.google.android.odml.image.e`) v2 @kind object;
  #L4d64be.  call temp:= `a`(v2) @signature `Lcom/google/android/odml/image/e;.a:()Landroid/graphics/Bitmap;` @kind virtual;
  #L4d64c4.  v2:= temp @kind object;
  #L4d64c6.  return v2 @kind object;
  #L4d64c8.  v2:= new `java.lang.IllegalArgumentException`;
  #L4d64cc.  v0:= "Extracting Bitmap from an MlImage created by objects other than Bitmap is not supported" @kind object;
  #L4d64d0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d64d6.  throw v2;
}
