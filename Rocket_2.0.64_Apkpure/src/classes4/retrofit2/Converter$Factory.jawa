record `retrofit2.Converter$Factory` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`retrofit2.Converter$Factory` v0 @kind this) @signature `Lretrofit2/Converter$Factory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bea74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bea7a.  return @kind void;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v0 , `java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lretrofit2/Converter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag PROTECTED_STATIC {
    temp;

  #L1bea1c.  call temp:= `g`(v0, v1) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1bea22.  v0:= temp @kind object;
  #L1bea24.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v0 @kind object) @signature `Lretrofit2/Converter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PROTECTED_STATIC {
    temp;

  #L1bea00.  call temp:= `h`(v0) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1bea06.  v0:= temp @kind object;
  #L1bea08.  return v0 @kind object;
}
procedure `retrofit2.Converter` `requestBodyConverter`(`retrofit2.Converter$Factory` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/Converter$Factory;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1bea38.  v1:= 0I;
  #L1bea3a.  return v1 @kind object;
}
procedure `retrofit2.Converter` `responseBodyConverter`(`retrofit2.Converter$Factory` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `retrofit2.Retrofit` v3 @kind object) @signature `Lretrofit2/Converter$Factory;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1bea4c.  v1:= 0I;
  #L1bea4e.  return v1 @kind object;
}
procedure `retrofit2.Converter` `stringConverter`(`retrofit2.Converter$Factory` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `retrofit2.Retrofit` v3 @kind object) @signature `Lretrofit2/Converter$Factory;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1bea60.  v1:= 0I;
  #L1bea62.  return v1 @kind object;
}
