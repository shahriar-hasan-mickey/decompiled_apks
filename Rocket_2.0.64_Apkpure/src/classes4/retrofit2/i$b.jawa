record `retrofit2.i$b` @kind class @AccessFlag  extends `retrofit2.i` @kind class {
  `retrofit2.i` `retrofit2.i$b.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.i$b` v0 @kind this, `retrofit2.i` v1 @kind object) @signature `Lretrofit2/i$b;.<init>:(Lretrofit2/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c039c.  v0.`retrofit2.i$b.a` @type ^`retrofit2.i` := v1 @kind object;
  #L1c03a0.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c03a6.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$b` v4 @kind this, `retrofit2.k` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lretrofit2/i$b;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c03b8.  if v6 != 0 then goto L1c03be;
  #L1c03bc.  return @kind void;
  #L1c03be.  v0:= 0I;
  #L1c03c0.  call temp:= `getLength`(v6) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L1c03c6.  v1:= temp;
  #L1c03c8.  if v0 >= v1 then goto L1c03e4;
  #L1c03cc.  v2:= v4.`retrofit2.i$b.a` @type ^`retrofit2.i` @kind object;
  #L1c03d0.  call temp:= `get`(v6, v0) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L1c03d6.  v3:= temp @kind object;
  #L1c03d8.  call `a`(v2, v5, v3) @signature `Lretrofit2/i;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @kind virtual;
  #L1c03de.  v0:= v0 + 1;
  #L1c03e2.  goto L1c03c8;
  #L1c03e4.  return @kind void;
}
