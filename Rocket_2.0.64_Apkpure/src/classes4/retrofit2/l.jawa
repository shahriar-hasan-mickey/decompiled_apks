record `retrofit2.l` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `retrofit2.l.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.HttpUrl` `retrofit2.l.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.l.c` @AccessFlag FINAL;
  `java.lang.String` `retrofit2.l.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `retrofit2.l.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `retrofit2.l.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.l.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.l.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.l.i` @AccessFlag PRIVATE_FINAL;
  `retrofit2.i`[] `retrofit2.l.j` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.l.k` @AccessFlag FINAL;
}
procedure `void` `<init>`(`retrofit2.l` v1 @kind this, `retrofit2.l$a` v2 @kind object) @signature `Lretrofit2/l;.<init>:(Lretrofit2/l$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c30b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c30ba.  v0:= v2.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c30be.  v1.`retrofit2.l.a` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L1c30c2.  v0:= v2.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c30c6.  v0:= v0.`retrofit2.Retrofit.c` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c30ca.  v1.`retrofit2.l.b` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1c30ce.  v0:= v2.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c30d2.  v1.`retrofit2.l.c` @type ^`java.lang.String` := v0 @kind object;
  #L1c30d6.  v0:= v2.`retrofit2.l$a.r` @type ^`java.lang.String` @kind object;
  #L1c30da.  v1.`retrofit2.l.d` @type ^`java.lang.String` := v0 @kind object;
  #L1c30de.  v0:= v2.`retrofit2.l$a.s` @type ^`okhttp3.Headers` @kind object;
  #L1c30e2.  v1.`retrofit2.l.e` @type ^`okhttp3.Headers` := v0 @kind object;
  #L1c30e6.  v0:= v2.`retrofit2.l$a.t` @type ^`okhttp3.MediaType` @kind object;
  #L1c30ea.  v1.`retrofit2.l.f` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L1c30ee.  v0:= v2.`retrofit2.l$a.o` @type ^`boolean` @kind boolean;
  #L1c30f2.  v1.`retrofit2.l.g` @type ^`boolean` := v0 @kind boolean;
  #L1c30f6.  v0:= v2.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c30fa.  v1.`retrofit2.l.h` @type ^`boolean` := v0 @kind boolean;
  #L1c30fe.  v0:= v2.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c3102.  v1.`retrofit2.l.i` @type ^`boolean` := v0 @kind boolean;
  #L1c3106.  v0:= v2.`retrofit2.l$a.v` @type ^`retrofit2.i`[] @kind object;
  #L1c310a.  v1.`retrofit2.l.j` @type ^`retrofit2.i`[] := v0 @kind object;
  #L1c310e.  v2:= v2.`retrofit2.l$a.w` @type ^`boolean` @kind boolean;
  #L1c3112.  v1.`retrofit2.l.k` @type ^`boolean` := v2 @kind boolean;
  #L1c3116.  return @kind void;
}
procedure `retrofit2.l` `b`(`retrofit2.Retrofit` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/l;.b:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;)Lretrofit2/l;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c3090.  v0:= new `retrofit2.l$a`;
  #L1c3094.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/l$a;.<init>:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;)V` @kind direct;
  #L1c309a.  call temp:= `b`(v0) @signature `Lretrofit2/l$a;.b:()Lretrofit2/l;` @kind virtual;
  #L1c30a0.  v1:= temp @kind object;
  #L1c30a2.  return v1 @kind object;
}
procedure `okhttp3.Request` `a`(`retrofit2.l` v12 @kind this, `java.lang.Object`[] v13 @kind object) @signature `Lretrofit2/l;.a:([Ljava/lang/Object;)Lokhttp3/Request;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1c2f98.  v0:= v12.`retrofit2.l.j` @type ^`retrofit2.i`[] @kind object;
  #L1c2f9c.  v1:= length @variable v13;
  #L1c2f9e.  v2:= length @variable v0;
  #L1c2fa0.  if v1 != v2 then goto L1c3036;
  #L1c2fa4.  v2:= new `retrofit2.k`;
  #L1c2fa8.  v4:= v12.`retrofit2.l.c` @type ^`java.lang.String` @kind object;
  #L1c2fac.  v5:= v12.`retrofit2.l.b` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c2fb0.  v6:= v12.`retrofit2.l.d` @type ^`java.lang.String` @kind object;
  #L1c2fb4.  v7:= v12.`retrofit2.l.e` @type ^`okhttp3.Headers` @kind object;
  #L1c2fb8.  v8:= v12.`retrofit2.l.f` @type ^`okhttp3.MediaType` @kind object;
  #L1c2fbc.  v9:= v12.`retrofit2.l.g` @type ^`boolean` @kind boolean;
  #L1c2fc0.  v10:= v12.`retrofit2.l.h` @type ^`boolean` @kind boolean;
  #L1c2fc4.  v11:= v12.`retrofit2.l.i` @type ^`boolean` @kind boolean;
  #L1c2fc8.  v3:= v2 @kind object;
  #L1c2fca.  call `<init>`(v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lretrofit2/k;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @kind direct;
  #L1c2fd0.  v3:= v12.`retrofit2.l.k` @type ^`boolean` @kind boolean;
  #L1c2fd4.  if v3 == 0 then goto L1c2fdc;
  #L1c2fd8.  v1:= v1 + -1;
  #L1c2fdc.  v3:= new `java.util.ArrayList`;
  #L1c2fe0.  call `<init>`(v3, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1c2fe6.  v4:= 0I;
  #L1c2fe8.  if v4 >= v1 then goto L1c300a;
  #L1c2fec.  v5:= v13[v4] @kind object;
  #L1c2ff0.  call temp:= `add`(v3, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c2ff6.  v5:= v0[v4] @kind object;
  #L1c2ffa.  v6:= v13[v4] @kind object;
  #L1c2ffe.  call `a`(v5, v2, v6) @signature `Lretrofit2/i;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @kind virtual;
  #L1c3004.  v4:= v4 + 1;
  #L1c3008.  goto L1c2fe8;
  #L1c300a.  call temp:= `k`(v2) @signature `Lretrofit2/k;.k:()Lokhttp3/Request$Builder;` @kind virtual;
  #L1c3010.  v13:= temp @kind object;
  #L1c3012.  v0:= constclass @type ^`retrofit2.Invocation` @kind object;
  #L1c3016.  v1:= new `retrofit2.Invocation`;
  #L1c301a.  v2:= v12.`retrofit2.l.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c301e.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/Invocation;.<init>:(Ljava/lang/reflect/Method;Ljava/util/List;)V` @kind direct;
  #L1c3024.  call temp:= `tag`(v13, v0, v1) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c302a.  v13:= temp @kind object;
  #L1c302c.  call temp:= `build`(v13) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1c3032.  v13:= temp @kind object;
  #L1c3034.  return v13 @kind object;
  #L1c3036.  v13:= new `java.lang.IllegalArgumentException`;
  #L1c303a.  v2:= new `java.lang.StringBuilder`;
  #L1c303e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c3044.  v3:= "Argument count (" @kind object;
  #L1c3048.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c304e.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3054.  v1:= ") doesn't match expected count (" @kind object;
  #L1c3058.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c305e.  v0:= length @variable v0;
  #L1c3060.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3066.  v0:= ")" @kind object;
  #L1c306a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3070.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3076.  v0:= temp @kind object;
  #L1c3078.  call `<init>`(v13, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c307e.  throw v13;
}
