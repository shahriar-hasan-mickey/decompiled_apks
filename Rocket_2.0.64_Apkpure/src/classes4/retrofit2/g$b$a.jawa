record `retrofit2.g$b$a` @kind class @AccessFlag  extends `okio.ForwardingSource` @kind class {
  `retrofit2.g$b` `retrofit2.g$b$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.g$b$a` v0 @kind this, `retrofit2.g$b` v1 @kind object, `okio.Source` v2 @kind object) @signature `Lretrofit2/g$b$a;.<init>:(Lretrofit2/g$b;Lokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bfc18.  v0.`retrofit2.g$b$a.b` @type ^`retrofit2.g$b` := v1 @kind object;
  #L1bfc1c.  call `<init>`(v0, v2) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L1bfc22.  return @kind void;
}
procedure `long` `read`(`retrofit2.g$b$a` v0 @kind this, `okio.Buffer` v1 @kind object, `long` v2 ) @signature `Lretrofit2/g$b$a;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;

  #L1bfbe0.  call temp:= `read`(v0, v1, v2) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L1bfbe6.  v1:= temp @kind wide;
  #L1bfbe8.  return v1 @kind wide;
  #L1bfbea.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1bfbec.  v2:= v0.`retrofit2.g$b$a.b` @type ^`retrofit2.g$b` @kind object;
  #L1bfbf0.  v2.`retrofit2.g$b.d` @type ^`java.io.IOException` := v1 @kind object;
  #L1bfbf4.  throw v1;
  catch `java.io.IOException` @[L1bfbe0..L1bfbe8] goto L1bfbea;
}
