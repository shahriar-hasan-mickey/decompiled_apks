record `retrofit2.i$n` @kind class @AccessFlag FINAL extends `retrofit2.i` @kind class {
  `retrofit2.Converter` `retrofit2.i$n.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.i$n.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.i$n` v0 @kind this, `retrofit2.Converter` v1 @kind object, `boolean` v2 ) @signature `Lretrofit2/i$n;.<init>:(Lretrofit2/Converter;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c0d70.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c0d76.  v0.`retrofit2.i$n.a` @type ^`retrofit2.Converter` := v1 @kind object;
  #L1c0d7a.  v0.`retrofit2.i$n.b` @type ^`boolean` := v2 @kind boolean;
  #L1c0d7e.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$n` v2 @kind this, `retrofit2.k` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lretrofit2/i$n;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c0d90.  if v4 != 0 then goto L1c0d96;
  #L1c0d94.  return @kind void;
  #L1c0d96.  v0:= v2.`retrofit2.i$n.a` @type ^`retrofit2.Converter` @kind object;
  #L1c0d9a.  call temp:= `convert`(v0, v4) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c0da0.  v4:= temp @kind object;
  #L1c0da2.  v4:= (`java.lang.String`) v4 @kind object;
  #L1c0da6.  v0:= 0I;
  #L1c0da8.  v1:= v2.`retrofit2.i$n.b` @type ^`boolean` @kind boolean;
  #L1c0dac.  call `g`(v3, v4, v0, v1) @signature `Lretrofit2/k;.g:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind virtual;
  #L1c0db2.  return @kind void;
}
