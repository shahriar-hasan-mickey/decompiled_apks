record `retrofit2.c$b` @kind class @AccessFlag FINAL extends `retrofit2.Call` @kind interface {
  `java.util.concurrent.Executor` `retrofit2.c$b.a` @AccessFlag FINAL;
  `retrofit2.Call` `retrofit2.c$b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`retrofit2.c$b` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/c$b;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bed9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1beda2.  v0.`retrofit2.c$b.a` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L1beda6.  v0.`retrofit2.c$b.b` @type ^`retrofit2.Call` := v2 @kind object;
  #L1bedaa.  return @kind void;
}
procedure `void` `cancel`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bedbc.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bedc0.  call `cancel`(v0) @signature `Lretrofit2/Call;.cancel:()V` @kind interface;
  #L1bedc6.  return @kind void;
}
procedure `java.lang.Object` `clone`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1becf4.  call temp:= `clone`(v1) @signature `Lretrofit2/c$b;.clone:()Lretrofit2/Call;` @kind virtual;
  #L1becfa.  v0:= temp @kind object;
  #L1becfc.  return v0 @kind object;
}
procedure `retrofit2.Call` `clone`(`retrofit2.c$b` v3 @kind this) @signature `Lretrofit2/c$b;.clone:()Lretrofit2/Call;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1bed50.  v0:= new `retrofit2.c$b`;
  #L1bed54.  v1:= v3.`retrofit2.c$b.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L1bed58.  v2:= v3.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bed5c.  call temp:= `clone`(v2) @signature `Lretrofit2/Call;.clone:()Lretrofit2/Call;` @kind interface;
  #L1bed62.  v2:= temp @kind object;
  #L1bed64.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/c$b;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @kind direct;
  #L1bed6a.  return v0 @kind object;
}
procedure `void` `enqueue`(`retrofit2.c$b` v2 @kind this, `retrofit2.Callback` v3 @kind object) @signature `Lretrofit2/c$b;.enqueue:(Lretrofit2/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bedd8.  v0:= "callback == null" @kind object;
  #L1beddc.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1bede2.  v0:= v2.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bede6.  v1:= new `retrofit2.c$b$a`;
  #L1bedea.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/c$b$a;.<init>:(Lretrofit2/c$b;Lretrofit2/Callback;)V` @kind direct;
  #L1bedf0.  call `enqueue`(v0, v1) @signature `Lretrofit2/Call;.enqueue:(Lretrofit2/Callback;)V` @kind interface;
  #L1bedf6.  return @kind void;
}
procedure `retrofit2.Response` `execute`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.execute:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bed7c.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bed80.  call temp:= `execute`(v0) @signature `Lretrofit2/Call;.execute:()Lretrofit2/Response;` @kind interface;
  #L1bed86.  v0:= temp @kind object;
  #L1bed88.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1becb4.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1becb8.  call temp:= `isCanceled`(v0) @signature `Lretrofit2/Call;.isCanceled:()Z` @kind interface;
  #L1becbe.  v0:= temp;
  #L1becc0.  return v0;
}
procedure `boolean` `isExecuted`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1becd4.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1becd8.  call temp:= `isExecuted`(v0) @signature `Lretrofit2/Call;.isExecuted:()Z` @kind interface;
  #L1becde.  v0:= temp;
  #L1bece0.  return v0;
}
procedure `okhttp3.Request` `request`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bed10.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bed14.  call temp:= `request`(v0) @signature `Lretrofit2/Call;.request:()Lokhttp3/Request;` @kind interface;
  #L1bed1a.  v0:= temp @kind object;
  #L1bed1c.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`retrofit2.c$b` v1 @kind this) @signature `Lretrofit2/c$b;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bed30.  v0:= v1.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bed34.  call temp:= `timeout`(v0) @signature `Lretrofit2/Call;.timeout:()Lokio/Timeout;` @kind interface;
  #L1bed3a.  v0:= temp @kind object;
  #L1bed3c.  return v0 @kind object;
}
