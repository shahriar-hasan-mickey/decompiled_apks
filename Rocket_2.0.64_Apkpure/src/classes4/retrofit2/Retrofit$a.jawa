record `retrofit2.Retrofit$a` @kind class @AccessFlag  extends `java.lang.reflect.InvocationHandler` @kind interface {
  `retrofit2.j` `retrofit2.Retrofit$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `retrofit2.Retrofit$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `retrofit2.Retrofit$a.c` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.Retrofit` `retrofit2.Retrofit$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.Retrofit$a` v0 @kind this, `retrofit2.Retrofit` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lretrofit2/Retrofit$a;.<init>:(Lretrofit2/Retrofit;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c35b8.  v0.`retrofit2.Retrofit$a.d` @type ^`retrofit2.Retrofit` := v1 @kind object;
  #L1c35bc.  v0.`retrofit2.Retrofit$a.c` @type ^`java.lang.Class` := v2 @kind object;
  #L1c35c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c35c6.  call temp:= `g`() @signature `Lretrofit2/j;.g:()Lretrofit2/j;` @kind static;
  #L1c35cc.  v1:= temp @kind object;
  #L1c35ce.  v0.`retrofit2.Retrofit$a.a` @type ^`retrofit2.j` := v1 @kind object;
  #L1c35d2.  v1:= 0I;
  #L1c35d4.  v1:= new `java.lang.Object`[v1];
  #L1c35d8.  v0.`retrofit2.Retrofit$a.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1c35dc.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`retrofit2.Retrofit$a` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.reflect.Method` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/Retrofit$a;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c354c.  call temp:= `getDeclaringClass`(v4) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3552.  v0:= temp @kind object;
  #L1c3554.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1c3558.  if v0 != v1 then goto L1c3566;
  #L1c355c.  call temp:= `invoke`(v4, v2, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c3562.  v3:= temp @kind object;
  #L1c3564.  return v3 @kind object;
  #L1c3566.  if v5 == 0 then goto L1c356c;
  #L1c356a.  goto L1c3570;
  #L1c356c.  v5:= v2.`retrofit2.Retrofit$a.b` @type ^`java.lang.Object`[] @kind object;
  #L1c3570.  v0:= v2.`retrofit2.Retrofit$a.a` @type ^`retrofit2.j` @kind object;
  #L1c3574.  call temp:= `i`(v0, v4) @signature `Lretrofit2/j;.i:(Ljava/lang/reflect/Method;)Z` @kind virtual;
  #L1c357a.  v0:= temp;
  #L1c357c.  if v0 == 0 then goto L1c3592;
  #L1c3580.  v0:= v2.`retrofit2.Retrofit$a.a` @type ^`retrofit2.j` @kind object;
  #L1c3584.  v1:= v2.`retrofit2.Retrofit$a.c` @type ^`java.lang.Class` @kind object;
  #L1c3588.  call temp:= `h`(v0, v4, v1, v3, v5) @signature `Lretrofit2/j;.h:(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c358e.  v3:= temp @kind object;
  #L1c3590.  goto L1c35a6;
  #L1c3592.  v3:= v2.`retrofit2.Retrofit$a.d` @type ^`retrofit2.Retrofit` @kind object;
  #L1c3596.  call temp:= `a`(v3, v4) @signature `Lretrofit2/Retrofit;.a:(Ljava/lang/reflect/Method;)Lretrofit2/m;` @kind virtual;
  #L1c359c.  v3:= temp @kind object;
  #L1c359e.  call temp:= `a`(v3, v5) @signature `Lretrofit2/m;.a:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c35a4.  v3:= temp @kind object;
  #L1c35a6.  return v3 @kind object;
}
