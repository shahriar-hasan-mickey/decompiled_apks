record `retrofit2.f` @kind class @AccessFlag ABSTRACT extends `retrofit2.m` @kind class {
  `retrofit2.l` `retrofit2.f.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.f.b` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.f.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.f` v0 @kind this, `retrofit2.l` v1 @kind object, `okhttp3.Call$Factory` v2 @kind object, `retrofit2.Converter` v3 @kind object) @signature `Lretrofit2/f;.<init>:(Lretrofit2/l;Lokhttp3/Call$Factory;Lretrofit2/Converter;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bf2fc.  call `<init>`(v0) @signature `Lretrofit2/m;.<init>:()V` @kind direct;
  #L1bf302.  v0.`retrofit2.f.a` @type ^`retrofit2.l` := v1 @kind object;
  #L1bf306.  v0.`retrofit2.f.b` @type ^`okhttp3.Call$Factory` := v2 @kind object;
  #L1bf30a.  v0.`retrofit2.f.c` @type ^`retrofit2.Converter` := v3 @kind object;
  #L1bf30e.  return @kind void;
}
procedure `retrofit2.CallAdapter` `d`(`retrofit2.Retrofit` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Type` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lretrofit2/f;.d:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1bf0d8.  call temp:= `callAdapter`(v1, v3, v4) @signature `Lretrofit2/Retrofit;.callAdapter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @kind virtual;
  #L1bf0de.  v1:= temp @kind object;
  #L1bf0e0.  return v1 @kind object;
  #L1bf0e2.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1bf0e4.  v4:= 1I;
  #L1bf0e6.  v4:= new `java.lang.Object`[v4];
  #L1bf0ea.  v0:= 0I;
  #L1bf0ec.  v4[v0]:= v3 @kind object;
  #L1bf0f0.  v3:= "Unable to create call adapter for %s" @kind object;
  #L1bf0f4.  call temp:= `n`(v2, v1, v3, v4) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1bf0fa.  v1:= temp @kind object;
  #L1bf0fc.  throw v1;
  catch `java.lang.RuntimeException` @[L1bf0d8..L1bf0e0] goto L1bf0e2;
}
procedure `retrofit2.Converter` `e`(`retrofit2.Retrofit` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lretrofit2/f;.e:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;Ljava/lang/reflect/Type;)Lretrofit2/Converter;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1bf120.  call temp:= `getAnnotations`(v3) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1bf126.  v0:= temp @kind object;
  #L1bf128.  call temp:= `responseBodyConverter`(v2, v4, v0) @signature `Lretrofit2/Retrofit;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1bf12e.  v2:= temp @kind object;
  #L1bf130.  return v2 @kind object;
  #L1bf132.  v2:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1bf134.  v0:= 1I;
  #L1bf136.  v0:= new `java.lang.Object`[v0];
  #L1bf13a.  v1:= 0I;
  #L1bf13c.  v0[v1]:= v4 @kind object;
  #L1bf140.  v4:= "Unable to create converter for %s" @kind object;
  #L1bf144.  call temp:= `n`(v3, v2, v4, v0) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1bf14a.  v2:= temp @kind object;
  #L1bf14c.  throw v2;
  catch `java.lang.RuntimeException` @[L1bf128..L1bf130] goto L1bf132;
}
procedure `retrofit2.f` `f`(`retrofit2.Retrofit` v13 @kind object, `java.lang.reflect.Method` v14 @kind object, `retrofit2.l` v15 @kind object) @signature `Lretrofit2/f;.f:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;Lretrofit2/l;)Lretrofit2/f;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1bf170.  v3:= constclass @type ^`retrofit2.Response` @kind object;
  #L1bf174.  v4:= v15.`retrofit2.l.k` @type ^`boolean` @kind boolean;
  #L1bf178.  call temp:= `getAnnotations`(v14) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1bf17e.  v5:= temp @kind object;
  #L1bf180.  v6:= 0I;
  #L1bf182.  if v4 == 0 then goto L1bf1ec;
  #L1bf186.  call temp:= `getGenericParameterTypes`(v14) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1bf18c.  v7:= temp @kind object;
  #L1bf18e.  v8:= length @variable v7;
  #L1bf190.  v9:= 1I;
  #L1bf192.  v8:= v8 - v9 @kind int;
  #L1bf194.  v7:= v7[v8] @kind object;
  #L1bf198.  v7:= (`java.lang.reflect.ParameterizedType`) v7 @kind object;
  #L1bf19c.  call temp:= `f`(v6, v7) @signature `Lretrofit2/o;.f:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1bf1a2.  v7:= temp @kind object;
  #L1bf1a4.  call temp:= `h`(v7) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1bf1aa.  v8:= temp @kind object;
  #L1bf1ac.  if v8 != v3 then goto L1bf1c8;
  #L1bf1b0.  v8:= instanceof @variable v7 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1bf1b4.  if v8 == 0 then goto L1bf1c8;
  #L1bf1b8.  v7:= (`java.lang.reflect.ParameterizedType`) v7 @kind object;
  #L1bf1bc.  call temp:= `g`(v6, v7) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1bf1c2.  v7:= temp @kind object;
  #L1bf1c4.  v8:= 1I;
  #L1bf1c6.  goto L1bf1ca;
  #L1bf1c8.  v8:= 0I;
  #L1bf1ca.  v10:= new `retrofit2.o$b`;
  #L1bf1ce.  v11:= 0I;
  #L1bf1d0.  v12:= constclass @type ^`retrofit2.Call` @kind object;
  #L1bf1d4.  v9:= new `java.lang.reflect.Type`[v9];
  #L1bf1d8.  v9[v6]:= v7 @kind object;
  #L1bf1dc.  call `<init>`(v10, v11, v12, v9) @signature `Lretrofit2/o$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1bf1e2.  call temp:= `a`(v5) @signature `Lretrofit2/n;.a:([Ljava/lang/annotation/Annotation;)[Ljava/lang/annotation/Annotation;` @kind static;
  #L1bf1e8.  v5:= temp @kind object;
  #L1bf1ea.  goto L1bf1f6;
  #L1bf1ec.  call temp:= `getGenericReturnType`(v14) @signature `Ljava/lang/reflect/Method;.getGenericReturnType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1bf1f2.  v10:= temp @kind object;
  #L1bf1f4.  v8:= 0I;
  #L1bf1f6.  call temp:= `d`(v13, v14, v10, v5) @signature `Lretrofit2/f;.d:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @kind static;
  #L1bf1fc.  v5:= temp @kind object;
  #L1bf1fe.  call temp:= `responseType`(v5) @signature `Lretrofit2/CallAdapter;.responseType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1bf204.  v7:= temp @kind object;
  #L1bf206.  v9:= constclass @type ^`okhttp3.Response` @kind object;
  #L1bf20a.  if v7 == v9 then goto L1bf2a0;
  #L1bf20e.  if v7 == v3 then goto L1bf28e;
  #L1bf212.  v3:= v15.`retrofit2.l.c` @type ^`java.lang.String` @kind object;
  #L1bf216.  v9:= "HEAD" @kind object;
  #L1bf21a.  call temp:= `equals`(v3, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bf220.  v3:= temp;
  #L1bf222.  if v3 == 0 then goto L1bf24a;
  #L1bf226.  v3:= constclass @type ^`java.lang.Void` @kind object;
  #L1bf22a.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bf230.  v3:= temp;
  #L1bf232.  if v3 == 0 then goto L1bf238;
  #L1bf236.  goto L1bf24a;
  #L1bf238.  v0:= new `java.lang.Object`[v6];
  #L1bf23c.  v2:= "HEAD method must use Void as response type." @kind object;
  #L1bf240.  call temp:= `m`(v14, v2, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1bf246.  v0:= temp @kind object;
  #L1bf248.  throw v0;
  #L1bf24a.  call temp:= `e`(v13, v14, v7) @signature `Lretrofit2/f;.e:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;Ljava/lang/reflect/Type;)Lretrofit2/Converter;` @kind static;
  #L1bf250.  v3:= temp @kind object;
  #L1bf252.  v6:= v13.`retrofit2.Retrofit.b` @type ^`okhttp3.Call$Factory` @kind object;
  #L1bf256.  if v4 != 0 then goto L1bf266;
  #L1bf25a.  v0:= new `retrofit2.f$a`;
  #L1bf25e.  call `<init>`(v0, v15, v6, v3, v5) @signature `Lretrofit2/f$a;.<init>:(Lretrofit2/l;Lokhttp3/Call$Factory;Lretrofit2/Converter;Lretrofit2/CallAdapter;)V` @kind direct;
  #L1bf264.  return v0 @kind object;
  #L1bf266.  if v8 == 0 then goto L1bf276;
  #L1bf26a.  v0:= new `retrofit2.f$c`;
  #L1bf26e.  call `<init>`(v0, v15, v6, v3, v5) @signature `Lretrofit2/f$c;.<init>:(Lretrofit2/l;Lokhttp3/Call$Factory;Lretrofit2/Converter;Lretrofit2/CallAdapter;)V` @kind direct;
  #L1bf274.  return v0 @kind object;
  #L1bf276.  v7:= new `retrofit2.f$b`;
  #L1bf27a.  v8:= 0I;
  #L1bf27c.  v0:= v7 @kind object;
  #L1bf27e.  v1:= v15 @kind object;
  #L1bf280.  v2:= v6 @kind object;
  #L1bf282.  v4:= v5 @kind object;
  #L1bf284.  v5:= v8;
  #L1bf286.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lretrofit2/f$b;.<init>:(Lretrofit2/l;Lokhttp3/Call$Factory;Lretrofit2/Converter;Lretrofit2/CallAdapter;Z)V` @kind direct;
  #L1bf28c.  return v7 @kind object;
  #L1bf28e.  v0:= new `java.lang.Object`[v6];
  #L1bf292.  v2:= "Response must include generic type (e.g., Response<String>)" @kind object;
  #L1bf296.  call temp:= `m`(v14, v2, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1bf29c.  v0:= temp @kind object;
  #L1bf29e.  throw v0;
  #L1bf2a0.  v0:= new `java.lang.StringBuilder`;
  #L1bf2a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bf2aa.  v2:= "'" @kind object;
  #L1bf2ae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bf2b4.  call temp:= `h`(v7) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1bf2ba.  v2:= temp @kind object;
  #L1bf2bc.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bf2c2.  v2:= temp @kind object;
  #L1bf2c4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bf2ca.  v2:= "' is not a valid response body type. Did you mean ResponseBody?" @kind object;
  #L1bf2ce.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bf2d4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bf2da.  v0:= temp @kind object;
  #L1bf2dc.  v2:= new `java.lang.Object`[v6];
  #L1bf2e0.  call temp:= `m`(v14, v0, v2) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1bf2e6.  v0:= temp @kind object;
  #L1bf2e8.  throw v0;
}
procedure `java.lang.Object` `a`(`retrofit2.f` v4 @kind this, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/f;.a:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1bf0a8.  v0:= new `retrofit2.g`;
  #L1bf0ac.  v1:= v4.`retrofit2.f.a` @type ^`retrofit2.l` @kind object;
  #L1bf0b0.  v2:= v4.`retrofit2.f.b` @type ^`okhttp3.Call$Factory` @kind object;
  #L1bf0b4.  v3:= v4.`retrofit2.f.c` @type ^`retrofit2.Converter` @kind object;
  #L1bf0b8.  call `<init>`(v0, v1, v5, v2, v3) @signature `Lretrofit2/g;.<init>:(Lretrofit2/l;[Ljava/lang/Object;Lokhttp3/Call$Factory;Lretrofit2/Converter;)V` @kind direct;
  #L1bf0be.  call temp:= `c`(v4, v0, v5) @signature `Lretrofit2/f;.c:(Lretrofit2/Call;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1bf0c4.  v5:= temp @kind object;
  #L1bf0c6.  return v5 @kind object;
}
procedure `java.lang.Object` `c`(`retrofit2.Call` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Lretrofit2/f;.c:(Lretrofit2/Call;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
