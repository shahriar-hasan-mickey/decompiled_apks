record `retrofit2.c$b$a` @kind class @AccessFlag  extends `retrofit2.Callback` @kind interface {
  `retrofit2.Callback` `retrofit2.c$b$a.a` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.c$b` `retrofit2.c$b$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.c$b$a` v0 @kind this, `retrofit2.c$b` v1 @kind object, `retrofit2.Callback` v2 @kind object) @signature `Lretrofit2/c$b$a;.<init>:(Lretrofit2/c$b;Lretrofit2/Callback;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bebcc.  v0.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` := v1 @kind object;
  #L1bebd0.  v0.`retrofit2.c$b$a.a` @type ^`retrofit2.Callback` := v2 @kind object;
  #L1bebd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bebda.  return @kind void;
}
procedure `void` `a`(`retrofit2.c$b$a` v0 @kind object, `retrofit2.Callback` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lretrofit2/c$b$a;.a:(Lretrofit2/c$b$a;Lretrofit2/Callback;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1beb9c.  call `c`(v0, v1, v2) @signature `Lretrofit2/c$b$a;.c:(Lretrofit2/Callback;Ljava/lang/Throwable;)V` @kind direct;
  #L1beba2.  return @kind void;
}
procedure `void` `b`(`retrofit2.c$b$a` v0 @kind object, `retrofit2.Callback` v1 @kind object, `retrofit2.Response` v2 @kind object) @signature `Lretrofit2/c$b$a;.b:(Lretrofit2/c$b$a;Lretrofit2/Callback;Lretrofit2/Response;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1bebb4.  call `d`(v0, v1, v2) @signature `Lretrofit2/c$b$a;.d:(Lretrofit2/Callback;Lretrofit2/Response;)V` @kind direct;
  #L1bebba.  return @kind void;
}
procedure `void` `c`(`retrofit2.c$b$a` v1 @kind this, `retrofit2.Callback` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lretrofit2/c$b$a;.c:(Lretrofit2/Callback;Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;

  #L1bebec.  v0:= v1.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bebf0.  call `onFailure`(v2, v0, v3) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L1bebf6.  return @kind void;
}
procedure `void` `d`(`retrofit2.c$b$a` v2 @kind this, `retrofit2.Callback` v3 @kind object, `retrofit2.Response` v4 @kind object) @signature `Lretrofit2/c$b$a;.d:(Lretrofit2/Callback;Lretrofit2/Response;)V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1bec08.  v0:= v2.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bec0c.  v0:= v0.`retrofit2.c$b.b` @type ^`retrofit2.Call` @kind object;
  #L1bec10.  call temp:= `isCanceled`(v0) @signature `Lretrofit2/Call;.isCanceled:()Z` @kind interface;
  #L1bec16.  v0:= temp;
  #L1bec18.  if v0 == 0 then goto L1bec36;
  #L1bec1c.  v4:= v2.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bec20.  v0:= new `java.io.IOException`;
  #L1bec24.  v1:= "Canceled" @kind object;
  #L1bec28.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bec2e.  call `onFailure`(v3, v4, v0) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L1bec34.  goto L1bec40;
  #L1bec36.  v0:= v2.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bec3a.  call `onResponse`(v3, v0, v4) @signature `Lretrofit2/Callback;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @kind interface;
  #L1bec40.  return @kind void;
}
procedure `void` `onFailure`(`retrofit2.c$b$a` v2 @kind this, `retrofit2.Call` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lretrofit2/c$b$a;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bec54.  v3:= v2.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bec58.  v3:= v3.`retrofit2.c$b.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L1bec5c.  v0:= v2.`retrofit2.c$b$a.a` @type ^`retrofit2.Callback` @kind object;
  #L1bec60.  v1:= new `retrofit2.d`;
  #L1bec64.  call `<init>`(v1, v2, v0, v4) @signature `Lretrofit2/d;.<init>:(Lretrofit2/c$b$a;Lretrofit2/Callback;Ljava/lang/Throwable;)V` @kind direct;
  #L1bec6a.  call `execute`(v3, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1bec70.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.c$b$a` v2 @kind this, `retrofit2.Call` v3 @kind object, `retrofit2.Response` v4 @kind object) @signature `Lretrofit2/c$b$a;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bec84.  v3:= v2.`retrofit2.c$b$a.b` @type ^`retrofit2.c$b` @kind object;
  #L1bec88.  v3:= v3.`retrofit2.c$b.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L1bec8c.  v0:= v2.`retrofit2.c$b$a.a` @type ^`retrofit2.Callback` @kind object;
  #L1bec90.  v1:= new `retrofit2.e`;
  #L1bec94.  call `<init>`(v1, v2, v0, v4) @signature `Lretrofit2/e;.<init>:(Lretrofit2/c$b$a;Lretrofit2/Callback;Lretrofit2/Response;)V` @kind direct;
  #L1bec9a.  call `execute`(v3, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1beca0.  return @kind void;
}
