record `retrofit2.Retrofit` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `retrofit2.Retrofit.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit.b` @AccessFlag FINAL;
  `okhttp3.HttpUrl` `retrofit2.Retrofit.c` @AccessFlag FINAL;
  `java.util.List` `retrofit2.Retrofit.d` @AccessFlag FINAL;
  `java.util.List` `retrofit2.Retrofit.e` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `retrofit2.Retrofit.f` @AccessFlag FINAL;
  `boolean` `retrofit2.Retrofit.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`retrofit2.Retrofit` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object, `okhttp3.HttpUrl` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object, `java.util.concurrent.Executor` v6 @kind object, `boolean` v7 ) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c3fa4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c3faa.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L1c3fae.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L1c3fb4.  v1.`retrofit2.Retrofit.a` @type ^`java.util.Map` := v0 @kind object;
  #L1c3fb8.  v1.`retrofit2.Retrofit.b` @type ^`okhttp3.Call$Factory` := v2 @kind object;
  #L1c3fbc.  v1.`retrofit2.Retrofit.c` @type ^`okhttp3.HttpUrl` := v3 @kind object;
  #L1c3fc0.  v1.`retrofit2.Retrofit.d` @type ^`java.util.List` := v4 @kind object;
  #L1c3fc4.  v1.`retrofit2.Retrofit.e` @type ^`java.util.List` := v5 @kind object;
  #L1c3fc8.  v1.`retrofit2.Retrofit.f` @type ^`java.util.concurrent.Executor` := v6 @kind object;
  #L1c3fcc.  v1.`retrofit2.Retrofit.g` @type ^`boolean` := v7 @kind boolean;
  #L1c3fd0.  return @kind void;
}
procedure `void` `b`(`retrofit2.Retrofit` v5 @kind this, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Retrofit;.b:(Ljava/lang/Class;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c3fe4.  call temp:= `isInterface`(v6) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1c3fea.  v0:= temp;
  #L1c3fec.  if v0 == 0 then goto L1c40d6;
  #L1c3ff0.  v0:= new `java.util.ArrayDeque`;
  #L1c3ff4.  v1:= 1I;
  #L1c3ff6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L1c3ffc.  call temp:= `add`(v0, v6) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c4002.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L1c4008.  v1:= temp;
  #L1c400a.  if v1 != 0 then goto L1c4084;
  #L1c400e.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L1c4014.  v1:= temp @kind object;
  #L1c4016.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1c401a.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1c4020.  v2:= temp @kind object;
  #L1c4022.  v2:= length @variable v2;
  #L1c4024.  if v2 == 0 then goto L1c4074;
  #L1c4028.  v0:= new `java.lang.StringBuilder`;
  #L1c402c.  v2:= "Type parameters are unsupported on " @kind object;
  #L1c4030.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4036.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c403c.  v2:= temp @kind object;
  #L1c403e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4044.  if v1 == v6 then goto L1c4060;
  #L1c4048.  v1:= " which is an interface of " @kind object;
  #L1c404c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4052.  call temp:= `getName`(v6) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c4058.  v6:= temp @kind object;
  #L1c405a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4060.  v6:= new `java.lang.IllegalArgumentException`;
  #L1c4064.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c406a.  v0:= temp @kind object;
  #L1c406c.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4072.  throw v6;
  #L1c4074.  call temp:= `getInterfaces`(v1) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1c407a.  v1:= temp @kind object;
  #L1c407c.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L1c4082.  goto L1c4002;
  #L1c4084.  v0:= v5.`retrofit2.Retrofit.g` @type ^`boolean` @kind boolean;
  #L1c4088.  if v0 == 0 then goto L1c40d4;
  #L1c408c.  call temp:= `g`() @signature `Lretrofit2/j;.g:()Lretrofit2/j;` @kind static;
  #L1c4092.  v0:= temp @kind object;
  #L1c4094.  call temp:= `getDeclaredMethods`(v6) @signature `Ljava/lang/Class;.getDeclaredMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L1c409a.  v6:= temp @kind object;
  #L1c409c.  v1:= length @variable v6;
  #L1c409e.  v2:= 0I;
  #L1c40a0.  if v2 >= v1 then goto L1c40d4;
  #L1c40a4.  v3:= v6[v2] @kind object;
  #L1c40a8.  call temp:= `i`(v0, v3) @signature `Lretrofit2/j;.i:(Ljava/lang/reflect/Method;)Z` @kind virtual;
  #L1c40ae.  v4:= temp;
  #L1c40b0.  if v4 != 0 then goto L1c40ce;
  #L1c40b4.  call temp:= `getModifiers`(v3) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L1c40ba.  v4:= temp;
  #L1c40bc.  call temp:= `isStatic`(v4) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L1c40c2.  v4:= temp;
  #L1c40c4.  if v4 != 0 then goto L1c40ce;
  #L1c40c8.  call temp:= `a`(v5, v3) @signature `Lretrofit2/Retrofit;.a:(Ljava/lang/reflect/Method;)Lretrofit2/m;` @kind virtual;
  #L1c40ce.  v2:= v2 + 1;
  #L1c40d2.  goto L1c40a0;
  #L1c40d4.  return @kind void;
  #L1c40d6.  v6:= new `java.lang.IllegalArgumentException`;
  #L1c40da.  v0:= "API declarations must be interfaces." @kind object;
  #L1c40de.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c40e4.  throw v6;
}
procedure `retrofit2.m` `a`(`retrofit2.Retrofit` v3 @kind this, `java.lang.reflect.Method` v4 @kind object) @signature `Lretrofit2/Retrofit;.a:(Ljava/lang/reflect/Method;)Lretrofit2/m;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1c3f3c.  v0:= v3.`retrofit2.Retrofit.a` @type ^`java.util.Map` @kind object;
  #L1c3f40.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c3f46.  v0:= temp @kind object;
  #L1c3f48.  v0:= (`retrofit2.m`) v0 @kind object;
  #L1c3f4c.  if v0 == 0 then goto L1c3f52;
  #L1c3f50.  return v0 @kind object;
  #L1c3f52.  v0:= v3.`retrofit2.Retrofit.a` @type ^`java.util.Map` @kind object;
  #L1c3f56.  @monitorenter v0
  #L1c3f58.  v1:= v3.`retrofit2.Retrofit.a` @type ^`java.util.Map` @kind object;
  #L1c3f5c.  call temp:= `get`(v1, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c3f62.  v1:= temp @kind object;
  #L1c3f64.  v1:= (`retrofit2.m`) v1 @kind object;
  #L1c3f68.  if v1 != 0 then goto L1c3f7e;
  #L1c3f6c.  call temp:= `b`(v3, v4) @signature `Lretrofit2/m;.b:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;)Lretrofit2/m;` @kind static;
  #L1c3f72.  v1:= temp @kind object;
  #L1c3f74.  v2:= v3.`retrofit2.Retrofit.a` @type ^`java.util.Map` @kind object;
  #L1c3f78.  call temp:= `put`(v2, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c3f7e.  @monitorexit v0
  #L1c3f80.  return v1 @kind object;
  #L1c3f82.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c3f84.  @monitorexit v0
  #L1c3f86.  throw v4;
  catch `java.lang.Throwable` @[L1c3f58..L1c3f86] goto L1c3f82;
}
procedure `okhttp3.HttpUrl` `baseUrl`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.baseUrl:()Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a94.  v0:= v1.`retrofit2.Retrofit.c` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c3a98.  return v0 @kind object;
}
procedure `retrofit2.CallAdapter` `callAdapter`(`retrofit2.Retrofit` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lretrofit2/Retrofit;.callAdapter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3aac.  v0:= 0I;
  #L1c3aae.  call temp:= `nextCallAdapter`(v1, v0, v2, v3) @signature `Lretrofit2/Retrofit;.nextCallAdapter:(Lretrofit2/CallAdapter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @kind virtual;
  #L1c3ab4.  v2:= temp @kind object;
  #L1c3ab6.  return v2 @kind object;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a34.  v0:= v1.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3a38.  return v0 @kind object;
}
procedure `okhttp3.Call$Factory` `callFactory`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.callFactory:()Lokhttp3/Call$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a7c.  v0:= v1.`retrofit2.Retrofit.b` @type ^`okhttp3.Call$Factory` @kind object;
  #L1c3a80.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `callbackExecutor`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.callbackExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a64.  v0:= v1.`retrofit2.Retrofit.f` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c3a68.  return v0 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3a4c.  v0:= v1.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3a50.  return v0 @kind object;
}
procedure `java.lang.Object` `create`(`retrofit2.Retrofit` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lretrofit2/Retrofit;.create:(Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c39f4.  call `b`(v3, v4) @signature `Lretrofit2/Retrofit;.b:(Ljava/lang/Class;)V` @kind direct;
  #L1c39fa.  call temp:= `getClassLoader`(v4) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L1c3a00.  v0:= temp @kind object;
  #L1c3a02.  v1:= 1I;
  #L1c3a04.  v1:= new `java.lang.Class`[v1];
  #L1c3a08.  v2:= 0I;
  #L1c3a0a.  v1[v2]:= v4 @kind object;
  #L1c3a0e.  v2:= new `retrofit2.Retrofit$a`;
  #L1c3a12.  call `<init>`(v2, v3, v4) @signature `Lretrofit2/Retrofit$a;.<init>:(Lretrofit2/Retrofit;Ljava/lang/Class;)V` @kind direct;
  #L1c3a18.  call temp:= `newProxyInstance`(v0, v1, v2) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L1c3a1e.  v4:= temp @kind object;
  #L1c3a20.  return v4 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `newBuilder`(`retrofit2.Retrofit` v1 @kind this) @signature `Lretrofit2/Retrofit;.newBuilder:()Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3f20.  v0:= new `retrofit2.Retrofit$Builder`;
  #L1c3f24.  call `<init>`(v0, v1) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @kind direct;
  #L1c3f2a.  return v0 @kind object;
}
procedure `retrofit2.CallAdapter` `nextCallAdapter`(`retrofit2.Retrofit` v4 @kind this, `retrofit2.CallAdapter$Factory` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.annotation.Annotation`[] v7 @kind object) @signature `Lretrofit2/Retrofit;.nextCallAdapter:(Lretrofit2/CallAdapter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3ac8.  v0:= "returnType == null" @kind object;
  #L1c3acc.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3ad2.  v0:= "annotations == null" @kind object;
  #L1c3ad6.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3adc.  v0:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3ae0.  call temp:= `indexOf`(v0, v5) @signature `Ljava/util/List;.indexOf:(Ljava/lang/Object;)I` @kind interface;
  #L1c3ae6.  v0:= temp;
  #L1c3ae8.  v0:= v0 + 1;
  #L1c3aec.  v1:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3af0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3af6.  v1:= temp;
  #L1c3af8.  v2:= v0;
  #L1c3afa.  if v2 >= v1 then goto L1c3b22;
  #L1c3afe.  v3:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3b02.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3b08.  v3:= temp @kind object;
  #L1c3b0a.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L1c3b0e.  call temp:= `get`(v3, v6, v7, v4) @signature `Lretrofit2/CallAdapter$Factory;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @kind virtual;
  #L1c3b14.  v3:= temp @kind object;
  #L1c3b16.  if v3 == 0 then goto L1c3b1c;
  #L1c3b1a.  return v3 @kind object;
  #L1c3b1c.  v2:= v2 + 1;
  #L1c3b20.  goto L1c3afa;
  #L1c3b22.  v7:= new `java.lang.StringBuilder`;
  #L1c3b26.  v1:= "Could not locate call adapter for " @kind object;
  #L1c3b2a.  call `<init>`(v7, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3b30.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b36.  v6:= ".\n" @kind object;
  #L1c3b3a.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b40.  v6:= "\n   * " @kind object;
  #L1c3b44.  if v5 == 0 then goto L1c3b94;
  #L1c3b48.  v5:= "  Skipped:" @kind object;
  #L1c3b4c.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b52.  v5:= 0I;
  #L1c3b54.  if v5 >= v0 then goto L1c3b8a;
  #L1c3b58.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b5e.  v1:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3b62.  call temp:= `get`(v1, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3b68.  v1:= temp @kind object;
  #L1c3b6a.  v1:= (`retrofit2.CallAdapter$Factory`) v1 @kind object;
  #L1c3b6e.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3b74.  v1:= temp @kind object;
  #L1c3b76.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3b7c.  v1:= temp @kind object;
  #L1c3b7e.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b84.  v5:= v5 + 1;
  #L1c3b88.  goto L1c3b54;
  #L1c3b8a.  v5:= 10I;
  #L1c3b8e.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b94.  v5:= "  Tried:" @kind object;
  #L1c3b98.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3b9e.  v5:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3ba2.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3ba8.  v5:= temp;
  #L1c3baa.  if v0 >= v5 then goto L1c3be0;
  #L1c3bae.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3bb4.  v1:= v4.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3bb8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3bbe.  v1:= temp @kind object;
  #L1c3bc0.  v1:= (`retrofit2.CallAdapter$Factory`) v1 @kind object;
  #L1c3bc4.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3bca.  v1:= temp @kind object;
  #L1c3bcc.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3bd2.  v1:= temp @kind object;
  #L1c3bd4.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3bda.  v0:= v0 + 1;
  #L1c3bde.  goto L1c3baa;
  #L1c3be0.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c3be4.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3bea.  v6:= temp @kind object;
  #L1c3bec.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3bf2.  throw v5;
}
procedure `retrofit2.Converter` `nextRequestBodyConverter`(`retrofit2.Retrofit` v4 @kind this, `retrofit2.Converter$Factory` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.annotation.Annotation`[] v7 @kind object, `java.lang.annotation.Annotation`[] v8 @kind object) @signature `Lretrofit2/Retrofit;.nextRequestBodyConverter:(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3c04.  v0:= "type == null" @kind object;
  #L1c3c08.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3c0e.  v0:= "parameterAnnotations == null" @kind object;
  #L1c3c12.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3c18.  v0:= "methodAnnotations == null" @kind object;
  #L1c3c1c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3c22.  v0:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3c26.  call temp:= `indexOf`(v0, v5) @signature `Ljava/util/List;.indexOf:(Ljava/lang/Object;)I` @kind interface;
  #L1c3c2c.  v0:= temp;
  #L1c3c2e.  v0:= v0 + 1;
  #L1c3c32.  v1:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3c36.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3c3c.  v1:= temp;
  #L1c3c3e.  v2:= v0;
  #L1c3c40.  if v2 >= v1 then goto L1c3c68;
  #L1c3c44.  v3:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3c48.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3c4e.  v3:= temp @kind object;
  #L1c3c50.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L1c3c54.  call temp:= `requestBodyConverter`(v3, v6, v7, v8, v4) @signature `Lretrofit2/Converter$Factory;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @kind virtual;
  #L1c3c5a.  v3:= temp @kind object;
  #L1c3c5c.  if v3 == 0 then goto L1c3c62;
  #L1c3c60.  return v3 @kind object;
  #L1c3c62.  v2:= v2 + 1;
  #L1c3c66.  goto L1c3c40;
  #L1c3c68.  v7:= new `java.lang.StringBuilder`;
  #L1c3c6c.  v8:= "Could not locate RequestBody converter for " @kind object;
  #L1c3c70.  call `<init>`(v7, v8) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3c76.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3c7c.  v6:= ".\n" @kind object;
  #L1c3c80.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3c86.  v6:= "\n   * " @kind object;
  #L1c3c8a.  if v5 == 0 then goto L1c3cda;
  #L1c3c8e.  v5:= "  Skipped:" @kind object;
  #L1c3c92.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3c98.  v5:= 0I;
  #L1c3c9a.  if v5 >= v0 then goto L1c3cd0;
  #L1c3c9e.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3ca4.  v8:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3ca8.  call temp:= `get`(v8, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3cae.  v8:= temp @kind object;
  #L1c3cb0.  v8:= (`retrofit2.Converter$Factory`) v8 @kind object;
  #L1c3cb4.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3cba.  v8:= temp @kind object;
  #L1c3cbc.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3cc2.  v8:= temp @kind object;
  #L1c3cc4.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3cca.  v5:= v5 + 1;
  #L1c3cce.  goto L1c3c9a;
  #L1c3cd0.  v5:= 10I;
  #L1c3cd4.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3cda.  v5:= "  Tried:" @kind object;
  #L1c3cde.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3ce4.  v5:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3ce8.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3cee.  v5:= temp;
  #L1c3cf0.  if v0 >= v5 then goto L1c3d26;
  #L1c3cf4.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3cfa.  v8:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3cfe.  call temp:= `get`(v8, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3d04.  v8:= temp @kind object;
  #L1c3d06.  v8:= (`retrofit2.Converter$Factory`) v8 @kind object;
  #L1c3d0a.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3d10.  v8:= temp @kind object;
  #L1c3d12.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3d18.  v8:= temp @kind object;
  #L1c3d1a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3d20.  v0:= v0 + 1;
  #L1c3d24.  goto L1c3cf0;
  #L1c3d26.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c3d2a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3d30.  v6:= temp @kind object;
  #L1c3d32.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3d38.  throw v5;
}
procedure `retrofit2.Converter` `nextResponseBodyConverter`(`retrofit2.Retrofit` v4 @kind this, `retrofit2.Converter$Factory` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.annotation.Annotation`[] v7 @kind object) @signature `Lretrofit2/Retrofit;.nextResponseBodyConverter:(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3d4c.  v0:= "type == null" @kind object;
  #L1c3d50.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3d56.  v0:= "annotations == null" @kind object;
  #L1c3d5a.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3d60.  v0:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3d64.  call temp:= `indexOf`(v0, v5) @signature `Ljava/util/List;.indexOf:(Ljava/lang/Object;)I` @kind interface;
  #L1c3d6a.  v0:= temp;
  #L1c3d6c.  v0:= v0 + 1;
  #L1c3d70.  v1:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3d74.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3d7a.  v1:= temp;
  #L1c3d7c.  v2:= v0;
  #L1c3d7e.  if v2 >= v1 then goto L1c3da6;
  #L1c3d82.  v3:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3d86.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3d8c.  v3:= temp @kind object;
  #L1c3d8e.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L1c3d92.  call temp:= `responseBodyConverter`(v3, v6, v7, v4) @signature `Lretrofit2/Converter$Factory;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @kind virtual;
  #L1c3d98.  v3:= temp @kind object;
  #L1c3d9a.  if v3 == 0 then goto L1c3da0;
  #L1c3d9e.  return v3 @kind object;
  #L1c3da0.  v2:= v2 + 1;
  #L1c3da4.  goto L1c3d7e;
  #L1c3da6.  v7:= new `java.lang.StringBuilder`;
  #L1c3daa.  v1:= "Could not locate ResponseBody converter for " @kind object;
  #L1c3dae.  call `<init>`(v7, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3db4.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3dba.  v6:= ".\n" @kind object;
  #L1c3dbe.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3dc4.  v6:= "\n   * " @kind object;
  #L1c3dc8.  if v5 == 0 then goto L1c3e18;
  #L1c3dcc.  v5:= "  Skipped:" @kind object;
  #L1c3dd0.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3dd6.  v5:= 0I;
  #L1c3dd8.  if v5 >= v0 then goto L1c3e0e;
  #L1c3ddc.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3de2.  v1:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3de6.  call temp:= `get`(v1, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3dec.  v1:= temp @kind object;
  #L1c3dee.  v1:= (`retrofit2.Converter$Factory`) v1 @kind object;
  #L1c3df2.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3df8.  v1:= temp @kind object;
  #L1c3dfa.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3e00.  v1:= temp @kind object;
  #L1c3e02.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e08.  v5:= v5 + 1;
  #L1c3e0c.  goto L1c3dd8;
  #L1c3e0e.  v5:= 10I;
  #L1c3e12.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e18.  v5:= "  Tried:" @kind object;
  #L1c3e1c.  call temp:= `append`(v7, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e22.  v5:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3e26.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3e2c.  v5:= temp;
  #L1c3e2e.  if v0 >= v5 then goto L1c3e64;
  #L1c3e32.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e38.  v1:= v4.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3e3c.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3e42.  v1:= temp @kind object;
  #L1c3e44.  v1:= (`retrofit2.Converter$Factory`) v1 @kind object;
  #L1c3e48.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c3e4e.  v1:= temp @kind object;
  #L1c3e50.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c3e56.  v1:= temp @kind object;
  #L1c3e58.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3e5e.  v0:= v0 + 1;
  #L1c3e62.  goto L1c3e2e;
  #L1c3e64.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c3e68.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3e6e.  v6:= temp @kind object;
  #L1c3e70.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3e76.  throw v5;
}
procedure `retrofit2.Converter` `requestBodyConverter`(`retrofit2.Retrofit` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3e88.  v0:= 0I;
  #L1c3e8a.  call temp:= `nextRequestBodyConverter`(v1, v0, v2, v3, v4) @signature `Lretrofit2/Retrofit;.nextRequestBodyConverter:(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c3e90.  v2:= temp @kind object;
  #L1c3e92.  return v2 @kind object;
}
procedure `retrofit2.Converter` `responseBodyConverter`(`retrofit2.Retrofit` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lretrofit2/Retrofit;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3ea4.  v0:= 0I;
  #L1c3ea6.  call temp:= `nextResponseBodyConverter`(v1, v0, v2, v3) @signature `Lretrofit2/Retrofit;.nextResponseBodyConverter:(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c3eac.  v2:= temp @kind object;
  #L1c3eae.  return v2 @kind object;
}
procedure `retrofit2.Converter` `stringConverter`(`retrofit2.Retrofit` v3 @kind this, `java.lang.reflect.Type` v4 @kind object, `java.lang.annotation.Annotation`[] v5 @kind object) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c3ec0.  v0:= "type == null" @kind object;
  #L1c3ec4.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3eca.  v0:= "annotations == null" @kind object;
  #L1c3ece.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3ed4.  v0:= v3.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3ed8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3ede.  v0:= temp;
  #L1c3ee0.  v1:= 0I;
  #L1c3ee2.  if v1 >= v0 then goto L1c3f0a;
  #L1c3ee6.  v2:= v3.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c3eea.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3ef0.  v2:= temp @kind object;
  #L1c3ef2.  v2:= (`retrofit2.Converter$Factory`) v2 @kind object;
  #L1c3ef6.  call temp:= `stringConverter`(v2, v4, v5, v3) @signature `Lretrofit2/Converter$Factory;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @kind virtual;
  #L1c3efc.  v2:= temp @kind object;
  #L1c3efe.  if v2 == 0 then goto L1c3f04;
  #L1c3f02.  return v2 @kind object;
  #L1c3f04.  v1:= v1 + 1;
  #L1c3f08.  goto L1c3ee2;
  #L1c3f0a.  v4:= `@@retrofit2.a$d.a` @type ^`retrofit2.a$d` @kind object;
  #L1c3f0e.  return v4 @kind object;
}
