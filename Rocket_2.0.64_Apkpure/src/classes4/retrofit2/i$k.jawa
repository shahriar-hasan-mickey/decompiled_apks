record `retrofit2.i$k` @kind class @AccessFlag FINAL extends `retrofit2.i` @kind class {
  `java.lang.reflect.Method` `retrofit2.i$k.a` @AccessFlag PRIVATE_FINAL;
  `int` `retrofit2.i$k.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.i$k.c` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.i$k.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.i$k.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.i$k` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `retrofit2.Converter` v4 @kind object, `boolean` v5 ) @signature `Lretrofit2/i$k;.<init>:(Ljava/lang/reflect/Method;ILjava/lang/String;Lretrofit2/Converter;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c0b14.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c0b1a.  v0.`retrofit2.i$k.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L1c0b1e.  v0.`retrofit2.i$k.b` @type ^`int` := v2;
  #L1c0b22.  v1:= "name == null" @kind object;
  #L1c0b26.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c0b2c.  v0.`retrofit2.i$k.c` @type ^`java.lang.String` := v3 @kind object;
  #L1c0b30.  v0.`retrofit2.i$k.d` @type ^`retrofit2.Converter` := v4 @kind object;
  #L1c0b34.  v0.`retrofit2.i$k.e` @type ^`boolean` := v5 @kind boolean;
  #L1c0b38.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$k` v2 @kind this, `retrofit2.k` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lretrofit2/i$k;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c0b4c.  if v4 == 0 then goto L1c0b70;
  #L1c0b50.  v0:= v2.`retrofit2.i$k.c` @type ^`java.lang.String` @kind object;
  #L1c0b54.  v1:= v2.`retrofit2.i$k.d` @type ^`retrofit2.Converter` @kind object;
  #L1c0b58.  call temp:= `convert`(v1, v4) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c0b5e.  v4:= temp @kind object;
  #L1c0b60.  v4:= (`java.lang.String`) v4 @kind object;
  #L1c0b64.  v1:= v2.`retrofit2.i$k.e` @type ^`boolean` @kind boolean;
  #L1c0b68.  call `f`(v3, v0, v4, v1) @signature `Lretrofit2/k;.f:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind virtual;
  #L1c0b6e.  return @kind void;
  #L1c0b70.  v3:= v2.`retrofit2.i$k.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0b74.  v4:= v2.`retrofit2.i$k.b` @type ^`int`;
  #L1c0b78.  v0:= new `java.lang.StringBuilder`;
  #L1c0b7c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c0b82.  v1:= "Path parameter \"" @kind object;
  #L1c0b86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0b8c.  v1:= v2.`retrofit2.i$k.c` @type ^`java.lang.String` @kind object;
  #L1c0b90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0b96.  v1:= "\" value must not be null." @kind object;
  #L1c0b9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0ba0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c0ba6.  v0:= temp @kind object;
  #L1c0ba8.  v1:= 0I;
  #L1c0baa.  v1:= new `java.lang.Object`[v1];
  #L1c0bae.  call temp:= `o`(v3, v4, v0, v1) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0bb4.  v3:= temp @kind object;
  #L1c0bb6.  throw v3;
}
