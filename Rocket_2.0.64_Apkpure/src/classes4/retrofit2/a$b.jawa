record `retrofit2.a$b` @kind class @AccessFlag FINAL extends `retrofit2.Converter` @kind interface {
}
global `retrofit2.a$b` `@@retrofit2.a$b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/a$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1be404.  v0:= new `retrofit2.a$b`;
  #L1be408.  call `<init>`(v0) @signature `Lretrofit2/a$b;.<init>:()V` @kind direct;
  #L1be40e.  `@@retrofit2.a$b.a` @type ^`retrofit2.a$b` := v0 @kind object;
  #L1be412.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.a$b` v0 @kind this) @signature `Lretrofit2/a$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be424.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1be42a.  return @kind void;
}
procedure `okhttp3.RequestBody` `a`(`retrofit2.a$b` v0 @kind this, `okhttp3.RequestBody` v1 @kind object) @signature `Lretrofit2/a$b;.a:(Lokhttp3/RequestBody;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC {
    temp;

  #L1be3f0.  return v1 @kind object;
}
procedure `java.lang.Object` `convert`(`retrofit2.a$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/a$b;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1be3d0.  v1:= (`okhttp3.RequestBody`) v1 @kind object;
  #L1be3d4.  call temp:= `a`(v0, v1) @signature `Lretrofit2/a$b;.a:(Lokhttp3/RequestBody;)Lokhttp3/RequestBody;` @kind virtual;
  #L1be3da.  v1:= temp @kind object;
  #L1be3dc.  return v1 @kind object;
}
