record `retrofit2.j` @kind class @AccessFlag  {
  `boolean` `retrofit2.j.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Constructor` `retrofit2.j.b` @AccessFlag PRIVATE_FINAL;
}
global `retrofit2.j` `@@retrofit2.j.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c1204.  call temp:= `f`() @signature `Lretrofit2/j;.f:()Lretrofit2/j;` @kind static;
  #L1c120a.  v0:= temp @kind object;
  #L1c120c.  `@@retrofit2.j.c` @type ^`retrofit2.j` := v0 @kind object;
  #L1c1210.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.j` v4 @kind this, `boolean` v5 ) @signature `Lretrofit2/j;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c1224.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c122a.  v4.`retrofit2.j.a` @type ^`boolean` := v5 @kind boolean;
  #L1c122e.  v0:= 0I;
  #L1c1230.  if v5 == 0 then goto L1c1260;
  #L1c1234.  v5:= constclass @type ^`java.lang.invoke.MethodHandles$Lookup` @kind object;
  #L1c1238.  v1:= 2I;
  #L1c123a.  v1:= new `java.lang.Class`[v1];
  #L1c123e.  v2:= 0I;
  #L1c1240.  v3:= constclass @type ^`java.lang.Class` @kind object;
  #L1c1244.  v1[v2]:= v3 @kind object;
  #L1c1248.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c124c.  v3:= 1I;
  #L1c124e.  v1[v3]:= v2 @kind object;
  #L1c1252.  call temp:= `getDeclaredConstructor`(v5, v1) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1c1258.  v0:= temp @kind object;
  #L1c125a.  call `setAccessible`(v0, v3) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L1c1260.  v4.`retrofit2.j.b` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L1c1264.  return @kind void;
  catch `java.lang.NoClassDefFoundError` @[L1c1234..L1c1260] goto L1c1260;
  catch `java.lang.NoSuchMethodException` @[L1c1234..L1c1260] goto L1c1260;
}
procedure `retrofit2.j` `f`() @signature `Lretrofit2/j;.f:()Lretrofit2/j;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1c11a4.  v0:= "java.vm.name" @kind object;
  #L1c11a8.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1c11ae.  v0:= temp @kind object;
  #L1c11b0.  v1:= "Dalvik" @kind object;
  #L1c11b4.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c11ba.  v0:= temp;
  #L1c11bc.  if v0 == 0 then goto L1c11cc;
  #L1c11c0.  v0:= new `retrofit2.j$a`;
  #L1c11c4.  call `<init>`(v0) @signature `Lretrofit2/j$a;.<init>:()V` @kind direct;
  #L1c11ca.  goto L1c11d8;
  #L1c11cc.  v0:= new `retrofit2.j`;
  #L1c11d0.  v1:= 1I;
  #L1c11d2.  call `<init>`(v0, v1) @signature `Lretrofit2/j;.<init>:(Z)V` @kind direct;
  #L1c11d8.  return v0 @kind object;
}
procedure `retrofit2.j` `g`() @signature `Lretrofit2/j;.g:()Lretrofit2/j;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c11ec.  v0:= `@@retrofit2.j.c` @type ^`retrofit2.j` @kind object;
  #L1c11f0.  return v0 @kind object;
}
procedure `java.util.List` `a`(`retrofit2.j` v3 @kind this, `java.util.concurrent.Executor` v4 @kind object) @signature `Lretrofit2/j;.a:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1c1114.  v0:= new `retrofit2.c`;
  #L1c1118.  call `<init>`(v0, v4) @signature `Lretrofit2/c;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L1c111e.  v4:= v3.`retrofit2.j.a` @type ^`boolean` @kind boolean;
  #L1c1122.  if v4 == 0 then goto L1c1146;
  #L1c1126.  v4:= 2I;
  #L1c1128.  v4:= new `retrofit2.CallAdapter$Factory`[v4];
  #L1c112c.  v1:= 0I;
  #L1c112e.  v2:= `@@retrofit2.b.a` @type ^`retrofit2.CallAdapter$Factory` @kind object;
  #L1c1132.  v4[v1]:= v2 @kind object;
  #L1c1136.  v1:= 1I;
  #L1c1138.  v4[v1]:= v0 @kind object;
  #L1c113c.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1c1142.  v4:= temp @kind object;
  #L1c1144.  goto L1c114e;
  #L1c1146.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1c114c.  v4:= temp @kind object;
  #L1c114e.  return v4 @kind object;
}
procedure `int` `b`(`retrofit2.j` v1 @kind this) @signature `Lretrofit2/j;.b:()I` @AccessFlag  {
    temp;
    v0;

  #L1c1078.  v0:= v1.`retrofit2.j.a` @type ^`boolean` @kind boolean;
  #L1c107c.  if v0 == 0 then goto L1c1084;
  #L1c1080.  v0:= 2I;
  #L1c1082.  goto L1c1086;
  #L1c1084.  v0:= 1I;
  #L1c1086.  return v0;
}
procedure `java.util.concurrent.Executor` `c`(`retrofit2.j` v1 @kind this) @signature `Lretrofit2/j;.c:()Ljava/util/concurrent/Executor;` @AccessFlag  {
    temp;
    v0;

  #L1c1190.  v0:= 0I;
  #L1c1192.  return v0 @kind object;
}
procedure `java.util.List` `d`(`retrofit2.j` v1 @kind this) @signature `Lretrofit2/j;.d:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L1c1160.  v0:= v1.`retrofit2.j.a` @type ^`boolean` @kind boolean;
  #L1c1164.  if v0 == 0 then goto L1c1176;
  #L1c1168.  v0:= `@@retrofit2.h.a` @type ^`retrofit2.Converter$Factory` @kind object;
  #L1c116c.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1c1172.  v0:= temp @kind object;
  #L1c1174.  goto L1c117e;
  #L1c1176.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1c117c.  v0:= temp @kind object;
  #L1c117e.  return v0 @kind object;
}
procedure `int` `e`(`retrofit2.j` v1 @kind this) @signature `Lretrofit2/j;.e:()I` @AccessFlag  {
    temp;
    v0;

  #L1c1098.  v0:= v1.`retrofit2.j.a` @type ^`boolean` @kind boolean;
  #L1c109c.  return v0;
}
procedure `java.lang.Object` `h`(`retrofit2.j` v4 @kind this, `java.lang.reflect.Method` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object) @signature `Lretrofit2/j;.h:(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c10b0.  v0:= v4.`retrofit2.j.b` @type ^`java.lang.reflect.Constructor` @kind object;
  #L1c10b4.  if v0 == 0 then goto L1c10e2;
  #L1c10b8.  v1:= 2I;
  #L1c10ba.  v1:= new `java.lang.Object`[v1];
  #L1c10be.  v2:= 0I;
  #L1c10c0.  v1[v2]:= v6 @kind object;
  #L1c10c4.  v2:= 1I;
  #L1c10c6.  v3:= -1I;
  #L1c10c8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1c10ce.  v3:= temp @kind object;
  #L1c10d0.  v1[v2]:= v3 @kind object;
  #L1c10d4.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c10da.  v0:= temp @kind object;
  #L1c10dc.  v0:= (`java.lang.invoke.MethodHandles$Lookup`) v0 @kind object;
  #L1c10e0.  goto L1c10ea;
  #L1c10e2.  call temp:= `lookup`() @signature `Ljava/lang/invoke/MethodHandles;.lookup:()Ljava/lang/invoke/MethodHandles$Lookup;` @kind static;
  #L1c10e8.  v0:= temp @kind object;
  #L1c10ea.  call temp:= `unreflectSpecial`(v0, v5, v6) @signature `Ljava/lang/invoke/MethodHandles$Lookup;.unreflectSpecial:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L1c10f0.  v5:= temp @kind object;
  #L1c10f2.  call temp:= `bindTo`(v5, v7) @signature `Ljava/lang/invoke/MethodHandle;.bindTo:(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L1c10f8.  v5:= temp @kind object;
  #L1c10fa.  call temp:= `invokeWithArguments`(v5, v8) @signature `Ljava/lang/invoke/MethodHandle;.invokeWithArguments:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1c1100.  v5:= temp @kind object;
  #L1c1102.  return v5 @kind object;
}
procedure `boolean` `i`(`retrofit2.j` v1 @kind this, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/j;.i:(Ljava/lang/reflect/Method;)Z` @AccessFlag  {
    temp;
    v0;

  #L1c104c.  v0:= v1.`retrofit2.j.a` @type ^`boolean` @kind boolean;
  #L1c1050.  if v0 == 0 then goto L1c1064;
  #L1c1054.  call temp:= `isDefault`(v2) @signature `Ljava/lang/reflect/Method;.isDefault:()Z` @kind virtual;
  #L1c105a.  v2:= temp;
  #L1c105c.  if v2 == 0 then goto L1c1064;
  #L1c1060.  v2:= 1I;
  #L1c1062.  goto L1c1066;
  #L1c1064.  v2:= 0I;
  #L1c1066.  return v2;
}
