record `retrofit2.converter.scalars.ScalarsConverterFactory` @kind class @AccessFlag PUBLIC_FINAL extends `retrofit2.Converter$Factory` @kind class {
}
procedure `void` `<init>`(`retrofit2.converter.scalars.ScalarsConverterFactory` v0 @kind this) @signature `Lretrofit2/converter/scalars/ScalarsConverterFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c6498.  call `<init>`(v0) @signature `Lretrofit2/Converter$Factory;.<init>:()V` @kind direct;
  #L1c649e.  return @kind void;
}
procedure `retrofit2.converter.scalars.ScalarsConverterFactory` `create`() @signature `Lretrofit2/converter/scalars/ScalarsConverterFactory;.create:()Lretrofit2/converter/scalars/ScalarsConverterFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c647c.  v0:= new `retrofit2.converter.scalars.ScalarsConverterFactory`;
  #L1c6480.  call `<init>`(v0) @signature `Lretrofit2/converter/scalars/ScalarsConverterFactory;.<init>:()V` @kind direct;
  #L1c6486.  return v0 @kind object;
}
procedure `retrofit2.Converter` `requestBodyConverter`(`retrofit2.converter.scalars.ScalarsConverterFactory` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/converter/scalars/ScalarsConverterFactory;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1c62f4.  v2:= constclass @type ^`java.lang.String` @kind object;
  #L1c62f8.  if v1 == v2 then goto L1c6382;
  #L1c62fc.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6300.  if v1 == v2 then goto L1c6382;
  #L1c6304.  v2:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1c6308.  if v1 == v2 then goto L1c6382;
  #L1c630c.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6310.  if v1 == v2 then goto L1c6382;
  #L1c6314.  v2:= constclass @type ^`java.lang.Byte` @kind object;
  #L1c6318.  if v1 == v2 then goto L1c6382;
  #L1c631c.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6320.  if v1 == v2 then goto L1c6382;
  #L1c6324.  v2:= constclass @type ^`java.lang.Character` @kind object;
  #L1c6328.  if v1 == v2 then goto L1c6382;
  #L1c632c.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6330.  if v1 == v2 then goto L1c6382;
  #L1c6334.  v2:= constclass @type ^`java.lang.Double` @kind object;
  #L1c6338.  if v1 == v2 then goto L1c6382;
  #L1c633c.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6340.  if v1 == v2 then goto L1c6382;
  #L1c6344.  v2:= constclass @type ^`java.lang.Float` @kind object;
  #L1c6348.  if v1 == v2 then goto L1c6382;
  #L1c634c.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6350.  if v1 == v2 then goto L1c6382;
  #L1c6354.  v2:= constclass @type ^`java.lang.Integer` @kind object;
  #L1c6358.  if v1 == v2 then goto L1c6382;
  #L1c635c.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6360.  if v1 == v2 then goto L1c6382;
  #L1c6364.  v2:= constclass @type ^`java.lang.Long` @kind object;
  #L1c6368.  if v1 == v2 then goto L1c6382;
  #L1c636c.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6370.  if v1 == v2 then goto L1c6382;
  #L1c6374.  v2:= constclass @type ^`java.lang.Short` @kind object;
  #L1c6378.  if v1 != v2 then goto L1c637e;
  #L1c637c.  goto L1c6382;
  #L1c637e.  v1:= 0I;
  #L1c6380.  return v1 @kind object;
  #L1c6382.  v1:= `@@retrofit2.converter.scalars.a.a` @type ^`retrofit2.converter.scalars.a` @kind object;
  #L1c6386.  return v1 @kind object;
}
procedure `retrofit2.Converter` `responseBodyConverter`(`retrofit2.converter.scalars.ScalarsConverterFactory` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `retrofit2.Retrofit` v3 @kind object) @signature `Lretrofit2/converter/scalars/ScalarsConverterFactory;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1c6398.  v2:= constclass @type ^`java.lang.String` @kind object;
  #L1c639c.  if v1 != v2 then goto L1c63a6;
  #L1c63a0.  v1:= `@@retrofit2.converter.scalars.j.a` @type ^`retrofit2.converter.scalars.j` @kind object;
  #L1c63a4.  return v1 @kind object;
  #L1c63a6.  v2:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1c63aa.  if v1 == v2 then goto L1c6464;
  #L1c63ae.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c63b2.  if v1 != v2 then goto L1c63b8;
  #L1c63b6.  goto L1c6464;
  #L1c63b8.  v2:= constclass @type ^`java.lang.Byte` @kind object;
  #L1c63bc.  if v1 == v2 then goto L1c645e;
  #L1c63c0.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c63c4.  if v1 != v2 then goto L1c63ca;
  #L1c63c8.  goto L1c645e;
  #L1c63ca.  v2:= constclass @type ^`java.lang.Character` @kind object;
  #L1c63ce.  if v1 == v2 then goto L1c6458;
  #L1c63d2.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c63d6.  if v1 != v2 then goto L1c63dc;
  #L1c63da.  goto L1c6458;
  #L1c63dc.  v2:= constclass @type ^`java.lang.Double` @kind object;
  #L1c63e0.  if v1 == v2 then goto L1c6452;
  #L1c63e4.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c63e8.  if v1 != v2 then goto L1c63ee;
  #L1c63ec.  goto L1c6452;
  #L1c63ee.  v2:= constclass @type ^`java.lang.Float` @kind object;
  #L1c63f2.  if v1 == v2 then goto L1c644c;
  #L1c63f6.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c63fa.  if v1 != v2 then goto L1c6400;
  #L1c63fe.  goto L1c644c;
  #L1c6400.  v2:= constclass @type ^`java.lang.Integer` @kind object;
  #L1c6404.  if v1 == v2 then goto L1c6446;
  #L1c6408.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c640c.  if v1 != v2 then goto L1c6412;
  #L1c6410.  goto L1c6446;
  #L1c6412.  v2:= constclass @type ^`java.lang.Long` @kind object;
  #L1c6416.  if v1 == v2 then goto L1c6440;
  #L1c641a.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c641e.  if v1 != v2 then goto L1c6424;
  #L1c6422.  goto L1c6440;
  #L1c6424.  v2:= constclass @type ^`java.lang.Short` @kind object;
  #L1c6428.  if v1 == v2 then goto L1c643a;
  #L1c642c.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c6430.  if v1 != v2 then goto L1c6436;
  #L1c6434.  goto L1c643a;
  #L1c6436.  v1:= 0I;
  #L1c6438.  return v1 @kind object;
  #L1c643a.  v1:= `@@retrofit2.converter.scalars.i.a` @type ^`retrofit2.converter.scalars.i` @kind object;
  #L1c643e.  return v1 @kind object;
  #L1c6440.  v1:= `@@retrofit2.converter.scalars.h.a` @type ^`retrofit2.converter.scalars.h` @kind object;
  #L1c6444.  return v1 @kind object;
  #L1c6446.  v1:= `@@retrofit2.converter.scalars.g.a` @type ^`retrofit2.converter.scalars.g` @kind object;
  #L1c644a.  return v1 @kind object;
  #L1c644c.  v1:= `@@retrofit2.converter.scalars.f.a` @type ^`retrofit2.converter.scalars.f` @kind object;
  #L1c6450.  return v1 @kind object;
  #L1c6452.  v1:= `@@retrofit2.converter.scalars.e.a` @type ^`retrofit2.converter.scalars.e` @kind object;
  #L1c6456.  return v1 @kind object;
  #L1c6458.  v1:= `@@retrofit2.converter.scalars.d.a` @type ^`retrofit2.converter.scalars.d` @kind object;
  #L1c645c.  return v1 @kind object;
  #L1c645e.  v1:= `@@retrofit2.converter.scalars.c.a` @type ^`retrofit2.converter.scalars.c` @kind object;
  #L1c6462.  return v1 @kind object;
  #L1c6464.  v1:= `@@retrofit2.converter.scalars.b.a` @type ^`retrofit2.converter.scalars.b` @kind object;
  #L1c6468.  return v1 @kind object;
}
