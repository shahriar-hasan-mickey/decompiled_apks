record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `retrofit2.j` `retrofit2.Retrofit$Builder.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.b` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.c` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `retrofit2.Retrofit$Builder.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.f` @AccessFlag PRIVATE;
  `boolean` `retrofit2.Retrofit$Builder.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c38c0.  call temp:= `g`() @signature `Lretrofit2/j;.g:()Lretrofit2/j;` @kind static;
  #L1c38c6.  v0:= temp @kind object;
  #L1c38c8.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/j;)V` @kind direct;
  #L1c38ce.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v4 @kind this, `retrofit2.Retrofit` v5 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c3918.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c391e.  v0:= new `java.util.ArrayList`;
  #L1c3922.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c3928.  v4.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` := v0 @kind object;
  #L1c392c.  v0:= new `java.util.ArrayList`;
  #L1c3930.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c3936.  v4.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` := v0 @kind object;
  #L1c393a.  call temp:= `g`() @signature `Lretrofit2/j;.g:()Lretrofit2/j;` @kind static;
  #L1c3940.  v0:= temp @kind object;
  #L1c3942.  v4.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` := v0 @kind object;
  #L1c3946.  v1:= v5.`retrofit2.Retrofit.b` @type ^`okhttp3.Call$Factory` @kind object;
  #L1c394a.  v4.`retrofit2.Retrofit$Builder.b` @type ^`okhttp3.Call$Factory` := v1 @kind object;
  #L1c394e.  v1:= v5.`retrofit2.Retrofit.c` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c3952.  v4.`retrofit2.Retrofit$Builder.c` @type ^`okhttp3.HttpUrl` := v1 @kind object;
  #L1c3956.  v1:= v5.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c395a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3960.  v1:= temp;
  #L1c3962.  call temp:= `e`(v0) @signature `Lretrofit2/j;.e:()I` @kind virtual;
  #L1c3968.  v0:= temp;
  #L1c396a.  v1:= v1 - v0 @kind int;
  #L1c396c.  v0:= 1I;
  #L1c396e.  if v0 >= v1 then goto L1c3992;
  #L1c3972.  v2:= v4.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` @kind object;
  #L1c3976.  v3:= v5.`retrofit2.Retrofit.d` @type ^`java.util.List` @kind object;
  #L1c397a.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c3980.  v3:= temp @kind object;
  #L1c3982.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L1c3986.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c398c.  v0:= v0 + 1;
  #L1c3990.  goto L1c396e;
  #L1c3992.  v0:= 0I;
  #L1c3994.  v1:= v5.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c3998.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c399e.  v1:= temp;
  #L1c39a0.  v2:= v4.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` @kind object;
  #L1c39a4.  call temp:= `b`(v2) @signature `Lretrofit2/j;.b:()I` @kind virtual;
  #L1c39aa.  v2:= temp;
  #L1c39ac.  v1:= v1 - v2 @kind int;
  #L1c39ae.  if v0 >= v1 then goto L1c39d2;
  #L1c39b2.  v2:= v4.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` @kind object;
  #L1c39b6.  v3:= v5.`retrofit2.Retrofit.e` @type ^`java.util.List` @kind object;
  #L1c39ba.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c39c0.  v3:= temp @kind object;
  #L1c39c2.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L1c39c6.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c39cc.  v0:= v0 + 1;
  #L1c39d0.  goto L1c39ae;
  #L1c39d2.  v0:= v5.`retrofit2.Retrofit.f` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c39d6.  v4.`retrofit2.Retrofit$Builder.f` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1c39da.  v5:= v5.`retrofit2.Retrofit.g` @type ^`boolean` @kind boolean;
  #L1c39de.  v4.`retrofit2.Retrofit$Builder.g` @type ^`boolean` := v5 @kind boolean;
  #L1c39e2.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.j` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/j;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c38e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c38e6.  v0:= new `java.util.ArrayList`;
  #L1c38ea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c38f0.  v1.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` := v0 @kind object;
  #L1c38f4.  v0:= new `java.util.ArrayList`;
  #L1c38f8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c38fe.  v1.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` := v0 @kind object;
  #L1c3902.  v1.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` := v2 @kind object;
  #L1c3906.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c370c.  v0:= v2.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` @kind object;
  #L1c3710.  v1:= "factory == null" @kind object;
  #L1c3714.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c371a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3720.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c3734.  v0:= v2.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` @kind object;
  #L1c3738.  v1:= "factory == null" @kind object;
  #L1c373c.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3742.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c3748.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c375c.  v0:= "baseUrl == null" @kind object;
  #L1c3760.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3766.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1c376c.  v2:= temp @kind object;
  #L1c376e.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1c3774.  v2:= temp @kind object;
  #L1c3776.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/net/URL;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3788.  v0:= "baseUrl == null" @kind object;
  #L1c378c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3792.  call temp:= `toString`(v2) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c3798.  v2:= temp @kind object;
  #L1c379a.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1c37a0.  v2:= temp @kind object;
  #L1c37a2.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1c37a8.  v2:= temp @kind object;
  #L1c37aa.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v3 @kind this, `okhttp3.HttpUrl` v4 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c37bc.  v0:= "baseUrl == null" @kind object;
  #L1c37c0.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c37c6.  call temp:= `pathSegments`(v4) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L1c37cc.  v0:= temp @kind object;
  #L1c37ce.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c37d4.  v1:= temp;
  #L1c37d6.  v1:= v1 + -1;
  #L1c37da.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1c37e0.  v0:= temp @kind object;
  #L1c37e2.  v1:= "" @kind object;
  #L1c37e6.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c37ec.  v0:= temp;
  #L1c37ee.  if v0 == 0 then goto L1c37f8;
  #L1c37f2.  v3.`retrofit2.Retrofit$Builder.c` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L1c37f6.  return v3 @kind object;
  #L1c37f8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1c37fc.  v1:= new `java.lang.StringBuilder`;
  #L1c3800.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c3806.  v2:= "baseUrl must end in /: " @kind object;
  #L1c380a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3810.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c3816.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c381c.  v4:= temp @kind object;
  #L1c381e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3824.  throw v0;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1c3620.  v0:= v9.`retrofit2.Retrofit$Builder.c` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c3624.  if v0 == 0 then goto L1c36ec;
  #L1c3628.  v0:= v9.`retrofit2.Retrofit$Builder.b` @type ^`okhttp3.Call$Factory` @kind object;
  #L1c362c.  if v0 != 0 then goto L1c363a;
  #L1c3630.  v0:= new `okhttp3.OkHttpClient`;
  #L1c3634.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L1c363a.  v2:= v0 @kind object;
  #L1c363c.  v0:= v9.`retrofit2.Retrofit$Builder.f` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c3640.  if v0 != 0 then goto L1c3650;
  #L1c3644.  v0:= v9.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` @kind object;
  #L1c3648.  call temp:= `c`(v0) @signature `Lretrofit2/j;.c:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L1c364e.  v0:= temp @kind object;
  #L1c3650.  v6:= v0 @kind object;
  #L1c3652.  v0:= new `java.util.ArrayList`;
  #L1c3656.  v1:= v9.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` @kind object;
  #L1c365a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1c3660.  v1:= v9.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` @kind object;
  #L1c3664.  call temp:= `a`(v1, v6) @signature `Lretrofit2/j;.a:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @kind virtual;
  #L1c366a.  v1:= temp @kind object;
  #L1c366c.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1c3672.  v1:= new `java.util.ArrayList`;
  #L1c3676.  v3:= v9.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` @kind object;
  #L1c367a.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1c3680.  v3:= temp;
  #L1c3682.  v3:= v3 + 1;
  #L1c3686.  v4:= v9.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` @kind object;
  #L1c368a.  call temp:= `e`(v4) @signature `Lretrofit2/j;.e:()I` @kind virtual;
  #L1c3690.  v4:= temp;
  #L1c3692.  v3:= v3 + v4 @kind int;
  #L1c3694.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1c369a.  v3:= new `retrofit2.a`;
  #L1c369e.  call `<init>`(v3) @signature `Lretrofit2/a;.<init>:()V` @kind direct;
  #L1c36a4.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c36aa.  v3:= v9.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` @kind object;
  #L1c36ae.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1c36b4.  v3:= v9.`retrofit2.Retrofit$Builder.a` @type ^`retrofit2.j` @kind object;
  #L1c36b8.  call temp:= `d`(v3) @signature `Lretrofit2/j;.d:()Ljava/util/List;` @kind virtual;
  #L1c36be.  v3:= temp @kind object;
  #L1c36c0.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1c36c6.  v8:= new `retrofit2.Retrofit`;
  #L1c36ca.  v3:= v9.`retrofit2.Retrofit$Builder.c` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c36ce.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1c36d4.  v4:= temp @kind object;
  #L1c36d6.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1c36dc.  v5:= temp @kind object;
  #L1c36de.  v7:= v9.`retrofit2.Retrofit$Builder.g` @type ^`boolean` @kind boolean;
  #L1c36e2.  v1:= v8 @kind object;
  #L1c36e4.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L1c36ea.  return v8 @kind object;
  #L1c36ec.  v0:= new `java.lang.IllegalStateException`;
  #L1c36f0.  v1:= "Base URL required." @kind object;
  #L1c36f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c36fa.  throw v0;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c35f0.  v0:= v1.`retrofit2.Retrofit$Builder.e` @type ^`java.util.List` @kind object;
  #L1c35f4.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3838.  v0:= "factory == null" @kind object;
  #L1c383c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3842.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L1c3846.  v1.`retrofit2.Retrofit$Builder.b` @type ^`okhttp3.Call$Factory` := v2 @kind object;
  #L1c384a.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c385c.  v0:= "executor == null" @kind object;
  #L1c3860.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3866.  v2:= (`java.util.concurrent.Executor`) v2 @kind object;
  #L1c386a.  v1.`retrofit2.Retrofit$Builder.f` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L1c386e.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3880.  v0:= "client == null" @kind object;
  #L1c3884.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c388a.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L1c388e.  call temp:= `callFactory`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1c3894.  v2:= temp @kind object;
  #L1c3896.  return v2 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3608.  v0:= v1.`retrofit2.Retrofit$Builder.d` @type ^`java.util.List` @kind object;
  #L1c360c.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 ) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L1c38a8.  v0.`retrofit2.Retrofit$Builder.g` @type ^`boolean` := v1 @kind boolean;
  #L1c38ac.  return v0 @kind object;
}
