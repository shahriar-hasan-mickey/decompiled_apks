record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.Response` `retrofit2.Response.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `retrofit2.Response.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c3528.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c352e.  v0.`retrofit2.Response.a` @type ^`okhttp3.Response` := v1 @kind object;
  #L1c3532.  v0.`retrofit2.Response.b` @type ^`java.lang.Object` := v2 @kind object;
  #L1c3536.  v0.`retrofit2.Response.c` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L1c353a.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v5 , `okhttp3.ResponseBody` v6 @kind object) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c3210.  v0:= "body == null" @kind object;
  #L1c3214.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c321a.  v0:= 400I;
  #L1c321e.  if v5 < v0 then goto L1c32a6;
  #L1c3222.  v0:= new `okhttp3.Response$Builder`;
  #L1c3226.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1c322c.  v1:= new `retrofit2.g$c`;
  #L1c3230.  call temp:= `contentType`(v6) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1c3236.  v2:= temp @kind object;
  #L1c3238.  call temp:= `contentLength`(v6) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1c323e.  v3:= temp @kind wide;
  #L1c3240.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/g$c;.<init>:(Lokhttp3/MediaType;J)V` @kind direct;
  #L1c3246.  call temp:= `body`(v0, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c324c.  v0:= temp @kind object;
  #L1c324e.  call temp:= `code`(v0, v5) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3254.  v5:= temp @kind object;
  #L1c3256.  v0:= "Response.error()" @kind object;
  #L1c325a.  call temp:= `message`(v5, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3260.  v5:= temp @kind object;
  #L1c3262.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1c3266.  call temp:= `protocol`(v5, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c326c.  v5:= temp @kind object;
  #L1c326e.  v0:= new `okhttp3.Request$Builder`;
  #L1c3272.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1c3278.  v1:= "http://localhost/" @kind object;
  #L1c327c.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c3282.  v0:= temp @kind object;
  #L1c3284.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1c328a.  v0:= temp @kind object;
  #L1c328c.  call temp:= `request`(v5, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3292.  v5:= temp @kind object;
  #L1c3294.  call temp:= `build`(v5) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1c329a.  v5:= temp @kind object;
  #L1c329c.  call temp:= `error`(v6, v5) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1c32a2.  v5:= temp @kind object;
  #L1c32a4.  return v5 @kind object;
  #L1c32a6.  v6:= new `java.lang.IllegalArgumentException`;
  #L1c32aa.  v0:= new `java.lang.StringBuilder`;
  #L1c32ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c32b4.  v1:= "code < 400: " @kind object;
  #L1c32b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c32be.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c32c4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c32ca.  v5:= temp @kind object;
  #L1c32cc.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c32d2.  throw v6;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c32e4.  v0:= "body == null" @kind object;
  #L1c32e8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c32ee.  v0:= "rawResponse == null" @kind object;
  #L1c32f2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c32f8.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1c32fe.  v0:= temp;
  #L1c3300.  if v0 != 0 then goto L1c3312;
  #L1c3304.  v0:= new `retrofit2.Response`;
  #L1c3308.  v1:= 0I;
  #L1c330a.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1c3310.  return v0 @kind object;
  #L1c3312.  v2:= new `java.lang.IllegalArgumentException`;
  #L1c3316.  v3:= "rawResponse should not be successful response" @kind object;
  #L1c331a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3320.  throw v2;
}
procedure `retrofit2.Response` `success`(`int` v2 , `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(ILjava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c3334.  v0:= 200I;
  #L1c3338.  if v2 < v0 then goto L1c33a6;
  #L1c333c.  v0:= 300I;
  #L1c3340.  if v2 >= v0 then goto L1c33a6;
  #L1c3344.  v0:= new `okhttp3.Response$Builder`;
  #L1c3348.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1c334e.  call temp:= `code`(v0, v2) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3354.  v2:= temp @kind object;
  #L1c3356.  v0:= "Response.success()" @kind object;
  #L1c335a.  call temp:= `message`(v2, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3360.  v2:= temp @kind object;
  #L1c3362.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1c3366.  call temp:= `protocol`(v2, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c336c.  v2:= temp @kind object;
  #L1c336e.  v0:= new `okhttp3.Request$Builder`;
  #L1c3372.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1c3378.  v1:= "http://localhost/" @kind object;
  #L1c337c.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c3382.  v0:= temp @kind object;
  #L1c3384.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1c338a.  v0:= temp @kind object;
  #L1c338c.  call temp:= `request`(v2, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3392.  v2:= temp @kind object;
  #L1c3394.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1c339a.  v2:= temp @kind object;
  #L1c339c.  call temp:= `success`(v3, v2) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1c33a2.  v2:= temp @kind object;
  #L1c33a4.  return v2 @kind object;
  #L1c33a6.  v3:= new `java.lang.IllegalArgumentException`;
  #L1c33aa.  v0:= new `java.lang.StringBuilder`;
  #L1c33ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c33b4.  v1:= "code < 200 or >= 300: " @kind object;
  #L1c33b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c33be.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c33c4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c33ca.  v2:= temp @kind object;
  #L1c33cc.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c33d2.  throw v3;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c33e4.  v0:= new `okhttp3.Response$Builder`;
  #L1c33e8.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1c33ee.  v1:= 200I;
  #L1c33f2.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c33f8.  v0:= temp @kind object;
  #L1c33fa.  v1:= "OK" @kind object;
  #L1c33fe.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3404.  v0:= temp @kind object;
  #L1c3406.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1c340a.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3410.  v0:= temp @kind object;
  #L1c3412.  v1:= new `okhttp3.Request$Builder`;
  #L1c3416.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1c341c.  v2:= "http://localhost/" @kind object;
  #L1c3420.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c3426.  v1:= temp @kind object;
  #L1c3428.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1c342e.  v1:= temp @kind object;
  #L1c3430.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3436.  v0:= temp @kind object;
  #L1c3438.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1c343e.  v0:= temp @kind object;
  #L1c3440.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1c3446.  v3:= temp @kind object;
  #L1c3448.  return v3 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Headers` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c345c.  v0:= "headers == null" @kind object;
  #L1c3460.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c3466.  v0:= new `okhttp3.Response$Builder`;
  #L1c346a.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1c3470.  v1:= 200I;
  #L1c3474.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c347a.  v0:= temp @kind object;
  #L1c347c.  v1:= "OK" @kind object;
  #L1c3480.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3486.  v0:= temp @kind object;
  #L1c3488.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1c348c.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c3492.  v0:= temp @kind object;
  #L1c3494.  call temp:= `headers`(v0, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c349a.  v3:= temp @kind object;
  #L1c349c.  v0:= new `okhttp3.Request$Builder`;
  #L1c34a0.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1c34a6.  v1:= "http://localhost/" @kind object;
  #L1c34aa.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c34b0.  v0:= temp @kind object;
  #L1c34b2.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1c34b8.  v0:= temp @kind object;
  #L1c34ba.  call temp:= `request`(v3, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1c34c0.  v3:= temp @kind object;
  #L1c34c2.  call temp:= `build`(v3) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1c34c8.  v3:= temp @kind object;
  #L1c34ca.  call temp:= `success`(v2, v3) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1c34d0.  v2:= temp @kind object;
  #L1c34d2.  return v2 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c34e4.  v0:= "rawResponse == null" @kind object;
  #L1c34e8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c34ee.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1c34f4.  v0:= temp;
  #L1c34f6.  if v0 == 0 then goto L1c3508;
  #L1c34fa.  v0:= new `retrofit2.Response`;
  #L1c34fe.  v1:= 0I;
  #L1c3500.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1c3506.  return v0 @kind object;
  #L1c3508.  v2:= new `java.lang.IllegalArgumentException`;
  #L1c350c.  v3:= "rawResponse must be successful response" @kind object;
  #L1c3510.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c3516.  throw v2;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3168.  v0:= v1.`retrofit2.Response.b` @type ^`java.lang.Object` @kind object;
  #L1c316c.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3148.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c314c.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1c3152.  v0:= temp;
  #L1c3154.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c31f8.  v0:= v1.`retrofit2.Response.c` @type ^`okhttp3.ResponseBody` @kind object;
  #L1c31fc.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c31c0.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c31c4.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L1c31ca.  v0:= temp @kind object;
  #L1c31cc.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3128.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c312c.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1c3132.  v0:= temp;
  #L1c3134.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c3180.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c3184.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L1c318a.  v0:= temp @kind object;
  #L1c318c.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c31e0.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c31e4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c31a0.  v0:= v1.`retrofit2.Response.a` @type ^`okhttp3.Response` @kind object;
  #L1c31a4.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c31aa.  v0:= temp @kind object;
  #L1c31ac.  return v0 @kind object;
}
