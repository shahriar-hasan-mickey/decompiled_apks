record `retrofit2.a` @kind class @AccessFlag FINAL extends `retrofit2.Converter$Factory` @kind class {
  `boolean` `retrofit2.a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.a` v1 @kind this) @signature `Lretrofit2/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1be6a8.  call `<init>`(v1) @signature `Lretrofit2/Converter$Factory;.<init>:()V` @kind direct;
  #L1be6ae.  v0:= 1I;
  #L1be6b0.  v1.`retrofit2.a.a` @type ^`boolean` := v0 @kind boolean;
  #L1be6b4.  return @kind void;
}
procedure `retrofit2.Converter` `requestBodyConverter`(`retrofit2.a` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/a;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1be600.  v2:= constclass @type ^`okhttp3.RequestBody` @kind object;
  #L1be604.  call temp:= `h`(v1) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1be60a.  v1:= temp @kind object;
  #L1be60c.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1be612.  v1:= temp;
  #L1be614.  if v1 == 0 then goto L1be61e;
  #L1be618.  v1:= `@@retrofit2.a$b.a` @type ^`retrofit2.a$b` @kind object;
  #L1be61c.  return v1 @kind object;
  #L1be61e.  v1:= 0I;
  #L1be620.  return v1 @kind object;
}
procedure `retrofit2.Converter` `responseBodyConverter`(`retrofit2.a` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.annotation.Annotation`[] v2 @kind object, `retrofit2.Retrofit` v3 @kind object) @signature `Lretrofit2/a;.responseBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/Converter;` @AccessFlag PUBLIC {
    temp;

  #L1be634.  v3:= constclass @type ^`okhttp3.ResponseBody` @kind object;
  #L1be638.  if v1 != v3 then goto L1be658;
  #L1be63c.  v1:= constclass @type ^`retrofit2.http.Streaming` @kind object;
  #L1be640.  call temp:= `l`(v2, v1) @signature `Lretrofit2/o;.l:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @kind static;
  #L1be646.  v1:= temp;
  #L1be648.  if v1 == 0 then goto L1be652;
  #L1be64c.  v1:= `@@retrofit2.a$c.a` @type ^`retrofit2.a$c` @kind object;
  #L1be650.  goto L1be656;
  #L1be652.  v1:= `@@retrofit2.a$a.a` @type ^`retrofit2.a$a` @kind object;
  #L1be656.  return v1 @kind object;
  #L1be658.  v2:= constclass @type ^`java.lang.Void` @kind object;
  #L1be65c.  if v1 != v2 then goto L1be666;
  #L1be660.  v1:= `@@retrofit2.a$f.a` @type ^`retrofit2.a$f` @kind object;
  #L1be664.  return v1 @kind object;
  #L1be666.  v2:= v0.`retrofit2.a.a` @type ^`boolean` @kind boolean;
  #L1be66a.  if v2 == 0 then goto L1be682;
  #L1be66e.  v2:= constclass @type ^`kotlin.Unit` @kind object;
  #L1be672.  if v1 != v2 then goto L1be682;
  #L1be676.  v1:= `@@retrofit2.a$e.a` @type ^`retrofit2.a$e` @kind object;
  #L1be67a.  return v1 @kind object;
  #L1be67c.  v1:= 0I;
  #L1be67e.  v0.`retrofit2.a.a` @type ^`boolean` := v1 @kind boolean;
  #L1be682.  v1:= 0I;
  #L1be684.  return v1 @kind object;
  catch `java.lang.NoClassDefFoundError` @[L1be66e..L1be67a] goto L1be67c;
}
