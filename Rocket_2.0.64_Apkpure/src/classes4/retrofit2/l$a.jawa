record `retrofit2.l$a` @kind class @AccessFlag FINAL {
  `retrofit2.Retrofit` `retrofit2.l$a.a` @AccessFlag FINAL;
  `java.lang.reflect.Method` `retrofit2.l$a.b` @AccessFlag FINAL;
  `java.lang.annotation.Annotation`[] `retrofit2.l$a.c` @AccessFlag FINAL;
  `java.lang.annotation.Annotation`[][] `retrofit2.l$a.d` @AccessFlag FINAL;
  `java.lang.reflect.Type`[] `retrofit2.l$a.e` @AccessFlag FINAL;
  `boolean` `retrofit2.l$a.f` @AccessFlag ;
  `boolean` `retrofit2.l$a.g` @AccessFlag ;
  `boolean` `retrofit2.l$a.h` @AccessFlag ;
  `boolean` `retrofit2.l$a.i` @AccessFlag ;
  `boolean` `retrofit2.l$a.j` @AccessFlag ;
  `boolean` `retrofit2.l$a.k` @AccessFlag ;
  `boolean` `retrofit2.l$a.l` @AccessFlag ;
  `boolean` `retrofit2.l$a.m` @AccessFlag ;
  `java.lang.String` `retrofit2.l$a.n` @AccessFlag ;
  `boolean` `retrofit2.l$a.o` @AccessFlag ;
  `boolean` `retrofit2.l$a.p` @AccessFlag ;
  `boolean` `retrofit2.l$a.q` @AccessFlag ;
  `java.lang.String` `retrofit2.l$a.r` @AccessFlag ;
  `okhttp3.Headers` `retrofit2.l$a.s` @AccessFlag ;
  `okhttp3.MediaType` `retrofit2.l$a.t` @AccessFlag ;
  `java.util.Set` `retrofit2.l$a.u` @AccessFlag ;
  `retrofit2.i`[] `retrofit2.l$a.v` @AccessFlag ;
  `boolean` `retrofit2.l$a.w` @AccessFlag ;
}
global `java.util.regex.Pattern` `@@retrofit2.l$a.x` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.l$a.y` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/l$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c2bd4.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L1c2bd8.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1c2bde.  v0:= temp @kind object;
  #L1c2be0.  `@@retrofit2.l$a.x` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1c2be4.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L1c2be8.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1c2bee.  v0:= temp @kind object;
  #L1c2bf0.  `@@retrofit2.l$a.y` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1c2bf4.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.l$a` v0 @kind this, `retrofit2.Retrofit` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/l$a;.<init>:(Lretrofit2/Retrofit;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c2c08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c2c0e.  v0.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` := v1 @kind object;
  #L1c2c12.  v0.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L1c2c16.  call temp:= `getAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1c2c1c.  v1:= temp @kind object;
  #L1c2c1e.  v0.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] := v1 @kind object;
  #L1c2c22.  call temp:= `getGenericParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1c2c28.  v1:= temp @kind object;
  #L1c2c2a.  v0.`retrofit2.l$a.e` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L1c2c2e.  call temp:= `getParameterAnnotations`(v2) @signature `Ljava/lang/reflect/Method;.getParameterAnnotations:()[[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1c2c34.  v1:= temp @kind object;
  #L1c2c36.  v0.`retrofit2.l$a.d` @type ^`java.lang.annotation.Annotation`[][] := v1 @kind object;
  #L1c2c3a.  return @kind void;
}
procedure `java.lang.Class` `a`(`java.lang.Class` v1 @kind object) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1c1914.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c1918.  if v0 != v1 then goto L1c1922;
  #L1c191c.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1c1920.  return v1 @kind object;
  #L1c1922.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c1926.  if v0 != v1 then goto L1c1930;
  #L1c192a.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L1c192e.  return v1 @kind object;
  #L1c1930.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c1934.  if v0 != v1 then goto L1c193e;
  #L1c1938.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L1c193c.  return v1 @kind object;
  #L1c193e.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c1942.  if v0 != v1 then goto L1c194c;
  #L1c1946.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L1c194a.  return v1 @kind object;
  #L1c194c.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c1950.  if v0 != v1 then goto L1c195a;
  #L1c1954.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L1c1958.  return v1 @kind object;
  #L1c195a.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c195e.  if v0 != v1 then goto L1c1968;
  #L1c1962.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L1c1966.  return v1 @kind object;
  #L1c1968.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c196c.  if v0 != v1 then goto L1c1976;
  #L1c1970.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L1c1974.  return v1 @kind object;
  #L1c1976.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1c197a.  if v0 != v1 then goto L1c1982;
  #L1c197e.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L1c1982.  return v1 @kind object;
}
procedure `okhttp3.Headers` `c`(`retrofit2.l$a` v8 @kind this, `java.lang.String`[] v9 @kind object) @signature `Lretrofit2/l$a;.c:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c19dc.  v0:= new `okhttp3.Headers$Builder`;
  #L1c19e0.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L1c19e6.  v1:= length @variable v9;
  #L1c19e8.  v2:= 0I;
  #L1c19ea.  v3:= 0I;
  #L1c19ec.  if v3 >= v1 then goto L1c1a96;
  #L1c19f0.  v4:= v9[v3] @kind object;
  #L1c19f4.  v5:= 58I;
  #L1c19f8.  call temp:= `indexOf`(v4, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1c19fe.  v5:= temp;
  #L1c1a00.  v6:= -1I;
  #L1c1a02.  v7:= 1I;
  #L1c1a04.  if v5 == v6 then goto L1c1a7c;
  #L1c1a08.  if v5 == 0 then goto L1c1a7c;
  #L1c1a0c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1c1a12.  v6:= temp;
  #L1c1a14.  v6:= v6 - v7 @kind int;
  #L1c1a16.  if v5 == v6 then goto L1c1a7c;
  #L1c1a1a.  call temp:= `substring`(v4, v2, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1c1a20.  v6:= temp @kind object;
  #L1c1a22.  v5:= v5 + 1;
  #L1c1a26.  call temp:= `substring`(v4, v5) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1c1a2c.  v4:= temp @kind object;
  #L1c1a2e.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1c1a34.  v4:= temp @kind object;
  #L1c1a36.  v5:= "Content-Type" @kind object;
  #L1c1a3a.  call temp:= `equalsIgnoreCase`(v5, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1c1a40.  v5:= temp;
  #L1c1a42.  if v5 == 0 then goto L1c1a70;
  #L1c1a46.  call temp:= `get`(v4) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L1c1a4c.  v5:= temp @kind object;
  #L1c1a4e.  v8.`retrofit2.l$a.t` @type ^`okhttp3.MediaType` := v5 @kind object;
  #L1c1a52.  goto L1c1a76;
  #L1c1a54.  v9:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1c1a56.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1a5a.  v1:= new `java.lang.Object`[v7];
  #L1c1a5e.  v1[v2]:= v4 @kind object;
  #L1c1a62.  v2:= "Malformed content type: %s" @kind object;
  #L1c1a66.  call temp:= `n`(v0, v9, v2, v1) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1a6c.  v9:= temp @kind object;
  #L1c1a6e.  throw v9;
  #L1c1a70.  call temp:= `add`(v0, v6, v4) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1c1a76.  v3:= v3 + 1;
  #L1c1a7a.  goto L1c19ec;
  #L1c1a7c.  v9:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1a80.  v0:= new `java.lang.Object`[v7];
  #L1c1a84.  v0[v2]:= v4 @kind object;
  #L1c1a88.  v1:= "@Headers value must be in the form \"Name: Value\". Found: \"%s\"" @kind object;
  #L1c1a8c.  call temp:= `m`(v9, v1, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1a92.  v9:= temp @kind object;
  #L1c1a94.  throw v9;
  #L1c1a96.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L1c1a9c.  v9:= temp @kind object;
  #L1c1a9e.  return v9 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1c1a46..L1c1a52] goto L1c1a54;
}
procedure `void` `d`(`retrofit2.l$a` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `boolean` v6 ) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1c2c4c.  v0:= v3.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c2c50.  v1:= 0I;
  #L1c2c52.  v2:= 1I;
  #L1c2c54.  if v0 != 0 then goto L1c2cde;
  #L1c2c58.  v3.`retrofit2.l$a.n` @type ^`java.lang.String` := v4 @kind object;
  #L1c2c5c.  v3.`retrofit2.l$a.o` @type ^`boolean` := v6 @kind boolean;
  #L1c2c60.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1c2c66.  v4:= temp;
  #L1c2c68.  if v4 == 0 then goto L1c2c6e;
  #L1c2c6c.  return @kind void;
  #L1c2c6e.  v4:= 63I;
  #L1c2c72.  call temp:= `indexOf`(v5, v4) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1c2c78.  v4:= temp;
  #L1c2c7a.  v6:= -1I;
  #L1c2c7c.  if v4 == v6 then goto L1c2ccc;
  #L1c2c80.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1c2c86.  v6:= temp;
  #L1c2c88.  v6:= v6 - v2 @kind int;
  #L1c2c8a.  if v4 >= v6 then goto L1c2ccc;
  #L1c2c8e.  v4:= v4 + v2 @kind int;
  #L1c2c90.  call temp:= `substring`(v5, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1c2c96.  v4:= temp @kind object;
  #L1c2c98.  v6:= `@@retrofit2.l$a.x` @type ^`java.util.regex.Pattern` @kind object;
  #L1c2c9c.  call temp:= `matcher`(v6, v4) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1c2ca2.  v6:= temp @kind object;
  #L1c2ca4.  call temp:= `find`(v6) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1c2caa.  v6:= temp;
  #L1c2cac.  if v6 != 0 then goto L1c2cb2;
  #L1c2cb0.  goto L1c2ccc;
  #L1c2cb2.  v5:= v3.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2cb6.  v6:= new `java.lang.Object`[v2];
  #L1c2cba.  v6[v1]:= v4 @kind object;
  #L1c2cbe.  v4:= "URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query." @kind object;
  #L1c2cc2.  call temp:= `m`(v5, v4, v6) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2cc8.  v4:= temp @kind object;
  #L1c2cca.  throw v4;
  #L1c2ccc.  v3.`retrofit2.l$a.r` @type ^`java.lang.String` := v5 @kind object;
  #L1c2cd0.  call temp:= `h`(v5) @signature `Lretrofit2/l$a;.h:(Ljava/lang/String;)Ljava/util/Set;` @kind static;
  #L1c2cd6.  v4:= temp @kind object;
  #L1c2cd8.  v3.`retrofit2.l$a.u` @type ^`java.util.Set` := v4 @kind object;
  #L1c2cdc.  return @kind void;
  #L1c2cde.  v5:= v3.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2ce2.  v6:= 2I;
  #L1c2ce4.  v6:= new `java.lang.Object`[v6];
  #L1c2ce8.  v6[v1]:= v0 @kind object;
  #L1c2cec.  v6[v2]:= v4 @kind object;
  #L1c2cf0.  v4:= "Only one HTTP method is allowed. Found: %s and %s." @kind object;
  #L1c2cf4.  call temp:= `m`(v5, v4, v6) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2cfa.  v4:= temp @kind object;
  #L1c2cfc.  throw v4;
}
procedure `void` `e`(`retrofit2.l$a` v4 @kind this, `java.lang.annotation.Annotation` v5 @kind object) @signature `Lretrofit2/l$a;.e:(Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c2d10.  v0:= instanceof @variable v5 @type ^`retrofit2.http.DELETE` @kind boolean;
  #L1c2d14.  v1:= 0I;
  #L1c2d16.  if v0 == 0 then goto L1c2d34;
  #L1c2d1a.  v5:= (`retrofit2.http.DELETE`) v5 @kind object;
  #L1c2d1e.  call temp:= `value`(v5) @signature `Lretrofit2/http/DELETE;.value:()Ljava/lang/String;` @kind interface;
  #L1c2d24.  v5:= temp @kind object;
  #L1c2d26.  v0:= "DELETE" @kind object;
  #L1c2d2a.  call `d`(v4, v0, v5, v1) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2d30.  goto L1c2ebe;
  #L1c2d34.  v0:= instanceof @variable v5 @type ^`retrofit2.http.GET` @kind boolean;
  #L1c2d38.  if v0 == 0 then goto L1c2d56;
  #L1c2d3c.  v5:= (`retrofit2.http.GET`) v5 @kind object;
  #L1c2d40.  call temp:= `value`(v5) @signature `Lretrofit2/http/GET;.value:()Ljava/lang/String;` @kind interface;
  #L1c2d46.  v5:= temp @kind object;
  #L1c2d48.  v0:= "GET" @kind object;
  #L1c2d4c.  call `d`(v4, v0, v5, v1) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2d52.  goto L1c2ebe;
  #L1c2d56.  v0:= instanceof @variable v5 @type ^`retrofit2.http.HEAD` @kind boolean;
  #L1c2d5a.  if v0 == 0 then goto L1c2d78;
  #L1c2d5e.  v5:= (`retrofit2.http.HEAD`) v5 @kind object;
  #L1c2d62.  call temp:= `value`(v5) @signature `Lretrofit2/http/HEAD;.value:()Ljava/lang/String;` @kind interface;
  #L1c2d68.  v5:= temp @kind object;
  #L1c2d6a.  v0:= "HEAD" @kind object;
  #L1c2d6e.  call `d`(v4, v0, v5, v1) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2d74.  goto L1c2ebe;
  #L1c2d78.  v0:= instanceof @variable v5 @type ^`retrofit2.http.PATCH` @kind boolean;
  #L1c2d7c.  v2:= 1I;
  #L1c2d7e.  if v0 == 0 then goto L1c2d9c;
  #L1c2d82.  v5:= (`retrofit2.http.PATCH`) v5 @kind object;
  #L1c2d86.  call temp:= `value`(v5) @signature `Lretrofit2/http/PATCH;.value:()Ljava/lang/String;` @kind interface;
  #L1c2d8c.  v5:= temp @kind object;
  #L1c2d8e.  v0:= "PATCH" @kind object;
  #L1c2d92.  call `d`(v4, v0, v5, v2) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2d98.  goto L1c2ebe;
  #L1c2d9c.  v0:= instanceof @variable v5 @type ^`retrofit2.http.POST` @kind boolean;
  #L1c2da0.  if v0 == 0 then goto L1c2dbe;
  #L1c2da4.  v5:= (`retrofit2.http.POST`) v5 @kind object;
  #L1c2da8.  call temp:= `value`(v5) @signature `Lretrofit2/http/POST;.value:()Ljava/lang/String;` @kind interface;
  #L1c2dae.  v5:= temp @kind object;
  #L1c2db0.  v0:= "POST" @kind object;
  #L1c2db4.  call `d`(v4, v0, v5, v2) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2dba.  goto L1c2ebe;
  #L1c2dbe.  v0:= instanceof @variable v5 @type ^`retrofit2.http.PUT` @kind boolean;
  #L1c2dc2.  if v0 == 0 then goto L1c2de0;
  #L1c2dc6.  v5:= (`retrofit2.http.PUT`) v5 @kind object;
  #L1c2dca.  call temp:= `value`(v5) @signature `Lretrofit2/http/PUT;.value:()Ljava/lang/String;` @kind interface;
  #L1c2dd0.  v5:= temp @kind object;
  #L1c2dd2.  v0:= "PUT" @kind object;
  #L1c2dd6.  call `d`(v4, v0, v5, v2) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2ddc.  goto L1c2ebe;
  #L1c2de0.  v0:= instanceof @variable v5 @type ^`retrofit2.http.OPTIONS` @kind boolean;
  #L1c2de4.  if v0 == 0 then goto L1c2e00;
  #L1c2de8.  v5:= (`retrofit2.http.OPTIONS`) v5 @kind object;
  #L1c2dec.  call temp:= `value`(v5) @signature `Lretrofit2/http/OPTIONS;.value:()Ljava/lang/String;` @kind interface;
  #L1c2df2.  v5:= temp @kind object;
  #L1c2df4.  v0:= "OPTIONS" @kind object;
  #L1c2df8.  call `d`(v4, v0, v5, v1) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2dfe.  goto L1c2ebe;
  #L1c2e00.  v0:= instanceof @variable v5 @type ^`retrofit2.http.HTTP` @kind boolean;
  #L1c2e04.  if v0 == 0 then goto L1c2e2c;
  #L1c2e08.  v5:= (`retrofit2.http.HTTP`) v5 @kind object;
  #L1c2e0c.  call temp:= `method`(v5) @signature `Lretrofit2/http/HTTP;.method:()Ljava/lang/String;` @kind interface;
  #L1c2e12.  v0:= temp @kind object;
  #L1c2e14.  call temp:= `path`(v5) @signature `Lretrofit2/http/HTTP;.path:()Ljava/lang/String;` @kind interface;
  #L1c2e1a.  v1:= temp @kind object;
  #L1c2e1c.  call temp:= `hasBody`(v5) @signature `Lretrofit2/http/HTTP;.hasBody:()Z` @kind interface;
  #L1c2e22.  v5:= temp;
  #L1c2e24.  call `d`(v4, v0, v1, v5) @signature `Lretrofit2/l$a;.d:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L1c2e2a.  goto L1c2ebe;
  #L1c2e2c.  v0:= instanceof @variable v5 @type ^`retrofit2.http.Headers` @kind boolean;
  #L1c2e30.  if v0 == 0 then goto L1c2e6a;
  #L1c2e34.  v5:= (`retrofit2.http.Headers`) v5 @kind object;
  #L1c2e38.  call temp:= `value`(v5) @signature `Lretrofit2/http/Headers;.value:()[Ljava/lang/String;` @kind interface;
  #L1c2e3e.  v5:= temp @kind object;
  #L1c2e40.  v0:= length @variable v5;
  #L1c2e42.  if v0 == 0 then goto L1c2e54;
  #L1c2e46.  call temp:= `c`(v4, v5) @signature `Lretrofit2/l$a;.c:([Ljava/lang/String;)Lokhttp3/Headers;` @kind direct;
  #L1c2e4c.  v5:= temp @kind object;
  #L1c2e4e.  v4.`retrofit2.l$a.s` @type ^`okhttp3.Headers` := v5 @kind object;
  #L1c2e52.  goto L1c2ebe;
  #L1c2e54.  v5:= v4.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2e58.  v0:= new `java.lang.Object`[v1];
  #L1c2e5c.  v1:= "@Headers annotation is empty." @kind object;
  #L1c2e60.  call temp:= `m`(v5, v1, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2e66.  v5:= temp @kind object;
  #L1c2e68.  throw v5;
  #L1c2e6a.  v0:= instanceof @variable v5 @type ^`retrofit2.http.Multipart` @kind boolean;
  #L1c2e6e.  v3:= "Only one encoding annotation is allowed." @kind object;
  #L1c2e72.  if v0 == 0 then goto L1c2e96;
  #L1c2e76.  v5:= v4.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c2e7a.  if v5 != 0 then goto L1c2e84;
  #L1c2e7e.  v4.`retrofit2.l$a.q` @type ^`boolean` := v2 @kind boolean;
  #L1c2e82.  goto L1c2ebe;
  #L1c2e84.  v5:= v4.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2e88.  v0:= new `java.lang.Object`[v1];
  #L1c2e8c.  call temp:= `m`(v5, v3, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2e92.  v5:= temp @kind object;
  #L1c2e94.  throw v5;
  #L1c2e96.  v5:= instanceof @variable v5 @type ^`retrofit2.http.FormUrlEncoded` @kind boolean;
  #L1c2e9a.  if v5 == 0 then goto L1c2ebe;
  #L1c2e9e.  v5:= v4.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c2ea2.  if v5 != 0 then goto L1c2eac;
  #L1c2ea6.  v4.`retrofit2.l$a.p` @type ^`boolean` := v2 @kind boolean;
  #L1c2eaa.  goto L1c2ebe;
  #L1c2eac.  v5:= v4.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2eb0.  v0:= new `java.lang.Object`[v1];
  #L1c2eb4.  call temp:= `m`(v5, v3, v0) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2eba.  v5:= temp @kind object;
  #L1c2ebc.  throw v5;
  #L1c2ebe.  return @kind void;
}
procedure `retrofit2.i` `f`(`retrofit2.l$a` v6 @kind this, `int` v7 , `java.lang.reflect.Type` v8 @kind object, `java.lang.annotation.Annotation`[] v9 @kind object, `boolean` v10 ) @signature `Lretrofit2/l$a;.f:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Z)Lretrofit2/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c1ac0.  v0:= 0I;
  #L1c1ac2.  v1:= 0I;
  #L1c1ac4.  if v9 == 0 then goto L1c1b06;
  #L1c1ac8.  v2:= length @variable v9;
  #L1c1aca.  v4:= v0 @kind object;
  #L1c1acc.  v3:= 0I;
  #L1c1ace.  if v3 >= v2 then goto L1c1b08;
  #L1c1ad2.  v5:= v9[v3] @kind object;
  #L1c1ad6.  call temp:= `g`(v6, v7, v8, v9, v5) @signature `Lretrofit2/l$a;.g:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Lretrofit2/i;` @kind direct;
  #L1c1adc.  v5:= temp @kind object;
  #L1c1ade.  if v5 != 0 then goto L1c1ae4;
  #L1c1ae2.  goto L1c1aea;
  #L1c1ae4.  if v4 != 0 then goto L1c1af0;
  #L1c1ae8.  v4:= v5 @kind object;
  #L1c1aea.  v3:= v3 + 1;
  #L1c1aee.  goto L1c1ace;
  #L1c1af0.  v8:= v6.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1af4.  v9:= new `java.lang.Object`[v1];
  #L1c1af8.  v10:= "Multiple Retrofit annotations found, only one allowed." @kind object;
  #L1c1afc.  call temp:= `o`(v8, v7, v10, v9) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1b02.  v7:= temp @kind object;
  #L1c1b04.  throw v7;
  #L1c1b06.  v4:= v0 @kind object;
  #L1c1b08.  if v4 != 0 then goto L1c1b3e;
  #L1c1b0c.  if v10 == 0 then goto L1c1b28;
  #L1c1b10.  call temp:= `h`(v8) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c1b16.  v8:= temp @kind object;
  #L1c1b18.  v9:= constclass @type ^`kotlin.coroutines.Continuation` @kind object;
  #L1c1b1c.  if v8 != v9 then goto L1c1b28;
  #L1c1b20.  v8:= 1I;
  #L1c1b22.  v6.`retrofit2.l$a.w` @type ^`boolean` := v8 @kind boolean;
  #L1c1b26.  return v0 @kind object;
  #L1c1b28.  v8:= v6.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1b2c.  v9:= new `java.lang.Object`[v1];
  #L1c1b30.  v10:= "No Retrofit annotation found." @kind object;
  #L1c1b34.  call temp:= `o`(v8, v7, v10, v9) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1b3a.  v7:= temp @kind object;
  #L1c1b3c.  throw v7;
  #L1c1b3e.  return v4 @kind object;
  catch `java.lang.NoClassDefFoundError` @[L1c1b10..L1c1b26] goto L1c1b28;
}
procedure `retrofit2.i` `g`(`retrofit2.l$a` v10 @kind this, `int` v11 , `java.lang.reflect.Type` v12 @kind object, `java.lang.annotation.Annotation`[] v13 @kind object, `java.lang.annotation.Annotation` v14 @kind object) @signature `Lretrofit2/l$a;.g:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Lretrofit2/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1c1b60.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L1c1b64.  v1:= constclass @type ^`okhttp3.MultipartBody$Part` @kind object;
  #L1c1b68.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Url` @kind boolean;
  #L1c1b6c.  v3:= "@Path parameters may not be used with @Url." @kind object;
  #L1c1b70.  v4:= 1I;
  #L1c1b72.  v5:= 0I;
  #L1c1b74.  if v2 == 0 then goto L1c1c9a;
  #L1c1b78.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c1b7e.  v13:= v10.`retrofit2.l$a.m` @type ^`boolean` @kind boolean;
  #L1c1b82.  if v13 != 0 then goto L1c1c84;
  #L1c1b86.  v13:= v10.`retrofit2.l$a.i` @type ^`boolean` @kind boolean;
  #L1c1b8a.  if v13 != 0 then goto L1c1c72;
  #L1c1b8e.  v13:= v10.`retrofit2.l$a.j` @type ^`boolean` @kind boolean;
  #L1c1b92.  if v13 != 0 then goto L1c1c5c;
  #L1c1b96.  v13:= v10.`retrofit2.l$a.k` @type ^`boolean` @kind boolean;
  #L1c1b9a.  if v13 != 0 then goto L1c1c46;
  #L1c1b9e.  v13:= v10.`retrofit2.l$a.l` @type ^`boolean` @kind boolean;
  #L1c1ba2.  if v13 != 0 then goto L1c1c30;
  #L1c1ba6.  v13:= v10.`retrofit2.l$a.r` @type ^`java.lang.String` @kind object;
  #L1c1baa.  if v13 != 0 then goto L1c1c12;
  #L1c1bae.  v10.`retrofit2.l$a.m` @type ^`boolean` := v4 @kind boolean;
  #L1c1bb2.  v13:= constclass @type ^`okhttp3.HttpUrl` @kind object;
  #L1c1bb6.  if v12 == v13 then goto L1c1c02;
  #L1c1bba.  if v12 == v0 then goto L1c1c02;
  #L1c1bbe.  v13:= constclass @type ^`java.net.URI` @kind object;
  #L1c1bc2.  if v12 == v13 then goto L1c1c02;
  #L1c1bc6.  v13:= instanceof @variable v12 @type ^`java.lang.Class` @kind boolean;
  #L1c1bca.  if v13 == 0 then goto L1c1bec;
  #L1c1bce.  v13:= "android.net.Uri" @kind object;
  #L1c1bd2.  v12:= (`java.lang.Class`) v12 @kind object;
  #L1c1bd6.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c1bdc.  v12:= temp @kind object;
  #L1c1bde.  call temp:= `equals`(v13, v12) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c1be4.  v12:= temp;
  #L1c1be6.  if v12 == 0 then goto L1c1bec;
  #L1c1bea.  goto L1c1c02;
  #L1c1bec.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1bf0.  v13:= new `java.lang.Object`[v5];
  #L1c1bf4.  v14:= "@Url must be okhttp3.HttpUrl, String, java.net.URI, or android.net.Uri type." @kind object;
  #L1c1bf8.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1bfe.  v11:= temp @kind object;
  #L1c1c00.  throw v11;
  #L1c1c02.  v12:= new `retrofit2.i$p`;
  #L1c1c06.  v13:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c0a.  call `<init>`(v12, v13, v11) @signature `Lretrofit2/i$p;.<init>:(Ljava/lang/reflect/Method;I)V` @kind direct;
  #L1c1c10.  return v12 @kind object;
  #L1c1c12.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c16.  v13:= new `java.lang.Object`[v4];
  #L1c1c1a.  v14:= v10.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c1c1e.  v13[v5]:= v14 @kind object;
  #L1c1c22.  v14:= "@Url cannot be used with @%s URL" @kind object;
  #L1c1c26.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c2c.  v11:= temp @kind object;
  #L1c1c2e.  throw v11;
  #L1c1c30.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c34.  v13:= new `java.lang.Object`[v5];
  #L1c1c38.  v14:= "A @Url parameter must not come after a @QueryMap." @kind object;
  #L1c1c3c.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c42.  v11:= temp @kind object;
  #L1c1c44.  throw v11;
  #L1c1c46.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c4a.  v13:= new `java.lang.Object`[v5];
  #L1c1c4e.  v14:= "A @Url parameter must not come after a @QueryName." @kind object;
  #L1c1c52.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c58.  v11:= temp @kind object;
  #L1c1c5a.  throw v11;
  #L1c1c5c.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c60.  v13:= new `java.lang.Object`[v5];
  #L1c1c64.  v14:= "A @Url parameter must not come after a @Query." @kind object;
  #L1c1c68.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c6e.  v11:= temp @kind object;
  #L1c1c70.  throw v11;
  #L1c1c72.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c76.  v13:= new `java.lang.Object`[v5];
  #L1c1c7a.  call temp:= `o`(v12, v11, v3, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c80.  v11:= temp @kind object;
  #L1c1c82.  throw v11;
  #L1c1c84.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1c88.  v13:= new `java.lang.Object`[v5];
  #L1c1c8c.  v14:= "Multiple @Url method annotations found." @kind object;
  #L1c1c90.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1c96.  v11:= temp @kind object;
  #L1c1c98.  throw v11;
  #L1c1c9a.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Path` @kind boolean;
  #L1c1c9e.  if v2 == 0 then goto L1c1d80;
  #L1c1ca2.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c1ca8.  v0:= v10.`retrofit2.l$a.j` @type ^`boolean` @kind boolean;
  #L1c1cac.  if v0 != 0 then goto L1c1d6a;
  #L1c1cb0.  v0:= v10.`retrofit2.l$a.k` @type ^`boolean` @kind boolean;
  #L1c1cb4.  if v0 != 0 then goto L1c1d54;
  #L1c1cb8.  v0:= v10.`retrofit2.l$a.l` @type ^`boolean` @kind boolean;
  #L1c1cbc.  if v0 != 0 then goto L1c1d3e;
  #L1c1cc0.  v0:= v10.`retrofit2.l$a.m` @type ^`boolean` @kind boolean;
  #L1c1cc4.  if v0 != 0 then goto L1c1d2c;
  #L1c1cc8.  v0:= v10.`retrofit2.l$a.r` @type ^`java.lang.String` @kind object;
  #L1c1ccc.  if v0 == 0 then goto L1c1d0e;
  #L1c1cd0.  v10.`retrofit2.l$a.i` @type ^`boolean` := v4 @kind boolean;
  #L1c1cd4.  v14:= (`retrofit2.http.Path`) v14 @kind object;
  #L1c1cd8.  call temp:= `value`(v14) @signature `Lretrofit2/http/Path;.value:()Ljava/lang/String;` @kind interface;
  #L1c1cde.  v3:= temp @kind object;
  #L1c1ce0.  call `i`(v10, v11, v3) @signature `Lretrofit2/l$a;.i:(ILjava/lang/String;)V` @kind direct;
  #L1c1ce6.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1cea.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1cf0.  v4:= temp @kind object;
  #L1c1cf2.  v12:= new `retrofit2.i$k`;
  #L1c1cf6.  v1:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1cfa.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Path;.encoded:()Z` @kind interface;
  #L1c1d00.  v5:= temp;
  #L1c1d02.  v0:= v12 @kind object;
  #L1c1d04.  v2:= v11;
  #L1c1d06.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lretrofit2/i$k;.<init>:(Ljava/lang/reflect/Method;ILjava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1d0c.  return v12 @kind object;
  #L1c1d0e.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1d12.  v13:= new `java.lang.Object`[v4];
  #L1c1d16.  v14:= v10.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c1d1a.  v13[v5]:= v14 @kind object;
  #L1c1d1e.  v14:= "@Path can only be used with relative url on @%s" @kind object;
  #L1c1d22.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1d28.  v11:= temp @kind object;
  #L1c1d2a.  throw v11;
  #L1c1d2c.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1d30.  v13:= new `java.lang.Object`[v5];
  #L1c1d34.  call temp:= `o`(v12, v11, v3, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1d3a.  v11:= temp @kind object;
  #L1c1d3c.  throw v11;
  #L1c1d3e.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1d42.  v13:= new `java.lang.Object`[v5];
  #L1c1d46.  v14:= "A @Path parameter must not come after a @QueryMap." @kind object;
  #L1c1d4a.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1d50.  v11:= temp @kind object;
  #L1c1d52.  throw v11;
  #L1c1d54.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1d58.  v13:= new `java.lang.Object`[v5];
  #L1c1d5c.  v14:= "A @Path parameter must not come after a @QueryName." @kind object;
  #L1c1d60.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1d66.  v11:= temp @kind object;
  #L1c1d68.  throw v11;
  #L1c1d6a.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1d6e.  v13:= new `java.lang.Object`[v5];
  #L1c1d72.  v14:= "A @Path parameter must not come after a @Query." @kind object;
  #L1c1d76.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1d7c.  v11:= temp @kind object;
  #L1c1d7e.  throw v11;
  #L1c1d80.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Query` @kind boolean;
  #L1c1d84.  v3:= "<String>)" @kind object;
  #L1c1d88.  v6:= " must include generic type (e.g., " @kind object;
  #L1c1d8c.  if v2 == 0 then goto L1c1e9a;
  #L1c1d90.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c1d96.  v14:= (`retrofit2.http.Query`) v14 @kind object;
  #L1c1d9a.  call temp:= `value`(v14) @signature `Lretrofit2/http/Query;.value:()Ljava/lang/String;` @kind interface;
  #L1c1da0.  v0:= temp @kind object;
  #L1c1da2.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Query;.encoded:()Z` @kind interface;
  #L1c1da8.  v14:= temp;
  #L1c1daa.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c1db0.  v1:= temp @kind object;
  #L1c1db2.  v10.`retrofit2.l$a.j` @type ^`boolean` := v4 @kind boolean;
  #L1c1db6.  v2:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c1dba.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c1dc0.  v2:= temp;
  #L1c1dc2.  if v2 == 0 then goto L1c1e46;
  #L1c1dc6.  v2:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c1dca.  if v2 == 0 then goto L1c1dfa;
  #L1c1dce.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c1dd2.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c1dd8.  v11:= temp @kind object;
  #L1c1dda.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1dde.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1de4.  v11:= temp @kind object;
  #L1c1de6.  v12:= new `retrofit2.i$l`;
  #L1c1dea.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$l;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1df0.  call temp:= `c`(v12) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c1df6.  v11:= temp @kind object;
  #L1c1df8.  return v11 @kind object;
  #L1c1dfa.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1dfe.  v13:= new `java.lang.StringBuilder`;
  #L1c1e02.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c1e08.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c1e0e.  v14:= temp @kind object;
  #L1c1e10.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1e16.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1e1c.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c1e22.  v14:= temp @kind object;
  #L1c1e24.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1e2a.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1e30.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1e36.  v13:= temp @kind object;
  #L1c1e38.  v14:= new `java.lang.Object`[v5];
  #L1c1e3c.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1e42.  v11:= temp @kind object;
  #L1c1e44.  throw v11;
  #L1c1e46.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c1e4c.  v11:= temp;
  #L1c1e4e.  if v11 == 0 then goto L1c1e82;
  #L1c1e52.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c1e58.  v11:= temp @kind object;
  #L1c1e5a.  call temp:= `a`(v11) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1c1e60.  v11:= temp @kind object;
  #L1c1e62.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1e66.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1e6c.  v11:= temp @kind object;
  #L1c1e6e.  v12:= new `retrofit2.i$l`;
  #L1c1e72.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$l;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1e78.  call temp:= `b`(v12) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c1e7e.  v11:= temp @kind object;
  #L1c1e80.  return v11 @kind object;
  #L1c1e82.  v11:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1e86.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1e8c.  v11:= temp @kind object;
  #L1c1e8e.  v12:= new `retrofit2.i$l`;
  #L1c1e92.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$l;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1e98.  return v12 @kind object;
  #L1c1e9a.  v2:= instanceof @variable v14 @type ^`retrofit2.http.QueryName` @kind boolean;
  #L1c1e9e.  if v2 == 0 then goto L1c1fa4;
  #L1c1ea2.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c1ea8.  v14:= (`retrofit2.http.QueryName`) v14 @kind object;
  #L1c1eac.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/QueryName;.encoded:()Z` @kind interface;
  #L1c1eb2.  v14:= temp;
  #L1c1eb4.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c1eba.  v0:= temp @kind object;
  #L1c1ebc.  v10.`retrofit2.l$a.k` @type ^`boolean` := v4 @kind boolean;
  #L1c1ec0.  v1:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c1ec4.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c1eca.  v1:= temp;
  #L1c1ecc.  if v1 == 0 then goto L1c1f50;
  #L1c1ed0.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c1ed4.  if v1 == 0 then goto L1c1f04;
  #L1c1ed8.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c1edc.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c1ee2.  v11:= temp @kind object;
  #L1c1ee4.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1ee8.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1eee.  v11:= temp @kind object;
  #L1c1ef0.  v12:= new `retrofit2.i$n`;
  #L1c1ef4.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/i$n;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1efa.  call temp:= `c`(v12) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c1f00.  v11:= temp @kind object;
  #L1c1f02.  return v11 @kind object;
  #L1c1f04.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c1f08.  v13:= new `java.lang.StringBuilder`;
  #L1c1f0c.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c1f12.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c1f18.  v14:= temp @kind object;
  #L1c1f1a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1f20.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1f26.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c1f2c.  v14:= temp @kind object;
  #L1c1f2e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1f34.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1f3a.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1f40.  v13:= temp @kind object;
  #L1c1f42.  v14:= new `java.lang.Object`[v5];
  #L1c1f46.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c1f4c.  v11:= temp @kind object;
  #L1c1f4e.  throw v11;
  #L1c1f50.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c1f56.  v11:= temp;
  #L1c1f58.  if v11 == 0 then goto L1c1f8c;
  #L1c1f5c.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c1f62.  v11:= temp @kind object;
  #L1c1f64.  call temp:= `a`(v11) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1c1f6a.  v11:= temp @kind object;
  #L1c1f6c.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1f70.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1f76.  v11:= temp @kind object;
  #L1c1f78.  v12:= new `retrofit2.i$n`;
  #L1c1f7c.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/i$n;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1f82.  call temp:= `b`(v12) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c1f88.  v11:= temp @kind object;
  #L1c1f8a.  return v11 @kind object;
  #L1c1f8c.  v11:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c1f90.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c1f96.  v11:= temp @kind object;
  #L1c1f98.  v12:= new `retrofit2.i$n`;
  #L1c1f9c.  call `<init>`(v12, v11, v14) @signature `Lretrofit2/i$n;.<init>:(Lretrofit2/Converter;Z)V` @kind direct;
  #L1c1fa2.  return v12 @kind object;
  #L1c1fa4.  v2:= instanceof @variable v14 @type ^`retrofit2.http.QueryMap` @kind boolean;
  #L1c1fa8.  v7:= "Map must include generic types (e.g., Map<String, String>)" @kind object;
  #L1c1fac.  if v2 == 0 then goto L1c2082;
  #L1c1fb0.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c1fb6.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c1fbc.  v1:= temp @kind object;
  #L1c1fbe.  v10.`retrofit2.l$a.l` @type ^`boolean` := v4 @kind boolean;
  #L1c1fc2.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L1c1fc6.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c1fcc.  v2:= temp;
  #L1c1fce.  if v2 == 0 then goto L1c206c;
  #L1c1fd2.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L1c1fd6.  call temp:= `i`(v12, v1, v2) @signature `Lretrofit2/o;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c1fdc.  v12:= temp @kind object;
  #L1c1fde.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c1fe2.  if v1 == 0 then goto L1c205a;
  #L1c1fe6.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c1fea.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c1ff0.  v1:= temp @kind object;
  #L1c1ff2.  if v0 != v1 then goto L1c2026;
  #L1c1ff6.  call temp:= `g`(v4, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c1ffc.  v12:= temp @kind object;
  #L1c1ffe.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2002.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2008.  v12:= temp @kind object;
  #L1c200a.  v13:= new `retrofit2.i$m`;
  #L1c200e.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2012.  v14:= (`retrofit2.http.QueryMap`) v14 @kind object;
  #L1c2016.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/QueryMap;.encoded:()Z` @kind interface;
  #L1c201c.  v14:= temp;
  #L1c201e.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/i$m;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Z)V` @kind direct;
  #L1c2024.  return v13 @kind object;
  #L1c2026.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c202a.  v13:= new `java.lang.StringBuilder`;
  #L1c202e.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c2034.  v14:= "@QueryMap keys must be of type String: " @kind object;
  #L1c2038.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c203e.  call temp:= `append`(v13, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2044.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c204a.  v13:= temp @kind object;
  #L1c204c.  v14:= new `java.lang.Object`[v5];
  #L1c2050.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2056.  v11:= temp @kind object;
  #L1c2058.  throw v11;
  #L1c205a.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c205e.  v13:= new `java.lang.Object`[v5];
  #L1c2062.  call temp:= `o`(v12, v11, v7, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2068.  v11:= temp @kind object;
  #L1c206a.  throw v11;
  #L1c206c.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2070.  v13:= new `java.lang.Object`[v5];
  #L1c2074.  v14:= "@QueryMap parameter type must be Map." @kind object;
  #L1c2078.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c207e.  v11:= temp @kind object;
  #L1c2080.  throw v11;
  #L1c2082.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Header` @kind boolean;
  #L1c2086.  if v2 == 0 then goto L1c2188;
  #L1c208a.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c2090.  v14:= (`retrofit2.http.Header`) v14 @kind object;
  #L1c2094.  call temp:= `value`(v14) @signature `Lretrofit2/http/Header;.value:()Ljava/lang/String;` @kind interface;
  #L1c209a.  v14:= temp @kind object;
  #L1c209c.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c20a2.  v0:= temp @kind object;
  #L1c20a4.  v1:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c20a8.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c20ae.  v1:= temp;
  #L1c20b0.  if v1 == 0 then goto L1c2134;
  #L1c20b4.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c20b8.  if v1 == 0 then goto L1c20e8;
  #L1c20bc.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c20c0.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c20c6.  v11:= temp @kind object;
  #L1c20c8.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c20cc.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c20d2.  v11:= temp @kind object;
  #L1c20d4.  v12:= new `retrofit2.i$f`;
  #L1c20d8.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/i$f;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L1c20de.  call temp:= `c`(v12) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c20e4.  v11:= temp @kind object;
  #L1c20e6.  return v11 @kind object;
  #L1c20e8.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c20ec.  v13:= new `java.lang.StringBuilder`;
  #L1c20f0.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c20f6.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c20fc.  v14:= temp @kind object;
  #L1c20fe.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2104.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c210a.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c2110.  v14:= temp @kind object;
  #L1c2112.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2118.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c211e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2124.  v13:= temp @kind object;
  #L1c2126.  v14:= new `java.lang.Object`[v5];
  #L1c212a.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2130.  v11:= temp @kind object;
  #L1c2132.  throw v11;
  #L1c2134.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c213a.  v11:= temp;
  #L1c213c.  if v11 == 0 then goto L1c2170;
  #L1c2140.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c2146.  v11:= temp @kind object;
  #L1c2148.  call temp:= `a`(v11) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1c214e.  v11:= temp @kind object;
  #L1c2150.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2154.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c215a.  v11:= temp @kind object;
  #L1c215c.  v12:= new `retrofit2.i$f`;
  #L1c2160.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/i$f;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L1c2166.  call temp:= `b`(v12) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c216c.  v11:= temp @kind object;
  #L1c216e.  return v11 @kind object;
  #L1c2170.  v11:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2174.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c217a.  v11:= temp @kind object;
  #L1c217c.  v12:= new `retrofit2.i$f`;
  #L1c2180.  call `<init>`(v12, v14, v11) @signature `Lretrofit2/i$f;.<init>:(Ljava/lang/String;Lretrofit2/Converter;)V` @kind direct;
  #L1c2186.  return v12 @kind object;
  #L1c2188.  v2:= instanceof @variable v14 @type ^`retrofit2.http.HeaderMap` @kind boolean;
  #L1c218c.  if v2 == 0 then goto L1c226a;
  #L1c2190.  v14:= constclass @type ^`okhttp3.Headers` @kind object;
  #L1c2194.  if v12 != v14 then goto L1c21a8;
  #L1c2198.  v12:= new `retrofit2.i$h`;
  #L1c219c.  v13:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c21a0.  call `<init>`(v12, v13, v11) @signature `Lretrofit2/i$h;.<init>:(Ljava/lang/reflect/Method;I)V` @kind direct;
  #L1c21a6.  return v12 @kind object;
  #L1c21a8.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c21ae.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c21b4.  v14:= temp @kind object;
  #L1c21b6.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L1c21ba.  call temp:= `isAssignableFrom`(v1, v14) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c21c0.  v1:= temp;
  #L1c21c2.  if v1 == 0 then goto L1c2254;
  #L1c21c6.  v1:= constclass @type ^`java.util.Map` @kind object;
  #L1c21ca.  call temp:= `i`(v12, v14, v1) @signature `Lretrofit2/o;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c21d0.  v12:= temp @kind object;
  #L1c21d2.  v14:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c21d6.  if v14 == 0 then goto L1c2242;
  #L1c21da.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c21de.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c21e4.  v14:= temp @kind object;
  #L1c21e6.  if v0 != v14 then goto L1c220e;
  #L1c21ea.  call temp:= `g`(v4, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c21f0.  v12:= temp @kind object;
  #L1c21f2.  v14:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c21f6.  call temp:= `stringConverter`(v14, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c21fc.  v12:= temp @kind object;
  #L1c21fe.  v13:= new `retrofit2.i$g`;
  #L1c2202.  v14:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2206.  call `<init>`(v13, v14, v11, v12) @signature `Lretrofit2/i$g;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;)V` @kind direct;
  #L1c220c.  return v13 @kind object;
  #L1c220e.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2212.  v13:= new `java.lang.StringBuilder`;
  #L1c2216.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c221c.  v0:= "@HeaderMap keys must be of type String: " @kind object;
  #L1c2220.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2226.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c222c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2232.  v13:= temp @kind object;
  #L1c2234.  v14:= new `java.lang.Object`[v5];
  #L1c2238.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c223e.  v11:= temp @kind object;
  #L1c2240.  throw v11;
  #L1c2242.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2246.  v13:= new `java.lang.Object`[v5];
  #L1c224a.  call temp:= `o`(v12, v11, v7, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2250.  v11:= temp @kind object;
  #L1c2252.  throw v11;
  #L1c2254.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2258.  v13:= new `java.lang.Object`[v5];
  #L1c225c.  v14:= "@HeaderMap parameter type must be Map." @kind object;
  #L1c2260.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2266.  v11:= temp @kind object;
  #L1c2268.  throw v11;
  #L1c226a.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Field` @kind boolean;
  #L1c226e.  if v2 == 0 then goto L1c239a;
  #L1c2272.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c2278.  v0:= v10.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c227c.  if v0 == 0 then goto L1c2384;
  #L1c2280.  v14:= (`retrofit2.http.Field`) v14 @kind object;
  #L1c2284.  call temp:= `value`(v14) @signature `Lretrofit2/http/Field;.value:()Ljava/lang/String;` @kind interface;
  #L1c228a.  v0:= temp @kind object;
  #L1c228c.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/Field;.encoded:()Z` @kind interface;
  #L1c2292.  v14:= temp;
  #L1c2294.  v10.`retrofit2.l$a.f` @type ^`boolean` := v4 @kind boolean;
  #L1c2298.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c229e.  v1:= temp @kind object;
  #L1c22a0.  v2:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c22a4.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c22aa.  v2:= temp;
  #L1c22ac.  if v2 == 0 then goto L1c2330;
  #L1c22b0.  v2:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c22b4.  if v2 == 0 then goto L1c22e4;
  #L1c22b8.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c22bc.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c22c2.  v11:= temp @kind object;
  #L1c22c4.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c22c8.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c22ce.  v11:= temp @kind object;
  #L1c22d0.  v12:= new `retrofit2.i$d`;
  #L1c22d4.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$d;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c22da.  call temp:= `c`(v12) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c22e0.  v11:= temp @kind object;
  #L1c22e2.  return v11 @kind object;
  #L1c22e4.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c22e8.  v13:= new `java.lang.StringBuilder`;
  #L1c22ec.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c22f2.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c22f8.  v14:= temp @kind object;
  #L1c22fa.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2300.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2306.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c230c.  v14:= temp @kind object;
  #L1c230e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2314.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c231a.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2320.  v13:= temp @kind object;
  #L1c2322.  v14:= new `java.lang.Object`[v5];
  #L1c2326.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c232c.  v11:= temp @kind object;
  #L1c232e.  throw v11;
  #L1c2330.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c2336.  v11:= temp;
  #L1c2338.  if v11 == 0 then goto L1c236c;
  #L1c233c.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c2342.  v11:= temp @kind object;
  #L1c2344.  call temp:= `a`(v11) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1c234a.  v11:= temp @kind object;
  #L1c234c.  v12:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2350.  call temp:= `stringConverter`(v12, v11, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2356.  v11:= temp @kind object;
  #L1c2358.  v12:= new `retrofit2.i$d`;
  #L1c235c.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$d;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c2362.  call temp:= `b`(v12) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c2368.  v11:= temp @kind object;
  #L1c236a.  return v11 @kind object;
  #L1c236c.  v11:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2370.  call temp:= `stringConverter`(v11, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2376.  v11:= temp @kind object;
  #L1c2378.  v12:= new `retrofit2.i$d`;
  #L1c237c.  call `<init>`(v12, v0, v11, v14) @signature `Lretrofit2/i$d;.<init>:(Ljava/lang/String;Lretrofit2/Converter;Z)V` @kind direct;
  #L1c2382.  return v12 @kind object;
  #L1c2384.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2388.  v13:= new `java.lang.Object`[v5];
  #L1c238c.  v14:= "@Field parameters can only be used with form encoding." @kind object;
  #L1c2390.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2396.  v11:= temp @kind object;
  #L1c2398.  throw v11;
  #L1c239a.  v2:= instanceof @variable v14 @type ^`retrofit2.http.FieldMap` @kind boolean;
  #L1c239e.  if v2 == 0 then goto L1c2492;
  #L1c23a2.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c23a8.  v1:= v10.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c23ac.  if v1 == 0 then goto L1c247c;
  #L1c23b0.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c23b6.  v1:= temp @kind object;
  #L1c23b8.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L1c23bc.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c23c2.  v2:= temp;
  #L1c23c4.  if v2 == 0 then goto L1c2466;
  #L1c23c8.  v2:= constclass @type ^`java.util.Map` @kind object;
  #L1c23cc.  call temp:= `i`(v12, v1, v2) @signature `Lretrofit2/o;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c23d2.  v12:= temp @kind object;
  #L1c23d4.  v1:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c23d8.  if v1 == 0 then goto L1c2454;
  #L1c23dc.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c23e0.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c23e6.  v1:= temp @kind object;
  #L1c23e8.  if v0 != v1 then goto L1c2420;
  #L1c23ec.  call temp:= `g`(v4, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c23f2.  v12:= temp @kind object;
  #L1c23f4.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c23f8.  call temp:= `stringConverter`(v0, v12, v13) @signature `Lretrofit2/Retrofit;.stringConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c23fe.  v12:= temp @kind object;
  #L1c2400.  v10.`retrofit2.l$a.f` @type ^`boolean` := v4 @kind boolean;
  #L1c2404.  v13:= new `retrofit2.i$e`;
  #L1c2408.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c240c.  v14:= (`retrofit2.http.FieldMap`) v14 @kind object;
  #L1c2410.  call temp:= `encoded`(v14) @signature `Lretrofit2/http/FieldMap;.encoded:()Z` @kind interface;
  #L1c2416.  v14:= temp;
  #L1c2418.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/i$e;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Z)V` @kind direct;
  #L1c241e.  return v13 @kind object;
  #L1c2420.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2424.  v13:= new `java.lang.StringBuilder`;
  #L1c2428.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c242e.  v14:= "@FieldMap keys must be of type String: " @kind object;
  #L1c2432.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2438.  call temp:= `append`(v13, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c243e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2444.  v13:= temp @kind object;
  #L1c2446.  v14:= new `java.lang.Object`[v5];
  #L1c244a.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2450.  v11:= temp @kind object;
  #L1c2452.  throw v11;
  #L1c2454.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2458.  v13:= new `java.lang.Object`[v5];
  #L1c245c.  call temp:= `o`(v12, v11, v7, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2462.  v11:= temp @kind object;
  #L1c2464.  throw v11;
  #L1c2466.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c246a.  v13:= new `java.lang.Object`[v5];
  #L1c246e.  v14:= "@FieldMap parameter type must be Map." @kind object;
  #L1c2472.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2478.  v11:= temp @kind object;
  #L1c247a.  throw v11;
  #L1c247c.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2480.  v13:= new `java.lang.Object`[v5];
  #L1c2484.  v14:= "@FieldMap parameters can only be used with form encoding." @kind object;
  #L1c2488.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c248e.  v11:= temp @kind object;
  #L1c2490.  throw v11;
  #L1c2492.  v2:= instanceof @variable v14 @type ^`retrofit2.http.Part` @kind boolean;
  #L1c2496.  if v2 == 0 then goto L1c27ae;
  #L1c249a.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c24a0.  v0:= v10.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c24a4.  if v0 == 0 then goto L1c2798;
  #L1c24a8.  v14:= (`retrofit2.http.Part`) v14 @kind object;
  #L1c24ac.  v10.`retrofit2.l$a.g` @type ^`boolean` := v4 @kind boolean;
  #L1c24b0.  call temp:= `value`(v14) @signature `Lretrofit2/http/Part;.value:()Ljava/lang/String;` @kind interface;
  #L1c24b6.  v0:= temp @kind object;
  #L1c24b8.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c24be.  v2:= temp @kind object;
  #L1c24c0.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1c24c6.  v7:= temp;
  #L1c24c8.  if v7 == 0 then goto L1c25d8;
  #L1c24cc.  v13:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c24d0.  call temp:= `isAssignableFrom`(v13, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c24d6.  v13:= temp;
  #L1c24d8.  v14:= "@Part annotation must supply a name or use MultipartBody.Part parameter type." @kind object;
  #L1c24dc.  if v13 == 0 then goto L1c2574;
  #L1c24e0.  v13:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c24e4.  if v13 == 0 then goto L1c2528;
  #L1c24e8.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c24ec.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c24f2.  v12:= temp @kind object;
  #L1c24f4.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c24fa.  v12:= temp @kind object;
  #L1c24fc.  call temp:= `isAssignableFrom`(v1, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c2502.  v12:= temp;
  #L1c2504.  if v12 == 0 then goto L1c2516;
  #L1c2508.  v11:= `@@retrofit2.i$o.a` @type ^`retrofit2.i$o` @kind object;
  #L1c250c.  call temp:= `c`(v11) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c2512.  v11:= temp @kind object;
  #L1c2514.  return v11 @kind object;
  #L1c2516.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c251a.  v13:= new `java.lang.Object`[v5];
  #L1c251e.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2524.  v11:= temp @kind object;
  #L1c2526.  throw v11;
  #L1c2528.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c252c.  v13:= new `java.lang.StringBuilder`;
  #L1c2530.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c2536.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c253c.  v14:= temp @kind object;
  #L1c253e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2544.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c254a.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c2550.  v14:= temp @kind object;
  #L1c2552.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2558.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c255e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2564.  v13:= temp @kind object;
  #L1c2566.  v14:= new `java.lang.Object`[v5];
  #L1c256a.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2570.  v11:= temp @kind object;
  #L1c2572.  throw v11;
  #L1c2574.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c257a.  v12:= temp;
  #L1c257c.  if v12 == 0 then goto L1c25b4;
  #L1c2580.  call temp:= `getComponentType`(v2) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c2586.  v12:= temp @kind object;
  #L1c2588.  call temp:= `isAssignableFrom`(v1, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c258e.  v12:= temp;
  #L1c2590.  if v12 == 0 then goto L1c25a2;
  #L1c2594.  v11:= `@@retrofit2.i$o.a` @type ^`retrofit2.i$o` @kind object;
  #L1c2598.  call temp:= `b`(v11) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c259e.  v11:= temp @kind object;
  #L1c25a0.  return v11 @kind object;
  #L1c25a2.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c25a6.  v13:= new `java.lang.Object`[v5];
  #L1c25aa.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c25b0.  v11:= temp @kind object;
  #L1c25b2.  throw v11;
  #L1c25b4.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c25ba.  v12:= temp;
  #L1c25bc.  if v12 == 0 then goto L1c25c6;
  #L1c25c0.  v11:= `@@retrofit2.i$o.a` @type ^`retrofit2.i$o` @kind object;
  #L1c25c4.  return v11 @kind object;
  #L1c25c6.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c25ca.  v13:= new `java.lang.Object`[v5];
  #L1c25ce.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c25d4.  v11:= temp @kind object;
  #L1c25d6.  throw v11;
  #L1c25d8.  v7:= 4I;
  #L1c25da.  v7:= new `java.lang.String`[v7];
  #L1c25de.  v8:= "Content-Disposition" @kind object;
  #L1c25e2.  v7[v5]:= v8 @kind object;
  #L1c25e6.  v8:= new `java.lang.StringBuilder`;
  #L1c25ea.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c25f0.  v9:= "form-data; name=\"" @kind object;
  #L1c25f4.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c25fa.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2600.  v0:= "\"" @kind object;
  #L1c2604.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c260a.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2610.  v0:= temp @kind object;
  #L1c2612.  v7[v4]:= v0 @kind object;
  #L1c2616.  v0:= 2I;
  #L1c2618.  v4:= "Content-Transfer-Encoding" @kind object;
  #L1c261c.  v7[v0]:= v4 @kind object;
  #L1c2620.  v0:= 3I;
  #L1c2622.  call temp:= `encoding`(v14) @signature `Lretrofit2/http/Part;.encoding:()Ljava/lang/String;` @kind interface;
  #L1c2628.  v14:= temp @kind object;
  #L1c262a.  v7[v0]:= v14 @kind object;
  #L1c262e.  call temp:= `of`(v7) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @kind static;
  #L1c2634.  v14:= temp @kind object;
  #L1c2636.  v0:= constclass @type ^`java.lang.Iterable` @kind object;
  #L1c263a.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c2640.  v0:= temp;
  #L1c2642.  v4:= "@Part parameters using the MultipartBody.Part must not include a part name in the annotation." @kind object;
  #L1c2646.  if v0 == 0 then goto L1c26f8;
  #L1c264a.  v0:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c264e.  if v0 == 0 then goto L1c26ac;
  #L1c2652.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c2656.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c265c.  v12:= temp @kind object;
  #L1c265e.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c2664.  v0:= temp @kind object;
  #L1c2666.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c266c.  v0:= temp;
  #L1c266e.  if v0 != 0 then goto L1c269a;
  #L1c2672.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2676.  v1:= v10.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c267a.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2680.  v12:= temp @kind object;
  #L1c2682.  v13:= new `retrofit2.i$i`;
  #L1c2686.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c268a.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/i$i;.<init>:(Ljava/lang/reflect/Method;ILokhttp3/Headers;Lretrofit2/Converter;)V` @kind direct;
  #L1c2690.  call temp:= `c`(v13) @signature `Lretrofit2/i;.c:()Lretrofit2/i;` @kind virtual;
  #L1c2696.  v11:= temp @kind object;
  #L1c2698.  return v11 @kind object;
  #L1c269a.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c269e.  v13:= new `java.lang.Object`[v5];
  #L1c26a2.  call temp:= `o`(v12, v11, v4, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c26a8.  v11:= temp @kind object;
  #L1c26aa.  throw v11;
  #L1c26ac.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c26b0.  v13:= new `java.lang.StringBuilder`;
  #L1c26b4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c26ba.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c26c0.  v14:= temp @kind object;
  #L1c26c2.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c26c8.  call temp:= `append`(v13, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c26ce.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c26d4.  v14:= temp @kind object;
  #L1c26d6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c26dc.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c26e2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c26e8.  v13:= temp @kind object;
  #L1c26ea.  v14:= new `java.lang.Object`[v5];
  #L1c26ee.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c26f4.  v11:= temp @kind object;
  #L1c26f6.  throw v11;
  #L1c26f8.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c26fe.  v0:= temp;
  #L1c2700.  if v0 == 0 then goto L1c275a;
  #L1c2704.  call temp:= `getComponentType`(v2) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c270a.  v12:= temp @kind object;
  #L1c270c.  call temp:= `a`(v12) @signature `Lretrofit2/l$a;.a:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1c2712.  v12:= temp @kind object;
  #L1c2714.  call temp:= `isAssignableFrom`(v1, v12) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c271a.  v0:= temp;
  #L1c271c.  if v0 != 0 then goto L1c2748;
  #L1c2720.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2724.  v1:= v10.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c2728.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c272e.  v12:= temp @kind object;
  #L1c2730.  v13:= new `retrofit2.i$i`;
  #L1c2734.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2738.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/i$i;.<init>:(Ljava/lang/reflect/Method;ILokhttp3/Headers;Lretrofit2/Converter;)V` @kind direct;
  #L1c273e.  call temp:= `b`(v13) @signature `Lretrofit2/i;.b:()Lretrofit2/i;` @kind virtual;
  #L1c2744.  v11:= temp @kind object;
  #L1c2746.  return v11 @kind object;
  #L1c2748.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c274c.  v13:= new `java.lang.Object`[v5];
  #L1c2750.  call temp:= `o`(v12, v11, v4, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2756.  v11:= temp @kind object;
  #L1c2758.  throw v11;
  #L1c275a.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c2760.  v0:= temp;
  #L1c2762.  if v0 != 0 then goto L1c2786;
  #L1c2766.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c276a.  v1:= v10.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c276e.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2774.  v12:= temp @kind object;
  #L1c2776.  v13:= new `retrofit2.i$i`;
  #L1c277a.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c277e.  call `<init>`(v13, v0, v11, v14, v12) @signature `Lretrofit2/i$i;.<init>:(Ljava/lang/reflect/Method;ILokhttp3/Headers;Lretrofit2/Converter;)V` @kind direct;
  #L1c2784.  return v13 @kind object;
  #L1c2786.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c278a.  v13:= new `java.lang.Object`[v5];
  #L1c278e.  call temp:= `o`(v12, v11, v4, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2794.  v11:= temp @kind object;
  #L1c2796.  throw v11;
  #L1c2798.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c279c.  v13:= new `java.lang.Object`[v5];
  #L1c27a0.  v14:= "@Part parameters can only be used with multipart encoding." @kind object;
  #L1c27a4.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c27aa.  v11:= temp @kind object;
  #L1c27ac.  throw v11;
  #L1c27ae.  v2:= instanceof @variable v14 @type ^`retrofit2.http.PartMap` @kind boolean;
  #L1c27b2.  if v2 == 0 then goto L1c28d4;
  #L1c27b6.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c27bc.  v2:= v10.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c27c0.  if v2 == 0 then goto L1c28be;
  #L1c27c4.  v10.`retrofit2.l$a.g` @type ^`boolean` := v4 @kind boolean;
  #L1c27c8.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c27ce.  v2:= temp @kind object;
  #L1c27d0.  v3:= constclass @type ^`java.util.Map` @kind object;
  #L1c27d4.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c27da.  v3:= temp;
  #L1c27dc.  if v3 == 0 then goto L1c28a8;
  #L1c27e0.  v3:= constclass @type ^`java.util.Map` @kind object;
  #L1c27e4.  call temp:= `i`(v12, v2, v3) @signature `Lretrofit2/o;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c27ea.  v12:= temp @kind object;
  #L1c27ec.  v2:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c27f0.  if v2 == 0 then goto L1c2896;
  #L1c27f4.  v12:= (`java.lang.reflect.ParameterizedType`) v12 @kind object;
  #L1c27f8.  call temp:= `g`(v5, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c27fe.  v2:= temp @kind object;
  #L1c2800.  if v0 != v2 then goto L1c2862;
  #L1c2804.  call temp:= `g`(v4, v12) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1c280a.  v12:= temp @kind object;
  #L1c280c.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c2812.  v0:= temp @kind object;
  #L1c2814.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c281a.  v0:= temp;
  #L1c281c.  if v0 != 0 then goto L1c284c;
  #L1c2820.  v0:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c2824.  v1:= v10.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c2828.  call temp:= `requestBodyConverter`(v0, v12, v13, v1) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c282e.  v12:= temp @kind object;
  #L1c2830.  v14:= (`retrofit2.http.PartMap`) v14 @kind object;
  #L1c2834.  v13:= new `retrofit2.i$j`;
  #L1c2838.  v0:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c283c.  call temp:= `encoding`(v14) @signature `Lretrofit2/http/PartMap;.encoding:()Ljava/lang/String;` @kind interface;
  #L1c2842.  v14:= temp @kind object;
  #L1c2844.  call `<init>`(v13, v0, v11, v12, v14) @signature `Lretrofit2/i$j;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Ljava/lang/String;)V` @kind direct;
  #L1c284a.  return v13 @kind object;
  #L1c284c.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2850.  v13:= new `java.lang.Object`[v5];
  #L1c2854.  v14:= "@PartMap values cannot be MultipartBody.Part. Use @Part List<Part> or a different value type instead." @kind object;
  #L1c2858.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c285e.  v11:= temp @kind object;
  #L1c2860.  throw v11;
  #L1c2862.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2866.  v13:= new `java.lang.StringBuilder`;
  #L1c286a.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c2870.  v14:= "@PartMap keys must be of type String: " @kind object;
  #L1c2874.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c287a.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c2880.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c2886.  v13:= temp @kind object;
  #L1c2888.  v14:= new `java.lang.Object`[v5];
  #L1c288c.  call temp:= `o`(v12, v11, v13, v14) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2892.  v11:= temp @kind object;
  #L1c2894.  throw v11;
  #L1c2896.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c289a.  v13:= new `java.lang.Object`[v5];
  #L1c289e.  call temp:= `o`(v12, v11, v7, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c28a4.  v11:= temp @kind object;
  #L1c28a6.  throw v11;
  #L1c28a8.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c28ac.  v13:= new `java.lang.Object`[v5];
  #L1c28b0.  v14:= "@PartMap parameter type must be Map." @kind object;
  #L1c28b4.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c28ba.  v11:= temp @kind object;
  #L1c28bc.  throw v11;
  #L1c28be.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c28c2.  v13:= new `java.lang.Object`[v5];
  #L1c28c6.  v14:= "@PartMap parameters can only be used with multipart encoding." @kind object;
  #L1c28ca.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c28d0.  v11:= temp @kind object;
  #L1c28d2.  throw v11;
  #L1c28d4.  v0:= instanceof @variable v14 @type ^`retrofit2.http.Body` @kind boolean;
  #L1c28d8.  if v0 == 0 then goto L1c2966;
  #L1c28dc.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c28e2.  v14:= v10.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c28e6.  if v14 != 0 then goto L1c2950;
  #L1c28ea.  v14:= v10.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c28ee.  if v14 != 0 then goto L1c2950;
  #L1c28f2.  v14:= v10.`retrofit2.l$a.h` @type ^`boolean` @kind boolean;
  #L1c28f6.  if v14 != 0 then goto L1c293a;
  #L1c28fa.  v14:= v10.`retrofit2.l$a.a` @type ^`retrofit2.Retrofit` @kind object;
  #L1c28fe.  v0:= v10.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c2902.  call temp:= `requestBodyConverter`(v14, v12, v13, v0) @signature `Lretrofit2/Retrofit;.requestBodyConverter:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter;` @kind virtual;
  #L1c2908.  v12:= temp @kind object;
  #L1c290a.  v10.`retrofit2.l$a.h` @type ^`boolean` := v4 @kind boolean;
  #L1c290e.  v13:= new `retrofit2.i$c`;
  #L1c2912.  v14:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2916.  call `<init>`(v13, v14, v11, v12) @signature `Lretrofit2/i$c;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;)V` @kind direct;
  #L1c291c.  return v13 @kind object;
  #L1c291e.  v13:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L1c2920.  v14:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2924.  v0:= new `java.lang.Object`[v4];
  #L1c2928.  v0[v5]:= v12 @kind object;
  #L1c292c.  v12:= "Unable to create @Body converter for %s" @kind object;
  #L1c2930.  call temp:= `p`(v14, v13, v11, v12, v0) @signature `Lretrofit2/o;.p:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2936.  v11:= temp @kind object;
  #L1c2938.  throw v11;
  #L1c293a.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c293e.  v13:= new `java.lang.Object`[v5];
  #L1c2942.  v14:= "Multiple @Body method annotations found." @kind object;
  #L1c2946.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c294c.  v11:= temp @kind object;
  #L1c294e.  throw v11;
  #L1c2950.  v12:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2954.  v13:= new `java.lang.Object`[v5];
  #L1c2958.  v14:= "@Body parameters cannot be used with form or multi-part encoding." @kind object;
  #L1c295c.  call temp:= `o`(v12, v11, v14, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2962.  v11:= temp @kind object;
  #L1c2964.  throw v11;
  #L1c2966.  v13:= instanceof @variable v14 @type ^`retrofit2.http.Tag` @kind boolean;
  #L1c296a.  if v13 == 0 then goto L1c2a14;
  #L1c296e.  call `j`(v10, v11, v12) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @kind direct;
  #L1c2974.  call temp:= `h`(v12) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c297a.  v12:= temp @kind object;
  #L1c297c.  v13:= v11 + -1;
  #L1c2980.  if v13 < 0 then goto L1c2a08;
  #L1c2984.  v14:= v10.`retrofit2.l$a.v` @type ^`retrofit2.i`[] @kind object;
  #L1c2988.  v14:= v14[v13] @kind object;
  #L1c298c.  v0:= instanceof @variable v14 @type ^`retrofit2.i$q` @kind boolean;
  #L1c2990.  if v0 == 0 then goto L1c2a02;
  #L1c2994.  v14:= (`retrofit2.i$q`) v14 @kind object;
  #L1c2998.  v14:= v14.`retrofit2.i$q.a` @type ^`java.lang.Class` @kind object;
  #L1c299c.  call temp:= `equals`(v14, v12) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c29a2.  v14:= temp;
  #L1c29a4.  if v14 != 0 then goto L1c29aa;
  #L1c29a8.  goto L1c2a02;
  #L1c29aa.  v14:= v10.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c29ae.  v0:= new `java.lang.StringBuilder`;
  #L1c29b2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c29b8.  v1:= "@Tag type " @kind object;
  #L1c29bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c29c2.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c29c8.  v12:= temp @kind object;
  #L1c29ca.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c29d0.  v12:= " is duplicate of parameter #" @kind object;
  #L1c29d4.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c29da.  v13:= v13 + v4 @kind int;
  #L1c29dc.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c29e2.  v12:= " and would always overwrite its value." @kind object;
  #L1c29e6.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c29ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c29f2.  v12:= temp @kind object;
  #L1c29f4.  v13:= new `java.lang.Object`[v5];
  #L1c29f8.  call temp:= `o`(v14, v11, v12, v13) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c29fe.  v11:= temp @kind object;
  #L1c2a00.  throw v11;
  #L1c2a02.  v13:= v13 + -1;
  #L1c2a06.  goto L1c2980;
  #L1c2a08.  v11:= new `retrofit2.i$q`;
  #L1c2a0c.  call `<init>`(v11, v12) @signature `Lretrofit2/i$q;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1c2a12.  return v11 @kind object;
  #L1c2a14.  v11:= 0I;
  #L1c2a16.  return v11 @kind object;
  catch `java.lang.RuntimeException` @[L1c28fa..L1c290a] goto L1c291e;
}
procedure `java.util.Set` `h`(`java.lang.String` v2 @kind object) @signature `Lretrofit2/l$a;.h:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1c1994.  v0:= `@@retrofit2.l$a.x` @type ^`java.util.regex.Pattern` @kind object;
  #L1c1998.  call temp:= `matcher`(v0, v2) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1c199e.  v2:= temp @kind object;
  #L1c19a0.  v0:= new `java.util.LinkedHashSet`;
  #L1c19a4.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1c19aa.  call temp:= `find`(v2) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1c19b0.  v1:= temp;
  #L1c19b2.  if v1 == 0 then goto L1c19c8;
  #L1c19b6.  v1:= 1I;
  #L1c19b8.  call temp:= `group`(v2, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L1c19be.  v1:= temp @kind object;
  #L1c19c0.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c19c6.  goto L1c19aa;
  #L1c19c8.  return v0 @kind object;
}
procedure `void` `i`(`retrofit2.l$a` v5 @kind this, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lretrofit2/l$a;.i:(ILjava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c2ed0.  v0:= `@@retrofit2.l$a.y` @type ^`java.util.regex.Pattern` @kind object;
  #L1c2ed4.  call temp:= `matcher`(v0, v7) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1c2eda.  v0:= temp @kind object;
  #L1c2edc.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1c2ee2.  v0:= temp;
  #L1c2ee4.  v1:= 1I;
  #L1c2ee6.  v2:= 0I;
  #L1c2ee8.  v3:= 2I;
  #L1c2eea.  if v0 == 0 then goto L1c2f22;
  #L1c2eee.  v0:= v5.`retrofit2.l$a.u` @type ^`java.util.Set` @kind object;
  #L1c2ef2.  call temp:= `contains`(v0, v7) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1c2ef8.  v0:= temp;
  #L1c2efa.  if v0 == 0 then goto L1c2f00;
  #L1c2efe.  return @kind void;
  #L1c2f00.  v0:= v5.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2f04.  v3:= new `java.lang.Object`[v3];
  #L1c2f08.  v4:= v5.`retrofit2.l$a.r` @type ^`java.lang.String` @kind object;
  #L1c2f0c.  v3[v2]:= v4 @kind object;
  #L1c2f10.  v3[v1]:= v7 @kind object;
  #L1c2f14.  v7:= "URL \"%s\" does not contain \"{%s}\"." @kind object;
  #L1c2f18.  call temp:= `o`(v0, v6, v7, v3) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2f1e.  v6:= temp @kind object;
  #L1c2f20.  throw v6;
  #L1c2f22.  v0:= v5.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2f26.  v3:= new `java.lang.Object`[v3];
  #L1c2f2a.  v4:= `@@retrofit2.l$a.x` @type ^`java.util.regex.Pattern` @kind object;
  #L1c2f2e.  call temp:= `pattern`(v4) @signature `Ljava/util/regex/Pattern;.pattern:()Ljava/lang/String;` @kind virtual;
  #L1c2f34.  v4:= temp @kind object;
  #L1c2f36.  v3[v2]:= v4 @kind object;
  #L1c2f3a.  v3[v1]:= v7 @kind object;
  #L1c2f3e.  v7:= "@Path parameter name must match %s. Found: %s" @kind object;
  #L1c2f42.  call temp:= `o`(v0, v6, v7, v3) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2f48.  v6:= temp @kind object;
  #L1c2f4a.  throw v6;
}
procedure `void` `j`(`retrofit2.l$a` v3 @kind this, `int` v4 , `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/l$a;.j:(ILjava/lang/reflect/Type;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1c2f5c.  call temp:= `j`(v5) @signature `Lretrofit2/o;.j:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c2f62.  v0:= temp;
  #L1c2f64.  if v0 != 0 then goto L1c2f6a;
  #L1c2f68.  return @kind void;
  #L1c2f6a.  v0:= v3.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2f6e.  v1:= 1I;
  #L1c2f70.  v1:= new `java.lang.Object`[v1];
  #L1c2f74.  v2:= 0I;
  #L1c2f76.  v1[v2]:= v5 @kind object;
  #L1c2f7a.  v5:= "Parameter type must not include a type variable or wildcard: %s" @kind object;
  #L1c2f7e.  call temp:= `o`(v0, v4, v5, v1) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2f84.  v4:= temp @kind object;
  #L1c2f86.  throw v4;
}
procedure `retrofit2.l` `b`(`retrofit2.l$a` v8 @kind this) @signature `Lretrofit2/l$a;.b:()Lretrofit2/l;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c2a38.  v0:= v8.`retrofit2.l$a.c` @type ^`java.lang.annotation.Annotation`[] @kind object;
  #L1c2a3c.  v1:= length @variable v0;
  #L1c2a3e.  v2:= 0I;
  #L1c2a40.  v3:= 0I;
  #L1c2a42.  if v3 >= v1 then goto L1c2a56;
  #L1c2a46.  v4:= v0[v3] @kind object;
  #L1c2a4a.  call `e`(v8, v4) @signature `Lretrofit2/l$a;.e:(Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1c2a50.  v3:= v3 + 1;
  #L1c2a54.  goto L1c2a42;
  #L1c2a56.  v0:= v8.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c2a5a.  if v0 == 0 then goto L1c2bac;
  #L1c2a5e.  v0:= v8.`retrofit2.l$a.o` @type ^`boolean` @kind boolean;
  #L1c2a62.  if v0 != 0 then goto L1c2aa4;
  #L1c2a66.  v0:= v8.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c2a6a.  if v0 != 0 then goto L1c2a8e;
  #L1c2a6e.  v0:= v8.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c2a72.  if v0 != 0 then goto L1c2a78;
  #L1c2a76.  goto L1c2aa4;
  #L1c2a78.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2a7c.  v1:= new `java.lang.Object`[v2];
  #L1c2a80.  v2:= "FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L1c2a84.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2a8a.  v0:= temp @kind object;
  #L1c2a8c.  throw v0;
  #L1c2a8e.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2a92.  v1:= new `java.lang.Object`[v2];
  #L1c2a96.  v2:= "Multipart can only be specified on HTTP methods with request body (e.g., @POST)." @kind object;
  #L1c2a9a.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2aa0.  v0:= temp @kind object;
  #L1c2aa2.  throw v0;
  #L1c2aa4.  v0:= v8.`retrofit2.l$a.d` @type ^`java.lang.annotation.Annotation`[][] @kind object;
  #L1c2aa8.  v0:= length @variable v0;
  #L1c2aaa.  v1:= new `retrofit2.i`[v0];
  #L1c2aae.  v8.`retrofit2.l$a.v` @type ^`retrofit2.i`[] := v1 @kind object;
  #L1c2ab2.  v1:= v0 + -1;
  #L1c2ab6.  v3:= 0I;
  #L1c2ab8.  v4:= 1I;
  #L1c2aba.  if v3 >= v0 then goto L1c2aec;
  #L1c2abe.  v5:= v8.`retrofit2.l$a.v` @type ^`retrofit2.i`[] @kind object;
  #L1c2ac2.  v6:= v8.`retrofit2.l$a.e` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c2ac6.  v6:= v6[v3] @kind object;
  #L1c2aca.  v7:= v8.`retrofit2.l$a.d` @type ^`java.lang.annotation.Annotation`[][] @kind object;
  #L1c2ace.  v7:= v7[v3] @kind object;
  #L1c2ad2.  if v3 != v1 then goto L1c2ad8;
  #L1c2ad6.  goto L1c2ada;
  #L1c2ad8.  v4:= 0I;
  #L1c2ada.  call temp:= `f`(v8, v3, v6, v7, v4) @signature `Lretrofit2/l$a;.f:(ILjava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Z)Lretrofit2/i;` @kind direct;
  #L1c2ae0.  v4:= temp @kind object;
  #L1c2ae2.  v5[v3]:= v4 @kind object;
  #L1c2ae6.  v3:= v3 + 1;
  #L1c2aea.  goto L1c2ab8;
  #L1c2aec.  v0:= v8.`retrofit2.l$a.r` @type ^`java.lang.String` @kind object;
  #L1c2af0.  if v0 != 0 then goto L1c2b1c;
  #L1c2af4.  v0:= v8.`retrofit2.l$a.m` @type ^`boolean` @kind boolean;
  #L1c2af8.  if v0 == 0 then goto L1c2afe;
  #L1c2afc.  goto L1c2b1c;
  #L1c2afe.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2b02.  v1:= new `java.lang.Object`[v4];
  #L1c2b06.  v3:= v8.`retrofit2.l$a.n` @type ^`java.lang.String` @kind object;
  #L1c2b0a.  v1[v2]:= v3 @kind object;
  #L1c2b0e.  v2:= "Missing either @%s URL or @Url parameter." @kind object;
  #L1c2b12.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2b18.  v0:= temp @kind object;
  #L1c2b1a.  throw v0;
  #L1c2b1c.  v0:= v8.`retrofit2.l$a.p` @type ^`boolean` @kind boolean;
  #L1c2b20.  if v0 != 0 then goto L1c2b54;
  #L1c2b24.  v1:= v8.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c2b28.  if v1 != 0 then goto L1c2b54;
  #L1c2b2c.  v1:= v8.`retrofit2.l$a.o` @type ^`boolean` @kind boolean;
  #L1c2b30.  if v1 != 0 then goto L1c2b54;
  #L1c2b34.  v1:= v8.`retrofit2.l$a.h` @type ^`boolean` @kind boolean;
  #L1c2b38.  if v1 != 0 then goto L1c2b3e;
  #L1c2b3c.  goto L1c2b54;
  #L1c2b3e.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2b42.  v1:= new `java.lang.Object`[v2];
  #L1c2b46.  v2:= "Non-body HTTP method cannot contain @Body." @kind object;
  #L1c2b4a.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2b50.  v0:= temp @kind object;
  #L1c2b52.  throw v0;
  #L1c2b54.  if v0 == 0 then goto L1c2b78;
  #L1c2b58.  v0:= v8.`retrofit2.l$a.f` @type ^`boolean` @kind boolean;
  #L1c2b5c.  if v0 == 0 then goto L1c2b62;
  #L1c2b60.  goto L1c2b78;
  #L1c2b62.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2b66.  v1:= new `java.lang.Object`[v2];
  #L1c2b6a.  v2:= "Form-encoded method must contain at least one @Field." @kind object;
  #L1c2b6e.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2b74.  v0:= temp @kind object;
  #L1c2b76.  throw v0;
  #L1c2b78.  v0:= v8.`retrofit2.l$a.q` @type ^`boolean` @kind boolean;
  #L1c2b7c.  if v0 == 0 then goto L1c2ba0;
  #L1c2b80.  v0:= v8.`retrofit2.l$a.g` @type ^`boolean` @kind boolean;
  #L1c2b84.  if v0 == 0 then goto L1c2b8a;
  #L1c2b88.  goto L1c2ba0;
  #L1c2b8a.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2b8e.  v1:= new `java.lang.Object`[v2];
  #L1c2b92.  v2:= "Multipart method must contain at least one @Part." @kind object;
  #L1c2b96.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2b9c.  v0:= temp @kind object;
  #L1c2b9e.  throw v0;
  #L1c2ba0.  v0:= new `retrofit2.l`;
  #L1c2ba4.  call `<init>`(v0, v8) @signature `Lretrofit2/l;.<init>:(Lretrofit2/l$a;)V` @kind direct;
  #L1c2baa.  return v0 @kind object;
  #L1c2bac.  v0:= v8.`retrofit2.l$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L1c2bb0.  v1:= new `java.lang.Object`[v2];
  #L1c2bb4.  v2:= "HTTP method annotation is required (e.g., @GET, @POST, etc.)." @kind object;
  #L1c2bb8.  call temp:= `m`(v0, v2, v1) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c2bbe.  v0:= temp @kind object;
  #L1c2bc0.  throw v0;
}
