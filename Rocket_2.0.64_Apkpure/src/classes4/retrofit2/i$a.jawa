record `retrofit2.i$a` @kind class @AccessFlag  extends `retrofit2.i` @kind class {
  `retrofit2.i` `retrofit2.i$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.i$a` v0 @kind this, `retrofit2.i` v1 @kind object) @signature `Lretrofit2/i$a;.<init>:(Lretrofit2/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c0324.  v0.`retrofit2.i$a.a` @type ^`retrofit2.i` := v1 @kind object;
  #L1c0328.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c032e.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$a` v0 @kind this, `retrofit2.k` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/i$a;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag SYNTHETIC {
    temp;

  #L1c0380.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L1c0384.  call `d`(v0, v1, v2) @signature `Lretrofit2/i$a;.d:(Lretrofit2/k;Ljava/lang/Iterable;)V` @kind virtual;
  #L1c038a.  return @kind void;
}
procedure `void` `d`(`retrofit2.i$a` v2 @kind this, `retrofit2.k` v3 @kind object, `java.lang.Iterable` v4 @kind object) @signature `Lretrofit2/i$a;.d:(Lretrofit2/k;Ljava/lang/Iterable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c0340.  if v4 != 0 then goto L1c0346;
  #L1c0344.  return @kind void;
  #L1c0346.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c034c.  v4:= temp @kind object;
  #L1c034e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c0354.  v0:= temp;
  #L1c0356.  if v0 == 0 then goto L1c036e;
  #L1c035a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c0360.  v0:= temp @kind object;
  #L1c0362.  v1:= v2.`retrofit2.i$a.a` @type ^`retrofit2.i` @kind object;
  #L1c0366.  call `a`(v1, v3, v0) @signature `Lretrofit2/i;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @kind virtual;
  #L1c036c.  goto L1c034e;
  #L1c036e.  return @kind void;
}
