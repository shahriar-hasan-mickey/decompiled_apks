record `retrofit2.o` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.o.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c50cc.  v0:= 0I;
  #L1c50ce.  v0:= new `java.lang.reflect.Type`[v0];
  #L1c50d2.  `@@retrofit2.o.a` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1c50d6.  return @kind void;
}
procedure `okhttp3.ResponseBody` `a`(`okhttp3.ResponseBody` v4 @kind object) @signature `Lretrofit2/o;.a:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c5088.  v0:= new `okio.Buffer`;
  #L1c508c.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1c5092.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1c5098.  v1:= temp @kind object;
  #L1c509a.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L1c50a0.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1c50a6.  v1:= temp @kind object;
  #L1c50a8.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1c50ae.  v2:= temp @kind wide;
  #L1c50b0.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L1c50b6.  v4:= temp @kind object;
  #L1c50b8.  return v4 @kind object;
}
procedure `void` `b`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/o;.b:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1c50e8.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1c50ec.  if v0 == 0 then goto L1c510e;
  #L1c50f0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1c50f4.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1c50fa.  v1:= temp;
  #L1c50fc.  if v1 != 0 then goto L1c5102;
  #L1c5100.  goto L1c510e;
  #L1c5102.  v1:= new `java.lang.IllegalArgumentException`;
  #L1c5106.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c510c.  throw v1;
  #L1c510e.  return @kind void;
}
procedure `java.lang.Class` `c`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit2/o;.c:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1c4a1c.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1c4a22.  v1:= temp @kind object;
  #L1c4a24.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1c4a28.  if v0 == 0 then goto L1c4a32;
  #L1c4a2c.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1c4a30.  goto L1c4a34;
  #L1c4a32.  v1:= 0I;
  #L1c4a34.  return v1 @kind object;
}
procedure `boolean` `d`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/o;.d:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4740.  v0:= 1I;
  #L1c4742.  if v4 != v5 then goto L1c4748;
  #L1c4746.  return v0;
  #L1c4748.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L1c474c.  if v1 == 0 then goto L1c475a;
  #L1c4750.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c4756.  v4:= temp;
  #L1c4758.  return v4;
  #L1c475a.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c475e.  v2:= 0I;
  #L1c4760.  if v1 == 0 then goto L1c47d8;
  #L1c4764.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c4768.  if v1 != 0 then goto L1c476e;
  #L1c476c.  return v2;
  #L1c476e.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L1c4772.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1c4776.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c477c.  v1:= temp @kind object;
  #L1c477e.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4784.  v3:= temp @kind object;
  #L1c4786.  if v1 == v3 then goto L1c479a;
  #L1c478a.  if v1 == 0 then goto L1c47d4;
  #L1c478e.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c4794.  v1:= temp;
  #L1c4796.  if v1 == 0 then goto L1c47d4;
  #L1c479a.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c47a0.  v1:= temp @kind object;
  #L1c47a2.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c47a8.  v3:= temp @kind object;
  #L1c47aa.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c47b0.  v1:= temp;
  #L1c47b2.  if v1 == 0 then goto L1c47d4;
  #L1c47b6.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c47bc.  v4:= temp @kind object;
  #L1c47be.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c47c4.  v5:= temp @kind object;
  #L1c47c6.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1c47cc.  v4:= temp;
  #L1c47ce.  if v4 == 0 then goto L1c47d4;
  #L1c47d2.  goto L1c47d6;
  #L1c47d4.  v0:= 0I;
  #L1c47d6.  return v0;
  #L1c47d8.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1c47dc.  if v1 == 0 then goto L1c480c;
  #L1c47e0.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1c47e4.  if v0 != 0 then goto L1c47ea;
  #L1c47e8.  return v2;
  #L1c47ea.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L1c47ee.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L1c47f2.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c47f8.  v4:= temp @kind object;
  #L1c47fa.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4800.  v5:= temp @kind object;
  #L1c4802.  call temp:= `d`(v4, v5) @signature `Lretrofit2/o;.d:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c4808.  v4:= temp;
  #L1c480a.  return v4;
  #L1c480c.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4810.  if v1 == 0 then goto L1c4864;
  #L1c4814.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4818.  if v1 != 0 then goto L1c481e;
  #L1c481c.  return v2;
  #L1c481e.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L1c4822.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L1c4826.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c482c.  v1:= temp @kind object;
  #L1c482e.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4834.  v3:= temp @kind object;
  #L1c4836.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1c483c.  v1:= temp;
  #L1c483e.  if v1 == 0 then goto L1c4860;
  #L1c4842.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4848.  v4:= temp @kind object;
  #L1c484a.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4850.  v5:= temp @kind object;
  #L1c4852.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1c4858.  v4:= temp;
  #L1c485a.  if v4 == 0 then goto L1c4860;
  #L1c485e.  goto L1c4862;
  #L1c4860.  v0:= 0I;
  #L1c4862.  return v0;
  #L1c4864.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1c4868.  if v1 == 0 then goto L1c48b4;
  #L1c486c.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1c4870.  if v1 != 0 then goto L1c4876;
  #L1c4874.  return v2;
  #L1c4876.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L1c487a.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L1c487e.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1c4884.  v1:= temp @kind object;
  #L1c4886.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1c488c.  v3:= temp @kind object;
  #L1c488e.  if v1 != v3 then goto L1c48b0;
  #L1c4892.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1c4898.  v4:= temp @kind object;
  #L1c489a.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1c48a0.  v5:= temp @kind object;
  #L1c48a2.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c48a8.  v4:= temp;
  #L1c48aa.  if v4 == 0 then goto L1c48b0;
  #L1c48ae.  goto L1c48b2;
  #L1c48b0.  v0:= 0I;
  #L1c48b2.  return v0;
  #L1c48b4.  return v2;
}
procedure `java.lang.reflect.Type` `e`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/o;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c4cac.  if v5 != v4 then goto L1c4cb2;
  #L1c4cb0.  return v3 @kind object;
  #L1c4cb2.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1c4cb8.  v3:= temp;
  #L1c4cba.  if v3 == 0 then goto L1c4d14;
  #L1c4cbe.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1c4cc4.  v3:= temp @kind object;
  #L1c4cc6.  v0:= 0I;
  #L1c4cc8.  v1:= length @variable v3;
  #L1c4cca.  if v0 >= v1 then goto L1c4d14;
  #L1c4cce.  v2:= v3[v0] @kind object;
  #L1c4cd2.  if v2 != v5 then goto L1c4ce4;
  #L1c4cd6.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1c4cdc.  v3:= temp @kind object;
  #L1c4cde.  v3:= v3[v0] @kind object;
  #L1c4ce2.  return v3 @kind object;
  #L1c4ce4.  v2:= v3[v0] @kind object;
  #L1c4ce8.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c4cee.  v2:= temp;
  #L1c4cf0.  if v2 == 0 then goto L1c4d0e;
  #L1c4cf4.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1c4cfa.  v4:= temp @kind object;
  #L1c4cfc.  v4:= v4[v0] @kind object;
  #L1c4d00.  v3:= v3[v0] @kind object;
  #L1c4d04.  call temp:= `e`(v4, v3, v5) @signature `Lretrofit2/o;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4d0a.  v3:= temp @kind object;
  #L1c4d0c.  return v3 @kind object;
  #L1c4d0e.  v0:= v0 + 1;
  #L1c4d12.  goto L1c4cca;
  #L1c4d14.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1c4d1a.  v3:= temp;
  #L1c4d1c.  if v3 != 0 then goto L1c4d60;
  #L1c4d20.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L1c4d24.  if v4 == v3 then goto L1c4d60;
  #L1c4d28.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1c4d2e.  v3:= temp @kind object;
  #L1c4d30.  if v3 != v5 then goto L1c4d3e;
  #L1c4d34.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1c4d3a.  v3:= temp @kind object;
  #L1c4d3c.  return v3 @kind object;
  #L1c4d3e.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c4d44.  v0:= temp;
  #L1c4d46.  if v0 == 0 then goto L1c4d5c;
  #L1c4d4a.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1c4d50.  v4:= temp @kind object;
  #L1c4d52.  call temp:= `e`(v4, v3, v5) @signature `Lretrofit2/o;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4d58.  v3:= temp @kind object;
  #L1c4d5a.  return v3 @kind object;
  #L1c4d5c.  v4:= v3 @kind object;
  #L1c4d5e.  goto L1c4d20;
  #L1c4d60.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `f`(`int` v0 , `java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lretrofit2/o;.f:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;

  #L1c4d74.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4d7a.  v1:= temp @kind object;
  #L1c4d7c.  v0:= v1[v0] @kind object;
  #L1c4d80.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4d84.  if v1 == 0 then goto L1c4d9a;
  #L1c4d88.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L1c4d8c.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4d92.  v0:= temp @kind object;
  #L1c4d94.  v1:= 0I;
  #L1c4d96.  v0:= v0[v1] @kind object;
  #L1c4d9a.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `g`(`int` v4 , `java.lang.reflect.ParameterizedType` v5 @kind object) @signature `Lretrofit2/o;.g:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c4dac.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4db2.  v0:= temp @kind object;
  #L1c4db4.  if v4 < 0 then goto L1c4dde;
  #L1c4db8.  v1:= length @variable v0;
  #L1c4dba.  if v4 >= v1 then goto L1c4dde;
  #L1c4dbe.  v4:= v0[v4] @kind object;
  #L1c4dc2.  v5:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4dc6.  if v5 == 0 then goto L1c4ddc;
  #L1c4dca.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L1c4dce.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4dd4.  v4:= temp @kind object;
  #L1c4dd6.  v5:= 0I;
  #L1c4dd8.  v4:= v4[v5] @kind object;
  #L1c4ddc.  return v4 @kind object;
  #L1c4dde.  v1:= new `java.lang.IllegalArgumentException`;
  #L1c4de2.  v2:= new `java.lang.StringBuilder`;
  #L1c4de6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4dec.  v3:= "Index " @kind object;
  #L1c4df0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4df6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4dfc.  v4:= " not in range [0," @kind object;
  #L1c4e00.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4e06.  v4:= length @variable v0;
  #L1c4e08.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4e0e.  v4:= ") for " @kind object;
  #L1c4e12.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4e18.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4e1e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4e24.  v4:= temp @kind object;
  #L1c4e26.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4e2c.  throw v1;
}
procedure `java.lang.Class` `h`(`java.lang.reflect.Type` v3 @kind object) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1c4a48.  v0:= "type == null" @kind object;
  #L1c4a4c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c4a52.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L1c4a56.  if v0 == 0 then goto L1c4a60;
  #L1c4a5a.  v3:= (`java.lang.Class`) v3 @kind object;
  #L1c4a5e.  return v3 @kind object;
  #L1c4a60.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c4a64.  if v0 == 0 then goto L1c4a8e;
  #L1c4a68.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L1c4a6c.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4a72.  v3:= temp @kind object;
  #L1c4a74.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L1c4a78.  if v0 == 0 then goto L1c4a82;
  #L1c4a7c.  v3:= (`java.lang.Class`) v3 @kind object;
  #L1c4a80.  return v3 @kind object;
  #L1c4a82.  v3:= new `java.lang.IllegalArgumentException`;
  #L1c4a86.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c4a8c.  throw v3;
  #L1c4a8e.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1c4a92.  v1:= 0I;
  #L1c4a94.  if v0 == 0 then goto L1c4abe;
  #L1c4a98.  v3:= (`java.lang.reflect.GenericArrayType`) v3 @kind object;
  #L1c4a9c.  call temp:= `getGenericComponentType`(v3) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4aa2.  v3:= temp @kind object;
  #L1c4aa4.  call temp:= `h`(v3) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c4aaa.  v3:= temp @kind object;
  #L1c4aac.  call temp:= `newInstance`(v3, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1c4ab2.  v3:= temp @kind object;
  #L1c4ab4.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c4aba.  v3:= temp @kind object;
  #L1c4abc.  return v3 @kind object;
  #L1c4abe.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1c4ac2.  if v0 == 0 then goto L1c4acc;
  #L1c4ac6.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L1c4aca.  return v3 @kind object;
  #L1c4acc.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4ad0.  if v0 == 0 then goto L1c4aee;
  #L1c4ad4.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L1c4ad8.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4ade.  v3:= temp @kind object;
  #L1c4ae0.  v3:= v3[v1] @kind object;
  #L1c4ae4.  call temp:= `h`(v3) @signature `Lretrofit2/o;.h:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1c4aea.  v3:= temp @kind object;
  #L1c4aec.  return v3 @kind object;
  #L1c4aee.  v0:= new `java.lang.IllegalArgumentException`;
  #L1c4af2.  v1:= new `java.lang.StringBuilder`;
  #L1c4af6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4afc.  v2:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1c4b00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b06.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b0c.  v2:= "> is of type " @kind object;
  #L1c4b10.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b16.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c4b1c.  v3:= temp @kind object;
  #L1c4b1e.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c4b24.  v3:= temp @kind object;
  #L1c4b26.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b2c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4b32.  v3:= temp @kind object;
  #L1c4b34.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4b3a.  throw v0;
}
procedure `java.lang.reflect.Type` `i`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/o;.i:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4e40.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1c4e46.  v0:= temp;
  #L1c4e48.  if v0 == 0 then goto L1c4e5e;
  #L1c4e4c.  call temp:= `e`(v1, v2, v3) @signature `Lretrofit2/o;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4e52.  v3:= temp @kind object;
  #L1c4e54.  call temp:= `q`(v1, v2, v3) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4e5a.  v1:= temp @kind object;
  #L1c4e5c.  return v1 @kind object;
  #L1c4e5e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1c4e62.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c4e68.  throw v1;
}
procedure `boolean` `j`(`java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/o;.j:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c48c8.  v0:= instanceof @variable v5 @type ^`java.lang.Class` @kind boolean;
  #L1c48cc.  v1:= 0I;
  #L1c48ce.  if v0 == 0 then goto L1c48d4;
  #L1c48d2.  return v1;
  #L1c48d4.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c48d8.  v2:= 1I;
  #L1c48da.  if v0 == 0 then goto L1c490c;
  #L1c48de.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1c48e2.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c48e8.  v5:= temp @kind object;
  #L1c48ea.  v0:= length @variable v5;
  #L1c48ec.  v3:= 0I;
  #L1c48ee.  if v3 >= v0 then goto L1c490a;
  #L1c48f2.  v4:= v5[v3] @kind object;
  #L1c48f6.  call temp:= `j`(v4) @signature `Lretrofit2/o;.j:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c48fc.  v4:= temp;
  #L1c48fe.  if v4 == 0 then goto L1c4904;
  #L1c4902.  return v2;
  #L1c4904.  v3:= v3 + 1;
  #L1c4908.  goto L1c48ee;
  #L1c490a.  return v1;
  #L1c490c.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1c4910.  if v0 == 0 then goto L1c492a;
  #L1c4914.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L1c4918.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c491e.  v5:= temp @kind object;
  #L1c4920.  call temp:= `j`(v5) @signature `Lretrofit2/o;.j:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c4926.  v5:= temp;
  #L1c4928.  return v5;
  #L1c492a.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1c492e.  if v0 == 0 then goto L1c4934;
  #L1c4932.  return v2;
  #L1c4934.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4938.  if v0 == 0 then goto L1c493e;
  #L1c493c.  return v2;
  #L1c493e.  if v5 != 0 then goto L1c4948;
  #L1c4942.  v0:= "null" @kind object;
  #L1c4946.  goto L1c4958;
  #L1c4948.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c494e.  v0:= temp @kind object;
  #L1c4950.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c4956.  v0:= temp @kind object;
  #L1c4958.  v1:= new `java.lang.IllegalArgumentException`;
  #L1c495c.  v2:= new `java.lang.StringBuilder`;
  #L1c4960.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4966.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1c496a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4970.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4976.  v5:= "> is of type " @kind object;
  #L1c497a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4980.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4986.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c498c.  v5:= temp @kind object;
  #L1c498e.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c4994.  throw v1;
}
procedure `int` `k`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/o;.k:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1c49e0.  v0:= 0I;
  #L1c49e2.  v1:= length @variable v2;
  #L1c49e4.  if v0 >= v1 then goto L1c4a00;
  #L1c49e8.  v1:= v2[v0] @kind object;
  #L1c49ec.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c49f2.  v1:= temp;
  #L1c49f4.  if v1 == 0 then goto L1c49fa;
  #L1c49f8.  return v0;
  #L1c49fa.  v0:= v0 + 1;
  #L1c49fe.  goto L1c49e2;
  #L1c4a00.  v2:= new `java.util.NoSuchElementException`;
  #L1c4a04.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1c4a0a.  throw v2;
}
procedure `boolean` `l`(`java.lang.annotation.Annotation`[] v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/o;.l:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c49a8.  v0:= length @variable v4;
  #L1c49aa.  v1:= 0I;
  #L1c49ac.  v2:= 0I;
  #L1c49ae.  if v2 >= v0 then goto L1c49cc;
  #L1c49b2.  v3:= v4[v2] @kind object;
  #L1c49b6.  call temp:= `isInstance`(v5, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c49bc.  v3:= temp;
  #L1c49be.  if v3 == 0 then goto L1c49c6;
  #L1c49c2.  v4:= 1I;
  #L1c49c4.  return v4;
  #L1c49c6.  v2:= v2 + 1;
  #L1c49ca.  goto L1c49ae;
  #L1c49cc.  return v1;
}
procedure `java.lang.RuntimeException` `m`(`java.lang.reflect.Method` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4b4c.  v0:= 0I;
  #L1c4b4e.  call temp:= `n`(v1, v0, v2, v3) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c4b54.  v1:= temp @kind object;
  #L1c4b56.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `n`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4b68.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1c4b6e.  v3:= temp @kind object;
  #L1c4b70.  v4:= new `java.lang.IllegalArgumentException`;
  #L1c4b74.  v0:= new `java.lang.StringBuilder`;
  #L1c4b78.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4b7e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b84.  v3:= "\n    for method " @kind object;
  #L1c4b88.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4b8e.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L1c4b94.  v3:= temp @kind object;
  #L1c4b96.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1c4b9c.  v3:= temp @kind object;
  #L1c4b9e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4ba4.  v3:= "." @kind object;
  #L1c4ba8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4bae.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c4bb4.  v1:= temp @kind object;
  #L1c4bb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4bbc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4bc2.  v1:= temp @kind object;
  #L1c4bc4.  call `<init>`(v4, v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1c4bca.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `o`(`java.lang.reflect.Method` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4bdc.  v0:= new `java.lang.StringBuilder`;
  #L1c4be0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4be6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4bec.  v3:= " (parameter #" @kind object;
  #L1c4bf0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4bf6.  v2:= v2 + 1;
  #L1c4bfa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c00.  v2:= ")" @kind object;
  #L1c4c04.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4c10.  v2:= temp @kind object;
  #L1c4c12.  call temp:= `m`(v1, v2, v4) @signature `Lretrofit2/o;.m:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c4c18.  v1:= temp @kind object;
  #L1c4c1a.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `p`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/o;.p:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4c2c.  v0:= new `java.lang.StringBuilder`;
  #L1c4c30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4c36.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c3c.  v4:= " (parameter #" @kind object;
  #L1c4c40.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c46.  v3:= v3 + 1;
  #L1c4c4a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c50.  v3:= ")" @kind object;
  #L1c4c54.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4c5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4c60.  v3:= temp @kind object;
  #L1c4c62.  call temp:= `n`(v1, v2, v3, v5) @signature `Lretrofit2/o;.n:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c4c68.  v1:= temp @kind object;
  #L1c4c6a.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `q`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c4e7c.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1c4e80.  if v0 == 0 then goto L1c4e9a;
  #L1c4e84.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L1c4e88.  call temp:= `r`(v8, v9, v10) @signature `Lretrofit2/o;.r:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4e8e.  v0:= temp @kind object;
  #L1c4e90.  if v0 != v10 then goto L1c4e96;
  #L1c4e94.  return v0 @kind object;
  #L1c4e96.  v10:= v0 @kind object;
  #L1c4e98.  goto L1c4e7c;
  #L1c4e9a.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L1c4e9e.  if v0 == 0 then goto L1c4ed6;
  #L1c4ea2.  v0:= v10 @kind object;
  #L1c4ea4.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1c4ea8.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1c4eae.  v1:= temp;
  #L1c4eb0.  if v1 == 0 then goto L1c4ed6;
  #L1c4eb4.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1c4eba.  v10:= temp @kind object;
  #L1c4ebc.  call temp:= `q`(v8, v9, v10) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4ec2.  v8:= temp @kind object;
  #L1c4ec4.  if v10 != v8 then goto L1c4eca;
  #L1c4ec8.  goto L1c4ed4;
  #L1c4eca.  v0:= new `retrofit2.o$a`;
  #L1c4ece.  call `<init>`(v0, v8) @signature `Lretrofit2/o$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1c4ed4.  return v0 @kind object;
  #L1c4ed6.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1c4eda.  if v0 == 0 then goto L1c4f04;
  #L1c4ede.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L1c4ee2.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4ee8.  v0:= temp @kind object;
  #L1c4eea.  call temp:= `q`(v8, v9, v0) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4ef0.  v8:= temp @kind object;
  #L1c4ef2.  if v0 != v8 then goto L1c4ef8;
  #L1c4ef6.  goto L1c4f02;
  #L1c4ef8.  v10:= new `retrofit2.o$a`;
  #L1c4efc.  call `<init>`(v10, v8) @signature `Lretrofit2/o$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1c4f02.  return v10 @kind object;
  #L1c4f04.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c4f08.  v1:= 1I;
  #L1c4f0a.  v2:= 0I;
  #L1c4f0c.  if v0 == 0 then goto L1c4f88;
  #L1c4f10.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L1c4f14.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4f1a.  v0:= temp @kind object;
  #L1c4f1c.  call temp:= `q`(v8, v9, v0) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4f22.  v3:= temp @kind object;
  #L1c4f24.  if v3 == v0 then goto L1c4f2c;
  #L1c4f28.  v0:= 1I;
  #L1c4f2a.  goto L1c4f2e;
  #L1c4f2c.  v0:= 0I;
  #L1c4f2e.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4f34.  v4:= temp @kind object;
  #L1c4f36.  v5:= length @variable v4;
  #L1c4f38.  if v2 >= v5 then goto L1c4f6e;
  #L1c4f3c.  v6:= v4[v2] @kind object;
  #L1c4f40.  call temp:= `q`(v8, v9, v6) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4f46.  v6:= temp @kind object;
  #L1c4f48.  v7:= v4[v2] @kind object;
  #L1c4f4c.  if v6 == v7 then goto L1c4f68;
  #L1c4f50.  if v0 != 0 then goto L1c4f64;
  #L1c4f54.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c4f5a.  v0:= temp @kind object;
  #L1c4f5c.  v4:= v0 @kind object;
  #L1c4f5e.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L1c4f62.  v0:= 1I;
  #L1c4f64.  v4[v2]:= v6 @kind object;
  #L1c4f68.  v2:= v2 + 1;
  #L1c4f6c.  goto L1c4f38;
  #L1c4f6e.  if v0 == 0 then goto L1c4f86;
  #L1c4f72.  v8:= new `retrofit2.o$b`;
  #L1c4f76.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1c4f7c.  v9:= temp @kind object;
  #L1c4f7e.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit2/o$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1c4f84.  v10:= v8 @kind object;
  #L1c4f86.  return v10 @kind object;
  #L1c4f88.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4f8c.  if v0 == 0 then goto L1c5010;
  #L1c4f90.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L1c4f94.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4f9a.  v0:= temp @kind object;
  #L1c4f9c.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c4fa2.  v3:= temp @kind object;
  #L1c4fa4.  v4:= length @variable v0;
  #L1c4fa6.  if v4 != v1 then goto L1c4fde;
  #L1c4faa.  v3:= v0[v2] @kind object;
  #L1c4fae.  call temp:= `q`(v8, v9, v3) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4fb4.  v8:= temp @kind object;
  #L1c4fb6.  v9:= v0[v2] @kind object;
  #L1c4fba.  if v8 == v9 then goto L1c5010;
  #L1c4fbe.  v9:= new `retrofit2.o$c`;
  #L1c4fc2.  v10:= new `java.lang.reflect.Type`[v1];
  #L1c4fc6.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1c4fca.  v10[v2]:= v0 @kind object;
  #L1c4fce.  v0:= new `java.lang.reflect.Type`[v1];
  #L1c4fd2.  v0[v2]:= v8 @kind object;
  #L1c4fd6.  call `<init>`(v9, v10, v0) @signature `Lretrofit2/o$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1c4fdc.  return v9 @kind object;
  #L1c4fde.  v0:= length @variable v3;
  #L1c4fe0.  if v0 != v1 then goto L1c5010;
  #L1c4fe4.  v0:= v3[v2] @kind object;
  #L1c4fe8.  call temp:= `q`(v8, v9, v0) @signature `Lretrofit2/o;.q:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1c4fee.  v8:= temp @kind object;
  #L1c4ff0.  v9:= v3[v2] @kind object;
  #L1c4ff4.  if v8 == v9 then goto L1c5010;
  #L1c4ff8.  v9:= new `retrofit2.o$c`;
  #L1c4ffc.  v10:= new `java.lang.reflect.Type`[v1];
  #L1c5000.  v10[v2]:= v8 @kind object;
  #L1c5004.  v8:= `@@retrofit2.o.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c5008.  call `<init>`(v9, v10, v8) @signature `Lretrofit2/o$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1c500e.  return v9 @kind object;
  #L1c5010.  return v10 @kind object;
  #L1c5012.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c5014.  throw v8;
  catch `java.lang.Throwable` @[L1c4fe8..L1c4ff0] goto L1c5012;
}
procedure `java.lang.reflect.Type` `r`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit2/o;.r:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1c5034.  call temp:= `c`(v3) @signature `Lretrofit2/o;.c:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L1c503a.  v0:= temp @kind object;
  #L1c503c.  if v0 != 0 then goto L1c5042;
  #L1c5040.  return v3 @kind object;
  #L1c5042.  call temp:= `e`(v1, v2, v0) @signature `Lretrofit2/o;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1c5048.  v1:= temp @kind object;
  #L1c504a.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c504e.  if v2 == 0 then goto L1c5074;
  #L1c5052.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1c5058.  v2:= temp @kind object;
  #L1c505a.  call temp:= `k`(v2, v3) @signature `Lretrofit2/o;.k:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L1c5060.  v2:= temp;
  #L1c5062.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1c5066.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1c506c.  v1:= temp @kind object;
  #L1c506e.  v1:= v1[v2] @kind object;
  #L1c5072.  return v1 @kind object;
  #L1c5074.  return v3 @kind object;
}
procedure `void` `s`(`java.lang.Throwable` v1 @kind object) @signature `Lretrofit2/o;.s:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1c5120.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L1c5124.  if v0 != 0 then goto L1c5146;
  #L1c5128.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L1c512c.  if v0 != 0 then goto L1c5140;
  #L1c5130.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L1c5134.  if v0 != 0 then goto L1c513a;
  #L1c5138.  return @kind void;
  #L1c513a.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L1c513e.  throw v1;
  #L1c5140.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L1c5144.  throw v1;
  #L1c5146.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L1c514a.  throw v1;
}
procedure `java.lang.String` `t`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L1c4c7c.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1c4c80.  if v0 == 0 then goto L1c4c92;
  #L1c4c84.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1c4c88.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c4c8e.  v1:= temp @kind object;
  #L1c4c90.  goto L1c4c9a;
  #L1c4c92.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4c98.  v1:= temp @kind object;
  #L1c4c9a.  return v1 @kind object;
}
