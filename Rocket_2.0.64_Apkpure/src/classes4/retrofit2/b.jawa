record `retrofit2.b` @kind class @AccessFlag FINAL extends `retrofit2.CallAdapter$Factory` @kind class {
}
global `retrofit2.CallAdapter$Factory` `@@retrofit2.b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1be9c8.  v0:= new `retrofit2.b`;
  #L1be9cc.  call `<init>`(v0) @signature `Lretrofit2/b;.<init>:()V` @kind direct;
  #L1be9d2.  `@@retrofit2.b.a` @type ^`retrofit2.CallAdapter$Factory` := v0 @kind object;
  #L1be9d6.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.b` v0 @kind this) @signature `Lretrofit2/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be9e8.  call `<init>`(v0) @signature `Lretrofit2/CallAdapter$Factory;.<init>:()V` @kind direct;
  #L1be9ee.  return @kind void;
}
procedure `retrofit2.CallAdapter` `get`(`retrofit2.b` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/b;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1be930.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1be936.  v3:= temp @kind object;
  #L1be938.  v4:= constclass @type ^`java.util.concurrent.CompletableFuture` @kind object;
  #L1be93c.  if v3 == v4 then goto L1be944;
  #L1be940.  v2:= 0I;
  #L1be942.  return v2 @kind object;
  #L1be944.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1be948.  if v3 == 0 then goto L1be9a6;
  #L1be94c.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1be950.  v3:= 0I;
  #L1be952.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1be958.  v2:= temp @kind object;
  #L1be95a.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1be960.  v4:= temp @kind object;
  #L1be962.  v0:= constclass @type ^`retrofit2.Response` @kind object;
  #L1be966.  if v4 == v0 then goto L1be976;
  #L1be96a.  v3:= new `retrofit2.b$a`;
  #L1be96e.  call `<init>`(v3, v2) @signature `Lretrofit2/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1be974.  return v3 @kind object;
  #L1be976.  v4:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1be97a.  if v4 == 0 then goto L1be996;
  #L1be97e.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1be982.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1be988.  v2:= temp @kind object;
  #L1be98a.  v3:= new `retrofit2.b$c`;
  #L1be98e.  call `<init>`(v3, v2) @signature `Lretrofit2/b$c;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1be994.  return v3 @kind object;
  #L1be996.  v2:= new `java.lang.IllegalStateException`;
  #L1be99a.  v3:= "Response must be parameterized as Response<Foo> or Response<? extends Foo>" @kind object;
  #L1be99e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be9a4.  throw v2;
  #L1be9a6.  v2:= new `java.lang.IllegalStateException`;
  #L1be9aa.  v3:= "CompletableFuture return type must be parameterized as CompletableFuture<Foo> or CompletableFuture<? extends Foo>" @kind object;
  #L1be9ae.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be9b4.  throw v2;
}
