record `retrofit2.i$m` @kind class @AccessFlag FINAL extends `retrofit2.i` @kind class {
  `java.lang.reflect.Method` `retrofit2.i$m.a` @AccessFlag PRIVATE_FINAL;
  `int` `retrofit2.i$m.b` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.i$m.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.i$m.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.i$m` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `int` v2 , `retrofit2.Converter` v3 @kind object, `boolean` v4 ) @signature `Lretrofit2/i$m;.<init>:(Ljava/lang/reflect/Method;ILretrofit2/Converter;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c0bc8.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c0bce.  v0.`retrofit2.i$m.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L1c0bd2.  v0.`retrofit2.i$m.b` @type ^`int` := v2;
  #L1c0bd6.  v0.`retrofit2.i$m.c` @type ^`retrofit2.Converter` := v3 @kind object;
  #L1c0bda.  v0.`retrofit2.i$m.d` @type ^`boolean` := v4 @kind boolean;
  #L1c0bde.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$m` v0 @kind this, `retrofit2.k` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/i$m;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag SYNTHETIC {
    temp;

  #L1c0bf0.  v2:= (`java.util.Map`) v2 @kind object;
  #L1c0bf4.  call `d`(v0, v1, v2) @signature `Lretrofit2/i$m;.d:(Lretrofit2/k;Ljava/util/Map;)V` @kind virtual;
  #L1c0bfa.  return @kind void;
}
procedure `void` `d`(`retrofit2.i$m` v6 @kind this, `retrofit2.k` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lretrofit2/i$m;.d:(Lretrofit2/k;Ljava/util/Map;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c0c0c.  v0:= 0I;
  #L1c0c0e.  if v8 == 0 then goto L1c0d46;
  #L1c0c12.  call temp:= `entrySet`(v8) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1c0c18.  v8:= temp @kind object;
  #L1c0c1a.  call temp:= `iterator`(v8) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c0c20.  v8:= temp @kind object;
  #L1c0c22.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c0c28.  v1:= temp;
  #L1c0c2a.  if v1 == 0 then goto L1c0d44;
  #L1c0c2e.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c0c34.  v1:= temp @kind object;
  #L1c0c36.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L1c0c3a.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1c0c40.  v2:= temp @kind object;
  #L1c0c42.  v2:= (`java.lang.String`) v2 @kind object;
  #L1c0c46.  if v2 == 0 then goto L1c0d2a;
  #L1c0c4a.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1c0c50.  v1:= temp @kind object;
  #L1c0c52.  v3:= "'." @kind object;
  #L1c0c56.  if v1 == 0 then goto L1c0cec;
  #L1c0c5a.  v4:= v6.`retrofit2.i$m.c` @type ^`retrofit2.Converter` @kind object;
  #L1c0c5e.  call temp:= `convert`(v4, v1) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1c0c64.  v4:= temp @kind object;
  #L1c0c66.  v4:= (`java.lang.String`) v4 @kind object;
  #L1c0c6a.  if v4 == 0 then goto L1c0c7a;
  #L1c0c6e.  v1:= v6.`retrofit2.i$m.d` @type ^`boolean` @kind boolean;
  #L1c0c72.  call `g`(v7, v2, v4, v1) @signature `Lretrofit2/k;.g:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind virtual;
  #L1c0c78.  goto L1c0c22;
  #L1c0c7a.  v7:= v6.`retrofit2.i$m.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0c7e.  v8:= v6.`retrofit2.i$m.b` @type ^`int`;
  #L1c0c82.  v4:= new `java.lang.StringBuilder`;
  #L1c0c86.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c0c8c.  v5:= "Query map value '" @kind object;
  #L1c0c90.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0c96.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0c9c.  v1:= "' converted to null by " @kind object;
  #L1c0ca0.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0ca6.  v1:= v6.`retrofit2.i$m.c` @type ^`retrofit2.Converter` @kind object;
  #L1c0caa.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1c0cb0.  v1:= temp @kind object;
  #L1c0cb2.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c0cb8.  v1:= temp @kind object;
  #L1c0cba.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0cc0.  v1:= " for key '" @kind object;
  #L1c0cc4.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0cca.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0cd0.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0cd6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c0cdc.  v1:= temp @kind object;
  #L1c0cde.  v0:= new `java.lang.Object`[v0];
  #L1c0ce2.  call temp:= `o`(v7, v8, v1, v0) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0ce8.  v7:= temp @kind object;
  #L1c0cea.  throw v7;
  #L1c0cec.  v7:= v6.`retrofit2.i$m.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0cf0.  v8:= v6.`retrofit2.i$m.b` @type ^`int`;
  #L1c0cf4.  v1:= new `java.lang.StringBuilder`;
  #L1c0cf8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c0cfe.  v4:= "Query map contained null value for key '" @kind object;
  #L1c0d02.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0d08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0d0e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0d14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c0d1a.  v1:= temp @kind object;
  #L1c0d1c.  v0:= new `java.lang.Object`[v0];
  #L1c0d20.  call temp:= `o`(v7, v8, v1, v0) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0d26.  v7:= temp @kind object;
  #L1c0d28.  throw v7;
  #L1c0d2a.  v7:= v6.`retrofit2.i$m.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0d2e.  v8:= v6.`retrofit2.i$m.b` @type ^`int`;
  #L1c0d32.  v0:= new `java.lang.Object`[v0];
  #L1c0d36.  v1:= "Query map contained null key." @kind object;
  #L1c0d3a.  call temp:= `o`(v7, v8, v1, v0) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0d40.  v7:= temp @kind object;
  #L1c0d42.  throw v7;
  #L1c0d44.  return @kind void;
  #L1c0d46.  v7:= v6.`retrofit2.i$m.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0d4a.  v8:= v6.`retrofit2.i$m.b` @type ^`int`;
  #L1c0d4e.  v0:= new `java.lang.Object`[v0];
  #L1c0d52.  v1:= "Query map was null" @kind object;
  #L1c0d56.  call temp:= `o`(v7, v8, v1, v0) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0d5c.  v7:= temp @kind object;
  #L1c0d5e.  throw v7;
}
