record `retrofit2.i$h` @kind class @AccessFlag FINAL extends `retrofit2.i` @kind class {
  `java.lang.reflect.Method` `retrofit2.i$h.a` @AccessFlag PRIVATE_FINAL;
  `int` `retrofit2.i$h.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.i$h` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `int` v2 ) @signature `Lretrofit2/i$h;.<init>:(Ljava/lang/reflect/Method;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c07f8.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c07fe.  v0.`retrofit2.i$h.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L1c0802.  v0.`retrofit2.i$h.b` @type ^`int` := v2;
  #L1c0806.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$h` v0 @kind this, `retrofit2.k` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/i$h;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag SYNTHETIC {
    temp;

  #L1c0818.  v2:= (`okhttp3.Headers`) v2 @kind object;
  #L1c081c.  call `d`(v0, v1, v2) @signature `Lretrofit2/i$h;.d:(Lretrofit2/k;Lokhttp3/Headers;)V` @kind virtual;
  #L1c0822.  return @kind void;
}
procedure `void` `d`(`retrofit2.i$h` v2 @kind this, `retrofit2.k` v3 @kind object, `okhttp3.Headers` v4 @kind object) @signature `Lretrofit2/i$h;.d:(Lretrofit2/k;Lokhttp3/Headers;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c0834.  if v4 == 0 then goto L1c0840;
  #L1c0838.  call `c`(v3, v4) @signature `Lretrofit2/k;.c:(Lokhttp3/Headers;)V` @kind virtual;
  #L1c083e.  return @kind void;
  #L1c0840.  v3:= v2.`retrofit2.i$h.a` @type ^`java.lang.reflect.Method` @kind object;
  #L1c0844.  v4:= v2.`retrofit2.i$h.b` @type ^`int`;
  #L1c0848.  v0:= 0I;
  #L1c084a.  v0:= new `java.lang.Object`[v0];
  #L1c084e.  v1:= "Headers parameter must not be null." @kind object;
  #L1c0852.  call temp:= `o`(v3, v4, v1, v0) @signature `Lretrofit2/o;.o:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L1c0858.  v3:= temp @kind object;
  #L1c085a.  throw v3;
}
