record `retrofit2.a$a` @kind class @AccessFlag FINAL extends `retrofit2.Converter` @kind interface {
}
global `retrofit2.a$a` `@@retrofit2.a$a.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1be398.  v0:= new `retrofit2.a$a`;
  #L1be39c.  call `<init>`(v0) @signature `Lretrofit2/a$a;.<init>:()V` @kind direct;
  #L1be3a2.  `@@retrofit2.a$a.a` @type ^`retrofit2.a$a` := v0 @kind object;
  #L1be3a6.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.a$a` v0 @kind this) @signature `Lretrofit2/a$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be3b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1be3be.  return @kind void;
}
procedure `okhttp3.ResponseBody` `a`(`retrofit2.a$a` v1 @kind this, `okhttp3.ResponseBody` v2 @kind object) @signature `Lretrofit2/a$a;.a:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1be360.  call temp:= `a`(v2) @signature `Lretrofit2/o;.a:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @kind static;
  #L1be366.  v0:= temp @kind object;
  #L1be368.  call `close`(v2) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L1be36e.  return v0 @kind object;
  #L1be370.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1be372.  call `close`(v2) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L1be378.  throw v0;
  catch `java.lang.Throwable` @[L1be360..L1be368] goto L1be370;
}
procedure `java.lang.Object` `convert`(`retrofit2.a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/a$a;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1be340.  v1:= (`okhttp3.ResponseBody`) v1 @kind object;
  #L1be344.  call temp:= `a`(v0, v1) @signature `Lretrofit2/a$a;.a:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @kind virtual;
  #L1be34a.  v1:= temp @kind object;
  #L1be34c.  return v1 @kind object;
}
