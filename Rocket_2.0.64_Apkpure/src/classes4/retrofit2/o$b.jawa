record `retrofit2.o$b` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.o$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.o$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.o$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.o$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit2/o$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c44c4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c44ca.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L1c44ce.  v1:= 0I;
  #L1c44d0.  if v0 == 0 then goto L1c4508;
  #L1c44d4.  v0:= 1I;
  #L1c44d6.  if v5 != 0 then goto L1c44de;
  #L1c44da.  v2:= 1I;
  #L1c44dc.  goto L1c44e0;
  #L1c44de.  v2:= 0I;
  #L1c44e0.  v3:= v6 @kind object;
  #L1c44e2.  v3:= (`java.lang.Class`) v3 @kind object;
  #L1c44e6.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L1c44ec.  v3:= temp @kind object;
  #L1c44ee.  if v3 != 0 then goto L1c44f4;
  #L1c44f2.  goto L1c44f6;
  #L1c44f4.  v0:= 0I;
  #L1c44f6.  if v2 != v0 then goto L1c44fc;
  #L1c44fa.  goto L1c4508;
  #L1c44fc.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c4500.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c4506.  throw v5;
  #L1c4508.  v0:= length @variable v7;
  #L1c450a.  if v1 >= v0 then goto L1c4528;
  #L1c450e.  v2:= v7[v1] @kind object;
  #L1c4512.  v3:= "typeArgument == null" @kind object;
  #L1c4516.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1c451c.  call `b`(v2) @signature `Lretrofit2/o;.b:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1c4522.  v1:= v1 + 1;
  #L1c4526.  goto L1c450a;
  #L1c4528.  v4.`retrofit2.o$b.a` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L1c452c.  v4.`retrofit2.o$b.b` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1c4530.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c4536.  v5:= temp @kind object;
  #L1c4538.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L1c453c.  v4.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L1c4540.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.o$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/o$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4348.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1c434c.  if v0 == 0 then goto L1c4364;
  #L1c4350.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1c4354.  call temp:= `d`(v1, v2) @signature `Lretrofit2/o;.d:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c435a.  v2:= temp;
  #L1c435c.  if v2 == 0 then goto L1c4364;
  #L1c4360.  v2:= 1I;
  #L1c4362.  goto L1c4366;
  #L1c4364.  v2:= 0I;
  #L1c4366.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.o$b` v1 @kind this) @signature `Lretrofit2/o$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c44a0.  v0:= v1.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c44a4.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1c44aa.  v0:= temp @kind object;
  #L1c44ac.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1c44b0.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.o$b` v1 @kind this) @signature `Lretrofit2/o$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4470.  v0:= v1.`retrofit2.o$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4474.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.o$b` v1 @kind this) @signature `Lretrofit2/o$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4488.  v0:= v1.`retrofit2.o$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c448c.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.o$b` v2 @kind this) @signature `Lretrofit2/o$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c4378.  v0:= v2.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c437c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1c4382.  v0:= temp;
  #L1c4384.  v1:= v2.`retrofit2.o$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4388.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c438e.  v1:= temp;
  #L1c4390.  v0:= v0 ^~ v1 @kind int;
  #L1c4392.  v1:= v2.`retrofit2.o$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4396.  if v1 == 0 then goto L1c43a4;
  #L1c439a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c43a0.  v1:= temp;
  #L1c43a2.  goto L1c43a6;
  #L1c43a4.  v1:= 0I;
  #L1c43a6.  v0:= v0 ^~ v1 @kind int;
  #L1c43a8.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.o$b` v4 @kind this) @signature `Lretrofit2/o$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c43bc.  v0:= v4.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c43c0.  v1:= length @variable v0;
  #L1c43c2.  if v1 != 0 then goto L1c43d4;
  #L1c43c6.  v0:= v4.`retrofit2.o$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c43ca.  call temp:= `t`(v0) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c43d0.  v0:= temp @kind object;
  #L1c43d2.  return v0 @kind object;
  #L1c43d4.  v1:= new `java.lang.StringBuilder`;
  #L1c43d8.  v0:= length @variable v0;
  #L1c43da.  v2:= 1I;
  #L1c43dc.  v0:= v0 + v2 @kind int;
  #L1c43de.  v0:= v0 * 30;
  #L1c43e2.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1c43e8.  v0:= v4.`retrofit2.o$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c43ec.  call temp:= `t`(v0) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c43f2.  v0:= temp @kind object;
  #L1c43f4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c43fa.  v0:= "<" @kind object;
  #L1c43fe.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4404.  v0:= v4.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c4408.  v3:= 0I;
  #L1c440a.  v0:= v0[v3] @kind object;
  #L1c440e.  call temp:= `t`(v0) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c4414.  v0:= temp @kind object;
  #L1c4416.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c441c.  v0:= v4.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c4420.  v0:= length @variable v0;
  #L1c4422.  if v2 >= v0 then goto L1c444c;
  #L1c4426.  v0:= ", " @kind object;
  #L1c442a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4430.  v0:= v4.`retrofit2.o$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c4434.  v0:= v0[v2] @kind object;
  #L1c4438.  call temp:= `t`(v0) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c443e.  v0:= temp @kind object;
  #L1c4440.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4446.  v2:= v2 + 1;
  #L1c444a.  goto L1c441c;
  #L1c444c.  v0:= ">" @kind object;
  #L1c4450.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4456.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c445c.  v0:= temp @kind object;
  #L1c445e.  return v0 @kind object;
}
