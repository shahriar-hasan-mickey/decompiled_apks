record `retrofit2.k` @kind class @AccessFlag FINAL {
  `java.lang.String` `retrofit2.k.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.HttpUrl` `retrofit2.k.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.k.c` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl$Builder` `retrofit2.k.d` @AccessFlag PRIVATE;
  `okhttp3.Request$Builder` `retrofit2.k.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers$Builder` `retrofit2.k.f` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `retrofit2.k.g` @AccessFlag PRIVATE;
  `boolean` `retrofit2.k.h` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MultipartBody$Builder` `retrofit2.k.i` @AccessFlag PRIVATE;
  `okhttp3.FormBody$Builder` `retrofit2.k.j` @AccessFlag PRIVATE;
  `okhttp3.RequestBody` `retrofit2.k.k` @AccessFlag PRIVATE;
}
global `char`[] `@@retrofit2.k.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.k.m` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c14a8.  v0:= 16I;
  #L1c14ac.  v0:= new `char`[v0];
  #L1c14b0.  goto L1c14cc;
  #L1c14b6.  `@@retrofit2.k.l` @type ^`char`[] := v0 @kind object;
  #L1c14ba.  v0:= "(.*/)?(\\.|%2e|%2E){1,2}(/.*)?" @kind object;
  #L1c14be.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1c14c4.  v0:= temp @kind object;
  #L1c14c6.  `@@retrofit2.k.m` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1c14ca.  return @kind void;
  #L1c14cc.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L1c14f3.  goto L1c14b6;
}
procedure `void` `<init>`(`retrofit2.k` v0 @kind this, `java.lang.String` v1 @kind object, `okhttp3.HttpUrl` v2 @kind object, `java.lang.String` v3 @kind object, `okhttp3.Headers` v4 @kind object, `okhttp3.MediaType` v5 @kind object, `boolean` v6 , `boolean` v7 , `boolean` v8 ) @signature `Lretrofit2/k;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c1504.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c150a.  v0.`retrofit2.k.a` @type ^`java.lang.String` := v1 @kind object;
  #L1c150e.  v0.`retrofit2.k.b` @type ^`okhttp3.HttpUrl` := v2 @kind object;
  #L1c1512.  v0.`retrofit2.k.c` @type ^`java.lang.String` := v3 @kind object;
  #L1c1516.  v1:= new `okhttp3.Request$Builder`;
  #L1c151a.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1c1520.  v0.`retrofit2.k.e` @type ^`okhttp3.Request$Builder` := v1 @kind object;
  #L1c1524.  v0.`retrofit2.k.g` @type ^`okhttp3.MediaType` := v5 @kind object;
  #L1c1528.  v0.`retrofit2.k.h` @type ^`boolean` := v6 @kind boolean;
  #L1c152c.  if v4 == 0 then goto L1c153e;
  #L1c1530.  call temp:= `newBuilder`(v4) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L1c1536.  v1:= temp @kind object;
  #L1c1538.  v0.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L1c153c.  goto L1c154c;
  #L1c153e.  v1:= new `okhttp3.Headers$Builder`;
  #L1c1542.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L1c1548.  v0.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L1c154c.  if v7 == 0 then goto L1c1560;
  #L1c1550.  v1:= new `okhttp3.FormBody$Builder`;
  #L1c1554.  call `<init>`(v1) @signature `Lokhttp3/FormBody$Builder;.<init>:()V` @kind direct;
  #L1c155a.  v0.`retrofit2.k.j` @type ^`okhttp3.FormBody$Builder` := v1 @kind object;
  #L1c155e.  goto L1c157c;
  #L1c1560.  if v8 == 0 then goto L1c157c;
  #L1c1564.  v1:= new `okhttp3.MultipartBody$Builder`;
  #L1c1568.  call `<init>`(v1) @signature `Lokhttp3/MultipartBody$Builder;.<init>:()V` @kind direct;
  #L1c156e.  v0.`retrofit2.k.i` @type ^`okhttp3.MultipartBody$Builder` := v1 @kind object;
  #L1c1572.  v2:= `@@okhttp3.MultipartBody.FORM` @type ^`okhttp3.MediaType` @kind object;
  #L1c1576.  call temp:= `setType`(v1, v2) @signature `Lokhttp3/MultipartBody$Builder;.setType:(Lokhttp3/MediaType;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L1c157c.  return @kind void;
}
procedure `java.lang.String` `i`(`java.lang.String` v6 @kind object, `boolean` v7 ) @signature `Lretrofit2/k;.i:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c12fc.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1c1302.  v0:= temp;
  #L1c1304.  v1:= 0I;
  #L1c1306.  v2:= 0I;
  #L1c1308.  if v2 >= v0 then goto L1c1376;
  #L1c130c.  call temp:= `codePointAt`(v6, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L1c1312.  v3:= temp;
  #L1c1314.  v4:= 32I;
  #L1c1318.  if v3 < v4 then goto L1c1358;
  #L1c131c.  v4:= 127I;
  #L1c1320.  if v3 >= v4 then goto L1c1358;
  #L1c1324.  v4:= " \"<>^`{}|\\?#" @kind object;
  #L1c1328.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1c132e.  v4:= temp;
  #L1c1330.  v5:= -1I;
  #L1c1332.  if v4 != v5 then goto L1c1358;
  #L1c1336.  if v7 != 0 then goto L1c134c;
  #L1c133a.  v4:= 47I;
  #L1c133e.  if v3 == v4 then goto L1c1358;
  #L1c1342.  v4:= 37I;
  #L1c1346.  if v3 != v4 then goto L1c134c;
  #L1c134a.  goto L1c1358;
  #L1c134c.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1c1352.  v3:= temp;
  #L1c1354.  v2:= v2 + v3 @kind int;
  #L1c1356.  goto L1c1308;
  #L1c1358.  v3:= new `okio.Buffer`;
  #L1c135c.  call `<init>`(v3) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1c1362.  call temp:= `writeUtf8`(v3, v6, v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1c1368.  call `j`(v3, v6, v2, v0, v7) @signature `Lretrofit2/k;.j:(Lokio/Buffer;Ljava/lang/String;IIZ)V` @kind static;
  #L1c136e.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1c1374.  v6:= temp @kind object;
  #L1c1376.  return v6 @kind object;
}
procedure `void` `j`(`okio.Buffer` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `boolean` v10 ) @signature `Lretrofit2/k;.j:(Lokio/Buffer;Ljava/lang/String;IIZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1c17f0.  v0:= 0I;
  #L1c17f2.  if v8 >= v9 then goto L1c18c8;
  #L1c17f6.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L1c17fc.  v1:= temp;
  #L1c17fe.  if v10 == 0 then goto L1c1824;
  #L1c1802.  v2:= 9I;
  #L1c1806.  if v1 == v2 then goto L1c18bc;
  #L1c180a.  v2:= 10I;
  #L1c180e.  if v1 == v2 then goto L1c18bc;
  #L1c1812.  v2:= 12I;
  #L1c1816.  if v1 == v2 then goto L1c18bc;
  #L1c181a.  v2:= 13I;
  #L1c181e.  if v1 != v2 then goto L1c1824;
  #L1c1822.  goto L1c18bc;
  #L1c1824.  v2:= 32I;
  #L1c1828.  v3:= 37I;
  #L1c182c.  if v1 < v2 then goto L1c1864;
  #L1c1830.  v2:= 127I;
  #L1c1834.  if v1 >= v2 then goto L1c1864;
  #L1c1838.  v2:= " \"<>^`{}|\\?#" @kind object;
  #L1c183c.  call temp:= `indexOf`(v2, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1c1842.  v2:= temp;
  #L1c1844.  v4:= -1I;
  #L1c1846.  if v2 != v4 then goto L1c1864;
  #L1c184a.  if v10 != 0 then goto L1c185c;
  #L1c184e.  v2:= 47I;
  #L1c1852.  if v1 == v2 then goto L1c1864;
  #L1c1856.  if v1 != v3 then goto L1c185c;
  #L1c185a.  goto L1c1864;
  #L1c185c.  call temp:= `writeUtf8CodePoint`(v6, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1c1862.  goto L1c18bc;
  #L1c1864.  if v0 != 0 then goto L1c1872;
  #L1c1868.  v0:= new `okio.Buffer`;
  #L1c186c.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1c1872.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1c1878.  call temp:= `exhausted`(v0) @signature `Lokio/Buffer;.exhausted:()Z` @kind virtual;
  #L1c187e.  v2:= temp;
  #L1c1880.  if v2 != 0 then goto L1c18bc;
  #L1c1884.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1c188a.  v2:= temp;
  #L1c188c.  v2:= v2 ^& 255;
  #L1c1890.  call temp:= `writeByte`(v6, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1c1896.  v4:= `@@retrofit2.k.l` @type ^`char`[] @kind object;
  #L1c189a.  v5:= v2 ^> 4;
  #L1c189e.  v5:= v5 ^& 15;
  #L1c18a2.  v5:= v4[v5] @kind char;
  #L1c18a6.  call temp:= `writeByte`(v6, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1c18ac.  v2:= v2 ^& 15;
  #L1c18b0.  v2:= v4[v2] @kind char;
  #L1c18b4.  call temp:= `writeByte`(v6, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1c18ba.  goto L1c1878;
  #L1c18bc.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L1c18c2.  v1:= temp;
  #L1c18c4.  v8:= v8 + v1 @kind int;
  #L1c18c6.  goto L1c17f2;
  #L1c18c8.  return @kind void;
}
procedure `void` `a`(`retrofit2.k` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lretrofit2/k;.a:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;

  #L1c1590.  if v3 == 0 then goto L1c15a0;
  #L1c1594.  v3:= v0.`retrofit2.k.j` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L1c1598.  call temp:= `addEncoded`(v3, v1, v2) @signature `Lokhttp3/FormBody$Builder;.addEncoded:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/FormBody$Builder;` @kind virtual;
  #L1c159e.  goto L1c15aa;
  #L1c15a0.  v3:= v0.`retrofit2.k.j` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L1c15a4.  call temp:= `add`(v3, v1, v2) @signature `Lokhttp3/FormBody$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/FormBody$Builder;` @kind virtual;
  #L1c15aa.  return @kind void;
}
procedure `void` `b`(`retrofit2.k` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lretrofit2/k;.b:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1c15bc.  v0:= "Content-Type" @kind object;
  #L1c15c0.  call temp:= `equalsIgnoreCase`(v0, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1c15c6.  v0:= temp;
  #L1c15c8.  if v0 == 0 then goto L1c160a;
  #L1c15cc.  call temp:= `get`(v5) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L1c15d2.  v4:= temp @kind object;
  #L1c15d4.  v3.`retrofit2.k.g` @type ^`okhttp3.MediaType` := v4 @kind object;
  #L1c15d8.  goto L1c1614;
  #L1c15da.  v4:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1c15dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L1c15e0.  v1:= new `java.lang.StringBuilder`;
  #L1c15e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c15ea.  v2:= "Malformed content type: " @kind object;
  #L1c15ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c15f4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c15fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1600.  v5:= temp @kind object;
  #L1c1602.  call `<init>`(v0, v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1c1608.  throw v0;
  #L1c160a.  v0:= v3.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L1c160e.  call temp:= `add`(v0, v4, v5) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1c1614.  return @kind void;
  catch `java.lang.IllegalArgumentException` @[L1c15cc..L1c15d8] goto L1c15da;
}
procedure `void` `c`(`retrofit2.k` v1 @kind this, `okhttp3.Headers` v2 @kind object) @signature `Lretrofit2/k;.c:(Lokhttp3/Headers;)V` @AccessFlag  {
    temp;
    v0;

  #L1c1638.  v0:= v1.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L1c163c.  call temp:= `addAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.addAll:(Lokhttp3/Headers;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1c1642.  return @kind void;
}
procedure `void` `d`(`retrofit2.k` v1 @kind this, `okhttp3.Headers` v2 @kind object, `okhttp3.RequestBody` v3 @kind object) @signature `Lretrofit2/k;.d:(Lokhttp3/Headers;Lokhttp3/RequestBody;)V` @AccessFlag  {
    temp;
    v0;

  #L1c1654.  v0:= v1.`retrofit2.k.i` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L1c1658.  call temp:= `addPart`(v0, v2, v3) @signature `Lokhttp3/MultipartBody$Builder;.addPart:(Lokhttp3/Headers;Lokhttp3/RequestBody;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L1c165e.  return @kind void;
}
procedure `void` `e`(`retrofit2.k` v1 @kind this, `okhttp3.MultipartBody$Part` v2 @kind object) @signature `Lretrofit2/k;.e:(Lokhttp3/MultipartBody$Part;)V` @AccessFlag  {
    temp;
    v0;

  #L1c1670.  v0:= v1.`retrofit2.k.i` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L1c1674.  call temp:= `addPart`(v0, v2) @signature `Lokhttp3/MultipartBody$Builder;.addPart:(Lokhttp3/MultipartBody$Part;)Lokhttp3/MultipartBody$Builder;` @kind virtual;
  #L1c167a.  return @kind void;
}
procedure `void` `f`(`retrofit2.k` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `boolean` v6 ) @signature `Lretrofit2/k;.f:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1c168c.  v0:= v3.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c1690.  if v0 == 0 then goto L1c1720;
  #L1c1694.  call temp:= `i`(v5, v6) @signature `Lretrofit2/k;.i:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L1c169a.  v6:= temp @kind object;
  #L1c169c.  v0:= v3.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c16a0.  v1:= new `java.lang.StringBuilder`;
  #L1c16a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c16aa.  v2:= "{" @kind object;
  #L1c16ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c16b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c16ba.  v4:= "}" @kind object;
  #L1c16be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c16c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c16ca.  v4:= temp @kind object;
  #L1c16cc.  call temp:= `replace`(v0, v4, v6) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L1c16d2.  v4:= temp @kind object;
  #L1c16d4.  v6:= `@@retrofit2.k.m` @type ^`java.util.regex.Pattern` @kind object;
  #L1c16d8.  call temp:= `matcher`(v6, v4) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1c16de.  v6:= temp @kind object;
  #L1c16e0.  call temp:= `matches`(v6) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1c16e6.  v6:= temp;
  #L1c16e8.  if v6 != 0 then goto L1c16f2;
  #L1c16ec.  v3.`retrofit2.k.c` @type ^`java.lang.String` := v4 @kind object;
  #L1c16f0.  return @kind void;
  #L1c16f2.  v4:= new `java.lang.IllegalArgumentException`;
  #L1c16f6.  v6:= new `java.lang.StringBuilder`;
  #L1c16fa.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c1700.  v0:= "@Path parameters shouldn't perform path traversal ('.' or '..'): " @kind object;
  #L1c1704.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c170a.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1710.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1716.  v5:= temp @kind object;
  #L1c1718.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c171e.  throw v4;
  #L1c1720.  v4:= new `java.lang.AssertionError`;
  #L1c1724.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1c172a.  throw v4;
}
procedure `void` `g`(`retrofit2.k` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lretrofit2/k;.g:(Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1c173c.  v0:= v2.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c1740.  if v0 == 0 then goto L1c17a6;
  #L1c1744.  v1:= v2.`retrofit2.k.b` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c1748.  call temp:= `newBuilder`(v1, v0) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L1c174e.  v0:= temp @kind object;
  #L1c1750.  v2.`retrofit2.k.d` @type ^`okhttp3.HttpUrl$Builder` := v0 @kind object;
  #L1c1754.  if v0 == 0 then goto L1c1760;
  #L1c1758.  v0:= 0I;
  #L1c175a.  v2.`retrofit2.k.c` @type ^`java.lang.String` := v0 @kind object;
  #L1c175e.  goto L1c17a6;
  #L1c1760.  v3:= new `java.lang.IllegalArgumentException`;
  #L1c1764.  v4:= new `java.lang.StringBuilder`;
  #L1c1768.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c176e.  v5:= "Malformed URL. Base: " @kind object;
  #L1c1772.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1778.  v5:= v2.`retrofit2.k.b` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c177c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1782.  v5:= ", Relative: " @kind object;
  #L1c1786.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c178c.  v5:= v2.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c1790.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1796.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c179c.  v4:= temp @kind object;
  #L1c179e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c17a4.  throw v3;
  #L1c17a6.  if v5 == 0 then goto L1c17b6;
  #L1c17aa.  v5:= v2.`retrofit2.k.d` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L1c17ae.  call temp:= `addEncodedQueryParameter`(v5, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L1c17b4.  goto L1c17c0;
  #L1c17b6.  v5:= v2.`retrofit2.k.d` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L1c17ba.  call temp:= `addQueryParameter`(v5, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L1c17c0.  return @kind void;
}
procedure `void` `h`(`retrofit2.k` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/k;.h:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L1c17d4.  v0:= v1.`retrofit2.k.e` @type ^`okhttp3.Request$Builder` @kind object;
  #L1c17d8.  call temp:= `tag`(v0, v2, v3) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c17de.  return @kind void;
}
procedure `okhttp3.Request$Builder` `k`(`retrofit2.k` v5 @kind this) @signature `Lretrofit2/k;.k:()Lokhttp3/Request$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c1388.  v0:= v5.`retrofit2.k.d` @type ^`okhttp3.HttpUrl$Builder` @kind object;
  #L1c138c.  if v0 == 0 then goto L1c139a;
  #L1c1390.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1c1396.  v0:= temp @kind object;
  #L1c1398.  goto L1c13ae;
  #L1c139a.  v0:= v5.`retrofit2.k.b` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c139e.  v1:= v5.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c13a2.  call temp:= `resolve`(v0, v1) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L1c13a8.  v0:= temp @kind object;
  #L1c13aa.  if v0 == 0 then goto L1c1450;
  #L1c13ae.  v1:= v5.`retrofit2.k.k` @type ^`okhttp3.RequestBody` @kind object;
  #L1c13b2.  if v1 != 0 then goto L1c13f2;
  #L1c13b6.  v2:= v5.`retrofit2.k.j` @type ^`okhttp3.FormBody$Builder` @kind object;
  #L1c13ba.  if v2 == 0 then goto L1c13c8;
  #L1c13be.  call temp:= `build`(v2) @signature `Lokhttp3/FormBody$Builder;.build:()Lokhttp3/FormBody;` @kind virtual;
  #L1c13c4.  v1:= temp @kind object;
  #L1c13c6.  goto L1c13f2;
  #L1c13c8.  v2:= v5.`retrofit2.k.i` @type ^`okhttp3.MultipartBody$Builder` @kind object;
  #L1c13cc.  if v2 == 0 then goto L1c13da;
  #L1c13d0.  call temp:= `build`(v2) @signature `Lokhttp3/MultipartBody$Builder;.build:()Lokhttp3/MultipartBody;` @kind virtual;
  #L1c13d6.  v1:= temp @kind object;
  #L1c13d8.  goto L1c13f2;
  #L1c13da.  v2:= v5.`retrofit2.k.h` @type ^`boolean` @kind boolean;
  #L1c13de.  if v2 == 0 then goto L1c13f2;
  #L1c13e2.  v1:= 0I;
  #L1c13e4.  v2:= 0I;
  #L1c13e6.  v2:= new `byte`[v2];
  #L1c13ea.  call temp:= `create`(v1, v2) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L1c13f0.  v1:= temp @kind object;
  #L1c13f2.  v2:= v5.`retrofit2.k.g` @type ^`okhttp3.MediaType` @kind object;
  #L1c13f6.  if v2 == 0 then goto L1c1422;
  #L1c13fa.  if v1 == 0 then goto L1c140c;
  #L1c13fe.  v3:= new `retrofit2.k$a`;
  #L1c1402.  call `<init>`(v3, v1, v2) @signature `Lretrofit2/k$a;.<init>:(Lokhttp3/RequestBody;Lokhttp3/MediaType;)V` @kind direct;
  #L1c1408.  v1:= v3 @kind object;
  #L1c140a.  goto L1c1422;
  #L1c140c.  v3:= v5.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L1c1410.  call temp:= `toString`(v2) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c1416.  v2:= temp @kind object;
  #L1c1418.  v4:= "Content-Type" @kind object;
  #L1c141c.  call temp:= `add`(v3, v4, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1c1422.  v2:= v5.`retrofit2.k.e` @type ^`okhttp3.Request$Builder` @kind object;
  #L1c1426.  call temp:= `url`(v2, v0) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c142c.  v0:= temp @kind object;
  #L1c142e.  v2:= v5.`retrofit2.k.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L1c1432.  call temp:= `build`(v2) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L1c1438.  v2:= temp @kind object;
  #L1c143a.  call temp:= `headers`(v0, v2) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c1440.  v0:= temp @kind object;
  #L1c1442.  v2:= v5.`retrofit2.k.a` @type ^`java.lang.String` @kind object;
  #L1c1446.  call temp:= `method`(v0, v2, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1c144c.  v0:= temp @kind object;
  #L1c144e.  return v0 @kind object;
  #L1c1450.  v0:= new `java.lang.IllegalArgumentException`;
  #L1c1454.  v1:= new `java.lang.StringBuilder`;
  #L1c1458.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c145e.  v2:= "Malformed URL. Base: " @kind object;
  #L1c1462.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1468.  v2:= v5.`retrofit2.k.b` @type ^`okhttp3.HttpUrl` @kind object;
  #L1c146c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1472.  v2:= ", Relative: " @kind object;
  #L1c1476.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c147c.  v2:= v5.`retrofit2.k.c` @type ^`java.lang.String` @kind object;
  #L1c1480.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c1486.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c148c.  v1:= temp @kind object;
  #L1c148e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c1494.  throw v0;
}
procedure `void` `l`(`retrofit2.k` v0 @kind this, `okhttp3.RequestBody` v1 @kind object) @signature `Lretrofit2/k;.l:(Lokhttp3/RequestBody;)V` @AccessFlag  {
    temp;

  #L1c18dc.  v0.`retrofit2.k.k` @type ^`okhttp3.RequestBody` := v1 @kind object;
  #L1c18e0.  return @kind void;
}
procedure `void` `m`(`retrofit2.k` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/k;.m:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L1c18f4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c18fa.  v1:= temp @kind object;
  #L1c18fc.  v0.`retrofit2.k.c` @type ^`java.lang.String` := v1 @kind object;
  #L1c1900.  return @kind void;
}
