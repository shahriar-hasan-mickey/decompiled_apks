record `retrofit2.b$c$a` @kind class @AccessFlag  extends `retrofit2.Callback` @kind interface {
  `java.util.concurrent.CompletableFuture` `retrofit2.b$c$a.a` @AccessFlag PRIVATE_FINAL;
  `retrofit2.b$c` `retrofit2.b$c$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.b$c$a` v0 @kind this, `retrofit2.b$c` v1 @kind object, `java.util.concurrent.CompletableFuture` v2 @kind object) @signature `Lretrofit2/b$c$a;.<init>:(Lretrofit2/b$c;Ljava/util/concurrent/CompletableFuture;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1be85c.  v0.`retrofit2.b$c$a.b` @type ^`retrofit2.b$c` := v1 @kind object;
  #L1be860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1be866.  v0.`retrofit2.b$c$a.a` @type ^`java.util.concurrent.CompletableFuture` := v2 @kind object;
  #L1be86a.  return @kind void;
}
procedure `void` `onFailure`(`retrofit2.b$c$a` v0 @kind this, `retrofit2.Call` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lretrofit2/b$c$a;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L1be87c.  v1:= v0.`retrofit2.b$c$a.a` @type ^`java.util.concurrent.CompletableFuture` @kind object;
  #L1be880.  call temp:= `completeExceptionally`(v1, v2) @signature `Ljava/util/concurrent/CompletableFuture;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L1be886.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.b$c$a` v0 @kind this, `retrofit2.Call` v1 @kind object, `retrofit2.Response` v2 @kind object) @signature `Lretrofit2/b$c$a;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @AccessFlag PUBLIC {
    temp;

  #L1be898.  v1:= v0.`retrofit2.b$c$a.a` @type ^`java.util.concurrent.CompletableFuture` @kind object;
  #L1be89c.  call temp:= `complete`(v1, v2) @signature `Ljava/util/concurrent/CompletableFuture;.complete:(Ljava/lang/Object;)Z` @kind virtual;
  #L1be8a2.  return @kind void;
}
