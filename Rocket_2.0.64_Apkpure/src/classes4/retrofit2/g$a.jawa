record `retrofit2.g$a` @kind class @AccessFlag  extends `okhttp3.Callback` @kind interface {
  `retrofit2.Callback` `retrofit2.g$a.a` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.g` `retrofit2.g$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.g$a` v0 @kind this, `retrofit2.g` v1 @kind object, `retrofit2.Callback` v2 @kind object) @signature `Lretrofit2/g$a;.<init>:(Lretrofit2/g;Lretrofit2/Callback;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bfb08.  v0.`retrofit2.g$a.b` @type ^`retrofit2.g` := v1 @kind object;
  #L1bfb0c.  v0.`retrofit2.g$a.a` @type ^`retrofit2.Callback` := v2 @kind object;
  #L1bfb10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bfb16.  return @kind void;
}
procedure `void` `a`(`retrofit2.g$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lretrofit2/g$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1bfb28.  v0:= v2.`retrofit2.g$a.a` @type ^`retrofit2.Callback` @kind object;
  #L1bfb2c.  v1:= v2.`retrofit2.g$a.b` @type ^`retrofit2.g` @kind object;
  #L1bfb30.  call `onFailure`(v0, v1, v3) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L1bfb36.  goto L1bfb46;
  #L1bfb38.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bfb3a.  call `s`(v3) @signature `Lretrofit2/o;.s:(Ljava/lang/Throwable;)V` @kind static;
  #L1bfb40.  call `printStackTrace`(v3) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L1bfb46.  return @kind void;
  catch `java.lang.Throwable` @[L1bfb28..L1bfb36] goto L1bfb38;
}
procedure `void` `onFailure`(`retrofit2.g$a` v0 @kind this, `okhttp3.Call` v1 @kind object, `java.io.IOException` v2 @kind object) @signature `Lretrofit2/g$a;.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;

  #L1bfb64.  call `a`(v0, v2) @signature `Lretrofit2/g$a;.a:(Ljava/lang/Throwable;)V` @kind direct;
  #L1bfb6a.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.g$a` v1 @kind this, `okhttp3.Call` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/g$a;.onResponse:(Lokhttp3/Call;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bfb7c.  v2:= v1.`retrofit2.g$a.b` @type ^`retrofit2.g` @kind object;
  #L1bfb80.  call temp:= `d`(v2, v3) @signature `Lretrofit2/g;.d:(Lokhttp3/Response;)Lretrofit2/Response;` @kind virtual;
  #L1bfb86.  v2:= temp @kind object;
  #L1bfb88.  v3:= v1.`retrofit2.g$a.a` @type ^`retrofit2.Callback` @kind object;
  #L1bfb8c.  v0:= v1.`retrofit2.g$a.b` @type ^`retrofit2.g` @kind object;
  #L1bfb90.  call `onResponse`(v3, v0, v2) @signature `Lretrofit2/Callback;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @kind interface;
  #L1bfb96.  goto L1bfba6;
  #L1bfb98.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bfb9a.  call `s`(v2) @signature `Lretrofit2/o;.s:(Ljava/lang/Throwable;)V` @kind static;
  #L1bfba0.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L1bfba6.  return @kind void;
  #L1bfba8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bfbaa.  call `s`(v2) @signature `Lretrofit2/o;.s:(Ljava/lang/Throwable;)V` @kind static;
  #L1bfbb0.  call `a`(v1, v2) @signature `Lretrofit2/g$a;.a:(Ljava/lang/Throwable;)V` @kind direct;
  #L1bfbb6.  return @kind void;
  catch `java.lang.Throwable` @[L1bfb7c..L1bfb88] goto L1bfba8;
  catch `java.lang.Throwable` @[L1bfb88..L1bfb96] goto L1bfb98;
}
