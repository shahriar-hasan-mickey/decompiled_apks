record `retrofit2.o$c` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.o$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.o$c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.o$c` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lretrofit2/o$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c469c.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1c46a0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c46a6.  v1:= length @variable v6;
  #L1c46a8.  v2:= 1I;
  #L1c46aa.  if v1 > v2 then goto L1c4722;
  #L1c46ae.  v1:= length @variable v5;
  #L1c46b0.  if v1 != v2 then goto L1c4716;
  #L1c46b4.  v1:= length @variable v6;
  #L1c46b6.  v3:= 0I;
  #L1c46b8.  if v1 != v2 then goto L1c46f2;
  #L1c46bc.  v1:= v6[v3] @kind object;
  #L1c46c0.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c46c6.  v1:= v6[v3] @kind object;
  #L1c46ca.  call `b`(v1) @signature `Lretrofit2/o;.b:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1c46d0.  v5:= v5[v3] @kind object;
  #L1c46d4.  if v5 != v0 then goto L1c46e6;
  #L1c46d8.  v5:= v6[v3] @kind object;
  #L1c46dc.  v4.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L1c46e0.  v4.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1c46e4.  goto L1c4714;
  #L1c46e6.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c46ea.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c46f0.  throw v5;
  #L1c46f2.  v6:= v5[v3] @kind object;
  #L1c46f6.  call temp:= `requireNonNull`(v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1c46fc.  v6:= v5[v3] @kind object;
  #L1c4700.  call `b`(v6) @signature `Lretrofit2/o;.b:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1c4706.  v6:= 0I;
  #L1c4708.  v4.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1c470c.  v5:= v5[v3] @kind object;
  #L1c4710.  v4.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L1c4714.  return @kind void;
  #L1c4716.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c471a.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c4720.  throw v5;
  #L1c4722.  v5:= new `java.lang.IllegalArgumentException`;
  #L1c4726.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c472c.  throw v5;
}
procedure `boolean` `equals`(`retrofit2.o$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/o$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4554.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1c4558.  if v0 == 0 then goto L1c4570;
  #L1c455c.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L1c4560.  call temp:= `d`(v1, v2) @signature `Lretrofit2/o;.d:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1c4566.  v2:= temp;
  #L1c4568.  if v2 == 0 then goto L1c4570;
  #L1c456c.  v2:= 1I;
  #L1c456e.  goto L1c4572;
  #L1c4570.  v2:= 0I;
  #L1c4572.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.o$c` v3 @kind this) @signature `Lretrofit2/o$c;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c464c.  v0:= v3.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4650.  if v0 == 0 then goto L1c4662;
  #L1c4654.  v1:= 1I;
  #L1c4656.  v1:= new `java.lang.reflect.Type`[v1];
  #L1c465a.  v2:= 0I;
  #L1c465c.  v1[v2]:= v0 @kind object;
  #L1c4660.  goto L1c4666;
  #L1c4662.  v1:= `@@retrofit2.o.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1c4666.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.o$c` v3 @kind this) @signature `Lretrofit2/o$c;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c4678.  v0:= 1I;
  #L1c467a.  v0:= new `java.lang.reflect.Type`[v0];
  #L1c467e.  v1:= v3.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4682.  v2:= 0I;
  #L1c4684.  v0[v2]:= v1 @kind object;
  #L1c4688.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.o$c` v2 @kind this) @signature `Lretrofit2/o$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c4584.  v0:= v2.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4588.  if v0 == 0 then goto L1c459a;
  #L1c458c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c4592.  v0:= temp;
  #L1c4594.  v0:= v0 + 31;
  #L1c4598.  goto L1c459c;
  #L1c459a.  v0:= 1I;
  #L1c459c.  v1:= v2.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c45a0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1c45a6.  v1:= temp;
  #L1c45a8.  v1:= v1 + 31;
  #L1c45ac.  v0:= v0 ^~ v1 @kind int;
  #L1c45ae.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.o$c` v2 @kind this) @signature `Lretrofit2/o$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c45c0.  v0:= v2.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c45c4.  if v0 == 0 then goto L1c45f8;
  #L1c45c8.  v0:= new `java.lang.StringBuilder`;
  #L1c45cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c45d2.  v1:= "? super " @kind object;
  #L1c45d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c45dc.  v1:= v2.`retrofit2.o$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1c45e0.  call temp:= `t`(v1) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c45e6.  v1:= temp @kind object;
  #L1c45e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c45ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c45f4.  v0:= temp @kind object;
  #L1c45f6.  return v0 @kind object;
  #L1c45f8.  v0:= v2.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c45fc.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1c4600.  if v0 != v1 then goto L1c460a;
  #L1c4604.  v0:= "?" @kind object;
  #L1c4608.  return v0 @kind object;
  #L1c460a.  v0:= new `java.lang.StringBuilder`;
  #L1c460e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c4614.  v1:= "? extends " @kind object;
  #L1c4618.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c461e.  v1:= v2.`retrofit2.o$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1c4622.  call temp:= `t`(v1) @signature `Lretrofit2/o;.t:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1c4628.  v1:= temp @kind object;
  #L1c462a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c4630.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c4636.  v0:= temp @kind object;
  #L1c4638.  return v0 @kind object;
}
