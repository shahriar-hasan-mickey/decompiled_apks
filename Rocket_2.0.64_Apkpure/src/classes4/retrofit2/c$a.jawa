record `retrofit2.c$a` @kind class @AccessFlag  extends `retrofit2.CallAdapter` @kind interface {
  `java.lang.reflect.Type` `retrofit2.c$a.a` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.Executor` `retrofit2.c$a.b` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.c` `retrofit2.c$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.c$a` v0 @kind this, `retrofit2.c` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lretrofit2/c$a;.<init>:(Lretrofit2/c;Ljava/lang/reflect/Type;Ljava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1beae8.  v0.`retrofit2.c$a.c` @type ^`retrofit2.c` := v1 @kind object;
  #L1beaec.  v0.`retrofit2.c$a.a` @type ^`java.lang.reflect.Type` := v2 @kind object;
  #L1beaf0.  v0.`retrofit2.c$a.b` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L1beaf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1beafa.  return @kind void;
}
procedure `retrofit2.Call` `a`(`retrofit2.c$a` v2 @kind this, `retrofit2.Call` v3 @kind object) @signature `Lretrofit2/c$a;.a:(Lretrofit2/Call;)Lretrofit2/Call;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1beac0.  v0:= v2.`retrofit2.c$a.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L1beac4.  if v0 != 0 then goto L1beaca;
  #L1beac8.  goto L1bead6;
  #L1beaca.  v1:= new `retrofit2.c$b`;
  #L1beace.  call `<init>`(v1, v0, v3) @signature `Lretrofit2/c$b;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @kind direct;
  #L1bead4.  v3:= v1 @kind object;
  #L1bead6.  return v3 @kind object;
}
procedure `java.lang.Object` `adapt`(`retrofit2.c$a` v0 @kind this, `retrofit2.Call` v1 @kind object) @signature `Lretrofit2/c$a;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bea8c.  call temp:= `a`(v0, v1) @signature `Lretrofit2/c$a;.a:(Lretrofit2/Call;)Lretrofit2/Call;` @kind virtual;
  #L1bea92.  v1:= temp @kind object;
  #L1bea94.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `responseType`(`retrofit2.c$a` v1 @kind this) @signature `Lretrofit2/c$a;.responseType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1beaa8.  v0:= v1.`retrofit2.c$a.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1beaac.  return v0 @kind object;
}
