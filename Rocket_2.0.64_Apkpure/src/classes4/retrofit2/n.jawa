record `retrofit2.n` @kind class @AccessFlag FINAL extends `retrofit2.SkipCallbackExecutor` @kind interface {
}
global `retrofit2.SkipCallbackExecutor` `@@retrofit2.n.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c424c.  v0:= new `retrofit2.n`;
  #L1c4250.  call `<init>`(v0) @signature `Lretrofit2/n;.<init>:()V` @kind direct;
  #L1c4256.  `@@retrofit2.n.a` @type ^`retrofit2.SkipCallbackExecutor` := v0 @kind object;
  #L1c425a.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.n` v0 @kind this) @signature `Lretrofit2/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c426c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c4272.  return @kind void;
}
procedure `java.lang.annotation.Annotation`[] `a`(`java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lretrofit2/n;.a:([Ljava/lang/annotation/Annotation;)[Ljava/lang/annotation/Annotation;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c420c.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L1c4210.  call temp:= `l`(v4, v0) @signature `Lretrofit2/o;.l:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @kind static;
  #L1c4216.  v0:= temp;
  #L1c4218.  if v0 == 0 then goto L1c421e;
  #L1c421c.  return v4 @kind object;
  #L1c421e.  v0:= length @variable v4;
  #L1c4220.  v1:= 1I;
  #L1c4222.  v0:= v0 + v1 @kind int;
  #L1c4224.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L1c4228.  v2:= `@@retrofit2.n.a` @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L1c422c.  v3:= 0I;
  #L1c422e.  v0[v3]:= v2 @kind object;
  #L1c4232.  v2:= length @variable v4;
  #L1c4234.  call `arraycopy`(v4, v3, v0, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c423a.  return v0 @kind object;
}
procedure `java.lang.Class` `annotationType`(`retrofit2.n` v1 @kind this) @signature `Lretrofit2/n;.annotationType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c41a8.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L1c41ac.  return v0 @kind object;
}
procedure `boolean` `equals`(`retrofit2.n` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L1c417c.  v1:= instanceof @variable v1 @type ^`retrofit2.SkipCallbackExecutor` @kind boolean;
  #L1c4180.  return v1;
}
procedure `int` `hashCode`(`retrofit2.n` v1 @kind this) @signature `Lretrofit2/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c4194.  v0:= 0I;
  #L1c4196.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.n` v2 @kind this) @signature `Lretrofit2/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c41c0.  v0:= new `java.lang.StringBuilder`;
  #L1c41c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c41ca.  v1:= "@" @kind object;
  #L1c41ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c41d4.  v1:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L1c41d8.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1c41de.  v1:= temp @kind object;
  #L1c41e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c41e6.  v1:= "()" @kind object;
  #L1c41ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c41f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c41f6.  v0:= temp @kind object;
  #L1c41f8.  return v0 @kind object;
}
