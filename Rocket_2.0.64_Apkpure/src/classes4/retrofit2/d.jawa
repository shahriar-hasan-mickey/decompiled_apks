record `retrofit2.d` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.lang.Runnable` @kind interface {
  `retrofit2.c$b$a` `retrofit2.d.a` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `retrofit2.Callback` `retrofit2.d.b` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `java.lang.Throwable` `retrofit2.d.c` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.d` v0 @kind this, `retrofit2.c$b$a` v1 @kind object, `retrofit2.Callback` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lretrofit2/d;.<init>:(Lretrofit2/c$b$a;Lretrofit2/Callback;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1beb0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1beb12.  v0.`retrofit2.d.a` @type ^`retrofit2.c$b$a` := v1 @kind object;
  #L1beb16.  v0.`retrofit2.d.b` @type ^`retrofit2.Callback` := v2 @kind object;
  #L1beb1a.  v0.`retrofit2.d.c` @type ^`java.lang.Throwable` := v3 @kind object;
  #L1beb1e.  return @kind void;
}
procedure `void` `run`(`retrofit2.d` v3 @kind this) @signature `Lretrofit2/d;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1beb30.  v0:= v3.`retrofit2.d.a` @type ^`retrofit2.c$b$a` @kind object;
  #L1beb34.  v1:= v3.`retrofit2.d.b` @type ^`retrofit2.Callback` @kind object;
  #L1beb38.  v2:= v3.`retrofit2.d.c` @type ^`java.lang.Throwable` @kind object;
  #L1beb3c.  call `a`(v0, v1, v2) @signature `Lretrofit2/c$b$a;.a:(Lretrofit2/c$b$a;Lretrofit2/Callback;Ljava/lang/Throwable;)V` @kind static;
  #L1beb42.  return @kind void;
}
