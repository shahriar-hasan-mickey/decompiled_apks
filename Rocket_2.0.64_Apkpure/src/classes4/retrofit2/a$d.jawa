record `retrofit2.a$d` @kind class @AccessFlag FINAL extends `retrofit2.Converter` @kind interface {
}
global `retrofit2.a$d` `@@retrofit2.a$d.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/a$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1be4e0.  v0:= new `retrofit2.a$d`;
  #L1be4e4.  call `<init>`(v0) @signature `Lretrofit2/a$d;.<init>:()V` @kind direct;
  #L1be4ea.  `@@retrofit2.a$d.a` @type ^`retrofit2.a$d` := v0 @kind object;
  #L1be4ee.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.a$d` v0 @kind this) @signature `Lretrofit2/a$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be500.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1be506.  return @kind void;
}
procedure `java.lang.String` `a`(`retrofit2.a$d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/a$d;.a:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L1be4c4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1be4ca.  v1:= temp @kind object;
  #L1be4cc.  return v1 @kind object;
}
procedure `java.lang.Object` `convert`(`retrofit2.a$d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/a$d;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1be4a8.  call temp:= `a`(v0, v1) @signature `Lretrofit2/a$d;.a:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L1be4ae.  v1:= temp @kind object;
  #L1be4b0.  return v1 @kind object;
}
