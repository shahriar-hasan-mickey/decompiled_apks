record `retrofit2.i$o` @kind class @AccessFlag FINAL extends `retrofit2.i` @kind class {
}
global `retrofit2.i$o` `@@retrofit2.i$o.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/i$o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1c0e30.  v0:= new `retrofit2.i$o`;
  #L1c0e34.  call `<init>`(v0) @signature `Lretrofit2/i$o;.<init>:()V` @kind direct;
  #L1c0e3a.  `@@retrofit2.i$o.a` @type ^`retrofit2.i$o` := v0 @kind object;
  #L1c0e3e.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.i$o` v0 @kind this) @signature `Lretrofit2/i$o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c0e50.  call `<init>`(v0) @signature `Lretrofit2/i;.<init>:()V` @kind direct;
  #L1c0e56.  return @kind void;
}
procedure `void` `a`(`retrofit2.i$o` v0 @kind this, `retrofit2.k` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/i$o;.a:(Lretrofit2/k;Ljava/lang/Object;)V` @AccessFlag SYNTHETIC {
    temp;

  #L1c0e68.  v2:= (`okhttp3.MultipartBody$Part`) v2 @kind object;
  #L1c0e6c.  call `d`(v0, v1, v2) @signature `Lretrofit2/i$o;.d:(Lretrofit2/k;Lokhttp3/MultipartBody$Part;)V` @kind virtual;
  #L1c0e72.  return @kind void;
}
procedure `void` `d`(`retrofit2.i$o` v0 @kind this, `retrofit2.k` v1 @kind object, `okhttp3.MultipartBody$Part` v2 @kind object) @signature `Lretrofit2/i$o;.d:(Lretrofit2/k;Lokhttp3/MultipartBody$Part;)V` @AccessFlag  {
    temp;

  #L1c0e84.  if v2 == 0 then goto L1c0e8e;
  #L1c0e88.  call `e`(v1, v2) @signature `Lretrofit2/k;.e:(Lokhttp3/MultipartBody$Part;)V` @kind virtual;
  #L1c0e8e.  return @kind void;
}
