record `retrofit2.b$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.CompletableFuture` @kind class {
  `retrofit2.Call` `retrofit2.b$b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.b$b` v0 @kind this, `retrofit2.Call` v1 @kind object) @signature `Lretrofit2/b$b;.<init>:(Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be840.  call `<init>`(v0) @signature `Ljava/util/concurrent/CompletableFuture;.<init>:()V` @kind direct;
  #L1be846.  v0.`retrofit2.b$b.a` @type ^`retrofit2.Call` := v1 @kind object;
  #L1be84a.  return @kind void;
}
procedure `boolean` `cancel`(`retrofit2.b$b` v1 @kind this, `boolean` v2 ) @signature `Lretrofit2/b$b;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1be818.  if v2 == 0 then goto L1be826;
  #L1be81c.  v0:= v1.`retrofit2.b$b.a` @type ^`retrofit2.Call` @kind object;
  #L1be820.  call `cancel`(v0) @signature `Lretrofit2/Call;.cancel:()V` @kind interface;
  #L1be826.  call temp:= `cancel`(v1, v2) @signature `Ljava/util/concurrent/CompletableFuture;.cancel:(Z)Z` @kind super;
  #L1be82c.  v2:= temp;
  #L1be82e.  return v2;
}
