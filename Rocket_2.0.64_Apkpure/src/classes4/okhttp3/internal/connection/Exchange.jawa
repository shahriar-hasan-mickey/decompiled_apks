record `okhttp3.internal.connection.Exchange` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.internal.connection.Exchange.a` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.Exchange.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealCall` `okhttp3.internal.connection.Exchange.c` @AccessFlag PRIVATE_FINAL;
  `okhttp3.EventListener` `okhttp3.internal.connection.Exchange.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.ExchangeFinder` `okhttp3.internal.connection.Exchange.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.ExchangeCodec` `okhttp3.internal.connection.Exchange.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.Exchange` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object, `okhttp3.EventListener` v3 @kind object, `okhttp3.internal.connection.ExchangeFinder` v4 @kind object, `okhttp3.internal.http.ExchangeCodec` v5 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;Lokhttp3/internal/connection/ExchangeFinder;Lokhttp3/internal/http/ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L146a5c.  v0:= "call" @kind object;
  #L146a60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146a66.  v0:= "eventListener" @kind object;
  #L146a6a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146a70.  v0:= "finder" @kind object;
  #L146a74.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146a7a.  v0:= "codec" @kind object;
  #L146a7e.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146a84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L146a8a.  v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` := v2 @kind object;
  #L146a8e.  v1.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` := v3 @kind object;
  #L146a92.  v1.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` := v4 @kind object;
  #L146a96.  v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` := v5 @kind object;
  #L146a9a.  call temp:= `getConnection`(v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L146aa0.  v2:= temp @kind object;
  #L146aa2.  v1.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` := v2 @kind object;
  #L146aa6.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.connection.Exchange` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L146c1c.  v0:= v2.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L146c20.  call `trackFailure`(v0, v3) @signature `Lokhttp3/internal/connection/ExchangeFinder;.trackFailure:(Ljava/io/IOException;)V` @kind virtual;
  #L146c26.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146c2a.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L146c30.  v0:= temp @kind object;
  #L146c32.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146c36.  call `trackFailure$okhttp`(v0, v1, v3) @signature `Lokhttp3/internal/connection/RealConnection;.trackFailure$okhttp:(Lokhttp3/internal/connection/RealCall;Ljava/io/IOException;)V` @kind virtual;
  #L146c3c.  return @kind void;
}
procedure `java.io.IOException` `bodyComplete`(`okhttp3.internal.connection.Exchange` v2 @kind this, `long` v3 , `boolean` v5 , `boolean` v6 , `java.io.IOException` v7 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L146804.  if v7 == 0 then goto L14680e;
  #L146808.  call `a`(v2, v7) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L14680e.  if v6 == 0 then goto L146834;
  #L146812.  if v7 == 0 then goto L146826;
  #L146816.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L14681a.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L14681e.  call `requestFailed`(v0, v1, v7) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L146824.  goto L146834;
  #L146826.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L14682a.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L14682e.  call `requestBodyEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestBodyEnd:(Lokhttp3/Call;J)V` @kind virtual;
  #L146834.  if v5 == 0 then goto L14685a;
  #L146838.  if v7 == 0 then goto L14684c;
  #L14683c.  v3:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146840.  v4:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146844.  call `responseFailed`(v3, v4, v7) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L14684a.  goto L14685a;
  #L14684c.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146850.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146854.  call `responseBodyEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseBodyEnd:(Lokhttp3/Call;J)V` @kind virtual;
  #L14685a.  v3:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L14685e.  call temp:= `messageDone$okhttp`(v3, v2, v6, v5, v7) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L146864.  v3:= temp @kind object;
  #L146866.  return v3 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L146ab8.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146abc.  call `cancel`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.cancel:()V` @kind interface;
  #L146ac2.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.connection.Exchange` v3 @kind this, `okhttp3.Request` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L146a00.  v0:= "request" @kind object;
  #L146a04.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146a0a.  v3.`okhttp3.internal.connection.Exchange.a` @type ^`boolean` := v5 @kind boolean;
  #L146a0e.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L146a14.  v5:= temp @kind object;
  #L146a16.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L146a1c.  call temp:= `contentLength`(v5) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L146a22.  v0:= temp @kind wide;
  #L146a24.  v5:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146a28.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146a2c.  call `requestBodyStart`(v5, v2) @signature `Lokhttp3/EventListener;.requestBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L146a32.  v5:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146a36.  call temp:= `createRequestBody`(v5, v4, v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @kind interface;
  #L146a3c.  v4:= temp @kind object;
  #L146a3e.  v5:= new `okhttp3.internal.connection.Exchange$a`;
  #L146a42.  call `<init>`(v5, v3, v4, v0) @signature `Lokhttp3/internal/connection/Exchange$a;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Sink;J)V` @kind direct;
  #L146a48.  return v5 @kind object;
}
procedure `void` `detachWithViolence`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.detachWithViolence:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L146ad4.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146ad8.  call `cancel`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.cancel:()V` @kind interface;
  #L146ade.  v0:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146ae2.  v1:= 1I;
  #L146ae4.  v2:= 0I;
  #L146ae6.  call temp:= `messageDone$okhttp`(v0, v3, v1, v1, v2) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L146aec.  return @kind void;
}
procedure `void` `finishRequest`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.finishRequest:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L146b00.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146b04.  call `finishRequest`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.finishRequest:()V` @kind interface;
  #L146b0a.  return @kind void;
  #L146b0c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L146b0e.  v1:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146b12.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146b16.  call `requestFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L146b1c.  call `a`(v3, v0) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L146b22.  throw v0;
  catch `java.io.IOException` @[L146b00..L146b0a] goto L146b0c;
}
procedure `void` `flushRequest`(`okhttp3.internal.connection.Exchange` v3 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L146b44.  v0:= v3.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146b48.  call `flushRequest`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.flushRequest:()V` @kind interface;
  #L146b4e.  return @kind void;
  #L146b50.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L146b52.  v1:= v3.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146b56.  v2:= v3.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146b5a.  call `requestFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L146b60.  call `a`(v3, v0) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L146b66.  throw v0;
  catch `java.io.IOException` @[L146b44..L146b4e] goto L146b50;
}
procedure `okhttp3.internal.connection.RealCall` `getCall$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getCall$okhttp:()Lokhttp3/internal/connection/RealCall;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1469a0.  v0:= v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1469a4.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1469b8.  v0:= v1.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1469bc.  return v0 @kind object;
}
procedure `okhttp3.EventListener` `getEventListener$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getEventListener$okhttp:()Lokhttp3/EventListener;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L146878.  v0:= v1.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L14687c.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.ExchangeFinder` `getFinder$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.getFinder$okhttp:()Lokhttp3/internal/connection/ExchangeFinder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L146988.  v0:= v1.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L14698c.  return v0 @kind object;
}
procedure `boolean` `isCoalescedConnection$okhttp`(`okhttp3.internal.connection.Exchange` v2 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.isCoalescedConnection$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L14678c.  v0:= v2.`okhttp3.internal.connection.Exchange.e` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L146790.  call temp:= `getAddress$okhttp`(v0) @signature `Lokhttp3/internal/connection/ExchangeFinder;.getAddress$okhttp:()Lokhttp3/Address;` @kind virtual;
  #L146796.  v0:= temp @kind object;
  #L146798.  call temp:= `url`(v0) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L14679e.  v0:= temp @kind object;
  #L1467a0.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1467a6.  v0:= temp @kind object;
  #L1467a8.  v1:= v2.`okhttp3.internal.connection.Exchange.b` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1467ac.  call temp:= `route`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L1467b2.  v1:= temp @kind object;
  #L1467b4.  call temp:= `address`(v1) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L1467ba.  v1:= temp @kind object;
  #L1467bc.  call temp:= `url`(v1) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1467c2.  v1:= temp @kind object;
  #L1467c4.  call temp:= `host`(v1) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1467ca.  v1:= temp @kind object;
  #L1467cc.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1467d2.  v0:= temp;
  #L1467d4.  v0:= v0 ^~ 1;
  #L1467d8.  return v0;
}
procedure `boolean` `isDuplex$okhttp`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.isDuplex$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1467ec.  v0:= v1.`okhttp3.internal.connection.Exchange.a` @type ^`boolean` @kind boolean;
  #L1467f0.  return v0;
}
procedure `okhttp3.internal.ws.RealWebSocket$Streams` `newWebSocketStreams`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.newWebSocketStreams:()Lokhttp3/internal/ws/RealWebSocket$Streams;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1469d0.  v0:= v1.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1469d4.  call `timeoutEarlyExit`(v0) @signature `Lokhttp3/internal/connection/RealCall;.timeoutEarlyExit:()V` @kind virtual;
  #L1469da.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1469de.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L1469e4.  v0:= temp @kind object;
  #L1469e6.  call temp:= `newWebSocketStreams$okhttp`(v0, v1) @signature `Lokhttp3/internal/connection/RealConnection;.newWebSocketStreams$okhttp:(Lokhttp3/internal/connection/Exchange;)Lokhttp3/internal/ws/RealWebSocket$Streams;` @kind virtual;
  #L1469ec.  v0:= temp @kind object;
  #L1469ee.  return v0 @kind object;
}
procedure `void` `noNewExchangesOnConnection`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L146b88.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146b8c.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind interface;
  #L146b92.  v0:= temp @kind object;
  #L146b94.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L146b9a.  return @kind void;
}
procedure `void` `noRequestBody`(`okhttp3.internal.connection.Exchange` v4 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L146bac.  v0:= v4.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146bb0.  v1:= 1I;
  #L146bb2.  v2:= 0I;
  #L146bb4.  v3:= 0I;
  #L146bb6.  call temp:= `messageDone$okhttp`(v0, v4, v1, v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L146bbc.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.connection.Exchange` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L146900.  v0:= "response" @kind object;
  #L146904.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14690a.  v0:= "Content-Type" @kind object;
  #L14690e.  v1:= 2I;
  #L146910.  v2:= 0I;
  #L146912.  call temp:= `header$default`(v5, v0, v2, v1, v2) @signature `Lokhttp3/Response;.header$default:(Lokhttp3/Response;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L146918.  v0:= temp @kind object;
  #L14691a.  v1:= v4.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L14691e.  call temp:= `reportedContentLength`(v1, v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @kind interface;
  #L146924.  v1:= temp @kind wide;
  #L146926.  v3:= v4.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L14692a.  call temp:= `openResponseBodySource`(v3, v5) @signature `Lokhttp3/internal/http/ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/Source;` @kind interface;
  #L146930.  v5:= temp @kind object;
  #L146932.  v3:= new `okhttp3.internal.connection.Exchange$ResponseBodySource`;
  #L146936.  call `<init>`(v3, v4, v5, v1) @signature `Lokhttp3/internal/connection/Exchange$ResponseBodySource;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/Source;J)V` @kind direct;
  #L14693c.  v5:= new `okhttp3.internal.http.RealResponseBody`;
  #L146940.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L146946.  v3:= temp @kind object;
  #L146948.  call `<init>`(v5, v0, v1, v3) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L14694e.  return v5 @kind object;
  #L146950.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L146952.  v0:= v4.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146956.  v1:= v4.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L14695a.  call `responseFailed`(v0, v1, v5) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L146960.  call `a`(v4, v5) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L146966.  throw v5;
  catch `java.io.IOException` @[L14690a..L14694e] goto L146950;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.connection.Exchange` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1468b0.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L1468b4.  call temp:= `readResponseHeaders`(v0, v3) @signature `Lokhttp3/internal/http/ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind interface;
  #L1468ba.  v3:= temp @kind object;
  #L1468bc.  if v3 == 0 then goto L1468c6;
  #L1468c0.  call `initExchange$okhttp`(v3, v2) @signature `Lokhttp3/Response$Builder;.initExchange$okhttp:(Lokhttp3/internal/connection/Exchange;)V` @kind virtual;
  #L1468c6.  return v3 @kind object;
  #L1468c8.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L1468ca.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L1468ce.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L1468d2.  call `responseFailed`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L1468d8.  call `a`(v2, v3) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L1468de.  throw v3;
  catch `java.io.IOException` @[L1468b0..L1468c6] goto L1468c8;
}
procedure `void` `responseHeadersEnd`(`okhttp3.internal.connection.Exchange` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersEnd:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L146bd0.  v0:= "response" @kind object;
  #L146bd4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146bda.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146bde.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146be2.  call `responseHeadersEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.responseHeadersEnd:(Lokhttp3/Call;Lokhttp3/Response;)V` @kind virtual;
  #L146be8.  return @kind void;
}
procedure `void` `responseHeadersStart`(`okhttp3.internal.connection.Exchange` v2 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L146bfc.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146c00.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146c04.  call `responseHeadersStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseHeadersStart:(Lokhttp3/Call;)V` @kind virtual;
  #L146c0a.  return @kind void;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.connection.Exchange` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L146890.  v0:= v1.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146894.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/http/ExchangeCodec;.trailers:()Lokhttp3/Headers;` @kind interface;
  #L14689a.  v0:= temp @kind object;
  #L14689c.  return v0 @kind object;
}
procedure `void` `webSocketUpgradeFailed`(`okhttp3.internal.connection.Exchange` v6 @kind this) @signature `Lokhttp3/internal/connection/Exchange;.webSocketUpgradeFailed:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L146c50.  v1:= -1L;
  #L146c54.  v3:= 1I;
  #L146c56.  v4:= 1I;
  #L146c58.  v5:= 0I;
  #L146c5a.  v0:= v6 @kind object;
  #L146c5c.  call temp:= `bodyComplete`(v0, v1, v3, v4, v5) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L146c62.  return @kind void;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.connection.Exchange` v2 @kind this, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/internal/connection/Exchange;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L146c74.  v0:= "request" @kind object;
  #L146c78.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146c7e.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146c82.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146c86.  call `requestHeadersStart`(v0, v1) @signature `Lokhttp3/EventListener;.requestHeadersStart:(Lokhttp3/Call;)V` @kind virtual;
  #L146c8c.  v0:= v2.`okhttp3.internal.connection.Exchange.f` @type ^`okhttp3.internal.http.ExchangeCodec` @kind object;
  #L146c90.  call `writeRequestHeaders`(v0, v3) @signature `Lokhttp3/internal/http/ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L146c96.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146c9a.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146c9e.  call `requestHeadersEnd`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestHeadersEnd:(Lokhttp3/Call;Lokhttp3/Request;)V` @kind virtual;
  #L146ca4.  return @kind void;
  #L146ca6.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L146ca8.  v0:= v2.`okhttp3.internal.connection.Exchange.d` @type ^`okhttp3.EventListener` @kind object;
  #L146cac.  v1:= v2.`okhttp3.internal.connection.Exchange.c` @type ^`okhttp3.internal.connection.RealCall` @kind object;
  #L146cb0.  call `requestFailed`(v0, v1, v3) @signature `Lokhttp3/EventListener;.requestFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L146cb6.  call `a`(v2, v3) @signature `Lokhttp3/internal/connection/Exchange;.a:(Ljava/io/IOException;)V` @kind direct;
  #L146cbc.  throw v3;
  catch `java.io.IOException` @[L146c7e..L146ca4] goto L146ca6;
}
