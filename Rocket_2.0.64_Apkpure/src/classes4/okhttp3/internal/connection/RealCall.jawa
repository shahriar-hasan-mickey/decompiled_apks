record `okhttp3.internal.connection.RealCall` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.internal.connection.RealConnectionPool` `okhttp3.internal.connection.RealCall.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.EventListener` `okhttp3.internal.connection.RealCall.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealCall$timeout$1` `okhttp3.internal.connection.RealCall.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `okhttp3.internal.connection.RealCall.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `okhttp3.internal.connection.RealCall.e` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.ExchangeFinder` `okhttp3.internal.connection.RealCall.f` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.RealCall.g` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.h` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.RealCall.i` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.j` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.k` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.l` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.RealCall.m` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.RealCall.n` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.RealCall.o` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.connection.RealCall.p` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Request` `okhttp3.internal.connection.RealCall.q` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.connection.RealCall.r` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealCall` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object, `okhttp3.Request` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/connection/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L147bf0.  v0:= "client" @kind object;
  #L147bf4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147bfa.  v0:= "originalRequest" @kind object;
  #L147bfe.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147c04.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L147c0a.  v2.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L147c0e.  v2.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` := v4 @kind object;
  #L147c12.  v2.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` := v5 @kind boolean;
  #L147c16.  call temp:= `connectionPool`(v3) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L147c1c.  v4:= temp @kind object;
  #L147c1e.  call temp:= `getDelegate$okhttp`(v4) @signature `Lokhttp3/ConnectionPool;.getDelegate$okhttp:()Lokhttp3/internal/connection/RealConnectionPool;` @kind virtual;
  #L147c24.  v4:= temp @kind object;
  #L147c26.  v2.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` := v4 @kind object;
  #L147c2a.  call temp:= `eventListenerFactory`(v3) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L147c30.  v4:= temp @kind object;
  #L147c32.  call temp:= `create`(v4, v2) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L147c38.  v4:= temp @kind object;
  #L147c3a.  v2.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` := v4 @kind object;
  #L147c3e.  v4:= new `okhttp3.internal.connection.RealCall$timeout$1`;
  #L147c42.  call `<init>`(v4, v2) @signature `Lokhttp3/internal/connection/RealCall$timeout$1;.<init>:(Lokhttp3/internal/connection/RealCall;)V` @kind direct;
  #L147c48.  call temp:= `callTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.callTimeoutMillis:()I` @kind virtual;
  #L147c4e.  v3:= temp;
  #L147c50.  v0:= (`long`) v3 @kind i2l;
  #L147c52.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L147c56.  call temp:= `timeout`(v4, v0, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L147c5c.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L147c60.  v2.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` := v4 @kind object;
  #L147c64.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L147c68.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L147c6e.  v2.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L147c72.  v3:= 1I;
  #L147c74.  v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` := v3 @kind boolean;
  #L147c78.  return @kind void;
}
procedure `java.io.IOException` `a`(`okhttp3.internal.connection.RealCall` v4 @kind this, `java.io.IOException` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1471c8.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1471cc.  if v0 == 0 then goto L147236;
  #L1471d0.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1471d6.  v1:= temp;
  #L1471d8.  if v1 != 0 then goto L1471de;
  #L1471dc.  goto L147236;
  #L1471de.  v5:= new `java.lang.AssertionError`;
  #L1471e2.  v0:= new `java.lang.StringBuilder`;
  #L1471e6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1471ec.  v1:= "Thread " @kind object;
  #L1471f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1471f6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1471fc.  v1:= temp @kind object;
  #L1471fe.  v2:= "Thread.currentThread()" @kind object;
  #L147202.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147208.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L14720e.  v1:= temp @kind object;
  #L147210.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147216.  v1:= " MUST NOT hold lock on " @kind object;
  #L14721a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147220.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147226.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14722c.  v0:= temp @kind object;
  #L14722e.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L147234.  throw v5;
  #L147236.  v1:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L14723a.  if v1 == 0 then goto L147300;
  #L14723e.  if v0 == 0 then goto L1472a8;
  #L147242.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L147248.  v0:= temp;
  #L14724a.  if v0 != 0 then goto L147250;
  #L14724e.  goto L1472a8;
  #L147250.  v5:= new `java.lang.AssertionError`;
  #L147254.  v0:= new `java.lang.StringBuilder`;
  #L147258.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14725e.  v2:= "Thread " @kind object;
  #L147262.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147268.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L14726e.  v2:= temp @kind object;
  #L147270.  v3:= "Thread.currentThread()" @kind object;
  #L147274.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14727a.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L147280.  v2:= temp @kind object;
  #L147282.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147288.  v2:= " MUST NOT hold lock on " @kind object;
  #L14728c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147292.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147298.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14729e.  v0:= temp @kind object;
  #L1472a0.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1472a6.  throw v5;
  #L1472a8.  @monitorenter v1
  #L1472aa.  call temp:= `releaseConnectionNoEvents$okhttp`(v4) @signature `Lokhttp3/internal/connection/RealCall;.releaseConnectionNoEvents$okhttp:()Ljava/net/Socket;` @kind virtual;
  #L1472b0.  v0:= temp @kind object;
  #L1472b2.  @monitorexit v1
  #L1472b4.  v2:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1472b8.  if v2 != 0 then goto L1472d2;
  #L1472bc.  if v0 == 0 then goto L1472c6;
  #L1472c0.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L1472c6.  v0:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1472ca.  call `connectionReleased`(v0, v4, v1) @signature `Lokhttp3/EventListener;.connectionReleased:(Lokhttp3/Call;Lokhttp3/Connection;)V` @kind virtual;
  #L1472d0.  goto L147300;
  #L1472d2.  if v0 != 0 then goto L1472da;
  #L1472d6.  v0:= 1I;
  #L1472d8.  goto L1472dc;
  #L1472da.  v0:= 0I;
  #L1472dc.  if v0 == 0 then goto L1472e2;
  #L1472e0.  goto L147300;
  #L1472e2.  v5:= "Check failed." @kind object;
  #L1472e6.  v0:= new `java.lang.IllegalStateException`;
  #L1472ea.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1472f0.  v5:= temp @kind object;
  #L1472f2.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1472f8.  throw v0;
  #L1472fa.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1472fc.  @monitorexit v1
  #L1472fe.  throw v5;
  #L147300.  call temp:= `d`(v4, v5) @signature `Lokhttp3/internal/connection/RealCall;.d:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L147306.  v0:= temp @kind object;
  #L147308.  if v5 == 0 then goto L14731e;
  #L14730c.  v5:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147310.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L147316.  call `callFailed`(v5, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L14731c.  goto L147328;
  #L14731e.  v5:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147322.  call `callEnd`(v5, v4) @signature `Lokhttp3/EventListener;.callEnd:(Lokhttp3/Call;)V` @kind virtual;
  #L147328.  return v0 @kind object;
  catch `java.lang.Throwable` @[L1472aa..L1472b2] goto L1472fa;
}
procedure `okhttp3.internal.connection.RealCall$timeout$1` `access$getTimeout$p`(`okhttp3.internal.connection.RealCall` v0 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.access$getTimeout$p:(Lokhttp3/internal/connection/RealCall;)Lokhttp3/internal/connection/RealCall$timeout$1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L147b74.  v0:= v0.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L147b78.  return v0 @kind object;
}
procedure `java.lang.String` `access$toLoggableString`(`okhttp3.internal.connection.RealCall` v0 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.access$toLoggableString:(Lokhttp3/internal/connection/RealCall;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1474dc.  call temp:= `e`(v0) @signature `Lokhttp3/internal/connection/RealCall;.e:()Ljava/lang/String;` @kind direct;
  #L1474e2.  v0:= temp @kind object;
  #L1474e4.  return v0 @kind object;
}
procedure `void` `b`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L147d60.  v0:= `@@okhttp3.internal.platform.Platform.Companion` @type ^`okhttp3.internal.platform.Platform$Companion` @kind object;
  #L147d64.  call temp:= `get`(v0) @signature `Lokhttp3/internal/platform/Platform$Companion;.get:()Lokhttp3/internal/platform/Platform;` @kind virtual;
  #L147d6a.  v0:= temp @kind object;
  #L147d6c.  v1:= "response.body().close()" @kind object;
  #L147d70.  call temp:= `getStackTraceForCloseable`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L147d76.  v0:= temp @kind object;
  #L147d78.  v2.`okhttp3.internal.connection.RealCall.e` @type ^`java.lang.Object` := v0 @kind object;
  #L147d7c.  v0:= v2.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147d80.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L147d86.  return @kind void;
}
procedure `okhttp3.Address` `c`(`okhttp3.internal.connection.RealCall` v17 @kind this, `okhttp3.HttpUrl` v18 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.c:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1476cc.  v0:= v17 @kind object;
  #L1476d0.  call temp:= `isHttps`(v18) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L1476d6.  v1:= temp;
  #L1476d8.  v2:= 0I;
  #L1476da.  if v1 == 0 then goto L14770a;
  #L1476de.  v1:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1476e2.  call temp:= `sslSocketFactory`(v1) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L1476e8.  v2:= temp @kind object;
  #L1476ea.  v1:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1476ee.  call temp:= `hostnameVerifier`(v1) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L1476f4.  v1:= temp @kind object;
  #L1476f6.  v3:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1476fa.  call temp:= `certificatePinner`(v3) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L147700.  v3:= temp @kind object;
  #L147702.  v10:= v1 @kind object;
  #L147704.  v9:= v2 @kind object;
  #L147706.  v11:= v3 @kind object;
  #L147708.  goto L147710;
  #L14770a.  v9:= v2 @kind object;
  #L14770c.  v10:= v9 @kind object;
  #L14770e.  v11:= v10 @kind object;
  #L147710.  v1:= new `okhttp3.Address`;
  #L147714.  call temp:= `host`(v18) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L14771a.  v5:= temp @kind object;
  #L14771c.  call temp:= `port`(v18) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L147722.  v6:= temp;
  #L147724.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147728.  call temp:= `dns`(v2) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L14772e.  v7:= temp @kind object;
  #L147730.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147734.  call temp:= `socketFactory`(v2) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L14773a.  v8:= temp @kind object;
  #L14773c.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147740.  call temp:= `proxyAuthenticator`(v2) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L147746.  v12:= temp @kind object;
  #L147748.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L14774c.  call temp:= `proxy`(v2) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L147752.  v13:= temp @kind object;
  #L147754.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147758.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L14775e.  v14:= temp @kind object;
  #L147760.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147764.  call temp:= `connectionSpecs`(v2) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L14776a.  v15:= temp @kind object;
  #L14776c.  v2:= v0.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147770.  call temp:= `proxySelector`(v2) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L147776.  v16:= temp @kind object;
  #L147778.  v4:= v1 @kind object;
  #L14777a.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L147780.  return v1 @kind object;
}
procedure `java.io.IOException` `d`(`okhttp3.internal.connection.RealCall` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.d:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L147478.  v0:= v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` @kind boolean;
  #L14747c.  if v0 == 0 then goto L147482;
  #L147480.  return v3 @kind object;
  #L147482.  v0:= v2.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L147486.  call temp:= `exit`(v0) @signature `Lokio/AsyncTimeout;.exit:()Z` @kind virtual;
  #L14748c.  v0:= temp;
  #L14748e.  if v0 != 0 then goto L147494;
  #L147492.  return v3 @kind object;
  #L147494.  v0:= new `java.io.InterruptedIOException`;
  #L147498.  v1:= "timeout" @kind object;
  #L14749c.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1474a2.  if v3 == 0 then goto L1474ac;
  #L1474a6.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1474ac.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.e:()Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L147520.  v0:= new `java.lang.StringBuilder`;
  #L147524.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14752a.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @kind virtual;
  #L147530.  v1:= temp;
  #L147532.  if v1 == 0 then goto L14753c;
  #L147536.  v1:= "canceled " @kind object;
  #L14753a.  goto L147540;
  #L14753c.  v1:= "" @kind object;
  #L147540.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147546.  v1:= v2.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L14754a.  if v1 == 0 then goto L147554;
  #L14754e.  v1:= "web socket" @kind object;
  #L147552.  goto L147558;
  #L147554.  v1:= "call" @kind object;
  #L147558.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14755e.  v1:= " to " @kind object;
  #L147562.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147568.  call temp:= `redactedUrl$okhttp`(v2) @signature `Lokhttp3/internal/connection/RealCall;.redactedUrl$okhttp:()Ljava/lang/String;` @kind virtual;
  #L14756e.  v1:= temp @kind object;
  #L147570.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147576.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14757c.  v0:= temp @kind object;
  #L14757e.  return v0 @kind object;
}
procedure `void` `acquireConnectionNoEvents`(`okhttp3.internal.connection.RealCall` v4 @kind this, `okhttp3.internal.connection.RealConnection` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.acquireConnectionNoEvents:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L147c8c.  v0:= "connection" @kind object;
  #L147c90.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147c96.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L147c9a.  if v0 == 0 then goto L147d04;
  #L147c9e.  call temp:= `holdsLock`(v5) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L147ca4.  v0:= temp;
  #L147ca6.  if v0 == 0 then goto L147cac;
  #L147caa.  goto L147d04;
  #L147cac.  v0:= new `java.lang.AssertionError`;
  #L147cb0.  v1:= new `java.lang.StringBuilder`;
  #L147cb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L147cba.  v2:= "Thread " @kind object;
  #L147cbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147cc4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L147cca.  v2:= temp @kind object;
  #L147ccc.  v3:= "Thread.currentThread()" @kind object;
  #L147cd0.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147cd6.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L147cdc.  v2:= temp @kind object;
  #L147cde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147ce4.  v2:= " MUST hold lock on " @kind object;
  #L147ce8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147cee.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147cf4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L147cfa.  v5:= temp @kind object;
  #L147cfc.  call `<init>`(v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L147d02.  throw v0;
  #L147d04.  v0:= v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L147d08.  if v0 != 0 then goto L147d10;
  #L147d0c.  v0:= 1I;
  #L147d0e.  goto L147d12;
  #L147d10.  v0:= 0I;
  #L147d12.  if v0 == 0 then goto L147d38;
  #L147d16.  v4.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` := v5 @kind object;
  #L147d1a.  call temp:= `getCalls`(v5) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L147d20.  v5:= temp @kind object;
  #L147d22.  v0:= new `okhttp3.internal.connection.RealCall$CallReference`;
  #L147d26.  v1:= v4.`okhttp3.internal.connection.RealCall.e` @type ^`java.lang.Object` @kind object;
  #L147d2a.  call `<init>`(v0, v4, v1) @signature `Lokhttp3/internal/connection/RealCall$CallReference;.<init>:(Lokhttp3/internal/connection/RealCall;Ljava/lang/Object;)V` @kind direct;
  #L147d30.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L147d36.  return @kind void;
  #L147d38.  v5:= new `java.lang.IllegalStateException`;
  #L147d3c.  v0:= "Check failed." @kind object;
  #L147d40.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147d46.  v0:= temp @kind object;
  #L147d48.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147d4e.  throw v5;
}
procedure `void` `cancel`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L147d98.  v0:= v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L147d9c.  if v0 == 0 then goto L147da2;
  #L147da0.  return @kind void;
  #L147da2.  v0:= 1I;
  #L147da4.  v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` := v0 @kind boolean;
  #L147da8.  v0:= v1.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L147dac.  if v0 == 0 then goto L147db6;
  #L147db0.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/Exchange;.cancel:()V` @kind virtual;
  #L147db6.  v0:= v1.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L147dba.  if v0 == 0 then goto L147dc4;
  #L147dbe.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L147dc4.  v0:= v1.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147dc8.  call `canceled`(v0, v1) @signature `Lokhttp3/EventListener;.canceled:(Lokhttp3/Call;)V` @kind virtual;
  #L147dce.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1474c0.  call temp:= `clone`(v1) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1474c6.  v0:= temp @kind object;
  #L1474c8.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L147794.  call temp:= `clone`(v1) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L14779a.  v0:= temp @kind object;
  #L14779c.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealCall` `clone`(`okhttp3.internal.connection.RealCall` v4 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.clone:()Lokhttp3/internal/connection/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L147b4c.  v0:= new `okhttp3.internal.connection.RealCall`;
  #L147b50.  v1:= v4.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147b54.  v2:= v4.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L147b58.  v3:= v4.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L147b5c.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L147b62.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.internal.connection.RealCall` v3 @kind this, `okhttp3.Callback` v4 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L147de0.  v0:= "responseCallback" @kind object;
  #L147de4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147dea.  v0:= v3.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L147dee.  v1:= 0I;
  #L147df0.  v2:= 1I;
  #L147df2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L147df8.  v0:= temp;
  #L147dfa.  if v0 == 0 then goto L147e22;
  #L147dfe.  call `b`(v3) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @kind direct;
  #L147e04.  v0:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147e08.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L147e0e.  v0:= temp @kind object;
  #L147e10.  v1:= new `okhttp3.internal.connection.RealCall$AsyncCall`;
  #L147e14.  call `<init>`(v1, v3, v4) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L147e1a.  call `enqueue$okhttp`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @kind virtual;
  #L147e20.  return @kind void;
  #L147e22.  v4:= new `java.lang.IllegalStateException`;
  #L147e26.  v0:= "Already Executed" @kind object;
  #L147e2a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147e30.  v0:= temp @kind object;
  #L147e32.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147e38.  throw v4;
}
procedure `void` `enterNetworkInterceptorExchange`(`okhttp3.internal.connection.RealCall` v2 @kind this, `okhttp3.Request` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/connection/RealCall;.enterNetworkInterceptorExchange:(Lokhttp3/Request;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L147e4c.  v0:= "request" @kind object;
  #L147e50.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147e56.  v0:= v2.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L147e5a.  v1:= 1I;
  #L147e5c.  if v0 != 0 then goto L147e64;
  #L147e60.  v0:= 1I;
  #L147e62.  goto L147e66;
  #L147e64.  v0:= 0I;
  #L147e66.  if v0 == 0 then goto L147ee8;
  #L147e6a.  @monitorenter v2
  #L147e6c.  v0:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L147e70.  v0:= v0 ^~ v1 @kind int;
  #L147e72.  if v0 == 0 then goto L147eca;
  #L147e76.  v0:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L147e7a.  v0:= v0 ^~ v1 @kind int;
  #L147e7c.  if v0 == 0 then goto L147eb2;
  #L147e80.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L147e84.  @monitorexit v2
  #L147e86.  if v4 == 0 then goto L147eb0;
  #L147e8a.  v4:= new `okhttp3.internal.connection.ExchangeFinder`;
  #L147e8e.  v0:= v2.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` @kind object;
  #L147e92.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L147e98.  v3:= temp @kind object;
  #L147e9a.  call temp:= `c`(v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.c:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L147ea0.  v3:= temp @kind object;
  #L147ea2.  v1:= v2.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147ea6.  call `<init>`(v4, v0, v3, v2, v1) @signature `Lokhttp3/internal/connection/ExchangeFinder;.<init>:(Lokhttp3/internal/connection/RealConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;)V` @kind direct;
  #L147eac.  v2.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` := v4 @kind object;
  #L147eb0.  return @kind void;
  #L147eb2.  v3:= "Check failed." @kind object;
  #L147eb6.  v4:= new `java.lang.IllegalStateException`;
  #L147eba.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147ec0.  v3:= temp @kind object;
  #L147ec2.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147ec8.  throw v4;
  #L147eca.  v3:= "cannot make a new request because the previous response is still open: please call response.close()" @kind object;
  #L147ece.  v4:= new `java.lang.IllegalStateException`;
  #L147ed2.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147ed8.  v3:= temp @kind object;
  #L147eda.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147ee0.  throw v4;
  #L147ee2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147ee4.  @monitorexit v2
  #L147ee6.  throw v3;
  #L147ee8.  v3:= "Check failed." @kind object;
  #L147eec.  v4:= new `java.lang.IllegalStateException`;
  #L147ef0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147ef6.  v3:= temp @kind object;
  #L147ef8.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147efe.  throw v4;
  catch `java.lang.Throwable` @[L147e6c..L147e84] goto L147ee2;
  catch `java.lang.Throwable` @[L147eb2..L147ee2] goto L147ee2;
}
procedure `okhttp3.Response` `execute`(`okhttp3.internal.connection.RealCall` v3 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L147810.  v0:= v3.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L147814.  v1:= 0I;
  #L147816.  v2:= 1I;
  #L147818.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L14781e.  v0:= temp;
  #L147820.  if v0 == 0 then goto L147878;
  #L147824.  v0:= v3.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L147828.  call `enter`(v0) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L14782e.  call `b`(v3) @signature `Lokhttp3/internal/connection/RealCall;.b:()V` @kind direct;
  #L147834.  v0:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147838.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L14783e.  v0:= temp @kind object;
  #L147840.  call `executed$okhttp`(v0, v3) @signature `Lokhttp3/Dispatcher;.executed$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L147846.  call temp:= `getResponseWithInterceptorChain$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealCall;.getResponseWithInterceptorChain$okhttp:()Lokhttp3/Response;` @kind virtual;
  #L14784c.  v0:= temp @kind object;
  #L14784e.  v1:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147852.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L147858.  v1:= temp @kind object;
  #L14785a.  call `finished$okhttp`(v1, v3) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L147860.  return v0 @kind object;
  #L147862.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147864.  v1:= v3.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147868.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L14786e.  v1:= temp @kind object;
  #L147870.  call `finished$okhttp`(v1, v3) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @kind virtual;
  #L147876.  throw v0;
  #L147878.  v0:= new `java.lang.IllegalStateException`;
  #L14787c.  v1:= "Already Executed" @kind object;
  #L147880.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147886.  v1:= temp @kind object;
  #L147888.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14788e.  throw v0;
  catch `java.lang.Throwable` @[L147834..L14784e] goto L147862;
}
procedure `void` `exitNetworkInterceptorExchange$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/internal/connection/RealCall;.exitNetworkInterceptorExchange$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L147f24.  @monitorenter v1
  #L147f26.  v0:= v1.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L147f2a.  if v0 == 0 then goto L147f4e;
  #L147f2e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L147f32.  @monitorexit v1
  #L147f34.  if v2 == 0 then goto L147f46;
  #L147f38.  v2:= v1.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L147f3c.  if v2 == 0 then goto L147f46;
  #L147f40.  call `detachWithViolence`(v2) @signature `Lokhttp3/internal/connection/Exchange;.detachWithViolence:()V` @kind virtual;
  #L147f46.  v2:= 0I;
  #L147f48.  v1.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L147f4c.  return @kind void;
  #L147f4e.  v2:= "released" @kind object;
  #L147f52.  v0:= new `java.lang.IllegalStateException`;
  #L147f56.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147f5c.  v2:= temp @kind object;
  #L147f5e.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147f64.  throw v0;
  #L147f66.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147f68.  @monitorexit v1
  #L147f6a.  throw v2;
  catch `java.lang.Throwable` @[L147f26..L147f32] goto L147f66;
  catch `java.lang.Throwable` @[L147f4e..L147f66] goto L147f66;
}
procedure `okhttp3.OkHttpClient` `getClient`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getClient:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1477c8.  v0:= v1.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1477cc.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L147b8c.  v0:= v1.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L147b90.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnectionToCancel`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getConnectionToCancel:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L147ba4.  v0:= v1.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L147ba8.  return v0 @kind object;
}
procedure `okhttp3.EventListener` `getEventListener$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getEventListener$okhttp:()Lokhttp3/EventListener;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1477b0.  v0:= v1.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L1477b4.  return v0 @kind object;
}
procedure `boolean` `getForWebSocket`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getForWebSocket:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L147154.  v0:= v1.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L147158.  return v0;
}
procedure `okhttp3.internal.connection.Exchange` `getInterceptorScopedExchange$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getInterceptorScopedExchange$okhttp:()Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L147a2c.  v0:= v1.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L147a30.  return v0 @kind object;
}
procedure `okhttp3.Request` `getOriginalRequest`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getOriginalRequest:()Lokhttp3/Request;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1477e0.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1477e4.  return v0 @kind object;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain$okhttp`(`okhttp3.internal.connection.RealCall` v10 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.getResponseWithInterceptorChain$okhttp:()Lokhttp3/Response;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1478ac.  v2:= new `java.util.ArrayList`;
  #L1478b0.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1478b6.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1478ba.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L1478c0.  v0:= temp @kind object;
  #L1478c2.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L1478c8.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L1478cc.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1478d0.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L1478d6.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1478dc.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L1478e0.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L1478e4.  call temp:= `cookieJar`(v1) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L1478ea.  v1:= temp @kind object;
  #L1478ec.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L1478f2.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1478f8.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L1478fc.  v1:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147900.  call temp:= `cache`(v1) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @kind virtual;
  #L147906.  v1:= temp @kind object;
  #L147908.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/Cache;)V` @kind direct;
  #L14790e.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L147914.  v0:= `@@okhttp3.internal.connection.ConnectInterceptor.INSTANCE` @type ^`okhttp3.internal.connection.ConnectInterceptor` @kind object;
  #L147918.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14791e.  v0:= v10.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L147922.  if v0 != 0 then goto L147938;
  #L147926.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L14792a.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L147930.  v0:= temp @kind object;
  #L147932.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L147938.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L14793c.  v1:= v10.`okhttp3.internal.connection.RealCall.r` @type ^`boolean` @kind boolean;
  #L147940.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L147946.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14794c.  v9:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L147950.  v3:= 0I;
  #L147952.  v4:= 0I;
  #L147954.  v5:= v10.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L147958.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L14795c.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L147962.  v6:= temp;
  #L147964.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147968.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L14796e.  v7:= temp;
  #L147970.  v0:= v10.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147974.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L14797a.  v8:= temp;
  #L14797c.  v0:= v9 @kind object;
  #L14797e.  v1:= v10 @kind object;
  #L147980.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Lokhttp3/internal/connection/RealCall;Ljava/util/List;ILokhttp3/internal/connection/Exchange;Lokhttp3/Request;III)V` @kind direct;
  #L147986.  v0:= 0I;
  #L147988.  v1:= 0I;
  #L14798a.  v2:= v10.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L14798e.  call temp:= `proceed`(v9, v2) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind virtual;
  #L147994.  v2:= temp @kind object;
  #L147996.  call temp:= `isCanceled`(v10) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @kind virtual;
  #L14799c.  v3:= temp;
  #L14799e.  if v3 != 0 then goto L1479aa;
  #L1479a2.  call temp:= `noMoreExchanges$okhttp`(v10, v1) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1479a8.  return v2 @kind object;
  #L1479aa.  call `closeQuietly`(v2) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L1479b0.  v2:= new `java.io.IOException`;
  #L1479b4.  v3:= "Canceled" @kind object;
  #L1479b8.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1479be.  throw v2;
  #L1479c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1479c2.  goto L1479ec;
  #L1479c4.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1479c6.  v2:= 1I;
  #L1479c8.  call temp:= `noMoreExchanges$okhttp`(v10, v0) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1479ce.  v0:= temp @kind object;
  #L1479d0.  if v0 != 0 then goto L1479e4;
  #L1479d4.  v0:= new `java.lang.NullPointerException`;
  #L1479d8.  v3:= "null cannot be cast to non-null type kotlin.Throwable" @kind object;
  #L1479dc.  call `<init>`(v0, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1479e2.  throw v0;
  #L1479e4.  throw v0;
  #L1479e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1479e8.  v2:= v0 @kind object;
  #L1479ea.  v0:= 1I;
  #L1479ec.  if v0 != 0 then goto L1479f6;
  #L1479f0.  call temp:= `noMoreExchanges$okhttp`(v10, v1) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L1479f6.  throw v2;
  catch `java.io.IOException` @[L14798a..L14799e] goto L1479c4;
  catch `java.lang.Throwable` @[L14798a..L14799e] goto L1479c0;
  catch `java.io.IOException` @[L1479aa..L1479c0] goto L1479c4;
  catch `java.lang.Throwable` @[L1479aa..L1479c0] goto L1479c0;
  catch `java.lang.Throwable` @[L1479c8..L1479e6] goto L1479e6;
}
procedure `okhttp3.internal.connection.Exchange` `initExchange$okhttp`(`okhttp3.internal.connection.RealCall` v4 @kind this, `okhttp3.internal.http.RealInterceptorChain` v5 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.initExchange$okhttp:(Lokhttp3/internal/http/RealInterceptorChain;)Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L147a44.  v0:= "chain" @kind object;
  #L147a48.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147a4e.  @monitorenter v4
  #L147a50.  v0:= v4.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L147a54.  if v0 == 0 then goto L147afc;
  #L147a58.  v0:= v4.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L147a5c.  v1:= 1I;
  #L147a5e.  v0:= v0 ^~ v1 @kind int;
  #L147a60.  if v0 == 0 then goto L147ae4;
  #L147a64.  v0:= v4.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L147a68.  v0:= v0 ^~ v1 @kind int;
  #L147a6a.  if v0 == 0 then goto L147acc;
  #L147a6e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L147a72.  @monitorexit v4
  #L147a74.  v0:= v4.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L147a78.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L147a7e.  v2:= v4.`okhttp3.internal.connection.RealCall.p` @type ^`okhttp3.OkHttpClient` @kind object;
  #L147a82.  call temp:= `find`(v0, v2, v5) @signature `Lokhttp3/internal/connection/ExchangeFinder;.find:(Lokhttp3/OkHttpClient;Lokhttp3/internal/http/RealInterceptorChain;)Lokhttp3/internal/http/ExchangeCodec;` @kind virtual;
  #L147a88.  v5:= temp @kind object;
  #L147a8a.  v2:= new `okhttp3.internal.connection.Exchange`;
  #L147a8e.  v3:= v4.`okhttp3.internal.connection.RealCall.b` @type ^`okhttp3.EventListener` @kind object;
  #L147a92.  call `<init>`(v2, v4, v3, v0, v5) @signature `Lokhttp3/internal/connection/Exchange;.<init>:(Lokhttp3/internal/connection/RealCall;Lokhttp3/EventListener;Lokhttp3/internal/connection/ExchangeFinder;Lokhttp3/internal/http/ExchangeCodec;)V` @kind direct;
  #L147a98.  v4.`okhttp3.internal.connection.RealCall.i` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L147a9c.  v4.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L147aa0.  @monitorenter v4
  #L147aa2.  v4.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` := v1 @kind boolean;
  #L147aa6.  v4.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` := v1 @kind boolean;
  #L147aaa.  @monitorexit v4
  #L147aac.  v5:= v4.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L147ab0.  if v5 != 0 then goto L147ab6;
  #L147ab4.  return v2 @kind object;
  #L147ab6.  v5:= new `java.io.IOException`;
  #L147aba.  v0:= "Canceled" @kind object;
  #L147abe.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147ac4.  throw v5;
  #L147ac6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147ac8.  @monitorexit v4
  #L147aca.  throw v5;
  #L147acc.  v5:= "Check failed." @kind object;
  #L147ad0.  v0:= new `java.lang.IllegalStateException`;
  #L147ad4.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147ada.  v5:= temp @kind object;
  #L147adc.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147ae2.  throw v0;
  #L147ae4.  v5:= "Check failed." @kind object;
  #L147ae8.  v0:= new `java.lang.IllegalStateException`;
  #L147aec.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147af2.  v5:= temp @kind object;
  #L147af4.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147afa.  throw v0;
  #L147afc.  v5:= "released" @kind object;
  #L147b00.  v0:= new `java.lang.IllegalStateException`;
  #L147b04.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147b0a.  v5:= temp @kind object;
  #L147b0c.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147b12.  throw v0;
  #L147b14.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147b16.  @monitorexit v4
  #L147b18.  throw v5;
  catch `java.lang.Throwable` @[L147a50..L147a72] goto L147b14;
  catch `java.lang.Throwable` @[L147aa2..L147aaa] goto L147ac6;
  catch `java.lang.Throwable` @[L147acc..L147b14] goto L147b14;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14716c.  v0:= v1.`okhttp3.internal.connection.RealCall.m` @type ^`boolean` @kind boolean;
  #L147170.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L147184.  v0:= v1.`okhttp3.internal.connection.RealCall.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L147188.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L14718e.  v0:= temp;
  #L147190.  return v0;
}
procedure `java.io.IOException` `messageDone$okhttp`(`okhttp3.internal.connection.RealCall` v2 @kind this, `okhttp3.internal.connection.Exchange` v3 @kind object, `boolean` v4 , `boolean` v5 , `java.io.IOException` v6 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.messageDone$okhttp:(Lokhttp3/internal/connection/Exchange;ZZLjava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L147348.  v0:= "exchange" @kind object;
  #L14734c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L147352.  v0:= v2.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L147356.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L14735c.  v3:= temp;
  #L14735e.  v0:= 1I;
  #L147360.  v3:= v3 ^~ v0 @kind int;
  #L147362.  if v3 == 0 then goto L147368;
  #L147366.  return v6 @kind object;
  #L147368.  @monitorenter v2
  #L14736a.  v3:= 0I;
  #L14736c.  if v4 == 0 then goto L14737e;
  #L147370.  v1:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L147374.  if v1 != 0 then goto L14738a;
  #L147378.  goto L14737e;
  #L14737a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L14737c.  goto L1473fc;
  #L14737e.  if v5 == 0 then goto L1473cc;
  #L147382.  v1:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L147386.  if v1 == 0 then goto L1473cc;
  #L14738a.  if v4 == 0 then goto L147392;
  #L14738e.  v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` := v3 @kind boolean;
  #L147392.  if v5 == 0 then goto L14739a;
  #L147396.  v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` := v3 @kind boolean;
  #L14739a.  v4:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L14739e.  if v4 != 0 then goto L1473ae;
  #L1473a2.  v5:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1473a6.  if v5 != 0 then goto L1473ae;
  #L1473aa.  v5:= 1I;
  #L1473ac.  goto L1473b0;
  #L1473ae.  v5:= 0I;
  #L1473b0.  if v4 != 0 then goto L1473c6;
  #L1473b4.  v4:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L1473b8.  if v4 != 0 then goto L1473c6;
  #L1473bc.  v4:= v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L1473c0.  if v4 != 0 then goto L1473c6;
  #L1473c4.  goto L1473c8;
  #L1473c6.  v0:= 0I;
  #L1473c8.  v3:= v5;
  #L1473ca.  goto L1473ce;
  #L1473cc.  v0:= 0I;
  #L1473ce.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1473d2.  @monitorexit v2
  #L1473d4.  if v3 == 0 then goto L1473ec;
  #L1473d8.  v3:= 0I;
  #L1473da.  v2.`okhttp3.internal.connection.RealCall.n` @type ^`okhttp3.internal.connection.Exchange` := v3 @kind object;
  #L1473de.  v3:= v2.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L1473e2.  if v3 == 0 then goto L1473ec;
  #L1473e6.  call `incrementSuccessCount$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.incrementSuccessCount$okhttp:()V` @kind virtual;
  #L1473ec.  if v0 == 0 then goto L1473fa;
  #L1473f0.  call temp:= `a`(v2, v6) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L1473f6.  v3:= temp @kind object;
  #L1473f8.  return v3 @kind object;
  #L1473fa.  return v6 @kind object;
  #L1473fc.  @monitorexit v2
  #L1473fe.  throw v3;
  catch `java.lang.Throwable` @[L147370..L1473d2] goto L14737a;
}
procedure `java.io.IOException` `noMoreExchanges$okhttp`(`okhttp3.internal.connection.RealCall` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.noMoreExchanges$okhttp:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L14741c.  @monitorenter v2
  #L14741e.  v0:= v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` @kind boolean;
  #L147422.  v1:= 0I;
  #L147424.  if v0 == 0 then goto L147440;
  #L147428.  v2.`okhttp3.internal.connection.RealCall.l` @type ^`boolean` := v1 @kind boolean;
  #L14742c.  v0:= v2.`okhttp3.internal.connection.RealCall.j` @type ^`boolean` @kind boolean;
  #L147430.  if v0 != 0 then goto L147440;
  #L147434.  v0:= v2.`okhttp3.internal.connection.RealCall.k` @type ^`boolean` @kind boolean;
  #L147438.  if v0 != 0 then goto L147440;
  #L14743c.  v0:= 1I;
  #L14743e.  v1:= 1I;
  #L147440.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L147444.  @monitorexit v2
  #L147446.  if v1 == 0 then goto L147452;
  #L14744a.  call temp:= `a`(v2, v3) @signature `Lokhttp3/internal/connection/RealCall;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L147450.  v3:= temp @kind object;
  #L147452.  return v3 @kind object;
  #L147454.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L147456.  @monitorexit v2
  #L147458.  throw v3;
  catch `java.lang.Throwable` @[L14741e..L147444] goto L147454;
}
procedure `java.lang.String` `redactedUrl$okhttp`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.redactedUrl$okhttp:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1474f8.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1474fc.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L147502.  v0:= temp @kind object;
  #L147504.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L14750a.  v0:= temp @kind object;
  #L14750c.  return v0 @kind object;
}
procedure `java.net.Socket` `releaseConnectionNoEvents$okhttp`(`okhttp3.internal.connection.RealCall` v7 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.releaseConnectionNoEvents$okhttp:()Ljava/net/Socket;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L147590.  v0:= v7.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L147594.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14759a.  v1:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L14759e.  if v1 == 0 then goto L147608;
  #L1475a2.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1475a8.  v1:= temp;
  #L1475aa.  if v1 == 0 then goto L1475b0;
  #L1475ae.  goto L147608;
  #L1475b0.  v1:= new `java.lang.AssertionError`;
  #L1475b4.  v2:= new `java.lang.StringBuilder`;
  #L1475b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1475be.  v3:= "Thread " @kind object;
  #L1475c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1475c8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1475ce.  v3:= temp @kind object;
  #L1475d0.  v4:= "Thread.currentThread()" @kind object;
  #L1475d4.  call `checkNotNullExpressionValue`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1475da.  call temp:= `getName`(v3) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1475e0.  v3:= temp @kind object;
  #L1475e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1475e8.  v3:= " MUST hold lock on " @kind object;
  #L1475ec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1475f2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1475f8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1475fe.  v0:= temp @kind object;
  #L147600.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L147606.  throw v1;
  #L147608.  call temp:= `getCalls`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.getCalls:()Ljava/util/List;` @kind virtual;
  #L14760e.  v1:= temp @kind object;
  #L147610.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L147616.  v2:= temp @kind object;
  #L147618.  v3:= 0I;
  #L14761a.  v4:= 0I;
  #L14761c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L147622.  v5:= temp;
  #L147624.  v6:= -1I;
  #L147626.  if v5 == 0 then goto L147656;
  #L14762a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L147630.  v5:= temp @kind object;
  #L147632.  v5:= (`java.lang.ref.Reference`) v5 @kind object;
  #L147636.  call temp:= `get`(v5) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L14763c.  v5:= temp @kind object;
  #L14763e.  v5:= (`okhttp3.internal.connection.RealCall`) v5 @kind object;
  #L147642.  call temp:= `areEqual`(v5, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L147648.  v5:= temp;
  #L14764a.  if v5 == 0 then goto L147650;
  #L14764e.  goto L147658;
  #L147650.  v4:= v4 + 1;
  #L147654.  goto L14761c;
  #L147656.  v4:= -1I;
  #L147658.  if v4 == v6 then goto L14765e;
  #L14765c.  v3:= 1I;
  #L14765e.  if v3 == 0 then goto L1476a4;
  #L147662.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L147668.  v2:= 0I;
  #L14766a.  v7.`okhttp3.internal.connection.RealCall.g` @type ^`okhttp3.internal.connection.RealConnection` := v2 @kind object;
  #L14766e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L147674.  v1:= temp;
  #L147676.  if v1 == 0 then goto L1476a2;
  #L14767a.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L147680.  v3:= temp @kind wide;
  #L147682.  call `setIdleAtNs$okhttp`(v0, v3) @signature `Lokhttp3/internal/connection/RealConnection;.setIdleAtNs$okhttp:(J)V` @kind virtual;
  #L147688.  v1:= v7.`okhttp3.internal.connection.RealCall.a` @type ^`okhttp3.internal.connection.RealConnectionPool` @kind object;
  #L14768c.  call temp:= `connectionBecameIdle`(v1, v0) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @kind virtual;
  #L147692.  v1:= temp;
  #L147694.  if v1 == 0 then goto L1476a2;
  #L147698.  call temp:= `socket`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L14769e.  v0:= temp @kind object;
  #L1476a0.  return v0 @kind object;
  #L1476a2.  return v2 @kind object;
  #L1476a4.  v0:= new `java.lang.IllegalStateException`;
  #L1476a8.  v1:= "Check failed." @kind object;
  #L1476ac.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1476b2.  v1:= temp @kind object;
  #L1476b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1476ba.  throw v0;
}
procedure `okhttp3.Request` `request`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1477f8.  v0:= v1.`okhttp3.internal.connection.RealCall.q` @type ^`okhttp3.Request` @kind object;
  #L1477fc.  return v0 @kind object;
}
procedure `boolean` `retryAfterFailure`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.retryAfterFailure:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1471a4.  v0:= v1.`okhttp3.internal.connection.RealCall.f` @type ^`okhttp3.internal.connection.ExchangeFinder` @kind object;
  #L1471a8.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1471ae.  call temp:= `retryAfterFailure`(v0) @signature `Lokhttp3/internal/connection/ExchangeFinder;.retryAfterFailure:()Z` @kind virtual;
  #L1471b4.  v0:= temp;
  #L1471b6.  return v0;
}
procedure `void` `setConnectionToCancel`(`okhttp3.internal.connection.RealCall` v0 @kind this, `okhttp3.internal.connection.RealConnection` v1 @kind object) @signature `Lokhttp3/internal/connection/RealCall;.setConnectionToCancel:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L147f90.  v0.`okhttp3.internal.connection.RealCall.o` @type ^`okhttp3.internal.connection.RealConnection` := v1 @kind object;
  #L147f94.  return @kind void;
}
procedure `okio.AsyncTimeout` `timeout`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/AsyncTimeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L147bbc.  v0:= v1.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L147bc0.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.connection.RealCall` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L147bd4.  call temp:= `timeout`(v1) @signature `Lokhttp3/internal/connection/RealCall;.timeout:()Lokio/AsyncTimeout;` @kind virtual;
  #L147bda.  v0:= temp @kind object;
  #L147bdc.  return v0 @kind object;
}
procedure `void` `timeoutEarlyExit`(`okhttp3.internal.connection.RealCall` v2 @kind this) @signature `Lokhttp3/internal/connection/RealCall;.timeoutEarlyExit:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L147fa8.  v0:= v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` @kind boolean;
  #L147fac.  v1:= 1I;
  #L147fae.  v0:= v0 ^~ v1 @kind int;
  #L147fb0.  if v0 == 0 then goto L147fc4;
  #L147fb4.  v2.`okhttp3.internal.connection.RealCall.h` @type ^`boolean` := v1 @kind boolean;
  #L147fb8.  v0:= v2.`okhttp3.internal.connection.RealCall.c` @type ^`okhttp3.internal.connection.RealCall$timeout$1` @kind object;
  #L147fbc.  call temp:= `exit`(v0) @signature `Lokio/AsyncTimeout;.exit:()Z` @kind virtual;
  #L147fc2.  return @kind void;
  #L147fc4.  v0:= new `java.lang.IllegalStateException`;
  #L147fc8.  v1:= "Check failed." @kind object;
  #L147fcc.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L147fd2.  v1:= temp @kind object;
  #L147fd4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147fda.  throw v0;
}
