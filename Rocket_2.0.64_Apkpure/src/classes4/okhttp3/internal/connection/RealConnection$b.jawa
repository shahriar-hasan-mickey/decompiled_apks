record `okhttp3.internal.connection.RealConnection$b` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.connection.RealConnection$b.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealConnection$b` v0 @kind this, `okhttp3.internal.connection.RealConnection` v1 @kind object) @signature `Lokhttp3/internal/connection/RealConnection$b;.<init>:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1481d0.  v0.`okhttp3.internal.connection.RealConnection$b.a` @type ^`okhttp3.internal.connection.RealConnection` := v1 @kind object;
  #L1481d4.  v1:= 0I;
  #L1481d6.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L1481dc.  return @kind void;
}
procedure `java.util.List` `a`(`okhttp3.internal.connection.RealConnection$b` v4 @kind this) @signature `Lokhttp3/internal/connection/RealConnection$b;.a:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L148158.  v0:= v4.`okhttp3.internal.connection.RealConnection$b.a` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L14815c.  call temp:= `access$getHandshake$p`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.access$getHandshake$p:(Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Handshake;` @kind static;
  #L148162.  v0:= temp @kind object;
  #L148164.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14816a.  call temp:= `peerCertificates`(v0) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @kind virtual;
  #L148170.  v0:= temp @kind object;
  #L148172.  v1:= new `java.util.ArrayList`;
  #L148176.  v2:= 10I;
  #L14817a.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L148180.  v2:= temp;
  #L148182.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L148188.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14818e.  v0:= temp @kind object;
  #L148190.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L148196.  v2:= temp;
  #L148198.  if v2 == 0 then goto L1481be;
  #L14819c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1481a2.  v2:= temp @kind object;
  #L1481a4.  v2:= (`java.security.cert.Certificate`) v2 @kind object;
  #L1481a8.  v3:= "null cannot be cast to non-null type java.security.cert.X509Certificate" @kind object;
  #L1481ac.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1481b2.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L1481b6.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1481bc.  goto L148190;
  #L1481be.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.connection.RealConnection$b` v1 @kind this) @signature `Lokhttp3/internal/connection/RealConnection$b;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L14813c.  call temp:= `a`(v1) @signature `Lokhttp3/internal/connection/RealConnection$b;.a:()Ljava/util/List;` @kind virtual;
  #L148142.  v0:= temp @kind object;
  #L148144.  return v0 @kind object;
}
