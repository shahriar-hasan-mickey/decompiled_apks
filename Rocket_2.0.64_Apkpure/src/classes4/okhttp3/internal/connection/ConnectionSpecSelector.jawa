record `okhttp3.internal.connection.ConnectionSpecSelector` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.connection.ConnectionSpecSelector.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.c` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.connection.ConnectionSpecSelector.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.ConnectionSpecSelector` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L145ca4.  v0:= "connectionSpecs" @kind object;
  #L145ca8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145cae.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L145cb4.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` := v2 @kind object;
  #L145cb8.  return @kind void;
}
procedure `boolean` `a`(`okhttp3.internal.connection.ConnectionSpecSelector` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.a:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L145b54.  v0:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int`;
  #L145b58.  v1:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L145b5c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145b62.  v1:= temp;
  #L145b64.  if v0 >= v1 then goto L145b8e;
  #L145b68.  v2:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L145b6c.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L145b72.  v2:= temp @kind object;
  #L145b74.  v2:= (`okhttp3.ConnectionSpec`) v2 @kind object;
  #L145b78.  call temp:= `isCompatible`(v2, v4) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L145b7e.  v2:= temp;
  #L145b80.  if v2 == 0 then goto L145b88;
  #L145b84.  v4:= 1I;
  #L145b86.  return v4;
  #L145b88.  v0:= v0 + 1;
  #L145b8c.  goto L145b64;
  #L145b8e.  v4:= 0I;
  #L145b90.  return v4;
}
procedure `okhttp3.ConnectionSpec` `configureSecureSocket`(`okhttp3.internal.connection.ConnectionSpecSelector` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.configureSecureSocket:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L145ba4.  v0:= "sslSocket" @kind object;
  #L145ba8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145bae.  v0:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int`;
  #L145bb2.  v1:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L145bb6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145bbc.  v1:= temp;
  #L145bbe.  if v0 >= v1 then goto L145bee;
  #L145bc2.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L145bc6.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L145bcc.  v2:= temp @kind object;
  #L145bce.  v2:= (`okhttp3.ConnectionSpec`) v2 @kind object;
  #L145bd2.  call temp:= `isCompatible`(v2, v5) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L145bd8.  v3:= temp;
  #L145bda.  if v3 == 0 then goto L145be8;
  #L145bde.  v0:= v0 + 1;
  #L145be2.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.a` @type ^`int` := v0;
  #L145be6.  goto L145bf0;
  #L145be8.  v0:= v0 + 1;
  #L145bec.  goto L145bbe;
  #L145bee.  v2:= 0I;
  #L145bf0.  if v2 == 0 then goto L145c0c;
  #L145bf4.  call temp:= `a`(v4, v5) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L145bfa.  v0:= temp;
  #L145bfc.  v4.`okhttp3.internal.connection.ConnectionSpecSelector.b` @type ^`boolean` := v0 @kind boolean;
  #L145c00.  v0:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` @kind boolean;
  #L145c04.  call `apply$okhttp`(v2, v5, v0) @signature `Lokhttp3/ConnectionSpec;.apply$okhttp:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L145c0a.  return v2 @kind object;
  #L145c0c.  v0:= new `java.net.UnknownServiceException`;
  #L145c10.  v1:= new `java.lang.StringBuilder`;
  #L145c14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145c1a.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L145c1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c24.  v2:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` @kind boolean;
  #L145c28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c2e.  v2:= 44I;
  #L145c32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c38.  v3:= " modes=" @kind object;
  #L145c3c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c42.  v3:= v4.`okhttp3.internal.connection.ConnectionSpecSelector.d` @type ^`java.util.List` @kind object;
  #L145c46.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c52.  v2:= " supported protocols=" @kind object;
  #L145c56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c5c.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L145c62.  v5:= temp @kind object;
  #L145c64.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L145c6a.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L145c70.  v5:= temp @kind object;
  #L145c72.  v2:= "java.util.Arrays.toString(this)" @kind object;
  #L145c76.  call `checkNotNullExpressionValue`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145c7c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145c82.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145c88.  v5:= temp @kind object;
  #L145c8a.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145c90.  throw v0;
}
procedure `boolean` `connectionFailed`(`okhttp3.internal.connection.ConnectionSpecSelector` v3 @kind this, `java.io.IOException` v4 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.connectionFailed:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L145ae4.  v0:= "e" @kind object;
  #L145ae8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145aee.  v0:= 1I;
  #L145af0.  v3.`okhttp3.internal.connection.ConnectionSpecSelector.c` @type ^`boolean` := v0 @kind boolean;
  #L145af4.  v1:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.b` @type ^`boolean` @kind boolean;
  #L145af8.  v2:= 0I;
  #L145afa.  if v1 != 0 then goto L145b02;
  #L145afe.  v0:= 0I;
  #L145b00.  goto L145b42;
  #L145b02.  v1:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L145b06.  if v1 == 0 then goto L145b0c;
  #L145b0a.  goto L145afe;
  #L145b0c.  v1:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L145b10.  if v1 == 0 then goto L145b16;
  #L145b14.  goto L145afe;
  #L145b16.  v1:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L145b1a.  if v1 == 0 then goto L145b30;
  #L145b1e.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L145b24.  v1:= temp @kind object;
  #L145b26.  v1:= instanceof @variable v1 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L145b2a.  if v1 == 0 then goto L145b30;
  #L145b2e.  goto L145afe;
  #L145b30.  v1:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L145b34.  if v1 == 0 then goto L145b3a;
  #L145b38.  goto L145afe;
  #L145b3a.  v4:= instanceof @variable v4 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L145b3e.  if v4 == 0 then goto L145afe;
  #L145b42.  return v0;
}
