record `okhttp3.internal.connection.RealCall$CallReference` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.ref.WeakReference` @kind class {
  `java.lang.Object` `okhttp3.internal.connection.RealCall$CallReference.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealCall$CallReference` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/internal/connection/RealCall$CallReference;.<init>:(Lokhttp3/internal/connection/RealCall;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1470f4.  v0:= "referent" @kind object;
  #L1470f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1470fe.  call `<init>`(v1, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L147104.  v1.`okhttp3.internal.connection.RealCall$CallReference.a` @type ^`java.lang.Object` := v3 @kind object;
  #L147108.  return @kind void;
}
procedure `java.lang.Object` `getCallStackTrace`(`okhttp3.internal.connection.RealCall$CallReference` v1 @kind this) @signature `Lokhttp3/internal/connection/RealCall$CallReference;.getCallStackTrace:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1470dc.  v0:= v1.`okhttp3.internal.connection.RealCall$CallReference.a` @type ^`java.lang.Object` @kind object;
  #L1470e0.  return v0 @kind object;
}
