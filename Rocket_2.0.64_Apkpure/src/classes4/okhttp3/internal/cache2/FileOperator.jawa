record `okhttp3.internal.cache2.FileOperator` @kind class @AccessFlag PUBLIC_FINAL {
  `java.nio.channels.FileChannel` `okhttp3.internal.cache2.FileOperator.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.cache2.FileOperator` v1 @kind this, `java.nio.channels.FileChannel` v2 @kind object) @signature `Lokhttp3/internal/cache2/FileOperator;.<init>:(Ljava/nio/channels/FileChannel;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1434ec.  v0:= "fileChannel" @kind object;
  #L1434f0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1434f6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1434fc.  v1.`okhttp3.internal.cache2.FileOperator.a` @type ^`java.nio.channels.FileChannel` := v2 @kind object;
  #L143500.  return @kind void;
}
procedure `void` `read`(`okhttp3.internal.cache2.FileOperator` v9 @kind this, `long` v10 , `okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokhttp3/internal/cache2/FileOperator;.read:(JLokio/Buffer;J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L143514.  v0:= "sink" @kind object;
  #L143518.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14351e.  v0:= 0L;
  #L143522.  v2:= lcmp(v13, v0);
  #L143526.  if v2 < 0 then goto L14354c;
  #L14352a.  v2:= lcmp(v13, v0);
  #L14352e.  if v2 <= 0 then goto L14354a;
  #L143532.  v3:= v9.`okhttp3.internal.cache2.FileOperator.a` @type ^`java.nio.channels.FileChannel` @kind object;
  #L143536.  v4:= v10 @kind wide;
  #L143538.  v6:= v13 @kind wide;
  #L14353a.  v8:= v12 @kind object;
  #L14353c.  call temp:= `transferTo`(v3, v4, v6, v8) @signature `Ljava/nio/channels/FileChannel;.transferTo:(JJLjava/nio/channels/WritableByteChannel;)J` @kind virtual;
  #L143542.  v2:= temp @kind wide;
  #L143544.  v10:= v10 + v2 @kind long;
  #L143546.  v13:= v13 - v2 @kind long;
  #L143548.  goto L14352a;
  #L14354a.  return @kind void;
  #L14354c.  v10:= new `java.lang.IndexOutOfBoundsException`;
  #L143550.  call `<init>`(v10) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L143556.  throw v10;
}
procedure `void` `write`(`okhttp3.internal.cache2.FileOperator` v14 @kind this, `long` v15 , `okio.Buffer` v17 @kind object, `long` v18 ) @signature `Lokhttp3/internal/cache2/FileOperator;.write:(JLokio/Buffer;J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L143568.  v0:= "source" @kind object;
  #L14356c.  v7:= v17 @kind object;
  #L143570.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L143576.  v8:= 0L;
  #L14357a.  v0:= lcmp(v18, v8);
  #L14357e.  if v0 < 0 then goto L1435c0;
  #L143582.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L143588.  v0:= temp @kind wide;
  #L14358a.  v2:= lcmp(v18, v0);
  #L14358e.  if v2 > 0 then goto L1435c0;
  #L143592.  v10:= v15 @kind wide;
  #L143594.  v12:= v18 @kind wide;
  #L143598.  v0:= lcmp(v12, v8);
  #L14359c.  if v0 <= 0 then goto L1435bc;
  #L1435a0.  v0:= v14 @kind object;
  #L1435a2.  v1:= v0.`okhttp3.internal.cache2.FileOperator.a` @type ^`java.nio.channels.FileChannel` @kind object;
  #L1435a6.  v2:= v17 @kind object;
  #L1435aa.  v3:= v10 @kind wide;
  #L1435ac.  v5:= v12 @kind wide;
  #L1435ae.  call temp:= `transferFrom`(v1, v2, v3, v5) @signature `Ljava/nio/channels/FileChannel;.transferFrom:(Ljava/nio/channels/ReadableByteChannel;JJ)J` @kind virtual;
  #L1435b4.  v1:= temp @kind wide;
  #L1435b6.  v10:= v10 + v1 @kind long;
  #L1435b8.  v12:= v12 - v1 @kind long;
  #L1435ba.  goto L143598;
  #L1435bc.  v0:= v14 @kind object;
  #L1435be.  return @kind void;
  #L1435c0.  v0:= v14 @kind object;
  #L1435c2.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L1435c6.  call `<init>`(v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1435cc.  throw v1;
}
