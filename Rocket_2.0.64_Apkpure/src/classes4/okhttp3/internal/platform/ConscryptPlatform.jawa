record `okhttp3.internal.platform.ConscryptPlatform` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.platform.Platform` @kind class {
  `java.security.Provider` `okhttp3.internal.platform.ConscryptPlatform.c` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.platform.ConscryptPlatform$Companion` `@@okhttp3.internal.platform.ConscryptPlatform.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `boolean` `@@okhttp3.internal.platform.ConscryptPlatform.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/platform/ConscryptPlatform;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L158020.  v0:= new `okhttp3.internal.platform.ConscryptPlatform$Companion`;
  #L158024.  v1:= 0I;
  #L158026.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/platform/ConscryptPlatform$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L15802c.  `@@okhttp3.internal.platform.ConscryptPlatform.Companion` @type ^`okhttp3.internal.platform.ConscryptPlatform$Companion` := v0 @kind object;
  #L158030.  v1:= 0I;
  #L158032.  v2:= "org.conscrypt.Conscrypt$Version" @kind object;
  #L158036.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15803c.  v3:= temp @kind object;
  #L15803e.  call temp:= `getClassLoader`(v3) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L158044.  v3:= temp @kind object;
  #L158046.  call temp:= `forName`(v2, v1, v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L15804c.  call temp:= `isAvailable`() @signature `Lorg/conscrypt/Conscrypt;.isAvailable:()Z` @kind static;
  #L158052.  v2:= temp;
  #L158054.  v3:= 1I;
  #L158056.  if v2 == 0 then goto L15806a;
  #L15805a.  v2:= 2I;
  #L15805c.  call temp:= `atLeastVersion`(v0, v2, v3, v1) @signature `Lokhttp3/internal/platform/ConscryptPlatform$Companion;.atLeastVersion:(III)Z` @kind virtual;
  #L158062.  v0:= temp;
  #L158064.  if v0 == 0 then goto L15806a;
  #L158068.  v1:= 1I;
  #L15806a.  `@@okhttp3.internal.platform.ConscryptPlatform.d` @type ^`boolean` := v1 @kind boolean;
  #L15806e.  return @kind void;
  catch `java.lang.NoClassDefFoundError` @[L158032..L158064] goto L15806a;
  catch `java.lang.ClassNotFoundException` @[L158032..L158064] goto L15806a;
}
procedure `void` `<init>`(`okhttp3.internal.platform.ConscryptPlatform` v2 @kind this) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L158090.  call `<init>`(v2) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L158096.  call temp:= `newProvider`() @signature `Lorg/conscrypt/Conscrypt;.newProvider:()Ljava/security/Provider;` @kind static;
  #L15809c.  v0:= temp @kind object;
  #L15809e.  v1:= "Conscrypt.newProvider()" @kind object;
  #L1580a2.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1580a8.  v2.`okhttp3.internal.platform.ConscryptPlatform.c` @type ^`java.security.Provider` := v0 @kind object;
  #L1580ac.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.platform.ConscryptPlatform` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1580c0.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.<init>:()V` @kind direct;
  #L1580c6.  return @kind void;
}
procedure `boolean` `access$isSupported$cp`() @signature `Lokhttp3/internal/platform/ConscryptPlatform;.access$isSupported$cp:()Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L157e6c.  v0:= `@@okhttp3.internal.platform.ConscryptPlatform.d` @type ^`boolean` @kind boolean;
  #L157e70.  return v0;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.ConscryptPlatform` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1580d8.  v0:= "sslSocket" @kind object;
  #L1580dc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1580e2.  v0:= "protocols" @kind object;
  #L1580e6.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1580ec.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L1580f2.  v0:= temp;
  #L1580f4.  if v0 == 0 then goto L158130;
  #L1580f8.  v3:= 1I;
  #L1580fa.  call `setUseSessionTickets`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setUseSessionTickets:(Ljavax/net/ssl/SSLSocket;Z)V` @kind static;
  #L158100.  v3:= `@@okhttp3.internal.platform.Platform.Companion` @type ^`okhttp3.internal.platform.Platform$Companion` @kind object;
  #L158104.  call temp:= `alpnProtocolNames`(v3, v4) @signature `Lokhttp3/internal/platform/Platform$Companion;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L15810a.  v3:= temp @kind object;
  #L15810c.  v4:= 0I;
  #L15810e.  v4:= new `java.lang.String`[v4];
  #L158112.  call temp:= `toArray`(v3, v4) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L158118.  v3:= temp @kind object;
  #L15811a.  v4:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L15811e.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L158124.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L158128.  call `setApplicationProtocols`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setApplicationProtocols:(Ljavax/net/ssl/SSLSocket;[Ljava/lang/String;)V` @kind static;
  #L15812e.  goto L158136;
  #L158130.  call `configureTlsExtensions`(v1, v2, v3, v4) @signature `Lokhttp3/internal/platform/Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L158136.  return @kind void;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.ConscryptPlatform` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157e84.  v0:= "sslSocket" @kind object;
  #L157e88.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157e8e.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L157e94.  v0:= temp;
  #L157e96.  if v0 == 0 then goto L157ea4;
  #L157e9a.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/conscrypt/Conscrypt;.getApplicationProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind static;
  #L157ea0.  v2:= temp @kind object;
  #L157ea2.  goto L157eac;
  #L157ea4.  call temp:= `getSelectedProtocol`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L157eaa.  v2:= temp @kind object;
  #L157eac.  return v2 @kind object;
}
procedure `javax.net.ssl.SSLContext` `newSSLContext`(`okhttp3.internal.platform.ConscryptPlatform` v2 @kind this) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.newSSLContext:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L157ec0.  v0:= v2.`okhttp3.internal.platform.ConscryptPlatform.c` @type ^`java.security.Provider` @kind object;
  #L157ec4.  v1:= "TLS" @kind object;
  #L157ec8.  call temp:= `getInstance`(v1, v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L157ece.  v0:= temp @kind object;
  #L157ed0.  v1:= "SSLContext.getInstance(\"TLS\", provider)" @kind object;
  #L157ed4.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157eda.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `newSslSocketFactory`(`okhttp3.internal.platform.ConscryptPlatform` v3 @kind this, `javax.net.ssl.X509TrustManager` v4 @kind object) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.newSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L157eec.  v0:= "trustManager" @kind object;
  #L157ef0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157ef6.  call temp:= `newSSLContext`(v3) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.newSSLContext:()Ljavax/net/ssl/SSLContext;` @kind virtual;
  #L157efc.  v0:= temp @kind object;
  #L157efe.  v1:= 1I;
  #L157f00.  v1:= new `javax.net.ssl.TrustManager`[v1];
  #L157f04.  v2:= 0I;
  #L157f06.  v1[v2]:= v4 @kind object;
  #L157f0a.  v4:= 0I;
  #L157f0c.  call `init`(v0, v4, v1, v4) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L157f12.  call temp:= `getSocketFactory`(v0) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L157f18.  v4:= temp @kind object;
  #L157f1a.  v0:= "newSSLContext().apply {\n…null)\n    }.socketFactory" @kind object;
  #L157f1e.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157f24.  return v4 @kind object;
}
procedure `javax.net.ssl.X509TrustManager` `platformTrustManager`(`okhttp3.internal.platform.ConscryptPlatform` v4 @kind this) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L157f38.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L157f3e.  v0:= temp @kind object;
  #L157f40.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L157f46.  v0:= temp @kind object;
  #L157f48.  v1:= 0I;
  #L157f4a.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L157f50.  v1:= "TrustManagerFactory.getI…(null as KeyStore?)\n    }" @kind object;
  #L157f54.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157f5a.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L157f60.  v0:= temp @kind object;
  #L157f62.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L157f68.  v1:= length @variable v0;
  #L157f6a.  v2:= 1I;
  #L157f6c.  v3:= 0I;
  #L157f6e.  if v1 != v2 then goto L157f80;
  #L157f72.  v1:= v0[v3] @kind object;
  #L157f76.  v1:= instanceof @variable v1 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L157f7a.  if v1 == 0 then goto L157f80;
  #L157f7e.  goto L157f82;
  #L157f80.  v2:= 0I;
  #L157f82.  if v2 == 0 then goto L157fa8;
  #L157f86.  v0:= v0[v3] @kind object;
  #L157f8a.  v1:= "null cannot be cast to non-null type javax.net.ssl.X509TrustManager" @kind object;
  #L157f8e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L157f94.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L157f98.  v1:= `@@okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier` @kind object;
  #L157f9c.  v1:= (`org.conscrypt.ConscryptHostnameVerifier`) v1 @kind object;
  #L157fa0.  call `setHostnameVerifier`(v0, v1) @signature `Lorg/conscrypt/Conscrypt;.setHostnameVerifier:(Ljavax/net/ssl/TrustManager;Lorg/conscrypt/ConscryptHostnameVerifier;)V` @kind static;
  #L157fa6.  return v0 @kind object;
  #L157fa8.  v1:= new `java.lang.StringBuilder`;
  #L157fac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L157fb2.  v2:= "Unexpected default trust managers: " @kind object;
  #L157fb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157fbc.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L157fc2.  v0:= temp @kind object;
  #L157fc4.  v2:= "java.util.Arrays.toString(this)" @kind object;
  #L157fc8.  call `checkNotNullExpressionValue`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L157fce.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157fd4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L157fda.  v0:= temp @kind object;
  #L157fdc.  v1:= new `java.lang.IllegalStateException`;
  #L157fe0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L157fe6.  v0:= temp @kind object;
  #L157fe8.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157fee.  throw v1;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.ConscryptPlatform` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/internal/platform/ConscryptPlatform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158000.  v0:= "sslSocketFactory" @kind object;
  #L158004.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15800a.  v2:= 0I;
  #L15800c.  return v2 @kind object;
}
