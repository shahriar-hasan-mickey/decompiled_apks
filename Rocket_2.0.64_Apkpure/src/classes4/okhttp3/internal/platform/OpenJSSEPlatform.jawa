record `okhttp3.internal.platform.OpenJSSEPlatform` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.platform.Platform` @kind class {
  `java.security.Provider` `okhttp3.internal.platform.OpenJSSEPlatform.c` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.platform.OpenJSSEPlatform$Companion` `@@okhttp3.internal.platform.OpenJSSEPlatform.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `boolean` `@@okhttp3.internal.platform.OpenJSSEPlatform.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L158ba0.  v0:= new `okhttp3.internal.platform.OpenJSSEPlatform$Companion`;
  #L158ba4.  v1:= 0I;
  #L158ba6.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L158bac.  `@@okhttp3.internal.platform.OpenJSSEPlatform.Companion` @type ^`okhttp3.internal.platform.OpenJSSEPlatform$Companion` := v0 @kind object;
  #L158bb0.  v1:= 0I;
  #L158bb2.  v2:= "org.openjsse.net.ssl.OpenJSSE" @kind object;
  #L158bb6.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L158bbc.  v0:= temp @kind object;
  #L158bbe.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L158bc4.  v0:= temp @kind object;
  #L158bc6.  call temp:= `forName`(v2, v1, v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L158bcc.  v1:= 1I;
  #L158bce.  `@@okhttp3.internal.platform.OpenJSSEPlatform.d` @type ^`boolean` := v1 @kind boolean;
  #L158bd2.  return @kind void;
  catch `java.lang.ClassNotFoundException` @[L158bb2..L158bcc] goto L158bce;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OpenJSSEPlatform` v1 @kind this) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L158bf4.  call `<init>`(v1) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L158bfa.  v0:= new `org.openjsse.net.ssl.OpenJSSE`;
  #L158bfe.  call `<init>`(v0) @signature `Lorg/openjsse/net/ssl/OpenJSSE;.<init>:()V` @kind direct;
  #L158c04.  v0:= (`java.security.Provider`) v0 @kind object;
  #L158c08.  v1.`okhttp3.internal.platform.OpenJSSEPlatform.c` @type ^`java.security.Provider` := v0 @kind object;
  #L158c0c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OpenJSSEPlatform` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L158c20.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.<init>:()V` @kind direct;
  #L158c26.  return @kind void;
}
procedure `boolean` `access$isSupported$cp`() @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.access$isSupported$cp:()Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L158a10.  v0:= `@@okhttp3.internal.platform.OpenJSSEPlatform.d` @type ^`boolean` @kind boolean;
  #L158a14.  return v0;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.OpenJSSEPlatform` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object, `java.lang.String` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158c38.  v0:= "sslSocket" @kind object;
  #L158c3c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158c42.  v0:= "protocols" @kind object;
  #L158c46.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158c4c.  v0:= instanceof @variable v3 @type ^`org.openjsse.javax.net.ssl.SSLSocket` @kind boolean;
  #L158c50.  if v0 == 0 then goto L158ca4;
  #L158c54.  v3:= (`org.openjsse.javax.net.ssl.SSLSocket`) v3 @kind object;
  #L158c58.  call temp:= `getSSLParameters`(v3) @signature `Lorg/openjsse/javax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L158c5e.  v4:= temp @kind object;
  #L158c60.  v0:= instanceof @variable v4 @type ^`org.openjsse.javax.net.ssl.SSLParameters` @kind boolean;
  #L158c64.  if v0 == 0 then goto L158caa;
  #L158c68.  v0:= `@@okhttp3.internal.platform.Platform.Companion` @type ^`okhttp3.internal.platform.Platform$Companion` @kind object;
  #L158c6c.  call temp:= `alpnProtocolNames`(v0, v5) @signature `Lokhttp3/internal/platform/Platform$Companion;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L158c72.  v5:= temp @kind object;
  #L158c74.  v0:= v4 @kind object;
  #L158c76.  v0:= (`org.openjsse.javax.net.ssl.SSLParameters`) v0 @kind object;
  #L158c7a.  v1:= 0I;
  #L158c7c.  v1:= new `java.lang.String`[v1];
  #L158c80.  call temp:= `toArray`(v5, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L158c86.  v5:= temp @kind object;
  #L158c88.  v1:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L158c8c.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L158c92.  v5:= (`java.lang.String`[]) v5 @kind object;
  #L158c96.  call `setApplicationProtocols`(v0, v5) @signature `Lorg/openjsse/javax/net/ssl/SSLParameters;.setApplicationProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L158c9c.  call `setSSLParameters`(v3, v4) @signature `Lorg/openjsse/javax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L158ca2.  goto L158caa;
  #L158ca4.  call `configureTlsExtensions`(v2, v3, v4, v5) @signature `Lokhttp3/internal/platform/Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L158caa.  return @kind void;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.OpenJSSEPlatform` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158a28.  v0:= "sslSocket" @kind object;
  #L158a2c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158a32.  v0:= instanceof @variable v2 @type ^`org.openjsse.javax.net.ssl.SSLSocket` @kind boolean;
  #L158a36.  if v0 == 0 then goto L158a6e;
  #L158a3a.  v2:= (`org.openjsse.javax.net.ssl.SSLSocket`) v2 @kind object;
  #L158a3e.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/openjsse/javax/net/ssl/SSLSocket;.getApplicationProtocol:()Ljava/lang/String;` @kind virtual;
  #L158a44.  v2:= temp @kind object;
  #L158a46.  if v2 != 0 then goto L158a4c;
  #L158a4a.  goto L158a6a;
  #L158a4c.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L158a52.  v0:= temp;
  #L158a54.  if v0 == 0 then goto L158a5a;
  #L158a58.  goto L158a76;
  #L158a5a.  v0:= "" @kind object;
  #L158a5e.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L158a64.  v0:= temp;
  #L158a66.  if v0 == 0 then goto L158a76;
  #L158a6a.  v2:= 0I;
  #L158a6c.  goto L158a76;
  #L158a6e.  call temp:= `getSelectedProtocol`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L158a74.  v2:= temp @kind object;
  #L158a76.  return v2 @kind object;
}
procedure `javax.net.ssl.SSLContext` `newSSLContext`(`okhttp3.internal.platform.OpenJSSEPlatform` v2 @kind this) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.newSSLContext:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158a88.  v0:= v2.`okhttp3.internal.platform.OpenJSSEPlatform.c` @type ^`java.security.Provider` @kind object;
  #L158a8c.  v1:= "TLSv1.3" @kind object;
  #L158a90.  call temp:= `getInstance`(v1, v0) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L158a96.  v0:= temp @kind object;
  #L158a98.  v1:= "SSLContext.getInstance(\"TLSv1.3\", provider)" @kind object;
  #L158a9c.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158aa2.  return v0 @kind object;
}
procedure `javax.net.ssl.X509TrustManager` `platformTrustManager`(`okhttp3.internal.platform.OpenJSSEPlatform` v4 @kind this) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L158ab4.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L158aba.  v0:= temp @kind object;
  #L158abc.  v1:= v4.`okhttp3.internal.platform.OpenJSSEPlatform.c` @type ^`java.security.Provider` @kind object;
  #L158ac0.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L158ac6.  v0:= temp @kind object;
  #L158ac8.  v1:= 0I;
  #L158aca.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L158ad0.  v1:= "factory" @kind object;
  #L158ad4.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158ada.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L158ae0.  v0:= temp @kind object;
  #L158ae2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L158ae8.  v1:= length @variable v0;
  #L158aea.  v2:= 1I;
  #L158aec.  v3:= 0I;
  #L158aee.  if v1 != v2 then goto L158b00;
  #L158af2.  v1:= v0[v3] @kind object;
  #L158af6.  v1:= instanceof @variable v1 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L158afa.  if v1 == 0 then goto L158b00;
  #L158afe.  goto L158b02;
  #L158b00.  v2:= 0I;
  #L158b02.  if v2 == 0 then goto L158b1a;
  #L158b06.  v0:= v0[v3] @kind object;
  #L158b0a.  v1:= "null cannot be cast to non-null type javax.net.ssl.X509TrustManager" @kind object;
  #L158b0e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L158b14.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L158b18.  return v0 @kind object;
  #L158b1a.  v1:= new `java.lang.StringBuilder`;
  #L158b1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158b24.  v2:= "Unexpected default trust managers: " @kind object;
  #L158b28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b2e.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L158b34.  v0:= temp @kind object;
  #L158b36.  v2:= "java.util.Arrays.toString(this)" @kind object;
  #L158b3a.  call `checkNotNullExpressionValue`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158b40.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b46.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158b4c.  v0:= temp @kind object;
  #L158b4e.  v1:= new `java.lang.IllegalStateException`;
  #L158b52.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L158b58.  v0:= temp @kind object;
  #L158b5a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158b60.  throw v1;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.OpenJSSEPlatform` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/internal/platform/OpenJSSEPlatform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158b74.  v0:= "sslSocketFactory" @kind object;
  #L158b78.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L158b7e.  v2:= new `java.lang.UnsupportedOperationException`;
  #L158b82.  v0:= "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported with OpenJSSE" @kind object;
  #L158b86.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158b8c.  throw v2;
}
