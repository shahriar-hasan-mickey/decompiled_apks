record `okhttp3.internal.cache.DiskLruCache$Editor` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean`[] `okhttp3.internal.cache.DiskLruCache$Editor.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.cache.DiskLruCache$Editor.b` @AccessFlag PRIVATE;
  `okhttp3.internal.cache.DiskLruCache$Entry` `okhttp3.internal.cache.DiskLruCache$Editor.c` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.cache.DiskLruCache` `okhttp3.internal.cache.DiskLruCache$Editor.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.cache.DiskLruCache$Editor` v1 @kind this, `okhttp3.internal.cache.DiskLruCache` v2 @kind object, `okhttp3.internal.cache.DiskLruCache$Entry` v3 @kind object) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.<init>:(Lokhttp3/internal/cache/DiskLruCache;Lokhttp3/internal/cache/DiskLruCache$Entry;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L140fc8.  v0:= "entry" @kind object;
  #L140fcc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140fd2.  v1.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` := v2 @kind object;
  #L140fd6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L140fdc.  v1.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` := v3 @kind object;
  #L140fe0.  call temp:= `getReadable$okhttp`(v3) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getReadable$okhttp:()Z` @kind virtual;
  #L140fe6.  v3:= temp;
  #L140fe8.  if v3 == 0 then goto L140ff0;
  #L140fec.  v2:= 0I;
  #L140fee.  goto L140ffc;
  #L140ff0.  call temp:= `getValueCount$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getValueCount$okhttp:()I` @kind virtual;
  #L140ff6.  v2:= temp;
  #L140ff8.  v2:= new `boolean`[v2];
  #L140ffc.  v1.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`boolean`[] := v2 @kind object;
  #L141000.  return @kind void;
}
procedure `void` `abort`(`okhttp3.internal.cache.DiskLruCache$Editor` v4 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.abort:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L141014.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141018.  @monitorenter v0
  #L14101a.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` @kind boolean;
  #L14101e.  v2:= 1I;
  #L141020.  v1:= v1 ^~ v2 @kind int;
  #L141022.  if v1 == 0 then goto L141056;
  #L141026.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L14102a.  call temp:= `getCurrentEditor$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCurrentEditor$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Editor;` @kind virtual;
  #L141030.  v1:= temp @kind object;
  #L141032.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L141038.  v1:= temp;
  #L14103a.  if v1 == 0 then goto L14104a;
  #L14103e.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141042.  v3:= 0I;
  #L141044.  call `completeEdit$okhttp`(v1, v4, v3) @signature `Lokhttp3/internal/cache/DiskLruCache;.completeEdit$okhttp:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L14104a.  v4.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` := v2 @kind boolean;
  #L14104e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L141052.  @monitorexit v0
  #L141054.  return @kind void;
  #L141056.  v1:= "Check failed." @kind object;
  #L14105a.  v2:= new `java.lang.IllegalStateException`;
  #L14105e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141064.  v1:= temp @kind object;
  #L141066.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14106c.  throw v2;
  #L14106e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L141070.  @monitorexit v0
  #L141072.  throw v1;
  catch `java.lang.Throwable` @[L14101a..L141052] goto L14106e;
  catch `java.lang.Throwable` @[L141056..L14106e] goto L14106e;
}
procedure `void` `commit`(`okhttp3.internal.cache.DiskLruCache$Editor` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.commit:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L141098.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L14109c.  @monitorenter v0
  #L14109e.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` @kind boolean;
  #L1410a2.  v2:= 1I;
  #L1410a4.  v1:= v1 ^~ v2 @kind int;
  #L1410a6.  if v1 == 0 then goto L1410d8;
  #L1410aa.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L1410ae.  call temp:= `getCurrentEditor$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCurrentEditor$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Editor;` @kind virtual;
  #L1410b4.  v1:= temp @kind object;
  #L1410b6.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1410bc.  v1:= temp;
  #L1410be.  if v1 == 0 then goto L1410cc;
  #L1410c2.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L1410c6.  call `completeEdit$okhttp`(v1, v3, v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.completeEdit$okhttp:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L1410cc.  v3.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` := v2 @kind boolean;
  #L1410d0.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1410d4.  @monitorexit v0
  #L1410d6.  return @kind void;
  #L1410d8.  v1:= "Check failed." @kind object;
  #L1410dc.  v2:= new `java.lang.IllegalStateException`;
  #L1410e0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1410e6.  v1:= temp @kind object;
  #L1410e8.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1410ee.  throw v2;
  #L1410f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1410f2.  @monitorexit v0
  #L1410f4.  throw v1;
  catch `java.lang.Throwable` @[L14109e..L1410d4] goto L1410f0;
  catch `java.lang.Throwable` @[L1410d8..L1410f0] goto L1410f0;
}
procedure `void` `detach$okhttp`(`okhttp3.internal.cache.DiskLruCache$Editor` v2 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.detach$okhttp:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L14111c.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L141120.  call temp:= `getCurrentEditor$okhttp`(v0) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCurrentEditor$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Editor;` @kind virtual;
  #L141126.  v0:= temp @kind object;
  #L141128.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L14112e.  v0:= temp;
  #L141130.  if v0 == 0 then goto L14115e;
  #L141134.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141138.  call temp:= `access$getCivilizedFileSystem$p`(v0) @signature `Lokhttp3/internal/cache/DiskLruCache;.access$getCivilizedFileSystem$p:(Lokhttp3/internal/cache/DiskLruCache;)Z` @kind static;
  #L14113e.  v0:= temp;
  #L141140.  if v0 == 0 then goto L141152;
  #L141144.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141148.  v1:= 0I;
  #L14114a.  call `completeEdit$okhttp`(v0, v2, v1) @signature `Lokhttp3/internal/cache/DiskLruCache;.completeEdit$okhttp:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L141150.  goto L14115e;
  #L141152.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L141156.  v1:= 1I;
  #L141158.  call `setZombie$okhttp`(v0, v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.setZombie$okhttp:(Z)V` @kind virtual;
  #L14115e.  return @kind void;
}
procedure `okhttp3.internal.cache.DiskLruCache$Entry` `getEntry$okhttp`(`okhttp3.internal.cache.DiskLruCache$Editor` v1 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.getEntry$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Entry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L140dd0.  v0:= v1.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140dd4.  return v0 @kind object;
}
procedure `boolean`[] `getWritten$okhttp`(`okhttp3.internal.cache.DiskLruCache$Editor` v1 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.getWritten$okhttp:()[Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L140db8.  v0:= v1.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`boolean`[] @kind object;
  #L140dbc.  return v0 @kind object;
}
procedure `okio.Sink` `newSink`(`okhttp3.internal.cache.DiskLruCache$Editor` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.newSink:(I)Lokio/Sink;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L140de8.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L140dec.  @monitorenter v0
  #L140dee.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` @kind boolean;
  #L140df2.  v2:= 1I;
  #L140df4.  v1:= v1 ^~ v2 @kind int;
  #L140df6.  if v1 == 0 then goto L140e8e;
  #L140dfa.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140dfe.  call temp:= `getCurrentEditor$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCurrentEditor$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Editor;` @kind virtual;
  #L140e04.  v1:= temp @kind object;
  #L140e06.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L140e0c.  v1:= temp;
  #L140e0e.  v1:= v1 ^~ v2 @kind int;
  #L140e10.  if v1 == 0 then goto L140e20;
  #L140e14.  call temp:= `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @kind static;
  #L140e1a.  v5:= temp @kind object;
  #L140e1c.  @monitorexit v0
  #L140e1e.  return v5 @kind object;
  #L140e20.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140e24.  call temp:= `getReadable$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getReadable$okhttp:()Z` @kind virtual;
  #L140e2a.  v1:= temp;
  #L140e2c.  if v1 != 0 then goto L140e3e;
  #L140e30.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`boolean`[] @kind object;
  #L140e34.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L140e3a.  v1[v5]:= v2 @kind boolean;
  #L140e3e.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140e42.  call temp:= `getDirtyFiles$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getDirtyFiles$okhttp:()Ljava/util/List;` @kind virtual;
  #L140e48.  v1:= temp @kind object;
  #L140e4a.  call temp:= `get`(v1, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L140e50.  v1:= temp @kind object;
  #L140e52.  v1:= (`java.io.File`) v1 @kind object;
  #L140e56.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L140e5a.  call temp:= `getFileSystem$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getFileSystem$okhttp:()Lokhttp3/internal/io/FileSystem;` @kind virtual;
  #L140e60.  v2:= temp @kind object;
  #L140e62.  call temp:= `sink`(v2, v1) @signature `Lokhttp3/internal/io/FileSystem;.sink:(Ljava/io/File;)Lokio/Sink;` @kind interface;
  #L140e68.  v1:= temp @kind object;
  #L140e6a.  v2:= new `okhttp3.internal.cache.FaultHidingSink`;
  #L140e6e.  v3:= new `okhttp3.internal.cache.DiskLruCache$Editor$a`;
  #L140e72.  call `<init>`(v3, v4, v5) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor$a;.<init>:(Lokhttp3/internal/cache/DiskLruCache$Editor;I)V` @kind direct;
  #L140e78.  call `<init>`(v2, v1, v3) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140e7e.  @monitorexit v0
  #L140e80.  return v2 @kind object;
  #L140e82.  call temp:= `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @kind static;
  #L140e88.  v5:= temp @kind object;
  #L140e8a.  @monitorexit v0
  #L140e8c.  return v5 @kind object;
  #L140e8e.  v5:= "Check failed." @kind object;
  #L140e92.  v1:= new `java.lang.IllegalStateException`;
  #L140e96.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L140e9c.  v5:= temp @kind object;
  #L140e9e.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140ea4.  throw v1;
  #L140ea6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L140ea8.  @monitorexit v0
  #L140eaa.  throw v5;
  catch `java.lang.Throwable` @[L140dee..L140e1c] goto L140ea6;
  catch `java.lang.Throwable` @[L140e20..L140e56] goto L140ea6;
  catch `java.io.FileNotFoundException` @[L140e56..L140e6a] goto L140e82;
  catch `java.lang.Throwable` @[L140e56..L140e6a] goto L140ea6;
  catch `java.lang.Throwable` @[L140e6a..L140e7e] goto L140ea6;
  catch `java.lang.Throwable` @[L140e82..L140e8a] goto L140ea6;
  catch `java.lang.Throwable` @[L140e8e..L140ea6] goto L140ea6;
}
procedure `okio.Source` `newSource`(`okhttp3.internal.cache.DiskLruCache$Editor` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.newSource:(I)Lokio/Source;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L140ef4.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L140ef8.  @monitorenter v0
  #L140efa.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean` @kind boolean;
  #L140efe.  v1:= v1 ^~ 1;
  #L140f02.  if v1 == 0 then goto L140f7a;
  #L140f06.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140f0a.  call temp:= `getReadable$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getReadable$okhttp:()Z` @kind virtual;
  #L140f10.  v1:= temp;
  #L140f12.  v2:= 0I;
  #L140f14.  if v1 == 0 then goto L140f76;
  #L140f18.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140f1c.  call temp:= `getCurrentEditor$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCurrentEditor$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Editor;` @kind virtual;
  #L140f22.  v1:= temp @kind object;
  #L140f24.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L140f2a.  v1:= temp;
  #L140f2c.  v1:= v1 ^~ 1;
  #L140f30.  if v1 != 0 then goto L140f76;
  #L140f34.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140f38.  call temp:= `getZombie$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getZombie$okhttp:()Z` @kind virtual;
  #L140f3e.  v1:= temp;
  #L140f40.  if v1 == 0 then goto L140f46;
  #L140f44.  goto L140f76;
  #L140f46.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L140f4a.  call temp:= `getFileSystem$okhttp`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache;.getFileSystem$okhttp:()Lokhttp3/internal/io/FileSystem;` @kind virtual;
  #L140f50.  v1:= temp @kind object;
  #L140f52.  v3:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L140f56.  call temp:= `getCleanFiles$okhttp`(v3) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.getCleanFiles$okhttp:()Ljava/util/List;` @kind virtual;
  #L140f5c.  v3:= temp @kind object;
  #L140f5e.  call temp:= `get`(v3, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L140f64.  v5:= temp @kind object;
  #L140f66.  v5:= (`java.io.File`) v5 @kind object;
  #L140f6a.  call temp:= `source`(v1, v5) @signature `Lokhttp3/internal/io/FileSystem;.source:(Ljava/io/File;)Lokio/Source;` @kind interface;
  #L140f70.  v2:= temp @kind object;
  #L140f72.  @monitorexit v0
  #L140f74.  return v2 @kind object;
  #L140f76.  @monitorexit v0
  #L140f78.  return v2 @kind object;
  #L140f7a.  v5:= "Check failed." @kind object;
  #L140f7e.  v1:= new `java.lang.IllegalStateException`;
  #L140f82.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L140f88.  v5:= temp @kind object;
  #L140f8a.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140f90.  throw v1;
  #L140f92.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L140f94.  @monitorexit v0
  #L140f96.  throw v5;
  catch `java.lang.Throwable` @[L140efa..L140f40] goto L140f92;
  catch `java.io.FileNotFoundException` @[L140f46..L140f72] goto L140f72;
  catch `java.lang.Throwable` @[L140f46..L140f72] goto L140f92;
  catch `java.lang.Throwable` @[L140f7a..L140f92] goto L140f92;
}
