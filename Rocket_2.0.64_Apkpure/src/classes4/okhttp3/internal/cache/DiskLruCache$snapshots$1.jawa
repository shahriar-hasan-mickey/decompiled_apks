record `okhttp3.internal.cache.DiskLruCache$snapshots$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMutableIterator` @kind interface {
  `java.util.Iterator` `okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.cache.DiskLruCache$Snapshot` `okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @AccessFlag PRIVATE;
  `okhttp3.internal.cache.DiskLruCache$Snapshot` `okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @AccessFlag PRIVATE;
  `okhttp3.internal.cache.DiskLruCache` `okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v1 @kind this, `okhttp3.internal.cache.DiskLruCache` v2 @kind object) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.<init>:(Lokhttp3/internal/cache/DiskLruCache;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L141b1c.  v1.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` := v2 @kind object;
  #L141b20.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141b26.  v0:= new `java.util.ArrayList`;
  #L141b2a.  call temp:= `getLruEntries$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getLruEntries$okhttp:()Ljava/util/LinkedHashMap;` @kind virtual;
  #L141b30.  v2:= temp @kind object;
  #L141b32.  call temp:= `values`(v2) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L141b38.  v2:= temp @kind object;
  #L141b3a.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L141b40.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L141b46.  v2:= temp @kind object;
  #L141b48.  v0:= "ArrayList(lruEntries.values).iterator()" @kind object;
  #L141b4c.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141b52.  v1.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` := v2 @kind object;
  #L141b56.  return @kind void;
}
procedure `boolean` `hasNext`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v4 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L141a24.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L141a28.  v1:= 1I;
  #L141a2a.  if v0 == 0 then goto L141a30;
  #L141a2e.  return v1;
  #L141a30.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141a34.  @monitorenter v0
  #L141a36.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141a3a.  call temp:= `getClosed$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.getClosed$okhttp:()Z` @kind virtual;
  #L141a40.  v2:= temp;
  #L141a42.  v3:= 0I;
  #L141a44.  if v2 == 0 then goto L141a4c;
  #L141a48.  @monitorexit v0
  #L141a4a.  return v3;
  #L141a4c.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` @kind object;
  #L141a50.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L141a56.  v2:= temp;
  #L141a58.  if v2 == 0 then goto L141a84;
  #L141a5c.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.a` @type ^`java.util.Iterator` @kind object;
  #L141a60.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L141a66.  v2:= temp @kind object;
  #L141a68.  v2:= (`okhttp3.internal.cache.DiskLruCache$Entry`) v2 @kind object;
  #L141a6c.  if v2 == 0 then goto L141a4c;
  #L141a70.  call temp:= `snapshot$okhttp`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$Entry;.snapshot$okhttp:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @kind virtual;
  #L141a76.  v2:= temp @kind object;
  #L141a78.  if v2 == 0 then goto L141a4c;
  #L141a7c.  v4.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v2 @kind object;
  #L141a80.  @monitorexit v0
  #L141a82.  return v1;
  #L141a84.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L141a88.  @monitorexit v0
  #L141a8a.  return v3;
  #L141a8c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L141a8e.  @monitorexit v0
  #L141a90.  throw v1;
  catch `java.lang.Throwable` @[L141a36..L141a42] goto L141a8c;
  catch `java.lang.Throwable` @[L141a4c..L141a80] goto L141a8c;
  catch `java.lang.Throwable` @[L141a84..L141a88] goto L141a8c;
}
procedure `java.lang.Object` `next`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v1 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L141ac0.  call temp:= `next`(v1) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @kind virtual;
  #L141ac6.  v0:= temp @kind object;
  #L141ac8.  return v0 @kind object;
}
procedure `okhttp3.internal.cache.DiskLruCache$Snapshot` `next`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v2 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.next:()Lokhttp3/internal/cache/DiskLruCache$Snapshot;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141adc.  call temp:= `hasNext`(v2) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.hasNext:()Z` @kind virtual;
  #L141ae2.  v0:= temp;
  #L141ae4.  if v0 == 0 then goto L141afe;
  #L141ae8.  v0:= v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L141aec.  v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v0 @kind object;
  #L141af0.  v1:= 0I;
  #L141af2.  v2.`okhttp3.internal.cache.DiskLruCache$snapshots$1.b` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L141af6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L141afc.  return v0 @kind object;
  #L141afe.  v0:= new `java.util.NoSuchElementException`;
  #L141b02.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L141b08.  throw v0;
}
procedure `void` `remove`(`okhttp3.internal.cache.DiskLruCache$snapshots$1` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$snapshots$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L141b68.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` @kind object;
  #L141b6c.  if v0 == 0 then goto L141b94;
  #L141b70.  v1:= 0I;
  #L141b72.  v2:= v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.d` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L141b76.  call temp:= `key`(v0) @signature `Lokhttp3/internal/cache/DiskLruCache$Snapshot;.key:()Ljava/lang/String;` @kind virtual;
  #L141b7c.  v0:= temp @kind object;
  #L141b7e.  call temp:= `remove`(v2, v0) @signature `Lokhttp3/internal/cache/DiskLruCache;.remove:(Ljava/lang/String;)Z` @kind virtual;
  #L141b84.  goto L141b8e;
  #L141b86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L141b88.  v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L141b8c.  throw v0;
  #L141b8e.  v3.`okhttp3.internal.cache.DiskLruCache$snapshots$1.c` @type ^`okhttp3.internal.cache.DiskLruCache$Snapshot` := v1 @kind object;
  #L141b92.  return @kind void;
  #L141b94.  v0:= new `java.lang.IllegalStateException`;
  #L141b98.  v1:= "remove() before next()" @kind object;
  #L141b9c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141ba2.  v1:= temp @kind object;
  #L141ba4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141baa.  throw v0;
  catch `java.io.IOException` @[L141b72..L141b84] goto L141b8e;
  catch `java.lang.Throwable` @[L141b72..L141b84] goto L141b86;
}
