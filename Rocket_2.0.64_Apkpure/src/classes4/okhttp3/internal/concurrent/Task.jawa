record `okhttp3.internal.concurrent.Task` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `okhttp3.internal.concurrent.TaskQueue` `okhttp3.internal.concurrent.Task.a` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.concurrent.Task.b` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.internal.concurrent.Task.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.concurrent.Task.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.Task` v1 @kind this, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L145978.  v0:= "name" @kind object;
  #L14597c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145982.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L145988.  v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` := v2 @kind object;
  #L14598c.  v1.`okhttp3.internal.concurrent.Task.d` @type ^`boolean` := v3 @kind boolean;
  #L145990.  v2:= -1L;
  #L145994.  v1.`okhttp3.internal.concurrent.Task.b` @type ^`long` := v2 @kind wide;
  #L145998.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.Task` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1459ac.  v3:= v3 ^& 2;
  #L1459b0.  if v3 == 0 then goto L1459b6;
  #L1459b4.  v2:= 1I;
  #L1459b6.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L1459bc.  return @kind void;
}
procedure `boolean` `getCancelable`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L145900.  v0:= v1.`okhttp3.internal.concurrent.Task.d` @type ^`boolean` @kind boolean;
  #L145904.  return v0;
}
procedure `java.lang.String` `getName`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L145918.  v0:= v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` @kind object;
  #L14591c.  return v0 @kind object;
}
procedure `long` `getNextExecuteNanoTime$okhttp`(`okhttp3.internal.concurrent.Task` v2 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L145948.  v0:= v2.`okhttp3.internal.concurrent.Task.b` @type ^`long` @kind wide;
  #L14594c.  return v0 @kind wide;
}
procedure `okhttp3.internal.concurrent.TaskQueue` `getQueue$okhttp`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L145960.  v0:= v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L145964.  return v0 @kind object;
}
procedure `void` `initQueue$okhttp`(`okhttp3.internal.concurrent.Task` v1 @kind this, `okhttp3.internal.concurrent.TaskQueue` v2 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.initQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1459d0.  v0:= "queue" @kind object;
  #L1459d4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1459da.  v0:= v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` @kind object;
  #L1459de.  if v0 != v2 then goto L1459e4;
  #L1459e2.  return @kind void;
  #L1459e4.  if v0 != 0 then goto L1459ec;
  #L1459e8.  v0:= 1I;
  #L1459ea.  goto L1459ee;
  #L1459ec.  v0:= 0I;
  #L1459ee.  if v0 == 0 then goto L1459f8;
  #L1459f2.  v1.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` := v2 @kind object;
  #L1459f6.  return @kind void;
  #L1459f8.  v2:= new `java.lang.IllegalStateException`;
  #L1459fc.  v0:= "task is in multiple queues" @kind object;
  #L145a00.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L145a06.  v0:= temp @kind object;
  #L145a08.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145a0e.  throw v2;
}
procedure `long` `runOnce`() @signature `Lokhttp3/internal/concurrent/Task;.runOnce:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setNextExecuteNanoTime$okhttp`(`okhttp3.internal.concurrent.Task` v0 @kind this, `long` v1 ) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L145a20.  v0.`okhttp3.internal.concurrent.Task.b` @type ^`long` := v1 @kind wide;
  #L145a24.  return @kind void;
}
procedure `void` `setQueue$okhttp`(`okhttp3.internal.concurrent.Task` v0 @kind this, `okhttp3.internal.concurrent.TaskQueue` v1 @kind object) @signature `Lokhttp3/internal/concurrent/Task;.setQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L145a38.  v0.`okhttp3.internal.concurrent.Task.a` @type ^`okhttp3.internal.concurrent.TaskQueue` := v1 @kind object;
  #L145a3c.  return @kind void;
}
procedure `java.lang.String` `toString`(`okhttp3.internal.concurrent.Task` v1 @kind this) @signature `Lokhttp3/internal/concurrent/Task;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145930.  v0:= v1.`okhttp3.internal.concurrent.Task.c` @type ^`java.lang.String` @kind object;
  #L145934.  return v0 @kind object;
}
