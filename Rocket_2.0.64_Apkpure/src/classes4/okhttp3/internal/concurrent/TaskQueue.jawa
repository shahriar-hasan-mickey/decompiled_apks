record `okhttp3.internal.concurrent.TaskQueue` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.internal.concurrent.TaskQueue.a` @AccessFlag PRIVATE;
  `okhttp3.internal.concurrent.Task` `okhttp3.internal.concurrent.TaskQueue.b` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.concurrent.TaskQueue.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.concurrent.TaskQueue.d` @AccessFlag PRIVATE;
  `okhttp3.internal.concurrent.TaskRunner` `okhttp3.internal.concurrent.TaskQueue.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.internal.concurrent.TaskQueue.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this, `okhttp3.internal.concurrent.TaskRunner` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1449f8.  v0:= "taskRunner" @kind object;
  #L1449fc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144a02.  v0:= "name" @kind object;
  #L144a06.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144a0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L144a12.  v1.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` := v2 @kind object;
  #L144a16.  v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` := v3 @kind object;
  #L144a1a.  v2:= new `java.util.ArrayList`;
  #L144a1e.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L144a24.  v1.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` := v2 @kind object;
  #L144a28.  return @kind void;
}
procedure `void` `execute$default`(`okhttp3.internal.concurrent.TaskQueue` v6 @kind object, `java.lang.String` v7 @kind object, `long` v8 , `boolean` v10 , `kotlin.jvm.functions.Function0` v11 @kind object, `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.execute$default:(Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;JZLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L144af0.  v13:= v12 ^& 2;
  #L144af4.  if v13 == 0 then goto L144afc;
  #L144af8.  v8:= 0L;
  #L144afc.  v12:= v12 ^& 4;
  #L144b00.  if v12 == 0 then goto L144b0a;
  #L144b04.  v10:= 1I;
  #L144b06.  v5:= 1I;
  #L144b08.  goto L144b0c;
  #L144b0a.  v5:= v10;
  #L144b0c.  v10:= "name" @kind object;
  #L144b10.  call `checkNotNullParameter`(v7, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144b16.  v10:= "block" @kind object;
  #L144b1a.  call `checkNotNullParameter`(v11, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144b20.  v10:= new `okhttp3.internal.concurrent.TaskQueue$execute$1`;
  #L144b24.  v0:= v10 @kind object;
  #L144b26.  v1:= v11 @kind object;
  #L144b28.  v2:= v7 @kind object;
  #L144b2a.  v3:= v5;
  #L144b2c.  v4:= v7 @kind object;
  #L144b2e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/concurrent/TaskQueue$execute$1;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V` @kind direct;
  #L144b34.  call `schedule`(v6, v10, v8) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L144b3a.  return @kind void;
}
procedure `void` `schedule$default`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind object, `java.lang.String` v1 @kind object, `long` v2 , `kotlin.jvm.functions.Function0` v4 @kind object, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;JLkotlin/jvm/functions/Function0;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L144b90.  v5:= v5 ^& 2;
  #L144b94.  if v5 == 0 then goto L144b9c;
  #L144b98.  v2:= 0L;
  #L144b9c.  v5:= "name" @kind object;
  #L144ba0.  call `checkNotNullParameter`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144ba6.  v5:= "block" @kind object;
  #L144baa.  call `checkNotNullParameter`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144bb0.  v5:= new `okhttp3.internal.concurrent.TaskQueue$schedule$2`;
  #L144bb4.  call `<init>`(v5, v4, v1, v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L144bba.  call `schedule`(v0, v5, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L144bc0.  return @kind void;
}
procedure `void` `schedule$default`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind object, `okhttp3.internal.concurrent.Task` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule$default:(Lokhttp3/internal/concurrent/TaskQueue;Lokhttp3/internal/concurrent/Task;JILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L144bd4.  v4:= v4 ^& 2;
  #L144bd8.  if v4 == 0 then goto L144be0;
  #L144bdc.  v2:= 0L;
  #L144be0.  call `schedule`(v0, v1, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L144be6.  return @kind void;
}
procedure `void` `cancelAll`(`okhttp3.internal.concurrent.TaskQueue` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144a3c.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L144a40.  if v0 == 0 then goto L144aaa;
  #L144a44.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L144a4a.  v0:= temp;
  #L144a4c.  if v0 != 0 then goto L144a52;
  #L144a50.  goto L144aaa;
  #L144a52.  v0:= new `java.lang.AssertionError`;
  #L144a56.  v1:= new `java.lang.StringBuilder`;
  #L144a5a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144a60.  v2:= "Thread " @kind object;
  #L144a64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144a6a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L144a70.  v2:= temp @kind object;
  #L144a72.  v3:= "Thread.currentThread()" @kind object;
  #L144a76.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144a7c.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L144a82.  v2:= temp @kind object;
  #L144a84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144a8a.  v2:= " MUST NOT hold lock on " @kind object;
  #L144a8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144a94.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144a9a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144aa0.  v1:= temp @kind object;
  #L144aa2.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L144aa8.  throw v0;
  #L144aaa.  v0:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144aae.  @monitorenter v0
  #L144ab0.  call temp:= `cancelAllAndDecide$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L144ab6.  v1:= temp;
  #L144ab8.  if v1 == 0 then goto L144ac6;
  #L144abc.  v1:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144ac0.  call `kickCoordinator$okhttp`(v1, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L144ac6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L144aca.  @monitorexit v0
  #L144acc.  return @kind void;
  #L144ace.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L144ad0.  @monitorexit v0
  #L144ad2.  throw v1;
  catch `java.lang.Throwable` @[L144ab0..L144aca] goto L144ace;
}
procedure `boolean` `cancelAllAndDecide$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v5 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1445f8.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1445fc.  v1:= 1I;
  #L1445fe.  if v0 == 0 then goto L144618;
  #L144602.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L144608.  call temp:= `getCancelable`(v0) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L14460e.  v0:= temp;
  #L144610.  if v0 == 0 then goto L144618;
  #L144614.  v5.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` := v1 @kind boolean;
  #L144618.  v0:= 0I;
  #L14461a.  v2:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14461e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L144624.  v2:= temp;
  #L144626.  v2:= v2 - v1 @kind int;
  #L144628.  if v2 < 0 then goto L144690;
  #L14462c.  v3:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L144630.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L144636.  v3:= temp @kind object;
  #L144638.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L14463c.  call temp:= `getCancelable`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L144642.  v3:= temp;
  #L144644.  if v3 == 0 then goto L14468a;
  #L144648.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14464c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L144652.  v0:= temp @kind object;
  #L144654.  v0:= (`okhttp3.internal.concurrent.Task`) v0 @kind object;
  #L144658.  v3:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L14465c.  call temp:= `getLogger`(v3) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L144662.  v3:= temp @kind object;
  #L144664.  v4:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L144668.  call temp:= `isLoggable`(v3, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L14466e.  v3:= temp;
  #L144670.  if v3 == 0 then goto L14467e;
  #L144674.  v3:= "canceled" @kind object;
  #L144678.  call `access$log`(v0, v5, v3) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L14467e.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L144682.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L144688.  v0:= 1I;
  #L14468a.  v2:= v2 + -1;
  #L14468e.  goto L144628;
  #L144690.  return v0;
}
procedure `void` `execute`(`okhttp3.internal.concurrent.TaskQueue` v7 @kind this, `java.lang.String` v8 @kind object, `long` v9 , `boolean` v11 , `kotlin.jvm.functions.Function0` v12 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.execute:(Ljava/lang/String;JZLkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L144b4c.  v0:= "name" @kind object;
  #L144b50.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144b56.  v0:= "block" @kind object;
  #L144b5a.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144b60.  v0:= new `okhttp3.internal.concurrent.TaskQueue$execute$1`;
  #L144b64.  v1:= v0 @kind object;
  #L144b66.  v2:= v12 @kind object;
  #L144b68.  v3:= v8 @kind object;
  #L144b6a.  v4:= v11;
  #L144b6c.  v5:= v8 @kind object;
  #L144b6e.  v6:= v11;
  #L144b70.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/concurrent/TaskQueue$execute$1;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V` @kind direct;
  #L144b76.  call `schedule`(v7, v0, v9) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L144b7c.  return @kind void;
}
procedure `okhttp3.internal.concurrent.Task` `getActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1449c8.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1449cc.  return v0 @kind object;
}
procedure `boolean` `getCancelActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getCancelActiveTask$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1446a4.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` @kind boolean;
  #L1446a8.  return v0;
}
procedure `java.util.List` `getFutureTasks$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L144888.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14488c.  return v0 @kind object;
}
procedure `java.lang.String` `getName$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getName$okhttp:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L144858.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` @kind object;
  #L14485c.  return v0 @kind object;
}
procedure `java.util.List` `getScheduledTasks`(`okhttp3.internal.concurrent.TaskQueue` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getScheduledTasks:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1448a0.  v0:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1448a4.  @monitorenter v0
  #L1448a6.  v1:= v2.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1448aa.  call temp:= `toList`(v1) @signature `Lkotlin/collections/CollectionsKt;.toList:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L1448b0.  v1:= temp @kind object;
  #L1448b2.  @monitorexit v0
  #L1448b4.  return v1 @kind object;
  #L1448b6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1448b8.  @monitorexit v0
  #L1448ba.  throw v1;
  catch `java.lang.Throwable` @[L1448a6..L1448b2] goto L1448b6;
}
procedure `boolean` `getShutdown$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getShutdown$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1446bc.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` @kind boolean;
  #L1446c0.  return v0;
}
procedure `okhttp3.internal.concurrent.TaskRunner` `getTaskRunner$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getTaskRunner$okhttp:()Lokhttp3/internal/concurrent/TaskRunner;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1449e0.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1449e4.  return v0 @kind object;
}
procedure `java.util.concurrent.CountDownLatch` `idleLatch`(`okhttp3.internal.concurrent.TaskQueue` v5 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.idleLatch:()Ljava/util/concurrent/CountDownLatch;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1448d8.  v0:= v5.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1448dc.  @monitorenter v0
  #L1448de.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L1448e2.  v2:= 0I;
  #L1448e4.  if v1 != 0 then goto L144906;
  #L1448e8.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1448ec.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1448f2.  v1:= temp;
  #L1448f4.  if v1 == 0 then goto L144906;
  #L1448f8.  v1:= new `java.util.concurrent.CountDownLatch`;
  #L1448fc.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L144902.  @monitorexit v0
  #L144904.  return v1 @kind object;
  #L144906.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` @kind object;
  #L14490a.  v3:= instanceof @variable v1 @type ^`okhttp3.internal.concurrent.TaskQueue$a` @kind boolean;
  #L14490e.  if v3 == 0 then goto L144922;
  #L144912.  v1:= (`okhttp3.internal.concurrent.TaskQueue$a`) v1 @kind object;
  #L144916.  call temp:= `a`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L14491c.  v1:= temp @kind object;
  #L14491e.  @monitorexit v0
  #L144920.  return v1 @kind object;
  #L144922.  v1:= v5.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L144926.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14492c.  v1:= temp @kind object;
  #L14492e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L144934.  v3:= temp;
  #L144936.  if v3 == 0 then goto L14495e;
  #L14493a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L144940.  v3:= temp @kind object;
  #L144942.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L144946.  v4:= instanceof @variable v3 @type ^`okhttp3.internal.concurrent.TaskQueue$a` @kind boolean;
  #L14494a.  if v4 == 0 then goto L14492e;
  #L14494e.  v3:= (`okhttp3.internal.concurrent.TaskQueue$a`) v3 @kind object;
  #L144952.  call temp:= `a`(v3) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L144958.  v1:= temp @kind object;
  #L14495a.  @monitorexit v0
  #L14495c.  return v1 @kind object;
  #L14495e.  v1:= new `okhttp3.internal.concurrent.TaskQueue$a`;
  #L144962.  call `<init>`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.<init>:()V` @kind direct;
  #L144968.  v3:= 0L;
  #L14496c.  call temp:= `scheduleAndDecide$okhttp`(v5, v1, v3, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L144972.  v2:= temp;
  #L144974.  if v2 == 0 then goto L144982;
  #L144978.  v2:= v5.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L14497c.  call `kickCoordinator$okhttp`(v2, v5) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L144982.  call temp:= `a`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue$a;.a:()Ljava/util/concurrent/CountDownLatch;` @kind virtual;
  #L144988.  v1:= temp @kind object;
  #L14498a.  @monitorexit v0
  #L14498c.  return v1 @kind object;
  #L14498e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L144990.  @monitorexit v0
  #L144992.  throw v1;
  catch `java.lang.Throwable` @[L1448de..L144902] goto L14498e;
  catch `java.lang.Throwable` @[L144906..L14491e] goto L14498e;
  catch `java.lang.Throwable` @[L144922..L14495a] goto L14498e;
  catch `java.lang.Throwable` @[L14495e..L14498a] goto L14498e;
}
procedure `void` `schedule`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this, `java.lang.String` v2 @kind object, `long` v3 , `kotlin.jvm.functions.Function0` v5 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Ljava/lang/String;JLkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L144bf8.  v0:= "name" @kind object;
  #L144bfc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144c02.  v0:= "block" @kind object;
  #L144c06.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144c0c.  v0:= new `okhttp3.internal.concurrent.TaskQueue$schedule$2`;
  #L144c10.  call `<init>`(v0, v5, v2, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L144c16.  call `schedule`(v1, v0, v3) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @kind virtual;
  #L144c1c.  return @kind void;
}
procedure `void` `schedule`(`okhttp3.internal.concurrent.TaskQueue` v2 @kind this, `okhttp3.internal.concurrent.Task` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.schedule:(Lokhttp3/internal/concurrent/Task;J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L144c30.  v0:= "task" @kind object;
  #L144c34.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144c3a.  v0:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144c3e.  @monitorenter v0
  #L144c40.  v1:= v2.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` @kind boolean;
  #L144c44.  if v1 == 0 then goto L144cb0;
  #L144c48.  call temp:= `getCancelable`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getCancelable:()Z` @kind virtual;
  #L144c4e.  v4:= temp;
  #L144c50.  if v4 == 0 then goto L144c7e;
  #L144c54.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L144c58.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L144c5e.  v4:= temp @kind object;
  #L144c60.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L144c64.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L144c6a.  v4:= temp;
  #L144c6c.  if v4 == 0 then goto L144c7a;
  #L144c70.  v4:= "schedule canceled (queue is shutdown)" @kind object;
  #L144c74.  call `access$log`(v3, v2, v4) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L144c7a.  @monitorexit v0
  #L144c7c.  return @kind void;
  #L144c7e.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L144c82.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L144c88.  v4:= temp @kind object;
  #L144c8a.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L144c8e.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L144c94.  v4:= temp;
  #L144c96.  if v4 == 0 then goto L144ca4;
  #L144c9a.  v4:= "schedule failed (queue is shutdown)" @kind object;
  #L144c9e.  call `access$log`(v3, v2, v4) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L144ca4.  v3:= new `java.util.concurrent.RejectedExecutionException`;
  #L144ca8.  call `<init>`(v3) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:()V` @kind direct;
  #L144cae.  throw v3;
  #L144cb0.  v1:= 0I;
  #L144cb2.  call temp:= `scheduleAndDecide$okhttp`(v2, v3, v4, v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L144cb8.  v3:= temp;
  #L144cba.  if v3 == 0 then goto L144cc8;
  #L144cbe.  v3:= v2.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144cc2.  call `kickCoordinator$okhttp`(v3, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L144cc8.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L144ccc.  @monitorexit v0
  #L144cce.  return @kind void;
  #L144cd0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L144cd2.  @monitorexit v0
  #L144cd4.  throw v3;
  catch `java.lang.Throwable` @[L144c40..L144c7a] goto L144cd0;
  catch `java.lang.Throwable` @[L144c7e..L144ccc] goto L144cd0;
}
procedure `boolean` `scheduleAndDecide$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v10 @kind this, `okhttp3.internal.concurrent.Task` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1446d4.  v0:= "task" @kind object;
  #L1446d8.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1446de.  call `initQueue$okhttp`(v11, v10) @signature `Lokhttp3/internal/concurrent/Task;.initQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L1446e4.  v0:= v10.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1446e8.  call temp:= `getBackend`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner;.getBackend:()Lokhttp3/internal/concurrent/TaskRunner$Backend;` @kind virtual;
  #L1446ee.  v0:= temp @kind object;
  #L1446f0.  call temp:= `nanoTime`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.nanoTime:()J` @kind interface;
  #L1446f6.  v0:= temp @kind wide;
  #L1446f8.  v2:= v0 + v12 @kind long;
  #L1446fc.  v4:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L144700.  call temp:= `indexOf`(v4, v11) @signature `Ljava/util/List;.indexOf:(Ljava/lang/Object;)I` @kind interface;
  #L144706.  v4:= temp;
  #L144708.  v5:= -1I;
  #L14470a.  v6:= 0I;
  #L14470c.  if v4 == v5 then goto L144752;
  #L144710.  call temp:= `getNextExecuteNanoTime$okhttp`(v11) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L144716.  v7:= temp @kind wide;
  #L144718.  v9:= lcmp(v7, v2);
  #L14471c.  if v9 > 0 then goto L144748;
  #L144720.  v12:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L144724.  call temp:= `getLogger`(v12) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L14472a.  v12:= temp @kind object;
  #L14472c.  v13:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L144730.  call temp:= `isLoggable`(v12, v13) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L144736.  v12:= temp;
  #L144738.  if v12 == 0 then goto L144746;
  #L14473c.  v12:= "already scheduled" @kind object;
  #L144740.  call `access$log`(v11, v10, v12) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L144746.  return v6;
  #L144748.  v7:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14474c.  call temp:= `remove`(v7, v4) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L144752.  call `setNextExecuteNanoTime$okhttp`(v11, v2) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @kind virtual;
  #L144758.  v4:= `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` @kind object;
  #L14475c.  call temp:= `getLogger`(v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.getLogger:()Ljava/util/logging/Logger;` @kind virtual;
  #L144762.  v4:= temp @kind object;
  #L144764.  v7:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L144768.  call temp:= `isLoggable`(v4, v7) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L14476e.  v4:= temp;
  #L144770.  if v4 == 0 then goto L1447d8;
  #L144774.  if v14 == 0 then goto L1447a6;
  #L144778.  v14:= new `java.lang.StringBuilder`;
  #L14477c.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144782.  v4:= "run again after " @kind object;
  #L144786.  call temp:= `append`(v14, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14478c.  v2:= v2 - v0 @kind long;
  #L14478e.  call temp:= `formatDuration`(v2) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.formatDuration:(J)Ljava/lang/String;` @kind static;
  #L144794.  v2:= temp @kind object;
  #L144796.  call temp:= `append`(v14, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14479c.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1447a2.  v14:= temp @kind object;
  #L1447a4.  goto L1447d2;
  #L1447a6.  v14:= new `java.lang.StringBuilder`;
  #L1447aa.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1447b0.  v4:= "scheduled after " @kind object;
  #L1447b4.  call temp:= `append`(v14, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1447ba.  v2:= v2 - v0 @kind long;
  #L1447bc.  call temp:= `formatDuration`(v2) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.formatDuration:(J)Ljava/lang/String;` @kind static;
  #L1447c2.  v2:= temp @kind object;
  #L1447c4.  call temp:= `append`(v14, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1447ca.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1447d0.  v14:= temp @kind object;
  #L1447d2.  call `access$log`(v11, v10, v14) @signature `Lokhttp3/internal/concurrent/TaskLoggerKt;.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V` @kind static;
  #L1447d8.  v14:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L1447dc.  call temp:= `iterator`(v14) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1447e2.  v14:= temp @kind object;
  #L1447e4.  v2:= 0I;
  #L1447e6.  call temp:= `hasNext`(v14) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1447ec.  v3:= temp;
  #L1447ee.  v4:= 1I;
  #L1447f0.  if v3 == 0 then goto L144824;
  #L1447f4.  call temp:= `next`(v14) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1447fa.  v3:= temp @kind object;
  #L1447fc.  v3:= (`okhttp3.internal.concurrent.Task`) v3 @kind object;
  #L144800.  call temp:= `getNextExecuteNanoTime$okhttp`(v3) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L144806.  v7:= temp @kind wide;
  #L144808.  v7:= v7 - v0 @kind long;
  #L14480a.  v3:= lcmp(v7, v12);
  #L14480e.  if v3 <= 0 then goto L144816;
  #L144812.  v3:= 1I;
  #L144814.  goto L144818;
  #L144816.  v3:= 0I;
  #L144818.  if v3 == 0 then goto L14481e;
  #L14481c.  goto L144826;
  #L14481e.  v2:= v2 + 1;
  #L144822.  goto L1447e6;
  #L144824.  v2:= -1I;
  #L144826.  if v2 != v5 then goto L144836;
  #L14482a.  v12:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14482e.  call temp:= `size`(v12) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L144834.  v2:= temp;
  #L144836.  v12:= v10.`okhttp3.internal.concurrent.TaskQueue.c` @type ^`java.util.List` @kind object;
  #L14483a.  call `add`(v12, v2, v11) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L144840.  if v2 != 0 then goto L144846;
  #L144844.  v6:= 1I;
  #L144846.  return v6;
}
procedure `void` `setActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `okhttp3.internal.concurrent.Task` v1 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L144cfc.  v0.`okhttp3.internal.concurrent.TaskQueue.b` @type ^`okhttp3.internal.concurrent.Task` := v1 @kind object;
  #L144d00.  return @kind void;
}
procedure `void` `setCancelActiveTask$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setCancelActiveTask$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L144d14.  v0.`okhttp3.internal.concurrent.TaskQueue.d` @type ^`boolean` := v1 @kind boolean;
  #L144d18.  return @kind void;
}
procedure `void` `setShutdown$okhttp`(`okhttp3.internal.concurrent.TaskQueue` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setShutdown$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L144d2c.  v0.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` := v1 @kind boolean;
  #L144d30.  return @kind void;
}
procedure `void` `shutdown`(`okhttp3.internal.concurrent.TaskQueue` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.shutdown:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144d44.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L144d48.  if v0 == 0 then goto L144db2;
  #L144d4c.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L144d52.  v0:= temp;
  #L144d54.  if v0 != 0 then goto L144d5a;
  #L144d58.  goto L144db2;
  #L144d5a.  v0:= new `java.lang.AssertionError`;
  #L144d5e.  v1:= new `java.lang.StringBuilder`;
  #L144d62.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144d68.  v2:= "Thread " @kind object;
  #L144d6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144d72.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L144d78.  v2:= temp @kind object;
  #L144d7a.  v3:= "Thread.currentThread()" @kind object;
  #L144d7e.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L144d84.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L144d8a.  v2:= temp @kind object;
  #L144d8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144d92.  v2:= " MUST NOT hold lock on " @kind object;
  #L144d96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144d9c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144da2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144da8.  v1:= temp @kind object;
  #L144daa.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L144db0.  throw v0;
  #L144db2.  v0:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144db6.  @monitorenter v0
  #L144db8.  v1:= 1I;
  #L144dba.  v4.`okhttp3.internal.concurrent.TaskQueue.a` @type ^`boolean` := v1 @kind boolean;
  #L144dbe.  call temp:= `cancelAllAndDecide$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L144dc4.  v1:= temp;
  #L144dc6.  if v1 == 0 then goto L144dd4;
  #L144dca.  v1:= v4.`okhttp3.internal.concurrent.TaskQueue.e` @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L144dce.  call `kickCoordinator$okhttp`(v1, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @kind virtual;
  #L144dd4.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L144dd8.  @monitorexit v0
  #L144dda.  return @kind void;
  #L144ddc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L144dde.  @monitorexit v0
  #L144de0.  throw v1;
  catch `java.lang.Throwable` @[L144dba..L144dd8] goto L144ddc;
}
procedure `java.lang.String` `toString`(`okhttp3.internal.concurrent.TaskQueue` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L144870.  v0:= v1.`okhttp3.internal.concurrent.TaskQueue.f` @type ^`java.lang.String` @kind object;
  #L144874.  return v0 @kind object;
}
