record `okhttp3.internal.concurrent.TaskQueue$schedule$2` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.concurrent.Task` @kind class {
  `kotlin.jvm.functions.Function0` `okhttp3.internal.concurrent.TaskQueue$schedule$2.e` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `okhttp3.internal.concurrent.TaskQueue$schedule$2.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.TaskQueue$schedule$2` v1 @kind this, `kotlin.jvm.functions.Function0` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1445d0.  v1.`okhttp3.internal.concurrent.TaskQueue$schedule$2.e` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L1445d4.  v1.`okhttp3.internal.concurrent.TaskQueue$schedule$2.f` @type ^`java.lang.String` := v3 @kind object;
  #L1445d8.  v2:= 0I;
  #L1445da.  v3:= 2I;
  #L1445dc.  v0:= 0I;
  #L1445de.  call `<init>`(v1, v4, v2, v3, v0) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1445e4.  return @kind void;
}
procedure `long` `runOnce`(`okhttp3.internal.concurrent.TaskQueue$schedule$2` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskQueue$schedule$2;.runOnce:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1445a4.  v0:= v2.`okhttp3.internal.concurrent.TaskQueue$schedule$2.e` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L1445a8.  call temp:= `invoke`(v0) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L1445ae.  v0:= temp @kind object;
  #L1445b0.  v0:= (`java.lang.Number`) v0 @kind object;
  #L1445b4.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L1445ba.  v0:= temp @kind wide;
  #L1445bc.  return v0 @kind wide;
}
