record `okhttp3.internal.concurrent.TaskRunner` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.concurrent.TaskRunner.a` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.concurrent.TaskRunner.b` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.concurrent.TaskRunner.c` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.internal.concurrent.TaskRunner.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.concurrent.TaskRunner.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `okhttp3.internal.concurrent.TaskRunner.f` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.concurrent.TaskRunner$Backend` `okhttp3.internal.concurrent.TaskRunner.g` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.concurrent.TaskRunner$Companion` `@@okhttp3.internal.concurrent.TaskRunner.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.internal.concurrent.TaskRunner` `@@okhttp3.internal.concurrent.TaskRunner.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.logging.Logger` `@@okhttp3.internal.concurrent.TaskRunner.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/concurrent/TaskRunner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14539c.  v0:= new `okhttp3.internal.concurrent.TaskRunner$Companion`;
  #L1453a0.  v1:= 0I;
  #L1453a2.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1453a8.  `@@okhttp3.internal.concurrent.TaskRunner.Companion` @type ^`okhttp3.internal.concurrent.TaskRunner$Companion` := v0 @kind object;
  #L1453ac.  v0:= new `okhttp3.internal.concurrent.TaskRunner`;
  #L1453b0.  v1:= new `okhttp3.internal.concurrent.TaskRunner$RealBackend`;
  #L1453b4.  v2:= new `java.lang.StringBuilder`;
  #L1453b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1453be.  v3:= `@@okhttp3.internal.Util.okHttpName` @type ^`java.lang.String` @kind object;
  #L1453c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1453c8.  v3:= " TaskRunner" @kind object;
  #L1453cc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1453d2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1453d8.  v2:= temp @kind object;
  #L1453da.  v3:= 1I;
  #L1453dc.  call temp:= `threadFactory`(v2, v3) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1453e2.  v2:= temp @kind object;
  #L1453e4.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner$RealBackend;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1453ea.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner;.<init>:(Lokhttp3/internal/concurrent/TaskRunner$Backend;)V` @kind direct;
  #L1453f0.  `@@okhttp3.internal.concurrent.TaskRunner.INSTANCE` @type ^`okhttp3.internal.concurrent.TaskRunner` := v0 @kind object;
  #L1453f4.  v0:= constclass @type ^`okhttp3.internal.concurrent.TaskRunner` @kind object;
  #L1453f8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1453fe.  v0:= temp @kind object;
  #L145400.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L145406.  v0:= temp @kind object;
  #L145408.  v1:= "Logger.getLogger(TaskRunner::class.java.name)" @kind object;
  #L14540c.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145412.  `@@okhttp3.internal.concurrent.TaskRunner.h` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L145416.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.concurrent.TaskRunner` v1 @kind this, `okhttp3.internal.concurrent.TaskRunner$Backend` v2 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.<init>:(Lokhttp3/internal/concurrent/TaskRunner$Backend;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L145428.  v0:= "backend" @kind object;
  #L14542c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145432.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L145438.  v1.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` := v2 @kind object;
  #L14543c.  v2:= 10000I;
  #L145440.  v1.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int` := v2;
  #L145444.  v2:= new `java.util.ArrayList`;
  #L145448.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L14544e.  v1.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` := v2 @kind object;
  #L145452.  v2:= new `java.util.ArrayList`;
  #L145456.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L14545c.  v1.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` := v2 @kind object;
  #L145460.  v2:= new `okhttp3.internal.concurrent.TaskRunner$runnable$1`;
  #L145464.  call `<init>`(v2, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$runnable$1;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind direct;
  #L14546a.  v1.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` := v2 @kind object;
  #L14546e.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.concurrent.TaskRunner` v6 @kind this, `okhttp3.internal.concurrent.Task` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L145498.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L14549c.  if v0 == 0 then goto L145506;
  #L1454a0.  call temp:= `holdsLock`(v6) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1454a6.  v0:= temp;
  #L1454a8.  if v0 == 0 then goto L1454ae;
  #L1454ac.  goto L145506;
  #L1454ae.  v7:= new `java.lang.AssertionError`;
  #L1454b2.  v8:= new `java.lang.StringBuilder`;
  #L1454b6.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1454bc.  v9:= "Thread " @kind object;
  #L1454c0.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1454c6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1454cc.  v9:= temp @kind object;
  #L1454ce.  v0:= "Thread.currentThread()" @kind object;
  #L1454d2.  call `checkNotNullExpressionValue`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1454d8.  call temp:= `getName`(v9) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1454de.  v9:= temp @kind object;
  #L1454e0.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1454e6.  v9:= " MUST hold lock on " @kind object;
  #L1454ea.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1454f0.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1454f6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1454fc.  v8:= temp @kind object;
  #L1454fe.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L145504.  throw v7;
  #L145506.  call temp:= `getQueue$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @kind virtual;
  #L14550c.  v0:= temp @kind object;
  #L14550e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L145514.  call temp:= `getActiveTask$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @kind virtual;
  #L14551a.  v1:= temp @kind object;
  #L14551c.  v2:= 0I;
  #L14551e.  v3:= 1I;
  #L145520.  if v1 != v7 then goto L145528;
  #L145524.  v1:= 1I;
  #L145526.  goto L14552a;
  #L145528.  v1:= 0I;
  #L14552a.  if v1 == 0 then goto L145592;
  #L14552e.  call temp:= `getCancelActiveTask$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getCancelActiveTask$okhttp:()Z` @kind virtual;
  #L145534.  v1:= temp;
  #L145536.  call `setCancelActiveTask$okhttp`(v0, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setCancelActiveTask$okhttp:(Z)V` @kind virtual;
  #L14553c.  v2:= 0I;
  #L14553e.  call `setActiveTask$okhttp`(v0, v2) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @kind virtual;
  #L145544.  v2:= v6.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L145548.  call temp:= `remove`(v2, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L14554e.  v4:= -1L;
  #L145552.  v2:= lcmp(v8, v4);
  #L145556.  if v2 == 0 then goto L145570;
  #L14555a.  if v1 != 0 then goto L145570;
  #L14555e.  call temp:= `getShutdown$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getShutdown$okhttp:()Z` @kind virtual;
  #L145564.  v1:= temp;
  #L145566.  if v1 != 0 then goto L145570;
  #L14556a.  call temp:= `scheduleAndDecide$okhttp`(v0, v7, v8, v3) @signature `Lokhttp3/internal/concurrent/TaskQueue;.scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z` @kind virtual;
  #L145570.  call temp:= `getFutureTasks$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L145576.  v7:= temp @kind object;
  #L145578.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L14557e.  v7:= temp;
  #L145580.  v7:= v7 ^~ v3 @kind int;
  #L145582.  if v7 == 0 then goto L145590;
  #L145586.  v7:= v6.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L14558a.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L145590.  return @kind void;
  #L145592.  v7:= new `java.lang.IllegalStateException`;
  #L145596.  v8:= "Check failed." @kind object;
  #L14559a.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1455a0.  v8:= temp @kind object;
  #L1455a2.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1455a8.  throw v7;
}
procedure `java.util.logging.Logger` `access$getLogger$cp`() @signature `Lokhttp3/internal/concurrent/TaskRunner;.access$getLogger$cp:()Ljava/util/logging/Logger;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L14514c.  v0:= `@@okhttp3.internal.concurrent.TaskRunner.h` @type ^`java.util.logging.Logger` @kind object;
  #L145150.  return v0 @kind object;
}
procedure `void` `access$runTask`(`okhttp3.internal.concurrent.TaskRunner` v0 @kind object, `okhttp3.internal.concurrent.Task` v1 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.access$runTask:(Lokhttp3/internal/concurrent/TaskRunner;Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L145480.  call `c`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner;.c:(Lokhttp3/internal/concurrent/Task;)V` @kind direct;
  #L145486.  return @kind void;
}
procedure `void` `b`(`okhttp3.internal.concurrent.TaskRunner` v3 @kind this, `okhttp3.internal.concurrent.Task` v4 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.b:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1455bc.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1455c0.  if v0 == 0 then goto L14562a;
  #L1455c4.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1455ca.  v0:= temp;
  #L1455cc.  if v0 == 0 then goto L1455d2;
  #L1455d0.  goto L14562a;
  #L1455d2.  v4:= new `java.lang.AssertionError`;
  #L1455d6.  v0:= new `java.lang.StringBuilder`;
  #L1455da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1455e0.  v1:= "Thread " @kind object;
  #L1455e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1455ea.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1455f0.  v1:= temp @kind object;
  #L1455f2.  v2:= "Thread.currentThread()" @kind object;
  #L1455f6.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1455fc.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L145602.  v1:= temp @kind object;
  #L145604.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14560a.  v1:= " MUST hold lock on " @kind object;
  #L14560e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145614.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14561a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145620.  v0:= temp @kind object;
  #L145622.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L145628.  throw v4;
  #L14562a.  v0:= -1L;
  #L14562e.  call `setNextExecuteNanoTime$okhttp`(v4, v0) @signature `Lokhttp3/internal/concurrent/Task;.setNextExecuteNanoTime$okhttp:(J)V` @kind virtual;
  #L145634.  call temp:= `getQueue$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/Task;.getQueue$okhttp:()Lokhttp3/internal/concurrent/TaskQueue;` @kind virtual;
  #L14563a.  v0:= temp @kind object;
  #L14563c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L145642.  call temp:= `getFutureTasks$okhttp`(v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L145648.  v1:= temp @kind object;
  #L14564a.  call temp:= `remove`(v1, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L145650.  v1:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L145654.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L14565a.  call `setActiveTask$okhttp`(v0, v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.setActiveTask$okhttp:(Lokhttp3/internal/concurrent/Task;)V` @kind virtual;
  #L145660.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L145664.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14566a.  return @kind void;
}
procedure `void` `c`(`okhttp3.internal.concurrent.TaskRunner` v5 @kind this, `okhttp3.internal.concurrent.Task` v6 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.c:(Lokhttp3/internal/concurrent/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1457f4.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L1457f8.  if v0 == 0 then goto L145862;
  #L1457fc.  call temp:= `holdsLock`(v5) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L145802.  v0:= temp;
  #L145804.  if v0 != 0 then goto L14580a;
  #L145808.  goto L145862;
  #L14580a.  v6:= new `java.lang.AssertionError`;
  #L14580e.  v0:= new `java.lang.StringBuilder`;
  #L145812.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145818.  v1:= "Thread " @kind object;
  #L14581c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145822.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L145828.  v1:= temp @kind object;
  #L14582a.  v2:= "Thread.currentThread()" @kind object;
  #L14582e.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145834.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L14583a.  v1:= temp @kind object;
  #L14583c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145842.  v1:= " MUST NOT hold lock on " @kind object;
  #L145846.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14584c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145852.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145858.  v0:= temp @kind object;
  #L14585a.  call `<init>`(v6, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L145860.  throw v6;
  #L145862.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L145868.  v0:= temp @kind object;
  #L14586a.  v1:= "currentThread" @kind object;
  #L14586e.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145874.  call temp:= `getName`(v0) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L14587a.  v1:= temp @kind object;
  #L14587c.  call temp:= `getName`(v6) @signature `Lokhttp3/internal/concurrent/Task;.getName:()Ljava/lang/String;` @kind virtual;
  #L145882.  v2:= temp @kind object;
  #L145884.  call `setName`(v0, v2) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L14588a.  v2:= -1L;
  #L14588e.  call temp:= `runOnce`(v6) @signature `Lokhttp3/internal/concurrent/Task;.runOnce:()J` @kind virtual;
  #L145894.  v2:= temp @kind wide;
  #L145896.  @monitorenter v5
  #L145898.  call `a`(v5, v6, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @kind direct;
  #L14589e.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1458a2.  @monitorexit v5
  #L1458a4.  call `setName`(v0, v1) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1458aa.  return @kind void;
  #L1458ac.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1458ae.  @monitorexit v5
  #L1458b0.  throw v6;
  #L1458b2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1458b4.  @monitorenter v5
  #L1458b6.  call `a`(v5, v6, v2) @signature `Lokhttp3/internal/concurrent/TaskRunner;.a:(Lokhttp3/internal/concurrent/Task;J)V` @kind direct;
  #L1458bc.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1458c0.  @monitorexit v5
  #L1458c2.  call `setName`(v0, v1) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L1458c8.  throw v4;
  #L1458ca.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1458cc.  @monitorexit v5
  #L1458ce.  throw v6;
  catch `java.lang.Throwable` @[L14588e..L145896] goto L1458b2;
  catch `java.lang.Throwable` @[L145898..L1458a2] goto L1458ac;
  catch `java.lang.Throwable` @[L1458b6..L1458c0] goto L1458ca;
}
procedure `java.util.List` `activeQueues`(`okhttp3.internal.concurrent.TaskRunner` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.activeQueues:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L145114.  @monitorenter v2
  #L145116.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L14511a.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L14511e.  call temp:= `plus`(v0, v1) @signature `Lkotlin/collections/CollectionsKt;.plus:(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L145124.  v0:= temp @kind object;
  #L145126.  @monitorexit v2
  #L145128.  return v0 @kind object;
  #L14512a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L14512c.  @monitorexit v2
  #L14512e.  throw v0;
  catch `java.lang.Throwable` @[L145116..L145126] goto L14512a;
}
procedure `okhttp3.internal.concurrent.Task` `awaitTaskToRun`(`okhttp3.internal.concurrent.TaskRunner` v15 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.awaitTaskToRun:()Lokhttp3/internal/concurrent/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L145164.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L145168.  if v0 == 0 then goto L1451d2;
  #L14516c.  call temp:= `holdsLock`(v15) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L145172.  v0:= temp;
  #L145174.  if v0 == 0 then goto L14517a;
  #L145178.  goto L1451d2;
  #L14517a.  v0:= new `java.lang.AssertionError`;
  #L14517e.  v1:= new `java.lang.StringBuilder`;
  #L145182.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145188.  v2:= "Thread " @kind object;
  #L14518c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145192.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L145198.  v2:= temp @kind object;
  #L14519a.  v3:= "Thread.currentThread()" @kind object;
  #L14519e.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1451a4.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L1451aa.  v2:= temp @kind object;
  #L1451ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1451b2.  v2:= " MUST hold lock on " @kind object;
  #L1451b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1451bc.  call temp:= `append`(v1, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1451c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1451c8.  v1:= temp @kind object;
  #L1451ca.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1451d0.  throw v0;
  #L1451d2.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1451d6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1451dc.  v0:= temp;
  #L1451de.  v1:= 0I;
  #L1451e0.  if v0 == 0 then goto L1451e6;
  #L1451e4.  return v1 @kind object;
  #L1451e6.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1451ea.  call temp:= `nanoTime`(v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.nanoTime:()J` @kind interface;
  #L1451f0.  v2:= temp @kind wide;
  #L1451f2.  v4:= 9223372036854775807L;
  #L1451fc.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L145200.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L145206.  v0:= temp @kind object;
  #L145208.  v6:= v1 @kind object;
  #L14520a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L145210.  v7:= temp;
  #L145212.  v8:= 1I;
  #L145214.  v9:= 0I;
  #L145216.  if v7 == 0 then goto L14526e;
  #L14521a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L145220.  v7:= temp @kind object;
  #L145222.  v7:= (`okhttp3.internal.concurrent.TaskQueue`) v7 @kind object;
  #L145226.  call temp:= `getFutureTasks$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L14522c.  v7:= temp @kind object;
  #L14522e.  call temp:= `get`(v7, v9) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L145234.  v7:= temp @kind object;
  #L145236.  v7:= (`okhttp3.internal.concurrent.Task`) v7 @kind object;
  #L14523a.  call temp:= `getNextExecuteNanoTime$okhttp`(v7) @signature `Lokhttp3/internal/concurrent/Task;.getNextExecuteNanoTime$okhttp:()J` @kind virtual;
  #L145240.  v10:= temp @kind wide;
  #L145242.  v10:= v10 - v2 @kind long;
  #L145244.  v12:= 0L;
  #L145248.  call temp:= `max`(v12, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L14524e.  v10:= temp @kind wide;
  #L145250.  v14:= lcmp(v10, v12);
  #L145254.  if v14 <= 0 then goto L145262;
  #L145258.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L14525e.  v4:= temp @kind wide;
  #L145260.  goto L14520a;
  #L145262.  if v6 == 0 then goto L14526a;
  #L145266.  v0:= 1I;
  #L145268.  goto L145270;
  #L14526a.  v6:= v7 @kind object;
  #L14526c.  goto L14520a;
  #L14526e.  v0:= 0I;
  #L145270.  if v6 == 0 then goto L1452a8;
  #L145274.  call `b`(v15, v6) @signature `Lokhttp3/internal/concurrent/TaskRunner;.b:(Lokhttp3/internal/concurrent/Task;)V` @kind direct;
  #L14527a.  if v0 != 0 then goto L145298;
  #L14527e.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L145282.  if v0 != 0 then goto L1452a6;
  #L145286.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L14528a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L145290.  v0:= temp;
  #L145292.  v0:= v0 ^~ v8 @kind int;
  #L145294.  if v0 == 0 then goto L1452a6;
  #L145298.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L14529c.  v1:= v15.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` @kind object;
  #L1452a0.  call `execute`(v0, v1) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1452a6.  return v6 @kind object;
  #L1452a8.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L1452ac.  if v0 == 0 then goto L1452ca;
  #L1452b0.  v6:= v15.`okhttp3.internal.concurrent.TaskRunner.c` @type ^`long` @kind wide;
  #L1452b4.  v6:= v6 - v2 @kind long;
  #L1452b6.  v0:= lcmp(v4, v6);
  #L1452ba.  if v0 >= 0 then goto L1452c8;
  #L1452be.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1452c2.  call `coordinatorNotify`(v0, v15) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorNotify:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind interface;
  #L1452c8.  return v1 @kind object;
  #L1452ca.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v8 @kind boolean;
  #L1452ce.  v2:= v2 + v4 @kind long;
  #L1452d0.  v15.`okhttp3.internal.concurrent.TaskRunner.c` @type ^`long` := v2 @kind wide;
  #L1452d4.  v0:= v15.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1452d8.  call `coordinatorWait`(v0, v15, v4) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorWait:(Lokhttp3/internal/concurrent/TaskRunner;J)V` @kind interface;
  #L1452de.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v9 @kind boolean;
  #L1452e2.  goto L1451d2;
  #L1452e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1452e8.  goto L1452f2;
  #L1452ea.  call `cancelAll`(v15) @signature `Lokhttp3/internal/concurrent/TaskRunner;.cancelAll:()V` @kind virtual;
  #L1452f0.  goto L1452de;
  #L1452f2.  v15.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` := v9 @kind boolean;
  #L1452f6.  throw v0;
  catch `java.lang.InterruptedException` @[L1452d4..L1452de] goto L1452ea;
  catch `java.lang.Throwable` @[L1452d4..L1452de] goto L1452e6;
  catch `java.lang.Throwable` @[L1452ea..L1452f0] goto L1452e6;
}
procedure `void` `cancelAll`(`okhttp3.internal.concurrent.TaskRunner` v2 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L14567c.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L145680.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145686.  v0:= temp;
  #L145688.  v0:= v0 + -1;
  #L14568c.  if v0 < 0 then goto L1456ac;
  #L145690.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.d` @type ^`java.util.List` @kind object;
  #L145694.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L14569a.  v1:= temp @kind object;
  #L14569c.  v1:= (`okhttp3.internal.concurrent.TaskQueue`) v1 @kind object;
  #L1456a0.  call temp:= `cancelAllAndDecide$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1456a6.  v0:= v0 + -1;
  #L1456aa.  goto L14568c;
  #L1456ac.  v0:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1456b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1456b6.  v0:= temp;
  #L1456b8.  v0:= v0 + -1;
  #L1456bc.  if v0 < 0 then goto L1456fa;
  #L1456c0.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1456c4.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1456ca.  v1:= temp @kind object;
  #L1456cc.  v1:= (`okhttp3.internal.concurrent.TaskQueue`) v1 @kind object;
  #L1456d0.  call temp:= `cancelAllAndDecide$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.cancelAllAndDecide$okhttp:()Z` @kind virtual;
  #L1456d6.  call temp:= `getFutureTasks$okhttp`(v1) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L1456dc.  v1:= temp @kind object;
  #L1456de.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1456e4.  v1:= temp;
  #L1456e6.  if v1 == 0 then goto L1456f4;
  #L1456ea.  v1:= v2.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1456ee.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1456f4.  v0:= v0 + -1;
  #L1456f8.  goto L1456bc;
  #L1456fa.  return @kind void;
}
procedure `okhttp3.internal.concurrent.TaskRunner$Backend` `getBackend`(`okhttp3.internal.concurrent.TaskRunner` v1 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.getBackend:()Lokhttp3/internal/concurrent/TaskRunner$Backend;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L145384.  v0:= v1.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L145388.  return v0 @kind object;
}
procedure `void` `kickCoordinator$okhttp`(`okhttp3.internal.concurrent.TaskRunner` v3 @kind this, `okhttp3.internal.concurrent.TaskQueue` v4 @kind object) @signature `Lokhttp3/internal/concurrent/TaskRunner;.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L14570c.  v0:= "taskQueue" @kind object;
  #L145710.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145716.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L14571a.  if v0 == 0 then goto L145784;
  #L14571e.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L145724.  v0:= temp;
  #L145726.  if v0 == 0 then goto L14572c;
  #L14572a.  goto L145784;
  #L14572c.  v4:= new `java.lang.AssertionError`;
  #L145730.  v0:= new `java.lang.StringBuilder`;
  #L145734.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14573a.  v1:= "Thread " @kind object;
  #L14573e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145744.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L14574a.  v1:= temp @kind object;
  #L14574c.  v2:= "Thread.currentThread()" @kind object;
  #L145750.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L145756.  call temp:= `getName`(v1) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L14575c.  v1:= temp @kind object;
  #L14575e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145764.  v1:= " MUST hold lock on " @kind object;
  #L145768.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14576e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145774.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14577a.  v0:= temp @kind object;
  #L14577c.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L145782.  throw v4;
  #L145784.  call temp:= `getActiveTask$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getActiveTask$okhttp:()Lokhttp3/internal/concurrent/Task;` @kind virtual;
  #L14578a.  v0:= temp @kind object;
  #L14578c.  if v0 != 0 then goto L1457be;
  #L145790.  call temp:= `getFutureTasks$okhttp`(v4) @signature `Lokhttp3/internal/concurrent/TaskQueue;.getFutureTasks$okhttp:()Ljava/util/List;` @kind virtual;
  #L145796.  v0:= temp @kind object;
  #L145798.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L14579e.  v0:= temp;
  #L1457a0.  v0:= v0 ^~ 1;
  #L1457a4.  if v0 == 0 then goto L1457b4;
  #L1457a8.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1457ac.  call `addIfAbsent`(v0, v4) @signature `Lokhttp3/internal/Util;.addIfAbsent:(Ljava/util/List;Ljava/lang/Object;)V` @kind static;
  #L1457b2.  goto L1457be;
  #L1457b4.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.e` @type ^`java.util.List` @kind object;
  #L1457b8.  call temp:= `remove`(v0, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1457be.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.b` @type ^`boolean` @kind boolean;
  #L1457c2.  if v4 == 0 then goto L1457d2;
  #L1457c6.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1457ca.  call `coordinatorNotify`(v4, v3) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.coordinatorNotify:(Lokhttp3/internal/concurrent/TaskRunner;)V` @kind interface;
  #L1457d0.  goto L1457e0;
  #L1457d2.  v4:= v3.`okhttp3.internal.concurrent.TaskRunner.g` @type ^`okhttp3.internal.concurrent.TaskRunner$Backend` @kind object;
  #L1457d6.  v0:= v3.`okhttp3.internal.concurrent.TaskRunner.f` @type ^`java.lang.Runnable` @kind object;
  #L1457da.  call `execute`(v4, v0) @signature `Lokhttp3/internal/concurrent/TaskRunner$Backend;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1457e0.  return @kind void;
}
procedure `okhttp3.internal.concurrent.TaskQueue` `newQueue`(`okhttp3.internal.concurrent.TaskRunner` v4 @kind this) @signature `Lokhttp3/internal/concurrent/TaskRunner;.newQueue:()Lokhttp3/internal/concurrent/TaskQueue;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L145324.  @monitorenter v4
  #L145326.  v0:= v4.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int`;
  #L14532a.  v1:= v0 + 1;
  #L14532e.  v4.`okhttp3.internal.concurrent.TaskRunner.a` @type ^`int` := v1;
  #L145332.  @monitorexit v4
  #L145334.  v1:= new `okhttp3.internal.concurrent.TaskQueue`;
  #L145338.  v2:= new `java.lang.StringBuilder`;
  #L14533c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145342.  v3:= 81I;
  #L145346.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14534c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L145352.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145358.  v0:= temp @kind object;
  #L14535a.  call `<init>`(v1, v4, v0) @signature `Lokhttp3/internal/concurrent/TaskQueue;.<init>:(Lokhttp3/internal/concurrent/TaskRunner;Ljava/lang/String;)V` @kind direct;
  #L145360.  return v1 @kind object;
  #L145362.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L145364.  @monitorexit v4
  #L145366.  throw v0;
  catch `java.lang.Throwable` @[L145326..L145332] goto L145362;
}
