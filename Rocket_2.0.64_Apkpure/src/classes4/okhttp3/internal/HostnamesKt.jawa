record `okhttp3.internal.HostnamesKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.lang.String` v10 @kind object) @signature `Lokhttp3/internal/HostnamesKt;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L13dd20.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13dd26.  v0:= temp;
  #L13dd28.  v1:= 0I;
  #L13dd2a.  v2:= 0I;
  #L13dd2c.  if v2 >= v0 then goto L13dd80;
  #L13dd30.  call temp:= `charAt`(v10, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13dd36.  v4:= temp;
  #L13dd38.  v3:= 31I;
  #L13dd3c.  call temp:= `compare`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13dd42.  v3:= temp;
  #L13dd44.  v9:= 1I;
  #L13dd46.  if v3 <= 0 then goto L13dd7e;
  #L13dd4a.  v3:= 127I;
  #L13dd4e.  call temp:= `compare`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13dd54.  v3:= temp;
  #L13dd56.  if v3 < 0 then goto L13dd5c;
  #L13dd5a.  goto L13dd7e;
  #L13dd5c.  v5:= 0I;
  #L13dd5e.  v6:= 0I;
  #L13dd60.  v7:= 6I;
  #L13dd62.  v8:= 0I;
  #L13dd64.  v3:= " #%/:?@[\\]" @kind object;
  #L13dd68.  call temp:= `indexOf$default`(v3, v4, v5, v6, v7, v8) @signature `Lkotlin/text/StringsKt;.indexOf$default:(Ljava/lang/CharSequence;CIZILjava/lang/Object;)I` @kind static;
  #L13dd6e.  v3:= temp;
  #L13dd70.  v4:= -1I;
  #L13dd72.  if v3 == v4 then goto L13dd78;
  #L13dd76.  return v9;
  #L13dd78.  v2:= v2 + 1;
  #L13dd7c.  goto L13dd2c;
  #L13dd7e.  return v9;
  #L13dd80.  return v1;
}
procedure `boolean` `b`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lokhttp3/internal/HostnamesKt;.b:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13dd94.  v0:= v11;
  #L13dd96.  v1:= 0I;
  #L13dd98.  if v8 >= v9 then goto L13de2c;
  #L13dd9c.  v2:= length @variable v10;
  #L13dd9e.  if v0 != v2 then goto L13dda4;
  #L13dda2.  return v1;
  #L13dda4.  if v0 == v11 then goto L13ddbe;
  #L13dda8.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13ddae.  v2:= temp;
  #L13ddb0.  v3:= 46I;
  #L13ddb4.  if v2 == v3 then goto L13ddba;
  #L13ddb8.  return v1;
  #L13ddba.  v8:= v8 + 1;
  #L13ddbe.  v2:= v8;
  #L13ddc0.  v3:= 0I;
  #L13ddc2.  if v2 >= v9 then goto L13de12;
  #L13ddc6.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13ddcc.  v4:= temp;
  #L13ddce.  v5:= 48I;
  #L13ddd2.  call temp:= `compare`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13ddd8.  v6:= temp;
  #L13ddda.  if v6 < 0 then goto L13de12;
  #L13ddde.  v6:= 57I;
  #L13dde2.  call temp:= `compare`(v4, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13dde8.  v6:= temp;
  #L13ddea.  if v6 <= 0 then goto L13ddf0;
  #L13ddee.  goto L13de12;
  #L13ddf0.  if v3 != 0 then goto L13ddfa;
  #L13ddf4.  if v8 == v2 then goto L13ddfa;
  #L13ddf8.  return v1;
  #L13ddfa.  v3:= v3 * 10;
  #L13ddfe.  v3:= v3 + v4 @kind int;
  #L13de00.  v3:= v3 - v5 @kind int;
  #L13de02.  v4:= 255I;
  #L13de06.  if v3 <= v4 then goto L13de0c;
  #L13de0a.  return v1;
  #L13de0c.  v2:= v2 + 1;
  #L13de10.  goto L13ddc2;
  #L13de12.  v8:= v2 - v8 @kind int;
  #L13de16.  if v8 != 0 then goto L13de1c;
  #L13de1a.  return v1;
  #L13de1c.  v8:= v0 + 1;
  #L13de20.  v1:= (`byte`) v3 @kind i2b;
  #L13de22.  v10[v0]:= v1 @kind byte;
  #L13de26.  v0:= v8;
  #L13de28.  v8:= v2;
  #L13de2a.  goto L13dd96;
  #L13de2c.  v11:= v11 + 4;
  #L13de30.  if v0 != v11 then goto L13de36;
  #L13de34.  v1:= 1I;
  #L13de36.  return v1;
}
procedure `java.net.InetAddress` `c`(`java.lang.String` v18 @kind object, `int` v19 , `int` v20 ) @signature `Lokhttp3/internal/HostnamesKt;.c:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L13e084.  v6:= v18 @kind object;
  #L13e088.  v7:= v20;
  #L13e08c.  v8:= 16I;
  #L13e090.  v9:= new `byte`[v8];
  #L13e094.  v11:= -1I;
  #L13e096.  v12:= v19;
  #L13e09a.  v13:= 0I;
  #L13e09c.  v14:= -1I;
  #L13e09e.  v15:= -1I;
  #L13e0a0.  v16:= 0I;
  #L13e0a4.  if v12 >= v7 then goto L13e1b2;
  #L13e0a8.  if v13 != v8 then goto L13e0ae;
  #L13e0ac.  return v16 @kind object;
  #L13e0ae.  v5:= v12 + 2;
  #L13e0b2.  if v5 > v7 then goto L13e0f4;
  #L13e0b6.  v3:= 0I;
  #L13e0b8.  v4:= 4I;
  #L13e0ba.  v17:= 0I;
  #L13e0be.  v1:= "::" @kind object;
  #L13e0c2.  v0:= v18 @kind object;
  #L13e0c6.  v2:= v12;
  #L13e0c8.  v10:= v5;
  #L13e0ca.  v5:= v17 @kind object;
  #L13e0ce.  call temp:= `startsWith$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;IZILjava/lang/Object;)Z` @kind static;
  #L13e0d4.  v0:= temp;
  #L13e0d6.  if v0 == 0 then goto L13e0f4;
  #L13e0da.  if v14 == v11 then goto L13e0e0;
  #L13e0de.  return v16 @kind object;
  #L13e0e0.  v13:= v13 + 2;
  #L13e0e4.  if v10 != v7 then goto L13e0ee;
  #L13e0e8.  v14:= v13;
  #L13e0ea.  goto L13e1b2;
  #L13e0ee.  v15:= v10;
  #L13e0f0.  v14:= v13;
  #L13e0f2.  goto L13e152;
  #L13e0f4.  if v13 == 0 then goto L13e150;
  #L13e0f8.  v3:= 0I;
  #L13e0fa.  v4:= 4I;
  #L13e0fc.  v5:= 0I;
  #L13e0fe.  v1:= ":" @kind object;
  #L13e102.  v0:= v18 @kind object;
  #L13e106.  v2:= v12;
  #L13e108.  call temp:= `startsWith$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;IZILjava/lang/Object;)Z` @kind static;
  #L13e10e.  v0:= temp;
  #L13e110.  if v0 == 0 then goto L13e11a;
  #L13e114.  v12:= v12 + 1;
  #L13e118.  goto L13e150;
  #L13e11a.  v3:= 0I;
  #L13e11c.  v4:= 4I;
  #L13e11e.  v5:= 0I;
  #L13e120.  v1:= "." @kind object;
  #L13e124.  v0:= v18 @kind object;
  #L13e128.  v2:= v12;
  #L13e12a.  call temp:= `startsWith$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;IZILjava/lang/Object;)Z` @kind static;
  #L13e130.  v0:= temp;
  #L13e132.  if v0 == 0 then goto L13e14e;
  #L13e136.  v0:= v13 + -2;
  #L13e13a.  call temp:= `b`(v6, v15, v7, v9, v0) @signature `Lokhttp3/internal/HostnamesKt;.b:(Ljava/lang/String;II[BI)Z` @kind static;
  #L13e140.  v0:= temp;
  #L13e142.  if v0 != 0 then goto L13e148;
  #L13e146.  return v16 @kind object;
  #L13e148.  v13:= v13 + 2;
  #L13e14c.  goto L13e1b2;
  #L13e14e.  return v16 @kind object;
  #L13e150.  v15:= v12;
  #L13e152.  v12:= v15;
  #L13e154.  v0:= 0I;
  #L13e156.  if v12 >= v7 then goto L13e17c;
  #L13e15a.  call temp:= `charAt`(v6, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13e160.  v1:= temp;
  #L13e162.  call temp:= `parseHexDigit`(v1) @signature `Lokhttp3/internal/Util;.parseHexDigit:(C)I` @kind static;
  #L13e168.  v1:= temp;
  #L13e16a.  if v1 != v11 then goto L13e170;
  #L13e16e.  goto L13e17c;
  #L13e170.  v0:= v0 ^< 4;
  #L13e174.  v0:= v0 + v1 @kind int;
  #L13e176.  v12:= v12 + 1;
  #L13e17a.  goto L13e156;
  #L13e17c.  v1:= v12 - v15 @kind int;
  #L13e180.  if v1 == 0 then goto L13e1b0;
  #L13e184.  v2:= 4I;
  #L13e186.  if v1 <= v2 then goto L13e18c;
  #L13e18a.  goto L13e1b0;
  #L13e18c.  v1:= v13 + 1;
  #L13e190.  v2:= v0 ^>> 8;
  #L13e194.  v2:= v2 ^& 255;
  #L13e198.  v2:= (`byte`) v2 @kind i2b;
  #L13e19a.  v9[v13]:= v2 @kind byte;
  #L13e19e.  v13:= v1 + 1;
  #L13e1a2.  v0:= v0 ^& 255;
  #L13e1a6.  v0:= (`byte`) v0 @kind i2b;
  #L13e1a8.  v9[v1]:= v0 @kind byte;
  #L13e1ac.  goto L13e0a0;
  #L13e1b0.  return v16 @kind object;
  #L13e1b2.  if v13 == v8 then goto L13e1d8;
  #L13e1b6.  if v14 != v11 then goto L13e1bc;
  #L13e1ba.  return v16 @kind object;
  #L13e1bc.  v0:= v13 - v14 @kind int;
  #L13e1c0.  v1:= v0 - 16;
  #L13e1c4.  call `arraycopy`(v9, v14, v9, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13e1ca.  v8:= v8 - v13 @kind int;
  #L13e1cc.  v8:= v8 + v14 @kind int;
  #L13e1ce.  v0:= 0I;
  #L13e1d0.  v0:= (`byte`) v0 @kind i2b;
  #L13e1d2.  call `fill`(v9, v14, v8, v0) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L13e1d8.  call temp:= `getByAddress`(v9) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L13e1de.  v0:= temp @kind object;
  #L13e1e0.  return v0 @kind object;
}
procedure `java.lang.String` `d`(`byte`[] v8 @kind object) @signature `Lokhttp3/internal/HostnamesKt;.d:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L13de48.  v0:= 0I;
  #L13de4a.  v1:= -1I;
  #L13de4c.  v2:= 0I;
  #L13de4e.  v3:= 0I;
  #L13de50.  v4:= length @variable v8;
  #L13de52.  v5:= 16I;
  #L13de56.  if v2 >= v4 then goto L13de92;
  #L13de5a.  v4:= v2;
  #L13de5c.  if v4 >= v5 then goto L13de7a;
  #L13de60.  v6:= v8[v4] @kind byte;
  #L13de64.  if v6 != 0 then goto L13de7a;
  #L13de68.  v6:= v4 + 1;
  #L13de6c.  v6:= v8[v6] @kind byte;
  #L13de70.  if v6 != 0 then goto L13de7a;
  #L13de74.  v4:= v4 + 2;
  #L13de78.  goto L13de5c;
  #L13de7a.  v5:= v4 - v2 @kind int;
  #L13de7e.  if v5 <= v3 then goto L13de8c;
  #L13de82.  v6:= 4I;
  #L13de84.  if v5 < v6 then goto L13de8c;
  #L13de88.  v1:= v2;
  #L13de8a.  v3:= v5;
  #L13de8c.  v2:= v4 + 2;
  #L13de90.  goto L13de50;
  #L13de92.  v2:= new `okio.Buffer`;
  #L13de96.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L13de9c.  v4:= length @variable v8;
  #L13de9e.  if v0 >= v4 then goto L13defc;
  #L13dea2.  v4:= 58I;
  #L13dea6.  if v0 != v1 then goto L13debe;
  #L13deaa.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L13deb0.  v0:= v0 + v3 @kind int;
  #L13deb2.  if v0 != v5 then goto L13de9c;
  #L13deb6.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L13debc.  goto L13de9c;
  #L13debe.  if v0 <= 0 then goto L13dec8;
  #L13dec2.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L13dec8.  v4:= v8[v0] @kind byte;
  #L13decc.  v6:= 255I;
  #L13ded0.  call temp:= `and`(v4, v6) @signature `Lokhttp3/internal/Util;.and:(BI)I` @kind static;
  #L13ded6.  v4:= temp;
  #L13ded8.  v4:= v4 ^< 8;
  #L13dedc.  v7:= v0 + 1;
  #L13dee0.  v7:= v8[v7] @kind byte;
  #L13dee4.  call temp:= `and`(v7, v6) @signature `Lokhttp3/internal/Util;.and:(BI)I` @kind static;
  #L13deea.  v6:= temp;
  #L13deec.  v4:= v4 ^| v6 @kind int;
  #L13deee.  v6:= (`long`) v4 @kind i2l;
  #L13def0.  call temp:= `writeHexadecimalUnsignedLong`(v2, v6) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L13def6.  v0:= v0 + 2;
  #L13defa.  goto L13de9c;
  #L13defc.  call temp:= `readUtf8`(v2) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L13df02.  v8:= temp @kind object;
  #L13df04.  return v8 @kind object;
}
procedure `java.lang.String` `toCanonicalHost`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/HostnamesKt;.toCanonicalHost:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13df18.  v0:= "$this$toCanonicalHost" @kind object;
  #L13df1c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13df22.  v0:= ":" @kind object;
  #L13df26.  v1:= 0I;
  #L13df28.  v2:= 2I;
  #L13df2a.  v3:= 0I;
  #L13df2c.  call temp:= `contains$default`(v5, v0, v1, v2, v3) @signature `Lkotlin/text/StringsKt;.contains$default:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;ZILjava/lang/Object;)Z` @kind static;
  #L13df32.  v0:= temp;
  #L13df34.  v4:= 1I;
  #L13df36.  if v0 == 0 then goto L13dff4;
  #L13df3a.  v0:= "[" @kind object;
  #L13df3e.  call temp:= `startsWith$default`(v5, v0, v1, v2, v3) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L13df44.  v0:= temp;
  #L13df46.  if v0 == 0 then goto L13df6e;
  #L13df4a.  v0:= "]" @kind object;
  #L13df4e.  call temp:= `endsWith$default`(v5, v0, v1, v2, v3) @signature `Lkotlin/text/StringsKt;.endsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L13df54.  v0:= temp;
  #L13df56.  if v0 == 0 then goto L13df6e;
  #L13df5a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13df60.  v0:= temp;
  #L13df62.  v0:= v0 - v4 @kind int;
  #L13df64.  call temp:= `c`(v5, v4, v0) @signature `Lokhttp3/internal/HostnamesKt;.c:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L13df6a.  v0:= temp @kind object;
  #L13df6c.  goto L13df7e;
  #L13df6e.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13df74.  v0:= temp;
  #L13df76.  call temp:= `c`(v5, v1, v0) @signature `Lokhttp3/internal/HostnamesKt;.c:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L13df7c.  v0:= temp @kind object;
  #L13df7e.  if v0 == 0 then goto L13dff2;
  #L13df82.  call temp:= `getAddress`(v0) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L13df88.  v1:= temp @kind object;
  #L13df8a.  v2:= length @variable v1;
  #L13df8c.  v3:= 16I;
  #L13df90.  if v2 != v3 then goto L13dfa8;
  #L13df94.  v5:= "address" @kind object;
  #L13df98.  call `checkNotNullExpressionValue`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13df9e.  call temp:= `d`(v1) @signature `Lokhttp3/internal/HostnamesKt;.d:([B)Ljava/lang/String;` @kind static;
  #L13dfa4.  v5:= temp @kind object;
  #L13dfa6.  return v5 @kind object;
  #L13dfa8.  v1:= length @variable v1;
  #L13dfaa.  v2:= 4I;
  #L13dfac.  if v1 != v2 then goto L13dfba;
  #L13dfb0.  call temp:= `getHostAddress`(v0) @signature `Ljava/net/InetAddress;.getHostAddress:()Ljava/lang/String;` @kind virtual;
  #L13dfb6.  v5:= temp @kind object;
  #L13dfb8.  return v5 @kind object;
  #L13dfba.  v0:= new `java.lang.AssertionError`;
  #L13dfbe.  v1:= new `java.lang.StringBuilder`;
  #L13dfc2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13dfc8.  v2:= "Invalid IPv6 address: '" @kind object;
  #L13dfcc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dfd2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dfd8.  v5:= 39I;
  #L13dfdc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dfe2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13dfe8.  v5:= temp @kind object;
  #L13dfea.  call `<init>`(v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13dff0.  throw v0;
  #L13dff2.  return v3 @kind object;
  #L13dff4.  call temp:= `toASCII`(v5) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L13dffa.  v5:= temp @kind object;
  #L13dffc.  v0:= "IDN.toASCII(host)" @kind object;
  #L13e000.  call `checkNotNullExpressionValue`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e006.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L13e00a.  v2:= "Locale.US" @kind object;
  #L13e00e.  call `checkNotNullExpressionValue`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e014.  if v5 == 0 then goto L13e050;
  #L13e018.  call temp:= `toLowerCase`(v5, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L13e01e.  v5:= temp @kind object;
  #L13e020.  v0:= "(this as java.lang.String).toLowerCase(locale)" @kind object;
  #L13e024.  call `checkNotNullExpressionValue`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e02a.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L13e030.  v0:= temp;
  #L13e032.  if v0 != 0 then goto L13e038;
  #L13e036.  v1:= 1I;
  #L13e038.  if v1 == 0 then goto L13e03e;
  #L13e03c.  return v3 @kind object;
  #L13e03e.  call temp:= `a`(v5) @signature `Lokhttp3/internal/HostnamesKt;.a:(Ljava/lang/String;)Z` @kind static;
  #L13e044.  v0:= temp;
  #L13e046.  if v0 == 0 then goto L13e04c;
  #L13e04a.  goto L13e04e;
  #L13e04c.  v3:= v5 @kind object;
  #L13e04e.  return v3 @kind object;
  #L13e050.  v5:= new `java.lang.NullPointerException`;
  #L13e054.  v0:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L13e058.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e05e.  throw v5;
  #L13e060.  return v3 @kind object;
  catch `java.lang.IllegalArgumentException` @[L13dff4..L13e060] goto L13e060;
}
