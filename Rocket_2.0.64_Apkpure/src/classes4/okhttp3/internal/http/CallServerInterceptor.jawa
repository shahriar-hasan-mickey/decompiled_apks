record `okhttp3.internal.http.CallServerInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `boolean` `okhttp3.internal.http.CallServerInterceptor.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http.CallServerInterceptor` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14b074.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14b07a.  v0.`okhttp3.internal.http.CallServerInterceptor.a` @type ^`boolean` := v1 @kind boolean;
  #L14b07e.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.CallServerInterceptor` v11 @kind this, `okhttp3.Interceptor$Chain` v12 @kind object) @signature `Lokhttp3/internal/http/CallServerInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L14ad50.  v0:= "chain" @kind object;
  #L14ad54.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14ad5a.  v12:= (`okhttp3.internal.http.RealInterceptorChain`) v12 @kind object;
  #L14ad5e.  call temp:= `getExchange$okhttp`(v12) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getExchange$okhttp:()Lokhttp3/internal/connection/Exchange;` @kind virtual;
  #L14ad64.  v0:= temp @kind object;
  #L14ad66.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14ad6c.  call temp:= `getRequest$okhttp`(v12) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getRequest$okhttp:()Lokhttp3/Request;` @kind virtual;
  #L14ad72.  v12:= temp @kind object;
  #L14ad74.  call temp:= `body`(v12) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L14ad7a.  v1:= temp @kind object;
  #L14ad7c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L14ad82.  v2:= temp @kind wide;
  #L14ad84.  call `writeRequestHeaders`(v0, v12) @signature `Lokhttp3/internal/connection/Exchange;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind virtual;
  #L14ad8a.  call temp:= `method`(v12) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L14ad90.  v4:= temp @kind object;
  #L14ad92.  call temp:= `permitsRequestBody`(v4) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L14ad98.  v4:= temp;
  #L14ad9a.  v5:= 0I;
  #L14ad9c.  v6:= 0I;
  #L14ad9e.  v7:= 1I;
  #L14ada0.  if v4 == 0 then goto L14ae4e;
  #L14ada4.  if v1 == 0 then goto L14ae4e;
  #L14ada8.  v4:= "Expect" @kind object;
  #L14adac.  call temp:= `header`(v12, v4) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L14adb2.  v4:= temp @kind object;
  #L14adb4.  v8:= "100-continue" @kind object;
  #L14adb8.  call temp:= `equals`(v8, v4, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L14adbe.  v4:= temp;
  #L14adc0.  if v4 == 0 then goto L14addc;
  #L14adc4.  call `flushRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @kind virtual;
  #L14adca.  call temp:= `readResponseHeaders`(v0, v7) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L14add0.  v4:= temp @kind object;
  #L14add2.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L14add8.  v8:= 0I;
  #L14adda.  goto L14ade0;
  #L14addc.  v4:= v5 @kind object;
  #L14adde.  v8:= 1I;
  #L14ade0.  if v4 != 0 then goto L14ae2c;
  #L14ade4.  call temp:= `isDuplex`(v1) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L14adea.  v9:= temp;
  #L14adec.  if v9 == 0 then goto L14ae0e;
  #L14adf0.  call `flushRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.flushRequest:()V` @kind virtual;
  #L14adf6.  call temp:= `createRequestBody`(v0, v12, v7) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @kind virtual;
  #L14adfc.  v9:= temp @kind object;
  #L14adfe.  call temp:= `buffer`(v9) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L14ae04.  v9:= temp @kind object;
  #L14ae06.  call `writeTo`(v1, v9) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L14ae0c.  goto L14ae58;
  #L14ae0e.  call temp:= `createRequestBody`(v0, v12, v6) @signature `Lokhttp3/internal/connection/Exchange;.createRequestBody:(Lokhttp3/Request;Z)Lokio/Sink;` @kind virtual;
  #L14ae14.  v9:= temp @kind object;
  #L14ae16.  call temp:= `buffer`(v9) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L14ae1c.  v9:= temp @kind object;
  #L14ae1e.  call `writeTo`(v1, v9) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @kind virtual;
  #L14ae24.  call `close`(v9) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L14ae2a.  goto L14ae58;
  #L14ae2c.  call `noRequestBody`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @kind virtual;
  #L14ae32.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14ae38.  v9:= temp @kind object;
  #L14ae3a.  call temp:= `isMultiplexed$okhttp`(v9) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed$okhttp:()Z` @kind virtual;
  #L14ae40.  v9:= temp;
  #L14ae42.  if v9 != 0 then goto L14ae58;
  #L14ae46.  call `noNewExchangesOnConnection`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @kind virtual;
  #L14ae4c.  goto L14ae58;
  #L14ae4e.  call `noRequestBody`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noRequestBody:()V` @kind virtual;
  #L14ae54.  v4:= v5 @kind object;
  #L14ae56.  v8:= 1I;
  #L14ae58.  if v1 == 0 then goto L14ae68;
  #L14ae5c.  call temp:= `isDuplex`(v1) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L14ae62.  v1:= temp;
  #L14ae64.  if v1 != 0 then goto L14ae6e;
  #L14ae68.  call `finishRequest`(v0) @signature `Lokhttp3/internal/connection/Exchange;.finishRequest:()V` @kind virtual;
  #L14ae6e.  if v4 != 0 then goto L14ae8c;
  #L14ae72.  call temp:= `readResponseHeaders`(v0, v6) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L14ae78.  v4:= temp @kind object;
  #L14ae7a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14ae80.  if v8 == 0 then goto L14ae8c;
  #L14ae84.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L14ae8a.  v8:= 0I;
  #L14ae8c.  call temp:= `request`(v4, v12) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14ae92.  v1:= temp @kind object;
  #L14ae94.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14ae9a.  v4:= temp @kind object;
  #L14ae9c.  call temp:= `handshake`(v4) @signature `Lokhttp3/internal/connection/RealConnection;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L14aea2.  v4:= temp @kind object;
  #L14aea4.  call temp:= `handshake`(v1, v4) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14aeaa.  v1:= temp @kind object;
  #L14aeac.  call temp:= `sentRequestAtMillis`(v1, v2) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L14aeb2.  v1:= temp @kind object;
  #L14aeb4.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L14aeba.  v9:= temp @kind wide;
  #L14aebc.  call temp:= `receivedResponseAtMillis`(v1, v9) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L14aec2.  v1:= temp @kind object;
  #L14aec4.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L14aeca.  v1:= temp @kind object;
  #L14aecc.  call temp:= `code`(v1) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L14aed2.  v4:= temp;
  #L14aed4.  v9:= 100I;
  #L14aed8.  if v4 != v9 then goto L14af3c;
  #L14aedc.  call temp:= `readResponseHeaders`(v0, v6) @signature `Lokhttp3/internal/connection/Exchange;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @kind virtual;
  #L14aee2.  v1:= temp @kind object;
  #L14aee4.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14aeea.  if v8 == 0 then goto L14aef4;
  #L14aeee.  call `responseHeadersStart`(v0) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersStart:()V` @kind virtual;
  #L14aef4.  call temp:= `request`(v1, v12) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14aefa.  v12:= temp @kind object;
  #L14aefc.  call temp:= `getConnection$okhttp`(v0) @signature `Lokhttp3/internal/connection/Exchange;.getConnection$okhttp:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14af02.  v1:= temp @kind object;
  #L14af04.  call temp:= `handshake`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L14af0a.  v1:= temp @kind object;
  #L14af0c.  call temp:= `handshake`(v12, v1) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14af12.  v12:= temp @kind object;
  #L14af14.  call temp:= `sentRequestAtMillis`(v12, v2) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L14af1a.  v12:= temp @kind object;
  #L14af1c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L14af22.  v1:= temp @kind wide;
  #L14af24.  call temp:= `receivedResponseAtMillis`(v12, v1) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L14af2a.  v12:= temp @kind object;
  #L14af2c.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L14af32.  v1:= temp @kind object;
  #L14af34.  call temp:= `code`(v1) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L14af3a.  v4:= temp;
  #L14af3c.  call `responseHeadersEnd`(v0, v1) @signature `Lokhttp3/internal/connection/Exchange;.responseHeadersEnd:(Lokhttp3/Response;)V` @kind virtual;
  #L14af42.  v12:= v11.`okhttp3.internal.http.CallServerInterceptor.a` @type ^`boolean` @kind boolean;
  #L14af46.  if v12 == 0 then goto L14af70;
  #L14af4a.  v12:= 101I;
  #L14af4e.  if v4 != v12 then goto L14af70;
  #L14af52.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L14af58.  v12:= temp @kind object;
  #L14af5a.  v1:= `@@okhttp3.internal.Util.EMPTY_RESPONSE` @type ^`okhttp3.ResponseBody` @kind object;
  #L14af5e.  call temp:= `body`(v12, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14af64.  v12:= temp @kind object;
  #L14af66.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L14af6c.  v12:= temp @kind object;
  #L14af6e.  goto L14af90;
  #L14af70.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L14af76.  v12:= temp @kind object;
  #L14af78.  call temp:= `openResponseBody`(v0, v1) @signature `Lokhttp3/internal/connection/Exchange;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind virtual;
  #L14af7e.  v1:= temp @kind object;
  #L14af80.  call temp:= `body`(v12, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14af86.  v12:= temp @kind object;
  #L14af88.  call temp:= `build`(v12) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L14af8e.  v12:= temp @kind object;
  #L14af90.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L14af96.  v1:= temp @kind object;
  #L14af98.  v2:= "Connection" @kind object;
  #L14af9c.  call temp:= `header`(v1, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L14afa2.  v1:= temp @kind object;
  #L14afa4.  v3:= "close" @kind object;
  #L14afa8.  call temp:= `equals`(v3, v1, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L14afae.  v1:= temp;
  #L14afb0.  if v1 != 0 then goto L14afca;
  #L14afb4.  v1:= 2I;
  #L14afb6.  call temp:= `header$default`(v12, v2, v5, v1, v5) @signature `Lokhttp3/Response;.header$default:(Lokhttp3/Response;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L14afbc.  v1:= temp @kind object;
  #L14afbe.  call temp:= `equals`(v3, v1, v7) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L14afc4.  v1:= temp;
  #L14afc6.  if v1 == 0 then goto L14afd0;
  #L14afca.  call `noNewExchangesOnConnection`(v0) @signature `Lokhttp3/internal/connection/Exchange;.noNewExchangesOnConnection:()V` @kind virtual;
  #L14afd0.  v0:= 204I;
  #L14afd4.  if v4 == v0 then goto L14afe0;
  #L14afd8.  v0:= 205I;
  #L14afdc.  if v4 != v0 then goto L14b060;
  #L14afe0.  call temp:= `body`(v12) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L14afe6.  v0:= temp @kind object;
  #L14afe8.  if v0 == 0 then goto L14aff6;
  #L14afec.  call temp:= `contentLength`(v0) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L14aff2.  v0:= temp @kind wide;
  #L14aff4.  goto L14affa;
  #L14aff6.  v0:= -1L;
  #L14affa.  v2:= 0L;
  #L14affe.  v6:= lcmp(v0, v2);
  #L14b002.  if v6 <= 0 then goto L14b060;
  #L14b006.  v0:= new `java.net.ProtocolException`;
  #L14b00a.  v1:= new `java.lang.StringBuilder`;
  #L14b00e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14b014.  v2:= "HTTP " @kind object;
  #L14b018.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b01e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b024.  v2:= " had non-zero Content-Length: " @kind object;
  #L14b028.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b02e.  call temp:= `body`(v12) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L14b034.  v12:= temp @kind object;
  #L14b036.  if v12 == 0 then goto L14b04a;
  #L14b03a.  call temp:= `contentLength`(v12) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L14b040.  v2:= temp @kind wide;
  #L14b042.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L14b048.  v5:= temp @kind object;
  #L14b04a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b050.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14b056.  v12:= temp @kind object;
  #L14b058.  call `<init>`(v0, v12) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b05e.  throw v0;
  #L14b060.  return v12 @kind object;
}
