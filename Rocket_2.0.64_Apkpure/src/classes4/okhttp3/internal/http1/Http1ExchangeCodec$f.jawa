record `okhttp3.internal.http1.Http1ExchangeCodec$f` @kind class @AccessFlag FINAL extends `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class {
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$f.d` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$f.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v0 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14d790.  v0.`okhttp3.internal.http1.Http1ExchangeCodec$f.e` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v1 @kind object;
  #L14d794.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L14d79a.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14d7ac.  call temp:= `a`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L14d7b2.  v0:= temp;
  #L14d7b4.  if v0 == 0 then goto L14d7ba;
  #L14d7b8.  return @kind void;
  #L14d7ba.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` @kind boolean;
  #L14d7be.  if v0 != 0 then goto L14d7c8;
  #L14d7c2.  call `b`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14d7c8.  v0:= 1I;
  #L14d7ca.  call `c`(v1, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @kind virtual;
  #L14d7d0.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$f` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14d6d4.  v0:= "sink" @kind object;
  #L14d6d8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14d6de.  v0:= 1I;
  #L14d6e0.  v1:= 0L;
  #L14d6e4.  v3:= lcmp(v6, v1);
  #L14d6e8.  if v3 < 0 then goto L14d6f0;
  #L14d6ec.  v1:= 1I;
  #L14d6ee.  goto L14d6f2;
  #L14d6f0.  v1:= 0I;
  #L14d6f2.  if v1 == 0 then goto L14d748;
  #L14d6f6.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L14d6fc.  v1:= temp;
  #L14d6fe.  v1:= v1 ^~ v0 @kind int;
  #L14d700.  if v1 == 0 then goto L14d730;
  #L14d704.  v1:= v4.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` @kind boolean;
  #L14d708.  v2:= -1L;
  #L14d70c.  if v1 == 0 then goto L14d712;
  #L14d710.  return v2 @kind wide;
  #L14d712.  call temp:= `read`(v4, v5, v6) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @kind super;
  #L14d718.  v5:= temp @kind wide;
  #L14d71a.  v7:= lcmp(v5, v2);
  #L14d71e.  if v7 != 0 then goto L14d72e;
  #L14d722.  v4.`okhttp3.internal.http1.Http1ExchangeCodec$f.d` @type ^`boolean` := v0 @kind boolean;
  #L14d726.  call `b`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14d72c.  return v2 @kind wide;
  #L14d72e.  return v5 @kind wide;
  #L14d730.  v5:= new `java.lang.IllegalStateException`;
  #L14d734.  v6:= "closed" @kind object;
  #L14d738.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d73e.  v6:= temp @kind object;
  #L14d740.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d746.  throw v5;
  #L14d748.  v5:= new `java.lang.StringBuilder`;
  #L14d74c.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14d752.  v0:= "byteCount < 0: " @kind object;
  #L14d756.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d75c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d762.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d768.  v5:= temp @kind object;
  #L14d76a.  v6:= new `java.lang.IllegalArgumentException`;
  #L14d76e.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d774.  v5:= temp @kind object;
  #L14d776.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d77c.  throw v6;
}
