record `okhttp3.internal.http1.Http1ExchangeCodec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.ExchangeCodec` @kind interface {
  `int` `okhttp3.internal.http1.Http1ExchangeCodec.a` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.HeadersReader` `okhttp3.internal.http1.Http1ExchangeCodec.b` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `okhttp3.internal.http1.Http1ExchangeCodec.c` @AccessFlag PRIVATE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http1.Http1ExchangeCodec.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.http1.Http1ExchangeCodec.e` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okhttp3.internal.http1.Http1ExchangeCodec.f` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okhttp3.internal.http1.Http1ExchangeCodec.g` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.http1.Http1ExchangeCodec$Companion` `@@okhttp3.internal.http1.Http1ExchangeCodec.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L14de3c.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$Companion`;
  #L14de40.  v1:= 0I;
  #L14de42.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L14de48.  `@@okhttp3.internal.http1.Http1ExchangeCodec.Companion` @type ^`okhttp3.internal.http1.Http1ExchangeCodec$Companion` := v0 @kind object;
  #L14de4c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.internal.connection.RealConnection` v3 @kind object, `okio.BufferedSource` v4 @kind object, `okio.BufferedSink` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/RealConnection;Lokio/BufferedSource;Lokio/BufferedSink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L14de60.  v0:= "connection" @kind object;
  #L14de64.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14de6a.  v0:= "source" @kind object;
  #L14de6e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14de74.  v0:= "sink" @kind object;
  #L14de78.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14de7e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14de84.  v1.`okhttp3.internal.http1.Http1ExchangeCodec.d` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L14de88.  v1.`okhttp3.internal.http1.Http1ExchangeCodec.e` @type ^`okhttp3.internal.connection.RealConnection` := v3 @kind object;
  #L14de8c.  v1.`okhttp3.internal.http1.Http1ExchangeCodec.f` @type ^`okio.BufferedSource` := v4 @kind object;
  #L14de90.  v1.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` := v5 @kind object;
  #L14de94.  v2:= new `okhttp3.internal.http1.HeadersReader`;
  #L14de98.  call `<init>`(v2, v4) @signature `Lokhttp3/internal/http1/HeadersReader;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L14de9e.  v1.`okhttp3.internal.http1.Http1ExchangeCodec.b` @type ^`okhttp3.internal.http1.HeadersReader` := v2 @kind object;
  #L14dea2.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okio.ForwardingTimeout` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.a:(Lokio/ForwardingTimeout;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14df1c.  call temp:= `delegate`(v3) @signature `Lokio/ForwardingTimeout;.delegate:()Lokio/Timeout;` @kind virtual;
  #L14df22.  v0:= temp @kind object;
  #L14df24.  v1:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L14df28.  call temp:= `setDelegate`(v3, v1) @signature `Lokio/ForwardingTimeout;.setDelegate:(Lokio/Timeout;)Lokio/ForwardingTimeout;` @kind virtual;
  #L14df2e.  call temp:= `clearDeadline`(v0) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L14df34.  call temp:= `clearTimeout`(v0) @signature `Lokio/Timeout;.clearTimeout:()Lokio/Timeout;` @kind virtual;
  #L14df3a.  return @kind void;
}
procedure `void` `access$detachTimeout`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `okio.ForwardingTimeout` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$detachTimeout:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokio/ForwardingTimeout;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14deb4.  call `a`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.a:(Lokio/ForwardingTimeout;)V` @kind direct;
  #L14deba.  return @kind void;
}
procedure `okhttp3.OkHttpClient` `access$getClient$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getClient$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14d928.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.d` @type ^`okhttp3.OkHttpClient` @kind object;
  #L14d92c.  return v0 @kind object;
}
procedure `okhttp3.internal.http1.HeadersReader` `access$getHeadersReader$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getHeadersReader$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/http1/HeadersReader;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14daa8.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.b` @type ^`okhttp3.internal.http1.HeadersReader` @kind object;
  #L14daac.  return v0 @kind object;
}
procedure `okio.BufferedSink` `access$getSink$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSink$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14dac0.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14dac4.  return v0 @kind object;
}
procedure `okio.BufferedSource` `access$getSource$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14dad8.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.f` @type ^`okio.BufferedSource` @kind object;
  #L14dadc.  return v0 @kind object;
}
procedure `int` `access$getState$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14d864.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14d868.  return v0;
}
procedure `okhttp3.Headers` `access$getTrailers$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14d8c4.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.c` @type ^`okhttp3.Headers` @kind object;
  #L14d8c8.  return v0 @kind object;
}
procedure `void` `access$setState$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `int` v1 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14decc.  v0.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v1;
  #L14ded0.  return @kind void;
}
procedure `void` `access$setTrailers$p`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/Headers;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L14dee4.  v0.`okhttp3.internal.http1.Http1ExchangeCodec.c` @type ^`okhttp3.Headers` := v1 @kind object;
  #L14dee8.  return @kind void;
}
procedure `boolean` `b`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.b:(Lokhttp3/Request;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14d7e4.  v0:= "Transfer-Encoding" @kind object;
  #L14d7e8.  call temp:= `header`(v3, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L14d7ee.  v3:= temp @kind object;
  #L14d7f0.  v0:= "chunked" @kind object;
  #L14d7f4.  v1:= 1I;
  #L14d7f6.  call temp:= `equals`(v0, v3, v1) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L14d7fc.  v3:= temp;
  #L14d7fe.  return v3;
}
procedure `boolean` `c`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this, `okhttp3.Response` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.c:(Lokhttp3/Response;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L14d810.  v0:= "Transfer-Encoding" @kind object;
  #L14d814.  v1:= 0I;
  #L14d816.  v2:= 2I;
  #L14d818.  call temp:= `header$default`(v4, v0, v1, v2, v1) @signature `Lokhttp3/Response;.header$default:(Lokhttp3/Response;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L14d81e.  v4:= temp @kind object;
  #L14d820.  v0:= "chunked" @kind object;
  #L14d824.  v1:= 1I;
  #L14d826.  call temp:= `equals`(v0, v4, v1) @signature `Lkotlin/text/StringsKt;.equals:(Ljava/lang/String;Ljava/lang/String;Z)Z` @kind static;
  #L14d82c.  v4:= temp;
  #L14d82e.  return v4;
}
procedure `okio.Sink` `d`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.d:()Lokio/Sink;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14db78.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14db7c.  v1:= 1I;
  #L14db7e.  if v0 != v1 then goto L14db84;
  #L14db82.  goto L14db86;
  #L14db84.  v1:= 0I;
  #L14db86.  if v1 == 0 then goto L14db9c;
  #L14db8a.  v0:= 2I;
  #L14db8c.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v0;
  #L14db90.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$b`;
  #L14db94.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$b;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L14db9a.  return v0 @kind object;
  #L14db9c.  v0:= new `java.lang.StringBuilder`;
  #L14dba0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14dba6.  v1:= "state: " @kind object;
  #L14dbaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dbb0.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dbb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dbba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dbc0.  v0:= temp @kind object;
  #L14dbc2.  v1:= new `java.lang.IllegalStateException`;
  #L14dbc6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dbcc.  v0:= temp @kind object;
  #L14dbce.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dbd4.  throw v1;
}
procedure `okio.Source` `e`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.e:(Lokhttp3/HttpUrl;)Lokio/Source;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14dc58.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dc5c.  v1:= 4I;
  #L14dc5e.  if v0 != v1 then goto L14dc66;
  #L14dc62.  v0:= 1I;
  #L14dc64.  goto L14dc68;
  #L14dc66.  v0:= 0I;
  #L14dc68.  if v0 == 0 then goto L14dc7e;
  #L14dc6c.  v0:= 5I;
  #L14dc6e.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v0;
  #L14dc72.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$c`;
  #L14dc76.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/HttpUrl;)V` @kind direct;
  #L14dc7c.  return v0 @kind object;
  #L14dc7e.  v3:= new `java.lang.StringBuilder`;
  #L14dc82.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14dc88.  v0:= "state: " @kind object;
  #L14dc8c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dc92.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dc96.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dc9c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dca2.  v3:= temp @kind object;
  #L14dca4.  v0:= new `java.lang.IllegalStateException`;
  #L14dca8.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dcae.  v3:= temp @kind object;
  #L14dcb0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dcb6.  throw v0;
}
procedure `okio.Source` `f`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.f:(J)Lokio/Source;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14dcc8.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dccc.  v1:= 4I;
  #L14dcce.  if v0 != v1 then goto L14dcd6;
  #L14dcd2.  v0:= 1I;
  #L14dcd4.  goto L14dcd8;
  #L14dcd6.  v0:= 0I;
  #L14dcd8.  if v0 == 0 then goto L14dcee;
  #L14dcdc.  v0:= 5I;
  #L14dcde.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v0;
  #L14dce2.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$d`;
  #L14dce6.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$d;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;J)V` @kind direct;
  #L14dcec.  return v0 @kind object;
  #L14dcee.  v3:= new `java.lang.StringBuilder`;
  #L14dcf2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14dcf8.  v4:= "state: " @kind object;
  #L14dcfc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dd02.  v4:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dd06.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dd0c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dd12.  v3:= temp @kind object;
  #L14dd14.  v4:= new `java.lang.IllegalStateException`;
  #L14dd18.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dd1e.  v3:= temp @kind object;
  #L14dd20.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dd26.  throw v4;
}
procedure `okio.Sink` `g`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.g:()Lokio/Sink;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14dbe8.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dbec.  v1:= 1I;
  #L14dbee.  if v0 != v1 then goto L14dbf4;
  #L14dbf2.  goto L14dbf6;
  #L14dbf4.  v1:= 0I;
  #L14dbf6.  if v1 == 0 then goto L14dc0c;
  #L14dbfa.  v0:= 2I;
  #L14dbfc.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v0;
  #L14dc00.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$e`;
  #L14dc04.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$e;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L14dc0a.  return v0 @kind object;
  #L14dc0c.  v0:= new `java.lang.StringBuilder`;
  #L14dc10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14dc16.  v1:= "state: " @kind object;
  #L14dc1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dc20.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dc24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dc2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dc30.  v0:= temp @kind object;
  #L14dc32.  v1:= new `java.lang.IllegalStateException`;
  #L14dc36.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dc3c.  v0:= temp @kind object;
  #L14dc3e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dc44.  throw v1;
}
procedure `okio.Source` `h`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.h:()Lokio/Source;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L14dd38.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dd3c.  v1:= 4I;
  #L14dd3e.  if v0 != v1 then goto L14dd46;
  #L14dd42.  v0:= 1I;
  #L14dd44.  goto L14dd48;
  #L14dd46.  v0:= 0I;
  #L14dd48.  if v0 == 0 then goto L14dd6c;
  #L14dd4c.  v0:= 5I;
  #L14dd4e.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v0;
  #L14dd52.  call temp:= `getConnection`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14dd58.  v0:= temp @kind object;
  #L14dd5a.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L14dd60.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$f`;
  #L14dd64.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$f;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L14dd6a.  return v0 @kind object;
  #L14dd6c.  v0:= new `java.lang.StringBuilder`;
  #L14dd70.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14dd76.  v1:= "state: " @kind object;
  #L14dd7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dd80.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dd84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dd8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dd90.  v0:= temp @kind object;
  #L14dd92.  v1:= new `java.lang.IllegalStateException`;
  #L14dd96.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dd9c.  v0:= temp @kind object;
  #L14dd9e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dda4.  throw v1;
}
procedure `void` `cancel`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14defc.  call temp:= `getConnection`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14df02.  v0:= temp @kind object;
  #L14df04.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L14df0a.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.Request` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14daf0.  v0:= "request" @kind object;
  #L14daf4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14dafa.  call temp:= `body`(v3) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L14db00.  v0:= temp @kind object;
  #L14db02.  if v0 == 0 then goto L14db2c;
  #L14db06.  call temp:= `body`(v3) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L14db0c.  v0:= temp @kind object;
  #L14db0e.  call temp:= `isDuplex`(v0) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L14db14.  v0:= temp;
  #L14db16.  if v0 != 0 then goto L14db1c;
  #L14db1a.  goto L14db2c;
  #L14db1c.  v3:= new `java.net.ProtocolException`;
  #L14db20.  v4:= "Duplex connections are not supported for HTTP/1" @kind object;
  #L14db24.  call `<init>`(v3, v4) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14db2a.  throw v3;
  #L14db2c.  call temp:= `b`(v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.b:(Lokhttp3/Request;)Z` @kind direct;
  #L14db32.  v3:= temp;
  #L14db34.  if v3 == 0 then goto L14db42;
  #L14db38.  call temp:= `d`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.d:()Lokio/Sink;` @kind direct;
  #L14db3e.  v3:= temp @kind object;
  #L14db40.  goto L14db56;
  #L14db42.  v0:= -1L;
  #L14db46.  v3:= lcmp(v4, v0);
  #L14db4a.  if v3 == 0 then goto L14db58;
  #L14db4e.  call temp:= `g`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.g:()Lokio/Sink;` @kind direct;
  #L14db54.  v3:= temp @kind object;
  #L14db56.  return v3 @kind object;
  #L14db58.  v3:= new `java.lang.IllegalStateException`;
  #L14db5c.  v4:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L14db60.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14db66.  throw v3;
}
procedure `void` `finishRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14df4c.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14df50.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L14df56.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14df68.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14df6c.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L14df72.  return @kind void;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14da90.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.e` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L14da94.  return v0 @kind object;
}
procedure `boolean` `isClosed`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.isClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L14d840.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14d844.  v1:= 6I;
  #L14d846.  if v0 != v1 then goto L14d84e;
  #L14d84a.  v0:= 1I;
  #L14d84c.  goto L14d850;
  #L14d84e.  v0:= 0I;
  #L14d850.  return v0;
}
procedure `okio.Source` `openResponseBodySource`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14ddb8.  v0:= "response" @kind object;
  #L14ddbc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14ddc2.  call temp:= `promisesBody`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.promisesBody:(Lokhttp3/Response;)Z` @kind static;
  #L14ddc8.  v0:= temp;
  #L14ddca.  if v0 != 0 then goto L14dddc;
  #L14ddce.  v0:= 0L;
  #L14ddd2.  call temp:= `f`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.f:(J)Lokio/Source;` @kind direct;
  #L14ddd8.  v5:= temp @kind object;
  #L14ddda.  goto L14de28;
  #L14dddc.  call temp:= `c`(v4, v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.c:(Lokhttp3/Response;)Z` @kind direct;
  #L14dde2.  v0:= temp;
  #L14dde4.  if v0 == 0 then goto L14de02;
  #L14dde8.  call temp:= `request`(v5) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L14ddee.  v5:= temp @kind object;
  #L14ddf0.  call temp:= `url`(v5) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L14ddf6.  v5:= temp @kind object;
  #L14ddf8.  call temp:= `e`(v4, v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.e:(Lokhttp3/HttpUrl;)Lokio/Source;` @kind direct;
  #L14ddfe.  v5:= temp @kind object;
  #L14de00.  goto L14de28;
  #L14de02.  call temp:= `headersContentLength`(v5) @signature `Lokhttp3/internal/Util;.headersContentLength:(Lokhttp3/Response;)J` @kind static;
  #L14de08.  v0:= temp @kind wide;
  #L14de0a.  v2:= -1L;
  #L14de0e.  v5:= lcmp(v0, v2);
  #L14de12.  if v5 == 0 then goto L14de20;
  #L14de16.  call temp:= `f`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.f:(J)Lokio/Source;` @kind direct;
  #L14de1c.  v5:= temp @kind object;
  #L14de1e.  goto L14de28;
  #L14de20.  call temp:= `h`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.h:()Lokio/Source;` @kind direct;
  #L14de26.  v5:= temp @kind object;
  #L14de28.  return v5 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `boolean` v5 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14d940.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14d944.  v1:= 3I;
  #L14d946.  v2:= 1I;
  #L14d948.  if v0 == v2 then goto L14d954;
  #L14d94c.  if v0 != v1 then goto L14d952;
  #L14d950.  goto L14d954;
  #L14d952.  v2:= 0I;
  #L14d954.  if v2 == 0 then goto L14da34;
  #L14d958.  v0:= `@@okhttp3.internal.http.StatusLine.Companion` @type ^`okhttp3.internal.http.StatusLine$Companion` @kind object;
  #L14d95c.  v2:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.b` @type ^`okhttp3.internal.http1.HeadersReader` @kind object;
  #L14d960.  call temp:= `readLine`(v2) @signature `Lokhttp3/internal/http1/HeadersReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L14d966.  v2:= temp @kind object;
  #L14d968.  call temp:= `parse`(v0, v2) @signature `Lokhttp3/internal/http/StatusLine$Companion;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind virtual;
  #L14d96e.  v0:= temp @kind object;
  #L14d970.  v2:= new `okhttp3.Response$Builder`;
  #L14d974.  call `<init>`(v2) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L14d97a.  v3:= v0.`okhttp3.internal.http.StatusLine.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L14d97e.  call temp:= `protocol`(v2, v3) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14d984.  v2:= temp @kind object;
  #L14d986.  v3:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L14d98a.  call temp:= `code`(v2, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L14d990.  v2:= temp @kind object;
  #L14d992.  v3:= v0.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L14d996.  call temp:= `message`(v2, v3) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14d99c.  v2:= temp @kind object;
  #L14d99e.  v3:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.b` @type ^`okhttp3.internal.http1.HeadersReader` @kind object;
  #L14d9a2.  call temp:= `readHeaders`(v3) @signature `Lokhttp3/internal/http1/HeadersReader;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L14d9a8.  v3:= temp @kind object;
  #L14d9aa.  call temp:= `headers`(v2, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L14d9b0.  v2:= temp @kind object;
  #L14d9b2.  v3:= 100I;
  #L14d9b6.  if v5 == 0 then goto L14d9c6;
  #L14d9ba.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L14d9be.  if v5 != v3 then goto L14d9c6;
  #L14d9c2.  v2:= 0I;
  #L14d9c4.  goto L14d9da;
  #L14d9c6.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L14d9ca.  if v5 != v3 then goto L14d9d4;
  #L14d9ce.  v4.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v1;
  #L14d9d2.  goto L14d9da;
  #L14d9d4.  v5:= 4I;
  #L14d9d6.  v4.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v5;
  #L14d9da.  return v2 @kind object;
  #L14d9dc.  v5:= Exception @type ^`java.io.EOFException` @kind object;
  #L14d9de.  call temp:= `getConnection`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14d9e4.  v0:= temp @kind object;
  #L14d9e6.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L14d9ec.  v0:= temp @kind object;
  #L14d9ee.  call temp:= `address`(v0) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L14d9f4.  v0:= temp @kind object;
  #L14d9f6.  call temp:= `url`(v0) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L14d9fc.  v0:= temp @kind object;
  #L14d9fe.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L14da04.  v0:= temp @kind object;
  #L14da06.  v1:= new `java.io.IOException`;
  #L14da0a.  v2:= new `java.lang.StringBuilder`;
  #L14da0e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14da14.  v3:= "unexpected end of stream on " @kind object;
  #L14da18.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14da1e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14da24.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14da2a.  v0:= temp @kind object;
  #L14da2c.  call `<init>`(v1, v0, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L14da32.  throw v1;
  #L14da34.  v5:= new `java.lang.StringBuilder`;
  #L14da38.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14da3e.  v0:= "state: " @kind object;
  #L14da42.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14da48.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14da4c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14da52.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14da58.  v5:= temp @kind object;
  #L14da5a.  v0:= new `java.lang.IllegalStateException`;
  #L14da5e.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14da64.  v5:= temp @kind object;
  #L14da66.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14da6c.  throw v0;
  catch `java.io.EOFException` @[L14d958..L14d9da] goto L14d9dc;
}
procedure `long` `reportedContentLength`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14d87c.  v0:= "response" @kind object;
  #L14d880.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14d886.  call temp:= `promisesBody`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.promisesBody:(Lokhttp3/Response;)Z` @kind static;
  #L14d88c.  v0:= temp;
  #L14d88e.  if v0 != 0 then goto L14d898;
  #L14d892.  v0:= 0L;
  #L14d896.  goto L14d8b2;
  #L14d898.  call temp:= `c`(v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.c:(Lokhttp3/Response;)Z` @kind direct;
  #L14d89e.  v0:= temp;
  #L14d8a0.  if v0 == 0 then goto L14d8aa;
  #L14d8a4.  v0:= -1L;
  #L14d8a8.  goto L14d8b2;
  #L14d8aa.  call temp:= `headersContentLength`(v3) @signature `Lokhttp3/internal/Util;.headersContentLength:(Lokhttp3/Response;)J` @kind static;
  #L14d8b0.  v0:= temp @kind wide;
  #L14d8b2.  return v0 @kind wide;
}
procedure `void` `skipConnectBody`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.skipConnectBody:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14df84.  v0:= "response" @kind object;
  #L14df88.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14df8e.  call temp:= `headersContentLength`(v5) @signature `Lokhttp3/internal/Util;.headersContentLength:(Lokhttp3/Response;)J` @kind static;
  #L14df94.  v0:= temp @kind wide;
  #L14df96.  v2:= -1L;
  #L14df9a.  v5:= lcmp(v0, v2);
  #L14df9e.  if v5 != 0 then goto L14dfa4;
  #L14dfa2.  return @kind void;
  #L14dfa4.  call temp:= `f`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.f:(J)Lokio/Source;` @kind direct;
  #L14dfaa.  v5:= temp @kind object;
  #L14dfac.  v0:= 2147483647I;
  #L14dfb2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L14dfb6.  call temp:= `skipAll`(v5, v0, v1) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L14dfbc.  call `close`(v5) @signature `Lokio/Source;.close:()V` @kind interface;
  #L14dfc2.  return @kind void;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14d8dc.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14d8e0.  v1:= 6I;
  #L14d8e2.  if v0 != v1 then goto L14d8ea;
  #L14d8e6.  v0:= 1I;
  #L14d8e8.  goto L14d8ec;
  #L14d8ea.  v0:= 0I;
  #L14d8ec.  if v0 == 0 then goto L14d900;
  #L14d8f0.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.c` @type ^`okhttp3.Headers` @kind object;
  #L14d8f4.  if v0 == 0 then goto L14d8fa;
  #L14d8f8.  goto L14d8fe;
  #L14d8fa.  v0:= `@@okhttp3.internal.Util.EMPTY_HEADERS` @type ^`okhttp3.Headers` @kind object;
  #L14d8fe.  return v0 @kind object;
  #L14d900.  v0:= new `java.lang.IllegalStateException`;
  #L14d904.  v1:= "too early; can't read the trailers yet" @kind object;
  #L14d908.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d90e.  v1:= temp @kind object;
  #L14d910.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d916.  throw v0;
}
procedure `void` `writeRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v5 @kind this, `okhttp3.Headers` v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L14dfd4.  v0:= "headers" @kind object;
  #L14dfd8.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14dfde.  v0:= "requestLine" @kind object;
  #L14dfe2.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14dfe8.  v0:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14dfec.  v1:= 0I;
  #L14dfee.  v2:= 1I;
  #L14dff0.  if v0 != 0 then goto L14dff8;
  #L14dff4.  v0:= 1I;
  #L14dff6.  goto L14dffa;
  #L14dff8.  v0:= 0I;
  #L14dffa.  if v0 == 0 then goto L14e06c;
  #L14dffe.  v0:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14e002.  call temp:= `writeUtf8`(v0, v7) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e008.  v7:= temp @kind object;
  #L14e00a.  v0:= "\r\n" @kind object;
  #L14e00e.  call temp:= `writeUtf8`(v7, v0) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e014.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L14e01a.  v7:= temp;
  #L14e01c.  if v1 >= v7 then goto L14e05c;
  #L14e020.  v3:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14e024.  call temp:= `name`(v6, v1) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L14e02a.  v4:= temp @kind object;
  #L14e02c.  call temp:= `writeUtf8`(v3, v4) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e032.  v3:= temp @kind object;
  #L14e034.  v4:= ": " @kind object;
  #L14e038.  call temp:= `writeUtf8`(v3, v4) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e03e.  v3:= temp @kind object;
  #L14e040.  call temp:= `value`(v6, v1) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L14e046.  v4:= temp @kind object;
  #L14e048.  call temp:= `writeUtf8`(v3, v4) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e04e.  v3:= temp @kind object;
  #L14e050.  call temp:= `writeUtf8`(v3, v0) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e056.  v1:= v1 + 1;
  #L14e05a.  goto L14e01c;
  #L14e05c.  v6:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.g` @type ^`okio.BufferedSink` @kind object;
  #L14e060.  call temp:= `writeUtf8`(v6, v0) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L14e066.  v5.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int` := v2;
  #L14e06a.  return @kind void;
  #L14e06c.  v6:= new `java.lang.StringBuilder`;
  #L14e070.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e076.  v7:= "state: " @kind object;
  #L14e07a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e080.  v7:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.a` @type ^`int`;
  #L14e084.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e08a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e090.  v6:= temp @kind object;
  #L14e092.  v7:= new `java.lang.IllegalStateException`;
  #L14e096.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e09c.  v6:= temp @kind object;
  #L14e09e.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e0a4.  throw v7;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14e0b8.  v0:= "request" @kind object;
  #L14e0bc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14e0c2.  v0:= `@@okhttp3.internal.http.RequestLine.INSTANCE` @type ^`okhttp3.internal.http.RequestLine` @kind object;
  #L14e0c6.  call temp:= `getConnection`(v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14e0cc.  v1:= temp @kind object;
  #L14e0ce.  call temp:= `route`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L14e0d4.  v1:= temp @kind object;
  #L14e0d6.  call temp:= `proxy`(v1) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L14e0dc.  v1:= temp @kind object;
  #L14e0de.  call temp:= `type`(v1) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L14e0e4.  v1:= temp @kind object;
  #L14e0e6.  v2:= "connection.route().proxy.type()" @kind object;
  #L14e0ea.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14e0f0.  call temp:= `get`(v0, v4, v1) @signature `Lokhttp3/internal/http/RequestLine;.get:(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind virtual;
  #L14e0f6.  v0:= temp @kind object;
  #L14e0f8.  call temp:= `headers`(v4) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L14e0fe.  v4:= temp @kind object;
  #L14e100.  call `writeRequest`(v3, v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @kind virtual;
  #L14e106.  return @kind void;
}
