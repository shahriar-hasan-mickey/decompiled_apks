record `okhttp3.internal.http1.Http1ExchangeCodec$c` @kind class @AccessFlag FINAL extends `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class {
  `long` `okhttp3.internal.http1.Http1ExchangeCodec$c.d` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$c.e` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1ExchangeCodec$c.f` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$c.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/HttpUrl;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L14d1b4.  v0:= "url" @kind object;
  #L14d1b8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14d1be.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L14d1c2.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L14d1c8.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.f` @type ^`okhttp3.HttpUrl` := v3 @kind object;
  #L14d1cc.  v2:= -1L;
  #L14d1d0.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v2 @kind wide;
  #L14d1d4.  v2:= 1I;
  #L14d1d6.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` := v2 @kind boolean;
  #L14d1da.  return @kind void;
}
procedure `void` `d`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v7 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14d248.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d24c.  v2:= -1L;
  #L14d250.  v4:= lcmp(v0, v2);
  #L14d254.  if v4 == 0 then goto L14d26a;
  #L14d258.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d25c.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L14d262.  v0:= temp @kind object;
  #L14d264.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L14d26a.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d26e.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L14d274.  v0:= temp @kind object;
  #L14d276.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L14d27c.  v0:= temp @kind wide;
  #L14d27e.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v0 @kind wide;
  #L14d282.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d286.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L14d28c.  v0:= temp @kind object;
  #L14d28e.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L14d294.  v0:= temp @kind object;
  #L14d296.  if v0 == 0 then goto L14d39a;
  #L14d29a.  call temp:= `trim`(v0) @signature `Lkotlin/text/StringsKt;.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L14d2a0.  v0:= temp @kind object;
  #L14d2a2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d2a8.  v0:= temp @kind object;
  #L14d2aa.  v1:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d2ae.  v3:= 0L;
  #L14d2b2.  v5:= lcmp(v1, v3);
  #L14d2b6.  if v5 < 0 then goto L14d34e;
  #L14d2ba.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L14d2c0.  v1:= temp;
  #L14d2c2.  v2:= 0I;
  #L14d2c4.  if v1 <= 0 then goto L14d2cc;
  #L14d2c8.  v1:= 1I;
  #L14d2ca.  goto L14d2ce;
  #L14d2cc.  v1:= 0I;
  #L14d2ce.  if v1 == 0 then goto L14d2e6;
  #L14d2d2.  v1:= ";" @kind object;
  #L14d2d6.  v5:= 2I;
  #L14d2d8.  v6:= 0I;
  #L14d2da.  call temp:= `startsWith$default`(v0, v1, v2, v5, v6) @signature `Lkotlin/text/StringsKt;.startsWith$default:(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z` @kind static;
  #L14d2e0.  v1:= temp;
  #L14d2e2.  if v1 == 0 then goto L14d34e;
  #L14d2e6.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d2ea.  v5:= lcmp(v0, v3);
  #L14d2ee.  if v5 != 0 then goto L14d34c;
  #L14d2f2.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` := v2 @kind boolean;
  #L14d2f6.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d2fa.  call temp:= `access$getHeadersReader$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getHeadersReader$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/http1/HeadersReader;` @kind static;
  #L14d300.  v1:= temp @kind object;
  #L14d302.  call temp:= `readHeaders`(v1) @signature `Lokhttp3/internal/http1/HeadersReader;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L14d308.  v1:= temp @kind object;
  #L14d30a.  call `access$setTrailers$p`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/Headers;)V` @kind static;
  #L14d310.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d314.  call temp:= `access$getClient$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getClient$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/OkHttpClient;` @kind static;
  #L14d31a.  v0:= temp @kind object;
  #L14d31c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14d322.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L14d328.  v0:= temp @kind object;
  #L14d32a.  v1:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.f` @type ^`okhttp3.HttpUrl` @kind object;
  #L14d32e.  v2:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d332.  call temp:= `access$getTrailers$p`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getTrailers$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @kind static;
  #L14d338.  v2:= temp @kind object;
  #L14d33a.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L14d340.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L14d346.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14d34c.  return @kind void;
  #L14d34e.  v1:= new `java.net.ProtocolException`;
  #L14d352.  v2:= new `java.lang.StringBuilder`;
  #L14d356.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14d35c.  v3:= "expected chunk size and optional extensions" @kind object;
  #L14d360.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d366.  v3:= " but was \"" @kind object;
  #L14d36a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d370.  v3:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d374.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d37a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d380.  v0:= 34I;
  #L14d384.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d38a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d390.  v0:= temp @kind object;
  #L14d392.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d398.  throw v1;
  #L14d39a.  v0:= new `java.lang.NullPointerException`;
  #L14d39e.  v1:= "null cannot be cast to non-null type kotlin.CharSequence" @kind object;
  #L14d3a2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d3a8.  throw v0;
  #L14d3aa.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L14d3ac.  v1:= new `java.net.ProtocolException`;
  #L14d3b0.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L14d3b6.  v0:= temp @kind object;
  #L14d3b8.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d3be.  throw v1;
  catch `java.lang.NumberFormatException` @[L14d26a..L14d2e2] goto L14d3aa;
  catch `java.lang.NumberFormatException` @[L14d34e..L14d3aa] goto L14d3aa;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14d1ec.  call temp:= `a`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L14d1f2.  v0:= temp;
  #L14d1f4.  if v0 == 0 then goto L14d1fa;
  #L14d1f8.  return @kind void;
  #L14d1fa.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L14d1fe.  if v0 == 0 then goto L14d22e;
  #L14d202.  v0:= 100I;
  #L14d206.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L14d20a.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L14d210.  v0:= temp;
  #L14d212.  if v0 != 0 then goto L14d22e;
  #L14d216.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d21a.  call temp:= `getConnection`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14d220.  v0:= temp @kind object;
  #L14d222.  call `noNewExchanges$okhttp`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L14d228.  call `b`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14d22e.  v0:= 1I;
  #L14d230.  call `c`(v2, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @kind virtual;
  #L14d236.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$c` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14d0a4.  v0:= "sink" @kind object;
  #L14d0a8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14d0ae.  v0:= 1I;
  #L14d0b0.  v1:= 0L;
  #L14d0b4.  v3:= lcmp(v9, v1);
  #L14d0b8.  if v3 < 0 then goto L14d0c0;
  #L14d0bc.  v3:= 1I;
  #L14d0be.  goto L14d0c2;
  #L14d0c0.  v3:= 0I;
  #L14d0c2.  if v3 == 0 then goto L14d16e;
  #L14d0c6.  call temp:= `a`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @kind virtual;
  #L14d0cc.  v3:= temp;
  #L14d0ce.  v0:= v0 ^~ v3 @kind int;
  #L14d0d0.  if v0 == 0 then goto L14d156;
  #L14d0d4.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L14d0d8.  v3:= -1L;
  #L14d0dc.  if v0 != 0 then goto L14d0e2;
  #L14d0e0.  return v3 @kind wide;
  #L14d0e2.  v5:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d0e6.  v0:= lcmp(v5, v1);
  #L14d0ea.  if v0 == 0 then goto L14d0f6;
  #L14d0ee.  v0:= lcmp(v5, v3);
  #L14d0f2.  if v0 != 0 then goto L14d106;
  #L14d0f6.  call `d`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$c;.d:()V` @kind direct;
  #L14d0fc.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.e` @type ^`boolean` @kind boolean;
  #L14d100.  if v0 != 0 then goto L14d106;
  #L14d104.  return v3 @kind wide;
  #L14d106.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d10a.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L14d110.  v9:= temp @kind wide;
  #L14d112.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @kind super;
  #L14d118.  v8:= temp @kind wide;
  #L14d11a.  v10:= lcmp(v8, v3);
  #L14d11e.  if v10 == 0 then goto L14d12e;
  #L14d122.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` @kind wide;
  #L14d126.  v0:= v0 - v8 @kind long;
  #L14d128.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.d` @type ^`long` := v0 @kind wide;
  #L14d12c.  return v8 @kind wide;
  #L14d12e.  v8:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$c.g` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14d132.  call temp:= `getConnection`(v8) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14d138.  v8:= temp @kind object;
  #L14d13a.  call `noNewExchanges$okhttp`(v8) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L14d140.  v8:= new `java.net.ProtocolException`;
  #L14d144.  v9:= "unexpected end of stream" @kind object;
  #L14d148.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d14e.  call `b`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14d154.  throw v8;
  #L14d156.  v8:= new `java.lang.IllegalStateException`;
  #L14d15a.  v9:= "closed" @kind object;
  #L14d15e.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d164.  v9:= temp @kind object;
  #L14d166.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d16c.  throw v8;
  #L14d16e.  v8:= new `java.lang.StringBuilder`;
  #L14d172.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14d178.  v0:= "byteCount < 0: " @kind object;
  #L14d17c.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d182.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14d188.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d18e.  v8:= temp @kind object;
  #L14d190.  v9:= new `java.lang.IllegalArgumentException`;
  #L14d194.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L14d19a.  v8:= temp @kind object;
  #L14d19c.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14d1a2.  throw v9;
}
