record `okhttp3.internal.http1.Http1ExchangeCodec$a` @kind class @AccessFlag ABSTRACT extends `okio.Source` @kind interface {
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1ExchangeCodec$a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$a.b` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L14ce10.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L14ce14.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14ce1a.  v0:= new `okio.ForwardingTimeout`;
  #L14ce1e.  call temp:= `access$getSource$p`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L14ce24.  v2:= temp @kind object;
  #L14ce26.  call temp:= `timeout`(v2) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L14ce2c.  v2:= temp @kind object;
  #L14ce2e.  call `<init>`(v0, v2) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L14ce34.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.a` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L14ce38.  return @kind void;
}
procedure `boolean` `a`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.a:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L14cd84.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.b` @type ^`boolean` @kind boolean;
  #L14cd88.  return v0;
}
procedure `void` `b`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L14ce4c.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14ce50.  call temp:= `access$getState$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)I` @kind static;
  #L14ce56.  v0:= temp;
  #L14ce58.  v1:= 6I;
  #L14ce5a.  if v0 != v1 then goto L14ce60;
  #L14ce5e.  return @kind void;
  #L14ce60.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14ce64.  call temp:= `access$getState$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)I` @kind static;
  #L14ce6a.  v0:= temp;
  #L14ce6c.  v2:= 5I;
  #L14ce6e.  if v0 != v2 then goto L14ce8c;
  #L14ce72.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14ce76.  v2:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.a` @type ^`okio.ForwardingTimeout` @kind object;
  #L14ce7a.  call `access$detachTimeout`(v0, v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$detachTimeout:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokio/ForwardingTimeout;)V` @kind static;
  #L14ce80.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14ce84.  call `access$setState$p`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$setState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;I)V` @kind static;
  #L14ce8a.  return @kind void;
  #L14ce8c.  v0:= new `java.lang.IllegalStateException`;
  #L14ce90.  v1:= new `java.lang.StringBuilder`;
  #L14ce94.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ce9a.  v2:= "state: " @kind object;
  #L14ce9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14cea4.  v2:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14cea8.  call temp:= `access$getState$p`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getState$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)I` @kind static;
  #L14ceae.  v2:= temp;
  #L14ceb0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ceb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14cebc.  v1:= temp @kind object;
  #L14cebe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14cec4.  throw v0;
}
procedure `void` `c`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.c:(Z)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L14ced8.  v0.`okhttp3.internal.http1.Http1ExchangeCodec$a.b` @type ^`boolean` := v1 @kind boolean;
  #L14cedc.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14cd9c.  v0:= "sink" @kind object;
  #L14cda0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14cda6.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14cdaa.  call temp:= `access$getSource$p`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$getSource$p:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/BufferedSource;` @kind static;
  #L14cdb0.  v0:= temp @kind object;
  #L14cdb2.  call temp:= `read`(v0, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L14cdb8.  v2:= temp @kind wide;
  #L14cdba.  return v2 @kind wide;
  #L14cdbc.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L14cdbe.  v3:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.c` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L14cdc2.  call temp:= `getConnection`(v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L14cdc8.  v3:= temp @kind object;
  #L14cdca.  call `noNewExchanges$okhttp`(v3) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges$okhttp:()V` @kind virtual;
  #L14cdd0.  call `b`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.b:()V` @kind virtual;
  #L14cdd6.  throw v2;
  catch `java.io.IOException` @[L14cda6..L14cdba] goto L14cdbc;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1ExchangeCodec$a` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$a;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14cdf8.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$a.a` @type ^`okio.ForwardingTimeout` @kind object;
  #L14cdfc.  return v0 @kind object;
}
