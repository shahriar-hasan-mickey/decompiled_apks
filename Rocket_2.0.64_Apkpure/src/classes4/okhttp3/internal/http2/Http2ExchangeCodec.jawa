record `okhttp3.internal.http2.Http2ExchangeCodec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.ExchangeCodec` @kind interface {
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2ExchangeCodec.a` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Protocol` `okhttp3.internal.http2.Http2ExchangeCodec.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http2.Http2ExchangeCodec.c` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.http2.Http2ExchangeCodec.d` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.RealInterceptorChain` `okhttp3.internal.http2.Http2ExchangeCodec.e` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2ExchangeCodec.f` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.internal.http2.Http2ExchangeCodec$Companion` `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L152790.  v0:= new `okhttp3.internal.http2.Http2ExchangeCodec$Companion`;
  #L152794.  v1:= 0I;
  #L152796.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L15279c.  `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` := v0 @kind object;
  #L1527a0.  v2:= "connection" @kind object;
  #L1527a4.  v3:= "host" @kind object;
  #L1527a8.  v4:= "keep-alive" @kind object;
  #L1527ac.  v5:= "proxy-connection" @kind object;
  #L1527b0.  v6:= "te" @kind object;
  #L1527b4.  v7:= "transfer-encoding" @kind object;
  #L1527b8.  v8:= "encoding" @kind object;
  #L1527bc.  v9:= "upgrade" @kind object;
  #L1527c0.  v10:= ":method" @kind object;
  #L1527c4.  v11:= ":path" @kind object;
  #L1527c8.  v12:= ":scheme" @kind object;
  #L1527cc.  v13:= ":authority" @kind object;
  #L1527d0.  temp:= new `java.lang.String`[v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13];
  #L1527d6.  v0:= temp @kind object;
  #L1527d8.  call temp:= `immutableListOf`(v0) @signature `Lokhttp3/internal/Util;.immutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1527de.  v0:= temp @kind object;
  #L1527e0.  `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @type ^`java.util.List` := v0 @kind object;
  #L1527e4.  v1:= "connection" @kind object;
  #L1527e8.  v2:= "host" @kind object;
  #L1527ec.  v3:= "keep-alive" @kind object;
  #L1527f0.  v4:= "proxy-connection" @kind object;
  #L1527f4.  v5:= "te" @kind object;
  #L1527f8.  v6:= "transfer-encoding" @kind object;
  #L1527fc.  v7:= "encoding" @kind object;
  #L152800.  v8:= "upgrade" @kind object;
  #L152804.  temp:= new `java.lang.String`[v1, v2, v3, v4, v5, v6, v7, v8];
  #L15280a.  v0:= temp @kind object;
  #L15280c.  call temp:= `immutableListOf`(v0) @signature `Lokhttp3/internal/Util;.immutableListOf:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L152812.  v0:= temp @kind object;
  #L152814.  `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @type ^`java.util.List` := v0 @kind object;
  #L152818.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.internal.connection.RealConnection` v3 @kind object, `okhttp3.internal.http.RealInterceptorChain` v4 @kind object, `okhttp3.internal.http2.Http2Connection` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/RealConnection;Lokhttp3/internal/http/RealInterceptorChain;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15282c.  v0:= "client" @kind object;
  #L152830.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L152836.  v0:= "connection" @kind object;
  #L15283a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L152840.  v0:= "chain" @kind object;
  #L152844.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15284a.  v0:= "http2Connection" @kind object;
  #L15284e.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L152854.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15285a.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.d` @type ^`okhttp3.internal.connection.RealConnection` := v3 @kind object;
  #L15285e.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` := v4 @kind object;
  #L152862.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` := v5 @kind object;
  #L152866.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L15286c.  v2:= temp @kind object;
  #L15286e.  v3:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L152872.  call temp:= `contains`(v2, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L152878.  v2:= temp;
  #L15287a.  if v2 == 0 then goto L152880;
  #L15287e.  goto L152884;
  #L152880.  v3:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L152884.  v1.`okhttp3.internal.http2.Http2ExchangeCodec.b` @type ^`okhttp3.Protocol` := v3 @kind object;
  #L152888.  return @kind void;
}
procedure `java.util.List` `access$getHTTP_2_SKIPPED_REQUEST_HEADERS$cp`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.access$getHTTP_2_SKIPPED_REQUEST_HEADERS$cp:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L152640.  v0:= `@@okhttp3.internal.http2.Http2ExchangeCodec.g` @type ^`java.util.List` @kind object;
  #L152644.  return v0 @kind object;
}
procedure `java.util.List` `access$getHTTP_2_SKIPPED_RESPONSE_HEADERS$cp`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.access$getHTTP_2_SKIPPED_RESPONSE_HEADERS$cp:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L152658.  v0:= `@@okhttp3.internal.http2.Http2ExchangeCodec.h` @type ^`java.util.List` @kind object;
  #L15265c.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15289c.  v0:= 1I;
  #L15289e.  v2.`okhttp3.internal.http2.Http2ExchangeCodec.c` @type ^`boolean` := v0 @kind boolean;
  #L1528a2.  v0:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1528a6.  if v0 == 0 then goto L1528b4;
  #L1528aa.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1528ae.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1528b4.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2ExchangeCodec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;

  #L152730.  v2:= "request" @kind object;
  #L152734.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15273a.  v1:= v0.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L15273e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L152744.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L15274a.  v1:= temp @kind object;
  #L15274c.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1528c8.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1528cc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1528d2.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L1528d8.  v0:= temp @kind object;
  #L1528da.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1528e0.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1528f4.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1528f8.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1528fe.  return @kind void;
}
procedure `okhttp3.internal.connection.RealConnection` `getConnection`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.getConnection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152718.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.d` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L15271c.  return v0 @kind object;
}
procedure `okio.Source` `openResponseBodySource`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152760.  v0:= "response" @kind object;
  #L152764.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15276a.  v2:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L15276e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L152774.  call temp:= `getSource$okhttp`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource$okhttp:()Lokhttp3/internal/http2/Http2Stream$FramingSource;` @kind virtual;
  #L15277a.  v2:= temp @kind object;
  #L15277c.  return v2 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v3 @kind this, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1526cc.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1526d0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1526d6.  call temp:= `takeHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L1526dc.  v0:= temp @kind object;
  #L1526de.  v1:= `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` @kind object;
  #L1526e2.  v2:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.b` @type ^`okhttp3.Protocol` @kind object;
  #L1526e6.  call temp:= `readHttp2HeadersList`(v1, v0, v2) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1526ec.  v0:= temp @kind object;
  #L1526ee.  if v4 == 0 then goto L152704;
  #L1526f2.  call temp:= `getCode$okhttp`(v0) @signature `Lokhttp3/Response$Builder;.getCode$okhttp:()I` @kind virtual;
  #L1526f8.  v4:= temp;
  #L1526fa.  v1:= 100I;
  #L1526fe.  if v4 != v1 then goto L152704;
  #L152702.  v0:= 0I;
  #L152704.  return v0 @kind object;
}
procedure `long` `reportedContentLength`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152670.  v0:= "response" @kind object;
  #L152674.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15267a.  call temp:= `promisesBody`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.promisesBody:(Lokhttp3/Response;)Z` @kind static;
  #L152680.  v0:= temp;
  #L152682.  if v0 != 0 then goto L15268c;
  #L152686.  v0:= 0L;
  #L15268a.  goto L152694;
  #L15268c.  call temp:= `headersContentLength`(v3) @signature `Lokhttp3/internal/Util;.headersContentLength:(Lokhttp3/Response;)J` @kind static;
  #L152692.  v0:= temp @kind wide;
  #L152694.  return v0 @kind wide;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1526a8.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1526ac.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1526b2.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.trailers:()Lokhttp3/Headers;` @kind virtual;
  #L1526b8.  v0:= temp @kind object;
  #L1526ba.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L152910.  v0:= "request" @kind object;
  #L152914.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15291a.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L15291e.  if v0 == 0 then goto L152924;
  #L152922.  return @kind void;
  #L152924.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L15292a.  v0:= temp @kind object;
  #L15292c.  if v0 == 0 then goto L152934;
  #L152930.  v0:= 1I;
  #L152932.  goto L152936;
  #L152934.  v0:= 0I;
  #L152936.  v1:= `@@okhttp3.internal.http2.Http2ExchangeCodec.Companion` @type ^`okhttp3.internal.http2.Http2ExchangeCodec$Companion` @kind object;
  #L15293a.  call temp:= `http2HeadersList`(v1, v4) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec$Companion;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind virtual;
  #L152940.  v4:= temp @kind object;
  #L152942.  v1:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.f` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L152946.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L15294c.  v4:= temp @kind object;
  #L15294e.  v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L152952.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.c` @type ^`boolean` @kind boolean;
  #L152956.  if v4 != 0 then goto L1529ac;
  #L15295a.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L15295e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L152964.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L15296a.  v4:= temp @kind object;
  #L15296c.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` @kind object;
  #L152970.  call temp:= `getReadTimeoutMillis$okhttp`(v0) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getReadTimeoutMillis$okhttp:()I` @kind virtual;
  #L152976.  v0:= temp;
  #L152978.  v0:= (`long`) v0 @kind i2l;
  #L15297a.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L15297e.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L152984.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L152988.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L15298e.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L152994.  v4:= temp @kind object;
  #L152996.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.e` @type ^`okhttp3.internal.http.RealInterceptorChain` @kind object;
  #L15299a.  call temp:= `getWriteTimeoutMillis$okhttp`(v0) @signature `Lokhttp3/internal/http/RealInterceptorChain;.getWriteTimeoutMillis$okhttp:()I` @kind virtual;
  #L1529a0.  v0:= temp;
  #L1529a2.  v0:= (`long`) v0 @kind i2l;
  #L1529a4.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L1529aa.  return @kind void;
  #L1529ac.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.a` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1529b0.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1529b6.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1529ba.  call `closeLater`(v4, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1529c0.  v4:= new `java.io.IOException`;
  #L1529c4.  v0:= "Canceled" @kind object;
  #L1529c8.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1529ce.  throw v4;
}
