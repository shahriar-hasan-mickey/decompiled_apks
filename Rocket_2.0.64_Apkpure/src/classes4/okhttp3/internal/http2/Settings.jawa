record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.a` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.b` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.internal.http2.Settings$Companion` `@@okhttp3.internal.http2.Settings.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Settings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L156b98.  v0:= new `okhttp3.internal.http2.Settings$Companion`;
  #L156b9c.  v1:= 0I;
  #L156b9e.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Settings$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L156ba4.  `@@okhttp3.internal.http2.Settings.Companion` @type ^`okhttp3.internal.http2.Settings$Companion` := v0 @kind object;
  #L156ba8.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L156bbc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L156bc2.  v0:= 10I;
  #L156bc6.  v0:= new `int`[v0];
  #L156bca.  v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] := v0 @kind object;
  #L156bce.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v7 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L156be0.  v0:= 0I;
  #L156be2.  v7.`okhttp3.internal.http2.Settings.a` @type ^`int` := v0;
  #L156be6.  v1:= v7.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156bea.  v2:= 0I;
  #L156bec.  v3:= 0I;
  #L156bee.  v4:= 0I;
  #L156bf0.  v5:= 6I;
  #L156bf2.  v6:= 0I;
  #L156bf4.  call `fill$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/ArraysKt;.fill$default:([IIIIILjava/lang/Object;)V` @kind static;
  #L156bfa.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L156a4c.  v0:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156a50.  v2:= v0[v2];
  #L156a54.  return v2;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1569f0.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L1569f4.  v0:= v0 ^& 4;
  #L1569f8.  v1:= 1I;
  #L1569fa.  if v0 == 0 then goto L156a12;
  #L1569fe.  v3:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156a02.  v0:= 2I;
  #L156a04.  v3:= v3[v0];
  #L156a08.  if v3 != v1 then goto L156a10;
  #L156a0c.  v3:= 1I;
  #L156a0e.  goto L156a12;
  #L156a10.  v3:= 0I;
  #L156a12.  return v3;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L156a68.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156a6c.  v0:= v0 ^& 2;
  #L156a70.  if v0 == 0 then goto L156a80;
  #L156a74.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156a78.  v1:= 1I;
  #L156a7a.  v0:= v0[v1];
  #L156a7e.  goto L156a82;
  #L156a80.  v0:= -1I;
  #L156a82.  return v0;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L156a94.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156a98.  v0:= v0 ^& 128;
  #L156a9c.  if v0 == 0 then goto L156aac;
  #L156aa0.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156aa4.  v1:= 7I;
  #L156aa6.  v0:= v0[v1];
  #L156aaa.  goto L156ab2;
  #L156aac.  v0:= 65535I;
  #L156ab2.  return v0;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L156ac4.  v0:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156ac8.  v0:= v0 ^& 16;
  #L156acc.  if v0 == 0 then goto L156adc;
  #L156ad0.  v0:= v2.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156ad4.  v1:= 4I;
  #L156ad6.  v0:= v0[v1];
  #L156ada.  goto L156ae2;
  #L156adc.  v0:= 2147483647I;
  #L156ae2.  return v0;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L156af4.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156af8.  v0:= v0 ^& 32;
  #L156afc.  if v0 == 0 then goto L156b0a;
  #L156b00.  v2:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156b04.  v0:= 5I;
  #L156b06.  v2:= v2[v0];
  #L156b0a.  return v2;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L156b1c.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156b20.  v0:= v0 ^& 64;
  #L156b24.  if v0 == 0 then goto L156b32;
  #L156b28.  v2:= v1.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156b2c.  v0:= 6I;
  #L156b2e.  v2:= v2[v0];
  #L156b32.  return v2;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L156a24.  v0:= 1I;
  #L156a26.  v3:= v0 ^< v3 @kind int;
  #L156a2a.  v1:= v2.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156a2e.  v3:= v3 ^& v1 @kind int;
  #L156a30.  if v3 == 0 then goto L156a36;
  #L156a34.  goto L156a38;
  #L156a36.  v0:= 0I;
  #L156a38.  return v0;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L156c0c.  v0:= "other" @kind object;
  #L156c10.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L156c16.  v0:= 0I;
  #L156c18.  v1:= 10I;
  #L156c1c.  if v0 >= v1 then goto L156c42;
  #L156c20.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L156c26.  v1:= temp;
  #L156c28.  if v1 != 0 then goto L156c2e;
  #L156c2c.  goto L156c3c;
  #L156c2e.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L156c34.  v1:= temp;
  #L156c36.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L156c3c.  v0:= v0 + 1;
  #L156c40.  goto L156c18;
  #L156c42.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L156b64.  if v4 < 0 then goto L156b86;
  #L156b68.  v0:= v3.`okhttp3.internal.http2.Settings.b` @type ^`int`[] @kind object;
  #L156b6c.  v1:= length @variable v0;
  #L156b6e.  if v4 < v1 then goto L156b74;
  #L156b72.  goto L156b86;
  #L156b74.  v1:= 1I;
  #L156b76.  v1:= v1 ^< v4 @kind int;
  #L156b78.  v2:= v3.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156b7c.  v1:= v1 ^| v2 @kind int;
  #L156b7e.  v3.`okhttp3.internal.http2.Settings.a` @type ^`int` := v1;
  #L156b82.  v0[v4]:= v5;
  #L156b86.  return v3 @kind object;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L156b44.  v0:= v1.`okhttp3.internal.http2.Settings.a` @type ^`int`;
  #L156b48.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L156b4e.  v0:= temp;
  #L156b50.  return v0;
}
