record `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.concurrent.Task` @kind class {
  `java.lang.String` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.e` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.f` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @AccessFlag FINAL_SYNTHETIC;
  `int` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.h` @AccessFlag FINAL_SYNTHETIC;
  `okio.Buffer` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.i` @AccessFlag FINAL_SYNTHETIC;
  `int` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.j` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.k` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 , `java.lang.String` v3 @kind object, `boolean` v4 , `okhttp3.internal.http2.Http2Connection` v5 @kind object, `int` v6 , `okio.Buffer` v7 @kind object, `int` v8 , `boolean` v9 ) @signature `Lokhttp3/internal/http2/Http2Connection$pushDataLater$$inlined$execute$1;.<init>:(Ljava/lang/String;ZLjava/lang/String;ZLokhttp3/internal/http2/Http2Connection;ILokio/Buffer;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L150d04.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.e` @type ^`java.lang.String` := v1 @kind object;
  #L150d08.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.f` @type ^`boolean` := v2 @kind boolean;
  #L150d0c.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @type ^`okhttp3.internal.http2.Http2Connection` := v5 @kind object;
  #L150d10.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.h` @type ^`int` := v6;
  #L150d14.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.i` @type ^`okio.Buffer` := v7 @kind object;
  #L150d18.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.j` @type ^`int` := v8;
  #L150d1c.  v0.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.k` @type ^`boolean` := v9 @kind boolean;
  #L150d20.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/concurrent/Task;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L150d26.  return @kind void;
}
procedure `long` `runOnce`(`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection$pushDataLater$$inlined$execute$1;.runOnce:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L150c50.  v0:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L150c54.  call temp:= `access$getPushObserver$p`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.access$getPushObserver$p:(Lokhttp3/internal/http2/Http2Connection;)Lokhttp3/internal/http2/PushObserver;` @kind static;
  #L150c5a.  v0:= temp @kind object;
  #L150c5c.  v1:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.h` @type ^`int`;
  #L150c60.  v2:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.i` @type ^`okio.Buffer` @kind object;
  #L150c64.  v3:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.j` @type ^`int`;
  #L150c68.  v4:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.k` @type ^`boolean` @kind boolean;
  #L150c6c.  call temp:= `onData`(v0, v1, v2, v3, v4) @signature `Lokhttp3/internal/http2/PushObserver;.onData:(ILokio/BufferedSource;IZ)Z` @kind interface;
  #L150c72.  v0:= temp;
  #L150c74.  if v0 == 0 then goto L150c92;
  #L150c78.  v1:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L150c7c.  call temp:= `getWriter`(v1) @signature `Lokhttp3/internal/http2/Http2Connection;.getWriter:()Lokhttp3/internal/http2/Http2Writer;` @kind virtual;
  #L150c82.  v1:= temp @kind object;
  #L150c84.  v2:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.h` @type ^`int`;
  #L150c88.  v3:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L150c8c.  call `rstStream`(v1, v2, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L150c92.  if v0 != 0 then goto L150c9e;
  #L150c96.  v0:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.k` @type ^`boolean` @kind boolean;
  #L150c9a.  if v0 == 0 then goto L150ccc;
  #L150c9e.  v0:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L150ca2.  @monitorenter v0
  #L150ca4.  v1:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.g` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L150ca8.  call temp:= `access$getCurrentPushRequests$p`(v1) @signature `Lokhttp3/internal/http2/Http2Connection;.access$getCurrentPushRequests$p:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/Set;` @kind static;
  #L150cae.  v1:= temp @kind object;
  #L150cb0.  v2:= v5.`okhttp3.internal.http2.Http2Connection$pushDataLater$$inlined$execute$1.h` @type ^`int`;
  #L150cb4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L150cba.  v2:= temp @kind object;
  #L150cbc.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L150cc2.  @monitorexit v0
  #L150cc4.  goto L150ccc;
  #L150cc6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L150cc8.  @monitorexit v0
  #L150cca.  throw v1;
  #L150ccc.  v0:= -1L;
  #L150cd0.  return v0 @kind wide;
  catch `java.io.IOException` @[L150c50..L150ca4] goto L150ccc;
  catch `java.lang.Throwable` @[L150ca4..L150cc2] goto L150cc6;
  catch `java.io.IOException` @[L150cc2..L150ccc] goto L150ccc;
}
