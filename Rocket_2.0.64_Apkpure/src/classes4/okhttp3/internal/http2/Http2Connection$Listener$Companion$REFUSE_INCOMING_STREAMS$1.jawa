record `okhttp3.internal.http2.Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http2.Http2Connection$Listener` @kind class {
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1` v0 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L14ffd8.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Http2Connection$Listener;.<init>:()V` @kind direct;
  #L14ffde.  return @kind void;
}
procedure `void` `onStream`(`okhttp3.internal.http2.Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1` v2 @kind this, `okhttp3.internal.http2.Http2Stream` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1;.onStream:(Lokhttp3/internal/http2/Http2Stream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14fff0.  v0:= "stream" @kind object;
  #L14fff4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14fffa.  v0:= `@@okhttp3.internal.http2.ErrorCode.REFUSED_STREAM` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L14fffe.  v1:= 0I;
  #L150000.  call `close`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V` @kind virtual;
  #L150006.  return @kind void;
}
