record `okhttp3.internal.http2.ErrorCode$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`okhttp3.internal.http2.ErrorCode$Companion` v0 @kind this) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L14e178.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14e17e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.ErrorCode$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L14e190.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.<init>:()V` @kind direct;
  #L14e196.  return @kind void;
}
procedure `okhttp3.internal.http2.ErrorCode` `fromHttp2`(`okhttp3.internal.http2.ErrorCode$Companion` v6 @kind this, `int` v7 ) @signature `Lokhttp3/internal/http2/ErrorCode$Companion;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14e130.  call temp:= `values`() @signature `Lokhttp3/internal/http2/ErrorCode;.values:()[Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L14e136.  v0:= temp @kind object;
  #L14e138.  v1:= length @variable v0;
  #L14e13a.  v2:= 0I;
  #L14e13c.  v3:= 0I;
  #L14e13e.  if v3 >= v1 then goto L14e164;
  #L14e142.  v4:= v0[v3] @kind object;
  #L14e146.  call temp:= `getHttpCode`(v4) @signature `Lokhttp3/internal/http2/ErrorCode;.getHttpCode:()I` @kind virtual;
  #L14e14c.  v5:= temp;
  #L14e14e.  if v5 != v7 then goto L14e156;
  #L14e152.  v5:= 1I;
  #L14e154.  goto L14e158;
  #L14e156.  v5:= 0I;
  #L14e158.  if v5 == 0 then goto L14e15e;
  #L14e15c.  goto L14e166;
  #L14e15e.  v3:= v3 + 1;
  #L14e162.  goto L14e13e;
  #L14e164.  v4:= 0I;
  #L14e166.  return v4 @kind object;
}
