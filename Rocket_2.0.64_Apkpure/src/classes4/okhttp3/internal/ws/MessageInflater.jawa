record `okhttp3.internal.ws.MessageInflater` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.Buffer` `okhttp3.internal.ws.MessageInflater.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okhttp3.internal.ws.MessageInflater.b` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okhttp3.internal.ws.MessageInflater.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.ws.MessageInflater.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.ws.MessageInflater` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/ws/MessageInflater;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15c0a4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c0aa.  v2.`okhttp3.internal.ws.MessageInflater.d` @type ^`boolean` := v3 @kind boolean;
  #L15c0ae.  v3:= new `okio.Buffer`;
  #L15c0b2.  call `<init>`(v3) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L15c0b8.  v2.`okhttp3.internal.ws.MessageInflater.a` @type ^`okio.Buffer` := v3 @kind object;
  #L15c0bc.  v0:= new `java.util.zip.Inflater`;
  #L15c0c0.  v1:= 1I;
  #L15c0c2.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L15c0c8.  v2.`okhttp3.internal.ws.MessageInflater.b` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L15c0cc.  v1:= new `okio.InflaterSource`;
  #L15c0d0.  call `<init>`(v1, v3, v0) @signature `Lokio/InflaterSource;.<init>:(Lokio/Source;Ljava/util/zip/Inflater;)V` @kind direct;
  #L15c0d6.  v2.`okhttp3.internal.ws.MessageInflater.c` @type ^`okio.InflaterSource` := v1 @kind object;
  #L15c0da.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.ws.MessageInflater` v1 @kind this) @signature `Lokhttp3/internal/ws/MessageInflater;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c0ec.  v0:= v1.`okhttp3.internal.ws.MessageInflater.c` @type ^`okio.InflaterSource` @kind object;
  #L15c0f0.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L15c0f6.  return @kind void;
}
procedure `void` `inflate`(`okhttp3.internal.ws.MessageInflater` v5 @kind this, `okio.Buffer` v6 @kind object) @signature `Lokhttp3/internal/ws/MessageInflater;.inflate:(Lokio/Buffer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c108.  v0:= "buffer" @kind object;
  #L15c10c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L15c112.  v0:= v5.`okhttp3.internal.ws.MessageInflater.a` @type ^`okio.Buffer` @kind object;
  #L15c116.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L15c11c.  v0:= temp @kind wide;
  #L15c11e.  v2:= 0L;
  #L15c122.  v4:= lcmp(v0, v2);
  #L15c126.  if v4 != 0 then goto L15c12e;
  #L15c12a.  v0:= 1I;
  #L15c12c.  goto L15c130;
  #L15c12e.  v0:= 0I;
  #L15c130.  if v0 == 0 then goto L15c1a4;
  #L15c134.  v0:= v5.`okhttp3.internal.ws.MessageInflater.d` @type ^`boolean` @kind boolean;
  #L15c138.  if v0 == 0 then goto L15c146;
  #L15c13c.  v0:= v5.`okhttp3.internal.ws.MessageInflater.b` @type ^`java.util.zip.Inflater` @kind object;
  #L15c140.  call `reset`(v0) @signature `Ljava/util/zip/Inflater;.reset:()V` @kind virtual;
  #L15c146.  v0:= v5.`okhttp3.internal.ws.MessageInflater.a` @type ^`okio.Buffer` @kind object;
  #L15c14a.  call temp:= `writeAll`(v0, v6) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @kind virtual;
  #L15c150.  v0:= v5.`okhttp3.internal.ws.MessageInflater.a` @type ^`okio.Buffer` @kind object;
  #L15c154.  v1:= 65535I;
  #L15c15a.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L15c160.  v0:= v5.`okhttp3.internal.ws.MessageInflater.b` @type ^`java.util.zip.Inflater` @kind object;
  #L15c164.  call temp:= `getBytesRead`(v0) @signature `Ljava/util/zip/Inflater;.getBytesRead:()J` @kind virtual;
  #L15c16a.  v0:= temp @kind wide;
  #L15c16c.  v2:= v5.`okhttp3.internal.ws.MessageInflater.a` @type ^`okio.Buffer` @kind object;
  #L15c170.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L15c176.  v2:= temp @kind wide;
  #L15c178.  v0:= v0 + v2 @kind long;
  #L15c17a.  v2:= v5.`okhttp3.internal.ws.MessageInflater.c` @type ^`okio.InflaterSource` @kind object;
  #L15c17e.  v3:= 9223372036854775807L;
  #L15c188.  call temp:= `readOrInflate`(v2, v6, v3) @signature `Lokio/InflaterSource;.readOrInflate:(Lokio/Buffer;J)J` @kind virtual;
  #L15c18e.  v2:= v5.`okhttp3.internal.ws.MessageInflater.b` @type ^`java.util.zip.Inflater` @kind object;
  #L15c192.  call temp:= `getBytesRead`(v2) @signature `Ljava/util/zip/Inflater;.getBytesRead:()J` @kind virtual;
  #L15c198.  v2:= temp @kind wide;
  #L15c19a.  v4:= lcmp(v2, v0);
  #L15c19e.  if v4 < 0 then goto L15c17a;
  #L15c1a2.  return @kind void;
  #L15c1a4.  v6:= new `java.lang.IllegalArgumentException`;
  #L15c1a8.  v0:= "Failed requirement." @kind object;
  #L15c1ac.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c1b2.  v0:= temp @kind object;
  #L15c1b4.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c1ba.  throw v6;
}
