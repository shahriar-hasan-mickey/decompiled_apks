record `okhttp3.internal.ws.RealWebSocket$Close` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.ws.RealWebSocket$Close.a` @AccessFlag PRIVATE_FINAL;
  `okio.ByteString` `okhttp3.internal.ws.RealWebSocket$Close.b` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.ws.RealWebSocket$Close.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.ws.RealWebSocket$Close` v0 @kind this, `int` v1 , `okio.ByteString` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/ws/RealWebSocket$Close;.<init>:(ILokio/ByteString;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15c214.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15c21a.  v0.`okhttp3.internal.ws.RealWebSocket$Close.a` @type ^`int` := v1;
  #L15c21e.  v0.`okhttp3.internal.ws.RealWebSocket$Close.b` @type ^`okio.ByteString` := v2 @kind object;
  #L15c222.  v0.`okhttp3.internal.ws.RealWebSocket$Close.c` @type ^`long` := v3 @kind wide;
  #L15c226.  return @kind void;
}
procedure `long` `getCancelAfterCloseMillis`(`okhttp3.internal.ws.RealWebSocket$Close` v2 @kind this) @signature `Lokhttp3/internal/ws/RealWebSocket$Close;.getCancelAfterCloseMillis:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L15c1e4.  v0:= v2.`okhttp3.internal.ws.RealWebSocket$Close.c` @type ^`long` @kind wide;
  #L15c1e8.  return v0 @kind wide;
}
procedure `int` `getCode`(`okhttp3.internal.ws.RealWebSocket$Close` v1 @kind this) @signature `Lokhttp3/internal/ws/RealWebSocket$Close;.getCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L15c1cc.  v0:= v1.`okhttp3.internal.ws.RealWebSocket$Close.a` @type ^`int`;
  #L15c1d0.  return v0;
}
procedure `okio.ByteString` `getReason`(`okhttp3.internal.ws.RealWebSocket$Close` v1 @kind this) @signature `Lokhttp3/internal/ws/RealWebSocket$Close;.getReason:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L15c1fc.  v0:= v1.`okhttp3.internal.ws.RealWebSocket$Close.b` @type ^`okio.ByteString` @kind object;
  #L15c200.  return v0 @kind object;
}
