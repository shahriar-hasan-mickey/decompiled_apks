record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.ConnectionSpec$Builder.a` @AccessFlag PRIVATE;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.b` @AccessFlag PRIVATE;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.ConnectionSpec$Builder.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L12fef0.  v0:= "connectionSpec" @kind object;
  #L12fef4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12fefa.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12ff00.  call temp:= `isTls`(v2) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L12ff06.  v0:= temp;
  #L12ff08.  v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L12ff0c.  call temp:= `access$getCipherSuitesAsString$p`(v2) @signature `Lokhttp3/ConnectionSpec;.access$getCipherSuitesAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L12ff12.  v0:= temp @kind object;
  #L12ff14.  v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L12ff18.  call temp:= `access$getTlsVersionsAsString$p`(v2) @signature `Lokhttp3/ConnectionSpec;.access$getTlsVersionsAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L12ff1e.  v0:= temp @kind object;
  #L12ff20.  v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L12ff24.  call temp:= `supportsTlsExtensions`(v2) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @kind virtual;
  #L12ff2a.  v2:= temp;
  #L12ff2c.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L12ff30.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L12fed4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12feda.  v0.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v1 @kind boolean;
  #L12fede.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12fbec.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fbf0.  if v0 == 0 then goto L12fbfc;
  #L12fbf4.  v0:= 0I;
  #L12fbf6.  v2.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L12fbfa.  return v2 @kind object;
  #L12fbfc.  v0:= new `java.lang.IllegalArgumentException`;
  #L12fc00.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L12fc04.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fc0a.  v1:= temp @kind object;
  #L12fc0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fc12.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12fc24.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fc28.  if v0 == 0 then goto L12fc34;
  #L12fc2c.  v0:= 0I;
  #L12fc2e.  v2.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L12fc32.  return v2 @kind object;
  #L12fc34.  v0:= new `java.lang.IllegalArgumentException`;
  #L12fc38.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L12fc3c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fc42.  v1:= temp @kind object;
  #L12fc44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fc4a.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v5 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L12fbc0.  v0:= new `okhttp3.ConnectionSpec`;
  #L12fbc4.  v1:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fbc8.  v2:= v5.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` @kind boolean;
  #L12fbcc.  v3:= v5.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] @kind object;
  #L12fbd0.  v4:= v5.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] @kind object;
  #L12fbd4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.<init>:(ZZ[Ljava/lang/String;[Ljava/lang/String;)V` @kind direct;
  #L12fbda.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12fc5c.  v0:= "cipherSuites" @kind object;
  #L12fc60.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12fc66.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fc6a.  if v0 == 0 then goto L12fcb6;
  #L12fc6e.  v0:= length @variable v3;
  #L12fc70.  v1:= 1I;
  #L12fc72.  if v0 != 0 then goto L12fc7a;
  #L12fc76.  v0:= 1I;
  #L12fc78.  goto L12fc7c;
  #L12fc7a.  v0:= 0I;
  #L12fc7c.  v0:= v0 ^~ v1 @kind int;
  #L12fc7e.  if v0 == 0 then goto L12fc9e;
  #L12fc82.  call temp:= `clone`(v3) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L12fc88.  v3:= temp @kind object;
  #L12fc8a.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.String>" @kind object;
  #L12fc8e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L12fc94.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L12fc98.  v2.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v3 @kind object;
  #L12fc9c.  return v2 @kind object;
  #L12fc9e.  v3:= new `java.lang.IllegalArgumentException`;
  #L12fca2.  v0:= "At least one cipher suite is required" @kind object;
  #L12fca6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fcac.  v0:= temp @kind object;
  #L12fcae.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fcb4.  throw v3;
  #L12fcb6.  v3:= new `java.lang.IllegalArgumentException`;
  #L12fcba.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L12fcbe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fcc4.  v0:= temp @kind object;
  #L12fcc6.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fccc.  throw v3;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v5 @kind this, `okhttp3.CipherSuite`[] v6 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L12fce0.  v0:= "cipherSuites" @kind object;
  #L12fce4.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12fcea.  v0:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fcee.  if v0 == 0 then goto L12fd52;
  #L12fcf2.  v0:= new `java.util.ArrayList`;
  #L12fcf6.  v1:= length @variable v6;
  #L12fcf8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L12fcfe.  v1:= length @variable v6;
  #L12fd00.  v2:= 0I;
  #L12fd02.  v3:= 0I;
  #L12fd04.  if v3 >= v1 then goto L12fd20;
  #L12fd08.  v4:= v6[v3] @kind object;
  #L12fd0c.  call temp:= `javaName`(v4) @signature `Lokhttp3/CipherSuite;.javaName:()Ljava/lang/String;` @kind virtual;
  #L12fd12.  v4:= temp @kind object;
  #L12fd14.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L12fd1a.  v3:= v3 + 1;
  #L12fd1e.  goto L12fd04;
  #L12fd20.  v6:= new `java.lang.String`[v2];
  #L12fd24.  call temp:= `toArray`(v0, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L12fd2a.  v6:= temp @kind object;
  #L12fd2c.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L12fd30.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L12fd36.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L12fd3a.  v0:= length @variable v6;
  #L12fd3c.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L12fd42.  v6:= temp @kind object;
  #L12fd44.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L12fd48.  call temp:= `cipherSuites`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L12fd4e.  v6:= temp @kind object;
  #L12fd50.  return v6 @kind object;
  #L12fd52.  v6:= new `java.lang.IllegalArgumentException`;
  #L12fd56.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L12fd5a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fd60.  v0:= temp @kind object;
  #L12fd62.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fd68.  throw v6;
}
procedure `java.lang.String`[] `getCipherSuites$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getCipherSuites$okhttp:()[Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12fb90.  v0:= v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] @kind object;
  #L12fb94.  return v0 @kind object;
}
procedure `boolean` `getSupportsTlsExtensions$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getSupportsTlsExtensions$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12fb60.  v0:= v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` @kind boolean;
  #L12fb64.  return v0;
}
procedure `boolean` `getTls$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getTls$okhttp:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12fb78.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fb7c.  return v0;
}
procedure `java.lang.String`[] `getTlsVersions$okhttp`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.getTlsVersions$okhttp:()[Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12fba8.  v0:= v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] @kind object;
  #L12fbac.  return v0 @kind object;
}
procedure `void` `setCipherSuites$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.setCipherSuites$okhttp:([Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L12ff44.  v0.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v1 @kind object;
  #L12ff48.  return @kind void;
}
procedure `void` `setSupportsTlsExtensions$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.setSupportsTlsExtensions$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L12ff5c.  v0.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v1 @kind boolean;
  #L12ff60.  return @kind void;
}
procedure `void` `setTls$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.setTls$okhttp:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L12ff74.  v0.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v1 @kind boolean;
  #L12ff78.  return @kind void;
}
procedure `void` `setTlsVersions$okhttp`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.setTlsVersions$okhttp:([Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L12ff8c.  v0.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v1 @kind object;
  #L12ff90.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12fd7c.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fd80.  if v0 == 0 then goto L12fd8a;
  #L12fd84.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L12fd88.  return v1 @kind object;
  #L12fd8a.  v2:= new `java.lang.IllegalArgumentException`;
  #L12fd8e.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L12fd92.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fd98.  v0:= temp @kind object;
  #L12fd9a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fda0.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12fdb4.  v0:= "tlsVersions" @kind object;
  #L12fdb8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12fdbe.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fdc2.  if v0 == 0 then goto L12fe0e;
  #L12fdc6.  v0:= length @variable v3;
  #L12fdc8.  v1:= 1I;
  #L12fdca.  if v0 != 0 then goto L12fdd2;
  #L12fdce.  v0:= 1I;
  #L12fdd0.  goto L12fdd4;
  #L12fdd2.  v0:= 0I;
  #L12fdd4.  v0:= v0 ^~ v1 @kind int;
  #L12fdd6.  if v0 == 0 then goto L12fdf6;
  #L12fdda.  call temp:= `clone`(v3) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L12fde0.  v3:= temp @kind object;
  #L12fde2.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.String>" @kind object;
  #L12fde6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L12fdec.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L12fdf0.  v2.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v3 @kind object;
  #L12fdf4.  return v2 @kind object;
  #L12fdf6.  v3:= new `java.lang.IllegalArgumentException`;
  #L12fdfa.  v0:= "At least one TLS version is required" @kind object;
  #L12fdfe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fe04.  v0:= temp @kind object;
  #L12fe06.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fe0c.  throw v3;
  #L12fe0e.  v3:= new `java.lang.IllegalArgumentException`;
  #L12fe12.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L12fe16.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fe1c.  v0:= temp @kind object;
  #L12fe1e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fe24.  throw v3;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v5 @kind this, `okhttp3.TlsVersion`[] v6 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L12fe38.  v0:= "tlsVersions" @kind object;
  #L12fe3c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12fe42.  v0:= v5.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L12fe46.  if v0 == 0 then goto L12feaa;
  #L12fe4a.  v0:= new `java.util.ArrayList`;
  #L12fe4e.  v1:= length @variable v6;
  #L12fe50.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L12fe56.  v1:= length @variable v6;
  #L12fe58.  v2:= 0I;
  #L12fe5a.  v3:= 0I;
  #L12fe5c.  if v3 >= v1 then goto L12fe78;
  #L12fe60.  v4:= v6[v3] @kind object;
  #L12fe64.  call temp:= `javaName`(v4) @signature `Lokhttp3/TlsVersion;.javaName:()Ljava/lang/String;` @kind virtual;
  #L12fe6a.  v4:= temp @kind object;
  #L12fe6c.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L12fe72.  v3:= v3 + 1;
  #L12fe76.  goto L12fe5c;
  #L12fe78.  v6:= new `java.lang.String`[v2];
  #L12fe7c.  call temp:= `toArray`(v0, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L12fe82.  v6:= temp @kind object;
  #L12fe84.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L12fe88.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L12fe8e.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L12fe92.  v0:= length @variable v6;
  #L12fe94.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L12fe9a.  v6:= temp @kind object;
  #L12fe9c.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L12fea0.  call temp:= `tlsVersions`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L12fea6.  v6:= temp @kind object;
  #L12fea8.  return v6 @kind object;
  #L12feaa.  v6:= new `java.lang.IllegalArgumentException`;
  #L12feae.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L12feb2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12feb8.  v0:= temp @kind object;
  #L12feba.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12fec0.  throw v6;
}
