record `okhttp3.CertificatePinner$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `okhttp3.CertificatePinner` `okhttp3.CertificatePinner$a.a` @AccessFlag FINAL_SYNTHETIC;
  `java.util.List` `okhttp3.CertificatePinner$a.b` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `okhttp3.CertificatePinner$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner$a` v0 @kind this, `okhttp3.CertificatePinner` v1 @kind object, `java.util.List` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/CertificatePinner$a;.<init>:(Lokhttp3/CertificatePinner;Ljava/util/List;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L12e4b0.  v0.`okhttp3.CertificatePinner$a.a` @type ^`okhttp3.CertificatePinner` := v1 @kind object;
  #L12e4b4.  v0.`okhttp3.CertificatePinner$a.b` @type ^`java.util.List` := v2 @kind object;
  #L12e4b8.  v0.`okhttp3.CertificatePinner$a.c` @type ^`java.lang.String` := v3 @kind object;
  #L12e4bc.  v1:= 0I;
  #L12e4be.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L12e4c4.  return @kind void;
}
procedure `java.util.List` `a`(`okhttp3.CertificatePinner$a` v4 @kind this) @signature `Lokhttp3/CertificatePinner$a;.a:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L12e428.  v0:= v4.`okhttp3.CertificatePinner$a.a` @type ^`okhttp3.CertificatePinner` @kind object;
  #L12e42c.  call temp:= `getCertificateChainCleaner$okhttp`(v0) @signature `Lokhttp3/CertificatePinner;.getCertificateChainCleaner$okhttp:()Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L12e432.  v0:= temp @kind object;
  #L12e434.  if v0 == 0 then goto L12e44e;
  #L12e438.  v1:= v4.`okhttp3.CertificatePinner$a.b` @type ^`java.util.List` @kind object;
  #L12e43c.  v2:= v4.`okhttp3.CertificatePinner$a.c` @type ^`java.lang.String` @kind object;
  #L12e440.  call temp:= `clean`(v0, v1, v2) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.clean:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L12e446.  v0:= temp @kind object;
  #L12e448.  if v0 == 0 then goto L12e44e;
  #L12e44c.  goto L12e452;
  #L12e44e.  v0:= v4.`okhttp3.CertificatePinner$a.b` @type ^`java.util.List` @kind object;
  #L12e452.  v1:= new `java.util.ArrayList`;
  #L12e456.  v2:= 10I;
  #L12e45a.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L12e460.  v2:= temp;
  #L12e462.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L12e468.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L12e46e.  v0:= temp @kind object;
  #L12e470.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L12e476.  v2:= temp;
  #L12e478.  if v2 == 0 then goto L12e49e;
  #L12e47c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L12e482.  v2:= temp @kind object;
  #L12e484.  v2:= (`java.security.cert.Certificate`) v2 @kind object;
  #L12e488.  v3:= "null cannot be cast to non-null type java.security.cert.X509Certificate" @kind object;
  #L12e48c.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L12e492.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L12e496.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L12e49c.  goto L12e470;
  #L12e49e.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`okhttp3.CertificatePinner$a` v1 @kind this) @signature `Lokhttp3/CertificatePinner$a;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L12e40c.  call temp:= `a`(v1) @signature `Lokhttp3/CertificatePinner$a;.a:()Ljava/util/List;` @kind virtual;
  #L12e412.  v0:= temp @kind object;
  #L12e414.  return v0 @kind object;
}
