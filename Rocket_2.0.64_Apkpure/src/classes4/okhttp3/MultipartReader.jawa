record `okhttp3.MultipartReader` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.ByteString` `okhttp3.MultipartReader.a` @AccessFlag PRIVATE_FINAL;
  `okio.ByteString` `okhttp3.MultipartReader.b` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.MultipartReader.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.MultipartReader.d` @AccessFlag PRIVATE;
  `boolean` `okhttp3.MultipartReader.e` @AccessFlag PRIVATE;
  `okhttp3.MultipartReader$a` `okhttp3.MultipartReader.f` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okhttp3.MultipartReader.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.MultipartReader.h` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.MultipartReader$Companion` `@@okhttp3.MultipartReader.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okio.Options` `@@okhttp3.MultipartReader.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/MultipartReader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L138cb8.  v0:= new `okhttp3.MultipartReader$Companion`;
  #L138cbc.  v1:= 0I;
  #L138cbe.  call `<init>`(v0, v1) @signature `Lokhttp3/MultipartReader$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L138cc4.  `@@okhttp3.MultipartReader.Companion` @type ^`okhttp3.MultipartReader$Companion` := v0 @kind object;
  #L138cc8.  v0:= `@@okio.Options.Companion` @type ^`okio.Options$Companion` @kind object;
  #L138ccc.  v1:= 4I;
  #L138cce.  v1:= new `okio.ByteString`[v1];
  #L138cd2.  v2:= `@@okio.ByteString.Companion` @type ^`okio.ByteString$Companion` @kind object;
  #L138cd6.  v3:= "\r\n" @kind object;
  #L138cda.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L138ce0.  v3:= temp @kind object;
  #L138ce2.  v4:= 0I;
  #L138ce4.  v1[v4]:= v3 @kind object;
  #L138ce8.  v3:= "--" @kind object;
  #L138cec.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L138cf2.  v3:= temp @kind object;
  #L138cf4.  v4:= 1I;
  #L138cf6.  v1[v4]:= v3 @kind object;
  #L138cfa.  v3:= " " @kind object;
  #L138cfe.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L138d04.  v3:= temp @kind object;
  #L138d06.  v4:= 2I;
  #L138d08.  v1[v4]:= v3 @kind object;
  #L138d0c.  v3:= "\t" @kind object;
  #L138d10.  call temp:= `encodeUtf8`(v2, v3) @signature `Lokio/ByteString$Companion;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind virtual;
  #L138d16.  v2:= temp @kind object;
  #L138d18.  v3:= 3I;
  #L138d1a.  v1[v3]:= v2 @kind object;
  #L138d1e.  call temp:= `of`(v0, v1) @signature `Lokio/Options$Companion;.of:([Lokio/ByteString;)Lokio/Options;` @kind virtual;
  #L138d24.  v0:= temp @kind object;
  #L138d26.  `@@okhttp3.MultipartReader.i` @type ^`okio.Options` := v0 @kind object;
  #L138d2a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.MultipartReader` v2 @kind this, `okhttp3.ResponseBody` v3 @kind object) @signature `Lokhttp3/MultipartReader;.<init>:(Lokhttp3/ResponseBody;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L138d3c.  v0:= "response" @kind object;
  #L138d40.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L138d46.  call temp:= `source`(v3) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L138d4c.  v0:= temp @kind object;
  #L138d4e.  call temp:= `contentType`(v3) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L138d54.  v3:= temp @kind object;
  #L138d56.  if v3 == 0 then goto L138d72;
  #L138d5a.  v1:= "boundary" @kind object;
  #L138d5e.  call temp:= `parameter`(v3, v1) @signature `Lokhttp3/MediaType;.parameter:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L138d64.  v3:= temp @kind object;
  #L138d66.  if v3 == 0 then goto L138d72;
  #L138d6a.  call `<init>`(v2, v0, v3) @signature `Lokhttp3/MultipartReader;.<init>:(Lokio/BufferedSource;Ljava/lang/String;)V` @kind direct;
  #L138d70.  return @kind void;
  #L138d72.  v3:= new `java.net.ProtocolException`;
  #L138d76.  v0:= "expected the Content-Type to have a boundary parameter" @kind object;
  #L138d7a.  call `<init>`(v3, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138d80.  throw v3;
}
procedure `void` `<init>`(`okhttp3.MultipartReader` v1 @kind this, `okio.BufferedSource` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/MultipartReader;.<init>:(Lokio/BufferedSource;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L138d94.  v0:= "source" @kind object;
  #L138d98.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L138d9e.  v0:= "boundary" @kind object;
  #L138da2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L138da8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L138dae.  v1.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` := v2 @kind object;
  #L138db2.  v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` := v3 @kind object;
  #L138db6.  v2:= new `okio.Buffer`;
  #L138dba.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L138dc0.  v0:= "--" @kind object;
  #L138dc4.  call temp:= `writeUtf8`(v2, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L138dca.  v2:= temp @kind object;
  #L138dcc.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L138dd2.  v2:= temp @kind object;
  #L138dd4.  call temp:= `readByteString`(v2) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L138dda.  v2:= temp @kind object;
  #L138ddc.  v1.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` := v2 @kind object;
  #L138de0.  v2:= new `okio.Buffer`;
  #L138de4.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L138dea.  v0:= "\r\n--" @kind object;
  #L138dee.  call temp:= `writeUtf8`(v2, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L138df4.  v2:= temp @kind object;
  #L138df6.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L138dfc.  v2:= temp @kind object;
  #L138dfe.  call temp:= `readByteString`(v2) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L138e04.  v2:= temp @kind object;
  #L138e06.  v1.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` := v2 @kind object;
  #L138e0a.  return @kind void;
}
procedure `long` `a`(`okhttp3.MultipartReader` v5 @kind this, `long` v6 ) @signature `Lokhttp3/MultipartReader;.a:(J)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L138a80.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138a84.  v1:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L138a88.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L138a8e.  v1:= temp;
  #L138a90.  v1:= (`long`) v1 @kind i2l;
  #L138a92.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L138a98.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138a9c.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L138aa2.  v0:= temp @kind object;
  #L138aa4.  v1:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L138aa8.  call temp:= `indexOf`(v0, v1) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @kind virtual;
  #L138aae.  v0:= temp @kind wide;
  #L138ab0.  v2:= -1L;
  #L138ab4.  v4:= lcmp(v0, v2);
  #L138ab8.  if v4 != 0 then goto L138af0;
  #L138abc.  v0:= v5.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138ac0.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L138ac6.  v0:= temp @kind object;
  #L138ac8.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L138ace.  v0:= temp @kind wide;
  #L138ad0.  v2:= v5.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L138ad4.  call temp:= `size`(v2) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L138ada.  v2:= temp;
  #L138adc.  v2:= (`long`) v2 @kind i2l;
  #L138ade.  v0:= v0 - v2 @kind long;
  #L138ae0.  v2:= 1L;
  #L138ae4.  v0:= v0 + v2 @kind long;
  #L138ae6.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L138aec.  v6:= temp @kind wide;
  #L138aee.  goto L138af8;
  #L138af0.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L138af6.  v6:= temp @kind wide;
  #L138af8.  return v6 @kind wide;
}
procedure `long` `access$currentPartBytesRemaining`(`okhttp3.MultipartReader` v0 @kind object, `long` v1 ) @signature `Lokhttp3/MultipartReader;.access$currentPartBytesRemaining:(Lokhttp3/MultipartReader;J)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L138a64.  call temp:= `a`(v0, v1) @signature `Lokhttp3/MultipartReader;.a:(J)J` @kind direct;
  #L138a6a.  v0:= temp @kind wide;
  #L138a6c.  return v0 @kind wide;
}
procedure `okio.Options` `access$getAfterBoundaryOptions$cp`() @signature `Lokhttp3/MultipartReader;.access$getAfterBoundaryOptions$cp:()Lokio/Options;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L138ca0.  v0:= `@@okhttp3.MultipartReader.i` @type ^`okio.Options` @kind object;
  #L138ca4.  return v0 @kind object;
}
procedure `okhttp3.MultipartReader$a` `access$getCurrentPart$p`(`okhttp3.MultipartReader` v0 @kind object) @signature `Lokhttp3/MultipartReader;.access$getCurrentPart$p:(Lokhttp3/MultipartReader;)Lokhttp3/MultipartReader$a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L138c70.  v0:= v0.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` @kind object;
  #L138c74.  return v0 @kind object;
}
procedure `okio.BufferedSource` `access$getSource$p`(`okhttp3.MultipartReader` v0 @kind object) @signature `Lokhttp3/MultipartReader;.access$getSource$p:(Lokhttp3/MultipartReader;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L138c88.  v0:= v0.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138c8c.  return v0 @kind object;
}
procedure `void` `access$setCurrentPart$p`(`okhttp3.MultipartReader` v0 @kind object, `okhttp3.MultipartReader$a` v1 @kind object) @signature `Lokhttp3/MultipartReader;.access$setCurrentPart$p:(Lokhttp3/MultipartReader;Lokhttp3/MultipartReader$a;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L138e1c.  v0.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v1 @kind object;
  #L138e20.  return @kind void;
}
procedure `java.lang.String` `boundary`(`okhttp3.MultipartReader` v1 @kind this) @signature `Lokhttp3/MultipartReader;.boundary:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L138a4c.  v0:= v1.`okhttp3.MultipartReader.h` @type ^`java.lang.String` @kind object;
  #L138a50.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.MultipartReader` v1 @kind this) @signature `Lokhttp3/MultipartReader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L138e34.  v0:= v1.`okhttp3.MultipartReader.d` @type ^`boolean` @kind boolean;
  #L138e38.  if v0 == 0 then goto L138e3e;
  #L138e3c.  return @kind void;
  #L138e3e.  v0:= 1I;
  #L138e40.  v1.`okhttp3.MultipartReader.d` @type ^`boolean` := v0 @kind boolean;
  #L138e44.  v0:= 0I;
  #L138e46.  v1.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v0 @kind object;
  #L138e4a.  v0:= v1.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138e4e.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L138e54.  return @kind void;
}
procedure `okhttp3.MultipartReader$Part` `nextPart`(`okhttp3.MultipartReader` v7 @kind this) @signature `Lokhttp3/MultipartReader;.nextPart:()Lokhttp3/MultipartReader$Part;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L138b0c.  v0:= v7.`okhttp3.MultipartReader.d` @type ^`boolean` @kind boolean;
  #L138b10.  v1:= 1I;
  #L138b12.  v0:= v0 ^~ v1 @kind int;
  #L138b14.  if v0 == 0 then goto L138c48;
  #L138b18.  v0:= v7.`okhttp3.MultipartReader.e` @type ^`boolean` @kind boolean;
  #L138b1c.  v2:= 0I;
  #L138b1e.  if v0 == 0 then goto L138b24;
  #L138b22.  return v2 @kind object;
  #L138b24.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L138b28.  v3:= 0L;
  #L138b2c.  if v0 != 0 then goto L138b5e;
  #L138b30.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138b34.  v5:= v7.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` @kind object;
  #L138b38.  call temp:= `rangeEquals`(v0, v3, v5) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L138b3e.  v0:= temp;
  #L138b40.  if v0 == 0 then goto L138b5e;
  #L138b44.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138b48.  v3:= v7.`okhttp3.MultipartReader.a` @type ^`okio.ByteString` @kind object;
  #L138b4c.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L138b52.  v3:= temp;
  #L138b54.  v3:= (`long`) v3 @kind i2l;
  #L138b56.  call `skip`(v0, v3) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L138b5c.  goto L138b8a;
  #L138b5e.  v5:= 8192L;
  #L138b62.  call temp:= `a`(v7, v5) @signature `Lokhttp3/MultipartReader;.a:(J)J` @kind direct;
  #L138b68.  v5:= temp @kind wide;
  #L138b6a.  v0:= lcmp(v5, v3);
  #L138b6e.  if v0 != 0 then goto L138c3c;
  #L138b72.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138b76.  v3:= v7.`okhttp3.MultipartReader.b` @type ^`okio.ByteString` @kind object;
  #L138b7a.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L138b80.  v3:= temp;
  #L138b82.  v3:= (`long`) v3 @kind i2l;
  #L138b84.  call `skip`(v0, v3) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L138b8a.  v0:= 0I;
  #L138b8c.  v3:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138b90.  v4:= `@@okhttp3.MultipartReader.i` @type ^`okio.Options` @kind object;
  #L138b94.  call temp:= `select`(v3, v4) @signature `Lokio/BufferedSource;.select:(Lokio/Options;)I` @kind interface;
  #L138b9a.  v3:= temp;
  #L138b9c.  v4:= -1I;
  #L138b9e.  v5:= "unexpected characters after boundary" @kind object;
  #L138ba2.  if v3 == v4 then goto L138c30;
  #L138ba6.  if v3 == 0 then goto L138bee;
  #L138baa.  if v3 == v1 then goto L138bc0;
  #L138bae.  v4:= 2I;
  #L138bb0.  if v3 == v4 then goto L138bbc;
  #L138bb4.  v4:= 3I;
  #L138bb6.  if v3 == v4 then goto L138bbc;
  #L138bba.  goto L138b8c;
  #L138bbc.  v0:= 1I;
  #L138bbe.  goto L138b8c;
  #L138bc0.  if v0 != 0 then goto L138be2;
  #L138bc4.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L138bc8.  if v0 == 0 then goto L138bd2;
  #L138bcc.  v7.`okhttp3.MultipartReader.e` @type ^`boolean` := v1 @kind boolean;
  #L138bd0.  return v2 @kind object;
  #L138bd2.  v0:= new `java.net.ProtocolException`;
  #L138bd6.  v1:= "expected at least 1 part" @kind object;
  #L138bda.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138be0.  throw v0;
  #L138be2.  v0:= new `java.net.ProtocolException`;
  #L138be6.  call `<init>`(v0, v5) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138bec.  throw v0;
  #L138bee.  v0:= v7.`okhttp3.MultipartReader.c` @type ^`int`;
  #L138bf2.  v0:= v0 + v1 @kind int;
  #L138bf4.  v7.`okhttp3.MultipartReader.c` @type ^`int` := v0;
  #L138bf8.  v0:= new `okhttp3.internal.http1.HeadersReader`;
  #L138bfc.  v1:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138c00.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/HeadersReader;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L138c06.  call temp:= `readHeaders`(v0) @signature `Lokhttp3/internal/http1/HeadersReader;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L138c0c.  v0:= temp @kind object;
  #L138c0e.  v1:= new `okhttp3.MultipartReader$a`;
  #L138c12.  call `<init>`(v1, v7) @signature `Lokhttp3/MultipartReader$a;.<init>:(Lokhttp3/MultipartReader;)V` @kind direct;
  #L138c18.  v7.`okhttp3.MultipartReader.f` @type ^`okhttp3.MultipartReader$a` := v1 @kind object;
  #L138c1c.  v2:= new `okhttp3.MultipartReader$Part`;
  #L138c20.  call temp:= `buffer`(v1) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L138c26.  v1:= temp @kind object;
  #L138c28.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/MultipartReader$Part;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @kind direct;
  #L138c2e.  return v2 @kind object;
  #L138c30.  v0:= new `java.net.ProtocolException`;
  #L138c34.  call `<init>`(v0, v5) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138c3a.  throw v0;
  #L138c3c.  v0:= v7.`okhttp3.MultipartReader.g` @type ^`okio.BufferedSource` @kind object;
  #L138c40.  call `skip`(v0, v5) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L138c46.  goto L138b5e;
  #L138c48.  v0:= new `java.lang.IllegalStateException`;
  #L138c4c.  v1:= "closed" @kind object;
  #L138c50.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L138c56.  v1:= temp @kind object;
  #L138c58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138c5e.  throw v0;
}
