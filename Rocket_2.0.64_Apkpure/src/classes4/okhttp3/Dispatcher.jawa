record `okhttp3.Dispatcher` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.Dispatcher.a` @AccessFlag PRIVATE;
  `int` `okhttp3.Dispatcher.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `okhttp3.Dispatcher.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `okhttp3.Dispatcher.d` @AccessFlag PRIVATE;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.e` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.f` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `okhttp3.Dispatcher.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L132034.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13203a.  v0:= 64I;
  #L13203e.  v1.`okhttp3.Dispatcher.a` @type ^`int` := v0;
  #L132042.  v0:= 5I;
  #L132044.  v1.`okhttp3.Dispatcher.b` @type ^`int` := v0;
  #L132048.  v0:= new `java.util.ArrayDeque`;
  #L13204c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L132052.  v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L132056.  v0:= new `java.util.ArrayDeque`;
  #L13205a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L132060.  v1.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L132064.  v0:= new `java.util.ArrayDeque`;
  #L132068.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L13206e.  v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L132072.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Dispatcher` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lokhttp3/Dispatcher;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L132084.  v0:= "executorService" @kind object;
  #L132088.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13208e.  call `<init>`(v1) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L132094.  v1.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L132098.  return @kind void;
}
procedure `okhttp3.internal.connection.RealCall$AsyncCall` `a`(`okhttp3.Dispatcher` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/Dispatcher;.a:(Ljava/lang/String;)Lokhttp3/internal/connection/RealCall$AsyncCall;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L131fac.  v0:= v3.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L131fb0.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L131fb6.  v0:= temp @kind object;
  #L131fb8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L131fbe.  v1:= temp;
  #L131fc0.  if v1 == 0 then goto L131fe6;
  #L131fc4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L131fca.  v1:= temp @kind object;
  #L131fcc.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L131fd0.  call temp:= `getHost`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L131fd6.  v2:= temp @kind object;
  #L131fd8.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L131fde.  v2:= temp;
  #L131fe0.  if v2 == 0 then goto L131fb8;
  #L131fe4.  return v1 @kind object;
  #L131fe6.  v0:= v3.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L131fea.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L131ff0.  v0:= temp @kind object;
  #L131ff2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L131ff8.  v1:= temp;
  #L131ffa.  if v1 == 0 then goto L132020;
  #L131ffe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L132004.  v1:= temp @kind object;
  #L132006.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L13200a.  call temp:= `getHost`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L132010.  v2:= temp @kind object;
  #L132012.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L132018.  v2:= temp;
  #L13201a.  if v2 == 0 then goto L131ff2;
  #L13201e.  return v1 @kind object;
  #L132020.  v4:= 0I;
  #L132022.  return v4 @kind object;
}
procedure `void` `b`(`okhttp3.Dispatcher` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L132274.  @monitorenter v0
  #L132276.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L13227c.  v1:= temp;
  #L13227e.  if v1 == 0 then goto L1322a4;
  #L132282.  v1:= v0.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` @kind object;
  #L132286.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13228a.  @monitorexit v0
  #L13228c.  call temp:= `c`(v0) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L132292.  v2:= temp;
  #L132294.  if v2 != 0 then goto L1322a2;
  #L132298.  if v1 == 0 then goto L1322a2;
  #L13229c.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L1322a2.  return @kind void;
  #L1322a4.  v1:= new `java.lang.AssertionError`;
  #L1322a8.  v2:= "Call wasn't in-flight!" @kind object;
  #L1322ac.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1322b2.  throw v1;
  #L1322b4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1322b6.  @monitorexit v0
  #L1322b8.  throw v1;
  catch `java.lang.Throwable` @[L132276..L13228a] goto L1322b4;
  catch `java.lang.Throwable` @[L1322a4..L1322b4] goto L1322b4;
}
procedure `boolean` `c`(`okhttp3.Dispatcher` v6 @kind this) @signature `Lokhttp3/Dispatcher;.c:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L131b78.  v0:= `@@okhttp3.internal.Util.assertionsEnabled` @type ^`boolean` @kind boolean;
  #L131b7c.  if v0 == 0 then goto L131be6;
  #L131b80.  call temp:= `holdsLock`(v6) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L131b86.  v0:= temp;
  #L131b88.  if v0 != 0 then goto L131b8e;
  #L131b8c.  goto L131be6;
  #L131b8e.  v0:= new `java.lang.AssertionError`;
  #L131b92.  v1:= new `java.lang.StringBuilder`;
  #L131b96.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L131b9c.  v2:= "Thread " @kind object;
  #L131ba0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131ba6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L131bac.  v2:= temp @kind object;
  #L131bae.  v3:= "Thread.currentThread()" @kind object;
  #L131bb2.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131bb8.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L131bbe.  v2:= temp @kind object;
  #L131bc0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131bc6.  v2:= " MUST NOT hold lock on " @kind object;
  #L131bca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131bd0.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131bd6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L131bdc.  v1:= temp @kind object;
  #L131bde.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L131be4.  throw v0;
  #L131be6.  v0:= new `java.util.ArrayList`;
  #L131bea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L131bf0.  @monitorenter v6
  #L131bf2.  v1:= v6.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L131bf6.  call temp:= `iterator`(v1) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L131bfc.  v1:= temp @kind object;
  #L131bfe.  v2:= "readyAsyncCalls.iterator()" @kind object;
  #L131c02.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131c08.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L131c0e.  v2:= temp;
  #L131c10.  if v2 == 0 then goto L131c80;
  #L131c14.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L131c1a.  v2:= temp @kind object;
  #L131c1c.  v2:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v2 @kind object;
  #L131c20.  v3:= v6.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L131c24.  call temp:= `size`(v3) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L131c2a.  v3:= temp;
  #L131c2c.  v4:= v6.`okhttp3.Dispatcher.a` @type ^`int`;
  #L131c30.  if v3 < v4 then goto L131c36;
  #L131c34.  goto L131c80;
  #L131c36.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L131c3c.  v3:= temp @kind object;
  #L131c3e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L131c44.  v3:= temp;
  #L131c46.  v4:= v6.`okhttp3.Dispatcher.b` @type ^`int`;
  #L131c4a.  if v3 < v4 then goto L131c50;
  #L131c4e.  goto L131c08;
  #L131c50.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L131c56.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L131c5c.  v3:= temp @kind object;
  #L131c5e.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L131c64.  v3:= "asyncCall" @kind object;
  #L131c68.  call `checkNotNullExpressionValue`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131c6e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L131c74.  v3:= v6.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L131c78.  call temp:= `add`(v3, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L131c7e.  goto L131c08;
  #L131c80.  call temp:= `runningCallsCount`(v6) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @kind virtual;
  #L131c86.  v1:= temp;
  #L131c88.  v2:= 0I;
  #L131c8a.  if v1 <= 0 then goto L131c92;
  #L131c8e.  v1:= 1I;
  #L131c90.  goto L131c94;
  #L131c92.  v1:= 0I;
  #L131c94.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L131c98.  @monitorexit v6
  #L131c9a.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L131ca0.  v3:= temp;
  #L131ca2.  if v2 >= v3 then goto L131cc6;
  #L131ca6.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L131cac.  v4:= temp @kind object;
  #L131cae.  v4:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v4 @kind object;
  #L131cb2.  call temp:= `executorService`(v6) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L131cb8.  v5:= temp @kind object;
  #L131cba.  call `executeOn`(v4, v5) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.executeOn:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L131cc0.  v2:= v2 + 1;
  #L131cc4.  goto L131ca2;
  #L131cc6.  return v1;
  #L131cc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131cca.  @monitorexit v6
  #L131ccc.  throw v0;
  catch `java.lang.Throwable` @[L131bf2..L131c98] goto L131cc8;
}
procedure `java.util.concurrent.ExecutorService` `-deprecated_executorService`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.-deprecated_executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131efc.  call temp:= `executorService`(v1) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L131f02.  v0:= temp @kind object;
  #L131f04.  return v0 @kind object;
}
procedure `void` `cancelAll`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.cancelAll:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1320ac.  @monitorenter v2
  #L1320ae.  v0:= v2.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L1320b2.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1320b8.  v0:= temp @kind object;
  #L1320ba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1320c0.  v1:= temp;
  #L1320c2.  if v1 == 0 then goto L1320e2;
  #L1320c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1320cc.  v1:= temp @kind object;
  #L1320ce.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L1320d2.  call temp:= `getCall`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L1320d8.  v1:= temp @kind object;
  #L1320da.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L1320e0.  goto L1320ba;
  #L1320e2.  v0:= v2.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L1320e6.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1320ec.  v0:= temp @kind object;
  #L1320ee.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1320f4.  v1:= temp;
  #L1320f6.  if v1 == 0 then goto L132116;
  #L1320fa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L132100.  v1:= temp @kind object;
  #L132102.  v1:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v1 @kind object;
  #L132106.  call temp:= `getCall`(v1) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L13210c.  v1:= temp @kind object;
  #L13210e.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L132114.  goto L1320ee;
  #L132116.  v0:= v2.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L13211a.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L132120.  v0:= temp @kind object;
  #L132122.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L132128.  v1:= temp;
  #L13212a.  if v1 == 0 then goto L132142;
  #L13212e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L132134.  v1:= temp @kind object;
  #L132136.  v1:= (`okhttp3.internal.connection.RealCall`) v1 @kind object;
  #L13213a.  call `cancel`(v1) @signature `Lokhttp3/internal/connection/RealCall;.cancel:()V` @kind virtual;
  #L132140.  goto L132122;
  #L132142.  @monitorexit v2
  #L132144.  return @kind void;
  #L132146.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L132148.  @monitorexit v2
  #L13214a.  throw v0;
  catch `java.lang.Throwable` @[L1320ae..L132140] goto L132146;
}
procedure `void` `enqueue$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall$AsyncCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.enqueue$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L132168.  v0:= "call" @kind object;
  #L13216c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132172.  @monitorenter v1
  #L132174.  v0:= v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L132178.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L13217e.  call temp:= `getCall`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L132184.  v0:= temp @kind object;
  #L132186.  call temp:= `getForWebSocket`(v0) @signature `Lokhttp3/internal/connection/RealCall;.getForWebSocket:()Z` @kind virtual;
  #L13218c.  v0:= temp;
  #L13218e.  if v0 != 0 then goto L1321ac;
  #L132192.  call temp:= `getHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getHost:()Ljava/lang/String;` @kind virtual;
  #L132198.  v0:= temp @kind object;
  #L13219a.  call temp:= `a`(v1, v0) @signature `Lokhttp3/Dispatcher;.a:(Ljava/lang/String;)Lokhttp3/internal/connection/RealCall$AsyncCall;` @kind direct;
  #L1321a0.  v0:= temp @kind object;
  #L1321a2.  if v0 == 0 then goto L1321ac;
  #L1321a6.  call `reuseCallsPerHostFrom`(v2, v0) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.reuseCallsPerHostFrom:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @kind virtual;
  #L1321ac.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1321b0.  @monitorexit v1
  #L1321b2.  call temp:= `c`(v1) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L1321b8.  return @kind void;
  #L1321ba.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1321bc.  @monitorexit v1
  #L1321be.  throw v2;
  catch `java.lang.Throwable` @[L132174..L1321b0] goto L1321ba;
}
procedure `void` `executed$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.executed$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1321dc.  @monitorenter v1
  #L1321de.  v0:= "call" @kind object;
  #L1321e2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1321e8.  v0:= v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L1321ec.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayDeque;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1321f2.  @monitorexit v1
  #L1321f4.  return @kind void;
  #L1321f6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1321f8.  @monitorexit v1
  #L1321fa.  throw v2;
  catch `java.lang.Throwable` @[L1321de..L1321f2] goto L1321f6;
}
procedure `java.util.concurrent.ExecutorService` `executorService`(`okhttp3.Dispatcher` v9 @kind this) @signature `Lokhttp3/Dispatcher;.executorService:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L131f18.  @monitorenter v9
  #L131f1a.  v0:= v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L131f1e.  if v0 != 0 then goto L131f7c;
  #L131f22.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L131f26.  v2:= 0I;
  #L131f28.  v3:= 2147483647I;
  #L131f2e.  v4:= 60L;
  #L131f32.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L131f36.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L131f3a.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L131f40.  v1:= new `java.lang.StringBuilder`;
  #L131f44.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L131f4a.  v8:= `@@okhttp3.internal.Util.okHttpName` @type ^`java.lang.String` @kind object;
  #L131f4e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131f54.  v8:= " Dispatcher" @kind object;
  #L131f58.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131f5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L131f64.  v1:= temp @kind object;
  #L131f66.  v8:= 0I;
  #L131f68.  call temp:= `threadFactory`(v1, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L131f6e.  v8:= temp @kind object;
  #L131f70.  v1:= v0 @kind object;
  #L131f72.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L131f78.  v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L131f7c.  v0:= v9.`okhttp3.Dispatcher.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L131f80.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L131f86.  @monitorexit v9
  #L131f88.  return v0 @kind object;
  #L131f8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131f8c.  @monitorexit v9
  #L131f8e.  throw v0;
  catch `java.lang.Throwable` @[L131f1a..L131f86] goto L131f8a;
}
procedure `void` `finished$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall$AsyncCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall$AsyncCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L132218.  v0:= "call" @kind object;
  #L13221c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132222.  call temp:= `getCallsPerHost`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCallsPerHost:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L132228.  v0:= temp @kind object;
  #L13222a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L132230.  v0:= v1.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L132234.  call `b`(v1, v0, v2) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L13223a.  return @kind void;
}
procedure `void` `finished$okhttp`(`okhttp3.Dispatcher` v1 @kind this, `okhttp3.internal.connection.RealCall` v2 @kind object) @signature `Lokhttp3/Dispatcher;.finished$okhttp:(Lokhttp3/internal/connection/RealCall;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13224c.  v0:= "call" @kind object;
  #L132250.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132256.  v0:= v1.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L13225a.  call `b`(v1, v0, v2) @signature `Lokhttp3/Dispatcher;.b:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L132260.  return @kind void;
}
procedure `java.lang.Runnable` `getIdleCallback`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getIdleCallback:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131dbc.  @monitorenter v1
  #L131dbe.  v0:= v1.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` @kind object;
  #L131dc2.  @monitorexit v1
  #L131dc4.  return v0 @kind object;
  #L131dc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131dc8.  @monitorexit v1
  #L131dca.  throw v0;
  catch `java.lang.Throwable` @[L131dbe..L131dc2] goto L131dc6;
}
procedure `int` `getMaxRequests`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequests:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131cec.  @monitorenter v1
  #L131cee.  v0:= v1.`okhttp3.Dispatcher.a` @type ^`int`;
  #L131cf2.  @monitorexit v1
  #L131cf4.  return v0;
  #L131cf6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131cf8.  @monitorexit v1
  #L131cfa.  throw v0;
  catch `java.lang.Throwable` @[L131cee..L131cf2] goto L131cf6;
}
procedure `int` `getMaxRequestsPerHost`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.getMaxRequestsPerHost:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131d18.  @monitorenter v1
  #L131d1a.  v0:= v1.`okhttp3.Dispatcher.b` @type ^`int`;
  #L131d1e.  @monitorexit v1
  #L131d20.  return v0;
  #L131d22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131d24.  @monitorexit v1
  #L131d26.  throw v0;
  catch `java.lang.Throwable` @[L131d1a..L131d1e] goto L131d22;
}
procedure `java.util.List` `queuedCalls`(`okhttp3.Dispatcher` v3 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCalls:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L131de8.  @monitorenter v3
  #L131dea.  v0:= v3.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L131dee.  v1:= new `java.util.ArrayList`;
  #L131df2.  v2:= 10I;
  #L131df6.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L131dfc.  v2:= temp;
  #L131dfe.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L131e04.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L131e0a.  v0:= temp @kind object;
  #L131e0c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L131e12.  v2:= temp;
  #L131e14.  if v2 == 0 then goto L131e34;
  #L131e18.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L131e1e.  v2:= temp @kind object;
  #L131e20.  v2:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v2 @kind object;
  #L131e24.  call temp:= `getCall`(v2) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L131e2a.  v2:= temp @kind object;
  #L131e2c.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L131e32.  goto L131e0c;
  #L131e34.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L131e3a.  v0:= temp @kind object;
  #L131e3c.  v1:= "Collections.unmodifiable…yncCalls.map { it.call })" @kind object;
  #L131e40.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131e46.  @monitorexit v3
  #L131e48.  return v0 @kind object;
  #L131e4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131e4c.  @monitorexit v3
  #L131e4e.  throw v0;
  catch `java.lang.Throwable` @[L131dea..L131e46] goto L131e4a;
}
procedure `int` `queuedCallsCount`(`okhttp3.Dispatcher` v1 @kind this) @signature `Lokhttp3/Dispatcher;.queuedCallsCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131d44.  @monitorenter v1
  #L131d46.  v0:= v1.`okhttp3.Dispatcher.e` @type ^`java.util.ArrayDeque` @kind object;
  #L131d4a.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L131d50.  v0:= temp;
  #L131d52.  @monitorexit v1
  #L131d54.  return v0;
  #L131d56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131d58.  @monitorexit v1
  #L131d5a.  throw v0;
  catch `java.lang.Throwable` @[L131d46..L131d52] goto L131d56;
}
procedure `java.util.List` `runningCalls`(`okhttp3.Dispatcher` v4 @kind this) @signature `Lokhttp3/Dispatcher;.runningCalls:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L131e6c.  @monitorenter v4
  #L131e6e.  v0:= v4.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L131e72.  v1:= v4.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L131e76.  v2:= new `java.util.ArrayList`;
  #L131e7a.  v3:= 10I;
  #L131e7e.  call temp:= `collectionSizeOrDefault`(v1, v3) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L131e84.  v3:= temp;
  #L131e86.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L131e8c.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L131e92.  v1:= temp @kind object;
  #L131e94.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L131e9a.  v3:= temp;
  #L131e9c.  if v3 == 0 then goto L131ebc;
  #L131ea0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L131ea6.  v3:= temp @kind object;
  #L131ea8.  v3:= (`okhttp3.internal.connection.RealCall$AsyncCall`) v3 @kind object;
  #L131eac.  call temp:= `getCall`(v3) @signature `Lokhttp3/internal/connection/RealCall$AsyncCall;.getCall:()Lokhttp3/internal/connection/RealCall;` @kind virtual;
  #L131eb2.  v3:= temp @kind object;
  #L131eb4.  call temp:= `add`(v2, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L131eba.  goto L131e94;
  #L131ebc.  call temp:= `plus`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.plus:(Ljava/util/Collection;Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L131ec2.  v0:= temp @kind object;
  #L131ec4.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L131eca.  v0:= temp @kind object;
  #L131ecc.  v1:= "Collections.unmodifiable…yncCalls.map { it.call })" @kind object;
  #L131ed0.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131ed6.  @monitorexit v4
  #L131ed8.  return v0 @kind object;
  #L131eda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131edc.  @monitorexit v4
  #L131ede.  throw v0;
  catch `java.lang.Throwable` @[L131e6e..L131ed6] goto L131eda;
}
procedure `int` `runningCallsCount`(`okhttp3.Dispatcher` v2 @kind this) @signature `Lokhttp3/Dispatcher;.runningCallsCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L131d78.  @monitorenter v2
  #L131d7a.  v0:= v2.`okhttp3.Dispatcher.f` @type ^`java.util.ArrayDeque` @kind object;
  #L131d7e.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L131d84.  v0:= temp;
  #L131d86.  v1:= v2.`okhttp3.Dispatcher.g` @type ^`java.util.ArrayDeque` @kind object;
  #L131d8a.  call temp:= `size`(v1) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L131d90.  v1:= temp;
  #L131d92.  v0:= v0 + v1 @kind int;
  #L131d94.  @monitorexit v2
  #L131d96.  return v0;
  #L131d98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L131d9a.  @monitorexit v2
  #L131d9c.  throw v0;
  catch `java.lang.Throwable` @[L131d7a..L131d92] goto L131d98;
}
procedure `void` `setIdleCallback`(`okhttp3.Dispatcher` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lokhttp3/Dispatcher;.setIdleCallback:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1322e0.  @monitorenter v0
  #L1322e2.  v0.`okhttp3.Dispatcher.c` @type ^`java.lang.Runnable` := v1 @kind object;
  #L1322e6.  @monitorexit v0
  #L1322e8.  return @kind void;
  #L1322ea.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1322ec.  @monitorexit v0
  #L1322ee.  throw v1;
  catch `java.lang.Throwable` @[L1322e2..L1322e6] goto L1322ea;
}
procedure `void` `setMaxRequests`(`okhttp3.Dispatcher` v2 @kind this, `int` v3 ) @signature `Lokhttp3/Dispatcher;.setMaxRequests:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13230c.  v0:= 1I;
  #L13230e.  if v3 < v0 then goto L132314;
  #L132312.  goto L132316;
  #L132314.  v0:= 0I;
  #L132316.  if v0 == 0 then goto L132334;
  #L13231a.  @monitorenter v2
  #L13231c.  v2.`okhttp3.Dispatcher.a` @type ^`int` := v3;
  #L132320.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L132324.  @monitorexit v2
  #L132326.  call temp:= `c`(v2) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L13232c.  return @kind void;
  #L13232e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L132330.  @monitorexit v2
  #L132332.  throw v3;
  #L132334.  v0:= new `java.lang.StringBuilder`;
  #L132338.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13233e.  v1:= "max < 1: " @kind object;
  #L132342.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132348.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13234e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L132354.  v3:= temp @kind object;
  #L132356.  v0:= new `java.lang.IllegalArgumentException`;
  #L13235a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L132360.  v3:= temp @kind object;
  #L132362.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L132368.  throw v0;
  catch `java.lang.Throwable` @[L13231c..L132324] goto L13232e;
}
procedure `void` `setMaxRequestsPerHost`(`okhttp3.Dispatcher` v2 @kind this, `int` v3 ) @signature `Lokhttp3/Dispatcher;.setMaxRequestsPerHost:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L132388.  v0:= 1I;
  #L13238a.  if v3 < v0 then goto L132390;
  #L13238e.  goto L132392;
  #L132390.  v0:= 0I;
  #L132392.  if v0 == 0 then goto L1323b0;
  #L132396.  @monitorenter v2
  #L132398.  v2.`okhttp3.Dispatcher.b` @type ^`int` := v3;
  #L13239c.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1323a0.  @monitorexit v2
  #L1323a2.  call temp:= `c`(v2) @signature `Lokhttp3/Dispatcher;.c:()Z` @kind direct;
  #L1323a8.  return @kind void;
  #L1323aa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1323ac.  @monitorexit v2
  #L1323ae.  throw v3;
  #L1323b0.  v0:= new `java.lang.StringBuilder`;
  #L1323b4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1323ba.  v1:= "max < 1: " @kind object;
  #L1323be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1323c4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1323ca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1323d0.  v3:= temp @kind object;
  #L1323d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1323d6.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1323dc.  v3:= temp @kind object;
  #L1323de.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1323e4.  throw v0;
  catch `java.lang.Throwable` @[L132398..L1323a0] goto L1323aa;
}
