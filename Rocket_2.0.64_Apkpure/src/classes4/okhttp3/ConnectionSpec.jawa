record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.ConnectionSpec.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionSpec.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.d` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec$Companion` `@@okhttp3.ConnectionSpec.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.RESTRICTED_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L130460.  v0:= new `okhttp3.ConnectionSpec$Companion`;
  #L130464.  v1:= 0I;
  #L130466.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L13046c.  `@@okhttp3.ConnectionSpec.Companion` @type ^`okhttp3.ConnectionSpec$Companion` := v0 @kind object;
  #L130470.  v0:= 9I;
  #L130474.  v1:= new `okhttp3.CipherSuite`[v0];
  #L130478.  v2:= `@@okhttp3.CipherSuite.TLS_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L13047c.  v3:= 0I;
  #L13047e.  v1[v3]:= v2 @kind object;
  #L130482.  v4:= `@@okhttp3.CipherSuite.TLS_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L130486.  v5:= 1I;
  #L130488.  v1[v5]:= v4 @kind object;
  #L13048c.  v6:= `@@okhttp3.CipherSuite.TLS_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L130490.  v7:= 2I;
  #L130492.  v1[v7]:= v6 @kind object;
  #L130496.  v8:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L13049a.  v9:= 3I;
  #L13049c.  v1[v9]:= v8 @kind object;
  #L1304a0.  v10:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1304a4.  v11:= 4I;
  #L1304a6.  v1[v11]:= v10 @kind object;
  #L1304aa.  v12:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1304ae.  v13:= 5I;
  #L1304b0.  v1[v13]:= v12 @kind object;
  #L1304b4.  v14:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1304b8.  v15:= 6I;
  #L1304ba.  v1[v15]:= v14 @kind object;
  #L1304be.  v16:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1304c2.  v17:= 7I;
  #L1304c6.  v1[v17]:= v16 @kind object;
  #L1304ca.  v18:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1304ce.  v19:= 8I;
  #L1304d2.  v1[v19]:= v18 @kind object;
  #L1304d6.  `@@okhttp3.ConnectionSpec.e` @type ^`okhttp3.CipherSuite`[] := v1 @kind object;
  #L1304da.  v0:= 16I;
  #L1304de.  v0:= new `okhttp3.CipherSuite`[v0];
  #L1304e2.  v0[v3]:= v2 @kind object;
  #L1304e6.  v0[v5]:= v4 @kind object;
  #L1304ea.  v0[v7]:= v6 @kind object;
  #L1304ee.  v0[v9]:= v8 @kind object;
  #L1304f2.  v0[v11]:= v10 @kind object;
  #L1304f6.  v0[v13]:= v12 @kind object;
  #L1304fa.  v0[v15]:= v14 @kind object;
  #L1304fe.  v0[v17]:= v16 @kind object;
  #L130502.  v0[v19]:= v18 @kind object;
  #L130506.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L13050a.  v4:= 9I;
  #L13050e.  v0[v4]:= v2 @kind object;
  #L130512.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L130516.  v4:= 10I;
  #L13051a.  v0[v4]:= v2 @kind object;
  #L13051e.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L130522.  v4:= 11I;
  #L130526.  v0[v4]:= v2 @kind object;
  #L13052a.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L13052e.  v4:= 12I;
  #L130532.  v0[v4]:= v2 @kind object;
  #L130536.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L13053a.  v4:= 13I;
  #L13053e.  v0[v4]:= v2 @kind object;
  #L130542.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L130546.  v4:= 14I;
  #L13054a.  v0[v4]:= v2 @kind object;
  #L13054e.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L130552.  v4:= 15I;
  #L130556.  v0[v4]:= v2 @kind object;
  #L13055a.  `@@okhttp3.ConnectionSpec.f` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L13055e.  v2:= new `okhttp3.ConnectionSpec$Builder`;
  #L130562.  call `<init>`(v2, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L130568.  v4:= length @variable v1;
  #L13056a.  call temp:= `copyOf`(v1, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L130570.  v1:= temp @kind object;
  #L130572.  v1:= (`okhttp3.CipherSuite`[]) v1 @kind object;
  #L130576.  call temp:= `cipherSuites`(v2, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L13057c.  v1:= temp @kind object;
  #L13057e.  v2:= new `okhttp3.TlsVersion`[v7];
  #L130582.  v4:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L130586.  v2[v3]:= v4 @kind object;
  #L13058a.  v6:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L13058e.  v2[v5]:= v6 @kind object;
  #L130592.  call temp:= `tlsVersions`(v1, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130598.  v1:= temp @kind object;
  #L13059a.  call temp:= `supportsTlsExtensions`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1305a0.  v1:= temp @kind object;
  #L1305a2.  call temp:= `build`(v1) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L1305a8.  v1:= temp @kind object;
  #L1305aa.  `@@okhttp3.ConnectionSpec.RESTRICTED_TLS` @type ^`okhttp3.ConnectionSpec` := v1 @kind object;
  #L1305ae.  v1:= new `okhttp3.ConnectionSpec$Builder`;
  #L1305b2.  call `<init>`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L1305b8.  v2:= length @variable v0;
  #L1305ba.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L1305c0.  v2:= temp @kind object;
  #L1305c2.  v2:= (`okhttp3.CipherSuite`[]) v2 @kind object;
  #L1305c6.  call temp:= `cipherSuites`(v1, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1305cc.  v1:= temp @kind object;
  #L1305ce.  v2:= new `okhttp3.TlsVersion`[v7];
  #L1305d2.  v2[v3]:= v4 @kind object;
  #L1305d6.  v2[v5]:= v6 @kind object;
  #L1305da.  call temp:= `tlsVersions`(v1, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1305e0.  v1:= temp @kind object;
  #L1305e2.  call temp:= `supportsTlsExtensions`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1305e8.  v1:= temp @kind object;
  #L1305ea.  call temp:= `build`(v1) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L1305f0.  v1:= temp @kind object;
  #L1305f2.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v1 @kind object;
  #L1305f6.  v1:= new `okhttp3.ConnectionSpec$Builder`;
  #L1305fa.  call `<init>`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L130600.  v2:= length @variable v0;
  #L130602.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L130608.  v0:= temp @kind object;
  #L13060a.  v0:= (`okhttp3.CipherSuite`[]) v0 @kind object;
  #L13060e.  call temp:= `cipherSuites`(v1, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130614.  v0:= temp @kind object;
  #L130616.  v1:= new `okhttp3.TlsVersion`[v11];
  #L13061a.  v1[v3]:= v4 @kind object;
  #L13061e.  v1[v5]:= v6 @kind object;
  #L130622.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L130626.  v1[v7]:= v2 @kind object;
  #L13062a.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L13062e.  v1[v9]:= v2 @kind object;
  #L130632.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130638.  v0:= temp @kind object;
  #L13063a.  call temp:= `supportsTlsExtensions`(v0, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130640.  v0:= temp @kind object;
  #L130642.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L130648.  v0:= temp @kind object;
  #L13064a.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L13064e.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L130652.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L130658.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L13065e.  v0:= temp @kind object;
  #L130660.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L130664.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v0 @kind this, `boolean` v1 , `boolean` v2 , `java.lang.String`[] v3 @kind object, `java.lang.String`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec;.<init>:(ZZ[Ljava/lang/String;[Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L130678.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13067e.  v0.`okhttp3.ConnectionSpec.a` @type ^`boolean` := v1 @kind boolean;
  #L130682.  v0.`okhttp3.ConnectionSpec.b` @type ^`boolean` := v2 @kind boolean;
  #L130686.  v0.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] := v3 @kind object;
  #L13068a.  v0.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] := v4 @kind object;
  #L13068e.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `a`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/ConnectionSpec;.a:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L130338.  v0:= v4.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L13033c.  if v0 == 0 then goto L13036c;
  #L130340.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L130346.  v0:= temp @kind object;
  #L130348.  v1:= "sslSocket.enabledCipherSuites" @kind object;
  #L13034c.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L130352.  v1:= v4.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L130356.  v2:= `@@okhttp3.CipherSuite.Companion` @type ^`okhttp3.CipherSuite$Companion` @kind object;
  #L13035a.  call temp:= `getORDER_BY_NAME$okhttp`(v2) @signature `Lokhttp3/CipherSuite$Companion;.getORDER_BY_NAME$okhttp:()Ljava/util/Comparator;` @kind virtual;
  #L130360.  v2:= temp @kind object;
  #L130362.  call temp:= `intersect`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.intersect:([Ljava/lang/String;[Ljava/lang/String;Ljava/util/Comparator;)[Ljava/lang/String;` @kind static;
  #L130368.  v0:= temp @kind object;
  #L13036a.  goto L130374;
  #L13036c.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L130372.  v0:= temp @kind object;
  #L130374.  v1:= v4.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L130378.  if v1 == 0 then goto L1303a4;
  #L13037c.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L130382.  v1:= temp @kind object;
  #L130384.  v2:= "sslSocket.enabledProtocols" @kind object;
  #L130388.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13038e.  v2:= v4.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L130392.  call temp:= `naturalOrder`() @signature `Lkotlin/comparisons/ComparisonsKt;.naturalOrder:()Ljava/util/Comparator;` @kind static;
  #L130398.  v3:= temp @kind object;
  #L13039a.  call temp:= `intersect`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.intersect:([Ljava/lang/String;[Ljava/lang/String;Ljava/util/Comparator;)[Ljava/lang/String;` @kind static;
  #L1303a0.  v1:= temp @kind object;
  #L1303a2.  goto L1303ac;
  #L1303a4.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1303aa.  v1:= temp @kind object;
  #L1303ac.  call temp:= `getSupportedCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L1303b2.  v5:= temp @kind object;
  #L1303b4.  v2:= "supportedCipherSuites" @kind object;
  #L1303b8.  call `checkNotNullExpressionValue`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1303be.  v2:= `@@okhttp3.CipherSuite.Companion` @type ^`okhttp3.CipherSuite$Companion` @kind object;
  #L1303c2.  call temp:= `getORDER_BY_NAME$okhttp`(v2) @signature `Lokhttp3/CipherSuite$Companion;.getORDER_BY_NAME$okhttp:()Ljava/util/Comparator;` @kind virtual;
  #L1303c8.  v2:= temp @kind object;
  #L1303ca.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L1303ce.  call temp:= `indexOf`(v5, v3, v2) @signature `Lokhttp3/internal/Util;.indexOf:([Ljava/lang/String;Ljava/lang/String;Ljava/util/Comparator;)I` @kind static;
  #L1303d4.  v2:= temp;
  #L1303d6.  v3:= "cipherSuitesIntersection" @kind object;
  #L1303da.  if v6 == 0 then goto L130400;
  #L1303de.  v6:= -1I;
  #L1303e0.  if v2 == v6 then goto L130400;
  #L1303e4.  call `checkNotNullExpressionValue`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1303ea.  v5:= v5[v2] @kind object;
  #L1303ee.  v6:= "supportedCipherSuites[indexOfFallbackScsv]" @kind object;
  #L1303f2.  call `checkNotNullExpressionValue`(v5, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1303f8.  call temp:= `concat`(v0, v5) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L1303fe.  v0:= temp @kind object;
  #L130400.  v5:= new `okhttp3.ConnectionSpec$Builder`;
  #L130404.  call `<init>`(v5, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L13040a.  call `checkNotNullExpressionValue`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L130410.  v6:= length @variable v0;
  #L130412.  call temp:= `copyOf`(v0, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L130418.  v6:= temp @kind object;
  #L13041a.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L13041e.  call temp:= `cipherSuites`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130424.  v5:= temp @kind object;
  #L130426.  v6:= "tlsVersionsIntersection" @kind object;
  #L13042a.  call `checkNotNullExpressionValue`(v1, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L130430.  v6:= length @variable v1;
  #L130432.  call temp:= `copyOf`(v1, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L130438.  v6:= temp @kind object;
  #L13043a.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L13043e.  call temp:= `tlsVersions`(v5, v6) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L130444.  v5:= temp @kind object;
  #L130446.  call temp:= `build`(v5) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L13044c.  v5:= temp @kind object;
  #L13044e.  return v5 @kind object;
}
procedure `java.lang.String`[] `access$getCipherSuitesAsString$p`(`okhttp3.ConnectionSpec` v0 @kind object) @signature `Lokhttp3/ConnectionSpec;.access$getCipherSuitesAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L130220.  v0:= v0.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L130224.  return v0 @kind object;
}
procedure `java.lang.String`[] `access$getTlsVersionsAsString$p`(`okhttp3.ConnectionSpec` v0 @kind object) @signature `Lokhttp3/ConnectionSpec;.access$getTlsVersionsAsString$p:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L130238.  v0:= v0.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L13023c.  return v0 @kind object;
}
procedure `java.util.List` `-deprecated_cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.-deprecated_cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L130250.  call temp:= `cipherSuites`(v1) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L130256.  v0:= temp @kind object;
  #L130258.  return v0 @kind object;
}
procedure `boolean` `-deprecated_supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.-deprecated_supportsTlsExtensions:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12ffd4.  v0:= v1.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L12ffd8.  return v0;
}
procedure `java.util.List` `-deprecated_tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.-deprecated_tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13026c.  call temp:= `tlsVersions`(v1) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L130272.  v0:= temp @kind object;
  #L130274.  return v0 @kind object;
}
procedure `void` `apply$okhttp`(`okhttp3.ConnectionSpec` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/ConnectionSpec;.apply$okhttp:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1306a0.  v0:= "sslSocket" @kind object;
  #L1306a4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1306aa.  call temp:= `a`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.a:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L1306b0.  v3:= temp @kind object;
  #L1306b2.  call temp:= `tlsVersions`(v3) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L1306b8.  v0:= temp @kind object;
  #L1306ba.  if v0 == 0 then goto L1306c8;
  #L1306be.  v0:= v3.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L1306c2.  call `setEnabledProtocols`(v2, v0) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L1306c8.  call temp:= `cipherSuites`(v3) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L1306ce.  v0:= temp @kind object;
  #L1306d0.  if v0 == 0 then goto L1306de;
  #L1306d4.  v3:= v3.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L1306d8.  call `setEnabledCipherSuites`(v2, v3) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L1306de.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v6 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L130288.  v0:= v6.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L13028c.  if v0 == 0 then goto L1302ca;
  #L130290.  v1:= new `java.util.ArrayList`;
  #L130294.  v2:= length @variable v0;
  #L130296.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13029c.  v2:= length @variable v0;
  #L13029e.  v3:= 0I;
  #L1302a0.  if v3 >= v2 then goto L1302c0;
  #L1302a4.  v4:= v0[v3] @kind object;
  #L1302a8.  v5:= `@@okhttp3.CipherSuite.Companion` @type ^`okhttp3.CipherSuite$Companion` @kind object;
  #L1302ac.  call temp:= `forJavaName`(v5, v4) @signature `Lokhttp3/CipherSuite$Companion;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind virtual;
  #L1302b2.  v4:= temp @kind object;
  #L1302b4.  call temp:= `add`(v1, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1302ba.  v3:= v3 + 1;
  #L1302be.  goto L1302a0;
  #L1302c0.  call temp:= `toList`(v1) @signature `Lkotlin/collections/CollectionsKt;.toList:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L1302c6.  v0:= temp @kind object;
  #L1302c8.  goto L1302cc;
  #L1302ca.  v0:= 0I;
  #L1302cc.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L12ffec.  v0:= instanceof @variable v5 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L12fff0.  v1:= 0I;
  #L12fff2.  if v0 != 0 then goto L12fff8;
  #L12fff6.  return v1;
  #L12fff8.  v0:= 1I;
  #L12fffa.  if v5 != v4 then goto L130000;
  #L12fffe.  return v0;
  #L130000.  v2:= v4.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L130004.  v5:= (`okhttp3.ConnectionSpec`) v5 @kind object;
  #L130008.  v3:= v5.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L13000c.  if v2 == v3 then goto L130012;
  #L130010.  return v1;
  #L130012.  if v2 == 0 then goto L130050;
  #L130016.  v2:= v4.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L13001a.  v3:= v5.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L13001e.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L130024.  v2:= temp;
  #L130026.  if v2 != 0 then goto L13002c;
  #L13002a.  return v1;
  #L13002c.  v2:= v4.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L130030.  v3:= v5.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L130034.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13003a.  v2:= temp;
  #L13003c.  if v2 != 0 then goto L130042;
  #L130040.  return v1;
  #L130042.  v2:= v4.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L130046.  v5:= v5.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L13004a.  if v2 == v5 then goto L130050;
  #L13004e.  return v1;
  #L130050.  return v0;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L130110.  v0:= v3.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L130114.  if v0 == 0 then goto L13015a;
  #L130118.  v0:= 527I;
  #L13011c.  v1:= v3.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L130120.  v2:= 0I;
  #L130122.  if v1 == 0 then goto L130130;
  #L130126.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L13012c.  v1:= temp;
  #L13012e.  goto L130132;
  #L130130.  v1:= 0I;
  #L130132.  v0:= v0 + v1 @kind int;
  #L130134.  v0:= v0 * 31;
  #L130138.  v1:= v3.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L13013c.  if v1 == 0 then goto L130148;
  #L130140.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L130146.  v2:= temp;
  #L130148.  v0:= v0 + v2 @kind int;
  #L13014a.  v0:= v0 * 31;
  #L13014e.  v1:= v3.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L130152.  v1:= v1 ^~ 1;
  #L130156.  v0:= v0 + v1 @kind int;
  #L130158.  goto L13015e;
  #L13015a.  v0:= 17I;
  #L13015e.  return v0;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L130064.  v0:= "socket" @kind object;
  #L130068.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13006e.  v0:= v4.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L130072.  v1:= 0I;
  #L130074.  if v0 != 0 then goto L13007a;
  #L130078.  return v1;
  #L13007a.  v0:= v4.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L13007e.  if v0 == 0 then goto L1300a0;
  #L130082.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L130088.  v2:= temp @kind object;
  #L13008a.  call temp:= `naturalOrder`() @signature `Lkotlin/comparisons/ComparisonsKt;.naturalOrder:()Ljava/util/Comparator;` @kind static;
  #L130090.  v3:= temp @kind object;
  #L130092.  call temp:= `hasIntersection`(v0, v2, v3) @signature `Lokhttp3/internal/Util;.hasIntersection:([Ljava/lang/String;[Ljava/lang/String;Ljava/util/Comparator;)Z` @kind static;
  #L130098.  v0:= temp;
  #L13009a.  if v0 != 0 then goto L1300a0;
  #L13009e.  return v1;
  #L1300a0.  v0:= v4.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L1300a4.  if v0 == 0 then goto L1300ca;
  #L1300a8.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L1300ae.  v5:= temp @kind object;
  #L1300b0.  v2:= `@@okhttp3.CipherSuite.Companion` @type ^`okhttp3.CipherSuite$Companion` @kind object;
  #L1300b4.  call temp:= `getORDER_BY_NAME$okhttp`(v2) @signature `Lokhttp3/CipherSuite$Companion;.getORDER_BY_NAME$okhttp:()Ljava/util/Comparator;` @kind virtual;
  #L1300ba.  v2:= temp @kind object;
  #L1300bc.  call temp:= `hasIntersection`(v0, v5, v2) @signature `Lokhttp3/internal/Util;.hasIntersection:([Ljava/lang/String;[Ljava/lang/String;Ljava/util/Comparator;)Z` @kind static;
  #L1300c2.  v5:= temp;
  #L1300c4.  if v5 != 0 then goto L1300ca;
  #L1300c8.  return v1;
  #L1300ca.  v5:= 1I;
  #L1300cc.  return v5;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1300e0.  v0:= v1.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L1300e4.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1300f8.  v0:= v1.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L1300fc.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v6 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1302e0.  v0:= v6.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L1302e4.  if v0 == 0 then goto L130322;
  #L1302e8.  v1:= new `java.util.ArrayList`;
  #L1302ec.  v2:= length @variable v0;
  #L1302ee.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1302f4.  v2:= length @variable v0;
  #L1302f6.  v3:= 0I;
  #L1302f8.  if v3 >= v2 then goto L130318;
  #L1302fc.  v4:= v0[v3] @kind object;
  #L130300.  v5:= `@@okhttp3.TlsVersion.Companion` @type ^`okhttp3.TlsVersion$Companion` @kind object;
  #L130304.  call temp:= `forJavaName`(v5, v4) @signature `Lokhttp3/TlsVersion$Companion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind virtual;
  #L13030a.  v4:= temp @kind object;
  #L13030c.  call temp:= `add`(v1, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L130312.  v3:= v3 + 1;
  #L130316.  goto L1302f8;
  #L130318.  call temp:= `toList`(v1) @signature `Lkotlin/collections/CollectionsKt;.toList:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L13031e.  v0:= temp @kind object;
  #L130320.  goto L130324;
  #L130322.  v0:= 0I;
  #L130324.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L130170.  v0:= v4.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L130174.  if v0 != 0 then goto L13017e;
  #L130178.  v0:= "ConnectionSpec()" @kind object;
  #L13017c.  return v0 @kind object;
  #L13017e.  v0:= new `java.lang.StringBuilder`;
  #L130182.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L130188.  v1:= "ConnectionSpec(" @kind object;
  #L13018c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L130192.  v1:= "cipherSuites=" @kind object;
  #L130196.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13019c.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L1301a2.  v1:= temp @kind object;
  #L1301a4.  v2:= "[all enabled]" @kind object;
  #L1301a8.  call temp:= `toString`(v1, v2) @signature `Ljava/util/Objects;.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1301ae.  v1:= temp @kind object;
  #L1301b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301b6.  v1:= ", " @kind object;
  #L1301ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301c0.  v3:= "tlsVersions=" @kind object;
  #L1301c4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301ca.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L1301d0.  v3:= temp @kind object;
  #L1301d2.  call temp:= `toString`(v3, v2) @signature `Ljava/util/Objects;.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1301d8.  v2:= temp @kind object;
  #L1301da.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301e6.  v1:= "supportsTlsExtensions=" @kind object;
  #L1301ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301f0.  v1:= v4.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L1301f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1301fa.  v1:= 41I;
  #L1301fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L130204.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13020a.  v0:= temp @kind object;
  #L13020c.  return v0 @kind object;
}
