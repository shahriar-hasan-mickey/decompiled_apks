record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.Request` `okhttp3.Response$Builder.a` @AccessFlag PRIVATE;
  `okhttp3.Protocol` `okhttp3.Response$Builder.b` @AccessFlag PRIVATE;
  `int` `okhttp3.Response$Builder.c` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.Response$Builder.d` @AccessFlag PRIVATE;
  `okhttp3.Handshake` `okhttp3.Response$Builder.e` @AccessFlag PRIVATE;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.f` @AccessFlag PRIVATE;
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.g` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.h` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.i` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.j` @AccessFlag PRIVATE;
  `long` `okhttp3.Response$Builder.k` @AccessFlag PRIVATE;
  `long` `okhttp3.Response$Builder.l` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.Exchange` `okhttp3.Response$Builder.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13c560.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13c566.  v0:= -1I;
  #L13c568.  v1.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L13c56c.  v0:= new `okhttp3.Headers$Builder`;
  #L13c570.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L13c576.  v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L13c57a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13c58c.  v0:= "response" @kind object;
  #L13c590.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c596.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13c59c.  v0:= -1I;
  #L13c59e.  v2.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L13c5a2.  call temp:= `request`(v3) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L13c5a8.  v0:= temp @kind object;
  #L13c5aa.  v2.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` := v0 @kind object;
  #L13c5ae.  call temp:= `protocol`(v3) @signature `Lokhttp3/Response;.protocol:()Lokhttp3/Protocol;` @kind virtual;
  #L13c5b4.  v0:= temp @kind object;
  #L13c5b6.  v2.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L13c5ba.  call temp:= `code`(v3) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L13c5c0.  v0:= temp;
  #L13c5c2.  v2.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L13c5c6.  call temp:= `message`(v3) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L13c5cc.  v0:= temp @kind object;
  #L13c5ce.  v2.`okhttp3.Response$Builder.d` @type ^`java.lang.String` := v0 @kind object;
  #L13c5d2.  call temp:= `handshake`(v3) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L13c5d8.  v0:= temp @kind object;
  #L13c5da.  v2.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L13c5de.  call temp:= `headers`(v3) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L13c5e4.  v0:= temp @kind object;
  #L13c5e6.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L13c5ec.  v0:= temp @kind object;
  #L13c5ee.  v2.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L13c5f2.  call temp:= `body`(v3) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L13c5f8.  v0:= temp @kind object;
  #L13c5fa.  v2.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L13c5fe.  call temp:= `networkResponse`(v3) @signature `Lokhttp3/Response;.networkResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c604.  v0:= temp @kind object;
  #L13c606.  v2.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` := v0 @kind object;
  #L13c60a.  call temp:= `cacheResponse`(v3) @signature `Lokhttp3/Response;.cacheResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c610.  v0:= temp @kind object;
  #L13c612.  v2.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` := v0 @kind object;
  #L13c616.  call temp:= `priorResponse`(v3) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c61c.  v0:= temp @kind object;
  #L13c61e.  v2.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` := v0 @kind object;
  #L13c622.  call temp:= `sentRequestAtMillis`(v3) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @kind virtual;
  #L13c628.  v0:= temp @kind wide;
  #L13c62a.  v2.`okhttp3.Response$Builder.k` @type ^`long` := v0 @kind wide;
  #L13c62e.  call temp:= `receivedResponseAtMillis`(v3) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @kind virtual;
  #L13c634.  v0:= temp @kind wide;
  #L13c636.  v2.`okhttp3.Response$Builder.l` @type ^`long` := v0 @kind wide;
  #L13c63a.  call temp:= `exchange`(v3) @signature `Lokhttp3/Response;.exchange:()Lokhttp3/internal/connection/Exchange;` @kind virtual;
  #L13c640.  v3:= temp @kind object;
  #L13c642.  v2.`okhttp3.Response$Builder.m` @type ^`okhttp3.internal.connection.Exchange` := v3 @kind object;
  #L13c646.  return @kind void;
}
procedure `void` `a`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.a:(Lokhttp3/Response;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L13c658.  if v2 == 0 then goto L13c68c;
  #L13c65c.  call temp:= `body`(v2) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L13c662.  v2:= temp @kind object;
  #L13c664.  if v2 != 0 then goto L13c66c;
  #L13c668.  v2:= 1I;
  #L13c66a.  goto L13c66e;
  #L13c66c.  v2:= 0I;
  #L13c66e.  if v2 == 0 then goto L13c674;
  #L13c672.  goto L13c68c;
  #L13c674.  v2:= new `java.lang.IllegalArgumentException`;
  #L13c678.  v0:= "priorResponse.body != null" @kind object;
  #L13c67c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c682.  v0:= temp @kind object;
  #L13c684.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c68a.  throw v2;
  #L13c68c.  return @kind void;
}
procedure `void` `b`(`okhttp3.Response$Builder` v3 @kind this, `java.lang.String` v4 @kind object, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/Response$Builder;.b:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13c6a0.  if v5 == 0 then goto L13c7d8;
  #L13c6a4.  call temp:= `body`(v5) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L13c6aa.  v0:= temp @kind object;
  #L13c6ac.  v1:= 1I;
  #L13c6ae.  v2:= 0I;
  #L13c6b0.  if v0 != 0 then goto L13c6b8;
  #L13c6b4.  v0:= 1I;
  #L13c6b6.  goto L13c6ba;
  #L13c6b8.  v0:= 0I;
  #L13c6ba.  if v0 == 0 then goto L13c7a2;
  #L13c6be.  call temp:= `networkResponse`(v5) @signature `Lokhttp3/Response;.networkResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c6c4.  v0:= temp @kind object;
  #L13c6c6.  if v0 != 0 then goto L13c6ce;
  #L13c6ca.  v0:= 1I;
  #L13c6cc.  goto L13c6d0;
  #L13c6ce.  v0:= 0I;
  #L13c6d0.  if v0 == 0 then goto L13c76c;
  #L13c6d4.  call temp:= `cacheResponse`(v5) @signature `Lokhttp3/Response;.cacheResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c6da.  v0:= temp @kind object;
  #L13c6dc.  if v0 != 0 then goto L13c6e4;
  #L13c6e0.  v0:= 1I;
  #L13c6e2.  goto L13c6e6;
  #L13c6e4.  v0:= 0I;
  #L13c6e6.  if v0 == 0 then goto L13c736;
  #L13c6ea.  call temp:= `priorResponse`(v5) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L13c6f0.  v5:= temp @kind object;
  #L13c6f2.  if v5 != 0 then goto L13c6f8;
  #L13c6f6.  goto L13c6fa;
  #L13c6f8.  v1:= 0I;
  #L13c6fa.  if v1 == 0 then goto L13c700;
  #L13c6fe.  goto L13c7d8;
  #L13c700.  v5:= new `java.lang.StringBuilder`;
  #L13c704.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c70a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c710.  v4:= ".priorResponse != null" @kind object;
  #L13c714.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c71a.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c720.  v4:= temp @kind object;
  #L13c722.  v5:= new `java.lang.IllegalArgumentException`;
  #L13c726.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c72c.  v4:= temp @kind object;
  #L13c72e.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c734.  throw v5;
  #L13c736.  v5:= new `java.lang.StringBuilder`;
  #L13c73a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c740.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c746.  v4:= ".cacheResponse != null" @kind object;
  #L13c74a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c750.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c756.  v4:= temp @kind object;
  #L13c758.  v5:= new `java.lang.IllegalArgumentException`;
  #L13c75c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c762.  v4:= temp @kind object;
  #L13c764.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c76a.  throw v5;
  #L13c76c.  v5:= new `java.lang.StringBuilder`;
  #L13c770.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c776.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c77c.  v4:= ".networkResponse != null" @kind object;
  #L13c780.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c786.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c78c.  v4:= temp @kind object;
  #L13c78e.  v5:= new `java.lang.IllegalArgumentException`;
  #L13c792.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c798.  v4:= temp @kind object;
  #L13c79a.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c7a0.  throw v5;
  #L13c7a2.  v5:= new `java.lang.StringBuilder`;
  #L13c7a6.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c7ac.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c7b2.  v4:= ".body != null" @kind object;
  #L13c7b6.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c7bc.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c7c2.  v4:= temp @kind object;
  #L13c7c4.  v5:= new `java.lang.IllegalArgumentException`;
  #L13c7c8.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c7ce.  v4:= temp @kind object;
  #L13c7d0.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c7d6.  throw v5;
  #L13c7d8.  return @kind void;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c34c.  v0:= "name" @kind object;
  #L13c350.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c356.  v0:= "value" @kind object;
  #L13c35a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c360.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L13c364.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L13c36a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c37c.  v0.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L13c380.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v18 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L13c204.  v0:= v18 @kind object;
  #L13c208.  v5:= v0.`okhttp3.Response$Builder.c` @type ^`int`;
  #L13c20c.  if v5 < 0 then goto L13c214;
  #L13c210.  v1:= 1I;
  #L13c212.  goto L13c216;
  #L13c214.  v1:= 0I;
  #L13c216.  if v1 == 0 then goto L13c2ba;
  #L13c21a.  v2:= v0.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` @kind object;
  #L13c21e.  if v2 == 0 then goto L13c2a2;
  #L13c222.  v3:= v0.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` @kind object;
  #L13c226.  if v3 == 0 then goto L13c28a;
  #L13c22a.  v4:= v0.`okhttp3.Response$Builder.d` @type ^`java.lang.String` @kind object;
  #L13c22e.  if v4 == 0 then goto L13c272;
  #L13c232.  v6:= v0.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` @kind object;
  #L13c236.  v1:= v0.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L13c23a.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L13c240.  v7:= temp @kind object;
  #L13c242.  v8:= v0.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` @kind object;
  #L13c246.  v9:= v0.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` @kind object;
  #L13c24a.  v10:= v0.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` @kind object;
  #L13c24e.  v11:= v0.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` @kind object;
  #L13c252.  v12:= v0.`okhttp3.Response$Builder.k` @type ^`long` @kind wide;
  #L13c256.  v14:= v0.`okhttp3.Response$Builder.l` @type ^`long` @kind wide;
  #L13c25a.  v1:= v0.`okhttp3.Response$Builder.m` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L13c25e.  v17:= new `okhttp3.Response`;
  #L13c262.  v16:= v1 @kind object;
  #L13c266.  v1:= v17 @kind object;
  #L13c26a.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v14, v16) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Request;Lokhttp3/Protocol;Ljava/lang/String;ILokhttp3/Handshake;Lokhttp3/Headers;Lokhttp3/ResponseBody;Lokhttp3/Response;Lokhttp3/Response;Lokhttp3/Response;JJLokhttp3/internal/connection/Exchange;)V` @kind direct;
  #L13c270.  return v17 @kind object;
  #L13c272.  v1:= new `java.lang.IllegalStateException`;
  #L13c276.  v2:= "message == null" @kind object;
  #L13c27a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c280.  v2:= temp @kind object;
  #L13c282.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c288.  throw v1;
  #L13c28a.  v1:= new `java.lang.IllegalStateException`;
  #L13c28e.  v2:= "protocol == null" @kind object;
  #L13c292.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c298.  v2:= temp @kind object;
  #L13c29a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c2a0.  throw v1;
  #L13c2a2.  v1:= new `java.lang.IllegalStateException`;
  #L13c2a6.  v2:= "request == null" @kind object;
  #L13c2aa.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c2b0.  v2:= temp @kind object;
  #L13c2b2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c2b8.  throw v1;
  #L13c2ba.  v1:= new `java.lang.StringBuilder`;
  #L13c2be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c2c4.  v2:= "code < 0: " @kind object;
  #L13c2c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c2ce.  v2:= v0.`okhttp3.Response$Builder.c` @type ^`int`;
  #L13c2d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c2d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c2de.  v1:= temp @kind object;
  #L13c2e0.  v2:= new `java.lang.IllegalStateException`;
  #L13c2e4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c2ea.  v1:= temp @kind object;
  #L13c2ec.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c2f2.  throw v2;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c394.  v0:= "cacheResponse" @kind object;
  #L13c398.  call `b`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.b:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L13c39e.  v1.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` := v2 @kind object;
  #L13c3a2.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c3b4.  v0.`okhttp3.Response$Builder.c` @type ^`int` := v1;
  #L13c3b8.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `getBody$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getBody$okhttp:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c530.  v0:= v1.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` @kind object;
  #L13c534.  return v0 @kind object;
}
procedure `okhttp3.Response` `getCacheResponse$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getCacheResponse$okhttp:()Lokhttp3/Response;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c304.  v0:= v1.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` @kind object;
  #L13c308.  return v0 @kind object;
}
procedure `int` `getCode$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getCode$okhttp:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c144.  v0:= v1.`okhttp3.Response$Builder.c` @type ^`int`;
  #L13c148.  return v0;
}
procedure `okhttp3.internal.connection.Exchange` `getExchange$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getExchange$okhttp:()Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c548.  v0:= v1.`okhttp3.Response$Builder.m` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L13c54c.  return v0 @kind object;
}
procedure `okhttp3.Handshake` `getHandshake$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getHandshake$okhttp:()Lokhttp3/Handshake;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c1a4.  v0:= v1.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` @kind object;
  #L13c1a8.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `getHeaders$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getHeaders$okhttp:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c1bc.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L13c1c0.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getMessage$okhttp:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c15c.  v0:= v1.`okhttp3.Response$Builder.d` @type ^`java.lang.String` @kind object;
  #L13c160.  return v0 @kind object;
}
procedure `okhttp3.Response` `getNetworkResponse$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getNetworkResponse$okhttp:()Lokhttp3/Response;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c31c.  v0:= v1.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` @kind object;
  #L13c320.  return v0 @kind object;
}
procedure `okhttp3.Response` `getPriorResponse$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getPriorResponse$okhttp:()Lokhttp3/Response;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c334.  v0:= v1.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` @kind object;
  #L13c338.  return v0 @kind object;
}
procedure `okhttp3.Protocol` `getProtocol$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getProtocol$okhttp:()Lokhttp3/Protocol;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c1d4.  v0:= v1.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` @kind object;
  #L13c1d8.  return v0 @kind object;
}
procedure `long` `getReceivedResponseAtMillis$okhttp`(`okhttp3.Response$Builder` v2 @kind this) @signature `Lokhttp3/Response$Builder;.getReceivedResponseAtMillis$okhttp:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c174.  v0:= v2.`okhttp3.Response$Builder.l` @type ^`long` @kind wide;
  #L13c178.  return v0 @kind wide;
}
procedure `okhttp3.Request` `getRequest$okhttp`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.getRequest$okhttp:()Lokhttp3/Request;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c1ec.  v0:= v1.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` @kind object;
  #L13c1f0.  return v0 @kind object;
}
procedure `long` `getSentRequestAtMillis$okhttp`(`okhttp3.Response$Builder` v2 @kind this) @signature `Lokhttp3/Response$Builder;.getSentRequestAtMillis$okhttp:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13c18c.  v0:= v2.`okhttp3.Response$Builder.k` @type ^`long` @kind wide;
  #L13c190.  return v0 @kind wide;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c3cc.  v0.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L13c3d0.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c3e4.  v0:= "name" @kind object;
  #L13c3e8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c3ee.  v0:= "value" @kind object;
  #L13c3f2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c3f8.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L13c3fc.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L13c402.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Headers` v2 @kind object) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c414.  v0:= "headers" @kind object;
  #L13c418.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c41e.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L13c424.  v2:= temp @kind object;
  #L13c426.  v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v2 @kind object;
  #L13c42a.  return v1 @kind object;
}
procedure `void` `initExchange$okhttp`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.internal.connection.Exchange` v2 @kind object) @signature `Lokhttp3/Response$Builder;.initExchange$okhttp:(Lokhttp3/internal/connection/Exchange;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c7ec.  v0:= "deferredTrailers" @kind object;
  #L13c7f0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c7f6.  v1.`okhttp3.Response$Builder.m` @type ^`okhttp3.internal.connection.Exchange` := v2 @kind object;
  #L13c7fa.  return @kind void;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c43c.  v0:= "message" @kind object;
  #L13c440.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c446.  v1.`okhttp3.Response$Builder.d` @type ^`java.lang.String` := v2 @kind object;
  #L13c44a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c45c.  v0:= "networkResponse" @kind object;
  #L13c460.  call `b`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.b:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L13c466.  v1.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` := v2 @kind object;
  #L13c46a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c47c.  call `a`(v0, v1) @signature `Lokhttp3/Response$Builder;.a:(Lokhttp3/Response;)V` @kind direct;
  #L13c482.  v0.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` := v1 @kind object;
  #L13c486.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Protocol` v2 @kind object) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c498.  v0:= "protocol" @kind object;
  #L13c49c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c4a2.  v1.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` := v2 @kind object;
  #L13c4a6.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c4b8.  v0.`okhttp3.Response$Builder.l` @type ^`long` := v1 @kind wide;
  #L13c4bc.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c4d0.  v0:= "name" @kind object;
  #L13c4d4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c4da.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L13c4de.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L13c4e4.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c4f8.  v0:= "request" @kind object;
  #L13c4fc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c502.  v1.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` := v2 @kind object;
  #L13c506.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L13c518.  v0.`okhttp3.Response$Builder.k` @type ^`long` := v1 @kind wide;
  #L13c51c.  return v0 @kind object;
}
procedure `void` `setBody$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setBody$okhttp:(Lokhttp3/ResponseBody;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c80c.  v0.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L13c810.  return @kind void;
}
procedure `void` `setCacheResponse$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setCacheResponse$okhttp:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c824.  v0.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` := v1 @kind object;
  #L13c828.  return @kind void;
}
procedure `void` `setCode$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.setCode$okhttp:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c83c.  v0.`okhttp3.Response$Builder.c` @type ^`int` := v1;
  #L13c840.  return @kind void;
}
procedure `void` `setExchange$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.internal.connection.Exchange` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setExchange$okhttp:(Lokhttp3/internal/connection/Exchange;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c854.  v0.`okhttp3.Response$Builder.m` @type ^`okhttp3.internal.connection.Exchange` := v1 @kind object;
  #L13c858.  return @kind void;
}
procedure `void` `setHandshake$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setHandshake$okhttp:(Lokhttp3/Handshake;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c86c.  v0.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L13c870.  return @kind void;
}
procedure `void` `setHeaders$okhttp`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Headers$Builder` v2 @kind object) @signature `Lokhttp3/Response$Builder;.setHeaders$okhttp:(Lokhttp3/Headers$Builder;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13c884.  v0:= "<set-?>" @kind object;
  #L13c888.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13c88e.  v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v2 @kind object;
  #L13c892.  return @kind void;
}
procedure `void` `setMessage$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setMessage$okhttp:(Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c8a4.  v0.`okhttp3.Response$Builder.d` @type ^`java.lang.String` := v1 @kind object;
  #L13c8a8.  return @kind void;
}
procedure `void` `setNetworkResponse$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setNetworkResponse$okhttp:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c8bc.  v0.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` := v1 @kind object;
  #L13c8c0.  return @kind void;
}
procedure `void` `setPriorResponse$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setPriorResponse$okhttp:(Lokhttp3/Response;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c8d4.  v0.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` := v1 @kind object;
  #L13c8d8.  return @kind void;
}
procedure `void` `setProtocol$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setProtocol$okhttp:(Lokhttp3/Protocol;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c8ec.  v0.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L13c8f0.  return @kind void;
}
procedure `void` `setReceivedResponseAtMillis$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.setReceivedResponseAtMillis$okhttp:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c904.  v0.`okhttp3.Response$Builder.l` @type ^`long` := v1 @kind wide;
  #L13c908.  return @kind void;
}
procedure `void` `setRequest$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/Response$Builder;.setRequest$okhttp:(Lokhttp3/Request;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c91c.  v0.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` := v1 @kind object;
  #L13c920.  return @kind void;
}
procedure `void` `setSentRequestAtMillis$okhttp`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.setSentRequestAtMillis$okhttp:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c934.  v0.`okhttp3.Response$Builder.k` @type ^`long` := v1 @kind wide;
  #L13c938.  return @kind void;
}
