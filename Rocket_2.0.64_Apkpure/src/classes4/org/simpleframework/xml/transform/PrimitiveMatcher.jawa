record `org.simpleframework.xml.transform.PrimitiveMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PrimitiveMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bbc50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bbc56.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PrimitiveMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbb9c.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbba0.  if v2 != v0 then goto L1bbbb0;
  #L1bbba4.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L1bbba8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L1bbbae.  return v2 @kind object;
  #L1bbbb0.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbbb4.  if v2 != v0 then goto L1bbbc4;
  #L1bbbb8.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L1bbbbc.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L1bbbc2.  return v2 @kind object;
  #L1bbbc4.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbbc8.  if v2 != v0 then goto L1bbbd8;
  #L1bbbcc.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L1bbbd0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L1bbbd6.  return v2 @kind object;
  #L1bbbd8.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbbdc.  if v2 != v0 then goto L1bbbec;
  #L1bbbe0.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L1bbbe4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L1bbbea.  return v2 @kind object;
  #L1bbbec.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbbf0.  if v2 != v0 then goto L1bbc00;
  #L1bbbf4.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L1bbbf8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L1bbbfe.  return v2 @kind object;
  #L1bbc00.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbc04.  if v2 != v0 then goto L1bbc14;
  #L1bbc08.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L1bbc0c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L1bbc12.  return v2 @kind object;
  #L1bbc14.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbc18.  if v2 != v0 then goto L1bbc28;
  #L1bbc1c.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L1bbc20.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L1bbc26.  return v2 @kind object;
  #L1bbc28.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bbc2c.  if v2 != v0 then goto L1bbc3c;
  #L1bbc30.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L1bbc34.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L1bbc3a.  return v2 @kind object;
  #L1bbc3c.  v2:= 0I;
  #L1bbc3e.  return v2 @kind object;
}
