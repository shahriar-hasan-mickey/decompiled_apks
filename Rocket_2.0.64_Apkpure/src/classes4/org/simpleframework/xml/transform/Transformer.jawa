record `org.simpleframework.xml.transform.Transformer` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.Transformer.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bc1d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bc1d6.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1bc1da.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1bc1e0.  v1.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1bc1e4.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1bc1e8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1bc1ee.  v1.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1bc1f2.  v0:= new `org.simpleframework.xml.transform.DefaultMatcher`;
  #L1bc1f6.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L1bc1fc.  v1.`org.simpleframework.xml.transform.Transformer.c` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L1bc200.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bc154.  v0:= v1.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bc158.  call temp:= `contains`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1bc15e.  v0:= temp;
  #L1bc160.  if v0 != 0 then goto L1bc184;
  #L1bc164.  v0:= v1.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bc168.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1bc16e.  v0:= temp @kind object;
  #L1bc170.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L1bc174.  if v0 == 0 then goto L1bc17a;
  #L1bc178.  return v0 @kind object;
  #L1bc17a.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/transform/Transformer;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bc180.  v2:= temp @kind object;
  #L1bc182.  return v2 @kind object;
  #L1bc184.  v2:= 0I;
  #L1bc186.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1bc198.  v0:= v2.`org.simpleframework.xml.transform.Transformer.c` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L1bc19c.  call temp:= `match`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L1bc1a2.  v0:= temp @kind object;
  #L1bc1a4.  if v0 == 0 then goto L1bc1b4;
  #L1bc1a8.  v1:= v2.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bc1ac.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1bc1b2.  goto L1bc1be;
  #L1bc1b4.  v1:= v2.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bc1b8.  call `cache`(v1, v3, v2) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1bc1be.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.read:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bc0cc.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bc0d2.  v0:= temp @kind object;
  #L1bc0d4.  if v0 == 0 then goto L1bc0e2;
  #L1bc0d8.  call temp:= `read`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L1bc0de.  v3:= temp @kind object;
  #L1bc0e0.  return v3 @kind object;
  #L1bc0e2.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L1bc0e6.  v0:= 1I;
  #L1bc0e8.  v0:= new `java.lang.Object`[v0];
  #L1bc0ec.  v1:= 0I;
  #L1bc0ee.  v0[v1]:= v4 @kind object;
  #L1bc0f2.  v4:= "Transform of %s not supported" @kind object;
  #L1bc0f6.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1bc0fc.  throw v3;
}
procedure `boolean` `valid`(`org.simpleframework.xml.transform.Transformer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.valid:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;

  #L1bc0a8.  call temp:= `a`(v0, v1) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bc0ae.  v1:= temp @kind object;
  #L1bc0b0.  if v1 == 0 then goto L1bc0b8;
  #L1bc0b4.  v1:= 1I;
  #L1bc0b6.  goto L1bc0ba;
  #L1bc0b8.  v1:= 0I;
  #L1bc0ba.  return v1;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.write:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bc110.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bc116.  v0:= temp @kind object;
  #L1bc118.  if v0 == 0 then goto L1bc126;
  #L1bc11c.  call temp:= `write`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @kind interface;
  #L1bc122.  v3:= temp @kind object;
  #L1bc124.  return v3 @kind object;
  #L1bc126.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L1bc12a.  v0:= 1I;
  #L1bc12c.  v0:= new `java.lang.Object`[v0];
  #L1bc130.  v1:= 0I;
  #L1bc132.  v0[v1]:= v4 @kind object;
  #L1bc136.  v4:= "Transform of %s not supported" @kind object;
  #L1bc13a.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1bc140.  throw v3;
}
