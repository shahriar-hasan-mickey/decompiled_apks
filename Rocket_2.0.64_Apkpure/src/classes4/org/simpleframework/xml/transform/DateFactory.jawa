record `org.simpleframework.xml.transform.DateFactory` @kind class @AccessFlag PUBLIC {
  `java.lang.reflect.Constructor` `org.simpleframework.xml.transform.DateFactory.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/DateFactory;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1badf4.  v0:= 1I;
  #L1badf6.  v0:= new `java.lang.Class`[v0];
  #L1badfa.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1badfe.  v2:= 0I;
  #L1bae00.  v0[v2]:= v1 @kind object;
  #L1bae04.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/DateFactory;.<init>:(Ljava/lang/Class;[Ljava/lang/Class;)V` @kind direct;
  #L1bae0a.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateFactory` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DateFactory;.<init>:(Ljava/lang/Class;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bae1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bae22.  call temp:= `getDeclaredConstructor`(v1, v2) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1bae28.  v1:= temp @kind object;
  #L1bae2a.  v0.`org.simpleframework.xml.transform.DateFactory.a` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L1bae2e.  return @kind void;
}
procedure `java.util.Date` `getInstance`(`org.simpleframework.xml.transform.DateFactory` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DateFactory;.getInstance:([Ljava/lang/Object;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1badd0.  v0:= v1.`org.simpleframework.xml.transform.DateFactory.a` @type ^`java.lang.reflect.Constructor` @kind object;
  #L1badd4.  call temp:= `newInstance`(v0, v2) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1badda.  v2:= temp @kind object;
  #L1baddc.  v2:= (`java.util.Date`) v2 @kind object;
  #L1bade0.  return v2 @kind object;
}
