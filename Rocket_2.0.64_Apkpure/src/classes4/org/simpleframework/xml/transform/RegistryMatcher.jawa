record `org.simpleframework.xml.transform.RegistryMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bbcf8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bbcfe.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1bbd02.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1bbd08.  v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1bbd0c.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1bbd10.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1bbd16.  v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1bbd1a.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbc68.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bbc6c.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1bbc72.  v0:= temp @kind object;
  #L1bbc74.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1bbc78.  if v0 == 0 then goto L1bbc86;
  #L1bbc7c.  call temp:= `b`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.b:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bbc82.  v2:= temp @kind object;
  #L1bbc84.  return v2 @kind object;
  #L1bbc86.  v2:= 0I;
  #L1bbc88.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.b:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbc9c.  call temp:= `newInstance`(v3) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L1bbca2.  v3:= temp @kind object;
  #L1bbca4.  v3:= (`org.simpleframework.xml.transform.Transform`) v3 @kind object;
  #L1bbca8.  if v3 == 0 then goto L1bbcb6;
  #L1bbcac.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bbcb0.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1bbcb6.  return v3 @kind object;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbd2c.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bbd30.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1bbd36.  return @kind void;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.transform.Transform` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Lorg/simpleframework/xml/transform/Transform;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbd48.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bbd4c.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1bbd52.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbcc8.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1bbccc.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1bbcd2.  v0:= temp @kind object;
  #L1bbcd4.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L1bbcd8.  if v0 != 0 then goto L1bbce6;
  #L1bbcdc.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bbce2.  v2:= temp @kind object;
  #L1bbce4.  return v2 @kind object;
  #L1bbce6.  return v0 @kind object;
}
