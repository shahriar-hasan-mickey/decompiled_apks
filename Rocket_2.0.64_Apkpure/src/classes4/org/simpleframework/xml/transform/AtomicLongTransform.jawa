record `org.simpleframework.xml.transform.AtomicLongTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.AtomicLongTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ba760.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ba766.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.AtomicLongTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ba6dc.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.read:(Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLong;` @kind virtual;
  #L1ba6e2.  v1:= temp @kind object;
  #L1ba6e4.  return v1 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicLong` `read`(`org.simpleframework.xml.transform.AtomicLongTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.read:(Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLong;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ba734.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(Ljava/lang/String;)Ljava/lang/Long;` @kind static;
  #L1ba73a.  v4:= temp @kind object;
  #L1ba73c.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L1ba740.  call temp:= `longValue`(v4) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L1ba746.  v1:= temp @kind wide;
  #L1ba748.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L1ba74e.  return v0 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.AtomicLongTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ba6f8.  v1:= (`java.util.concurrent.atomic.AtomicLong`) v1 @kind object;
  #L1ba6fc.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.write:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/lang/String;` @kind virtual;
  #L1ba702.  v1:= temp @kind object;
  #L1ba704.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.AtomicLongTransform` v0 @kind this, `java.util.concurrent.atomic.AtomicLong` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.write:(Ljava/util/concurrent/atomic/AtomicLong;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L1ba718.  call temp:= `toString`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ba71e.  v1:= temp @kind object;
  #L1ba720.  return v1 @kind object;
}
