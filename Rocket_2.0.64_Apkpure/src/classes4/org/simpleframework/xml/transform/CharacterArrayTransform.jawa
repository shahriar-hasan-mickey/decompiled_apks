record `org.simpleframework.xml.transform.CharacterArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.lang.Class` `org.simpleframework.xml.transform.CharacterArrayTransform.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.CharacterArrayTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1baa9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1baaa2.  v0.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` := v1 @kind object;
  #L1baaa6.  return @kind void;
}
procedure `java.lang.Object` `a`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `char`[] v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.a:([CI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ba9a8.  v0:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L1ba9ac.  call temp:= `newInstance`(v0, v5) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1ba9b2.  v0:= temp @kind object;
  #L1ba9b4.  v1:= 0I;
  #L1ba9b6.  if v1 >= v5 then goto L1ba9d2;
  #L1ba9ba.  v2:= v4[v1] @kind char;
  #L1ba9be.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L1ba9c4.  v2:= temp @kind object;
  #L1ba9c6.  call `set`(v0, v1, v2) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L1ba9cc.  v1:= v1 + 1;
  #L1ba9d0.  goto L1ba9b6;
  #L1ba9d2.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.b:(Ljava/lang/Object;I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1baa58.  v0:= new `java.lang.StringBuilder`;
  #L1baa5c.  call `<init>`(v0, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1baa62.  v1:= 0I;
  #L1baa64.  if v1 >= v5 then goto L1baa80;
  #L1baa68.  call temp:= `get`(v4, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L1baa6e.  v2:= temp @kind object;
  #L1baa70.  if v2 == 0 then goto L1baa7a;
  #L1baa74.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1baa7a.  v1:= v1 + 1;
  #L1baa7e.  goto L1baa64;
  #L1baa80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1baa86.  v4:= temp @kind object;
  #L1baa88.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ba9e4.  call temp:= `toCharArray`(v4) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L1ba9ea.  v4:= temp @kind object;
  #L1ba9ec.  v0:= length @variable v4;
  #L1ba9ee.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L1ba9f2.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1ba9f6.  if v1 != v2 then goto L1ba9fc;
  #L1ba9fa.  return v4 @kind object;
  #L1ba9fc.  call temp:= `a`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.a:([CI)Ljava/lang/Object;` @kind direct;
  #L1baa02.  v4:= temp @kind object;
  #L1baa04.  return v4 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1baa18.  call temp:= `getLength`(v4) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L1baa1e.  v0:= temp;
  #L1baa20.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L1baa24.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1baa28.  if v1 != v2 then goto L1baa3c;
  #L1baa2c.  v4:= (`char`[]) v4 @kind object;
  #L1baa30.  v0:= new `java.lang.String`;
  #L1baa34.  call `<init>`(v0, v4) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L1baa3a.  return v0 @kind object;
  #L1baa3c.  call temp:= `b`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.b:(Ljava/lang/Object;I)Ljava/lang/String;` @kind direct;
  #L1baa42.  v4:= temp @kind object;
  #L1baa44.  return v4 @kind object;
}
