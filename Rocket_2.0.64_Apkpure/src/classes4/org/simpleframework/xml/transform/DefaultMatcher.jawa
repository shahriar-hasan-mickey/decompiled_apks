record `org.simpleframework.xml.transform.DefaultMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bb1ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bb1f2.  v0:= new `org.simpleframework.xml.transform.PrimitiveMatcher`;
  #L1bb1f6.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @kind direct;
  #L1bb1fc.  v1.`org.simpleframework.xml.transform.DefaultMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L1bb200.  v0:= new `org.simpleframework.xml.transform.PackageMatcher`;
  #L1bb204.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @kind direct;
  #L1bb20a.  v1.`org.simpleframework.xml.transform.DefaultMatcher.c` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L1bb20e.  v0:= new `org.simpleframework.xml.transform.ArrayMatcher`;
  #L1bb212.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L1bb218.  v1.`org.simpleframework.xml.transform.DefaultMatcher.d` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L1bb21c.  v1.`org.simpleframework.xml.transform.DefaultMatcher.b` @type ^`org.simpleframework.xml.transform.Matcher` := v2 @kind object;
  #L1bb220.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bb198.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1bb19e.  v0:= temp;
  #L1bb1a0.  if v0 == 0 then goto L1bb1b2;
  #L1bb1a4.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.d` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L1bb1a8.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L1bb1ae.  v2:= temp @kind object;
  #L1bb1b0.  return v2 @kind object;
  #L1bb1b2.  call temp:= `isPrimitive`(v2) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1bb1b8.  v0:= temp;
  #L1bb1ba.  if v0 == 0 then goto L1bb1cc;
  #L1bb1be.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L1bb1c2.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L1bb1c8.  v2:= temp @kind object;
  #L1bb1ca.  return v2 @kind object;
  #L1bb1cc.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.c` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L1bb1d0.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L1bb1d6.  v2:= temp @kind object;
  #L1bb1d8.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bb16c.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.b` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L1bb170.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L1bb176.  v0:= temp @kind object;
  #L1bb178.  if v0 == 0 then goto L1bb17e;
  #L1bb17c.  return v0 @kind object;
  #L1bb17e.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb184.  v2:= temp @kind object;
  #L1bb186.  return v2 @kind object;
}
