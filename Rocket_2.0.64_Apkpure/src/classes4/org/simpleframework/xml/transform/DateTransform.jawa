record `org.simpleframework.xml.transform.DateTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `org.simpleframework.xml.transform.DateFactory` `org.simpleframework.xml.transform.DateTransform.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateTransform` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1baf04.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1baf0a.  v0:= new `org.simpleframework.xml.transform.DateFactory`;
  #L1baf0e.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1baf14.  v1.`org.simpleframework.xml.transform.DateTransform.a` @type ^`org.simpleframework.xml.transform.DateFactory` := v0 @kind object;
  #L1baf18.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bae40.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L1bae46.  v1:= temp @kind object;
  #L1bae48.  return v1 @kind object;
}
procedure `java.util.Date` `read`(`org.simpleframework.xml.transform.DateTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1baeac.  @monitorenter v3
  #L1baeae.  call temp:= `getDate`(v4) @signature `Lorg/simpleframework/xml/transform/DateType;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L1baeb4.  v4:= temp @kind object;
  #L1baeb6.  call temp:= `getTime`(v4) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L1baebc.  v0:= temp @kind wide;
  #L1baebe.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1baec4.  v4:= temp @kind object;
  #L1baec6.  v0:= v3.`org.simpleframework.xml.transform.DateTransform.a` @type ^`org.simpleframework.xml.transform.DateFactory` @kind object;
  #L1baeca.  v1:= 1I;
  #L1baecc.  v1:= new `java.lang.Object`[v1];
  #L1baed0.  v2:= 0I;
  #L1baed2.  v1[v2]:= v4 @kind object;
  #L1baed6.  call temp:= `getInstance`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateFactory;.getInstance:([Ljava/lang/Object;)Ljava/util/Date;` @kind virtual;
  #L1baedc.  v4:= temp @kind object;
  #L1baede.  @monitorexit v3
  #L1baee0.  return v4 @kind object;
  #L1baee2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1baee4.  @monitorexit v3
  #L1baee6.  throw v4;
  catch `java.lang.Throwable` @[L1baeae..L1baede] goto L1baee2;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bae5c.  v1:= (`java.util.Date`) v1 @kind object;
  #L1bae60.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L1bae66.  v1:= temp @kind object;
  #L1bae68.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.util.Date` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/util/Date;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L1bae7c.  @monitorenter v0
  #L1bae7e.  call temp:= `getText`(v1) @signature `Lorg/simpleframework/xml/transform/DateType;.getText:(Ljava/util/Date;)Ljava/lang/String;` @kind static;
  #L1bae84.  v1:= temp @kind object;
  #L1bae86.  @monitorexit v0
  #L1bae88.  return v1 @kind object;
  #L1bae8a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1bae8c.  @monitorexit v0
  #L1bae8e.  throw v1;
  catch `java.lang.Throwable` @[L1bae7e..L1bae86] goto L1bae8a;
}
