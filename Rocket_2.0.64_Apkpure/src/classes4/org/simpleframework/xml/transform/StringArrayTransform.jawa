record `org.simpleframework.xml.transform.StringArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.util.regex.Pattern` `org.simpleframework.xml.transform.StringArrayTransform.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.transform.StringArrayTransform.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bbf08.  v0:= "," @kind object;
  #L1bbf0c.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bbf12.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1bbf24.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bbf2a.  call temp:= `compile`(v2) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1bbf30.  v0:= temp @kind object;
  #L1bbf32.  v1.`org.simpleframework.xml.transform.StringArrayTransform.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1bbf36.  v1.`org.simpleframework.xml.transform.StringArrayTransform.b` @type ^`java.lang.String` := v2 @kind object;
  #L1bbf3a.  return @kind void;
}
procedure `java.lang.String`[] `a`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.a:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbec8.  v3:= v1.`org.simpleframework.xml.transform.StringArrayTransform.a` @type ^`java.util.regex.Pattern` @kind object;
  #L1bbecc.  call temp:= `split`(v3, v2) @signature `Ljava/util/regex/Pattern;.split:(Ljava/lang/CharSequence;)[Ljava/lang/String;` @kind virtual;
  #L1bbed2.  v2:= temp @kind object;
  #L1bbed4.  v3:= 0I;
  #L1bbed6.  v0:= length @variable v2;
  #L1bbed8.  if v3 >= v0 then goto L1bbef6;
  #L1bbedc.  v0:= v2[v3] @kind object;
  #L1bbee0.  if v0 == 0 then goto L1bbef0;
  #L1bbee4.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1bbeea.  v0:= temp @kind object;
  #L1bbeec.  v2[v3]:= v0 @kind object;
  #L1bbef0.  v3:= v3 + 1;
  #L1bbef4.  goto L1bbed6;
  #L1bbef6.  return v2 @kind object;
}
procedure `java.lang.String` `b`(`org.simpleframework.xml.transform.StringArrayTransform` v4 @kind this, `java.lang.String`[] v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.b:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1bbe4c.  v0:= new `java.lang.StringBuilder`;
  #L1bbe50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bbe56.  v1:= 0I;
  #L1bbe58.  v2:= length @variable v5;
  #L1bbe5a.  if v1 >= v2 then goto L1bbe8e;
  #L1bbe5e.  v2:= v5[v1] @kind object;
  #L1bbe62.  if v2 == 0 then goto L1bbe88;
  #L1bbe66.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1bbe6c.  v3:= temp;
  #L1bbe6e.  if v3 <= 0 then goto L1bbe82;
  #L1bbe72.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbe78.  v3:= 32I;
  #L1bbe7c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbe82.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbe88.  v1:= v1 + 1;
  #L1bbe8c.  goto L1bbe58;
  #L1bbe8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bbe94.  v5:= temp @kind object;
  #L1bbe96.  return v5 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.StringArrayTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bbdf0.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L1bbdf6.  v1:= temp @kind object;
  #L1bbdf8.  return v1 @kind object;
}
procedure `java.lang.String`[] `read`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.read:(Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbea8.  v0:= v1.`org.simpleframework.xml.transform.StringArrayTransform.b` @type ^`java.lang.String` @kind object;
  #L1bbeac.  call temp:= `a`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.a:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind direct;
  #L1bbeb2.  v2:= temp @kind object;
  #L1bbeb4.  return v2 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.StringArrayTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bbe0c.  v1:= (`java.lang.String`[]) v1 @kind object;
  #L1bbe10.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1bbe16.  v1:= temp @kind object;
  #L1bbe18.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.StringArrayTransform` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.write:([Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bbe2c.  v0:= v1.`org.simpleframework.xml.transform.StringArrayTransform.b` @type ^`java.lang.String` @kind object;
  #L1bbe30.  call temp:= `b`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.b:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L1bbe36.  v2:= temp @kind object;
  #L1bbe38.  return v2 @kind object;
}
