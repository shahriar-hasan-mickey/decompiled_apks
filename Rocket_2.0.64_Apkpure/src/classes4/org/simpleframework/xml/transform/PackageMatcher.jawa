record `org.simpleframework.xml.transform.PackageMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PackageMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bbb84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bbb8a.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bb8dc.  call temp:= `getSuperclass`(v2) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1bb8e2.  v0:= temp @kind object;
  #L1bb8e4.  if v0 == 0 then goto L1bb918;
  #L1bb8e8.  call temp:= `isEnum`(v0) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L1bb8ee.  v0:= temp;
  #L1bb8f0.  if v0 == 0 then goto L1bb900;
  #L1bb8f4.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L1bb8f8.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bb8fe.  return v0 @kind object;
  #L1bb900.  call temp:= `isEnum`(v2) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L1bb906.  v0:= temp;
  #L1bb908.  if v0 == 0 then goto L1bb918;
  #L1bb90c.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L1bb910.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bb916.  return v0 @kind object;
  #L1bb918.  v2:= 0I;
  #L1bb91a.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bb92c.  v0:= constclass @type ^`java.io.File` @kind object;
  #L1bb930.  if v2 != v0 then goto L1bb940;
  #L1bb934.  v2:= new `org.simpleframework.xml.transform.FileTransform`;
  #L1bb938.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FileTransform;.<init>:()V` @kind direct;
  #L1bb93e.  return v2 @kind object;
  #L1bb940.  v2:= 0I;
  #L1bb942.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `c`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bb954.  v0:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1bb958.  if v2 != v0 then goto L1bb968;
  #L1bb95c.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L1bb960.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L1bb966.  return v2 @kind object;
  #L1bb968.  v0:= constclass @type ^`java.lang.Integer` @kind object;
  #L1bb96c.  if v2 != v0 then goto L1bb97c;
  #L1bb970.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L1bb974.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L1bb97a.  return v2 @kind object;
  #L1bb97c.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L1bb980.  if v2 != v0 then goto L1bb990;
  #L1bb984.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L1bb988.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L1bb98e.  return v2 @kind object;
  #L1bb990.  v0:= constclass @type ^`java.lang.Double` @kind object;
  #L1bb994.  if v2 != v0 then goto L1bb9a4;
  #L1bb998.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L1bb99c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L1bb9a2.  return v2 @kind object;
  #L1bb9a4.  v0:= constclass @type ^`java.lang.Float` @kind object;
  #L1bb9a8.  if v2 != v0 then goto L1bb9b8;
  #L1bb9ac.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L1bb9b0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L1bb9b6.  return v2 @kind object;
  #L1bb9b8.  v0:= constclass @type ^`java.lang.Short` @kind object;
  #L1bb9bc.  if v2 != v0 then goto L1bb9cc;
  #L1bb9c0.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L1bb9c4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L1bb9ca.  return v2 @kind object;
  #L1bb9cc.  v0:= constclass @type ^`java.lang.Byte` @kind object;
  #L1bb9d0.  if v2 != v0 then goto L1bb9e0;
  #L1bb9d4.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L1bb9d8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L1bb9de.  return v2 @kind object;
  #L1bb9e0.  v0:= constclass @type ^`java.lang.Character` @kind object;
  #L1bb9e4.  if v2 != v0 then goto L1bb9f4;
  #L1bb9e8.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L1bb9ec.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L1bb9f2.  return v2 @kind object;
  #L1bb9f4.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L1bb9f8.  if v2 != v0 then goto L1bba08;
  #L1bb9fc.  v2:= new `org.simpleframework.xml.transform.StringTransform`;
  #L1bba00.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/StringTransform;.<init>:()V` @kind direct;
  #L1bba06.  return v2 @kind object;
  #L1bba08.  v0:= constclass @type ^`java.lang.Class` @kind object;
  #L1bba0c.  if v2 != v0 then goto L1bba1c;
  #L1bba10.  v2:= new `org.simpleframework.xml.transform.ClassTransform`;
  #L1bba14.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @kind direct;
  #L1bba1a.  return v2 @kind object;
  #L1bba1c.  v2:= 0I;
  #L1bba1e.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `d`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.d:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bba30.  v0:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L1bba34.  if v2 != v0 then goto L1bba44;
  #L1bba38.  v2:= new `org.simpleframework.xml.transform.BigDecimalTransform`;
  #L1bba3c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigDecimalTransform;.<init>:()V` @kind direct;
  #L1bba42.  return v2 @kind object;
  #L1bba44.  v0:= constclass @type ^`java.math.BigInteger` @kind object;
  #L1bba48.  if v2 != v0 then goto L1bba58;
  #L1bba4c.  v2:= new `org.simpleframework.xml.transform.BigIntegerTransform`;
  #L1bba50.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigIntegerTransform;.<init>:()V` @kind direct;
  #L1bba56.  return v2 @kind object;
  #L1bba58.  v2:= 0I;
  #L1bba5a.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `e`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.e:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bba6c.  v0:= constclass @type ^`java.sql.Time` @kind object;
  #L1bba70.  if v2 != v0 then goto L1bba80;
  #L1bba74.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L1bba78.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bba7e.  return v0 @kind object;
  #L1bba80.  v0:= constclass @type ^`java.sql.Date` @kind object;
  #L1bba84.  if v2 != v0 then goto L1bba94;
  #L1bba88.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L1bba8c.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bba92.  return v0 @kind object;
  #L1bba94.  v0:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L1bba98.  if v2 != v0 then goto L1bbaa8;
  #L1bba9c.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L1bbaa0.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bbaa6.  return v0 @kind object;
  #L1bbaa8.  v2:= 0I;
  #L1bbaaa.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `f`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.f:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbabc.  v0:= constclass @type ^`java.net.URL` @kind object;
  #L1bbac0.  if v2 != v0 then goto L1bbad0;
  #L1bbac4.  v2:= new `org.simpleframework.xml.transform.URLTransform`;
  #L1bbac8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/URLTransform;.<init>:()V` @kind direct;
  #L1bbace.  return v2 @kind object;
  #L1bbad0.  v2:= 0I;
  #L1bbad2.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `g`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.g:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbae4.  v0:= constclass @type ^`java.util.Date` @kind object;
  #L1bbae8.  if v2 != v0 then goto L1bbaf8;
  #L1bbaec.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L1bbaf0.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1bbaf6.  return v0 @kind object;
  #L1bbaf8.  v0:= constclass @type ^`java.util.Locale` @kind object;
  #L1bbafc.  if v2 != v0 then goto L1bbb0c;
  #L1bbb00.  v2:= new `org.simpleframework.xml.transform.LocaleTransform`;
  #L1bbb04.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.<init>:()V` @kind direct;
  #L1bbb0a.  return v2 @kind object;
  #L1bbb0c.  v0:= constclass @type ^`java.util.Currency` @kind object;
  #L1bbb10.  if v2 != v0 then goto L1bbb20;
  #L1bbb14.  v2:= new `org.simpleframework.xml.transform.CurrencyTransform`;
  #L1bbb18.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CurrencyTransform;.<init>:()V` @kind direct;
  #L1bbb1e.  return v2 @kind object;
  #L1bbb20.  v0:= constclass @type ^`java.util.GregorianCalendar` @kind object;
  #L1bbb24.  if v2 != v0 then goto L1bbb34;
  #L1bbb28.  v2:= new `org.simpleframework.xml.transform.GregorianCalendarTransform`;
  #L1bbb2c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/GregorianCalendarTransform;.<init>:()V` @kind direct;
  #L1bbb32.  return v2 @kind object;
  #L1bbb34.  v0:= constclass @type ^`java.util.TimeZone` @kind object;
  #L1bbb38.  if v2 != v0 then goto L1bbb48;
  #L1bbb3c.  v2:= new `org.simpleframework.xml.transform.TimeZoneTransform`;
  #L1bbb40.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/TimeZoneTransform;.<init>:()V` @kind direct;
  #L1bbb46.  return v2 @kind object;
  #L1bbb48.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L1bbb4c.  if v2 != v0 then goto L1bbb5c;
  #L1bbb50.  v2:= new `org.simpleframework.xml.transform.AtomicIntegerTransform`;
  #L1bbb54.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.<init>:()V` @kind direct;
  #L1bbb5a.  return v2 @kind object;
  #L1bbb5c.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L1bbb60.  if v2 != v0 then goto L1bbb70;
  #L1bbb64.  v2:= new `org.simpleframework.xml.transform.AtomicLongTransform`;
  #L1bbb68.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.<init>:()V` @kind direct;
  #L1bbb6e.  return v2 @kind object;
  #L1bbb70.  v2:= 0I;
  #L1bbb72.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PackageMatcher` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bb81c.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bb822.  v0:= temp @kind object;
  #L1bb824.  v1:= "java.lang" @kind object;
  #L1bb828.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb82e.  v1:= temp;
  #L1bb830.  if v1 == 0 then goto L1bb83e;
  #L1bb834.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb83a.  v3:= temp @kind object;
  #L1bb83c.  return v3 @kind object;
  #L1bb83e.  v1:= "java.util" @kind object;
  #L1bb842.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb848.  v1:= temp;
  #L1bb84a.  if v1 == 0 then goto L1bb858;
  #L1bb84e.  call temp:= `g`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.g:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb854.  v3:= temp @kind object;
  #L1bb856.  return v3 @kind object;
  #L1bb858.  v1:= "java.net" @kind object;
  #L1bb85c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb862.  v1:= temp;
  #L1bb864.  if v1 == 0 then goto L1bb872;
  #L1bb868.  call temp:= `f`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.f:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb86e.  v3:= temp @kind object;
  #L1bb870.  return v3 @kind object;
  #L1bb872.  v1:= "java.io" @kind object;
  #L1bb876.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb87c.  v1:= temp;
  #L1bb87e.  if v1 == 0 then goto L1bb88c;
  #L1bb882.  call temp:= `b`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb888.  v3:= temp @kind object;
  #L1bb88a.  return v3 @kind object;
  #L1bb88c.  v1:= "java.sql" @kind object;
  #L1bb890.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb896.  v1:= temp;
  #L1bb898.  if v1 == 0 then goto L1bb8a6;
  #L1bb89c.  call temp:= `e`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.e:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb8a2.  v3:= temp @kind object;
  #L1bb8a4.  return v3 @kind object;
  #L1bb8a6.  v1:= "java.math" @kind object;
  #L1bb8aa.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1bb8b0.  v0:= temp;
  #L1bb8b2.  if v0 == 0 then goto L1bb8c0;
  #L1bb8b6.  call temp:= `d`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.d:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb8bc.  v3:= temp @kind object;
  #L1bb8be.  return v3 @kind object;
  #L1bb8c0.  call temp:= `a`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L1bb8c6.  v3:= temp @kind object;
  #L1bb8c8.  return v3 @kind object;
}
