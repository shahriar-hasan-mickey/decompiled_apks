record `org.simpleframework.xml.transform.ClassTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bad2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bad32.  return @kind void;
}
procedure `java.lang.ClassLoader` `a`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.a:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bac8c.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1bac92.  v0:= temp @kind object;
  #L1bac94.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L1bac9a.  v0:= temp @kind object;
  #L1bac9c.  return v0 @kind object;
}
procedure `java.lang.ClassLoader` `b`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.b:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1bacb0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1bacb6.  v0:= temp @kind object;
  #L1bacb8.  call temp:= `getContextClassLoader`(v0) @signature `Ljava/lang/Thread;.getContextClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L1bacbe.  v0:= temp @kind object;
  #L1bacc0.  return v0 @kind object;
}
procedure `java.lang.Class` `c`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.c:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1babb0.  v0:= "byte" @kind object;
  #L1babb4.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1babba.  v0:= temp;
  #L1babbc.  if v0 == 0 then goto L1babc6;
  #L1babc0.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1babc4.  return v2 @kind object;
  #L1babc6.  v0:= "short" @kind object;
  #L1babca.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1babd0.  v0:= temp;
  #L1babd2.  if v0 == 0 then goto L1babdc;
  #L1babd6.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1babda.  return v2 @kind object;
  #L1babdc.  v0:= "int" @kind object;
  #L1babe0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1babe6.  v0:= temp;
  #L1babe8.  if v0 == 0 then goto L1babf2;
  #L1babec.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1babf0.  return v2 @kind object;
  #L1babf2.  v0:= "long" @kind object;
  #L1babf6.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1babfc.  v0:= temp;
  #L1babfe.  if v0 == 0 then goto L1bac08;
  #L1bac02.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac06.  return v2 @kind object;
  #L1bac08.  v0:= "char" @kind object;
  #L1bac0c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bac12.  v0:= temp;
  #L1bac14.  if v0 == 0 then goto L1bac1e;
  #L1bac18.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac1c.  return v2 @kind object;
  #L1bac1e.  v0:= "float" @kind object;
  #L1bac22.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bac28.  v0:= temp;
  #L1bac2a.  if v0 == 0 then goto L1bac34;
  #L1bac2e.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac32.  return v2 @kind object;
  #L1bac34.  v0:= "double" @kind object;
  #L1bac38.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bac3e.  v0:= temp;
  #L1bac40.  if v0 == 0 then goto L1bac4a;
  #L1bac44.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac48.  return v2 @kind object;
  #L1bac4a.  v0:= "boolean" @kind object;
  #L1bac4e.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bac54.  v0:= temp;
  #L1bac56.  if v0 == 0 then goto L1bac60;
  #L1bac5a.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac5e.  return v2 @kind object;
  #L1bac60.  v0:= "void" @kind object;
  #L1bac64.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bac6a.  v2:= temp;
  #L1bac6c.  if v2 == 0 then goto L1bac76;
  #L1bac70.  v2:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L1bac74.  return v2 @kind object;
  #L1bac76.  v2:= 0I;
  #L1bac78.  return v2 @kind object;
}
procedure `java.lang.Class` `read`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bab74.  call temp:= `c`(v1, v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.c:(Ljava/lang/String;)Ljava/lang/Class;` @kind direct;
  #L1bab7a.  v0:= temp @kind object;
  #L1bab7c.  if v0 != 0 then goto L1bab9e;
  #L1bab80.  call temp:= `b`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.b:()Ljava/lang/ClassLoader;` @kind static;
  #L1bab86.  v0:= temp @kind object;
  #L1bab88.  if v0 != 0 then goto L1bab94;
  #L1bab8c.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.a:()Ljava/lang/ClassLoader;` @kind direct;
  #L1bab92.  v0:= temp @kind object;
  #L1bab94.  call temp:= `loadClass`(v0, v2) @signature `Ljava/lang/ClassLoader;.loadClass:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L1bab9a.  v2:= temp @kind object;
  #L1bab9c.  return v2 @kind object;
  #L1bab9e.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bacd4.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L1bacda.  v1:= temp @kind object;
  #L1bacdc.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L1bacf0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1bacf6.  v1:= temp @kind object;
  #L1bacf8.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bad0c.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1bad10.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L1bad16.  v1:= temp @kind object;
  #L1bad18.  return v1 @kind object;
}
