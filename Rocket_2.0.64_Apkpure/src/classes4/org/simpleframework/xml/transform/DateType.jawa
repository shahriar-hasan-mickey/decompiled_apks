record `org.simpleframework.xml.transform.DateType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `org.simpleframework.xml.transform.DateType$DateFormat` `org.simpleframework.xml.transform.DateType.a` @AccessFlag PRIVATE;
}
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.FULL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.LONG` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.NORMAL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.SHORT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType`[] `@@org.simpleframework.xml.transform.DateType.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/transform/DateType;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1bb0b8.  v0:= new `org.simpleframework.xml.transform.DateType`;
  #L1bb0bc.  v1:= "FULL" @kind object;
  #L1bb0c0.  v2:= 0I;
  #L1bb0c2.  v3:= "yyyy-MM-dd HH:mm:ss.S z" @kind object;
  #L1bb0c6.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L1bb0cc.  `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` := v0 @kind object;
  #L1bb0d0.  v1:= new `org.simpleframework.xml.transform.DateType`;
  #L1bb0d4.  v3:= "LONG" @kind object;
  #L1bb0d8.  v4:= 1I;
  #L1bb0da.  v5:= "yyyy-MM-dd HH:mm:ss z" @kind object;
  #L1bb0de.  call `<init>`(v1, v3, v4, v5) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L1bb0e4.  `@@org.simpleframework.xml.transform.DateType.LONG` @type ^`org.simpleframework.xml.transform.DateType` := v1 @kind object;
  #L1bb0e8.  v3:= new `org.simpleframework.xml.transform.DateType`;
  #L1bb0ec.  v5:= "NORMAL" @kind object;
  #L1bb0f0.  v6:= 2I;
  #L1bb0f2.  v7:= "yyyy-MM-dd z" @kind object;
  #L1bb0f6.  call `<init>`(v3, v5, v6, v7) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L1bb0fc.  `@@org.simpleframework.xml.transform.DateType.NORMAL` @type ^`org.simpleframework.xml.transform.DateType` := v3 @kind object;
  #L1bb100.  v5:= new `org.simpleframework.xml.transform.DateType`;
  #L1bb104.  v7:= "SHORT" @kind object;
  #L1bb108.  v8:= 3I;
  #L1bb10a.  v9:= "yyyy-MM-dd" @kind object;
  #L1bb10e.  call `<init>`(v5, v7, v8, v9) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L1bb114.  `@@org.simpleframework.xml.transform.DateType.SHORT` @type ^`org.simpleframework.xml.transform.DateType` := v5 @kind object;
  #L1bb118.  v7:= 4I;
  #L1bb11a.  v7:= new `org.simpleframework.xml.transform.DateType`[v7];
  #L1bb11e.  v7[v2]:= v0 @kind object;
  #L1bb122.  v7[v4]:= v1 @kind object;
  #L1bb126.  v7[v6]:= v3 @kind object;
  #L1bb12a.  v7[v8]:= v5 @kind object;
  #L1bb12e.  `@@org.simpleframework.xml.transform.DateType.b` @type ^`org.simpleframework.xml.transform.DateType`[] := v7 @kind object;
  #L1bb132.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1bb144.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1bb14a.  v1:= new `org.simpleframework.xml.transform.DateType$DateFormat`;
  #L1bb14e.  call `<init>`(v1, v3) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bb154.  v0.`org.simpleframework.xml.transform.DateType.a` @type ^`org.simpleframework.xml.transform.DateType$DateFormat` := v1 @kind object;
  #L1bb158.  return @kind void;
}
procedure `org.simpleframework.xml.transform.DateType$DateFormat` `a`(`org.simpleframework.xml.transform.DateType` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/DateType;.a:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bb07c.  v0:= v1.`org.simpleframework.xml.transform.DateType.a` @type ^`org.simpleframework.xml.transform.DateType$DateFormat` @kind object;
  #L1bb080.  return v0 @kind object;
}
procedure `java.util.Date` `getDate`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bafe4.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/transform/DateType;.getType:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @kind static;
  #L1bafea.  v0:= temp @kind object;
  #L1bafec.  call temp:= `a`(v0) @signature `Lorg/simpleframework/xml/transform/DateType;.a:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @kind direct;
  #L1baff2.  v0:= temp @kind object;
  #L1baff4.  call temp:= `getDate`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L1baffa.  v1:= temp @kind object;
  #L1baffc.  return v1 @kind object;
}
procedure `java.lang.String` `getText`(`java.util.Date` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getText:(Ljava/util/Date;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bafbc.  v0:= `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bafc0.  call temp:= `a`(v0) @signature `Lorg/simpleframework/xml/transform/DateType;.a:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @kind direct;
  #L1bafc6.  v0:= temp @kind object;
  #L1bafc8.  call temp:= `getText`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.getText:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L1bafce.  v1:= temp @kind object;
  #L1bafd0.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType` `getType`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getType:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bb010.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1bb016.  v1:= temp;
  #L1bb018.  v0:= 23I;
  #L1bb01c.  if v1 <= v0 then goto L1bb026;
  #L1bb020.  v1:= `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bb024.  return v1 @kind object;
  #L1bb026.  v0:= 20I;
  #L1bb02a.  if v1 <= v0 then goto L1bb034;
  #L1bb02e.  v1:= `@@org.simpleframework.xml.transform.DateType.LONG` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bb032.  return v1 @kind object;
  #L1bb034.  v0:= 11I;
  #L1bb038.  if v1 <= v0 then goto L1bb042;
  #L1bb03c.  v1:= `@@org.simpleframework.xml.transform.DateType.NORMAL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bb040.  return v1 @kind object;
  #L1bb042.  v1:= `@@org.simpleframework.xml.transform.DateType.SHORT` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bb046.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.valueOf:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bb058.  v0:= constclass @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L1bb05c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1bb062.  v1:= temp @kind object;
  #L1bb064.  v1:= (`org.simpleframework.xml.transform.DateType`) v1 @kind object;
  #L1bb068.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType`[] `values`() @signature `Lorg/simpleframework/xml/transform/DateType;.values:()[Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bb094.  v0:= `@@org.simpleframework.xml.transform.DateType.b` @type ^`org.simpleframework.xml.transform.DateType`[] @kind object;
  #L1bb098.  call temp:= `clone`(v0) @signature `[Lorg/simpleframework/xml/transform/DateType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1bb09e.  v0:= temp @kind object;
  #L1bb0a0.  v0:= (`org.simpleframework.xml.transform.DateType`[]) v0 @kind object;
  #L1bb0a4.  return v0 @kind object;
}
