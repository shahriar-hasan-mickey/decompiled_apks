record `org.simpleframework.xml.util.Resolver` @kind class @AccessFlag PUBLIC extends `java.util.AbstractSet` @kind class {
  `org.simpleframework.xml.util.Resolver$Cache` `org.simpleframework.xml.util.Resolver.cache` @AccessFlag PUBLIC_FINAL;
  `org.simpleframework.xml.util.Resolver$Stack` `org.simpleframework.xml.util.Resolver.stack` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.Resolver` v2 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1bc95c.  call `<init>`(v2) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L1bc962.  v0:= new `org.simpleframework.xml.util.Resolver$Stack`;
  #L1bc966.  v1:= 0I;
  #L1bc968.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.<init>:(Lorg/simpleframework/xml/util/Resolver;Lorg/simpleframework/xml/util/Resolver$1;)V` @kind direct;
  #L1bc96e.  v2.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` := v0 @kind object;
  #L1bc972.  v0:= new `org.simpleframework.xml.util.Resolver$Cache`;
  #L1bc976.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Cache;.<init>:(Lorg/simpleframework/xml/util/Resolver;)V` @kind direct;
  #L1bc97c.  v2.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` := v0 @kind object;
  #L1bc980.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.util.Resolver` v5 @kind this, `char`[] v6 @kind object, `int` v7 , `char`[] v8 @kind object, `int` v9 ) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bc710.  v0:= length @variable v8;
  #L1bc712.  v1:= 42I;
  #L1bc716.  v2:= 0I;
  #L1bc718.  v3:= 1I;
  #L1bc71a.  if v9 >= v0 then goto L1bc7c2;
  #L1bc71e.  v0:= length @variable v6;
  #L1bc720.  if v7 >= v0 then goto L1bc7c2;
  #L1bc724.  v0:= v8[v9] @kind char;
  #L1bc728.  v4:= 63I;
  #L1bc72c.  if v0 != v1 then goto L1bc79a;
  #L1bc730.  v0:= v8[v9] @kind char;
  #L1bc734.  if v0 != v1 then goto L1bc744;
  #L1bc738.  v9:= v9 + 1;
  #L1bc73c.  v0:= length @variable v8;
  #L1bc73e.  if v9 < v0 then goto L1bc730;
  #L1bc742.  return v3;
  #L1bc744.  v0:= v8[v9] @kind char;
  #L1bc748.  if v0 != v4 then goto L1bc758;
  #L1bc74c.  v9:= v9 + 1;
  #L1bc750.  v0:= length @variable v8;
  #L1bc752.  if v9 < v0 then goto L1bc758;
  #L1bc756.  return v3;
  #L1bc758.  v0:= length @variable v6;
  #L1bc75a.  if v7 >= v0 then goto L1bc792;
  #L1bc75e.  v0:= v6[v7] @kind char;
  #L1bc762.  v1:= v8[v9] @kind char;
  #L1bc766.  if v0 == v1 then goto L1bc772;
  #L1bc76a.  v0:= v8[v9] @kind char;
  #L1bc76e.  if v0 != v4 then goto L1bc78c;
  #L1bc772.  v0:= v9 + -1;
  #L1bc776.  v0:= v8[v0] @kind char;
  #L1bc77a.  if v0 == v4 then goto L1bc792;
  #L1bc77e.  call temp:= `a`(v5, v6, v7, v8, v9) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @kind direct;
  #L1bc784.  v0:= temp;
  #L1bc786.  if v0 == 0 then goto L1bc78c;
  #L1bc78a.  return v3;
  #L1bc78c.  v7:= v7 + 1;
  #L1bc790.  goto L1bc758;
  #L1bc792.  v0:= length @variable v6;
  #L1bc794.  if v0 != v7 then goto L1bc79a;
  #L1bc798.  return v2;
  #L1bc79a.  v0:= v7 + 1;
  #L1bc79e.  v7:= v6[v7] @kind char;
  #L1bc7a2.  v1:= v9 + 1;
  #L1bc7a6.  v9:= v8[v9] @kind char;
  #L1bc7aa.  if v7 == v9 then goto L1bc7bc;
  #L1bc7ae.  v7:= v1 + -1;
  #L1bc7b2.  v7:= v8[v7] @kind char;
  #L1bc7b6.  if v7 == v4 then goto L1bc7bc;
  #L1bc7ba.  return v2;
  #L1bc7bc.  v7:= v0;
  #L1bc7be.  v9:= v1;
  #L1bc7c0.  goto L1bc710;
  #L1bc7c2.  v0:= length @variable v8;
  #L1bc7c4.  if v0 != v9 then goto L1bc7d2;
  #L1bc7c8.  v6:= length @variable v6;
  #L1bc7ca.  if v6 != v7 then goto L1bc7d0;
  #L1bc7ce.  v2:= 1I;
  #L1bc7d0.  return v2;
  #L1bc7d2.  v6:= v8[v9] @kind char;
  #L1bc7d6.  if v6 != v1 then goto L1bc7e6;
  #L1bc7da.  v9:= v9 + 1;
  #L1bc7de.  v6:= length @variable v8;
  #L1bc7e0.  if v9 < v6 then goto L1bc7d2;
  #L1bc7e4.  return v3;
  #L1bc7e6.  return v2;
}
procedure `boolean` `b`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `char`[] v2 @kind object, `char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.b:([C[C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bc6f4.  v0:= 0I;
  #L1bc6f6.  call temp:= `a`(v1, v2, v0, v3, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @kind direct;
  #L1bc6fc.  v2:= temp;
  #L1bc6fe.  return v2;
}
procedure `java.util.List` `c`(`org.simpleframework.xml.util.Resolver` v4 @kind this, `java.lang.String` v5 @kind object, `char`[] v6 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.c:(Ljava/lang/String;[C)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1bc8a0.  v0:= new `java.util.ArrayList`;
  #L1bc8a4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1bc8aa.  v1:= v4.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc8ae.  call temp:= `iterator`(v1) @signature `Ljava/util/LinkedList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1bc8b4.  v1:= temp @kind object;
  #L1bc8b6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1bc8bc.  v2:= temp;
  #L1bc8be.  if v2 == 0 then goto L1bc8fc;
  #L1bc8c2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1bc8c8.  v2:= temp @kind object;
  #L1bc8ca.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L1bc8ce.  call temp:= `getPattern`(v2) @signature `Lorg/simpleframework/xml/util/Match;.getPattern:()Ljava/lang/String;` @kind interface;
  #L1bc8d4.  v3:= temp @kind object;
  #L1bc8d6.  call temp:= `toCharArray`(v3) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L1bc8dc.  v3:= temp @kind object;
  #L1bc8de.  call temp:= `b`(v4, v6, v3) @signature `Lorg/simpleframework/xml/util/Resolver;.b:([C[C)Z` @kind direct;
  #L1bc8e4.  v3:= temp;
  #L1bc8e6.  if v3 == 0 then goto L1bc8b6;
  #L1bc8ea.  v3:= v4.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L1bc8ee.  call temp:= `put`(v3, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1bc8f4.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bc8fa.  goto L1bc8b6;
  #L1bc8fc.  return v0 @kind object;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bc6b4.  v1:= (`org.simpleframework.xml.util.Match`) v1 @kind object;
  #L1bc6b8.  call temp:= `add`(v0, v1) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @kind virtual;
  #L1bc6be.  v1:= temp;
  #L1bc6c0.  return v1;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc6d4.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc6d8.  call `push`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.push:(Lorg/simpleframework/xml/util/Match;)V` @kind virtual;
  #L1bc6de.  v2:= 1I;
  #L1bc6e0.  return v2;
}
procedure `void` `clear`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc994.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L1bc998.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L1bc99e.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc9a2.  call `clear`(v0) @signature `Ljava/util/LinkedList;.clear:()V` @kind virtual;
  #L1bc9a8.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc840.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc844.  call temp:= `sequence`(v0) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.sequence:()Ljava/util/Iterator;` @kind virtual;
  #L1bc84a.  v0:= temp @kind object;
  #L1bc84c.  return v0 @kind object;
}
procedure `boolean` `remove`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.remove:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc7f8.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L1bc7fc.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L1bc802.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc806.  call temp:= `remove`(v0, v2) @signature `Ljava/util/LinkedList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bc80c.  v2:= temp;
  #L1bc80e.  return v2;
}
procedure `org.simpleframework.xml.util.Match` `resolve`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolve:(Ljava/lang/String;)Lorg/simpleframework/xml/util/Match;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc910.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L1bc914.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1bc91a.  v0:= temp @kind object;
  #L1bc91c.  v0:= (`java.util.List`) v0 @kind object;
  #L1bc920.  if v0 != 0 then goto L1bc92c;
  #L1bc924.  call temp:= `resolveAll`(v1, v2) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L1bc92a.  v0:= temp @kind object;
  #L1bc92c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1bc932.  v2:= temp;
  #L1bc934.  if v2 == 0 then goto L1bc93c;
  #L1bc938.  v2:= 0I;
  #L1bc93a.  return v2 @kind object;
  #L1bc93c.  v2:= 0I;
  #L1bc93e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1bc944.  v2:= temp @kind object;
  #L1bc946.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L1bc94a.  return v2 @kind object;
}
procedure `java.util.List` `resolveAll`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc860.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L1bc864.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1bc86a.  v0:= temp @kind object;
  #L1bc86c.  v0:= (`java.util.List`) v0 @kind object;
  #L1bc870.  if v0 == 0 then goto L1bc876;
  #L1bc874.  return v0 @kind object;
  #L1bc876.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L1bc87c.  v0:= temp @kind object;
  #L1bc87e.  if v0 != 0 then goto L1bc886;
  #L1bc882.  v2:= 0I;
  #L1bc884.  return v2 @kind object;
  #L1bc886.  call temp:= `c`(v1, v2, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.c:(Ljava/lang/String;[C)Ljava/util/List;` @kind direct;
  #L1bc88c.  v2:= temp @kind object;
  #L1bc88e.  return v2 @kind object;
}
procedure `int` `size`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc820.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc824.  call temp:= `size`(v0) @signature `Ljava/util/LinkedList;.size:()I` @kind virtual;
  #L1bc82a.  v0:= temp;
  #L1bc82c.  return v0;
}
