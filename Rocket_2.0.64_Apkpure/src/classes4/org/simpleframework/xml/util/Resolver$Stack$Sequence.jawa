record `org.simpleframework.xml.util.Resolver$Stack$Sequence` @kind class @AccessFlag PUBLIC extends `java.util.Iterator` @kind interface {
  `int` `org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.util.Resolver$Stack` `org.simpleframework.xml.util.Resolver$Stack$Sequence.this$1` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.Resolver$Stack$Sequence` v0 @kind this, `org.simpleframework.xml.util.Resolver$Stack` v1 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.<init>:(Lorg/simpleframework/xml/util/Resolver$Stack;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1bc5b0.  v0.`org.simpleframework.xml.util.Resolver$Stack$Sequence.this$1` @type ^`org.simpleframework.xml.util.Resolver$Stack` := v1 @kind object;
  #L1bc5b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1bc5ba.  call temp:= `size`(v1) @signature `Ljava/util/LinkedList;.size:()I` @kind virtual;
  #L1bc5c0.  v1:= temp;
  #L1bc5c2.  v0.`org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @type ^`int` := v1;
  #L1bc5c6.  return @kind void;
}
procedure `boolean` `hasNext`(`org.simpleframework.xml.util.Resolver$Stack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bc534.  v0:= v1.`org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @type ^`int`;
  #L1bc538.  if v0 <= 0 then goto L1bc540;
  #L1bc53c.  v0:= 1I;
  #L1bc53e.  goto L1bc542;
  #L1bc540.  v0:= 0I;
  #L1bc542.  return v0;
}
procedure `java.lang.Object` `next`(`org.simpleframework.xml.util.Resolver$Stack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1bc554.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.next:()Lorg/simpleframework/xml/util/Match;` @kind virtual;
  #L1bc55a.  v0:= temp @kind object;
  #L1bc55c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.util.Match` `next`(`org.simpleframework.xml.util.Resolver$Stack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.next:()Lorg/simpleframework/xml/util/Match;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bc570.  call temp:= `hasNext`(v2) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.hasNext:()Z` @kind virtual;
  #L1bc576.  v0:= temp;
  #L1bc578.  if v0 == 0 then goto L1bc59a;
  #L1bc57c.  v0:= v2.`org.simpleframework.xml.util.Resolver$Stack$Sequence.this$1` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc580.  v1:= v2.`org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @type ^`int`;
  #L1bc584.  v1:= v1 + -1;
  #L1bc588.  v2.`org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @type ^`int` := v1;
  #L1bc58c.  call temp:= `get`(v0, v1) @signature `Ljava/util/LinkedList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1bc592.  v0:= temp @kind object;
  #L1bc594.  v0:= (`org.simpleframework.xml.util.Match`) v0 @kind object;
  #L1bc598.  return v0 @kind object;
  #L1bc59a.  v0:= 0I;
  #L1bc59c.  return v0 @kind object;
}
procedure `void` `remove`(`org.simpleframework.xml.util.Resolver$Stack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver$Stack$Sequence;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bc5d8.  v0:= v2.`org.simpleframework.xml.util.Resolver$Stack$Sequence.this$1` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L1bc5dc.  v1:= v2.`org.simpleframework.xml.util.Resolver$Stack$Sequence.a` @type ^`int`;
  #L1bc5e0.  call `purge`(v0, v1) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.purge:(I)V` @kind virtual;
  #L1bc5e6.  return @kind void;
}
