record `org.simpleframework.xml.core.Primitive` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.Primitive.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Primitive.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.Primitive.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.Primitive.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Primitive.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b0024.  v0:= 0I;
  #L1b0026.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @kind direct;
  #L1b002c.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b0040.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0046.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L1b004a.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1b0050.  v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L1b0054.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b005a.  v0:= temp @kind object;
  #L1b005c.  v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` := v0 @kind object;
  #L1b0060.  v1.`org.simpleframework.xml.core.Primitive.b` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L1b0064.  v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` := v4 @kind object;
  #L1b0068.  v1.`org.simpleframework.xml.core.Primitive.e` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L1b006c.  return @kind void;
}
procedure `java.lang.Object` `a`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.a:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1aff8c.  v0:= v2.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1aff90.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1aff96.  v0:= temp @kind object;
  #L1aff98.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1aff9e.  v1:= temp;
  #L1affa0.  if v1 != 0 then goto L1affae;
  #L1affa4.  call temp:= `b`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.b:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @kind direct;
  #L1affaa.  v3:= temp @kind object;
  #L1affac.  return v3 @kind object;
  #L1affae.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L1affb4.  v3:= temp @kind object;
  #L1affb6.  return v3 @kind object;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `org.simpleframework.xml.core.Instance` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.b:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1affc8.  v0:= v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L1affcc.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L1affd2.  v2:= temp @kind object;
  #L1affd4.  if v3 == 0 then goto L1affde;
  #L1affd8.  call temp:= `setInstance`(v3, v2) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1affde.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.c:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afff0.  v0:= v1.`org.simpleframework.xml.core.Primitive.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1afff4.  call temp:= `getProperty`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afffa.  v2:= temp @kind object;
  #L1afffc.  if v2 == 0 then goto L1b000e;
  #L1b0000.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1b0004.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L1b000a.  v2:= temp @kind object;
  #L1b000c.  return v2 @kind object;
  #L1b000e.  v2:= 0I;
  #L1b0010.  return v2 @kind object;
}
procedure `boolean` `d`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.d:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afe98.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1afe9c.  call temp:= `getInstance`(v0, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1afea2.  v2:= temp @kind object;
  #L1afea4.  call temp:= `isReference`(v2) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1afeaa.  v0:= temp;
  #L1afeac.  if v0 != 0 then goto L1afeb8;
  #L1afeb0.  v0:= 0I;
  #L1afeb2.  call temp:= `setInstance`(v2, v0) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1afeb8.  v2:= 1I;
  #L1afeba.  return v2;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afecc.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L1afed2.  v0:= temp;
  #L1afed4.  if v0 == 0 then goto L1afee2;
  #L1afed8.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.a:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind direct;
  #L1afede.  v2:= temp @kind object;
  #L1afee0.  return v2 @kind object;
  #L1afee2.  v0:= v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L1afee6.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L1afeec.  v2:= temp @kind object;
  #L1afeee.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1aff00.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1aff06.  v2:= temp @kind object;
  #L1aff08.  if v2 != 0 then goto L1aff10;
  #L1aff0c.  v2:= 0I;
  #L1aff0e.  return v2 @kind object;
  #L1aff10.  v0:= v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` @kind object;
  #L1aff14.  if v0 == 0 then goto L1aff2a;
  #L1aff18.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1aff1e.  v0:= temp;
  #L1aff20.  if v0 == 0 then goto L1aff2a;
  #L1aff24.  v2:= v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` @kind object;
  #L1aff28.  return v2 @kind object;
  #L1aff2a.  call temp:= `c`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.c:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L1aff30.  v2:= temp @kind object;
  #L1aff32.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1aff44.  if v4 != 0 then goto L1aff52;
  #L1aff48.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1aff4e.  v3:= temp @kind object;
  #L1aff50.  return v3 @kind object;
  #L1aff52.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1aff56.  v4:= 2I;
  #L1aff58.  v4:= new `java.lang.Object`[v4];
  #L1aff5c.  v0:= v2.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L1aff60.  v1:= 0I;
  #L1aff62.  v4[v1]:= v0 @kind object;
  #L1aff66.  v0:= v2.`org.simpleframework.xml.core.Primitive.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aff6a.  v1:= 1I;
  #L1aff6c.  v4[v1]:= v0 @kind object;
  #L1aff70.  v0:= "Can not read existing %s for %s" @kind object;
  #L1aff74.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aff7a.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afe68.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L1afe6e.  v0:= temp;
  #L1afe70.  if v0 == 0 then goto L1afe7c;
  #L1afe74.  call temp:= `d`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.d:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind direct;
  #L1afe7a.  goto L1afe82;
  #L1afe7c.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1afe82.  v2:= 1I;
  #L1afe84.  return v2;
}
procedure `void` `write`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0080.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1b0084.  call temp:= `getText`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getText:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L1b008a.  v3:= temp @kind object;
  #L1b008c.  if v3 == 0 then goto L1b0096;
  #L1b0090.  call `setValue`(v2, v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L1b0096.  return @kind void;
}
