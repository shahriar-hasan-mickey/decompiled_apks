record `org.simpleframework.xml.core.AnnotationHandler` @kind class @AccessFlag PUBLIC extends `java.lang.reflect.InvocationHandler` @kind interface {
  `org.simpleframework.xml.core.Comparer` `org.simpleframework.xml.core.AnnotationHandler.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.AnnotationHandler.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a050c.  v0:= 1I;
  #L1a050e.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @kind direct;
  #L1a0514.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a0528.  v0:= 0I;
  #L1a052a.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @kind direct;
  #L1a0530.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a0544.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a054a.  v0:= new `org.simpleframework.xml.core.Comparer`;
  #L1a054e.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:()V` @kind direct;
  #L1a0554.  v1.`org.simpleframework.xml.core.AnnotationHandler.a` @type ^`org.simpleframework.xml.core.Comparer` := v0 @kind object;
  #L1a0558.  v1.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` := v4 @kind boolean;
  #L1a055c.  v1.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` := v3 @kind boolean;
  #L1a0560.  v1.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` := v2 @kind object;
  #L1a0564.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.AnnotationHandler` v5 @kind this, `java.lang.StringBuilder` v6 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.a:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a0578.  v0:= v5.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L1a057c.  call temp:= `getDeclaredMethods`(v0) @signature `Ljava/lang/Class;.getDeclaredMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L1a0582.  v0:= temp @kind object;
  #L1a0584.  v1:= 0I;
  #L1a0586.  v2:= length @variable v0;
  #L1a0588.  if v1 >= v2 then goto L1a05d8;
  #L1a058c.  v2:= v0[v1] @kind object;
  #L1a0590.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a0596.  v2:= temp @kind object;
  #L1a0598.  v3:= v0[v1] @kind object;
  #L1a059c.  call temp:= `d`(v5, v3) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.d:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @kind direct;
  #L1a05a2.  v3:= temp @kind object;
  #L1a05a4.  if v1 <= 0 then goto L1a05bc;
  #L1a05a8.  v4:= 44I;
  #L1a05ac.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05b2.  v4:= 32I;
  #L1a05b6.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05bc.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05c2.  v2:= 61I;
  #L1a05c6.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05cc.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05d2.  v1:= v1 + 1;
  #L1a05d6.  goto L1a0586;
  #L1a05d8.  v0:= 41I;
  #L1a05dc.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a05e2.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.AnnotationHandler` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a0364.  v4:= (`java.lang.annotation.Annotation`) v4 @kind object;
  #L1a0368.  v0:= 0I;
  #L1a036a.  v5:= v5[v0] @kind object;
  #L1a036e.  v5:= (`java.lang.annotation.Annotation`) v5 @kind object;
  #L1a0372.  call temp:= `annotationType`(v4) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L1a0378.  v1:= temp @kind object;
  #L1a037a.  call temp:= `annotationType`(v5) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L1a0380.  v2:= temp @kind object;
  #L1a0382.  if v1 != v2 then goto L1a0394;
  #L1a0386.  v0:= v3.`org.simpleframework.xml.core.AnnotationHandler.a` @type ^`org.simpleframework.xml.core.Comparer` @kind object;
  #L1a038a.  call temp:= `equals`(v0, v4, v5) @signature `Lorg/simpleframework/xml/core/Comparer;.equals:(Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Z` @kind virtual;
  #L1a0390.  v4:= temp;
  #L1a0392.  return v4;
  #L1a0394.  v1:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1a0398.  v2:= 2I;
  #L1a039a.  v2:= new `java.lang.Object`[v2];
  #L1a039e.  v2[v0]:= v4 @kind object;
  #L1a03a2.  v4:= 1I;
  #L1a03a4.  v2[v4]:= v5 @kind object;
  #L1a03a8.  v4:= "Annotation %s is not the same as %s" @kind object;
  #L1a03ac.  call `<init>`(v1, v4, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a03b2.  throw v1;
}
procedure `void` `c`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.StringBuilder` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.c:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a05f4.  v0:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L1a05f8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a05fe.  v0:= temp @kind object;
  #L1a0600.  v1:= 64I;
  #L1a0604.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a060a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a0610.  v0:= 40I;
  #L1a0614.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a061a.  return @kind void;
}
procedure `java.lang.Object` `d`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.d:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a0474.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a047a.  v0:= temp @kind object;
  #L1a047c.  v1:= "required" @kind object;
  #L1a0480.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a0486.  v1:= temp;
  #L1a0488.  if v1 == 0 then goto L1a049a;
  #L1a048c.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` @kind boolean;
  #L1a0490.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1a0496.  v3:= temp @kind object;
  #L1a0498.  return v3 @kind object;
  #L1a049a.  v1:= "attribute" @kind object;
  #L1a049e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a04a4.  v0:= temp;
  #L1a04a6.  if v0 == 0 then goto L1a04b8;
  #L1a04aa.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` @kind boolean;
  #L1a04ae.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1a04b4.  v3:= temp @kind object;
  #L1a04b6.  return v3 @kind object;
  #L1a04b8.  call temp:= `getDefaultValue`(v3) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L1a04be.  v3:= temp @kind object;
  #L1a04c0.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.reflect.Method` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a03c4.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a03ca.  v0:= temp @kind object;
  #L1a03cc.  v1:= "toString" @kind object;
  #L1a03d0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a03d6.  v1:= temp;
  #L1a03d8.  if v1 == 0 then goto L1a03e6;
  #L1a03dc.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a03e2.  v3:= temp @kind object;
  #L1a03e4.  return v3 @kind object;
  #L1a03e6.  v1:= "equals" @kind object;
  #L1a03ea.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a03f0.  v1:= temp;
  #L1a03f2.  if v1 == 0 then goto L1a0408;
  #L1a03f6.  call temp:= `b`(v2, v3, v5) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind direct;
  #L1a03fc.  v3:= temp;
  #L1a03fe.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1a0404.  v3:= temp @kind object;
  #L1a0406.  return v3 @kind object;
  #L1a0408.  v3:= "annotationType" @kind object;
  #L1a040c.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a0412.  v3:= temp;
  #L1a0414.  if v3 == 0 then goto L1a041e;
  #L1a0418.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L1a041c.  return v3 @kind object;
  #L1a041e.  v3:= "required" @kind object;
  #L1a0422.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a0428.  v3:= temp;
  #L1a042a.  if v3 == 0 then goto L1a043c;
  #L1a042e.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` @kind boolean;
  #L1a0432.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1a0438.  v3:= temp @kind object;
  #L1a043a.  return v3 @kind object;
  #L1a043c.  v3:= "attribute" @kind object;
  #L1a0440.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a0446.  v3:= temp;
  #L1a0448.  if v3 == 0 then goto L1a045a;
  #L1a044c.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` @kind boolean;
  #L1a0450.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1a0456.  v3:= temp @kind object;
  #L1a0458.  return v3 @kind object;
  #L1a045a.  call temp:= `getDefaultValue`(v4) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L1a0460.  v3:= temp @kind object;
  #L1a0462.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a04d4.  v0:= new `java.lang.StringBuilder`;
  #L1a04d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a04de.  v1:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L1a04e2.  if v1 == 0 then goto L1a04f2;
  #L1a04e6.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.c:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L1a04ec.  call `a`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.a:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L1a04f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a04f8.  v0:= temp @kind object;
  #L1a04fa.  return v0 @kind object;
}
