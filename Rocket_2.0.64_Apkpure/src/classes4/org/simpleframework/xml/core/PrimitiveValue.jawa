record `org.simpleframework.xml.core.PrimitiveValue` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.PrimitiveValue.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.PrimitiveValue.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveValue.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PrimitiveValue.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.PrimitiveValue.e` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveValue.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1afd48.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1afd4e.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L1afd52.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1afd58.  v1.`org.simpleframework.xml.core.PrimitiveValue.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L1afd5c.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L1afd60.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1afd66.  v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L1afd6a.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L1afd70.  v0:= temp @kind object;
  #L1afd72.  v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L1afd76.  v1.`org.simpleframework.xml.core.PrimitiveValue.b` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L1afd7a.  v1.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L1afd7e.  v1.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L1afd82.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveValue` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1afb24.  v0:= v2.`org.simpleframework.xml.core.PrimitiveValue.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1afb28.  v1:= v2.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1afb2c.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1afb32.  v3:= temp;
  #L1afb34.  return v3;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afccc.  if v3 == 0 then goto L1afce4;
  #L1afcd0.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afcd4.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afcda.  v3:= temp @kind object;
  #L1afcdc.  call temp:= `getAttribute`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttribute:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1afce2.  v2:= temp @kind object;
  #L1afce4.  if v2 != 0 then goto L1afcec;
  #L1afce8.  v2:= 0I;
  #L1afcea.  return v2 @kind object;
  #L1afcec.  v3:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afcf0.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1afcf6.  v2:= temp @kind object;
  #L1afcf8.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afd0c.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afd10.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afd16.  v3:= temp @kind object;
  #L1afd18.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1afd1e.  v2:= temp @kind object;
  #L1afd20.  if v2 != 0 then goto L1afd28;
  #L1afd24.  v2:= 0I;
  #L1afd26.  return v2 @kind object;
  #L1afd28.  v3:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afd2c.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1afd32.  v2:= temp @kind object;
  #L1afd34.  return v2 @kind object;
}
procedure `boolean` `d`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afba4.  if v3 == 0 then goto L1afbbc;
  #L1afba8.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afbac.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afbb2.  v3:= temp @kind object;
  #L1afbb4.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1afbba.  v2:= temp @kind object;
  #L1afbbc.  if v2 != 0 then goto L1afbc4;
  #L1afbc0.  v2:= 1I;
  #L1afbc2.  return v2;
  #L1afbc4.  v3:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afbc8.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1afbce.  v2:= temp;
  #L1afbd0.  return v2;
}
procedure `boolean` `e`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.e:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afbe4.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afbe8.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afbee.  v3:= temp @kind object;
  #L1afbf0.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1afbf6.  v3:= temp @kind object;
  #L1afbf8.  if v3 != 0 then goto L1afc00;
  #L1afbfc.  v2:= 1I;
  #L1afbfe.  return v2;
  #L1afc00.  v3:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afc04.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1afc0a.  v2:= temp;
  #L1afc0c.  return v2;
}
procedure `void` `f`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afdec.  if v3 == 0 then goto L1afe14;
  #L1afdf0.  if v4 == 0 then goto L1afe0a;
  #L1afdf4.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afdf8.  call temp:= `getAttribute`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afdfe.  v4:= temp @kind object;
  #L1afe00.  v0:= 0I;
  #L1afe02.  call temp:= `setAttribute`(v2, v4, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setAttribute:(Ljava/lang/String;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1afe08.  v2:= temp @kind object;
  #L1afe0a.  v4:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afe0e.  call `write`(v4, v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1afe14.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.PrimitiveValue` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.g:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1afe28.  v0:= v1.`org.simpleframework.xml.core.PrimitiveValue.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1afe2c.  call temp:= `getAttribute`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1afe32.  v4:= temp @kind object;
  #L1afe34.  call temp:= `getChild`(v2, v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1afe3a.  v2:= temp @kind object;
  #L1afe3c.  if v3 == 0 then goto L1afe56;
  #L1afe40.  call temp:= `a`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L1afe46.  v4:= temp;
  #L1afe48.  if v4 != 0 then goto L1afe56;
  #L1afe4c.  v4:= v1.`org.simpleframework.xml.core.PrimitiveValue.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1afe50.  call `write`(v4, v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1afe56.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveValue` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afc20.  v0:= v3.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1afc24.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1afc2a.  v0:= temp @kind object;
  #L1afc2c.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afc30.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L1afc36.  v1:= temp @kind object;
  #L1afc38.  v2:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afc3c.  call temp:= `isInline`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.isInline:()Z` @kind virtual;
  #L1afc42.  v2:= temp;
  #L1afc44.  if v2 != 0 then goto L1afc62;
  #L1afc48.  if v1 != 0 then goto L1afc58;
  #L1afc4c.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1afc50.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1afc56.  v1:= temp @kind object;
  #L1afc58.  call temp:= `c`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L1afc5e.  v4:= temp @kind object;
  #L1afc60.  return v4 @kind object;
  #L1afc62.  call temp:= `b`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L1afc68.  v4:= temp @kind object;
  #L1afc6a.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afc7c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1afc80.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1afc86.  v0:= temp @kind object;
  #L1afc88.  if v4 != 0 then goto L1afc96;
  #L1afc8c.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1afc92.  v3:= temp @kind object;
  #L1afc94.  return v3 @kind object;
  #L1afc96.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1afc9a.  v4:= 2I;
  #L1afc9c.  v4:= new `java.lang.Object`[v4];
  #L1afca0.  v1:= 0I;
  #L1afca2.  v4[v1]:= v0 @kind object;
  #L1afca6.  v0:= v2.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afcaa.  v1:= 1I;
  #L1afcac.  v4[v1]:= v0 @kind object;
  #L1afcb0.  v0:= "Can not read value of %s for %s" @kind object;
  #L1afcb4.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1afcba.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveValue` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afb48.  v0:= v3.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1afb4c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1afb52.  v0:= temp @kind object;
  #L1afb54.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afb58.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L1afb5e.  v1:= temp @kind object;
  #L1afb60.  v2:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afb64.  call temp:= `isInline`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.isInline:()Z` @kind virtual;
  #L1afb6a.  v2:= temp;
  #L1afb6c.  if v2 != 0 then goto L1afb8a;
  #L1afb70.  if v1 != 0 then goto L1afb80;
  #L1afb74.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1afb78.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1afb7e.  v1:= temp @kind object;
  #L1afb80.  call temp:= `e`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.e:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L1afb86.  v4:= temp;
  #L1afb88.  return v4;
  #L1afb8a.  call temp:= `d`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L1afb90.  v4:= temp;
  #L1afb92.  return v4;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveValue` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1afd94.  v0:= v3.`org.simpleframework.xml.core.PrimitiveValue.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1afd98.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1afd9e.  v0:= temp @kind object;
  #L1afda0.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afda4.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L1afdaa.  v1:= temp @kind object;
  #L1afdac.  v2:= v3.`org.simpleframework.xml.core.PrimitiveValue.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1afdb0.  call temp:= `isInline`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.isInline:()Z` @kind virtual;
  #L1afdb6.  v2:= temp;
  #L1afdb8.  if v2 != 0 then goto L1afdd4;
  #L1afdbc.  if v1 != 0 then goto L1afdcc;
  #L1afdc0.  v1:= v3.`org.simpleframework.xml.core.PrimitiveValue.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1afdc4.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1afdca.  v1:= temp @kind object;
  #L1afdcc.  call `g`(v3, v4, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.g:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/String;)V` @kind direct;
  #L1afdd2.  goto L1afdda;
  #L1afdd4.  call `f`(v3, v4, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveValue;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/String;)V` @kind direct;
  #L1afdda.  return @kind void;
}
