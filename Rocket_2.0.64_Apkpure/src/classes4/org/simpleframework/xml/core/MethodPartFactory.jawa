record `org.simpleframework.xml.core.MethodPartFactory` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.AnnotationFactory` `org.simpleframework.xml.core.MethodPartFactory.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MethodPartFactory` v1 @kind this, `org.simpleframework.xml.core.Detail` v2 @kind object, `org.simpleframework.xml.core.Support` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ab780.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ab786.  v0:= new `org.simpleframework.xml.core.AnnotationFactory`;
  #L1ab78a.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/AnnotationFactory;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @kind direct;
  #L1ab790.  v1.`org.simpleframework.xml.core.MethodPartFactory.a` @type ^`org.simpleframework.xml.core.AnnotationFactory` := v0 @kind object;
  #L1ab794.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `a`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.a:(Ljava/lang/reflect/Method;)Ljava/lang/annotation/Annotation;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ab528.  call temp:= `b`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.b:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @kind direct;
  #L1ab52e.  v0:= temp @kind object;
  #L1ab530.  call temp:= `getType`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getType:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind virtual;
  #L1ab536.  v3:= temp @kind object;
  #L1ab538.  if v3 == 0 then goto L1ab54a;
  #L1ab53c.  v1:= v2.`org.simpleframework.xml.core.MethodPartFactory.a` @type ^`org.simpleframework.xml.core.AnnotationFactory` @kind object;
  #L1ab540.  call temp:= `getInstance`(v1, v3, v0) @signature `Lorg/simpleframework/xml/core/AnnotationFactory;.getInstance:(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1ab546.  v3:= temp @kind object;
  #L1ab548.  return v3 @kind object;
  #L1ab54a.  v3:= 0I;
  #L1ab54c.  return v3 @kind object;
}
procedure `java.lang.Class`[] `b`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.b:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ab49c.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.c:(Ljava/lang/reflect/Method;)Lorg/simpleframework/xml/core/MethodType;` @kind direct;
  #L1ab4a2.  v0:= temp @kind object;
  #L1ab4a4.  v1:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab4a8.  if v0 != v1 then goto L1ab4b8;
  #L1ab4ac.  v0:= 0I;
  #L1ab4ae.  call temp:= `getParameterDependents`(v3, v0) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependents:(Ljava/lang/reflect/Method;I)[Ljava/lang/Class;` @kind static;
  #L1ab4b4.  v3:= temp @kind object;
  #L1ab4b6.  return v3 @kind object;
  #L1ab4b8.  v1:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab4bc.  if v0 != v1 then goto L1ab4ca;
  #L1ab4c0.  call temp:= `getReturnDependents`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependents:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @kind static;
  #L1ab4c6.  v3:= temp @kind object;
  #L1ab4c8.  return v3 @kind object;
  #L1ab4ca.  v1:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab4ce.  if v0 != v1 then goto L1ab4dc;
  #L1ab4d2.  call temp:= `getReturnDependents`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependents:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @kind static;
  #L1ab4d8.  v3:= temp @kind object;
  #L1ab4da.  return v3 @kind object;
  #L1ab4dc.  v3:= 0I;
  #L1ab4de.  return v3 @kind object;
}
procedure `org.simpleframework.xml.core.MethodType` `c`(`org.simpleframework.xml.core.MethodPartFactory` v1 @kind this, `java.lang.reflect.Method` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.c:(Ljava/lang/reflect/Method;)Lorg/simpleframework/xml/core/MethodType;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab720.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ab726.  v2:= temp @kind object;
  #L1ab728.  v0:= "get" @kind object;
  #L1ab72c.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1ab732.  v0:= temp;
  #L1ab734.  if v0 == 0 then goto L1ab73e;
  #L1ab738.  v2:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab73c.  return v2 @kind object;
  #L1ab73e.  v0:= "is" @kind object;
  #L1ab742.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1ab748.  v0:= temp;
  #L1ab74a.  if v0 == 0 then goto L1ab754;
  #L1ab74e.  v2:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab752.  return v2 @kind object;
  #L1ab754.  v0:= "set" @kind object;
  #L1ab758.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1ab75e.  v2:= temp;
  #L1ab760.  if v2 == 0 then goto L1ab76a;
  #L1ab764.  v2:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab768.  return v2 @kind object;
  #L1ab76a.  v2:= `@@org.simpleframework.xml.core.MethodType.NONE` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab76e.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.MethodName` `d`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object, `java.lang.annotation.Annotation` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.d:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodName;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ab560.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.c:(Ljava/lang/reflect/Method;)Lorg/simpleframework/xml/core/MethodType;` @kind direct;
  #L1ab566.  v0:= temp @kind object;
  #L1ab568.  v1:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab56c.  if v0 != v1 then goto L1ab57a;
  #L1ab570.  call temp:= `f`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.f:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;)Lorg/simpleframework/xml/core/MethodName;` @kind direct;
  #L1ab576.  v3:= temp @kind object;
  #L1ab578.  return v3 @kind object;
  #L1ab57a.  v1:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab57e.  if v0 != v1 then goto L1ab58c;
  #L1ab582.  call temp:= `f`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.f:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;)Lorg/simpleframework/xml/core/MethodName;` @kind direct;
  #L1ab588.  v3:= temp @kind object;
  #L1ab58a.  return v3 @kind object;
  #L1ab58c.  v1:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab590.  if v0 != v1 then goto L1ab59e;
  #L1ab594.  call temp:= `i`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.i:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;)Lorg/simpleframework/xml/core/MethodName;` @kind direct;
  #L1ab59a.  v3:= temp @kind object;
  #L1ab59c.  return v3 @kind object;
  #L1ab59e.  v3:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab5a2.  v0:= 1I;
  #L1ab5a4.  v0:= new `java.lang.Object`[v0];
  #L1ab5a8.  v1:= 0I;
  #L1ab5aa.  v0[v1]:= v4 @kind object;
  #L1ab5ae.  v4:= "Annotation %s must mark a set or get method" @kind object;
  #L1ab5b2.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab5b8.  throw v3;
}
procedure `java.lang.Class` `e`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.e:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ab3e8.  call temp:= `getParameterTypes`(v3) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1ab3ee.  v0:= temp @kind object;
  #L1ab3f0.  v0:= length @variable v0;
  #L1ab3f2.  v1:= 1I;
  #L1ab3f4.  if v0 != v1 then goto L1ab408;
  #L1ab3f8.  call temp:= `getParameterTypes`(v3) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1ab3fe.  v3:= temp @kind object;
  #L1ab400.  v0:= 0I;
  #L1ab402.  v3:= v3[v0] @kind object;
  #L1ab406.  return v3 @kind object;
  #L1ab408.  v3:= 0I;
  #L1ab40a.  return v3 @kind object;
}
procedure `org.simpleframework.xml.core.MethodName` `f`(`org.simpleframework.xml.core.MethodPartFactory` v4 @kind this, `java.lang.reflect.Method` v5 @kind object, `org.simpleframework.xml.core.MethodType` v6 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.f:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;)Lorg/simpleframework/xml/core/MethodName;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ab5cc.  call temp:= `getParameterTypes`(v5) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1ab5d2.  v0:= temp @kind object;
  #L1ab5d4.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ab5da.  v1:= temp @kind object;
  #L1ab5dc.  v0:= length @variable v0;
  #L1ab5de.  v2:= 0I;
  #L1ab5e0.  v3:= 1I;
  #L1ab5e2.  if v0 != 0 then goto L1ab616;
  #L1ab5e6.  call temp:= `h`(v4, v1, v6) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.h:(Ljava/lang/String;Lorg/simpleframework/xml/core/MethodType;)Ljava/lang/String;` @kind direct;
  #L1ab5ec.  v0:= temp @kind object;
  #L1ab5ee.  if v0 == 0 then goto L1ab5fe;
  #L1ab5f2.  v1:= new `org.simpleframework.xml.core.MethodName`;
  #L1ab5f6.  call `<init>`(v1, v5, v6, v0) @signature `Lorg/simpleframework/xml/core/MethodName;.<init>:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;Ljava/lang/String;)V` @kind direct;
  #L1ab5fc.  return v1 @kind object;
  #L1ab5fe.  v6:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab602.  v0:= new `java.lang.Object`[v3];
  #L1ab606.  v0[v2]:= v5 @kind object;
  #L1ab60a.  v5:= "Could not get name for %s" @kind object;
  #L1ab60e.  call `<init>`(v6, v5, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab614.  throw v6;
  #L1ab616.  v6:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab61a.  v0:= new `java.lang.Object`[v3];
  #L1ab61e.  v0[v2]:= v5 @kind object;
  #L1ab622.  v5:= "Get method %s is not a valid property" @kind object;
  #L1ab626.  call `<init>`(v6, v5, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab62c.  throw v6;
}
procedure `java.lang.Class` `g`(`org.simpleframework.xml.core.MethodPartFactory` v1 @kind this, `java.lang.reflect.Method` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.g:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab41c.  call temp:= `getParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1ab422.  v0:= temp @kind object;
  #L1ab424.  v0:= length @variable v0;
  #L1ab426.  if v0 != 0 then goto L1ab434;
  #L1ab42a.  call temp:= `getReturnType`(v2) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L1ab430.  v2:= temp @kind object;
  #L1ab432.  return v2 @kind object;
  #L1ab434.  v2:= 0I;
  #L1ab436.  return v2 @kind object;
}
procedure `java.lang.String` `h`(`org.simpleframework.xml.core.MethodPartFactory` v1 @kind this, `java.lang.String` v2 @kind object, `org.simpleframework.xml.core.MethodType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.h:(Ljava/lang/String;Lorg/simpleframework/xml/core/MethodType;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab4f0.  call temp:= `getPrefix`(v3) @signature `Lorg/simpleframework/xml/core/MethodType;.getPrefix:()I` @kind virtual;
  #L1ab4f6.  v3:= temp;
  #L1ab4f8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ab4fe.  v0:= temp;
  #L1ab500.  if v0 <= v3 then goto L1ab50c;
  #L1ab504.  call temp:= `substring`(v2, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1ab50a.  v2:= temp @kind object;
  #L1ab50c.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/Reflector;.getName:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1ab512.  v2:= temp @kind object;
  #L1ab514.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.MethodName` `i`(`org.simpleframework.xml.core.MethodPartFactory` v4 @kind this, `java.lang.reflect.Method` v5 @kind object, `org.simpleframework.xml.core.MethodType` v6 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.i:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;)Lorg/simpleframework/xml/core/MethodName;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ab640.  call temp:= `getParameterTypes`(v5) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L1ab646.  v0:= temp @kind object;
  #L1ab648.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ab64e.  v1:= temp @kind object;
  #L1ab650.  v0:= length @variable v0;
  #L1ab652.  v2:= 0I;
  #L1ab654.  v3:= 1I;
  #L1ab656.  if v0 != v3 then goto L1ab68a;
  #L1ab65a.  call temp:= `h`(v4, v1, v6) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.h:(Ljava/lang/String;Lorg/simpleframework/xml/core/MethodType;)Ljava/lang/String;` @kind direct;
  #L1ab660.  v0:= temp @kind object;
  #L1ab662.  if v0 == 0 then goto L1ab672;
  #L1ab666.  v1:= new `org.simpleframework.xml.core.MethodName`;
  #L1ab66a.  call `<init>`(v1, v5, v6, v0) @signature `Lorg/simpleframework/xml/core/MethodName;.<init>:(Ljava/lang/reflect/Method;Lorg/simpleframework/xml/core/MethodType;Ljava/lang/String;)V` @kind direct;
  #L1ab670.  return v1 @kind object;
  #L1ab672.  v6:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab676.  v0:= new `java.lang.Object`[v3];
  #L1ab67a.  v0[v2]:= v5 @kind object;
  #L1ab67e.  v5:= "Could not get name for %s" @kind object;
  #L1ab682.  call `<init>`(v6, v5, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab688.  throw v6;
  #L1ab68a.  v6:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab68e.  v0:= new `java.lang.Object`[v3];
  #L1ab692.  v0[v2]:= v5 @kind object;
  #L1ab696.  v5:= "Set method %s is not a valid property" @kind object;
  #L1ab69a.  call `<init>`(v6, v5, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab6a0.  throw v6;
}
procedure `org.simpleframework.xml.core.MethodPart` `getInstance`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object, `java.lang.annotation.Annotation` v4 @kind object, `java.lang.annotation.Annotation`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ab6b4.  call temp:= `d`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.d:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodName;` @kind direct;
  #L1ab6ba.  v3:= temp @kind object;
  #L1ab6bc.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/MethodName;.getType:()Lorg/simpleframework/xml/core/MethodType;` @kind virtual;
  #L1ab6c2.  v0:= temp @kind object;
  #L1ab6c4.  v1:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab6c8.  if v0 != v1 then goto L1ab6d8;
  #L1ab6cc.  v0:= new `org.simpleframework.xml.core.SetPart`;
  #L1ab6d0.  call `<init>`(v0, v3, v4, v5) @signature `Lorg/simpleframework/xml/core/SetPart;.<init>:(Lorg/simpleframework/xml/core/MethodName;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1ab6d6.  return v0 @kind object;
  #L1ab6d8.  v0:= new `org.simpleframework.xml.core.GetPart`;
  #L1ab6dc.  call `<init>`(v0, v3, v4, v5) @signature `Lorg/simpleframework/xml/core/GetPart;.<init>:(Lorg/simpleframework/xml/core/MethodName;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1ab6e2.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.MethodPart` `getInstance`(`org.simpleframework.xml.core.MethodPartFactory` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ab6f4.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.a:(Ljava/lang/reflect/Method;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L1ab6fa.  v0:= temp @kind object;
  #L1ab6fc.  if v0 == 0 then goto L1ab70a;
  #L1ab700.  call temp:= `getInstance`(v1, v2, v0, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1ab706.  v2:= temp @kind object;
  #L1ab708.  return v2 @kind object;
  #L1ab70a.  v2:= 0I;
  #L1ab70c.  return v2 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.MethodPartFactory` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getType:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ab448.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.c:(Ljava/lang/reflect/Method;)Lorg/simpleframework/xml/core/MethodType;` @kind direct;
  #L1ab44e.  v0:= temp @kind object;
  #L1ab450.  v1:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab454.  if v0 != v1 then goto L1ab462;
  #L1ab458.  call temp:= `e`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.e:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind direct;
  #L1ab45e.  v3:= temp @kind object;
  #L1ab460.  return v3 @kind object;
  #L1ab462.  v1:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab466.  if v0 != v1 then goto L1ab474;
  #L1ab46a.  call temp:= `g`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.g:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind direct;
  #L1ab470.  v3:= temp @kind object;
  #L1ab472.  return v3 @kind object;
  #L1ab474.  v1:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1ab478.  if v0 != v1 then goto L1ab486;
  #L1ab47c.  call temp:= `g`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.g:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind direct;
  #L1ab482.  v3:= temp @kind object;
  #L1ab484.  return v3 @kind object;
  #L1ab486.  v3:= 0I;
  #L1ab488.  return v3 @kind object;
}
