record `org.simpleframework.xml.core.InstantiatorBuilder` @kind class @AccessFlag PUBLIC {
  `java.util.List` `org.simpleframework.xml.core.InstantiatorBuilder.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Instantiator` `org.simpleframework.xml.core.InstantiatorBuilder.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.LabelMap` `org.simpleframework.xml.core.InstantiatorBuilder.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.LabelMap` `org.simpleframework.xml.core.InstantiatorBuilder.d` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.LabelMap` `org.simpleframework.xml.core.InstantiatorBuilder.e` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Comparer` `org.simpleframework.xml.core.InstantiatorBuilder.f` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Scanner` `org.simpleframework.xml.core.InstantiatorBuilder.g` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Detail` `org.simpleframework.xml.core.InstantiatorBuilder.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Scanner` v2 @kind object, `org.simpleframework.xml.core.Detail` v3 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.<init>:(Lorg/simpleframework/xml/core/Scanner;Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a9af4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a9afa.  v0:= new `java.util.ArrayList`;
  #L1a9afe.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1a9b04.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.a` @type ^`java.util.List` := v0 @kind object;
  #L1a9b08.  v0:= new `org.simpleframework.xml.core.Comparer`;
  #L1a9b0c.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:()V` @kind direct;
  #L1a9b12.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.f` @type ^`org.simpleframework.xml.core.Comparer` := v0 @kind object;
  #L1a9b16.  v0:= new `org.simpleframework.xml.core.LabelMap`;
  #L1a9b1a.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/LabelMap;.<init>:()V` @kind direct;
  #L1a9b20.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.c` @type ^`org.simpleframework.xml.core.LabelMap` := v0 @kind object;
  #L1a9b24.  v0:= new `org.simpleframework.xml.core.LabelMap`;
  #L1a9b28.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/LabelMap;.<init>:()V` @kind direct;
  #L1a9b2e.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.d` @type ^`org.simpleframework.xml.core.LabelMap` := v0 @kind object;
  #L1a9b32.  v0:= new `org.simpleframework.xml.core.LabelMap`;
  #L1a9b36.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/LabelMap;.<init>:()V` @kind direct;
  #L1a9b3c.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.e` @type ^`org.simpleframework.xml.core.LabelMap` := v0 @kind object;
  #L1a9b40.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.g` @type ^`org.simpleframework.xml.core.Scanner` := v2 @kind object;
  #L1a9b44.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` := v3 @kind object;
  #L1a9b48.  return @kind void;
}
procedure `org.simpleframework.xml.core.Instantiator` `a`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Detail` v2 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.a:(Lorg/simpleframework/xml/core/Detail;)Lorg/simpleframework/xml/core/Instantiator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a99bc.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a99c0.  if v0 != 0 then goto L1a99d0;
  #L1a99c4.  call temp:= `d`(v1, v2) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.d:(Lorg/simpleframework/xml/core/Detail;)Lorg/simpleframework/xml/core/Instantiator;` @kind direct;
  #L1a99ca.  v2:= temp @kind object;
  #L1a99cc.  v1.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` := v2 @kind object;
  #L1a99d0.  v2:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a99d4.  return v2 @kind object;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.InstantiatorBuilder` v5 @kind this, `java.lang.String`[] v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.b:([Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a9918.  v0:= length @variable v6;
  #L1a991a.  v1:= 0I;
  #L1a991c.  v2:= 0I;
  #L1a991e.  if v2 >= v0 then goto L1a9942;
  #L1a9922.  v3:= v6[v2] @kind object;
  #L1a9926.  v4:= 1I;
  #L1a9928.  if v3 != v7 then goto L1a992e;
  #L1a992c.  return v4;
  #L1a992e.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a9934.  v3:= temp;
  #L1a9936.  if v3 == 0 then goto L1a993c;
  #L1a993a.  return v4;
  #L1a993c.  v2:= v2 + 1;
  #L1a9940.  goto L1a991e;
  #L1a9942.  return v1;
}
procedure `org.simpleframework.xml.core.Creator` `c`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Signature` v2 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.c:(Lorg/simpleframework/xml/core/Signature;)Lorg/simpleframework/xml/core/Creator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a9954.  v0:= new `org.simpleframework.xml.core.SignatureCreator`;
  #L1a9958.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/SignatureCreator;.<init>:(Lorg/simpleframework/xml/core/Signature;)V` @kind direct;
  #L1a995e.  if v2 == 0 then goto L1a996c;
  #L1a9962.  v2:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.a` @type ^`java.util.List` @kind object;
  #L1a9966.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a996c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Instantiator` `d`(`org.simpleframework.xml.core.InstantiatorBuilder` v4 @kind this, `org.simpleframework.xml.core.Detail` v5 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.d:(Lorg/simpleframework/xml/core/Detail;)Lorg/simpleframework/xml/core/Instantiator;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a99e8.  v0:= v4.`org.simpleframework.xml.core.InstantiatorBuilder.g` @type ^`org.simpleframework.xml.core.Scanner` @kind object;
  #L1a99ec.  call temp:= `getSignature`(v0) @signature `Lorg/simpleframework/xml/core/Scanner;.getSignature:()Lorg/simpleframework/xml/core/Signature;` @kind interface;
  #L1a99f2.  v0:= temp @kind object;
  #L1a99f4.  v1:= v4.`org.simpleframework.xml.core.InstantiatorBuilder.g` @type ^`org.simpleframework.xml.core.Scanner` @kind object;
  #L1a99f8.  call temp:= `getParameters`(v1) @signature `Lorg/simpleframework/xml/core/Scanner;.getParameters:()Lorg/simpleframework/xml/core/ParameterMap;` @kind interface;
  #L1a99fe.  v1:= temp @kind object;
  #L1a9a00.  if v0 == 0 then goto L1a9a10;
  #L1a9a04.  v2:= new `org.simpleframework.xml.core.SignatureCreator`;
  #L1a9a08.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/core/SignatureCreator;.<init>:(Lorg/simpleframework/xml/core/Signature;)V` @kind direct;
  #L1a9a0e.  goto L1a9a12;
  #L1a9a10.  v2:= 0I;
  #L1a9a12.  v0:= new `org.simpleframework.xml.core.ClassInstantiator`;
  #L1a9a16.  v3:= v4.`org.simpleframework.xml.core.InstantiatorBuilder.a` @type ^`java.util.List` @kind object;
  #L1a9a1a.  call `<init>`(v0, v3, v2, v1, v5) @signature `Lorg/simpleframework/xml/core/ClassInstantiator;.<init>:(Ljava/util/List;Lorg/simpleframework/xml/core/Creator;Lorg/simpleframework/xml/core/ParameterMap;Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L1a9a20.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Parameter` `e`(`org.simpleframework.xml.core.InstantiatorBuilder` v2 @kind this, `org.simpleframework.xml.core.Parameter` v3 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.e:(Lorg/simpleframework/xml/core/Parameter;)Lorg/simpleframework/xml/core/Parameter;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a9ac8.  call temp:= `i`(v2, v3) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.i:(Lorg/simpleframework/xml/core/Parameter;)Lorg/simpleframework/xml/core/Label;` @kind direct;
  #L1a9ace.  v0:= temp @kind object;
  #L1a9ad0.  if v0 == 0 then goto L1a9ae0;
  #L1a9ad4.  v1:= new `org.simpleframework.xml.core.CacheParameter`;
  #L1a9ad8.  call `<init>`(v1, v3, v0) @signature `Lorg/simpleframework/xml/core/CacheParameter;.<init>:(Lorg/simpleframework/xml/core/Parameter;Lorg/simpleframework/xml/core/Label;)V` @kind direct;
  #L1a9ade.  return v1 @kind object;
  #L1a9ae0.  v3:= 0I;
  #L1a9ae2.  return v3 @kind object;
}
procedure `void` `f`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Detail` v2 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.f:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a9b5c.  v2:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.g` @type ^`org.simpleframework.xml.core.Scanner` @kind object;
  #L1a9b60.  call temp:= `getSignatures`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getSignatures:()Ljava/util/List;` @kind interface;
  #L1a9b66.  v2:= temp @kind object;
  #L1a9b68.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1a9b6e.  v2:= temp @kind object;
  #L1a9b70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9b76.  v0:= temp;
  #L1a9b78.  if v0 == 0 then goto L1a9b90;
  #L1a9b7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9b82.  v0:= temp @kind object;
  #L1a9b84.  v0:= (`org.simpleframework.xml.core.Signature`) v0 @kind object;
  #L1a9b88.  call `g`(v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.g:(Lorg/simpleframework/xml/core/Signature;)V` @kind direct;
  #L1a9b8e.  goto L1a9b70;
  #L1a9b90.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.InstantiatorBuilder` v2 @kind this, `org.simpleframework.xml.core.Signature` v3 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.g:(Lorg/simpleframework/xml/core/Signature;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a9ba4.  v0:= new `org.simpleframework.xml.core.Signature`;
  #L1a9ba8.  call `<init>`(v0, v3) @signature `Lorg/simpleframework/xml/core/Signature;.<init>:(Lorg/simpleframework/xml/core/Signature;)V` @kind direct;
  #L1a9bae.  call temp:= `iterator`(v3) @signature `Lorg/simpleframework/xml/core/Signature;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1a9bb4.  v3:= temp @kind object;
  #L1a9bb6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9bbc.  v1:= temp;
  #L1a9bbe.  if v1 == 0 then goto L1a9be2;
  #L1a9bc2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9bc8.  v1:= temp @kind object;
  #L1a9bca.  v1:= (`org.simpleframework.xml.core.Parameter`) v1 @kind object;
  #L1a9bce.  call temp:= `e`(v2, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.e:(Lorg/simpleframework/xml/core/Parameter;)Lorg/simpleframework/xml/core/Parameter;` @kind direct;
  #L1a9bd4.  v1:= temp @kind object;
  #L1a9bd6.  if v1 == 0 then goto L1a9bb6;
  #L1a9bda.  call `add`(v0, v1) @signature `Lorg/simpleframework/xml/core/Signature;.add:(Lorg/simpleframework/xml/core/Parameter;)V` @kind virtual;
  #L1a9be0.  goto L1a9bb6;
  #L1a9be2.  call temp:= `c`(v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.c:(Lorg/simpleframework/xml/core/Signature;)Lorg/simpleframework/xml/core/Creator;` @kind direct;
  #L1a9be8.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.core.InstantiatorBuilder` v3 @kind this, `org.simpleframework.xml.core.Label` v4 @kind object, `org.simpleframework.xml.core.LabelMap` v5 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.h:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/LabelMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a9c48.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/core/Label;.getName:()Ljava/lang/String;` @kind interface;
  #L1a9c4e.  v0:= temp @kind object;
  #L1a9c50.  call temp:= `getPath`(v4) @signature `Lorg/simpleframework/xml/core/Label;.getPath:()Ljava/lang/String;` @kind interface;
  #L1a9c56.  v1:= temp @kind object;
  #L1a9c58.  call temp:= `containsKey`(v5, v0) @signature `Ljava/util/LinkedHashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a9c5e.  v2:= temp;
  #L1a9c60.  if v2 == 0 then goto L1a9c8c;
  #L1a9c64.  call temp:= `get`(v5, v0) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9c6a.  v2:= temp @kind object;
  #L1a9c6c.  v2:= (`org.simpleframework.xml.core.Label`) v2 @kind object;
  #L1a9c70.  call temp:= `getPath`(v2) @signature `Lorg/simpleframework/xml/core/Label;.getPath:()Ljava/lang/String;` @kind interface;
  #L1a9c76.  v2:= temp @kind object;
  #L1a9c78.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a9c7e.  v2:= temp;
  #L1a9c80.  if v2 != 0 then goto L1a9c92;
  #L1a9c84.  call temp:= `remove`(v5, v0) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9c8a.  goto L1a9c92;
  #L1a9c8c.  call temp:= `put`(v5, v0, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9c92.  call temp:= `put`(v5, v1, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9c98.  return @kind void;
}
procedure `org.simpleframework.xml.core.Label` `i`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Parameter` v2 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.i:(Lorg/simpleframework/xml/core/Parameter;)Lorg/simpleframework/xml/core/Label;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a9a34.  call temp:= `isAttribute`(v2) @signature `Lorg/simpleframework/xml/core/Parameter;.isAttribute:()Z` @kind interface;
  #L1a9a3a.  v0:= temp;
  #L1a9a3c.  if v0 == 0 then goto L1a9a4e;
  #L1a9a40.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.c` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9a44.  call temp:= `j`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.j:(Lorg/simpleframework/xml/core/Parameter;Lorg/simpleframework/xml/core/LabelMap;)Lorg/simpleframework/xml/core/Label;` @kind direct;
  #L1a9a4a.  v2:= temp @kind object;
  #L1a9a4c.  return v2 @kind object;
  #L1a9a4e.  call temp:= `isText`(v2) @signature `Lorg/simpleframework/xml/core/Parameter;.isText:()Z` @kind interface;
  #L1a9a54.  v0:= temp;
  #L1a9a56.  if v0 == 0 then goto L1a9a68;
  #L1a9a5a.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.e` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9a5e.  call temp:= `j`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.j:(Lorg/simpleframework/xml/core/Parameter;Lorg/simpleframework/xml/core/LabelMap;)Lorg/simpleframework/xml/core/Label;` @kind direct;
  #L1a9a64.  v2:= temp @kind object;
  #L1a9a66.  return v2 @kind object;
  #L1a9a68.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.d` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9a6c.  call temp:= `j`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.j:(Lorg/simpleframework/xml/core/Parameter;Lorg/simpleframework/xml/core/LabelMap;)Lorg/simpleframework/xml/core/Label;` @kind direct;
  #L1a9a72.  v2:= temp @kind object;
  #L1a9a74.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Label` `j`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Parameter` v2 @kind object, `org.simpleframework.xml.core.LabelMap` v3 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.j:(Lorg/simpleframework/xml/core/Parameter;Lorg/simpleframework/xml/core/LabelMap;)Lorg/simpleframework/xml/core/Label;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a9a88.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/Parameter;.getName:()Ljava/lang/String;` @kind interface;
  #L1a9a8e.  v0:= temp @kind object;
  #L1a9a90.  call temp:= `getPath`(v2) @signature `Lorg/simpleframework/xml/core/Parameter;.getPath:()Ljava/lang/String;` @kind interface;
  #L1a9a96.  v2:= temp @kind object;
  #L1a9a98.  call temp:= `get`(v3, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9a9e.  v2:= temp @kind object;
  #L1a9aa0.  v2:= (`org.simpleframework.xml.core.Label`) v2 @kind object;
  #L1a9aa4.  if v2 != 0 then goto L1a9ab4;
  #L1a9aa8.  call temp:= `get`(v3, v0) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a9aae.  v2:= temp @kind object;
  #L1a9ab0.  v2:= (`org.simpleframework.xml.core.Label`) v2 @kind object;
  #L1a9ab4.  return v2 @kind object;
}
procedure `void` `k`(`org.simpleframework.xml.core.InstantiatorBuilder` v4 @kind this, `org.simpleframework.xml.core.Detail` v5 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.k:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a9cac.  v0:= v4.`org.simpleframework.xml.core.InstantiatorBuilder.g` @type ^`org.simpleframework.xml.core.Scanner` @kind object;
  #L1a9cb0.  call temp:= `getParameters`(v0) @signature `Lorg/simpleframework/xml/core/Scanner;.getParameters:()Lorg/simpleframework/xml/core/ParameterMap;` @kind interface;
  #L1a9cb6.  v0:= temp @kind object;
  #L1a9cb8.  call temp:= `getAll`(v0) @signature `Lorg/simpleframework/xml/core/ParameterMap;.getAll:()Ljava/util/List;` @kind virtual;
  #L1a9cbe.  v0:= temp @kind object;
  #L1a9cc0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1a9cc6.  v0:= temp @kind object;
  #L1a9cc8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9cce.  v1:= temp;
  #L1a9cd0.  if v1 == 0 then goto L1a9d1e;
  #L1a9cd4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9cda.  v1:= temp @kind object;
  #L1a9cdc.  v1:= (`org.simpleframework.xml.core.Parameter`) v1 @kind object;
  #L1a9ce0.  call temp:= `i`(v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.i:(Lorg/simpleframework/xml/core/Parameter;)Lorg/simpleframework/xml/core/Label;` @kind direct;
  #L1a9ce6.  v2:= temp @kind object;
  #L1a9ce8.  call temp:= `getPath`(v1) @signature `Lorg/simpleframework/xml/core/Parameter;.getPath:()Ljava/lang/String;` @kind interface;
  #L1a9cee.  v3:= temp @kind object;
  #L1a9cf0.  if v2 == 0 then goto L1a9cfc;
  #L1a9cf4.  call `r`(v4, v2, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.r:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @kind direct;
  #L1a9cfa.  goto L1a9cc8;
  #L1a9cfc.  v0:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9d00.  v1:= 2I;
  #L1a9d02.  v1:= new `java.lang.Object`[v1];
  #L1a9d06.  v2:= 0I;
  #L1a9d08.  v1[v2]:= v3 @kind object;
  #L1a9d0c.  v2:= 1I;
  #L1a9d0e.  v1[v2]:= v5 @kind object;
  #L1a9d12.  v5:= "Parameter '%s' does not have a match in %s" @kind object;
  #L1a9d16.  call `<init>`(v0, v5, v1) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9d1c.  throw v0;
  #L1a9d1e.  call `n`(v4) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.n:()V` @kind direct;
  #L1a9d24.  return @kind void;
}
procedure `void` `l`(`org.simpleframework.xml.core.InstantiatorBuilder` v5 @kind this, `org.simpleframework.xml.core.Label` v6 @kind object, `org.simpleframework.xml.core.Parameter` v7 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.l:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a9d38.  call temp:= `getAnnotation`(v6) @signature `Lorg/simpleframework/xml/core/Label;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L1a9d3e.  v6:= temp @kind object;
  #L1a9d40.  call temp:= `getAnnotation`(v7) @signature `Lorg/simpleframework/xml/core/Parameter;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L1a9d46.  v0:= temp @kind object;
  #L1a9d48.  call temp:= `getName`(v7) @signature `Lorg/simpleframework/xml/core/Parameter;.getName:()Ljava/lang/String;` @kind interface;
  #L1a9d4e.  v1:= temp @kind object;
  #L1a9d50.  v2:= v5.`org.simpleframework.xml.core.InstantiatorBuilder.f` @type ^`org.simpleframework.xml.core.Comparer` @kind object;
  #L1a9d54.  call temp:= `equals`(v2, v6, v0) @signature `Lorg/simpleframework/xml/core/Comparer;.equals:(Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Z` @kind virtual;
  #L1a9d5a.  v2:= temp;
  #L1a9d5c.  if v2 != 0 then goto L1a9dac;
  #L1a9d60.  call temp:= `annotationType`(v6) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L1a9d66.  v6:= temp @kind object;
  #L1a9d68.  call temp:= `annotationType`(v0) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L1a9d6e.  v0:= temp @kind object;
  #L1a9d70.  call temp:= `equals`(v6, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a9d76.  v2:= temp;
  #L1a9d78.  if v2 == 0 then goto L1a9d7e;
  #L1a9d7c.  goto L1a9dac;
  #L1a9d7e.  v2:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9d82.  v3:= 4I;
  #L1a9d84.  v3:= new `java.lang.Object`[v3];
  #L1a9d88.  v4:= 0I;
  #L1a9d8a.  v3[v4]:= v0 @kind object;
  #L1a9d8e.  v0:= 1I;
  #L1a9d90.  v3[v0]:= v6 @kind object;
  #L1a9d94.  v6:= 2I;
  #L1a9d96.  v3[v6]:= v1 @kind object;
  #L1a9d9a.  v6:= 3I;
  #L1a9d9c.  v3[v6]:= v7 @kind object;
  #L1a9da0.  v6:= "Annotation %s does not match %s for '%s' in %s" @kind object;
  #L1a9da4.  call `<init>`(v2, v6, v3) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9daa.  throw v2;
  #L1a9dac.  return @kind void;
}
procedure `void` `m`(`org.simpleframework.xml.core.InstantiatorBuilder` v3 @kind this, `org.simpleframework.xml.core.Label` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.m:(Lorg/simpleframework/xml/core/Label;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a9dc0.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1a9dc6.  v5:= temp @kind object;
  #L1a9dc8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9dce.  v0:= temp;
  #L1a9dd0.  if v0 == 0 then goto L1a9e18;
  #L1a9dd4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9dda.  v0:= temp @kind object;
  #L1a9ddc.  v0:= (`org.simpleframework.xml.core.Creator`) v0 @kind object;
  #L1a9de0.  call temp:= `getSignature`(v0) @signature `Lorg/simpleframework/xml/core/Creator;.getSignature:()Lorg/simpleframework/xml/core/Signature;` @kind interface;
  #L1a9de6.  v0:= temp @kind object;
  #L1a9de8.  call temp:= `getContact`(v4) @signature `Lorg/simpleframework/xml/core/Label;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind interface;
  #L1a9dee.  v1:= temp @kind object;
  #L1a9df0.  call temp:= `getKey`(v4) @signature `Lorg/simpleframework/xml/core/Label;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1a9df6.  v2:= temp @kind object;
  #L1a9df8.  call temp:= `isReadOnly`(v1) @signature `Lorg/simpleframework/xml/core/Contact;.isReadOnly:()Z` @kind interface;
  #L1a9dfe.  v1:= temp;
  #L1a9e00.  if v1 == 0 then goto L1a9dc8;
  #L1a9e04.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/core/Signature;.get:(Ljava/lang/Object;)Lorg/simpleframework/xml/core/Parameter;` @kind virtual;
  #L1a9e0a.  v0:= temp @kind object;
  #L1a9e0c.  if v0 != 0 then goto L1a9dc8;
  #L1a9e10.  call `remove`(v5) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1a9e16.  goto L1a9dc8;
  #L1a9e18.  return @kind void;
}
procedure `void` `n`(`org.simpleframework.xml.core.InstantiatorBuilder` v2 @kind this) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a9e2c.  v0:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a9e30.  call temp:= `getCreators`(v0) @signature `Lorg/simpleframework/xml/core/Instantiator;.getCreators:()Ljava/util/List;` @kind interface;
  #L1a9e36.  v0:= temp @kind object;
  #L1a9e38.  v1:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a9e3c.  call temp:= `isDefault`(v1) @signature `Lorg/simpleframework/xml/core/Instantiator;.isDefault:()Z` @kind interface;
  #L1a9e42.  v1:= temp;
  #L1a9e44.  if v1 == 0 then goto L1a9e5c;
  #L1a9e48.  v1:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.d` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9e4c.  call `o`(v2, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.o:(Lorg/simpleframework/xml/core/LabelMap;)V` @kind direct;
  #L1a9e52.  v1:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.c` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9e56.  call `o`(v2, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.o:(Lorg/simpleframework/xml/core/LabelMap;)V` @kind direct;
  #L1a9e5c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1a9e62.  v1:= temp;
  #L1a9e64.  if v1 != 0 then goto L1a9e7c;
  #L1a9e68.  v1:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.d` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9e6c.  call `p`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.p:(Lorg/simpleframework/xml/core/LabelMap;Ljava/util/List;)V` @kind direct;
  #L1a9e72.  v1:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.c` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9e76.  call `p`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.p:(Lorg/simpleframework/xml/core/LabelMap;Ljava/util/List;)V` @kind direct;
  #L1a9e7c.  return @kind void;
}
procedure `void` `o`(`org.simpleframework.xml.core.InstantiatorBuilder` v3 @kind this, `org.simpleframework.xml.core.LabelMap` v4 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.o:(Lorg/simpleframework/xml/core/LabelMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a9e90.  call temp:= `iterator`(v4) @signature `Lorg/simpleframework/xml/core/LabelMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1a9e96.  v4:= temp @kind object;
  #L1a9e98.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9e9e.  v0:= temp;
  #L1a9ea0.  if v0 == 0 then goto L1a9ef0;
  #L1a9ea4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9eaa.  v0:= temp @kind object;
  #L1a9eac.  v0:= (`org.simpleframework.xml.core.Label`) v0 @kind object;
  #L1a9eb0.  if v0 == 0 then goto L1a9e98;
  #L1a9eb4.  call temp:= `getContact`(v0) @signature `Lorg/simpleframework/xml/core/Label;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind interface;
  #L1a9eba.  v1:= temp @kind object;
  #L1a9ebc.  call temp:= `isReadOnly`(v1) @signature `Lorg/simpleframework/xml/core/Contact;.isReadOnly:()Z` @kind interface;
  #L1a9ec2.  v1:= temp;
  #L1a9ec4.  if v1 != 0 then goto L1a9eca;
  #L1a9ec8.  goto L1a9e98;
  #L1a9eca.  v4:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9ece.  v1:= 2I;
  #L1a9ed0.  v1:= new `java.lang.Object`[v1];
  #L1a9ed4.  v2:= 0I;
  #L1a9ed6.  v1[v2]:= v0 @kind object;
  #L1a9eda.  v0:= v3.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1a9ede.  v2:= 1I;
  #L1a9ee0.  v1[v2]:= v0 @kind object;
  #L1a9ee4.  v0:= "Default constructor can not accept read only %s in %s" @kind object;
  #L1a9ee8.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9eee.  throw v4;
  #L1a9ef0.  return @kind void;
}
procedure `void` `p`(`org.simpleframework.xml.core.InstantiatorBuilder` v2 @kind this, `org.simpleframework.xml.core.LabelMap` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.p:(Lorg/simpleframework/xml/core/LabelMap;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a9f04.  call temp:= `iterator`(v3) @signature `Lorg/simpleframework/xml/core/LabelMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1a9f0a.  v3:= temp @kind object;
  #L1a9f0c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1a9f12.  v0:= temp;
  #L1a9f14.  if v0 == 0 then goto L1a9f30;
  #L1a9f18.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1a9f1e.  v0:= temp @kind object;
  #L1a9f20.  v0:= (`org.simpleframework.xml.core.Label`) v0 @kind object;
  #L1a9f24.  if v0 == 0 then goto L1a9f0c;
  #L1a9f28.  call `m`(v2, v0, v4) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.m:(Lorg/simpleframework/xml/core/Label;Ljava/util/List;)V` @kind direct;
  #L1a9f2e.  goto L1a9f0c;
  #L1a9f30.  call temp:= `isEmpty`(v4) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1a9f36.  v3:= temp;
  #L1a9f38.  if v3 != 0 then goto L1a9f3e;
  #L1a9f3c.  return @kind void;
  #L1a9f3e.  v3:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9f42.  v4:= 1I;
  #L1a9f44.  v4:= new `java.lang.Object`[v4];
  #L1a9f48.  v0:= v2.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1a9f4c.  v1:= 0I;
  #L1a9f4e.  v4[v1]:= v0 @kind object;
  #L1a9f52.  v0:= "No constructor accepts all read only values in %s" @kind object;
  #L1a9f56.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9f5c.  throw v3;
}
procedure `void` `q`(`org.simpleframework.xml.core.InstantiatorBuilder` v7 @kind this, `org.simpleframework.xml.core.Label` v8 @kind object, `org.simpleframework.xml.core.Parameter` v9 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.q:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a9f70.  call temp:= `getNames`(v8) @signature `Lorg/simpleframework/xml/core/Label;.getNames:()[Ljava/lang/String;` @kind interface;
  #L1a9f76.  v0:= temp @kind object;
  #L1a9f78.  call temp:= `getName`(v9) @signature `Lorg/simpleframework/xml/core/Parameter;.getName:()Ljava/lang/String;` @kind interface;
  #L1a9f7e.  v1:= temp @kind object;
  #L1a9f80.  call temp:= `b`(v7, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.b:([Ljava/lang/String;Ljava/lang/String;)Z` @kind direct;
  #L1a9f86.  v0:= temp;
  #L1a9f88.  if v0 != 0 then goto L1a9ff2;
  #L1a9f8c.  call temp:= `getName`(v8) @signature `Lorg/simpleframework/xml/core/Label;.getName:()Ljava/lang/String;` @kind interface;
  #L1a9f92.  v0:= temp @kind object;
  #L1a9f94.  if v1 == v0 then goto L1a9ff2;
  #L1a9f98.  v2:= "Annotation does not match %s for '%s' in %s" @kind object;
  #L1a9f9c.  v3:= 2I;
  #L1a9f9e.  v4:= 1I;
  #L1a9fa0.  v5:= 0I;
  #L1a9fa2.  v6:= 3I;
  #L1a9fa4.  if v1 == 0 then goto L1a9fd6;
  #L1a9fa8.  if v0 == 0 then goto L1a9fd6;
  #L1a9fac.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a9fb2.  v0:= temp;
  #L1a9fb4.  if v0 == 0 then goto L1a9fba;
  #L1a9fb8.  goto L1a9ff2;
  #L1a9fba.  v0:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9fbe.  v6:= new `java.lang.Object`[v6];
  #L1a9fc2.  v6[v5]:= v8 @kind object;
  #L1a9fc6.  v6[v4]:= v1 @kind object;
  #L1a9fca.  v6[v3]:= v9 @kind object;
  #L1a9fce.  call `<init>`(v0, v2, v6) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9fd4.  throw v0;
  #L1a9fd6.  v0:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1a9fda.  v6:= new `java.lang.Object`[v6];
  #L1a9fde.  v6[v5]:= v8 @kind object;
  #L1a9fe2.  v6[v4]:= v1 @kind object;
  #L1a9fe6.  v6[v3]:= v9 @kind object;
  #L1a9fea.  call `<init>`(v0, v2, v6) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a9ff0.  throw v0;
  #L1a9ff2.  return @kind void;
}
procedure `void` `r`(`org.simpleframework.xml.core.InstantiatorBuilder` v4 @kind this, `org.simpleframework.xml.core.Label` v5 @kind object, `org.simpleframework.xml.core.Parameter` v6 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.r:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aa004.  call temp:= `getContact`(v5) @signature `Lorg/simpleframework/xml/core/Label;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind interface;
  #L1aa00a.  v0:= temp @kind object;
  #L1aa00c.  call temp:= `getName`(v6) @signature `Lorg/simpleframework/xml/core/Parameter;.getName:()Ljava/lang/String;` @kind interface;
  #L1aa012.  v1:= temp @kind object;
  #L1aa014.  call temp:= `getType`(v6) @signature `Lorg/simpleframework/xml/core/Parameter;.getType:()Ljava/lang/Class;` @kind interface;
  #L1aa01a.  v2:= temp @kind object;
  #L1aa01c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1aa022.  v0:= temp @kind object;
  #L1aa024.  call temp:= `isAssignable`(v2, v0) @signature `Lorg/simpleframework/xml/core/Support;.isAssignable:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L1aa02a.  v0:= temp;
  #L1aa02c.  if v0 == 0 then goto L1aa03e;
  #L1aa030.  call `q`(v4, v5, v6) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.q:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @kind direct;
  #L1aa036.  call `l`(v4, v5, v6) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.l:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/Parameter;)V` @kind direct;
  #L1aa03c.  return @kind void;
  #L1aa03e.  v0:= new `org.simpleframework.xml.core.ConstructorException`;
  #L1aa042.  v2:= 3I;
  #L1aa044.  v2:= new `java.lang.Object`[v2];
  #L1aa048.  v3:= 0I;
  #L1aa04a.  v2[v3]:= v5 @kind object;
  #L1aa04e.  v5:= 1I;
  #L1aa050.  v2[v5]:= v1 @kind object;
  #L1aa054.  v5:= 2I;
  #L1aa056.  v2[v5]:= v6 @kind object;
  #L1aa05a.  v5:= "Type is not compatible with %s for '%s' in %s" @kind object;
  #L1aa05e.  call `<init>`(v0, v5, v2) @signature `Lorg/simpleframework/xml/core/ConstructorException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aa064.  throw v0;
}
procedure `org.simpleframework.xml.core.Instantiator` `build`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.build:()Lorg/simpleframework/xml/core/Instantiator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a9980.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a9984.  if v0 != 0 then goto L1a99a6;
  #L1a9988.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1a998c.  call `f`(v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.f:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L1a9992.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1a9996.  call temp:= `a`(v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.a:(Lorg/simpleframework/xml/core/Detail;)Lorg/simpleframework/xml/core/Instantiator;` @kind direct;
  #L1a999c.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.h` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1a99a0.  call `k`(v1, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.k:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L1a99a6.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.b` @type ^`org.simpleframework.xml.core.Instantiator` @kind object;
  #L1a99aa.  return v0 @kind object;
}
procedure `void` `register`(`org.simpleframework.xml.core.InstantiatorBuilder` v1 @kind this, `org.simpleframework.xml.core.Label` v2 @kind object) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.register:(Lorg/simpleframework/xml/core/Label;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a9bfc.  call temp:= `isAttribute`(v2) @signature `Lorg/simpleframework/xml/core/Label;.isAttribute:()Z` @kind interface;
  #L1a9c02.  v0:= temp;
  #L1a9c04.  if v0 == 0 then goto L1a9c14;
  #L1a9c08.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.c` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9c0c.  call `h`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.h:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/LabelMap;)V` @kind direct;
  #L1a9c12.  goto L1a9c36;
  #L1a9c14.  call temp:= `isText`(v2) @signature `Lorg/simpleframework/xml/core/Label;.isText:()Z` @kind interface;
  #L1a9c1a.  v0:= temp;
  #L1a9c1c.  if v0 == 0 then goto L1a9c2c;
  #L1a9c20.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.e` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9c24.  call `h`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.h:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/LabelMap;)V` @kind direct;
  #L1a9c2a.  goto L1a9c36;
  #L1a9c2c.  v0:= v1.`org.simpleframework.xml.core.InstantiatorBuilder.d` @type ^`org.simpleframework.xml.core.LabelMap` @kind object;
  #L1a9c30.  call `h`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/InstantiatorBuilder;.h:(Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/core/LabelMap;)V` @kind direct;
  #L1a9c36.  return @kind void;
}
