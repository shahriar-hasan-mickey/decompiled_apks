record `org.simpleframework.xml.core.VersionLabel` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.TemplateLabel` @kind class {
  `org.simpleframework.xml.core.Decorator` `org.simpleframework.xml.core.VersionLabel.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Introspector` `org.simpleframework.xml.core.VersionLabel.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Expression` `org.simpleframework.xml.core.VersionLabel.d` @AccessFlag PRIVATE;
  `org.simpleframework.xml.Version` `org.simpleframework.xml.core.VersionLabel.e` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Format` `org.simpleframework.xml.core.VersionLabel.f` @AccessFlag PRIVATE;
  `java.lang.Class` `org.simpleframework.xml.core.VersionLabel.g` @AccessFlag PRIVATE;
  `java.lang.String` `org.simpleframework.xml.core.VersionLabel.h` @AccessFlag PRIVATE;
  `boolean` `org.simpleframework.xml.core.VersionLabel.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this, `org.simpleframework.xml.core.Contact` v2 @kind object, `org.simpleframework.xml.Version` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.<init>:(Lorg/simpleframework/xml/core/Contact;Lorg/simpleframework/xml/Version;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b4fcc.  call `<init>`(v1) @signature `Lorg/simpleframework/xml/core/TemplateLabel;.<init>:()V` @kind direct;
  #L1b4fd2.  v0:= new `org.simpleframework.xml.core.Introspector`;
  #L1b4fd6.  call `<init>`(v0, v2, v1, v4) @signature `Lorg/simpleframework/xml/core/Introspector;.<init>:(Lorg/simpleframework/xml/core/Contact;Lorg/simpleframework/xml/core/Label;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b4fdc.  v1.`org.simpleframework.xml.core.VersionLabel.c` @type ^`org.simpleframework.xml.core.Introspector` := v0 @kind object;
  #L1b4fe0.  v0:= new `org.simpleframework.xml.core.Qualifier`;
  #L1b4fe4.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Qualifier;.<init>:(Lorg/simpleframework/xml/core/Contact;)V` @kind direct;
  #L1b4fea.  v1.`org.simpleframework.xml.core.VersionLabel.b` @type ^`org.simpleframework.xml.core.Decorator` := v0 @kind object;
  #L1b4fee.  call temp:= `required`(v3) @signature `Lorg/simpleframework/xml/Version;.required:()Z` @kind interface;
  #L1b4ff4.  v0:= temp;
  #L1b4ff6.  v1.`org.simpleframework.xml.core.VersionLabel.i` @type ^`boolean` := v0 @kind boolean;
  #L1b4ffa.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b5000.  v2:= temp @kind object;
  #L1b5002.  v1.`org.simpleframework.xml.core.VersionLabel.g` @type ^`java.lang.Class` := v2 @kind object;
  #L1b5006.  call temp:= `name`(v3) @signature `Lorg/simpleframework/xml/Version;.name:()Ljava/lang/String;` @kind interface;
  #L1b500c.  v2:= temp @kind object;
  #L1b500e.  v1.`org.simpleframework.xml.core.VersionLabel.h` @type ^`java.lang.String` := v2 @kind object;
  #L1b5012.  v1.`org.simpleframework.xml.core.VersionLabel.f` @type ^`org.simpleframework.xml.stream.Format` := v4 @kind object;
  #L1b5016.  v1.`org.simpleframework.xml.core.VersionLabel.e` @type ^`org.simpleframework.xml.Version` := v3 @kind object;
  #L1b501a.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `getAnnotation`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getAnnotation:()Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4eec.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.e` @type ^`org.simpleframework.xml.Version` @kind object;
  #L1b4ef0.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Contact` `getContact`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getContact:()Lorg/simpleframework/xml/core/Contact;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4f04.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.c` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L1b4f08.  call temp:= `getContact`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind virtual;
  #L1b4f0e.  v0:= temp @kind object;
  #L1b4f10.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Converter` `getConverter`(`org.simpleframework.xml.core.VersionLabel` v4 @kind this, `org.simpleframework.xml.core.Context` v5 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getConverter:(Lorg/simpleframework/xml/core/Context;)Lorg/simpleframework/xml/core/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b4f24.  call temp:= `getEmpty`(v4, v5) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @kind virtual;
  #L1b4f2a.  v0:= temp @kind object;
  #L1b4f2c.  call temp:= `getContact`(v4) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getContact:()Lorg/simpleframework/xml/core/Contact;` @kind virtual;
  #L1b4f32.  v1:= temp @kind object;
  #L1b4f34.  call temp:= `isFloat`(v5, v1) @signature `Lorg/simpleframework/xml/core/Context;.isFloat:(Lorg/simpleframework/xml/strategy/Type;)Z` @kind interface;
  #L1b4f3a.  v2:= temp;
  #L1b4f3c.  if v2 == 0 then goto L1b4f4c;
  #L1b4f40.  v2:= new `org.simpleframework.xml.core.Primitive`;
  #L1b4f44.  call `<init>`(v2, v5, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @kind direct;
  #L1b4f4a.  return v2 @kind object;
  #L1b4f4c.  v5:= new `org.simpleframework.xml.core.AttributeException`;
  #L1b4f50.  v0:= 2I;
  #L1b4f52.  v0:= new `java.lang.Object`[v0];
  #L1b4f56.  v2:= v4.`org.simpleframework.xml.core.VersionLabel.e` @type ^`org.simpleframework.xml.Version` @kind object;
  #L1b4f5a.  v3:= 0I;
  #L1b4f5c.  v0[v3]:= v2 @kind object;
  #L1b4f60.  v2:= 1I;
  #L1b4f62.  v0[v2]:= v1 @kind object;
  #L1b4f66.  v1:= "Cannot use %s to represent %s" @kind object;
  #L1b4f6a.  call `<init>`(v5, v1, v0) @signature `Lorg/simpleframework/xml/core/AttributeException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b4f70.  throw v5;
}
procedure `org.simpleframework.xml.core.Decorator` `getDecorator`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getDecorator:()Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4f84.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.b` @type ^`org.simpleframework.xml.core.Decorator` @kind object;
  #L1b4f88.  return v0 @kind object;
}
procedure `java.lang.Object` `getEmpty`(`org.simpleframework.xml.core.VersionLabel` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1b4e24.  call temp:= `getEmpty`(v0, v1) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @kind virtual;
  #L1b4e2a.  v1:= temp @kind object;
  #L1b4e2c.  return v1 @kind object;
}
procedure `java.lang.String` `getEmpty`(`org.simpleframework.xml.core.VersionLabel` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getEmpty:(Lorg/simpleframework/xml/core/Context;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L1b4e40.  v1:= 0I;
  #L1b4e42.  return v1 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getExpression`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4f9c.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.d` @type ^`org.simpleframework.xml.core.Expression` @kind object;
  #L1b4fa0.  if v0 != 0 then goto L1b4fb4;
  #L1b4fa4.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.c` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L1b4fa8.  call temp:= `getExpression`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L1b4fae.  v0:= temp @kind object;
  #L1b4fb0.  v1.`org.simpleframework.xml.core.VersionLabel.d` @type ^`org.simpleframework.xml.core.Expression` := v0 @kind object;
  #L1b4fb4.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.d` @type ^`org.simpleframework.xml.core.Expression` @kind object;
  #L1b4fb8.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.VersionLabel` v2 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b4e54.  v0:= v2.`org.simpleframework.xml.core.VersionLabel.f` @type ^`org.simpleframework.xml.stream.Format` @kind object;
  #L1b4e58.  call temp:= `getStyle`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L1b4e5e.  v0:= temp @kind object;
  #L1b4e60.  v1:= v2.`org.simpleframework.xml.core.VersionLabel.c` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L1b4e64.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/core/Introspector;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b4e6a.  v1:= temp @kind object;
  #L1b4e6c.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b4e72.  v0:= temp @kind object;
  #L1b4e74.  return v0 @kind object;
}
procedure `java.lang.String` `getOverride`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getOverride:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4e88.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.h` @type ^`java.lang.String` @kind object;
  #L1b4e8c.  return v0 @kind object;
}
procedure `java.lang.String` `getPath`(`org.simpleframework.xml.core.VersionLabel` v2 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b4ea0.  call temp:= `getExpression`(v2) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getExpression:()Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L1b4ea6.  v0:= temp @kind object;
  #L1b4ea8.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b4eae.  v1:= temp @kind object;
  #L1b4eb0.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/core/Expression;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b4eb6.  v0:= temp @kind object;
  #L1b4eb8.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4e0c.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.g` @type ^`java.lang.Class` @kind object;
  #L1b4e10.  return v0 @kind object;
}
procedure `boolean` `isAttribute`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4dcc.  v0:= 1I;
  #L1b4dce.  return v0;
}
procedure `boolean` `isData`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isData:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4de0.  v0:= 0I;
  #L1b4de2.  return v0;
}
procedure `boolean` `isRequired`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.isRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4df4.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.i` @type ^`boolean` @kind boolean;
  #L1b4df8.  return v0;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.VersionLabel` v1 @kind this) @signature `Lorg/simpleframework/xml/core/VersionLabel;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4ecc.  v0:= v1.`org.simpleframework.xml.core.VersionLabel.c` @type ^`org.simpleframework.xml.core.Introspector` @kind object;
  #L1b4ed0.  call temp:= `toString`(v0) @signature `Lorg/simpleframework/xml/core/Introspector;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b4ed6.  v0:= temp @kind object;
  #L1b4ed8.  return v0 @kind object;
}
