record `org.simpleframework.xml.core.CollectionFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CollectionFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1a1d9c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1a1da2.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.CollectionFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a1ba4.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L1a1ba8.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a1bae.  v2:= temp;
  #L1a1bb0.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a1bc4.  v0:= constclass @type ^`java.util.ArrayList` @kind object;
  #L1a1bc8.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a1bce.  v0:= temp;
  #L1a1bd0.  if v0 == 0 then goto L1a1bda;
  #L1a1bd4.  v4:= constclass @type ^`java.util.ArrayList` @kind object;
  #L1a1bd8.  return v4 @kind object;
  #L1a1bda.  v0:= constclass @type ^`java.util.HashSet` @kind object;
  #L1a1bde.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a1be4.  v0:= temp;
  #L1a1be6.  if v0 == 0 then goto L1a1bf0;
  #L1a1bea.  v4:= constclass @type ^`java.util.HashSet` @kind object;
  #L1a1bee.  return v4 @kind object;
  #L1a1bf0.  v0:= constclass @type ^`java.util.TreeSet` @kind object;
  #L1a1bf4.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a1bfa.  v0:= temp;
  #L1a1bfc.  if v0 == 0 then goto L1a1c06;
  #L1a1c00.  v4:= constclass @type ^`java.util.TreeSet` @kind object;
  #L1a1c04.  return v4 @kind object;
  #L1a1c06.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a1c0a.  v1:= 2I;
  #L1a1c0c.  v1:= new `java.lang.Object`[v1];
  #L1a1c10.  v2:= 0I;
  #L1a1c12.  v1[v2]:= v4 @kind object;
  #L1a1c16.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a1c1a.  v2:= 1I;
  #L1a1c1c.  v1[v2]:= v4 @kind object;
  #L1a1c20.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L1a1c24.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a1c2a.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a1c3c.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1a1c42.  v0:= temp @kind object;
  #L1a1c44.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1a1c4a.  v1:= temp;
  #L1a1c4c.  if v1 != 0 then goto L1a1c5a;
  #L1a1c50.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1a1c56.  v1:= temp @kind object;
  #L1a1c58.  goto L1a1c5c;
  #L1a1c5a.  v1:= v0 @kind object;
  #L1a1c5c.  call temp:= `b`(v4, v1) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1a1c62.  v2:= temp;
  #L1a1c64.  if v2 == 0 then goto L1a1c72;
  #L1a1c68.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L1a1c6e.  v0:= temp @kind object;
  #L1a1c70.  return v0 @kind object;
  #L1a1c72.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a1c76.  v2:= 2I;
  #L1a1c78.  v2:= new `java.lang.Object`[v2];
  #L1a1c7c.  v3:= 0I;
  #L1a1c7e.  v2[v3]:= v0 @kind object;
  #L1a1c82.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a1c86.  v3:= 1I;
  #L1a1c88.  v2[v3]:= v0 @kind object;
  #L1a1c8c.  v0:= "Invalid collection %s for %s" @kind object;
  #L1a1c90.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a1c96.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a1ca8.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a1cae.  v0:= temp @kind object;
  #L1a1cb0.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1a1cb6.  v1:= temp;
  #L1a1cb8.  if v1 != 0 then goto L1a1cc4;
  #L1a1cbc.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1a1cc2.  v0:= temp @kind object;
  #L1a1cc4.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1a1cca.  v1:= temp;
  #L1a1ccc.  if v1 == 0 then goto L1a1ce0;
  #L1a1cd0.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L1a1cd4.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a1cd8.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L1a1cde.  return v1 @kind object;
  #L1a1ce0.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a1ce4.  v1:= 2I;
  #L1a1ce6.  v1:= new `java.lang.Object`[v1];
  #L1a1cea.  v2:= 0I;
  #L1a1cec.  v1[v2]:= v0 @kind object;
  #L1a1cf0.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a1cf4.  v2:= 1I;
  #L1a1cf6.  v1[v2]:= v0 @kind object;
  #L1a1cfa.  v0:= "Invalid collection %s for %s" @kind object;
  #L1a1cfe.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a1d04.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a1d18.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1a1d1e.  v4:= temp @kind object;
  #L1a1d20.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1a1d26.  v0:= temp @kind object;
  #L1a1d28.  if v4 == 0 then goto L1a1d36;
  #L1a1d2c.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1a1d32.  v4:= temp @kind object;
  #L1a1d34.  return v4 @kind object;
  #L1a1d36.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1a1d3c.  v4:= temp;
  #L1a1d3e.  if v4 != 0 then goto L1a1d4a;
  #L1a1d42.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1a1d48.  v0:= temp @kind object;
  #L1a1d4a.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1a1d50.  v4:= temp;
  #L1a1d52.  if v4 == 0 then goto L1a1d64;
  #L1a1d56.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a1d5a.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L1a1d60.  v4:= temp @kind object;
  #L1a1d62.  return v4 @kind object;
  #L1a1d64.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a1d68.  v1:= 2I;
  #L1a1d6a.  v1:= new `java.lang.Object`[v1];
  #L1a1d6e.  v2:= 0I;
  #L1a1d70.  v1[v2]:= v0 @kind object;
  #L1a1d74.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a1d78.  v2:= 1I;
  #L1a1d7a.  v1[v2]:= v0 @kind object;
  #L1a1d7e.  v0:= "Invalid collection %s for %s" @kind object;
  #L1a1d82.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a1d88.  throw v4;
}
