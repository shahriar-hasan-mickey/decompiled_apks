record `org.simpleframework.xml.core.MapFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MapFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ab040.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1ab046.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.MapFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1aae5c.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L1aae60.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1aae66.  v2:= temp;
  #L1aae68.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1aae7c.  v0:= constclass @type ^`java.util.HashMap` @kind object;
  #L1aae80.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1aae86.  v0:= temp;
  #L1aae88.  if v0 == 0 then goto L1aae92;
  #L1aae8c.  v4:= constclass @type ^`java.util.HashMap` @kind object;
  #L1aae90.  return v4 @kind object;
  #L1aae92.  v0:= constclass @type ^`java.util.TreeMap` @kind object;
  #L1aae96.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1aae9c.  v0:= temp;
  #L1aae9e.  if v0 == 0 then goto L1aaea8;
  #L1aaea2.  v4:= constclass @type ^`java.util.TreeMap` @kind object;
  #L1aaea6.  return v4 @kind object;
  #L1aaea8.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1aaeac.  v1:= 2I;
  #L1aaeae.  v1:= new `java.lang.Object`[v1];
  #L1aaeb2.  v2:= 0I;
  #L1aaeb4.  v1[v2]:= v4 @kind object;
  #L1aaeb8.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aaebc.  v2:= 1I;
  #L1aaebe.  v1[v2]:= v4 @kind object;
  #L1aaec2.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L1aaec6.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aaecc.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.MapFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aaee0.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1aaee6.  v0:= temp @kind object;
  #L1aaee8.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1aaeee.  v1:= temp;
  #L1aaef0.  if v1 != 0 then goto L1aaefe;
  #L1aaef4.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1aaefa.  v1:= temp @kind object;
  #L1aaefc.  goto L1aaf00;
  #L1aaefe.  v1:= v0 @kind object;
  #L1aaf00.  call temp:= `b`(v4, v1) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1aaf06.  v2:= temp;
  #L1aaf08.  if v2 == 0 then goto L1aaf16;
  #L1aaf0c.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L1aaf12.  v0:= temp @kind object;
  #L1aaf14.  return v0 @kind object;
  #L1aaf16.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1aaf1a.  v2:= 2I;
  #L1aaf1c.  v2:= new `java.lang.Object`[v2];
  #L1aaf20.  v3:= 0I;
  #L1aaf22.  v2[v3]:= v0 @kind object;
  #L1aaf26.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aaf2a.  v3:= 1I;
  #L1aaf2c.  v2[v3]:= v0 @kind object;
  #L1aaf30.  v0:= "Invalid map %s for %s" @kind object;
  #L1aaf34.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aaf3a.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1aaf4c.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L1aaf52.  v0:= temp @kind object;
  #L1aaf54.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1aaf5a.  v1:= temp;
  #L1aaf5c.  if v1 != 0 then goto L1aaf68;
  #L1aaf60.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1aaf66.  v0:= temp @kind object;
  #L1aaf68.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1aaf6e.  v1:= temp;
  #L1aaf70.  if v1 == 0 then goto L1aaf84;
  #L1aaf74.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L1aaf78.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1aaf7c.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L1aaf82.  return v1 @kind object;
  #L1aaf84.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1aaf88.  v1:= 2I;
  #L1aaf8a.  v1:= new `java.lang.Object`[v1];
  #L1aaf8e.  v2:= 0I;
  #L1aaf90.  v1[v2]:= v0 @kind object;
  #L1aaf94.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aaf98.  v2:= 1I;
  #L1aaf9a.  v1[v2]:= v0 @kind object;
  #L1aaf9e.  v0:= "Invalid map %s for %s" @kind object;
  #L1aafa2.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aafa8.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1aafbc.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1aafc2.  v4:= temp @kind object;
  #L1aafc4.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1aafca.  v0:= temp @kind object;
  #L1aafcc.  if v4 == 0 then goto L1aafda;
  #L1aafd0.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1aafd6.  v4:= temp @kind object;
  #L1aafd8.  return v4 @kind object;
  #L1aafda.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1aafe0.  v4:= temp;
  #L1aafe2.  if v4 != 0 then goto L1aafee;
  #L1aafe6.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L1aafec.  v0:= temp @kind object;
  #L1aafee.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L1aaff4.  v4:= temp;
  #L1aaff6.  if v4 == 0 then goto L1ab008;
  #L1aaffa.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1aaffe.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L1ab004.  v4:= temp @kind object;
  #L1ab006.  return v4 @kind object;
  #L1ab008.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1ab00c.  v1:= 2I;
  #L1ab00e.  v1:= new `java.lang.Object`[v1];
  #L1ab012.  v2:= 0I;
  #L1ab014.  v1[v2]:= v0 @kind object;
  #L1ab018.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ab01c.  v2:= 1I;
  #L1ab01e.  v1[v2]:= v0 @kind object;
  #L1ab022.  v0:= "Invalid map %s for %s" @kind object;
  #L1ab026.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab02c.  throw v4;
}
