record `org.simpleframework.xml.core.ObjectFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.ObjectFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/ObjectFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ac8bc.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L1ac8c2.  return @kind void;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.ObjectFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/ObjectFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ac848.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1ac84e.  v4:= temp @kind object;
  #L1ac850.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1ac856.  v0:= temp @kind object;
  #L1ac858.  if v4 != 0 then goto L1ac89c;
  #L1ac85c.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1ac862.  v4:= temp;
  #L1ac864.  if v4 == 0 then goto L1ac876;
  #L1ac868.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1ac86c.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L1ac872.  v4:= temp @kind object;
  #L1ac874.  return v4 @kind object;
  #L1ac876.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1ac87a.  v1:= 2I;
  #L1ac87c.  v1:= new `java.lang.Object`[v1];
  #L1ac880.  v2:= 0I;
  #L1ac882.  v1[v2]:= v0 @kind object;
  #L1ac886.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ac88a.  v2:= 1I;
  #L1ac88c.  v1[v2]:= v0 @kind object;
  #L1ac890.  v0:= "Cannot instantiate %s for %s" @kind object;
  #L1ac894.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ac89a.  throw v4;
  #L1ac89c.  v0:= new `org.simpleframework.xml.core.ObjectInstance`;
  #L1ac8a0.  v1:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1ac8a4.  call `<init>`(v0, v1, v4) @signature `Lorg/simpleframework/xml/core/ObjectInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;)V` @kind direct;
  #L1ac8aa.  return v0 @kind object;
}
