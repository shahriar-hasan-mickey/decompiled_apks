record `org.simpleframework.xml.core.PrimitiveKey` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.PrimitiveKey.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.PrimitiveKey.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveKey.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PrimitiveKey.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.PrimitiveKey.e` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveKey.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1af4bc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af4c2.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L1af4c6.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af4cc.  v1.`org.simpleframework.xml.core.PrimitiveKey.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L1af4d0.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L1af4d4.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af4da.  v1.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L1af4de.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L1af4e4.  v0:= temp @kind object;
  #L1af4e6.  v1.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L1af4ea.  v1.`org.simpleframework.xml.core.PrimitiveKey.b` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L1af4ee.  v1.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L1af4f2.  v1.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L1af4f6.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af2a0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1af2a4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af2a8.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1af2ae.  v3:= temp;
  #L1af2b0.  return v3;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1af444.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af448.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af44e.  v3:= temp @kind object;
  #L1af450.  call temp:= `getAttribute`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttribute:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af456.  v2:= temp @kind object;
  #L1af458.  if v2 != 0 then goto L1af460;
  #L1af45c.  v2:= 0I;
  #L1af45e.  return v2 @kind object;
  #L1af460.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af464.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af46a.  v2:= temp @kind object;
  #L1af46c.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1af480.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af484.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af48a.  v3:= temp @kind object;
  #L1af48c.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af492.  v2:= temp @kind object;
  #L1af494.  if v2 != 0 then goto L1af49c;
  #L1af498.  v2:= 0I;
  #L1af49a.  return v2 @kind object;
  #L1af49c.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af4a0.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af4a6.  v2:= temp @kind object;
  #L1af4a8.  return v2 @kind object;
}
procedure `boolean` `d`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1af320.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af324.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af32a.  v3:= temp @kind object;
  #L1af32c.  call temp:= `getAttribute`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttribute:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af332.  v2:= temp @kind object;
  #L1af334.  if v2 != 0 then goto L1af33c;
  #L1af338.  v2:= 1I;
  #L1af33a.  return v2;
  #L1af33c.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af340.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1af346.  v2:= temp;
  #L1af348.  return v2;
}
procedure `boolean` `e`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.e:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1af35c.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af360.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af366.  v3:= temp @kind object;
  #L1af368.  call temp:= `getNext`(v2, v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af36e.  v2:= temp @kind object;
  #L1af370.  if v2 != 0 then goto L1af378;
  #L1af374.  v2:= 1I;
  #L1af376.  return v2;
  #L1af378.  v3:= v1.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af37c.  call temp:= `validate`(v3, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1af382.  v2:= temp;
  #L1af384.  return v2;
}
procedure `void` `f`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af53c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af540.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af546.  v0:= temp @kind object;
  #L1af548.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L1af54c.  call temp:= `getText`(v1, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getText:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L1af552.  v4:= temp @kind object;
  #L1af554.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af558.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L1af55e.  v1:= temp @kind object;
  #L1af560.  if v1 != 0 then goto L1af570;
  #L1af564.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1af568.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1af56e.  v1:= temp @kind object;
  #L1af570.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af574.  call temp:= `getAttribute`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af57a.  v0:= temp @kind object;
  #L1af57c.  if v4 == 0 then goto L1af586;
  #L1af580.  call temp:= `setAttribute`(v3, v0, v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setAttribute:(Ljava/lang/String;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1af586.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.g:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af598.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af59c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af5a2.  v0:= temp @kind object;
  #L1af5a4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af5a8.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L1af5ae.  v1:= temp @kind object;
  #L1af5b0.  if v1 != 0 then goto L1af5c0;
  #L1af5b4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1af5b8.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1af5be.  v1:= temp @kind object;
  #L1af5c0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.d` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1af5c4.  call temp:= `getElement`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1af5ca.  v0:= temp @kind object;
  #L1af5cc.  call temp:= `getChild`(v3, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1af5d2.  v3:= temp @kind object;
  #L1af5d4.  if v4 == 0 then goto L1af5ee;
  #L1af5d8.  call temp:= `a`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L1af5de.  v0:= temp;
  #L1af5e0.  if v0 != 0 then goto L1af5ee;
  #L1af5e4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.c` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af5e8.  call `write`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1af5ee.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af398.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af39c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af3a2.  v0:= temp @kind object;
  #L1af3a4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af3a8.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L1af3ae.  v1:= temp @kind object;
  #L1af3b0.  if v1 != 0 then goto L1af3c0;
  #L1af3b4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1af3b8.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1af3be.  v1:= temp @kind object;
  #L1af3c0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af3c4.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L1af3ca.  v0:= temp;
  #L1af3cc.  if v0 != 0 then goto L1af3da;
  #L1af3d0.  call temp:= `c`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L1af3d6.  v3:= temp @kind object;
  #L1af3d8.  return v3 @kind object;
  #L1af3da.  call temp:= `b`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L1af3e0.  v3:= temp @kind object;
  #L1af3e2.  return v3 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af3f4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af3f8.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af3fe.  v0:= temp @kind object;
  #L1af400.  if v4 != 0 then goto L1af40e;
  #L1af404.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af40a.  v3:= temp @kind object;
  #L1af40c.  return v3 @kind object;
  #L1af40e.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1af412.  v4:= 2I;
  #L1af414.  v4:= new `java.lang.Object`[v4];
  #L1af418.  v1:= 0I;
  #L1af41a.  v4[v1]:= v0 @kind object;
  #L1af41e.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af422.  v1:= 1I;
  #L1af424.  v4[v1]:= v0 @kind object;
  #L1af428.  v0:= "Can not read key of %s for %s" @kind object;
  #L1af42c.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1af432.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af2c4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.f` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af2c8.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af2ce.  v0:= temp @kind object;
  #L1af2d0.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af2d4.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L1af2da.  v1:= temp @kind object;
  #L1af2dc.  if v1 != 0 then goto L1af2ec;
  #L1af2e0.  v1:= v2.`org.simpleframework.xml.core.PrimitiveKey.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1af2e4.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1af2ea.  v1:= temp @kind object;
  #L1af2ec.  v0:= v2.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af2f0.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L1af2f6.  v0:= temp;
  #L1af2f8.  if v0 != 0 then goto L1af306;
  #L1af2fc.  call temp:= `e`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.e:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L1af302.  v3:= temp;
  #L1af304.  return v3;
  #L1af306.  call temp:= `d`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L1af30c.  v3:= temp;
  #L1af30e.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveKey` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af508.  v0:= v1.`org.simpleframework.xml.core.PrimitiveKey.e` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L1af50c.  call temp:= `isAttribute`(v0) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L1af512.  v0:= temp;
  #L1af514.  if v0 != 0 then goto L1af520;
  #L1af518.  call `g`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.g:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind direct;
  #L1af51e.  goto L1af52a;
  #L1af520.  if v3 == 0 then goto L1af52a;
  #L1af524.  call `f`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveKey;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind direct;
  #L1af52a.  return @kind void;
}
