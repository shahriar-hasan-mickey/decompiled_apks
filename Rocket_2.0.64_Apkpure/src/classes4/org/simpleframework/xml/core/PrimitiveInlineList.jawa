record `org.simpleframework.xml.core.PrimitiveInlineList` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Repeater` @kind interface {
  `org.simpleframework.xml.core.CollectionFactory` `org.simpleframework.xml.core.PrimitiveInlineList.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveInlineList.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveInlineList.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveInlineList.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveInlineList` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1af1c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af1ce.  v0:= new `org.simpleframework.xml.core.CollectionFactory`;
  #L1af1d2.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af1d8.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` := v0 @kind object;
  #L1af1dc.  v3:= new `org.simpleframework.xml.core.Primitive`;
  #L1af1e0.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af1e6.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.b` @type ^`org.simpleframework.xml.core.Primitive` := v3 @kind object;
  #L1af1ea.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.c` @type ^`java.lang.String` := v5 @kind object;
  #L1af1ee.  v1.`org.simpleframework.xml.core.PrimitiveInlineList.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L1af1f2.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveInlineList` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af0b4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveInlineList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af0b8.  v1:= v2.`org.simpleframework.xml.core.PrimitiveInlineList.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af0bc.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1af0c2.  v3:= temp;
  #L1af0c4.  return v3;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1af180.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getParent:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af186.  v0:= temp @kind object;
  #L1af188.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1af18e.  v1:= temp @kind object;
  #L1af190.  if v4 == 0 then goto L1af1b4;
  #L1af194.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af198.  call temp:= `read`(v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af19e.  v4:= temp @kind object;
  #L1af1a0.  if v4 == 0 then goto L1af1aa;
  #L1af1a4.  call temp:= `add`(v5, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1af1aa.  call temp:= `getNext`(v0, v1) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af1b0.  v4:= temp @kind object;
  #L1af1b2.  goto L1af190;
  #L1af1b4.  return v5 @kind object;
}
procedure `void` `c`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object, `org.simpleframework.xml.stream.Mode` v6 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Lorg/simpleframework/xml/stream/Mode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1af240.  v5:= (`java.util.Collection`) v5 @kind object;
  #L1af244.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1af24a.  v5:= temp @kind object;
  #L1af24c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1af252.  v0:= temp;
  #L1af254.  if v0 == 0 then goto L1af28e;
  #L1af258.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1af25e.  v0:= temp @kind object;
  #L1af260.  if v0 == 0 then goto L1af24c;
  #L1af264.  v1:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.c` @type ^`java.lang.String` @kind object;
  #L1af268.  call temp:= `getChild`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1af26e.  v1:= temp @kind object;
  #L1af270.  call temp:= `a`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L1af276.  v2:= temp;
  #L1af278.  if v2 != 0 then goto L1af24c;
  #L1af27c.  call `setMode`(v1, v6) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setMode:(Lorg/simpleframework/xml/stream/Mode;)V` @kind interface;
  #L1af282.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af286.  call `write`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1af28c.  goto L1af24c;
  #L1af28e.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveInlineList` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af120.  v0:= v1.`org.simpleframework.xml.core.PrimitiveInlineList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af124.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:()Ljava/lang/Object;` @kind virtual;
  #L1af12a.  v0:= temp @kind object;
  #L1af12c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L1af130.  if v0 == 0 then goto L1af13e;
  #L1af134.  call temp:= `b`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @kind direct;
  #L1af13a.  v2:= temp @kind object;
  #L1af13c.  return v2 @kind object;
  #L1af13e.  v2:= 0I;
  #L1af140.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveInlineList` v0 @kind this, `org.simpleframework.xml.stream.InputNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1af154.  v2:= (`java.util.Collection`) v2 @kind object;
  #L1af158.  if v2 == 0 then goto L1af166;
  #L1af15c.  call temp:= `b`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/util/Collection;)Ljava/lang/Object;` @kind direct;
  #L1af162.  v1:= temp @kind object;
  #L1af164.  return v1 @kind object;
  #L1af166.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af16c.  v1:= temp @kind object;
  #L1af16e.  return v1 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1af0d8.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getParent:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af0de.  v0:= temp @kind object;
  #L1af0e0.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1af0e6.  v1:= temp @kind object;
  #L1af0e8.  if v4 == 0 then goto L1af10a;
  #L1af0ec.  v2:= v3.`org.simpleframework.xml.core.PrimitiveInlineList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af0f0.  call temp:= `validate`(v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1af0f6.  v4:= temp;
  #L1af0f8.  if v4 != 0 then goto L1af100;
  #L1af0fc.  v4:= 0I;
  #L1af0fe.  return v4;
  #L1af100.  call temp:= `getNext`(v0, v1) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af106.  v4:= temp @kind object;
  #L1af108.  goto L1af0e8;
  #L1af10a.  v4:= 1I;
  #L1af10c.  return v4;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveInlineList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1af204.  call temp:= `getParent`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getParent:()Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1af20a.  v0:= temp @kind object;
  #L1af20c.  call temp:= `getMode`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L1af212.  v1:= temp @kind object;
  #L1af214.  call temp:= `isCommitted`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.isCommitted:()Z` @kind interface;
  #L1af21a.  v2:= temp;
  #L1af21c.  if v2 != 0 then goto L1af226;
  #L1af220.  call `remove`(v4) @signature `Lorg/simpleframework/xml/stream/OutputNode;.remove:()V` @kind interface;
  #L1af226.  call `c`(v3, v0, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveInlineList;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Lorg/simpleframework/xml/stream/Mode;)V` @kind direct;
  #L1af22c.  return @kind void;
}
