record `org.simpleframework.xml.core.Factory` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Factory.context` @AccessFlag PUBLIC;
  `java.lang.Class` `org.simpleframework.xml.core.Factory.override` @AccessFlag PUBLIC;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.Factory.support` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Factory.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a8880.  v0:= 0I;
  #L1a8882.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L1a8888.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a889c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a88a2.  call temp:= `getSupport`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getSupport:()Lorg/simpleframework/xml/core/Support;` @kind interface;
  #L1a88a8.  v0:= temp @kind object;
  #L1a88aa.  v1.`org.simpleframework.xml.core.Factory.support` @type ^`org.simpleframework.xml.core.Support` := v0 @kind object;
  #L1a88ae.  v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` := v4 @kind object;
  #L1a88b2.  v1.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L1a88b6.  v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L1a88ba.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Type` `a`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.a:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a878c.  call temp:= `getPrimitive`(v3) @signature `Lorg/simpleframework/xml/core/Support;.getPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L1a8792.  v0:= temp @kind object;
  #L1a8794.  if v0 == v3 then goto L1a87a4;
  #L1a8798.  v3:= new `org.simpleframework.xml.core.OverrideType`;
  #L1a879c.  call `<init>`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/OverrideType;.<init>:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L1a87a2.  return v3 @kind object;
  #L1a87a4.  return v2 @kind object;
}
procedure `boolean` `isCompatible`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1a8674.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1a867a.  v0:= temp;
  #L1a867c.  if v0 == 0 then goto L1a8688;
  #L1a8680.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1a8686.  v1:= temp @kind object;
  #L1a8688.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a868e.  v1:= temp;
  #L1a8690.  return v1;
}
procedure `boolean` `isInstantiable`(`java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1a86a4.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L1a86aa.  v1:= temp;
  #L1a86ac.  call temp:= `isAbstract`(v1) @signature `Ljava/lang/reflect/Modifier;.isAbstract:(I)Z` @kind static;
  #L1a86b2.  v0:= temp;
  #L1a86b4.  if v0 == 0 then goto L1a86bc;
  #L1a86b8.  v1:= 0I;
  #L1a86ba.  return v1;
  #L1a86bc.  call temp:= `isInterface`(v1) @signature `Ljava/lang/reflect/Modifier;.isInterface:(I)Z` @kind static;
  #L1a86c2.  v1:= temp;
  #L1a86c4.  v1:= v1 ^~ 1;
  #L1a86c8.  return v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getConversion`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a87b8.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a87bc.  v1:= v2.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a87c0.  call temp:= `getOverride`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Context;.getOverride:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L1a87c6.  v3:= temp @kind object;
  #L1a87c8.  if v3 == 0 then goto L1a87fc;
  #L1a87cc.  v0:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L1a87d0.  if v0 == 0 then goto L1a87fc;
  #L1a87d4.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a87da.  v0:= temp @kind object;
  #L1a87dc.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L1a87e0.  call temp:= `isCompatible`(v1, v0) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L1a87e6.  v0:= temp;
  #L1a87e8.  if v0 != 0 then goto L1a87fc;
  #L1a87ec.  v0:= new `org.simpleframework.xml.core.OverrideValue`;
  #L1a87f0.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L1a87f4.  call `<init>`(v0, v3, v1) @signature `Lorg/simpleframework/xml/core/OverrideValue;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L1a87fa.  return v0 @kind object;
  #L1a87fc.  return v3 @kind object;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.Factory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8740.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1a8746.  v0:= temp @kind object;
  #L1a8748.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L1a874e.  v1:= temp;
  #L1a8750.  if v1 == 0 then goto L1a875e;
  #L1a8754.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L1a875a.  v0:= temp @kind object;
  #L1a875c.  return v0 @kind object;
  #L1a875e.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a8762.  v2:= 1I;
  #L1a8764.  v2:= new `java.lang.Object`[v2];
  #L1a8768.  v3:= 0I;
  #L1a876a.  v2[v3]:= v0 @kind object;
  #L1a876e.  v0:= "Type %s can not be instantiated" @kind object;
  #L1a8772.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a8778.  throw v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getOverride`(`org.simpleframework.xml.core.Factory` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8810.  call temp:= `getConversion`(v4, v5) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1a8816.  v0:= temp @kind object;
  #L1a8818.  if v0 == 0 then goto L1a886e;
  #L1a881c.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L1a8822.  v5:= temp @kind object;
  #L1a8824.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a882a.  v1:= temp @kind object;
  #L1a882c.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1a8832.  v2:= temp @kind object;
  #L1a8834.  call temp:= `isCompatible`(v2, v1) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L1a883a.  v2:= temp;
  #L1a883c.  if v2 == 0 then goto L1a8842;
  #L1a8840.  goto L1a886e;
  #L1a8842.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a8846.  v2:= 3I;
  #L1a8848.  v2:= new `java.lang.Object`[v2];
  #L1a884c.  v3:= 0I;
  #L1a884e.  v2[v3]:= v1 @kind object;
  #L1a8852.  v1:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a8856.  v3:= 1I;
  #L1a8858.  v2[v3]:= v1 @kind object;
  #L1a885c.  v1:= 2I;
  #L1a885e.  v2[v1]:= v5 @kind object;
  #L1a8862.  v5:= "Incompatible %s for %s at %s" @kind object;
  #L1a8866.  call `<init>`(v0, v5, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a886c.  throw v0;
  #L1a886e.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.Factory` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8718.  v0:= v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L1a871c.  if v0 == 0 then goto L1a8722;
  #L1a8720.  return v0 @kind object;
  #L1a8722.  v0:= v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a8726.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a872c.  v0:= temp @kind object;
  #L1a872e.  return v0 @kind object;
}
procedure `boolean` `setOverride`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Object` v4 @kind object, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a86dc.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a86e2.  v0:= temp @kind object;
  #L1a86e4.  call temp:= `isPrimitive`(v0) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1a86ea.  v1:= temp;
  #L1a86ec.  if v1 == 0 then goto L1a86f8;
  #L1a86f0.  call temp:= `a`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.a:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L1a86f6.  v3:= temp @kind object;
  #L1a86f8.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a86fc.  call temp:= `setOverride`(v0, v3, v4, v5) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L1a8702.  v3:= temp;
  #L1a8704.  return v3;
}
