record `org.simpleframework.xml.core.TemplateEngine` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.filter.Filter` `org.simpleframework.xml.core.TemplateEngine.d` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.core.TemplateEngine.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `org.simpleframework.xml.filter.Filter` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.<init>:(Lorg/simpleframework/xml/filter/Filter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b2dd0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b2dd6.  v0:= new `org.simpleframework.xml.core.Template`;
  #L1b2dda.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L1b2de0.  v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L1b2de4.  v0:= new `org.simpleframework.xml.core.Template`;
  #L1b2de8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L1b2dee.  v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L1b2df2.  v0:= new `org.simpleframework.xml.core.Template`;
  #L1b2df6.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L1b2dfc.  v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L1b2e00.  v1.`org.simpleframework.xml.core.TemplateEngine.d` @type ^`org.simpleframework.xml.filter.Filter` := v2 @kind object;
  #L1b2e04.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.TemplateEngine` v3 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b2e50.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int`;
  #L1b2e54.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e58.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b2e5c.  if v0 >= v2 then goto L1b2e8c;
  #L1b2e60.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b2e64.  v2:= v0 + 1;
  #L1b2e68.  v3.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L1b2e6c.  v0:= v1[v0] @kind char;
  #L1b2e70.  v1:= 125I;
  #L1b2e74.  if v0 != v1 then goto L1b2e80;
  #L1b2e78.  call `c`(v3) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.c:()V` @kind direct;
  #L1b2e7e.  goto L1b2e8c;
  #L1b2e80.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e84.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L1b2e8a.  goto L1b2e50;
  #L1b2e8c.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e90.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L1b2e96.  v0:= temp;
  #L1b2e98.  if v0 <= 0 then goto L1b2eb8;
  #L1b2e9c.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2ea0.  v1:= "${" @kind object;
  #L1b2ea4.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2eaa.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2eae.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2eb2.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @kind virtual;
  #L1b2eb8.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.TemplateEngine` v5 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2ecc.  v0:= v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int`;
  #L1b2ed0.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2ed4.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b2ed8.  if v0 >= v2 then goto L1b2f28;
  #L1b2edc.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b2ee0.  v3:= v0 + 1;
  #L1b2ee4.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v3;
  #L1b2ee8.  v0:= v1[v0] @kind char;
  #L1b2eec.  v4:= 36I;
  #L1b2ef0.  if v0 != v4 then goto L1b2f1c;
  #L1b2ef4.  if v3 >= v2 then goto L1b2f1c;
  #L1b2ef8.  v2:= v3 + 1;
  #L1b2efc.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L1b2f00.  v1:= v1[v3] @kind char;
  #L1b2f04.  v3:= 123I;
  #L1b2f08.  if v1 != v3 then goto L1b2f14;
  #L1b2f0c.  call `a`(v5) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.a:()V` @kind direct;
  #L1b2f12.  goto L1b2ecc;
  #L1b2f14.  v2:= v2 + -1;
  #L1b2f18.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L1b2f1c.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f20.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L1b2f26.  goto L1b2ecc;
  #L1b2f28.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b2f3c.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f40.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L1b2f46.  v0:= temp;
  #L1b2f48.  if v0 <= 0 then goto L1b2f56;
  #L1b2f4c.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f50.  call `e`(v1, v0) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.e:(Lorg/simpleframework/xml/core/Template;)V` @kind direct;
  #L1b2f56.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f5a.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L1b2f60.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.TemplateEngine` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b2f74.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.d` @type ^`org.simpleframework.xml.filter.Filter` @kind object;
  #L1b2f78.  call temp:= `replace`(v0, v3) @signature `Lorg/simpleframework/xml/filter/Filter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b2f7e.  v0:= temp @kind object;
  #L1b2f80.  if v0 != 0 then goto L1b2fac;
  #L1b2f84.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f88.  v1:= "${" @kind object;
  #L1b2f8c.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2f92.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2f96.  call `append`(v0, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2f9c.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2fa0.  v0:= "}" @kind object;
  #L1b2fa4.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2faa.  goto L1b2fb6;
  #L1b2fac.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2fb0.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2fb6.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.core.TemplateEngine` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.e:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PRIVATE {
    temp;

  #L1b2fc8.  call temp:= `toString`(v1) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2fce.  v1:= temp @kind object;
  #L1b2fd0.  call `d`(v0, v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.d:(Ljava/lang/String;)V` @kind direct;
  #L1b2fd6.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2e18.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e1c.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L1b2e22.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e26.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L1b2e2c.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2e30.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L1b2e36.  v0:= 0I;
  #L1b2e38.  v1.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v0;
  #L1b2e3c.  return @kind void;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.process:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2d74.  v0:= 36I;
  #L1b2d78.  call temp:= `indexOf`(v2, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1b2d7e.  v0:= temp;
  #L1b2d80.  if v0 >= 0 then goto L1b2d86;
  #L1b2d84.  return v2 @kind object;
  #L1b2d86.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2d8a.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b2d90.  call `b`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.b:()V` @kind direct;
  #L1b2d96.  v2:= v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L1b2d9a.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2da0.  v2:= temp @kind object;
  #L1b2da2.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L1b2da8.  return v2 @kind object;
  #L1b2daa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b2dac.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L1b2db2.  throw v2;
  catch `java.lang.Throwable` @[L1b2d86..L1b2da2] goto L1b2daa;
}
