record `org.simpleframework.xml.core.ArrayFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.ArrayFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1a0764.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1a076a.  return @kind void;
}
procedure `java.lang.Class` `b`(`org.simpleframework.xml.core.ArrayFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.b:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a062c.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1a0632.  v0:= temp @kind object;
  #L1a0634.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1a063a.  v1:= temp;
  #L1a063c.  if v1 == 0 then goto L1a064a;
  #L1a0640.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1a0646.  v0:= temp @kind object;
  #L1a0648.  return v0 @kind object;
  #L1a064a.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a064e.  v2:= 2I;
  #L1a0650.  v2:= new `java.lang.Object`[v2];
  #L1a0654.  v3:= 0I;
  #L1a0656.  v2[v3]:= v0 @kind object;
  #L1a065a.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a065e.  v3:= 1I;
  #L1a0660.  v2[v3]:= v0 @kind object;
  #L1a0664.  v0:= "The %s not an array for %s" @kind object;
  #L1a0668.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a066e.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `c`(`org.simpleframework.xml.core.ArrayFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.c:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a06ac.  call temp:= `b`(v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.b:()Ljava/lang/Class;` @kind direct;
  #L1a06b2.  v0:= temp @kind object;
  #L1a06b4.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a06ba.  v1:= temp;
  #L1a06bc.  if v1 == 0 then goto L1a06cc;
  #L1a06c0.  v5:= new `org.simpleframework.xml.core.ArrayInstance`;
  #L1a06c4.  call `<init>`(v5, v4) @signature `Lorg/simpleframework/xml/core/ArrayInstance;.<init>:(Lorg/simpleframework/xml/strategy/Value;)V` @kind direct;
  #L1a06ca.  return v5 @kind object;
  #L1a06cc.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L1a06d0.  v1:= 3I;
  #L1a06d2.  v1:= new `java.lang.Object`[v1];
  #L1a06d6.  v2:= 0I;
  #L1a06d8.  v1[v2]:= v0 @kind object;
  #L1a06dc.  v0:= 1I;
  #L1a06de.  v1[v0]:= v5 @kind object;
  #L1a06e2.  v5:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a06e6.  v0:= 2I;
  #L1a06e8.  v1[v0]:= v5 @kind object;
  #L1a06ec.  v5:= "Array of type %s cannot hold %s for %s" @kind object;
  #L1a06f0.  call `<init>`(v4, v5, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a06f6.  throw v4;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.ArrayFactory` v2 @kind this) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a0680.  call temp:= `b`(v2) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.b:()Ljava/lang/Class;` @kind direct;
  #L1a0686.  v0:= temp @kind object;
  #L1a0688.  if v0 == 0 then goto L1a0698;
  #L1a068c.  v1:= 0I;
  #L1a068e.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1a0694.  v0:= temp @kind object;
  #L1a0696.  return v0 @kind object;
  #L1a0698.  v0:= 0I;
  #L1a069a.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.ArrayFactory` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a0708.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L1a070e.  v0:= temp @kind object;
  #L1a0710.  call temp:= `getOverride`(v4, v5) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1a0716.  v5:= temp @kind object;
  #L1a0718.  if v5 == 0 then goto L1a072e;
  #L1a071c.  call temp:= `getType`(v5) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L1a0722.  v0:= temp @kind object;
  #L1a0724.  call temp:= `c`(v4, v5, v0) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.c:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind direct;
  #L1a072a.  v5:= temp @kind object;
  #L1a072c.  return v5 @kind object;
  #L1a072e.  v5:= new `org.simpleframework.xml.core.ElementException`;
  #L1a0732.  v1:= 2I;
  #L1a0734.  v1:= new `java.lang.Object`[v1];
  #L1a0738.  v2:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1a073c.  v3:= 0I;
  #L1a073e.  v1[v3]:= v2 @kind object;
  #L1a0742.  v2:= 1I;
  #L1a0744.  v1[v2]:= v0 @kind object;
  #L1a0748.  v0:= "Array length required for %s at %s" @kind object;
  #L1a074c.  call `<init>`(v5, v0, v1) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1a0752.  throw v5;
}
