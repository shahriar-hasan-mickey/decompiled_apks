record `org.simpleframework.xml.core.MethodScanner` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.ContactList` @kind class {
  `org.simpleframework.xml.core.MethodPartFactory` `org.simpleframework.xml.core.MethodScanner.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.MethodScanner.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Detail` `org.simpleframework.xml.core.MethodScanner.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.core.Support` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ab844.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/core/ContactList;.<init>:()V` @kind direct;
  #L1ab84a.  v0:= new `org.simpleframework.xml.core.MethodPartFactory`;
  #L1ab84e.  call `<init>`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @kind direct;
  #L1ab854.  v2.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` := v0 @kind object;
  #L1ab858.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L1ab85c.  v1:= 0I;
  #L1ab85e.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L1ab864.  v2.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L1ab868.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L1ab86c.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L1ab872.  v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L1ab876.  v2.`org.simpleframework.xml.core.MethodScanner.b` @type ^`org.simpleframework.xml.core.Support` := v4 @kind object;
  #L1ab87a.  v2.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` := v3 @kind object;
  #L1ab87e.  call `q`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.q:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L1ab884.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ab898.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1ab89c.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1ab8a2.  v0:= temp @kind object;
  #L1ab8a4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ab8aa.  v1:= temp;
  #L1ab8ac.  if v1 == 0 then goto L1ab8d8;
  #L1ab8b0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1ab8b6.  v1:= temp @kind object;
  #L1ab8b8.  v1:= (`java.lang.String`) v1 @kind object;
  #L1ab8bc.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1ab8c0.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1ab8c6.  v2:= temp @kind object;
  #L1ab8c8.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L1ab8cc.  if v2 == 0 then goto L1ab8a4;
  #L1ab8d0.  call `c`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.c:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L1ab8d6.  goto L1ab8a4;
  #L1ab8d8.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.b:(Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab8ec.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L1ab8f0.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L1ab8f6.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ab8fc.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.c:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab910.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1ab914.  call temp:= `take`(v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1ab91a.  v3:= temp @kind object;
  #L1ab91c.  if v3 == 0 then goto L1ab928;
  #L1ab920.  call `d`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.d:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L1ab926.  goto L1ab92e;
  #L1ab928.  call `b`(v1, v2) @signature `Lorg/simpleframework/xml/core/MethodScanner;.b:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L1ab92e.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.MethodScanner` v6 @kind this, `org.simpleframework.xml.core.MethodPart` v7 @kind object, `org.simpleframework.xml.core.MethodPart` v8 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.d:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ab940.  call temp:= `getAnnotation`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L1ab946.  v0:= temp @kind object;
  #L1ab948.  call temp:= `getName`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L1ab94e.  v1:= temp @kind object;
  #L1ab950.  call temp:= `getAnnotation`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L1ab956.  v2:= temp @kind object;
  #L1ab958.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ab95e.  v0:= temp;
  #L1ab960.  v2:= 1I;
  #L1ab962.  v3:= 0I;
  #L1ab964.  v4:= 2I;
  #L1ab966.  if v0 == 0 then goto L1ab9ac;
  #L1ab96a.  call temp:= `getType`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L1ab970.  v0:= temp @kind object;
  #L1ab972.  call temp:= `getType`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L1ab978.  v5:= temp @kind object;
  #L1ab97a.  if v0 != v5 then goto L1ab990;
  #L1ab97e.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L1ab982.  call `<init>`(v0, v7, v8) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L1ab988.  call temp:= `add`(v6, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ab98e.  return @kind void;
  #L1ab990.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab994.  v8:= new `java.lang.Object`[v4];
  #L1ab998.  v8[v3]:= v1 @kind object;
  #L1ab99c.  v8[v2]:= v0 @kind object;
  #L1ab9a0.  v0:= "Method types do not match for %s in %s" @kind object;
  #L1ab9a4.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab9aa.  throw v7;
  #L1ab9ac.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L1ab9b0.  v8:= new `java.lang.Object`[v4];
  #L1ab9b4.  v8[v3]:= v1 @kind object;
  #L1ab9b8.  v0:= v6.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1ab9bc.  v8[v2]:= v0 @kind object;
  #L1ab9c0.  v0:= "Annotations do not match for '%s' in %s" @kind object;
  #L1ab9c4.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ab9ca.  throw v7;
}
procedure `void` `e`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.DefaultType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.e:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ab9dc.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.b` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1ab9e0.  call temp:= `getMethods`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/Support;.getMethods:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)Lorg/simpleframework/xml/core/ContactList;` @kind virtual;
  #L1ab9e6.  v2:= temp @kind object;
  #L1ab9e8.  call temp:= `iterator`(v2) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1ab9ee.  v2:= temp @kind object;
  #L1ab9f0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ab9f6.  v3:= temp;
  #L1ab9f8.  if v3 == 0 then goto L1aba14;
  #L1ab9fc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1aba02.  v3:= temp @kind object;
  #L1aba04.  v3:= (`org.simpleframework.xml.core.Contact`) v3 @kind object;
  #L1aba08.  v3:= (`org.simpleframework.xml.core.MethodContact`) v3 @kind object;
  #L1aba0c.  call `l`(v1, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.l:(Lorg/simpleframework/xml/core/MethodContact;)V` @kind direct;
  #L1aba12.  goto L1ab9f0;
  #L1aba14.  return @kind void;
}
procedure `void` `f`(`org.simpleframework.xml.core.MethodScanner` v5 @kind this, `org.simpleframework.xml.core.Detail` v6 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.f:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1aba28.  call temp:= `getMethods`(v6) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L1aba2e.  v6:= temp @kind object;
  #L1aba30.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1aba36.  v6:= temp @kind object;
  #L1aba38.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1aba3e.  v0:= temp;
  #L1aba40.  if v0 == 0 then goto L1aba78;
  #L1aba44.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1aba4a.  v0:= temp @kind object;
  #L1aba4c.  v0:= (`org.simpleframework.xml.core.MethodDetail`) v0 @kind object;
  #L1aba50.  call temp:= `getAnnotations`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1aba56.  v1:= temp @kind object;
  #L1aba58.  call temp:= `getMethod`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L1aba5e.  v0:= temp @kind object;
  #L1aba60.  v2:= length @variable v1;
  #L1aba62.  v3:= 0I;
  #L1aba64.  if v3 >= v2 then goto L1aba38;
  #L1aba68.  v4:= v1[v3] @kind object;
  #L1aba6c.  call `p`(v5, v0, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.p:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1aba72.  v3:= v3 + 1;
  #L1aba76.  goto L1aba64;
  #L1aba78.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.DefaultType` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.g:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1aba8c.  call temp:= `getMethods`(v3) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L1aba92.  v3:= temp @kind object;
  #L1aba94.  v0:= `@@org.simpleframework.xml.DefaultType.PROPERTY` @type ^`org.simpleframework.xml.DefaultType` @kind object;
  #L1aba98.  if v4 != v0 then goto L1abae4;
  #L1aba9c.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1abaa2.  v3:= temp @kind object;
  #L1abaa4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1abaaa.  v4:= temp;
  #L1abaac.  if v4 == 0 then goto L1abae4;
  #L1abab0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1abab6.  v4:= temp @kind object;
  #L1abab8.  v4:= (`org.simpleframework.xml.core.MethodDetail`) v4 @kind object;
  #L1ababc.  call temp:= `getAnnotations`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1abac2.  v0:= temp @kind object;
  #L1abac4.  call temp:= `getMethod`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L1abaca.  v4:= temp @kind object;
  #L1abacc.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L1abad0.  call temp:= `getType`(v1, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getType:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind virtual;
  #L1abad6.  v1:= temp @kind object;
  #L1abad8.  if v1 == 0 then goto L1abaa4;
  #L1abadc.  call `k`(v2, v4, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.k:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abae2.  goto L1abaa4;
  #L1abae4.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.MethodPart` v4 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v5 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1abaf8.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L1abafe.  v0:= temp @kind object;
  #L1abb00.  call temp:= `remove`(v5, v0) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1abb06.  v1:= temp @kind object;
  #L1abb08.  v1:= (`org.simpleframework.xml.core.MethodPart`) v1 @kind object;
  #L1abb0c.  if v1 == 0 then goto L1abb1e;
  #L1abb10.  call temp:= `i`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.i:(Lorg/simpleframework/xml/core/MethodPart;)Z` @kind direct;
  #L1abb16.  v2:= temp;
  #L1abb18.  if v2 == 0 then goto L1abb1e;
  #L1abb1c.  v4:= v1 @kind object;
  #L1abb1e.  call temp:= `put`(v5, v0, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1abb24.  return @kind void;
}
procedure `boolean` `i`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.i:(Lorg/simpleframework/xml/core/MethodPart;)Z` @AccessFlag PRIVATE {
    temp;

  #L1ab81c.  call temp:= `getAnnotation`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L1ab822.  v1:= temp @kind object;
  #L1ab824.  v1:= instanceof @variable v1 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L1ab828.  if v1 == 0 then goto L1ab830;
  #L1ab82c.  v1:= 1I;
  #L1ab82e.  return v1;
  #L1ab830.  v1:= 0I;
  #L1ab832.  return v1;
}
procedure `void` `j`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1abb38.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L1abb3c.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abb42.  v2:= temp @kind object;
  #L1abb44.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L1abb4a.  v3:= temp @kind object;
  #L1abb4c.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abb50.  if v3 != v4 then goto L1abb5e;
  #L1abb54.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abb58.  call `m`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abb5e.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abb62.  if v3 != v4 then goto L1abb70;
  #L1abb66.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abb6a.  call `m`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abb70.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abb74.  if v3 != v4 then goto L1abb82;
  #L1abb78.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abb7c.  call `m`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abb82.  return @kind void;
}
procedure `void` `k`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.k:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1abb94.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L1abb98.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abb9e.  v2:= temp @kind object;
  #L1abba0.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L1abba6.  v3:= temp @kind object;
  #L1abba8.  v0:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abbac.  if v3 != v0 then goto L1abbba;
  #L1abbb0.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abbb4.  call `m`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abbba.  v0:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abbbe.  if v3 != v0 then goto L1abbcc;
  #L1abbc2.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abbc6.  call `m`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abbcc.  v0:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abbd0.  if v3 != v0 then goto L1abbde;
  #L1abbd4.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abbd8.  call `m`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abbde.  return @kind void;
}
procedure `void` `l`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodContact` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.l:(Lorg/simpleframework/xml/core/MethodContact;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1abbf0.  call temp:= `getRead`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getRead:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abbf6.  v0:= temp @kind object;
  #L1abbf8.  call temp:= `getWrite`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getWrite:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abbfe.  v3:= temp @kind object;
  #L1abc00.  if v3 == 0 then goto L1abc0e;
  #L1abc04.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abc08.  call `h`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abc0e.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abc12.  call `h`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abc18.  return @kind void;
}
procedure `void` `m`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1abc2c.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L1abc32.  v0:= temp @kind object;
  #L1abc34.  if v0 == 0 then goto L1abc3e;
  #L1abc38.  call temp:= `put`(v3, v0, v2) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1abc3e.  return @kind void;
}
procedure `void` `n`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.n:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1abc50.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L1abc54.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abc5a.  v2:= temp @kind object;
  #L1abc5c.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L1abc62.  v3:= temp @kind object;
  #L1abc64.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abc68.  if v3 != v4 then goto L1abc76;
  #L1abc6c.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abc70.  call `o`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abc76.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abc7a.  if v3 != v4 then goto L1abc88;
  #L1abc7e.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abc82.  call `o`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abc88.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L1abc8c.  if v3 != v4 then goto L1abc9a;
  #L1abc90.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abc94.  call `o`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L1abc9a.  return @kind void;
}
procedure `void` `o`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;

  #L1abcac.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L1abcb2.  v1:= temp @kind object;
  #L1abcb4.  if v1 == 0 then goto L1abcbe;
  #L1abcb8.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1abcbe.  return @kind void;
}
procedure `void` `p`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.p:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1abcd0.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Attribute` @kind boolean;
  #L1abcd4.  if v0 == 0 then goto L1abcde;
  #L1abcd8.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abcde.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementUnion` @kind boolean;
  #L1abce2.  if v0 == 0 then goto L1abcec;
  #L1abce6.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abcec.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementListUnion` @kind boolean;
  #L1abcf0.  if v0 == 0 then goto L1abcfa;
  #L1abcf4.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abcfa.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMapUnion` @kind boolean;
  #L1abcfe.  if v0 == 0 then goto L1abd08;
  #L1abd02.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd08.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementList` @kind boolean;
  #L1abd0c.  if v0 == 0 then goto L1abd16;
  #L1abd10.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd16.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementArray` @kind boolean;
  #L1abd1a.  if v0 == 0 then goto L1abd24;
  #L1abd1e.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd24.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMap` @kind boolean;
  #L1abd28.  if v0 == 0 then goto L1abd32;
  #L1abd2c.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd32.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Element` @kind boolean;
  #L1abd36.  if v0 == 0 then goto L1abd40;
  #L1abd3a.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd40.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Version` @kind boolean;
  #L1abd44.  if v0 == 0 then goto L1abd4e;
  #L1abd48.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd4e.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L1abd52.  if v0 == 0 then goto L1abd5c;
  #L1abd56.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd5c.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Transient` @kind boolean;
  #L1abd60.  if v0 == 0 then goto L1abd6a;
  #L1abd64.  call `n`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.n:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L1abd6a.  return @kind void;
}
procedure `void` `q`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.Detail` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.q:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1abd7c.  call temp:= `getOverride`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getOverride:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L1abd82.  v0:= temp @kind object;
  #L1abd84.  call temp:= `getAccess`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getAccess:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L1abd8a.  v1:= temp @kind object;
  #L1abd8c.  call temp:= `getSuper`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getSuper:()Ljava/lang/Class;` @kind interface;
  #L1abd92.  v2:= temp @kind object;
  #L1abd94.  if v2 == 0 then goto L1abd9e;
  #L1abd98.  call `e`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.e:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L1abd9e.  call `g`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.g:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L1abda4.  call `f`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.f:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L1abdaa.  call `a`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.a:()V` @kind direct;
  #L1abdb0.  call `r`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.r:()V` @kind direct;
  #L1abdb6.  return @kind void;
}
procedure `void` `r`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1abdc8.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abdcc.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1abdd2.  v0:= temp @kind object;
  #L1abdd4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1abdda.  v1:= temp;
  #L1abddc.  if v1 == 0 then goto L1abe08;
  #L1abde0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1abde6.  v1:= temp @kind object;
  #L1abde8.  v1:= (`java.lang.String`) v1 @kind object;
  #L1abdec.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abdf0.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1abdf6.  v2:= temp @kind object;
  #L1abdf8.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L1abdfc.  if v2 == 0 then goto L1abdd4;
  #L1abe00.  call `s`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.s:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L1abe06.  goto L1abdd4;
  #L1abe08.  return @kind void;
}
procedure `void` `s`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodPart` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.s:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1abe1c.  v0:= v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L1abe20.  call temp:= `take`(v0, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L1abe26.  v4:= temp @kind object;
  #L1abe28.  call temp:= `getMethod`(v3) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethod:()Ljava/lang/reflect/Method;` @kind interface;
  #L1abe2e.  v3:= temp @kind object;
  #L1abe30.  if v4 == 0 then goto L1abe36;
  #L1abe34.  return @kind void;
  #L1abe36.  v4:= new `org.simpleframework.xml.core.MethodException`;
  #L1abe3a.  v0:= 2I;
  #L1abe3c.  v0:= new `java.lang.Object`[v0];
  #L1abe40.  v1:= 0I;
  #L1abe42.  v0[v1]:= v3 @kind object;
  #L1abe46.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L1abe4a.  v1:= 1I;
  #L1abe4c.  v0[v1]:= v3 @kind object;
  #L1abe50.  v3:= "No matching get method for %s in %s" @kind object;
  #L1abe54.  call `<init>`(v4, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1abe5a.  throw v4;
}
