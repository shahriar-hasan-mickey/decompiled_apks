record `org.simpleframework.xml.core.Template` @kind class @AccessFlag PUBLIC {
  `char`[] `org.simpleframework.xml.core.Template.buf` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.Template.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.Template.count` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b3234.  v0:= 16I;
  #L1b3238.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @kind direct;
  #L1b323e.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b3250.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3256.  v1:= new `char`[v1];
  #L1b325a.  v0.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v1 @kind object;
  #L1b325e.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v3 @kind this, `char` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b3270.  v0:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3274.  v0:= v0 + 1;
  #L1b3278.  call `ensureCapacity`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L1b327e.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b3282.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3286.  v2:= v1 + 1;
  #L1b328a.  v3.`org.simpleframework.xml.core.Template.count` @type ^`int` := v2;
  #L1b328e.  v0[v1]:= v4 @kind char;
  #L1b3292.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b32dc.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b32e0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1b32e6.  v1:= temp;
  #L1b32e8.  v0:= v0 + v1 @kind int;
  #L1b32ea.  call `ensureCapacity`(v4, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L1b32f0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1b32f6.  v0:= temp;
  #L1b32f8.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b32fc.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3300.  v3:= 0I;
  #L1b3302.  call `getChars`(v5, v3, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L1b3308.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b330c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1b3312.  v5:= temp;
  #L1b3314.  v0:= v0 + v5 @kind int;
  #L1b3316.  v4.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L1b331a.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b332c.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3330.  v0:= v0 + v5 @kind int;
  #L1b3332.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L1b3338.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b333c.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3340.  call `getChars`(v3, v4, v5, v0, v1) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L1b3346.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b334a.  v3:= v3 + v5 @kind int;
  #L1b334c.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L1b3350.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `org.simpleframework.xml.core.Template` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3364.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b3368.  v3:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b336c.  v1:= 0I;
  #L1b336e.  call `append`(v2, v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L1b3374.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;II)V` @AccessFlag PUBLIC {
    temp;

  #L1b3388.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b338c.  call `append`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L1b3392.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `char`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b32a4.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b32a8.  v0:= v0 + v5 @kind int;
  #L1b32aa.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L1b32b0.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b32b4.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b32b8.  call `arraycopy`(v3, v4, v0, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b32be.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b32c2.  v3:= v3 + v5 @kind int;
  #L1b32c4.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L1b32c8.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b33a4.  v0:= 0I;
  #L1b33a6.  v1.`org.simpleframework.xml.core.Template.cache` @type ^`java.lang.String` := v0 @kind object;
  #L1b33aa.  v0:= 0I;
  #L1b33ac.  v1.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L1b33b0.  return @kind void;
}
procedure `void` `ensureCapacity`(`org.simpleframework.xml.core.Template` v3 @kind this, `int` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b33c4.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b33c8.  v1:= length @variable v0;
  #L1b33ca.  if v1 >= v4 then goto L1b33f4;
  #L1b33ce.  v0:= length @variable v0;
  #L1b33d0.  v0:= v0 * 2;
  #L1b33d4.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1b33da.  v4:= temp;
  #L1b33dc.  v4:= new `char`[v4];
  #L1b33e0.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b33e4.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b33e8.  v2:= 0I;
  #L1b33ea.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b33f0.  v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v4 @kind object;
  #L1b33f4.  return @kind void;
}
procedure `int` `length`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b31f4.  v0:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b31f8.  return v0;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.Template` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b320c.  v0:= new `java.lang.String`;
  #L1b3210.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L1b3214.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L1b3218.  v3:= 0I;
  #L1b321a.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1b3220.  return v0 @kind object;
}
