record `org.simpleframework.xml.core.Source` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Context` @kind interface {
  `org.simpleframework.xml.core.TemplateEngine` `org.simpleframework.xml.core.Source.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.strategy.Strategy` `org.simpleframework.xml.core.Source.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.Source.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Session` `org.simpleframework.xml.core.Source.d` @AccessFlag PRIVATE;
  `org.simpleframework.xml.filter.Filter` `org.simpleframework.xml.core.Source.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Source` v2 @kind this, `org.simpleframework.xml.strategy.Strategy` v3 @kind object, `org.simpleframework.xml.core.Support` v4 @kind object, `org.simpleframework.xml.core.Session` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.<init>:(Lorg/simpleframework/xml/strategy/Strategy;Lorg/simpleframework/xml/core/Support;Lorg/simpleframework/xml/core/Session;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b1d9c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b1da2.  v0:= new `org.simpleframework.xml.core.TemplateFilter`;
  #L1b1da6.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/TemplateFilter;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/filter/Filter;)V` @kind direct;
  #L1b1dac.  v2.`org.simpleframework.xml.core.Source.e` @type ^`org.simpleframework.xml.filter.Filter` := v0 @kind object;
  #L1b1db0.  v1:= new `org.simpleframework.xml.core.TemplateEngine`;
  #L1b1db4.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.<init>:(Lorg/simpleframework/xml/filter/Filter;)V` @kind direct;
  #L1b1dba.  v2.`org.simpleframework.xml.core.Source.a` @type ^`org.simpleframework.xml.core.TemplateEngine` := v1 @kind object;
  #L1b1dbe.  v2.`org.simpleframework.xml.core.Source.b` @type ^`org.simpleframework.xml.strategy.Strategy` := v3 @kind object;
  #L1b1dc2.  v2.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` := v4 @kind object;
  #L1b1dc6.  v2.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` := v5 @kind object;
  #L1b1dca.  return @kind void;
}
procedure `org.simpleframework.xml.core.Scanner` `a`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b1c9c.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1ca0.  call temp:= `getScanner`(v0, v2) @signature `Lorg/simpleframework/xml/core/Support;.getScanner:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @kind virtual;
  #L1b1ca6.  v2:= temp @kind object;
  #L1b1ca8.  return v2 @kind object;
}
procedure `java.lang.Object` `getAttribute`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getAttribute:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1b90.  v0:= v1.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` @kind object;
  #L1b1b94.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/core/Session;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b1b9a.  v2:= temp @kind object;
  #L1b1b9c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Caller` `getCaller`(`org.simpleframework.xml.core.Source` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getCaller:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Caller;` @AccessFlag PUBLIC {
    temp;

  #L1b1c14.  call temp:= `a`(v0, v1) @signature `Lorg/simpleframework/xml/core/Source;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @kind direct;
  #L1b1c1a.  v1:= temp @kind object;
  #L1b1c1c.  call temp:= `getCaller`(v1, v0) @signature `Lorg/simpleframework/xml/core/Scanner;.getCaller:(Lorg/simpleframework/xml/core/Context;)Lorg/simpleframework/xml/core/Caller;` @kind interface;
  #L1b1c22.  v1:= temp @kind object;
  #L1b1c24.  return v1 @kind object;
}
procedure `org.simpleframework.xml.core.Decorator` `getDecorator`(`org.simpleframework.xml.core.Source` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PUBLIC {
    temp;

  #L1b1c38.  call temp:= `a`(v0, v1) @signature `Lorg/simpleframework/xml/core/Source;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @kind direct;
  #L1b1c3e.  v1:= temp @kind object;
  #L1b1c40.  call temp:= `getDecorator`(v1) @signature `Lorg/simpleframework/xml/core/Scanner;.getDecorator:()Lorg/simpleframework/xml/core/Decorator;` @kind interface;
  #L1b1c46.  v1:= temp @kind object;
  #L1b1c48.  return v1 @kind object;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1c5c.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1c60.  call temp:= `getInstance`(v0, v2) @signature `Lorg/simpleframework/xml/core/Support;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1b1c66.  v2:= temp @kind object;
  #L1b1c68.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.Source` v1 @kind this, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1c7c.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1c80.  call temp:= `getInstance`(v0, v2) @signature `Lorg/simpleframework/xml/core/Support;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1b1c86.  v2:= temp @kind object;
  #L1b1c88.  return v2 @kind object;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1bb0.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1bb4.  call temp:= `getName`(v0, v2) @signature `Lorg/simpleframework/xml/core/Support;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L1b1bba.  v2:= temp @kind object;
  #L1b1bbc.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `getOverride`(`org.simpleframework.xml.core.Source` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getOverride:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b1d30.  call temp:= `getAttributes`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getAttributes:()Lorg/simpleframework/xml/stream/NodeMap;` @kind interface;
  #L1b1d36.  v0:= temp @kind object;
  #L1b1d38.  if v0 == 0 then goto L1b1d4e;
  #L1b1d3c.  v4:= v2.`org.simpleframework.xml.core.Source.b` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L1b1d40.  v1:= v2.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` @kind object;
  #L1b1d44.  call temp:= `read`(v4, v3, v0, v1) @signature `Lorg/simpleframework/xml/strategy/Strategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L1b1d4a.  v3:= temp @kind object;
  #L1b1d4c.  return v3 @kind object;
  #L1b1d4e.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1b1d52.  v0:= 1I;
  #L1b1d54.  v0:= new `java.lang.Object`[v0];
  #L1b1d58.  v1:= 0I;
  #L1b1d5a.  v0[v1]:= v4 @kind object;
  #L1b1d5e.  v4:= "No attributes for %s" @kind object;
  #L1b1d62.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b1d68.  throw v3;
}
procedure `java.lang.String` `getProperty`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1bd0.  v0:= v1.`org.simpleframework.xml.core.Source.a` @type ^`org.simpleframework.xml.core.TemplateEngine` @kind object;
  #L1b1bd4.  call temp:= `process`(v0, v2) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.process:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1b1bda.  v2:= temp @kind object;
  #L1b1bdc.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Schema` `getSchema`(`org.simpleframework.xml.core.Source` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getSchema:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Schema;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b1cbc.  call temp:= `a`(v3, v4) @signature `Lorg/simpleframework/xml/core/Source;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @kind direct;
  #L1b1cc2.  v0:= temp @kind object;
  #L1b1cc4.  if v0 == 0 then goto L1b1cd4;
  #L1b1cc8.  v4:= new `org.simpleframework.xml.core.ClassSchema`;
  #L1b1ccc.  call `<init>`(v4, v0, v3) @signature `Lorg/simpleframework/xml/core/ClassSchema;.<init>:(Lorg/simpleframework/xml/core/Scanner;Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L1b1cd2.  return v4 @kind object;
  #L1b1cd4.  v0:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1b1cd8.  v1:= 1I;
  #L1b1cda.  v1:= new `java.lang.Object`[v1];
  #L1b1cde.  v2:= 0I;
  #L1b1ce0.  v1[v2]:= v4 @kind object;
  #L1b1ce4.  v4:= "Invalid schema class %s" @kind object;
  #L1b1ce8.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b1cee.  throw v0;
}
procedure `org.simpleframework.xml.core.Session` `getSession`(`org.simpleframework.xml.core.Source` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Source;.getSession:()Lorg/simpleframework/xml/core/Session;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1d00.  v0:= v1.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` @kind object;
  #L1b1d04.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.Style` `getStyle`(`org.simpleframework.xml.core.Source` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Source;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1d7c.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1d80.  call temp:= `getStyle`(v0) @signature `Lorg/simpleframework/xml/core/Support;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L1b1d86.  v0:= temp @kind object;
  #L1b1d88.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Support` `getSupport`(`org.simpleframework.xml.core.Source` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Source;.getSupport:()Lorg/simpleframework/xml/core/Support;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1d18.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1d1c.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.Source` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getType:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;

  #L1b1b68.  if v2 == 0 then goto L1b1b76;
  #L1b1b6c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b1b72.  v1:= temp @kind object;
  #L1b1b74.  return v1 @kind object;
  #L1b1b76.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b1b7c.  v1:= temp @kind object;
  #L1b1b7e.  return v1 @kind object;
}
procedure `org.simpleframework.xml.Version` `getVersion`(`org.simpleframework.xml.core.Source` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.getVersion:(Ljava/lang/Class;)Lorg/simpleframework/xml/Version;` @AccessFlag PUBLIC {
    temp;

  #L1b1bf0.  call temp:= `a`(v0, v1) @signature `Lorg/simpleframework/xml/core/Source;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Scanner;` @kind direct;
  #L1b1bf6.  v1:= temp @kind object;
  #L1b1bf8.  call temp:= `getRevision`(v1) @signature `Lorg/simpleframework/xml/core/Scanner;.getRevision:()Lorg/simpleframework/xml/Version;` @kind interface;
  #L1b1bfe.  v1:= temp @kind object;
  #L1b1c00.  return v1 @kind object;
}
procedure `boolean` `isFloat`(`org.simpleframework.xml.core.Source` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.isFloat:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;

  #L1b1a78.  call temp:= `isFloat`(v1) @signature `Lorg/simpleframework/xml/core/Support;.isFloat:(Ljava/lang/Class;)Z` @kind static;
  #L1b1a7e.  v1:= temp;
  #L1b1a80.  return v1;
}
procedure `boolean` `isFloat`(`org.simpleframework.xml.core.Source` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.isFloat:(Lorg/simpleframework/xml/strategy/Type;)Z` @AccessFlag PUBLIC {
    temp;

  #L1b1a94.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b1a9a.  v1:= temp @kind object;
  #L1b1a9c.  call temp:= `isFloat`(v0, v1) @signature `Lorg/simpleframework/xml/core/Source;.isFloat:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b1aa2.  v1:= temp;
  #L1b1aa4.  return v1;
}
procedure `boolean` `isPrimitive`(`org.simpleframework.xml.core.Source` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.isPrimitive:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1ab8.  v0:= v1.`org.simpleframework.xml.core.Source.c` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L1b1abc.  call temp:= `isPrimitive`(v0, v2) @signature `Lorg/simpleframework/xml/core/Support;.isPrimitive:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b1ac2.  v2:= temp;
  #L1b1ac4.  return v2;
}
procedure `boolean` `isPrimitive`(`org.simpleframework.xml.core.Source` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.isPrimitive:(Lorg/simpleframework/xml/strategy/Type;)Z` @AccessFlag PUBLIC {
    temp;

  #L1b1ad8.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b1ade.  v1:= temp @kind object;
  #L1b1ae0.  call temp:= `isPrimitive`(v0, v1) @signature `Lorg/simpleframework/xml/core/Source;.isPrimitive:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b1ae6.  v1:= temp;
  #L1b1ae8.  return v1;
}
procedure `boolean` `isStrict`(`org.simpleframework.xml.core.Source` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Source;.isStrict:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1afc.  v0:= v1.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` @kind object;
  #L1b1b00.  call temp:= `isStrict`(v0) @signature `Lorg/simpleframework/xml/core/Session;.isStrict:()Z` @kind virtual;
  #L1b1b06.  v0:= temp;
  #L1b1b08.  return v0;
}
procedure `boolean` `setOverride`(`org.simpleframework.xml.core.Source` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Object` v4 @kind object, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Source;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b1b1c.  call temp:= `getAttributes`(v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getAttributes:()Lorg/simpleframework/xml/stream/NodeMap;` @kind interface;
  #L1b1b22.  v0:= temp @kind object;
  #L1b1b24.  if v0 == 0 then goto L1b1b3a;
  #L1b1b28.  v5:= v2.`org.simpleframework.xml.core.Source.b` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L1b1b2c.  v1:= v2.`org.simpleframework.xml.core.Source.d` @type ^`org.simpleframework.xml.core.Session` @kind object;
  #L1b1b30.  call temp:= `write`(v5, v3, v4, v0, v1) @signature `Lorg/simpleframework/xml/strategy/Strategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @kind interface;
  #L1b1b36.  v3:= temp;
  #L1b1b38.  return v3;
  #L1b1b3a.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1b1b3e.  v4:= 1I;
  #L1b1b40.  v4:= new `java.lang.Object`[v4];
  #L1b1b44.  v0:= 0I;
  #L1b1b46.  v4[v0]:= v5 @kind object;
  #L1b1b4a.  v5:= "No attributes for %s" @kind object;
  #L1b1b4e.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b1b54.  throw v3;
}
