record `org.simpleframework.xml.core.Traverser` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Traverser.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.Traverser.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b3e74.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3e7a.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L1b3e80.  v0:= temp @kind object;
  #L1b3e82.  v1.`org.simpleframework.xml.core.Traverser.b` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L1b3e86.  v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L1b3e8a.  return @kind void;
}
procedure `org.simpleframework.xml.core.Composite` `a`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b3df4.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L1b3dfa.  v0:= temp @kind object;
  #L1b3dfc.  if v3 == 0 then goto L1b3e10;
  #L1b3e00.  v3:= new `org.simpleframework.xml.core.Composite`;
  #L1b3e04.  v1:= v2.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1b3e08.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/Composite;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1b3e0e.  return v3 @kind object;
  #L1b3e10.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L1b3e14.  v0:= 0I;
  #L1b3e16.  v0:= new `java.lang.Object`[v0];
  #L1b3e1a.  v1:= "Can not instantiate null class" @kind object;
  #L1b3e1e.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b3e24.  throw v3;
}
procedure `org.simpleframework.xml.core.Decorator` `b`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b3e38.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1b3e3c.  call temp:= `getDecorator`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind interface;
  #L1b3e42.  v2:= temp @kind object;
  #L1b3e44.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Type` `c`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b3e58.  v0:= new `org.simpleframework.xml.core.ClassType`;
  #L1b3e5c.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/ClassType;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1b3e62.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b3d58.  call temp:= `getName`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L1b3d5e.  v2:= temp @kind object;
  #L1b3d60.  if v2 == 0 then goto L1b3d66;
  #L1b3d64.  return v4 @kind object;
  #L1b3d66.  v2:= new `org.simpleframework.xml.core.RootException`;
  #L1b3d6a.  v4:= 1I;
  #L1b3d6c.  v4:= new `java.lang.Object`[v4];
  #L1b3d70.  v0:= 0I;
  #L1b3d72.  v4[v0]:= v3 @kind object;
  #L1b3d76.  v3:= "Root annotation required for %s" @kind object;
  #L1b3d7a.  call `<init>`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b3d80.  throw v2;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3dc8.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1b3dcc.  call temp:= `getName`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L1b3dd2.  v2:= temp @kind object;
  #L1b3dd4.  v0:= v1.`org.simpleframework.xml.core.Traverser.b` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1b3dd8.  call temp:= `getElement`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b3dde.  v2:= temp @kind object;
  #L1b3de0.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3d1c.  call temp:= `a`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L1b3d22.  v3:= temp @kind object;
  #L1b3d24.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1b3d2a.  v3:= temp @kind object;
  #L1b3d2c.  if v3 == 0 then goto L1b3d42;
  #L1b3d30.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3d36.  v0:= temp @kind object;
  #L1b3d38.  call temp:= `d`(v1, v2, v0, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1b3d3e.  v2:= temp @kind object;
  #L1b3d40.  return v2 @kind object;
  #L1b3d42.  v2:= 0I;
  #L1b3d44.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3d94.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3d9a.  v0:= temp @kind object;
  #L1b3d9c.  call temp:= `a`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L1b3da2.  v1:= temp @kind object;
  #L1b3da4.  call temp:= `read`(v1, v3, v4) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b3daa.  v4:= temp @kind object;
  #L1b3dac.  call temp:= `d`(v2, v3, v0, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1b3db2.  v3:= temp @kind object;
  #L1b3db4.  return v3 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3cd0.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L1b3cd6.  v0:= temp @kind object;
  #L1b3cd8.  call temp:= `getName`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L1b3cde.  v1:= temp @kind object;
  #L1b3ce0.  if v1 == 0 then goto L1b3cee;
  #L1b3ce4.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Composite;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1b3cea.  v3:= temp;
  #L1b3cec.  return v3;
  #L1b3cee.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L1b3cf2.  v0:= 1I;
  #L1b3cf4.  v0:= new `java.lang.Object`[v0];
  #L1b3cf8.  v1:= 0I;
  #L1b3cfa.  v0[v1]:= v4 @kind object;
  #L1b3cfe.  v4:= "Root annotation required for %s" @kind object;
  #L1b3d02.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b3d08.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3e9c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3ea2.  v0:= temp @kind object;
  #L1b3ea4.  call `write`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @kind virtual;
  #L1b3eaa.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3ebc.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3ec2.  v0:= temp @kind object;
  #L1b3ec4.  call temp:= `getName`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L1b3eca.  v1:= temp @kind object;
  #L1b3ecc.  if v1 == 0 then goto L1b3ed8;
  #L1b3ed0.  call `write`(v2, v3, v4, v5, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L1b3ed6.  return @kind void;
  #L1b3ed8.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L1b3edc.  v4:= 1I;
  #L1b3ede.  v4:= new `java.lang.Object`[v4];
  #L1b3ee2.  v5:= 0I;
  #L1b3ee4.  v4[v5]:= v0 @kind object;
  #L1b3ee8.  v5:= "Root annotation required for %s" @kind object;
  #L1b3eec.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b3ef2.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3f04.  call temp:= `getChild`(v2, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1b3f0a.  v2:= temp @kind object;
  #L1b3f0c.  call temp:= `c`(v1, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L1b3f12.  v4:= temp @kind object;
  #L1b3f14.  if v3 == 0 then goto L1b3f50;
  #L1b3f18.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3f1e.  v5:= temp @kind object;
  #L1b3f20.  call temp:= `b`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind direct;
  #L1b3f26.  v0:= temp @kind object;
  #L1b3f28.  if v0 == 0 then goto L1b3f32;
  #L1b3f2c.  call `decorate`(v0, v2) @signature `Lorg/simpleframework/xml/core/Decorator;.decorate:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind interface;
  #L1b3f32.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1b3f36.  call temp:= `setOverride`(v0, v4, v3, v2) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L1b3f3c.  v4:= temp;
  #L1b3f3e.  if v4 != 0 then goto L1b3f50;
  #L1b3f42.  call temp:= `a`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L1b3f48.  v4:= temp @kind object;
  #L1b3f4a.  call `write`(v4, v2, v3) @signature `Lorg/simpleframework/xml/core/Composite;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1b3f50.  call `commit`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.commit:()V` @kind interface;
  #L1b3f56.  return @kind void;
}
