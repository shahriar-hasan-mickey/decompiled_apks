record `org.simpleframework.xml.core.PathParser` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Expression` @kind interface {
  `boolean` `org.simpleframework.xml.core.PathParser.attribute` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.attributes` @AccessFlag PUBLIC;
  `java.lang.StringBuilder` `org.simpleframework.xml.core.PathParser.builder` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.count` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.core.PathParser.data` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.elements` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.indexes` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.location` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.names` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.off` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.path` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.prefixes` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.start` @AccessFlag PUBLIC;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PathParser.style` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PathParser.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.<init>:(Ljava/lang/String;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1add34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1add3a.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1add3e.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1add44.  v1.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1add48.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L1add4c.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L1add52.  v1.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L1add56.  v0:= new `java.util.ArrayList`;
  #L1add5a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1add60.  v1.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` := v0 @kind object;
  #L1add64.  v0:= new `java.util.ArrayList`;
  #L1add68.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1add6e.  v1.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` := v0 @kind object;
  #L1add72.  v0:= new `java.util.ArrayList`;
  #L1add76.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1add7c.  v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` := v0 @kind object;
  #L1add80.  v0:= new `java.lang.StringBuilder`;
  #L1add84.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1add8a.  v1.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L1add8e.  call temp:= `getStyle`(v4) @signature `Lorg/simpleframework/xml/stream/Format;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L1add94.  v4:= temp @kind object;
  #L1add96.  v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` := v4 @kind object;
  #L1add9a.  v1.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L1add9e.  v1.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` := v2 @kind object;
  #L1adda2.  call `o`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.o:(Ljava/lang/String;)V` @kind direct;
  #L1adda8.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1addbc.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1addc0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1addc6.  v0:= temp;
  #L1addc8.  v1:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L1addcc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1addd2.  v1:= temp;
  #L1addd4.  if v0 <= v1 then goto L1addec;
  #L1addd8.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L1adddc.  v1:= 1I;
  #L1addde.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1adde4.  v1:= temp @kind object;
  #L1adde6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1addec.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ade00.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ade04.  v1:= 1I;
  #L1ade06.  v0:= v0 + v1 @kind int;
  #L1ade08.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L1ade0c.  v2:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ade10.  v3:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L1ade14.  v4:= 0I;
  #L1ade16.  v5:= 2I;
  #L1ade18.  if v2 >= v3 then goto L1ade6c;
  #L1ade1c.  v3:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ade20.  v6:= v2 + 1;
  #L1ade24.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v6;
  #L1ade28.  v2:= v3[v2] @kind char;
  #L1ade2c.  call temp:= `n`(v7, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @kind direct;
  #L1ade32.  v3:= temp;
  #L1ade34.  if v3 == 0 then goto L1ade3a;
  #L1ade38.  goto L1ade0c;
  #L1ade3a.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ade3e.  v3:= 3I;
  #L1ade40.  v3:= new `java.lang.Object`[v3];
  #L1ade44.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L1ade4a.  v2:= temp @kind object;
  #L1ade4c.  v3[v4]:= v2 @kind object;
  #L1ade50.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ade54.  v3[v1]:= v2 @kind object;
  #L1ade58.  v1:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ade5c.  v3[v5]:= v1 @kind object;
  #L1ade60.  v1:= "Illegal character '%s' in attribute for '%s' in %s" @kind object;
  #L1ade64.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ade6a.  throw v0;
  #L1ade6c.  if v2 <= v0 then goto L1ade7e;
  #L1ade70.  v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` := v1 @kind boolean;
  #L1ade74.  v2:= v2 - v0 @kind int;
  #L1ade76.  call `c`(v7, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.c:(II)V` @kind direct;
  #L1ade7c.  return @kind void;
  #L1ade7e.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ade82.  v2:= new `java.lang.Object`[v5];
  #L1ade86.  v3:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ade8a.  v2[v4]:= v3 @kind object;
  #L1ade8e.  v3:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ade92.  v2[v1]:= v3 @kind object;
  #L1ade96.  v1:= "Attribute reference in '%s' for %s is empty" @kind object;
  #L1ade9a.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1adea0.  throw v0;
}
procedure `void` `c`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.c:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1adeb4.  v0:= new `java.lang.String`;
  #L1adeb8.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1adebc.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1adec2.  if v4 <= 0 then goto L1adecc;
  #L1adec6.  call `d`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.d:(Ljava/lang/String;)V` @kind direct;
  #L1adecc.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1adee0.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1adee4.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1adeea.  v3:= temp @kind object;
  #L1adeec.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L1adef0.  v1:= 0I;
  #L1adef2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1adef8.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adefc.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1adf02.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.core.PathParser` v8 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1adf14.  v0:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adf18.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1adf1e.  v0:= temp;
  #L1adf20.  v1:= v0 + -1;
  #L1adf24.  v2:= 0I;
  #L1adf26.  if v2 >= v0 then goto L1adfec;
  #L1adf2a.  v3:= v8.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L1adf2e.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adf34.  v3:= temp @kind object;
  #L1adf36.  v3:= (`java.lang.String`) v3 @kind object;
  #L1adf3a.  v4:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adf3e.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adf44.  v4:= temp @kind object;
  #L1adf46.  v4:= (`java.lang.String`) v4 @kind object;
  #L1adf4a.  v5:= v8.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L1adf4e.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adf54.  v5:= temp @kind object;
  #L1adf56.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L1adf5a.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1adf60.  v5:= temp;
  #L1adf62.  if v2 <= 0 then goto L1adf74;
  #L1adf66.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adf6a.  v7:= 47I;
  #L1adf6e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adf74.  v6:= v8.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L1adf78.  if v6 == 0 then goto L1adf9a;
  #L1adf7c.  if v2 != v1 then goto L1adf9a;
  #L1adf80.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adf84.  v5:= 64I;
  #L1adf88.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adf8e.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adf92.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adf98.  goto L1adfe6;
  #L1adf9a.  if v3 == 0 then goto L1adfb6;
  #L1adf9e.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfa2.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfa8.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfac.  v6:= 58I;
  #L1adfb0.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfb6.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfba.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfc0.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfc4.  v4:= 91I;
  #L1adfc8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfce.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfd2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfd8.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adfdc.  v4:= 93I;
  #L1adfe0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adfe6.  v2:= v2 + 1;
  #L1adfea.  goto L1adf26;
  #L1adfec.  v0:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1adff0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adff6.  v0:= temp @kind object;
  #L1adff8.  v8.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` := v0 @kind object;
  #L1adffc.  return @kind void;
}
procedure `void` `f`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae010.  v0:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae014.  v1:= 0I;
  #L1ae016.  v2:= 0I;
  #L1ae018.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae01c.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L1ae020.  if v3 >= v4 then goto L1ae0aa;
  #L1ae024.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae028.  v5:= v3 + 1;
  #L1ae02c.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L1ae030.  v3:= v4[v3] @kind char;
  #L1ae034.  call temp:= `n`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @kind direct;
  #L1ae03a.  v4:= temp;
  #L1ae03c.  if v4 != 0 then goto L1ae0a4;
  #L1ae040.  v4:= 64I;
  #L1ae044.  v5:= 1I;
  #L1ae046.  if v3 != v4 then goto L1ae056;
  #L1ae04a.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae04e.  v1:= v1 - v5 @kind int;
  #L1ae050.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L1ae054.  goto L1ae0aa;
  #L1ae056.  v4:= 91I;
  #L1ae05a.  if v3 != v4 then goto L1ae066;
  #L1ae05e.  call `i`(v6) @signature `Lorg/simpleframework/xml/core/PathParser;.i:()V` @kind direct;
  #L1ae064.  goto L1ae0aa;
  #L1ae066.  v4:= 47I;
  #L1ae06a.  if v3 != v4 then goto L1ae070;
  #L1ae06e.  goto L1ae0aa;
  #L1ae070.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae074.  v2:= 3I;
  #L1ae076.  v2:= new `java.lang.Object`[v2];
  #L1ae07a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L1ae080.  v3:= temp @kind object;
  #L1ae082.  v2[v1]:= v3 @kind object;
  #L1ae086.  v1:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae08a.  v2[v5]:= v1 @kind object;
  #L1ae08e.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae092.  v3:= 2I;
  #L1ae094.  v2[v3]:= v1 @kind object;
  #L1ae098.  v1:= "Illegal character '%s' in element for '%s' in %s" @kind object;
  #L1ae09c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae0a2.  throw v0;
  #L1ae0a4.  v2:= v2 + 1;
  #L1ae0a8.  goto L1ae018;
  #L1ae0aa.  call `g`(v6, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.g:(II)V` @kind direct;
  #L1ae0b0.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.g:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ae0c4.  v0:= new `java.lang.String`;
  #L1ae0c8.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae0cc.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1ae0d2.  if v4 <= 0 then goto L1ae0dc;
  #L1ae0d6.  call `h`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.h:(Ljava/lang/String;)V` @kind direct;
  #L1ae0dc.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.h:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ae0f0.  v0:= 58I;
  #L1ae0f4.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1ae0fa.  v0:= temp;
  #L1ae0fc.  if v0 <= 0 then goto L1ae118;
  #L1ae100.  v1:= 0I;
  #L1ae102.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1ae108.  v1:= temp @kind object;
  #L1ae10a.  v0:= v0 + 1;
  #L1ae10e.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1ae114.  v3:= temp @kind object;
  #L1ae116.  goto L1ae11a;
  #L1ae118.  v1:= 0I;
  #L1ae11a.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1ae11e.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1ae124.  v3:= temp @kind object;
  #L1ae126.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L1ae12a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ae130.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1ae134.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ae13a.  return @kind void;
}
procedure `void` `i`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae14c.  v0:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae150.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae154.  v2:= 1I;
  #L1ae156.  v1:= v1 - v2 @kind int;
  #L1ae158.  v0:= v0[v1] @kind char;
  #L1ae15c.  v1:= 0I;
  #L1ae15e.  v3:= 91I;
  #L1ae162.  if v0 != v3 then goto L1ae19e;
  #L1ae166.  v0:= 0I;
  #L1ae168.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae16c.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L1ae170.  if v3 >= v4 then goto L1ae1a0;
  #L1ae174.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae178.  v5:= v3 + 1;
  #L1ae17c.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L1ae180.  v3:= v4[v3] @kind char;
  #L1ae184.  call temp:= `j`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.j:(C)Z` @kind direct;
  #L1ae18a.  v4:= temp;
  #L1ae18c.  if v4 != 0 then goto L1ae192;
  #L1ae190.  goto L1ae1a0;
  #L1ae192.  v0:= v0 * 10;
  #L1ae196.  v0:= v0 + v3 @kind int;
  #L1ae198.  v0:= v0 + -48;
  #L1ae19c.  goto L1ae168;
  #L1ae19e.  v0:= 0I;
  #L1ae1a0.  v3:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae1a4.  v4:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae1a8.  v5:= v4 + 1;
  #L1ae1ac.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L1ae1b0.  v4:= v4 - v2 @kind int;
  #L1ae1b2.  v3:= v3[v4] @kind char;
  #L1ae1b6.  v4:= 93I;
  #L1ae1ba.  if v3 != v4 then goto L1ae1d2;
  #L1ae1be.  v1:= v6.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L1ae1c2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1ae1c8.  v0:= temp @kind object;
  #L1ae1ca.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1ae1d0.  return @kind void;
  #L1ae1d2.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae1d6.  v3:= 2I;
  #L1ae1d8.  v3:= new `java.lang.Object`[v3];
  #L1ae1dc.  v4:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae1e0.  v3[v1]:= v4 @kind object;
  #L1ae1e4.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae1e8.  v3[v2]:= v1 @kind object;
  #L1ae1ec.  v1:= "Invalid index for path '%s' in %s" @kind object;
  #L1ae1f0.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae1f6.  throw v0;
}
procedure `boolean` `j`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.j:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1ad928.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L1ad92e.  v1:= temp;
  #L1ad930.  return v1;
}
procedure `boolean` `k`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L1ad964.  if v1 == 0 then goto L1ad97a;
  #L1ad968.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ad96e.  v1:= temp;
  #L1ad970.  if v1 != 0 then goto L1ad976;
  #L1ad974.  goto L1ad97a;
  #L1ad976.  v1:= 0I;
  #L1ad978.  goto L1ad97c;
  #L1ad97a.  v1:= 1I;
  #L1ad97c.  return v1;
}
procedure `boolean` `l`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.l:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1ad990.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L1ad996.  v1:= temp;
  #L1ad998.  return v1;
}
procedure `boolean` `m`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.m:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ad9d4.  v0:= 95I;
  #L1ad9d8.  if v2 == v0 then goto L1ad9f2;
  #L1ad9dc.  v0:= 45I;
  #L1ad9e0.  if v2 == v0 then goto L1ad9f2;
  #L1ad9e4.  v0:= 58I;
  #L1ad9e8.  if v2 != v0 then goto L1ad9ee;
  #L1ad9ec.  goto L1ad9f2;
  #L1ad9ee.  v2:= 0I;
  #L1ad9f0.  goto L1ad9f4;
  #L1ad9f2.  v2:= 1I;
  #L1ad9f4.  return v2;
}
procedure `boolean` `n`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ada08.  call temp:= `l`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.l:(C)Z` @kind direct;
  #L1ada0e.  v0:= temp;
  #L1ada10.  if v0 != 0 then goto L1ada26;
  #L1ada14.  call temp:= `m`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.m:(C)Z` @kind direct;
  #L1ada1a.  v2:= temp;
  #L1ada1c.  if v2 == 0 then goto L1ada22;
  #L1ada20.  goto L1ada26;
  #L1ada22.  v2:= 0I;
  #L1ada24.  goto L1ada28;
  #L1ada26.  v2:= 1I;
  #L1ada28.  return v2;
}
procedure `void` `o`(`org.simpleframework.xml.core.PathParser` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.o:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ae208.  if v4 == 0 then goto L1ae228;
  #L1ae20c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1ae212.  v0:= temp;
  #L1ae214.  v3.`org.simpleframework.xml.core.PathParser.count` @type ^`int` := v0;
  #L1ae218.  v1:= new `char`[v0];
  #L1ae21c.  v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] := v1 @kind object;
  #L1ae220.  v2:= 0I;
  #L1ae222.  call `getChars`(v4, v2, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L1ae228.  call `p`(v3) @signature `Lorg/simpleframework/xml/core/PathParser;.p:()V` @kind direct;
  #L1ae22e.  return @kind void;
}
procedure `void` `p`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.p:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ae240.  v0:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae244.  v1:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae248.  v2:= v0[v1] @kind char;
  #L1ae24c.  v3:= 1I;
  #L1ae24e.  v4:= 0I;
  #L1ae250.  v5:= 2I;
  #L1ae252.  v6:= 47I;
  #L1ae256.  if v2 == v6 then goto L1ae2ba;
  #L1ae25a.  v0:= v0[v1] @kind char;
  #L1ae25e.  v1:= 46I;
  #L1ae262.  if v0 != v1 then goto L1ae26c;
  #L1ae266.  call `r`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.r:()V` @kind direct;
  #L1ae26c.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae270.  v1:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L1ae274.  if v0 >= v1 then goto L1ae2ac;
  #L1ae278.  v0:= v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L1ae27c.  if v0 != 0 then goto L1ae288;
  #L1ae280.  call `q`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.q:()V` @kind direct;
  #L1ae286.  goto L1ae26c;
  #L1ae288.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae28c.  v1:= new `java.lang.Object`[v5];
  #L1ae290.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae294.  v1[v4]:= v2 @kind object;
  #L1ae298.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae29c.  v1[v3]:= v2 @kind object;
  #L1ae2a0.  v2:= "Path '%s' in %s references an invalid attribute" @kind object;
  #L1ae2a4.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae2aa.  throw v0;
  #L1ae2ac.  call `s`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.s:()V` @kind direct;
  #L1ae2b2.  call `e`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.e:()V` @kind direct;
  #L1ae2b8.  return @kind void;
  #L1ae2ba.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae2be.  v1:= new `java.lang.Object`[v5];
  #L1ae2c2.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae2c6.  v1[v4]:= v2 @kind object;
  #L1ae2ca.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae2ce.  v1[v3]:= v2 @kind object;
  #L1ae2d2.  v2:= "Path '%s' in %s references document root" @kind object;
  #L1ae2d6.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae2dc.  throw v0;
}
procedure `void` `q`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae2f0.  v0:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae2f4.  v1:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae2f8.  v0:= v0[v1] @kind char;
  #L1ae2fc.  v1:= 47I;
  #L1ae300.  if v0 == v1 then goto L1ae322;
  #L1ae304.  v1:= 64I;
  #L1ae308.  if v0 != v1 then goto L1ae314;
  #L1ae30c.  call `b`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.b:()V` @kind direct;
  #L1ae312.  goto L1ae31a;
  #L1ae314.  call `f`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.f:()V` @kind direct;
  #L1ae31a.  call `a`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.a:()V` @kind direct;
  #L1ae320.  return @kind void;
  #L1ae322.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae326.  v1:= 2I;
  #L1ae328.  v1:= new `java.lang.Object`[v1];
  #L1ae32c.  v2:= v4.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae330.  v3:= 0I;
  #L1ae332.  v1[v3]:= v2 @kind object;
  #L1ae336.  v2:= v4.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae33a.  v3:= 1I;
  #L1ae33c.  v1[v3]:= v2 @kind object;
  #L1ae340.  v2:= "Invalid path expression '%s' in %s" @kind object;
  #L1ae344.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae34a.  throw v0;
}
procedure `void` `r`(`org.simpleframework.xml.core.PathParser` v5 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ae35c.  v0:= v5.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae360.  v1:= length @variable v0;
  #L1ae362.  v2:= 1I;
  #L1ae364.  if v1 <= v2 then goto L1ae3a8;
  #L1ae368.  v1:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae36c.  v1:= v1 + v2 @kind int;
  #L1ae36e.  v0:= v0[v1] @kind char;
  #L1ae372.  v3:= 47I;
  #L1ae376.  if v0 != v3 then goto L1ae380;
  #L1ae37a.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L1ae37e.  goto L1ae3a8;
  #L1ae380.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L1ae384.  v1:= 2I;
  #L1ae386.  v1:= new `java.lang.Object`[v1];
  #L1ae38a.  v3:= v5.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L1ae38e.  v4:= 0I;
  #L1ae390.  v1[v4]:= v3 @kind object;
  #L1ae394.  v3:= v5.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1ae398.  v1[v2]:= v3 @kind object;
  #L1ae39c.  v2:= "Path '%s' in %s has an illegal syntax" @kind object;
  #L1ae3a0.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1ae3a6.  throw v0;
  #L1ae3a8.  v0:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae3ac.  v0:= v0 + v2 @kind int;
  #L1ae3ae.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L1ae3b2.  v5.`org.simpleframework.xml.core.PathParser.start` @type ^`int` := v0;
  #L1ae3b6.  return @kind void;
}
procedure `void` `s`(`org.simpleframework.xml.core.PathParser` v3 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.s:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ae3c8.  v0:= v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1ae3cc.  v0:= v0 + -1;
  #L1ae3d0.  v1:= v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1ae3d4.  v2:= length @variable v1;
  #L1ae3d6.  if v0 < v2 then goto L1ae3e0;
  #L1ae3da.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L1ae3de.  goto L1ae3f0;
  #L1ae3e0.  v1:= v1[v0] @kind char;
  #L1ae3e4.  v2:= 47I;
  #L1ae3e8.  if v1 != v2 then goto L1ae3f0;
  #L1ae3ec.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L1ae3f0.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ada68.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1ada6c.  call temp:= `k`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1ada72.  v0:= temp;
  #L1ada74.  if v0 != 0 then goto L1adaa8;
  #L1ada78.  v0:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1ada7c.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1ada82.  v0:= temp @kind object;
  #L1ada84.  v0:= (`java.lang.String`) v0 @kind object;
  #L1ada88.  if v0 != 0 then goto L1adaa6;
  #L1ada8c.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1ada90.  call temp:= `getAttributePath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1ada96.  v0:= temp @kind object;
  #L1ada98.  if v0 == 0 then goto L1adaa6;
  #L1ada9c.  v1:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1adaa0.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1adaa6.  return v0 @kind object;
  #L1adaa8.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1adaac.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1adab2.  v3:= temp @kind object;
  #L1adab4.  return v3 @kind object;
}
procedure `java.lang.String` `getAttributePath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adac8.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1adacc.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1adad2.  v3:= temp @kind object;
  #L1adad4.  call temp:= `k`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1adada.  v0:= temp;
  #L1adadc.  if v0 == 0 then goto L1adae2;
  #L1adae0.  return v3 @kind object;
  #L1adae2.  v0:= new `java.lang.StringBuilder`;
  #L1adae6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1adaec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adaf2.  v2:= "/@" @kind object;
  #L1adaf6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adafc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adb02.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adb08.  v2:= temp @kind object;
  #L1adb0a.  return v2 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1adb1c.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1adb20.  call temp:= `k`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1adb26.  v0:= temp;
  #L1adb28.  if v0 != 0 then goto L1adb5c;
  #L1adb2c.  v0:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1adb30.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1adb36.  v0:= temp @kind object;
  #L1adb38.  v0:= (`java.lang.String`) v0 @kind object;
  #L1adb3c.  if v0 != 0 then goto L1adb5a;
  #L1adb40.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1adb44.  call temp:= `getElementPath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1adb4a.  v0:= temp @kind object;
  #L1adb4c.  if v0 == 0 then goto L1adb5a;
  #L1adb50.  v1:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L1adb54.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1adb5a.  return v0 @kind object;
  #L1adb5c.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1adb60.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1adb66.  v3:= temp @kind object;
  #L1adb68.  return v3 @kind object;
}
procedure `java.lang.String` `getElementPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adb7c.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L1adb80.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1adb86.  v3:= temp @kind object;
  #L1adb88.  call temp:= `k`(v1, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1adb8e.  v0:= temp;
  #L1adb90.  if v0 == 0 then goto L1adb96;
  #L1adb94.  return v2 @kind object;
  #L1adb96.  call temp:= `k`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1adb9c.  v0:= temp;
  #L1adb9e.  if v0 == 0 then goto L1adba4;
  #L1adba2.  return v3 @kind object;
  #L1adba4.  v0:= new `java.lang.StringBuilder`;
  #L1adba8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1adbae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adbb4.  v2:= "/" @kind object;
  #L1adbb8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adbbe.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adbc4.  v2:= "[1]" @kind object;
  #L1adbc8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1adbce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1adbd4.  v2:= temp @kind object;
  #L1adbd6.  return v2 @kind object;
}
procedure `java.lang.String` `getFirst`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getFirst:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1adbe8.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adbec.  v1:= 0I;
  #L1adbee.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adbf4.  v0:= temp @kind object;
  #L1adbf6.  v0:= (`java.lang.String`) v0 @kind object;
  #L1adbfa.  return v0 @kind object;
}
procedure `int` `getIndex`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ada3c.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L1ada40.  v1:= 0I;
  #L1ada42.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1ada48.  v0:= temp @kind object;
  #L1ada4a.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L1ada4e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1ada54.  v0:= temp;
  #L1ada56.  return v0;
}
procedure `java.lang.String` `getLast`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getLast:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1adc0c.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adc10.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1adc16.  v0:= temp;
  #L1adc18.  v0:= v0 + -1;
  #L1adc1c.  v1:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adc20.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adc26.  v0:= temp @kind object;
  #L1adc28.  v0:= (`java.lang.String`) v0 @kind object;
  #L1adc2c.  return v0 @kind object;
}
procedure `java.lang.String` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adc40.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1adc44.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(I)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adcd8.  v0:= 0I;
  #L1adcda.  call temp:= `getPath`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L1adce0.  v2:= temp @kind object;
  #L1adce2.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adcf4.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adcf8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1adcfe.  v0:= temp;
  #L1add00.  v0:= v0 + -1;
  #L1add04.  v0:= v0 - v3 @kind int;
  #L1add06.  if v0 < v2 then goto L1add16;
  #L1add0a.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L1add0e.  call `<init>`(v3, v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L1add14.  return v3 @kind object;
  #L1add16.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L1add1a.  call `<init>`(v3, v1, v2, v2) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L1add20.  return v3 @kind object;
}
procedure `java.lang.String` `getPrefix`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1adc58.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L1adc5c.  v1:= 0I;
  #L1adc5e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1adc64.  v0:= temp @kind object;
  #L1adc66.  v0:= (`java.lang.String`) v0 @kind object;
  #L1adc6a.  return v0 @kind object;
}
procedure `boolean` `isAttribute`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ad910.  v0:= v1.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L1ad914.  return v0;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ad944.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L1ad948.  call temp:= `k`(v1, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L1ad94e.  v0:= temp;
  #L1ad950.  return v0;
}
procedure `boolean` `isPath`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isPath:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ad9ac.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1ad9b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1ad9b6.  v0:= temp;
  #L1ad9b8.  v1:= 1I;
  #L1ad9ba.  if v0 <= v1 then goto L1ad9c0;
  #L1ad9be.  goto L1ad9c2;
  #L1ad9c0.  v1:= 0I;
  #L1ad9c2.  return v1;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adcb8.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L1adcbc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1adcc2.  v0:= temp @kind object;
  #L1adcc4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1adc7c.  v0:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L1adc80.  v1:= v4.`org.simpleframework.xml.core.PathParser.start` @type ^`int`;
  #L1adc84.  v0:= v0 - v1 @kind int;
  #L1adc86.  v2:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L1adc8a.  if v2 != 0 then goto L1adca0;
  #L1adc8e.  v2:= new `java.lang.String`;
  #L1adc92.  v3:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L1adc96.  call `<init>`(v2, v3, v1, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1adc9c.  v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` := v2 @kind object;
  #L1adca0.  v0:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L1adca4.  return v0 @kind object;
}
