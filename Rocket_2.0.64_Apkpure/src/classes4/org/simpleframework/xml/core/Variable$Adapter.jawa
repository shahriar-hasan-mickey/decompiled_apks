record `org.simpleframework.xml.core.Variable$Adapter` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Repeater` @kind interface {
  `org.simpleframework.xml.core.Converter` `org.simpleframework.xml.core.Variable$Adapter.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `org.simpleframework.xml.core.Variable$Adapter.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Label` `org.simpleframework.xml.core.Variable$Adapter.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Variable$Adapter` v0 @kind this, `org.simpleframework.xml.core.Converter` v1 @kind object, `org.simpleframework.xml.core.Label` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.<init>:(Lorg/simpleframework/xml/core/Converter;Lorg/simpleframework/xml/core/Label;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b4a08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b4a0e.  v0.`org.simpleframework.xml.core.Variable$Adapter.a` @type ^`org.simpleframework.xml.core.Converter` := v1 @kind object;
  #L1b4a12.  v0.`org.simpleframework.xml.core.Variable$Adapter.b` @type ^`java.lang.Object` := v3 @kind object;
  #L1b4a16.  v0.`org.simpleframework.xml.core.Variable$Adapter.c` @type ^`org.simpleframework.xml.core.Label` := v2 @kind object;
  #L1b4a1a.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Variable$Adapter` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b4980.  v0:= v1.`org.simpleframework.xml.core.Variable$Adapter.b` @type ^`java.lang.Object` @kind object;
  #L1b4984.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b498a.  v2:= temp @kind object;
  #L1b498c.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Variable$Adapter` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b49a0.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L1b49a6.  v0:= temp @kind object;
  #L1b49a8.  call temp:= `getName`(v5) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1b49ae.  v1:= temp @kind object;
  #L1b49b0.  v2:= v4.`org.simpleframework.xml.core.Variable$Adapter.a` @type ^`org.simpleframework.xml.core.Converter` @kind object;
  #L1b49b4.  v3:= instanceof @variable v2 @type ^`org.simpleframework.xml.core.Repeater` @kind boolean;
  #L1b49b8.  if v3 == 0 then goto L1b49ca;
  #L1b49bc.  v2:= (`org.simpleframework.xml.core.Repeater`) v2 @kind object;
  #L1b49c0.  call temp:= `read`(v2, v5, v6) @signature `Lorg/simpleframework/xml/core/Repeater;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b49c6.  v5:= temp @kind object;
  #L1b49c8.  return v5 @kind object;
  #L1b49ca.  v5:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1b49ce.  v6:= 3I;
  #L1b49d0.  v6:= new `java.lang.Object`[v6];
  #L1b49d4.  v2:= 0I;
  #L1b49d6.  v6[v2]:= v1 @kind object;
  #L1b49da.  v1:= v4.`org.simpleframework.xml.core.Variable$Adapter.c` @type ^`org.simpleframework.xml.core.Label` @kind object;
  #L1b49de.  v2:= 1I;
  #L1b49e0.  v6[v2]:= v1 @kind object;
  #L1b49e4.  v1:= 2I;
  #L1b49e6.  v6[v1]:= v0 @kind object;
  #L1b49ea.  v0:= "Element '%s' is already used with %s at %s" @kind object;
  #L1b49ee.  call `<init>`(v5, v0, v6) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b49f4.  throw v5;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Variable$Adapter` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b4924.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L1b492a.  v0:= temp @kind object;
  #L1b492c.  call temp:= `getName`(v5) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1b4932.  v1:= temp @kind object;
  #L1b4934.  v2:= v4.`org.simpleframework.xml.core.Variable$Adapter.a` @type ^`org.simpleframework.xml.core.Converter` @kind object;
  #L1b4938.  v3:= instanceof @variable v2 @type ^`org.simpleframework.xml.core.Repeater` @kind boolean;
  #L1b493c.  if v3 == 0 then goto L1b494e;
  #L1b4940.  v2:= (`org.simpleframework.xml.core.Repeater`) v2 @kind object;
  #L1b4944.  call temp:= `validate`(v2, v5) @signature `Lorg/simpleframework/xml/core/Converter;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind interface;
  #L1b494a.  v5:= temp;
  #L1b494c.  return v5;
  #L1b494e.  v5:= new `org.simpleframework.xml.core.PersistenceException`;
  #L1b4952.  v2:= 2I;
  #L1b4954.  v2:= new `java.lang.Object`[v2];
  #L1b4958.  v3:= 0I;
  #L1b495a.  v2[v3]:= v1 @kind object;
  #L1b495e.  v1:= 1I;
  #L1b4960.  v2[v1]:= v0 @kind object;
  #L1b4964.  v0:= "Element '%s' declared twice at %s" @kind object;
  #L1b4968.  call `<init>`(v5, v0, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b496e.  throw v5;
}
procedure `void` `write`(`org.simpleframework.xml.core.Variable$Adapter` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L1b4a2c.  call `write`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Variable$Adapter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1b4a32.  return @kind void;
}
