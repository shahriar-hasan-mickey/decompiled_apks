record `org.simpleframework.xml.core.Caller` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.e` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.f` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Caller.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Caller` v1 @kind this, `org.simpleframework.xml.core.Scanner` v2 @kind object, `org.simpleframework.xml.core.Context` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.<init>:(Lorg/simpleframework/xml/core/Scanner;Lorg/simpleframework/xml/core/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a1278.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a127e.  call temp:= `getValidate`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getValidate:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a1284.  v0:= temp @kind object;
  #L1a1286.  v1.`org.simpleframework.xml.core.Caller.b` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L1a128a.  call temp:= `getComplete`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getComplete:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a1290.  v0:= temp @kind object;
  #L1a1292.  v1.`org.simpleframework.xml.core.Caller.d` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L1a1296.  call temp:= `getReplace`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getReplace:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a129c.  v0:= temp @kind object;
  #L1a129e.  v1.`org.simpleframework.xml.core.Caller.e` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L1a12a2.  call temp:= `getResolve`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getResolve:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a12a8.  v0:= temp @kind object;
  #L1a12aa.  v1.`org.simpleframework.xml.core.Caller.f` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L1a12ae.  call temp:= `getPersist`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getPersist:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a12b4.  v0:= temp @kind object;
  #L1a12b6.  v1.`org.simpleframework.xml.core.Caller.c` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L1a12ba.  call temp:= `getCommit`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getCommit:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L1a12c0.  v2:= temp @kind object;
  #L1a12c2.  v1.`org.simpleframework.xml.core.Caller.a` @type ^`org.simpleframework.xml.core.Function` := v2 @kind object;
  #L1a12c6.  v1.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` := v3 @kind object;
  #L1a12ca.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.commit:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a12dc.  v0:= v2.`org.simpleframework.xml.core.Caller.a` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a12e0.  if v0 == 0 then goto L1a12ee;
  #L1a12e4.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a12e8.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a12ee.  return @kind void;
}
procedure `void` `complete`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1300.  v0:= v2.`org.simpleframework.xml.core.Caller.d` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a1304.  if v0 == 0 then goto L1a1312;
  #L1a1308.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a130c.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a1312.  return @kind void;
}
procedure `void` `persist`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.persist:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1324.  v0:= v2.`org.simpleframework.xml.core.Caller.c` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a1328.  if v0 == 0 then goto L1a1336;
  #L1a132c.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a1330.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a1336.  return @kind void;
}
procedure `java.lang.Object` `replace`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.replace:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1228.  v0:= v2.`org.simpleframework.xml.core.Caller.e` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a122c.  if v0 == 0 then goto L1a123c;
  #L1a1230.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a1234.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a123a.  v3:= temp @kind object;
  #L1a123c.  return v3 @kind object;
}
procedure `java.lang.Object` `resolve`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.resolve:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1250.  v0:= v2.`org.simpleframework.xml.core.Caller.f` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a1254.  if v0 == 0 then goto L1a1264;
  #L1a1258.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a125c.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a1262.  v3:= temp @kind object;
  #L1a1264.  return v3 @kind object;
}
procedure `void` `validate`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.validate:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1348.  v0:= v2.`org.simpleframework.xml.core.Caller.b` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L1a134c.  if v0 == 0 then goto L1a135a;
  #L1a1350.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1a1354.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a135a.  return @kind void;
}
