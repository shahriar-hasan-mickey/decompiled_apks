record `org.simpleframework.xml.core.PrimitiveArray` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.ArrayFactory` `org.simpleframework.xml.core.PrimitiveArray.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveArray.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveArray.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1aef2c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aef32.  v0:= new `org.simpleframework.xml.core.ArrayFactory`;
  #L1aef36.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1aef3c.  v1.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` := v0 @kind object;
  #L1aef40.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L1aef44.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1aef4a.  v1.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L1aef4e.  v1.`org.simpleframework.xml.core.PrimitiveArray.c` @type ^`java.lang.String` := v5 @kind object;
  #L1aef52.  v1.`org.simpleframework.xml.core.PrimitiveArray.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L1aef56.  v1.`org.simpleframework.xml.core.PrimitiveArray.e` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L1aef5a.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1aede4.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L1aede8.  v1:= v2.`org.simpleframework.xml.core.PrimitiveArray.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aedec.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1aedf2.  v3:= temp;
  #L1aedf4.  return v3;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1aee50.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1aee56.  v3:= temp @kind object;
  #L1aee58.  if v3 != 0 then goto L1aee60;
  #L1aee5c.  v2:= 1I;
  #L1aee5e.  return v2;
  #L1aee60.  v0:= v1.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1aee64.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1aee6a.  goto L1aee50;
}
procedure `void` `c`(`org.simpleframework.xml.core.PrimitiveArray` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @AccessFlag PRIVATE {
    temp;

  #L1aefac.  call temp:= `get`(v2, v3) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L1aefb2.  v2:= temp @kind object;
  #L1aefb4.  if v2 == 0 then goto L1aefce;
  #L1aefb8.  call temp:= `a`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L1aefbe.  v3:= temp;
  #L1aefc0.  if v3 != 0 then goto L1aefce;
  #L1aefc4.  v3:= v0.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1aefc8.  call `write`(v3, v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1aefce.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1aee7c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L1aee80.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1aee86.  v0:= temp @kind object;
  #L1aee88.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L1aee8e.  v1:= temp @kind object;
  #L1aee90.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1aee96.  v0:= temp;
  #L1aee98.  if v0 != 0 then goto L1aeea6;
  #L1aee9c.  call temp:= `read`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1aeea2.  v3:= temp @kind object;
  #L1aeea4.  return v3 @kind object;
  #L1aeea6.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v5 @kind this, `org.simpleframework.xml.stream.InputNode` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1aeeb8.  call temp:= `getLength`(v7) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L1aeebe.  v0:= temp;
  #L1aeec0.  v1:= 0I;
  #L1aeec2.  v2:= 0I;
  #L1aeec4.  call temp:= `getPosition`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L1aeeca.  v3:= temp @kind object;
  #L1aeecc.  call temp:= `getNext`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1aeed2.  v4:= temp @kind object;
  #L1aeed4.  if v4 != 0 then goto L1aeeda;
  #L1aeed8.  return v7 @kind object;
  #L1aeeda.  if v2 >= v0 then goto L1aeef6;
  #L1aeede.  v3:= v5.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1aeee2.  call temp:= `read`(v3, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1aeee8.  v3:= temp @kind object;
  #L1aeeea.  call `set`(v7, v2, v3) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L1aeef0.  v2:= v2 + 1;
  #L1aeef4.  goto L1aeec4;
  #L1aeef6.  v6:= new `org.simpleframework.xml.core.ElementException`;
  #L1aeefa.  v7:= 2I;
  #L1aeefc.  v7:= new `java.lang.Object`[v7];
  #L1aef00.  v0:= v5.`org.simpleframework.xml.core.PrimitiveArray.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1aef04.  v7[v1]:= v0 @kind object;
  #L1aef08.  v0:= 1I;
  #L1aef0a.  v7[v0]:= v3 @kind object;
  #L1aef0e.  v0:= "Array length missing or incorrect for %s at %s" @kind object;
  #L1aef12.  call `<init>`(v6, v0, v7) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1aef18.  throw v6;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1aee08.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L1aee0c.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1aee12.  v0:= temp @kind object;
  #L1aee14.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1aee1a.  v1:= temp;
  #L1aee1c.  if v1 != 0 then goto L1aee3a;
  #L1aee20.  v1:= 0I;
  #L1aee22.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1aee28.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L1aee2e.  v0:= temp @kind object;
  #L1aee30.  call temp:= `b`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L1aee36.  v3:= temp;
  #L1aee38.  return v3;
  #L1aee3a.  v3:= 1I;
  #L1aee3c.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveArray` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1aef6c.  call temp:= `getLength`(v5) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L1aef72.  v0:= temp;
  #L1aef74.  v1:= 0I;
  #L1aef76.  if v1 >= v0 then goto L1aef98;
  #L1aef7a.  v2:= v3.`org.simpleframework.xml.core.PrimitiveArray.c` @type ^`java.lang.String` @kind object;
  #L1aef7e.  call temp:= `getChild`(v4, v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1aef84.  v2:= temp @kind object;
  #L1aef86.  if v2 != 0 then goto L1aef8c;
  #L1aef8a.  goto L1aef98;
  #L1aef8c.  call `c`(v3, v2, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @kind direct;
  #L1aef92.  v1:= v1 + 1;
  #L1aef96.  goto L1aef76;
  #L1aef98.  return @kind void;
}
