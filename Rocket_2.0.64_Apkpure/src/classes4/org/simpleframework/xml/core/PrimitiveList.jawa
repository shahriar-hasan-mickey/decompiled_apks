record `org.simpleframework.xml.core.PrimitiveList` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.CollectionFactory` `org.simpleframework.xml.core.PrimitiveList.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveList.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveList.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveList.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1af754.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af75a.  v0:= new `org.simpleframework.xml.core.CollectionFactory`;
  #L1af75e.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af764.  v1.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` := v0 @kind object;
  #L1af768.  v3:= new `org.simpleframework.xml.core.Primitive`;
  #L1af76c.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L1af772.  v1.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` := v3 @kind object;
  #L1af776.  v1.`org.simpleframework.xml.core.PrimitiveList.c` @type ^`java.lang.String` := v5 @kind object;
  #L1af77a.  v1.`org.simpleframework.xml.core.PrimitiveList.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L1af77e.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af600.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af604.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L1af608.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1af60e.  v3:= temp;
  #L1af610.  return v3;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1af698.  v4:= (`java.util.Collection`) v4 @kind object;
  #L1af69c.  call temp:= `getNext`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af6a2.  v0:= temp @kind object;
  #L1af6a4.  if v0 != 0 then goto L1af6aa;
  #L1af6a8.  return v4 @kind object;
  #L1af6aa.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af6ae.  call temp:= `read`(v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L1af6b4.  v0:= temp @kind object;
  #L1af6b6.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1af6bc.  goto L1af69c;
}
procedure `boolean` `c`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1af66c.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L1af672.  v3:= temp @kind object;
  #L1af674.  if v3 != 0 then goto L1af67c;
  #L1af678.  v2:= 1I;
  #L1af67a.  return v2;
  #L1af67c.  v0:= v1.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af680.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1af686.  goto L1af66c;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af6d0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af6d4.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1af6da.  v0:= temp @kind object;
  #L1af6dc.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L1af6e2.  v1:= temp @kind object;
  #L1af6e4.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1af6ea.  v0:= temp;
  #L1af6ec.  if v0 != 0 then goto L1af6fa;
  #L1af6f0.  call temp:= `b`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1af6f6.  v3:= temp @kind object;
  #L1af6f8.  return v3 @kind object;
  #L1af6fa.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af70c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af710.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1af716.  v0:= temp @kind object;
  #L1af718.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1af71e.  v1:= temp;
  #L1af720.  if v1 == 0 then goto L1af72e;
  #L1af724.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L1af72a.  v3:= temp @kind object;
  #L1af72c.  return v3 @kind object;
  #L1af72e.  call temp:= `setInstance`(v0, v4) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1af734.  if v4 == 0 then goto L1af742;
  #L1af738.  call temp:= `b`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1af73e.  v3:= temp @kind object;
  #L1af740.  return v3 @kind object;
  #L1af742.  return v4 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1af624.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L1af628.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L1af62e.  v0:= temp @kind object;
  #L1af630.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L1af636.  v1:= temp;
  #L1af638.  if v1 != 0 then goto L1af656;
  #L1af63c.  v1:= 0I;
  #L1af63e.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1af644.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L1af64a.  v0:= temp @kind object;
  #L1af64c.  call temp:= `c`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L1af652.  v3:= temp;
  #L1af654.  return v3;
  #L1af656.  v3:= 1I;
  #L1af658.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1af790.  v5:= (`java.util.Collection`) v5 @kind object;
  #L1af794.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1af79a.  v5:= temp @kind object;
  #L1af79c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1af7a2.  v0:= temp;
  #L1af7a4.  if v0 == 0 then goto L1af7d8;
  #L1af7a8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1af7ae.  v0:= temp @kind object;
  #L1af7b0.  if v0 == 0 then goto L1af79c;
  #L1af7b4.  v1:= v3.`org.simpleframework.xml.core.PrimitiveList.c` @type ^`java.lang.String` @kind object;
  #L1af7b8.  call temp:= `getChild`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L1af7be.  v1:= temp @kind object;
  #L1af7c0.  call temp:= `a`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L1af7c6.  v2:= temp;
  #L1af7c8.  if v2 != 0 then goto L1af79c;
  #L1af7cc.  v2:= v3.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L1af7d0.  call `write`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L1af7d6.  goto L1af79c;
  #L1af7d8.  return @kind void;
}
