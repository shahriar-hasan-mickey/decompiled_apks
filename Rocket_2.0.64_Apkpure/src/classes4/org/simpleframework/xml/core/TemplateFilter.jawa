record `org.simpleframework.xml.core.TemplateFilter` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.filter.Filter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.TemplateFilter.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.filter.Filter` `org.simpleframework.xml.core.TemplateFilter.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.TemplateFilter` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.filter.Filter` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateFilter;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/filter/Filter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b3020.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3026.  v0.`org.simpleframework.xml.core.TemplateFilter.a` @type ^`org.simpleframework.xml.core.Context` := v1 @kind object;
  #L1b302a.  v0.`org.simpleframework.xml.core.TemplateFilter.b` @type ^`org.simpleframework.xml.filter.Filter` := v2 @kind object;
  #L1b302e.  return @kind void;
}
procedure `java.lang.String` `replace`(`org.simpleframework.xml.core.TemplateFilter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateFilter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2fe8.  v0:= v1.`org.simpleframework.xml.core.TemplateFilter.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L1b2fec.  call temp:= `getAttribute`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getAttribute:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b2ff2.  v0:= temp @kind object;
  #L1b2ff4.  if v0 == 0 then goto L1b3002;
  #L1b2ff8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2ffe.  v2:= temp @kind object;
  #L1b3000.  return v2 @kind object;
  #L1b3002.  v0:= v1.`org.simpleframework.xml.core.TemplateFilter.b` @type ^`org.simpleframework.xml.filter.Filter` @kind object;
  #L1b3006.  call temp:= `replace`(v0, v2) @signature `Lorg/simpleframework/xml/filter/Filter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b300c.  v2:= temp @kind object;
  #L1b300e.  return v2 @kind object;
}
