record `org.simpleframework.xml.convert.ConverterFactory` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.convert.ConverterFactory.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19fa08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19fa0e.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L19fa12.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L19fa18.  v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L19fa1c.  return @kind void;
}
procedure `java.lang.reflect.Constructor` `a`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19f8e0.  v0:= 0I;
  #L19f8e2.  v0:= new `java.lang.Class`[v0];
  #L19f8e6.  call temp:= `getDeclaredConstructor`(v2, v0) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L19f8ec.  v2:= temp @kind object;
  #L19f8ee.  call temp:= `isAccessible`(v2) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L19f8f4.  v0:= temp;
  #L19f8f6.  if v0 != 0 then goto L19f902;
  #L19f8fa.  v0:= 1I;
  #L19f8fc.  call `setAccessible`(v2, v0) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L19f902.  return v2 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `b`(`org.simpleframework.xml.convert.ConverterFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L19f914.  call temp:= `a`(v3, v4) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind direct;
  #L19f91a.  v0:= temp @kind object;
  #L19f91c.  if v0 == 0 then goto L19f92a;
  #L19f920.  call temp:= `c`(v3, v4, v0) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.c:(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L19f926.  v4:= temp @kind object;
  #L19f928.  return v4 @kind object;
  #L19f92a.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L19f92e.  v1:= 1I;
  #L19f930.  v1:= new `java.lang.Object`[v1];
  #L19f934.  v2:= 0I;
  #L19f936.  v1[v2]:= v4 @kind object;
  #L19f93a.  v4:= "No default constructor for %s" @kind object;
  #L19f93e.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L19f944.  throw v0;
}
procedure `org.simpleframework.xml.convert.Converter` `c`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.reflect.Constructor` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.c:(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19f958.  v0:= 0I;
  #L19f95a.  v0:= new `java.lang.Object`[v0];
  #L19f95e.  call temp:= `newInstance`(v3, v0) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L19f964.  v3:= temp @kind object;
  #L19f966.  v3:= (`org.simpleframework.xml.convert.Converter`) v3 @kind object;
  #L19f96a.  if v3 == 0 then goto L19f978;
  #L19f96e.  v0:= v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L19f972.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L19f978.  return v3 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getInstance`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f98c.  v0:= v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L19f990.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19f996.  v0:= temp @kind object;
  #L19f998.  v0:= (`org.simpleframework.xml.convert.Converter`) v0 @kind object;
  #L19f99c.  if v0 != 0 then goto L19f9aa;
  #L19f9a0.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L19f9a6.  v2:= temp @kind object;
  #L19f9a8.  return v2 @kind object;
  #L19f9aa.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getInstance`(`org.simpleframework.xml.convert.ConverterFactory` v3 @kind this, `org.simpleframework.xml.convert.Convert` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19f9bc.  call temp:= `value`(v4) @signature `Lorg/simpleframework/xml/convert/Convert;.value:()Ljava/lang/Class;` @kind interface;
  #L19f9c2.  v4:= temp @kind object;
  #L19f9c4.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L19f9ca.  v0:= temp;
  #L19f9cc.  if v0 != 0 then goto L19f9da;
  #L19f9d0.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L19f9d6.  v4:= temp @kind object;
  #L19f9d8.  return v4 @kind object;
  #L19f9da.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L19f9de.  v1:= 1I;
  #L19f9e0.  v1:= new `java.lang.Object`[v1];
  #L19f9e4.  v2:= 0I;
  #L19f9e6.  v1[v2]:= v4 @kind object;
  #L19f9ea.  v4:= "Can not instantiate %s" @kind object;
  #L19f9ee.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L19f9f4.  throw v0;
}
