record `org.simpleframework.xml.convert.RegistryStrategy` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.strategy.Strategy` @kind interface {
  `org.simpleframework.xml.convert.Registry` `org.simpleframework.xml.convert.RegistryStrategy.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Strategy` `org.simpleframework.xml.convert.RegistryStrategy.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.convert.Registry` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19fef0.  v0:= new `org.simpleframework.xml.strategy.TreeStrategy`;
  #L19fef4.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:()V` @kind direct;
  #L19fefa.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;Lorg/simpleframework/xml/strategy/Strategy;)V` @kind direct;
  #L19ff00.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.convert.Registry` v1 @kind object, `org.simpleframework.xml.strategy.Strategy` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.<init>:(Lorg/simpleframework/xml/convert/Registry;Lorg/simpleframework/xml/strategy/Strategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19ff14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19ff1a.  v0.`org.simpleframework.xml.convert.RegistryStrategy.a` @type ^`org.simpleframework.xml.convert.Registry` := v1 @kind object;
  #L19ff1e.  v0.`org.simpleframework.xml.convert.RegistryStrategy.b` @type ^`org.simpleframework.xml.strategy.Strategy` := v2 @kind object;
  #L19ff22.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Value` v1 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.a:(Lorg/simpleframework/xml/strategy/Value;)Z` @AccessFlag PRIVATE {
    temp;

  #L19fd78.  if v1 == 0 then goto L19fd8c;
  #L19fd7c.  call temp:= `isReference`(v1) @signature `Lorg/simpleframework/xml/strategy/Value;.isReference:()Z` @kind interface;
  #L19fd82.  v1:= temp;
  #L19fd84.  if v1 == 0 then goto L19fd8c;
  #L19fd88.  v1:= 1I;
  #L19fd8a.  goto L19fd8e;
  #L19fd8c.  v1:= 0I;
  #L19fd8e.  return v1;
}
procedure `org.simpleframework.xml.convert.Converter` `b`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;

  #L19fe04.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fe0a.  v1:= temp @kind object;
  #L19fe0c.  if v2 == 0 then goto L19fe18;
  #L19fe10.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L19fe16.  v1:= temp @kind object;
  #L19fe18.  v2:= v0.`org.simpleframework.xml.convert.RegistryStrategy.a` @type ^`org.simpleframework.xml.convert.Registry` @kind object;
  #L19fe1c.  call temp:= `lookup`(v2, v1) @signature `Lorg/simpleframework/xml/convert/Registry;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L19fe22.  v1:= temp @kind object;
  #L19fe24.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `c`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.c:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;

  #L19fe38.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fe3e.  v1:= temp @kind object;
  #L19fe40.  if v2 == 0 then goto L19fe4c;
  #L19fe44.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fe4a.  v1:= temp @kind object;
  #L19fe4c.  v2:= v0.`org.simpleframework.xml.convert.RegistryStrategy.a` @type ^`org.simpleframework.xml.convert.Registry` @kind object;
  #L19fe50.  call temp:= `lookup`(v2, v1) @signature `Lorg/simpleframework/xml/convert/Registry;.lookup:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L19fe56.  v1:= temp @kind object;
  #L19fe58.  return v1 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `d`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.d:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19fea0.  call temp:= `c`(v1, v2, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.c:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L19fea6.  v0:= temp @kind object;
  #L19fea8.  call temp:= `getNode`(v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.getNode:()Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L19feae.  v3:= temp @kind object;
  #L19feb0.  v3:= (`org.simpleframework.xml.stream.InputNode`) v3 @kind object;
  #L19feb4.  if v0 == 0 then goto L19fede;
  #L19feb8.  call temp:= `read`(v0, v3) @signature `Lorg/simpleframework/xml/convert/Converter;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind interface;
  #L19febe.  v3:= temp @kind object;
  #L19fec0.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fec6.  v2:= temp @kind object;
  #L19fec8.  if v4 == 0 then goto L19fed2;
  #L19fecc.  call `setValue`(v4, v3) @signature `Lorg/simpleframework/xml/strategy/Value;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L19fed2.  v0:= new `org.simpleframework.xml.convert.Reference`;
  #L19fed6.  call `<init>`(v0, v4, v3, v2) @signature `Lorg/simpleframework/xml/convert/Reference;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Object;Ljava/lang/Class;)V` @kind direct;
  #L19fedc.  return v0 @kind object;
  #L19fede.  return v4 @kind object;
}
procedure `boolean` `e`(`org.simpleframework.xml.convert.RegistryStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Z` @AccessFlag PRIVATE {
    temp;

  #L19fda0.  call temp:= `b`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L19fda6.  v1:= temp @kind object;
  #L19fda8.  call temp:= `getNode`(v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.getNode:()Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L19fdae.  v3:= temp @kind object;
  #L19fdb0.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L19fdb4.  if v1 == 0 then goto L19fdc2;
  #L19fdb8.  call `write`(v1, v3, v2) @signature `Lorg/simpleframework/xml/convert/Converter;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind interface;
  #L19fdbe.  v1:= 1I;
  #L19fdc0.  return v1;
  #L19fdc2.  v1:= 0I;
  #L19fdc4.  return v1;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19fe6c.  v0:= v1.`org.simpleframework.xml.convert.RegistryStrategy.b` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L19fe70.  call temp:= `read`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/Strategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L19fe76.  v4:= temp @kind object;
  #L19fe78.  call temp:= `a`(v1, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.a:(Lorg/simpleframework/xml/strategy/Value;)Z` @kind direct;
  #L19fe7e.  v0:= temp;
  #L19fe80.  if v0 == 0 then goto L19fe86;
  #L19fe84.  return v4 @kind object;
  #L19fe86.  call temp:= `d`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.d:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L19fe8c.  v2:= temp @kind object;
  #L19fe8e.  return v2 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.convert.RegistryStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19fdd8.  v0:= v1.`org.simpleframework.xml.convert.RegistryStrategy.b` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L19fddc.  call temp:= `write`(v0, v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/Strategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @kind interface;
  #L19fde2.  v5:= temp;
  #L19fde4.  if v5 != 0 then goto L19fdf2;
  #L19fde8.  call temp:= `e`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/convert/RegistryStrategy;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Z` @kind direct;
  #L19fdee.  v2:= temp;
  #L19fdf0.  return v2;
  #L19fdf2.  return v5;
}
