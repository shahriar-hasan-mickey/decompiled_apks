record `org.simpleframework.xml.convert.ConverterScanner` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.convert.ConverterFactory` `org.simpleframework.xml.convert.ConverterScanner.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.convert.ScannerBuilder` `org.simpleframework.xml.convert.ConverterScanner.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19fbf0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19fbf6.  v0:= new `org.simpleframework.xml.convert.ConverterFactory`;
  #L19fbfa.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.<init>:()V` @kind direct;
  #L19fc00.  v1.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` := v0 @kind object;
  #L19fc04.  v0:= new `org.simpleframework.xml.convert.ScannerBuilder`;
  #L19fc08.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.<init>:()V` @kind direct;
  #L19fc0e.  v1.`org.simpleframework.xml.convert.ConverterScanner.b` @type ^`org.simpleframework.xml.convert.ScannerBuilder` := v0 @kind object;
  #L19fc12.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `a`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19fa80.  v0:= v1.`org.simpleframework.xml.convert.ConverterScanner.b` @type ^`org.simpleframework.xml.convert.ScannerBuilder` @kind object;
  #L19fa84.  call temp:= `build`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.build:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Scanner;` @kind virtual;
  #L19fa8a.  v2:= temp @kind object;
  #L19fa8c.  call temp:= `scan`(v2, v3) @signature `Lorg/simpleframework/xml/convert/Scanner;.scan:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L19fa92.  v2:= temp @kind object;
  #L19fa94.  return v2 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `b`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L19faa8.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L19faac.  call temp:= `a`(v3, v4, v0) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L19fab2.  v0:= temp @kind object;
  #L19fab4.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L19fab8.  if v0 == 0 then goto L19faee;
  #L19fabc.  v1:= constclass @type ^`org.simpleframework.xml.Root` @kind object;
  #L19fac0.  call temp:= `a`(v3, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L19fac6.  v1:= temp @kind object;
  #L19fac8.  v1:= (`org.simpleframework.xml.Root`) v1 @kind object;
  #L19facc.  if v1 == 0 then goto L19fad2;
  #L19fad0.  goto L19faee;
  #L19fad2.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L19fad6.  v1:= 1I;
  #L19fad8.  v1:= new `java.lang.Object`[v1];
  #L19fadc.  v2:= 0I;
  #L19fade.  v1[v2]:= v4 @kind object;
  #L19fae2.  v4:= "Root annotation required for %s" @kind object;
  #L19fae6.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L19faec.  throw v0;
  #L19faee.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `c`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.c:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L19fb00.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L19fb04.  call temp:= `getAnnotation`(v4, v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L19fb0a.  v0:= temp @kind object;
  #L19fb0c.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L19fb10.  if v0 == 0 then goto L19fb46;
  #L19fb14.  v1:= constclass @type ^`org.simpleframework.xml.Element` @kind object;
  #L19fb18.  call temp:= `getAnnotation`(v4, v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L19fb1e.  v1:= temp @kind object;
  #L19fb20.  v1:= (`org.simpleframework.xml.Element`) v1 @kind object;
  #L19fb24.  if v1 == 0 then goto L19fb2a;
  #L19fb28.  goto L19fb46;
  #L19fb2a.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L19fb2e.  v1:= 1I;
  #L19fb30.  v1:= new `java.lang.Object`[v1];
  #L19fb34.  v2:= 0I;
  #L19fb36.  v1[v2]:= v4 @kind object;
  #L19fb3a.  v4:= "Element annotation required for %s" @kind object;
  #L19fb3e.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L19fb44.  throw v0;
  #L19fb46.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `d`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;

  #L19fb58.  call temp:= `c`(v0, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.c:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L19fb5e.  v1:= temp @kind object;
  #L19fb60.  if v1 != 0 then goto L19fb6c;
  #L19fb64.  call temp:= `b`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L19fb6a.  v1:= temp @kind object;
  #L19fb6c.  return v1 @kind object;
}
procedure `java.lang.Class` `e`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L19fa30.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fa36.  v1:= temp @kind object;
  #L19fa38.  if v2 == 0 then goto L19fa44;
  #L19fa3c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L19fa42.  v1:= temp @kind object;
  #L19fa44.  return v1 @kind object;
}
procedure `java.lang.Class` `f`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.f:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L19fa58.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fa5e.  v1:= temp @kind object;
  #L19fa60.  if v2 == 0 then goto L19fa6c;
  #L19fa64.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L19fa6a.  v1:= temp @kind object;
  #L19fa6c.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L19fb80.  call temp:= `e`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @kind direct;
  #L19fb86.  v2:= temp @kind object;
  #L19fb88.  call temp:= `d`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L19fb8e.  v1:= temp @kind object;
  #L19fb90.  if v1 == 0 then goto L19fba2;
  #L19fb94.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L19fb98.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L19fb9e.  v1:= temp @kind object;
  #L19fba0.  return v1 @kind object;
  #L19fba2.  v1:= 0I;
  #L19fba4.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L19fbb8.  call temp:= `f`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.f:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @kind direct;
  #L19fbbe.  v2:= temp @kind object;
  #L19fbc0.  call temp:= `d`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L19fbc6.  v1:= temp @kind object;
  #L19fbc8.  if v1 == 0 then goto L19fbda;
  #L19fbcc.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L19fbd0.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L19fbd6.  v1:= temp @kind object;
  #L19fbd8.  return v1 @kind object;
  #L19fbda.  v1:= 0I;
  #L19fbdc.  return v1 @kind object;
}
