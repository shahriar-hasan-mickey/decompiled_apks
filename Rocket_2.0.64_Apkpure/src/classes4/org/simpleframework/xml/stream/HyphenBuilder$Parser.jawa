record `org.simpleframework.xml.stream.HyphenBuilder$Parser` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Splitter` @kind class {
  `org.simpleframework.xml.stream.HyphenBuilder` `org.simpleframework.xml.stream.HyphenBuilder$Parser.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.HyphenBuilder$Parser` v0 @kind this, `org.simpleframework.xml.stream.HyphenBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b7180.  v0.`org.simpleframework.xml.stream.HyphenBuilder$Parser.this$0` @type ^`org.simpleframework.xml.stream.HyphenBuilder` := v1 @kind object;
  #L1b7184.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b718a.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.HyphenBuilder$Parser` v0 @kind this, `org.simpleframework.xml.stream.HyphenBuilder` v1 @kind object, `java.lang.String` v2 @kind object, `org.simpleframework.xml.stream.HyphenBuilder$1` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/HyphenBuilder$1;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b719c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;)V` @kind direct;
  #L1b71a2.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.stream.HyphenBuilder$Parser` v1 @kind this, `char`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.commit:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b71b4.  v0:= v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1b71b8.  call temp:= `append`(v0, v2, v3, v4) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b71be.  v3:= v3 + v4 @kind int;
  #L1b71c0.  v2:= v1.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b71c4.  if v3 >= v2 then goto L1b71d6;
  #L1b71c8.  v2:= v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1b71cc.  v3:= 45I;
  #L1b71d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b71d6.  return @kind void;
}
procedure `void` `parse`(`org.simpleframework.xml.stream.HyphenBuilder$Parser` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.parse:([CII)V` @AccessFlag PUBLIC {
    temp;

  #L1b71e8.  v3:= v1[v2] @kind char;
  #L1b71ec.  call temp:= `toLower`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.toLower:(C)C` @kind virtual;
  #L1b71f2.  v3:= temp;
  #L1b71f4.  v1[v2]:= v3 @kind char;
  #L1b71f8.  return @kind void;
}
