record `org.simpleframework.xml.stream.Splitter` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.Splitter.builder` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.count` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.off` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.stream.Splitter.text` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Splitter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Splitter;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b9d80.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b9d86.  v0:= new `java.lang.StringBuilder`;
  #L1b9d8a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b9d90.  v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L1b9d94.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L1b9d9a.  v2:= temp @kind object;
  #L1b9d9c.  v1.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] := v2 @kind object;
  #L1b9da0.  v2:= length @variable v2;
  #L1b9da2.  v1.`org.simpleframework.xml.stream.Splitter.count` @type ^`int` := v2;
  #L1b9da6.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.stream.Splitter` v7 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b9b78.  v0:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9b7c.  v1:= 0I;
  #L1b9b7e.  v2:= 0I;
  #L1b9b80.  v3:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9b84.  if v0 >= v3 then goto L1b9ba6;
  #L1b9b88.  v3:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9b8c.  v3:= v3[v0] @kind char;
  #L1b9b90.  call temp:= `e`(v7, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L1b9b96.  v3:= temp;
  #L1b9b98.  if v3 == 0 then goto L1b9ba6;
  #L1b9b9c.  v2:= v2 + 1;
  #L1b9ba0.  v0:= v0 + 1;
  #L1b9ba4.  goto L1b9b80;
  #L1b9ba6.  v3:= 1I;
  #L1b9ba8.  if v2 <= v3 then goto L1b9be6;
  #L1b9bac.  v4:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9bb0.  if v0 >= v4 then goto L1b9bd0;
  #L1b9bb4.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9bb8.  v5:= v0 + -1;
  #L1b9bbc.  v4:= v4[v5] @kind char;
  #L1b9bc0.  call temp:= `e`(v7, v4) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L1b9bc6.  v4:= temp;
  #L1b9bc8.  if v4 == 0 then goto L1b9bd0;
  #L1b9bcc.  v0:= v0 + -1;
  #L1b9bd0.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9bd4.  v5:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9bd8.  v6:= v0 - v5 @kind int;
  #L1b9bdc.  call `commit`(v7, v4, v5, v6) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L1b9be2.  v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L1b9be6.  if v2 <= v3 then goto L1b9bec;
  #L1b9bea.  v1:= 1I;
  #L1b9bec.  return v1;
}
procedure `boolean` `b`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.b:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1b9c00.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L1b9c06.  v1:= temp;
  #L1b9c08.  return v1;
}
procedure `boolean` `c`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.c:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1b9c1c.  call temp:= `isLetter`(v1) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L1b9c22.  v1:= temp;
  #L1b9c24.  return v1;
}
procedure `boolean` `d`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.d:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1b9c38.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L1b9c3e.  v1:= temp;
  #L1b9c40.  v1:= v1 ^~ 1;
  #L1b9c44.  return v1;
}
procedure `boolean` `e`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L1b9c58.  call temp:= `isUpperCase`(v1) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L1b9c5e.  v1:= temp;
  #L1b9c60.  return v1;
}
procedure `boolean` `f`(`org.simpleframework.xml.stream.Splitter` v6 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.f:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b9c74.  v0:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9c78.  v1:= 0I;
  #L1b9c7a.  v2:= 0I;
  #L1b9c7c.  v3:= v6.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9c80.  if v0 >= v3 then goto L1b9ca2;
  #L1b9c84.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9c88.  v3:= v3[v0] @kind char;
  #L1b9c8c.  call temp:= `b`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.b:(C)Z` @kind direct;
  #L1b9c92.  v3:= temp;
  #L1b9c94.  if v3 == 0 then goto L1b9ca2;
  #L1b9c98.  v2:= v2 + 1;
  #L1b9c9c.  v0:= v0 + 1;
  #L1b9ca0.  goto L1b9c7c;
  #L1b9ca2.  if v2 <= 0 then goto L1b9cb8;
  #L1b9ca6.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9caa.  v4:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9cae.  v5:= v0 - v4 @kind int;
  #L1b9cb2.  call `commit`(v6, v3, v4, v5) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L1b9cb8.  v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L1b9cbc.  if v2 <= 0 then goto L1b9cc2;
  #L1b9cc0.  v1:= 1I;
  #L1b9cc2.  return v1;
}
procedure `void` `g`(`org.simpleframework.xml.stream.Splitter` v4 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b9db8.  v0:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9dbc.  v1:= v4.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9dc0.  if v0 >= v1 then goto L1b9df6;
  #L1b9dc4.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9dc8.  v1:= v1[v0] @kind char;
  #L1b9dcc.  call temp:= `c`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.c:(C)Z` @kind direct;
  #L1b9dd2.  v2:= temp;
  #L1b9dd4.  if v2 != 0 then goto L1b9dda;
  #L1b9dd8.  goto L1b9df6;
  #L1b9dda.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9dde.  if v0 <= v2 then goto L1b9df0;
  #L1b9de2.  call temp:= `e`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L1b9de8.  v1:= temp;
  #L1b9dea.  if v1 == 0 then goto L1b9df0;
  #L1b9dee.  goto L1b9df6;
  #L1b9df0.  v0:= v0 + 1;
  #L1b9df4.  goto L1b9dbc;
  #L1b9df6.  v1:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9dfa.  if v0 <= v1 then goto L1b9e1e;
  #L1b9dfe.  v2:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9e02.  v3:= v0 - v1 @kind int;
  #L1b9e06.  call `parse`(v4, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @kind virtual;
  #L1b9e0c.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9e10.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9e14.  v3:= v0 - v2 @kind int;
  #L1b9e18.  call `commit`(v4, v1, v2, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L1b9e1e.  v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L1b9e22.  return @kind void;
}
procedure `void` `commit`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `parse`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.stream.Splitter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b9d0c.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9d10.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9d14.  if v0 >= v1 then goto L1b9d62;
  #L1b9d18.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9d1c.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L1b9d20.  if v0 >= v1 then goto L1b9d48;
  #L1b9d24.  v1:= v2.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L1b9d28.  v0:= v1[v0] @kind char;
  #L1b9d2c.  call temp:= `d`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Splitter;.d:(C)Z` @kind direct;
  #L1b9d32.  v0:= temp;
  #L1b9d34.  if v0 != 0 then goto L1b9d3a;
  #L1b9d38.  goto L1b9d48;
  #L1b9d3a.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L1b9d3e.  v0:= v0 + 1;
  #L1b9d42.  v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L1b9d46.  goto L1b9d18;
  #L1b9d48.  call temp:= `a`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.a:()Z` @kind direct;
  #L1b9d4e.  v0:= temp;
  #L1b9d50.  if v0 != 0 then goto L1b9d0c;
  #L1b9d54.  call `g`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.g:()V` @kind direct;
  #L1b9d5a.  call temp:= `f`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.f:()Z` @kind direct;
  #L1b9d60.  goto L1b9d0c;
  #L1b9d62.  v0:= v2.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L1b9d66.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b9d6c.  v0:= temp @kind object;
  #L1b9d6e.  return v0 @kind object;
}
procedure `char` `toLower`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toLower:(C)C` @AccessFlag PUBLIC {
    temp;

  #L1b9cd4.  call temp:= `toLowerCase`(v1) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L1b9cda.  v1:= temp;
  #L1b9cdc.  return v1;
}
procedure `char` `toUpper`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @AccessFlag PUBLIC {
    temp;

  #L1b9cf0.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L1b9cf6.  v1:= temp;
  #L1b9cf8.  return v1;
}
