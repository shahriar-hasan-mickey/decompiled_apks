record `org.simpleframework.xml.stream.NodeWriter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.OutputStack` `org.simpleframework.xml.stream.NodeWriter.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Formatter` `org.simpleframework.xml.stream.NodeWriter.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `org.simpleframework.xml.stream.NodeWriter.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.stream.NodeWriter.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b84f4.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L1b84f8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L1b84fe.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b8504.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b8518.  v0:= 0I;
  #L1b851a.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @kind direct;
  #L1b8520.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object, `boolean` v4 ) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1b8534.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b853a.  v0:= new `org.simpleframework.xml.stream.Formatter`;
  #L1b853e.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b8544.  v1.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` := v0 @kind object;
  #L1b8548.  v2:= new `java.util.HashSet`;
  #L1b854c.  call `<init>`(v2) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L1b8552.  v1.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` := v2 @kind object;
  #L1b8556.  v3:= new `org.simpleframework.xml.stream.OutputStack`;
  #L1b855a.  call `<init>`(v3, v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.<init>:(Ljava/util/Set;)V` @kind direct;
  #L1b8560.  v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` := v3 @kind object;
  #L1b8564.  v1.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` := v4 @kind boolean;
  #L1b8568.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.NodeWriter` v6 @kind this, `org.simpleframework.xml.stream.OutputNode` v7 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.a:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b862c.  call temp:= `getAttributes`(v7) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getAttributes:()Lorg/simpleframework/xml/stream/NodeMap;` @kind interface;
  #L1b8632.  v0:= temp @kind object;
  #L1b8634.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b863a.  v1:= temp @kind object;
  #L1b863c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b8642.  v2:= temp;
  #L1b8644.  if v2 == 0 then goto L1b8680;
  #L1b8648.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b864e.  v2:= temp @kind object;
  #L1b8650.  v2:= (`java.lang.String`) v2 @kind object;
  #L1b8654.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/stream/NodeMap;.get:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b865a.  v3:= temp @kind object;
  #L1b865c.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L1b8660.  call temp:= `getValue`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b8666.  v4:= temp @kind object;
  #L1b8668.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L1b866c.  call temp:= `getPrefix`(v3, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L1b8672.  v3:= temp @kind object;
  #L1b8674.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b8678.  call `writeAttribute`(v5, v2, v4, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L1b867e.  goto L1b863c;
  #L1b8680.  v0:= v6.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` @kind object;
  #L1b8684.  call temp:= `remove`(v0, v7) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1b868a.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.b:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b869c.  call temp:= `getComment`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getComment:()Ljava/lang/String;` @kind interface;
  #L1b86a2.  v2:= temp @kind object;
  #L1b86a4.  if v2 == 0 then goto L1b86b2;
  #L1b86a8.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b86ac.  call `writeComment`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeComment:(Ljava/lang/String;)V` @kind virtual;
  #L1b86b2.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.stream.NodeWriter` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b86c4.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1b86ca.  v0:= temp @kind object;
  #L1b86cc.  v1:= v3.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L1b86d0.  call temp:= `getPrefix`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L1b86d6.  v1:= temp @kind object;
  #L1b86d8.  call temp:= `getValue`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b86de.  v2:= temp @kind object;
  #L1b86e0.  if v2 == 0 then goto L1b86ea;
  #L1b86e4.  call `h`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b86ea.  if v0 == 0 then goto L1b8702;
  #L1b86ee.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b86f2.  call `writeEnd`(v4, v0, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeEnd:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L1b86f8.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b86fc.  call `flush`(v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @kind virtual;
  #L1b8702.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.d:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b8714.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L1b8718.  call temp:= `getPrefix`(v3, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L1b871e.  v0:= temp @kind object;
  #L1b8720.  call temp:= `getName`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L1b8726.  v3:= temp @kind object;
  #L1b8728.  if v3 == 0 then goto L1b8736;
  #L1b872c.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b8730.  call `writeStart`(v1, v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeStart:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L1b8736.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.stream.NodeWriter` v4 @kind this, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.e:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b8748.  call temp:= `getNamespaces`(v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getNamespaces:()Lorg/simpleframework/xml/stream/NamespaceMap;` @kind interface;
  #L1b874e.  v5:= temp @kind object;
  #L1b8750.  call temp:= `iterator`(v5) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b8756.  v0:= temp @kind object;
  #L1b8758.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b875e.  v1:= temp;
  #L1b8760.  if v1 == 0 then goto L1b8784;
  #L1b8764.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b876a.  v1:= temp @kind object;
  #L1b876c.  v1:= (`java.lang.String`) v1 @kind object;
  #L1b8770.  call temp:= `getPrefix`(v5, v1) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.getPrefix:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L1b8776.  v2:= temp @kind object;
  #L1b8778.  v3:= v4.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b877c.  call `writeNamespace`(v3, v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeNamespace:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L1b8782.  goto L1b8758;
  #L1b8784.  return @kind void;
}
procedure `org.simpleframework.xml.stream.OutputNode` `f`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b84b8.  v0:= new `org.simpleframework.xml.stream.OutputElement`;
  #L1b84bc.  call `<init>`(v0, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/OutputElement;.<init>:(Lorg/simpleframework/xml/stream/OutputNode;Lorg/simpleframework/xml/stream/NodeWriter;Ljava/lang/String;)V` @kind direct;
  #L1b84c2.  if v3 == 0 then goto L1b84d4;
  #L1b84c6.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b84ca.  call temp:= `push`(v2, v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.push:(Lorg/simpleframework/xml/stream/OutputNode;)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b84d0.  v2:= temp @kind object;
  #L1b84d2.  return v2 @kind object;
  #L1b84d4.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L1b84d8.  v3:= "Can not have a null name" @kind object;
  #L1b84dc.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b84e2.  throw v2;
}
procedure `void` `g`(`org.simpleframework.xml.stream.NodeWriter` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;

  #L1b8798.  call `b`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.b:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b879e.  call `d`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.d:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b87a4.  call `a`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.a:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b87aa.  call `e`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.e:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b87b0.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.stream.NodeWriter` v5 @kind this, `org.simpleframework.xml.stream.OutputNode` v6 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b87c4.  call temp:= `getMode`(v6) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L1b87ca.  v0:= temp @kind object;
  #L1b87cc.  call temp:= `getValue`(v6) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b87d2.  v1:= temp @kind object;
  #L1b87d4.  if v1 == 0 then goto L1b881a;
  #L1b87d8.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b87dc.  call temp:= `iterator`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1b87e2.  v2:= temp @kind object;
  #L1b87e4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b87ea.  v3:= temp;
  #L1b87ec.  if v3 == 0 then goto L1b8810;
  #L1b87f0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b87f6.  v3:= temp @kind object;
  #L1b87f8.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L1b87fc.  v4:= `@@org.simpleframework.xml.stream.Mode.INHERIT` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L1b8800.  if v0 == v4 then goto L1b8806;
  #L1b8804.  goto L1b8810;
  #L1b8806.  call temp:= `getMode`(v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L1b880c.  v0:= temp @kind object;
  #L1b880e.  goto L1b87e4;
  #L1b8810.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b8814.  call `writeText`(v2, v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @kind virtual;
  #L1b881a.  v0:= 0I;
  #L1b881c.  call `setValue`(v6, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L1b8822.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.commit:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b857c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8580.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b8586.  v0:= temp;
  #L1b8588.  if v0 == 0 then goto L1b85de;
  #L1b858c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8590.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b8596.  v0:= temp @kind object;
  #L1b8598.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1b859e.  v1:= temp;
  #L1b85a0.  if v1 != 0 then goto L1b85aa;
  #L1b85a4.  call `g`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b85aa.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b85ae.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b85b4.  v0:= temp @kind object;
  #L1b85b6.  if v0 == v3 then goto L1b85ce;
  #L1b85ba.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b85be.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b85c4.  v0:= temp @kind object;
  #L1b85c6.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b85cc.  goto L1b85aa;
  #L1b85ce.  call `c`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b85d4.  v3:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b85d8.  call temp:= `pop`(v3) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b85de.  return @kind void;
}
procedure `boolean` `isCommitted`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b8390.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` @kind object;
  #L1b8394.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1b839a.  v2:= temp;
  #L1b839c.  v2:= v2 ^~ 1;
  #L1b83a0.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isRoot:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b83b4.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b83b8.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.bottom:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b83be.  v0:= temp @kind object;
  #L1b83c0.  if v0 != v2 then goto L1b83c8;
  #L1b83c4.  v2:= 1I;
  #L1b83c6.  goto L1b83ca;
  #L1b83c8.  v2:= 0I;
  #L1b83ca.  return v2;
}
procedure `void` `remove`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.remove:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b85f0.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b85f4.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b85fa.  v0:= temp @kind object;
  #L1b85fc.  if v0 != v2 then goto L1b860c;
  #L1b8600.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8604.  call temp:= `pop`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b860a.  return @kind void;
  #L1b860c.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L1b8610.  v0:= "Cannot remove node" @kind object;
  #L1b8614.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b861a.  throw v2;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeElement`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeElement:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b83dc.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b83e0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b83e6.  v0:= temp;
  #L1b83e8.  if v0 == 0 then goto L1b83f6;
  #L1b83ec.  call temp:= `f`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L1b83f2.  v3:= temp @kind object;
  #L1b83f4.  return v3 @kind object;
  #L1b83f6.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b83fa.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b8400.  v0:= temp;
  #L1b8402.  if v0 == 0 then goto L1b8468;
  #L1b8406.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b840a.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b8410.  v0:= temp @kind object;
  #L1b8412.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L1b8418.  v1:= temp;
  #L1b841a.  if v1 != 0 then goto L1b8424;
  #L1b841e.  call `g`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b8424.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8428.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b842e.  v0:= temp @kind object;
  #L1b8430.  if v0 == v3 then goto L1b8448;
  #L1b8434.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8438.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b843e.  v0:= temp @kind object;
  #L1b8440.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b8446.  goto L1b8424;
  #L1b8448.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b844c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b8452.  v0:= temp;
  #L1b8454.  if v0 != 0 then goto L1b845e;
  #L1b8458.  call `h`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L1b845e.  call temp:= `f`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L1b8464.  v3:= temp @kind object;
  #L1b8466.  return v3 @kind object;
  #L1b8468.  v3:= 0I;
  #L1b846a.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeRoot`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeRoot:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b847c.  v0:= new `org.simpleframework.xml.stream.OutputDocument`;
  #L1b8480.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b8484.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/stream/OutputDocument;.<init>:(Lorg/simpleframework/xml/stream/NodeWriter;Lorg/simpleframework/xml/stream/OutputStack;)V` @kind direct;
  #L1b848a.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b848e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b8494.  v1:= temp;
  #L1b8496.  if v1 == 0 then goto L1b84a4;
  #L1b849a.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L1b849e.  call `writeProlog`(v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeProlog:()V` @kind virtual;
  #L1b84a4.  return v0 @kind object;
}
