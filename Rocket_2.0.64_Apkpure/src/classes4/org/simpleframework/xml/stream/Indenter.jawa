record `org.simpleframework.xml.stream.Indenter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.Indenter$Cache` `org.simpleframework.xml.stream.Indenter.a` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.b` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.c` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b756c.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L1b7570.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L1b7576.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b757c.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v1 @kind this, `org.simpleframework.xml.stream.Format` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b7590.  v0:= 16I;
  #L1b7594.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;I)V` @kind direct;
  #L1b759a.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter` v0 @kind this, `org.simpleframework.xml.stream.Format` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b75ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b75b2.  call temp:= `getIndent`(v1) @signature `Lorg/simpleframework/xml/stream/Format;.getIndent:()I` @kind virtual;
  #L1b75b8.  v1:= temp;
  #L1b75ba.  v0.`org.simpleframework.xml.stream.Indenter.b` @type ^`int` := v1;
  #L1b75be.  v1:= new `org.simpleframework.xml.stream.Indenter$Cache`;
  #L1b75c2.  call `<init>`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.<init>:(I)V` @kind direct;
  #L1b75c8.  v0.`org.simpleframework.xml.stream.Indenter.a` @type ^`org.simpleframework.xml.stream.Indenter$Cache` := v1 @kind object;
  #L1b75cc.  return @kind void;
}
procedure `java.lang.String` `a`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b7434.  v0:= v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int`;
  #L1b7438.  v1:= v0 + 1;
  #L1b743c.  v1:= new `char`[v1];
  #L1b7440.  if v0 <= 0 then goto L1b7472;
  #L1b7444.  v0:= 0I;
  #L1b7446.  v2:= 10I;
  #L1b744a.  v1[v0]:= v2 @kind char;
  #L1b744e.  v0:= 1I;
  #L1b7450.  v2:= v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int`;
  #L1b7454.  if v0 > v2 then goto L1b7466;
  #L1b7458.  v2:= 32I;
  #L1b745c.  v1[v0]:= v2 @kind char;
  #L1b7460.  v0:= v0 + 1;
  #L1b7464.  goto L1b7450;
  #L1b7466.  v0:= new `java.lang.String`;
  #L1b746a.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L1b7470.  return v0 @kind object;
  #L1b7472.  v0:= "\n" @kind object;
  #L1b7476.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`org.simpleframework.xml.stream.Indenter` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/Indenter;.b:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b7488.  v0:= v2.`org.simpleframework.xml.stream.Indenter.b` @type ^`int`;
  #L1b748c.  if v0 <= 0 then goto L1b74c4;
  #L1b7490.  v0:= v2.`org.simpleframework.xml.stream.Indenter.a` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L1b7494.  call temp:= `get`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.get:(I)Ljava/lang/String;` @kind virtual;
  #L1b749a.  v0:= temp @kind object;
  #L1b749c.  if v0 != 0 then goto L1b74b2;
  #L1b74a0.  call temp:= `a`(v2) @signature `Lorg/simpleframework/xml/stream/Indenter;.a:()Ljava/lang/String;` @kind direct;
  #L1b74a6.  v0:= temp @kind object;
  #L1b74a8.  v1:= v2.`org.simpleframework.xml.stream.Indenter.a` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L1b74ac.  call `set`(v1, v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.set:(ILjava/lang/String;)V` @kind virtual;
  #L1b74b2.  v3:= v2.`org.simpleframework.xml.stream.Indenter.a` @type ^`org.simpleframework.xml.stream.Indenter$Cache` @kind object;
  #L1b74b6.  call temp:= `size`(v3) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.size:()I` @kind virtual;
  #L1b74bc.  v3:= temp;
  #L1b74be.  if v3 <= 0 then goto L1b74c4;
  #L1b74c2.  return v0 @kind object;
  #L1b74c4.  v3:= "" @kind object;
  #L1b74c8.  return v3 @kind object;
}
procedure `java.lang.String` `pop`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.pop:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b74dc.  v0:= v3.`org.simpleframework.xml.stream.Indenter.d` @type ^`int`;
  #L1b74e0.  v0:= v0 + -1;
  #L1b74e4.  v3.`org.simpleframework.xml.stream.Indenter.d` @type ^`int` := v0;
  #L1b74e8.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.b:(I)Ljava/lang/String;` @kind direct;
  #L1b74ee.  v0:= temp @kind object;
  #L1b74f0.  v1:= v3.`org.simpleframework.xml.stream.Indenter.b` @type ^`int`;
  #L1b74f4.  if v1 <= 0 then goto L1b7502;
  #L1b74f8.  v2:= v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int`;
  #L1b74fc.  v2:= v2 - v1 @kind int;
  #L1b74fe.  v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int` := v2;
  #L1b7502.  return v0 @kind object;
}
procedure `java.lang.String` `push`(`org.simpleframework.xml.stream.Indenter` v3 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.push:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b7514.  v0:= v3.`org.simpleframework.xml.stream.Indenter.d` @type ^`int`;
  #L1b7518.  v1:= v0 + 1;
  #L1b751c.  v3.`org.simpleframework.xml.stream.Indenter.d` @type ^`int` := v1;
  #L1b7520.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.b:(I)Ljava/lang/String;` @kind direct;
  #L1b7526.  v0:= temp @kind object;
  #L1b7528.  v1:= v3.`org.simpleframework.xml.stream.Indenter.b` @type ^`int`;
  #L1b752c.  if v1 <= 0 then goto L1b753a;
  #L1b7530.  v2:= v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int`;
  #L1b7534.  v2:= v2 + v1 @kind int;
  #L1b7536.  v3.`org.simpleframework.xml.stream.Indenter.c` @type ^`int` := v2;
  #L1b753a.  return v0 @kind object;
}
procedure `java.lang.String` `top`(`org.simpleframework.xml.stream.Indenter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter;.top:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b754c.  v0:= v1.`org.simpleframework.xml.stream.Indenter.d` @type ^`int`;
  #L1b7550.  call temp:= `b`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.b:(I)Ljava/lang/String;` @kind direct;
  #L1b7556.  v0:= temp @kind object;
  #L1b7558.  return v0 @kind object;
}
