record `org.simpleframework.xml.stream.Indenter$Cache` @kind class @AccessFlag PUBLIC {
  `java.lang.String`[] `org.simpleframework.xml.stream.Indenter$Cache.a` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.stream.Indenter$Cache.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Indenter$Cache` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b73a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b73aa.  v1:= new `java.lang.String`[v1];
  #L1b73ae.  v0.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] := v1 @kind object;
  #L1b73b2.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.Indenter$Cache` v3 @kind this, `int` v4 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b73c4.  v4:= new `java.lang.String`[v4];
  #L1b73c8.  v0:= 0I;
  #L1b73ca.  v1:= v3.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] @kind object;
  #L1b73ce.  v2:= length @variable v1;
  #L1b73d0.  if v0 >= v2 then goto L1b73e2;
  #L1b73d4.  v1:= v1[v0] @kind object;
  #L1b73d8.  v4[v0]:= v1 @kind object;
  #L1b73dc.  v0:= v0 + 1;
  #L1b73e0.  goto L1b73ca;
  #L1b73e2.  v3.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] := v4 @kind object;
  #L1b73e6.  return @kind void;
}
procedure `java.lang.String` `get`(`org.simpleframework.xml.stream.Indenter$Cache` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.get:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b7380.  v0:= v2.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] @kind object;
  #L1b7384.  v1:= length @variable v0;
  #L1b7386.  if v3 >= v1 then goto L1b7390;
  #L1b738a.  v3:= v0[v3] @kind object;
  #L1b738e.  return v3 @kind object;
  #L1b7390.  v3:= 0I;
  #L1b7392.  return v3 @kind object;
}
procedure `void` `set`(`org.simpleframework.xml.stream.Indenter$Cache` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.set:(ILjava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b73f8.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] @kind object;
  #L1b73fc.  v0:= length @variable v0;
  #L1b73fe.  if v2 < v0 then goto L1b740c;
  #L1b7402.  v0:= v2 * 2;
  #L1b7406.  call `a`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.a:(I)V` @kind direct;
  #L1b740c.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.b` @type ^`int`;
  #L1b7410.  if v2 <= v0 then goto L1b7418;
  #L1b7414.  v1.`org.simpleframework.xml.stream.Indenter$Cache.b` @type ^`int` := v2;
  #L1b7418.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.a` @type ^`java.lang.String`[] @kind object;
  #L1b741c.  v0[v2]:= v3 @kind object;
  #L1b7420.  return @kind void;
}
procedure `int` `size`(`org.simpleframework.xml.stream.Indenter$Cache` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Indenter$Cache;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b7368.  v0:= v1.`org.simpleframework.xml.stream.Indenter$Cache.b` @type ^`int`;
  #L1b736c.  return v0;
}
