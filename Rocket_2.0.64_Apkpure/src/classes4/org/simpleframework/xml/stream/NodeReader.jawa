record `org.simpleframework.xml.stream.NodeReader` @kind class @AccessFlag PUBLIC {
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.NodeReader.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.EventReader` `org.simpleframework.xml.stream.NodeReader.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.InputStack` `org.simpleframework.xml.stream.NodeReader.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.EventReader` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.<init>:(Lorg/simpleframework/xml/stream/EventReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b82e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b82e6.  v0:= new `java.lang.StringBuilder`;
  #L1b82ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b82f0.  v1.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L1b82f4.  v0:= new `org.simpleframework.xml.stream.InputStack`;
  #L1b82f8.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/InputStack;.<init>:()V` @kind direct;
  #L1b82fe.  v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` := v0 @kind object;
  #L1b8302.  v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` := v2 @kind object;
  #L1b8306.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b8318.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b831c.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b8322.  v2:= temp @kind object;
  #L1b8324.  call temp:= `isText`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L1b832a.  v0:= temp;
  #L1b832c.  if v0 == 0 then goto L1b8342;
  #L1b8330.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b8336.  v2:= temp @kind object;
  #L1b8338.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b833c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b8342.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.stream.NodeReader` v0 @kind this, `org.simpleframework.xml.stream.EventNode` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.b:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L1b7fac.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/stream/EventNode;.getName:()Ljava/lang/String;` @kind interface;
  #L1b7fb2.  v1:= temp @kind object;
  #L1b7fb4.  if v1 != 0 then goto L1b7fbc;
  #L1b7fb8.  v1:= 0I;
  #L1b7fba.  return v1;
  #L1b7fbc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b7fc2.  v1:= temp;
  #L1b7fc4.  return v1;
}
procedure `java.lang.String` `c`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.c:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b8000.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b8004.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1b800a.  v3:= temp;
  #L1b800c.  if v3 <= 0 then goto L1b802a;
  #L1b8010.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b8014.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b801a.  v3:= temp @kind object;
  #L1b801c.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b8020.  v1:= 0I;
  #L1b8022.  call `setLength`(v0, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L1b8028.  return v3 @kind object;
  #L1b802a.  v3:= 0I;
  #L1b802c.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `d`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `org.simpleframework.xml.stream.EventNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.d:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b8288.  v0:= new `org.simpleframework.xml.stream.InputElement`;
  #L1b828c.  call `<init>`(v0, v3, v2, v4) @signature `Lorg/simpleframework/xml/stream/InputElement;.<init>:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/NodeReader;Lorg/simpleframework/xml/stream/EventNode;)V` @kind direct;
  #L1b8292.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b8296.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1b829c.  v3:= temp;
  #L1b829e.  if v3 <= 0 then goto L1b82ae;
  #L1b82a2.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b82a6.  v1:= 0I;
  #L1b82a8.  call `setLength`(v3, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L1b82ae.  call temp:= `isStart`(v4) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L1b82b4.  v3:= temp;
  #L1b82b6.  if v3 == 0 then goto L1b82cc;
  #L1b82ba.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b82be.  call temp:= `push`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b82c4.  v3:= temp @kind object;
  #L1b82c6.  v3:= (`org.simpleframework.xml.stream.InputNode`) v3 @kind object;
  #L1b82ca.  return v3 @kind object;
  #L1b82cc.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.e:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b8040.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b8044.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b804a.  v0:= temp @kind object;
  #L1b804c.  v1:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b8050.  call temp:= `top`(v1) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L1b8056.  v1:= temp @kind object;
  #L1b8058.  if v1 != v3 then goto L1b8086;
  #L1b805c.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L1b8062.  v0:= temp;
  #L1b8064.  if v0 == 0 then goto L1b8086;
  #L1b8068.  call `a`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L1b806e.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b8072.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b8078.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b807c.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b8082.  v0:= temp @kind object;
  #L1b8084.  goto L1b804c;
  #L1b8086.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.c:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L1b808c.  v3:= temp @kind object;
  #L1b808e.  return v3 @kind object;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isEmpty:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b7f6c.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b7f70.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L1b7f76.  v0:= temp @kind object;
  #L1b7f78.  if v0 != v2 then goto L1b7f98;
  #L1b7f7c.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b7f80.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b7f86.  v2:= temp @kind object;
  #L1b7f88.  call temp:= `isEnd`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L1b7f8e.  v2:= temp;
  #L1b7f90.  if v2 == 0 then goto L1b7f98;
  #L1b7f94.  v2:= 1I;
  #L1b7f96.  return v2;
  #L1b7f98.  v2:= 0I;
  #L1b7f9a.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isRoot:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b7fd8.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b7fdc.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.bottom:()Ljava/lang/Object;` @kind virtual;
  #L1b7fe2.  v0:= temp @kind object;
  #L1b7fe4.  if v0 != v2 then goto L1b7fec;
  #L1b7fe8.  v2:= 1I;
  #L1b7fea.  goto L1b7fee;
  #L1b7fec.  v2:= 0I;
  #L1b7fee.  return v2;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b811c.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b8120.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1b8126.  v0:= temp;
  #L1b8128.  v1:= 0I;
  #L1b812a.  if v0 != 0 then goto L1b8130;
  #L1b812e.  return v1 @kind object;
  #L1b8130.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b8134.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b813a.  v0:= temp @kind object;
  #L1b813c.  if v0 == 0 then goto L1b8182;
  #L1b8140.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L1b8146.  v2:= temp;
  #L1b8148.  if v2 == 0 then goto L1b815e;
  #L1b814c.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b8150.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L1b8156.  v0:= temp @kind object;
  #L1b8158.  if v0 != v4 then goto L1b8174;
  #L1b815c.  return v1 @kind object;
  #L1b815e.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L1b8164.  v2:= temp;
  #L1b8166.  if v2 == 0 then goto L1b8174;
  #L1b816a.  call temp:= `d`(v3, v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeReader;.d:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind direct;
  #L1b8170.  v4:= temp @kind object;
  #L1b8172.  return v4 @kind object;
  #L1b8174.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b8178.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b817e.  v0:= temp @kind object;
  #L1b8180.  goto L1b813c;
  #L1b8182.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b8194.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b8198.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1b819e.  v0:= temp;
  #L1b81a0.  v1:= 0I;
  #L1b81a2.  if v0 != 0 then goto L1b81a8;
  #L1b81a6.  return v1 @kind object;
  #L1b81a8.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b81ac.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b81b2.  v0:= temp @kind object;
  #L1b81b4.  if v0 == 0 then goto L1b8230;
  #L1b81b8.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L1b81be.  v2:= temp;
  #L1b81c0.  if v2 == 0 then goto L1b81cc;
  #L1b81c4.  call `a`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L1b81ca.  goto L1b8218;
  #L1b81cc.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L1b81d2.  v2:= temp;
  #L1b81d4.  if v2 == 0 then goto L1b81f6;
  #L1b81d8.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b81dc.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L1b81e2.  v0:= temp @kind object;
  #L1b81e4.  if v0 != v4 then goto L1b81ea;
  #L1b81e8.  return v1 @kind object;
  #L1b81ea.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b81ee.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L1b81f4.  goto L1b8218;
  #L1b81f6.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L1b81fc.  v2:= temp;
  #L1b81fe.  if v2 == 0 then goto L1b8218;
  #L1b8202.  call temp:= `b`(v3, v0, v5) @signature `Lorg/simpleframework/xml/stream/NodeReader;.b:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @kind direct;
  #L1b8208.  v5:= temp;
  #L1b820a.  if v5 == 0 then goto L1b8230;
  #L1b820e.  call temp:= `readElement`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L1b8214.  v4:= temp @kind object;
  #L1b8216.  return v4 @kind object;
  #L1b8218.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b821c.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b8222.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b8226.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b822c.  v0:= temp @kind object;
  #L1b822e.  goto L1b81b4;
  #L1b8230.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readRoot`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readRoot:()Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b8244.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b8248.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b824e.  v0:= temp;
  #L1b8250.  v1:= 0I;
  #L1b8252.  if v0 == 0 then goto L1b8274;
  #L1b8256.  call temp:= `readElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L1b825c.  v0:= temp @kind object;
  #L1b825e.  if v0 == 0 then goto L1b8264;
  #L1b8262.  return v0 @kind object;
  #L1b8264.  v0:= new `org.simpleframework.xml.stream.NodeException`;
  #L1b8268.  v1:= "Document has no root element" @kind object;
  #L1b826c.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b8272.  throw v0;
  #L1b8274.  return v1 @kind object;
}
procedure `java.lang.String` `readValue`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readValue:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b80a0.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b80a4.  call temp:= `isRelevant`(v0, v3) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L1b80aa.  v0:= temp;
  #L1b80ac.  v1:= 0I;
  #L1b80ae.  if v0 != 0 then goto L1b80b4;
  #L1b80b2.  return v1 @kind object;
  #L1b80b4.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L1b80b8.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L1b80be.  v0:= temp;
  #L1b80c0.  if v0 > 0 then goto L1b8102;
  #L1b80c4.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b80c8.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b80ce.  v0:= temp @kind object;
  #L1b80d0.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L1b80d6.  v0:= temp;
  #L1b80d8.  if v0 == 0 then goto L1b8102;
  #L1b80dc.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b80e0.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L1b80e6.  v0:= temp @kind object;
  #L1b80e8.  if v0 != v3 then goto L1b80ee;
  #L1b80ec.  return v1 @kind object;
  #L1b80ee.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L1b80f2.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L1b80f8.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L1b80fc.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L1b8102.  call temp:= `e`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.e:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L1b8108.  v3:= temp @kind object;
  #L1b810a.  return v3 @kind object;
}
procedure `void` `skipElement`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.skipElement:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b8354.  call temp:= `readElement`(v1, v2) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L1b835a.  v0:= temp @kind object;
  #L1b835c.  if v0 == 0 then goto L1b8362;
  #L1b8360.  goto L1b8354;
  #L1b8362.  return @kind void;
}
