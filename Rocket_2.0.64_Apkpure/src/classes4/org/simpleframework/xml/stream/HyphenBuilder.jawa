record `org.simpleframework.xml.stream.HyphenBuilder` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Style` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.HyphenBuilder` v0 @kind this) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b7264.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b726a.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.stream.HyphenBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b720c.  v0:= 0I;
  #L1b720e.  if v3 == 0 then goto L1b7226;
  #L1b7212.  v1:= new `org.simpleframework.xml.stream.HyphenBuilder$Parser`;
  #L1b7216.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/HyphenBuilder$1;)V` @kind direct;
  #L1b721c.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L1b7222.  v3:= temp @kind object;
  #L1b7224.  return v3 @kind object;
  #L1b7226.  return v0 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.stream.HyphenBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b7238.  v0:= 0I;
  #L1b723a.  if v3 == 0 then goto L1b7252;
  #L1b723e.  v1:= new `org.simpleframework.xml.stream.HyphenBuilder$Parser`;
  #L1b7242.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/HyphenBuilder$Parser;.<init>:(Lorg/simpleframework/xml/stream/HyphenBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/HyphenBuilder$1;)V` @kind direct;
  #L1b7248.  call temp:= `process`(v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @kind virtual;
  #L1b724e.  v3:= temp @kind object;
  #L1b7250.  return v3 @kind object;
  #L1b7252.  return v0 @kind object;
}
