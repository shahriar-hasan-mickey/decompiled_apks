record `org.simpleframework.xml.stream.OutputStack` @kind class @AccessFlag PUBLIC extends `java.util.ArrayList` @kind class {
  `java.util.Set` `org.simpleframework.xml.stream.OutputStack.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.OutputStack` v0 @kind this, `java.util.Set` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack;.<init>:(Ljava/util/Set;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b94b4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b94ba.  v0.`org.simpleframework.xml.stream.OutputStack.a` @type ^`java.util.Set` := v1 @kind object;
  #L1b94be.  return @kind void;
}
procedure `org.simpleframework.xml.stream.OutputNode` `bottom`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.bottom:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b93d0.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1b93d6.  v0:= temp;
  #L1b93d8.  if v0 > 0 then goto L1b93e0;
  #L1b93dc.  v0:= 0I;
  #L1b93de.  return v0 @kind object;
  #L1b93e0.  v0:= 0I;
  #L1b93e2.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1b93e8.  v0:= temp @kind object;
  #L1b93ea.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L1b93ee.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b93b4.  v0:= new `org.simpleframework.xml.stream.OutputStack$Sequence`;
  #L1b93b8.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.<init>:(Lorg/simpleframework/xml/stream/OutputStack;)V` @kind direct;
  #L1b93be.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `pop`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b9400.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1b9406.  v0:= temp;
  #L1b9408.  if v0 > 0 then goto L1b9410;
  #L1b940c.  v0:= 0I;
  #L1b940e.  return v0 @kind object;
  #L1b9410.  v0:= v0 + -1;
  #L1b9414.  call temp:= `purge`(v1, v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b941a.  v0:= temp @kind object;
  #L1b941c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `purge`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b9430.  call temp:= `remove`(v1, v2) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L1b9436.  v2:= temp @kind object;
  #L1b9438.  v2:= (`org.simpleframework.xml.stream.OutputNode`) v2 @kind object;
  #L1b943c.  if v2 == 0 then goto L1b944a;
  #L1b9440.  v0:= v1.`org.simpleframework.xml.stream.OutputStack.a` @type ^`java.util.Set` @kind object;
  #L1b9444.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L1b944a.  return v2 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `push`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack;.push:(Lorg/simpleframework/xml/stream/OutputNode;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b945c.  v0:= v1.`org.simpleframework.xml.stream.OutputStack.a` @type ^`java.util.Set` @kind object;
  #L1b9460.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b9466.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b946c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `top`(`org.simpleframework.xml.stream.OutputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b9480.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1b9486.  v0:= temp;
  #L1b9488.  if v0 > 0 then goto L1b9490;
  #L1b948c.  v0:= 0I;
  #L1b948e.  return v0 @kind object;
  #L1b9490.  v0:= v0 + -1;
  #L1b9494.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1b949a.  v0:= temp @kind object;
  #L1b949c.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L1b94a0.  return v0 @kind object;
}
