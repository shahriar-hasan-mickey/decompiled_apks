record `org.simpleframework.xml.stream.StreamReader` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventReader` @kind interface {
  `javax.xml.stream.XMLEventReader` `org.simpleframework.xml.stream.StreamReader.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.EventNode` `org.simpleframework.xml.stream.StreamReader.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.StreamReader` v0 @kind this, `javax.xml.stream.XMLEventReader` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader;.<init>:(Ljavax/xml/stream/XMLEventReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ba3c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ba3c6.  v0.`org.simpleframework.xml.stream.StreamReader.a` @type ^`javax.xml.stream.XMLEventReader` := v1 @kind object;
  #L1ba3ca.  return @kind void;
}
procedure `org.simpleframework.xml.stream.StreamReader$Entry` `a`(`org.simpleframework.xml.stream.StreamReader` v1 @kind this, `javax.xml.stream.events.Attribute` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader;.a:(Ljavax/xml/stream/events/Attribute;)Lorg/simpleframework/xml/stream/StreamReader$Entry;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ba304.  v0:= new `org.simpleframework.xml.stream.StreamReader$Entry`;
  #L1ba308.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/StreamReader$Entry;.<init>:(Ljavax/xml/stream/events/Attribute;)V` @kind direct;
  #L1ba30e.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.StreamReader$Start` `b`(`org.simpleframework.xml.stream.StreamReader` v3 @kind this, `org.simpleframework.xml.stream.StreamReader$Start` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader;.b:(Lorg/simpleframework/xml/stream/StreamReader$Start;)Lorg/simpleframework/xml/stream/StreamReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ba320.  call temp:= `getAttributes`(v4) @signature `Lorg/simpleframework/xml/stream/StreamReader$Start;.getAttributes:()Ljava/util/Iterator;` @kind virtual;
  #L1ba326.  v0:= temp @kind object;
  #L1ba328.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ba32e.  v1:= temp;
  #L1ba330.  if v1 == 0 then goto L1ba35c;
  #L1ba334.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1ba33a.  v1:= temp @kind object;
  #L1ba33c.  v1:= (`javax.xml.stream.events.Attribute`) v1 @kind object;
  #L1ba340.  call temp:= `a`(v3, v1) @signature `Lorg/simpleframework/xml/stream/StreamReader;.a:(Ljavax/xml/stream/events/Attribute;)Lorg/simpleframework/xml/stream/StreamReader$Entry;` @kind direct;
  #L1ba346.  v1:= temp @kind object;
  #L1ba348.  call temp:= `isReserved`(v1) @signature `Lorg/simpleframework/xml/stream/StreamReader$Entry;.isReserved:()Z` @kind virtual;
  #L1ba34e.  v2:= temp;
  #L1ba350.  if v2 != 0 then goto L1ba328;
  #L1ba354.  call temp:= `add`(v4, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ba35a.  goto L1ba328;
  #L1ba35c.  return v4 @kind object;
}
procedure `org.simpleframework.xml.stream.StreamReader$End` `c`(`org.simpleframework.xml.stream.StreamReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader;.c:()Lorg/simpleframework/xml/stream/StreamReader$End;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ba2e4.  v0:= new `org.simpleframework.xml.stream.StreamReader$End`;
  #L1ba2e8.  v1:= 0I;
  #L1ba2ea.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/StreamReader$End;.<init>:(Lorg/simpleframework/xml/stream/StreamReader$1;)V` @kind direct;
  #L1ba2f0.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `d`(`org.simpleframework.xml.stream.StreamReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ba26c.  v0:= v2.`org.simpleframework.xml.stream.StreamReader.a` @type ^`javax.xml.stream.XMLEventReader` @kind object;
  #L1ba270.  call temp:= `nextEvent`(v0) @signature `Ljavax/xml/stream/XMLEventReader;.nextEvent:()Ljavax/xml/stream/events/XMLEvent;` @kind interface;
  #L1ba276.  v0:= temp @kind object;
  #L1ba278.  call temp:= `isEndDocument`(v0) @signature `Ljavax/xml/stream/events/XMLEvent;.isEndDocument:()Z` @kind interface;
  #L1ba27e.  v1:= temp;
  #L1ba280.  if v1 != 0 then goto L1ba2d0;
  #L1ba284.  call temp:= `isStartElement`(v0) @signature `Ljavax/xml/stream/events/XMLEvent;.isStartElement:()Z` @kind interface;
  #L1ba28a.  v1:= temp;
  #L1ba28c.  if v1 == 0 then goto L1ba29a;
  #L1ba290.  call temp:= `e`(v2, v0) @signature `Lorg/simpleframework/xml/stream/StreamReader;.e:(Ljavax/xml/stream/events/XMLEvent;)Lorg/simpleframework/xml/stream/StreamReader$Start;` @kind direct;
  #L1ba296.  v0:= temp @kind object;
  #L1ba298.  return v0 @kind object;
  #L1ba29a.  call temp:= `isCharacters`(v0) @signature `Ljavax/xml/stream/events/XMLEvent;.isCharacters:()Z` @kind interface;
  #L1ba2a0.  v1:= temp;
  #L1ba2a2.  if v1 == 0 then goto L1ba2b0;
  #L1ba2a6.  call temp:= `f`(v2, v0) @signature `Lorg/simpleframework/xml/stream/StreamReader;.f:(Ljavax/xml/stream/events/XMLEvent;)Lorg/simpleframework/xml/stream/StreamReader$Text;` @kind direct;
  #L1ba2ac.  v0:= temp @kind object;
  #L1ba2ae.  return v0 @kind object;
  #L1ba2b0.  call temp:= `isEndElement`(v0) @signature `Ljavax/xml/stream/events/XMLEvent;.isEndElement:()Z` @kind interface;
  #L1ba2b6.  v0:= temp;
  #L1ba2b8.  if v0 == 0 then goto L1ba2c6;
  #L1ba2bc.  call temp:= `c`(v2) @signature `Lorg/simpleframework/xml/stream/StreamReader;.c:()Lorg/simpleframework/xml/stream/StreamReader$End;` @kind direct;
  #L1ba2c2.  v0:= temp @kind object;
  #L1ba2c4.  return v0 @kind object;
  #L1ba2c6.  call temp:= `d`(v2) @signature `Lorg/simpleframework/xml/stream/StreamReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1ba2cc.  v0:= temp @kind object;
  #L1ba2ce.  return v0 @kind object;
  #L1ba2d0.  v0:= 0I;
  #L1ba2d2.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.StreamReader$Start` `e`(`org.simpleframework.xml.stream.StreamReader` v1 @kind this, `javax.xml.stream.events.XMLEvent` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader;.e:(Ljavax/xml/stream/events/XMLEvent;)Lorg/simpleframework/xml/stream/StreamReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ba370.  v0:= new `org.simpleframework.xml.stream.StreamReader$Start`;
  #L1ba374.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/StreamReader$Start;.<init>:(Ljavax/xml/stream/events/XMLEvent;)V` @kind direct;
  #L1ba37a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1ba380.  v2:= temp;
  #L1ba382.  if v2 == 0 then goto L1ba390;
  #L1ba386.  call temp:= `b`(v1, v0) @signature `Lorg/simpleframework/xml/stream/StreamReader;.b:(Lorg/simpleframework/xml/stream/StreamReader$Start;)Lorg/simpleframework/xml/stream/StreamReader$Start;` @kind direct;
  #L1ba38c.  v2:= temp @kind object;
  #L1ba38e.  return v2 @kind object;
  #L1ba390.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.StreamReader$Text` `f`(`org.simpleframework.xml.stream.StreamReader` v1 @kind this, `javax.xml.stream.events.XMLEvent` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader;.f:(Ljavax/xml/stream/events/XMLEvent;)Lorg/simpleframework/xml/stream/StreamReader$Text;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ba3a4.  v0:= new `org.simpleframework.xml.stream.StreamReader$Text`;
  #L1ba3a8.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/StreamReader$Text;.<init>:(Ljavax/xml/stream/events/XMLEvent;)V` @kind direct;
  #L1ba3ae.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `next`(`org.simpleframework.xml.stream.StreamReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ba214.  v0:= v2.`org.simpleframework.xml.stream.StreamReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1ba218.  if v0 != 0 then goto L1ba226;
  #L1ba21c.  call temp:= `d`(v2) @signature `Lorg/simpleframework/xml/stream/StreamReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1ba222.  v0:= temp @kind object;
  #L1ba224.  goto L1ba22c;
  #L1ba226.  v1:= 0I;
  #L1ba228.  v2.`org.simpleframework.xml.stream.StreamReader.b` @type ^`org.simpleframework.xml.stream.EventNode` := v1 @kind object;
  #L1ba22c.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `peek`(`org.simpleframework.xml.stream.StreamReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ba240.  v0:= v1.`org.simpleframework.xml.stream.StreamReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1ba244.  if v0 != 0 then goto L1ba254;
  #L1ba248.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/StreamReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind virtual;
  #L1ba24e.  v0:= temp @kind object;
  #L1ba250.  v1.`org.simpleframework.xml.stream.StreamReader.b` @type ^`org.simpleframework.xml.stream.EventNode` := v0 @kind object;
  #L1ba254.  v0:= v1.`org.simpleframework.xml.stream.StreamReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1ba258.  return v0 @kind object;
}
