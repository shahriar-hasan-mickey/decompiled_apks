record `org.simpleframework.xml.stream.StreamReader$Text` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventToken` @kind class {
  `javax.xml.stream.events.Characters` `org.simpleframework.xml.stream.StreamReader$Text.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.StreamReader$Text` v0 @kind this, `javax.xml.stream.events.XMLEvent` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/StreamReader$Text;.<init>:(Ljavax/xml/stream/events/XMLEvent;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ba1f0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/EventToken;.<init>:()V` @kind direct;
  #L1ba1f6.  call temp:= `asCharacters`(v1) @signature `Ljavax/xml/stream/events/XMLEvent;.asCharacters:()Ljavax/xml/stream/events/Characters;` @kind interface;
  #L1ba1fc.  v1:= temp @kind object;
  #L1ba1fe.  v0.`org.simpleframework.xml.stream.StreamReader$Text.a` @type ^`javax.xml.stream.events.Characters` := v1 @kind object;
  #L1ba202.  return @kind void;
}
procedure `java.lang.Object` `getSource`(`org.simpleframework.xml.stream.StreamReader$Text` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader$Text;.getSource:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ba1b8.  v0:= v1.`org.simpleframework.xml.stream.StreamReader$Text.a` @type ^`javax.xml.stream.events.Characters` @kind object;
  #L1ba1bc.  return v0 @kind object;
}
procedure `java.lang.String` `getValue`(`org.simpleframework.xml.stream.StreamReader$Text` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader$Text;.getValue:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ba1d0.  v0:= v1.`org.simpleframework.xml.stream.StreamReader$Text.a` @type ^`javax.xml.stream.events.Characters` @kind object;
  #L1ba1d4.  call temp:= `getData`(v0) @signature `Ljavax/xml/stream/events/Characters;.getData:()Ljava/lang/String;` @kind interface;
  #L1ba1da.  v0:= temp @kind object;
  #L1ba1dc.  return v0 @kind object;
}
procedure `boolean` `isText`(`org.simpleframework.xml.stream.StreamReader$Text` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/StreamReader$Text;.isText:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ba1a4.  v0:= 1I;
  #L1ba1a6.  return v0;
}
