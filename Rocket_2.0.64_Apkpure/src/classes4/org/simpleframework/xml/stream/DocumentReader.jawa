record `org.simpleframework.xml.stream.DocumentReader` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventReader` @kind interface {
  `org.simpleframework.xml.stream.NodeExtractor` `org.simpleframework.xml.stream.DocumentReader.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.NodeStack` `org.simpleframework.xml.stream.DocumentReader.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.EventNode` `org.simpleframework.xml.stream.DocumentReader.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Document` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.<init>:(Lorg/w3c/dom/Document;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b6618.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b661e.  v0:= new `org.simpleframework.xml.stream.NodeExtractor`;
  #L1b6622.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/NodeExtractor;.<init>:(Lorg/w3c/dom/Document;)V` @kind direct;
  #L1b6628.  v1.`org.simpleframework.xml.stream.DocumentReader.a` @type ^`org.simpleframework.xml.stream.NodeExtractor` := v0 @kind object;
  #L1b662c.  v0:= new `org.simpleframework.xml.stream.NodeStack`;
  #L1b6630.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/NodeStack;.<init>:()V` @kind direct;
  #L1b6636.  v1.`org.simpleframework.xml.stream.DocumentReader.b` @type ^`org.simpleframework.xml.stream.NodeStack` := v0 @kind object;
  #L1b663a.  call temp:= `push`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b6640.  return @kind void;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Entry` `a`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.a:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Entry;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6438.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Entry`;
  #L1b643c.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Entry;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L1b6442.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Start` `b`(`org.simpleframework.xml.stream.DocumentReader` v5 @kind this, `org.simpleframework.xml.stream.DocumentReader$Start` v6 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.b:(Lorg/simpleframework/xml/stream/DocumentReader$Start;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b6454.  call temp:= `getAttributes`(v6) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Start;.getAttributes:()Lorg/w3c/dom/NamedNodeMap;` @kind virtual;
  #L1b645a.  v0:= temp @kind object;
  #L1b645c.  call temp:= `getLength`(v0) @signature `Lorg/w3c/dom/NamedNodeMap;.getLength:()I` @kind interface;
  #L1b6462.  v1:= temp;
  #L1b6464.  v2:= 0I;
  #L1b6466.  if v2 >= v1 then goto L1b6492;
  #L1b646a.  call temp:= `item`(v0, v2) @signature `Lorg/w3c/dom/NamedNodeMap;.item:(I)Lorg/w3c/dom/Node;` @kind interface;
  #L1b6470.  v3:= temp @kind object;
  #L1b6472.  call temp:= `a`(v5, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.a:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Entry;` @kind direct;
  #L1b6478.  v3:= temp @kind object;
  #L1b647a.  call temp:= `isReserved`(v3) @signature `Lorg/simpleframework/xml/stream/Attribute;.isReserved:()Z` @kind interface;
  #L1b6480.  v4:= temp;
  #L1b6482.  if v4 != 0 then goto L1b648c;
  #L1b6486.  call temp:= `add`(v6, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b648c.  v2:= v2 + 1;
  #L1b6490.  goto L1b6466;
  #L1b6492.  return v6 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `c`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this, `org.w3c.dom.Node` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.c:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b64f4.  call temp:= `getNodeType`(v3) @signature `Lorg/w3c/dom/Node;.getNodeType:()S` @kind interface;
  #L1b64fa.  v0:= temp;
  #L1b64fc.  v1:= 1I;
  #L1b64fe.  if v0 != v1 then goto L1b6516;
  #L1b6502.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.b` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L1b6506.  call temp:= `push`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b650c.  call temp:= `g`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.g:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @kind direct;
  #L1b6512.  v3:= temp @kind object;
  #L1b6514.  return v3 @kind object;
  #L1b6516.  call temp:= `h`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.h:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Text;` @kind direct;
  #L1b651c.  v3:= temp @kind object;
  #L1b651e.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$End` `d`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.d:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b6418.  v0:= new `org.simpleframework.xml.stream.DocumentReader$End`;
  #L1b641c.  v1:= 0I;
  #L1b641e.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader$End;.<init>:(Lorg/simpleframework/xml/stream/DocumentReader$1;)V` @kind direct;
  #L1b6424.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `e`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.e:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6588.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.a` @type ^`org.simpleframework.xml.stream.NodeExtractor` @kind object;
  #L1b658c.  call temp:= `peek`(v0) @signature `Ljava/util/LinkedList;.peek:()Ljava/lang/Object;` @kind virtual;
  #L1b6592.  v0:= temp @kind object;
  #L1b6594.  v0:= (`org.w3c.dom.Node`) v0 @kind object;
  #L1b6598.  if v0 != 0 then goto L1b65a6;
  #L1b659c.  call temp:= `d`(v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.d:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @kind direct;
  #L1b65a2.  v0:= temp @kind object;
  #L1b65a4.  return v0 @kind object;
  #L1b65a6.  call temp:= `f`(v1, v0) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.f:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1b65ac.  v0:= temp @kind object;
  #L1b65ae.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `f`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this, `org.w3c.dom.Node` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.f:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b65c0.  call temp:= `getParentNode`(v3) @signature `Lorg/w3c/dom/Node;.getParentNode:()Lorg/w3c/dom/Node;` @kind interface;
  #L1b65c6.  v0:= temp @kind object;
  #L1b65c8.  v1:= v2.`org.simpleframework.xml.stream.DocumentReader.b` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L1b65cc.  call temp:= `top`(v1) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L1b65d2.  v1:= temp @kind object;
  #L1b65d4.  v1:= (`org.w3c.dom.Node`) v1 @kind object;
  #L1b65d8.  if v0 == v1 then goto L1b65f4;
  #L1b65dc.  if v1 == 0 then goto L1b65ea;
  #L1b65e0.  v3:= v2.`org.simpleframework.xml.stream.DocumentReader.b` @type ^`org.simpleframework.xml.stream.NodeStack` @kind object;
  #L1b65e4.  call temp:= `pop`(v3) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L1b65ea.  call temp:= `d`(v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.d:()Lorg/simpleframework/xml/stream/DocumentReader$End;` @kind direct;
  #L1b65f0.  v3:= temp @kind object;
  #L1b65f2.  return v3 @kind object;
  #L1b65f4.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.a` @type ^`org.simpleframework.xml.stream.NodeExtractor` @kind object;
  #L1b65f8.  call temp:= `poll`(v0) @signature `Ljava/util/LinkedList;.poll:()Ljava/lang/Object;` @kind virtual;
  #L1b65fe.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.c:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1b6604.  v3:= temp @kind object;
  #L1b6606.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Start` `g`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.g:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b64a4.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Start`;
  #L1b64a8.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Start;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L1b64ae.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b64b4.  v2:= temp;
  #L1b64b6.  if v2 == 0 then goto L1b64c4;
  #L1b64ba.  call temp:= `b`(v1, v0) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.b:(Lorg/simpleframework/xml/stream/DocumentReader$Start;)Lorg/simpleframework/xml/stream/DocumentReader$Start;` @kind direct;
  #L1b64c0.  v2:= temp @kind object;
  #L1b64c2.  return v2 @kind object;
  #L1b64c4.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.DocumentReader$Text` `h`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this, `org.w3c.dom.Node` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.h:(Lorg/w3c/dom/Node;)Lorg/simpleframework/xml/stream/DocumentReader$Text;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b64d8.  v0:= new `org.simpleframework.xml.stream.DocumentReader$Text`;
  #L1b64dc.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader$Text;.<init>:(Lorg/w3c/dom/Node;)V` @kind direct;
  #L1b64e2.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `next`(`org.simpleframework.xml.stream.DocumentReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b6530.  v0:= v2.`org.simpleframework.xml.stream.DocumentReader.c` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b6534.  if v0 != 0 then goto L1b6542;
  #L1b6538.  call temp:= `e`(v2) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.e:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1b653e.  v0:= temp @kind object;
  #L1b6540.  goto L1b6548;
  #L1b6542.  v1:= 0I;
  #L1b6544.  v2.`org.simpleframework.xml.stream.DocumentReader.c` @type ^`org.simpleframework.xml.stream.EventNode` := v1 @kind object;
  #L1b6548.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `peek`(`org.simpleframework.xml.stream.DocumentReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b655c.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.c` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b6560.  if v0 != 0 then goto L1b6570;
  #L1b6564.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/DocumentReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind virtual;
  #L1b656a.  v0:= temp @kind object;
  #L1b656c.  v1.`org.simpleframework.xml.stream.DocumentReader.c` @type ^`org.simpleframework.xml.stream.EventNode` := v0 @kind object;
  #L1b6570.  v0:= v1.`org.simpleframework.xml.stream.DocumentReader.c` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b6574.  return v0 @kind object;
}
