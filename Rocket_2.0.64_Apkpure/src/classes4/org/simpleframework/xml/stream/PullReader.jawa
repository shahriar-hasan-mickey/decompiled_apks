record `org.simpleframework.xml.stream.PullReader` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.EventReader` @kind interface {
  `org.xmlpull.v1.XmlPullParser` `org.simpleframework.xml.stream.PullReader.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.EventNode` `org.simpleframework.xml.stream.PullReader.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.PullReader` v0 @kind this, `org.xmlpull.v1.XmlPullParser` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/PullReader;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b9b5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b9b62.  v0.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` := v1 @kind object;
  #L1b9b66.  return @kind void;
}
procedure `org.simpleframework.xml.stream.PullReader$Entry` `a`(`org.simpleframework.xml.stream.PullReader` v2 @kind this, `int` v3 ) @signature `Lorg/simpleframework/xml/stream/PullReader;.a:(I)Lorg/simpleframework/xml/stream/PullReader$Entry;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b9aa4.  v0:= new `org.simpleframework.xml.stream.PullReader$Entry`;
  #L1b9aa8.  v1:= v2.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L1b9aac.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/stream/PullReader$Entry;.<init>:(Lorg/xmlpull/v1/XmlPullParser;I)V` @kind direct;
  #L1b9ab2.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Start` `b`(`org.simpleframework.xml.stream.PullReader` v4 @kind this, `org.simpleframework.xml.stream.PullReader$Start` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/PullReader;.b:(Lorg/simpleframework/xml/stream/PullReader$Start;)Lorg/simpleframework/xml/stream/PullReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b9ac4.  v0:= v4.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L1b9ac8.  call temp:= `getAttributeCount`(v0) @signature `Lorg/xmlpull/v1/XmlPullParser;.getAttributeCount:()I` @kind interface;
  #L1b9ace.  v0:= temp;
  #L1b9ad0.  v1:= 0I;
  #L1b9ad2.  if v1 >= v0 then goto L1b9af6;
  #L1b9ad6.  call temp:= `a`(v4, v1) @signature `Lorg/simpleframework/xml/stream/PullReader;.a:(I)Lorg/simpleframework/xml/stream/PullReader$Entry;` @kind direct;
  #L1b9adc.  v2:= temp @kind object;
  #L1b9ade.  call temp:= `isReserved`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader$Entry;.isReserved:()Z` @kind virtual;
  #L1b9ae4.  v3:= temp;
  #L1b9ae6.  if v3 != 0 then goto L1b9af0;
  #L1b9aea.  call temp:= `add`(v5, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b9af0.  v1:= v1 + 1;
  #L1b9af4.  goto L1b9ad2;
  #L1b9af6.  return v5 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$End` `c`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.c:()Lorg/simpleframework/xml/stream/PullReader$End;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b9a84.  v0:= new `org.simpleframework.xml.stream.PullReader$End`;
  #L1b9a88.  v1:= 0I;
  #L1b9a8a.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$End;.<init>:(Lorg/simpleframework/xml/stream/PullReader$1;)V` @kind direct;
  #L1b9a90.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `d`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b9a24.  v0:= v2.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L1b9a28.  call temp:= `next`(v0) @signature `Lorg/xmlpull/v1/XmlPullParser;.next:()I` @kind interface;
  #L1b9a2e.  v0:= temp;
  #L1b9a30.  v1:= 1I;
  #L1b9a32.  if v0 == v1 then goto L1b9a70;
  #L1b9a36.  v1:= 2I;
  #L1b9a38.  if v0 != v1 then goto L1b9a46;
  #L1b9a3c.  call temp:= `e`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.e:()Lorg/simpleframework/xml/stream/PullReader$Start;` @kind direct;
  #L1b9a42.  v0:= temp @kind object;
  #L1b9a44.  return v0 @kind object;
  #L1b9a46.  v1:= 4I;
  #L1b9a48.  if v0 != v1 then goto L1b9a56;
  #L1b9a4c.  call temp:= `f`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.f:()Lorg/simpleframework/xml/stream/PullReader$Text;` @kind direct;
  #L1b9a52.  v0:= temp @kind object;
  #L1b9a54.  return v0 @kind object;
  #L1b9a56.  v1:= 3I;
  #L1b9a58.  if v0 != v1 then goto L1b9a66;
  #L1b9a5c.  call temp:= `c`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.c:()Lorg/simpleframework/xml/stream/PullReader$End;` @kind direct;
  #L1b9a62.  v0:= temp @kind object;
  #L1b9a64.  return v0 @kind object;
  #L1b9a66.  call temp:= `d`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1b9a6c.  v0:= temp @kind object;
  #L1b9a6e.  return v0 @kind object;
  #L1b9a70.  v0:= 0I;
  #L1b9a72.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Start` `e`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.e:()Lorg/simpleframework/xml/stream/PullReader$Start;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b9b08.  v0:= new `org.simpleframework.xml.stream.PullReader$Start`;
  #L1b9b0c.  v1:= v2.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L1b9b10.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$Start;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @kind direct;
  #L1b9b16.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b9b1c.  v1:= temp;
  #L1b9b1e.  if v1 == 0 then goto L1b9b2a;
  #L1b9b22.  call temp:= `b`(v2, v0) @signature `Lorg/simpleframework/xml/stream/PullReader;.b:(Lorg/simpleframework/xml/stream/PullReader$Start;)Lorg/simpleframework/xml/stream/PullReader$Start;` @kind direct;
  #L1b9b28.  v0:= temp @kind object;
  #L1b9b2a.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.PullReader$Text` `f`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.f:()Lorg/simpleframework/xml/stream/PullReader$Text;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b9b3c.  v0:= new `org.simpleframework.xml.stream.PullReader$Text`;
  #L1b9b40.  v1:= v2.`org.simpleframework.xml.stream.PullReader.a` @type ^`org.xmlpull.v1.XmlPullParser` @kind object;
  #L1b9b44.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/PullReader$Text;.<init>:(Lorg/xmlpull/v1/XmlPullParser;)V` @kind direct;
  #L1b9b4a.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `next`(`org.simpleframework.xml.stream.PullReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b99cc.  v0:= v2.`org.simpleframework.xml.stream.PullReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b99d0.  if v0 != 0 then goto L1b99de;
  #L1b99d4.  call temp:= `d`(v2) @signature `Lorg/simpleframework/xml/stream/PullReader;.d:()Lorg/simpleframework/xml/stream/EventNode;` @kind direct;
  #L1b99da.  v0:= temp @kind object;
  #L1b99dc.  goto L1b99e4;
  #L1b99de.  v1:= 0I;
  #L1b99e0.  v2.`org.simpleframework.xml.stream.PullReader.b` @type ^`org.simpleframework.xml.stream.EventNode` := v1 @kind object;
  #L1b99e4.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.EventNode` `peek`(`org.simpleframework.xml.stream.PullReader` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/PullReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b99f8.  v0:= v1.`org.simpleframework.xml.stream.PullReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b99fc.  if v0 != 0 then goto L1b9a0c;
  #L1b9a00.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/PullReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind virtual;
  #L1b9a06.  v0:= temp @kind object;
  #L1b9a08.  v1.`org.simpleframework.xml.stream.PullReader.b` @type ^`org.simpleframework.xml.stream.EventNode` := v0 @kind object;
  #L1b9a0c.  v0:= v1.`org.simpleframework.xml.stream.PullReader.b` @type ^`org.simpleframework.xml.stream.EventNode` @kind object;
  #L1b9a10.  return v0 @kind object;
}
