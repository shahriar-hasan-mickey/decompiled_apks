record `org.simpleframework.xml.stream.Formatter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.OutputBuffer` `org.simpleframework.xml.stream.Formatter.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Indenter` `org.simpleframework.xml.stream.Formatter.b` @AccessFlag PRIVATE;
  `java.io.Writer` `org.simpleframework.xml.stream.Formatter.c` @AccessFlag PRIVATE;
  `java.lang.String` `org.simpleframework.xml.stream.Formatter.d` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.Formatter$Tag` `org.simpleframework.xml.stream.Formatter.e` @AccessFlag PRIVATE;
}
global `char`[] `@@org.simpleframework.xml.stream.Formatter.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@org.simpleframework.xml.stream.Formatter.m` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/stream/Formatter;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b69d8.  v0:= 5I;
  #L1b69da.  v1:= new `char`[v0];
  #L1b69de.  goto L1b6a50;
  #L1b69e4.  `@@org.simpleframework.xml.stream.Formatter.f` @type ^`char`[] := v1 @kind object;
  #L1b69e8.  v1:= 4I;
  #L1b69ea.  v2:= new `char`[v1];
  #L1b69ee.  goto L1b6a64;
  #L1b69f4.  `@@org.simpleframework.xml.stream.Formatter.g` @type ^`char`[] := v2 @kind object;
  #L1b69f8.  v2:= new `char`[v1];
  #L1b69fc.  goto L1b6a74;
  #L1b6a02.  `@@org.simpleframework.xml.stream.Formatter.h` @type ^`char`[] := v2 @kind object;
  #L1b6a06.  v2:= 6I;
  #L1b6a08.  v3:= new `char`[v2];
  #L1b6a0c.  goto L1b6a84;
  #L1b6a12.  `@@org.simpleframework.xml.stream.Formatter.i` @type ^`char`[] := v3 @kind object;
  #L1b6a16.  v2:= new `char`[v2];
  #L1b6a1a.  goto L1b6a98;
  #L1b6a20.  `@@org.simpleframework.xml.stream.Formatter.j` @type ^`char`[] := v2 @kind object;
  #L1b6a24.  v2:= new `char`[v0];
  #L1b6a28.  goto L1b6aac;
  #L1b6a2e.  `@@org.simpleframework.xml.stream.Formatter.k` @type ^`char`[] := v2 @kind object;
  #L1b6a32.  v0:= new `char`[v0];
  #L1b6a36.  goto L1b6ac0;
  #L1b6a3c.  `@@org.simpleframework.xml.stream.Formatter.l` @type ^`char`[] := v0 @kind object;
  #L1b6a40.  v0:= new `char`[v1];
  #L1b6a44.  goto L1b6ad4;
  #L1b6a4a.  `@@org.simpleframework.xml.stream.Formatter.m` @type ^`char`[] := v0 @kind object;
  #L1b6a4e.  return @kind void;
  #L1b6a50.  v1:= (120I, 109I, 108I, 110I, 115I) @kind object;
  #L1b6a61.  goto L1b69e4;
  #L1b6a62.  
  #L1b6a64.  v2:= (38I, 108I, 116I, 59I) @kind object;
  #L1b6a73.  goto L1b69f4;
  #L1b6a74.  v2:= (38I, 103I, 116I, 59I) @kind object;
  #L1b6a83.  goto L1b6a02;
  #L1b6a84.  v3:= (38I, 113I, 117I, 111I, 116I, 59I) @kind object;
  #L1b6a97.  goto L1b6a12;
  #L1b6a98.  v2:= (38I, 97I, 112I, 111I, 115I, 59I) @kind object;
  #L1b6aab.  goto L1b6a20;
  #L1b6aac.  v2:= (38I, 97I, 109I, 112I, 59I) @kind object;
  #L1b6abd.  goto L1b6a2e;
  #L1b6abe.  
  #L1b6ac0.  v0:= (60I, 33I, 45I, 45I, 32I) @kind object;
  #L1b6ad1.  goto L1b6a3c;
  #L1b6ad2.  
  #L1b6ad4.  v0:= (32I, 45I, 45I, 62I) @kind object;
  #L1b6ae3.  goto L1b6a4a;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.io.Writer` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b6af4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b6afa.  v0:= new `java.io.BufferedWriter`;
  #L1b6afe.  v1:= 1024I;
  #L1b6b02.  call `<init>`(v0, v3, v1) @signature `Ljava/io/BufferedWriter;.<init>:(Ljava/io/Writer;I)V` @kind direct;
  #L1b6b08.  v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` := v0 @kind object;
  #L1b6b0c.  v3:= new `org.simpleframework.xml.stream.Indenter`;
  #L1b6b10.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Indenter;.<init>:(Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b6b16.  v2.`org.simpleframework.xml.stream.Formatter.b` @type ^`org.simpleframework.xml.stream.Indenter` := v3 @kind object;
  #L1b6b1a.  v3:= new `org.simpleframework.xml.stream.OutputBuffer`;
  #L1b6b1e.  call `<init>`(v3) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.<init>:()V` @kind direct;
  #L1b6b24.  v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` := v3 @kind object;
  #L1b6b28.  call temp:= `getProlog`(v4) @signature `Lorg/simpleframework/xml/stream/Format;.getProlog:()Ljava/lang/String;` @kind virtual;
  #L1b6b2e.  v3:= temp @kind object;
  #L1b6b30.  v2.`org.simpleframework.xml.stream.Formatter.d` @type ^`java.lang.String` := v3 @kind object;
  #L1b6b34.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.a:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6b48.  v0:= v1.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6b4c.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:(C)V` @kind virtual;
  #L1b6b52.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6b80.  v0:= v1.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6b84.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:(Ljava/lang/String;)V` @kind virtual;
  #L1b6b8a.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char`[] v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.c:([C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6b64.  v0:= v1.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6b68.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.append:([C)V` @kind virtual;
  #L1b6b6e.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6b9c.  v0:= "<![CDATA[" @kind object;
  #L1b6ba0.  call `j`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6ba6.  call `j`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6bac.  v2:= "]]>" @kind object;
  #L1b6bb0.  call `j`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6bb6.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.e:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6bc8.  call temp:= `h`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.h:(C)[C` @kind direct;
  #L1b6bce.  v0:= temp @kind object;
  #L1b6bd0.  if v0 == 0 then goto L1b6bdc;
  #L1b6bd4.  call `l`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.l:([C)V` @kind direct;
  #L1b6bda.  goto L1b6be2;
  #L1b6bdc.  call `i`(v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6be2.  return @kind void;
}
procedure `void` `f`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.f:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b6bf4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1b6bfa.  v0:= temp;
  #L1b6bfc.  v1:= 0I;
  #L1b6bfe.  if v1 >= v0 then goto L1b6c16;
  #L1b6c02.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1b6c08.  v2:= temp;
  #L1b6c0a.  call `e`(v3, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.e:(C)V` @kind direct;
  #L1b6c10.  v1:= v1 + 1;
  #L1b6c14.  goto L1b6bfe;
  #L1b6c16.  return @kind void;
}
procedure `boolean` `g`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.g:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b6954.  v0:= 1I;
  #L1b6956.  if v2 == 0 then goto L1b696a;
  #L1b695a.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1b6960.  v2:= temp;
  #L1b6962.  if v2 != 0 then goto L1b6968;
  #L1b6966.  goto L1b696a;
  #L1b6968.  v0:= 0I;
  #L1b696a.  return v0;
}
procedure `char`[] `h`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.h:(C)[C` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b697c.  v0:= 34I;
  #L1b6980.  if v2 == v0 then goto L1b69c0;
  #L1b6984.  v0:= 60I;
  #L1b6988.  if v2 == v0 then goto L1b69ba;
  #L1b698c.  v0:= 62I;
  #L1b6990.  if v2 == v0 then goto L1b69b4;
  #L1b6994.  v0:= 38I;
  #L1b6998.  if v2 == v0 then goto L1b69ae;
  #L1b699c.  v0:= 39I;
  #L1b69a0.  if v2 == v0 then goto L1b69a8;
  #L1b69a4.  v2:= 0I;
  #L1b69a6.  return v2 @kind object;
  #L1b69a8.  v2:= `@@org.simpleframework.xml.stream.Formatter.j` @type ^`char`[] @kind object;
  #L1b69ac.  return v2 @kind object;
  #L1b69ae.  v2:= `@@org.simpleframework.xml.stream.Formatter.k` @type ^`char`[] @kind object;
  #L1b69b2.  return v2 @kind object;
  #L1b69b4.  v2:= `@@org.simpleframework.xml.stream.Formatter.h` @type ^`char`[] @kind object;
  #L1b69b8.  return v2 @kind object;
  #L1b69ba.  v2:= `@@org.simpleframework.xml.stream.Formatter.g` @type ^`char`[] @kind object;
  #L1b69be.  return v2 @kind object;
  #L1b69c0.  v2:= `@@org.simpleframework.xml.stream.Formatter.i` @type ^`char`[] @kind object;
  #L1b69c4.  return v2 @kind object;
}
procedure `void` `i`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `char` v3 ) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b6c5c.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6c60.  v1:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6c64.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L1b6c6a.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6c6e.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L1b6c74.  v0:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6c78.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L1b6c7e.  return @kind void;
}
procedure `void` `j`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b6cc4.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6cc8.  v1:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6ccc.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L1b6cd2.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6cd6.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L1b6cdc.  v0:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6ce0.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1b6ce6.  return @kind void;
}
procedure `void` `k`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.k:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b6cf8.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6cfc.  v1:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6d00.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L1b6d06.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6d0a.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L1b6d10.  call temp:= `g`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.g:(Ljava/lang/String;)Z` @kind direct;
  #L1b6d16.  v0:= temp;
  #L1b6d18.  if v0 != 0 then goto L1b6d34;
  #L1b6d1c.  v0:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6d20.  call `write`(v0, v4) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1b6d26.  v4:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6d2a.  v0:= 58I;
  #L1b6d2e.  call `write`(v4, v0) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L1b6d34.  v4:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6d38.  call `write`(v4, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1b6d3e.  return @kind void;
}
procedure `void` `l`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.l:([C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b6c90.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6c94.  v1:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6c98.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L1b6c9e.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6ca2.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L1b6ca8.  v0:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6cac.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:([C)V` @kind virtual;
  #L1b6cb2.  return @kind void;
}
procedure `void` `flush`(`org.simpleframework.xml.stream.Formatter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b6c28.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6c2c.  v1:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6c30.  call `write`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.write:(Ljava/io/Writer;)V` @kind virtual;
  #L1b6c36.  v0:= v2.`org.simpleframework.xml.stream.Formatter.a` @type ^`org.simpleframework.xml.stream.OutputBuffer` @kind object;
  #L1b6c3a.  call `clear`(v0) @signature `Lorg/simpleframework/xml/stream/OutputBuffer;.clear:()V` @kind virtual;
  #L1b6c40.  v0:= v2.`org.simpleframework.xml.stream.Formatter.c` @type ^`java.io.Writer` @kind object;
  #L1b6c44.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L1b6c4a.  return @kind void;
}
procedure `void` `writeAttribute`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b6d50.  v0:= v2.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6d54.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6d58.  if v0 != v1 then goto L1b6d8e;
  #L1b6d5c.  v0:= 32I;
  #L1b6d60.  call `i`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6d66.  call `k`(v2, v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.k:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b6d6c.  v3:= 61I;
  #L1b6d70.  call `i`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6d76.  v3:= 34I;
  #L1b6d7a.  call `i`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6d80.  call `f`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.f:(Ljava/lang/String;)V` @kind direct;
  #L1b6d86.  call `i`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6d8c.  return @kind void;
  #L1b6d8e.  v3:= new `org.simpleframework.xml.stream.NodeException`;
  #L1b6d92.  v4:= "Start element required" @kind object;
  #L1b6d96.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b6d9c.  throw v3;
}
procedure `void` `writeComment`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeComment:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b6db0.  v0:= v3.`org.simpleframework.xml.stream.Formatter.b` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L1b6db4.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.top:()Ljava/lang/String;` @kind virtual;
  #L1b6dba.  v0:= temp @kind object;
  #L1b6dbc.  v1:= v3.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6dc0.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6dc4.  if v1 != v2 then goto L1b6dd2;
  #L1b6dc8.  v1:= 62I;
  #L1b6dcc.  call `a`(v3, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.a:(C)V` @kind direct;
  #L1b6dd2.  if v0 == 0 then goto L1b6df6;
  #L1b6dd6.  call `b`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @kind direct;
  #L1b6ddc.  v0:= `@@org.simpleframework.xml.stream.Formatter.l` @type ^`char`[] @kind object;
  #L1b6de0.  call `c`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.c:([C)V` @kind direct;
  #L1b6de6.  call `b`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @kind direct;
  #L1b6dec.  v4:= `@@org.simpleframework.xml.stream.Formatter.m` @type ^`char`[] @kind object;
  #L1b6df0.  call `c`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.c:([C)V` @kind direct;
  #L1b6df6.  v4:= `@@org.simpleframework.xml.stream.Formatter$Tag.COMMENT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6dfa.  v3.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v4 @kind object;
  #L1b6dfe.  return @kind void;
}
procedure `void` `writeEnd`(`org.simpleframework.xml.stream.Formatter` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeEnd:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b6e10.  v0:= v6.`org.simpleframework.xml.stream.Formatter.b` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L1b6e14.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.pop:()Ljava/lang/String;` @kind virtual;
  #L1b6e1a.  v0:= temp @kind object;
  #L1b6e1c.  v1:= v6.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e20.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e24.  v3:= 62I;
  #L1b6e28.  v4:= 47I;
  #L1b6e2c.  if v1 != v2 then goto L1b6e3e;
  #L1b6e30.  call `i`(v6, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6e36.  call `i`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6e3c.  goto L1b6e70;
  #L1b6e3e.  v5:= `@@org.simpleframework.xml.stream.Formatter$Tag.TEXT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e42.  if v1 == v5 then goto L1b6e4c;
  #L1b6e46.  call `j`(v6, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6e4c.  v0:= v6.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e50.  if v0 == v2 then goto L1b6e70;
  #L1b6e54.  v0:= 60I;
  #L1b6e58.  call `i`(v6, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6e5e.  call `i`(v6, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6e64.  call `k`(v6, v7, v8) @signature `Lorg/simpleframework/xml/stream/Formatter;.k:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b6e6a.  call `i`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6e70.  v7:= `@@org.simpleframework.xml.stream.Formatter$Tag.END` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e74.  v6.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v7 @kind object;
  #L1b6e78.  return @kind void;
}
procedure `void` `writeNamespace`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeNamespace:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b6e8c.  v0:= v2.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e90.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6e94.  if v0 != v1 then goto L1b6eea;
  #L1b6e98.  v0:= 32I;
  #L1b6e9c.  call `i`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6ea2.  v0:= `@@org.simpleframework.xml.stream.Formatter.f` @type ^`char`[] @kind object;
  #L1b6ea6.  call `l`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.l:([C)V` @kind direct;
  #L1b6eac.  call temp:= `g`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.g:(Ljava/lang/String;)Z` @kind direct;
  #L1b6eb2.  v0:= temp;
  #L1b6eb4.  if v0 != 0 then goto L1b6ec8;
  #L1b6eb8.  v0:= 58I;
  #L1b6ebc.  call `i`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6ec2.  call `j`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6ec8.  v4:= 61I;
  #L1b6ecc.  call `i`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6ed2.  v4:= 34I;
  #L1b6ed6.  call `i`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6edc.  call `f`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.f:(Ljava/lang/String;)V` @kind direct;
  #L1b6ee2.  call `i`(v2, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6ee8.  return @kind void;
  #L1b6eea.  v3:= new `org.simpleframework.xml.stream.NodeException`;
  #L1b6eee.  v4:= "Start element required" @kind object;
  #L1b6ef2.  call `<init>`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b6ef8.  throw v3;
}
procedure `void` `writeProlog`(`org.simpleframework.xml.stream.Formatter` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeProlog:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b6f0c.  v0:= v1.`org.simpleframework.xml.stream.Formatter.d` @type ^`java.lang.String` @kind object;
  #L1b6f10.  if v0 == 0 then goto L1b6f24;
  #L1b6f14.  call `j`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6f1a.  v0:= "\n" @kind object;
  #L1b6f1e.  call `j`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.j:(Ljava/lang/String;)V` @kind direct;
  #L1b6f24.  return @kind void;
}
procedure `void` `writeStart`(`org.simpleframework.xml.stream.Formatter` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeStart:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b6f38.  v0:= v3.`org.simpleframework.xml.stream.Formatter.b` @type ^`org.simpleframework.xml.stream.Indenter` @kind object;
  #L1b6f3c.  call temp:= `push`(v0) @signature `Lorg/simpleframework/xml/stream/Indenter;.push:()Ljava/lang/String;` @kind virtual;
  #L1b6f42.  v0:= temp @kind object;
  #L1b6f44.  v1:= v3.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6f48.  v2:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6f4c.  if v1 != v2 then goto L1b6f5a;
  #L1b6f50.  v1:= 62I;
  #L1b6f54.  call `a`(v3, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.a:(C)V` @kind direct;
  #L1b6f5a.  call `flush`(v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @kind virtual;
  #L1b6f60.  call `b`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @kind direct;
  #L1b6f66.  v0:= 60I;
  #L1b6f6a.  call `a`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.a:(C)V` @kind direct;
  #L1b6f70.  call temp:= `g`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.g:(Ljava/lang/String;)Z` @kind direct;
  #L1b6f76.  v0:= temp;
  #L1b6f78.  if v0 != 0 then goto L1b6f8c;
  #L1b6f7c.  call `b`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @kind direct;
  #L1b6f82.  v5:= 58I;
  #L1b6f86.  call `a`(v3, v5) @signature `Lorg/simpleframework/xml/stream/Formatter;.a:(C)V` @kind direct;
  #L1b6f8c.  call `b`(v3, v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.b:(Ljava/lang/String;)V` @kind direct;
  #L1b6f92.  v3.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v2 @kind object;
  #L1b6f96.  return @kind void;
}
procedure `void` `writeText`(`org.simpleframework.xml.stream.Formatter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b6fa8.  v0:= `@@org.simpleframework.xml.stream.Mode.ESCAPE` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L1b6fac.  call `writeText`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @kind virtual;
  #L1b6fb2.  return @kind void;
}
procedure `void` `writeText`(`org.simpleframework.xml.stream.Formatter` v2 @kind this, `java.lang.String` v3 @kind object, `org.simpleframework.xml.stream.Mode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b6fc4.  v0:= v2.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6fc8.  v1:= `@@org.simpleframework.xml.stream.Formatter$Tag.START` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6fcc.  if v0 != v1 then goto L1b6fda;
  #L1b6fd0.  v0:= 62I;
  #L1b6fd4.  call `i`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.i:(C)V` @kind direct;
  #L1b6fda.  v0:= `@@org.simpleframework.xml.stream.Mode.DATA` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L1b6fde.  if v4 != v0 then goto L1b6fea;
  #L1b6fe2.  call `d`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.d:(Ljava/lang/String;)V` @kind direct;
  #L1b6fe8.  goto L1b6ff0;
  #L1b6fea.  call `f`(v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.f:(Ljava/lang/String;)V` @kind direct;
  #L1b6ff0.  v3:= `@@org.simpleframework.xml.stream.Formatter$Tag.TEXT` @type ^`org.simpleframework.xml.stream.Formatter$Tag` @kind object;
  #L1b6ff4.  v2.`org.simpleframework.xml.stream.Formatter.e` @type ^`org.simpleframework.xml.stream.Formatter$Tag` := v3 @kind object;
  #L1b6ff8.  return @kind void;
}
