record `org.simpleframework.xml.stream.InputStack` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.Stack` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.InputStack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/InputStack;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b7ce0.  v0:= 6I;
  #L1b7ce2.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/stream/Stack;.<init>:(I)V` @kind direct;
  #L1b7ce8.  return @kind void;
}
procedure `boolean` `isRelevant`(`org.simpleframework.xml.stream.InputStack` v0 @kind this, `org.simpleframework.xml.stream.InputNode` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;

  #L1b7cac.  call temp:= `contains`(v0, v1) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b7cb2.  v1:= temp;
  #L1b7cb4.  if v1 != 0 then goto L1b7cca;
  #L1b7cb8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L1b7cbe.  v1:= temp;
  #L1b7cc0.  if v1 == 0 then goto L1b7cc6;
  #L1b7cc4.  goto L1b7cca;
  #L1b7cc6.  v1:= 0I;
  #L1b7cc8.  goto L1b7ccc;
  #L1b7cca.  v1:= 1I;
  #L1b7ccc.  return v1;
}
