record `org.simpleframework.xml.stream.OutputStack$Sequence` @kind class @AccessFlag PUBLIC extends `java.util.Iterator` @kind interface {
  `int` `org.simpleframework.xml.stream.OutputStack$Sequence.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.OutputStack` `org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.OutputStack$Sequence` v0 @kind this, `org.simpleframework.xml.stream.OutputStack` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.<init>:(Lorg/simpleframework/xml/stream/OutputStack;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b936c.  v0.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` := v1 @kind object;
  #L1b9370.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b9376.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L1b937c.  v1:= temp;
  #L1b937e.  v0.`org.simpleframework.xml.stream.OutputStack$Sequence.a` @type ^`int` := v1;
  #L1b9382.  return @kind void;
}
procedure `boolean` `hasNext`(`org.simpleframework.xml.stream.OutputStack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b92f0.  v0:= v1.`org.simpleframework.xml.stream.OutputStack$Sequence.a` @type ^`int`;
  #L1b92f4.  if v0 <= 0 then goto L1b92fc;
  #L1b92f8.  v0:= 1I;
  #L1b92fa.  goto L1b92fe;
  #L1b92fc.  v0:= 0I;
  #L1b92fe.  return v0;
}
procedure `java.lang.Object` `next`(`org.simpleframework.xml.stream.OutputStack$Sequence` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1b9310.  call temp:= `next`(v1) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b9316.  v0:= temp @kind object;
  #L1b9318.  return v0 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `next`(`org.simpleframework.xml.stream.OutputStack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.next:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b932c.  call temp:= `hasNext`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.hasNext:()Z` @kind virtual;
  #L1b9332.  v0:= temp;
  #L1b9334.  if v0 == 0 then goto L1b9356;
  #L1b9338.  v0:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b933c.  v1:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.a` @type ^`int`;
  #L1b9340.  v1:= v1 + -1;
  #L1b9344.  v2.`org.simpleframework.xml.stream.OutputStack$Sequence.a` @type ^`int` := v1;
  #L1b9348.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1b934e.  v0:= temp @kind object;
  #L1b9350.  v0:= (`org.simpleframework.xml.stream.OutputNode`) v0 @kind object;
  #L1b9354.  return v0 @kind object;
  #L1b9356.  v0:= 0I;
  #L1b9358.  return v0 @kind object;
}
procedure `void` `remove`(`org.simpleframework.xml.stream.OutputStack$Sequence` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/OutputStack$Sequence;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b9394.  v0:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.this$0` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L1b9398.  v1:= v2.`org.simpleframework.xml.stream.OutputStack$Sequence.a` @type ^`int`;
  #L1b939c.  call temp:= `purge`(v0, v1) @signature `Lorg/simpleframework/xml/stream/OutputStack;.purge:(I)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b93a2.  return @kind void;
}
