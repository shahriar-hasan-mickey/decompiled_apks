record `org.simpleframework.xml.stream.NodeBuilder` @kind class @AccessFlag PUBLIC_FINAL {
}
global `org.simpleframework.xml.stream.Provider` `@@org.simpleframework.xml.stream.NodeBuilder.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b7e7c.  call temp:= `getInstance`() @signature `Lorg/simpleframework/xml/stream/ProviderFactory;.getInstance:()Lorg/simpleframework/xml/stream/Provider;` @kind static;
  #L1b7e82.  v0:= temp @kind object;
  #L1b7e84.  `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` := v0 @kind object;
  #L1b7e88.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeBuilder` v0 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b7e9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b7ea2.  return @kind void;
}
procedure `org.simpleframework.xml.stream.InputNode` `a`(`org.simpleframework.xml.stream.EventReader` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1b7e10.  v0:= new `org.simpleframework.xml.stream.NodeReader`;
  #L1b7e14.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeReader;.<init>:(Lorg/simpleframework/xml/stream/EventReader;)V` @kind direct;
  #L1b7e1a.  call temp:= `readRoot`(v0) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readRoot:()Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L1b7e20.  v1:= temp @kind object;
  #L1b7e22.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `read`(`java.io.InputStream` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.read:(Ljava/io/InputStream;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1b7dc0.  v0:= `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` @kind object;
  #L1b7dc4.  call temp:= `provide`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Provider;.provide:(Ljava/io/InputStream;)Lorg/simpleframework/xml/stream/EventReader;` @kind interface;
  #L1b7dca.  v1:= temp @kind object;
  #L1b7dcc.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @kind static;
  #L1b7dd2.  v1:= temp @kind object;
  #L1b7dd4.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `read`(`java.io.Reader` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.read:(Ljava/io/Reader;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1b7de8.  v0:= `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` @kind object;
  #L1b7dec.  call temp:= `provide`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Provider;.provide:(Ljava/io/Reader;)Lorg/simpleframework/xml/stream/EventReader;` @kind interface;
  #L1b7df2.  v1:= temp @kind object;
  #L1b7df4.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @kind static;
  #L1b7dfa.  v1:= temp @kind object;
  #L1b7dfc.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `write`(`java.io.Writer` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1b7e34.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L1b7e38.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L1b7e3e.  call temp:= `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)Lorg/simpleframework/xml/stream/OutputNode;` @kind static;
  #L1b7e44.  v1:= temp @kind object;
  #L1b7e46.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `write`(`java.io.Writer` v1 @kind object, `org.simpleframework.xml.stream.Format` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1b7e58.  v0:= new `org.simpleframework.xml.stream.NodeWriter`;
  #L1b7e5c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L1b7e62.  call temp:= `writeRoot`(v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeRoot:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L1b7e68.  v1:= temp @kind object;
  #L1b7e6a.  return v1 @kind object;
}
