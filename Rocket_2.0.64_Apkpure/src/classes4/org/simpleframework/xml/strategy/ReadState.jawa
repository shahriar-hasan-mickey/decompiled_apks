record `org.simpleframework.xml.strategy.ReadState` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.util.WeakCache` @kind class {
  `org.simpleframework.xml.strategy.Contract` `org.simpleframework.xml.strategy.ReadState.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadState.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.<init>:(Lorg/simpleframework/xml/strategy/Contract;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5930.  call `<init>`(v1) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:()V` @kind direct;
  #L1b5936.  v0:= new `org.simpleframework.xml.strategy.Loader`;
  #L1b593a.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.<init>:()V` @kind direct;
  #L1b5940.  v1.`org.simpleframework.xml.strategy.ReadState.c` @type ^`org.simpleframework.xml.strategy.Loader` := v0 @kind object;
  #L1b5944.  v1.`org.simpleframework.xml.strategy.ReadState.b` @type ^`org.simpleframework.xml.strategy.Contract` := v2 @kind object;
  #L1b5948.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `b`(`org.simpleframework.xml.strategy.ReadState` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.b:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b58c8.  call temp:= `fetch`(v3, v4) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b58ce.  v0:= temp @kind object;
  #L1b58d0.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L1b58d4.  if v0 != 0 then goto L1b58f0;
  #L1b58d8.  v0:= new `org.simpleframework.xml.strategy.ReadGraph`;
  #L1b58dc.  v1:= v3.`org.simpleframework.xml.strategy.ReadState.b` @type ^`org.simpleframework.xml.strategy.Contract` @kind object;
  #L1b58e0.  v2:= v3.`org.simpleframework.xml.strategy.ReadState.c` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L1b58e4.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @kind direct;
  #L1b58ea.  call `cache`(v3, v4, v0) @signature `Lorg/simpleframework/xml/util/WeakCache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1b58f0.  return v0 @kind object;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `find`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.find:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5904.  call temp:= `fetch`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b590a.  v0:= temp @kind object;
  #L1b590c.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L1b5910.  if v0 == 0 then goto L1b5916;
  #L1b5914.  return v0 @kind object;
  #L1b5916.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadState;.b:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @kind direct;
  #L1b591c.  v2:= temp @kind object;
  #L1b591e.  return v2 @kind object;
}
