record `org.simpleframework.xml.strategy.VisitorStrategy` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.strategy.Strategy` @kind interface {
  `org.simpleframework.xml.strategy.Strategy` `org.simpleframework.xml.strategy.VisitorStrategy.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Visitor` `org.simpleframework.xml.strategy.VisitorStrategy.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.VisitorStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Visitor` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/VisitorStrategy;.<init>:(Lorg/simpleframework/xml/strategy/Visitor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5c00.  v0:= new `org.simpleframework.xml.strategy.TreeStrategy`;
  #L1b5c04.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:()V` @kind direct;
  #L1b5c0a.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/strategy/VisitorStrategy;.<init>:(Lorg/simpleframework/xml/strategy/Visitor;Lorg/simpleframework/xml/strategy/Strategy;)V` @kind direct;
  #L1b5c10.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.VisitorStrategy` v0 @kind this, `org.simpleframework.xml.strategy.Visitor` v1 @kind object, `org.simpleframework.xml.strategy.Strategy` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/VisitorStrategy;.<init>:(Lorg/simpleframework/xml/strategy/Visitor;Lorg/simpleframework/xml/strategy/Strategy;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1b5c24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b5c2a.  v0.`org.simpleframework.xml.strategy.VisitorStrategy.a` @type ^`org.simpleframework.xml.strategy.Strategy` := v2 @kind object;
  #L1b5c2e.  v0.`org.simpleframework.xml.strategy.VisitorStrategy.b` @type ^`org.simpleframework.xml.strategy.Visitor` := v1 @kind object;
  #L1b5c32.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.VisitorStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/VisitorStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5bd4.  v0:= v1.`org.simpleframework.xml.strategy.VisitorStrategy.b` @type ^`org.simpleframework.xml.strategy.Visitor` @kind object;
  #L1b5bd8.  if v0 == 0 then goto L1b5be2;
  #L1b5bdc.  call `read`(v0, v2, v3) @signature `Lorg/simpleframework/xml/strategy/Visitor;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)V` @kind interface;
  #L1b5be2.  v0:= v1.`org.simpleframework.xml.strategy.VisitorStrategy.a` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L1b5be6.  call temp:= `read`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/Strategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L1b5bec.  v2:= temp @kind object;
  #L1b5bee.  return v2 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.strategy.VisitorStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/VisitorStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5ba8.  v0:= v1.`org.simpleframework.xml.strategy.VisitorStrategy.a` @type ^`org.simpleframework.xml.strategy.Strategy` @kind object;
  #L1b5bac.  call temp:= `write`(v0, v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/Strategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @kind interface;
  #L1b5bb2.  v3:= temp;
  #L1b5bb4.  v5:= v1.`org.simpleframework.xml.strategy.VisitorStrategy.b` @type ^`org.simpleframework.xml.strategy.Visitor` @kind object;
  #L1b5bb8.  if v5 == 0 then goto L1b5bc2;
  #L1b5bbc.  call `write`(v5, v2, v4) @signature `Lorg/simpleframework/xml/strategy/Visitor;.write:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)V` @kind interface;
  #L1b5bc2.  return v3;
}
