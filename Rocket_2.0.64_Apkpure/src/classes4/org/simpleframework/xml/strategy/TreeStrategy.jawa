record `org.simpleframework.xml.strategy.TreeStrategy` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.strategy.Strategy` @kind interface {
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.TreeStrategy.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.TreeStrategy.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.TreeStrategy.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.TreeStrategy` v2 @kind this) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b5b58.  v0:= "class" @kind object;
  #L1b5b5c.  v1:= "length" @kind object;
  #L1b5b60.  call `<init>`(v2, v0, v1) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b5b66.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5b78.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b5b7e.  v0:= new `org.simpleframework.xml.strategy.Loader`;
  #L1b5b82.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.<init>:()V` @kind direct;
  #L1b5b88.  v1.`org.simpleframework.xml.strategy.TreeStrategy.a` @type ^`org.simpleframework.xml.strategy.Loader` := v0 @kind object;
  #L1b5b8c.  v1.`org.simpleframework.xml.strategy.TreeStrategy.b` @type ^`java.lang.String` := v3 @kind object;
  #L1b5b90.  v1.`org.simpleframework.xml.strategy.TreeStrategy.c` @type ^`java.lang.String` := v2 @kind object;
  #L1b5b94.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `a`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.a:(Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b5b18.  v0:= v1.`org.simpleframework.xml.strategy.TreeStrategy.b` @type ^`java.lang.String` @kind object;
  #L1b5b1c.  call temp:= `remove`(v3, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b5b22.  v3:= temp @kind object;
  #L1b5b24.  if v3 == 0 then goto L1b5b3a;
  #L1b5b28.  call temp:= `getValue`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b5b2e.  v3:= temp @kind object;
  #L1b5b30.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L1b5b36.  v3:= temp;
  #L1b5b38.  goto L1b5b3c;
  #L1b5b3a.  v3:= 0I;
  #L1b5b3c.  v0:= new `org.simpleframework.xml.strategy.ArrayValue`;
  #L1b5b40.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/strategy/ArrayValue;.<init>:(Ljava/lang/Class;I)V` @kind direct;
  #L1b5b46.  return v0 @kind object;
}
procedure `java.lang.Class` `b`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.b:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b5a40.  v0:= v1.`org.simpleframework.xml.strategy.TreeStrategy.c` @type ^`java.lang.String` @kind object;
  #L1b5a44.  call temp:= `remove`(v3, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b5a4a.  v3:= temp @kind object;
  #L1b5a4c.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b5a52.  v2:= temp @kind object;
  #L1b5a54.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b5a5a.  v0:= temp;
  #L1b5a5c.  if v0 == 0 then goto L1b5a68;
  #L1b5a60.  call temp:= `getComponentType`(v2) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b5a66.  v2:= temp @kind object;
  #L1b5a68.  if v3 == 0 then goto L1b5a80;
  #L1b5a6c.  call temp:= `getValue`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b5a72.  v2:= temp @kind object;
  #L1b5a74.  v3:= v1.`org.simpleframework.xml.strategy.TreeStrategy.a` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L1b5a78.  call temp:= `load`(v3, v2) @signature `Lorg/simpleframework/xml/strategy/Loader;.load:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L1b5a7e.  v2:= temp @kind object;
  #L1b5a80.  return v2 @kind object;
}
procedure `java.lang.Class` `c`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.c:(Ljava/lang/Class;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b5a94.  call temp:= `getLength`(v3) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L1b5a9a.  v3:= temp;
  #L1b5a9c.  v0:= v1.`org.simpleframework.xml.strategy.TreeStrategy.b` @type ^`java.lang.String` @kind object;
  #L1b5aa0.  if v0 == 0 then goto L1b5ab2;
  #L1b5aa4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L1b5aaa.  v3:= temp @kind object;
  #L1b5aac.  call temp:= `put`(v4, v0, v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.put:(Ljava/lang/String;Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b5ab2.  call temp:= `getComponentType`(v2) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b5ab8.  v2:= temp @kind object;
  #L1b5aba.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5acc.  call temp:= `b`(v1, v2, v3) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.b:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Ljava/lang/Class;` @kind direct;
  #L1b5ad2.  v4:= temp @kind object;
  #L1b5ad4.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b5ada.  v2:= temp @kind object;
  #L1b5adc.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b5ae2.  v0:= temp;
  #L1b5ae4.  if v0 == 0 then goto L1b5af2;
  #L1b5ae8.  call temp:= `a`(v1, v4, v3) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.a:(Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b5aee.  v2:= temp @kind object;
  #L1b5af0.  return v2 @kind object;
  #L1b5af2.  if v2 == v4 then goto L1b5b02;
  #L1b5af6.  v2:= new `org.simpleframework.xml.strategy.ObjectValue`;
  #L1b5afa.  call `<init>`(v2, v4) @signature `Lorg/simpleframework/xml/strategy/ObjectValue;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1b5b00.  return v2 @kind object;
  #L1b5b02.  v2:= 0I;
  #L1b5b04.  return v2 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.strategy.TreeStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b59ec.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b59f2.  v5:= temp @kind object;
  #L1b59f4.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b59fa.  v2:= temp @kind object;
  #L1b59fc.  call temp:= `isArray`(v5) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b5a02.  v0:= temp;
  #L1b5a04.  if v0 == 0 then goto L1b5a12;
  #L1b5a08.  call temp:= `c`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/TreeStrategy;.c:(Ljava/lang/Class;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Ljava/lang/Class;` @kind direct;
  #L1b5a0e.  v3:= temp @kind object;
  #L1b5a10.  goto L1b5a14;
  #L1b5a12.  v3:= v5 @kind object;
  #L1b5a14.  if v5 == v2 then goto L1b5a2a;
  #L1b5a18.  v2:= v1.`org.simpleframework.xml.strategy.TreeStrategy.c` @type ^`java.lang.String` @kind object;
  #L1b5a1c.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b5a22.  v3:= temp @kind object;
  #L1b5a24.  call temp:= `put`(v4, v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeMap;.put:(Ljava/lang/String;Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b5a2a.  v2:= 0I;
  #L1b5a2c.  return v2;
}
