record `org.simpleframework.xml.strategy.ReadGraph` @kind class @AccessFlag PUBLIC extends `java.util.HashMap` @kind class {
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadGraph.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object, `org.simpleframework.xml.strategy.Loader` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b587c.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1b5882.  call temp:= `getReference`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getReference:()Ljava/lang/String;` @kind virtual;
  #L1b5888.  v0:= temp @kind object;
  #L1b588a.  v1.`org.simpleframework.xml.strategy.ReadGraph.e` @type ^`java.lang.String` := v0 @kind object;
  #L1b588e.  call temp:= `getIdentity`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getIdentity:()Ljava/lang/String;` @kind virtual;
  #L1b5894.  v0:= temp @kind object;
  #L1b5896.  v1.`org.simpleframework.xml.strategy.ReadGraph.d` @type ^`java.lang.String` := v0 @kind object;
  #L1b589a.  call temp:= `getLength`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLength:()Ljava/lang/String;` @kind virtual;
  #L1b58a0.  v0:= temp @kind object;
  #L1b58a2.  v1.`org.simpleframework.xml.strategy.ReadGraph.b` @type ^`java.lang.String` := v0 @kind object;
  #L1b58a6.  call temp:= `getLabel`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLabel:()Ljava/lang/String;` @kind virtual;
  #L1b58ac.  v2:= temp @kind object;
  #L1b58ae.  v1.`org.simpleframework.xml.strategy.ReadGraph.c` @type ^`java.lang.String` := v2 @kind object;
  #L1b58b2.  v1.`org.simpleframework.xml.strategy.ReadGraph.a` @type ^`org.simpleframework.xml.strategy.Loader` := v3 @kind object;
  #L1b58b6.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `b`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L1b5700.  v1:= v0.`org.simpleframework.xml.strategy.ReadGraph.b` @type ^`java.lang.String` @kind object;
  #L1b5704.  call temp:= `remove`(v3, v1) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b570a.  v1:= temp @kind object;
  #L1b570c.  if v1 == 0 then goto L1b5722;
  #L1b5710.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b5716.  v1:= temp @kind object;
  #L1b5718.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L1b571e.  v1:= temp;
  #L1b5720.  goto L1b5724;
  #L1b5722.  v1:= 0I;
  #L1b5724.  v3:= new `org.simpleframework.xml.strategy.ArrayValue`;
  #L1b5728.  call `<init>`(v3, v2, v1) @signature `Lorg/simpleframework/xml/strategy/ArrayValue;.<init>:(Ljava/lang/Class;I)V` @kind direct;
  #L1b572e.  return v3 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `c`(`org.simpleframework.xml.strategy.ReadGraph` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.c:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b5740.  v0:= v2.`org.simpleframework.xml.strategy.ReadGraph.d` @type ^`java.lang.String` @kind object;
  #L1b5744.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b574a.  v0:= temp @kind object;
  #L1b574c.  if v0 != 0 then goto L1b575a;
  #L1b5750.  call temp:= `d`(v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b5756.  v3:= temp @kind object;
  #L1b5758.  return v3 @kind object;
  #L1b575a.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b5760.  v0:= temp @kind object;
  #L1b5762.  call temp:= `containsKey`(v2, v0) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b5768.  v1:= temp;
  #L1b576a.  if v1 != 0 then goto L1b5778;
  #L1b576e.  call temp:= `f`(v2, v3, v4, v5, v0) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.f:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b5774.  v3:= temp @kind object;
  #L1b5776.  return v3 @kind object;
  #L1b5778.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L1b577c.  v4:= 1I;
  #L1b577e.  v4:= new `java.lang.Object`[v4];
  #L1b5782.  v5:= 0I;
  #L1b5784.  v4[v5]:= v0 @kind object;
  #L1b5788.  v5:= "Element '%s' already exists" @kind object;
  #L1b578c.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b5792.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `d`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b57a4.  v0:= v1.`org.simpleframework.xml.strategy.ReadGraph.e` @type ^`java.lang.String` @kind object;
  #L1b57a8.  call temp:= `remove`(v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b57ae.  v0:= temp @kind object;
  #L1b57b0.  if v0 != 0 then goto L1b57be;
  #L1b57b4.  call temp:= `e`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b57ba.  v2:= temp @kind object;
  #L1b57bc.  return v2 @kind object;
  #L1b57be.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b57c4.  v2:= temp @kind object;
  #L1b57c6.  call temp:= `get`(v1, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b57cc.  v4:= temp @kind object;
  #L1b57ce.  call temp:= `containsKey`(v1, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b57d4.  v0:= temp;
  #L1b57d6.  if v0 == 0 then goto L1b57e6;
  #L1b57da.  v2:= new `org.simpleframework.xml.strategy.Reference`;
  #L1b57de.  call `<init>`(v2, v4, v3) @signature `Lorg/simpleframework/xml/strategy/Reference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;)V` @kind direct;
  #L1b57e4.  return v2 @kind object;
  #L1b57e6.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L1b57ea.  v4:= 1I;
  #L1b57ec.  v4:= new `java.lang.Object`[v4];
  #L1b57f0.  v0:= 0I;
  #L1b57f2.  v4[v0]:= v2 @kind object;
  #L1b57f6.  v2:= "Invalid reference '%s' found" @kind object;
  #L1b57fa.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L1b5800.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `e`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b5814.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b581a.  v0:= temp @kind object;
  #L1b581c.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b5822.  v0:= temp;
  #L1b5824.  if v0 == 0 then goto L1b5832;
  #L1b5828.  call temp:= `b`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b582e.  v2:= temp @kind object;
  #L1b5830.  return v2 @kind object;
  #L1b5832.  v2:= new `org.simpleframework.xml.strategy.ObjectValue`;
  #L1b5836.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/strategy/ObjectValue;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1b583c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `f`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.f:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L1b5850.  call temp:= `e`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b5856.  v1:= temp @kind object;
  #L1b5858.  if v4 == 0 then goto L1b5868;
  #L1b585c.  v2:= new `org.simpleframework.xml.strategy.Allocate`;
  #L1b5860.  call `<init>`(v2, v1, v0, v4) @signature `Lorg/simpleframework/xml/strategy/Allocate;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/util/Map;Ljava/lang/String;)V` @kind direct;
  #L1b5866.  return v2 @kind object;
  #L1b5868.  return v1 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.ReadGraph` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b56a4.  v0:= v3.`org.simpleframework.xml.strategy.ReadGraph.c` @type ^`java.lang.String` @kind object;
  #L1b56a8.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L1b56ae.  v0:= temp @kind object;
  #L1b56b0.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L1b56b6.  v1:= temp @kind object;
  #L1b56b8.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b56be.  v2:= temp;
  #L1b56c0.  if v2 == 0 then goto L1b56cc;
  #L1b56c4.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b56ca.  v1:= temp @kind object;
  #L1b56cc.  if v0 == 0 then goto L1b56e4;
  #L1b56d0.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L1b56d6.  v0:= temp @kind object;
  #L1b56d8.  v1:= v3.`org.simpleframework.xml.strategy.ReadGraph.a` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L1b56dc.  call temp:= `load`(v1, v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.load:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L1b56e2.  v1:= temp @kind object;
  #L1b56e4.  call temp:= `c`(v3, v4, v1, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.c:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L1b56ea.  v4:= temp @kind object;
  #L1b56ec.  return v4 @kind object;
}
