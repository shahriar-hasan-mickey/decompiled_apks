record `org.simpleframework.xml.strategy.CycleStrategy` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.strategy.Strategy` @kind interface {
  `org.simpleframework.xml.strategy.WriteState` `org.simpleframework.xml.strategy.CycleStrategy.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.ReadState` `org.simpleframework.xml.strategy.CycleStrategy.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Contract` `org.simpleframework.xml.strategy.CycleStrategy.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.CycleStrategy` v2 @kind this) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b54f0.  v0:= "id" @kind object;
  #L1b54f4.  v1:= "reference" @kind object;
  #L1b54f8.  call `<init>`(v2, v0, v1) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b54fe.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.CycleStrategy` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5510.  v0:= "class" @kind object;
  #L1b5514.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b551a.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.CycleStrategy` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b552c.  v0:= "length" @kind object;
  #L1b5530.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b5536.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.CycleStrategy` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b5548.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b554e.  v0:= new `org.simpleframework.xml.strategy.Contract`;
  #L1b5552.  call `<init>`(v0, v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/Contract;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1b5558.  v1.`org.simpleframework.xml.strategy.CycleStrategy.c` @type ^`org.simpleframework.xml.strategy.Contract` := v0 @kind object;
  #L1b555c.  v2:= new `org.simpleframework.xml.strategy.WriteState`;
  #L1b5560.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/strategy/WriteState;.<init>:(Lorg/simpleframework/xml/strategy/Contract;)V` @kind direct;
  #L1b5566.  v1.`org.simpleframework.xml.strategy.CycleStrategy.a` @type ^`org.simpleframework.xml.strategy.WriteState` := v2 @kind object;
  #L1b556a.  v2:= new `org.simpleframework.xml.strategy.ReadState`;
  #L1b556e.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/strategy/ReadState;.<init>:(Lorg/simpleframework/xml/strategy/Contract;)V` @kind direct;
  #L1b5574.  v1.`org.simpleframework.xml.strategy.CycleStrategy.b` @type ^`org.simpleframework.xml.strategy.ReadState` := v2 @kind object;
  #L1b5578.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.CycleStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b54c0.  v0:= v1.`org.simpleframework.xml.strategy.CycleStrategy.b` @type ^`org.simpleframework.xml.strategy.ReadState` @kind object;
  #L1b54c4.  call temp:= `find`(v0, v4) @signature `Lorg/simpleframework/xml/strategy/ReadState;.find:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @kind virtual;
  #L1b54ca.  v4:= temp @kind object;
  #L1b54cc.  if v4 == 0 then goto L1b54da;
  #L1b54d0.  call temp:= `read`(v4, v2, v3) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L1b54d6.  v2:= temp @kind object;
  #L1b54d8.  return v2 @kind object;
  #L1b54da.  v2:= 0I;
  #L1b54dc.  return v2 @kind object;
}
procedure `boolean` `write`(`org.simpleframework.xml.strategy.CycleStrategy` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Object` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/CycleStrategy;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;Ljava/util/Map;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b5490.  v0:= v1.`org.simpleframework.xml.strategy.CycleStrategy.a` @type ^`org.simpleframework.xml.strategy.WriteState` @kind object;
  #L1b5494.  call temp:= `find`(v0, v5) @signature `Lorg/simpleframework/xml/strategy/WriteState;.find:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/WriteGraph;` @kind virtual;
  #L1b549a.  v5:= temp @kind object;
  #L1b549c.  if v5 == 0 then goto L1b54aa;
  #L1b54a0.  call temp:= `write`(v5, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/WriteGraph;.write:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/NodeMap;)Z` @kind virtual;
  #L1b54a6.  v2:= temp;
  #L1b54a8.  return v2;
  #L1b54aa.  v2:= 0I;
  #L1b54ac.  return v2;
}
