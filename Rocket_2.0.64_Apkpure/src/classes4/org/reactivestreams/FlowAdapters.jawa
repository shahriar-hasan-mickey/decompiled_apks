record `org.reactivestreams.FlowAdapters` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters` v2 @kind this) @signature `Lorg/reactivestreams/FlowAdapters;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L19f684.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19f68a.  v0:= new `java.lang.IllegalStateException`;
  #L19f68e.  v1:= "No instances!" @kind object;
  #L19f692.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19f698.  throw v0;
}
procedure `java.util.concurrent.Flow$Processor` `toFlowProcessor`(`org.reactivestreams.Processor` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toFlowProcessor:(Lorg/reactivestreams/Processor;)Ljava/util/concurrent/Flow$Processor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f4d4.  v0:= "reactiveStreamsProcessor" @kind object;
  #L19f4d8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f4de.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$f` @kind boolean;
  #L19f4e2.  if v0 == 0 then goto L19f4f0;
  #L19f4e6.  v1:= (`org.reactivestreams.FlowAdapters$f`) v1 @kind object;
  #L19f4ea.  v1:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f4ee.  goto L19f50a;
  #L19f4f0.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Flow$Processor` @kind boolean;
  #L19f4f4.  if v0 == 0 then goto L19f4fe;
  #L19f4f8.  v1:= (`java.util.concurrent.Flow$Processor`) v1 @kind object;
  #L19f4fc.  goto L19f50a;
  #L19f4fe.  v0:= new `org.reactivestreams.FlowAdapters$b`;
  #L19f502.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$b;.<init>:(Lorg/reactivestreams/Processor;)V` @kind direct;
  #L19f508.  v1:= v0 @kind object;
  #L19f50a.  return v1 @kind object;
}
procedure `java.util.concurrent.Flow$Publisher` `toFlowPublisher`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toFlowPublisher:(Lorg/reactivestreams/Publisher;)Ljava/util/concurrent/Flow$Publisher;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f51c.  v0:= "reactiveStreamsPublisher" @kind object;
  #L19f520.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f526.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$e` @kind boolean;
  #L19f52a.  if v0 == 0 then goto L19f538;
  #L19f52e.  v1:= (`org.reactivestreams.FlowAdapters$e`) v1 @kind object;
  #L19f532.  v1:= v1.`org.reactivestreams.FlowAdapters$e.a` @type ^`java.util.concurrent.Flow$Publisher` @kind object;
  #L19f536.  goto L19f552;
  #L19f538.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Flow$Publisher` @kind boolean;
  #L19f53c.  if v0 == 0 then goto L19f546;
  #L19f540.  v1:= (`java.util.concurrent.Flow$Publisher`) v1 @kind object;
  #L19f544.  goto L19f552;
  #L19f546.  v0:= new `org.reactivestreams.FlowAdapters$a`;
  #L19f54a.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$a;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L19f550.  v1:= v0 @kind object;
  #L19f552.  return v1 @kind object;
}
procedure `java.util.concurrent.Flow$Subscriber` `toFlowSubscriber`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toFlowSubscriber:(Lorg/reactivestreams/Subscriber;)Ljava/util/concurrent/Flow$Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f564.  v0:= "reactiveStreamsSubscriber" @kind object;
  #L19f568.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f56e.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$g` @kind boolean;
  #L19f572.  if v0 == 0 then goto L19f580;
  #L19f576.  v1:= (`org.reactivestreams.FlowAdapters$g`) v1 @kind object;
  #L19f57a.  v1:= v1.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` @kind object;
  #L19f57e.  goto L19f59a;
  #L19f580.  v0:= instanceof @variable v1 @type ^`java.util.concurrent.Flow$Subscriber` @kind boolean;
  #L19f584.  if v0 == 0 then goto L19f58e;
  #L19f588.  v1:= (`java.util.concurrent.Flow$Subscriber`) v1 @kind object;
  #L19f58c.  goto L19f59a;
  #L19f58e.  v0:= new `org.reactivestreams.FlowAdapters$c`;
  #L19f592.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L19f598.  v1:= v0 @kind object;
  #L19f59a.  return v1 @kind object;
}
procedure `org.reactivestreams.Processor` `toProcessor`(`java.util.concurrent.Flow$Processor` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toProcessor:(Ljava/util/concurrent/Flow$Processor;)Lorg/reactivestreams/Processor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f5ac.  v0:= "flowProcessor" @kind object;
  #L19f5b0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f5b6.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$b` @kind boolean;
  #L19f5ba.  if v0 == 0 then goto L19f5c8;
  #L19f5be.  v1:= (`org.reactivestreams.FlowAdapters$b`) v1 @kind object;
  #L19f5c2.  v1:= v1.`org.reactivestreams.FlowAdapters$b.a` @type ^`org.reactivestreams.Processor` @kind object;
  #L19f5c6.  goto L19f5e2;
  #L19f5c8.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.Processor` @kind boolean;
  #L19f5cc.  if v0 == 0 then goto L19f5d6;
  #L19f5d0.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L19f5d4.  goto L19f5e2;
  #L19f5d6.  v0:= new `org.reactivestreams.FlowAdapters$f`;
  #L19f5da.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$f;.<init>:(Ljava/util/concurrent/Flow$Processor;)V` @kind direct;
  #L19f5e0.  v1:= v0 @kind object;
  #L19f5e2.  return v1 @kind object;
}
procedure `org.reactivestreams.Publisher` `toPublisher`(`java.util.concurrent.Flow$Publisher` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toPublisher:(Ljava/util/concurrent/Flow$Publisher;)Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f5f4.  v0:= "flowPublisher" @kind object;
  #L19f5f8.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f5fe.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$a` @kind boolean;
  #L19f602.  if v0 == 0 then goto L19f610;
  #L19f606.  v1:= (`org.reactivestreams.FlowAdapters$a`) v1 @kind object;
  #L19f60a.  v1:= v1.`org.reactivestreams.FlowAdapters$a.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L19f60e.  goto L19f62a;
  #L19f610.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.Publisher` @kind boolean;
  #L19f614.  if v0 == 0 then goto L19f61e;
  #L19f618.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L19f61c.  goto L19f62a;
  #L19f61e.  v0:= new `org.reactivestreams.FlowAdapters$e`;
  #L19f622.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$e;.<init>:(Ljava/util/concurrent/Flow$Publisher;)V` @kind direct;
  #L19f628.  v1:= v0 @kind object;
  #L19f62a.  return v1 @kind object;
}
procedure `org.reactivestreams.Subscriber` `toSubscriber`(`java.util.concurrent.Flow$Subscriber` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters;.toSubscriber:(Ljava/util/concurrent/Flow$Subscriber;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19f63c.  v0:= "flowSubscriber" @kind object;
  #L19f640.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L19f646.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.FlowAdapters$c` @kind boolean;
  #L19f64a.  if v0 == 0 then goto L19f658;
  #L19f64e.  v1:= (`org.reactivestreams.FlowAdapters$c`) v1 @kind object;
  #L19f652.  v1:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L19f656.  goto L19f672;
  #L19f658.  v0:= instanceof @variable v1 @type ^`org.reactivestreams.Subscriber` @kind boolean;
  #L19f65c.  if v0 == 0 then goto L19f666;
  #L19f660.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L19f664.  goto L19f672;
  #L19f666.  v0:= new `org.reactivestreams.FlowAdapters$g`;
  #L19f66a.  call `<init>`(v0, v1) @signature `Lorg/reactivestreams/FlowAdapters$g;.<init>:(Ljava/util/concurrent/Flow$Subscriber;)V` @kind direct;
  #L19f670.  v1:= v0 @kind object;
  #L19f672.  return v1 @kind object;
}
