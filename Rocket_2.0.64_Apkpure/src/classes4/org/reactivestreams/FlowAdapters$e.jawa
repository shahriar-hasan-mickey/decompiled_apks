record `org.reactivestreams.FlowAdapters$e` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.Flow$Publisher` `org.reactivestreams.FlowAdapters$e.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$e` v0 @kind this, `java.util.concurrent.Flow$Publisher` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$e;.<init>:(Ljava/util/concurrent/Flow$Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19f2c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19f2ca.  v0.`org.reactivestreams.FlowAdapters$e.a` @type ^`java.util.concurrent.Flow$Publisher` := v1 @kind object;
  #L19f2ce.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.FlowAdapters$e` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$e;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f2e0.  v0:= v2.`org.reactivestreams.FlowAdapters$e.a` @type ^`java.util.concurrent.Flow$Publisher` @kind object;
  #L19f2e4.  if v3 != 0 then goto L19f2ec;
  #L19f2e8.  v3:= 0I;
  #L19f2ea.  goto L19f2f8;
  #L19f2ec.  v1:= new `org.reactivestreams.FlowAdapters$c`;
  #L19f2f0.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L19f2f6.  v3:= v1 @kind object;
  #L19f2f8.  call `subscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Publisher;.subscribe:(Ljava/util/concurrent/Flow$Subscriber;)V` @kind interface;
  #L19f2fe.  return @kind void;
}
