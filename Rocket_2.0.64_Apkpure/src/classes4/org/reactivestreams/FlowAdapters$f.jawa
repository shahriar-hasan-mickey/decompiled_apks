record `org.reactivestreams.FlowAdapters$f` @kind class @AccessFlag FINAL extends `org.reactivestreams.Processor` @kind interface {
  `java.util.concurrent.Flow$Processor` `org.reactivestreams.FlowAdapters$f.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$f` v0 @kind this, `java.util.concurrent.Flow$Processor` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.<init>:(Ljava/util/concurrent/Flow$Processor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19f310.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19f316.  v0.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` := v1 @kind object;
  #L19f31a.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.FlowAdapters$f` v1 @kind this) @signature `Lorg/reactivestreams/FlowAdapters$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f32c.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f330.  call `onComplete`(v0) @signature `Ljava/util/concurrent/Flow$Processor;.onComplete:()V` @kind interface;
  #L19f336.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.FlowAdapters$f` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f348.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f34c.  call `onError`(v0, v2) @signature `Ljava/util/concurrent/Flow$Processor;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L19f352.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.FlowAdapters$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f364.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f368.  call `onNext`(v0, v2) @signature `Ljava/util/concurrent/Flow$Processor;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L19f36e.  return @kind void;
}
procedure `void` `onSubscribe`(`org.reactivestreams.FlowAdapters$f` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f380.  v0:= v2.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f384.  if v3 != 0 then goto L19f38c;
  #L19f388.  v3:= 0I;
  #L19f38a.  goto L19f398;
  #L19f38c.  v1:= new `org.reactivestreams.FlowAdapters$d`;
  #L19f390.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$d;.<init>:(Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L19f396.  v3:= v1 @kind object;
  #L19f398.  call `onSubscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Processor;.onSubscribe:(Ljava/util/concurrent/Flow$Subscription;)V` @kind interface;
  #L19f39e.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.FlowAdapters$f` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f3b0.  v0:= v2.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L19f3b4.  if v3 != 0 then goto L19f3bc;
  #L19f3b8.  v3:= 0I;
  #L19f3ba.  goto L19f3c8;
  #L19f3bc.  v1:= new `org.reactivestreams.FlowAdapters$c`;
  #L19f3c0.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L19f3c6.  v3:= v1 @kind object;
  #L19f3c8.  call `subscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Processor;.subscribe:(Ljava/util/concurrent/Flow$Subscriber;)V` @kind interface;
  #L19f3ce.  return @kind void;
}
