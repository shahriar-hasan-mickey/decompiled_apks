record `org.reactivestreams.FlowAdapters$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Flow$Subscriber` @kind interface {
  `org.reactivestreams.Subscriber` `org.reactivestreams.FlowAdapters$c.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19f1d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19f1d6.  v0.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L19f1da.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.FlowAdapters$c` v1 @kind this) @signature `Lorg/reactivestreams/FlowAdapters$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f1ec.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L19f1f0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L19f1f6.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.FlowAdapters$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f208.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L19f20c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L19f212.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.FlowAdapters$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f224.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L19f228.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L19f22e.  return @kind void;
}
procedure `void` `onSubscribe`(`org.reactivestreams.FlowAdapters$c` v2 @kind this, `java.util.concurrent.Flow$Subscription` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onSubscribe:(Ljava/util/concurrent/Flow$Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f240.  v0:= v2.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L19f244.  if v3 != 0 then goto L19f24c;
  #L19f248.  v3:= 0I;
  #L19f24a.  goto L19f258;
  #L19f24c.  v1:= new `org.reactivestreams.FlowAdapters$h`;
  #L19f250.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$h;.<init>:(Ljava/util/concurrent/Flow$Subscription;)V` @kind direct;
  #L19f256.  v3:= v1 @kind object;
  #L19f258.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L19f25e.  return @kind void;
}
