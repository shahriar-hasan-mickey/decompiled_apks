record `org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `org.greenrobot.essentials.io.PipelineOutputStream` `org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v0 @kind this, `org.greenrobot.essentials.io.PipelineOutputStream` v1 @kind object) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.<init>:(Lorg/greenrobot/essentials/io/PipelineOutputStream;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L19edbc.  v0.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` := v1 @kind object;
  #L19edc0.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L19edc6.  return @kind void;
}
procedure `int` `available`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v1 @kind this) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ec24.  v0:= v1.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec28.  v0:= v0.`org.greenrobot.essentials.io.PipelineOutputStream.b` @type ^`org.greenrobot.essentials.io.CircularByteBuffer` @kind object;
  #L19ec2c.  call temp:= `available`(v0) @signature `Lorg/greenrobot/essentials/io/CircularByteBuffer;.available:()I` @kind virtual;
  #L19ec32.  v0:= temp;
  #L19ec34.  return v0;
}
procedure `void` `close`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v2 @kind this) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19edd8.  v0:= v2.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19eddc.  v1:= 1I;
  #L19edde.  v0.`org.greenrobot.essentials.io.PipelineOutputStream.d` @type ^`boolean` := v1 @kind boolean;
  #L19ede2.  return @kind void;
}
procedure `int` `read`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v4 @kind this) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19ec48.  v0:= v4.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec4c.  @monitorenter v0
  #L19ec4e.  v1:= v4.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec52.  v1:= v1.`org.greenrobot.essentials.io.PipelineOutputStream.b` @type ^`org.greenrobot.essentials.io.CircularByteBuffer` @kind object;
  #L19ec56.  call temp:= `get`(v1) @signature `Lorg/greenrobot/essentials/io/CircularByteBuffer;.get:()I` @kind virtual;
  #L19ec5c.  v1:= temp;
  #L19ec5e.  v2:= -1I;
  #L19ec60.  if v1 != v2 then goto L19ec8c;
  #L19ec64.  v1:= v4.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec68.  v3:= v1.`org.greenrobot.essentials.io.PipelineOutputStream.c` @type ^`boolean` @kind boolean;
  #L19ec6c.  if v3 == 0 then goto L19ec74;
  #L19ec70.  @monitorexit v0
  #L19ec72.  return v2;
  #L19ec74.  call `c`(v1) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.c:()V` @kind virtual;
  #L19ec7a.  v1:= v4.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec7e.  v1:= v1.`org.greenrobot.essentials.io.PipelineOutputStream.b` @type ^`org.greenrobot.essentials.io.CircularByteBuffer` @kind object;
  #L19ec82.  call temp:= `get`(v1) @signature `Lorg/greenrobot/essentials/io/CircularByteBuffer;.get:()I` @kind virtual;
  #L19ec88.  v1:= temp;
  #L19ec8a.  goto L19ec5e;
  #L19ec8c.  v2:= v4.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ec90.  call `b`(v2) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.b:()V` @kind virtual;
  #L19ec96.  @monitorexit v0
  #L19ec98.  return v1;
  #L19ec9a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ec9c.  @monitorexit v0
  #L19ec9e.  throw v1;
  catch `java.lang.Throwable` @[L19ec4e..L19ec9e] goto L19ec9a;
}
procedure `int` `read`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19ecbc.  v0:= -1I;
  #L19ecbe.  if v8 != 0 then goto L19ecd4;
  #L19ecc2.  v6:= v5.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ecc6.  v6:= v6.`org.greenrobot.essentials.io.PipelineOutputStream.c` @type ^`boolean` @kind boolean;
  #L19ecca.  if v6 == 0 then goto L19ecd0;
  #L19ecce.  goto L19ecd2;
  #L19ecd0.  v0:= 0I;
  #L19ecd2.  return v0;
  #L19ecd4.  v1:= v5.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ecd8.  @monitorenter v1
  #L19ecda.  v2:= v5.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ecde.  v2:= v2.`org.greenrobot.essentials.io.PipelineOutputStream.b` @type ^`org.greenrobot.essentials.io.CircularByteBuffer` @kind object;
  #L19ece2.  call temp:= `get`(v2, v6, v7, v8) @signature `Lorg/greenrobot/essentials/io/CircularByteBuffer;.get:([BII)I` @kind virtual;
  #L19ece8.  v2:= temp;
  #L19ecea.  if v2 != 0 then goto L19ed04;
  #L19ecee.  v3:= v5.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ecf2.  v4:= v3.`org.greenrobot.essentials.io.PipelineOutputStream.c` @type ^`boolean` @kind boolean;
  #L19ecf6.  if v4 == 0 then goto L19ecfe;
  #L19ecfa.  @monitorexit v1
  #L19ecfc.  return v0;
  #L19ecfe.  call `c`(v3) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.c:()V` @kind virtual;
  #L19ed04.  if v2 == 0 then goto L19ecda;
  #L19ed08.  v6:= v5.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ed0c.  call `b`(v6) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.b:()V` @kind virtual;
  #L19ed12.  @monitorexit v1
  #L19ed14.  return v2;
  #L19ed16.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ed18.  @monitorexit v1
  #L19ed1a.  throw v6;
  catch `java.lang.Throwable` @[L19ecda..L19ed1a] goto L19ed16;
}
procedure `long` `skip`(`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream` v3 @kind this, `long` v4 ) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream$PipelineInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19ed38.  v0:= 2147483647L;
  #L19ed3e.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L19ed44.  v4:= temp @kind wide;
  #L19ed46.  v5:= (`int`) v4 @kind l2i;
  #L19ed48.  v4:= v3.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ed4c.  @monitorenter v4
  #L19ed4e.  v0:= 0I;
  #L19ed50.  if v0 >= v5 then goto L19ed94;
  #L19ed54.  v1:= v3.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ed58.  v1:= v1.`org.greenrobot.essentials.io.PipelineOutputStream.b` @type ^`org.greenrobot.essentials.io.CircularByteBuffer` @kind object;
  #L19ed5c.  v2:= v5 - v0 @kind int;
  #L19ed60.  call temp:= `skip`(v1, v2) @signature `Lorg/greenrobot/essentials/io/CircularByteBuffer;.skip:(I)I` @kind virtual;
  #L19ed66.  v1:= temp;
  #L19ed68.  if v1 != 0 then goto L19ed86;
  #L19ed6c.  v1:= v3.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ed70.  v2:= v1.`org.greenrobot.essentials.io.PipelineOutputStream.c` @type ^`boolean` @kind boolean;
  #L19ed74.  if v2 == 0 then goto L19ed7e;
  #L19ed78.  v0:= (`long`) v0 @kind i2l;
  #L19ed7a.  @monitorexit v4
  #L19ed7c.  return v0 @kind wide;
  #L19ed7e.  call `c`(v1) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.c:()V` @kind virtual;
  #L19ed84.  goto L19ed50;
  #L19ed86.  v0:= v0 + v1 @kind int;
  #L19ed88.  v1:= v3.`org.greenrobot.essentials.io.PipelineOutputStream$PipelineInputStream.a` @type ^`org.greenrobot.essentials.io.PipelineOutputStream` @kind object;
  #L19ed8c.  call `b`(v1) @signature `Lorg/greenrobot/essentials/io/PipelineOutputStream;.b:()V` @kind virtual;
  #L19ed92.  goto L19ed50;
  #L19ed94.  v0:= (`long`) v0 @kind i2l;
  #L19ed96.  @monitorexit v4
  #L19ed98.  return v0 @kind wide;
  #L19ed9a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ed9c.  @monitorexit v4
  #L19ed9e.  throw v5;
  catch `java.lang.Throwable` @[L19ed54..L19ed9e] goto L19ed9a;
}
