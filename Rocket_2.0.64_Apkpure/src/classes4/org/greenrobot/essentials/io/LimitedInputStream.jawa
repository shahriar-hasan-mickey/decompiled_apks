record `org.greenrobot.essentials.io.LimitedInputStream` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `int` `org.greenrobot.essentials.io.LimitedInputStream.a` @AccessFlag PRIVATE;
  `java.io.InputStream` `org.greenrobot.essentials.io.LimitedInputStream.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.greenrobot.essentials.io.LimitedInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19ebf0.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L19ebf6.  v0.`org.greenrobot.essentials.io.LimitedInputStream.b` @type ^`java.io.InputStream` := v1 @kind object;
  #L19ebfa.  v0.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int` := v2;
  #L19ebfe.  return @kind void;
}
procedure `java.util.zip.GZIPInputStream` `createGZIPInputStream`(`java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.createGZIPInputStream:(Ljava/io/InputStream;I)Ljava/util/zip/GZIPInputStream;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19eb78.  v0:= new `org.greenrobot.essentials.io.LimitedInputStream`;
  #L19eb7c.  call `<init>`(v0, v1, v2) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.<init>:(Ljava/io/InputStream;I)V` @kind direct;
  #L19eb82.  v1:= new `java.util.zip.GZIPInputStream`;
  #L19eb86.  call `<init>`(v1, v0) @signature `Ljava/util/zip/GZIPInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L19eb8c.  return v1 @kind object;
}
procedure `int` `available`(`org.greenrobot.essentials.io.LimitedInputStream` v2 @kind this) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19ea98.  v0:= v2.`org.greenrobot.essentials.io.LimitedInputStream.b` @type ^`java.io.InputStream` @kind object;
  #L19ea9c.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L19eaa2.  v0:= temp;
  #L19eaa4.  v1:= v2.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eaa8.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L19eaae.  v0:= temp;
  #L19eab0.  return v0;
}
procedure `void` `close`(`org.greenrobot.essentials.io.LimitedInputStream` v0 @kind this) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L19ec10.  return @kind void;
}
procedure `int` `getBytesLeft`(`org.greenrobot.essentials.io.LimitedInputStream` v1 @kind this) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.getBytesLeft:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19eac4.  v0:= v1.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eac8.  return v0;
}
procedure `int` `read`(`org.greenrobot.essentials.io.LimitedInputStream` v2 @kind this) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19eadc.  v0:= v2.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eae0.  v1:= -1I;
  #L19eae2.  if v0 > 0 then goto L19eae8;
  #L19eae6.  return v1;
  #L19eae8.  v0:= v2.`org.greenrobot.essentials.io.LimitedInputStream.b` @type ^`java.io.InputStream` @kind object;
  #L19eaec.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L19eaf2.  v0:= temp;
  #L19eaf4.  if v0 == v1 then goto L19eb04;
  #L19eaf8.  v1:= v2.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eafc.  v1:= v1 + -1;
  #L19eb00.  v2.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int` := v1;
  #L19eb04.  return v0;
}
procedure `int` `read`(`org.greenrobot.essentials.io.LimitedInputStream` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19eb18.  v0:= length @variable v3;
  #L19eb1a.  v1:= 0I;
  #L19eb1c.  call temp:= `read`(v2, v3, v1, v0) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.read:([BII)I` @kind virtual;
  #L19eb22.  v3:= temp;
  #L19eb24.  return v3;
}
procedure `int` `read`(`org.greenrobot.essentials.io.LimitedInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19eb38.  v0:= v1.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eb3c.  if v0 > 0 then goto L19eb44;
  #L19eb40.  v2:= -1I;
  #L19eb42.  return v2;
  #L19eb44.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L19eb4a.  v4:= temp;
  #L19eb4c.  v0:= v1.`org.greenrobot.essentials.io.LimitedInputStream.b` @type ^`java.io.InputStream` @kind object;
  #L19eb50.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L19eb56.  v2:= temp;
  #L19eb58.  if v2 <= 0 then goto L19eb66;
  #L19eb5c.  v3:= v1.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19eb60.  v3:= v3 - v2 @kind int;
  #L19eb62.  v1.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int` := v3;
  #L19eb66.  return v2;
}
procedure `long` `skip`(`org.greenrobot.essentials.io.LimitedInputStream` v4 @kind this, `long` v5 ) @signature `Lorg/greenrobot/essentials/io/LimitedInputStream;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19eba0.  v0:= 0L;
  #L19eba4.  v2:= lcmp(v5, v0);
  #L19eba8.  if v2 > 0 then goto L19ebae;
  #L19ebac.  return v0 @kind wide;
  #L19ebae.  v2:= v4.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19ebb2.  v2:= (`long`) v2 @kind i2l;
  #L19ebb4.  call temp:= `min`(v2, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L19ebba.  v5:= temp @kind wide;
  #L19ebbc.  v2:= v4.`org.greenrobot.essentials.io.LimitedInputStream.b` @type ^`java.io.InputStream` @kind object;
  #L19ebc0.  call temp:= `skip`(v2, v5) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L19ebc6.  v5:= temp @kind wide;
  #L19ebc8.  v2:= lcmp(v5, v0);
  #L19ebcc.  if v2 <= 0 then goto L19ebde;
  #L19ebd0.  v0:= v4.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int`;
  #L19ebd4.  v0:= (`long`) v0 @kind i2l;
  #L19ebd6.  v0:= v0 - v5 @kind long;
  #L19ebd8.  v1:= (`int`) v0 @kind l2i;
  #L19ebda.  v4.`org.greenrobot.essentials.io.LimitedInputStream.a` @type ^`int` := v1;
  #L19ebde.  return v5 @kind wide;
}
