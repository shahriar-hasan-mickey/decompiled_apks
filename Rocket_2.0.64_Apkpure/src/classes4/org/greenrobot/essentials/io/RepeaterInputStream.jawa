record `org.greenrobot.essentials.io.RepeaterInputStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `java.io.OutputStream` `org.greenrobot.essentials.io.RepeaterInputStream.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.greenrobot.essentials.io.RepeaterInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.<init>:(Ljava/io/InputStream;Ljava/io/OutputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19f04c.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L19f052.  v0.`org.greenrobot.essentials.io.RepeaterInputStream.a` @type ^`java.io.OutputStream` := v2 @kind object;
  #L19f056.  return @kind void;
}
procedure `void` `mark`(`org.greenrobot.essentials.io.RepeaterInputStream` v0 @kind this, `int` v1 ) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L19f068.  return @kind void;
}
procedure `boolean` `markSupported`(`org.greenrobot.essentials.io.RepeaterInputStream` v1 @kind this) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19efc0.  v0:= 0I;
  #L19efc2.  return v0;
}
procedure `int` `read`(`org.greenrobot.essentials.io.RepeaterInputStream` v2 @kind this) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19efd4.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L19efd8.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L19efde.  v0:= temp;
  #L19efe0.  if v0 <= 0 then goto L19efee;
  #L19efe4.  v1:= v2.`org.greenrobot.essentials.io.RepeaterInputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L19efe8.  call `write`(v1, v0) @signature `Ljava/io/OutputStream;.write:(I)V` @kind virtual;
  #L19efee.  return v0;
}
procedure `int` `read`(`org.greenrobot.essentials.io.RepeaterInputStream` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f000.  v0:= length @variable v3;
  #L19f002.  v1:= 0I;
  #L19f004.  call temp:= `read`(v2, v3, v1, v0) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.read:([BII)I` @kind virtual;
  #L19f00a.  v3:= temp;
  #L19f00c.  return v3;
}
procedure `int` `read`(`org.greenrobot.essentials.io.RepeaterInputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19f020.  v0:= v1.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L19f024.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L19f02a.  v4:= temp;
  #L19f02c.  if v4 <= 0 then goto L19f03a;
  #L19f030.  v0:= v1.`org.greenrobot.essentials.io.RepeaterInputStream.a` @type ^`java.io.OutputStream` @kind object;
  #L19f034.  call `write`(v0, v2, v3, v4) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L19f03a.  return v4;
}
procedure `void` `reset`(`org.greenrobot.essentials.io.RepeaterInputStream` v2 @kind this) @signature `Lorg/greenrobot/essentials/io/RepeaterInputStream;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19f07c.  v0:= new `java.io.IOException`;
  #L19f080.  v1:= "Unsupported" @kind object;
  #L19f084.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19f08a.  throw v0;
}
