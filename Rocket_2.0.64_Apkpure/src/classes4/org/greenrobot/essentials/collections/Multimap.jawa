record `org.greenrobot.essentials.collections.Multimap` @kind class @AccessFlag PUBLIC extends `org.greenrobot.essentials.collections.AbstractMultimap` @kind class {
  `org.greenrobot.essentials.collections.Multimap$ListType` `org.greenrobot.essentials.collections.Multimap.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.greenrobot.essentials.collections.Multimap` v0 @kind this, `java.util.Map` v1 @kind object, `org.greenrobot.essentials.collections.Multimap$ListType` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/Multimap;.<init>:(Ljava/util/Map;Lorg/greenrobot/essentials/collections/Multimap$ListType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L19cac8.  call `<init>`(v0, v1) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L19cace.  v0.`org.greenrobot.essentials.collections.Multimap.a` @type ^`org.greenrobot.essentials.collections.Multimap$ListType` := v2 @kind object;
  #L19cad2.  if v2 == 0 then goto L19cad8;
  #L19cad6.  return @kind void;
  #L19cad8.  v1:= new `java.lang.IllegalArgumentException`;
  #L19cadc.  v2:= "List type may not be null" @kind object;
  #L19cae0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cae6.  throw v1;
}
procedure `org.greenrobot.essentials.collections.Multimap` `create`() @signature `Lorg/greenrobot/essentials/collections/Multimap;.create:()Lorg/greenrobot/essentials/collections/Multimap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19ca80.  v0:= `@@org.greenrobot.essentials.collections.Multimap$ListType.REGULAR` @type ^`org.greenrobot.essentials.collections.Multimap$ListType` @kind object;
  #L19ca84.  call temp:= `create`(v0) @signature `Lorg/greenrobot/essentials/collections/Multimap;.create:(Lorg/greenrobot/essentials/collections/Multimap$ListType;)Lorg/greenrobot/essentials/collections/Multimap;` @kind static;
  #L19ca8a.  v0:= temp @kind object;
  #L19ca8c.  return v0 @kind object;
}
procedure `org.greenrobot.essentials.collections.Multimap` `create`(`org.greenrobot.essentials.collections.Multimap$ListType` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/Multimap;.create:(Lorg/greenrobot/essentials/collections/Multimap$ListType;)Lorg/greenrobot/essentials/collections/Multimap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19caa0.  v0:= new `org.greenrobot.essentials.collections.Multimap`;
  #L19caa4.  v1:= new `java.util.HashMap`;
  #L19caa8.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L19caae.  call `<init>`(v0, v1, v2) @signature `Lorg/greenrobot/essentials/collections/Multimap;.<init>:(Ljava/util/Map;Lorg/greenrobot/essentials/collections/Multimap$ListType;)V` @kind direct;
  #L19cab4.  return v0 @kind object;
}
procedure `java.util.Collection` `createNewCollection`(`org.greenrobot.essentials.collections.Multimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/Multimap;.createNewCollection:()Ljava/util/Collection;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L19c9d8.  call temp:= `createNewCollection`(v1) @signature `Lorg/greenrobot/essentials/collections/Multimap;.createNewCollection:()Ljava/util/List;` @kind virtual;
  #L19c9de.  v0:= temp @kind object;
  #L19c9e0.  return v0 @kind object;
}
procedure `java.util.List` `createNewCollection`(`org.greenrobot.essentials.collections.Multimap` v3 @kind this) @signature `Lorg/greenrobot/essentials/collections/Multimap;.createNewCollection:()Ljava/util/List;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L19c9f4.  v0:= `@@org.greenrobot.essentials.collections.Multimap$a.a` @type ^`int`[] @kind object;
  #L19c9f8.  v1:= v3.`org.greenrobot.essentials.collections.Multimap.a` @type ^`org.greenrobot.essentials.collections.Multimap$ListType` @kind object;
  #L19c9fc.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L19ca02.  v1:= temp;
  #L19ca04.  v0:= v0[v1];
  #L19ca08.  v1:= 1I;
  #L19ca0a.  if v0 == v1 then goto L19ca64;
  #L19ca0e.  v1:= 2I;
  #L19ca10.  if v0 == v1 then goto L19ca58;
  #L19ca14.  v1:= 3I;
  #L19ca16.  if v0 != v1 then goto L19ca26;
  #L19ca1a.  v0:= new `java.util.LinkedList`;
  #L19ca1e.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L19ca24.  return v0 @kind object;
  #L19ca26.  v0:= new `java.lang.IllegalStateException`;
  #L19ca2a.  v1:= new `java.lang.StringBuilder`;
  #L19ca2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19ca34.  v2:= "Unknown list type: " @kind object;
  #L19ca38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ca3e.  v2:= v3.`org.greenrobot.essentials.collections.Multimap.a` @type ^`org.greenrobot.essentials.collections.Multimap$ListType` @kind object;
  #L19ca42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ca48.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19ca4e.  v1:= temp @kind object;
  #L19ca50.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ca56.  throw v0;
  #L19ca58.  v0:= new `java.util.concurrent.CopyOnWriteArrayList`;
  #L19ca5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArrayList;.<init>:()V` @kind direct;
  #L19ca62.  return v0 @kind object;
  #L19ca64.  v0:= new `java.util.ArrayList`;
  #L19ca68.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19ca6e.  return v0 @kind object;
}
