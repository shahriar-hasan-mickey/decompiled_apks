record `org.greenrobot.essentials.collections.AbstractMultimap` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map` @kind interface {
  `java.util.Map` `org.greenrobot.essentials.collections.AbstractMultimap.map` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.greenrobot.essentials.collections.AbstractMultimap` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.<init>:(Ljava/util/Map;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L19bbb0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19bbb6.  v0.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` := v1 @kind object;
  #L19bbba.  return @kind void;
}
procedure `void` `clear`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bbcc.  @monitorenter v1
  #L19bbce.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19bbd2.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L19bbd8.  @monitorexit v1
  #L19bbda.  return @kind void;
  #L19bbdc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19bbde.  @monitorexit v1
  #L19bbe0.  throw v0;
  catch `java.lang.Throwable` @[L19bbce..L19bbd8] goto L19bbdc;
}
procedure `boolean` `containsElement`(`org.greenrobot.essentials.collections.AbstractMultimap` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.containsElement:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19b5e8.  @monitorenter v2
  #L19b5ea.  v0:= v2.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b5ee.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L19b5f4.  v0:= temp @kind object;
  #L19b5f6.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19b5fc.  v0:= temp @kind object;
  #L19b5fe.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19b604.  v1:= temp;
  #L19b606.  if v1 == 0 then goto L19b628;
  #L19b60a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19b610.  v1:= temp @kind object;
  #L19b612.  v1:= (`java.util.Collection`) v1 @kind object;
  #L19b616.  call temp:= `contains`(v1, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L19b61c.  v1:= temp;
  #L19b61e.  if v1 == 0 then goto L19b5fe;
  #L19b622.  v3:= 1I;
  #L19b624.  @monitorexit v2
  #L19b626.  return v3;
  #L19b628.  v3:= 0I;
  #L19b62a.  @monitorexit v2
  #L19b62c.  return v3;
  #L19b62e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b630.  @monitorexit v2
  #L19b632.  throw v3;
  catch `java.lang.Throwable` @[L19b5ea..L19b61e] goto L19b62e;
}
procedure `boolean` `containsElement`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.containsElement:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b650.  @monitorenter v1
  #L19b652.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b656.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b65c.  v2:= temp @kind object;
  #L19b65e.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19b662.  if v2 != 0 then goto L19b66c;
  #L19b666.  v2:= 0I;
  #L19b668.  @monitorexit v1
  #L19b66a.  return v2;
  #L19b66c.  call temp:= `contains`(v2, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L19b672.  v2:= temp;
  #L19b674.  @monitorexit v1
  #L19b676.  return v2;
  #L19b678.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b67a.  @monitorexit v1
  #L19b67c.  throw v2;
  catch `java.lang.Throwable` @[L19b652..L19b662] goto L19b678;
  catch `java.lang.Throwable` @[L19b66c..L19b674] goto L19b678;
}
procedure `boolean` `containsKey`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b6a4.  @monitorenter v1
  #L19b6a6.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b6aa.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L19b6b0.  v2:= temp;
  #L19b6b2.  @monitorexit v1
  #L19b6b4.  return v2;
  #L19b6b6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b6b8.  @monitorexit v1
  #L19b6ba.  throw v2;
  catch `java.lang.Throwable` @[L19b6a6..L19b6b2] goto L19b6b6;
}
procedure `boolean` `containsValue`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b6d8.  @monitorenter v1
  #L19b6da.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b6de.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L19b6e4.  v2:= temp;
  #L19b6e6.  @monitorexit v1
  #L19b6e8.  return v2;
  #L19b6ea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b6ec.  @monitorexit v1
  #L19b6ee.  throw v2;
  catch `java.lang.Throwable` @[L19b6da..L19b6e6] goto L19b6ea;
}
procedure `int` `countElements`(`org.greenrobot.essentials.collections.AbstractMultimap` v3 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.countElements:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19b834.  @monitorenter v3
  #L19b836.  v0:= 0I;
  #L19b838.  v1:= v3.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b83c.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L19b842.  v1:= temp @kind object;
  #L19b844.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19b84a.  v1:= temp @kind object;
  #L19b84c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19b852.  v2:= temp;
  #L19b854.  if v2 == 0 then goto L19b870;
  #L19b858.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19b85e.  v2:= temp @kind object;
  #L19b860.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19b864.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L19b86a.  v2:= temp;
  #L19b86c.  v0:= v0 + v2 @kind int;
  #L19b86e.  goto L19b84c;
  #L19b870.  @monitorexit v3
  #L19b872.  return v0;
  #L19b874.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b876.  @monitorexit v3
  #L19b878.  throw v0;
  catch `java.lang.Throwable` @[L19b838..L19b86c] goto L19b874;
}
procedure `int` `countElements`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.countElements:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b898.  @monitorenter v1
  #L19b89a.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b89e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b8a4.  v2:= temp @kind object;
  #L19b8a6.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19b8aa.  if v2 != 0 then goto L19b8b4;
  #L19b8ae.  v2:= 0I;
  #L19b8b0.  @monitorexit v1
  #L19b8b2.  return v2;
  #L19b8b4.  call temp:= `size`(v2) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L19b8ba.  v2:= temp;
  #L19b8bc.  @monitorexit v1
  #L19b8be.  return v2;
  #L19b8c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b8c2.  @monitorexit v1
  #L19b8c4.  throw v2;
  catch `java.lang.Throwable` @[L19b89a..L19b8aa] goto L19b8c0;
  catch `java.lang.Throwable` @[L19b8b4..L19b8bc] goto L19b8c0;
}
procedure `java.util.Collection` `createNewCollection`() @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.createNewCollection:()Ljava/util/Collection;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `entrySet`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bb48.  @monitorenter v1
  #L19bb4a.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19bb4e.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L19bb54.  v0:= temp @kind object;
  #L19bb56.  @monitorexit v1
  #L19bb58.  return v0 @kind object;
  #L19bb5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19bb5c.  @monitorexit v1
  #L19bb5e.  throw v0;
  catch `java.lang.Throwable` @[L19bb4a..L19bb56] goto L19bb5a;
}
procedure `boolean` `equals`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b70c.  @monitorenter v1
  #L19b70e.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b712.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L19b718.  v2:= temp;
  #L19b71a.  @monitorexit v1
  #L19b71c.  return v2;
  #L19b71e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b720.  @monitorexit v1
  #L19b722.  throw v2;
  catch `java.lang.Throwable` @[L19b70e..L19b71a] goto L19b71e;
}
procedure `java.lang.Object` `get`(`org.greenrobot.essentials.collections.AbstractMultimap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L19b9b0.  call temp:= `get`(v0, v1) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.get:(Ljava/lang/Object;)Ljava/util/Collection;` @kind virtual;
  #L19b9b6.  v1:= temp @kind object;
  #L19b9b8.  return v1 @kind object;
}
procedure `java.util.Collection` `get`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.get:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ba08.  @monitorenter v1
  #L19ba0a.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19ba0e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19ba14.  v2:= temp @kind object;
  #L19ba16.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19ba1a.  @monitorexit v1
  #L19ba1c.  return v2 @kind object;
  #L19ba1e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ba20.  @monitorexit v1
  #L19ba22.  throw v2;
  catch `java.lang.Throwable` @[L19ba0a..L19ba1a] goto L19ba1e;
}
procedure `int` `hashCode`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b8ec.  @monitorenter v1
  #L19b8ee.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b8f2.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L19b8f8.  v0:= temp;
  #L19b8fa.  @monitorexit v1
  #L19b8fc.  return v0;
  #L19b8fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b900.  @monitorexit v1
  #L19b902.  throw v0;
  catch `java.lang.Throwable` @[L19b8ee..L19b8fa] goto L19b8fe;
}
procedure `boolean` `isEmpty`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b740.  @monitorenter v1
  #L19b742.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b746.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L19b74c.  v0:= temp;
  #L19b74e.  @monitorexit v1
  #L19b750.  return v0;
  #L19b752.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b754.  @monitorexit v1
  #L19b756.  throw v0;
  catch `java.lang.Throwable` @[L19b742..L19b74e] goto L19b752;
}
procedure `java.util.Set` `keySet`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bb7c.  @monitorenter v1
  #L19bb7e.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19bb82.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L19bb88.  v0:= temp @kind object;
  #L19bb8a.  @monitorexit v1
  #L19bb8c.  return v0 @kind object;
  #L19bb8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19bb90.  @monitorexit v1
  #L19bb92.  throw v0;
  catch `java.lang.Throwable` @[L19bb7e..L19bb8a] goto L19bb8e;
}
procedure `java.lang.Object` `put`(`org.greenrobot.essentials.collections.AbstractMultimap` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L19b9cc.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19b9d0.  call temp:= `put`(v0, v1, v2) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.put:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @kind virtual;
  #L19b9d6.  v1:= temp @kind object;
  #L19b9d8.  return v1 @kind object;
}
procedure `java.util.Collection` `put`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.put:(Ljava/lang/Object;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ba40.  @monitorenter v1
  #L19ba42.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19ba46.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19ba4c.  v2:= temp @kind object;
  #L19ba4e.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19ba52.  @monitorexit v1
  #L19ba54.  return v2 @kind object;
  #L19ba56.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ba58.  @monitorexit v1
  #L19ba5a.  throw v2;
  catch `java.lang.Throwable` @[L19ba42..L19ba52] goto L19ba56;
}
procedure `void` `putAll`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bc00.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19bc04.  call `putAll`(v0, v2) @signature `Ljava/util/Map;.putAll:(Ljava/util/Map;)V` @kind interface;
  #L19bc0a.  return @kind void;
}
procedure `int` `putElement`(`org.greenrobot.essentials.collections.AbstractMultimap` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.putElement:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19b920.  @monitorenter v2
  #L19b922.  v0:= v2.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b926.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b92c.  v0:= temp @kind object;
  #L19b92e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L19b932.  if v0 != 0 then goto L19b948;
  #L19b936.  call temp:= `createNewCollection`(v2) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.createNewCollection:()Ljava/util/Collection;` @kind virtual;
  #L19b93c.  v0:= temp @kind object;
  #L19b93e.  v1:= v2.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b942.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b948.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19b94e.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L19b954.  v3:= temp;
  #L19b956.  @monitorexit v2
  #L19b958.  return v3;
  #L19b95a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b95c.  @monitorexit v2
  #L19b95e.  throw v3;
  catch `java.lang.Throwable` @[L19b922..L19b956] goto L19b95a;
}
procedure `boolean` `putElements`(`org.greenrobot.essentials.collections.AbstractMultimap` v2 @kind this, `java.lang.Object` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.putElements:(Ljava/lang/Object;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19b774.  @monitorenter v2
  #L19b776.  v0:= v2.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b77a.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b780.  v0:= temp @kind object;
  #L19b782.  v0:= (`java.util.Collection`) v0 @kind object;
  #L19b786.  if v0 != 0 then goto L19b79c;
  #L19b78a.  call temp:= `createNewCollection`(v2) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.createNewCollection:()Ljava/util/Collection;` @kind virtual;
  #L19b790.  v0:= temp @kind object;
  #L19b792.  v1:= v2.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b796.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b79c.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L19b7a2.  v3:= temp;
  #L19b7a4.  @monitorexit v2
  #L19b7a6.  return v3;
  #L19b7a8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b7aa.  @monitorexit v2
  #L19b7ac.  throw v3;
  catch `java.lang.Throwable` @[L19b776..L19b7a4] goto L19b7a8;
}
procedure `java.lang.Object` `remove`(`org.greenrobot.essentials.collections.AbstractMultimap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L19b9ec.  call temp:= `remove`(v0, v1) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.remove:(Ljava/lang/Object;)Ljava/util/Collection;` @kind virtual;
  #L19b9f2.  v1:= temp @kind object;
  #L19b9f4.  return v1 @kind object;
}
procedure `java.util.Collection` `remove`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.remove:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ba78.  @monitorenter v1
  #L19ba7a.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19ba7e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19ba84.  v2:= temp @kind object;
  #L19ba86.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19ba8a.  @monitorexit v1
  #L19ba8c.  return v2 @kind object;
  #L19ba8e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19ba90.  @monitorexit v1
  #L19ba92.  throw v2;
  catch `java.lang.Throwable` @[L19ba7a..L19ba8a] goto L19ba8e;
}
procedure `boolean` `removeElement`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.removeElement:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b7cc.  @monitorenter v1
  #L19b7ce.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b7d2.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b7d8.  v0:= temp @kind object;
  #L19b7da.  v0:= (`java.util.Collection`) v0 @kind object;
  #L19b7de.  if v0 != 0 then goto L19b7e8;
  #L19b7e2.  v2:= 0I;
  #L19b7e4.  @monitorexit v1
  #L19b7e6.  return v2;
  #L19b7e8.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Collection;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L19b7ee.  v3:= temp;
  #L19b7f0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L19b7f6.  v0:= temp;
  #L19b7f8.  if v0 == 0 then goto L19b806;
  #L19b7fc.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b800.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19b806.  @monitorexit v1
  #L19b808.  return v3;
  #L19b80a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b80c.  @monitorexit v1
  #L19b80e.  throw v2;
  catch `java.lang.Throwable` @[L19b7ce..L19b7de] goto L19b80a;
  catch `java.lang.Throwable` @[L19b7e8..L19b806] goto L19b80a;
}
procedure `int` `size`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19b97c.  @monitorenter v1
  #L19b97e.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19b982.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19b988.  v0:= temp;
  #L19b98a.  @monitorexit v1
  #L19b98c.  return v0;
  #L19b98e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19b990.  @monitorexit v1
  #L19b992.  throw v0;
  catch `java.lang.Throwable` @[L19b97e..L19b98a] goto L19b98e;
}
procedure `java.util.Collection` `values`(`org.greenrobot.essentials.collections.AbstractMultimap` v1 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bab0.  @monitorenter v1
  #L19bab2.  v0:= v1.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19bab6.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L19babc.  v0:= temp @kind object;
  #L19babe.  @monitorexit v1
  #L19bac0.  return v0 @kind object;
  #L19bac2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19bac4.  @monitorexit v1
  #L19bac6.  throw v0;
  catch `java.lang.Throwable` @[L19bab2..L19babe] goto L19bac2;
}
procedure `java.util.Collection` `valuesElements`(`org.greenrobot.essentials.collections.AbstractMultimap` v3 @kind this) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.valuesElements:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19bae4.  @monitorenter v3
  #L19bae6.  call temp:= `createNewCollection`(v3) @signature `Lorg/greenrobot/essentials/collections/AbstractMultimap;.createNewCollection:()Ljava/util/Collection;` @kind virtual;
  #L19baec.  v0:= temp @kind object;
  #L19baee.  v1:= v3.`org.greenrobot.essentials.collections.AbstractMultimap.map` @type ^`java.util.Map` @kind object;
  #L19baf2.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L19baf8.  v1:= temp @kind object;
  #L19bafa.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19bb00.  v1:= temp @kind object;
  #L19bb02.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19bb08.  v2:= temp;
  #L19bb0a.  if v2 == 0 then goto L19bb22;
  #L19bb0e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19bb14.  v2:= temp @kind object;
  #L19bb16.  v2:= (`java.util.Collection`) v2 @kind object;
  #L19bb1a.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L19bb20.  goto L19bb02;
  #L19bb22.  @monitorexit v3
  #L19bb24.  return v0 @kind object;
  #L19bb26.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19bb28.  @monitorexit v3
  #L19bb2a.  throw v0;
  catch `java.lang.Throwable` @[L19bae6..L19bb20] goto L19bb26;
}
