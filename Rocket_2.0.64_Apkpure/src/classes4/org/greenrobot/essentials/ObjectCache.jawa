record `org.greenrobot.essentials.ObjectCache` @kind class @AccessFlag PUBLIC {
  `java.util.Map` `org.greenrobot.essentials.ObjectCache.a` @AccessFlag PRIVATE_FINAL;
  `org.greenrobot.essentials.ObjectCache$ReferenceType` `org.greenrobot.essentials.ObjectCache.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.greenrobot.essentials.ObjectCache.c` @AccessFlag PRIVATE_FINAL;
  `int` `org.greenrobot.essentials.ObjectCache.d` @AccessFlag PRIVATE_FINAL;
  `long` `org.greenrobot.essentials.ObjectCache.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.greenrobot.essentials.ObjectCache.f` @AccessFlag PRIVATE_FINAL;
  `long` `org.greenrobot.essentials.ObjectCache.g` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.h` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.i` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.j` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.k` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.l` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.m` @AccessFlag PRIVATE_VOLATILE;
  `int` `org.greenrobot.essentials.ObjectCache.n` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`org.greenrobot.essentials.ObjectCache` v3 @kind this, `org.greenrobot.essentials.ObjectCache$ReferenceType` v4 @kind object, `int` v5 , `long` v6 ) @signature `Lorg/greenrobot/essentials/ObjectCache;.<init>:(Lorg/greenrobot/essentials/ObjectCache$ReferenceType;IJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L19a564.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19a56a.  v3.`org.greenrobot.essentials.ObjectCache.b` @type ^`org.greenrobot.essentials.ObjectCache$ReferenceType` := v4 @kind object;
  #L19a56e.  v0:= `@@org.greenrobot.essentials.ObjectCache$ReferenceType.STRONG` @type ^`org.greenrobot.essentials.ObjectCache$ReferenceType` @kind object;
  #L19a572.  v1:= 1I;
  #L19a574.  v2:= 0I;
  #L19a576.  if v4 != v0 then goto L19a57e;
  #L19a57a.  v4:= 1I;
  #L19a57c.  goto L19a580;
  #L19a57e.  v4:= 0I;
  #L19a580.  v3.`org.greenrobot.essentials.ObjectCache.c` @type ^`boolean` := v4 @kind boolean;
  #L19a584.  v3.`org.greenrobot.essentials.ObjectCache.d` @type ^`int` := v5;
  #L19a588.  v3.`org.greenrobot.essentials.ObjectCache.e` @type ^`long` := v6 @kind wide;
  #L19a58c.  v4:= 0L;
  #L19a590.  v0:= lcmp(v6, v4);
  #L19a594.  if v0 <= 0 then goto L19a59a;
  #L19a598.  goto L19a59c;
  #L19a59a.  v1:= 0I;
  #L19a59c.  v3.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` := v1 @kind boolean;
  #L19a5a0.  v4:= new `java.util.LinkedHashMap`;
  #L19a5a4.  call `<init>`(v4) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L19a5aa.  v3.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` := v4 @kind object;
  #L19a5ae.  return @kind void;
}
procedure `java.lang.Object` `b`(`org.greenrobot.essentials.ObjectCache` v1 @kind this, `java.lang.Object` v2 @kind object, `org.greenrobot.essentials.ObjectCache$a` v3 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.b:(Ljava/lang/Object;Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19a29c.  if v3 == 0 then goto L19a2e6;
  #L19a2a0.  v0:= v1.`org.greenrobot.essentials.ObjectCache.c` @type ^`boolean` @kind boolean;
  #L19a2a4.  if v0 == 0 then goto L19a2ae;
  #L19a2a8.  v2:= v3.`org.greenrobot.essentials.ObjectCache$a.b` @type ^`java.lang.Object` @kind object;
  #L19a2ac.  return v2 @kind object;
  #L19a2ae.  v3:= v3.`org.greenrobot.essentials.ObjectCache$a.a` @type ^`java.lang.ref.Reference` @kind object;
  #L19a2b2.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L19a2b8.  v3:= temp @kind object;
  #L19a2ba.  if v3 != 0 then goto L19a2e4;
  #L19a2be.  v0:= v1.`org.greenrobot.essentials.ObjectCache.m` @type ^`int`;
  #L19a2c2.  v0:= v0 + 1;
  #L19a2c6.  v1.`org.greenrobot.essentials.ObjectCache.m` @type ^`int` := v0;
  #L19a2ca.  if v2 == 0 then goto L19a2e4;
  #L19a2ce.  @monitorenter v1
  #L19a2d0.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a2d4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a2da.  @monitorexit v1
  #L19a2dc.  goto L19a2e4;
  #L19a2de.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a2e0.  @monitorexit v1
  #L19a2e2.  throw v2;
  #L19a2e4.  return v3 @kind object;
  #L19a2e6.  v2:= 0I;
  #L19a2e8.  return v2 @kind object;
  catch `java.lang.Throwable` @[L19a2d0..L19a2e2] goto L19a2de;
}
procedure `java.lang.Object` `c`(`org.greenrobot.essentials.ObjectCache` v1 @kind this, `org.greenrobot.essentials.ObjectCache$a` v2 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.c:(Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19a308.  if v2 == 0 then goto L19a328;
  #L19a30c.  v0:= v1.`org.greenrobot.essentials.ObjectCache.c` @type ^`boolean` @kind boolean;
  #L19a310.  if v0 == 0 then goto L19a31a;
  #L19a314.  v2:= v2.`org.greenrobot.essentials.ObjectCache$a.b` @type ^`java.lang.Object` @kind object;
  #L19a318.  goto L19a326;
  #L19a31a.  v2:= v2.`org.greenrobot.essentials.ObjectCache$a.a` @type ^`java.lang.ref.Reference` @kind object;
  #L19a31e.  call temp:= `get`(v2) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L19a324.  v2:= temp @kind object;
  #L19a326.  return v2 @kind object;
  #L19a328.  v2:= 0I;
  #L19a32a.  return v2 @kind object;
}
procedure `void` `a`(`org.greenrobot.essentials.ObjectCache` v5 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19a5c0.  v0:= v5.`org.greenrobot.essentials.ObjectCache.c` @type ^`boolean` @kind boolean;
  #L19a5c4.  if v0 == 0 then goto L19a5d0;
  #L19a5c8.  v0:= v5.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` @kind boolean;
  #L19a5cc.  if v0 == 0 then goto L19a612;
  #L19a5d0.  v0:= v5.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` @kind boolean;
  #L19a5d4.  if v0 == 0 then goto L19a5fc;
  #L19a5d8.  v0:= v5.`org.greenrobot.essentials.ObjectCache.g` @type ^`long` @kind wide;
  #L19a5dc.  v2:= 0L;
  #L19a5e0.  v4:= lcmp(v0, v2);
  #L19a5e4.  if v4 == 0 then goto L19a5fc;
  #L19a5e8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L19a5ee.  v0:= temp @kind wide;
  #L19a5f0.  v2:= v5.`org.greenrobot.essentials.ObjectCache.g` @type ^`long` @kind wide;
  #L19a5f4.  v4:= lcmp(v0, v2);
  #L19a5f8.  if v4 > 0 then goto L19a60c;
  #L19a5fc.  v0:= v5.`org.greenrobot.essentials.ObjectCache.h` @type ^`int`;
  #L19a600.  v1:= v5.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a604.  v1:= v1 / 2;
  #L19a608.  if v0 <= v1 then goto L19a612;
  #L19a60c.  call temp:= `cleanUpObsoleteEntries`(v5) @signature `Lorg/greenrobot/essentials/ObjectCache;.cleanUpObsoleteEntries:()I` @kind virtual;
  #L19a612.  return @kind void;
}
procedure `int` `cleanUpObsoleteEntries`(`org.greenrobot.essentials.ObjectCache` v7 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.cleanUpObsoleteEntries:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L19a034.  @monitorenter v7
  #L19a036.  v0:= 0I;
  #L19a038.  v7.`org.greenrobot.essentials.ObjectCache.h` @type ^`int` := v0;
  #L19a03c.  v1:= 0L;
  #L19a040.  v7.`org.greenrobot.essentials.ObjectCache.g` @type ^`long` := v1 @kind wide;
  #L19a044.  v3:= v7.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` @kind boolean;
  #L19a048.  if v3 == 0 then goto L19a05a;
  #L19a04c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L19a052.  v1:= temp @kind wide;
  #L19a054.  v3:= v7.`org.greenrobot.essentials.ObjectCache.e` @type ^`long` @kind wide;
  #L19a058.  v1:= v1 - v3 @kind long;
  #L19a05a.  v3:= v7.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a05e.  call temp:= `values`(v3) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L19a064.  v3:= temp @kind object;
  #L19a066.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19a06c.  v3:= temp @kind object;
  #L19a06e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a074.  v4:= temp;
  #L19a076.  if v4 == 0 then goto L19a0d2;
  #L19a07a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a080.  v4:= temp @kind object;
  #L19a082.  v4:= (`org.greenrobot.essentials.ObjectCache$a`) v4 @kind object;
  #L19a086.  v5:= v7.`org.greenrobot.essentials.ObjectCache.c` @type ^`boolean` @kind boolean;
  #L19a08a.  if v5 != 0 then goto L19a0ae;
  #L19a08e.  v5:= v4.`org.greenrobot.essentials.ObjectCache$a.a` @type ^`java.lang.ref.Reference` @kind object;
  #L19a092.  if v5 != 0 then goto L19a0ae;
  #L19a096.  v4:= v7.`org.greenrobot.essentials.ObjectCache.m` @type ^`int`;
  #L19a09a.  v4:= v4 + 1;
  #L19a09e.  v7.`org.greenrobot.essentials.ObjectCache.m` @type ^`int` := v4;
  #L19a0a2.  v0:= v0 + 1;
  #L19a0a6.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L19a0ac.  goto L19a06e;
  #L19a0ae.  v4:= v4.`org.greenrobot.essentials.ObjectCache$a.c` @type ^`long` @kind wide;
  #L19a0b2.  v6:= lcmp(v4, v1);
  #L19a0b6.  if v6 >= 0 then goto L19a06e;
  #L19a0ba.  v4:= v7.`org.greenrobot.essentials.ObjectCache.l` @type ^`int`;
  #L19a0be.  v4:= v4 + 1;
  #L19a0c2.  v7.`org.greenrobot.essentials.ObjectCache.l` @type ^`int` := v4;
  #L19a0c6.  v0:= v0 + 1;
  #L19a0ca.  call `remove`(v3) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L19a0d0.  goto L19a06e;
  #L19a0d2.  @monitorexit v7
  #L19a0d4.  return v0;
  #L19a0d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a0d8.  @monitorexit v7
  #L19a0da.  throw v0;
  catch `java.lang.Throwable` @[L19a038..L19a0d0] goto L19a0d6;
}
procedure `void` `clear`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a624.  @monitorenter v1
  #L19a626.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a62a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L19a630.  @monitorexit v1
  #L19a632.  return @kind void;
  #L19a634.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a636.  @monitorexit v1
  #L19a638.  throw v0;
  catch `java.lang.Throwable` @[L19a626..L19a630] goto L19a634;
}
procedure `boolean` `containsKey`(`org.greenrobot.essentials.ObjectCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L199fdc.  @monitorenter v1
  #L199fde.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L199fe2.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L199fe8.  v2:= temp;
  #L199fea.  @monitorexit v1
  #L199fec.  return v2;
  #L199fee.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L199ff0.  @monitorexit v1
  #L199ff2.  throw v2;
  catch `java.lang.Throwable` @[L199fde..L199fea] goto L199fee;
}
procedure `boolean` `containsKeyWithValue`(`org.greenrobot.essentials.ObjectCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.containsKeyWithValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L19a010.  call temp:= `get`(v0, v1) @signature `Lorg/greenrobot/essentials/ObjectCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L19a016.  v1:= temp @kind object;
  #L19a018.  if v1 == 0 then goto L19a020;
  #L19a01c.  v1:= 1I;
  #L19a01e.  goto L19a022;
  #L19a020.  v1:= 0I;
  #L19a022.  return v1;
}
procedure `void` `evictToTargetSize`(`org.greenrobot.essentials.ObjectCache` v2 @kind this, `int` v3 ) @signature `Lorg/greenrobot/essentials/ObjectCache;.evictToTargetSize:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a658.  @monitorenter v2
  #L19a65a.  if v3 > 0 then goto L19a66a;
  #L19a65e.  v3:= v2.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a662.  call `clear`(v3) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L19a668.  goto L19a6ba;
  #L19a66a.  call `a`(v2) @signature `Lorg/greenrobot/essentials/ObjectCache;.a:()V` @kind virtual;
  #L19a670.  v0:= v2.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a674.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L19a67a.  v0:= temp @kind object;
  #L19a67c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19a682.  v0:= temp @kind object;
  #L19a684.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a68a.  v1:= temp;
  #L19a68c.  if v1 == 0 then goto L19a6ba;
  #L19a690.  v1:= v2.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a694.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19a69a.  v1:= temp;
  #L19a69c.  if v1 <= v3 then goto L19a6ba;
  #L19a6a0.  v1:= v2.`org.greenrobot.essentials.ObjectCache.n` @type ^`int`;
  #L19a6a4.  v1:= v1 + 1;
  #L19a6a8.  v2.`org.greenrobot.essentials.ObjectCache.n` @type ^`int` := v1;
  #L19a6ac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a6b2.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L19a6b8.  goto L19a684;
  #L19a6ba.  @monitorexit v2
  #L19a6bc.  return @kind void;
  #L19a6be.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a6c0.  @monitorexit v2
  #L19a6c2.  throw v3;
  catch `java.lang.Throwable` @[L19a65e..L19a6b8] goto L19a6be;
}
procedure `java.lang.Object` `get`(`org.greenrobot.essentials.ObjectCache` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L19a1d4.  @monitorenter v7
  #L19a1d6.  v0:= v7.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a1da.  call temp:= `get`(v0, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a1e0.  v0:= temp @kind object;
  #L19a1e2.  v0:= (`org.greenrobot.essentials.ObjectCache$a`) v0 @kind object;
  #L19a1e6.  @monitorexit v7
  #L19a1e8.  v1:= 0I;
  #L19a1ea.  if v0 == 0 then goto L19a246;
  #L19a1ee.  v2:= v7.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` @kind boolean;
  #L19a1f2.  if v2 == 0 then goto L19a23e;
  #L19a1f6.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L19a1fc.  v2:= temp @kind wide;
  #L19a1fe.  v4:= v0.`org.greenrobot.essentials.ObjectCache$a.c` @type ^`long` @kind wide;
  #L19a202.  v2:= v2 - v4 @kind long;
  #L19a204.  v4:= v7.`org.greenrobot.essentials.ObjectCache.e` @type ^`long` @kind wide;
  #L19a208.  v6:= lcmp(v2, v4);
  #L19a20c.  if v6 >= 0 then goto L19a21c;
  #L19a210.  call temp:= `b`(v7, v8, v0) @signature `Lorg/greenrobot/essentials/ObjectCache;.b:(Ljava/lang/Object;Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @kind direct;
  #L19a216.  v8:= temp @kind object;
  #L19a218.  v1:= v8 @kind object;
  #L19a21a.  goto L19a246;
  #L19a21c.  v0:= v7.`org.greenrobot.essentials.ObjectCache.l` @type ^`int`;
  #L19a220.  v0:= v0 + 1;
  #L19a224.  v7.`org.greenrobot.essentials.ObjectCache.l` @type ^`int` := v0;
  #L19a228.  @monitorenter v7
  #L19a22a.  v0:= v7.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a22e.  call temp:= `remove`(v0, v8) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a234.  @monitorexit v7
  #L19a236.  goto L19a246;
  #L19a238.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a23a.  @monitorexit v7
  #L19a23c.  throw v8;
  #L19a23e.  call temp:= `b`(v7, v8, v0) @signature `Lorg/greenrobot/essentials/ObjectCache;.b:(Ljava/lang/Object;Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @kind direct;
  #L19a244.  v1:= temp @kind object;
  #L19a246.  if v1 == 0 then goto L19a258;
  #L19a24a.  v8:= v7.`org.greenrobot.essentials.ObjectCache.j` @type ^`int`;
  #L19a24e.  v8:= v8 + 1;
  #L19a252.  v7.`org.greenrobot.essentials.ObjectCache.j` @type ^`int` := v8;
  #L19a256.  goto L19a264;
  #L19a258.  v8:= v7.`org.greenrobot.essentials.ObjectCache.k` @type ^`int`;
  #L19a25c.  v8:= v8 + 1;
  #L19a260.  v7.`org.greenrobot.essentials.ObjectCache.k` @type ^`int` := v8;
  #L19a264.  return v1 @kind object;
  #L19a266.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a268.  @monitorexit v7
  #L19a26a.  throw v8;
  catch `java.lang.Throwable` @[L19a1d6..L19a1e8] goto L19a266;
  catch `java.lang.Throwable` @[L19a22a..L19a23c] goto L19a238;
  catch `java.lang.Throwable` @[L19a268..L19a26a] goto L19a266;
}
procedure `int` `getCountEvicted`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountEvicted:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a0f8.  v0:= v1.`org.greenrobot.essentials.ObjectCache.n` @type ^`int`;
  #L19a0fc.  return v0;
}
procedure `int` `getCountExpired`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountExpired:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a110.  v0:= v1.`org.greenrobot.essentials.ObjectCache.l` @type ^`int`;
  #L19a114.  return v0;
}
procedure `int` `getCountHit`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountHit:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a128.  v0:= v1.`org.greenrobot.essentials.ObjectCache.j` @type ^`int`;
  #L19a12c.  return v0;
}
procedure `int` `getCountMiss`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountMiss:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a140.  v0:= v1.`org.greenrobot.essentials.ObjectCache.k` @type ^`int`;
  #L19a144.  return v0;
}
procedure `int` `getCountPut`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountPut:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a158.  v0:= v1.`org.greenrobot.essentials.ObjectCache.i` @type ^`int`;
  #L19a15c.  return v0;
}
procedure `int` `getCountRefCleared`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getCountRefCleared:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a170.  v0:= v1.`org.greenrobot.essentials.ObjectCache.m` @type ^`int`;
  #L19a174.  return v0;
}
procedure `int` `getMaxSize`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getMaxSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a188.  v0:= v1.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a18c.  return v0;
}
procedure `java.lang.String` `getStatsStringRemoved`(`org.greenrobot.essentials.ObjectCache` v2 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.getStatsStringRemoved:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a464.  v0:= new `java.lang.StringBuilder`;
  #L19a468.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a46e.  v1:= "ObjectCache-Removed[expired=" @kind object;
  #L19a472.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a478.  v1:= v2.`org.greenrobot.essentials.ObjectCache.l` @type ^`int`;
  #L19a47c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a482.  v1:= ", refCleared=" @kind object;
  #L19a486.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a48c.  v1:= v2.`org.greenrobot.essentials.ObjectCache.m` @type ^`int`;
  #L19a490.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a496.  v1:= ", evicted=" @kind object;
  #L19a49a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4a0.  v1:= v2.`org.greenrobot.essentials.ObjectCache.n` @type ^`int`;
  #L19a4a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a4b0.  v0:= temp @kind object;
  #L19a4b2.  return v0 @kind object;
}
procedure `java.util.Set` `keySet`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a530.  @monitorenter v1
  #L19a532.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a536.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L19a53c.  v0:= temp @kind object;
  #L19a53e.  @monitorexit v1
  #L19a540.  return v0 @kind object;
  #L19a542.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a544.  @monitorexit v1
  #L19a546.  throw v0;
  catch `java.lang.Throwable` @[L19a532..L19a53e] goto L19a542;
}
procedure `java.lang.Object` `put`(`org.greenrobot.essentials.ObjectCache` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19a33c.  v0:= v5.`org.greenrobot.essentials.ObjectCache.b` @type ^`org.greenrobot.essentials.ObjectCache$ReferenceType` @kind object;
  #L19a340.  v1:= `@@org.greenrobot.essentials.ObjectCache$ReferenceType.WEAK` @type ^`org.greenrobot.essentials.ObjectCache$ReferenceType` @kind object;
  #L19a344.  v2:= 0I;
  #L19a346.  if v0 != v1 then goto L19a360;
  #L19a34a.  v0:= new `org.greenrobot.essentials.ObjectCache$a`;
  #L19a34e.  v1:= new `java.lang.ref.WeakReference`;
  #L19a352.  call `<init>`(v1, v7) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L19a358.  call `<init>`(v0, v1, v2) @signature `Lorg/greenrobot/essentials/ObjectCache$a;.<init>:(Ljava/lang/ref/Reference;Ljava/lang/Object;)V` @kind direct;
  #L19a35e.  goto L19a388;
  #L19a360.  v1:= `@@org.greenrobot.essentials.ObjectCache$ReferenceType.SOFT` @type ^`org.greenrobot.essentials.ObjectCache$ReferenceType` @kind object;
  #L19a364.  if v0 != v1 then goto L19a37e;
  #L19a368.  v0:= new `org.greenrobot.essentials.ObjectCache$a`;
  #L19a36c.  v1:= new `java.lang.ref.SoftReference`;
  #L19a370.  call `<init>`(v1, v7) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L19a376.  call `<init>`(v0, v1, v2) @signature `Lorg/greenrobot/essentials/ObjectCache$a;.<init>:(Ljava/lang/ref/Reference;Ljava/lang/Object;)V` @kind direct;
  #L19a37c.  goto L19a388;
  #L19a37e.  v0:= new `org.greenrobot.essentials.ObjectCache$a`;
  #L19a382.  call `<init>`(v0, v2, v7) @signature `Lorg/greenrobot/essentials/ObjectCache$a;.<init>:(Ljava/lang/ref/Reference;Ljava/lang/Object;)V` @kind direct;
  #L19a388.  v7:= v5.`org.greenrobot.essentials.ObjectCache.h` @type ^`int`;
  #L19a38c.  v7:= v7 + 1;
  #L19a390.  v5.`org.greenrobot.essentials.ObjectCache.h` @type ^`int` := v7;
  #L19a394.  v7:= v5.`org.greenrobot.essentials.ObjectCache.i` @type ^`int`;
  #L19a398.  v7:= v7 + 1;
  #L19a39c.  v5.`org.greenrobot.essentials.ObjectCache.i` @type ^`int` := v7;
  #L19a3a0.  v7:= v5.`org.greenrobot.essentials.ObjectCache.f` @type ^`boolean` @kind boolean;
  #L19a3a4.  if v7 == 0 then goto L19a3d0;
  #L19a3a8.  v1:= v5.`org.greenrobot.essentials.ObjectCache.g` @type ^`long` @kind wide;
  #L19a3ac.  v3:= 0L;
  #L19a3b0.  v7:= lcmp(v1, v3);
  #L19a3b4.  if v7 != 0 then goto L19a3d0;
  #L19a3b8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L19a3be.  v1:= temp @kind wide;
  #L19a3c0.  v3:= v5.`org.greenrobot.essentials.ObjectCache.e` @type ^`long` @kind wide;
  #L19a3c4.  v1:= v1 + v3 @kind long;
  #L19a3c6.  v3:= 1L;
  #L19a3ca.  v1:= v1 + v3 @kind long;
  #L19a3cc.  v5.`org.greenrobot.essentials.ObjectCache.g` @type ^`long` := v1 @kind wide;
  #L19a3d0.  @monitorenter v5
  #L19a3d2.  v7:= v5.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a3d6.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19a3dc.  v7:= temp;
  #L19a3de.  v1:= v5.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a3e2.  if v7 < v1 then goto L19a3f0;
  #L19a3e6.  v1:= v1 + -1;
  #L19a3ea.  call `evictToTargetSize`(v5, v1) @signature `Lorg/greenrobot/essentials/ObjectCache;.evictToTargetSize:(I)V` @kind virtual;
  #L19a3f0.  v7:= v5.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a3f4.  call temp:= `put`(v7, v6, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a3fa.  v6:= temp @kind object;
  #L19a3fc.  v6:= (`org.greenrobot.essentials.ObjectCache$a`) v6 @kind object;
  #L19a400.  @monitorexit v5
  #L19a402.  call temp:= `c`(v5, v6) @signature `Lorg/greenrobot/essentials/ObjectCache;.c:(Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @kind direct;
  #L19a408.  v6:= temp @kind object;
  #L19a40a.  return v6 @kind object;
  #L19a40c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a40e.  @monitorexit v5
  #L19a410.  throw v6;
  catch `java.lang.Throwable` @[L19a3d2..L19a402] goto L19a40c;
  catch `java.lang.Throwable` @[L19a40e..L19a410] goto L19a40c;
}
procedure `void` `putAll`(`org.greenrobot.essentials.ObjectCache` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a6e0.  v0:= v2.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a6e4.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19a6ea.  v1:= temp;
  #L19a6ec.  v0:= v0 - v1 @kind int;
  #L19a6ee.  v1:= v2.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a6f2.  if v1 <= 0 then goto L19a70c;
  #L19a6f6.  v1:= v2.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a6fa.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19a700.  v1:= temp;
  #L19a702.  if v1 <= v0 then goto L19a70c;
  #L19a706.  call `evictToTargetSize`(v2, v0) @signature `Lorg/greenrobot/essentials/ObjectCache;.evictToTargetSize:(I)V` @kind virtual;
  #L19a70c.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L19a712.  v3:= temp @kind object;
  #L19a714.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19a71a.  v3:= temp @kind object;
  #L19a71c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19a722.  v0:= temp;
  #L19a724.  if v0 == 0 then goto L19a74c;
  #L19a728.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19a72e.  v0:= temp @kind object;
  #L19a730.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L19a734.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L19a73a.  v1:= temp @kind object;
  #L19a73c.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L19a742.  v0:= temp @kind object;
  #L19a744.  call temp:= `put`(v2, v1, v0) @signature `Lorg/greenrobot/essentials/ObjectCache;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L19a74a.  goto L19a71c;
  #L19a74c.  return @kind void;
}
procedure `java.lang.Object` `remove`(`org.greenrobot.essentials.ObjectCache` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/greenrobot/essentials/ObjectCache;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a438.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a43c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a442.  v2:= temp @kind object;
  #L19a444.  v2:= (`org.greenrobot.essentials.ObjectCache$a`) v2 @kind object;
  #L19a448.  call temp:= `c`(v1, v2) @signature `Lorg/greenrobot/essentials/ObjectCache;.c:(Lorg/greenrobot/essentials/ObjectCache$a;)Ljava/lang/Object;` @kind direct;
  #L19a44e.  v2:= temp @kind object;
  #L19a450.  return v2 @kind object;
}
procedure `int` `size`(`org.greenrobot.essentials.ObjectCache` v1 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a1a0.  @monitorenter v1
  #L19a1a2.  v0:= v1.`org.greenrobot.essentials.ObjectCache.a` @type ^`java.util.Map` @kind object;
  #L19a1a6.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L19a1ac.  v0:= temp;
  #L19a1ae.  @monitorexit v1
  #L19a1b0.  return v0;
  #L19a1b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L19a1b4.  @monitorexit v1
  #L19a1b6.  throw v0;
  catch `java.lang.Throwable` @[L19a1a2..L19a1ae] goto L19a1b2;
}
procedure `java.lang.String` `toString`(`org.greenrobot.essentials.ObjectCache` v2 @kind this) @signature `Lorg/greenrobot/essentials/ObjectCache;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a4c4.  v0:= new `java.lang.StringBuilder`;
  #L19a4c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a4ce.  v1:= "ObjectCache[maxSize=" @kind object;
  #L19a4d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4d8.  v1:= v2.`org.greenrobot.essentials.ObjectCache.d` @type ^`int`;
  #L19a4dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4e2.  v1:= ", hits=" @kind object;
  #L19a4e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4ec.  v1:= v2.`org.greenrobot.essentials.ObjectCache.j` @type ^`int`;
  #L19a4f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a4f6.  v1:= ", misses=" @kind object;
  #L19a4fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a500.  v1:= v2.`org.greenrobot.essentials.ObjectCache.k` @type ^`int`;
  #L19a504.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a50a.  v1:= "]" @kind object;
  #L19a50e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a514.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a51a.  v0:= temp @kind object;
  #L19a51c.  return v0 @kind object;
}
