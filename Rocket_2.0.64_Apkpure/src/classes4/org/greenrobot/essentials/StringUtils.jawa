record `org.greenrobot.essentials.StringUtils` @kind class @AccessFlag PUBLIC {
}
global `char`[] `@@org.greenrobot.essentials.StringUtils.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/greenrobot/essentials/StringUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L19b584.  v0:= 16I;
  #L19b588.  v0:= new `char`[v0];
  #L19b58c.  goto L19b598;
  #L19b592.  `@@org.greenrobot.essentials.StringUtils.a` @type ^`char`[] := v0 @kind object;
  #L19b596.  return @kind void;
  #L19b598.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L19b5bf.  goto L19b592;
}
procedure `void` `<init>`(`org.greenrobot.essentials.StringUtils` v0 @kind this) @signature `Lorg/greenrobot/essentials/StringUtils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19b5d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19b5d6.  return @kind void;
}
procedure `java.lang.String` `decodeUrl`(`java.lang.String` v1 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.decodeUrl:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19af64.  v0:= "UTF-8" @kind object;
  #L19af68.  call temp:= `decode`(v1, v0) @signature `Ljava/net/URLDecoder;.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19af6e.  v1:= temp @kind object;
  #L19af70.  return v1 @kind object;
  #L19af72.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19af74.  v0:= new `java.lang.RuntimeException`;
  #L19af78.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19af7e.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L19af64..L19af70] goto L19af72;
}
procedure `java.lang.String` `decodeUrlIso`(`java.lang.String` v1 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.decodeUrlIso:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19afa0.  v0:= "ISO-8859-1" @kind object;
  #L19afa4.  call temp:= `decode`(v1, v0) @signature `Ljava/net/URLDecoder;.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19afaa.  v1:= temp @kind object;
  #L19afac.  return v1 @kind object;
  #L19afae.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19afb0.  v0:= new `java.lang.RuntimeException`;
  #L19afb4.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19afba.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L19afa0..L19afac] goto L19afae;
}
procedure `java.lang.String` `digest`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.digest:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L19afdc.  call temp:= `getInstance`(v1) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L19afe2.  v1:= temp @kind object;
  #L19afe4.  call temp:= `getBytes`(v0, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L19afea.  v0:= temp @kind object;
  #L19afec.  call `update`(v1, v0) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L19aff2.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L19aff8.  v0:= temp @kind object;
  #L19affa.  call temp:= `hex`(v0) @signature `Lorg/greenrobot/essentials/StringUtils;.hex:([B)Ljava/lang/String;` @kind static;
  #L19b000.  v0:= temp @kind object;
  #L19b002.  return v0 @kind object;
  #L19b004.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19b006.  goto L19b00a;
  #L19b008.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L19b00a.  v1:= new `java.lang.RuntimeException`;
  #L19b00e.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19b014.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L19afdc..L19b002] goto L19b008;
  catch `java.io.UnsupportedEncodingException` @[L19afdc..L19b002] goto L19b004;
}
procedure `java.lang.String` `ellipsize`(`java.lang.String` v1 @kind object, `int` v2 ) @signature `Lorg/greenrobot/essentials/StringUtils;.ellipsize:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19b038.  v0:= "..." @kind object;
  #L19b03c.  call temp:= `ellipsize`(v1, v2, v0) @signature `Lorg/greenrobot/essentials/StringUtils;.ellipsize:(Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b042.  v1:= temp @kind object;
  #L19b044.  return v1 @kind object;
}
procedure `java.lang.String` `ellipsize`(`java.lang.String` v3 @kind object, `int` v4 , `java.lang.String` v5 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.ellipsize:(Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19b058.  if v3 == 0 then goto L19b09a;
  #L19b05c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b062.  v0:= temp;
  #L19b064.  if v0 <= v4 then goto L19b09a;
  #L19b068.  v0:= new `java.lang.StringBuilder`;
  #L19b06c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19b072.  v1:= 0I;
  #L19b074.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b07a.  v2:= temp;
  #L19b07c.  v4:= v4 - v2 @kind int;
  #L19b07e.  call temp:= `substring`(v3, v1, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L19b084.  v3:= temp @kind object;
  #L19b086.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b08c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b092.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19b098.  v3:= temp @kind object;
  #L19b09a.  return v3 @kind object;
}
procedure `java.lang.String` `encodeUrl`(`java.lang.String` v1 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.encodeUrl:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19b0ac.  v0:= "UTF-8" @kind object;
  #L19b0b0.  call temp:= `encode`(v1, v0) @signature `Ljava/net/URLEncoder;.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b0b6.  v1:= temp @kind object;
  #L19b0b8.  return v1 @kind object;
  #L19b0ba.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19b0bc.  v0:= new `java.lang.RuntimeException`;
  #L19b0c0.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19b0c6.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L19b0ac..L19b0b8] goto L19b0ba;
}
procedure `java.lang.String` `encodeUrlIso`(`java.lang.String` v1 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.encodeUrlIso:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19b0e8.  v0:= "ISO-8859-1" @kind object;
  #L19b0ec.  call temp:= `encode`(v1, v0) @signature `Ljava/net/URLEncoder;.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b0f2.  v1:= temp @kind object;
  #L19b0f4.  return v1 @kind object;
  #L19b0f6.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19b0f8.  v0:= new `java.lang.RuntimeException`;
  #L19b0fc.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19b102.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L19b0e8..L19b0f4] goto L19b0f6;
}
procedure `java.util.List` `findLinesContaining`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.findLinesContaining:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19b538.  v0:= 1I;
  #L19b53a.  call temp:= `splitLines`(v5, v0) @signature `Lorg/greenrobot/essentials/StringUtils;.splitLines:(Ljava/lang/String;Z)[Ljava/lang/String;` @kind static;
  #L19b540.  v5:= temp @kind object;
  #L19b542.  v0:= new `java.util.ArrayList`;
  #L19b546.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19b54c.  v1:= length @variable v5;
  #L19b54e.  v2:= 0I;
  #L19b550.  if v2 >= v1 then goto L19b570;
  #L19b554.  v3:= v5[v2] @kind object;
  #L19b558.  call temp:= `contains`(v3, v6) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L19b55e.  v4:= temp;
  #L19b560.  if v4 == 0 then goto L19b56a;
  #L19b564.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19b56a.  v2:= v2 + 1;
  #L19b56e.  goto L19b550;
  #L19b570.  return v0 @kind object;
}
procedure `java.lang.String` `hex`(`byte`[] v8 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.hex:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19b124.  v0:= length @variable v8;
  #L19b126.  v0:= v0 * 2;
  #L19b12a.  v1:= new `char`[v0];
  #L19b12e.  v2:= 0I;
  #L19b130.  v3:= 0I;
  #L19b132.  if v2 >= v0 then goto L19b16a;
  #L19b136.  v4:= v3 + 1;
  #L19b13a.  v3:= v8[v3] @kind byte;
  #L19b13e.  v3:= v3 ^& 255;
  #L19b142.  v5:= v2 + 1;
  #L19b146.  v6:= `@@org.greenrobot.essentials.StringUtils.a` @type ^`char`[] @kind object;
  #L19b14a.  v7:= v3 ^>> 4;
  #L19b14e.  v7:= v6[v7] @kind char;
  #L19b152.  v1[v2]:= v7 @kind char;
  #L19b156.  v2:= v5 + 1;
  #L19b15a.  v3:= v3 ^& 15;
  #L19b15e.  v3:= v6[v3] @kind char;
  #L19b162.  v1[v5]:= v3 @kind char;
  #L19b166.  v3:= v4;
  #L19b168.  goto L19b132;
  #L19b16a.  v8:= new `java.lang.String`;
  #L19b16e.  call `<init>`(v8, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L19b174.  return v8 @kind object;
}
procedure `java.lang.String` `join`(`java.lang.Iterable` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.join:(Ljava/lang/Iterable;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19b21c.  if v4 == 0 then goto L19b28e;
  #L19b220.  v0:= new `java.lang.StringBuilder`;
  #L19b224.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19b22a.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19b230.  v4:= temp @kind object;
  #L19b232.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b238.  v1:= temp;
  #L19b23a.  v2:= 1I;
  #L19b23c.  v3:= 0I;
  #L19b23e.  if v1 != v2 then goto L19b24a;
  #L19b242.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19b248.  v3:= temp;
  #L19b24a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19b250.  v1:= temp;
  #L19b252.  if v1 == 0 then goto L19b284;
  #L19b256.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L19b25c.  v1:= temp @kind object;
  #L19b25e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b264.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19b26a.  v1:= temp;
  #L19b26c.  if v1 == 0 then goto L19b24a;
  #L19b270.  if v3 == 0 then goto L19b27c;
  #L19b274.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b27a.  goto L19b24a;
  #L19b27c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b282.  goto L19b24a;
  #L19b284.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19b28a.  v4:= temp @kind object;
  #L19b28c.  return v4 @kind object;
  #L19b28e.  v4:= "" @kind object;
  #L19b292.  return v4 @kind object;
}
procedure `java.lang.String` `join`(`int`[] v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.join:([ILjava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19b188.  if v5 == 0 then goto L19b204;
  #L19b18c.  v0:= new `java.lang.StringBuilder`;
  #L19b190.  v1:= 16I;
  #L19b194.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b19a.  v2:= temp;
  #L19b19c.  v3:= 1I;
  #L19b19e.  v2:= v2 + v3 @kind int;
  #L19b1a0.  v4:= length @variable v5;
  #L19b1a2.  v2:= v2 * v4 @kind int;
  #L19b1a6.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L19b1ac.  v1:= temp;
  #L19b1ae.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L19b1b4.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b1ba.  v1:= temp;
  #L19b1bc.  v2:= 0I;
  #L19b1be.  if v1 != v3 then goto L19b1cc;
  #L19b1c2.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19b1c8.  v1:= temp;
  #L19b1ca.  goto L19b1ce;
  #L19b1cc.  v1:= 0I;
  #L19b1ce.  v3:= length @variable v5;
  #L19b1d0.  if v2 >= v3 then goto L19b1fa;
  #L19b1d4.  if v2 == 0 then goto L19b1ea;
  #L19b1d8.  if v1 == 0 then goto L19b1e4;
  #L19b1dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b1e2.  goto L19b1ea;
  #L19b1e4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b1ea.  v3:= v5[v2];
  #L19b1ee.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b1f4.  v2:= v2 + 1;
  #L19b1f8.  goto L19b1ce;
  #L19b1fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19b200.  v5:= temp @kind object;
  #L19b202.  return v5 @kind object;
  #L19b204.  v5:= "" @kind object;
  #L19b208.  return v5 @kind object;
}
procedure `java.lang.String` `join`(`java.lang.String`[] v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.join:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19b2a4.  if v5 == 0 then goto L19b320;
  #L19b2a8.  v0:= new `java.lang.StringBuilder`;
  #L19b2ac.  v1:= 16I;
  #L19b2b0.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b2b6.  v2:= temp;
  #L19b2b8.  v3:= 1I;
  #L19b2ba.  v2:= v2 + v3 @kind int;
  #L19b2bc.  v4:= length @variable v5;
  #L19b2be.  v2:= v2 * v4 @kind int;
  #L19b2c2.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L19b2c8.  v1:= temp;
  #L19b2ca.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L19b2d0.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b2d6.  v1:= temp;
  #L19b2d8.  v2:= 0I;
  #L19b2da.  if v1 != v3 then goto L19b2e8;
  #L19b2de.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19b2e4.  v1:= temp;
  #L19b2e6.  goto L19b2ea;
  #L19b2e8.  v1:= 0I;
  #L19b2ea.  v3:= length @variable v5;
  #L19b2ec.  if v2 >= v3 then goto L19b316;
  #L19b2f0.  if v2 == 0 then goto L19b306;
  #L19b2f4.  if v1 == 0 then goto L19b300;
  #L19b2f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b2fe.  goto L19b306;
  #L19b300.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b306.  v3:= v5[v2] @kind object;
  #L19b30a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19b310.  v2:= v2 + 1;
  #L19b314.  goto L19b2ea;
  #L19b316.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19b31c.  v5:= temp @kind object;
  #L19b31e.  return v5 @kind object;
  #L19b320.  v5:= "" @kind object;
  #L19b324.  return v5 @kind object;
}
procedure `java.lang.String` `md5`(`java.lang.String` v2 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.md5:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19b338.  v0:= "MD5" @kind object;
  #L19b33c.  v1:= "UTF-8" @kind object;
  #L19b340.  call temp:= `digest`(v2, v0, v1) @signature `Lorg/greenrobot/essentials/StringUtils;.digest:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b346.  v2:= temp @kind object;
  #L19b348.  return v2 @kind object;
}
procedure `byte`[] `parseHex`(`java.lang.String` v6 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.parseHex:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L19ae4c.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19ae52.  v0:= temp;
  #L19ae54.  v1:= v0 %% 2;
  #L19ae58.  if v1 != 0 then goto L19aeaa;
  #L19ae5c.  v0:= v0 / 2;
  #L19ae60.  v1:= new `byte`[v0];
  #L19ae64.  v2:= 0I;
  #L19ae66.  v3:= 0I;
  #L19ae68.  if v2 >= v0 then goto L19aea8;
  #L19ae6c.  v4:= v3 + 1;
  #L19ae70.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19ae76.  v3:= temp;
  #L19ae78.  call temp:= `parseHexDigit`(v3) @signature `Lorg/greenrobot/essentials/StringUtils;.parseHexDigit:(C)I` @kind static;
  #L19ae7e.  v3:= temp;
  #L19ae80.  v3:= v3 ^< 4;
  #L19ae84.  v5:= v4 + 1;
  #L19ae88.  call temp:= `charAt`(v6, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19ae8e.  v4:= temp;
  #L19ae90.  call temp:= `parseHexDigit`(v4) @signature `Lorg/greenrobot/essentials/StringUtils;.parseHexDigit:(C)I` @kind static;
  #L19ae96.  v4:= temp;
  #L19ae98.  v3:= v3 ^| v4 @kind int;
  #L19ae9a.  v3:= (`byte`) v3 @kind i2b;
  #L19ae9c.  v1[v2]:= v3 @kind byte;
  #L19aea0.  v2:= v2 + 1;
  #L19aea4.  v3:= v5;
  #L19aea6.  goto L19ae68;
  #L19aea8.  return v1 @kind object;
  #L19aeaa.  v6:= new `java.lang.IllegalArgumentException`;
  #L19aeae.  v1:= new `java.lang.StringBuilder`;
  #L19aeb2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19aeb8.  v2:= "Illegal string length: " @kind object;
  #L19aebc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19aec2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19aec8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19aece.  v0:= temp @kind object;
  #L19aed0.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19aed6.  throw v6;
}
procedure `int` `parseHexDigit`(`char` v3 ) @signature `Lorg/greenrobot/essentials/StringUtils;.parseHexDigit:(C)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19aee8.  v0:= 48I;
  #L19aeec.  if v0 > v3 then goto L19aefc;
  #L19aef0.  v1:= 57I;
  #L19aef4.  if v3 > v1 then goto L19aefc;
  #L19aef8.  v3:= v3 - v0 @kind int;
  #L19aefa.  return v3;
  #L19aefc.  v0:= 65I;
  #L19af00.  if v0 > v3 then goto L19af14;
  #L19af04.  v1:= 70I;
  #L19af08.  if v3 > v1 then goto L19af14;
  #L19af0c.  v3:= v3 - v0 @kind int;
  #L19af0e.  v3:= v3 + 10;
  #L19af12.  return v3;
  #L19af14.  v0:= 97I;
  #L19af18.  if v0 > v3 then goto L19af26;
  #L19af1c.  v1:= 102I;
  #L19af20.  if v3 > v1 then goto L19af26;
  #L19af24.  goto L19af0c;
  #L19af26.  v0:= new `java.lang.IllegalArgumentException`;
  #L19af2a.  v1:= new `java.lang.StringBuilder`;
  #L19af2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19af34.  v2:= "Illegal hex digit: " @kind object;
  #L19af38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19af3e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L19af44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19af4a.  v3:= temp @kind object;
  #L19af4c.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19af52.  throw v0;
}
procedure `java.lang.String` `resolveEntity`(`java.lang.String` v3 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.resolveEntity:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19b35c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19b362.  v0:= temp;
  #L19b364.  v1:= 1I;
  #L19b366.  if v0 <= v1 then goto L19b3ca;
  #L19b36a.  v0:= 0I;
  #L19b36c.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19b372.  v0:= temp;
  #L19b374.  v2:= 35I;
  #L19b378.  if v0 != v2 then goto L19b3ca;
  #L19b37c.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19b382.  v0:= temp;
  #L19b384.  v2:= 120I;
  #L19b388.  if v0 != v2 then goto L19b3ae;
  #L19b38c.  v0:= 2I;
  #L19b38e.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19b394.  v3:= temp @kind object;
  #L19b396.  v0:= 16I;
  #L19b39a.  call temp:= `parseInt`(v3, v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L19b3a0.  v3:= temp;
  #L19b3a2.  v3:= (`char`) v3 @kind i2c;
  #L19b3a4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L19b3aa.  v3:= temp @kind object;
  #L19b3ac.  return v3 @kind object;
  #L19b3ae.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19b3b4.  v3:= temp @kind object;
  #L19b3b6.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L19b3bc.  v3:= temp;
  #L19b3be.  v3:= (`char`) v3 @kind i2c;
  #L19b3c0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L19b3c6.  v3:= temp @kind object;
  #L19b3c8.  return v3 @kind object;
  #L19b3ca.  v0:= "apos" @kind object;
  #L19b3ce.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19b3d4.  v0:= temp;
  #L19b3d6.  if v0 == 0 then goto L19b3e0;
  #L19b3da.  v3:= "'" @kind object;
  #L19b3de.  return v3 @kind object;
  #L19b3e0.  v0:= "quot" @kind object;
  #L19b3e4.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19b3ea.  v0:= temp;
  #L19b3ec.  if v0 == 0 then goto L19b3f6;
  #L19b3f0.  v3:= "\"" @kind object;
  #L19b3f4.  return v3 @kind object;
  #L19b3f6.  v0:= "gt" @kind object;
  #L19b3fa.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19b400.  v0:= temp;
  #L19b402.  if v0 == 0 then goto L19b40c;
  #L19b406.  v3:= ">" @kind object;
  #L19b40a.  return v3 @kind object;
  #L19b40c.  v0:= "lt" @kind object;
  #L19b410.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19b416.  v0:= temp;
  #L19b418.  if v0 == 0 then goto L19b422;
  #L19b41c.  v3:= "<" @kind object;
  #L19b420.  return v3 @kind object;
  #L19b422.  v0:= "amp" @kind object;
  #L19b426.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19b42c.  v0:= temp;
  #L19b42e.  if v0 == 0 then goto L19b436;
  #L19b432.  v3:= "&" @kind object;
  #L19b436.  return v3 @kind object;
}
procedure `java.lang.String` `sha1`(`java.lang.String` v2 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.sha1:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19b448.  v0:= "SHA-1" @kind object;
  #L19b44c.  v1:= "UTF-8" @kind object;
  #L19b450.  call temp:= `digest`(v2, v0, v1) @signature `Lorg/greenrobot/essentials/StringUtils;.digest:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b456.  v2:= temp @kind object;
  #L19b458.  return v2 @kind object;
}
procedure `java.lang.String` `sha256`(`java.lang.String` v2 @kind object) @signature `Lorg/greenrobot/essentials/StringUtils;.sha256:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19b46c.  v0:= "SHA-256" @kind object;
  #L19b470.  v1:= "UTF-8" @kind object;
  #L19b474.  call temp:= `digest`(v2, v0, v1) @signature `Lorg/greenrobot/essentials/StringUtils;.digest:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19b47a.  v2:= temp @kind object;
  #L19b47c.  return v2 @kind object;
}
procedure `java.lang.String`[] `split`(`java.lang.String` v5 @kind object, `char` v6 ) @signature `Lorg/greenrobot/essentials/StringUtils;.split:(Ljava/lang/String;C)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19b490.  v0:= 32I;
  #L19b494.  v0:= new `java.lang.String`[v0];
  #L19b498.  v1:= 0I;
  #L19b49a.  v2:= 0I;
  #L19b49c.  call temp:= `indexOf`(v5, v6, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L19b4a2.  v3:= temp;
  #L19b4a4.  v4:= -1I;
  #L19b4a6.  if v3 == v4 then goto L19b4da;
  #L19b4aa.  v4:= length @variable v0;
  #L19b4ac.  if v2 != v4 then goto L19b4c2;
  #L19b4b0.  v4:= length @variable v0;
  #L19b4b2.  v4:= v4 * 2;
  #L19b4b6.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L19b4bc.  v0:= temp @kind object;
  #L19b4be.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L19b4c2.  v4:= v2 + 1;
  #L19b4c6.  call temp:= `substring`(v5, v1, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L19b4cc.  v1:= temp @kind object;
  #L19b4ce.  v0[v2]:= v1 @kind object;
  #L19b4d2.  v1:= v3 + 1;
  #L19b4d6.  v2:= v4;
  #L19b4d8.  goto L19b49c;
  #L19b4da.  v6:= v2 + 1;
  #L19b4de.  call temp:= `copyOf`(v0, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L19b4e4.  v6:= temp @kind object;
  #L19b4e6.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L19b4ea.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19b4f0.  v5:= temp @kind object;
  #L19b4f2.  v6[v2]:= v5 @kind object;
  #L19b4f6.  return v6 @kind object;
}
procedure `java.lang.String`[] `splitLines`(`java.lang.String` v0 @kind object, `boolean` v1 ) @signature `Lorg/greenrobot/essentials/StringUtils;.splitLines:(Ljava/lang/String;Z)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L19b508.  if v1 == 0 then goto L19b51a;
  #L19b50c.  v1:= "[\n\r]+" @kind object;
  #L19b510.  call temp:= `split`(v0, v1) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L19b516.  v0:= temp @kind object;
  #L19b518.  return v0 @kind object;
  #L19b51a.  v1:= "\\r?\\n" @kind object;
  #L19b51e.  call temp:= `split`(v0, v1) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L19b524.  v0:= temp @kind object;
  #L19b526.  return v0 @kind object;
}
