record `org.greenrobot.essentials.hash.PrimitiveDataChecksum` @kind class @AccessFlag PUBLIC extends `java.util.zip.Checksum` @kind interface {
  `java.util.zip.Checksum` `org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v0 @kind this, `java.util.zip.Checksum` v1 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.<init>:(Ljava/util/zip/Checksum;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19db3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19db42.  v0.`org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @type ^`java.util.zip.Checksum` := v1 @kind object;
  #L19db46.  return @kind void;
}
procedure `long` `getValue`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v2 @kind this) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.getValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19db1c.  v0:= v2.`org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @type ^`java.util.zip.Checksum` @kind object;
  #L19db20.  call temp:= `getValue`(v0) @signature `Ljava/util/zip/Checksum;.getValue:()J` @kind interface;
  #L19db26.  v0:= temp @kind wide;
  #L19db28.  return v0 @kind wide;
}
procedure `void` `reset`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v1 @kind this) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19db58.  v0:= v1.`org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @type ^`java.util.zip.Checksum` @kind object;
  #L19db5c.  call `reset`(v0) @signature `Ljava/util/zip/Checksum;.reset:()V` @kind interface;
  #L19db62.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v1 @kind this, `int` v2 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19dc10.  v0:= v1.`org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @type ^`java.util.zip.Checksum` @kind object;
  #L19dc14.  call `update`(v0, v2) @signature `Ljava/util/zip/Checksum;.update:(I)V` @kind interface;
  #L19dc1a.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19db74.  if v3 == 0 then goto L19db82;
  #L19db78.  v0:= 0I;
  #L19db7a.  v1:= length @variable v3;
  #L19db7c.  call `update`(v2, v3, v0, v1) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([BII)V` @kind virtual;
  #L19db82.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19db94.  v0:= v1.`org.greenrobot.essentials.hash.PrimitiveDataChecksum.a` @type ^`java.util.zip.Checksum` @kind object;
  #L19db98.  call `update`(v0, v2, v3, v4) @signature `Ljava/util/zip/Checksum;.update:([BII)V` @kind interface;
  #L19db9e.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v4 @kind this, `double`[] v5 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19dbb0.  if v5 == 0 then goto L19dbcc;
  #L19dbb4.  v0:= length @variable v5;
  #L19dbb6.  v1:= 0I;
  #L19dbb8.  if v1 >= v0 then goto L19dbcc;
  #L19dbbc.  v2:= v5[v1] @kind wide;
  #L19dbc0.  call `updateDouble`(v4, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateDouble:(D)V` @kind virtual;
  #L19dbc6.  v1:= v1 + 1;
  #L19dbca.  goto L19dbb8;
  #L19dbcc.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v3 @kind this, `float`[] v4 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19dbe0.  if v4 == 0 then goto L19dbfc;
  #L19dbe4.  v0:= length @variable v4;
  #L19dbe6.  v1:= 0I;
  #L19dbe8.  if v1 >= v0 then goto L19dbfc;
  #L19dbec.  v2:= v4[v1];
  #L19dbf0.  call `updateFloat`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateFloat:(F)V` @kind virtual;
  #L19dbf6.  v1:= v1 + 1;
  #L19dbfa.  goto L19dbe8;
  #L19dbfc.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19dc2c.  if v4 == 0 then goto L19dc48;
  #L19dc30.  v0:= length @variable v4;
  #L19dc32.  v1:= 0I;
  #L19dc34.  if v1 >= v0 then goto L19dc48;
  #L19dc38.  v2:= v4[v1];
  #L19dc3c.  call `updateInt`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateInt:(I)V` @kind virtual;
  #L19dc42.  v1:= v1 + 1;
  #L19dc46.  goto L19dc34;
  #L19dc48.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v4 @kind this, `long`[] v5 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19dc5c.  if v5 == 0 then goto L19dc78;
  #L19dc60.  v0:= length @variable v5;
  #L19dc62.  v1:= 0I;
  #L19dc64.  if v1 >= v0 then goto L19dc78;
  #L19dc68.  v2:= v5[v1] @kind wide;
  #L19dc6c.  call `updateLong`(v4, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateLong:(J)V` @kind virtual;
  #L19dc72.  v1:= v1 + 1;
  #L19dc76.  goto L19dc64;
  #L19dc78.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v3 @kind this, `short`[] v4 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([S)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19dc8c.  if v4 == 0 then goto L19dca8;
  #L19dc90.  v0:= length @variable v4;
  #L19dc92.  v1:= 0I;
  #L19dc94.  if v1 >= v0 then goto L19dca8;
  #L19dc98.  v2:= v4[v1] @kind short;
  #L19dc9c.  call `updateShort`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateShort:(S)V` @kind virtual;
  #L19dca2.  v1:= v1 + 1;
  #L19dca6.  goto L19dc94;
  #L19dca8.  return @kind void;
}
procedure `void` `updateBoolean`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v0 @kind this, `boolean` v1 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateBoolean:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L19dcbc.  call `update`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dcc2.  return @kind void;
}
procedure `void` `updateDouble`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v0 @kind this, `double` v1 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateDouble:(D)V` @AccessFlag PUBLIC {
    temp;

  #L19dcd4.  call temp:= `doubleToLongBits`(v1) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L19dcda.  v1:= temp @kind wide;
  #L19dcdc.  call `updateLong`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateLong:(J)V` @kind virtual;
  #L19dce2.  return @kind void;
}
procedure `void` `updateFloat`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v0 @kind this, `float` v1 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateFloat:(F)V` @AccessFlag PUBLIC {
    temp;

  #L19dcf4.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L19dcfa.  v1:= temp;
  #L19dcfc.  call `updateInt`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateInt:(I)V` @kind virtual;
  #L19dd02.  return @kind void;
}
procedure `void` `updateInt`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v1 @kind this, `int` v2 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateInt:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19dd14.  v0:= v2 ^>> 24;
  #L19dd18.  v0:= v0 ^& 255;
  #L19dd1c.  call `update`(v1, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd22.  v0:= v2 ^>> 16;
  #L19dd26.  v0:= v0 ^& 255;
  #L19dd2a.  call `update`(v1, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd30.  v0:= v2 ^>> 8;
  #L19dd34.  v0:= v0 ^& 255;
  #L19dd38.  call `update`(v1, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd3e.  v2:= v2 ^& 255;
  #L19dd42.  call `update`(v1, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd48.  return @kind void;
}
procedure `void` `updateLong`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v2 @kind this, `long` v3 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateLong:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19dd5c.  v0:= 56I;
  #L19dd60.  v0:= v3 ^>> v0 @kind long;
  #L19dd64.  v1:= (`int`) v0 @kind l2i;
  #L19dd66.  v0:= v1 ^& 255;
  #L19dd6a.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd70.  v0:= 48I;
  #L19dd74.  v0:= v3 ^>> v0 @kind long;
  #L19dd78.  v1:= (`int`) v0 @kind l2i;
  #L19dd7a.  v0:= v1 ^& 255;
  #L19dd7e.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd84.  v0:= 40I;
  #L19dd88.  v0:= v3 ^>> v0 @kind long;
  #L19dd8c.  v1:= (`int`) v0 @kind l2i;
  #L19dd8e.  v0:= v1 ^& 255;
  #L19dd92.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dd98.  v0:= 32I;
  #L19dd9c.  v0:= v3 ^>> v0 @kind long;
  #L19dda0.  v1:= (`int`) v0 @kind l2i;
  #L19dda2.  v0:= v1 ^& 255;
  #L19dda6.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19ddac.  v0:= 24I;
  #L19ddb0.  v0:= v3 ^>> v0 @kind long;
  #L19ddb4.  v1:= (`int`) v0 @kind l2i;
  #L19ddb6.  v0:= v1 ^& 255;
  #L19ddba.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19ddc0.  v0:= 16I;
  #L19ddc4.  v0:= v3 ^>> v0 @kind long;
  #L19ddc8.  v1:= (`int`) v0 @kind l2i;
  #L19ddca.  v0:= v1 ^& 255;
  #L19ddce.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19ddd4.  v0:= 8I;
  #L19ddd8.  v0:= v3 ^>> v0 @kind long;
  #L19dddc.  v1:= (`int`) v0 @kind l2i;
  #L19ddde.  v0:= v1 ^& 255;
  #L19dde2.  call `update`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19dde8.  v0:= 255L;
  #L19ddec.  v3:= v3 ^& v0 @kind long;
  #L19ddee.  v4:= (`int`) v3 @kind l2i;
  #L19ddf0.  call `update`(v2, v4) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19ddf6.  return @kind void;
}
procedure `void` `updateShort`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v1 @kind this, `short` v2 ) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateShort:(S)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19de08.  v0:= v2 ^>> 8;
  #L19de0c.  v0:= v0 ^& 255;
  #L19de10.  call `update`(v1, v0) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19de16.  v2:= v2 ^& 255;
  #L19de1a.  call `update`(v1, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:(I)V` @kind virtual;
  #L19de20.  return @kind void;
}
procedure `void` `updateUtf8`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateUtf8:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19de34.  if v3 == 0 then goto L19de5e;
  #L19de38.  v0:= "UTF-8" @kind object;
  #L19de3c.  call temp:= `getBytes`(v3, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L19de42.  v3:= temp @kind object;
  #L19de44.  v0:= 0I;
  #L19de46.  v1:= length @variable v3;
  #L19de48.  call `update`(v2, v3, v0, v1) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.update:([BII)V` @kind virtual;
  #L19de4e.  goto L19de5e;
  #L19de50.  v3:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L19de52.  v0:= new `java.lang.RuntimeException`;
  #L19de56.  call `<init>`(v0, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L19de5c.  throw v0;
  #L19de5e.  return @kind void;
  catch `java.io.UnsupportedEncodingException` @[L19de38..L19de44] goto L19de50;
}
procedure `void` `updateUtf8`(`org.greenrobot.essentials.hash.PrimitiveDataChecksum` v3 @kind this, `java.lang.String`[] v4 @kind object) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateUtf8:([Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19de80.  if v4 == 0 then goto L19de9c;
  #L19de84.  v0:= length @variable v4;
  #L19de86.  v1:= 0I;
  #L19de88.  if v1 >= v0 then goto L19de9c;
  #L19de8c.  v2:= v4[v1] @kind object;
  #L19de90.  call `updateUtf8`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/PrimitiveDataChecksum;.updateUtf8:(Ljava/lang/String;)V` @kind virtual;
  #L19de96.  v1:= v1 + 1;
  #L19de9a.  goto L19de88;
  #L19de9c.  return @kind void;
}
