record `org.greenrobot.essentials.hash.Murmur3A` @kind class @AccessFlag PUBLIC extends `java.util.zip.Checksum` @kind interface {
  `int` `org.greenrobot.essentials.hash.Murmur3A.a` @AccessFlag PRIVATE_FINAL;
  `int` `org.greenrobot.essentials.hash.Murmur3A.b` @AccessFlag PRIVATE;
  `int` `org.greenrobot.essentials.hash.Murmur3A.c` @AccessFlag PRIVATE;
  `int` `org.greenrobot.essentials.hash.Murmur3A.d` @AccessFlag PRIVATE;
  `int` `org.greenrobot.essentials.hash.Murmur3A.e` @AccessFlag PRIVATE;
}
global `org.greenrobot.essentials.PrimitiveArrayUtils` `@@org.greenrobot.essentials.hash.Murmur3A.f` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L19cd1c.  call temp:= `getInstance`() @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils;.getInstance:()Lorg/greenrobot/essentials/PrimitiveArrayUtils;` @kind static;
  #L19cd22.  v0:= temp @kind object;
  #L19cd24.  `@@org.greenrobot.essentials.hash.Murmur3A.f` @type ^`org.greenrobot.essentials.PrimitiveArrayUtils` := v0 @kind object;
  #L19cd28.  return @kind void;
}
procedure `void` `<init>`(`org.greenrobot.essentials.hash.Murmur3A` v1 @kind this) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19cd3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19cd42.  v0:= 0I;
  #L19cd44.  v1.`org.greenrobot.essentials.hash.Murmur3A.a` @type ^`int` := v0;
  #L19cd48.  return @kind void;
}
procedure `void` `<init>`(`org.greenrobot.essentials.hash.Murmur3A` v0 @kind this, `int` v1 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19cd5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19cd62.  v0.`org.greenrobot.essentials.hash.Murmur3A.a` @type ^`int` := v1;
  #L19cd66.  v0.`org.greenrobot.essentials.hash.Murmur3A.b` @type ^`int` := v1;
  #L19cd6a.  return @kind void;
}
procedure `void` `a`(`org.greenrobot.essentials.hash.Murmur3A` v1 @kind this, `int` v2 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L19cd7c.  v0:= -862048943I;
  #L19cd82.  v2:= v2 * v0 @kind int;
  #L19cd86.  v0:= v2 ^< 15;
  #L19cd8a.  v2:= v2 ^>> 17;
  #L19cd8e.  v2:= v2 ^| v0 @kind int;
  #L19cd90.  v0:= 461845907I;
  #L19cd96.  v2:= v2 * v0 @kind int;
  #L19cd9a.  v0:= v1.`org.greenrobot.essentials.hash.Murmur3A.b` @type ^`int`;
  #L19cd9e.  v2:= v2 ^~ v0 @kind int;
  #L19cda0.  v0:= v2 ^< 13;
  #L19cda4.  v2:= v2 ^>> 19;
  #L19cda8.  v2:= v2 ^| v0 @kind int;
  #L19cdaa.  v2:= v2 * 5;
  #L19cdae.  v0:= -430675100I;
  #L19cdb4.  v2:= v2 + v0 @kind int;
  #L19cdb6.  v1.`org.greenrobot.essentials.hash.Murmur3A.b` @type ^`int` := v2;
  #L19cdba.  return @kind void;
}
procedure `long` `getValue`(`org.greenrobot.essentials.hash.Murmur3A` v5 @kind this) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.getValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19cc9c.  v0:= v5.`org.greenrobot.essentials.hash.Murmur3A.b` @type ^`int`;
  #L19cca0.  v1:= v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19cca4.  if v1 <= 0 then goto L19cccc;
  #L19cca8.  v1:= v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19ccac.  v2:= -862048943I;
  #L19ccb2.  v1:= v1 * v2 @kind int;
  #L19ccb6.  v2:= v1 ^< 15;
  #L19ccba.  v1:= v1 ^>> 17;
  #L19ccbe.  v1:= v1 ^| v2 @kind int;
  #L19ccc0.  v2:= 461845907I;
  #L19ccc6.  v1:= v1 * v2 @kind int;
  #L19ccca.  v0:= v0 ^~ v1 @kind int;
  #L19cccc.  v1:= v5.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19ccd0.  v0:= v0 ^~ v1 @kind int;
  #L19ccd2.  v1:= v0 ^>> 16;
  #L19ccd6.  v0:= v0 ^~ v1 @kind int;
  #L19ccd8.  v1:= -2048144789I;
  #L19ccde.  v0:= v0 * v1 @kind int;
  #L19cce2.  v1:= v0 ^>> 13;
  #L19cce6.  v0:= v0 ^~ v1 @kind int;
  #L19cce8.  v1:= -1028477387I;
  #L19ccee.  v0:= v0 * v1 @kind int;
  #L19ccf2.  v1:= v0 ^>> 16;
  #L19ccf6.  v0:= v0 ^~ v1 @kind int;
  #L19ccf8.  v1:= 4294967295L;
  #L19cd02.  v3:= (`long`) v0 @kind i2l;
  #L19cd04.  v0:= v3 ^& v1 @kind long;
  #L19cd08.  return v0 @kind wide;
}
procedure `void` `reset`(`org.greenrobot.essentials.hash.Murmur3A` v1 @kind this) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cdcc.  v0:= v1.`org.greenrobot.essentials.hash.Murmur3A.a` @type ^`int`;
  #L19cdd0.  v1.`org.greenrobot.essentials.hash.Murmur3A.b` @type ^`int` := v0;
  #L19cdd4.  v0:= 0I;
  #L19cdd6.  v1.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v0;
  #L19cdda.  v1.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v0;
  #L19cdde.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.Murmur3A` v4 @kind this, `int` v5 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19ce8c.  v0:= v4.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19ce90.  v1:= 1I;
  #L19ce92.  if v0 == 0 then goto L19cef8;
  #L19ce96.  v2:= 2I;
  #L19ce98.  if v0 == v1 then goto L19cee0;
  #L19ce9c.  v3:= 3I;
  #L19ce9e.  if v0 == v2 then goto L19cec8;
  #L19cea2.  if v0 == v3 then goto L19cea8;
  #L19cea6.  goto L19cf04;
  #L19cea8.  v0:= v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19ceac.  v5:= v5 ^& 255;
  #L19ceb0.  v5:= v5 ^< 24;
  #L19ceb4.  v5:= v5 ^| v0 @kind int;
  #L19ceb6.  v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v5;
  #L19ceba.  call `a`(v4, v5) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19cec0.  v5:= 0I;
  #L19cec2.  v4.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v5;
  #L19cec6.  goto L19cf04;
  #L19cec8.  v0:= v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19cecc.  v5:= v5 ^& 255;
  #L19ced0.  v5:= v5 ^< 16;
  #L19ced4.  v5:= v5 ^| v0 @kind int;
  #L19ced6.  v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v5;
  #L19ceda.  v4.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v3;
  #L19cede.  goto L19cf04;
  #L19cee0.  v0:= v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19cee4.  v5:= v5 ^& 255;
  #L19cee8.  v5:= v5 ^< 8;
  #L19ceec.  v5:= v5 ^| v0 @kind int;
  #L19ceee.  v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v5;
  #L19cef2.  v4.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v2;
  #L19cef6.  goto L19cf04;
  #L19cef8.  v5:= v5 ^& 255;
  #L19cefc.  v4.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v5;
  #L19cf00.  v4.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v1;
  #L19cf04.  v5:= v4.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19cf08.  v5:= v5 + v1 @kind int;
  #L19cf0a.  v4.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v5;
  #L19cf0e.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.Murmur3A` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cdf0.  v0:= length @variable v3;
  #L19cdf2.  v1:= 0I;
  #L19cdf4.  call `update`(v2, v3, v1, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:([BII)V` @kind virtual;
  #L19cdfa.  return @kind void;
}
procedure `void` `update`(`org.greenrobot.essentials.hash.Murmur3A` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19ce0c.  v0:= v3.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19ce10.  if v0 == 0 then goto L19ce2c;
  #L19ce14.  if v6 <= 0 then goto L19ce2c;
  #L19ce18.  v0:= v4[v5] @kind byte;
  #L19ce1c.  call `update`(v3, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:(I)V` @kind virtual;
  #L19ce22.  v5:= v5 + 1;
  #L19ce26.  v6:= v6 + -1;
  #L19ce2a.  goto L19ce0c;
  #L19ce2c.  v0:= v6 ^& 3;
  #L19ce30.  v6:= v6 + v5 @kind int;
  #L19ce32.  v6:= v6 - v0 @kind int;
  #L19ce34.  v1:= v5;
  #L19ce36.  if v1 >= v6 then goto L19ce52;
  #L19ce3a.  v2:= `@@org.greenrobot.essentials.hash.Murmur3A.f` @type ^`org.greenrobot.essentials.PrimitiveArrayUtils` @kind object;
  #L19ce3e.  call temp:= `getIntLE`(v2, v4, v1) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils;.getIntLE:([BI)I` @kind virtual;
  #L19ce44.  v2:= temp;
  #L19ce46.  call `a`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19ce4c.  v1:= v1 + 4;
  #L19ce50.  goto L19ce36;
  #L19ce52.  v1:= v3.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19ce56.  v5:= v6 - v5 @kind int;
  #L19ce5a.  v1:= v1 + v5 @kind int;
  #L19ce5c.  v3.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v1;
  #L19ce60.  v5:= 0I;
  #L19ce62.  if v5 >= v0 then goto L19ce7a;
  #L19ce66.  v1:= v6 + v5 @kind int;
  #L19ce6a.  v1:= v4[v1] @kind byte;
  #L19ce6e.  call `update`(v3, v1) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:(I)V` @kind virtual;
  #L19ce74.  v5:= v5 + 1;
  #L19ce78.  goto L19ce62;
  #L19ce7a.  return @kind void;
}
procedure `void` `updateBoolean`(`org.greenrobot.essentials.hash.Murmur3A` v0 @kind this, `boolean` v1 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateBoolean:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L19cf20.  call `update`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.update:(I)V` @kind virtual;
  #L19cf26.  return @kind void;
}
procedure `void` `updateDouble`(`org.greenrobot.essentials.hash.Murmur3A` v0 @kind this, `double` v1 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateDouble:(D)V` @AccessFlag PUBLIC {
    temp;

  #L19cf38.  call temp:= `doubleToLongBits`(v1) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L19cf3e.  v1:= temp @kind wide;
  #L19cf40.  call `updateLong`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateLong:(J)V` @kind virtual;
  #L19cf46.  return @kind void;
}
procedure `void` `updateFloat`(`org.greenrobot.essentials.hash.Murmur3A` v0 @kind this, `float` v1 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateFloat:(F)V` @AccessFlag PUBLIC {
    temp;

  #L19cf58.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L19cf5e.  v1:= temp;
  #L19cf60.  call `updateInt`(v0, v1) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateInt:(I)V` @kind virtual;
  #L19cf66.  return @kind void;
}
procedure `void` `updateInt`(`org.greenrobot.essentials.hash.Murmur3A` v2 @kind this, `int` v3 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateInt:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cf78.  v0:= v2.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19cf7c.  if v0 == 0 then goto L19d002;
  #L19cf80.  v1:= 1I;
  #L19cf82.  if v0 == v1 then goto L19cfdc;
  #L19cf86.  v1:= 2I;
  #L19cf88.  if v0 == v1 then goto L19cfb6;
  #L19cf8c.  v1:= 3I;
  #L19cf8e.  if v0 == v1 then goto L19cf94;
  #L19cf92.  goto L19d008;
  #L19cf94.  v0:= v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19cf98.  v1:= v3 ^& 255;
  #L19cf9c.  v1:= v1 ^< 24;
  #L19cfa0.  v0:= v0 ^| v1 @kind int;
  #L19cfa2.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19cfa6.  call `a`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19cfac.  v3:= v3 ^>> 8;
  #L19cfb0.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v3;
  #L19cfb4.  goto L19d008;
  #L19cfb6.  v0:= v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19cfba.  v1:= 65535I;
  #L19cfc0.  v1:= v1 ^& v3 @kind int;
  #L19cfc2.  v1:= v1 ^< 16;
  #L19cfc6.  v0:= v0 ^| v1 @kind int;
  #L19cfc8.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19cfcc.  call `a`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19cfd2.  v3:= v3 ^>> 16;
  #L19cfd6.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v3;
  #L19cfda.  goto L19d008;
  #L19cfdc.  v0:= v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19cfe0.  v1:= 16777215I;
  #L19cfe6.  v1:= v1 ^& v3 @kind int;
  #L19cfe8.  v1:= v1 ^< 8;
  #L19cfec.  v0:= v0 ^| v1 @kind int;
  #L19cfee.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19cff2.  call `a`(v2, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19cff8.  v3:= v3 ^>> 24;
  #L19cffc.  v2.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v3;
  #L19d000.  goto L19d008;
  #L19d002.  call `a`(v2, v3) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d008.  v3:= v2.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d00c.  v3:= v3 + 4;
  #L19d010.  v2.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v3;
  #L19d014.  return @kind void;
}
procedure `void` `updateInt`(`org.greenrobot.essentials.hash.Murmur3A` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateInt:([I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19d028.  v0:= v3.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19d02c.  v1:= 0I;
  #L19d02e.  if v0 != 0 then goto L19d05a;
  #L19d032.  v0:= length @variable v4;
  #L19d034.  if v1 >= v0 then goto L19d048;
  #L19d038.  v2:= v4[v1];
  #L19d03c.  call `a`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d042.  v1:= v1 + 1;
  #L19d046.  goto L19d034;
  #L19d048.  v0:= v3.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d04c.  v4:= length @variable v4;
  #L19d04e.  v4:= v4 * 4;
  #L19d052.  v0:= v0 + v4 @kind int;
  #L19d054.  v3.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v0;
  #L19d058.  goto L19d070;
  #L19d05a.  v0:= length @variable v4;
  #L19d05c.  if v1 >= v0 then goto L19d070;
  #L19d060.  v2:= v4[v1];
  #L19d064.  call `updateInt`(v3, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateInt:(I)V` @kind virtual;
  #L19d06a.  v1:= v1 + 1;
  #L19d06e.  goto L19d05c;
  #L19d070.  return @kind void;
}
procedure `void` `updateLong`(`org.greenrobot.essentials.hash.Murmur3A` v10 @kind this, `long` v11 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateLong:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L19d084.  v0:= v10.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19d088.  v1:= 8I;
  #L19d08c.  v2:= -1L;
  #L19d090.  if v0 == 0 then goto L19d15e;
  #L19d094.  v4:= 1I;
  #L19d096.  v5:= 24I;
  #L19d09a.  if v0 == v4 then goto L19d124;
  #L19d09e.  v4:= 2I;
  #L19d0a0.  if v0 == v4 then goto L19d0e6;
  #L19d0a4.  v4:= 3I;
  #L19d0a6.  if v0 == v4 then goto L19d0ac;
  #L19d0aa.  goto L19d176;
  #L19d0ac.  v0:= v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d0b0.  v6:= (`long`) v0 @kind i2l;
  #L19d0b2.  v8:= 255L;
  #L19d0b6.  v8:= v8 ^& v11 @kind long;
  #L19d0b8.  v4:= v8 ^< v5 @kind long;
  #L19d0bc.  v4:= v4 ^| v6 @kind long;
  #L19d0be.  v0:= (`int`) v4 @kind l2i;
  #L19d0c0.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19d0c4.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d0ca.  v4:= v11 ^>> v1 @kind long;
  #L19d0ce.  v2:= v2 ^& v4 @kind long;
  #L19d0d0.  v0:= (`int`) v2 @kind l2i;
  #L19d0d2.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d0d8.  v0:= 40I;
  #L19d0dc.  v11:= v11 ^>> v0 @kind long;
  #L19d0de.  v12:= (`int`) v11 @kind l2i;
  #L19d0e0.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v12;
  #L19d0e4.  goto L19d176;
  #L19d0e6.  v0:= v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d0ea.  v4:= (`long`) v0 @kind i2l;
  #L19d0ec.  v6:= 65535L;
  #L19d0f2.  v6:= v6 ^& v11 @kind long;
  #L19d0f4.  v0:= 16I;
  #L19d0f8.  v6:= v6 ^< v0 @kind long;
  #L19d0fa.  v4:= v4 ^| v6 @kind long;
  #L19d0fc.  v5:= (`int`) v4 @kind l2i;
  #L19d0fe.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v5;
  #L19d102.  call `a`(v10, v5) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d108.  v4:= v11 ^>> v0 @kind long;
  #L19d10c.  v2:= v2 ^& v4 @kind long;
  #L19d10e.  v0:= (`int`) v2 @kind l2i;
  #L19d110.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d116.  v0:= 48I;
  #L19d11a.  v11:= v11 ^>> v0 @kind long;
  #L19d11c.  v12:= (`int`) v11 @kind l2i;
  #L19d11e.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v12;
  #L19d122.  goto L19d176;
  #L19d124.  v0:= v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d128.  v6:= (`long`) v0 @kind i2l;
  #L19d12a.  v8:= 16777215L;
  #L19d130.  v8:= v8 ^& v11 @kind long;
  #L19d132.  v8:= v8 ^< v1 @kind long;
  #L19d134.  v6:= v6 ^| v8 @kind long;
  #L19d136.  v0:= (`int`) v6 @kind l2i;
  #L19d138.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19d13c.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d142.  v4:= v11 ^>> v5 @kind long;
  #L19d146.  v2:= v2 ^& v4 @kind long;
  #L19d148.  v0:= (`int`) v2 @kind l2i;
  #L19d14a.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d150.  v0:= 56I;
  #L19d154.  v11:= v11 ^>> v0 @kind long;
  #L19d156.  v12:= (`int`) v11 @kind l2i;
  #L19d158.  v10.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v12;
  #L19d15c.  goto L19d176;
  #L19d15e.  v2:= v2 ^& v11 @kind long;
  #L19d160.  v0:= (`int`) v2 @kind l2i;
  #L19d162.  call `a`(v10, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d168.  v0:= 32I;
  #L19d16c.  v11:= v11 ^>> v0 @kind long;
  #L19d16e.  v12:= (`int`) v11 @kind l2i;
  #L19d170.  call `a`(v10, v12) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d176.  v11:= v10.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d17a.  v11:= v11 + v1 @kind int;
  #L19d17c.  v10.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v11;
  #L19d180.  return @kind void;
}
procedure `void` `updateLong`(`org.greenrobot.essentials.hash.Murmur3A` v6 @kind this, `long`[] v7 @kind object) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateLong:([J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L19d194.  v0:= v6.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19d198.  v1:= 0I;
  #L19d19a.  if v0 != 0 then goto L19d1dc;
  #L19d19e.  v0:= length @variable v7;
  #L19d1a0.  if v1 >= v0 then goto L19d1ca;
  #L19d1a4.  v2:= v7[v1] @kind wide;
  #L19d1a8.  v4:= -1L;
  #L19d1ac.  v4:= v4 ^& v2 @kind long;
  #L19d1ae.  v5:= (`int`) v4 @kind l2i;
  #L19d1b0.  call `a`(v6, v5) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d1b6.  v4:= 32I;
  #L19d1ba.  v2:= v2 ^>> v4 @kind long;
  #L19d1bc.  v3:= (`int`) v2 @kind l2i;
  #L19d1be.  call `a`(v6, v3) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d1c4.  v1:= v1 + 1;
  #L19d1c8.  goto L19d1a0;
  #L19d1ca.  v0:= v6.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d1ce.  v7:= length @variable v7;
  #L19d1d0.  v7:= v7 * 8;
  #L19d1d4.  v0:= v0 + v7 @kind int;
  #L19d1d6.  v6.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v0;
  #L19d1da.  goto L19d1f2;
  #L19d1dc.  v0:= length @variable v7;
  #L19d1de.  if v1 >= v0 then goto L19d1f2;
  #L19d1e2.  v2:= v7[v1] @kind wide;
  #L19d1e6.  call `updateLong`(v6, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateLong:(J)V` @kind virtual;
  #L19d1ec.  v1:= v1 + 1;
  #L19d1f0.  goto L19d1de;
  #L19d1f2.  return @kind void;
}
procedure `void` `updateShort`(`org.greenrobot.essentials.hash.Murmur3A` v5 @kind this, `short` v6 ) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateShort:(S)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19d204.  v0:= v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19d208.  v1:= 65535I;
  #L19d20e.  v2:= 2I;
  #L19d210.  if v0 == 0 then goto L19d284;
  #L19d214.  v3:= 3I;
  #L19d216.  v4:= 1I;
  #L19d218.  if v0 == v4 then goto L19d26e;
  #L19d21c.  if v0 == v2 then goto L19d250;
  #L19d220.  if v0 == v3 then goto L19d226;
  #L19d224.  goto L19d28e;
  #L19d226.  v0:= v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d22a.  v1:= v6 ^& 255;
  #L19d22e.  v1:= v1 ^< 24;
  #L19d232.  v0:= v0 ^| v1 @kind int;
  #L19d234.  v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19d238.  call `a`(v5, v0) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d23e.  v6:= v6 ^> 8;
  #L19d242.  v6:= v6 ^& 255;
  #L19d246.  v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v6;
  #L19d24a.  v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v4;
  #L19d24e.  goto L19d28e;
  #L19d250.  v0:= v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d254.  v6:= v6 ^& v1 @kind int;
  #L19d256.  v6:= v6 ^< 16;
  #L19d25a.  v6:= v6 ^| v0 @kind int;
  #L19d25c.  v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v6;
  #L19d260.  call `a`(v5, v6) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d266.  v6:= 0I;
  #L19d268.  v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v6;
  #L19d26c.  goto L19d28e;
  #L19d26e.  v0:= v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d272.  v6:= v6 ^& v1 @kind int;
  #L19d274.  v6:= v6 ^< 8;
  #L19d278.  v6:= v6 ^| v0 @kind int;
  #L19d27a.  v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v6;
  #L19d27e.  v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v3;
  #L19d282.  goto L19d28e;
  #L19d284.  v6:= v6 ^& v1 @kind int;
  #L19d286.  v5.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v6;
  #L19d28a.  v5.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v2;
  #L19d28e.  v6:= v5.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d292.  v6:= v6 + v2 @kind int;
  #L19d294.  v5.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v6;
  #L19d298.  return @kind void;
}
procedure `void` `updateShort`(`org.greenrobot.essentials.hash.Murmur3A` v6 @kind this, `short`[] v7 @kind object) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateShort:([S)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L19d2ac.  v0:= length @variable v7;
  #L19d2ae.  v1:= 0I;
  #L19d2b0.  if v0 <= 0 then goto L19d342;
  #L19d2b4.  v2:= v6.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int`;
  #L19d2b8.  v3:= 2I;
  #L19d2ba.  if v2 == 0 then goto L19d2c2;
  #L19d2be.  if v2 != v3 then goto L19d342;
  #L19d2c2.  v4:= 65535I;
  #L19d2c8.  if v2 != v3 then goto L19d2f0;
  #L19d2cc.  v2:= v6.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int`;
  #L19d2d0.  v5:= v7[v1] @kind short;
  #L19d2d4.  v5:= v5 ^& v4 @kind int;
  #L19d2d6.  v5:= v5 ^< 16;
  #L19d2da.  v2:= v2 ^| v5 @kind int;
  #L19d2dc.  v6.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v2;
  #L19d2e0.  call `a`(v6, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d2e6.  v6.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v1;
  #L19d2ea.  v0:= v0 + -1;
  #L19d2ee.  v1:= 1I;
  #L19d2f0.  v0:= v0 ^& -2;
  #L19d2f4.  v0:= v0 + v1 @kind int;
  #L19d2f6.  if v1 >= v0 then goto L19d31c;
  #L19d2fa.  v2:= v7[v1] @kind short;
  #L19d2fe.  v2:= v2 ^& v4 @kind int;
  #L19d300.  v5:= v1 + 1;
  #L19d304.  v5:= v7[v5] @kind short;
  #L19d308.  v5:= v5 ^& v4 @kind int;
  #L19d30a.  v5:= v5 ^< 16;
  #L19d30e.  v2:= v2 ^| v5 @kind int;
  #L19d310.  call `a`(v6, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.a:(I)V` @kind direct;
  #L19d316.  v1:= v1 + 2;
  #L19d31a.  goto L19d2f6;
  #L19d31c.  v1:= length @variable v7;
  #L19d31e.  if v0 >= v1 then goto L19d330;
  #L19d322.  v0:= v7[v0] @kind short;
  #L19d326.  v0:= v0 ^& v4 @kind int;
  #L19d328.  v6.`org.greenrobot.essentials.hash.Murmur3A.d` @type ^`int` := v0;
  #L19d32c.  v6.`org.greenrobot.essentials.hash.Murmur3A.e` @type ^`int` := v3;
  #L19d330.  v0:= v6.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int`;
  #L19d334.  v7:= length @variable v7;
  #L19d336.  v7:= v7 * 2;
  #L19d33a.  v0:= v0 + v7 @kind int;
  #L19d33c.  v6.`org.greenrobot.essentials.hash.Murmur3A.c` @type ^`int` := v0;
  #L19d340.  goto L19d358;
  #L19d342.  v0:= length @variable v7;
  #L19d344.  if v1 >= v0 then goto L19d358;
  #L19d348.  v2:= v7[v1] @kind short;
  #L19d34c.  call `updateShort`(v6, v2) @signature `Lorg/greenrobot/essentials/hash/Murmur3A;.updateShort:(S)V` @kind virtual;
  #L19d352.  v1:= v1 + 1;
  #L19d356.  goto L19d344;
  #L19d358.  return @kind void;
}
