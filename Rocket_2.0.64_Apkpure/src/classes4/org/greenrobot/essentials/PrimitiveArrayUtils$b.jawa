record `org.greenrobot.essentials.PrimitiveArrayUtils$b` @kind class @AccessFlag  extends `org.greenrobot.essentials.PrimitiveArrayUtils` @kind class {
}
procedure `void` `<init>`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v0 @kind this) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L19a978.  call `<init>`(v0) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils;.<init>:()V` @kind direct;
  #L19a97e.  return @kind void;
}
procedure `void` `<init>`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v0 @kind this, `org.greenrobot.essentials.PrimitiveArrayUtils$a` v1 @kind object) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.<init>:(Lorg/greenrobot/essentials/PrimitiveArrayUtils$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L19a990.  call `<init>`(v0) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.<init>:()V` @kind direct;
  #L19a996.  return @kind void;
}
procedure `int` `getIntBE`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.getIntBE:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a760.  v0:= v4 + 3;
  #L19a764.  v0:= v3[v0] @kind byte;
  #L19a768.  v0:= v0 ^& 255;
  #L19a76c.  v1:= v4 + 2;
  #L19a770.  v1:= v3[v1] @kind byte;
  #L19a774.  v1:= v1 ^& 255;
  #L19a778.  v1:= v1 ^< 8;
  #L19a77c.  v0:= v0 ^| v1 @kind int;
  #L19a77e.  v1:= v4 + 1;
  #L19a782.  v1:= v3[v1] @kind byte;
  #L19a786.  v1:= v1 ^& 255;
  #L19a78a.  v1:= v1 ^< 16;
  #L19a78e.  v0:= v0 ^| v1 @kind int;
  #L19a790.  v3:= v3[v4] @kind byte;
  #L19a794.  v3:= v3 ^< 24;
  #L19a798.  v3:= v3 ^| v0 @kind int;
  #L19a79a.  return v3;
}
procedure `int` `getIntLE`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.getIntLE:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a7ac.  v0:= v3[v4] @kind byte;
  #L19a7b0.  v0:= v0 ^& 255;
  #L19a7b4.  v1:= v4 + 1;
  #L19a7b8.  v1:= v3[v1] @kind byte;
  #L19a7bc.  v1:= v1 ^& 255;
  #L19a7c0.  v1:= v1 ^< 8;
  #L19a7c4.  v0:= v0 ^| v1 @kind int;
  #L19a7c6.  v1:= v4 + 2;
  #L19a7ca.  v1:= v3[v1] @kind byte;
  #L19a7ce.  v1:= v1 ^& 255;
  #L19a7d2.  v1:= v1 ^< 16;
  #L19a7d6.  v0:= v0 ^| v1 @kind int;
  #L19a7d8.  v4:= v4 + 3;
  #L19a7dc.  v3:= v3[v4] @kind byte;
  #L19a7e0.  v3:= v3 ^< 24;
  #L19a7e4.  v3:= v3 ^| v0 @kind int;
  #L19a7e6.  return v3;
}
procedure `int` `getIntLE`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v2 @kind this, `char`[] v3 @kind object, `int` v4 ) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.getIntLE:([CI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a7f8.  v0:= v3[v4] @kind char;
  #L19a7fc.  v1:= 65535I;
  #L19a802.  v0:= v0 ^& v1 @kind int;
  #L19a804.  v4:= v4 + 1;
  #L19a808.  v3:= v3[v4] @kind char;
  #L19a80c.  v3:= v3 ^& v1 @kind int;
  #L19a80e.  v3:= v3 ^< 16;
  #L19a812.  v3:= v3 ^| v0 @kind int;
  #L19a814.  return v3;
}
procedure `long` `getLongBE`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.getLongBE:([BI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L19a828.  v0:= v9 + 7;
  #L19a82c.  v0:= v8[v0] @kind byte;
  #L19a830.  v0:= v0 ^& 255;
  #L19a834.  v1:= v9 + 6;
  #L19a838.  v1:= v8[v1] @kind byte;
  #L19a83c.  v1:= v1 ^& 255;
  #L19a840.  v1:= v1 ^< 8;
  #L19a844.  v0:= v0 ^| v1 @kind int;
  #L19a846.  v1:= v9 + 5;
  #L19a84a.  v1:= v8[v1] @kind byte;
  #L19a84e.  v1:= v1 ^& 255;
  #L19a852.  v1:= v1 ^< 16;
  #L19a856.  v0:= v0 ^| v1 @kind int;
  #L19a858.  v0:= (`long`) v0 @kind i2l;
  #L19a85a.  v2:= v9 + 4;
  #L19a85e.  v2:= v8[v2] @kind byte;
  #L19a862.  v2:= (`long`) v2 @kind i2l;
  #L19a864.  v4:= 255L;
  #L19a868.  v2:= v2 ^& v4 @kind long;
  #L19a86a.  v6:= 24I;
  #L19a86e.  v2:= v2 ^< v6 @kind long;
  #L19a870.  v0:= v0 ^| v2 @kind long;
  #L19a872.  v2:= v9 + 3;
  #L19a876.  v2:= v8[v2] @kind byte;
  #L19a87a.  v2:= (`long`) v2 @kind i2l;
  #L19a87c.  v2:= v2 ^& v4 @kind long;
  #L19a87e.  v6:= 32I;
  #L19a882.  v2:= v2 ^< v6 @kind long;
  #L19a884.  v0:= v0 ^| v2 @kind long;
  #L19a886.  v2:= v9 + 2;
  #L19a88a.  v2:= v8[v2] @kind byte;
  #L19a88e.  v2:= (`long`) v2 @kind i2l;
  #L19a890.  v2:= v2 ^& v4 @kind long;
  #L19a892.  v6:= 40I;
  #L19a896.  v2:= v2 ^< v6 @kind long;
  #L19a898.  v0:= v0 ^| v2 @kind long;
  #L19a89a.  v2:= v9 + 1;
  #L19a89e.  v2:= v8[v2] @kind byte;
  #L19a8a2.  v2:= (`long`) v2 @kind i2l;
  #L19a8a4.  v2:= v2 ^& v4 @kind long;
  #L19a8a6.  v4:= 48I;
  #L19a8aa.  v2:= v2 ^< v4 @kind long;
  #L19a8ac.  v0:= v0 ^| v2 @kind long;
  #L19a8ae.  v8:= v8[v9] @kind byte;
  #L19a8b2.  v8:= (`long`) v8 @kind i2l;
  #L19a8b4.  v2:= 56I;
  #L19a8b8.  v8:= v8 ^< v2 @kind long;
  #L19a8ba.  v8:= v8 ^| v0 @kind long;
  #L19a8bc.  return v8 @kind wide;
}
procedure `long` `getLongLE`(`org.greenrobot.essentials.PrimitiveArrayUtils$b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/greenrobot/essentials/PrimitiveArrayUtils$b;.getLongLE:([BI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L19a8d0.  v0:= v8[v9] @kind byte;
  #L19a8d4.  v0:= v0 ^& 255;
  #L19a8d8.  v1:= v9 + 1;
  #L19a8dc.  v1:= v8[v1] @kind byte;
  #L19a8e0.  v1:= v1 ^& 255;
  #L19a8e4.  v1:= v1 ^< 8;
  #L19a8e8.  v0:= v0 ^| v1 @kind int;
  #L19a8ea.  v1:= v9 + 2;
  #L19a8ee.  v1:= v8[v1] @kind byte;
  #L19a8f2.  v1:= v1 ^& 255;
  #L19a8f6.  v1:= v1 ^< 16;
  #L19a8fa.  v0:= v0 ^| v1 @kind int;
  #L19a8fc.  v0:= (`long`) v0 @kind i2l;
  #L19a8fe.  v2:= v9 + 3;
  #L19a902.  v2:= v8[v2] @kind byte;
  #L19a906.  v2:= (`long`) v2 @kind i2l;
  #L19a908.  v4:= 255L;
  #L19a90c.  v2:= v2 ^& v4 @kind long;
  #L19a90e.  v6:= 24I;
  #L19a912.  v2:= v2 ^< v6 @kind long;
  #L19a914.  v0:= v0 ^| v2 @kind long;
  #L19a916.  v2:= v9 + 4;
  #L19a91a.  v2:= v8[v2] @kind byte;
  #L19a91e.  v2:= (`long`) v2 @kind i2l;
  #L19a920.  v2:= v2 ^& v4 @kind long;
  #L19a922.  v6:= 32I;
  #L19a926.  v2:= v2 ^< v6 @kind long;
  #L19a928.  v0:= v0 ^| v2 @kind long;
  #L19a92a.  v2:= v9 + 5;
  #L19a92e.  v2:= v8[v2] @kind byte;
  #L19a932.  v2:= (`long`) v2 @kind i2l;
  #L19a934.  v2:= v2 ^& v4 @kind long;
  #L19a936.  v6:= 40I;
  #L19a93a.  v2:= v2 ^< v6 @kind long;
  #L19a93c.  v0:= v0 ^| v2 @kind long;
  #L19a93e.  v2:= v9 + 6;
  #L19a942.  v2:= v8[v2] @kind byte;
  #L19a946.  v2:= (`long`) v2 @kind i2l;
  #L19a948.  v2:= v2 ^& v4 @kind long;
  #L19a94a.  v4:= 48I;
  #L19a94e.  v2:= v2 ^< v4 @kind long;
  #L19a950.  v0:= v0 ^| v2 @kind long;
  #L19a952.  v9:= v9 + 7;
  #L19a956.  v8:= v8[v9] @kind byte;
  #L19a95a.  v8:= (`long`) v8 @kind i2l;
  #L19a95c.  v2:= 56I;
  #L19a960.  v8:= v8 ^< v2 @kind long;
  #L19a962.  v8:= v8 ^| v0 @kind long;
  #L19a964.  return v8 @kind wide;
}
