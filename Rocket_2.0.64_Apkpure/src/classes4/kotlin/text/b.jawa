record `kotlin.text.b` @kind class @AccessFlag  extends `kotlin.text.a` @kind class {
}
procedure `void` `<init>`(`kotlin.text.b` v0 @kind this) @signature `Lkotlin/text/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0dbc58.  call `<init>`(v0) @signature `Lkotlin/text/a;.<init>:()V` @kind direct;
  #L0dbc5e.  return @kind void;
}
procedure `char` `digitToChar`(`int` v3 ) @signature `Lkotlin/text/b;.digitToChar:(I)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0db9c8.  v0:= new `kotlin.ranges.IntRange`;
  #L0db9cc.  v1:= 0I;
  #L0db9ce.  v2:= 9I;
  #L0db9d2.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0db9d8.  call temp:= `contains`(v0, v3) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0db9de.  v0:= temp;
  #L0db9e0.  if v0 == 0 then goto L0db9ec;
  #L0db9e4.  v3:= v3 + 48;
  #L0db9e8.  v3:= (`char`) v3 @kind i2c;
  #L0db9ea.  return v3;
  #L0db9ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L0db9f0.  v1:= new `java.lang.StringBuilder`;
  #L0db9f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0db9fa.  v2:= "Int " @kind object;
  #L0db9fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba04.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba0a.  v3:= " is not a decimal digit" @kind object;
  #L0dba0e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0dba1a.  v3:= temp @kind object;
  #L0dba1c.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0dba22.  throw v0;
}
procedure `char` `digitToChar`(`int` v3 , `int` v4 ) @signature `Lkotlin/text/b;.digitToChar:(II)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0dba34.  v0:= new `kotlin.ranges.IntRange`;
  #L0dba38.  v1:= 2I;
  #L0dba3a.  v2:= 36I;
  #L0dba3e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0dba44.  call temp:= `contains`(v0, v4) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0dba4a.  v0:= temp;
  #L0dba4c.  if v0 == 0 then goto L0dbab0;
  #L0dba50.  if v3 < 0 then goto L0dba72;
  #L0dba54.  if v3 >= v4 then goto L0dba72;
  #L0dba58.  v4:= 10I;
  #L0dba5c.  if v3 >= v4 then goto L0dba66;
  #L0dba60.  v3:= v3 + 48;
  #L0dba64.  goto L0dba6e;
  #L0dba66.  v3:= v3 + 65;
  #L0dba6a.  v3:= (`char`) v3 @kind i2c;
  #L0dba6c.  v3:= v3 - v4 @kind int;
  #L0dba6e.  v3:= (`char`) v3 @kind i2c;
  #L0dba70.  return v3;
  #L0dba72.  v0:= new `java.lang.IllegalArgumentException`;
  #L0dba76.  v1:= new `java.lang.StringBuilder`;
  #L0dba7a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0dba80.  v2:= "Digit " @kind object;
  #L0dba84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba8a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba90.  v3:= " does not represent a valid digit in radix " @kind object;
  #L0dba94.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dba9a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbaa0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0dbaa6.  v3:= temp @kind object;
  #L0dbaa8.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0dbaae.  throw v0;
  #L0dbab0.  v3:= new `java.lang.IllegalArgumentException`;
  #L0dbab4.  v0:= new `java.lang.StringBuilder`;
  #L0dbab8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0dbabe.  v1:= "Invalid radix: " @kind object;
  #L0dbac2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbac8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbace.  v4:= ". Valid radix values are in range 2..36" @kind object;
  #L0dbad2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbad8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0dbade.  v4:= temp @kind object;
  #L0dbae0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0dbae6.  throw v3;
}
procedure `int` `digitToInt`(`char` v3 ) @signature `Lkotlin/text/b;.digitToInt:(C)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0dbaf8.  v0:= 10I;
  #L0dbafc.  call temp:= `digitOf`(v3, v0) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L0dbb02.  v0:= temp;
  #L0dbb04.  if v0 < 0 then goto L0dbb0a;
  #L0dbb08.  return v0;
  #L0dbb0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L0dbb0e.  v1:= new `java.lang.StringBuilder`;
  #L0dbb12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0dbb18.  v2:= "Char " @kind object;
  #L0dbb1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb22.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb28.  v3:= " is not a decimal digit" @kind object;
  #L0dbb2c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb32.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0dbb38.  v3:= temp @kind object;
  #L0dbb3a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0dbb40.  throw v0;
}
procedure `int` `digitToInt`(`char` v3 , `int` v4 ) @signature `Lkotlin/text/b;.digitToInt:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0dbb54.  call temp:= `digitToIntOrNull`(v3, v4) @signature `Lkotlin/text/b;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @kind static;
  #L0dbb5a.  v0:= temp @kind object;
  #L0dbb5c.  if v0 == 0 then goto L0dbb6a;
  #L0dbb60.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L0dbb66.  v3:= temp;
  #L0dbb68.  return v3;
  #L0dbb6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L0dbb6e.  v1:= new `java.lang.StringBuilder`;
  #L0dbb72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0dbb78.  v2:= "Char " @kind object;
  #L0dbb7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb82.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb88.  v3:= " is not a digit in the given radix=" @kind object;
  #L0dbb8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb92.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0dbb98.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0dbb9e.  v3:= temp @kind object;
  #L0dbba0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0dbba6.  throw v0;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v1 ) @signature `Lkotlin/text/b;.digitToIntOrNull:(C)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0dbbb8.  v0:= 10I;
  #L0dbbbc.  call temp:= `digitOf`(v1, v0) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L0dbbc2.  v1:= temp;
  #L0dbbc4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0dbbca.  v1:= temp @kind object;
  #L0dbbcc.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0dbbd2.  v0:= temp;
  #L0dbbd4.  if v0 < 0 then goto L0dbbdc;
  #L0dbbd8.  v0:= 1I;
  #L0dbbda.  goto L0dbbde;
  #L0dbbdc.  v0:= 0I;
  #L0dbbde.  if v0 == 0 then goto L0dbbe4;
  #L0dbbe2.  goto L0dbbe6;
  #L0dbbe4.  v1:= 0I;
  #L0dbbe6.  return v1 @kind object;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/b;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0dbbf8.  call temp:= `checkRadix`(v1) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L0dbbfe.  call temp:= `digitOf`(v0, v1) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L0dbc04.  v0:= temp;
  #L0dbc06.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0dbc0c.  v0:= temp @kind object;
  #L0dbc0e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0dbc14.  v1:= temp;
  #L0dbc16.  if v1 < 0 then goto L0dbc1e;
  #L0dbc1a.  v1:= 1I;
  #L0dbc1c.  goto L0dbc20;
  #L0dbc1e.  v1:= 0I;
  #L0dbc20.  if v1 == 0 then goto L0dbc26;
  #L0dbc24.  goto L0dbc28;
  #L0dbc26.  v0:= 0I;
  #L0dbc28.  return v0 @kind object;
}
procedure `boolean` `equals`(`char` v2 , `char` v3 , `boolean` v4 ) @signature `Lkotlin/text/b;.equals:(CCZ)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0db948.  v0:= 1I;
  #L0db94a.  if v2 != v3 then goto L0db950;
  #L0db94e.  return v0;
  #L0db950.  v1:= 0I;
  #L0db952.  if v4 != 0 then goto L0db958;
  #L0db956.  return v1;
  #L0db958.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L0db95e.  v2:= temp;
  #L0db960.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L0db966.  v3:= temp;
  #L0db968.  if v2 == v3 then goto L0db984;
  #L0db96c.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L0db972.  v2:= temp;
  #L0db974.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L0db97a.  v3:= temp;
  #L0db97c.  if v2 != v3 then goto L0db982;
  #L0db980.  goto L0db984;
  #L0db982.  v0:= 0I;
  #L0db984.  return v0;
}
procedure `boolean` `equals$default`(`char` v0 , `char` v1 , `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/text/b;.equals$default:(CCZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0db924.  v3:= v3 ^& 2;
  #L0db928.  if v3 == 0 then goto L0db92e;
  #L0db92c.  v2:= 0I;
  #L0db92e.  call temp:= `equals`(v0, v1, v2) @signature `Lkotlin/text/b;.equals:(CCZ)Z` @kind static;
  #L0db934.  v0:= temp;
  #L0db936.  return v0;
}
procedure `boolean` `isSurrogate`(`char` v3 ) @signature `Lkotlin/text/b;.isSurrogate:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0db998.  v0:= new `kotlin.ranges.CharRange`;
  #L0db99c.  v1:= 55296I;
  #L0db9a2.  v2:= 57343I;
  #L0db9a8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @kind direct;
  #L0db9ae.  call temp:= `contains`(v0, v3) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @kind virtual;
  #L0db9b4.  v3:= temp;
  #L0db9b6.  return v3;
}
procedure `java.lang.String` `titlecase`(`char` v0 ) @signature `Lkotlin/text/b;.titlecase:(C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0dbc3c.  call temp:= `titlecaseImpl`(v0) @signature `Lkotlin/text/_OneToManyTitlecaseMappingsKt;.titlecaseImpl:(C)Ljava/lang/String;` @kind static;
  #L0dbc42.  v0:= temp @kind object;
  #L0dbc44.  return v0 @kind object;
}
