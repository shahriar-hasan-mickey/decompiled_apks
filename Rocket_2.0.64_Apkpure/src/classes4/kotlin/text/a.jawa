record `kotlin.text.a` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.text.a` v0 @kind this) @signature `Lkotlin/text/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0db90c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0db912.  return @kind void;
}
procedure `int` `checkRadix`(`int` v5 ) @signature `Lkotlin/text/a;.checkRadix:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0db6c8.  v0:= new `kotlin.ranges.IntRange`;
  #L0db6cc.  v1:= 2I;
  #L0db6ce.  v2:= 36I;
  #L0db6d2.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0db6d8.  call temp:= `contains`(v0, v5) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0db6de.  v0:= temp;
  #L0db6e0.  if v0 == 0 then goto L0db6e6;
  #L0db6e4.  return v5;
  #L0db6e6.  v0:= new `java.lang.IllegalArgumentException`;
  #L0db6ea.  v3:= new `java.lang.StringBuilder`;
  #L0db6ee.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0db6f4.  v4:= "radix " @kind object;
  #L0db6f8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db6fe.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db704.  v5:= " was not in valid range " @kind object;
  #L0db708.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db70e.  v5:= new `kotlin.ranges.IntRange`;
  #L0db712.  call `<init>`(v5, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0db718.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db71e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0db724.  v5:= temp @kind object;
  #L0db726.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0db72c.  throw v0;
}
procedure `int` `digitOf`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/a;.digitOf:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0db740.  call temp:= `digit`(v0, v1) @signature `Ljava/lang/Character;.digit:(II)I` @kind static;
  #L0db746.  v0:= temp;
  #L0db748.  return v0;
}
procedure `kotlin.text.CharCategory` `getCategory`(`char` v1 ) @signature `Lkotlin/text/a;.getCategory:(C)Lkotlin/text/CharCategory;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0db8bc.  v0:= `@@kotlin.text.CharCategory.Companion` @type ^`kotlin.text.CharCategory$Companion` @kind object;
  #L0db8c0.  call temp:= `getType`(v1) @signature `Ljava/lang/Character;.getType:(C)I` @kind static;
  #L0db8c6.  v1:= temp;
  #L0db8c8.  call temp:= `valueOf`(v0, v1) @signature `Lkotlin/text/CharCategory$Companion;.valueOf:(I)Lkotlin/text/CharCategory;` @kind virtual;
  #L0db8ce.  v1:= temp @kind object;
  #L0db8d0.  return v1 @kind object;
}
procedure `kotlin.text.CharDirectionality` `getDirectionality`(`char` v1 ) @signature `Lkotlin/text/a;.getDirectionality:(C)Lkotlin/text/CharDirectionality;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0db8e4.  v0:= `@@kotlin.text.CharDirectionality.Companion` @type ^`kotlin.text.CharDirectionality$Companion` @kind object;
  #L0db8e8.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L0db8ee.  v1:= temp;
  #L0db8f0.  call temp:= `valueOf`(v0, v1) @signature `Lkotlin/text/CharDirectionality$Companion;.valueOf:(I)Lkotlin/text/CharDirectionality;` @kind virtual;
  #L0db8f6.  v1:= temp @kind object;
  #L0db8f8.  return v1 @kind object;
}
procedure `boolean` `isWhitespace`(`char` v1 ) @signature `Lkotlin/text/a;.isWhitespace:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0db694.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L0db69a.  v0:= temp;
  #L0db69c.  if v0 != 0 then goto L0db6b2;
  #L0db6a0.  call temp:= `isSpaceChar`(v1) @signature `Ljava/lang/Character;.isSpaceChar:(C)Z` @kind static;
  #L0db6a6.  v1:= temp;
  #L0db6a8.  if v1 == 0 then goto L0db6ae;
  #L0db6ac.  goto L0db6b2;
  #L0db6ae.  v1:= 0I;
  #L0db6b0.  goto L0db6b4;
  #L0db6b2.  v1:= 1I;
  #L0db6b4.  return v1;
}
procedure `java.lang.String` `lowercase`(`char` v1 , `java.util.Locale` v2 @kind object) @signature `Lkotlin/text/a;.lowercase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0db75c.  v0:= "locale" @kind object;
  #L0db760.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db766.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L0db76c.  v1:= temp @kind object;
  #L0db76e.  v0:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L0db772.  call `checkNotNull`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db778.  call temp:= `toLowerCase`(v1, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L0db77e.  v1:= temp @kind object;
  #L0db780.  v2:= "this as java.lang.String).toLowerCase(locale)" @kind object;
  #L0db784.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db78a.  return v1 @kind object;
}
procedure `java.lang.String` `titlecase`(`char` v3 , `java.util.Locale` v4 @kind object) @signature `Lkotlin/text/a;.titlecase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0db79c.  v0:= "locale" @kind object;
  #L0db7a0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db7a6.  call temp:= `uppercase`(v3, v4) @signature `Lkotlin/text/a;.uppercase:(CLjava/util/Locale;)Ljava/lang/String;` @kind static;
  #L0db7ac.  v4:= temp @kind object;
  #L0db7ae.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0db7b4.  v0:= temp;
  #L0db7b6.  v1:= 1I;
  #L0db7b8.  v2:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L0db7bc.  if v0 <= v1 then goto L0db828;
  #L0db7c0.  v0:= 329I;
  #L0db7c4.  if v3 != v0 then goto L0db7ca;
  #L0db7c8.  goto L0db826;
  #L0db7ca.  v3:= 0I;
  #L0db7cc.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L0db7d2.  v3:= temp;
  #L0db7d4.  call `checkNotNull`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db7da.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L0db7e0.  v4:= temp @kind object;
  #L0db7e2.  v0:= "this as java.lang.String).substring(startIndex)" @kind object;
  #L0db7e6.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db7ec.  call `checkNotNull`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db7f2.  v0:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L0db7f6.  call temp:= `toLowerCase`(v4, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L0db7fc.  v4:= temp @kind object;
  #L0db7fe.  v0:= "this as java.lang.String).toLowerCase(Locale.ROOT)" @kind object;
  #L0db802.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db808.  v0:= new `java.lang.StringBuilder`;
  #L0db80c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0db812.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db818.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0db81e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0db824.  v4:= temp @kind object;
  #L0db826.  return v4 @kind object;
  #L0db828.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L0db82e.  v0:= temp @kind object;
  #L0db830.  call `checkNotNull`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db836.  v1:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L0db83a.  call temp:= `toUpperCase`(v0, v1) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L0db840.  v0:= temp @kind object;
  #L0db842.  v1:= "this as java.lang.String).toUpperCase(Locale.ROOT)" @kind object;
  #L0db846.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db84c.  call temp:= `areEqual`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0db852.  v0:= temp;
  #L0db854.  if v0 != 0 then goto L0db85a;
  #L0db858.  return v4 @kind object;
  #L0db85a.  call temp:= `toTitleCase`(v3) @signature `Ljava/lang/Character;.toTitleCase:(C)C` @kind static;
  #L0db860.  v3:= temp;
  #L0db862.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L0db868.  v3:= temp @kind object;
  #L0db86a.  return v3 @kind object;
}
procedure `java.lang.String` `uppercase`(`char` v1 , `java.util.Locale` v2 @kind object) @signature `Lkotlin/text/a;.uppercase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0db87c.  v0:= "locale" @kind object;
  #L0db880.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db886.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L0db88c.  v1:= temp @kind object;
  #L0db88e.  v0:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L0db892.  call `checkNotNull`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db898.  call temp:= `toUpperCase`(v1, v2) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L0db89e.  v1:= temp @kind object;
  #L0db8a0.  v2:= "this as java.lang.String).toUpperCase(locale)" @kind object;
  #L0db8a4.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0db8aa.  return v1 @kind object;
}
