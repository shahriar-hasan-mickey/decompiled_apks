record `kotlin.collections.ArrayDeque` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableList` @kind class {
  `int` `kotlin.collections.ArrayDeque.a` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.collections.ArrayDeque.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.ArrayDeque.c` @AccessFlag PRIVATE;
}
global `kotlin.collections.ArrayDeque$Companion` `@@kotlin.collections.ArrayDeque.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Object`[] `@@kotlin.collections.ArrayDeque.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/ArrayDeque;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0802f4.  v0:= new `kotlin.collections.ArrayDeque$Companion`;
  #L0802f8.  v1:= 0I;
  #L0802fa.  call `<init>`(v0, v1) @signature `Lkotlin/collections/ArrayDeque$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L080300.  `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` := v0 @kind object;
  #L080304.  v0:= 0I;
  #L080306.  v0:= new `java.lang.Object`[v0];
  #L08030a.  `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L08030e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L080320.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L080326.  v0:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L08032a.  v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L08032e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v3 @kind this, `int` v4 ) @signature `Lkotlin/collections/ArrayDeque;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L080340.  call `<init>`(v3) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L080346.  if v4 != 0 then goto L080350;
  #L08034a.  v4:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L08034e.  goto L080358;
  #L080350.  if v4 <= 0 then goto L08035e;
  #L080354.  v4:= new `java.lang.Object`[v4];
  #L080358.  v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v4 @kind object;
  #L08035c.  return @kind void;
  #L08035e.  v0:= new `java.lang.IllegalArgumentException`;
  #L080362.  v1:= new `java.lang.StringBuilder`;
  #L080366.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08036c.  v2:= "Illegal Capacity: " @kind object;
  #L080370.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080376.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08037c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080382.  v4:= temp @kind object;
  #L080384.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08038a.  throw v0;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08039c.  v0:= "elements" @kind object;
  #L0803a0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0803a6.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L0803ac.  v0:= 0I;
  #L0803ae.  v1:= new `java.lang.Object`[v0];
  #L0803b2.  call temp:= `toArray`(v3, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L0803b8.  v3:= temp @kind object;
  #L0803ba.  v1:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>" @kind object;
  #L0803be.  call `checkNotNull`(v3, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0803c4.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L0803c8.  v1:= length @variable v3;
  #L0803ca.  v2.`kotlin.collections.ArrayDeque.c` @type ^`int` := v1;
  #L0803ce.  v3:= length @variable v3;
  #L0803d0.  if v3 != 0 then goto L0803d6;
  #L0803d4.  v0:= 1I;
  #L0803d6.  if v0 == 0 then goto L0803e2;
  #L0803da.  v3:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L0803de.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L0803e2.  return @kind void;
}
procedure `void` `b`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 , `java.util.Collection` v6 @kind object) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080658.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08065e.  v0:= temp @kind object;
  #L080660.  v1:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080664.  v1:= length @variable v1;
  #L080666.  if v5 >= v1 then goto L08068c;
  #L08066a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L080670.  v2:= temp;
  #L080672.  if v2 == 0 then goto L08068c;
  #L080676.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08067a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L080680.  v3:= temp @kind object;
  #L080682.  v2[v5]:= v3 @kind object;
  #L080686.  v5:= v5 + 1;
  #L08068a.  goto L080666;
  #L08068c.  v5:= 0I;
  #L08068e.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080692.  if v5 >= v1 then goto L0806b8;
  #L080696.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08069c.  v2:= temp;
  #L08069e.  if v2 == 0 then goto L0806b8;
  #L0806a2.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0806a6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0806ac.  v3:= temp @kind object;
  #L0806ae.  v2[v5]:= v3 @kind object;
  #L0806b2.  v5:= v5 + 1;
  #L0806b6.  goto L080692;
  #L0806b8.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0806be.  v5:= temp;
  #L0806c0.  call temp:= `size`(v6) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L0806c6.  v6:= temp;
  #L0806c8.  v5:= v5 + v6 @kind int;
  #L0806ca.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v5;
  #L0806ce.  return @kind void;
}
procedure `void` `c`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 ) @signature `Lkotlin/collections/ArrayDeque;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0806e0.  v5:= new `java.lang.Object`[v5];
  #L0806e4.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0806e8.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0806ec.  v2:= length @variable v0;
  #L0806ee.  v3:= 0I;
  #L0806f0.  call temp:= `copyInto`(v0, v5, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0806f6.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0806fa.  v1:= length @variable v0;
  #L0806fc.  v2:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080700.  v1:= v1 - v2 @kind int;
  #L080702.  call temp:= `copyInto`(v0, v5, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L080708.  v4.`kotlin.collections.ArrayDeque.a` @type ^`int` := v3;
  #L08070c.  v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v5 @kind object;
  #L080710.  return @kind void;
}
procedure `int` `d`(`kotlin.collections.ArrayDeque` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;

  #L07fbcc.  if v1 != 0 then goto L07fbde;
  #L07fbd0.  v1:= v0.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fbd4.  call temp:= `getLastIndex`(v1) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L07fbda.  v1:= temp;
  #L07fbdc.  goto L07fbe2;
  #L07fbde.  v1:= v1 + -1;
  #L07fbe2.  return v1;
}
procedure `void` `e`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L080724.  if v3 < 0 then goto L080768;
  #L080728.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08072c.  v1:= length @variable v0;
  #L08072e.  if v3 > v1 then goto L080734;
  #L080732.  return @kind void;
  #L080734.  v1:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L080738.  if v0 != v1 then goto L080752;
  #L08073c.  v0:= 10I;
  #L080740.  call temp:= `coerceAtLeast`(v3, v0) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L080746.  v3:= temp;
  #L080748.  v3:= new `java.lang.Object`[v3];
  #L08074c.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L080750.  return @kind void;
  #L080752.  v1:= `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` @kind object;
  #L080756.  v0:= length @variable v0;
  #L080758.  call temp:= `newCapacity$kotlin_stdlib`(v1, v0, v3) @signature `Lkotlin/collections/ArrayDeque$Companion;.newCapacity$kotlin_stdlib:(II)I` @kind virtual;
  #L08075e.  v3:= temp;
  #L080760.  call `c`(v2, v3) @signature `Lkotlin/collections/ArrayDeque;.c:(I)V` @kind direct;
  #L080766.  return @kind void;
  #L080768.  v3:= new `java.lang.IllegalStateException`;
  #L08076c.  v0:= "Deque is too big." @kind object;
  #L080770.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080776.  throw v3;
}
procedure `int` `f`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L07fc0c.  v0:= v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fc10.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L07fc16.  v0:= temp;
  #L07fc18.  if v2 != v0 then goto L07fc20;
  #L07fc1c.  v2:= 0I;
  #L07fc1e.  goto L07fc24;
  #L07fc20.  v2:= v2 + 1;
  #L07fc24.  return v2;
}
procedure `int` `g`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L07fdb8.  if v2 >= 0 then goto L07fdc4;
  #L07fdbc.  v0:= v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fdc0.  v0:= length @variable v0;
  #L07fdc2.  v2:= v2 + v0 @kind int;
  #L07fdc4.  return v2;
}
procedure `int` `h`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L07fdd8.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fddc.  v1:= length @variable v0;
  #L07fdde.  if v3 < v1 then goto L07fde6;
  #L07fde2.  v0:= length @variable v0;
  #L07fde4.  v3:= v3 - v0 @kind int;
  #L07fde6.  return v3;
}
procedure `void` `add`(`kotlin.collections.ArrayDeque` v7 @kind this, `int` v8 , `java.lang.Object` v9 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0803f4.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L0803f8.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0803fe.  v1:= temp;
  #L080400.  call `checkPositionIndex$kotlin_stdlib`(v0, v8, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L080406.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08040c.  v0:= temp;
  #L08040e.  if v8 != v0 then goto L08041a;
  #L080412.  call `addLast`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L080418.  return @kind void;
  #L08041a.  if v8 != 0 then goto L080426;
  #L08041e.  call `addFirst`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L080424.  return @kind void;
  #L080426.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08042c.  v0:= temp;
  #L08042e.  v1:= 1I;
  #L080430.  v0:= v0 + v1 @kind int;
  #L080432.  call `e`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L080438.  v0:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L08043c.  v0:= v0 + v8 @kind int;
  #L08043e.  call temp:= `h`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L080444.  v0:= temp;
  #L080446.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08044c.  v2:= temp;
  #L08044e.  v2:= v2 + v1 @kind int;
  #L080450.  v2:= v2 ^> v1 @kind int;
  #L080452.  v3:= 0I;
  #L080454.  if v8 >= v2 then goto L0804c8;
  #L080458.  call temp:= `d`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L08045e.  v8:= temp;
  #L080460.  v0:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080464.  call temp:= `d`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L08046a.  v0:= temp;
  #L08046c.  v2:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080470.  if v8 < v2 then goto L080490;
  #L080474.  v3:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080478.  v4:= v3[v2] @kind object;
  #L08047c.  v3[v0]:= v4 @kind object;
  #L080480.  v4:= v2 + 1;
  #L080484.  v5:= v8 + 1;
  #L080488.  call temp:= `copyInto`(v3, v3, v2, v4, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L08048e.  goto L0804ba;
  #L080490.  v4:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080494.  v5:= v2 + -1;
  #L080498.  v6:= length @variable v4;
  #L08049a.  call temp:= `copyInto`(v4, v4, v5, v2, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0804a0.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0804a4.  v4:= length @variable v2;
  #L0804a6.  v4:= v4 - v1 @kind int;
  #L0804a8.  v5:= v2[v3] @kind object;
  #L0804ac.  v2[v4]:= v5 @kind object;
  #L0804b0.  v4:= v8 + 1;
  #L0804b4.  call temp:= `copyInto`(v2, v2, v3, v1, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0804ba.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0804be.  v2[v8]:= v9 @kind object;
  #L0804c2.  v7.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L0804c6.  goto L080522;
  #L0804c8.  v8:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0804cc.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0804d2.  v2:= temp;
  #L0804d4.  v8:= v8 + v2 @kind int;
  #L0804d6.  call temp:= `h`(v7, v8) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L0804dc.  v8:= temp;
  #L0804de.  if v0 >= v8 then goto L0804f2;
  #L0804e2.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0804e6.  v3:= v0 + 1;
  #L0804ea.  call temp:= `copyInto`(v2, v2, v3, v0, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0804f0.  goto L08051a;
  #L0804f2.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0804f6.  call temp:= `copyInto`(v2, v2, v1, v3, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0804fc.  v8:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080500.  v2:= length @variable v8;
  #L080502.  v2:= v2 - v1 @kind int;
  #L080504.  v2:= v8[v2] @kind object;
  #L080508.  v8[v3]:= v2 @kind object;
  #L08050c.  v2:= v0 + 1;
  #L080510.  v3:= length @variable v8;
  #L080512.  v3:= v3 - v1 @kind int;
  #L080514.  call temp:= `copyInto`(v8, v8, v2, v0, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L08051a.  v8:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08051e.  v8[v0]:= v9 @kind object;
  #L080522.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L080528.  v8:= temp;
  #L08052a.  v8:= v8 + v1 @kind int;
  #L08052c.  v7.`kotlin.collections.ArrayDeque.c` @type ^`int` := v8;
  #L080530.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.ArrayDeque` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L07f684.  call `addLast`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L07f68a.  v1:= 1I;
  #L07f68c.  return v1;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 , `java.util.Collection` v10 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07f6a0.  v0:= "elements" @kind object;
  #L07f6a4.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f6aa.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07f6ae.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f6b4.  v1:= temp;
  #L07f6b6.  call `checkPositionIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L07f6bc.  call temp:= `isEmpty`(v10) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07f6c2.  v0:= temp;
  #L07f6c4.  v1:= 0I;
  #L07f6c6.  if v0 == 0 then goto L07f6cc;
  #L07f6ca.  return v1;
  #L07f6cc.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f6d2.  v0:= temp;
  #L07f6d4.  if v9 != v0 then goto L07f6e2;
  #L07f6d8.  call temp:= `addAll`(v8, v10) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L07f6de.  v9:= temp;
  #L07f6e0.  return v9;
  #L07f6e2.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f6e8.  v0:= temp;
  #L07f6ea.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L07f6f0.  v2:= temp;
  #L07f6f2.  v0:= v0 + v2 @kind int;
  #L07f6f4.  call `e`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L07f6fa.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f6fe.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f704.  v2:= temp;
  #L07f706.  v0:= v0 + v2 @kind int;
  #L07f708.  call temp:= `h`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07f70e.  v0:= temp;
  #L07f710.  v2:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f714.  v2:= v2 + v9 @kind int;
  #L07f716.  call temp:= `h`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07f71c.  v2:= temp;
  #L07f71e.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L07f724.  v3:= temp;
  #L07f726.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f72c.  v4:= temp;
  #L07f72e.  v5:= 1I;
  #L07f730.  v4:= v4 + v5 @kind int;
  #L07f732.  v4:= v4 ^> v5 @kind int;
  #L07f734.  if v9 >= v4 then goto L07f7da;
  #L07f738.  v9:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f73c.  v0:= v9 - v3 @kind int;
  #L07f740.  if v2 < v9 then goto L07f78c;
  #L07f744.  if v0 < 0 then goto L07f754;
  #L07f748.  v1:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f74c.  call temp:= `copyInto`(v1, v1, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f752.  goto L07f7c4;
  #L07f754.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f758.  v6:= length @variable v4;
  #L07f75a.  v0:= v0 + v6 @kind int;
  #L07f75c.  v6:= v2 - v9 @kind int;
  #L07f760.  v7:= length @variable v4;
  #L07f762.  v7:= v7 - v0 @kind int;
  #L07f764.  if v7 < v6 then goto L07f770;
  #L07f768.  call temp:= `copyInto`(v4, v4, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f76e.  goto L07f7c4;
  #L07f770.  v6:= v9 + v7 @kind int;
  #L07f774.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f77a.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f77e.  v4:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f782.  v4:= v4 + v7 @kind int;
  #L07f784.  call temp:= `copyInto`(v9, v9, v1, v4, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f78a.  goto L07f7c4;
  #L07f78c.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f790.  v6:= length @variable v4;
  #L07f792.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f798.  if v3 < v2 then goto L07f7ac;
  #L07f79c.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f7a0.  v4:= length @variable v9;
  #L07f7a2.  v4:= v4 - v3 @kind int;
  #L07f7a4.  call temp:= `copyInto`(v9, v9, v4, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f7aa.  goto L07f7c4;
  #L07f7ac.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f7b0.  v4:= length @variable v9;
  #L07f7b2.  v4:= v4 - v3 @kind int;
  #L07f7b4.  call temp:= `copyInto`(v9, v9, v4, v1, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f7ba.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f7be.  call temp:= `copyInto`(v9, v9, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f7c4.  v8.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L07f7c8.  v2:= v2 - v3 @kind int;
  #L07f7ca.  call temp:= `g`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @kind direct;
  #L07f7d0.  v9:= temp;
  #L07f7d2.  call `b`(v8, v9, v10) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L07f7d8.  goto L07f864;
  #L07f7da.  v9:= v2 + v3 @kind int;
  #L07f7de.  if v2 >= v0 then goto L07f822;
  #L07f7e2.  v3:= v3 + v0 @kind int;
  #L07f7e4.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f7e8.  v6:= length @variable v4;
  #L07f7ea.  if v3 > v6 then goto L07f7f6;
  #L07f7ee.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f7f4.  goto L07f85e;
  #L07f7f6.  v6:= length @variable v4;
  #L07f7f8.  if v9 < v6 then goto L07f808;
  #L07f7fc.  v1:= length @variable v4;
  #L07f7fe.  v9:= v9 - v1 @kind int;
  #L07f800.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f806.  goto L07f85e;
  #L07f808.  v6:= length @variable v4;
  #L07f80a.  v3:= v3 - v6 @kind int;
  #L07f80c.  v3:= v0 - v3 @kind int;
  #L07f810.  call temp:= `copyInto`(v4, v4, v1, v3, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f816.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f81a.  call temp:= `copyInto`(v0, v0, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f820.  goto L07f85e;
  #L07f822.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f826.  call temp:= `copyInto`(v4, v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f82c.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f830.  v4:= length @variable v0;
  #L07f832.  if v9 < v4 then goto L07f844;
  #L07f836.  v1:= length @variable v0;
  #L07f838.  v9:= v9 - v1 @kind int;
  #L07f83a.  v1:= length @variable v0;
  #L07f83c.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f842.  goto L07f85e;
  #L07f844.  v4:= length @variable v0;
  #L07f846.  v4:= v4 - v3 @kind int;
  #L07f848.  v6:= length @variable v0;
  #L07f84a.  call temp:= `copyInto`(v0, v0, v1, v4, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f850.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f854.  v1:= length @variable v0;
  #L07f856.  v1:= v1 - v3 @kind int;
  #L07f858.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07f85e.  call `b`(v8, v2, v10) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L07f864.  return v5;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07f878.  v0:= "elements" @kind object;
  #L07f87c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f882.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07f888.  v0:= temp;
  #L07f88a.  if v0 == 0 then goto L07f892;
  #L07f88e.  v3:= 0I;
  #L07f890.  return v3;
  #L07f892.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f898.  v0:= temp;
  #L07f89a.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L07f8a0.  v1:= temp;
  #L07f8a2.  v0:= v0 + v1 @kind int;
  #L07f8a4.  call `e`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L07f8aa.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f8ae.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f8b4.  v1:= temp;
  #L07f8b6.  v0:= v0 + v1 @kind int;
  #L07f8b8.  call temp:= `h`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07f8be.  v0:= temp;
  #L07f8c0.  call `b`(v2, v0, v3) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L07f8c6.  v3:= 1I;
  #L07f8c8.  return v3;
}
procedure `void` `addFirst`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L080544.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08054a.  v0:= temp;
  #L08054c.  v0:= v0 + 1;
  #L080550.  call `e`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L080556.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L08055a.  call temp:= `d`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L080560.  v0:= temp;
  #L080562.  v2.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L080566.  v1:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08056a.  v1[v0]:= v3 @kind object;
  #L08056e.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L080574.  v3:= temp;
  #L080576.  v3:= v3 + 1;
  #L08057a.  v2.`kotlin.collections.ArrayDeque.c` @type ^`int` := v3;
  #L08057e.  return @kind void;
}
procedure `void` `addLast`(`kotlin.collections.ArrayDeque` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L080590.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L080596.  v0:= temp;
  #L080598.  v0:= v0 + 1;
  #L08059c.  call `e`(v3, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L0805a2.  v0:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0805a6.  v1:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0805aa.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0805b0.  v2:= temp;
  #L0805b2.  v1:= v1 + v2 @kind int;
  #L0805b4.  call temp:= `h`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L0805ba.  v1:= temp;
  #L0805bc.  v0[v1]:= v4 @kind object;
  #L0805c0.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0805c6.  v4:= temp;
  #L0805c8.  v4:= v4 + 1;
  #L0805cc.  v3.`kotlin.collections.ArrayDeque.c` @type ^`int` := v4;
  #L0805d0.  return @kind void;
}
procedure `void` `clear`(`kotlin.collections.ArrayDeque` v6 @kind this) @signature `Lkotlin/collections/ArrayDeque;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0805e4.  v0:= v6.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0805e8.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0805ee.  v1:= temp;
  #L0805f0.  v0:= v0 + v1 @kind int;
  #L0805f2.  call temp:= `h`(v6, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L0805f8.  v0:= temp;
  #L0805fa.  v1:= v6.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0805fe.  v2:= 0I;
  #L080600.  v3:= 0I;
  #L080602.  if v1 >= v0 then goto L080612;
  #L080606.  v4:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08060a.  call `fill`(v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L080610.  goto L08063c;
  #L080612.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L080618.  v1:= temp;
  #L08061a.  v1:= v1 ^~ 1;
  #L08061e.  if v1 == 0 then goto L08063c;
  #L080622.  v1:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080626.  v4:= v6.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L08062a.  v5:= length @variable v1;
  #L08062c.  call `fill`(v1, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L080632.  v1:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080636.  call `fill`(v1, v3, v2, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L08063c.  v6.`kotlin.collections.ArrayDeque.a` @type ^`int` := v2;
  #L080640.  v6.`kotlin.collections.ArrayDeque.c` @type ^`int` := v2;
  #L080644.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f8dc.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L07f8e2.  v2:= temp;
  #L07f8e4.  v0:= -1I;
  #L07f8e6.  if v2 == v0 then goto L07f8ee;
  #L07f8ea.  v2:= 1I;
  #L07f8ec.  goto L07f8f0;
  #L07f8ee.  v2:= 0I;
  #L07f8f0.  return v2;
}
procedure `java.lang.Object` `first`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L07fdf8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07fdfe.  v0:= temp;
  #L07fe00.  if v0 != 0 then goto L07fe12;
  #L07fe04.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fe08.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fe0c.  v0:= v0[v1] @kind object;
  #L07fe10.  return v0 @kind object;
  #L07fe12.  v0:= new `java.util.NoSuchElementException`;
  #L07fe16.  v1:= "ArrayDeque is empty." @kind object;
  #L07fe1a.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fe20.  throw v0;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.firstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L07fe34.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07fe3a.  v0:= temp;
  #L07fe3c.  if v0 == 0 then goto L07fe44;
  #L07fe40.  v0:= 0I;
  #L07fe42.  goto L07fe50;
  #L07fe44.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fe48.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fe4c.  v0:= v0[v1] @kind object;
  #L07fe50.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fe64.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07fe68.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07fe6e.  v1:= temp;
  #L07fe70.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L07fe76.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fe7a.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fe7e.  v1:= v1 + v3 @kind int;
  #L07fe80.  call temp:= `h`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fe86.  v3:= temp;
  #L07fe88.  v3:= v0[v3] @kind object;
  #L07fe8c.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07fbf4.  v0:= v1.`kotlin.collections.ArrayDeque.c` @type ^`int`;
  #L07fbf8.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.ArrayDeque` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fc38.  v0:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fc3c.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07fc42.  v1:= temp;
  #L07fc44.  v0:= v0 + v1 @kind int;
  #L07fc46.  call temp:= `h`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fc4c.  v0:= temp;
  #L07fc4e.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fc52.  if v1 >= v0 then goto L07fc7c;
  #L07fc56.  if v1 >= v0 then goto L07fcd8;
  #L07fc5a.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fc5e.  v2:= v2[v1] @kind object;
  #L07fc62.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fc68.  v2:= temp;
  #L07fc6a.  if v2 == 0 then goto L07fc76;
  #L07fc6e.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fc72.  v1:= v1 - v5 @kind int;
  #L07fc74.  return v1;
  #L07fc76.  v1:= v1 + 1;
  #L07fc7a.  goto L07fc56;
  #L07fc7c.  if v1 < v0 then goto L07fcd8;
  #L07fc80.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fc84.  v2:= length @variable v2;
  #L07fc86.  if v1 >= v2 then goto L07fcaa;
  #L07fc8a.  v3:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fc8e.  v3:= v3[v1] @kind object;
  #L07fc92.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fc98.  v3:= temp;
  #L07fc9a.  if v3 == 0 then goto L07fca4;
  #L07fc9e.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fca2.  goto L07fc72;
  #L07fca4.  v1:= v1 + 1;
  #L07fca8.  goto L07fc86;
  #L07fcaa.  v1:= 0I;
  #L07fcac.  if v1 >= v0 then goto L07fcd8;
  #L07fcb0.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fcb4.  v2:= v2[v1] @kind object;
  #L07fcb8.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fcbe.  v2:= temp;
  #L07fcc0.  if v2 == 0 then goto L07fcd2;
  #L07fcc4.  v5:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fcc8.  v5:= length @variable v5;
  #L07fcca.  v1:= v1 + v5 @kind int;
  #L07fccc.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fcd0.  goto L07fc72;
  #L07fcd2.  v1:= v1 + 1;
  #L07fcd6.  goto L07fcac;
  #L07fcd8.  v5:= -1I;
  #L07fcda.  return v5;
}
procedure `void` `internalStructure$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v2 @kind this, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.internalStructure$kotlin_stdlib:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L080788.  v0:= "structure" @kind object;
  #L08078c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L080792.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080796.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08079c.  v1:= temp;
  #L08079e.  v0:= v0 + v1 @kind int;
  #L0807a0.  call temp:= `h`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L0807a6.  v0:= temp;
  #L0807a8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L0807ae.  v1:= temp;
  #L0807b0.  if v1 != 0 then goto L0807c8;
  #L0807b4.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0807b8.  if v1 >= v0 then goto L0807be;
  #L0807bc.  goto L0807c8;
  #L0807be.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0807c2.  v0:= length @variable v0;
  #L0807c4.  v1:= v1 - v0 @kind int;
  #L0807c6.  goto L0807cc;
  #L0807c8.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0807cc.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0807d2.  v0:= temp @kind object;
  #L0807d4.  call temp:= `toArray`(v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L0807da.  v1:= temp @kind object;
  #L0807dc.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0807e2.  return @kind void;
}
procedure `boolean` `isEmpty`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f904.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f90a.  v0:= temp;
  #L07f90c.  if v0 != 0 then goto L07f914;
  #L07f910.  v0:= 1I;
  #L07f912.  goto L07f916;
  #L07f914.  v0:= 0I;
  #L07f916.  return v0;
}
procedure `java.lang.Object` `last`(`kotlin.collections.ArrayDeque` v3 @kind this) @signature `Lkotlin/collections/ArrayDeque;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07fea0.  call temp:= `isEmpty`(v3) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07fea6.  v0:= temp;
  #L07fea8.  if v0 != 0 then goto L07fecc;
  #L07feac.  v0:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07feb0.  v1:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07feb4.  call temp:= `getLastIndex`(v3) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L07feba.  v2:= temp;
  #L07febc.  v1:= v1 + v2 @kind int;
  #L07febe.  call temp:= `h`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fec4.  v1:= temp;
  #L07fec6.  v0:= v0[v1] @kind object;
  #L07feca.  return v0 @kind object;
  #L07fecc.  v0:= new `java.util.NoSuchElementException`;
  #L07fed0.  v1:= "ArrayDeque is empty." @kind object;
  #L07fed4.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07feda.  throw v0;
}
procedure `int` `lastIndexOf`(`kotlin.collections.ArrayDeque` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/ArrayDeque;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fcec.  v0:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fcf0.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07fcf6.  v1:= temp;
  #L07fcf8.  v0:= v0 + v1 @kind int;
  #L07fcfa.  call temp:= `h`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fd00.  v0:= temp;
  #L07fd02.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fd06.  v2:= -1I;
  #L07fd08.  if v1 >= v0 then goto L07fd3a;
  #L07fd0c.  v0:= v0 + -1;
  #L07fd10.  if v1 > v0 then goto L07fda6;
  #L07fd14.  v3:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fd18.  v3:= v3[v0] @kind object;
  #L07fd1c.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fd22.  v3:= temp;
  #L07fd24.  if v3 == 0 then goto L07fd30;
  #L07fd28.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fd2c.  v0:= v0 - v5 @kind int;
  #L07fd2e.  return v0;
  #L07fd30.  if v0 == v1 then goto L07fda6;
  #L07fd34.  v0:= v0 + -1;
  #L07fd38.  goto L07fd14;
  #L07fd3a.  if v1 <= v0 then goto L07fda6;
  #L07fd3e.  v0:= v0 + -1;
  #L07fd42.  if v2 >= v0 then goto L07fd6e;
  #L07fd46.  v1:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fd4a.  v1:= v1[v0] @kind object;
  #L07fd4e.  call temp:= `areEqual`(v5, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fd54.  v1:= temp;
  #L07fd56.  if v1 == 0 then goto L07fd68;
  #L07fd5a.  v5:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fd5e.  v5:= length @variable v5;
  #L07fd60.  v0:= v0 + v5 @kind int;
  #L07fd62.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fd66.  goto L07fd2c;
  #L07fd68.  v0:= v0 + -1;
  #L07fd6c.  goto L07fd42;
  #L07fd6e.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fd72.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L07fd78.  v0:= temp;
  #L07fd7a.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fd7e.  if v1 > v0 then goto L07fda6;
  #L07fd82.  v3:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fd86.  v3:= v3[v0] @kind object;
  #L07fd8a.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07fd90.  v3:= temp;
  #L07fd92.  if v3 == 0 then goto L07fd9c;
  #L07fd96.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fd9a.  goto L07fd2c;
  #L07fd9c.  if v0 == v1 then goto L07fda6;
  #L07fda0.  v0:= v0 + -1;
  #L07fda4.  goto L07fd82;
  #L07fda6.  return v2;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.collections.ArrayDeque` v3 @kind this) @signature `Lkotlin/collections/ArrayDeque;.lastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07feec.  call temp:= `isEmpty`(v3) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07fef2.  v0:= temp;
  #L07fef4.  if v0 == 0 then goto L07fefc;
  #L07fef8.  v0:= 0I;
  #L07fefa.  goto L07ff1a;
  #L07fefc.  v0:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ff00.  v1:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ff04.  call temp:= `getLastIndex`(v3) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L07ff0a.  v2:= temp;
  #L07ff0c.  v1:= v1 + v2 @kind int;
  #L07ff0e.  call temp:= `h`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07ff14.  v1:= temp;
  #L07ff16.  v0:= v0[v1] @kind object;
  #L07ff1a.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f928.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L07f92e.  v2:= temp;
  #L07f930.  v0:= -1I;
  #L07f932.  if v2 != v0 then goto L07f93a;
  #L07f936.  v2:= 0I;
  #L07f938.  return v2;
  #L07f93a.  call temp:= `remove`(v1, v2) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L07f940.  v2:= 1I;
  #L07f942.  return v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L07f954.  v0:= "elements" @kind object;
  #L07f958.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f95e.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07f964.  v0:= temp;
  #L07f966.  v1:= 0I;
  #L07f968.  if v0 != 0 then goto L07fa80;
  #L07f96c.  v0:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f970.  v0:= length @variable v0;
  #L07f972.  v2:= 1I;
  #L07f974.  if v0 != 0 then goto L07f97c;
  #L07f978.  v0:= 1I;
  #L07f97a.  goto L07f97e;
  #L07f97c.  v0:= 0I;
  #L07f97e.  if v0 == 0 then goto L07f986;
  #L07f982.  goto L07fa80;
  #L07f986.  v0:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f98a.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07f990.  v3:= temp;
  #L07f992.  v0:= v0 + v3 @kind int;
  #L07f994.  call temp:= `h`(v11, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07f99a.  v0:= temp;
  #L07f99c.  v3:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07f9a0.  v4:= 0I;
  #L07f9a2.  if v3 >= v0 then goto L07f9e6;
  #L07f9a6.  v5:= v3;
  #L07f9a8.  if v3 >= v0 then goto L07f9da;
  #L07f9ac.  v6:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f9b0.  v6:= v6[v3] @kind object;
  #L07f9b4.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07f9ba.  v7:= temp;
  #L07f9bc.  v7:= v7 ^~ v2 @kind int;
  #L07f9be.  if v7 == 0 then goto L07f9d2;
  #L07f9c2.  v7:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f9c6.  v8:= v5 + 1;
  #L07f9ca.  v7[v5]:= v6 @kind object;
  #L07f9ce.  v5:= v8;
  #L07f9d0.  goto L07f9d4;
  #L07f9d2.  v1:= 1I;
  #L07f9d4.  v3:= v3 + 1;
  #L07f9d8.  goto L07f9a8;
  #L07f9da.  v12:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f9de.  call `fill`(v12, v4, v5, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L07f9e4.  goto L07fa6a;
  #L07f9e6.  v5:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f9ea.  v5:= length @variable v5;
  #L07f9ec.  v6:= v3;
  #L07f9ee.  v7:= 0I;
  #L07f9f0.  if v3 >= v5 then goto L07fa26;
  #L07f9f4.  v8:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07f9f8.  v9:= v8[v3] @kind object;
  #L07f9fc.  v8[v3]:= v4 @kind object;
  #L07fa00.  call temp:= `contains`(v12, v9) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07fa06.  v8:= temp;
  #L07fa08.  v8:= v8 ^~ v2 @kind int;
  #L07fa0a.  if v8 == 0 then goto L07fa1e;
  #L07fa0e.  v8:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fa12.  v10:= v6 + 1;
  #L07fa16.  v8[v6]:= v9 @kind object;
  #L07fa1a.  v6:= v10;
  #L07fa1c.  goto L07fa20;
  #L07fa1e.  v7:= 1I;
  #L07fa20.  v3:= v3 + 1;
  #L07fa24.  goto L07f9f0;
  #L07fa26.  call temp:= `h`(v11, v6) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fa2c.  v3:= temp;
  #L07fa2e.  v5:= v3;
  #L07fa30.  if v1 >= v0 then goto L07fa68;
  #L07fa34.  v3:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fa38.  v6:= v3[v1] @kind object;
  #L07fa3c.  v3[v1]:= v4 @kind object;
  #L07fa40.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07fa46.  v3:= temp;
  #L07fa48.  v3:= v3 ^~ v2 @kind int;
  #L07fa4a.  if v3 == 0 then goto L07fa60;
  #L07fa4e.  v3:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fa52.  v3[v5]:= v6 @kind object;
  #L07fa56.  call temp:= `f`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L07fa5c.  v5:= temp;
  #L07fa5e.  goto L07fa62;
  #L07fa60.  v7:= 1I;
  #L07fa62.  v1:= v1 + 1;
  #L07fa66.  goto L07fa30;
  #L07fa68.  v1:= v7;
  #L07fa6a.  if v1 == 0 then goto L07fa80;
  #L07fa6e.  v12:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fa72.  v5:= v5 - v12 @kind int;
  #L07fa74.  call temp:= `g`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @kind direct;
  #L07fa7a.  v12:= temp;
  #L07fa7c.  v11.`kotlin.collections.ArrayDeque.c` @type ^`int` := v12;
  #L07fa80.  return v1;
}
procedure `java.lang.Object` `removeAt`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 ) @signature `Lkotlin/collections/ArrayDeque;.removeAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07ff2c.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07ff30.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07ff36.  v1:= temp;
  #L07ff38.  call `checkElementIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L07ff3e.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L07ff44.  v0:= temp;
  #L07ff46.  if v9 != v0 then goto L07ff54;
  #L07ff4a.  call temp:= `removeLast`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L07ff50.  v9:= temp @kind object;
  #L07ff52.  return v9 @kind object;
  #L07ff54.  if v9 != 0 then goto L07ff62;
  #L07ff58.  call temp:= `removeFirst`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L07ff5e.  v9:= temp @kind object;
  #L07ff60.  return v9 @kind object;
  #L07ff62.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ff66.  v0:= v0 + v9 @kind int;
  #L07ff68.  call temp:= `h`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07ff6e.  v0:= temp;
  #L07ff70.  v1:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ff74.  v1:= v1[v0] @kind object;
  #L07ff78.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07ff7e.  v2:= temp;
  #L07ff80.  v3:= 1I;
  #L07ff82.  v2:= v2 ^> v3 @kind int;
  #L07ff84.  v4:= 0I;
  #L07ff86.  v5:= 0I;
  #L07ff88.  if v9 >= v2 then goto L07ffea;
  #L07ff8c.  v9:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ff90.  if v0 < v9 then goto L07ffa4;
  #L07ff94.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ff98.  v5:= v9 + 1;
  #L07ff9c.  call temp:= `copyInto`(v2, v2, v5, v9, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07ffa2.  goto L07ffd0;
  #L07ffa4.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ffa8.  call temp:= `copyInto`(v9, v9, v3, v5, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07ffae.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ffb2.  v0:= length @variable v9;
  #L07ffb4.  v0:= v0 - v3 @kind int;
  #L07ffb6.  v0:= v9[v0] @kind object;
  #L07ffba.  v9[v5]:= v0 @kind object;
  #L07ffbe.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ffc2.  v2:= v0 + 1;
  #L07ffc6.  v5:= length @variable v9;
  #L07ffc8.  v5:= v5 - v3 @kind int;
  #L07ffca.  call temp:= `copyInto`(v9, v9, v2, v0, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L07ffd0.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07ffd4.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ffd8.  v9[v0]:= v4 @kind object;
  #L07ffdc.  call temp:= `f`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L07ffe2.  v9:= temp;
  #L07ffe4.  v8.`kotlin.collections.ArrayDeque.a` @type ^`int` := v9;
  #L07ffe8.  goto L08004a;
  #L07ffea.  v9:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07ffee.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L07fff4.  v2:= temp;
  #L07fff6.  v9:= v9 + v2 @kind int;
  #L07fff8.  call temp:= `h`(v8, v9) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fffe.  v9:= temp;
  #L080000.  if v0 > v9 then goto L080018;
  #L080004.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080008.  v5:= v0 + 1;
  #L08000c.  v6:= v9 + 1;
  #L080010.  call temp:= `copyInto`(v2, v2, v0, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L080016.  goto L080042;
  #L080018.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08001c.  v6:= v0 + 1;
  #L080020.  v7:= length @variable v2;
  #L080022.  call temp:= `copyInto`(v2, v2, v0, v6, v7) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L080028.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08002c.  v2:= length @variable v0;
  #L08002e.  v2:= v2 - v3 @kind int;
  #L080030.  v6:= v0[v5] @kind object;
  #L080034.  v0[v2]:= v6 @kind object;
  #L080038.  v2:= v9 + 1;
  #L08003c.  call temp:= `copyInto`(v0, v0, v5, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L080042.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080046.  v0[v9]:= v4 @kind object;
  #L08004a.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L080050.  v9:= temp;
  #L080052.  v9:= v9 - v3 @kind int;
  #L080054.  v8.`kotlin.collections.ArrayDeque.c` @type ^`int` := v9;
  #L080058.  return v1 @kind object;
}
procedure `java.lang.Object` `removeFirst`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08006c.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L080072.  v0:= temp;
  #L080074.  if v0 != 0 then goto L0800a8;
  #L080078.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08007c.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080080.  v2:= v0[v1] @kind object;
  #L080084.  v3:= 0I;
  #L080086.  v0[v1]:= v3 @kind object;
  #L08008a.  call temp:= `f`(v4, v1) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L080090.  v0:= temp;
  #L080092.  v4.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L080096.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08009c.  v0:= temp;
  #L08009e.  v0:= v0 + -1;
  #L0800a2.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v0;
  #L0800a6.  return v2 @kind object;
  #L0800a8.  v0:= new `java.util.NoSuchElementException`;
  #L0800ac.  v1:= "ArrayDeque is empty." @kind object;
  #L0800b0.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0800b6.  throw v0;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0800c8.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L0800ce.  v0:= temp;
  #L0800d0.  if v0 == 0 then goto L0800d8;
  #L0800d4.  v0:= 0I;
  #L0800d6.  goto L0800e0;
  #L0800d8.  call temp:= `removeFirst`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L0800de.  v0:= temp @kind object;
  #L0800e0.  return v0 @kind object;
}
procedure `java.lang.Object` `removeLast`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0800f4.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L0800fa.  v0:= temp;
  #L0800fc.  if v0 != 0 then goto L080136;
  #L080100.  v0:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080104.  call temp:= `getLastIndex`(v4) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L08010a.  v1:= temp;
  #L08010c.  v0:= v0 + v1 @kind int;
  #L08010e.  call temp:= `h`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L080114.  v0:= temp;
  #L080116.  v1:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L08011a.  v2:= v1[v0] @kind object;
  #L08011e.  v3:= 0I;
  #L080120.  v1[v0]:= v3 @kind object;
  #L080124.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08012a.  v0:= temp;
  #L08012c.  v0:= v0 + -1;
  #L080130.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v0;
  #L080134.  return v2 @kind object;
  #L080136.  v0:= new `java.util.NoSuchElementException`;
  #L08013a.  v1:= "ArrayDeque is empty." @kind object;
  #L08013e.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080144.  throw v0;
}
procedure `java.lang.Object` `removeLastOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L080158.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L08015e.  v0:= temp;
  #L080160.  if v0 == 0 then goto L080168;
  #L080164.  v0:= 0I;
  #L080166.  goto L080170;
  #L080168.  call temp:= `removeLast`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L08016e.  v0:= temp @kind object;
  #L080170.  return v0 @kind object;
}
procedure `boolean` `retainAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L07fa94.  v0:= "elements" @kind object;
  #L07fa98.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07fa9e.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L07faa4.  v0:= temp;
  #L07faa6.  v1:= 0I;
  #L07faa8.  if v0 != 0 then goto L07fbba;
  #L07faac.  v0:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fab0.  v0:= length @variable v0;
  #L07fab2.  v2:= 1I;
  #L07fab4.  if v0 != 0 then goto L07fabc;
  #L07fab8.  v0:= 1I;
  #L07faba.  goto L07fabe;
  #L07fabc.  v0:= 0I;
  #L07fabe.  if v0 == 0 then goto L07fac6;
  #L07fac2.  goto L07fbba;
  #L07fac6.  v0:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07faca.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L07fad0.  v3:= temp;
  #L07fad2.  v0:= v0 + v3 @kind int;
  #L07fad4.  call temp:= `h`(v11, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fada.  v0:= temp;
  #L07fadc.  v3:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fae0.  v4:= 0I;
  #L07fae2.  if v3 >= v0 then goto L07fb24;
  #L07fae6.  v5:= v3;
  #L07fae8.  if v3 >= v0 then goto L07fb18;
  #L07faec.  v6:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07faf0.  v6:= v6[v3] @kind object;
  #L07faf4.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07fafa.  v7:= temp;
  #L07fafc.  if v7 == 0 then goto L07fb10;
  #L07fb00.  v7:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb04.  v8:= v5 + 1;
  #L07fb08.  v7[v5]:= v6 @kind object;
  #L07fb0c.  v5:= v8;
  #L07fb0e.  goto L07fb12;
  #L07fb10.  v1:= 1I;
  #L07fb12.  v3:= v3 + 1;
  #L07fb16.  goto L07fae8;
  #L07fb18.  v12:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb1c.  call `fill`(v12, v4, v5, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L07fb22.  goto L07fba4;
  #L07fb24.  v5:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb28.  v5:= length @variable v5;
  #L07fb2a.  v6:= v3;
  #L07fb2c.  v7:= 0I;
  #L07fb2e.  if v3 >= v5 then goto L07fb62;
  #L07fb32.  v8:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb36.  v9:= v8[v3] @kind object;
  #L07fb3a.  v8[v3]:= v4 @kind object;
  #L07fb3e.  call temp:= `contains`(v12, v9) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07fb44.  v8:= temp;
  #L07fb46.  if v8 == 0 then goto L07fb5a;
  #L07fb4a.  v8:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb4e.  v10:= v6 + 1;
  #L07fb52.  v8[v6]:= v9 @kind object;
  #L07fb56.  v6:= v10;
  #L07fb58.  goto L07fb5c;
  #L07fb5a.  v7:= 1I;
  #L07fb5c.  v3:= v3 + 1;
  #L07fb60.  goto L07fb2e;
  #L07fb62.  call temp:= `h`(v11, v6) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L07fb68.  v3:= temp;
  #L07fb6a.  v5:= v3;
  #L07fb6c.  if v1 >= v0 then goto L07fba2;
  #L07fb70.  v3:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb74.  v6:= v3[v1] @kind object;
  #L07fb78.  v3[v1]:= v4 @kind object;
  #L07fb7c.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L07fb82.  v3:= temp;
  #L07fb84.  if v3 == 0 then goto L07fb9a;
  #L07fb88.  v3:= v11.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L07fb8c.  v3[v5]:= v6 @kind object;
  #L07fb90.  call temp:= `f`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L07fb96.  v5:= temp;
  #L07fb98.  goto L07fb9c;
  #L07fb9a.  v7:= 1I;
  #L07fb9c.  v1:= v1 + 1;
  #L07fba0.  goto L07fb6c;
  #L07fba2.  v1:= v7;
  #L07fba4.  if v1 == 0 then goto L07fbba;
  #L07fba8.  v12:= v11.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L07fbac.  v5:= v5 - v12 @kind int;
  #L07fbae.  call temp:= `g`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @kind direct;
  #L07fbb4.  v12:= temp;
  #L07fbb6.  v11.`kotlin.collections.ArrayDeque.c` @type ^`int` := v12;
  #L07fbba.  return v1;
}
procedure `java.lang.Object` `set`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080184.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L080188.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08018e.  v1:= temp;
  #L080190.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L080196.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L08019a.  v0:= v0 + v3 @kind int;
  #L08019c.  call temp:= `h`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L0801a2.  v3:= temp;
  #L0801a4.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0801a8.  v1:= v0[v3] @kind object;
  #L0801ac.  v0[v3]:= v4 @kind object;
  #L0801b0.  return v1 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0801c4.  call temp:= `toArray`(v1) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L0801ca.  v0:= temp @kind object;
  #L0801cc.  return v0 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0801e0.  v0:= "array" @kind object;
  #L0801e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0801ea.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L0801f0.  v2:= temp @kind object;
  #L0801f2.  return v2 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080204.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08020a.  v0:= temp;
  #L08020c.  v0:= new `java.lang.Object`[v0];
  #L080210.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L080216.  v0:= temp @kind object;
  #L080218.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v7 @kind this, `java.lang.Object`[] v8 @kind object) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L08022c.  v0:= "array" @kind object;
  #L080230.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L080236.  v0:= length @variable v8;
  #L080238.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08023e.  v1:= temp;
  #L080240.  if v0 < v1 then goto L080246;
  #L080244.  goto L080256;
  #L080246.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08024c.  v0:= temp;
  #L08024e.  call temp:= `arrayOfNulls`(v8, v0) @signature `Lkotlin/collections/b;.arrayOfNulls:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L080254.  v8:= temp @kind object;
  #L080256.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>" @kind object;
  #L08025a.  call `checkNotNull`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L080260.  v0:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L080264.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L08026a.  v1:= temp;
  #L08026c.  v0:= v0 + v1 @kind int;
  #L08026e.  call temp:= `h`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L080274.  v4:= temp;
  #L080276.  v3:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L08027a.  if v3 >= v4 then goto L080292;
  #L08027e.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L080282.  v2:= 0I;
  #L080284.  v5:= 2I;
  #L080286.  v6:= 0I;
  #L080288.  v1:= v8 @kind object;
  #L08028a.  call temp:= `copyInto$default`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto$default:([Ljava/lang/Object;[Ljava/lang/Object;IIIILjava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L080290.  goto L0802c6;
  #L080292.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L080298.  v0:= temp;
  #L08029a.  v0:= v0 ^~ 1;
  #L08029e.  if v0 == 0 then goto L0802c6;
  #L0802a2.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0802a6.  v1:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0802aa.  v2:= length @variable v0;
  #L0802ac.  v3:= 0I;
  #L0802ae.  call temp:= `copyInto`(v0, v8, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0802b4.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L0802b8.  v1:= length @variable v0;
  #L0802ba.  v2:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L0802be.  v1:= v1 - v2 @kind int;
  #L0802c0.  call temp:= `copyInto`(v0, v8, v1, v3, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L0802c6.  v0:= length @variable v8;
  #L0802c8.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0802ce.  v1:= temp;
  #L0802d0.  if v0 <= v1 then goto L0802e2;
  #L0802d4.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L0802da.  v0:= temp;
  #L0802dc.  v1:= 0I;
  #L0802de.  v8[v0]:= v1 @kind object;
  #L0802e2.  return v8 @kind object;
}
