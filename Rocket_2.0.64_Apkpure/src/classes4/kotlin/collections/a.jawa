record `kotlin.collections.a` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object`[] `kotlin.collections.a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.collections.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.a` v1 @kind this, `java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lkotlin/collections/a;.<init>:([Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07f5c4.  v0:= "values" @kind object;
  #L07f5c8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f5ce.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f5d4.  v1.`kotlin.collections.a.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L07f5d8.  v1.`kotlin.collections.a.b` @type ^`boolean` := v3 @kind boolean;
  #L07f5dc.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/a;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f3ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f3f0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f3f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f3fa.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/a;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f40c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f410.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f414.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f41a.  throw v2;
}
procedure `int` `b`(`kotlin.collections.a` v1 @kind this) @signature `Lkotlin/collections/a;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f528.  v0:= v1.`kotlin.collections.a.a` @type ^`java.lang.Object`[] @kind object;
  #L07f52c.  v0:= length @variable v0;
  #L07f52e.  return v0;
}
procedure `void` `clear`(`kotlin.collections.a` v2 @kind this) @signature `Lkotlin/collections/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07f5f0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L07f5f4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L07f5f8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f5fe.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f42c.  v0:= v1.`kotlin.collections.a.a` @type ^`java.lang.Object`[] @kind object;
  #L07f430.  call temp:= `contains`(v0, v2) @signature `Lkotlin/collections/ArraysKt___ArraysKt;.contains:([Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07f436.  v2:= temp;
  #L07f438.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.a` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/a;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07f44c.  v0:= "elements" @kind object;
  #L07f450.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f456.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07f45c.  v0:= temp;
  #L07f45e.  v1:= 1I;
  #L07f460.  if v0 == 0 then goto L07f466;
  #L07f464.  goto L07f490;
  #L07f466.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07f46c.  v3:= temp @kind object;
  #L07f46e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07f474.  v0:= temp;
  #L07f476.  if v0 == 0 then goto L07f490;
  #L07f47a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07f480.  v0:= temp @kind object;
  #L07f482.  call temp:= `contains`(v2, v0) @signature `Lkotlin/collections/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L07f488.  v0:= temp;
  #L07f48a.  if v0 != 0 then goto L07f46e;
  #L07f48e.  v1:= 0I;
  #L07f490.  return v1;
}
procedure `boolean` `isEmpty`(`kotlin.collections.a` v1 @kind this) @signature `Lkotlin/collections/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f4a4.  v0:= v1.`kotlin.collections.a.a` @type ^`java.lang.Object`[] @kind object;
  #L07f4a8.  v0:= length @variable v0;
  #L07f4aa.  if v0 != 0 then goto L07f4b2;
  #L07f4ae.  v0:= 1I;
  #L07f4b0.  goto L07f4b4;
  #L07f4b2.  v0:= 0I;
  #L07f4b4.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.a` v1 @kind this) @signature `Lkotlin/collections/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f5a4.  v0:= v1.`kotlin.collections.a.a` @type ^`java.lang.Object`[] @kind object;
  #L07f5a8.  call temp:= `iterator`(v0) @signature `Lkotlin/jvm/internal/ArrayIteratorKt;.iterator:([Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L07f5ae.  v0:= temp @kind object;
  #L07f5b0.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f4c8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f4cc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f4d0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f4d6.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/a;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f4e8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f4ec.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f4f0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f4f6.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f508.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f50c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f510.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f516.  throw v2;
}
procedure `int` `size`(`kotlin.collections.a` v1 @kind this) @signature `Lkotlin/collections/a;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07f540.  call temp:= `b`(v1) @signature `Lkotlin/collections/a;.b:()I` @kind virtual;
  #L07f546.  v0:= temp;
  #L07f548.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.a` v2 @kind this) @signature `Lkotlin/collections/a;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L07f55c.  v0:= v2.`kotlin.collections.a.a` @type ^`java.lang.Object`[] @kind object;
  #L07f560.  v1:= v2.`kotlin.collections.a.b` @type ^`boolean` @kind boolean;
  #L07f564.  call temp:= `copyToArrayOfAny`(v0, v1) @signature `Lkotlin/collections/e;.copyToArrayOfAny:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @kind static;
  #L07f56a.  v0:= temp @kind object;
  #L07f56c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/a;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f580.  v0:= "array" @kind object;
  #L07f584.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07f58a.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L07f590.  v2:= temp @kind object;
  #L07f592.  return v2 @kind object;
}
