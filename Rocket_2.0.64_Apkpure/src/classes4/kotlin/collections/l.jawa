record `kotlin.collections.l` @kind class @AccessFlag FINAL extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.l` `@@kotlin.collections.l.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.collections.l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ace9c.  v0:= new `kotlin.collections.l`;
  #L0acea0.  call `<init>`(v0) @signature `Lkotlin/collections/l;.<init>:()V` @kind direct;
  #L0acea6.  `@@kotlin.collections.l.a` @type ^`kotlin.collections.l` := v0 @kind object;
  #L0aceaa.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.l` v0 @kind this) @signature `Lkotlin/collections/l;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0acebc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0acec2.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0acd80.  v0:= `@@kotlin.collections.l.a` @type ^`kotlin.collections.l` @kind object;
  #L0acd84.  return v0 @kind object;
}
procedure `boolean` `b`(`kotlin.collections.l` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/l;.b:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acc9c.  v0:= "value" @kind object;
  #L0acca0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0acca6.  v2:= 0I;
  #L0acca8.  return v2;
}
procedure `java.lang.Void` `c`(`kotlin.collections.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/l;.c:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L0acdcc.  v1:= 0I;
  #L0acdce.  return v1 @kind object;
}
procedure `void` `clear`(`kotlin.collections.l` v2 @kind this) @signature `Lkotlin/collections/l;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0aced4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0aced8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0acedc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acee2.  throw v0;
}
procedure `boolean` `containsKey`(`kotlin.collections.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/l;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L0acc5c.  v1:= 0I;
  #L0acc5e.  return v1;
}
procedure `boolean` `containsValue`(`kotlin.collections.l` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/l;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0acc70.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L0acc74.  if v0 != 0 then goto L0acc7c;
  #L0acc78.  v2:= 0I;
  #L0acc7a.  return v2;
  #L0acc7c.  v2:= (`java.lang.Void`) v2 @kind object;
  #L0acc80.  call temp:= `b`(v1, v2) @signature `Lkotlin/collections/l;.b:(Ljava/lang/Void;)Z` @kind virtual;
  #L0acc86.  v2:= temp;
  #L0acc88.  return v2;
}
procedure `java.util.Set` `d`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.d:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ace50.  v0:= `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` @kind object;
  #L0ace54.  return v0 @kind object;
}
procedure `java.util.Set` `e`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.e:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ace68.  v0:= `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` @kind object;
  #L0ace6c.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ace34.  call temp:= `d`(v1) @signature `Lkotlin/collections/l;.d:()Ljava/util/Set;` @kind virtual;
  #L0ace3a.  v0:= temp @kind object;
  #L0ace3c.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.l` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0accbc.  v0:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L0accc0.  if v0 == 0 then goto L0accd8;
  #L0accc4.  v2:= (`java.util.Map`) v2 @kind object;
  #L0accc8.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L0accce.  v2:= temp;
  #L0accd0.  if v2 == 0 then goto L0accd8;
  #L0accd4.  v2:= 1I;
  #L0accd6.  goto L0accda;
  #L0accd8.  v2:= 0I;
  #L0accda.  return v2;
}
procedure `int` `f`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acd00.  v0:= 0I;
  #L0acd02.  return v0;
}
procedure `java.util.Collection` `g`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.g:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ace00.  v0:= `@@kotlin.collections.EmptyList.INSTANCE` @type ^`kotlin.collections.EmptyList` @kind object;
  #L0ace04.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.collections.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/l;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0acd44.  call temp:= `c`(v0, v1) @signature `Lkotlin/collections/l;.c:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L0acd4a.  v1:= temp @kind object;
  #L0acd4c.  return v1 @kind object;
}
procedure `java.lang.Void` `h`(`kotlin.collections.l` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/l;.h:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acde0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acde4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acde8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acdee.  throw v2;
}
procedure `int` `hashCode`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acd14.  v0:= 0I;
  #L0acd16.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0accec.  v0:= 1I;
  #L0accee.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ace80.  call temp:= `e`(v1) @signature `Lkotlin/collections/l;.e:()Ljava/util/Set;` @kind virtual;
  #L0ace86.  v0:= temp @kind object;
  #L0ace88.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.l` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/l;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0acd60.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0acd64.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0acd68.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acd6e.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.l` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/l;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acef4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acef8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acefc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acf02.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/l;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0acd98.  call temp:= `h`(v0, v1) @signature `Lkotlin/collections/l;.h:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L0acd9e.  v1:= temp @kind object;
  #L0acda0.  return v1 @kind object;
}
procedure `int` `size`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0acd28.  call temp:= `f`(v1) @signature `Lkotlin/collections/l;.f:()I` @kind virtual;
  #L0acd2e.  v0:= temp;
  #L0acd30.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acdb4.  v0:= "{}" @kind object;
  #L0acdb8.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.l` v1 @kind this) @signature `Lkotlin/collections/l;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ace18.  call temp:= `g`(v1) @signature `Lkotlin/collections/l;.g:()Ljava/util/Collection;` @kind virtual;
  #L0ace1e.  v0:= temp @kind object;
  #L0ace20.  return v0 @kind object;
}
