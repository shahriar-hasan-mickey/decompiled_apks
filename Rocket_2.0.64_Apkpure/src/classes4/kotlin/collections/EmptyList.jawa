record `kotlin.collections.EmptyList` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.List` @kind interface, `java.io.Serializable` @kind interface, `java.util.RandomAccess` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.EmptyList` `@@kotlin.collections.EmptyList.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.collections.EmptyList.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/EmptyList;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0acbc4.  v0:= new `kotlin.collections.EmptyList`;
  #L0acbc8.  call `<init>`(v0) @signature `Lkotlin/collections/EmptyList;.<init>:()V` @kind direct;
  #L0acbce.  `@@kotlin.collections.EmptyList.INSTANCE` @type ^`kotlin.collections.EmptyList` := v0 @kind object;
  #L0acbd2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.EmptyList` v0 @kind this) @signature `Lkotlin/collections/EmptyList;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0acbe4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0acbea.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0ac9bc.  v0:= `@@kotlin.collections.EmptyList.INSTANCE` @type ^`kotlin.collections.EmptyList` @kind object;
  #L0ac9c0.  return v0 @kind object;
}
procedure `void` `add`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0acbfc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0acc00.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0acc04.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acc0a.  throw v1;
}
procedure `void` `add`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 , `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.add:(ILjava/lang/Void;)V` @AccessFlag PUBLIC {
    temp;

  #L0acc1c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0acc20.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0acc24.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acc2a.  throw v1;
}
procedure `boolean` `add`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0ac730.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac734.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac738.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac73e.  throw v2;
}
procedure `boolean` `add`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac750.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac754.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac758.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac75e.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L0ac770.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0ac774.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0ac778.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac77e.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.collections.EmptyList` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac790.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac794.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac798.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac79e.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.EmptyList` v2 @kind this) @signature `Lkotlin/collections/EmptyList;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0acc3c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0acc40.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0acc44.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acc4a.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ac7b0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L0ac7b4.  if v0 != 0 then goto L0ac7bc;
  #L0ac7b8.  v2:= 0I;
  #L0ac7ba.  return v2;
  #L0ac7bc.  v2:= (`java.lang.Void`) v2 @kind object;
  #L0ac7c0.  call temp:= `contains`(v1, v2) @signature `Lkotlin/collections/EmptyList;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L0ac7c6.  v2:= temp;
  #L0ac7c8.  return v2;
}
procedure `boolean` `contains`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac7dc.  v0:= "element" @kind object;
  #L0ac7e0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ac7e6.  v2:= 0I;
  #L0ac7e8.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.EmptyList` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac7fc.  v0:= "elements" @kind object;
  #L0ac800.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ac806.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L0ac80c.  v2:= temp;
  #L0ac80e.  return v2;
}
procedure `boolean` `equals`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac820.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L0ac824.  if v0 == 0 then goto L0ac83c;
  #L0ac828.  v2:= (`java.util.List`) v2 @kind object;
  #L0ac82c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0ac832.  v2:= temp;
  #L0ac834.  if v2 == 0 then goto L0ac83c;
  #L0ac838.  v2:= 1I;
  #L0ac83a.  goto L0ac83e;
  #L0ac83c.  v2:= 0I;
  #L0ac83e.  return v2;
}
procedure `java.lang.Object` `get`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/EmptyList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ac9a0.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/EmptyList;.get:(I)Ljava/lang/Void;` @kind virtual;
  #L0ac9a6.  v1:= temp @kind object;
  #L0ac9a8.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`kotlin.collections.EmptyList` v3 @kind this, `int` v4 ) @signature `Lkotlin/collections/EmptyList;.get:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0aca6c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L0aca70.  v1:= new `java.lang.StringBuilder`;
  #L0aca74.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0aca7a.  v2:= "Empty list doesn't contain element at index " @kind object;
  #L0aca7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0aca84.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0aca8a.  v4:= 46I;
  #L0aca8e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0aca94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0aca9a.  v4:= temp @kind object;
  #L0aca9c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acaa2.  throw v0;
}
procedure `int` `getSize`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac8c4.  v0:= 0I;
  #L0ac8c6.  return v0;
}
procedure `int` `hashCode`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac8d8.  v0:= 1I;
  #L0ac8da.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ac8ec.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L0ac8f0.  if v0 != 0 then goto L0ac8f8;
  #L0ac8f4.  v2:= -1I;
  #L0ac8f6.  return v2;
  #L0ac8f8.  v2:= (`java.lang.Void`) v2 @kind object;
  #L0ac8fc.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/EmptyList;.indexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L0ac902.  v2:= temp;
  #L0ac904.  return v2;
}
procedure `int` `indexOf`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.indexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac918.  v0:= "element" @kind object;
  #L0ac91c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ac922.  v2:= -1I;
  #L0ac924.  return v2;
}
procedure `boolean` `isEmpty`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac850.  v0:= 1I;
  #L0ac852.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acaf4.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L0acaf8.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ac938.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L0ac93c.  if v0 != 0 then goto L0ac944;
  #L0ac940.  v2:= -1I;
  #L0ac942.  return v2;
  #L0ac944.  v2:= (`java.lang.Void`) v2 @kind object;
  #L0ac948.  call temp:= `lastIndexOf`(v1, v2) @signature `Lkotlin/collections/EmptyList;.lastIndexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L0ac94e.  v2:= temp;
  #L0ac950.  return v2;
}
procedure `int` `lastIndexOf`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.lastIndexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac964.  v0:= "element" @kind object;
  #L0ac968.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ac96e.  v2:= -1I;
  #L0ac970.  return v2;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acb64.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L0acb68.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.EmptyList` v3 @kind this, `int` v4 ) @signature `Lkotlin/collections/EmptyList;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0acb7c.  if v4 != 0 then goto L0acb86;
  #L0acb80.  v4:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L0acb84.  return v4 @kind object;
  #L0acb86.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L0acb8a.  v1:= new `java.lang.StringBuilder`;
  #L0acb8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0acb94.  v2:= "Index: " @kind object;
  #L0acb98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acb9e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acba4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0acbaa.  v4:= temp @kind object;
  #L0acbac.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acbb2.  throw v0;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.EmptyList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/EmptyList;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0ac9d4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac9d8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac9dc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac9e2.  throw v2;
}
procedure `java.lang.Void` `remove`(`kotlin.collections.EmptyList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/EmptyList;.remove:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acab4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acab8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acabc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acac2.  throw v2;
}
procedure `boolean` `remove`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac864.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac868.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac86c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac872.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.EmptyList` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac884.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac888.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac88c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac892.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.EmptyList` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ac8a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ac8a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ac8ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ac8b2.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ac9f4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0ac9f8.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0ac9fc.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0aca02.  throw v1;
}
procedure `java.lang.Void` `set`(`kotlin.collections.EmptyList` v0 @kind this, `int` v1 , `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptyList;.set:(ILjava/lang/Void;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L0acad4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0acad8.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0acadc.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acae2.  throw v1;
}
procedure `int` `size`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ac984.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/EmptyList;.getSize:()I` @kind virtual;
  #L0ac98a.  v0:= temp;
  #L0ac98c.  return v0;
}
procedure `java.util.List` `subList`(`kotlin.collections.EmptyList` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/collections/EmptyList;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0acb0c.  if v4 != 0 then goto L0acb16;
  #L0acb10.  if v5 != 0 then goto L0acb16;
  #L0acb14.  return v3 @kind object;
  #L0acb16.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L0acb1a.  v1:= new `java.lang.StringBuilder`;
  #L0acb1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0acb24.  v2:= "fromIndex: " @kind object;
  #L0acb28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acb2e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acb34.  v4:= ", toIndex: " @kind object;
  #L0acb38.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acb3e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0acb44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0acb4a.  v4:= temp @kind object;
  #L0acb4c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acb52.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0aca14.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L0aca1a.  v0:= temp @kind object;
  #L0aca1c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptyList` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/EmptyList;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0aca30.  v0:= "array" @kind object;
  #L0aca34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0aca3a.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L0aca40.  v2:= temp @kind object;
  #L0aca42.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.EmptyList` v1 @kind this) @signature `Lkotlin/collections/EmptyList;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0aca54.  v0:= "[]" @kind object;
  #L0aca58.  return v0 @kind object;
}
