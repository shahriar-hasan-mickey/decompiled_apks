record `kotlin.collections.EmptySet` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.EmptySet` `@@kotlin.collections.EmptySet.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.collections.EmptySet.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/EmptySet;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ad154.  v0:= new `kotlin.collections.EmptySet`;
  #L0ad158.  call `<init>`(v0) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @kind direct;
  #L0ad15e.  `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` := v0 @kind object;
  #L0ad162.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.EmptySet` v0 @kind this) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0ad174.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0ad17a.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0ad0cc.  v0:= `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` @kind object;
  #L0ad0d0.  return v0 @kind object;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0acf14.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acf18.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acf1c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acf22.  throw v2;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acf34.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acf38.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acf3c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acf42.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acf54.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0acf58.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0acf5c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0acf62.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.EmptySet` v2 @kind this) @signature `Lkotlin/collections/EmptySet;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ad18c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0ad190.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0ad194.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ad19a.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0acf74.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L0acf78.  if v0 != 0 then goto L0acf80;
  #L0acf7c.  v2:= 0I;
  #L0acf7e.  return v2;
  #L0acf80.  v2:= (`java.lang.Void`) v2 @kind object;
  #L0acf84.  call temp:= `contains`(v1, v2) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L0acf8a.  v2:= temp;
  #L0acf8c.  return v2;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acfa0.  v0:= "element" @kind object;
  #L0acfa4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0acfaa.  v2:= 0I;
  #L0acfac.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acfc0.  v0:= "elements" @kind object;
  #L0acfc4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0acfca.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L0acfd0.  v2:= temp;
  #L0acfd2.  return v2;
}
procedure `boolean` `equals`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0acfe4.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L0acfe8.  if v0 == 0 then goto L0ad000;
  #L0acfec.  v2:= (`java.util.Set`) v2 @kind object;
  #L0acff0.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L0acff6.  v2:= temp;
  #L0acff8.  if v2 == 0 then goto L0ad000;
  #L0acffc.  v2:= 1I;
  #L0acffe.  goto L0ad002;
  #L0ad000.  v2:= 0I;
  #L0ad002.  return v2;
}
procedure `int` `getSize`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad088.  v0:= 0I;
  #L0ad08a.  return v0;
}
procedure `int` `hashCode`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad09c.  v0:= 0I;
  #L0ad09e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad014.  v0:= 1I;
  #L0ad016.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad13c.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L0ad140.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad028.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ad02c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ad030.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ad036.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad048.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ad04c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ad050.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ad056.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad068.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0ad06c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0ad070.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ad076.  throw v2;
}
procedure `int` `size`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ad0b0.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @kind virtual;
  #L0ad0b6.  v0:= temp;
  #L0ad0b8.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad0e4.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L0ad0ea.  v0:= temp @kind object;
  #L0ad0ec.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/EmptySet;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad100.  v0:= "array" @kind object;
  #L0ad104.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ad10a.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L0ad110.  v2:= temp @kind object;
  #L0ad112.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ad124.  v0:= "[]" @kind object;
  #L0ad128.  return v0 @kind object;
}
