record `kotlin.collections.RingBuffer$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `int` `kotlin.collections.RingBuffer$iterator$1.c` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer$iterator$1.d` @AccessFlag PRIVATE;
  `kotlin.collections.RingBuffer` `kotlin.collections.RingBuffer$iterator$1.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer$iterator$1` v1 @kind this, `kotlin.collections.RingBuffer` v2 @kind object) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L0aff68.  v1.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` := v2 @kind object;
  #L0aff6c.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L0aff72.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0aff78.  v0:= temp;
  #L0aff7a.  v1.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int` := v0;
  #L0aff7e.  call temp:= `d`(v2) @signature `Lkotlin/collections/RingBuffer;.d:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L0aff84.  v2:= temp;
  #L0aff86.  v1.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int` := v2;
  #L0aff8a.  return @kind void;
}
procedure `void` `computeNext`(`kotlin.collections.RingBuffer$iterator$1` v2 @kind this) @signature `Lkotlin/collections/RingBuffer$iterator$1;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L0aff9c.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int`;
  #L0affa0.  if v0 != 0 then goto L0affac;
  #L0affa4.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L0affaa.  goto L0affec;
  #L0affac.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L0affb0.  call temp:= `b`(v0) @signature `Lkotlin/collections/RingBuffer;.b:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @kind static;
  #L0affb6.  v0:= temp @kind object;
  #L0affb8.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int`;
  #L0affbc.  v0:= v0[v1] @kind object;
  #L0affc0.  call `setNext`(v2, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L0affc6.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L0affca.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int`;
  #L0affce.  v1:= v1 + 1;
  #L0affd2.  call temp:= `c`(v0) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L0affd8.  v0:= temp;
  #L0affda.  v1:= v1 %% v0 @kind int;
  #L0affdc.  v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int` := v1;
  #L0affe0.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int`;
  #L0affe4.  v0:= v0 + -1;
  #L0affe8.  v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int` := v0;
  #L0affec.  return @kind void;
}
