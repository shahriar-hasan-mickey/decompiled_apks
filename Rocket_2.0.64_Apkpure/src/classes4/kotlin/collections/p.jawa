record `kotlin.collections.p` @kind class @AccessFlag FINAL extends `kotlin.collections.o` @kind interface {
  `java.util.Map` `kotlin.collections.p.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.collections.p.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.p` v1 @kind this, `java.util.Map` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/collections/p;.<init>:(Ljava/util/Map;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0adeb8.  v0:= "map" @kind object;
  #L0adebc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0adec2.  v0:= "default" @kind object;
  #L0adec6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0adecc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0aded2.  v1.`kotlin.collections.p.a` @type ^`java.util.Map` := v2 @kind object;
  #L0aded6.  v1.`kotlin.collections.p.b` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L0adeda.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlin.collections.p` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/p;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0add3c.  call temp:= `getMap`(v2) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0add42.  v0:= temp @kind object;
  #L0add44.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0add4a.  v1:= temp @kind object;
  #L0add4c.  if v1 != 0 then goto L0add68;
  #L0add50.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L0add56.  v0:= temp;
  #L0add58.  if v0 != 0 then goto L0add68;
  #L0add5c.  v0:= v2.`kotlin.collections.p.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0add60.  call temp:= `invoke`(v0, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0add66.  v1:= temp @kind object;
  #L0add68.  return v1 @kind object;
}
procedure `java.util.Set` `b`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.b:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ade54.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0ade5a.  v0:= temp @kind object;
  #L0ade5c.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L0ade62.  v0:= temp @kind object;
  #L0ade64.  return v0 @kind object;
}
procedure `java.util.Set` `c`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ade78.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0ade7e.  v0:= temp @kind object;
  #L0ade80.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L0ade86.  v0:= temp @kind object;
  #L0ade88.  return v0 @kind object;
}
procedure `void` `clear`(`kotlin.collections.p` v2 @kind this) @signature `Lkotlin/collections/p;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0adeec.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0adef0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0adef4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0adefa.  throw v0;
}
procedure `boolean` `containsKey`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adc24.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adc2a.  v0:= temp @kind object;
  #L0adc2c.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L0adc32.  v2:= temp;
  #L0adc34.  return v2;
}
procedure `boolean` `containsValue`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adc48.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adc4e.  v0:= temp @kind object;
  #L0adc50.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L0adc56.  v2:= temp;
  #L0adc58.  return v2;
}
procedure `int` `d`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adcb4.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adcba.  v0:= temp @kind object;
  #L0adcbc.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L0adcc2.  v0:= temp;
  #L0adcc4.  return v0;
}
procedure `java.util.Collection` `e`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.e:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adde0.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adde6.  v0:= temp @kind object;
  #L0adde8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L0addee.  v0:= temp @kind object;
  #L0addf0.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ade38.  call temp:= `b`(v1) @signature `Lkotlin/collections/p;.b:()Ljava/util/Set;` @kind virtual;
  #L0ade3e.  v0:= temp @kind object;
  #L0ade40.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adc6c.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adc72.  v0:= temp @kind object;
  #L0adc74.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0adc7a.  v2:= temp;
  #L0adc7c.  return v2;
}
procedure `java.lang.Object` `get`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0add18.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0add1e.  v0:= temp @kind object;
  #L0add20.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0add26.  v2:= temp @kind object;
  #L0add28.  return v2 @kind object;
}
procedure `java.util.Map` `getMap`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ade20.  v0:= v1.`kotlin.collections.p.a` @type ^`java.util.Map` @kind object;
  #L0ade24.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adcd8.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adcde.  v0:= temp @kind object;
  #L0adce0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0adce6.  v0:= temp;
  #L0adce8.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adc90.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0adc96.  v0:= temp @kind object;
  #L0adc98.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L0adc9e.  v0:= temp;
  #L0adca0.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ade9c.  call temp:= `c`(v1) @signature `Lkotlin/collections/p;.c:()Ljava/util/Set;` @kind virtual;
  #L0adea2.  v0:= temp @kind object;
  #L0adea4.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.p` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L0add7c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0add80.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L0add84.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0add8a.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.p` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/p;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0adf0c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0adf10.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0adf14.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0adf1a.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0add9c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0adda0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L0adda4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0addaa.  throw v2;
}
procedure `int` `size`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0adcfc.  call temp:= `d`(v1) @signature `Lkotlin/collections/p;.d:()I` @kind virtual;
  #L0add02.  v0:= temp;
  #L0add04.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0addbc.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L0addc2.  v0:= temp @kind object;
  #L0addc4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0addca.  v0:= temp @kind object;
  #L0addcc.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ade04.  call temp:= `e`(v1) @signature `Lkotlin/collections/p;.e:()Ljava/util/Collection;` @kind virtual;
  #L0ade0a.  v0:= temp @kind object;
  #L0ade0c.  return v0 @kind object;
}
