record `kotlin.collections.builders.ListBuilder$a` @kind class @AccessFlag FINAL extends `java.util.ListIterator` @kind interface, `kotlin.jvm.internal.markers.KMutableListIterator` @kind interface {
  `kotlin.collections.builders.ListBuilder` `kotlin.collections.builders.ListBuilder$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.builders.ListBuilder$a.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.builders.ListBuilder$a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this, `kotlin.collections.builders.ListBuilder` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/builders/ListBuilder$a;.<init>:(Lkotlin/collections/builders/ListBuilder;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0b1b48.  v0:= "list" @kind object;
  #L0b1b4c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b1b52.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0b1b58.  v1.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` := v2 @kind object;
  #L0b1b5c.  v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v3;
  #L0b1b60.  v2:= -1I;
  #L0b1b62.  v1.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v2;
  #L0b1b66.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$a;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0b1b78.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1b7c.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1b80.  v2:= v1 + 1;
  #L0b1b84.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v2;
  #L0b1b88.  call `add`(v0, v1, v4) @signature `Lkotlin/collections/builders/ListBuilder;.add:(ILjava/lang/Object;)V` @kind virtual;
  #L0b1b8e.  v4:= -1I;
  #L0b1b90.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v4;
  #L0b1b94.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.builders.ListBuilder$a` v2 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0b1a10.  v0:= v2.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1a14.  v1:= v2.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1a18.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L0b1a1e.  v1:= temp;
  #L0b1a20.  if v0 >= v1 then goto L0b1a28;
  #L0b1a24.  v0:= 1I;
  #L0b1a26.  goto L0b1a2a;
  #L0b1a28.  v0:= 0I;
  #L0b1a2a.  return v0;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b1a3c.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1a40.  if v0 <= 0 then goto L0b1a48;
  #L0b1a44.  v0:= 1I;
  #L0b1a46.  goto L0b1a4a;
  #L0b1a48.  v0:= 0I;
  #L0b1a4a.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0b1a90.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1a94.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1a98.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L0b1a9e.  v1:= temp;
  #L0b1aa0.  if v0 >= v1 then goto L0b1ad8;
  #L0b1aa4.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1aa8.  v1:= v0 + 1;
  #L0b1aac.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v1;
  #L0b1ab0.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v0;
  #L0b1ab4.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1ab8.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L0b1abe.  v0:= temp @kind object;
  #L0b1ac0.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1ac4.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L0b1aca.  v1:= temp;
  #L0b1acc.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L0b1ad0.  v1:= v1 + v2 @kind int;
  #L0b1ad2.  v0:= v0[v1] @kind object;
  #L0b1ad6.  return v0 @kind object;
  #L0b1ad8.  v0:= new `java.util.NoSuchElementException`;
  #L0b1adc.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0b1ae2.  throw v0;
}
procedure `int` `nextIndex`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b1a5c.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1a60.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0b1af4.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1af8.  if v0 <= 0 then goto L0b1b2c;
  #L0b1afc.  v0:= v0 + -1;
  #L0b1b00.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v0;
  #L0b1b04.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v0;
  #L0b1b08.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1b0c.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L0b1b12.  v0:= temp @kind object;
  #L0b1b14.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1b18.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L0b1b1e.  v1:= temp;
  #L0b1b20.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L0b1b24.  v1:= v1 + v2 @kind int;
  #L0b1b26.  v0:= v0[v1] @kind object;
  #L0b1b2a.  return v0 @kind object;
  #L0b1b2c.  v0:= new `java.util.NoSuchElementException`;
  #L0b1b30.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0b1b36.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b1a74.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L0b1a78.  v0:= v0 + -1;
  #L0b1a7c.  return v0;
}
procedure `void` `remove`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0b1ba8.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L0b1bac.  v1:= -1I;
  #L0b1bae.  if v0 == v1 then goto L0b1bb6;
  #L0b1bb2.  v2:= 1I;
  #L0b1bb4.  goto L0b1bb8;
  #L0b1bb6.  v2:= 0I;
  #L0b1bb8.  if v2 == 0 then goto L0b1bd4;
  #L0b1bbc.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1bc0.  call temp:= `remove`(v2, v0) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L0b1bc6.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L0b1bca.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v0;
  #L0b1bce.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v1;
  #L0b1bd2.  return @kind void;
  #L0b1bd4.  v0:= new `java.lang.IllegalStateException`;
  #L0b1bd8.  v1:= "Call next() or previous() before removing element from the iterator." @kind object;
  #L0b1bdc.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b1be2.  v1:= temp @kind object;
  #L0b1be4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b1bea.  throw v0;
}
procedure `void` `set`(`kotlin.collections.builders.ListBuilder$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$a;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0b1bfc.  v0:= v2.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L0b1c00.  v1:= -1I;
  #L0b1c02.  if v0 == v1 then goto L0b1c0a;
  #L0b1c06.  v1:= 1I;
  #L0b1c08.  goto L0b1c0c;
  #L0b1c0a.  v1:= 0I;
  #L0b1c0c.  if v1 == 0 then goto L0b1c1c;
  #L0b1c10.  v1:= v2.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L0b1c14.  call temp:= `set`(v1, v0, v3) @signature `Lkotlin/collections/builders/ListBuilder;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0b1c1a.  return @kind void;
  #L0b1c1c.  v3:= new `java.lang.IllegalStateException`;
  #L0b1c20.  v0:= "Call next() or previous() before replacing element from the iterator." @kind object;
  #L0b1c24.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b1c2a.  v0:= temp @kind object;
  #L0b1c2c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b1c32.  throw v3;
}
