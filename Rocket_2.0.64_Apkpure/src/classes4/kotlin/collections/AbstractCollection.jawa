record `kotlin.collections.AbstractCollection` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
procedure `void` `<init>`(`kotlin.collections.AbstractCollection` v0 @kind this) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L07dea8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07deae.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dc9c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07dca0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07dca4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07dcaa.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dcbc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07dcc0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07dcc4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07dcca.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.AbstractCollection` v2 @kind this) @signature `Lkotlin/collections/AbstractCollection;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07dec0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L07dec4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L07dec8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07dece.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.AbstractCollection` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07dcdc.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07dce2.  v0:= temp;
  #L07dce4.  v1:= 0I;
  #L07dce6.  if v0 == 0 then goto L07dcec;
  #L07dcea.  goto L07dd16;
  #L07dcec.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07dcf2.  v0:= temp @kind object;
  #L07dcf4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07dcfa.  v2:= temp;
  #L07dcfc.  if v2 == 0 then goto L07dd16;
  #L07dd00.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07dd06.  v2:= temp @kind object;
  #L07dd08.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07dd0e.  v2:= temp;
  #L07dd10.  if v2 == 0 then goto L07dcf4;
  #L07dd14.  v1:= 1I;
  #L07dd16.  return v1;
}
procedure `boolean` `containsAll`(`kotlin.collections.AbstractCollection` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/AbstractCollection;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07dd28.  v0:= "elements" @kind object;
  #L07dd2c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07dd32.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07dd38.  v0:= temp;
  #L07dd3a.  v1:= 1I;
  #L07dd3c.  if v0 == 0 then goto L07dd42;
  #L07dd40.  goto L07dd6c;
  #L07dd42.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07dd48.  v3:= temp @kind object;
  #L07dd4a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07dd50.  v0:= temp;
  #L07dd52.  if v0 == 0 then goto L07dd6c;
  #L07dd56.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07dd5c.  v0:= temp @kind object;
  #L07dd5e.  call temp:= `contains`(v2, v0) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L07dd64.  v0:= temp;
  #L07dd66.  if v0 != 0 then goto L07dd4a;
  #L07dd6a.  v1:= 0I;
  #L07dd6c.  return v1;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dd80.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L07dd86.  v0:= temp;
  #L07dd88.  if v0 != 0 then goto L07dd90;
  #L07dd8c.  v0:= 1I;
  #L07dd8e.  goto L07dd92;
  #L07dd90.  v0:= 0I;
  #L07dd92.  return v0;
}
procedure `java.util.Iterator` `iterator`() @signature `Lkotlin/collections/AbstractCollection;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dda4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07dda8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07ddac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ddb2.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ddc4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07ddc8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07ddcc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ddd2.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dde4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07dde8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07ddec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ddf2.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07de04.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @kind virtual;
  #L07de0a.  v0:= temp;
  #L07de0c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07de20.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L07de26.  v0:= temp @kind object;
  #L07de28.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07de3c.  v0:= "array" @kind object;
  #L07de40.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07de46.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L07de4c.  v2:= temp @kind object;
  #L07de4e.  v0:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt__CollectionsJVMKt.copyToArrayImpl>" @kind object;
  #L07de52.  call `checkNotNull`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07de58.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractCollection` v9 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07de6c.  v6:= new `kotlin.collections.AbstractCollection$a`;
  #L07de70.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractCollection$a;.<init>:(Lkotlin/collections/AbstractCollection;)V` @kind direct;
  #L07de76.  v1:= ", " @kind object;
  #L07de7a.  v2:= "[" @kind object;
  #L07de7e.  v3:= "]" @kind object;
  #L07de82.  v4:= 0I;
  #L07de84.  v5:= 0I;
  #L07de86.  v7:= 24I;
  #L07de8a.  v8:= 0I;
  #L07de8c.  v0:= v9 @kind object;
  #L07de8e.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07de94.  v0:= temp @kind object;
  #L07de96.  return v0 @kind object;
}
