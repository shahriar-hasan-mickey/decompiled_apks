record `kotlin.collections.AbstractIterator` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `kotlin.collections.c0` `kotlin.collections.AbstractIterator.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.collections.AbstractIterator.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07e000.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07e006.  v0:= `@@kotlin.collections.c0.b` @type ^`kotlin.collections.c0` @kind object;
  #L07e00a.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` := v0 @kind object;
  #L07e00e.  return @kind void;
}
procedure `boolean` `b`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.b:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L07df94.  v0:= `@@kotlin.collections.c0.d` @type ^`kotlin.collections.c0` @kind object;
  #L07df98.  v2.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` := v0 @kind object;
  #L07df9c.  call `computeNext`(v2) @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @kind virtual;
  #L07dfa2.  v0:= v2.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` @kind object;
  #L07dfa6.  v1:= `@@kotlin.collections.c0.a` @type ^`kotlin.collections.c0` @kind object;
  #L07dfaa.  if v0 != v1 then goto L07dfb2;
  #L07dfae.  v0:= 1I;
  #L07dfb0.  goto L07dfb4;
  #L07dfb2.  v0:= 0I;
  #L07dfb4.  return v0;
}
procedure `void` `computeNext`() @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `done`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L07e020.  v0:= `@@kotlin.collections.c0.c` @type ^`kotlin.collections.c0` @kind object;
  #L07e024.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` := v0 @kind object;
  #L07e028.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractIterator` v4 @kind this) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07df28.  v0:= v4.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` @kind object;
  #L07df2c.  v1:= `@@kotlin.collections.c0.d` @type ^`kotlin.collections.c0` @kind object;
  #L07df30.  v2:= 0I;
  #L07df32.  v3:= 1I;
  #L07df34.  if v0 == v1 then goto L07df3c;
  #L07df38.  v1:= 1I;
  #L07df3a.  goto L07df3e;
  #L07df3c.  v1:= 0I;
  #L07df3e.  if v1 == 0 then goto L07df6a;
  #L07df42.  v1:= `@@kotlin.collections.AbstractIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L07df46.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L07df4c.  v0:= temp;
  #L07df4e.  v0:= v1[v0];
  #L07df52.  if v0 == v3 then goto L07df68;
  #L07df56.  v1:= 2I;
  #L07df58.  if v0 == v1 then goto L07df66;
  #L07df5c.  call temp:= `b`(v4) @signature `Lkotlin/collections/AbstractIterator;.b:()Z` @kind direct;
  #L07df62.  v2:= temp;
  #L07df64.  goto L07df68;
  #L07df66.  v2:= 1I;
  #L07df68.  return v2;
  #L07df6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L07df6e.  v1:= "Failed requirement." @kind object;
  #L07df72.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L07df78.  v1:= temp @kind object;
  #L07df7a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07df80.  throw v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07dfc8.  call temp:= `hasNext`(v1) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @kind virtual;
  #L07dfce.  v0:= temp;
  #L07dfd0.  if v0 == 0 then goto L07dfe2;
  #L07dfd4.  v0:= `@@kotlin.collections.c0.b` @type ^`kotlin.collections.c0` @kind object;
  #L07dfd8.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` := v0 @kind object;
  #L07dfdc.  v0:= v1.`kotlin.collections.AbstractIterator.b` @type ^`java.lang.Object` @kind object;
  #L07dfe0.  return v0 @kind object;
  #L07dfe2.  v0:= new `java.util.NoSuchElementException`;
  #L07dfe6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L07dfec.  throw v0;
}
procedure `void` `remove`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e03c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L07e040.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L07e044.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e04a.  throw v0;
}
procedure `void` `setNext`(`kotlin.collections.AbstractIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L07e05c.  v0.`kotlin.collections.AbstractIterator.b` @type ^`java.lang.Object` := v1 @kind object;
  #L07e060.  v1:= `@@kotlin.collections.c0.a` @type ^`kotlin.collections.c0` @kind object;
  #L07e064.  v0.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.c0` := v1 @kind object;
  #L07e068.  return @kind void;
}
