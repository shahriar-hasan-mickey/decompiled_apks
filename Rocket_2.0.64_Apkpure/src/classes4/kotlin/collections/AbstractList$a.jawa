record `kotlin.collections.AbstractList$a` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.collections.AbstractList$a.a` @AccessFlag PRIVATE;
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$a` v0 @kind this, `kotlin.collections.AbstractList` v1 @kind object) @signature `Lkotlin/collections/AbstractList$a;.<init>:(Lkotlin/collections/AbstractList;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L07e404.  v0.`kotlin.collections.AbstractList$a.b` @type ^`kotlin.collections.AbstractList` := v1 @kind object;
  #L07e408.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07e40e.  return @kind void;
}
procedure `int` `b`(`kotlin.collections.AbstractList$a` v1 @kind this) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L07e3a8.  v0:= v1.`kotlin.collections.AbstractList$a.a` @type ^`int`;
  #L07e3ac.  return v0;
}
procedure `void` `c`(`kotlin.collections.AbstractList$a` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/AbstractList$a;.c:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L07e440.  v0.`kotlin.collections.AbstractList$a.a` @type ^`int` := v1;
  #L07e444.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractList$a` v2 @kind this) @signature `Lkotlin/collections/AbstractList$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e37c.  v0:= v2.`kotlin.collections.AbstractList$a.a` @type ^`int`;
  #L07e380.  v1:= v2.`kotlin.collections.AbstractList$a.b` @type ^`kotlin.collections.AbstractList` @kind object;
  #L07e384.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L07e38a.  v1:= temp;
  #L07e38c.  if v0 >= v1 then goto L07e394;
  #L07e390.  v0:= 1I;
  #L07e392.  goto L07e396;
  #L07e394.  v0:= 0I;
  #L07e396.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractList$a` v3 @kind this) @signature `Lkotlin/collections/AbstractList$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07e3c0.  call temp:= `hasNext`(v3) @signature `Lkotlin/collections/AbstractList$a;.hasNext:()Z` @kind virtual;
  #L07e3c6.  v0:= temp;
  #L07e3c8.  if v0 == 0 then goto L07e3e6;
  #L07e3cc.  v0:= v3.`kotlin.collections.AbstractList$a.b` @type ^`kotlin.collections.AbstractList` @kind object;
  #L07e3d0.  v1:= v3.`kotlin.collections.AbstractList$a.a` @type ^`int`;
  #L07e3d4.  v2:= v1 + 1;
  #L07e3d8.  v3.`kotlin.collections.AbstractList$a.a` @type ^`int` := v2;
  #L07e3dc.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L07e3e2.  v0:= temp @kind object;
  #L07e3e4.  return v0 @kind object;
  #L07e3e6.  v0:= new `java.util.NoSuchElementException`;
  #L07e3ea.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L07e3f0.  throw v0;
}
procedure `void` `remove`(`kotlin.collections.AbstractList$a` v2 @kind this) @signature `Lkotlin/collections/AbstractList$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e420.  v0:= new `java.lang.UnsupportedOperationException`;
  #L07e424.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L07e428.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e42e.  throw v0;
}
