record `kotlin.collections.AbstractList$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$Companion` v0 @kind this) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L07e14c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07e152.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L07e164.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:()V` @kind direct;
  #L07e16a.  return @kind void;
}
procedure `void` `checkBoundsIndexes$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/collections/AbstractList$Companion;.checkBoundsIndexes$kotlin_stdlib:(III)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07e17c.  v0:= "startIndex: " @kind object;
  #L07e180.  if v4 < 0 then goto L07e1c8;
  #L07e184.  if v5 > v6 then goto L07e1c8;
  #L07e188.  if v4 > v5 then goto L07e18e;
  #L07e18c.  return @kind void;
  #L07e18e.  v6:= new `java.lang.IllegalArgumentException`;
  #L07e192.  v1:= new `java.lang.StringBuilder`;
  #L07e196.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e19c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1a2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1a8.  v4:= " > endIndex: " @kind object;
  #L07e1ac.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1b2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e1be.  v4:= temp @kind object;
  #L07e1c0.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e1c6.  throw v6;
  #L07e1c8.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L07e1cc.  v2:= new `java.lang.StringBuilder`;
  #L07e1d0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e1d6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1dc.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1e2.  v4:= ", endIndex: " @kind object;
  #L07e1e6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1ec.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1f2.  v4:= ", size: " @kind object;
  #L07e1f6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e1fc.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e202.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e208.  v4:= temp @kind object;
  #L07e20a.  call `<init>`(v1, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e210.  throw v1;
}
procedure `void` `checkElementIndex$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07e224.  if v4 < 0 then goto L07e22e;
  #L07e228.  if v4 >= v5 then goto L07e22e;
  #L07e22c.  return @kind void;
  #L07e22e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L07e232.  v1:= new `java.lang.StringBuilder`;
  #L07e236.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e23c.  v2:= "index: " @kind object;
  #L07e240.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e246.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e24c.  v4:= ", size: " @kind object;
  #L07e250.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e256.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e25c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e262.  v4:= temp @kind object;
  #L07e264.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e26a.  throw v0;
}
procedure `void` `checkPositionIndex$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07e27c.  if v4 < 0 then goto L07e286;
  #L07e280.  if v4 > v5 then goto L07e286;
  #L07e284.  return @kind void;
  #L07e286.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L07e28a.  v1:= new `java.lang.StringBuilder`;
  #L07e28e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e294.  v2:= "index: " @kind object;
  #L07e298.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e29e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e2a4.  v4:= ", size: " @kind object;
  #L07e2a8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e2ae.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e2b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e2ba.  v4:= temp @kind object;
  #L07e2bc.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e2c2.  throw v0;
}
procedure `void` `checkRangeIndexes$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/collections/AbstractList$Companion;.checkRangeIndexes$kotlin_stdlib:(III)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07e2d4.  v0:= "fromIndex: " @kind object;
  #L07e2d8.  if v4 < 0 then goto L07e320;
  #L07e2dc.  if v5 > v6 then goto L07e320;
  #L07e2e0.  if v4 > v5 then goto L07e2e6;
  #L07e2e4.  return @kind void;
  #L07e2e6.  v6:= new `java.lang.IllegalArgumentException`;
  #L07e2ea.  v1:= new `java.lang.StringBuilder`;
  #L07e2ee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e2f4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e2fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e300.  v4:= " > toIndex: " @kind object;
  #L07e304.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e30a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e310.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e316.  v4:= temp @kind object;
  #L07e318.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e31e.  throw v6;
  #L07e320.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L07e324.  v2:= new `java.lang.StringBuilder`;
  #L07e328.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e32e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e334.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e33a.  v4:= ", toIndex: " @kind object;
  #L07e33e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e344.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e34a.  v4:= ", size: " @kind object;
  #L07e34e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e354.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e35a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e360.  v4:= temp @kind object;
  #L07e362.  call `<init>`(v1, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e368.  throw v1;
}
procedure `boolean` `orderedEquals$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v3 @kind this, `java.util.Collection` v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/collections/AbstractList$Companion;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07e07c.  v0:= "c" @kind object;
  #L07e080.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07e086.  v0:= "other" @kind object;
  #L07e08a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07e090.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L07e096.  v0:= temp;
  #L07e098.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L07e09e.  v1:= temp;
  #L07e0a0.  v2:= 0I;
  #L07e0a2.  if v0 == v1 then goto L07e0a8;
  #L07e0a6.  return v2;
  #L07e0a8.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07e0ae.  v5:= temp @kind object;
  #L07e0b0.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07e0b6.  v4:= temp @kind object;
  #L07e0b8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07e0be.  v0:= temp;
  #L07e0c0.  if v0 == 0 then goto L07e0e2;
  #L07e0c4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07e0ca.  v0:= temp @kind object;
  #L07e0cc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07e0d2.  v1:= temp @kind object;
  #L07e0d4.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07e0da.  v0:= temp;
  #L07e0dc.  if v0 != 0 then goto L07e0b8;
  #L07e0e0.  return v2;
  #L07e0e2.  v4:= 1I;
  #L07e0e4.  return v4;
}
procedure `int` `orderedHashCode$kotlin_stdlib`(`kotlin.collections.AbstractList$Companion` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/AbstractList$Companion;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L07e0f8.  v0:= "c" @kind object;
  #L07e0fc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07e102.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07e108.  v3:= temp @kind object;
  #L07e10a.  v0:= 1I;
  #L07e10c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07e112.  v1:= temp;
  #L07e114.  if v1 == 0 then goto L07e138;
  #L07e118.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07e11e.  v1:= temp @kind object;
  #L07e120.  v0:= v0 * 31;
  #L07e124.  if v1 == 0 then goto L07e132;
  #L07e128.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L07e12e.  v1:= temp;
  #L07e130.  goto L07e134;
  #L07e132.  v1:= 0I;
  #L07e134.  v0:= v0 + v1 @kind int;
  #L07e136.  goto L07e10c;
  #L07e138.  return v0;
}
