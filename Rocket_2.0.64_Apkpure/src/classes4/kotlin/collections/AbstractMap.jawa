record `kotlin.collections.AbstractMap` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Set` `kotlin.collections.AbstractMap.a` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Collection` `kotlin.collections.AbstractMap.b` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.collections.AbstractMap$Companion` `@@kotlin.collections.AbstractMap.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07f060.  v0:= new `kotlin.collections.AbstractMap$Companion`;
  #L07f064.  v1:= 0I;
  #L07f066.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L07f06c.  `@@kotlin.collections.AbstractMap.Companion` @type ^`kotlin.collections.AbstractMap$Companion` := v0 @kind object;
  #L07f070.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractMap` v0 @kind this) @signature `Lkotlin/collections/AbstractMap;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L07f084.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f08a.  return @kind void;
}
procedure `java.lang.String` `access$toString`(`kotlin.collections.AbstractMap` v0 @kind object, `java.util.Map$Entry` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.access$toString:(Lkotlin/collections/AbstractMap;Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L07ee6c.  call temp:= `d`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.d:(Ljava/util/Map$Entry;)Ljava/lang/String;` @kind direct;
  #L07ee72.  v0:= temp @kind object;
  #L07ee74.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `b`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07ef9c.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L07efa2.  v0:= temp @kind object;
  #L07efa4.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07efaa.  v0:= temp @kind object;
  #L07efac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07efb2.  v1:= temp;
  #L07efb4.  if v1 == 0 then goto L07efdc;
  #L07efb8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07efbe.  v1:= temp @kind object;
  #L07efc0.  v2:= v1 @kind object;
  #L07efc2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L07efc6.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L07efcc.  v2:= temp @kind object;
  #L07efce.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07efd4.  v2:= temp;
  #L07efd6.  if v2 == 0 then goto L07efac;
  #L07efda.  goto L07efde;
  #L07efdc.  v1:= 0I;
  #L07efde.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L07efe2.  return v1 @kind object;
}
procedure `java.lang.String` `c`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;

  #L07eecc.  if v1 != v0 then goto L07eed6;
  #L07eed0.  v1:= "(this Map)" @kind object;
  #L07eed4.  goto L07eede;
  #L07eed6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07eedc.  v1:= temp @kind object;
  #L07eede.  return v1 @kind object;
}
procedure `java.lang.String` `d`(`kotlin.collections.AbstractMap` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lkotlin/collections/AbstractMap;.d:(Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L07eef0.  v0:= new `java.lang.StringBuilder`;
  #L07eef4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07eefa.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L07ef00.  v1:= temp @kind object;
  #L07ef02.  call temp:= `c`(v2, v1) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L07ef08.  v1:= temp @kind object;
  #L07ef0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ef10.  v1:= 61I;
  #L07ef14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ef1a.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L07ef20.  v3:= temp @kind object;
  #L07ef22.  call temp:= `c`(v2, v3) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L07ef28.  v3:= temp @kind object;
  #L07ef2a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ef30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ef36.  v3:= temp @kind object;
  #L07ef38.  return v3 @kind object;
}
procedure `void` `clear`(`kotlin.collections.AbstractMap` v2 @kind this) @signature `Lkotlin/collections/AbstractMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07f09c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L07f0a0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L07f0a4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f0aa.  throw v0;
}
procedure `boolean` `containsEntry$kotlin_stdlib`(`kotlin.collections.AbstractMap` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07ebf8.  v0:= 0I;
  #L07ebfa.  if v4 != 0 then goto L07ec00;
  #L07ebfe.  return v0;
  #L07ec00.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L07ec06.  v1:= temp @kind object;
  #L07ec08.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L07ec0e.  v4:= temp @kind object;
  #L07ec10.  v2:= "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.get, V of kotlin.collections.MapsKt__MapsKt.get>" @kind object;
  #L07ec14.  call `checkNotNull`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07ec1a.  call temp:= `get`(v3, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L07ec20.  v2:= temp @kind object;
  #L07ec22.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07ec28.  v4:= temp;
  #L07ec2a.  if v4 != 0 then goto L07ec30;
  #L07ec2e.  return v0;
  #L07ec30.  if v2 != 0 then goto L07ec4c;
  #L07ec34.  v4:= "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.containsKey, *>" @kind object;
  #L07ec38.  call `checkNotNull`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07ec3e.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L07ec44.  v4:= temp;
  #L07ec46.  if v4 != 0 then goto L07ec4c;
  #L07ec4a.  return v0;
  #L07ec4c.  v4:= 1I;
  #L07ec4e.  return v4;
}
procedure `boolean` `containsKey`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L07ec60.  call temp:= `b`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L07ec66.  v1:= temp @kind object;
  #L07ec68.  if v1 == 0 then goto L07ec70;
  #L07ec6c.  v1:= 1I;
  #L07ec6e.  goto L07ec72;
  #L07ec70.  v1:= 0I;
  #L07ec72.  return v1;
}
procedure `boolean` `containsValue`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07ec84.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L07ec8a.  v0:= temp @kind object;
  #L07ec8c.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L07ec90.  v2:= 0I;
  #L07ec92.  if v1 == 0 then goto L07eca4;
  #L07ec96.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07ec9c.  v1:= temp;
  #L07ec9e.  if v1 == 0 then goto L07eca4;
  #L07eca2.  goto L07ecda;
  #L07eca4.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07ecaa.  v0:= temp @kind object;
  #L07ecac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07ecb2.  v1:= temp;
  #L07ecb4.  if v1 == 0 then goto L07ecda;
  #L07ecb8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07ecbe.  v1:= temp @kind object;
  #L07ecc0.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L07ecc4.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L07ecca.  v1:= temp @kind object;
  #L07eccc.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07ecd2.  v1:= temp;
  #L07ecd4.  if v1 == 0 then goto L07ecac;
  #L07ecd8.  v2:= 1I;
  #L07ecda.  return v2;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07eff4.  call temp:= `getEntries`(v1) @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @kind virtual;
  #L07effa.  v0:= temp @kind object;
  #L07effc.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractMap` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/AbstractMap;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ecec.  v0:= 1I;
  #L07ecee.  if v5 != v4 then goto L07ecf4;
  #L07ecf2.  return v0;
  #L07ecf4.  v1:= instanceof @variable v5 @type ^`java.util.Map` @kind boolean;
  #L07ecf8.  v2:= 0I;
  #L07ecfa.  if v1 != 0 then goto L07ed00;
  #L07ecfe.  return v2;
  #L07ed00.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L07ed06.  v1:= temp;
  #L07ed08.  v5:= (`java.util.Map`) v5 @kind object;
  #L07ed0c.  call temp:= `size`(v5) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L07ed12.  v3:= temp;
  #L07ed14.  if v1 == v3 then goto L07ed1a;
  #L07ed18.  return v2;
  #L07ed1a.  call temp:= `entrySet`(v5) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L07ed20.  v5:= temp @kind object;
  #L07ed22.  v1:= instanceof @variable v5 @type ^`java.util.Collection` @kind boolean;
  #L07ed26.  if v1 == 0 then goto L07ed38;
  #L07ed2a.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L07ed30.  v1:= temp;
  #L07ed32.  if v1 == 0 then goto L07ed38;
  #L07ed36.  goto L07ed66;
  #L07ed38.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07ed3e.  v5:= temp @kind object;
  #L07ed40.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07ed46.  v1:= temp;
  #L07ed48.  if v1 == 0 then goto L07ed66;
  #L07ed4c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07ed52.  v1:= temp @kind object;
  #L07ed54.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L07ed58.  call temp:= `containsEntry$kotlin_stdlib`(v4, v1) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L07ed5e.  v1:= temp;
  #L07ed60.  if v1 != 0 then goto L07ed40;
  #L07ed64.  v0:= 0I;
  #L07ed66.  return v0;
}
procedure `java.lang.Object` `get`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L07ee00.  call temp:= `b`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L07ee06.  v1:= temp @kind object;
  #L07ee08.  if v1 == 0 then goto L07ee16;
  #L07ee0c.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L07ee12.  v1:= temp @kind object;
  #L07ee14.  goto L07ee18;
  #L07ee16.  v1:= 0I;
  #L07ee18.  return v1 @kind object;
}
procedure `java.util.Set` `getEntries`() @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Set` `getKeys`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f010.  v0:= v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` @kind object;
  #L07f014.  if v0 != 0 then goto L07f026;
  #L07f018.  v0:= new `kotlin.collections.AbstractMap$keys$1`;
  #L07f01c.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$keys$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L07f022.  v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` := v0 @kind object;
  #L07f026.  v0:= v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` @kind object;
  #L07f02a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L07f030.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ed9c.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L07eda2.  v0:= temp @kind object;
  #L07eda4.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L07edaa.  v0:= temp;
  #L07edac.  return v0;
}
procedure `java.util.Collection` `getValues`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ef4c.  v0:= v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` @kind object;
  #L07ef50.  if v0 != 0 then goto L07ef62;
  #L07ef54.  v0:= new `kotlin.collections.AbstractMap$values$1`;
  #L07ef58.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$values$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L07ef5e.  v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` := v0 @kind object;
  #L07ef62.  v0:= v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` @kind object;
  #L07ef66.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L07ef6c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07edc0.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L07edc6.  v0:= temp @kind object;
  #L07edc8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L07edce.  v0:= temp;
  #L07edd0.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ed78.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L07ed7e.  v0:= temp;
  #L07ed80.  if v0 != 0 then goto L07ed88;
  #L07ed84.  v0:= 1I;
  #L07ed86.  goto L07ed8a;
  #L07ed88.  v0:= 0I;
  #L07ed8a.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07f044.  call temp:= `getKeys`(v1) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @kind virtual;
  #L07f04a.  v0:= temp @kind object;
  #L07f04c.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L07ee2c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L07ee30.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L07ee34.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ee3a.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.AbstractMap` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f0bc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07f0c0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07f0c4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f0ca.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ee4c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07ee50.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07ee54.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ee5a.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07ede4.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @kind virtual;
  #L07edea.  v0:= temp;
  #L07edec.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractMap` v9 @kind this) @signature `Lkotlin/collections/AbstractMap;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07ee88.  call temp:= `entrySet`(v9) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L07ee8e.  v0:= temp @kind object;
  #L07ee90.  v6:= new `kotlin.collections.AbstractMap$a`;
  #L07ee94.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractMap$a;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L07ee9a.  v1:= ", " @kind object;
  #L07ee9e.  v2:= "{" @kind object;
  #L07eea2.  v3:= "}" @kind object;
  #L07eea6.  v4:= 0I;
  #L07eea8.  v5:= 0I;
  #L07eeaa.  v7:= 24I;
  #L07eeae.  v8:= 0I;
  #L07eeb0.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07eeb6.  v0:= temp @kind object;
  #L07eeb8.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07ef80.  call temp:= `getValues`(v1) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L07ef86.  v0:= temp @kind object;
  #L07ef88.  return v0 @kind object;
}
