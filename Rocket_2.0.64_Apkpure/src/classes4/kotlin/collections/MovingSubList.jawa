record `kotlin.collections.MovingSubList` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `java.util.List` `kotlin.collections.MovingSubList.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.MovingSubList.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.MovingSubList.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.MovingSubList` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lkotlin/collections/MovingSubList;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0afa80.  v0:= "list" @kind object;
  #L0afa84.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0afa8a.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L0afa90.  v1.`kotlin.collections.MovingSubList.a` @type ^`java.util.List` := v2 @kind object;
  #L0afa94.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlin.collections.MovingSubList` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/MovingSubList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0afa4c.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L0afa50.  v1:= v2.`kotlin.collections.MovingSubList.c` @type ^`int`;
  #L0afa54.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L0afa5a.  v0:= v2.`kotlin.collections.MovingSubList.a` @type ^`java.util.List` @kind object;
  #L0afa5e.  v1:= v2.`kotlin.collections.MovingSubList.b` @type ^`int`;
  #L0afa62.  v1:= v1 + v3 @kind int;
  #L0afa64.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0afa6a.  v3:= temp @kind object;
  #L0afa6c.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.MovingSubList` v1 @kind this) @signature `Lkotlin/collections/MovingSubList;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0afa34.  v0:= v1.`kotlin.collections.MovingSubList.c` @type ^`int`;
  #L0afa38.  return v0;
}
procedure `void` `move`(`kotlin.collections.MovingSubList` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lkotlin/collections/MovingSubList;.move:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0afaa8.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L0afaac.  v1:= v2.`kotlin.collections.MovingSubList.a` @type ^`java.util.List` @kind object;
  #L0afab0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0afab6.  v1:= temp;
  #L0afab8.  call `checkRangeIndexes$kotlin_stdlib`(v0, v3, v4, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkRangeIndexes$kotlin_stdlib:(III)V` @kind virtual;
  #L0afabe.  v2.`kotlin.collections.MovingSubList.b` @type ^`int` := v3;
  #L0afac2.  v4:= v4 - v3 @kind int;
  #L0afac4.  v2.`kotlin.collections.MovingSubList.c` @type ^`int` := v4;
  #L0afac8.  return @kind void;
}
