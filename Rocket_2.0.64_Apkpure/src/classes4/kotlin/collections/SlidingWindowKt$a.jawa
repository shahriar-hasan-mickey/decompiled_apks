record `kotlin.collections.SlidingWindowKt$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$a.a` @AccessFlag ;
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$a.b` @AccessFlag ;
  `int` `kotlin.collections.SlidingWindowKt$a.c` @AccessFlag ;
  `int` `kotlin.collections.SlidingWindowKt$a.d` @AccessFlag ;
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$a.e` @AccessFlag PRIVATE_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$a.f` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$a.g` @AccessFlag FINAL_SYNTHETIC;
  `java.util.Iterator` `kotlin.collections.SlidingWindowKt$a.h` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.collections.SlidingWindowKt$a.i` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.collections.SlidingWindowKt$a.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.SlidingWindowKt$a` v0 @kind this, `int` v1 , `int` v2 , `java.util.Iterator` v3 @kind object, `boolean` v4 , `boolean` v5 , `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$a;.<init>:(IILjava/util/Iterator;ZZLkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0b0f50.  v0.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int` := v1;
  #L0b0f54.  v0.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int` := v2;
  #L0b0f58.  v0.`kotlin.collections.SlidingWindowKt$a.h` @type ^`java.util.Iterator` := v3 @kind object;
  #L0b0f5c.  v0.`kotlin.collections.SlidingWindowKt$a.i` @type ^`boolean` := v4 @kind boolean;
  #L0b0f60.  v0.`kotlin.collections.SlidingWindowKt$a.j` @type ^`boolean` := v5 @kind boolean;
  #L0b0f64.  v1:= 2I;
  #L0b0f66.  call `<init>`(v0, v1, v6) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L0b0f6c.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.collections.SlidingWindowKt$a` v8 @kind this, `java.lang.Object` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0b0f18.  v7:= new `kotlin.collections.SlidingWindowKt$a`;
  #L0b0f1c.  v1:= v8.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0f20.  v2:= v8.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int`;
  #L0b0f24.  v3:= v8.`kotlin.collections.SlidingWindowKt$a.h` @type ^`java.util.Iterator` @kind object;
  #L0b0f28.  v4:= v8.`kotlin.collections.SlidingWindowKt$a.i` @type ^`boolean` @kind boolean;
  #L0b0f2c.  v5:= v8.`kotlin.collections.SlidingWindowKt$a.j` @type ^`boolean` @kind boolean;
  #L0b0f30.  v0:= v7 @kind object;
  #L0b0f32.  v6:= v10 @kind object;
  #L0b0f34.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/SlidingWindowKt$a;.<init>:(IILjava/util/Iterator;ZZLkotlin/coroutines/Continuation;)V` @kind direct;
  #L0b0f3a.  v7.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v9 @kind object;
  #L0b0f3e.  return v7 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.collections.SlidingWindowKt$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0b0be0.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L0b0be4.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L0b0be8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$a;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0bee.  v1:= temp @kind object;
  #L0b0bf0.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.collections.SlidingWindowKt$a` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$a;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0b0c04.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L0b0c0a.  v1:= temp @kind object;
  #L0b0c0c.  v1:= (`kotlin.collections.SlidingWindowKt$a`) v1 @kind object;
  #L0b0c10.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0b0c14.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0b0c1a.  v1:= temp @kind object;
  #L0b0c1c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.collections.SlidingWindowKt$a` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L0b0c30.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0b0c36.  v0:= temp @kind object;
  #L0b0c38.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int`;
  #L0b0c3c.  v2:= 5I;
  #L0b0c3e.  v3:= 4I;
  #L0b0c40.  v4:= 3I;
  #L0b0c42.  v5:= 2I;
  #L0b0c44.  v6:= 1I;
  #L0b0c46.  v7:= 0I;
  #L0b0c48.  if v1 == 0 then goto L0b0ce4;
  #L0b0c4c.  if v1 == v6 then goto L0b0cbc;
  #L0b0c50.  if v1 == v5 then goto L0b0cb2;
  #L0b0c54.  if v1 == v4 then goto L0b0c8e;
  #L0b0c58.  if v1 == v3 then goto L0b0c72;
  #L0b0c5c.  if v1 != v2 then goto L0b0c62;
  #L0b0c60.  goto L0b0cb2;
  #L0b0c62.  v13:= new `java.lang.IllegalStateException`;
  #L0b0c66.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L0b0c6a.  call `<init>`(v13, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b0c70.  throw v13;
  #L0b0c72.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` @kind object;
  #L0b0c76.  v1:= (`kotlin.collections.RingBuffer`) v1 @kind object;
  #L0b0c7a.  v4:= v12.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` @kind object;
  #L0b0c7e.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L0b0c82.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0b0c88.  v13:= v12 @kind object;
  #L0b0c8a.  goto L0b0eca;
  #L0b0c8e.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` @kind object;
  #L0b0c92.  v1:= (`java.util.Iterator`) v1 @kind object;
  #L0b0c96.  v5:= v12.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` @kind object;
  #L0b0c9a.  v5:= (`kotlin.collections.RingBuffer`) v5 @kind object;
  #L0b0c9e.  v8:= v12.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` @kind object;
  #L0b0ca2.  v8:= (`kotlin.sequences.SequenceScope`) v8 @kind object;
  #L0b0ca6.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0b0cac.  v13:= v12 @kind object;
  #L0b0cae.  goto L0b0e6e;
  #L0b0cb2.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0b0cb8.  goto L0b0f02;
  #L0b0cbc.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.c` @type ^`int`;
  #L0b0cc0.  v2:= v12.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` @kind object;
  #L0b0cc4.  v2:= (`java.util.Iterator`) v2 @kind object;
  #L0b0cc8.  v3:= v12.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` @kind object;
  #L0b0ccc.  v3:= (`java.util.ArrayList`) v3 @kind object;
  #L0b0cd0.  v4:= v12.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` @kind object;
  #L0b0cd4.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L0b0cd8.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0b0cde.  v13:= v12 @kind object;
  #L0b0ce0.  v8:= v1;
  #L0b0ce2.  goto L0b0d80;
  #L0b0ce4.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0b0cea.  v13:= v12.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` @kind object;
  #L0b0cee.  v13:= (`kotlin.sequences.SequenceScope`) v13 @kind object;
  #L0b0cf2.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0cf6.  v8:= 1024I;
  #L0b0cfa.  call temp:= `coerceAtMost`(v1, v8) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @kind static;
  #L0b0d00.  v1:= temp;
  #L0b0d02.  v8:= v12.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int`;
  #L0b0d06.  v9:= v12.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0d0a.  v8:= v8 - v9 @kind int;
  #L0b0d0c.  if v8 < 0 then goto L0b0de8;
  #L0b0d10.  v2:= new `java.util.ArrayList`;
  #L0b0d14.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L0b0d1a.  v1:= 0I;
  #L0b0d1c.  v3:= v12.`kotlin.collections.SlidingWindowKt$a.h` @type ^`java.util.Iterator` @kind object;
  #L0b0d20.  v4:= v13 @kind object;
  #L0b0d22.  v13:= v12 @kind object;
  #L0b0d24.  v11:= v3 @kind object;
  #L0b0d26.  v3:= v2 @kind object;
  #L0b0d28.  v2:= v11 @kind object;
  #L0b0d2a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0b0d30.  v9:= temp;
  #L0b0d32.  if v9 == 0 then goto L0b0da4;
  #L0b0d36.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0b0d3c.  v9:= temp @kind object;
  #L0b0d3e.  if v1 <= 0 then goto L0b0d48;
  #L0b0d42.  v1:= v1 + -1;
  #L0b0d46.  goto L0b0d2a;
  #L0b0d48.  call temp:= `add`(v3, v9) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L0b0d4e.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L0b0d54.  v9:= temp;
  #L0b0d56.  v10:= v13.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0d5a.  if v9 != v10 then goto L0b0d2a;
  #L0b0d5e.  v13.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v4 @kind object;
  #L0b0d62.  v13.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` := v3 @kind object;
  #L0b0d66.  v13.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L0b0d6a.  v13.`kotlin.collections.SlidingWindowKt$a.c` @type ^`int` := v8;
  #L0b0d6e.  v13.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int` := v6;
  #L0b0d72.  call temp:= `yield`(v4, v3, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0d78.  v1:= temp @kind object;
  #L0b0d7a.  if v1 != v0 then goto L0b0d80;
  #L0b0d7e.  return v0 @kind object;
  #L0b0d80.  v1:= v13.`kotlin.collections.SlidingWindowKt$a.i` @type ^`boolean` @kind boolean;
  #L0b0d84.  if v1 == 0 then goto L0b0d90;
  #L0b0d88.  call `clear`(v3) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L0b0d8e.  goto L0b0da0;
  #L0b0d90.  v1:= new `java.util.ArrayList`;
  #L0b0d94.  v3:= v13.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0d98.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L0b0d9e.  v3:= v1 @kind object;
  #L0b0da0.  v1:= v8;
  #L0b0da2.  goto L0b0d2a;
  #L0b0da4.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L0b0daa.  v1:= temp;
  #L0b0dac.  v1:= v1 ^~ v6 @kind int;
  #L0b0dae.  if v1 == 0 then goto L0b0f02;
  #L0b0db2.  v1:= v13.`kotlin.collections.SlidingWindowKt$a.j` @type ^`boolean` @kind boolean;
  #L0b0db6.  if v1 != 0 then goto L0b0dca;
  #L0b0dba.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L0b0dc0.  v1:= temp;
  #L0b0dc2.  v2:= v13.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0dc6.  if v1 != v2 then goto L0b0f02;
  #L0b0dca.  v13.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0dce.  v13.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0dd2.  v13.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0dd6.  v13.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int` := v5;
  #L0b0dda.  call temp:= `yield`(v4, v3, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0de0.  v13:= temp @kind object;
  #L0b0de2.  if v13 != v0 then goto L0b0f02;
  #L0b0de6.  return v0 @kind object;
  #L0b0de8.  v5:= new `kotlin.collections.RingBuffer`;
  #L0b0dec.  call `<init>`(v5, v1) @signature `Lkotlin/collections/RingBuffer;.<init>:(I)V` @kind direct;
  #L0b0df2.  v1:= v12.`kotlin.collections.SlidingWindowKt$a.h` @type ^`java.util.Iterator` @kind object;
  #L0b0df6.  v8:= v13 @kind object;
  #L0b0df8.  v13:= v12 @kind object;
  #L0b0dfa.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0b0e00.  v9:= temp;
  #L0b0e02.  if v9 == 0 then goto L0b0e7a;
  #L0b0e06.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0b0e0c.  v9:= temp @kind object;
  #L0b0e0e.  call `e`(v5, v9) @signature `Lkotlin/collections/RingBuffer;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L0b0e14.  call temp:= `g`(v5) @signature `Lkotlin/collections/RingBuffer;.g:()Z` @kind virtual;
  #L0b0e1a.  v9:= temp;
  #L0b0e1c.  if v9 == 0 then goto L0b0dfa;
  #L0b0e20.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0e26.  v9:= temp;
  #L0b0e28.  v10:= v13.`kotlin.collections.SlidingWindowKt$a.f` @type ^`int`;
  #L0b0e2c.  if v9 >= v10 then goto L0b0e3a;
  #L0b0e30.  call temp:= `f`(v5, v10) @signature `Lkotlin/collections/RingBuffer;.f:(I)Lkotlin/collections/RingBuffer;` @kind virtual;
  #L0b0e36.  v5:= temp @kind object;
  #L0b0e38.  goto L0b0dfa;
  #L0b0e3a.  v9:= v13.`kotlin.collections.SlidingWindowKt$a.i` @type ^`boolean` @kind boolean;
  #L0b0e3e.  if v9 == 0 then goto L0b0e46;
  #L0b0e42.  v9:= v5 @kind object;
  #L0b0e44.  goto L0b0e50;
  #L0b0e46.  v9:= new `java.util.ArrayList`;
  #L0b0e4a.  call `<init>`(v9, v5) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L0b0e50.  v13.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v8 @kind object;
  #L0b0e54.  v13.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` := v5 @kind object;
  #L0b0e58.  v13.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L0b0e5c.  v13.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int` := v4;
  #L0b0e60.  call temp:= `yield`(v8, v9, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0e66.  v9:= temp @kind object;
  #L0b0e68.  if v9 != v0 then goto L0b0e6e;
  #L0b0e6c.  return v0 @kind object;
  #L0b0e6e.  v9:= v13.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int`;
  #L0b0e72.  call `h`(v5, v9) @signature `Lkotlin/collections/RingBuffer;.h:(I)V` @kind virtual;
  #L0b0e78.  goto L0b0dfa;
  #L0b0e7a.  v1:= v13.`kotlin.collections.SlidingWindowKt$a.j` @type ^`boolean` @kind boolean;
  #L0b0e7e.  if v1 == 0 then goto L0b0f02;
  #L0b0e82.  v1:= v5 @kind object;
  #L0b0e84.  v4:= v8 @kind object;
  #L0b0e86.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0e8c.  v5:= temp;
  #L0b0e8e.  v8:= v13.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int`;
  #L0b0e92.  if v5 <= v8 then goto L0b0ed6;
  #L0b0e96.  v5:= v13.`kotlin.collections.SlidingWindowKt$a.i` @type ^`boolean` @kind boolean;
  #L0b0e9a.  if v5 == 0 then goto L0b0ea2;
  #L0b0e9e.  v5:= v1 @kind object;
  #L0b0ea0.  goto L0b0eac;
  #L0b0ea2.  v5:= new `java.util.ArrayList`;
  #L0b0ea6.  call `<init>`(v5, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L0b0eac.  v13.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v4 @kind object;
  #L0b0eb0.  v13.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` := v1 @kind object;
  #L0b0eb4.  v13.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0eb8.  v13.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int` := v3;
  #L0b0ebc.  call temp:= `yield`(v4, v5, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0ec2.  v5:= temp @kind object;
  #L0b0ec4.  if v5 != v0 then goto L0b0eca;
  #L0b0ec8.  return v0 @kind object;
  #L0b0eca.  v5:= v13.`kotlin.collections.SlidingWindowKt$a.g` @type ^`int`;
  #L0b0ece.  call `h`(v1, v5) @signature `Lkotlin/collections/RingBuffer;.h:(I)V` @kind virtual;
  #L0b0ed4.  goto L0b0e86;
  #L0b0ed6.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L0b0edc.  v3:= temp;
  #L0b0ede.  v3:= v3 ^~ v6 @kind int;
  #L0b0ee0.  if v3 == 0 then goto L0b0f02;
  #L0b0ee4.  v13.`kotlin.collections.SlidingWindowKt$a.e` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0ee8.  v13.`kotlin.collections.SlidingWindowKt$a.a` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0eec.  v13.`kotlin.collections.SlidingWindowKt$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L0b0ef0.  v13.`kotlin.collections.SlidingWindowKt$a.d` @type ^`int` := v2;
  #L0b0ef4.  call temp:= `yield`(v4, v1, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0b0efa.  v13:= temp @kind object;
  #L0b0efc.  if v13 != v0 then goto L0b0f02;
  #L0b0f00.  return v0 @kind object;
  #L0b0f02.  v13:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0b0f06.  return v13 @kind object;
}
