record `kotlin.collections.AbstractList$c` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$c.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.AbstractList$c.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.AbstractList$c.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$c` v1 @kind this, `kotlin.collections.AbstractList` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lkotlin/collections/AbstractList$c;.<init>:(Lkotlin/collections/AbstractList;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07e5c8.  v0:= "list" @kind object;
  #L07e5cc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L07e5d2.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L07e5d8.  v1.`kotlin.collections.AbstractList$c.a` @type ^`kotlin.collections.AbstractList` := v2 @kind object;
  #L07e5dc.  v1.`kotlin.collections.AbstractList$c.b` @type ^`int` := v3;
  #L07e5e0.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07e5e4.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L07e5ea.  v2:= temp;
  #L07e5ec.  call `checkRangeIndexes$kotlin_stdlib`(v0, v3, v4, v2) @signature `Lkotlin/collections/AbstractList$Companion;.checkRangeIndexes$kotlin_stdlib:(III)V` @kind virtual;
  #L07e5f2.  v4:= v4 - v3 @kind int;
  #L07e5f4.  v1.`kotlin.collections.AbstractList$c.c` @type ^`int` := v4;
  #L07e5f8.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlin.collections.AbstractList$c` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/AbstractList$c;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e594.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07e598.  v1:= v2.`kotlin.collections.AbstractList$c.c` @type ^`int`;
  #L07e59c.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L07e5a2.  v0:= v2.`kotlin.collections.AbstractList$c.a` @type ^`kotlin.collections.AbstractList` @kind object;
  #L07e5a6.  v1:= v2.`kotlin.collections.AbstractList$c.b` @type ^`int`;
  #L07e5aa.  v1:= v1 + v3 @kind int;
  #L07e5ac.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L07e5b2.  v3:= temp @kind object;
  #L07e5b4.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.AbstractList$c` v1 @kind this) @signature `Lkotlin/collections/AbstractList$c;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e57c.  v0:= v1.`kotlin.collections.AbstractList$c.c` @type ^`int`;
  #L07e580.  return v0;
}
