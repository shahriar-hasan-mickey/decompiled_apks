record `kotlin.collections.AbstractList$b` @kind class @AccessFlag  extends `kotlin.collections.AbstractList$a` @kind class, `java.util.ListIterator` @kind interface {
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$b` v1 @kind this, `kotlin.collections.AbstractList` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07e508.  v1.`kotlin.collections.AbstractList$b.c` @type ^`kotlin.collections.AbstractList` := v2 @kind object;
  #L07e50c.  call `<init>`(v1, v2) @signature `Lkotlin/collections/AbstractList$a;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L07e512.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07e516.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L07e51c.  v2:= temp;
  #L07e51e.  call `checkPositionIndex$kotlin_stdlib`(v0, v3, v2) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L07e524.  call `c`(v1, v3) @signature `Lkotlin/collections/AbstractList$a;.c:(I)V` @kind virtual;
  #L07e52a.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$b;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e53c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07e540.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07e544.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e54a.  throw v2;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e458.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L07e45e.  v0:= temp;
  #L07e460.  if v0 <= 0 then goto L07e468;
  #L07e464.  v0:= 1I;
  #L07e466.  goto L07e46a;
  #L07e468.  v0:= 0I;
  #L07e46a.  return v0;
}
procedure `int` `nextIndex`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e47c.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L07e482.  v0:= temp;
  #L07e484.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.AbstractList$b` v2 @kind this) @signature `Lkotlin/collections/AbstractList$b;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e4b8.  call temp:= `hasPrevious`(v2) @signature `Lkotlin/collections/AbstractList$b;.hasPrevious:()Z` @kind virtual;
  #L07e4be.  v0:= temp;
  #L07e4c0.  if v0 == 0 then goto L07e4ec;
  #L07e4c4.  v0:= v2.`kotlin.collections.AbstractList$b.c` @type ^`kotlin.collections.AbstractList` @kind object;
  #L07e4c8.  call temp:= `b`(v2) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L07e4ce.  v1:= temp;
  #L07e4d0.  v1:= v1 + -1;
  #L07e4d4.  call `c`(v2, v1) @signature `Lkotlin/collections/AbstractList$a;.c:(I)V` @kind virtual;
  #L07e4da.  call temp:= `b`(v2) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L07e4e0.  v1:= temp;
  #L07e4e2.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L07e4e8.  v0:= temp @kind object;
  #L07e4ea.  return v0 @kind object;
  #L07e4ec.  v0:= new `java.util.NoSuchElementException`;
  #L07e4f0.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L07e4f6.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e498.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L07e49e.  v0:= temp;
  #L07e4a0.  v0:= v0 + -1;
  #L07e4a4.  return v0;
}
procedure `void` `set`(`kotlin.collections.AbstractList$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$b;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e55c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07e560.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07e564.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e56a.  throw v2;
}
