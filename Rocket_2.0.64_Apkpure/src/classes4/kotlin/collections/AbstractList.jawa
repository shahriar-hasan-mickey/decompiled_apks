record `kotlin.collections.AbstractList` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.collections.AbstractCollection` @kind class, `java.util.List` @kind interface {
}
global `kotlin.collections.AbstractList$Companion` `@@kotlin.collections.AbstractList.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractList;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07e7d0.  v0:= new `kotlin.collections.AbstractList$Companion`;
  #L07e7d4.  v1:= 0I;
  #L07e7d6.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L07e7dc.  `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` := v0 @kind object;
  #L07e7e0.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList` v0 @kind this) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L07e7f4.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L07e7fa.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L07e80c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L07e810.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L07e814.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e81a.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L07e60c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L07e610.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L07e614.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e61a.  throw v1;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e62c.  if v2 != v1 then goto L07e634;
  #L07e630.  v2:= 1I;
  #L07e632.  return v2;
  #L07e634.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L07e638.  if v0 != 0 then goto L07e640;
  #L07e63c.  v2:= 0I;
  #L07e63e.  return v2;
  #L07e640.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07e644.  v2:= (`java.util.Collection`) v2 @kind object;
  #L07e648.  call temp:= `orderedEquals$kotlin_stdlib`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$Companion;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind virtual;
  #L07e64e.  v2:= temp;
  #L07e650.  return v2;
}
procedure `java.lang.Object` `get`(`int` v0 ) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractList;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e664.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L07e668.  call temp:= `orderedHashCode$kotlin_stdlib`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @kind virtual;
  #L07e66e.  v0:= temp;
  #L07e670.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.AbstractList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractList;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07e684.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07e68a.  v0:= temp @kind object;
  #L07e68c.  v1:= 0I;
  #L07e68e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L07e694.  v2:= temp;
  #L07e696.  if v2 == 0 then goto L07e6b6;
  #L07e69a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07e6a0.  v2:= temp @kind object;
  #L07e6a2.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07e6a8.  v2:= temp;
  #L07e6aa.  if v2 == 0 then goto L07e6b0;
  #L07e6ae.  goto L07e6b8;
  #L07e6b0.  v1:= v1 + 1;
  #L07e6b4.  goto L07e68e;
  #L07e6b6.  v1:= -1I;
  #L07e6b8.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e75c.  v0:= new `kotlin.collections.AbstractList$a`;
  #L07e760.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$a;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L07e766.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.collections.AbstractList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/AbstractList;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e6cc.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07e6d2.  v0:= temp;
  #L07e6d4.  call temp:= `listIterator`(v2, v0) @signature `Ljava/util/List;.listIterator:(I)Ljava/util/ListIterator;` @kind interface;
  #L07e6da.  v0:= temp @kind object;
  #L07e6dc.  call temp:= `hasPrevious`(v0) @signature `Ljava/util/ListIterator;.hasPrevious:()Z` @kind interface;
  #L07e6e2.  v1:= temp;
  #L07e6e4.  if v1 == 0 then goto L07e706;
  #L07e6e8.  call temp:= `previous`(v0) @signature `Ljava/util/ListIterator;.previous:()Ljava/lang/Object;` @kind interface;
  #L07e6ee.  v1:= temp @kind object;
  #L07e6f0.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07e6f6.  v1:= temp;
  #L07e6f8.  if v1 == 0 then goto L07e6dc;
  #L07e6fc.  call temp:= `nextIndex`(v0) @signature `Ljava/util/ListIterator;.nextIndex:()I` @kind interface;
  #L07e702.  v3:= temp;
  #L07e704.  goto L07e708;
  #L07e706.  v3:= -1I;
  #L07e708.  return v3;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v2 @kind this) @signature `Lkotlin/collections/AbstractList;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07e794.  v0:= new `kotlin.collections.AbstractList$b`;
  #L07e798.  v1:= 0I;
  #L07e79a.  call `<init>`(v0, v2, v1) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L07e7a0.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e7b4.  v0:= new `kotlin.collections.AbstractList$b`;
  #L07e7b8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L07e7be.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e71c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L07e720.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L07e724.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e72a.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L07e73c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L07e740.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L07e744.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e74a.  throw v1;
}
procedure `java.util.List` `subList`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/collections/AbstractList;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e778.  v0:= new `kotlin.collections.AbstractList$c`;
  #L07e77c.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/collections/AbstractList$c;.<init>:(Lkotlin/collections/AbstractList;II)V` @kind direct;
  #L07e782.  return v0 @kind object;
}
