record `kotlin.collections.RingBuffer` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `kotlin.collections.RingBuffer.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.RingBuffer.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.RingBuffer.c` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/RingBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0b0228.  v2:= new `java.lang.Object`[v2];
  #L0b022c.  v0:= 0I;
  #L0b022e.  call `<init>`(v1, v2, v0) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L0b0234.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0b0248.  v0:= "buffer" @kind object;
  #L0b024c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b0252.  call `<init>`(v3) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L0b0258.  v3.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] := v4 @kind object;
  #L0b025c.  v0:= 1I;
  #L0b025e.  v1:= 0I;
  #L0b0260.  if v5 < 0 then goto L0b0268;
  #L0b0264.  v2:= 1I;
  #L0b0266.  goto L0b026a;
  #L0b0268.  v2:= 0I;
  #L0b026a.  if v2 == 0 then goto L0b02d0;
  #L0b026e.  v2:= length @variable v4;
  #L0b0270.  if v5 > v2 then goto L0b0276;
  #L0b0274.  goto L0b0278;
  #L0b0276.  v0:= 0I;
  #L0b0278.  if v0 == 0 then goto L0b0288;
  #L0b027c.  v4:= length @variable v4;
  #L0b027e.  v3.`kotlin.collections.RingBuffer.b` @type ^`int` := v4;
  #L0b0282.  v3.`kotlin.collections.RingBuffer.d` @type ^`int` := v5;
  #L0b0286.  return @kind void;
  #L0b0288.  v0:= new `java.lang.StringBuilder`;
  #L0b028c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0b0292.  v1:= "ring buffer filled size: " @kind object;
  #L0b0296.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b029c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b02a2.  v5:= " cannot be larger than the buffer size: " @kind object;
  #L0b02a6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b02ac.  v4:= length @variable v4;
  #L0b02ae.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b02b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b02ba.  v4:= temp @kind object;
  #L0b02bc.  v5:= new `java.lang.IllegalArgumentException`;
  #L0b02c0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b02c6.  v4:= temp @kind object;
  #L0b02c8.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b02ce.  throw v5;
  #L0b02d0.  v4:= new `java.lang.StringBuilder`;
  #L0b02d4.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0b02da.  v0:= "ring buffer filled size should not be negative but it is " @kind object;
  #L0b02de.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b02e4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b02ea.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b02f0.  v4:= temp @kind object;
  #L0b02f2.  v5:= new `java.lang.IllegalArgumentException`;
  #L0b02f6.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b02fc.  v4:= temp @kind object;
  #L0b02fe.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b0304.  throw v5;
}
procedure `java.lang.Object`[] `b`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.b:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0b00ac.  v0:= v0.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b00b0.  return v0 @kind object;
}
procedure `int` `c`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0b0028.  v0:= v0.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L0b002c.  return v0;
}
procedure `int` `d`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.d:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0b0040.  v0:= v0.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b0044.  return v0;
}
procedure `void` `e`(`kotlin.collections.RingBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/RingBuffer;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0b0318.  call temp:= `g`(v3) @signature `Lkotlin/collections/RingBuffer;.g:()Z` @kind virtual;
  #L0b031e.  v0:= temp;
  #L0b0320.  if v0 != 0 then goto L0b0356;
  #L0b0324.  v0:= v3.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b0328.  v1:= v3.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b032c.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0332.  v2:= temp;
  #L0b0334.  v1:= v1 + v2 @kind int;
  #L0b0336.  call temp:= `c`(v3) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L0b033c.  v2:= temp;
  #L0b033e.  v1:= v1 %% v2 @kind int;
  #L0b0340.  v0[v1]:= v4 @kind object;
  #L0b0344.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b034a.  v4:= temp;
  #L0b034c.  v4:= v4 + 1;
  #L0b0350.  v3.`kotlin.collections.RingBuffer.d` @type ^`int` := v4;
  #L0b0354.  return @kind void;
  #L0b0356.  v4:= new `java.lang.IllegalStateException`;
  #L0b035a.  v0:= "ring buffer is full" @kind object;
  #L0b035e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b0364.  throw v4;
}
procedure `kotlin.collections.RingBuffer` `f`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.f:(I)Lkotlin/collections/RingBuffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0b01c0.  v0:= v2.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L0b01c4.  v1:= v0 ^> 1;
  #L0b01c8.  v0:= v0 + v1 @kind int;
  #L0b01ca.  v0:= v0 + 1;
  #L0b01ce.  call temp:= `coerceAtMost`(v0, v3) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @kind static;
  #L0b01d4.  v3:= temp;
  #L0b01d6.  v0:= v2.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b01da.  if v0 != 0 then goto L0b01f6;
  #L0b01de.  v0:= v2.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b01e2.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L0b01e8.  v3:= temp @kind object;
  #L0b01ea.  v0:= "copyOf(this, newSize)" @kind object;
  #L0b01ee.  call `checkNotNullExpressionValue`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b01f4.  goto L0b0202;
  #L0b01f6.  v3:= new `java.lang.Object`[v3];
  #L0b01fa.  call temp:= `toArray`(v2, v3) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L0b0200.  v3:= temp @kind object;
  #L0b0202.  v0:= new `kotlin.collections.RingBuffer`;
  #L0b0206.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b020c.  v1:= temp;
  #L0b020e.  call `<init>`(v0, v3, v1) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L0b0214.  return v0 @kind object;
}
procedure `boolean` `g`(`kotlin.collections.RingBuffer` v2 @kind this) @signature `Lkotlin/collections/RingBuffer;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0b0000.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0006.  v0:= temp;
  #L0b0008.  v1:= v2.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L0b000c.  if v0 != v1 then goto L0b0014;
  #L0b0010.  v0:= 1I;
  #L0b0012.  goto L0b0016;
  #L0b0014.  v0:= 0I;
  #L0b0016.  return v0;
}
procedure `java.lang.Object` `get`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0b0070.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L0b0074.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b007a.  v1:= temp;
  #L0b007c.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L0b0082.  v0:= v2.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b0086.  v1:= v2.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b008a.  v1:= v1 + v3 @kind int;
  #L0b008c.  call temp:= `c`(v2) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L0b0092.  v3:= temp;
  #L0b0094.  v1:= v1 %% v3 @kind int;
  #L0b0096.  v3:= v0[v1] @kind object;
  #L0b009a.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b0058.  v0:= v1.`kotlin.collections.RingBuffer.d` @type ^`int`;
  #L0b005c.  return v0;
}
procedure `void` `h`(`kotlin.collections.RingBuffer` v6 @kind this, `int` v7 ) @signature `Lkotlin/collections/RingBuffer;.h:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0b0378.  v0:= 1I;
  #L0b037a.  v1:= 0I;
  #L0b037c.  if v7 < 0 then goto L0b0384;
  #L0b0380.  v2:= 1I;
  #L0b0382.  goto L0b0386;
  #L0b0384.  v2:= 0I;
  #L0b0386.  if v2 == 0 then goto L0b0440;
  #L0b038a.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0390.  v2:= temp;
  #L0b0392.  if v7 > v2 then goto L0b0398;
  #L0b0396.  goto L0b039a;
  #L0b0398.  v0:= 0I;
  #L0b039a.  if v0 == 0 then goto L0b03f2;
  #L0b039e.  if v7 <= 0 then goto L0b03f0;
  #L0b03a2.  v0:= v6.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b03a6.  v2:= v0 + v7 @kind int;
  #L0b03aa.  call temp:= `c`(v6) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L0b03b0.  v3:= temp;
  #L0b03b2.  v2:= v2 %% v3 @kind int;
  #L0b03b4.  v3:= 0I;
  #L0b03b6.  if v0 <= v2 then goto L0b03d4;
  #L0b03ba.  v4:= v6.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b03be.  v5:= v6.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L0b03c2.  call `fill`(v4, v3, v0, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L0b03c8.  v0:= v6.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b03cc.  call `fill`(v0, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L0b03d2.  goto L0b03de;
  #L0b03d4.  v1:= v6.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b03d8.  call `fill`(v1, v3, v0, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L0b03de.  v6.`kotlin.collections.RingBuffer.c` @type ^`int` := v2;
  #L0b03e2.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b03e8.  v0:= temp;
  #L0b03ea.  v0:= v0 - v7 @kind int;
  #L0b03ec.  v6.`kotlin.collections.RingBuffer.d` @type ^`int` := v0;
  #L0b03f0.  return @kind void;
  #L0b03f2.  v0:= new `java.lang.StringBuilder`;
  #L0b03f6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0b03fc.  v1:= "n shouldn't be greater than the buffer size: n = " @kind object;
  #L0b0400.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b0406.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b040c.  v7:= ", size = " @kind object;
  #L0b0410.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b0416.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b041c.  v7:= temp;
  #L0b041e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b0424.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b042a.  v7:= temp @kind object;
  #L0b042c.  v0:= new `java.lang.IllegalArgumentException`;
  #L0b0430.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b0436.  v7:= temp @kind object;
  #L0b0438.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b043e.  throw v0;
  #L0b0440.  v0:= new `java.lang.StringBuilder`;
  #L0b0444.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0b044a.  v1:= "n shouldn't be negative but it is " @kind object;
  #L0b044e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b0454.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0b045a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b0460.  v7:= temp @kind object;
  #L0b0462.  v0:= new `java.lang.IllegalArgumentException`;
  #L0b0466.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0b046c.  v7:= temp @kind object;
  #L0b046e.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0b0474.  throw v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b01a4.  v0:= new `kotlin.collections.RingBuffer$iterator$1`;
  #L0b01a8.  call `<init>`(v0, v1) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @kind direct;
  #L0b01ae.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0b00c4.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b00ca.  v0:= temp;
  #L0b00cc.  v0:= new `java.lang.Object`[v0];
  #L0b00d0.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L0b00d6.  v0:= temp @kind object;
  #L0b00d8.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0b00ec.  v0:= "array" @kind object;
  #L0b00f0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b00f6.  v0:= length @variable v6;
  #L0b00f8.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b00fe.  v1:= temp;
  #L0b0100.  if v0 >= v1 then goto L0b011e;
  #L0b0104.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b010a.  v0:= temp;
  #L0b010c.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L0b0112.  v6:= temp @kind object;
  #L0b0114.  v0:= "copyOf(this, newSize)" @kind object;
  #L0b0118.  call `checkNotNullExpressionValue`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b011e.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0124.  v0:= temp;
  #L0b0126.  v1:= v5.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L0b012a.  v2:= 0I;
  #L0b012c.  v3:= 0I;
  #L0b012e.  if v3 >= v0 then goto L0b0150;
  #L0b0132.  v4:= v5.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L0b0136.  if v1 >= v4 then goto L0b0150;
  #L0b013a.  v4:= v5.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b013e.  v4:= v4[v1] @kind object;
  #L0b0142.  v6[v3]:= v4 @kind object;
  #L0b0146.  v3:= v3 + 1;
  #L0b014a.  v1:= v1 + 1;
  #L0b014e.  goto L0b012e;
  #L0b0150.  if v3 >= v0 then goto L0b016a;
  #L0b0154.  v1:= v5.`kotlin.collections.RingBuffer.a` @type ^`java.lang.Object`[] @kind object;
  #L0b0158.  v1:= v1[v2] @kind object;
  #L0b015c.  v6[v3]:= v1 @kind object;
  #L0b0160.  v3:= v3 + 1;
  #L0b0164.  v2:= v2 + 1;
  #L0b0168.  goto L0b0150;
  #L0b016a.  v0:= length @variable v6;
  #L0b016c.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b0172.  v1:= temp;
  #L0b0174.  if v0 <= v1 then goto L0b0186;
  #L0b0178.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L0b017e.  v0:= temp;
  #L0b0180.  v1:= 0I;
  #L0b0182.  v6[v0]:= v1 @kind object;
  #L0b0186.  v0:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.RingBuffer.toArray>" @kind object;
  #L0b018a.  call `checkNotNull`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0b0190.  return v6 @kind object;
}
