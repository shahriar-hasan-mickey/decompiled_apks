record `kotlin.time.a` @kind class @AccessFlag FINAL extends `kotlin.time.TimeMark` @kind interface {
  `kotlin.time.TimeMark` `kotlin.time.a.a` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.time.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.time.a` v0 @kind this, `kotlin.time.TimeMark` v1 @kind object, `long` v2 ) @signature `Lkotlin/time/a;.<init>:(Lkotlin/time/TimeMark;J)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0e816c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0e8172.  v0.`kotlin.time.a.a` @type ^`kotlin.time.TimeMark` := v1 @kind object;
  #L0e8176.  v0.`kotlin.time.a.b` @type ^`long` := v2 @kind wide;
  #L0e817a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.time.a` v0 @kind this, `kotlin.time.TimeMark` v1 @kind object, `long` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/time/a;.<init>:(Lkotlin/time/TimeMark;JLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0e818c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/time/a;.<init>:(Lkotlin/time/TimeMark;J)V` @kind direct;
  #L0e8192.  return @kind void;
}
procedure `long` `elapsedNow-UwyO8pc`(`kotlin.time.a` v4 @kind this) @signature `Lkotlin/time/a;.elapsedNow-UwyO8pc:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0e8140.  v0:= v4.`kotlin.time.a.a` @type ^`kotlin.time.TimeMark` @kind object;
  #L0e8144.  call temp:= `elapsedNow-UwyO8pc`(v0) @signature `Lkotlin/time/TimeMark;.elapsedNow-UwyO8pc:()J` @kind interface;
  #L0e814a.  v0:= temp @kind wide;
  #L0e814c.  v2:= v4.`kotlin.time.a.b` @type ^`long` @kind wide;
  #L0e8150.  call temp:= `minus-LRDsOJo`(v0, v2) @signature `Lkotlin/time/Duration;.minus-LRDsOJo:(JJ)J` @kind static;
  #L0e8156.  v0:= temp @kind wide;
  #L0e8158.  return v0 @kind wide;
}
procedure `boolean` `hasNotPassedNow`(`kotlin.time.a` v1 @kind this) @signature `Lkotlin/time/a;.hasNotPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0e80bc.  call temp:= `hasNotPassedNow`(v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasNotPassedNow:(Lkotlin/time/TimeMark;)Z` @kind static;
  #L0e80c2.  v0:= temp;
  #L0e80c4.  return v0;
}
procedure `boolean` `hasPassedNow`(`kotlin.time.a` v1 @kind this) @signature `Lkotlin/time/a;.hasPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0e80d8.  call temp:= `hasPassedNow`(v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasPassedNow:(Lkotlin/time/TimeMark;)Z` @kind static;
  #L0e80de.  v0:= temp;
  #L0e80e0.  return v0;
}
procedure `kotlin.time.TimeMark` `minus-LRDsOJo`(`kotlin.time.a` v0 @kind this, `long` v1 ) @signature `Lkotlin/time/a;.minus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC {
    temp;

  #L0e80f4.  call temp:= `minus-LRDsOJo`(v0, v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.minus-LRDsOJo:(Lkotlin/time/TimeMark;J)Lkotlin/time/TimeMark;` @kind static;
  #L0e80fa.  v1:= temp @kind object;
  #L0e80fc.  return v1 @kind object;
}
procedure `kotlin.time.TimeMark` `plus-LRDsOJo`(`kotlin.time.a` v4 @kind this, `long` v5 ) @signature `Lkotlin/time/a;.plus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0e8110.  v0:= new `kotlin.time.a`;
  #L0e8114.  v1:= v4.`kotlin.time.a.a` @type ^`kotlin.time.TimeMark` @kind object;
  #L0e8118.  v2:= v4.`kotlin.time.a.b` @type ^`long` @kind wide;
  #L0e811c.  call temp:= `plus-LRDsOJo`(v2, v5) @signature `Lkotlin/time/Duration;.plus-LRDsOJo:(JJ)J` @kind static;
  #L0e8122.  v5:= temp @kind wide;
  #L0e8124.  v2:= 0I;
  #L0e8126.  call `<init>`(v0, v1, v5, v2) @signature `Lkotlin/time/a;.<init>:(Lkotlin/time/TimeMark;JLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0e812c.  return v0 @kind object;
}
