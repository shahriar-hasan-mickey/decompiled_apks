record `kotlin.time.TimeSource$Monotonic$ValueTimeMark` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.time.TimeMark` @kind interface {
  `long` `kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v0 @kind this, `long` v1 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.<init>:(J)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0ebeb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0ebeba.  v0.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` := v1 @kind wide;
  #L0ebebe.  return @kind void;
}
procedure `kotlin.time.TimeSource$Monotonic$ValueTimeMark` `box-impl`(`long` v1 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.box-impl:(J)Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0ebda4.  v0:= new `kotlin.time.TimeSource$Monotonic$ValueTimeMark`;
  #L0ebda8.  call `<init>`(v0, v1) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.<init>:(J)V` @kind direct;
  #L0ebdae.  return v0 @kind object;
}
procedure `long` `constructor-impl`(`long` v0 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.constructor-impl:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L0ebdc0.  return v0 @kind wide;
}
procedure `long` `elapsedNow-UwyO8pc`(`long` v1 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.elapsedNow-UwyO8pc:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0ebdf4.  v0:= `@@kotlin.time.MonotonicTimeSource.INSTANCE` @type ^`kotlin.time.MonotonicTimeSource` @kind object;
  #L0ebdf8.  call temp:= `elapsedFrom-6eNON_k`(v0, v1) @signature `Lkotlin/time/MonotonicTimeSource;.elapsedFrom-6eNON_k:(J)J` @kind virtual;
  #L0ebdfe.  v1:= temp @kind wide;
  #L0ebe00.  return v1 @kind wide;
}
procedure `boolean` `equals-impl`(`long` v4 , `java.lang.Object` v6 @kind object) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.equals-impl:(JLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0ebbd8.  v0:= instanceof @variable v6 @type ^`kotlin.time.TimeSource$Monotonic$ValueTimeMark` @kind boolean;
  #L0ebbdc.  v1:= 0I;
  #L0ebbde.  if v0 != 0 then goto L0ebbe4;
  #L0ebbe2.  return v1;
  #L0ebbe4.  v6:= (`kotlin.time.TimeSource$Monotonic$ValueTimeMark`) v6 @kind object;
  #L0ebbe8.  call temp:= `unbox-impl`(v6) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.unbox-impl:()J` @kind virtual;
  #L0ebbee.  v2:= temp @kind wide;
  #L0ebbf0.  v6:= lcmp(v4, v2);
  #L0ebbf4.  if v6 == 0 then goto L0ebbfa;
  #L0ebbf8.  return v1;
  #L0ebbfa.  v4:= 1I;
  #L0ebbfc.  return v4;
}
procedure `boolean` `equals-impl0`(`long` v1 , `long` v3 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.equals-impl0:(JJ)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0ebc10.  v0:= lcmp(v1, v3);
  #L0ebc14.  if v0 != 0 then goto L0ebc1c;
  #L0ebc18.  v1:= 1I;
  #L0ebc1a.  goto L0ebc1e;
  #L0ebc1c.  v1:= 0I;
  #L0ebc1e.  return v1;
}
procedure `boolean` `hasNotPassedNow-impl`(`long` v0 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasNotPassedNow-impl:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L0ebc50.  call temp:= `elapsedNow-UwyO8pc`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.elapsedNow-UwyO8pc:(J)J` @kind static;
  #L0ebc56.  v0:= temp @kind wide;
  #L0ebc58.  call temp:= `isNegative-impl`(v0) @signature `Lkotlin/time/Duration;.isNegative-impl:(J)Z` @kind static;
  #L0ebc5e.  v0:= temp;
  #L0ebc60.  return v0;
}
procedure `boolean` `hasPassedNow-impl`(`long` v0 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasPassedNow-impl:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L0ebc94.  call temp:= `elapsedNow-UwyO8pc`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.elapsedNow-UwyO8pc:(J)J` @kind static;
  #L0ebc9a.  v0:= temp @kind wide;
  #L0ebc9c.  call temp:= `isNegative-impl`(v0) @signature `Lkotlin/time/Duration;.isNegative-impl:(J)Z` @kind static;
  #L0ebca2.  v0:= temp;
  #L0ebca4.  v0:= v0 ^~ 1;
  #L0ebca8.  return v0;
}
procedure `int` `hashCode-impl`(`long` v2 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hashCode-impl:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0ebcdc.  v0:= 32I;
  #L0ebce0.  v0:= v2 ^>> v0 @kind long;
  #L0ebce4.  v2:= v2 ^~ v0 @kind long;
  #L0ebce6.  v3:= (`int`) v2 @kind l2i;
  #L0ebce8.  return v3;
}
procedure `long` `minus-LRDsOJo`(`long` v1 , `long` v3 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.minus-LRDsOJo:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0ebe34.  v0:= `@@kotlin.time.MonotonicTimeSource.INSTANCE` @type ^`kotlin.time.MonotonicTimeSource` @kind object;
  #L0ebe38.  call temp:= `unaryMinus-UwyO8pc`(v3) @signature `Lkotlin/time/Duration;.unaryMinus-UwyO8pc:(J)J` @kind static;
  #L0ebe3e.  v3:= temp @kind wide;
  #L0ebe40.  call temp:= `adjustReading-6QKq23U`(v0, v1, v3) @signature `Lkotlin/time/MonotonicTimeSource;.adjustReading-6QKq23U:(JJ)J` @kind virtual;
  #L0ebe46.  v1:= temp @kind wide;
  #L0ebe48.  return v1 @kind wide;
}
procedure `long` `plus-LRDsOJo`(`long` v1 , `long` v3 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.plus-LRDsOJo:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0ebe7c.  v0:= `@@kotlin.time.MonotonicTimeSource.INSTANCE` @type ^`kotlin.time.MonotonicTimeSource` @kind object;
  #L0ebe80.  call temp:= `adjustReading-6QKq23U`(v0, v1, v3) @signature `Lkotlin/time/MonotonicTimeSource;.adjustReading-6QKq23U:(JJ)J` @kind virtual;
  #L0ebe86.  v1:= temp @kind wide;
  #L0ebe88.  return v1 @kind wide;
}
procedure `java.lang.String` `toString-impl`(`long` v2 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.toString-impl:(J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0ebd1c.  v0:= new `java.lang.StringBuilder`;
  #L0ebd20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0ebd26.  v1:= "ValueTimeMark(reading=" @kind object;
  #L0ebd2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ebd30.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ebd36.  v2:= 41I;
  #L0ebd3a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ebd40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0ebd46.  v2:= temp @kind object;
  #L0ebd48.  return v2 @kind object;
}
procedure `long` `elapsedNow-UwyO8pc`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.elapsedNow-UwyO8pc:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebdd4.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebdd8.  call temp:= `elapsedNow-UwyO8pc`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.elapsedNow-UwyO8pc:(J)J` @kind static;
  #L0ebdde.  v0:= temp @kind wide;
  #L0ebde0.  return v0 @kind wide;
}
procedure `boolean` `equals`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebbb8.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebbbc.  call temp:= `equals-impl`(v0, v3) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.equals-impl:(JLjava/lang/Object;)Z` @kind static;
  #L0ebbc2.  v3:= temp;
  #L0ebbc4.  return v3;
}
procedure `boolean` `hasNotPassedNow`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasNotPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebc30.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebc34.  call temp:= `hasNotPassedNow-impl`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasNotPassedNow-impl:(J)Z` @kind static;
  #L0ebc3a.  v0:= temp;
  #L0ebc3c.  return v0;
}
procedure `boolean` `hasPassedNow`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebc74.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebc78.  call temp:= `hasPassedNow-impl`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hasPassedNow-impl:(J)Z` @kind static;
  #L0ebc7e.  v0:= temp;
  #L0ebc80.  return v0;
}
procedure `int` `hashCode`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebcbc.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebcc0.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.hashCode-impl:(J)I` @kind static;
  #L0ebcc6.  v0:= temp;
  #L0ebcc8.  return v0;
}
procedure `long` `minus-LRDsOJo`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this, `long` v3 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.minus-LRDsOJo:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebe14.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebe18.  call temp:= `minus-LRDsOJo`(v0, v3) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.minus-LRDsOJo:(JJ)J` @kind static;
  #L0ebe1e.  v3:= temp @kind wide;
  #L0ebe20.  return v3 @kind wide;
}
procedure `kotlin.time.TimeMark` `minus-LRDsOJo`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v0 @kind this, `long` v1 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.minus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ebd5c.  call temp:= `minus-LRDsOJo`(v0, v1) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.minus-LRDsOJo:(J)J` @kind virtual;
  #L0ebd62.  v1:= temp @kind wide;
  #L0ebd64.  call temp:= `box-impl`(v1) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.box-impl:(J)Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;` @kind static;
  #L0ebd6a.  v1:= temp @kind object;
  #L0ebd6c.  return v1 @kind object;
}
procedure `long` `plus-LRDsOJo`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this, `long` v3 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.plus-LRDsOJo:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebe5c.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebe60.  call temp:= `plus-LRDsOJo`(v0, v3) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.plus-LRDsOJo:(JJ)J` @kind static;
  #L0ebe66.  v3:= temp @kind wide;
  #L0ebe68.  return v3 @kind wide;
}
procedure `kotlin.time.TimeMark` `plus-LRDsOJo`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v0 @kind this, `long` v1 ) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.plus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ebd80.  call temp:= `plus-LRDsOJo`(v0, v1) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.plus-LRDsOJo:(J)J` @kind virtual;
  #L0ebd86.  v1:= temp @kind wide;
  #L0ebd88.  call temp:= `box-impl`(v1) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.box-impl:(J)Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;` @kind static;
  #L0ebd8e.  v1:= temp @kind object;
  #L0ebd90.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ebcfc.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebd00.  call temp:= `toString-impl`(v0) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0ebd06.  v0:= temp @kind object;
  #L0ebd08.  return v0 @kind object;
}
procedure `long` `unbox-impl`(`kotlin.time.TimeSource$Monotonic$ValueTimeMark` v2 @kind this) @signature `Lkotlin/time/TimeSource$Monotonic$ValueTimeMark;.unbox-impl:()J` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L0ebe9c.  v0:= v2.`kotlin.time.TimeSource$Monotonic$ValueTimeMark.a` @type ^`long` @kind wide;
  #L0ebea0.  return v0 @kind wide;
}
