record `kotlin.time.AbstractDoubleTimeSource$a` @kind class @AccessFlag FINAL extends `kotlin.time.TimeMark` @kind interface {
  `double` `kotlin.time.AbstractDoubleTimeSource$a.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.time.AbstractDoubleTimeSource` `kotlin.time.AbstractDoubleTimeSource$a.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.time.AbstractDoubleTimeSource$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.time.AbstractDoubleTimeSource$a` v0 @kind this, `double` v1 , `kotlin.time.AbstractDoubleTimeSource` v3 @kind object, `long` v4 ) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.<init>:(DLkotlin/time/AbstractDoubleTimeSource;J)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0e7e88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0e7e8e.  v0.`kotlin.time.AbstractDoubleTimeSource$a.a` @type ^`double` := v1 @kind wide;
  #L0e7e92.  v0.`kotlin.time.AbstractDoubleTimeSource$a.b` @type ^`kotlin.time.AbstractDoubleTimeSource` := v3 @kind object;
  #L0e7e96.  v0.`kotlin.time.AbstractDoubleTimeSource$a.c` @type ^`long` := v4 @kind wide;
  #L0e7e9a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.time.AbstractDoubleTimeSource$a` v0 @kind this, `double` v1 , `kotlin.time.AbstractDoubleTimeSource` v3 @kind object, `long` v4 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.<init>:(DLkotlin/time/AbstractDoubleTimeSource;JLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0e7eac.  call `<init>`(v0, v1, v3, v4) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.<init>:(DLkotlin/time/AbstractDoubleTimeSource;J)V` @kind direct;
  #L0e7eb2.  return @kind void;
}
procedure `long` `elapsedNow-UwyO8pc`(`kotlin.time.AbstractDoubleTimeSource$a` v4 @kind this) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.elapsedNow-UwyO8pc:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0e7e44.  v0:= v4.`kotlin.time.AbstractDoubleTimeSource$a.b` @type ^`kotlin.time.AbstractDoubleTimeSource` @kind object;
  #L0e7e48.  call temp:= `read`(v0) @signature `Lkotlin/time/AbstractDoubleTimeSource;.read:()D` @kind virtual;
  #L0e7e4e.  v0:= temp @kind wide;
  #L0e7e50.  v2:= v4.`kotlin.time.AbstractDoubleTimeSource$a.a` @type ^`double` @kind wide;
  #L0e7e54.  v0:= v0 - v2 @kind double;
  #L0e7e56.  v2:= v4.`kotlin.time.AbstractDoubleTimeSource$a.b` @type ^`kotlin.time.AbstractDoubleTimeSource` @kind object;
  #L0e7e5a.  call temp:= `getUnit`(v2) @signature `Lkotlin/time/AbstractDoubleTimeSource;.getUnit:()Lkotlin/time/DurationUnit;` @kind virtual;
  #L0e7e60.  v2:= temp @kind object;
  #L0e7e62.  call temp:= `toDuration`(v0, v2) @signature `Lkotlin/time/DurationKt;.toDuration:(DLkotlin/time/DurationUnit;)J` @kind static;
  #L0e7e68.  v0:= temp @kind wide;
  #L0e7e6a.  v2:= v4.`kotlin.time.AbstractDoubleTimeSource$a.c` @type ^`long` @kind wide;
  #L0e7e6e.  call temp:= `minus-LRDsOJo`(v0, v2) @signature `Lkotlin/time/Duration;.minus-LRDsOJo:(JJ)J` @kind static;
  #L0e7e74.  v0:= temp @kind wide;
  #L0e7e76.  return v0 @kind wide;
}
procedure `boolean` `hasNotPassedNow`(`kotlin.time.AbstractDoubleTimeSource$a` v1 @kind this) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.hasNotPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0e7dbc.  call temp:= `hasNotPassedNow`(v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasNotPassedNow:(Lkotlin/time/TimeMark;)Z` @kind static;
  #L0e7dc2.  v0:= temp;
  #L0e7dc4.  return v0;
}
procedure `boolean` `hasPassedNow`(`kotlin.time.AbstractDoubleTimeSource$a` v1 @kind this) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.hasPassedNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0e7dd8.  call temp:= `hasPassedNow`(v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasPassedNow:(Lkotlin/time/TimeMark;)Z` @kind static;
  #L0e7dde.  v0:= temp;
  #L0e7de0.  return v0;
}
procedure `kotlin.time.TimeMark` `minus-LRDsOJo`(`kotlin.time.AbstractDoubleTimeSource$a` v0 @kind this, `long` v1 ) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.minus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC {
    temp;

  #L0e7df4.  call temp:= `minus-LRDsOJo`(v0, v1) @signature `Lkotlin/time/TimeMark$DefaultImpls;.minus-LRDsOJo:(Lkotlin/time/TimeMark;J)Lkotlin/time/TimeMark;` @kind static;
  #L0e7dfa.  v1:= temp @kind object;
  #L0e7dfc.  return v1 @kind object;
}
procedure `kotlin.time.TimeMark` `plus-LRDsOJo`(`kotlin.time.AbstractDoubleTimeSource$a` v8 @kind this, `long` v9 ) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.plus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0e7e10.  v7:= new `kotlin.time.AbstractDoubleTimeSource$a`;
  #L0e7e14.  v1:= v8.`kotlin.time.AbstractDoubleTimeSource$a.a` @type ^`double` @kind wide;
  #L0e7e18.  v3:= v8.`kotlin.time.AbstractDoubleTimeSource$a.b` @type ^`kotlin.time.AbstractDoubleTimeSource` @kind object;
  #L0e7e1c.  v4:= v8.`kotlin.time.AbstractDoubleTimeSource$a.c` @type ^`long` @kind wide;
  #L0e7e20.  call temp:= `plus-LRDsOJo`(v4, v9) @signature `Lkotlin/time/Duration;.plus-LRDsOJo:(JJ)J` @kind static;
  #L0e7e26.  v4:= temp @kind wide;
  #L0e7e28.  v6:= 0I;
  #L0e7e2a.  v0:= v7 @kind object;
  #L0e7e2c.  call `<init>`(v0, v1, v3, v4, v6) @signature `Lkotlin/time/AbstractDoubleTimeSource$a;.<init>:(DLkotlin/time/AbstractDoubleTimeSource;JLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0e7e32.  return v7 @kind object;
}
