record `kotlin.time.TimeMark$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `hasNotPassedNow`(`kotlin.time.TimeMark` v2 @kind object) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasNotPassedNow:(Lkotlin/time/TimeMark;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0ebaf0.  call temp:= `elapsedNow-UwyO8pc`(v2) @signature `Lkotlin/time/TimeMark;.elapsedNow-UwyO8pc:()J` @kind interface;
  #L0ebaf6.  v0:= temp @kind wide;
  #L0ebaf8.  call temp:= `isNegative-impl`(v0) @signature `Lkotlin/time/Duration;.isNegative-impl:(J)Z` @kind static;
  #L0ebafe.  v2:= temp;
  #L0ebb00.  return v2;
}
procedure `boolean` `hasPassedNow`(`kotlin.time.TimeMark` v2 @kind object) @signature `Lkotlin/time/TimeMark$DefaultImpls;.hasPassedNow:(Lkotlin/time/TimeMark;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0ebb14.  call temp:= `elapsedNow-UwyO8pc`(v2) @signature `Lkotlin/time/TimeMark;.elapsedNow-UwyO8pc:()J` @kind interface;
  #L0ebb1a.  v0:= temp @kind wide;
  #L0ebb1c.  call temp:= `isNegative-impl`(v0) @signature `Lkotlin/time/Duration;.isNegative-impl:(J)Z` @kind static;
  #L0ebb22.  v2:= temp;
  #L0ebb24.  v2:= v2 ^~ 1;
  #L0ebb28.  return v2;
}
procedure `kotlin.time.TimeMark` `minus-LRDsOJo`(`kotlin.time.TimeMark` v0 @kind object, `long` v1 ) @signature `Lkotlin/time/TimeMark$DefaultImpls;.minus-LRDsOJo:(Lkotlin/time/TimeMark;J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L0ebb3c.  call temp:= `unaryMinus-UwyO8pc`(v1) @signature `Lkotlin/time/Duration;.unaryMinus-UwyO8pc:(J)J` @kind static;
  #L0ebb42.  v1:= temp @kind wide;
  #L0ebb44.  call temp:= `plus-LRDsOJo`(v0, v1) @signature `Lkotlin/time/TimeMark;.plus-LRDsOJo:(J)Lkotlin/time/TimeMark;` @kind interface;
  #L0ebb4a.  v0:= temp @kind object;
  #L0ebb4c.  return v0 @kind object;
}
procedure `kotlin.time.TimeMark` `plus-LRDsOJo`(`kotlin.time.TimeMark` v2 @kind object, `long` v3 ) @signature `Lkotlin/time/TimeMark$DefaultImpls;.plus-LRDsOJo:(Lkotlin/time/TimeMark;J)Lkotlin/time/TimeMark;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0ebb60.  v0:= new `kotlin.time.a`;
  #L0ebb64.  v1:= 0I;
  #L0ebb66.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/time/a;.<init>:(Lkotlin/time/TimeMark;JLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0ebb6c.  return v0 @kind object;
}
