record `kotlin.time.TestTimeSource` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.time.AbstractLongTimeSource` @kind class {
  `long` `kotlin.time.TestTimeSource.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.time.TestTimeSource` v1 @kind this) @signature `Lkotlin/time/TestTimeSource;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0eb9c8.  v0:= `@@kotlin.time.DurationUnit.NANOSECONDS` @type ^`kotlin.time.DurationUnit` @kind object;
  #L0eb9cc.  call `<init>`(v1, v0) @signature `Lkotlin/time/AbstractLongTimeSource;.<init>:(Lkotlin/time/DurationUnit;)V` @kind direct;
  #L0eb9d2.  return @kind void;
}
procedure `void` `a`(`kotlin.time.TestTimeSource` v4 @kind this, `long` v5 ) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0eb9e4.  v0:= new `java.lang.IllegalStateException`;
  #L0eb9e8.  v1:= new `java.lang.StringBuilder`;
  #L0eb9ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0eb9f2.  v2:= "TestTimeSource will overflow if its reading " @kind object;
  #L0eb9f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0eb9fc.  v2:= v4.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L0eba00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0eba06.  v2:= "ns is advanced by " @kind object;
  #L0eba0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0eba10.  call temp:= `toString-impl`(v5) @signature `Lkotlin/time/Duration;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0eba16.  v5:= temp @kind object;
  #L0eba18.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0eba1e.  v5:= 46I;
  #L0eba22.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0eba28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0eba2e.  v5:= temp @kind object;
  #L0eba30.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0eba36.  throw v0;
}
procedure `void` `plusAssign-LRDsOJo`(`kotlin.time.TestTimeSource` v9 @kind this, `long` v10 ) @signature `Lkotlin/time/TestTimeSource;.plusAssign-LRDsOJo:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0eba48.  call temp:= `getUnit`(v9) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Lkotlin/time/DurationUnit;` @kind virtual;
  #L0eba4e.  v0:= temp @kind object;
  #L0eba50.  call temp:= `toLong-impl`(v10, v0) @signature `Lkotlin/time/Duration;.toLong-impl:(JLkotlin/time/DurationUnit;)J` @kind static;
  #L0eba56.  v0:= temp @kind wide;
  #L0eba58.  v2:= -9223372036854775808L;
  #L0eba5c.  v4:= lcmp(v0, v2);
  #L0eba60.  if v4 == 0 then goto L0ebaa0;
  #L0eba64.  v2:= 9223372036854775807L;
  #L0eba6e.  v4:= lcmp(v0, v2);
  #L0eba72.  if v4 == 0 then goto L0ebaa0;
  #L0eba76.  v2:= v9.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L0eba7a.  v4:= v2 + v0 @kind long;
  #L0eba7e.  v0:= v0 ^~ v2 @kind long;
  #L0eba80.  v6:= 0L;
  #L0eba84.  v8:= lcmp(v0, v6);
  #L0eba88.  if v8 < 0 then goto L0ebad8;
  #L0eba8c.  v0:= v2 ^~ v4 @kind long;
  #L0eba90.  v2:= lcmp(v0, v6);
  #L0eba94.  if v2 >= 0 then goto L0ebad8;
  #L0eba98.  call `a`(v9, v10) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @kind direct;
  #L0eba9e.  goto L0ebad8;
  #L0ebaa0.  call temp:= `getUnit`(v9) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Lkotlin/time/DurationUnit;` @kind virtual;
  #L0ebaa6.  v0:= temp @kind object;
  #L0ebaa8.  call temp:= `toDouble-impl`(v10, v0) @signature `Lkotlin/time/Duration;.toDouble-impl:(JLkotlin/time/DurationUnit;)D` @kind static;
  #L0ebaae.  v0:= temp @kind wide;
  #L0ebab0.  v2:= v9.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L0ebab4.  v2:= (`double`) v2 @kind l2d;
  #L0ebab6.  v2:= v2 + v0 @kind double;
  #L0ebab8.  v0:= 9.223372036854776E18D;
  #L0ebabc.  v4:= dcmpl(v2, v0);
  #L0ebac0.  if v4 > 0 then goto L0ebad0;
  #L0ebac4.  v0:= -9.223372036854776E18D;
  #L0ebac8.  v4:= dcmpg(v2, v0);
  #L0ebacc.  if v4 >= 0 then goto L0ebad6;
  #L0ebad0.  call `a`(v9, v10) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @kind direct;
  #L0ebad6.  v4:= (`long`) v2 @kind d2l;
  #L0ebad8.  v9.`kotlin.time.TestTimeSource.b` @type ^`long` := v4 @kind wide;
  #L0ebadc.  return @kind void;
}
procedure `long` `read`(`kotlin.time.TestTimeSource` v2 @kind this) @signature `Lkotlin/time/TestTimeSource;.read:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L0eb9b0.  v0:= v2.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L0eb9b4.  return v0 @kind wide;
}
