record `kotlin.sequences.FilteringSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FilteringSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.FilteringSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.FilteringSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.FilteringSequence` `kotlin.sequences.FilteringSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `kotlin.sequences.FilteringSequence` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.<init>:(Lkotlin/sequences/FilteringSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d34ac.  v0.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` := v1 @kind object;
  #L0d34b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d34b6.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getSequence$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d34bc.  v1:= temp @kind object;
  #L0d34be.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d34c4.  v1:= temp @kind object;
  #L0d34c6.  v0.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d34ca.  v1:= -1I;
  #L0d34cc.  v0.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L0d34d0.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d34e4.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d34e8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d34ee.  v0:= temp;
  #L0d34f0.  if v0 == 0 then goto L0d353c;
  #L0d34f4.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d34f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d34fe.  v0:= temp @kind object;
  #L0d3500.  v1:= v3.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L0d3504.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getPredicate$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0d350a.  v1:= temp @kind object;
  #L0d350c.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d3512.  v1:= temp @kind object;
  #L0d3514.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d3518.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d351e.  v1:= temp;
  #L0d3520.  v2:= v3.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L0d3524.  call temp:= `access$getSendWhen$p`(v2) @signature `Lkotlin/sequences/FilteringSequence;.access$getSendWhen$p:(Lkotlin/sequences/FilteringSequence;)Z` @kind static;
  #L0d352a.  v2:= temp;
  #L0d352c.  if v1 != v2 then goto L0d34e4;
  #L0d3530.  v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L0d3534.  v0:= 1I;
  #L0d3536.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v0;
  #L0d353a.  return @kind void;
  #L0d353c.  v0:= 0I;
  #L0d353e.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v0;
  #L0d3542.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3494.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3498.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3438.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0d343c.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3420.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L0d3424.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d33f0.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L0d33f4.  v1:= -1I;
  #L0d33f6.  if v0 != v1 then goto L0d3400;
  #L0d33fa.  call `b`(v2) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @kind direct;
  #L0d3400.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L0d3404.  v1:= 1I;
  #L0d3406.  if v0 != v1 then goto L0d340c;
  #L0d340a.  goto L0d340e;
  #L0d340c.  v1:= 0I;
  #L0d340e.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d3450.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L0d3454.  v1:= -1I;
  #L0d3456.  if v0 != v1 then goto L0d3460;
  #L0d345a.  call `b`(v3) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @kind direct;
  #L0d3460.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L0d3464.  if v0 == 0 then goto L0d3478;
  #L0d3468.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0d346c.  v2:= 0I;
  #L0d346e.  v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L0d3472.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3476.  return v0 @kind object;
  #L0d3478.  v0:= new `java.util.NoSuchElementException`;
  #L0d347c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d3482.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3554.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d3558.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d355c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3562.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d3574.  v0.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L0d3578.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d358c.  v0.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3590.  return @kind void;
}
