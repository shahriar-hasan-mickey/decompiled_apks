record `kotlin.sequences.a` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `java.util.Iterator` `kotlin.sequences.a.c` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.sequences.a.d` @AccessFlag PRIVATE_FINAL;
  `java.util.HashSet` `kotlin.sequences.a.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.a` v1 @kind this, `java.util.Iterator` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/a;.<init>:(Ljava/util/Iterator;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0d2d98.  v0:= "source" @kind object;
  #L0d2d9c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d2da2.  v0:= "keySelector" @kind object;
  #L0d2da6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d2dac.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L0d2db2.  v1.`kotlin.sequences.a.c` @type ^`java.util.Iterator` := v2 @kind object;
  #L0d2db6.  v1.`kotlin.sequences.a.d` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L0d2dba.  v2:= new `java.util.HashSet`;
  #L0d2dbe.  call `<init>`(v2) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L0d2dc4.  v1.`kotlin.sequences.a.e` @type ^`java.util.HashSet` := v2 @kind object;
  #L0d2dc8.  return @kind void;
}
procedure `void` `computeNext`(`kotlin.sequences.a` v3 @kind this) @signature `Lkotlin/sequences/a;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L0d2ddc.  v0:= v3.`kotlin.sequences.a.c` @type ^`java.util.Iterator` @kind object;
  #L0d2de0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d2de6.  v0:= temp;
  #L0d2de8.  if v0 == 0 then goto L0d2e1c;
  #L0d2dec.  v0:= v3.`kotlin.sequences.a.c` @type ^`java.util.Iterator` @kind object;
  #L0d2df0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d2df6.  v0:= temp @kind object;
  #L0d2df8.  v1:= v3.`kotlin.sequences.a.d` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0d2dfc.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d2e02.  v1:= temp @kind object;
  #L0d2e04.  v2:= v3.`kotlin.sequences.a.e` @type ^`java.util.HashSet` @kind object;
  #L0d2e08.  call temp:= `add`(v2, v1) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L0d2e0e.  v1:= temp;
  #L0d2e10.  if v1 == 0 then goto L0d2ddc;
  #L0d2e14.  call `setNext`(v3, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L0d2e1a.  return @kind void;
  #L0d2e1c.  call `done`(v3) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L0d2e22.  return @kind void;
}
