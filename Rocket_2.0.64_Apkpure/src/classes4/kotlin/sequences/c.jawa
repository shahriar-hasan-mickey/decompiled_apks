record `kotlin.sequences.c` @kind class @AccessFlag FINAL extends `kotlin.sequences.SequenceScope` @kind class, `java.util.Iterator` @kind interface, `kotlin.coroutines.Continuation` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.c.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.c.b` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.c.c` @AccessFlag PRIVATE;
  `kotlin.coroutines.Continuation` `kotlin.sequences.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.c` v0 @kind this) @signature `Lkotlin/sequences/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0d4018.  call `<init>`(v0) @signature `Lkotlin/sequences/SequenceScope;.<init>:()V` @kind direct;
  #L0d401e.  return @kind void;
}
procedure `java.lang.Throwable` `b`(`kotlin.sequences.c` v3 @kind this) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d3f90.  v0:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L0d3f94.  v1:= 4I;
  #L0d3f96.  if v0 == v1 then goto L0d3fe2;
  #L0d3f9a.  v1:= 5I;
  #L0d3f9c.  if v0 == v1 then goto L0d3fd2;
  #L0d3fa0.  v0:= new `java.lang.IllegalStateException`;
  #L0d3fa4.  v1:= new `java.lang.StringBuilder`;
  #L0d3fa8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d3fae.  v2:= "Unexpected state of the iterator: " @kind object;
  #L0d3fb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d3fb8.  v2:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L0d3fbc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d3fc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d3fc8.  v1:= temp @kind object;
  #L0d3fca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3fd0.  goto L0d3fec;
  #L0d3fd2.  v0:= new `java.lang.IllegalStateException`;
  #L0d3fd6.  v1:= "Iterator has failed." @kind object;
  #L0d3fda.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3fe0.  goto L0d3fec;
  #L0d3fe2.  v0:= new `java.util.NoSuchElementException`;
  #L0d3fe6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d3fec.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlin.sequences.c` v1 @kind this) @signature `Lkotlin/sequences/c;.c:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0d3eb0.  call temp:= `hasNext`(v1) @signature `Lkotlin/sequences/c;.hasNext:()Z` @kind virtual;
  #L0d3eb6.  v0:= temp;
  #L0d3eb8.  if v0 == 0 then goto L0d3ec6;
  #L0d3ebc.  call temp:= `next`(v1) @signature `Lkotlin/sequences/c;.next:()Ljava/lang/Object;` @kind virtual;
  #L0d3ec2.  v0:= temp @kind object;
  #L0d3ec4.  return v0 @kind object;
  #L0d3ec6.  v0:= new `java.util.NoSuchElementException`;
  #L0d3eca.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d3ed0.  throw v0;
}
procedure `void` `d`(`kotlin.sequences.c` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/sequences/c;.d:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d4070.  v0.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L0d4074.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.sequences.c` v1 @kind this) @signature `Lkotlin/sequences/c;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d4000.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L0d4004.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.c` v4 @kind this) @signature `Lkotlin/sequences/c;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d3db8.  v0:= v4.`kotlin.sequences.c.a` @type ^`int`;
  #L0d3dbc.  v1:= 0I;
  #L0d3dbe.  if v0 == 0 then goto L0d3e0a;
  #L0d3dc2.  v2:= 2I;
  #L0d3dc4.  v3:= 1I;
  #L0d3dc6.  if v0 == v3 then goto L0d3dea;
  #L0d3dca.  if v0 == v2 then goto L0d3de8;
  #L0d3dce.  v1:= 3I;
  #L0d3dd0.  if v0 == v1 then goto L0d3de8;
  #L0d3dd4.  v1:= 4I;
  #L0d3dd6.  if v0 != v1 then goto L0d3dde;
  #L0d3dda.  v0:= 0I;
  #L0d3ddc.  return v0;
  #L0d3dde.  call temp:= `b`(v4) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @kind direct;
  #L0d3de4.  v0:= temp @kind object;
  #L0d3de6.  throw v0;
  #L0d3de8.  return v3;
  #L0d3dea.  v0:= v4.`kotlin.sequences.c.c` @type ^`java.util.Iterator` @kind object;
  #L0d3dee.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d3df4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3dfa.  v0:= temp;
  #L0d3dfc.  if v0 == 0 then goto L0d3e06;
  #L0d3e00.  v4.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L0d3e04.  return v3;
  #L0d3e06.  v4.`kotlin.sequences.c.c` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d3e0a.  v0:= 5I;
  #L0d3e0c.  v4.`kotlin.sequences.c.a` @type ^`int` := v0;
  #L0d3e10.  v0:= v4.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0d3e14.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d3e1a.  v4.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L0d3e1e.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L0d3e22.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d3e26.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L0d3e2c.  v1:= temp @kind object;
  #L0d3e2e.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L0d3e34.  goto L0d3db8;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.c` v3 @kind this) @signature `Lkotlin/sequences/c;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d3e48.  v0:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L0d3e4c.  if v0 == 0 then goto L0d3e96;
  #L0d3e50.  v1:= 1I;
  #L0d3e52.  if v0 == v1 then goto L0d3e96;
  #L0d3e56.  v2:= 2I;
  #L0d3e58.  if v0 == v2 then goto L0d3e7e;
  #L0d3e5c.  v1:= 3I;
  #L0d3e5e.  if v0 != v1 then goto L0d3e74;
  #L0d3e62.  v0:= 0I;
  #L0d3e64.  v3.`kotlin.sequences.c.a` @type ^`int` := v0;
  #L0d3e68.  v0:= v3.`kotlin.sequences.c.b` @type ^`java.lang.Object` @kind object;
  #L0d3e6c.  v1:= 0I;
  #L0d3e6e.  v3.`kotlin.sequences.c.b` @type ^`java.lang.Object` := v1 @kind object;
  #L0d3e72.  return v0 @kind object;
  #L0d3e74.  call temp:= `b`(v3) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @kind direct;
  #L0d3e7a.  v0:= temp @kind object;
  #L0d3e7c.  throw v0;
  #L0d3e7e.  v3.`kotlin.sequences.c.a` @type ^`int` := v1;
  #L0d3e82.  v0:= v3.`kotlin.sequences.c.c` @type ^`java.util.Iterator` @kind object;
  #L0d3e86.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d3e8c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d3e92.  v0:= temp @kind object;
  #L0d3e94.  return v0 @kind object;
  #L0d3e96.  call temp:= `c`(v3) @signature `Lkotlin/sequences/c;.c:()Ljava/lang/Object;` @kind direct;
  #L0d3e9c.  v0:= temp @kind object;
  #L0d3e9e.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.c` v2 @kind this) @signature `Lkotlin/sequences/c;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d4030.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d4034.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d4038.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d403e.  throw v0;
}
procedure `void` `resumeWith`(`kotlin.sequences.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/c;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L0d4050.  call `throwOnFailure`(v1) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d4056.  v1:= 4I;
  #L0d4058.  v0.`kotlin.sequences.c.a` @type ^`int` := v1;
  #L0d405c.  return @kind void;
}
procedure `java.lang.Object` `yield`(`kotlin.sequences.c` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/c;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3ee4.  v1.`kotlin.sequences.c.b` @type ^`java.lang.Object` := v2 @kind object;
  #L0d3ee8.  v2:= 3I;
  #L0d3eea.  v1.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L0d3eee.  v1.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L0d3ef2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3ef8.  v2:= temp @kind object;
  #L0d3efa.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3f00.  v0:= temp @kind object;
  #L0d3f02.  if v2 != v0 then goto L0d3f0c;
  #L0d3f06.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L0d3f0c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3f12.  v3:= temp @kind object;
  #L0d3f14.  if v2 != v3 then goto L0d3f1a;
  #L0d3f18.  return v2 @kind object;
  #L0d3f1a.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d3f1e.  return v2 @kind object;
}
procedure `java.lang.Object` `yieldAll`(`kotlin.sequences.c` v1 @kind this, `java.util.Iterator` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/c;.yieldAll:(Ljava/util/Iterator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3f30.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3f36.  v0:= temp;
  #L0d3f38.  if v0 != 0 then goto L0d3f42;
  #L0d3f3c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d3f40.  return v2 @kind object;
  #L0d3f42.  v1.`kotlin.sequences.c.c` @type ^`java.util.Iterator` := v2 @kind object;
  #L0d3f46.  v2:= 2I;
  #L0d3f48.  v1.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L0d3f4c.  v1.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L0d3f50.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3f56.  v2:= temp @kind object;
  #L0d3f58.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3f5e.  v0:= temp @kind object;
  #L0d3f60.  if v2 != v0 then goto L0d3f6a;
  #L0d3f64.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L0d3f6a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d3f70.  v3:= temp @kind object;
  #L0d3f72.  if v2 != v3 then goto L0d3f78;
  #L0d3f76.  return v2 @kind object;
  #L0d3f78.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d3f7c.  return v2 @kind object;
}
