record `kotlin.sequences.SubSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.SubSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence` v2 @kind this, `kotlin.sequences.Sequence` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0d9dd0.  v0:= "sequence" @kind object;
  #L0d9dd4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9dda.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d9de0.  v2.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` := v3 @kind object;
  #L0d9de4.  v2.`kotlin.sequences.SubSequence.b` @type ^`int` := v4;
  #L0d9de8.  v2.`kotlin.sequences.SubSequence.c` @type ^`int` := v5;
  #L0d9dec.  v3:= 1I;
  #L0d9dee.  v0:= 0I;
  #L0d9df0.  if v4 < 0 then goto L0d9df8;
  #L0d9df4.  v1:= 1I;
  #L0d9df6.  goto L0d9dfa;
  #L0d9df8.  v1:= 0I;
  #L0d9dfa.  if v1 == 0 then goto L0d9e96;
  #L0d9dfe.  if v5 < 0 then goto L0d9e06;
  #L0d9e02.  v1:= 1I;
  #L0d9e04.  goto L0d9e08;
  #L0d9e06.  v1:= 0I;
  #L0d9e08.  if v1 == 0 then goto L0d9e60;
  #L0d9e0c.  if v5 < v4 then goto L0d9e12;
  #L0d9e10.  goto L0d9e14;
  #L0d9e12.  v3:= 0I;
  #L0d9e14.  if v3 == 0 then goto L0d9e1a;
  #L0d9e18.  return @kind void;
  #L0d9e1a.  v3:= new `java.lang.StringBuilder`;
  #L0d9e1e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d9e24.  v0:= "endIndex should be not less than startIndex, but was " @kind object;
  #L0d9e28.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e2e.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e34.  v5:= " < " @kind object;
  #L0d9e38.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e3e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e44.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9e4a.  v3:= temp @kind object;
  #L0d9e4c.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d9e50.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9e56.  v3:= temp @kind object;
  #L0d9e58.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d9e5e.  throw v4;
  #L0d9e60.  v3:= new `java.lang.StringBuilder`;
  #L0d9e64.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d9e6a.  v4:= "endIndex should be non-negative, but is " @kind object;
  #L0d9e6e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e74.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9e7a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9e80.  v3:= temp @kind object;
  #L0d9e82.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d9e86.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9e8c.  v3:= temp @kind object;
  #L0d9e8e.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d9e94.  throw v4;
  #L0d9e96.  v3:= new `java.lang.StringBuilder`;
  #L0d9e9a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d9ea0.  v5:= "startIndex should be non-negative, but is " @kind object;
  #L0d9ea4.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9eaa.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d9eb0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9eb6.  v3:= temp @kind object;
  #L0d9eb8.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d9ebc.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d9ec2.  v3:= temp @kind object;
  #L0d9ec4.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d9eca.  throw v4;
}
procedure `int` `a`(`kotlin.sequences.SubSequence` v2 @kind this) @signature `Lkotlin/sequences/SubSequence;.a:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0d9d04.  v0:= v2.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L0d9d08.  v1:= v2.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L0d9d0c.  v0:= v0 - v1 @kind int;
  #L0d9d0e.  return v0;
}
procedure `int` `access$getEndIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d9cd4.  v0:= v0.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L0d9cd8.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d9d3c.  v0:= v0.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d9d40.  return v0 @kind object;
}
procedure `int` `access$getStartIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d9cec.  v0:= v0.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L0d9cf0.  return v0;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d9d54.  call temp:= `a`(v3) @signature `Lkotlin/sequences/SubSequence;.a:()I` @kind direct;
  #L0d9d5a.  v0:= temp;
  #L0d9d5c.  if v4 < v0 then goto L0d9d6a;
  #L0d9d60.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L0d9d66.  v4:= temp @kind object;
  #L0d9d68.  goto L0d9d84;
  #L0d9d6a.  v0:= new `kotlin.sequences.SubSequence`;
  #L0d9d6e.  v1:= v3.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d9d72.  v2:= v3.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L0d9d76.  v2:= v2 + v4 @kind int;
  #L0d9d78.  v4:= v3.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L0d9d7c.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L0d9d82.  v4:= v0 @kind object;
  #L0d9d84.  return v4 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.SubSequence` v1 @kind this) @signature `Lkotlin/sequences/SubSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d9d20.  v0:= new `kotlin.sequences.SubSequence$iterator$1`;
  #L0d9d24.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @kind direct;
  #L0d9d2a.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d9d98.  call temp:= `a`(v3) @signature `Lkotlin/sequences/SubSequence;.a:()I` @kind direct;
  #L0d9d9e.  v0:= temp;
  #L0d9da0.  if v4 < v0 then goto L0d9da8;
  #L0d9da4.  v0:= v3 @kind object;
  #L0d9da6.  goto L0d9dbc;
  #L0d9da8.  v0:= new `kotlin.sequences.SubSequence`;
  #L0d9dac.  v1:= v3.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d9db0.  v2:= v3.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L0d9db4.  v4:= v4 + v2 @kind int;
  #L0d9db6.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L0d9dbc.  return v0 @kind object;
}
