record `kotlin.sequences.SequencesKt___SequencesKt$o` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.a` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.b` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$o.c` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.d` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$o.e` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.SequencesKt___SequencesKt$o.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$o` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d5ea4.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L0d5ea8.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L0d5eac.  v1:= 2I;
  #L0d5eae.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d5eb4.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$o` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d5e7c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$o`;
  #L0d5e80.  v1:= v3.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d5e84.  v2:= v3.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L0d5e88.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d5e8e.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` := v4 @kind object;
  #L0d5e92.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$o` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0d5d3c.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L0d5d40.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L0d5d44.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5d4a.  v1:= temp @kind object;
  #L0d5d4c.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$o` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d5d60.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L0d5d66.  v1:= temp @kind object;
  #L0d5d68.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$o`) v1 @kind object;
  #L0d5d6c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d5d70.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0d5d76.  v1:= temp @kind object;
  #L0d5d78.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$o` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0d5d8c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d5d92.  v0:= temp @kind object;
  #L0d5d94.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`int`;
  #L0d5d98.  v2:= 2I;
  #L0d5d9a.  v3:= 1I;
  #L0d5d9c.  if v1 == 0 then goto L0d5dd4;
  #L0d5da0.  if v1 == v3 then goto L0d5da8;
  #L0d5da4.  if v1 != v2 then goto L0d5dc4;
  #L0d5da8.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` @kind object;
  #L0d5dac.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.a` @type ^`java.lang.Object` @kind object;
  #L0d5db0.  v3:= (`java.util.Iterator`) v3 @kind object;
  #L0d5db4.  v4:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` @kind object;
  #L0d5db8.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L0d5dbc.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d5dc2.  goto L0d5e24;
  #L0d5dc4.  v8:= new `java.lang.IllegalStateException`;
  #L0d5dc8.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L0d5dcc.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d5dd2.  throw v8;
  #L0d5dd4.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d5dda.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` @kind object;
  #L0d5dde.  v4:= v8 @kind object;
  #L0d5de0.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L0d5de4.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d5de8.  call temp:= `iterator`(v8) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d5dee.  v8:= temp @kind object;
  #L0d5df0.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d5df6.  v1:= temp;
  #L0d5df8.  if v1 == 0 then goto L0d5e64;
  #L0d5dfc.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d5e02.  v1:= temp @kind object;
  #L0d5e04.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` := v4 @kind object;
  #L0d5e08.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.a` @type ^`java.lang.Object` := v8 @kind object;
  #L0d5e0c.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` := v1 @kind object;
  #L0d5e10.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`int` := v3;
  #L0d5e14.  call temp:= `yield`(v4, v1, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5e1a.  v3:= temp @kind object;
  #L0d5e1c.  if v3 != v0 then goto L0d5e22;
  #L0d5e20.  return v0 @kind object;
  #L0d5e22.  v3:= v8 @kind object;
  #L0d5e24.  v8:= v7 @kind object;
  #L0d5e26.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d5e2c.  v5:= temp;
  #L0d5e2e.  if v5 == 0 then goto L0d5e64;
  #L0d5e32.  v5:= v8.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L0d5e36.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d5e3c.  v6:= temp @kind object;
  #L0d5e3e.  call temp:= `invoke`(v5, v1, v6) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d5e44.  v1:= temp @kind object;
  #L0d5e46.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` := v4 @kind object;
  #L0d5e4a.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.a` @type ^`java.lang.Object` := v3 @kind object;
  #L0d5e4e.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` := v1 @kind object;
  #L0d5e52.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`int` := v2;
  #L0d5e56.  call temp:= `yield`(v4, v1, v8) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5e5c.  v5:= temp @kind object;
  #L0d5e5e.  if v5 != v0 then goto L0d5e26;
  #L0d5e62.  return v0 @kind object;
  #L0d5e64.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d5e68.  return v8 @kind object;
}
