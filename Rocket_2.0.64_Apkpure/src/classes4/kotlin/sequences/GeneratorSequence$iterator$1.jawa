record `kotlin.sequences.GeneratorSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object` `kotlin.sequences.GeneratorSequence$iterator$1.a` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.GeneratorSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.GeneratorSequence` `kotlin.sequences.GeneratorSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `kotlin.sequences.GeneratorSequence` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.<init>:(Lkotlin/sequences/GeneratorSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d3940.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` := v1 @kind object;
  #L0d3944.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d394a.  v1:= -2I;
  #L0d394c.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3950.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0d3964.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d3968.  v1:= -2I;
  #L0d396a.  if v0 != v1 then goto L0d3984;
  #L0d396e.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L0d3972.  call temp:= `a`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.a:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function0;` @kind static;
  #L0d3978.  v0:= temp @kind object;
  #L0d397a.  call temp:= `invoke`(v0) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L0d3980.  v0:= temp @kind object;
  #L0d3982.  goto L0d39a2;
  #L0d3984.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L0d3988.  call temp:= `b`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.b:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0d398e.  v0:= temp @kind object;
  #L0d3990.  v1:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L0d3994.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d399a.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d39a0.  v0:= temp @kind object;
  #L0d39a2.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` := v0 @kind object;
  #L0d39a6.  if v0 != 0 then goto L0d39ae;
  #L0d39aa.  v0:= 0I;
  #L0d39ac.  goto L0d39b0;
  #L0d39ae.  v0:= 1I;
  #L0d39b0.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v0;
  #L0d39b4.  return @kind void;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d38e0.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L0d38e4.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d38c8.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d38cc.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3898.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d389c.  if v0 >= 0 then goto L0d38a6;
  #L0d38a0.  call `b`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @kind direct;
  #L0d38a6.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d38aa.  v1:= 1I;
  #L0d38ac.  if v0 != v1 then goto L0d38b2;
  #L0d38b0.  goto L0d38b4;
  #L0d38b2.  v1:= 0I;
  #L0d38b4.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d38f8.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d38fc.  if v0 >= 0 then goto L0d3906;
  #L0d3900.  call `b`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @kind direct;
  #L0d3906.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L0d390a.  if v0 == 0 then goto L0d3924;
  #L0d390e.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L0d3912.  v1:= "null cannot be cast to non-null type T of kotlin.sequences.GeneratorSequence" @kind object;
  #L0d3916.  call `checkNotNull`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d391c.  v1:= -1I;
  #L0d391e.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3922.  return v0 @kind object;
  #L0d3924.  v0:= new `java.util.NoSuchElementException`;
  #L0d3928.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d392e.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d39c8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d39cc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d39d0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d39d6.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d39e8.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` := v1 @kind object;
  #L0d39ec.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d3a00.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3a04.  return @kind void;
}
