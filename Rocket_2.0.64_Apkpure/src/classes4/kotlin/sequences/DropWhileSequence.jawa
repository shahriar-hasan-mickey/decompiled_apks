record `kotlin.sequences.DropWhileSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.DropWhileSequence.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.sequences.DropWhileSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.DropWhileSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/DropWhileSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0d3304.  v0:= "sequence" @kind object;
  #L0d3308.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d330e.  v0:= "predicate" @kind object;
  #L0d3312.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d3318.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d331e.  v1.`kotlin.sequences.DropWhileSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L0d3322.  v1.`kotlin.sequences.DropWhileSequence.b` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L0d3326.  return @kind void;
}
procedure `kotlin.jvm.functions.Function1` `access$getPredicate$p`(`kotlin.sequences.DropWhileSequence` v0 @kind object) @signature `Lkotlin/sequences/DropWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d32d4.  v0:= v0.`kotlin.sequences.DropWhileSequence.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0d32d8.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.DropWhileSequence` v0 @kind object) @signature `Lkotlin/sequences/DropWhileSequence;.access$getSequence$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d32ec.  v0:= v0.`kotlin.sequences.DropWhileSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d32f0.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.DropWhileSequence` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d32b8.  v0:= new `kotlin.sequences.DropWhileSequence$iterator$1`;
  #L0d32bc.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/DropWhileSequence;)V` @kind direct;
  #L0d32c2.  return v0 @kind object;
}
