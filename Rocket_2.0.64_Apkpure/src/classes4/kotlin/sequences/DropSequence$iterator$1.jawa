record `kotlin.sequences.DropSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.DropSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropSequence$iterator$1.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this, `kotlin.sequences.DropSequence` v2 @kind object) @signature `Lkotlin/sequences/DropSequence$iterator$1;.<init>:(Lkotlin/sequences/DropSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L0d2f0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d2f12.  call temp:= `access$getSequence$p`(v2) @signature `Lkotlin/sequences/DropSequence;.access$getSequence$p:(Lkotlin/sequences/DropSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d2f18.  v0:= temp @kind object;
  #L0d2f1a.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d2f20.  v0:= temp @kind object;
  #L0d2f22.  v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L0d2f26.  call temp:= `access$getCount$p`(v2) @signature `Lkotlin/sequences/DropSequence;.access$getCount$p:(Lkotlin/sequences/DropSequence;)I` @kind static;
  #L0d2f2c.  v2:= temp;
  #L0d2f2e.  v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v2;
  #L0d2f32.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0d2f44.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L0d2f48.  if v0 <= 0 then goto L0d2f74;
  #L0d2f4c.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d2f50.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d2f56.  v0:= temp;
  #L0d2f58.  if v0 == 0 then goto L0d2f74;
  #L0d2f5c.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d2f60.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d2f66.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L0d2f6a.  v0:= v0 + -1;
  #L0d2f6e.  v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v0;
  #L0d2f72.  goto L0d2f44;
  #L0d2f74.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d2ef4.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d2ef8.  return v0 @kind object;
}
procedure `int` `getLeft`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.getLeft:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d2eb8.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L0d2ebc.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2e94.  call `b`(v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @kind direct;
  #L0d2e9a.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d2e9e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d2ea4.  v0:= temp;
  #L0d2ea6.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2ed0.  call `b`(v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @kind direct;
  #L0d2ed6.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d2eda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d2ee0.  v0:= temp @kind object;
  #L0d2ee2.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.DropSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d2f88.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d2f8c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d2f90.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d2f96.  throw v0;
}
procedure `void` `setLeft`(`kotlin.sequences.DropSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/DropSequence$iterator$1;.setLeft:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d2fa8.  v0.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v1;
  #L0d2fac.  return @kind void;
}
