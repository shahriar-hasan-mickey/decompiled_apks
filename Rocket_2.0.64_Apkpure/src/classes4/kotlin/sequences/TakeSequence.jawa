record `kotlin.sequences.TakeSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.TakeSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TakeSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.TakeSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `int` v3 ) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0da094.  v0:= "sequence" @kind object;
  #L0da098.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da09e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0da0a4.  v1.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L0da0a8.  v1.`kotlin.sequences.TakeSequence.b` @type ^`int` := v3;
  #L0da0ac.  if v3 < 0 then goto L0da0b4;
  #L0da0b0.  v2:= 1I;
  #L0da0b2.  goto L0da0b6;
  #L0da0b4.  v2:= 0I;
  #L0da0b6.  if v2 == 0 then goto L0da0bc;
  #L0da0ba.  return @kind void;
  #L0da0bc.  v2:= new `java.lang.StringBuilder`;
  #L0da0c0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0da0c6.  v0:= "count must be non-negative, but was " @kind object;
  #L0da0ca.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0da0d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0da0d6.  v3:= 46I;
  #L0da0da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0da0e0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0da0e6.  v2:= temp @kind object;
  #L0da0e8.  v3:= new `java.lang.IllegalArgumentException`;
  #L0da0ec.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0da0f2.  v2:= temp @kind object;
  #L0da0f4.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0da0fa.  throw v3;
}
procedure `int` `access$getCount$p`(`kotlin.sequences.TakeSequence` v0 @kind object) @signature `Lkotlin/sequences/TakeSequence;.access$getCount$p:(Lkotlin/sequences/TakeSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d9fe8.  v0:= v0.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L0d9fec.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.TakeSequence` v0 @kind object) @signature `Lkotlin/sequences/TakeSequence;.access$getSequence$p:(Lkotlin/sequences/TakeSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0da01c.  v0:= v0.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0da020.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.TakeSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/TakeSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0da034.  v0:= v3.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L0da038.  if v4 < v0 then goto L0da046;
  #L0da03c.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L0da042.  v4:= temp @kind object;
  #L0da044.  goto L0da056;
  #L0da046.  v1:= new `kotlin.sequences.SubSequence`;
  #L0da04a.  v2:= v3.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0da04e.  call `<init>`(v1, v2, v4, v0) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L0da054.  v4:= v1 @kind object;
  #L0da056.  return v4 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.TakeSequence` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0da000.  v0:= new `kotlin.sequences.TakeSequence$iterator$1`;
  #L0da004.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeSequence;)V` @kind direct;
  #L0da00a.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.TakeSequence` v2 @kind this, `int` v3 ) @signature `Lkotlin/sequences/TakeSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0da068.  v0:= v2.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L0da06c.  if v3 < v0 then goto L0da074;
  #L0da070.  v0:= v2 @kind object;
  #L0da072.  goto L0da082;
  #L0da074.  v0:= new `kotlin.sequences.TakeSequence`;
  #L0da078.  v1:= v2.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0da07c.  call `<init>`(v0, v1, v3) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0da082.  return v0 @kind object;
}
