record `kotlin.sequences.MergingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.MergingSequence` `kotlin.sequences.MergingSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this, `kotlin.sequences.MergingSequence` v2 @kind object) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.<init>:(Lkotlin/sequences/MergingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L0d3cac.  v1.`kotlin.sequences.MergingSequence$iterator$1.c` @type ^`kotlin.sequences.MergingSequence` := v2 @kind object;
  #L0d3cb0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d3cb6.  call temp:= `access$getSequence1$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence1$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d3cbc.  v0:= temp @kind object;
  #L0d3cbe.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d3cc4.  v0:= temp @kind object;
  #L0d3cc6.  v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L0d3cca.  call temp:= `access$getSequence2$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence2$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d3cd0.  v2:= temp @kind object;
  #L0d3cd2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d3cd8.  v2:= temp @kind object;
  #L0d3cda.  v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L0d3cde.  return @kind void;
}
procedure `java.util.Iterator` `getIterator1`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator1:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3c7c.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3c80.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator2`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator2:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3c94.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d3c98.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3c04.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3c08.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3c0e.  v0:= temp;
  #L0d3c10.  if v0 == 0 then goto L0d3c28;
  #L0d3c14.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d3c18.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3c1e.  v0:= temp;
  #L0d3c20.  if v0 == 0 then goto L0d3c28;
  #L0d3c24.  v0:= 1I;
  #L0d3c26.  goto L0d3c2a;
  #L0d3c28.  v0:= 0I;
  #L0d3c2a.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.MergingSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d3c3c.  v0:= v3.`kotlin.sequences.MergingSequence$iterator$1.c` @type ^`kotlin.sequences.MergingSequence` @kind object;
  #L0d3c40.  call temp:= `access$getTransform$p`(v0) @signature `Lkotlin/sequences/MergingSequence;.access$getTransform$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L0d3c46.  v0:= temp @kind object;
  #L0d3c48.  v1:= v3.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3c4c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d3c52.  v1:= temp @kind object;
  #L0d3c54.  v2:= v3.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d3c58.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d3c5e.  v2:= temp @kind object;
  #L0d3c60.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d3c66.  v0:= temp @kind object;
  #L0d3c68.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.MergingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3cf0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d3cf4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d3cf8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3cfe.  throw v0;
}
