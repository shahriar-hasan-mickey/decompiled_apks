record `kotlin.sequences.SequencesKt___SequencesKt$n` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$n.a` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$n.b` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$n.c` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$n.d` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$n.e` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$n.f` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$n.g` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function3` `kotlin.sequences.SequencesKt___SequencesKt$n.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$n` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d5d14.  v0.`kotlin.sequences.SequencesKt___SequencesKt$n.f` @type ^`java.lang.Object` := v1 @kind object;
  #L0d5d18.  v0.`kotlin.sequences.SequencesKt___SequencesKt$n.g` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L0d5d1c.  v0.`kotlin.sequences.SequencesKt___SequencesKt$n.h` @type ^`kotlin.jvm.functions.Function3` := v3 @kind object;
  #L0d5d20.  v1:= 2I;
  #L0d5d22.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d5d28.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$n` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d5ce8.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$n`;
  #L0d5cec.  v1:= v4.`kotlin.sequences.SequencesKt___SequencesKt$n.f` @type ^`java.lang.Object` @kind object;
  #L0d5cf0.  v2:= v4.`kotlin.sequences.SequencesKt___SequencesKt$n.g` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d5cf4.  v3:= v4.`kotlin.sequences.SequencesKt___SequencesKt$n.h` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L0d5cf8.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d5cfe.  v0.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` := v5 @kind object;
  #L0d5d02.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$n` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0d5b80.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L0d5b84.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L0d5b88.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5b8e.  v1:= temp @kind object;
  #L0d5b90.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$n` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d5ba4.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L0d5baa.  v1:= temp @kind object;
  #L0d5bac.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$n`) v1 @kind object;
  #L0d5bb0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d5bb4.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0d5bba.  v1:= temp @kind object;
  #L0d5bbc.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$n` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0d5bd0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0d5bd6.  v0:= temp @kind object;
  #L0d5bd8.  v1:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.d` @type ^`int`;
  #L0d5bdc.  v2:= 2I;
  #L0d5bde.  v3:= 1I;
  #L0d5be0.  if v1 == 0 then goto L0d5c30;
  #L0d5be4.  if v1 == v3 then goto L0d5c20;
  #L0d5be8.  if v1 != v2 then goto L0d5c10;
  #L0d5bec.  v1:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.c` @type ^`int`;
  #L0d5bf0.  v3:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.b` @type ^`java.lang.Object` @kind object;
  #L0d5bf4.  v3:= (`java.util.Iterator`) v3 @kind object;
  #L0d5bf8.  v4:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.a` @type ^`java.lang.Object` @kind object;
  #L0d5bfc.  v5:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` @kind object;
  #L0d5c00.  v5:= (`kotlin.sequences.SequenceScope`) v5 @kind object;
  #L0d5c04.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d5c0a.  v10:= v1;
  #L0d5c0c.  v1:= v4 @kind object;
  #L0d5c0e.  goto L0d5c72;
  #L0d5c10.  v10:= new `java.lang.IllegalStateException`;
  #L0d5c14.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L0d5c18.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d5c1e.  throw v10;
  #L0d5c20.  v1:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` @kind object;
  #L0d5c24.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L0d5c28.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d5c2e.  goto L0d5c5a;
  #L0d5c30.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L0d5c36.  v10:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` @kind object;
  #L0d5c3a.  v1:= v10 @kind object;
  #L0d5c3c.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L0d5c40.  v10:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.f` @type ^`java.lang.Object` @kind object;
  #L0d5c44.  v9.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` := v1 @kind object;
  #L0d5c48.  v9.`kotlin.sequences.SequencesKt___SequencesKt$n.d` @type ^`int` := v3;
  #L0d5c4c.  call temp:= `yield`(v1, v10, v9) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5c52.  v10:= temp @kind object;
  #L0d5c54.  if v10 != v0 then goto L0d5c5a;
  #L0d5c58.  return v0 @kind object;
  #L0d5c5a.  v10:= 0I;
  #L0d5c5c.  v3:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.f` @type ^`java.lang.Object` @kind object;
  #L0d5c60.  v4:= v9.`kotlin.sequences.SequencesKt___SequencesKt$n.g` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d5c64.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d5c6a.  v4:= temp @kind object;
  #L0d5c6c.  v5:= v1 @kind object;
  #L0d5c6e.  v1:= v3 @kind object;
  #L0d5c70.  v3:= v4 @kind object;
  #L0d5c72.  v4:= v9 @kind object;
  #L0d5c74.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d5c7a.  v6:= temp;
  #L0d5c7c.  if v6 == 0 then goto L0d5cd2;
  #L0d5c80.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d5c86.  v6:= temp @kind object;
  #L0d5c88.  v7:= v4.`kotlin.sequences.SequencesKt___SequencesKt$n.h` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L0d5c8c.  v8:= v10 + 1;
  #L0d5c90.  if v10 >= 0 then goto L0d5c9a;
  #L0d5c94.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d5c9a.  call temp:= `boxInt`(v10) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxInt:(I)Ljava/lang/Integer;` @kind static;
  #L0d5ca0.  v10:= temp @kind object;
  #L0d5ca2.  call temp:= `invoke`(v7, v10, v1, v6) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d5ca8.  v10:= temp @kind object;
  #L0d5caa.  v4.`kotlin.sequences.SequencesKt___SequencesKt$n.e` @type ^`java.lang.Object` := v5 @kind object;
  #L0d5cae.  v4.`kotlin.sequences.SequencesKt___SequencesKt$n.a` @type ^`java.lang.Object` := v10 @kind object;
  #L0d5cb2.  v4.`kotlin.sequences.SequencesKt___SequencesKt$n.b` @type ^`java.lang.Object` := v3 @kind object;
  #L0d5cb6.  v4.`kotlin.sequences.SequencesKt___SequencesKt$n.c` @type ^`int` := v8;
  #L0d5cba.  v4.`kotlin.sequences.SequencesKt___SequencesKt$n.d` @type ^`int` := v2;
  #L0d5cbe.  call temp:= `yield`(v5, v10, v4) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L0d5cc4.  v1:= temp @kind object;
  #L0d5cc6.  if v1 != v0 then goto L0d5ccc;
  #L0d5cca.  return v0 @kind object;
  #L0d5ccc.  v1:= v10 @kind object;
  #L0d5cce.  v10:= v8;
  #L0d5cd0.  goto L0d5c74;
  #L0d5cd2.  v10:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0d5cd6.  return v10 @kind object;
}
