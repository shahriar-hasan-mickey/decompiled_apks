record `kotlin.sequences.DropWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.DropWhileSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropWhileSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.DropWhileSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.DropWhileSequence` `kotlin.sequences.DropWhileSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.DropWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/DropWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d31cc.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.d` @type ^`kotlin.sequences.DropWhileSequence` := v1 @kind object;
  #L0d31d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d31d6.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getSequence$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d31dc.  v1:= temp @kind object;
  #L0d31de.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d31e4.  v1:= temp @kind object;
  #L0d31e6.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d31ea.  v1:= -1I;
  #L0d31ec.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0d31f0.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0d3204.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3208.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d320e.  v0:= temp;
  #L0d3210.  if v0 == 0 then goto L0d3250;
  #L0d3214.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3218.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d321e.  v0:= temp @kind object;
  #L0d3220.  v1:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.d` @type ^`kotlin.sequences.DropWhileSequence` @kind object;
  #L0d3224.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0d322a.  v1:= temp @kind object;
  #L0d322c.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d3232.  v1:= temp @kind object;
  #L0d3234.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d3238.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d323e.  v1:= temp;
  #L0d3240.  if v1 != 0 then goto L0d3204;
  #L0d3244.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L0d3248.  v0:= 1I;
  #L0d324a.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L0d324e.  return @kind void;
  #L0d3250.  v0:= 0I;
  #L0d3252.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L0d3256.  return @kind void;
}
procedure `int` `getDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getDropState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3138.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L0d313c.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d31b4.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d31b8.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3150.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0d3154.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d30f8.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L0d30fc.  v1:= -1I;
  #L0d30fe.  if v0 != v1 then goto L0d3108;
  #L0d3102.  call `b`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @kind direct;
  #L0d3108.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L0d310c.  v1:= 1I;
  #L0d310e.  if v0 == v1 then goto L0d3126;
  #L0d3112.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3116.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d311c.  v0:= temp;
  #L0d311e.  if v0 == 0 then goto L0d3124;
  #L0d3122.  goto L0d3126;
  #L0d3124.  v1:= 0I;
  #L0d3126.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3168.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L0d316c.  v1:= -1I;
  #L0d316e.  if v0 != v1 then goto L0d3178;
  #L0d3172.  call `b`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @kind direct;
  #L0d3178.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L0d317c.  v1:= 1I;
  #L0d317e.  if v0 != v1 then goto L0d3194;
  #L0d3182.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0d3186.  v1:= 0I;
  #L0d3188.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L0d318c.  v1:= 0I;
  #L0d318e.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3192.  return v0 @kind object;
  #L0d3194.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3198.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d319e.  v0:= temp @kind object;
  #L0d31a0.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3268.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d326c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d3270.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3276.  throw v0;
}
procedure `void` `setDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setDropState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d3288.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0d328c.  return @kind void;
}
procedure `void` `setNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d32a0.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L0d32a4.  return @kind void;
}
