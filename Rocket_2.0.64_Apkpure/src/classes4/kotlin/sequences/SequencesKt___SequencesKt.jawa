record `kotlin.sequences.SequencesKt___SequencesKt` @kind class @AccessFlag  extends `kotlin.sequences.e` @kind class {
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt` v0 @kind this) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0d9810.  call `<init>`(v0) @signature `Lkotlin/sequences/e;.<init>:()V` @kind direct;
  #L0d9816.  return @kind void;
}
procedure `boolean` `all`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.all:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d638c.  v0:= "<this>" @kind object;
  #L0d6390.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6396.  v0:= "predicate" @kind object;
  #L0d639a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d63a0.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d63a6.  v1:= temp @kind object;
  #L0d63a8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d63ae.  v0:= temp;
  #L0d63b0.  if v0 == 0 then goto L0d63d8;
  #L0d63b4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d63ba.  v0:= temp @kind object;
  #L0d63bc.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d63c2.  v0:= temp @kind object;
  #L0d63c4.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L0d63c8.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d63ce.  v0:= temp;
  #L0d63d0.  if v0 != 0 then goto L0d63a8;
  #L0d63d4.  v1:= 0I;
  #L0d63d6.  return v1;
  #L0d63d8.  v1:= 1I;
  #L0d63da.  return v1;
}
procedure `boolean` `any`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.any:(Lkotlin/sequences/Sequence;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d63ec.  v0:= "<this>" @kind object;
  #L0d63f0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d63f6.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d63fc.  v1:= temp @kind object;
  #L0d63fe.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6404.  v1:= temp;
  #L0d6406.  return v1;
}
procedure `boolean` `any`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.any:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d6418.  v0:= "<this>" @kind object;
  #L0d641c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6422.  v0:= "predicate" @kind object;
  #L0d6426.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d642c.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6432.  v1:= temp @kind object;
  #L0d6434.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d643a.  v0:= temp;
  #L0d643c.  if v0 == 0 then goto L0d6464;
  #L0d6440.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6446.  v0:= temp @kind object;
  #L0d6448.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d644e.  v0:= temp @kind object;
  #L0d6450.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L0d6454.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d645a.  v0:= temp;
  #L0d645c.  if v0 == 0 then goto L0d6434;
  #L0d6460.  v1:= 1I;
  #L0d6462.  return v1;
  #L0d6464.  v1:= 0I;
  #L0d6466.  return v1;
}
procedure `java.lang.Iterable` `asIterable`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.asIterable:(Lkotlin/sequences/Sequence;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d7300.  v0:= "<this>" @kind object;
  #L0d7304.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d730a.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1`;
  #L0d730e.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d7314.  return v0 @kind object;
}
procedure `java.util.Map` `associate`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associate:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d85a8.  v0:= "<this>" @kind object;
  #L0d85ac.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d85b2.  v0:= "transform" @kind object;
  #L0d85b6.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d85bc.  v0:= new `java.util.LinkedHashMap`;
  #L0d85c0.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d85c6.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d85cc.  v3:= temp @kind object;
  #L0d85ce.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d85d4.  v1:= temp;
  #L0d85d6.  if v1 == 0 then goto L0d8606;
  #L0d85da.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d85e0.  v1:= temp @kind object;
  #L0d85e2.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d85e8.  v1:= temp @kind object;
  #L0d85ea.  v1:= (`kotlin.Pair`) v1 @kind object;
  #L0d85ee.  call temp:= `getFirst`(v1) @signature `Lkotlin/Pair;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L0d85f4.  v2:= temp @kind object;
  #L0d85f6.  call temp:= `getSecond`(v1) @signature `Lkotlin/Pair;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L0d85fc.  v1:= temp @kind object;
  #L0d85fe.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8604.  goto L0d85ce;
  #L0d8606.  return v0 @kind object;
}
procedure `java.util.Map` `associateBy`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8618.  v0:= "<this>" @kind object;
  #L0d861c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8622.  v0:= "keySelector" @kind object;
  #L0d8626.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d862c.  v0:= new `java.util.LinkedHashMap`;
  #L0d8630.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d8636.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d863c.  v3:= temp @kind object;
  #L0d863e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8644.  v1:= temp;
  #L0d8646.  if v1 == 0 then goto L0d8662;
  #L0d864a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8650.  v1:= temp @kind object;
  #L0d8652.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8658.  v2:= temp @kind object;
  #L0d865a.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8660.  goto L0d863e;
  #L0d8662.  return v0 @kind object;
}
procedure `java.util.Map` `associateBy`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8674.  v0:= "<this>" @kind object;
  #L0d8678.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d867e.  v0:= "keySelector" @kind object;
  #L0d8682.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8688.  v0:= "valueTransform" @kind object;
  #L0d868c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8692.  v0:= new `java.util.LinkedHashMap`;
  #L0d8696.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d869c.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d86a2.  v3:= temp @kind object;
  #L0d86a4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d86aa.  v1:= temp;
  #L0d86ac.  if v1 == 0 then goto L0d86d0;
  #L0d86b0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d86b6.  v1:= temp @kind object;
  #L0d86b8.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d86be.  v2:= temp @kind object;
  #L0d86c0.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d86c6.  v1:= temp @kind object;
  #L0d86c8.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d86ce.  goto L0d86a4;
  #L0d86d0.  return v0 @kind object;
}
procedure `java.util.Map` `associateByTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d86e4.  v0:= "<this>" @kind object;
  #L0d86e8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d86ee.  v0:= "destination" @kind object;
  #L0d86f2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d86f8.  v0:= "keySelector" @kind object;
  #L0d86fc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8702.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8708.  v2:= temp @kind object;
  #L0d870a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8710.  v0:= temp;
  #L0d8712.  if v0 == 0 then goto L0d872e;
  #L0d8716.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d871c.  v0:= temp @kind object;
  #L0d871e.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8724.  v1:= temp @kind object;
  #L0d8726.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d872c.  goto L0d870a;
  #L0d872e.  return v3 @kind object;
}
procedure `java.util.Map` `associateByTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8740.  v0:= "<this>" @kind object;
  #L0d8744.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d874a.  v0:= "destination" @kind object;
  #L0d874e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8754.  v0:= "keySelector" @kind object;
  #L0d8758.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d875e.  v0:= "valueTransform" @kind object;
  #L0d8762.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8768.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d876e.  v2:= temp @kind object;
  #L0d8770.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8776.  v0:= temp;
  #L0d8778.  if v0 == 0 then goto L0d879c;
  #L0d877c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8782.  v0:= temp @kind object;
  #L0d8784.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d878a.  v1:= temp @kind object;
  #L0d878c.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8792.  v0:= temp @kind object;
  #L0d8794.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d879a.  goto L0d8770;
  #L0d879c.  return v3 @kind object;
}
procedure `java.util.Map` `associateTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d87b0.  v0:= "<this>" @kind object;
  #L0d87b4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d87ba.  v0:= "destination" @kind object;
  #L0d87be.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d87c4.  v0:= "transform" @kind object;
  #L0d87c8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d87ce.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d87d4.  v2:= temp @kind object;
  #L0d87d6.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d87dc.  v0:= temp;
  #L0d87de.  if v0 == 0 then goto L0d880e;
  #L0d87e2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d87e8.  v0:= temp @kind object;
  #L0d87ea.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d87f0.  v0:= temp @kind object;
  #L0d87f2.  v0:= (`kotlin.Pair`) v0 @kind object;
  #L0d87f6.  call temp:= `getFirst`(v0) @signature `Lkotlin/Pair;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L0d87fc.  v1:= temp @kind object;
  #L0d87fe.  call temp:= `getSecond`(v0) @signature `Lkotlin/Pair;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L0d8804.  v0:= temp @kind object;
  #L0d8806.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d880c.  goto L0d87d6;
  #L0d880e.  return v3 @kind object;
}
procedure `java.util.Map` `associateWith`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateWith:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8820.  v0:= "<this>" @kind object;
  #L0d8824.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d882a.  v0:= "valueSelector" @kind object;
  #L0d882e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8834.  v0:= new `java.util.LinkedHashMap`;
  #L0d8838.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d883e.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8844.  v3:= temp @kind object;
  #L0d8846.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d884c.  v1:= temp;
  #L0d884e.  if v1 == 0 then goto L0d886a;
  #L0d8852.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8858.  v1:= temp @kind object;
  #L0d885a.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8860.  v2:= temp @kind object;
  #L0d8862.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8868.  goto L0d8846;
  #L0d886a.  return v0 @kind object;
}
procedure `java.util.Map` `associateWithTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateWithTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d887c.  v0:= "<this>" @kind object;
  #L0d8880.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8886.  v0:= "destination" @kind object;
  #L0d888a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8890.  v0:= "valueSelector" @kind object;
  #L0d8894.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d889a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d88a0.  v2:= temp @kind object;
  #L0d88a2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d88a8.  v0:= temp;
  #L0d88aa.  if v0 == 0 then goto L0d88c6;
  #L0d88ae.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d88b4.  v0:= temp @kind object;
  #L0d88b6.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d88bc.  v1:= temp @kind object;
  #L0d88be.  call temp:= `put`(v3, v0, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d88c4.  goto L0d88a2;
  #L0d88c6.  return v3 @kind object;
}
procedure `double` `averageOfByte`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfByte:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d6538.  v0:= "<this>" @kind object;
  #L0d653c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6542.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6548.  v5:= temp @kind object;
  #L0d654a.  v0:= 0L;
  #L0d654e.  v2:= 0I;
  #L0d6550.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6556.  v3:= temp;
  #L0d6558.  if v3 == 0 then goto L0d6584;
  #L0d655c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6562.  v3:= temp @kind object;
  #L0d6564.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d6568.  call temp:= `byteValue`(v3) @signature `Ljava/lang/Number;.byteValue:()B` @kind virtual;
  #L0d656e.  v3:= temp;
  #L0d6570.  v3:= (`double`) v3 @kind i2d;
  #L0d6572.  v0:= v0 + v3 @kind double;
  #L0d6574.  v2:= v2 + 1;
  #L0d6578.  if v2 >= 0 then goto L0d6550;
  #L0d657c.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d6582.  goto L0d6550;
  #L0d6584.  if v2 != 0 then goto L0d658e;
  #L0d6588.  v0:= NaND;
  #L0d658c.  goto L0d6592;
  #L0d658e.  v2:= (`double`) v2 @kind i2d;
  #L0d6590.  v0:= v0 / v2 @kind double;
  #L0d6592.  return v0 @kind wide;
}
procedure `double` `averageOfDouble`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfDouble:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d65a4.  v0:= "<this>" @kind object;
  #L0d65a8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d65ae.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d65b4.  v5:= temp @kind object;
  #L0d65b6.  v0:= 0L;
  #L0d65ba.  v2:= 0I;
  #L0d65bc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d65c2.  v3:= temp;
  #L0d65c4.  if v3 == 0 then goto L0d65ee;
  #L0d65c8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d65ce.  v3:= temp @kind object;
  #L0d65d0.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d65d4.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d65da.  v3:= temp @kind wide;
  #L0d65dc.  v0:= v0 + v3 @kind double;
  #L0d65de.  v2:= v2 + 1;
  #L0d65e2.  if v2 >= 0 then goto L0d65bc;
  #L0d65e6.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d65ec.  goto L0d65bc;
  #L0d65ee.  if v2 != 0 then goto L0d65f8;
  #L0d65f2.  v0:= NaND;
  #L0d65f6.  goto L0d65fc;
  #L0d65f8.  v2:= (`double`) v2 @kind i2d;
  #L0d65fa.  v0:= v0 / v2 @kind double;
  #L0d65fc.  return v0 @kind wide;
}
procedure `double` `averageOfFloat`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfFloat:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d6610.  v0:= "<this>" @kind object;
  #L0d6614.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d661a.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6620.  v5:= temp @kind object;
  #L0d6622.  v0:= 0L;
  #L0d6626.  v2:= 0I;
  #L0d6628.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d662e.  v3:= temp;
  #L0d6630.  if v3 == 0 then goto L0d665c;
  #L0d6634.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d663a.  v3:= temp @kind object;
  #L0d663c.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d6640.  call temp:= `floatValue`(v3) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d6646.  v3:= temp;
  #L0d6648.  v3:= (`double`) v3 @kind f2d;
  #L0d664a.  v0:= v0 + v3 @kind double;
  #L0d664c.  v2:= v2 + 1;
  #L0d6650.  if v2 >= 0 then goto L0d6628;
  #L0d6654.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d665a.  goto L0d6628;
  #L0d665c.  if v2 != 0 then goto L0d6666;
  #L0d6660.  v0:= NaND;
  #L0d6664.  goto L0d666a;
  #L0d6666.  v2:= (`double`) v2 @kind i2d;
  #L0d6668.  v0:= v0 / v2 @kind double;
  #L0d666a.  return v0 @kind wide;
}
procedure `double` `averageOfInt`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfInt:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d667c.  v0:= "<this>" @kind object;
  #L0d6680.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6686.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d668c.  v5:= temp @kind object;
  #L0d668e.  v0:= 0L;
  #L0d6692.  v2:= 0I;
  #L0d6694.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d669a.  v3:= temp;
  #L0d669c.  if v3 == 0 then goto L0d66c8;
  #L0d66a0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d66a6.  v3:= temp @kind object;
  #L0d66a8.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d66ac.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0d66b2.  v3:= temp;
  #L0d66b4.  v3:= (`double`) v3 @kind i2d;
  #L0d66b6.  v0:= v0 + v3 @kind double;
  #L0d66b8.  v2:= v2 + 1;
  #L0d66bc.  if v2 >= 0 then goto L0d6694;
  #L0d66c0.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d66c6.  goto L0d6694;
  #L0d66c8.  if v2 != 0 then goto L0d66d2;
  #L0d66cc.  v0:= NaND;
  #L0d66d0.  goto L0d66d6;
  #L0d66d2.  v2:= (`double`) v2 @kind i2d;
  #L0d66d4.  v0:= v0 / v2 @kind double;
  #L0d66d6.  return v0 @kind wide;
}
procedure `double` `averageOfLong`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfLong:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d66e8.  v0:= "<this>" @kind object;
  #L0d66ec.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d66f2.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d66f8.  v5:= temp @kind object;
  #L0d66fa.  v0:= 0L;
  #L0d66fe.  v2:= 0I;
  #L0d6700.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6706.  v3:= temp;
  #L0d6708.  if v3 == 0 then goto L0d6734;
  #L0d670c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6712.  v3:= temp @kind object;
  #L0d6714.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d6718.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L0d671e.  v3:= temp @kind wide;
  #L0d6720.  v3:= (`double`) v3 @kind l2d;
  #L0d6722.  v0:= v0 + v3 @kind double;
  #L0d6724.  v2:= v2 + 1;
  #L0d6728.  if v2 >= 0 then goto L0d6700;
  #L0d672c.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d6732.  goto L0d6700;
  #L0d6734.  if v2 != 0 then goto L0d673e;
  #L0d6738.  v0:= NaND;
  #L0d673c.  goto L0d6742;
  #L0d673e.  v2:= (`double`) v2 @kind i2d;
  #L0d6740.  v0:= v0 / v2 @kind double;
  #L0d6742.  return v0 @kind wide;
}
procedure `double` `averageOfShort`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfShort:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d6754.  v0:= "<this>" @kind object;
  #L0d6758.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d675e.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6764.  v5:= temp @kind object;
  #L0d6766.  v0:= 0L;
  #L0d676a.  v2:= 0I;
  #L0d676c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6772.  v3:= temp;
  #L0d6774.  if v3 == 0 then goto L0d67a0;
  #L0d6778.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d677e.  v3:= temp @kind object;
  #L0d6780.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0d6784.  call temp:= `shortValue`(v3) @signature `Ljava/lang/Number;.shortValue:()S` @kind virtual;
  #L0d678a.  v3:= temp;
  #L0d678c.  v3:= (`double`) v3 @kind i2d;
  #L0d678e.  v0:= v0 + v3 @kind double;
  #L0d6790.  v2:= v2 + 1;
  #L0d6794.  if v2 >= 0 then goto L0d676c;
  #L0d6798.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d679e.  goto L0d676c;
  #L0d67a0.  if v2 != 0 then goto L0d67aa;
  #L0d67a4.  v0:= NaND;
  #L0d67a8.  goto L0d67ae;
  #L0d67aa.  v2:= (`double`) v2 @kind i2d;
  #L0d67ac.  v0:= v0 / v2 @kind double;
  #L0d67ae.  return v0 @kind wide;
}
procedure `kotlin.sequences.Sequence` `chunked`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.chunked:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8c30.  v0:= "<this>" @kind object;
  #L0d8c34.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c3a.  v0:= 1I;
  #L0d8c3c.  call temp:= `windowed`(v1, v2, v2, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8c42.  v1:= temp @kind object;
  #L0d8c44.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `chunked`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.chunked:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8c58.  v0:= "<this>" @kind object;
  #L0d8c5c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c62.  v0:= "transform" @kind object;
  #L0d8c66.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c6c.  v0:= 1I;
  #L0d8c6e.  call temp:= `windowed`(v1, v2, v2, v0, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8c74.  v1:= temp @kind object;
  #L0d8c76.  return v1 @kind object;
}
procedure `boolean` `contains`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.contains:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d6478.  v0:= "<this>" @kind object;
  #L0d647c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6482.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @kind static;
  #L0d6488.  v1:= temp;
  #L0d648a.  if v1 < 0 then goto L0d6492;
  #L0d648e.  v1:= 1I;
  #L0d6490.  goto L0d6494;
  #L0d6492.  v1:= 0I;
  #L0d6494.  return v1;
}
procedure `int` `count`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.count:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0d6aa8.  v0:= "<this>" @kind object;
  #L0d6aac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ab2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6ab8.  v2:= temp @kind object;
  #L0d6aba.  v0:= 0I;
  #L0d6abc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6ac2.  v1:= temp;
  #L0d6ac4.  if v1 == 0 then goto L0d6ade;
  #L0d6ac8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6ace.  v0:= v0 + 1;
  #L0d6ad2.  if v0 >= 0 then goto L0d6abc;
  #L0d6ad6.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d6adc.  goto L0d6abc;
  #L0d6ade.  return v0;
}
procedure `int` `count`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.count:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6af0.  v0:= "<this>" @kind object;
  #L0d6af4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6afa.  v0:= "predicate" @kind object;
  #L0d6afe.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6b04.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6b0a.  v2:= temp @kind object;
  #L0d6b0c.  v0:= 0I;
  #L0d6b0e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6b14.  v1:= temp;
  #L0d6b16.  if v1 == 0 then goto L0d6b4a;
  #L0d6b1a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6b20.  v1:= temp @kind object;
  #L0d6b22.  call temp:= `invoke`(v3, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d6b28.  v1:= temp @kind object;
  #L0d6b2a.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d6b2e.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d6b34.  v1:= temp;
  #L0d6b36.  if v1 == 0 then goto L0d6b0e;
  #L0d6b3a.  v0:= v0 + 1;
  #L0d6b3e.  if v0 >= 0 then goto L0d6b0e;
  #L0d6b42.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L0d6b48.  goto L0d6b0e;
  #L0d6b4a.  return v0;
}
procedure `kotlin.sequences.Sequence` `distinct`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinct:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8c88.  v0:= "<this>" @kind object;
  #L0d8c8c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c92.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$a.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$a` @kind object;
  #L0d8c96.  call temp:= `distinctBy`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinctBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8c9c.  v1:= temp @kind object;
  #L0d8c9e.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `distinctBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinctBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8cb0.  v0:= "<this>" @kind object;
  #L0d8cb4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8cba.  v0:= "selector" @kind object;
  #L0d8cbe.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8cc4.  v0:= new `kotlin.sequences.DistinctSequence`;
  #L0d8cc8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DistinctSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8cce.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.drop:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8ce0.  v0:= "<this>" @kind object;
  #L0d8ce4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8cea.  if v2 < 0 then goto L0d8cf2;
  #L0d8cee.  v0:= 1I;
  #L0d8cf0.  goto L0d8cf4;
  #L0d8cf2.  v0:= 0I;
  #L0d8cf4.  if v0 == 0 then goto L0d8d22;
  #L0d8cf8.  if v2 != 0 then goto L0d8cfe;
  #L0d8cfc.  goto L0d8d20;
  #L0d8cfe.  v0:= instanceof @variable v1 @type ^`kotlin.sequences.DropTakeSequence` @kind boolean;
  #L0d8d02.  if v0 == 0 then goto L0d8d14;
  #L0d8d06.  v1:= (`kotlin.sequences.DropTakeSequence`) v1 @kind object;
  #L0d8d0a.  call temp:= `drop`(v1, v2) @signature `Lkotlin/sequences/DropTakeSequence;.drop:(I)Lkotlin/sequences/Sequence;` @kind interface;
  #L0d8d10.  v1:= temp @kind object;
  #L0d8d12.  goto L0d8d20;
  #L0d8d14.  v0:= new `kotlin.sequences.DropSequence`;
  #L0d8d18.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0d8d1e.  v1:= v0 @kind object;
  #L0d8d20.  return v1 @kind object;
  #L0d8d22.  v1:= new `java.lang.StringBuilder`;
  #L0d8d26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d8d2c.  v0:= "Requested element count " @kind object;
  #L0d8d30.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d8d36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d8d3c.  v2:= " is less than zero." @kind object;
  #L0d8d40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d8d46.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d8d4c.  v1:= temp @kind object;
  #L0d8d4e.  v2:= new `java.lang.IllegalArgumentException`;
  #L0d8d52.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d8d58.  v1:= temp @kind object;
  #L0d8d5a.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d8d60.  throw v2;
}
procedure `kotlin.sequences.Sequence` `dropWhile`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.dropWhile:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8d74.  v0:= "<this>" @kind object;
  #L0d8d78.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8d7e.  v0:= "predicate" @kind object;
  #L0d8d82.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8d88.  v0:= new `kotlin.sequences.DropWhileSequence`;
  #L0d8d8c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DropWhileSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8d92.  return v0 @kind object;
}
procedure `java.lang.Object` `elementAt`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAt:(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d7328.  v0:= "<this>" @kind object;
  #L0d732c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7332.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$b`;
  #L0d7336.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$b;.<init>:(I)V` @kind direct;
  #L0d733c.  call temp:= `elementAtOrElse`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrElse:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @kind static;
  #L0d7342.  v1:= temp @kind object;
  #L0d7344.  return v1 @kind object;
}
procedure `java.lang.Object` `elementAtOrElse`(`kotlin.sequences.Sequence` v3 @kind object, `int` v4 , `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrElse:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7358.  v0:= "<this>" @kind object;
  #L0d735c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7362.  v0:= "defaultValue" @kind object;
  #L0d7366.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d736c.  if v4 >= 0 then goto L0d7382;
  #L0d7370.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d7376.  v3:= temp @kind object;
  #L0d7378.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d737e.  v3:= temp @kind object;
  #L0d7380.  return v3 @kind object;
  #L0d7382.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7388.  v3:= temp @kind object;
  #L0d738a.  v0:= 0I;
  #L0d738c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7392.  v1:= temp;
  #L0d7394.  if v1 == 0 then goto L0d73ae;
  #L0d7398.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d739e.  v1:= temp @kind object;
  #L0d73a0.  v2:= v0 + 1;
  #L0d73a4.  if v4 != v0 then goto L0d73aa;
  #L0d73a8.  return v1 @kind object;
  #L0d73aa.  v0:= v2;
  #L0d73ac.  goto L0d738c;
  #L0d73ae.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d73b4.  v3:= temp @kind object;
  #L0d73b6.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d73bc.  v3:= temp @kind object;
  #L0d73be.  return v3 @kind object;
}
procedure `java.lang.Object` `elementAtOrNull`(`kotlin.sequences.Sequence` v4 @kind object, `int` v5 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrNull:(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d73d0.  v0:= "<this>" @kind object;
  #L0d73d4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d73da.  v0:= 0I;
  #L0d73dc.  if v5 >= 0 then goto L0d73e2;
  #L0d73e0.  return v0 @kind object;
  #L0d73e2.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d73e8.  v4:= temp @kind object;
  #L0d73ea.  v1:= 0I;
  #L0d73ec.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d73f2.  v2:= temp;
  #L0d73f4.  if v2 == 0 then goto L0d740e;
  #L0d73f8.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d73fe.  v2:= temp @kind object;
  #L0d7400.  v3:= v1 + 1;
  #L0d7404.  if v5 != v1 then goto L0d740a;
  #L0d7408.  return v2 @kind object;
  #L0d740a.  v1:= v3;
  #L0d740c.  goto L0d73ec;
  #L0d740e.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filter`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filter:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0d8da4.  v0:= "<this>" @kind object;
  #L0d8da8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8dae.  v0:= "predicate" @kind object;
  #L0d8db2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8db8.  v0:= new `kotlin.sequences.FilteringSequence`;
  #L0d8dbc.  v1:= 1I;
  #L0d8dbe.  call `<init>`(v0, v2, v1, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8dc4.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterIndexed`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8dd8.  v0:= "<this>" @kind object;
  #L0d8ddc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8de2.  v0:= "predicate" @kind object;
  #L0d8de6.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8dec.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L0d8df0.  v1:= new `kotlin.sequences.FilteringSequence`;
  #L0d8df4.  v2:= new `kotlin.sequences.IndexingSequence`;
  #L0d8df8.  call `<init>`(v2, v3) @signature `Lkotlin/sequences/IndexingSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d8dfe.  v3:= new `kotlin.sequences.SequencesKt___SequencesKt$c`;
  #L0d8e02.  call `<init>`(v3, v4) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$c;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d8e08.  v4:= 1I;
  #L0d8e0a.  call `<init>`(v1, v2, v4, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8e10.  v3:= `@@kotlin.sequences.SequencesKt___SequencesKt$d.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$d` @kind object;
  #L0d8e14.  call `<init>`(v0, v1, v3) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8e1a.  return v0 @kind object;
}
procedure `java.util.Collection` `filterIndexedTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Collection` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIndexedTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8048.  v0:= "<this>" @kind object;
  #L0d804c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8052.  v0:= "destination" @kind object;
  #L0d8056.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d805c.  v0:= "predicate" @kind object;
  #L0d8060.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8066.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d806c.  v3:= temp @kind object;
  #L0d806e.  v0:= 0I;
  #L0d8070.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8076.  v1:= temp;
  #L0d8078.  if v1 == 0 then goto L0d80bc;
  #L0d807c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8082.  v1:= temp @kind object;
  #L0d8084.  v2:= v0 + 1;
  #L0d8088.  if v0 >= 0 then goto L0d8092;
  #L0d808c.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d8092.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d8098.  v0:= temp @kind object;
  #L0d809a.  call temp:= `invoke`(v5, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d80a0.  v0:= temp @kind object;
  #L0d80a2.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L0d80a6.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d80ac.  v0:= temp;
  #L0d80ae.  if v0 == 0 then goto L0d80b8;
  #L0d80b2.  call temp:= `add`(v4, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d80b8.  v0:= v2;
  #L0d80ba.  goto L0d8070;
  #L0d80bc.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterIsInstance`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIsInstance:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0d8e2c.  v0:= "<this>" @kind object;
  #L0d8e30.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8e36.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L0d8e3c.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE` @type ^`kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1` @kind object;
  #L0d8e40.  call temp:= `filter`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.filter:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8e46.  v1:= temp @kind object;
  #L0d8e48.  v0:= "null cannot be cast to non-null type kotlin.sequences.Sequence<R of kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance>" @kind object;
  #L0d8e4c.  call `checkNotNull`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8e52.  return v1 @kind object;
}
procedure `java.util.Collection` `filterIsInstanceTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIsInstanceTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L0d80d0.  v0:= "<this>" @kind object;
  #L0d80d4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d80da.  v0:= "destination" @kind object;
  #L0d80de.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d80e4.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d80ea.  v3:= temp @kind object;
  #L0d80ec.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d80f2.  v0:= temp;
  #L0d80f4.  if v0 == 0 then goto L0d811c;
  #L0d80f8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d80fe.  v0:= temp @kind object;
  #L0d8100.  v1:= 3I;
  #L0d8102.  v2:= "R" @kind object;
  #L0d8106.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L0d810c.  v1:= instanceof @variable v0 @type ^`java.lang.Object` @kind boolean;
  #L0d8110.  if v1 == 0 then goto L0d80ec;
  #L0d8114.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d811a.  goto L0d80ec;
  #L0d811c.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterNot`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNot:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8e64.  v0:= "<this>" @kind object;
  #L0d8e68.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8e6e.  v0:= "predicate" @kind object;
  #L0d8e72.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8e78.  v0:= new `kotlin.sequences.FilteringSequence`;
  #L0d8e7c.  v1:= 0I;
  #L0d8e7e.  call `<init>`(v0, v2, v1, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8e84.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterNotNull`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8e98.  v0:= "<this>" @kind object;
  #L0d8e9c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8ea2.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$e.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$e` @kind object;
  #L0d8ea6.  call temp:= `filterNot`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNot:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8eac.  v1:= temp @kind object;
  #L0d8eae.  v0:= "null cannot be cast to non-null type kotlin.sequences.Sequence<T of kotlin.sequences.SequencesKt___SequencesKt.filterNotNull>" @kind object;
  #L0d8eb2.  call `checkNotNull`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8eb8.  return v1 @kind object;
}
procedure `java.util.Collection` `filterNotNullTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8130.  v0:= "<this>" @kind object;
  #L0d8134.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d813a.  v0:= "destination" @kind object;
  #L0d813e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8144.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d814a.  v1:= temp @kind object;
  #L0d814c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8152.  v0:= temp;
  #L0d8154.  if v0 == 0 then goto L0d816c;
  #L0d8158.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d815e.  v0:= temp @kind object;
  #L0d8160.  if v0 == 0 then goto L0d814c;
  #L0d8164.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d816a.  goto L0d814c;
  #L0d816c.  return v2 @kind object;
}
procedure `java.util.Collection` `filterNotTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Collection` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8180.  v0:= "<this>" @kind object;
  #L0d8184.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d818a.  v0:= "destination" @kind object;
  #L0d818e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8194.  v0:= "predicate" @kind object;
  #L0d8198.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d819e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d81a4.  v2:= temp @kind object;
  #L0d81a6.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d81ac.  v0:= temp;
  #L0d81ae.  if v0 == 0 then goto L0d81da;
  #L0d81b2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d81b8.  v0:= temp @kind object;
  #L0d81ba.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d81c0.  v1:= temp @kind object;
  #L0d81c2.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d81c6.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d81cc.  v1:= temp;
  #L0d81ce.  if v1 != 0 then goto L0d81a6;
  #L0d81d2.  call temp:= `add`(v3, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d81d8.  goto L0d81a6;
  #L0d81da.  return v3 @kind object;
}
procedure `java.util.Collection` `filterTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Collection` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d81ec.  v0:= "<this>" @kind object;
  #L0d81f0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d81f6.  v0:= "destination" @kind object;
  #L0d81fa.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8200.  v0:= "predicate" @kind object;
  #L0d8204.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d820a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8210.  v2:= temp @kind object;
  #L0d8212.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8218.  v0:= temp;
  #L0d821a.  if v0 == 0 then goto L0d8246;
  #L0d821e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8224.  v0:= temp @kind object;
  #L0d8226.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d822c.  v1:= temp @kind object;
  #L0d822e.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d8232.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d8238.  v1:= temp;
  #L0d823a.  if v1 == 0 then goto L0d8212;
  #L0d823e.  call temp:= `add`(v3, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d8244.  goto L0d8212;
  #L0d8246.  return v3 @kind object;
}
procedure `java.lang.Object` `first`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.first:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d7420.  v0:= "<this>" @kind object;
  #L0d7424.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d742a.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7430.  v1:= temp @kind object;
  #L0d7432.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7438.  v0:= temp;
  #L0d743a.  if v0 == 0 then goto L0d7448;
  #L0d743e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7444.  v1:= temp @kind object;
  #L0d7446.  return v1 @kind object;
  #L0d7448.  v1:= new `java.util.NoSuchElementException`;
  #L0d744c.  v0:= "Sequence is empty." @kind object;
  #L0d7450.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7456.  throw v1;
}
procedure `java.lang.Object` `first`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.first:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7468.  v0:= "<this>" @kind object;
  #L0d746c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7472.  v0:= "predicate" @kind object;
  #L0d7476.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d747c.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7482.  v2:= temp @kind object;
  #L0d7484.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d748a.  v0:= temp;
  #L0d748c.  if v0 == 0 then goto L0d74b2;
  #L0d7490.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7496.  v0:= temp @kind object;
  #L0d7498.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d749e.  v1:= temp @kind object;
  #L0d74a0.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d74a4.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d74aa.  v1:= temp;
  #L0d74ac.  if v1 == 0 then goto L0d7484;
  #L0d74b0.  return v0 @kind object;
  #L0d74b2.  v2:= new `java.util.NoSuchElementException`;
  #L0d74b6.  v3:= "Sequence contains no element matching the predicate." @kind object;
  #L0d74ba.  call `<init>`(v2, v3) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d74c0.  throw v2;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.firstOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d74d4.  v0:= "<this>" @kind object;
  #L0d74d8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d74de.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d74e4.  v1:= temp @kind object;
  #L0d74e6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d74ec.  v0:= temp;
  #L0d74ee.  if v0 != 0 then goto L0d74f6;
  #L0d74f2.  v1:= 0I;
  #L0d74f4.  return v1 @kind object;
  #L0d74f6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d74fc.  v1:= temp @kind object;
  #L0d74fe.  return v1 @kind object;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.firstOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7510.  v0:= "<this>" @kind object;
  #L0d7514.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d751a.  v0:= "predicate" @kind object;
  #L0d751e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7524.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d752a.  v2:= temp @kind object;
  #L0d752c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7532.  v0:= temp;
  #L0d7534.  if v0 == 0 then goto L0d755a;
  #L0d7538.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d753e.  v0:= temp @kind object;
  #L0d7540.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7546.  v1:= temp @kind object;
  #L0d7548.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d754c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d7552.  v1:= temp;
  #L0d7554.  if v1 == 0 then goto L0d752c;
  #L0d7558.  return v0 @kind object;
  #L0d755a.  v2:= 0I;
  #L0d755c.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMap`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMap:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8ecc.  v0:= "<this>" @kind object;
  #L0d8ed0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8ed6.  v0:= "transform" @kind object;
  #L0d8eda.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8ee0.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L0d8ee4.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$g.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$g` @kind object;
  #L0d8ee8.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8eee.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIndexedIterable`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIndexedIterable:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8f00.  v0:= "<this>" @kind object;
  #L0d8f04.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f0a.  v0:= "transform" @kind object;
  #L0d8f0e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f14.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$h.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$h` @kind object;
  #L0d8f18.  call temp:= `flatMapIndexed`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatMapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8f1e.  v1:= temp @kind object;
  #L0d8f20.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIndexedSequence`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIndexedSequence:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8f34.  v0:= "<this>" @kind object;
  #L0d8f38.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f3e.  v0:= "transform" @kind object;
  #L0d8f42.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f48.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$i.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$i` @kind object;
  #L0d8f4c.  call temp:= `flatMapIndexed`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatMapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d8f52.  v1:= temp @kind object;
  #L0d8f54.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIterable`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIterable:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8f68.  v0:= "<this>" @kind object;
  #L0d8f6c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f72.  v0:= "transform" @kind object;
  #L0d8f76.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8f7c.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L0d8f80.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$f.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$f` @kind object;
  #L0d8f84.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8f8a.  return v0 @kind object;
}
procedure `java.util.Collection` `flatMapIterableTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIterableTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8258.  v0:= "<this>" @kind object;
  #L0d825c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8262.  v0:= "destination" @kind object;
  #L0d8266.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d826c.  v0:= "transform" @kind object;
  #L0d8270.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8276.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d827c.  v1:= temp @kind object;
  #L0d827e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8284.  v0:= temp;
  #L0d8286.  if v0 == 0 then goto L0d82a6;
  #L0d828a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8290.  v0:= temp @kind object;
  #L0d8292.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8298.  v0:= temp @kind object;
  #L0d829a.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L0d829e.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L0d82a4.  goto L0d827e;
  #L0d82a6.  return v2 @kind object;
}
procedure `java.util.Collection` `flatMapTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d82b8.  v0:= "<this>" @kind object;
  #L0d82bc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d82c2.  v0:= "destination" @kind object;
  #L0d82c6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d82cc.  v0:= "transform" @kind object;
  #L0d82d0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d82d6.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d82dc.  v1:= temp @kind object;
  #L0d82de.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d82e4.  v0:= temp;
  #L0d82e6.  if v0 == 0 then goto L0d8306;
  #L0d82ea.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d82f0.  v0:= temp @kind object;
  #L0d82f2.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d82f8.  v0:= temp @kind object;
  #L0d82fa.  v0:= (`kotlin.sequences.Sequence`) v0 @kind object;
  #L0d82fe.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Lkotlin/sequences/Sequence;)Z` @kind static;
  #L0d8304.  goto L0d82de;
  #L0d8306.  return v2 @kind object;
}
procedure `java.lang.Object` `fold`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.fold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d7570.  v0:= "<this>" @kind object;
  #L0d7574.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d757a.  v0:= "operation" @kind object;
  #L0d757e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7584.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d758a.  v1:= temp @kind object;
  #L0d758c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7592.  v0:= temp;
  #L0d7594.  if v0 == 0 then goto L0d75aa;
  #L0d7598.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d759e.  v0:= temp @kind object;
  #L0d75a0.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d75a6.  v2:= temp @kind object;
  #L0d75a8.  goto L0d758c;
  #L0d75aa.  return v2 @kind object;
}
procedure `java.lang.Object` `foldIndexed`(`kotlin.sequences.Sequence` v3 @kind object, `java.lang.Object` v4 @kind object, `kotlin.jvm.functions.Function3` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.foldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d75bc.  v0:= "<this>" @kind object;
  #L0d75c0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d75c6.  v0:= "operation" @kind object;
  #L0d75ca.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d75d0.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d75d6.  v3:= temp @kind object;
  #L0d75d8.  v0:= 0I;
  #L0d75da.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d75e0.  v1:= temp;
  #L0d75e2.  if v1 == 0 then goto L0d7610;
  #L0d75e6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d75ec.  v1:= temp @kind object;
  #L0d75ee.  v2:= v0 + 1;
  #L0d75f2.  if v0 >= 0 then goto L0d75fc;
  #L0d75f6.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d75fc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d7602.  v0:= temp @kind object;
  #L0d7604.  call temp:= `invoke`(v5, v0, v4, v1) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d760a.  v4:= temp @kind object;
  #L0d760c.  v0:= v2;
  #L0d760e.  goto L0d75da;
  #L0d7610.  return v4 @kind object;
}
procedure `void` `forEach`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.forEach:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9828.  v0:= "<this>" @kind object;
  #L0d982c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9832.  v0:= "action" @kind object;
  #L0d9836.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d983c.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d9842.  v1:= temp @kind object;
  #L0d9844.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d984a.  v0:= temp;
  #L0d984c.  if v0 == 0 then goto L0d9860;
  #L0d9850.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d9856.  v0:= temp @kind object;
  #L0d9858.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d985e.  goto L0d9844;
  #L0d9860.  return @kind void;
}
procedure `void` `forEachIndexed`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.forEachIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d9874.  v0:= "<this>" @kind object;
  #L0d9878.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d987e.  v0:= "action" @kind object;
  #L0d9882.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9888.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d988e.  v3:= temp @kind object;
  #L0d9890.  v0:= 0I;
  #L0d9892.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d9898.  v1:= temp;
  #L0d989a.  if v1 == 0 then goto L0d98c6;
  #L0d989e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d98a4.  v1:= temp @kind object;
  #L0d98a6.  v2:= v0 + 1;
  #L0d98aa.  if v0 >= 0 then goto L0d98b4;
  #L0d98ae.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d98b4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d98ba.  v0:= temp @kind object;
  #L0d98bc.  call temp:= `invoke`(v4, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d98c2.  v0:= v2;
  #L0d98c4.  goto L0d9892;
  #L0d98c6.  return @kind void;
}
procedure `java.util.Map` `groupBy`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d88d8.  v0:= "<this>" @kind object;
  #L0d88dc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d88e2.  v0:= "keySelector" @kind object;
  #L0d88e6.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d88ec.  v0:= new `java.util.LinkedHashMap`;
  #L0d88f0.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d88f6.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d88fc.  v4:= temp @kind object;
  #L0d88fe.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8904.  v1:= temp;
  #L0d8906.  if v1 == 0 then goto L0d8942;
  #L0d890a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8910.  v1:= temp @kind object;
  #L0d8912.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8918.  v2:= temp @kind object;
  #L0d891a.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8920.  v3:= temp @kind object;
  #L0d8922.  if v3 != 0 then goto L0d8936;
  #L0d8926.  v3:= new `java.util.ArrayList`;
  #L0d892a.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8930.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8936.  v3:= (`java.util.List`) v3 @kind object;
  #L0d893a.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d8940.  goto L0d88fe;
  #L0d8942.  return v0 @kind object;
}
procedure `java.util.Map` `groupBy`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d8954.  v0:= "<this>" @kind object;
  #L0d8958.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d895e.  v0:= "keySelector" @kind object;
  #L0d8962.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8968.  v0:= "valueTransform" @kind object;
  #L0d896c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8972.  v0:= new `java.util.LinkedHashMap`;
  #L0d8976.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L0d897c.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8982.  v4:= temp @kind object;
  #L0d8984.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d898a.  v1:= temp;
  #L0d898c.  if v1 == 0 then goto L0d89d0;
  #L0d8990.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8996.  v1:= temp @kind object;
  #L0d8998.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d899e.  v2:= temp @kind object;
  #L0d89a0.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d89a6.  v3:= temp @kind object;
  #L0d89a8.  if v3 != 0 then goto L0d89bc;
  #L0d89ac.  v3:= new `java.util.ArrayList`;
  #L0d89b0.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d89b6.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d89bc.  v3:= (`java.util.List`) v3 @kind object;
  #L0d89c0.  call temp:= `invoke`(v6, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d89c6.  v1:= temp @kind object;
  #L0d89c8.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d89ce.  goto L0d8984;
  #L0d89d0.  return v0 @kind object;
}
procedure `java.util.Map` `groupByTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Map` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d89e4.  v0:= "<this>" @kind object;
  #L0d89e8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d89ee.  v0:= "destination" @kind object;
  #L0d89f2.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d89f8.  v0:= "keySelector" @kind object;
  #L0d89fc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8a02.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8a08.  v3:= temp @kind object;
  #L0d8a0a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8a10.  v0:= temp;
  #L0d8a12.  if v0 == 0 then goto L0d8a4e;
  #L0d8a16.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8a1c.  v0:= temp @kind object;
  #L0d8a1e.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8a24.  v1:= temp @kind object;
  #L0d8a26.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8a2c.  v2:= temp @kind object;
  #L0d8a2e.  if v2 != 0 then goto L0d8a42;
  #L0d8a32.  v2:= new `java.util.ArrayList`;
  #L0d8a36.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8a3c.  call temp:= `put`(v4, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8a42.  v2:= (`java.util.List`) v2 @kind object;
  #L0d8a46.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d8a4c.  goto L0d8a0a;
  #L0d8a4e.  return v4 @kind object;
}
procedure `java.util.Map` `groupByTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Map` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8a60.  v0:= "<this>" @kind object;
  #L0d8a64.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8a6a.  v0:= "destination" @kind object;
  #L0d8a6e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8a74.  v0:= "keySelector" @kind object;
  #L0d8a78.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8a7e.  v0:= "valueTransform" @kind object;
  #L0d8a82.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8a88.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8a8e.  v3:= temp @kind object;
  #L0d8a90.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8a96.  v0:= temp;
  #L0d8a98.  if v0 == 0 then goto L0d8adc;
  #L0d8a9c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8aa2.  v0:= temp @kind object;
  #L0d8aa4.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8aaa.  v1:= temp @kind object;
  #L0d8aac.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8ab2.  v2:= temp @kind object;
  #L0d8ab4.  if v2 != 0 then goto L0d8ac8;
  #L0d8ab8.  v2:= new `java.util.ArrayList`;
  #L0d8abc.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8ac2.  call temp:= `put`(v4, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8ac8.  v2:= (`java.util.List`) v2 @kind object;
  #L0d8acc.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8ad2.  v0:= temp @kind object;
  #L0d8ad4.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d8ada.  goto L0d8a90;
  #L0d8adc.  return v4 @kind object;
}
procedure `kotlin.collections.Grouping` `groupingBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupingBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8c00.  v0:= "<this>" @kind object;
  #L0d8c04.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c0a.  v0:= "keySelector" @kind object;
  #L0d8c0e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8c14.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1`;
  #L0d8c18.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$groupingBy$1;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8c1e.  return v0 @kind object;
}
procedure `int` `indexOf`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6b5c.  v0:= "<this>" @kind object;
  #L0d6b60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6b66.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6b6c.  v2:= temp @kind object;
  #L0d6b6e.  v0:= 0I;
  #L0d6b70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6b76.  v1:= temp;
  #L0d6b78.  if v1 == 0 then goto L0d6ba2;
  #L0d6b7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6b82.  v1:= temp @kind object;
  #L0d6b84.  if v0 >= 0 then goto L0d6b8e;
  #L0d6b88.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d6b8e.  call temp:= `areEqual`(v3, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d6b94.  v1:= temp;
  #L0d6b96.  if v1 == 0 then goto L0d6b9c;
  #L0d6b9a.  return v0;
  #L0d6b9c.  v0:= v0 + 1;
  #L0d6ba0.  goto L0d6b70;
  #L0d6ba2.  v2:= -1I;
  #L0d6ba4.  return v2;
}
procedure `int` `indexOfFirst`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOfFirst:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6bb8.  v0:= "<this>" @kind object;
  #L0d6bbc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6bc2.  v0:= "predicate" @kind object;
  #L0d6bc6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6bcc.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6bd2.  v2:= temp @kind object;
  #L0d6bd4.  v0:= 0I;
  #L0d6bd6.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6bdc.  v1:= temp;
  #L0d6bde.  if v1 == 0 then goto L0d6c14;
  #L0d6be2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6be8.  v1:= temp @kind object;
  #L0d6bea.  if v0 >= 0 then goto L0d6bf4;
  #L0d6bee.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d6bf4.  call temp:= `invoke`(v3, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d6bfa.  v1:= temp @kind object;
  #L0d6bfc.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0d6c00.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d6c06.  v1:= temp;
  #L0d6c08.  if v1 == 0 then goto L0d6c0e;
  #L0d6c0c.  return v0;
  #L0d6c0e.  v0:= v0 + 1;
  #L0d6c12.  goto L0d6bd6;
  #L0d6c14.  v2:= -1I;
  #L0d6c16.  return v2;
}
procedure `int` `indexOfLast`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOfLast:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d6c28.  v0:= "<this>" @kind object;
  #L0d6c2c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6c32.  v0:= "predicate" @kind object;
  #L0d6c36.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6c3c.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6c42.  v3:= temp @kind object;
  #L0d6c44.  v0:= -1I;
  #L0d6c46.  v1:= 0I;
  #L0d6c48.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6c4e.  v2:= temp;
  #L0d6c50.  if v2 == 0 then goto L0d6c86;
  #L0d6c54.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6c5a.  v2:= temp @kind object;
  #L0d6c5c.  if v1 >= 0 then goto L0d6c66;
  #L0d6c60.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d6c66.  call temp:= `invoke`(v4, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d6c6c.  v2:= temp @kind object;
  #L0d6c6e.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L0d6c72.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d6c78.  v2:= temp;
  #L0d6c7a.  if v2 == 0 then goto L0d6c80;
  #L0d6c7e.  v0:= v1;
  #L0d6c80.  v1:= v1 + 1;
  #L0d6c84.  goto L0d6c48;
  #L0d6c86.  return v0;
}
procedure `java.lang.Appendable` `joinTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Appendable` v3 @kind object, `java.lang.CharSequence` v4 @kind object, `java.lang.CharSequence` v5 @kind object, `java.lang.CharSequence` v6 @kind object, `int` v7 , `java.lang.CharSequence` v8 @kind object, `kotlin.jvm.functions.Function1` v9 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6eb8.  v0:= "<this>" @kind object;
  #L0d6ebc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ec2.  v0:= "buffer" @kind object;
  #L0d6ec6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ecc.  v0:= "separator" @kind object;
  #L0d6ed0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ed6.  v0:= "prefix" @kind object;
  #L0d6eda.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ee0.  v0:= "postfix" @kind object;
  #L0d6ee4.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6eea.  v0:= "truncated" @kind object;
  #L0d6eee.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ef4.  call temp:= `append`(v3, v5) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L0d6efa.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6f00.  v2:= temp @kind object;
  #L0d6f02.  v5:= 0I;
  #L0d6f04.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6f0a.  v0:= temp;
  #L0d6f0c.  if v0 == 0 then goto L0d6f38;
  #L0d6f10.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6f16.  v0:= temp @kind object;
  #L0d6f18.  v5:= v5 + 1;
  #L0d6f1c.  v1:= 1I;
  #L0d6f1e.  if v5 <= v1 then goto L0d6f28;
  #L0d6f22.  call temp:= `append`(v3, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L0d6f28.  if v7 < 0 then goto L0d6f30;
  #L0d6f2c.  if v5 > v7 then goto L0d6f38;
  #L0d6f30.  call `appendElement`(v3, v0, v9) @signature `Lkotlin/text/StringsKt;.appendElement:(Ljava/lang/Appendable;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind static;
  #L0d6f36.  goto L0d6f04;
  #L0d6f38.  if v7 < 0 then goto L0d6f46;
  #L0d6f3c.  if v5 <= v7 then goto L0d6f46;
  #L0d6f40.  call temp:= `append`(v3, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L0d6f46.  call temp:= `append`(v3, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L0d6f4c.  return v3 @kind object;
}
procedure `java.lang.Appendable` `joinTo$default`(`kotlin.sequences.Sequence` v6 @kind object, `java.lang.Appendable` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `java.lang.CharSequence` v10 @kind object, `int` v11 , `java.lang.CharSequence` v12 @kind object, `kotlin.jvm.functions.Function1` v13 @kind object, `int` v14 , `java.lang.Object` v15 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo$default:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Appendable;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0d6e34.  v0:= v14 ^& 2;
  #L0d6e38.  if v0 == 0 then goto L0d6e42;
  #L0d6e3c.  v0:= ", " @kind object;
  #L0d6e40.  goto L0d6e44;
  #L0d6e42.  v0:= v8 @kind object;
  #L0d6e44.  v1:= v14 ^& 4;
  #L0d6e48.  v2:= "" @kind object;
  #L0d6e4c.  if v1 == 0 then goto L0d6e54;
  #L0d6e50.  v1:= v2 @kind object;
  #L0d6e52.  goto L0d6e56;
  #L0d6e54.  v1:= v9 @kind object;
  #L0d6e56.  v3:= v14 ^& 8;
  #L0d6e5a.  if v3 == 0 then goto L0d6e60;
  #L0d6e5e.  goto L0d6e62;
  #L0d6e60.  v2:= v10 @kind object;
  #L0d6e62.  v3:= v14 ^& 16;
  #L0d6e66.  if v3 == 0 then goto L0d6e6e;
  #L0d6e6a.  v3:= -1I;
  #L0d6e6c.  goto L0d6e70;
  #L0d6e6e.  v3:= v11;
  #L0d6e70.  v4:= v14 ^& 32;
  #L0d6e74.  if v4 == 0 then goto L0d6e7e;
  #L0d6e78.  v4:= "..." @kind object;
  #L0d6e7c.  goto L0d6e80;
  #L0d6e7e.  v4:= v12 @kind object;
  #L0d6e80.  v5:= v14 ^& 64;
  #L0d6e84.  if v5 == 0 then goto L0d6e8c;
  #L0d6e88.  v5:= 0I;
  #L0d6e8a.  goto L0d6e8e;
  #L0d6e8c.  v5:= v13 @kind object;
  #L0d6e8e.  v8:= v6 @kind object;
  #L0d6e90.  v9:= v7 @kind object;
  #L0d6e92.  v10:= v0 @kind object;
  #L0d6e94.  v11:= v1 @kind object;
  #L0d6e96.  v12:= v2 @kind object;
  #L0d6e98.  v13:= v3;
  #L0d6e9a.  v14:= v4 @kind object;
  #L0d6e9c.  v15:= v5 @kind object;
  #L0d6e9e.  call temp:= `joinTo`(v8, v9, v10, v11, v12, v13, v14, v15) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @kind static;
  #L0d6ea4.  v0:= temp @kind object;
  #L0d6ea6.  return v0 @kind object;
}
procedure `java.lang.String` `joinToString`(`kotlin.sequences.Sequence` v9 @kind object, `java.lang.CharSequence` v10 @kind object, `java.lang.CharSequence` v11 @kind object, `java.lang.CharSequence` v12 @kind object, `int` v13 , `java.lang.CharSequence` v14 @kind object, `kotlin.jvm.functions.Function1` v15 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0d7fcc.  v0:= "<this>" @kind object;
  #L0d7fd0.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7fd6.  v0:= "separator" @kind object;
  #L0d7fda.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7fe0.  v0:= "prefix" @kind object;
  #L0d7fe4.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7fea.  v0:= "postfix" @kind object;
  #L0d7fee.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7ff4.  v0:= "truncated" @kind object;
  #L0d7ff8.  call `checkNotNullParameter`(v14, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7ffe.  v2:= new `java.lang.StringBuilder`;
  #L0d8002.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d8008.  v1:= v9 @kind object;
  #L0d800a.  v3:= v10 @kind object;
  #L0d800c.  v4:= v11 @kind object;
  #L0d800e.  v5:= v12 @kind object;
  #L0d8010.  v6:= v13;
  #L0d8012.  v7:= v14 @kind object;
  #L0d8014.  v8:= v15 @kind object;
  #L0d8016.  call temp:= `joinTo`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @kind static;
  #L0d801c.  v9:= temp @kind object;
  #L0d801e.  v9:= (`java.lang.StringBuilder`) v9 @kind object;
  #L0d8022.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d8028.  v9:= temp @kind object;
  #L0d802a.  v10:= "joinTo(StringBuilder(), …ed, transform).toString()" @kind object;
  #L0d802e.  call `checkNotNullExpressionValue`(v9, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8034.  return v9 @kind object;
}
procedure `java.lang.String` `joinToString$default`(`kotlin.sequences.Sequence` v4 @kind object, `java.lang.CharSequence` v5 @kind object, `java.lang.CharSequence` v6 @kind object, `java.lang.CharSequence` v7 @kind object, `int` v8 , `java.lang.CharSequence` v9 @kind object, `kotlin.jvm.functions.Function1` v10 @kind object, `int` v11 , `java.lang.Object` v12 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString$default:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7f50.  v12:= v11 ^& 1;
  #L0d7f54.  if v12 == 0 then goto L0d7f5c;
  #L0d7f58.  v5:= ", " @kind object;
  #L0d7f5c.  v12:= v11 ^& 2;
  #L0d7f60.  v0:= "" @kind object;
  #L0d7f64.  if v12 == 0 then goto L0d7f6c;
  #L0d7f68.  v12:= v0 @kind object;
  #L0d7f6a.  goto L0d7f6e;
  #L0d7f6c.  v12:= v6 @kind object;
  #L0d7f6e.  v6:= v11 ^& 4;
  #L0d7f72.  if v6 == 0 then goto L0d7f78;
  #L0d7f76.  goto L0d7f7a;
  #L0d7f78.  v0:= v7 @kind object;
  #L0d7f7a.  v6:= v11 ^& 8;
  #L0d7f7e.  if v6 == 0 then goto L0d7f88;
  #L0d7f82.  v8:= -1I;
  #L0d7f84.  v1:= -1I;
  #L0d7f86.  goto L0d7f8a;
  #L0d7f88.  v1:= v8;
  #L0d7f8a.  v6:= v11 ^& 16;
  #L0d7f8e.  if v6 == 0 then goto L0d7f96;
  #L0d7f92.  v9:= "..." @kind object;
  #L0d7f96.  v2:= v9 @kind object;
  #L0d7f98.  v6:= v11 ^& 32;
  #L0d7f9c.  if v6 == 0 then goto L0d7fa2;
  #L0d7fa0.  v10:= 0I;
  #L0d7fa2.  v3:= v10 @kind object;
  #L0d7fa4.  v6:= v4 @kind object;
  #L0d7fa6.  v7:= v5 @kind object;
  #L0d7fa8.  v8:= v12 @kind object;
  #L0d7faa.  v9:= v0 @kind object;
  #L0d7fac.  v10:= v1;
  #L0d7fae.  v11:= v2 @kind object;
  #L0d7fb0.  v12:= v3 @kind object;
  #L0d7fb2.  call temp:= `joinToString`(v6, v7, v8, v9, v10, v11, v12) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;` @kind static;
  #L0d7fb8.  v4:= temp @kind object;
  #L0d7fba.  return v4 @kind object;
}
procedure `java.lang.Object` `last`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.last:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0d7624.  v0:= "<this>" @kind object;
  #L0d7628.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d762e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7634.  v2:= temp @kind object;
  #L0d7636.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d763c.  v0:= temp;
  #L0d763e.  if v0 == 0 then goto L0d7662;
  #L0d7642.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7648.  v0:= temp @kind object;
  #L0d764a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7650.  v1:= temp;
  #L0d7652.  if v1 == 0 then goto L0d7660;
  #L0d7656.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d765c.  v0:= temp @kind object;
  #L0d765e.  goto L0d764a;
  #L0d7660.  return v0 @kind object;
  #L0d7662.  v2:= new `java.util.NoSuchElementException`;
  #L0d7666.  v0:= "Sequence is empty." @kind object;
  #L0d766a.  call `<init>`(v2, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7670.  throw v2;
}
procedure `java.lang.Object` `last`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.last:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7684.  v0:= "<this>" @kind object;
  #L0d7688.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d768e.  v0:= "predicate" @kind object;
  #L0d7692.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7698.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d769e.  v4:= temp @kind object;
  #L0d76a0.  v0:= 0I;
  #L0d76a2.  v1:= 0I;
  #L0d76a4.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d76aa.  v2:= temp;
  #L0d76ac.  if v2 == 0 then goto L0d76d6;
  #L0d76b0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d76b6.  v2:= temp @kind object;
  #L0d76b8.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d76be.  v3:= temp @kind object;
  #L0d76c0.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L0d76c4.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d76ca.  v3:= temp;
  #L0d76cc.  if v3 == 0 then goto L0d76a4;
  #L0d76d0.  v1:= 1I;
  #L0d76d2.  v0:= v2 @kind object;
  #L0d76d4.  goto L0d76a4;
  #L0d76d6.  if v1 == 0 then goto L0d76dc;
  #L0d76da.  return v0 @kind object;
  #L0d76dc.  v4:= new `java.util.NoSuchElementException`;
  #L0d76e0.  v5:= "Sequence contains no element matching the predicate." @kind object;
  #L0d76e4.  call `<init>`(v4, v5) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d76ea.  throw v4;
}
procedure `int` `lastIndexOf`(`kotlin.sequences.Sequence` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastIndexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d6c98.  v0:= "<this>" @kind object;
  #L0d6c9c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6ca2.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6ca8.  v3:= temp @kind object;
  #L0d6caa.  v0:= -1I;
  #L0d6cac.  v1:= 0I;
  #L0d6cae.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6cb4.  v2:= temp;
  #L0d6cb6.  if v2 == 0 then goto L0d6ce0;
  #L0d6cba.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6cc0.  v2:= temp @kind object;
  #L0d6cc2.  if v1 >= 0 then goto L0d6ccc;
  #L0d6cc6.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d6ccc.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d6cd2.  v2:= temp;
  #L0d6cd4.  if v2 == 0 then goto L0d6cda;
  #L0d6cd8.  v0:= v1;
  #L0d6cda.  v1:= v1 + 1;
  #L0d6cde.  goto L0d6cae;
  #L0d6ce0.  return v0;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d76fc.  v0:= "<this>" @kind object;
  #L0d7700.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7706.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d770c.  v2:= temp @kind object;
  #L0d770e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7714.  v0:= temp;
  #L0d7716.  if v0 != 0 then goto L0d771e;
  #L0d771a.  v2:= 0I;
  #L0d771c.  return v2 @kind object;
  #L0d771e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7724.  v0:= temp @kind object;
  #L0d7726.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d772c.  v1:= temp;
  #L0d772e.  if v1 == 0 then goto L0d773c;
  #L0d7732.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7738.  v0:= temp @kind object;
  #L0d773a.  goto L0d7726;
  #L0d773c.  return v0 @kind object;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7750.  v0:= "<this>" @kind object;
  #L0d7754.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d775a.  v0:= "predicate" @kind object;
  #L0d775e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7764.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d776a.  v3:= temp @kind object;
  #L0d776c.  v0:= 0I;
  #L0d776e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7774.  v1:= temp;
  #L0d7776.  if v1 == 0 then goto L0d779e;
  #L0d777a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7780.  v1:= temp @kind object;
  #L0d7782.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7788.  v2:= temp @kind object;
  #L0d778a.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L0d778e.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d7794.  v2:= temp;
  #L0d7796.  if v2 == 0 then goto L0d776e;
  #L0d779a.  v0:= v1 @kind object;
  #L0d779c.  goto L0d776e;
  #L0d779e.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `map`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8f9c.  v0:= "<this>" @kind object;
  #L0d8fa0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8fa6.  v0:= "transform" @kind object;
  #L0d8faa.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8fb0.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L0d8fb4.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d8fba.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8fcc.  v0:= "<this>" @kind object;
  #L0d8fd0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8fd6.  v0:= "transform" @kind object;
  #L0d8fda.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8fe0.  v0:= new `kotlin.sequences.TransformingIndexedSequence`;
  #L0d8fe4.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingIndexedSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d8fea.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapIndexedNotNull`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedNotNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8ffc.  v0:= "<this>" @kind object;
  #L0d9000.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9006.  v0:= "transform" @kind object;
  #L0d900a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9010.  v0:= new `kotlin.sequences.TransformingIndexedSequence`;
  #L0d9014.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingIndexedSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d901a.  call temp:= `filterNotNull`(v0) @signature `Lkotlin/sequences/SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9020.  v1:= temp @kind object;
  #L0d9022.  return v1 @kind object;
}
procedure `java.util.Collection` `mapIndexedNotNullTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Collection` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8318.  v0:= "<this>" @kind object;
  #L0d831c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8322.  v0:= "destination" @kind object;
  #L0d8326.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d832c.  v0:= "transform" @kind object;
  #L0d8330.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8336.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d833c.  v3:= temp @kind object;
  #L0d833e.  v0:= 0I;
  #L0d8340.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8346.  v1:= temp;
  #L0d8348.  if v1 == 0 then goto L0d8380;
  #L0d834c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8352.  v1:= temp @kind object;
  #L0d8354.  v2:= v0 + 1;
  #L0d8358.  if v0 >= 0 then goto L0d8362;
  #L0d835c.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d8362.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d8368.  v0:= temp @kind object;
  #L0d836a.  call temp:= `invoke`(v5, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8370.  v0:= temp @kind object;
  #L0d8372.  if v0 == 0 then goto L0d837c;
  #L0d8376.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d837c.  v0:= v2;
  #L0d837e.  goto L0d8340;
  #L0d8380.  return v4 @kind object;
}
procedure `java.util.Collection` `mapIndexedTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Collection` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d8394.  v0:= "<this>" @kind object;
  #L0d8398.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d839e.  v0:= "destination" @kind object;
  #L0d83a2.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d83a8.  v0:= "transform" @kind object;
  #L0d83ac.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d83b2.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d83b8.  v3:= temp @kind object;
  #L0d83ba.  v0:= 0I;
  #L0d83bc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d83c2.  v1:= temp;
  #L0d83c4.  if v1 == 0 then goto L0d83f8;
  #L0d83c8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d83ce.  v1:= temp @kind object;
  #L0d83d0.  v2:= v0 + 1;
  #L0d83d4.  if v0 >= 0 then goto L0d83de;
  #L0d83d8.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d83de.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d83e4.  v0:= temp @kind object;
  #L0d83e6.  call temp:= `invoke`(v5, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d83ec.  v0:= temp @kind object;
  #L0d83ee.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d83f4.  v0:= v2;
  #L0d83f6.  goto L0d83bc;
  #L0d83f8.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapNotNull`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapNotNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d9034.  v0:= "<this>" @kind object;
  #L0d9038.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d903e.  v0:= "transform" @kind object;
  #L0d9042.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9048.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L0d904c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d9052.  call temp:= `filterNotNull`(v0) @signature `Lkotlin/sequences/SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9058.  v1:= temp @kind object;
  #L0d905a.  return v1 @kind object;
}
procedure `java.util.Collection` `mapNotNullTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d840c.  v0:= "<this>" @kind object;
  #L0d8410.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8416.  v0:= "destination" @kind object;
  #L0d841a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8420.  v0:= "transform" @kind object;
  #L0d8424.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d842a.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8430.  v1:= temp @kind object;
  #L0d8432.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8438.  v0:= temp;
  #L0d843a.  if v0 == 0 then goto L0d845a;
  #L0d843e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8444.  v0:= temp @kind object;
  #L0d8446.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d844c.  v0:= temp @kind object;
  #L0d844e.  if v0 == 0 then goto L0d8432;
  #L0d8452.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d8458.  goto L0d8432;
  #L0d845a.  return v2 @kind object;
}
procedure `java.util.Collection` `mapTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d846c.  v0:= "<this>" @kind object;
  #L0d8470.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8476.  v0:= "destination" @kind object;
  #L0d847a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8480.  v0:= "transform" @kind object;
  #L0d8484.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d848a.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8490.  v1:= temp @kind object;
  #L0d8492.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8498.  v0:= temp;
  #L0d849a.  if v0 == 0 then goto L0d84b6;
  #L0d849e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d84a4.  v0:= temp @kind object;
  #L0d84a6.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d84ac.  v0:= temp @kind object;
  #L0d84ae.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d84b4.  goto L0d8492;
  #L0d84b6.  return v2 @kind object;
}
procedure `java.lang.Object` `maxByOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxByOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d77b0.  v0:= "<this>" @kind object;
  #L0d77b4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d77ba.  v0:= "selector" @kind object;
  #L0d77be.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d77c4.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d77ca.  v5:= temp @kind object;
  #L0d77cc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d77d2.  v0:= temp;
  #L0d77d4.  if v0 != 0 then goto L0d77dc;
  #L0d77d8.  v5:= 0I;
  #L0d77da.  return v5 @kind object;
  #L0d77dc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d77e2.  v0:= temp @kind object;
  #L0d77e4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d77ea.  v1:= temp;
  #L0d77ec.  if v1 != 0 then goto L0d77f2;
  #L0d77f0.  return v0 @kind object;
  #L0d77f2.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d77f8.  v1:= temp @kind object;
  #L0d77fa.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d77fe.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7804.  v2:= temp @kind object;
  #L0d7806.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d780c.  v3:= temp @kind object;
  #L0d780e.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L0d7812.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d7818.  v4:= temp;
  #L0d781a.  if v4 >= 0 then goto L0d7822;
  #L0d781e.  v0:= v2 @kind object;
  #L0d7820.  v1:= v3 @kind object;
  #L0d7822.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7828.  v2:= temp;
  #L0d782a.  if v2 != 0 then goto L0d77fe;
  #L0d782e.  return v0 @kind object;
}
procedure `java.lang.Object` `maxByOrThrow`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxByOrThrow:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d7840.  v0:= "<this>" @kind object;
  #L0d7844.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d784a.  v0:= "selector" @kind object;
  #L0d784e.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7854.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d785a.  v5:= temp @kind object;
  #L0d785c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7862.  v0:= temp;
  #L0d7864.  if v0 == 0 then goto L0d78bc;
  #L0d7868.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d786e.  v0:= temp @kind object;
  #L0d7870.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7876.  v1:= temp;
  #L0d7878.  if v1 != 0 then goto L0d787e;
  #L0d787c.  return v0 @kind object;
  #L0d787e.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7884.  v1:= temp @kind object;
  #L0d7886.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d788a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7890.  v2:= temp @kind object;
  #L0d7892.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7898.  v3:= temp @kind object;
  #L0d789a.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L0d789e.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d78a4.  v4:= temp;
  #L0d78a6.  if v4 >= 0 then goto L0d78ae;
  #L0d78aa.  v0:= v2 @kind object;
  #L0d78ac.  v1:= v3 @kind object;
  #L0d78ae.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d78b4.  v2:= temp;
  #L0d78b6.  if v2 != 0 then goto L0d788a;
  #L0d78ba.  return v0 @kind object;
  #L0d78bc.  v5:= new `java.util.NoSuchElementException`;
  #L0d78c0.  call `<init>`(v5) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d78c6.  throw v5;
}
procedure `java.lang.Comparable` `maxOrNull`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d6f60.  v0:= "<this>" @kind object;
  #L0d6f64.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6f6a.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6f70.  v3:= temp @kind object;
  #L0d6f72.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6f78.  v0:= temp;
  #L0d6f7a.  if v0 != 0 then goto L0d6f82;
  #L0d6f7e.  v3:= 0I;
  #L0d6f80.  return v3 @kind object;
  #L0d6f82.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6f88.  v0:= temp @kind object;
  #L0d6f8a.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L0d6f8e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6f94.  v1:= temp;
  #L0d6f96.  if v1 == 0 then goto L0d6fb6;
  #L0d6f9a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6fa0.  v1:= temp @kind object;
  #L0d6fa2.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d6fa6.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d6fac.  v2:= temp;
  #L0d6fae.  if v2 >= 0 then goto L0d6f8e;
  #L0d6fb2.  v0:= v1 @kind object;
  #L0d6fb4.  goto L0d6f8e;
  #L0d6fb6.  return v0 @kind object;
}
procedure `java.lang.Double` `maxOrNull`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7110.  v0:= "<this>" @kind object;
  #L0d7114.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d711a.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7120.  v4:= temp @kind object;
  #L0d7122.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7128.  v0:= temp;
  #L0d712a.  if v0 != 0 then goto L0d7132;
  #L0d712e.  v4:= 0I;
  #L0d7130.  return v4 @kind object;
  #L0d7132.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7138.  v0:= temp @kind object;
  #L0d713a.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d713e.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d7144.  v0:= temp @kind wide;
  #L0d7146.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d714c.  v2:= temp;
  #L0d714e.  if v2 == 0 then goto L0d7170;
  #L0d7152.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7158.  v2:= temp @kind object;
  #L0d715a.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d715e.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d7164.  v2:= temp @kind wide;
  #L0d7166.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L0d716c.  v0:= temp @kind wide;
  #L0d716e.  goto L0d7146;
  #L0d7170.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0d7176.  v4:= temp @kind object;
  #L0d7178.  return v4 @kind object;
}
procedure `java.lang.Float` `maxOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7208.  v0:= "<this>" @kind object;
  #L0d720c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7212.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7218.  v2:= temp @kind object;
  #L0d721a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7220.  v0:= temp;
  #L0d7222.  if v0 != 0 then goto L0d722a;
  #L0d7226.  v2:= 0I;
  #L0d7228.  return v2 @kind object;
  #L0d722a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7230.  v0:= temp @kind object;
  #L0d7232.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d7236.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d723c.  v0:= temp;
  #L0d723e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7244.  v1:= temp;
  #L0d7246.  if v1 == 0 then goto L0d7268;
  #L0d724a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7250.  v1:= temp @kind object;
  #L0d7252.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d7256.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d725c.  v1:= temp;
  #L0d725e.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L0d7264.  v0:= temp;
  #L0d7266.  goto L0d723e;
  #L0d7268.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0d726e.  v2:= temp @kind object;
  #L0d7270.  return v2 @kind object;
}
procedure `double` `maxOrThrow`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrThrow:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d67c0.  v0:= "<this>" @kind object;
  #L0d67c4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d67ca.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d67d0.  v4:= temp @kind object;
  #L0d67d2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d67d8.  v0:= temp;
  #L0d67da.  if v0 == 0 then goto L0d681e;
  #L0d67de.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d67e4.  v0:= temp @kind object;
  #L0d67e6.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d67ea.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d67f0.  v0:= temp @kind wide;
  #L0d67f2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d67f8.  v2:= temp;
  #L0d67fa.  if v2 == 0 then goto L0d681c;
  #L0d67fe.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6804.  v2:= temp @kind object;
  #L0d6806.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d680a.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d6810.  v2:= temp @kind wide;
  #L0d6812.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L0d6818.  v0:= temp @kind wide;
  #L0d681a.  goto L0d67f2;
  #L0d681c.  return v0 @kind wide;
  #L0d681e.  v4:= new `java.util.NoSuchElementException`;
  #L0d6822.  call `<init>`(v4) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d6828.  throw v4;
}
procedure `float` `maxOrThrow`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrThrow:(Lkotlin/sequences/Sequence;)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6964.  v0:= "<this>" @kind object;
  #L0d6968.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d696e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6974.  v2:= temp @kind object;
  #L0d6976.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d697c.  v0:= temp;
  #L0d697e.  if v0 == 0 then goto L0d69c2;
  #L0d6982.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6988.  v0:= temp @kind object;
  #L0d698a.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d698e.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d6994.  v0:= temp;
  #L0d6996.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d699c.  v1:= temp;
  #L0d699e.  if v1 == 0 then goto L0d69c0;
  #L0d69a2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d69a8.  v1:= temp @kind object;
  #L0d69aa.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d69ae.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d69b4.  v1:= temp;
  #L0d69b6.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L0d69bc.  v0:= temp;
  #L0d69be.  goto L0d6996;
  #L0d69c0.  return v0;
  #L0d69c2.  v2:= new `java.util.NoSuchElementException`;
  #L0d69c6.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d69cc.  throw v2;
}
procedure `java.lang.Comparable` `maxOrThrow`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrThrow:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d6fc8.  v0:= "<this>" @kind object;
  #L0d6fcc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6fd2.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6fd8.  v3:= temp @kind object;
  #L0d6fda.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6fe0.  v0:= temp;
  #L0d6fe2.  if v0 == 0 then goto L0d701c;
  #L0d6fe6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6fec.  v0:= temp @kind object;
  #L0d6fee.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L0d6ff2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6ff8.  v1:= temp;
  #L0d6ffa.  if v1 == 0 then goto L0d701a;
  #L0d6ffe.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7004.  v1:= temp @kind object;
  #L0d7006.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d700a.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d7010.  v2:= temp;
  #L0d7012.  if v2 >= 0 then goto L0d6ff2;
  #L0d7016.  v0:= v1 @kind object;
  #L0d7018.  goto L0d6ff2;
  #L0d701a.  return v0 @kind object;
  #L0d701c.  v3:= new `java.util.NoSuchElementException`;
  #L0d7020.  call `<init>`(v3) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d7026.  throw v3;
}
procedure `java.lang.Object` `maxWithOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d78d8.  v0:= "<this>" @kind object;
  #L0d78dc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d78e2.  v0:= "comparator" @kind object;
  #L0d78e6.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d78ec.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d78f2.  v3:= temp @kind object;
  #L0d78f4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d78fa.  v0:= temp;
  #L0d78fc.  if v0 != 0 then goto L0d7904;
  #L0d7900.  v3:= 0I;
  #L0d7902.  return v3 @kind object;
  #L0d7904.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d790a.  v0:= temp @kind object;
  #L0d790c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7912.  v1:= temp;
  #L0d7914.  if v1 == 0 then goto L0d7930;
  #L0d7918.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d791e.  v1:= temp @kind object;
  #L0d7920.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L0d7926.  v2:= temp;
  #L0d7928.  if v2 >= 0 then goto L0d790c;
  #L0d792c.  v0:= v1 @kind object;
  #L0d792e.  goto L0d790c;
  #L0d7930.  return v0 @kind object;
}
procedure `java.lang.Object` `maxWithOrThrow`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxWithOrThrow:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7944.  v0:= "<this>" @kind object;
  #L0d7948.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d794e.  v0:= "comparator" @kind object;
  #L0d7952.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7958.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d795e.  v3:= temp @kind object;
  #L0d7960.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7966.  v0:= temp;
  #L0d7968.  if v0 == 0 then goto L0d799a;
  #L0d796c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7972.  v0:= temp @kind object;
  #L0d7974.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d797a.  v1:= temp;
  #L0d797c.  if v1 == 0 then goto L0d7998;
  #L0d7980.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7986.  v1:= temp @kind object;
  #L0d7988.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L0d798e.  v2:= temp;
  #L0d7990.  if v2 >= 0 then goto L0d7974;
  #L0d7994.  v0:= v1 @kind object;
  #L0d7996.  goto L0d7974;
  #L0d7998.  return v0 @kind object;
  #L0d799a.  v3:= new `java.util.NoSuchElementException`;
  #L0d799e.  call `<init>`(v3) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d79a4.  throw v3;
}
procedure `java.lang.Object` `minByOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minByOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d79b8.  v0:= "<this>" @kind object;
  #L0d79bc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d79c2.  v0:= "selector" @kind object;
  #L0d79c6.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d79cc.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d79d2.  v5:= temp @kind object;
  #L0d79d4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d79da.  v0:= temp;
  #L0d79dc.  if v0 != 0 then goto L0d79e4;
  #L0d79e0.  v5:= 0I;
  #L0d79e2.  return v5 @kind object;
  #L0d79e4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d79ea.  v0:= temp @kind object;
  #L0d79ec.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d79f2.  v1:= temp;
  #L0d79f4.  if v1 != 0 then goto L0d79fa;
  #L0d79f8.  return v0 @kind object;
  #L0d79fa.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7a00.  v1:= temp @kind object;
  #L0d7a02.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d7a06.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7a0c.  v2:= temp @kind object;
  #L0d7a0e.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7a14.  v3:= temp @kind object;
  #L0d7a16.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L0d7a1a.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d7a20.  v4:= temp;
  #L0d7a22.  if v4 <= 0 then goto L0d7a2a;
  #L0d7a26.  v0:= v2 @kind object;
  #L0d7a28.  v1:= v3 @kind object;
  #L0d7a2a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7a30.  v2:= temp;
  #L0d7a32.  if v2 != 0 then goto L0d7a06;
  #L0d7a36.  return v0 @kind object;
}
procedure `java.lang.Object` `minByOrThrow`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minByOrThrow:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d7a48.  v0:= "<this>" @kind object;
  #L0d7a4c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7a52.  v0:= "selector" @kind object;
  #L0d7a56.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7a5c.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7a62.  v5:= temp @kind object;
  #L0d7a64.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7a6a.  v0:= temp;
  #L0d7a6c.  if v0 == 0 then goto L0d7ac4;
  #L0d7a70.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7a76.  v0:= temp @kind object;
  #L0d7a78.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7a7e.  v1:= temp;
  #L0d7a80.  if v1 != 0 then goto L0d7a86;
  #L0d7a84.  return v0 @kind object;
  #L0d7a86.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7a8c.  v1:= temp @kind object;
  #L0d7a8e.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d7a92.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7a98.  v2:= temp @kind object;
  #L0d7a9a.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7aa0.  v3:= temp @kind object;
  #L0d7aa2.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L0d7aa6.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d7aac.  v4:= temp;
  #L0d7aae.  if v4 <= 0 then goto L0d7ab6;
  #L0d7ab2.  v0:= v2 @kind object;
  #L0d7ab4.  v1:= v3 @kind object;
  #L0d7ab6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7abc.  v2:= temp;
  #L0d7abe.  if v2 != 0 then goto L0d7a92;
  #L0d7ac2.  return v0 @kind object;
  #L0d7ac4.  v5:= new `java.util.NoSuchElementException`;
  #L0d7ac8.  call `<init>`(v5) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d7ace.  throw v5;
}
procedure `java.lang.Comparable` `minOrNull`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7038.  v0:= "<this>" @kind object;
  #L0d703c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7042.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7048.  v3:= temp @kind object;
  #L0d704a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7050.  v0:= temp;
  #L0d7052.  if v0 != 0 then goto L0d705a;
  #L0d7056.  v3:= 0I;
  #L0d7058.  return v3 @kind object;
  #L0d705a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7060.  v0:= temp @kind object;
  #L0d7062.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L0d7066.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d706c.  v1:= temp;
  #L0d706e.  if v1 == 0 then goto L0d708e;
  #L0d7072.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7078.  v1:= temp @kind object;
  #L0d707a.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d707e.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d7084.  v2:= temp;
  #L0d7086.  if v2 <= 0 then goto L0d7066;
  #L0d708a.  v0:= v1 @kind object;
  #L0d708c.  goto L0d7066;
  #L0d708e.  return v0 @kind object;
}
procedure `java.lang.Double` `minOrNull`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d718c.  v0:= "<this>" @kind object;
  #L0d7190.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7196.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d719c.  v4:= temp @kind object;
  #L0d719e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d71a4.  v0:= temp;
  #L0d71a6.  if v0 != 0 then goto L0d71ae;
  #L0d71aa.  v4:= 0I;
  #L0d71ac.  return v4 @kind object;
  #L0d71ae.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d71b4.  v0:= temp @kind object;
  #L0d71b6.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d71ba.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d71c0.  v0:= temp @kind wide;
  #L0d71c2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d71c8.  v2:= temp;
  #L0d71ca.  if v2 == 0 then goto L0d71ec;
  #L0d71ce.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d71d4.  v2:= temp @kind object;
  #L0d71d6.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d71da.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d71e0.  v2:= temp @kind wide;
  #L0d71e2.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L0d71e8.  v0:= temp @kind wide;
  #L0d71ea.  goto L0d71c2;
  #L0d71ec.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0d71f2.  v4:= temp @kind object;
  #L0d71f4.  return v4 @kind object;
}
procedure `java.lang.Float` `minOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7284.  v0:= "<this>" @kind object;
  #L0d7288.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d728e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7294.  v2:= temp @kind object;
  #L0d7296.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d729c.  v0:= temp;
  #L0d729e.  if v0 != 0 then goto L0d72a6;
  #L0d72a2.  v2:= 0I;
  #L0d72a4.  return v2 @kind object;
  #L0d72a6.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d72ac.  v0:= temp @kind object;
  #L0d72ae.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d72b2.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d72b8.  v0:= temp;
  #L0d72ba.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d72c0.  v1:= temp;
  #L0d72c2.  if v1 == 0 then goto L0d72e4;
  #L0d72c6.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d72cc.  v1:= temp @kind object;
  #L0d72ce.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d72d2.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d72d8.  v1:= temp;
  #L0d72da.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L0d72e0.  v0:= temp;
  #L0d72e2.  goto L0d72ba;
  #L0d72e4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0d72ea.  v2:= temp @kind object;
  #L0d72ec.  return v2 @kind object;
}
procedure `double` `minOrThrow`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrThrow:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d683c.  v0:= "<this>" @kind object;
  #L0d6840.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6846.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d684c.  v4:= temp @kind object;
  #L0d684e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6854.  v0:= temp;
  #L0d6856.  if v0 == 0 then goto L0d689a;
  #L0d685a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6860.  v0:= temp @kind object;
  #L0d6862.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d6866.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d686c.  v0:= temp @kind wide;
  #L0d686e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6874.  v2:= temp;
  #L0d6876.  if v2 == 0 then goto L0d6898;
  #L0d687a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6880.  v2:= temp @kind object;
  #L0d6882.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d6886.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d688c.  v2:= temp @kind wide;
  #L0d688e.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L0d6894.  v0:= temp @kind wide;
  #L0d6896.  goto L0d686e;
  #L0d6898.  return v0 @kind wide;
  #L0d689a.  v4:= new `java.util.NoSuchElementException`;
  #L0d689e.  call `<init>`(v4) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d68a4.  throw v4;
}
procedure `float` `minOrThrow`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrThrow:(Lkotlin/sequences/Sequence;)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d69e0.  v0:= "<this>" @kind object;
  #L0d69e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d69ea.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d69f0.  v2:= temp @kind object;
  #L0d69f2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d69f8.  v0:= temp;
  #L0d69fa.  if v0 == 0 then goto L0d6a3e;
  #L0d69fe.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6a04.  v0:= temp @kind object;
  #L0d6a06.  v0:= (`java.lang.Number`) v0 @kind object;
  #L0d6a0a.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d6a10.  v0:= temp;
  #L0d6a12.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6a18.  v1:= temp;
  #L0d6a1a.  if v1 == 0 then goto L0d6a3c;
  #L0d6a1e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6a24.  v1:= temp @kind object;
  #L0d6a26.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6a2a.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d6a30.  v1:= temp;
  #L0d6a32.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L0d6a38.  v0:= temp;
  #L0d6a3a.  goto L0d6a12;
  #L0d6a3c.  return v0;
  #L0d6a3e.  v2:= new `java.util.NoSuchElementException`;
  #L0d6a42.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d6a48.  throw v2;
}
procedure `java.lang.Comparable` `minOrThrow`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrThrow:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d70a0.  v0:= "<this>" @kind object;
  #L0d70a4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d70aa.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d70b0.  v3:= temp @kind object;
  #L0d70b2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d70b8.  v0:= temp;
  #L0d70ba.  if v0 == 0 then goto L0d70f4;
  #L0d70be.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d70c4.  v0:= temp @kind object;
  #L0d70c6.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L0d70ca.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d70d0.  v1:= temp;
  #L0d70d2.  if v1 == 0 then goto L0d70f2;
  #L0d70d6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d70dc.  v1:= temp @kind object;
  #L0d70de.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L0d70e2.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0d70e8.  v2:= temp;
  #L0d70ea.  if v2 <= 0 then goto L0d70ca;
  #L0d70ee.  v0:= v1 @kind object;
  #L0d70f0.  goto L0d70ca;
  #L0d70f2.  return v0 @kind object;
  #L0d70f4.  v3:= new `java.util.NoSuchElementException`;
  #L0d70f8.  call `<init>`(v3) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d70fe.  throw v3;
}
procedure `java.lang.Object` `minWithOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7ae0.  v0:= "<this>" @kind object;
  #L0d7ae4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7aea.  v0:= "comparator" @kind object;
  #L0d7aee.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7af4.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7afa.  v3:= temp @kind object;
  #L0d7afc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7b02.  v0:= temp;
  #L0d7b04.  if v0 != 0 then goto L0d7b0c;
  #L0d7b08.  v3:= 0I;
  #L0d7b0a.  return v3 @kind object;
  #L0d7b0c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7b12.  v0:= temp @kind object;
  #L0d7b14.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7b1a.  v1:= temp;
  #L0d7b1c.  if v1 == 0 then goto L0d7b38;
  #L0d7b20.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7b26.  v1:= temp @kind object;
  #L0d7b28.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L0d7b2e.  v2:= temp;
  #L0d7b30.  if v2 <= 0 then goto L0d7b14;
  #L0d7b34.  v0:= v1 @kind object;
  #L0d7b36.  goto L0d7b14;
  #L0d7b38.  return v0 @kind object;
}
procedure `java.lang.Object` `minWithOrThrow`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minWithOrThrow:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d7b4c.  v0:= "<this>" @kind object;
  #L0d7b50.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7b56.  v0:= "comparator" @kind object;
  #L0d7b5a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7b60.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7b66.  v3:= temp @kind object;
  #L0d7b68.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7b6e.  v0:= temp;
  #L0d7b70.  if v0 == 0 then goto L0d7ba2;
  #L0d7b74.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7b7a.  v0:= temp @kind object;
  #L0d7b7c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7b82.  v1:= temp;
  #L0d7b84.  if v1 == 0 then goto L0d7ba0;
  #L0d7b88.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7b8e.  v1:= temp @kind object;
  #L0d7b90.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L0d7b96.  v2:= temp;
  #L0d7b98.  if v2 <= 0 then goto L0d7b7c;
  #L0d7b9c.  v0:= v1 @kind object;
  #L0d7b9e.  goto L0d7b7c;
  #L0d7ba0.  return v0 @kind object;
  #L0d7ba2.  v3:= new `java.util.NoSuchElementException`;
  #L0d7ba6.  call `<init>`(v3) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d7bac.  throw v3;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d906c.  v0:= "<this>" @kind object;
  #L0d9070.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9076.  v0:= "elements" @kind object;
  #L0d907a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9080.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$3`;
  #L0d9084.  call `<init>`(v0, v2, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$3;.<init>:(Ljava/lang/Iterable;Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d908a.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d909c.  v0:= "<this>" @kind object;
  #L0d90a0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d90a6.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$1`;
  #L0d90aa.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)V` @kind direct;
  #L0d90b0.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9108.  v0:= "<this>" @kind object;
  #L0d910c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9112.  v0:= "elements" @kind object;
  #L0d9116.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d911c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$4`;
  #L0d9120.  call `<init>`(v0, v2, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$4;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d9126.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d90c4.  v0:= "<this>" @kind object;
  #L0d90c8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d90ce.  v0:= "elements" @kind object;
  #L0d90d2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d90d8.  v0:= length @variable v2;
  #L0d90da.  if v0 != 0 then goto L0d90e2;
  #L0d90de.  v0:= 1I;
  #L0d90e0.  goto L0d90e4;
  #L0d90e2.  v0:= 0I;
  #L0d90e4.  if v0 == 0 then goto L0d90ea;
  #L0d90e8.  return v1 @kind object;
  #L0d90ea.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$2`;
  #L0d90ee.  call `<init>`(v0, v2, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$2;.<init>:([Ljava/lang/Object;Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d90f4.  return v0 @kind object;
}
procedure `boolean` `none`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.none:(Lkotlin/sequences/Sequence;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d64a8.  v0:= "<this>" @kind object;
  #L0d64ac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d64b2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d64b8.  v1:= temp @kind object;
  #L0d64ba.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d64c0.  v1:= temp;
  #L0d64c2.  v1:= v1 ^~ 1;
  #L0d64c6.  return v1;
}
procedure `boolean` `none`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.none:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d64d8.  v0:= "<this>" @kind object;
  #L0d64dc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d64e2.  v0:= "predicate" @kind object;
  #L0d64e6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d64ec.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d64f2.  v1:= temp @kind object;
  #L0d64f4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d64fa.  v0:= temp;
  #L0d64fc.  if v0 == 0 then goto L0d6524;
  #L0d6500.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6506.  v0:= temp @kind object;
  #L0d6508.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d650e.  v0:= temp @kind object;
  #L0d6510.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L0d6514.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d651a.  v0:= temp;
  #L0d651c.  if v0 == 0 then goto L0d64f4;
  #L0d6520.  v1:= 0I;
  #L0d6522.  return v1;
  #L0d6524.  v1:= 1I;
  #L0d6526.  return v1;
}
procedure `kotlin.sequences.Sequence` `onEach`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.onEach:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9138.  v0:= "<this>" @kind object;
  #L0d913c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9142.  v0:= "action" @kind object;
  #L0d9146.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d914c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$j`;
  #L0d9150.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$j;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d9156.  call temp:= `map`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d915c.  v1:= temp @kind object;
  #L0d915e.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `onEachIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.onEachIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9170.  v0:= "<this>" @kind object;
  #L0d9174.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d917a.  v0:= "action" @kind object;
  #L0d917e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9184.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$k`;
  #L0d9188.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$k;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d918e.  call temp:= `mapIndexed`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9194.  v1:= temp @kind object;
  #L0d9196.  return v1 @kind object;
}
procedure `kotlin.Pair` `partition`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.partition:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d8b78.  v0:= "<this>" @kind object;
  #L0d8b7c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8b82.  v0:= "predicate" @kind object;
  #L0d8b86.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8b8c.  v0:= new `java.util.ArrayList`;
  #L0d8b90.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8b96.  v1:= new `java.util.ArrayList`;
  #L0d8b9a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8ba0.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8ba6.  v4:= temp @kind object;
  #L0d8ba8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8bae.  v2:= temp;
  #L0d8bb0.  if v2 == 0 then goto L0d8be4;
  #L0d8bb4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8bba.  v2:= temp @kind object;
  #L0d8bbc.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d8bc2.  v3:= temp @kind object;
  #L0d8bc4.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L0d8bc8.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d8bce.  v3:= temp;
  #L0d8bd0.  if v3 == 0 then goto L0d8bdc;
  #L0d8bd4.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L0d8bda.  goto L0d8ba8;
  #L0d8bdc.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L0d8be2.  goto L0d8ba8;
  #L0d8be4.  v4:= new `kotlin.Pair`;
  #L0d8be8.  call `<init>`(v4, v0, v1) @signature `Lkotlin/Pair;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L0d8bee.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d91a8.  v0:= "<this>" @kind object;
  #L0d91ac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d91b2.  v0:= "elements" @kind object;
  #L0d91b6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d91bc.  v0:= 2I;
  #L0d91be.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L0d91c2.  v1:= 0I;
  #L0d91c4.  v0[v1]:= v2 @kind object;
  #L0d91c8.  call temp:= `asSequence`(v3) @signature `Lkotlin/collections/CollectionsKt;.asSequence:(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d91ce.  v2:= temp @kind object;
  #L0d91d0.  v3:= 1I;
  #L0d91d2.  v0[v3]:= v2 @kind object;
  #L0d91d6.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d91dc.  v2:= temp @kind object;
  #L0d91de.  call temp:= `flatten`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d91e4.  v2:= temp @kind object;
  #L0d91e6.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d91f8.  v0:= "<this>" @kind object;
  #L0d91fc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9202.  v0:= 2I;
  #L0d9204.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L0d9208.  v1:= 0I;
  #L0d920a.  v0[v1]:= v3 @kind object;
  #L0d920e.  v3:= 1I;
  #L0d9210.  v2:= new `java.lang.Object`[v3];
  #L0d9214.  v2[v1]:= v4 @kind object;
  #L0d9218.  call temp:= `sequenceOf`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d921e.  v4:= temp @kind object;
  #L0d9220.  v0[v3]:= v4 @kind object;
  #L0d9224.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d922a.  v3:= temp @kind object;
  #L0d922c.  call temp:= `flatten`(v3) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9232.  v3:= temp @kind object;
  #L0d9234.  return v3 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d9280.  v0:= "<this>" @kind object;
  #L0d9284.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d928a.  v0:= "elements" @kind object;
  #L0d928e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9294.  v0:= 2I;
  #L0d9296.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L0d929a.  v1:= 0I;
  #L0d929c.  v0[v1]:= v2 @kind object;
  #L0d92a0.  v2:= 1I;
  #L0d92a2.  v0[v2]:= v3 @kind object;
  #L0d92a6.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d92ac.  v2:= temp @kind object;
  #L0d92ae.  call temp:= `flatten`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d92b4.  v2:= temp @kind object;
  #L0d92b6.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9248.  v0:= "<this>" @kind object;
  #L0d924c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9252.  v0:= "elements" @kind object;
  #L0d9256.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d925c.  call temp:= `asList`(v2) @signature `Lkotlin/collections/ArraysKt;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L0d9262.  v2:= temp @kind object;
  #L0d9264.  call temp:= `plus`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d926a.  v1:= temp @kind object;
  #L0d926c.  return v1 @kind object;
}
procedure `java.lang.Object` `reduce`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduce:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7bc0.  v0:= "<this>" @kind object;
  #L0d7bc4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7bca.  v0:= "operation" @kind object;
  #L0d7bce.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7bd4.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7bda.  v2:= temp @kind object;
  #L0d7bdc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7be2.  v0:= temp;
  #L0d7be4.  if v0 == 0 then goto L0d7c10;
  #L0d7be8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7bee.  v0:= temp @kind object;
  #L0d7bf0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7bf6.  v1:= temp;
  #L0d7bf8.  if v1 == 0 then goto L0d7c0e;
  #L0d7bfc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7c02.  v1:= temp @kind object;
  #L0d7c04.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7c0a.  v0:= temp @kind object;
  #L0d7c0c.  goto L0d7bf0;
  #L0d7c0e.  return v0 @kind object;
  #L0d7c10.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0d7c14.  v3:= "Empty sequence can't be reduced." @kind object;
  #L0d7c18.  call `<init>`(v2, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7c1e.  throw v2;
}
procedure `java.lang.Object` `reduceIndexed`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function3` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7c30.  v0:= "<this>" @kind object;
  #L0d7c34.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7c3a.  v0:= "operation" @kind object;
  #L0d7c3e.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7c44.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7c4a.  v4:= temp @kind object;
  #L0d7c4c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7c52.  v0:= temp;
  #L0d7c54.  if v0 == 0 then goto L0d7c9a;
  #L0d7c58.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7c5e.  v0:= temp @kind object;
  #L0d7c60.  v1:= 1I;
  #L0d7c62.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7c68.  v2:= temp;
  #L0d7c6a.  if v2 == 0 then goto L0d7c98;
  #L0d7c6e.  v2:= v1 + 1;
  #L0d7c72.  if v1 >= 0 then goto L0d7c7c;
  #L0d7c76.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d7c7c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d7c82.  v1:= temp @kind object;
  #L0d7c84.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7c8a.  v3:= temp @kind object;
  #L0d7c8c.  call temp:= `invoke`(v5, v1, v0, v3) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7c92.  v0:= temp @kind object;
  #L0d7c94.  v1:= v2;
  #L0d7c96.  goto L0d7c62;
  #L0d7c98.  return v0 @kind object;
  #L0d7c9a.  v4:= new `java.lang.UnsupportedOperationException`;
  #L0d7c9e.  v5:= "Empty sequence can't be reduced." @kind object;
  #L0d7ca2.  call `<init>`(v4, v5) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7ca8.  throw v4;
}
procedure `java.lang.Object` `reduceIndexedOrNull`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function3` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceIndexedOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7cbc.  v0:= "<this>" @kind object;
  #L0d7cc0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7cc6.  v0:= "operation" @kind object;
  #L0d7cca.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7cd0.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7cd6.  v4:= temp @kind object;
  #L0d7cd8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7cde.  v0:= temp;
  #L0d7ce0.  if v0 != 0 then goto L0d7ce8;
  #L0d7ce4.  v4:= 0I;
  #L0d7ce6.  return v4 @kind object;
  #L0d7ce8.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7cee.  v0:= temp @kind object;
  #L0d7cf0.  v1:= 1I;
  #L0d7cf2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7cf8.  v2:= temp;
  #L0d7cfa.  if v2 == 0 then goto L0d7d28;
  #L0d7cfe.  v2:= v1 + 1;
  #L0d7d02.  if v1 >= 0 then goto L0d7d0c;
  #L0d7d06.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d7d0c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0d7d12.  v1:= temp @kind object;
  #L0d7d14.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7d1a.  v3:= temp @kind object;
  #L0d7d1c.  call temp:= `invoke`(v5, v1, v0, v3) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7d22.  v0:= temp @kind object;
  #L0d7d24.  v1:= v2;
  #L0d7d26.  goto L0d7cf2;
  #L0d7d28.  return v0 @kind object;
}
procedure `java.lang.Object` `reduceOrNull`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7d3c.  v0:= "<this>" @kind object;
  #L0d7d40.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7d46.  v0:= "operation" @kind object;
  #L0d7d4a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7d50.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7d56.  v2:= temp @kind object;
  #L0d7d58.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7d5e.  v0:= temp;
  #L0d7d60.  if v0 != 0 then goto L0d7d68;
  #L0d7d64.  v2:= 0I;
  #L0d7d66.  return v2 @kind object;
  #L0d7d68.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7d6e.  v0:= temp @kind object;
  #L0d7d70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7d76.  v1:= temp;
  #L0d7d78.  if v1 == 0 then goto L0d7d8e;
  #L0d7d7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7d82.  v1:= temp @kind object;
  #L0d7d84.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7d8a.  v0:= temp @kind object;
  #L0d7d8c.  goto L0d7d70;
  #L0d7d8e.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `requireNoNulls`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.requireNoNulls:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d92c8.  v0:= "<this>" @kind object;
  #L0d92cc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d92d2.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$l`;
  #L0d92d6.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$l;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d92dc.  call temp:= `map`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d92e2.  v1:= temp @kind object;
  #L0d92e4.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningFold`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d92f8.  v0:= "<this>" @kind object;
  #L0d92fc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9302.  v0:= "operation" @kind object;
  #L0d9306.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d930c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$m`;
  #L0d9310.  v1:= 0I;
  #L0d9312.  call `<init>`(v0, v3, v2, v4, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d9318.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d931e.  v2:= temp @kind object;
  #L0d9320.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningFoldIndexed`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.jvm.functions.Function3` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFoldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d9334.  v0:= "<this>" @kind object;
  #L0d9338.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d933e.  v0:= "operation" @kind object;
  #L0d9342.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9348.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$n`;
  #L0d934c.  v1:= 0I;
  #L0d934e.  call `<init>`(v0, v3, v2, v4, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d9354.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d935a.  v2:= temp @kind object;
  #L0d935c.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningReduce`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningReduce:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d9370.  v0:= "<this>" @kind object;
  #L0d9374.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d937a.  v0:= "operation" @kind object;
  #L0d937e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9384.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$o`;
  #L0d9388.  v1:= 0I;
  #L0d938a.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d9390.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9396.  v2:= temp @kind object;
  #L0d9398.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningReduceIndexed`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningReduceIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d93ac.  v0:= "<this>" @kind object;
  #L0d93b0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d93b6.  v0:= "operation" @kind object;
  #L0d93ba.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d93c0.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$p`;
  #L0d93c4.  v1:= 0I;
  #L0d93c6.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$p;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d93cc.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d93d2.  v2:= temp @kind object;
  #L0d93d4.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `scan`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.scan:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d93e8.  v0:= "<this>" @kind object;
  #L0d93ec.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d93f2.  v0:= "operation" @kind object;
  #L0d93f6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d93fc.  call temp:= `runningFold`(v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9402.  v1:= temp @kind object;
  #L0d9404.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `scanIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.scanIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9418.  v0:= "<this>" @kind object;
  #L0d941c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9422.  v0:= "operation" @kind object;
  #L0d9426.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d942c.  call temp:= `runningFoldIndexed`(v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFoldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9432.  v1:= temp @kind object;
  #L0d9434.  return v1 @kind object;
}
procedure `java.lang.Object` `single`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.single:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d7da0.  v0:= "<this>" @kind object;
  #L0d7da4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7daa.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7db0.  v1:= temp @kind object;
  #L0d7db2.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7db8.  v0:= temp;
  #L0d7dba.  if v0 == 0 then goto L0d7de4;
  #L0d7dbe.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7dc4.  v0:= temp @kind object;
  #L0d7dc6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7dcc.  v1:= temp;
  #L0d7dce.  if v1 != 0 then goto L0d7dd4;
  #L0d7dd2.  return v0 @kind object;
  #L0d7dd4.  v1:= new `java.lang.IllegalArgumentException`;
  #L0d7dd8.  v0:= "Sequence has more than one element." @kind object;
  #L0d7ddc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7de2.  throw v1;
  #L0d7de4.  v1:= new `java.util.NoSuchElementException`;
  #L0d7de8.  v0:= "Sequence is empty." @kind object;
  #L0d7dec.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7df2.  throw v1;
}
procedure `java.lang.Object` `single`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.single:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d7e04.  v0:= "<this>" @kind object;
  #L0d7e08.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7e0e.  v0:= "predicate" @kind object;
  #L0d7e12.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7e18.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7e1e.  v4:= temp @kind object;
  #L0d7e20.  v0:= 0I;
  #L0d7e22.  v1:= 0I;
  #L0d7e24.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7e2a.  v2:= temp;
  #L0d7e2c.  if v2 == 0 then goto L0d7e6a;
  #L0d7e30.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7e36.  v2:= temp @kind object;
  #L0d7e38.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7e3e.  v3:= temp @kind object;
  #L0d7e40.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L0d7e44.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d7e4a.  v3:= temp;
  #L0d7e4c.  if v3 == 0 then goto L0d7e24;
  #L0d7e50.  if v1 != 0 then goto L0d7e5a;
  #L0d7e54.  v1:= 1I;
  #L0d7e56.  v0:= v2 @kind object;
  #L0d7e58.  goto L0d7e24;
  #L0d7e5a.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d7e5e.  v5:= "Sequence contains more than one matching element." @kind object;
  #L0d7e62.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7e68.  throw v4;
  #L0d7e6a.  if v1 == 0 then goto L0d7e70;
  #L0d7e6e.  return v0 @kind object;
  #L0d7e70.  v4:= new `java.util.NoSuchElementException`;
  #L0d7e74.  v5:= "Sequence contains no element matching the predicate." @kind object;
  #L0d7e78.  call `<init>`(v4, v5) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d7e7e.  throw v4;
}
procedure `java.lang.Object` `singleOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.singleOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d7e90.  v0:= "<this>" @kind object;
  #L0d7e94.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7e9a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7ea0.  v2:= temp @kind object;
  #L0d7ea2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7ea8.  v0:= temp;
  #L0d7eaa.  v1:= 0I;
  #L0d7eac.  if v0 != 0 then goto L0d7eb2;
  #L0d7eb0.  return v1 @kind object;
  #L0d7eb2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7eb8.  v0:= temp @kind object;
  #L0d7eba.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7ec0.  v2:= temp;
  #L0d7ec2.  if v2 == 0 then goto L0d7ec8;
  #L0d7ec6.  return v1 @kind object;
  #L0d7ec8.  return v0 @kind object;
}
procedure `java.lang.Object` `singleOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.singleOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d7edc.  v0:= "<this>" @kind object;
  #L0d7ee0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7ee6.  v0:= "predicate" @kind object;
  #L0d7eea.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d7ef0.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d7ef6.  v5:= temp @kind object;
  #L0d7ef8.  v0:= 0I;
  #L0d7efa.  v1:= 0I;
  #L0d7efc.  v2:= v0 @kind object;
  #L0d7efe.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d7f04.  v3:= temp;
  #L0d7f06.  if v3 == 0 then goto L0d7f36;
  #L0d7f0a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d7f10.  v3:= temp @kind object;
  #L0d7f12.  call temp:= `invoke`(v6, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d7f18.  v4:= temp @kind object;
  #L0d7f1a.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L0d7f1e.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0d7f24.  v4:= temp;
  #L0d7f26.  if v4 == 0 then goto L0d7efe;
  #L0d7f2a.  if v1 == 0 then goto L0d7f30;
  #L0d7f2e.  return v0 @kind object;
  #L0d7f30.  v1:= 1I;
  #L0d7f32.  v2:= v3 @kind object;
  #L0d7f34.  goto L0d7efe;
  #L0d7f36.  if v1 != 0 then goto L0d7f3c;
  #L0d7f3a.  return v0 @kind object;
  #L0d7f3c.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `sorted`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sorted:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9448.  v0:= "<this>" @kind object;
  #L0d944c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9452.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$sorted$1`;
  #L0d9456.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$sorted$1;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d945c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9470.  v0:= "<this>" @kind object;
  #L0d9474.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d947a.  v0:= "selector" @kind object;
  #L0d947e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9484.  v0:= new `kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2`;
  #L0d9488.  call `<init>`(v0, v2) @signature `Lkotlin/comparisons/ComparisonsKt__ComparisonsKt$compareBy$2;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d948e.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9494.  v1:= temp @kind object;
  #L0d9496.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedByDescending`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedByDescending:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d94a8.  v0:= "<this>" @kind object;
  #L0d94ac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d94b2.  v0:= "selector" @kind object;
  #L0d94b6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d94bc.  v0:= new `kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1`;
  #L0d94c0.  call `<init>`(v0, v2) @signature `Lkotlin/comparisons/ComparisonsKt__ComparisonsKt$compareByDescending$1;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d94c6.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d94cc.  v1:= temp @kind object;
  #L0d94ce.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedDescending`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedDescending:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d94e0.  v0:= "<this>" @kind object;
  #L0d94e4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d94ea.  call temp:= `reverseOrder`() @signature `Lkotlin/comparisons/ComparisonsKt;.reverseOrder:()Ljava/util/Comparator;` @kind static;
  #L0d94f0.  v0:= temp @kind object;
  #L0d94f2.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d94f8.  v1:= temp @kind object;
  #L0d94fa.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedWith`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d950c.  v0:= "<this>" @kind object;
  #L0d9510.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9516.  v0:= "comparator" @kind object;
  #L0d951a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9520.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1`;
  #L0d9524.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$sortedWith$1;.<init>:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)V` @kind direct;
  #L0d952a.  return v0 @kind object;
}
procedure `int` `sumBy`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6cf4.  v0:= "<this>" @kind object;
  #L0d6cf8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6cfe.  v0:= "selector" @kind object;
  #L0d6d02.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6d08.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6d0e.  v2:= temp @kind object;
  #L0d6d10.  v0:= 0I;
  #L0d6d12.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6d18.  v1:= temp;
  #L0d6d1a.  if v1 == 0 then goto L0d6d3e;
  #L0d6d1e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6d24.  v1:= temp @kind object;
  #L0d6d26.  call temp:= `invoke`(v3, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d6d2c.  v1:= temp @kind object;
  #L0d6d2e.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6d32.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0d6d38.  v1:= temp;
  #L0d6d3a.  v0:= v0 + v1 @kind int;
  #L0d6d3c.  goto L0d6d12;
  #L0d6d3e.  return v0;
}
procedure `double` `sumByDouble`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumByDouble:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d68b8.  v0:= "<this>" @kind object;
  #L0d68bc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d68c2.  v0:= "selector" @kind object;
  #L0d68c6.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d68cc.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d68d2.  v4:= temp @kind object;
  #L0d68d4.  v0:= 0L;
  #L0d68d8.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d68de.  v2:= temp;
  #L0d68e0.  if v2 == 0 then goto L0d6904;
  #L0d68e4.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d68ea.  v2:= temp @kind object;
  #L0d68ec.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d68f2.  v2:= temp @kind object;
  #L0d68f4.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d68f8.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d68fe.  v2:= temp @kind wide;
  #L0d6900.  v0:= v0 + v2 @kind double;
  #L0d6902.  goto L0d68d8;
  #L0d6904.  return v0 @kind wide;
}
procedure `int` `sumOfByte`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfByte:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6d50.  v0:= "<this>" @kind object;
  #L0d6d54.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6d5a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6d60.  v2:= temp @kind object;
  #L0d6d62.  v0:= 0I;
  #L0d6d64.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6d6a.  v1:= temp;
  #L0d6d6c.  if v1 == 0 then goto L0d6d88;
  #L0d6d70.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6d76.  v1:= temp @kind object;
  #L0d6d78.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6d7c.  call temp:= `byteValue`(v1) @signature `Ljava/lang/Number;.byteValue:()B` @kind virtual;
  #L0d6d82.  v1:= temp;
  #L0d6d84.  v0:= v0 + v1 @kind int;
  #L0d6d86.  goto L0d6d64;
  #L0d6d88.  return v0;
}
procedure `double` `sumOfDouble`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfDouble:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d6918.  v0:= "<this>" @kind object;
  #L0d691c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6922.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6928.  v4:= temp @kind object;
  #L0d692a.  v0:= 0L;
  #L0d692e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6934.  v2:= temp;
  #L0d6936.  if v2 == 0 then goto L0d6952;
  #L0d693a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6940.  v2:= temp @kind object;
  #L0d6942.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d6946.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0d694c.  v2:= temp @kind wide;
  #L0d694e.  v0:= v0 + v2 @kind double;
  #L0d6950.  goto L0d692e;
  #L0d6952.  return v0 @kind wide;
}
procedure `float` `sumOfFloat`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfFloat:(Lkotlin/sequences/Sequence;)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6a5c.  v0:= "<this>" @kind object;
  #L0d6a60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6a66.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6a6c.  v2:= temp @kind object;
  #L0d6a6e.  v0:= 0I;
  #L0d6a70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6a76.  v1:= temp;
  #L0d6a78.  if v1 == 0 then goto L0d6a94;
  #L0d6a7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6a82.  v1:= temp @kind object;
  #L0d6a84.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6a88.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0d6a8e.  v1:= temp;
  #L0d6a90.  v0:= v0 + v1 @kind float;
  #L0d6a92.  goto L0d6a70;
  #L0d6a94.  return v0;
}
procedure `int` `sumOfInt`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfInt:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6d9c.  v0:= "<this>" @kind object;
  #L0d6da0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6da6.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6dac.  v2:= temp @kind object;
  #L0d6dae.  v0:= 0I;
  #L0d6db0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6db6.  v1:= temp;
  #L0d6db8.  if v1 == 0 then goto L0d6dd4;
  #L0d6dbc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6dc2.  v1:= temp @kind object;
  #L0d6dc4.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6dc8.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0d6dce.  v1:= temp;
  #L0d6dd0.  v0:= v0 + v1 @kind int;
  #L0d6dd2.  goto L0d6db0;
  #L0d6dd4.  return v0;
}
procedure `long` `sumOfLong`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfLong:(Lkotlin/sequences/Sequence;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d97c4.  v0:= "<this>" @kind object;
  #L0d97c8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d97ce.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d97d4.  v4:= temp @kind object;
  #L0d97d6.  v0:= 0L;
  #L0d97da.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d97e0.  v2:= temp;
  #L0d97e2.  if v2 == 0 then goto L0d97fe;
  #L0d97e6.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d97ec.  v2:= temp @kind object;
  #L0d97ee.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0d97f2.  call temp:= `longValue`(v2) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L0d97f8.  v2:= temp @kind wide;
  #L0d97fa.  v0:= v0 + v2 @kind long;
  #L0d97fc.  goto L0d97da;
  #L0d97fe.  return v0 @kind wide;
}
procedure `int` `sumOfShort`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfShort:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d6de8.  v0:= "<this>" @kind object;
  #L0d6dec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d6df2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d6df8.  v2:= temp @kind object;
  #L0d6dfa.  v0:= 0I;
  #L0d6dfc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d6e02.  v1:= temp;
  #L0d6e04.  if v1 == 0 then goto L0d6e20;
  #L0d6e08.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d6e0e.  v1:= temp @kind object;
  #L0d6e10.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0d6e14.  call temp:= `shortValue`(v1) @signature `Ljava/lang/Number;.shortValue:()S` @kind virtual;
  #L0d6e1a.  v1:= temp;
  #L0d6e1c.  v0:= v0 + v1 @kind int;
  #L0d6e1e.  goto L0d6dfc;
  #L0d6e20.  return v0;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.take:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d953c.  v0:= "<this>" @kind object;
  #L0d9540.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9546.  if v2 < 0 then goto L0d954e;
  #L0d954a.  v0:= 1I;
  #L0d954c.  goto L0d9550;
  #L0d954e.  v0:= 0I;
  #L0d9550.  if v0 == 0 then goto L0d9586;
  #L0d9554.  if v2 != 0 then goto L0d9562;
  #L0d9558.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L0d955e.  v1:= temp @kind object;
  #L0d9560.  goto L0d9584;
  #L0d9562.  v0:= instanceof @variable v1 @type ^`kotlin.sequences.DropTakeSequence` @kind boolean;
  #L0d9566.  if v0 == 0 then goto L0d9578;
  #L0d956a.  v1:= (`kotlin.sequences.DropTakeSequence`) v1 @kind object;
  #L0d956e.  call temp:= `take`(v1, v2) @signature `Lkotlin/sequences/DropTakeSequence;.take:(I)Lkotlin/sequences/Sequence;` @kind interface;
  #L0d9574.  v1:= temp @kind object;
  #L0d9576.  goto L0d9584;
  #L0d9578.  v0:= new `kotlin.sequences.TakeSequence`;
  #L0d957c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0d9582.  v1:= v0 @kind object;
  #L0d9584.  return v1 @kind object;
  #L0d9586.  v1:= new `java.lang.StringBuilder`;
  #L0d958a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d9590.  v0:= "Requested element count " @kind object;
  #L0d9594.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d959a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d95a0.  v2:= " is less than zero." @kind object;
  #L0d95a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d95aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d95b0.  v1:= temp @kind object;
  #L0d95b2.  v2:= new `java.lang.IllegalArgumentException`;
  #L0d95b6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d95bc.  v1:= temp @kind object;
  #L0d95be.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d95c4.  throw v2;
}
procedure `kotlin.sequences.Sequence` `takeWhile`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.takeWhile:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d95d8.  v0:= "<this>" @kind object;
  #L0d95dc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d95e2.  v0:= "predicate" @kind object;
  #L0d95e6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d95ec.  v0:= new `kotlin.sequences.TakeWhileSequence`;
  #L0d95f0.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TakeWhileSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0d95f6.  return v0 @kind object;
}
procedure `java.util.Collection` `toCollection`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d84c8.  v0:= "<this>" @kind object;
  #L0d84cc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d84d2.  v0:= "destination" @kind object;
  #L0d84d6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d84dc.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d84e2.  v1:= temp @kind object;
  #L0d84e4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d84ea.  v0:= temp;
  #L0d84ec.  if v0 == 0 then goto L0d8500;
  #L0d84f0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d84f6.  v0:= temp @kind object;
  #L0d84f8.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d84fe.  goto L0d84e4;
  #L0d8500.  return v2 @kind object;
}
procedure `java.util.HashSet` `toHashSet`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toHashSet:(Lkotlin/sequences/Sequence;)Ljava/util/HashSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8514.  v0:= "<this>" @kind object;
  #L0d8518.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d851e.  v0:= new `java.util.HashSet`;
  #L0d8522.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L0d8528.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L0d852e.  v1:= temp @kind object;
  #L0d8530.  v1:= (`java.util.HashSet`) v1 @kind object;
  #L0d8534.  return v1 @kind object;
}
procedure `java.util.List` `toList`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8548.  v0:= "<this>" @kind object;
  #L0d854c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8552.  call temp:= `toMutableList`(v1) @signature `Lkotlin/sequences/SequencesKt;.toMutableList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L0d8558.  v1:= temp @kind object;
  #L0d855a.  call temp:= `optimizeReadOnlyList`(v1) @signature `Lkotlin/collections/CollectionsKt;.optimizeReadOnlyList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L0d8560.  v1:= temp @kind object;
  #L0d8562.  return v1 @kind object;
}
procedure `java.util.List` `toMutableList`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0d8574.  v0:= "<this>" @kind object;
  #L0d8578.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d857e.  v0:= new `java.util.ArrayList`;
  #L0d8582.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0d8588.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L0d858e.  v1:= temp @kind object;
  #L0d8590.  v1:= (`java.util.List`) v1 @kind object;
  #L0d8594.  return v1 @kind object;
}
procedure `java.util.Set` `toMutableSet`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableSet:(Lkotlin/sequences/Sequence;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d8af0.  v0:= "<this>" @kind object;
  #L0d8af4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8afa.  v0:= new `java.util.LinkedHashSet`;
  #L0d8afe.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L0d8b04.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d8b0a.  v2:= temp @kind object;
  #L0d8b0c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d8b12.  v1:= temp;
  #L0d8b14.  if v1 == 0 then goto L0d8b28;
  #L0d8b18.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d8b1e.  v1:= temp @kind object;
  #L0d8b20.  call temp:= `add`(v0, v1) @signature `Ljava/util/LinkedHashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L0d8b26.  goto L0d8b0c;
  #L0d8b28.  return v0 @kind object;
}
procedure `java.util.Set` `toSet`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toSet:(Lkotlin/sequences/Sequence;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d8b3c.  v0:= "<this>" @kind object;
  #L0d8b40.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d8b46.  v0:= new `java.util.LinkedHashSet`;
  #L0d8b4a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L0d8b50.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L0d8b56.  v1:= temp @kind object;
  #L0d8b58.  v1:= (`java.util.Set`) v1 @kind object;
  #L0d8b5c.  call temp:= `optimizeReadOnlySet`(v1) @signature `Lkotlin/collections/SetsKt;.optimizeReadOnlySet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L0d8b62.  v1:= temp @kind object;
  #L0d8b64.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9668.  v0:= "<this>" @kind object;
  #L0d966c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9672.  v0:= 0I;
  #L0d9674.  call temp:= `windowedSequence`(v1, v2, v3, v4, v0) @signature `Lkotlin/collections/SlidingWindowKt;.windowedSequence:(Lkotlin/sequences/Sequence;IIZZ)Lkotlin/sequences/Sequence;` @kind static;
  #L0d967a.  v1:= temp @kind object;
  #L0d967c.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9690.  v0:= "<this>" @kind object;
  #L0d9694.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d969a.  v0:= "transform" @kind object;
  #L0d969e.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d96a4.  v0:= 1I;
  #L0d96a6.  call temp:= `windowedSequence`(v1, v2, v3, v4, v0) @signature `Lkotlin/collections/SlidingWindowKt;.windowedSequence:(Lkotlin/sequences/Sequence;IIZZ)Lkotlin/sequences/Sequence;` @kind static;
  #L0d96ac.  v1:= temp @kind object;
  #L0d96ae.  call temp:= `map`(v1, v5) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d96b4.  v1:= temp @kind object;
  #L0d96b6.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed$default`(`kotlin.sequences.Sequence` v0 @kind object, `int` v1 , `int` v2 , `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed$default:(Lkotlin/sequences/Sequence;IIZILjava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0d9608.  v5:= v4 ^& 2;
  #L0d960c.  if v5 == 0 then goto L0d9612;
  #L0d9610.  v2:= 1I;
  #L0d9612.  v4:= v4 ^& 4;
  #L0d9616.  if v4 == 0 then goto L0d961c;
  #L0d961a.  v3:= 0I;
  #L0d961c.  call temp:= `windowed`(v0, v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9622.  v0:= temp @kind object;
  #L0d9624.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed$default`(`kotlin.sequences.Sequence` v0 @kind object, `int` v1 , `int` v2 , `boolean` v3 , `kotlin.jvm.functions.Function1` v4 @kind object, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed$default:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0d9638.  v6:= v5 ^& 2;
  #L0d963c.  if v6 == 0 then goto L0d9642;
  #L0d9640.  v2:= 1I;
  #L0d9642.  v5:= v5 ^& 4;
  #L0d9646.  if v5 == 0 then goto L0d964c;
  #L0d964a.  v3:= 0I;
  #L0d964c.  call temp:= `windowed`(v0, v1, v2, v3, v4) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9652.  v0:= temp @kind object;
  #L0d9654.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `withIndex`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.withIndex:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d96c8.  v0:= "<this>" @kind object;
  #L0d96cc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d96d2.  v0:= new `kotlin.sequences.IndexingSequence`;
  #L0d96d6.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/IndexingSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L0d96dc.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zip`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zip:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d96f0.  v0:= "<this>" @kind object;
  #L0d96f4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d96fa.  v0:= "other" @kind object;
  #L0d96fe.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9704.  v0:= new `kotlin.sequences.MergingSequence`;
  #L0d9708.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$q.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$q` @kind object;
  #L0d970c.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/MergingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d9712.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zip`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zip:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9724.  v0:= "<this>" @kind object;
  #L0d9728.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d972e.  v0:= "other" @kind object;
  #L0d9732.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9738.  v0:= "transform" @kind object;
  #L0d973c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9742.  v0:= new `kotlin.sequences.MergingSequence`;
  #L0d9746.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/sequences/MergingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L0d974c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zipWithNext`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d9760.  v0:= "<this>" @kind object;
  #L0d9764.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d976a.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$r.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$r` @kind object;
  #L0d976e.  call temp:= `zipWithNext`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9774.  v1:= temp @kind object;
  #L0d9776.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `zipWithNext`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d9788.  v0:= "<this>" @kind object;
  #L0d978c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d9792.  v0:= "transform" @kind object;
  #L0d9796.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d979c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$s`;
  #L0d97a0.  v1:= 0I;
  #L0d97a2.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$s;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0d97a8.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d97ae.  v2:= temp @kind object;
  #L0d97b0.  return v2 @kind object;
}
