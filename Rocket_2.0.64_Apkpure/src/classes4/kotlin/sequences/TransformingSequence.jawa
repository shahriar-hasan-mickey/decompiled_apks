record `kotlin.sequences.TransformingSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.TransformingSequence.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.sequences.TransformingSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.TransformingSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0da5f4.  v0:= "sequence" @kind object;
  #L0da5f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da5fe.  v0:= "transformer" @kind object;
  #L0da602.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da608.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0da60e.  v1.`kotlin.sequences.TransformingSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L0da612.  v1.`kotlin.sequences.TransformingSequence.b` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L0da616.  return @kind void;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.TransformingSequence` v0 @kind object) @signature `Lkotlin/sequences/TransformingSequence;.access$getSequence$p:(Lkotlin/sequences/TransformingSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0da5ac.  v0:= v0.`kotlin.sequences.TransformingSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0da5b0.  return v0 @kind object;
}
procedure `kotlin.jvm.functions.Function1` `access$getTransformer$p`(`kotlin.sequences.TransformingSequence` v0 @kind object) @signature `Lkotlin/sequences/TransformingSequence;.access$getTransformer$p:(Lkotlin/sequences/TransformingSequence;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0da594.  v0:= v0.`kotlin.sequences.TransformingSequence.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0da598.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatten$kotlin_stdlib`(`kotlin.sequences.TransformingSequence` v3 @kind this, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/TransformingSequence;.flatten$kotlin_stdlib:(Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0da5c4.  v0:= "iterator" @kind object;
  #L0da5c8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da5ce.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L0da5d2.  v1:= v3.`kotlin.sequences.TransformingSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0da5d6.  v2:= v3.`kotlin.sequences.TransformingSequence.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0da5da.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0da5e0.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.TransformingSequence` v1 @kind this) @signature `Lkotlin/sequences/TransformingSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0da578.  v0:= new `kotlin.sequences.TransformingSequence$iterator$1`;
  #L0da57c.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.<init>:(Lkotlin/sequences/TransformingSequence;)V` @kind direct;
  #L0da582.  return v0 @kind object;
}
