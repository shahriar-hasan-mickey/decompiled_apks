record `kotlin.sequences.TransformingIndexedSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TransformingIndexedSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TransformingIndexedSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.TransformingIndexedSequence` `kotlin.sequences.TransformingIndexedSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v0 @kind this, `kotlin.sequences.TransformingIndexedSequence` v1 @kind object) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.<init>:(Lkotlin/sequences/TransformingIndexedSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0da3d4.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.c` @type ^`kotlin.sequences.TransformingIndexedSequence` := v1 @kind object;
  #L0da3d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0da3de.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TransformingIndexedSequence;.access$getSequence$p:(Lkotlin/sequences/TransformingIndexedSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0da3e4.  v1:= temp @kind object;
  #L0da3e6.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da3ec.  v1:= temp @kind object;
  #L0da3ee.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0da3f2.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.getIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0da354.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.b` @type ^`int`;
  #L0da358.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0da3bc.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da3c0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0da334.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da338.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da33e.  v0:= temp;
  #L0da340.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0da36c.  v0:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.c` @type ^`kotlin.sequences.TransformingIndexedSequence` @kind object;
  #L0da370.  call temp:= `access$getTransformer$p`(v0) @signature `Lkotlin/sequences/TransformingIndexedSequence;.access$getTransformer$p:(Lkotlin/sequences/TransformingIndexedSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L0da376.  v0:= temp @kind object;
  #L0da378.  v1:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.b` @type ^`int`;
  #L0da37c.  v2:= v1 + 1;
  #L0da380.  v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.b` @type ^`int` := v2;
  #L0da384.  if v1 >= 0 then goto L0da38e;
  #L0da388.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0da38e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0da394.  v1:= temp @kind object;
  #L0da396.  v2:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da39a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da3a0.  v2:= temp @kind object;
  #L0da3a2.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0da3a8.  v0:= temp @kind object;
  #L0da3aa.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0da404.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0da408.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0da40c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0da412.  throw v0;
}
procedure `void` `setIndex`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.setIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0da424.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.b` @type ^`int` := v1;
  #L0da428.  return @kind void;
}
