record `kotlin.sequences.IndexingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.IndexingSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.IndexingSequence$iterator$1.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.IndexingSequence$iterator$1` v0 @kind this, `kotlin.sequences.IndexingSequence` v1 @kind object) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.<init>:(Lkotlin/sequences/IndexingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d3b44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d3b4a.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/IndexingSequence;.access$getSequence$p:(Lkotlin/sequences/IndexingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d3b50.  v1:= temp @kind object;
  #L0d3b52.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d3b58.  v1:= temp @kind object;
  #L0d3b5a.  v0.`kotlin.sequences.IndexingSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d3b5e.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.getIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3ab8.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.b` @type ^`int`;
  #L0d3abc.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3aec.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3af0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3a98.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3a9c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3aa2.  v0:= temp;
  #L0d3aa4.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0d3ad0.  call temp:= `next`(v1) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Lkotlin/collections/IndexedValue;` @kind virtual;
  #L0d3ad6.  v0:= temp @kind object;
  #L0d3ad8.  return v0 @kind object;
}
procedure `kotlin.collections.IndexedValue` `next`(`kotlin.sequences.IndexingSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Lkotlin/collections/IndexedValue;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d3b04.  v0:= new `kotlin.collections.IndexedValue`;
  #L0d3b08.  v1:= v3.`kotlin.sequences.IndexingSequence$iterator$1.b` @type ^`int`;
  #L0d3b0c.  v2:= v1 + 1;
  #L0d3b10.  v3.`kotlin.sequences.IndexingSequence$iterator$1.b` @type ^`int` := v2;
  #L0d3b14.  if v1 >= 0 then goto L0d3b1e;
  #L0d3b18.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L0d3b1e.  v2:= v3.`kotlin.sequences.IndexingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3b22.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d3b28.  v2:= temp @kind object;
  #L0d3b2a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/IndexedValue;.<init>:(ILjava/lang/Object;)V` @kind direct;
  #L0d3b30.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.IndexingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d3b70.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d3b74.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d3b78.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d3b7e.  throw v0;
}
procedure `void` `setIndex`(`kotlin.sequences.IndexingSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.setIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d3b90.  v0.`kotlin.sequences.IndexingSequence$iterator$1.b` @type ^`int` := v1;
  #L0d3b94.  return @kind void;
}
