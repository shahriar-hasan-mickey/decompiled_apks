record `kotlin.sequences.FlatteningSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.FlatteningSequence` `kotlin.sequences.FlatteningSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `kotlin.sequences.FlatteningSequence` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.<init>:(Lkotlin/sequences/FlatteningSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d3788.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` := v1 @kind object;
  #L0d378c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d3792.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FlatteningSequence;.access$getSequence$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d3798.  v1:= temp @kind object;
  #L0d379a.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d37a0.  v1:= temp @kind object;
  #L0d37a2.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d37a6.  return @kind void;
}
procedure `boolean` `b`(`kotlin.sequences.FlatteningSequence$iterator$1` v5 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d3664.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d3668.  v1:= 1I;
  #L0d366a.  v2:= 0I;
  #L0d366c.  if v0 == 0 then goto L0d3680;
  #L0d3670.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d3676.  v0:= temp;
  #L0d3678.  if v0 != 0 then goto L0d3680;
  #L0d367c.  v0:= 1I;
  #L0d367e.  goto L0d3682;
  #L0d3680.  v0:= 0I;
  #L0d3682.  if v0 == 0 then goto L0d368c;
  #L0d3686.  v0:= 0I;
  #L0d3688.  v5.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L0d368c.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d3690.  if v0 != 0 then goto L0d36ee;
  #L0d3694.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3698.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d369e.  v0:= temp;
  #L0d36a0.  if v0 != 0 then goto L0d36a6;
  #L0d36a4.  return v2;
  #L0d36a6.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d36aa.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d36b0.  v0:= temp @kind object;
  #L0d36b2.  v3:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L0d36b6.  call temp:= `access$getIterator$p`(v3) @signature `Lkotlin/sequences/FlatteningSequence;.access$getIterator$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0d36bc.  v3:= temp @kind object;
  #L0d36be.  v4:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L0d36c2.  call temp:= `access$getTransformer$p`(v4) @signature `Lkotlin/sequences/FlatteningSequence;.access$getTransformer$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0d36c8.  v4:= temp @kind object;
  #L0d36ca.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d36d0.  v0:= temp @kind object;
  #L0d36d2.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0d36d8.  v0:= temp @kind object;
  #L0d36da.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L0d36de.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d36e4.  v3:= temp;
  #L0d36e6.  if v3 == 0 then goto L0d368c;
  #L0d36ea.  v5.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L0d36ee.  return v1;
}
procedure `java.util.Iterator` `getItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getItemIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3758.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d375c.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d3770.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d3774.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3700.  call temp:= `b`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @kind direct;
  #L0d3706.  v0:= temp;
  #L0d3708.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d371c.  call temp:= `b`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @kind direct;
  #L0d3722.  v0:= temp;
  #L0d3724.  if v0 == 0 then goto L0d373c;
  #L0d3728.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L0d372c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d3732.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d3738.  v0:= temp @kind object;
  #L0d373a.  return v0 @kind object;
  #L0d373c.  v0:= new `java.util.NoSuchElementException`;
  #L0d3740.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d3746.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FlatteningSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d37b8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d37bc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d37c0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d37c6.  throw v0;
}
procedure `void` `setItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.setItemIterator:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d37d8.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d37dc.  return @kind void;
}
