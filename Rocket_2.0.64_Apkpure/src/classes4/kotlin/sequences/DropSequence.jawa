record `kotlin.sequences.DropSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.DropSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.DropSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `int` v3 ) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0d3080.  v0:= "sequence" @kind object;
  #L0d3084.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d308a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d3090.  v1.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L0d3094.  v1.`kotlin.sequences.DropSequence.b` @type ^`int` := v3;
  #L0d3098.  if v3 < 0 then goto L0d30a0;
  #L0d309c.  v2:= 1I;
  #L0d309e.  goto L0d30a2;
  #L0d30a0.  v2:= 0I;
  #L0d30a2.  if v2 == 0 then goto L0d30a8;
  #L0d30a6.  return @kind void;
  #L0d30a8.  v2:= new `java.lang.StringBuilder`;
  #L0d30ac.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d30b2.  v0:= "count must be non-negative, but was " @kind object;
  #L0d30b6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d30bc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d30c2.  v3:= 46I;
  #L0d30c6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d30cc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d30d2.  v2:= temp @kind object;
  #L0d30d4.  v3:= new `java.lang.IllegalArgumentException`;
  #L0d30d8.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d30de.  v2:= temp @kind object;
  #L0d30e0.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d30e6.  throw v3;
}
procedure `int` `access$getCount$p`(`kotlin.sequences.DropSequence` v0 @kind object) @signature `Lkotlin/sequences/DropSequence;.access$getCount$p:(Lkotlin/sequences/DropSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d2fc0.  v0:= v0.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L0d2fc4.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.DropSequence` v0 @kind object) @signature `Lkotlin/sequences/DropSequence;.access$getSequence$p:(Lkotlin/sequences/DropSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d2ff4.  v0:= v0.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d2ff8.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.DropSequence` v2 @kind this, `int` v3 ) @signature `Lkotlin/sequences/DropSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d300c.  v0:= v2.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L0d3010.  v0:= v0 + v3 @kind int;
  #L0d3012.  if v0 >= 0 then goto L0d3022;
  #L0d3016.  v0:= new `kotlin.sequences.DropSequence`;
  #L0d301a.  call `<init>`(v0, v2, v3) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0d3020.  goto L0d3032;
  #L0d3022.  v3:= new `kotlin.sequences.DropSequence`;
  #L0d3026.  v1:= v2.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d302a.  call `<init>`(v3, v1, v0) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0d3030.  v0:= v3 @kind object;
  #L0d3032.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.DropSequence` v1 @kind this) @signature `Lkotlin/sequences/DropSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2fd8.  v0:= new `kotlin.sequences.DropSequence$iterator$1`;
  #L0d2fdc.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.<init>:(Lkotlin/sequences/DropSequence;)V` @kind direct;
  #L0d2fe2.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.DropSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/DropSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d3044.  v0:= v3.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L0d3048.  v1:= v0 + v4 @kind int;
  #L0d304c.  if v1 >= 0 then goto L0d305c;
  #L0d3050.  v0:= new `kotlin.sequences.TakeSequence`;
  #L0d3054.  call `<init>`(v0, v3, v4) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L0d305a.  goto L0d306c;
  #L0d305c.  v4:= new `kotlin.sequences.SubSequence`;
  #L0d3060.  v2:= v3.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L0d3064.  call `<init>`(v4, v2, v0, v1) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L0d306a.  v0:= v4 @kind object;
  #L0d306c.  return v0 @kind object;
}
