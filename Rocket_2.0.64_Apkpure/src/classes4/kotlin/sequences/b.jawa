record `kotlin.sequences.b` @kind class @AccessFlag FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
}
global `kotlin.sequences.b` `@@kotlin.sequences.b.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/sequences/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0d33b8.  v0:= new `kotlin.sequences.b`;
  #L0d33bc.  call `<init>`(v0) @signature `Lkotlin/sequences/b;.<init>:()V` @kind direct;
  #L0d33c2.  `@@kotlin.sequences.b.a` @type ^`kotlin.sequences.b` := v0 @kind object;
  #L0d33c6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.sequences.b` v0 @kind this) @signature `Lkotlin/sequences/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0d33d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d33de.  return @kind void;
}
procedure `kotlin.sequences.b` `a`(`kotlin.sequences.b` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/b;.a:(I)Lkotlin/sequences/b;` @AccessFlag PUBLIC {
    temp;

  #L0d3350.  v1:= `@@kotlin.sequences.b.a` @type ^`kotlin.sequences.b` @kind object;
  #L0d3354.  return v1 @kind object;
}
procedure `kotlin.sequences.b` `b`(`kotlin.sequences.b` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/b;.b:(I)Lkotlin/sequences/b;` @AccessFlag PUBLIC {
    temp;

  #L0d3368.  v1:= `@@kotlin.sequences.b.a` @type ^`kotlin.sequences.b` @kind object;
  #L0d336c.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.b` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/b;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0d3380.  call temp:= `a`(v0, v1) @signature `Lkotlin/sequences/b;.a:(I)Lkotlin/sequences/b;` @kind virtual;
  #L0d3386.  v1:= temp @kind object;
  #L0d3388.  return v1 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.b` v1 @kind this) @signature `Lkotlin/sequences/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d3338.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L0d333c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.b` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/b;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0d339c.  call temp:= `b`(v0, v1) @signature `Lkotlin/sequences/b;.b:(I)Lkotlin/sequences/b;` @kind virtual;
  #L0d33a2.  v1:= temp @kind object;
  #L0d33a4.  return v1 @kind object;
}
