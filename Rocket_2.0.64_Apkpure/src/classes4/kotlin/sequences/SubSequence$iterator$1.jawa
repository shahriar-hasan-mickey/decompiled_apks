record `kotlin.sequences.SubSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.SubSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.SubSequence` `kotlin.sequences.SubSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `kotlin.sequences.SubSequence` v1 @kind object) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0d9c1c.  v0.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` := v1 @kind object;
  #L0d9c20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d9c26.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d9c2c.  v1:= temp @kind object;
  #L0d9c2e.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d9c34.  v1:= temp @kind object;
  #L0d9c36.  v0.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0d9c3a.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0d9c4c.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9c50.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L0d9c54.  call temp:= `access$getStartIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L0d9c5a.  v1:= temp;
  #L0d9c5c.  if v0 >= v1 then goto L0d9c88;
  #L0d9c60.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d9c64.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d9c6a.  v0:= temp;
  #L0d9c6c.  if v0 == 0 then goto L0d9c88;
  #L0d9c70.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d9c74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d9c7a.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9c7e.  v0:= v0 + 1;
  #L0d9c82.  v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v0;
  #L0d9c86.  goto L0d9c4c;
  #L0d9c88.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d9c04.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d9c08.  return v0 @kind object;
}
procedure `int` `getPosition`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getPosition:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d9b9c.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9ba0.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d9b58.  call `b`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @kind direct;
  #L0d9b5e.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9b62.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L0d9b66.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L0d9b6c.  v1:= temp;
  #L0d9b6e.  if v0 >= v1 then goto L0d9b86;
  #L0d9b72.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d9b76.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d9b7c.  v0:= temp;
  #L0d9b7e.  if v0 == 0 then goto L0d9b86;
  #L0d9b82.  v0:= 1I;
  #L0d9b84.  goto L0d9b88;
  #L0d9b86.  v0:= 0I;
  #L0d9b88.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d9bb4.  call `b`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @kind direct;
  #L0d9bba.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9bbe.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L0d9bc2.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L0d9bc8.  v1:= temp;
  #L0d9bca.  if v0 >= v1 then goto L0d9be8;
  #L0d9bce.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L0d9bd2.  v0:= v0 + 1;
  #L0d9bd6.  v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v0;
  #L0d9bda.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0d9bde.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d9be4.  v0:= temp @kind object;
  #L0d9be6.  return v0 @kind object;
  #L0d9be8.  v0:= new `java.util.NoSuchElementException`;
  #L0d9bec.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0d9bf2.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d9c9c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d9ca0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d9ca4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d9caa.  throw v0;
}
procedure `void` `setPosition`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/SubSequence$iterator$1;.setPosition:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0d9cbc.  v0.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v1;
  #L0d9cc0.  return @kind void;
}
