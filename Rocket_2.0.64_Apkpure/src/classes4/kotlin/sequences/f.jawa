record `kotlin.sequences.f` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.sequences.f` v0 @kind this) @signature `Lkotlin/sequences/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0da794.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0da79a.  return @kind void;
}
procedure `int` `sumOfUByte`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/f;.sumOfUByte:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0da628.  v0:= "<this>" @kind object;
  #L0da62c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da632.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da638.  v2:= temp @kind object;
  #L0da63a.  v0:= 0I;
  #L0da63c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da642.  v1:= temp;
  #L0da644.  if v1 == 0 then goto L0da674;
  #L0da648.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da64e.  v1:= temp @kind object;
  #L0da650.  v1:= (`kotlin.UByte`) v1 @kind object;
  #L0da654.  call temp:= `unbox-impl`(v1) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L0da65a.  v1:= temp;
  #L0da65c.  v1:= v1 ^& 255;
  #L0da660.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0da666.  v1:= temp;
  #L0da668.  v0:= v0 + v1 @kind int;
  #L0da66a.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0da670.  v0:= temp;
  #L0da672.  goto L0da63c;
  #L0da674.  return v0;
}
procedure `int` `sumOfUInt`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/f;.sumOfUInt:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0da688.  v0:= "<this>" @kind object;
  #L0da68c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da692.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da698.  v2:= temp @kind object;
  #L0da69a.  v0:= 0I;
  #L0da69c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da6a2.  v1:= temp;
  #L0da6a4.  if v1 == 0 then goto L0da6c8;
  #L0da6a8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da6ae.  v1:= temp @kind object;
  #L0da6b0.  v1:= (`kotlin.UInt`) v1 @kind object;
  #L0da6b4.  call temp:= `unbox-impl`(v1) @signature `Lkotlin/UInt;.unbox-impl:()I` @kind virtual;
  #L0da6ba.  v1:= temp;
  #L0da6bc.  v0:= v0 + v1 @kind int;
  #L0da6be.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0da6c4.  v0:= temp;
  #L0da6c6.  goto L0da69c;
  #L0da6c8.  return v0;
}
procedure `long` `sumOfULong`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/f;.sumOfULong:(Lkotlin/sequences/Sequence;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0da740.  v0:= "<this>" @kind object;
  #L0da744.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da74a.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da750.  v4:= temp @kind object;
  #L0da752.  v0:= 0L;
  #L0da756.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da75c.  v2:= temp;
  #L0da75e.  if v2 == 0 then goto L0da782;
  #L0da762.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da768.  v2:= temp @kind object;
  #L0da76a.  v2:= (`kotlin.ULong`) v2 @kind object;
  #L0da76e.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/ULong;.unbox-impl:()J` @kind virtual;
  #L0da774.  v2:= temp @kind wide;
  #L0da776.  v0:= v0 + v2 @kind long;
  #L0da778.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0da77e.  v0:= temp @kind wide;
  #L0da780.  goto L0da756;
  #L0da782.  return v0 @kind wide;
}
procedure `int` `sumOfUShort`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/f;.sumOfUShort:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0da6dc.  v0:= "<this>" @kind object;
  #L0da6e0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0da6e6.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da6ec.  v3:= temp @kind object;
  #L0da6ee.  v0:= 0I;
  #L0da6f0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da6f6.  v1:= temp;
  #L0da6f8.  if v1 == 0 then goto L0da72c;
  #L0da6fc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da702.  v1:= temp @kind object;
  #L0da704.  v1:= (`kotlin.UShort`) v1 @kind object;
  #L0da708.  call temp:= `unbox-impl`(v1) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L0da70e.  v1:= temp;
  #L0da710.  v2:= 65535I;
  #L0da716.  v1:= v1 ^& v2 @kind int;
  #L0da718.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0da71e.  v1:= temp;
  #L0da720.  v0:= v0 + v1 @kind int;
  #L0da722.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0da728.  v0:= temp;
  #L0da72a.  goto L0da6f0;
  #L0da72c.  return v0;
}
