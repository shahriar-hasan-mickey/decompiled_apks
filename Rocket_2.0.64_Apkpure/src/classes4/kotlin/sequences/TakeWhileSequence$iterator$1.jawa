record `kotlin.sequences.TakeWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TakeWhileSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TakeWhileSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.TakeWhileSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.TakeWhileSequence` `kotlin.sequences.TakeWhileSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.TakeWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0da1c8.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.d` @type ^`kotlin.sequences.TakeWhileSequence` := v1 @kind object;
  #L0da1cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0da1d2.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getSequence$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L0da1d8.  v1:= temp @kind object;
  #L0da1da.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0da1e0.  v1:= temp @kind object;
  #L0da1e2.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L0da1e6.  v1:= -1I;
  #L0da1e8.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0da1ec.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0da200.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da204.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0da20a.  v0:= temp;
  #L0da20c.  if v0 == 0 then goto L0da24c;
  #L0da210.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da214.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0da21a.  v0:= temp @kind object;
  #L0da21c.  v1:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.d` @type ^`kotlin.sequences.TakeWhileSequence` @kind object;
  #L0da220.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0da226.  v1:= temp @kind object;
  #L0da228.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0da22e.  v1:= temp @kind object;
  #L0da230.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L0da234.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0da23a.  v1:= temp;
  #L0da23c.  if v1 == 0 then goto L0da24c;
  #L0da240.  v1:= 1I;
  #L0da242.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0da246.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L0da24a.  return @kind void;
  #L0da24c.  v0:= 0I;
  #L0da24e.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L0da252.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0da1b0.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L0da1b4.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0da154.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0da158.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0da13c.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L0da140.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0da10c.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L0da110.  v1:= -1I;
  #L0da112.  if v0 != v1 then goto L0da11c;
  #L0da116.  call `b`(v2) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @kind direct;
  #L0da11c.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L0da120.  v1:= 1I;
  #L0da122.  if v0 != v1 then goto L0da128;
  #L0da126.  goto L0da12a;
  #L0da128.  v1:= 0I;
  #L0da12a.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TakeWhileSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0da16c.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L0da170.  v1:= -1I;
  #L0da172.  if v0 != v1 then goto L0da17c;
  #L0da176.  call `b`(v3) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @kind direct;
  #L0da17c.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L0da180.  if v0 == 0 then goto L0da194;
  #L0da184.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L0da188.  v2:= 0I;
  #L0da18a.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L0da18e.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0da192.  return v0 @kind object;
  #L0da194.  v0:= new `java.util.NoSuchElementException`;
  #L0da198.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0da19e.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0da264.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0da268.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0da26c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0da272.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0da284.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L0da288.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0da29c.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L0da2a0.  return @kind void;
}
