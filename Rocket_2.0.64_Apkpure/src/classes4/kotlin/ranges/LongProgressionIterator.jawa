record `kotlin.ranges.LongProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.LongIterator` @kind class {
  `long` `kotlin.ranges.LongProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgressionIterator.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.LongProgressionIterator.c` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.LongProgressionIterator.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgressionIterator` v5 @kind this, `long` v6 , `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd0dc.  call `<init>`(v5) @signature `Lkotlin/collections/LongIterator;.<init>:()V` @kind direct;
  #L0cd0e2.  v5.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` := v10 @kind wide;
  #L0cd0e6.  v5.`kotlin.ranges.LongProgressionIterator.b` @type ^`long` := v8 @kind wide;
  #L0cd0ea.  v0:= 1I;
  #L0cd0ec.  v1:= 0I;
  #L0cd0ee.  v2:= 0L;
  #L0cd0f2.  v4:= lcmp(v10, v2);
  #L0cd0f6.  v10:= lcmp(v6, v8);
  #L0cd0fa.  if v4 <= 0 then goto L0cd104;
  #L0cd0fe.  if v10 > 0 then goto L0cd10a;
  #L0cd102.  goto L0cd10c;
  #L0cd104.  if v10 < 0 then goto L0cd10a;
  #L0cd108.  goto L0cd10c;
  #L0cd10a.  v0:= 0I;
  #L0cd10c.  v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`boolean` := v0 @kind boolean;
  #L0cd110.  if v0 == 0 then goto L0cd116;
  #L0cd114.  goto L0cd118;
  #L0cd116.  v6:= v8 @kind wide;
  #L0cd118.  v5.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` := v6 @kind wide;
  #L0cd11c.  return @kind void;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0cd07c.  v0:= v2.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` @kind wide;
  #L0cd080.  return v0 @kind wide;
}
procedure `boolean` `hasNext`(`kotlin.ranges.LongProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cd064.  v0:= v1.`kotlin.ranges.LongProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cd068.  return v0;
}
procedure `long` `nextLong`(`kotlin.ranges.LongProgressionIterator` v5 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd094.  v0:= v5.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` @kind wide;
  #L0cd098.  v2:= v5.`kotlin.ranges.LongProgressionIterator.b` @type ^`long` @kind wide;
  #L0cd09c.  v4:= lcmp(v0, v2);
  #L0cd0a0.  if v4 != 0 then goto L0cd0c0;
  #L0cd0a4.  v2:= v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cd0a8.  if v2 == 0 then goto L0cd0b4;
  #L0cd0ac.  v2:= 0I;
  #L0cd0ae.  v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`boolean` := v2 @kind boolean;
  #L0cd0b2.  goto L0cd0ca;
  #L0cd0b4.  v0:= new `java.util.NoSuchElementException`;
  #L0cd0b8.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0cd0be.  throw v0;
  #L0cd0c0.  v2:= v5.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` @kind wide;
  #L0cd0c4.  v2:= v2 + v0 @kind long;
  #L0cd0c6.  v5.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` := v2 @kind wide;
  #L0cd0ca.  return v0 @kind wide;
}
