record `kotlin.ranges.LongRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.LongProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.LongRange$Companion` `@@kotlin.ranges.LongRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.LongRange` `@@kotlin.ranges.LongRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd680.  v0:= new `kotlin.ranges.LongRange$Companion`;
  #L0cd684.  v1:= 0I;
  #L0cd686.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cd68c.  `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` := v0 @kind object;
  #L0cd690.  v0:= new `kotlin.ranges.LongRange`;
  #L0cd694.  v1:= 1L;
  #L0cd698.  v3:= 0L;
  #L0cd69c.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L0cd6a2.  `@@kotlin.ranges.LongRange.d` @type ^`kotlin.ranges.LongRange` := v0 @kind object;
  #L0cd6a6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongRange` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cd6b8.  v5:= 1L;
  #L0cd6bc.  v0:= v7 @kind object;
  #L0cd6be.  v1:= v8 @kind wide;
  #L0cd6c0.  v3:= v10 @kind wide;
  #L0cd6c2.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @kind direct;
  #L0cd6c8.  return @kind void;
}
procedure `kotlin.ranges.LongRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/LongRange;.access$getEMPTY$cp:()Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0cd668.  v0:= `@@kotlin.ranges.LongRange.d` @type ^`kotlin.ranges.LongRange` @kind object;
  #L0cd66c.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v3 @kind this, `long` v4 ) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cd464.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd46a.  v0:= temp @kind wide;
  #L0cd46c.  v2:= lcmp(v0, v4);
  #L0cd470.  if v2 > 0 then goto L0cd488;
  #L0cd474.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd47a.  v0:= temp @kind wide;
  #L0cd47c.  v2:= lcmp(v4, v0);
  #L0cd480.  if v2 > 0 then goto L0cd488;
  #L0cd484.  v4:= 1I;
  #L0cd486.  goto L0cd48a;
  #L0cd488.  v4:= 0I;
  #L0cd48a.  return v4;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/LongRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L0cd43c.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0cd440.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L0cd446.  v0:= temp @kind wide;
  #L0cd448.  call temp:= `contains`(v2, v0) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @kind virtual;
  #L0cd44e.  v3:= temp;
  #L0cd450.  return v3;
}
procedure `boolean` `equals`(`kotlin.ranges.LongRange` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd49c.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongRange` @kind boolean;
  #L0cd4a0.  if v0 == 0 then goto L0cd4fa;
  #L0cd4a4.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L0cd4aa.  v0:= temp;
  #L0cd4ac.  if v0 == 0 then goto L0cd4c2;
  #L0cd4b0.  v0:= v6 @kind object;
  #L0cd4b2.  v0:= (`kotlin.ranges.LongRange`) v0 @kind object;
  #L0cd4b6.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L0cd4bc.  v0:= temp;
  #L0cd4be.  if v0 != 0 then goto L0cd4f6;
  #L0cd4c2.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd4c8.  v0:= temp @kind wide;
  #L0cd4ca.  v6:= (`kotlin.ranges.LongRange`) v6 @kind object;
  #L0cd4ce.  call temp:= `getFirst`(v6) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd4d4.  v2:= temp @kind wide;
  #L0cd4d6.  v4:= lcmp(v0, v2);
  #L0cd4da.  if v4 != 0 then goto L0cd4fa;
  #L0cd4de.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd4e4.  v0:= temp @kind wide;
  #L0cd4e6.  call temp:= `getLast`(v6) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd4ec.  v2:= temp @kind wide;
  #L0cd4ee.  v6:= lcmp(v0, v2);
  #L0cd4f2.  if v6 != 0 then goto L0cd4fa;
  #L0cd4f6.  v6:= 1I;
  #L0cd4f8.  goto L0cd4fc;
  #L0cd4fa.  v6:= 0I;
  #L0cd4fc.  return v6;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cd59c.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @kind virtual;
  #L0cd5a2.  v0:= temp @kind object;
  #L0cd5a4.  return v0 @kind object;
}
procedure `java.lang.Long` `getEndInclusive`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cd5d4.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd5da.  v0:= temp @kind wide;
  #L0cd5dc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L0cd5e2.  v0:= temp @kind object;
  #L0cd5e4.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cd5b8.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @kind virtual;
  #L0cd5be.  v0:= temp @kind object;
  #L0cd5c0.  return v0 @kind object;
}
procedure `java.lang.Long` `getStart`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cd5f8.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd5fe.  v0:= temp @kind wide;
  #L0cd600.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L0cd606.  v0:= temp @kind object;
  #L0cd608.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.LongRange` v7 @kind this) @signature `Lkotlin/ranges/LongRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cd540.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L0cd546.  v0:= temp;
  #L0cd548.  if v0 == 0 then goto L0cd550;
  #L0cd54c.  v0:= -1I;
  #L0cd54e.  goto L0cd58a;
  #L0cd550.  v0:= 31I;
  #L0cd554.  v0:= (`long`) v0 @kind i2l;
  #L0cd556.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd55c.  v2:= temp @kind wide;
  #L0cd55e.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd564.  v4:= temp @kind wide;
  #L0cd566.  v6:= 32I;
  #L0cd56a.  v4:= v4 ^>> v6 @kind long;
  #L0cd56c.  v2:= v2 ^~ v4 @kind long;
  #L0cd56e.  v0:= v0 * v2 @kind long;
  #L0cd572.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd578.  v2:= temp @kind wide;
  #L0cd57a.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd580.  v4:= temp @kind wide;
  #L0cd582.  v4:= v4 ^>> v6 @kind long;
  #L0cd584.  v2:= v2 ^~ v4 @kind long;
  #L0cd586.  v0:= v0 + v2 @kind long;
  #L0cd588.  v0:= (`int`) v0 @kind l2i;
  #L0cd58a.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongRange` v5 @kind this) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd510.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd516.  v0:= temp @kind wide;
  #L0cd518.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd51e.  v2:= temp @kind wide;
  #L0cd520.  v4:= lcmp(v0, v2);
  #L0cd524.  if v4 <= 0 then goto L0cd52c;
  #L0cd528.  v0:= 1I;
  #L0cd52a.  goto L0cd52e;
  #L0cd52c.  v0:= 0I;
  #L0cd52e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongRange` v3 @kind this) @signature `Lkotlin/ranges/LongRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cd61c.  v0:= new `java.lang.StringBuilder`;
  #L0cd620.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cd626.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cd62c.  v1:= temp @kind wide;
  #L0cd62e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd634.  v1:= ".." @kind object;
  #L0cd638.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd63e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cd644.  v1:= temp @kind wide;
  #L0cd646.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd64c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cd652.  v0:= temp @kind object;
  #L0cd654.  return v0 @kind object;
}
