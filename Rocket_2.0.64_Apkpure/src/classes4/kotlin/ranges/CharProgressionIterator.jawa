record `kotlin.ranges.CharProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.CharIterator` @kind class {
  `int` `kotlin.ranges.CharProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.CharProgressionIterator.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.CharProgressionIterator.c` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.CharProgressionIterator.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.CharProgressionIterator` v2 @kind this, `char` v3 , `char` v4 , `int` v5 ) @signature `Lkotlin/ranges/CharProgressionIterator;.<init>:(CCI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cbca4.  call `<init>`(v2) @signature `Lkotlin/collections/CharIterator;.<init>:()V` @kind direct;
  #L0cbcaa.  v2.`kotlin.ranges.CharProgressionIterator.a` @type ^`int` := v5;
  #L0cbcae.  v2.`kotlin.ranges.CharProgressionIterator.b` @type ^`int` := v4;
  #L0cbcb2.  v0:= 1I;
  #L0cbcb4.  v1:= 0I;
  #L0cbcb6.  if v5 <= 0 then goto L0cbcc8;
  #L0cbcba.  call temp:= `compare`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L0cbcc0.  v5:= temp;
  #L0cbcc2.  if v5 > 0 then goto L0cbcd6;
  #L0cbcc6.  goto L0cbcd8;
  #L0cbcc8.  call temp:= `compare`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L0cbcce.  v5:= temp;
  #L0cbcd0.  if v5 < 0 then goto L0cbcd6;
  #L0cbcd4.  goto L0cbcd8;
  #L0cbcd6.  v0:= 0I;
  #L0cbcd8.  v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`boolean` := v0 @kind boolean;
  #L0cbcdc.  if v0 == 0 then goto L0cbce2;
  #L0cbce0.  goto L0cbce4;
  #L0cbce2.  v3:= v4;
  #L0cbce4.  v2.`kotlin.ranges.CharProgressionIterator.d` @type ^`int` := v3;
  #L0cbce8.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0cbc8c.  v0:= v1.`kotlin.ranges.CharProgressionIterator.a` @type ^`int`;
  #L0cbc90.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbc2c.  v0:= v1.`kotlin.ranges.CharProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cbc30.  return v0;
}
procedure `char` `nextChar`(`kotlin.ranges.CharProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.nextChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cbc44.  v0:= v2.`kotlin.ranges.CharProgressionIterator.d` @type ^`int`;
  #L0cbc48.  v1:= v2.`kotlin.ranges.CharProgressionIterator.b` @type ^`int`;
  #L0cbc4c.  if v0 != v1 then goto L0cbc6c;
  #L0cbc50.  v1:= v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cbc54.  if v1 == 0 then goto L0cbc60;
  #L0cbc58.  v1:= 0I;
  #L0cbc5a.  v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`boolean` := v1 @kind boolean;
  #L0cbc5e.  goto L0cbc76;
  #L0cbc60.  v0:= new `java.util.NoSuchElementException`;
  #L0cbc64.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0cbc6a.  throw v0;
  #L0cbc6c.  v1:= v2.`kotlin.ranges.CharProgressionIterator.a` @type ^`int`;
  #L0cbc70.  v1:= v1 + v0 @kind int;
  #L0cbc72.  v2.`kotlin.ranges.CharProgressionIterator.d` @type ^`int` := v1;
  #L0cbc76.  v0:= (`char`) v0 @kind i2c;
  #L0cbc78.  return v0;
}
