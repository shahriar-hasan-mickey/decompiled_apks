record `kotlin.ranges.ClosedFloatingPointRange$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedFloatingPointRange` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/ClosedFloatingPointRange$DefaultImpls;.contains:(Lkotlin/ranges/ClosedFloatingPointRange;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0cc73c.  v0:= "value" @kind object;
  #L0cc740.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cc746.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L0cc74c.  v0:= temp @kind object;
  #L0cc74e.  call temp:= `lessThanOrEquals`(v1, v0, v2) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L0cc754.  v0:= temp;
  #L0cc756.  if v0 == 0 then goto L0cc772;
  #L0cc75a.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L0cc760.  v0:= temp @kind object;
  #L0cc762.  call temp:= `lessThanOrEquals`(v1, v2, v0) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L0cc768.  v1:= temp;
  #L0cc76a.  if v1 == 0 then goto L0cc772;
  #L0cc76e.  v1:= 1I;
  #L0cc770.  goto L0cc774;
  #L0cc772.  v1:= 0I;
  #L0cc774.  return v1;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ClosedFloatingPointRange` v2 @kind object) @signature `Lkotlin/ranges/ClosedFloatingPointRange$DefaultImpls;.isEmpty:(Lkotlin/ranges/ClosedFloatingPointRange;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0cc788.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L0cc78e.  v0:= temp @kind object;
  #L0cc790.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L0cc796.  v1:= temp @kind object;
  #L0cc798.  call temp:= `lessThanOrEquals`(v2, v0, v1) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L0cc79e.  v2:= temp;
  #L0cc7a0.  v2:= v2 ^~ 1;
  #L0cc7a4.  return v2;
}
