record `kotlin.ranges.f` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.f.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.f.b` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.f.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.f.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.f` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/ranges/f;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0cf8e0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cf8e6.  v3.`kotlin.ranges.f.a` @type ^`int` := v5;
  #L0cf8ea.  v0:= 1I;
  #L0cf8ec.  v1:= 0I;
  #L0cf8ee.  call temp:= `uintCompare`(v4, v5) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0cf8f4.  v2:= temp;
  #L0cf8f6.  if v6 <= 0 then goto L0cf900;
  #L0cf8fa.  if v2 > 0 then goto L0cf906;
  #L0cf8fe.  goto L0cf908;
  #L0cf900.  if v2 < 0 then goto L0cf906;
  #L0cf904.  goto L0cf908;
  #L0cf906.  v0:= 0I;
  #L0cf908.  v3.`kotlin.ranges.f.b` @type ^`boolean` := v0 @kind boolean;
  #L0cf90c.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0cf912.  v6:= temp;
  #L0cf914.  v3.`kotlin.ranges.f.c` @type ^`int` := v6;
  #L0cf918.  v6:= v3.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L0cf91c.  if v6 == 0 then goto L0cf922;
  #L0cf920.  goto L0cf924;
  #L0cf922.  v4:= v5;
  #L0cf924.  v3.`kotlin.ranges.f.d` @type ^`int` := v4;
  #L0cf928.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.f` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/ranges/f;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0cf93c.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/f;.<init>:(III)V` @kind direct;
  #L0cf942.  return @kind void;
}
procedure `int` `b`(`kotlin.ranges.f` v2 @kind this) @signature `Lkotlin/ranges/f;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cf870.  v0:= v2.`kotlin.ranges.f.d` @type ^`int`;
  #L0cf874.  v1:= v2.`kotlin.ranges.f.a` @type ^`int`;
  #L0cf878.  if v0 != v1 then goto L0cf898;
  #L0cf87c.  v1:= v2.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L0cf880.  if v1 == 0 then goto L0cf88c;
  #L0cf884.  v1:= 0I;
  #L0cf886.  v2.`kotlin.ranges.f.b` @type ^`boolean` := v1 @kind boolean;
  #L0cf88a.  goto L0cf8aa;
  #L0cf88c.  v0:= new `java.util.NoSuchElementException`;
  #L0cf890.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0cf896.  throw v0;
  #L0cf898.  v1:= v2.`kotlin.ranges.f.c` @type ^`int`;
  #L0cf89c.  v1:= v1 + v0 @kind int;
  #L0cf89e.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0cf8a4.  v1:= temp;
  #L0cf8a6.  v2.`kotlin.ranges.f.d` @type ^`int` := v1;
  #L0cf8aa.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cf858.  v0:= v1.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L0cf85c.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cf8bc.  call temp:= `b`(v1) @signature `Lkotlin/ranges/f;.b:()I` @kind virtual;
  #L0cf8c2.  v0:= temp;
  #L0cf8c4.  call temp:= `box-impl`(v0) @signature `Lkotlin/UInt;.box-impl:(I)Lkotlin/UInt;` @kind static;
  #L0cf8ca.  v0:= temp @kind object;
  #L0cf8cc.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.ranges.f` v2 @kind this) @signature `Lkotlin/ranges/f;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cf954.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0cf958.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0cf95c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cf962.  throw v0;
}
