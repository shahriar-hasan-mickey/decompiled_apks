record `kotlin.ranges.a` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `double` `kotlin.ranges.a.a` @AccessFlag PRIVATE_FINAL;
  `double` `kotlin.ranges.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.a` v0 @kind this, `double` v1 , `double` v3 ) @signature `Lkotlin/ranges/a;.<init>:(DD)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cc4a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cc4aa.  v0.`kotlin.ranges.a.a` @type ^`double` := v1 @kind wide;
  #L0cc4ae.  v0.`kotlin.ranges.a.b` @type ^`double` := v3 @kind wide;
  #L0cc4b2.  return @kind void;
}
procedure `boolean` `a`(`kotlin.ranges.a` v3 @kind this, `double` v4 ) @signature `Lkotlin/ranges/a;.a:(D)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cc24c.  v0:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc250.  v2:= dcmpl(v4, v0);
  #L0cc254.  if v2 < 0 then goto L0cc268;
  #L0cc258.  v0:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc25c.  v2:= dcmpg(v4, v0);
  #L0cc260.  if v2 > 0 then goto L0cc268;
  #L0cc264.  v4:= 1I;
  #L0cc266.  goto L0cc26a;
  #L0cc268.  v4:= 0I;
  #L0cc26a.  return v4;
}
procedure `java.lang.Double` `b`(`kotlin.ranges.a` v2 @kind this) @signature `Lkotlin/ranges/a;.b:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc420.  v0:= v2.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc424.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cc42a.  v0:= temp @kind object;
  #L0cc42c.  return v0 @kind object;
}
procedure `java.lang.Double` `c`(`kotlin.ranges.a` v2 @kind this) @signature `Lkotlin/ranges/a;.c:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc440.  v0:= v2.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc444.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cc44a.  v0:= temp @kind object;
  #L0cc44c.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.a` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/a;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L0cc27c.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0cc280.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0cc286.  v0:= temp @kind wide;
  #L0cc288.  call temp:= `a`(v2, v0) @signature `Lkotlin/ranges/a;.a:(D)Z` @kind virtual;
  #L0cc28e.  v3:= temp;
  #L0cc290.  return v3;
}
procedure `boolean` `d`(`kotlin.ranges.a` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lkotlin/ranges/a;.d:(DD)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc344.  v0:= dcmpg(v2, v4);
  #L0cc348.  if v0 > 0 then goto L0cc350;
  #L0cc34c.  v2:= 1I;
  #L0cc34e.  goto L0cc352;
  #L0cc350.  v2:= 0I;
  #L0cc352.  return v2;
}
procedure `boolean` `equals`(`kotlin.ranges.a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/ranges/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cc2a4.  v0:= instanceof @variable v8 @type ^`kotlin.ranges.a` @kind boolean;
  #L0cc2a8.  v1:= 1I;
  #L0cc2aa.  v2:= 0I;
  #L0cc2ac.  if v0 == 0 then goto L0cc308;
  #L0cc2b0.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L0cc2b6.  v0:= temp;
  #L0cc2b8.  if v0 == 0 then goto L0cc2ce;
  #L0cc2bc.  v0:= v8 @kind object;
  #L0cc2be.  v0:= (`kotlin.ranges.a`) v0 @kind object;
  #L0cc2c2.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L0cc2c8.  v0:= temp;
  #L0cc2ca.  if v0 != 0 then goto L0cc30a;
  #L0cc2ce.  v3:= v7.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc2d2.  v8:= (`kotlin.ranges.a`) v8 @kind object;
  #L0cc2d6.  v5:= v8.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc2da.  v0:= dcmpg(v3, v5);
  #L0cc2de.  if v0 != 0 then goto L0cc2e6;
  #L0cc2e2.  v0:= 1I;
  #L0cc2e4.  goto L0cc2e8;
  #L0cc2e6.  v0:= 0I;
  #L0cc2e8.  if v0 == 0 then goto L0cc308;
  #L0cc2ec.  v3:= v7.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc2f0.  v5:= v8.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc2f4.  v8:= dcmpg(v3, v5);
  #L0cc2f8.  if v8 != 0 then goto L0cc300;
  #L0cc2fc.  v8:= 1I;
  #L0cc2fe.  goto L0cc302;
  #L0cc300.  v8:= 0I;
  #L0cc302.  if v8 == 0 then goto L0cc308;
  #L0cc306.  goto L0cc30a;
  #L0cc308.  v1:= 0I;
  #L0cc30a.  return v1;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.a` v1 @kind this) @signature `Lkotlin/ranges/a;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc3e8.  call temp:= `b`(v1) @signature `Lkotlin/ranges/a;.b:()Ljava/lang/Double;` @kind virtual;
  #L0cc3ee.  v0:= temp @kind object;
  #L0cc3f0.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.a` v1 @kind this) @signature `Lkotlin/ranges/a;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc404.  call temp:= `c`(v1) @signature `Lkotlin/ranges/a;.c:()Ljava/lang/Double;` @kind virtual;
  #L0cc40a.  v0:= temp @kind object;
  #L0cc40c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.a` v3 @kind this) @signature `Lkotlin/ranges/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cc398.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L0cc39e.  v0:= temp;
  #L0cc3a0.  if v0 == 0 then goto L0cc3a8;
  #L0cc3a4.  v0:= -1I;
  #L0cc3a6.  goto L0cc3d6;
  #L0cc3a8.  v0:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc3ac.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cc3b2.  v0:= temp @kind object;
  #L0cc3b4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc3ba.  v0:= temp;
  #L0cc3bc.  v0:= v0 * 31;
  #L0cc3c0.  v1:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc3c4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cc3ca.  v1:= temp @kind object;
  #L0cc3cc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc3d2.  v1:= temp;
  #L0cc3d4.  v0:= v0 + v1 @kind int;
  #L0cc3d6.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.a` v5 @kind this) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cc31c.  v0:= v5.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc320.  v2:= v5.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc324.  v4:= dcmpg(v0, v2);
  #L0cc328.  if v4 <= 0 then goto L0cc330;
  #L0cc32c.  v0:= 1I;
  #L0cc32e.  goto L0cc332;
  #L0cc330.  v0:= 0I;
  #L0cc332.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.a` v2 @kind this, `java.lang.Comparable` v3 @kind object, `java.lang.Comparable` v4 @kind object) @signature `Lkotlin/ranges/a;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L0cc364.  v3:= (`java.lang.Number`) v3 @kind object;
  #L0cc368.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0cc36e.  v0:= temp @kind wide;
  #L0cc370.  v4:= (`java.lang.Number`) v4 @kind object;
  #L0cc374.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L0cc37a.  v3:= temp @kind wide;
  #L0cc37c.  call temp:= `d`(v2, v0, v3) @signature `Lkotlin/ranges/a;.d:(DD)Z` @kind virtual;
  #L0cc382.  v3:= temp;
  #L0cc384.  return v3;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.a` v3 @kind this) @signature `Lkotlin/ranges/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cc460.  v0:= new `java.lang.StringBuilder`;
  #L0cc464.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cc46a.  v1:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L0cc46e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc474.  v1:= ".." @kind object;
  #L0cc478.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc47e.  v1:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L0cc482.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc488.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cc48e.  v0:= temp @kind object;
  #L0cc490.  return v0 @kind object;
}
