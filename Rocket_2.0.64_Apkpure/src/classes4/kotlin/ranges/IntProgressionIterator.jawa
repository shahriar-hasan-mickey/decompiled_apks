record `kotlin.ranges.IntProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.IntIterator` @kind class {
  `int` `kotlin.ranges.IntProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgressionIterator.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.IntProgressionIterator.c` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.IntProgressionIterator.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgressionIterator` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0ccaa4.  call `<init>`(v2) @signature `Lkotlin/collections/IntIterator;.<init>:()V` @kind direct;
  #L0ccaaa.  v2.`kotlin.ranges.IntProgressionIterator.a` @type ^`int` := v5;
  #L0ccaae.  v2.`kotlin.ranges.IntProgressionIterator.b` @type ^`int` := v4;
  #L0ccab2.  v0:= 1I;
  #L0ccab4.  v1:= 0I;
  #L0ccab6.  if v5 <= 0 then goto L0ccac0;
  #L0ccaba.  if v3 > v4 then goto L0ccac6;
  #L0ccabe.  goto L0ccac8;
  #L0ccac0.  if v3 < v4 then goto L0ccac6;
  #L0ccac4.  goto L0ccac8;
  #L0ccac6.  v0:= 0I;
  #L0ccac8.  v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`boolean` := v0 @kind boolean;
  #L0ccacc.  if v0 == 0 then goto L0ccad2;
  #L0ccad0.  goto L0ccad4;
  #L0ccad2.  v3:= v4;
  #L0ccad4.  v2.`kotlin.ranges.IntProgressionIterator.d` @type ^`int` := v3;
  #L0ccad8.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0cca48.  v0:= v1.`kotlin.ranges.IntProgressionIterator.a` @type ^`int`;
  #L0cca4c.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cca30.  v0:= v1.`kotlin.ranges.IntProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cca34.  return v0;
}
procedure `int` `nextInt`(`kotlin.ranges.IntProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cca60.  v0:= v2.`kotlin.ranges.IntProgressionIterator.d` @type ^`int`;
  #L0cca64.  v1:= v2.`kotlin.ranges.IntProgressionIterator.b` @type ^`int`;
  #L0cca68.  if v0 != v1 then goto L0cca88;
  #L0cca6c.  v1:= v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`boolean` @kind boolean;
  #L0cca70.  if v1 == 0 then goto L0cca7c;
  #L0cca74.  v1:= 0I;
  #L0cca76.  v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`boolean` := v1 @kind boolean;
  #L0cca7a.  goto L0cca92;
  #L0cca7c.  v0:= new `java.util.NoSuchElementException`;
  #L0cca80.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0cca86.  throw v0;
  #L0cca88.  v1:= v2.`kotlin.ranges.IntProgressionIterator.a` @type ^`int`;
  #L0cca8c.  v1:= v1 + v0 @kind int;
  #L0cca8e.  v2.`kotlin.ranges.IntProgressionIterator.d` @type ^`int` := v1;
  #L0cca92.  return v0;
}
