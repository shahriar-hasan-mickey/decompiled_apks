record `kotlin.ranges.CharRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.CharProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.CharRange$Companion` `@@kotlin.ranges.CharRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.CharRange` `@@kotlin.ranges.CharRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/CharRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0cc1fc.  v0:= new `kotlin.ranges.CharRange$Companion`;
  #L0cc200.  v1:= 0I;
  #L0cc202.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/CharRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cc208.  `@@kotlin.ranges.CharRange.Companion` @type ^`kotlin.ranges.CharRange$Companion` := v0 @kind object;
  #L0cc20c.  v0:= new `kotlin.ranges.CharRange`;
  #L0cc210.  v1:= 1I;
  #L0cc212.  v2:= 0I;
  #L0cc214.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @kind direct;
  #L0cc21a.  `@@kotlin.ranges.CharRange.d` @type ^`kotlin.ranges.CharRange` := v0 @kind object;
  #L0cc21e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 , `char` v3 ) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0cc230.  v0:= 1I;
  #L0cc232.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/CharProgression;.<init>:(CCI)V` @kind direct;
  #L0cc238.  return @kind void;
}
procedure `kotlin.ranges.CharRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/CharRange;.access$getEMPTY$cp:()Lkotlin/ranges/CharRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0cc1e4.  v0:= `@@kotlin.ranges.CharRange.d` @type ^`kotlin.ranges.CharRange` @kind object;
  #L0cc1e8.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 ) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbfd8.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cbfde.  v0:= temp;
  #L0cbfe0.  call temp:= `compare`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L0cbfe6.  v0:= temp;
  #L0cbfe8.  if v0 > 0 then goto L0cc004;
  #L0cbfec.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cbff2.  v0:= temp;
  #L0cbff4.  call temp:= `compare`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L0cbffa.  v2:= temp;
  #L0cbffc.  if v2 > 0 then goto L0cc004;
  #L0cc000.  v2:= 1I;
  #L0cc002.  goto L0cc006;
  #L0cc004.  v2:= 0I;
  #L0cc006.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/CharRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0cc018.  v1:= (`java.lang.Character`) v1 @kind object;
  #L0cc01c.  call temp:= `charValue`(v1) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L0cc022.  v1:= temp;
  #L0cc024.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @kind virtual;
  #L0cc02a.  v1:= temp;
  #L0cc02c.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.CharRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/CharRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc040.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.CharRange` @kind boolean;
  #L0cc044.  if v0 == 0 then goto L0cc096;
  #L0cc048.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L0cc04e.  v0:= temp;
  #L0cc050.  if v0 == 0 then goto L0cc066;
  #L0cc054.  v0:= v3 @kind object;
  #L0cc056.  v0:= (`kotlin.ranges.CharRange`) v0 @kind object;
  #L0cc05a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L0cc060.  v0:= temp;
  #L0cc062.  if v0 != 0 then goto L0cc092;
  #L0cc066.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc06c.  v0:= temp;
  #L0cc06e.  v3:= (`kotlin.ranges.CharRange`) v3 @kind object;
  #L0cc072.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc078.  v1:= temp;
  #L0cc07a.  if v0 != v1 then goto L0cc096;
  #L0cc07e.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc084.  v0:= temp;
  #L0cc086.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc08c.  v3:= temp;
  #L0cc08e.  if v0 != v3 then goto L0cc096;
  #L0cc092.  v3:= 1I;
  #L0cc094.  goto L0cc098;
  #L0cc096.  v3:= 0I;
  #L0cc098.  return v3;
}
procedure `java.lang.Character` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc118.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc11e.  v0:= temp;
  #L0cc120.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L0cc126.  v0:= temp @kind object;
  #L0cc128.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc160.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @kind virtual;
  #L0cc166.  v0:= temp @kind object;
  #L0cc168.  return v0 @kind object;
}
procedure `java.lang.Character` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc13c.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc142.  v0:= temp;
  #L0cc144.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L0cc14a.  v0:= temp @kind object;
  #L0cc14c.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc17c.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @kind virtual;
  #L0cc182.  v0:= temp @kind object;
  #L0cc184.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc0e0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L0cc0e6.  v0:= temp;
  #L0cc0e8.  if v0 == 0 then goto L0cc0f0;
  #L0cc0ec.  v0:= -1I;
  #L0cc0ee.  goto L0cc106;
  #L0cc0f0.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc0f6.  v0:= temp;
  #L0cc0f8.  v0:= v0 * 31;
  #L0cc0fc.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc102.  v1:= temp;
  #L0cc104.  v0:= v0 + v1 @kind int;
  #L0cc106.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc0ac.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc0b2.  v0:= temp;
  #L0cc0b4.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc0ba.  v1:= temp;
  #L0cc0bc.  call temp:= `compare`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L0cc0c2.  v0:= temp;
  #L0cc0c4.  if v0 <= 0 then goto L0cc0cc;
  #L0cc0c8.  v0:= 1I;
  #L0cc0ca.  goto L0cc0ce;
  #L0cc0cc.  v0:= 0I;
  #L0cc0ce.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc198.  v0:= new `java.lang.StringBuilder`;
  #L0cc19c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cc1a2.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L0cc1a8.  v1:= temp;
  #L0cc1aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc1b0.  v1:= ".." @kind object;
  #L0cc1b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc1ba.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L0cc1c0.  v1:= temp;
  #L0cc1c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc1c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cc1ce.  v0:= temp @kind object;
  #L0cc1d0.  return v0 @kind object;
}
