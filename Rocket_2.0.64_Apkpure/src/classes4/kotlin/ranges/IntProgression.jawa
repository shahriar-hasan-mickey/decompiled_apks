record `kotlin.ranges.IntProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.IntProgression.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.IntProgression$Companion` `@@kotlin.ranges.IntProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cccec.  v0:= new `kotlin.ranges.IntProgression$Companion`;
  #L0cccf0.  v1:= 0I;
  #L0cccf2.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cccf8.  `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` := v0 @kind object;
  #L0cccfc.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgression` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ccd10.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0ccd16.  if v4 == 0 then goto L0ccd48;
  #L0ccd1a.  v0:= -2147483648I;
  #L0ccd1e.  if v4 == v0 then goto L0ccd38;
  #L0ccd22.  v1.`kotlin.ranges.IntProgression.a` @type ^`int` := v2;
  #L0ccd26.  call temp:= `getProgressionLastElement`(v2, v3, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(III)I` @kind static;
  #L0ccd2c.  v2:= temp;
  #L0ccd2e.  v1.`kotlin.ranges.IntProgression.b` @type ^`int` := v2;
  #L0ccd32.  v1.`kotlin.ranges.IntProgression.c` @type ^`int` := v4;
  #L0ccd36.  return @kind void;
  #L0ccd38.  v2:= new `java.lang.IllegalArgumentException`;
  #L0ccd3c.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L0ccd40.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ccd46.  throw v2;
  #L0ccd48.  v2:= new `java.lang.IllegalArgumentException`;
  #L0ccd4c.  v3:= "Step must be non-zero." @kind object;
  #L0ccd50.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ccd56.  throw v2;
}
procedure `boolean` `equals`(`kotlin.ranges.IntProgression` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ccaec.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntProgression` @kind boolean;
  #L0ccaf0.  if v0 == 0 then goto L0ccb3e;
  #L0ccaf4.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L0ccafa.  v0:= temp;
  #L0ccafc.  if v0 == 0 then goto L0ccb12;
  #L0ccb00.  v0:= v3 @kind object;
  #L0ccb02.  v0:= (`kotlin.ranges.IntProgression`) v0 @kind object;
  #L0ccb06.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L0ccb0c.  v0:= temp;
  #L0ccb0e.  if v0 != 0 then goto L0ccb3a;
  #L0ccb12.  v0:= v2.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccb16.  v3:= (`kotlin.ranges.IntProgression`) v3 @kind object;
  #L0ccb1a.  v1:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccb1e.  if v0 != v1 then goto L0ccb3e;
  #L0ccb22.  v0:= v2.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccb26.  v1:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccb2a.  if v0 != v1 then goto L0ccb3e;
  #L0ccb2e.  v0:= v2.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccb32.  v3:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccb36.  if v0 != v3 then goto L0ccb3e;
  #L0ccb3a.  v3:= 1I;
  #L0ccb3c.  goto L0ccb40;
  #L0ccb3e.  v3:= 0I;
  #L0ccb40.  return v3;
}
procedure `int` `getFirst`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ccb90.  v0:= v1.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccb94.  return v0;
}
procedure `int` `getLast`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ccba8.  v0:= v1.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccbac.  return v0;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ccbc0.  v0:= v1.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccbc4.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.IntProgression` v2 @kind this) @signature `Lkotlin/ranges/IntProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ccbd8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L0ccbde.  v0:= temp;
  #L0ccbe0.  if v0 == 0 then goto L0ccbe8;
  #L0ccbe4.  v0:= -1I;
  #L0ccbe6.  goto L0ccc00;
  #L0ccbe8.  v0:= v2.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccbec.  v0:= v0 * 31;
  #L0ccbf0.  v1:= v2.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccbf4.  v0:= v0 + v1 @kind int;
  #L0ccbf6.  v0:= v0 * 31;
  #L0ccbfa.  v1:= v2.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccbfe.  v0:= v0 + v1 @kind int;
  #L0ccc00.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0ccb54.  v0:= v4.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccb58.  v1:= 1I;
  #L0ccb5a.  v2:= 0I;
  #L0ccb5c.  if v0 <= 0 then goto L0ccb6e;
  #L0ccb60.  v0:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccb64.  v3:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccb68.  if v0 <= v3 then goto L0ccb7c;
  #L0ccb6c.  goto L0ccb7e;
  #L0ccb6e.  v0:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccb72.  v3:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccb76.  if v0 >= v3 then goto L0ccb7c;
  #L0ccb7a.  goto L0ccb7e;
  #L0ccb7c.  v1:= 0I;
  #L0ccb7e.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0ccca8.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @kind virtual;
  #L0cccae.  v0:= temp @kind object;
  #L0cccb0.  return v0 @kind object;
}
procedure `kotlin.collections.IntIterator` `iterator`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0cccc4.  v0:= new `kotlin.ranges.IntProgressionIterator`;
  #L0cccc8.  v1:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccccc.  v2:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0cccd0.  v3:= v4.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0cccd4.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @kind direct;
  #L0cccda.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntProgression` v3 @kind this) @signature `Lkotlin/ranges/IntProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0ccc14.  v0:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccc18.  v1:= " step " @kind object;
  #L0ccc1c.  if v0 <= 0 then goto L0ccc54;
  #L0ccc20.  v0:= new `java.lang.StringBuilder`;
  #L0ccc24.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0ccc2a.  v2:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccc2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc34.  v2:= ".." @kind object;
  #L0ccc38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc3e.  v2:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccc42.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc4e.  v1:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccc52.  goto L0ccc88;
  #L0ccc54.  v0:= new `java.lang.StringBuilder`;
  #L0ccc58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0ccc5e.  v2:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L0ccc62.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc68.  v2:= " downTo " @kind object;
  #L0ccc6c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc72.  v2:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L0ccc76.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc82.  v1:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L0ccc86.  v1:= -v1 @kind int;
  #L0ccc88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccc8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0ccc94.  v0:= temp @kind object;
  #L0ccc96.  return v0 @kind object;
}
