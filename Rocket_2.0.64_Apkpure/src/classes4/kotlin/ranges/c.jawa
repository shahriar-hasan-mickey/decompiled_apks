record `kotlin.ranges.c` @kind class @AccessFlag  extends `kotlin.ranges.ClosedRange` @kind interface {
  `java.lang.Comparable` `kotlin.ranges.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Comparable` `kotlin.ranges.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.c` v1 @kind this, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/c;.<init>:(Ljava/lang/Comparable;Ljava/lang/Comparable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0cc9b0.  v0:= "start" @kind object;
  #L0cc9b4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cc9ba.  v0:= "endInclusive" @kind object;
  #L0cc9be.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cc9c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cc9ca.  v1.`kotlin.ranges.c.a` @type ^`java.lang.Comparable` := v2 @kind object;
  #L0cc9ce.  v1.`kotlin.ranges.c.b` @type ^`java.lang.Comparable` := v3 @kind object;
  #L0cc9d2.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.ranges.c` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/c;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {
    temp;

  #L0cc838.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.contains:(Lkotlin/ranges/ClosedRange;Ljava/lang/Comparable;)Z` @kind static;
  #L0cc83e.  v1:= temp;
  #L0cc840.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc854.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.c` @kind boolean;
  #L0cc858.  if v0 == 0 then goto L0cc8ba;
  #L0cc85c.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L0cc862.  v0:= temp;
  #L0cc864.  if v0 == 0 then goto L0cc87a;
  #L0cc868.  v0:= v3 @kind object;
  #L0cc86a.  v0:= (`kotlin.ranges.c`) v0 @kind object;
  #L0cc86e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L0cc874.  v0:= temp;
  #L0cc876.  if v0 != 0 then goto L0cc8b6;
  #L0cc87a.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc880.  v0:= temp @kind object;
  #L0cc882.  v3:= (`kotlin.ranges.c`) v3 @kind object;
  #L0cc886.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc88c.  v1:= temp @kind object;
  #L0cc88e.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0cc894.  v0:= temp;
  #L0cc896.  if v0 == 0 then goto L0cc8ba;
  #L0cc89a.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc8a0.  v0:= temp @kind object;
  #L0cc8a2.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc8a8.  v3:= temp @kind object;
  #L0cc8aa.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0cc8b0.  v3:= temp;
  #L0cc8b2.  if v3 == 0 then goto L0cc8ba;
  #L0cc8b6.  v3:= 1I;
  #L0cc8b8.  goto L0cc8bc;
  #L0cc8ba.  v3:= 0I;
  #L0cc8bc.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc934.  v0:= v1.`kotlin.ranges.c.b` @type ^`java.lang.Comparable` @kind object;
  #L0cc938.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc94c.  v0:= v1.`kotlin.ranges.c.a` @type ^`java.lang.Comparable` @kind object;
  #L0cc950.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.c` v2 @kind this) @signature `Lkotlin/ranges/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc8ec.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L0cc8f2.  v0:= temp;
  #L0cc8f4.  if v0 == 0 then goto L0cc8fc;
  #L0cc8f8.  v0:= -1I;
  #L0cc8fa.  goto L0cc922;
  #L0cc8fc.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc902.  v0:= temp @kind object;
  #L0cc904.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc90a.  v0:= temp;
  #L0cc90c.  v0:= v0 * 31;
  #L0cc910.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc916.  v1:= temp @kind object;
  #L0cc918.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc91e.  v1:= temp;
  #L0cc920.  v0:= v0 + v1 @kind int;
  #L0cc922.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc8d0.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.isEmpty:(Lkotlin/ranges/ClosedRange;)Z` @kind static;
  #L0cc8d6.  v0:= temp;
  #L0cc8d8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.c` v2 @kind this) @signature `Lkotlin/ranges/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc964.  v0:= new `java.lang.StringBuilder`;
  #L0cc968.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cc96e.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc974.  v1:= temp @kind object;
  #L0cc976.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc97c.  v1:= ".." @kind object;
  #L0cc980.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc986.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L0cc98c.  v1:= temp @kind object;
  #L0cc98e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc994.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cc99a.  v0:= temp @kind object;
  #L0cc99c.  return v0 @kind object;
}
