record `kotlin.ranges.LongProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long` `kotlin.ranges.LongProgression.a` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.LongProgression$Companion` `@@kotlin.ranges.LongProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cd368.  v0:= new `kotlin.ranges.LongProgression$Companion`;
  #L0cd36c.  v1:= 0I;
  #L0cd36e.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cd374.  `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` := v0 @kind object;
  #L0cd378.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgression` v3 @kind this, `long` v4 , `long` v6 , `long` v8 ) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0cd38c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cd392.  v0:= 0L;
  #L0cd396.  v2:= lcmp(v8, v0);
  #L0cd39a.  if v2 == 0 then goto L0cd3d0;
  #L0cd39e.  v0:= -9223372036854775808L;
  #L0cd3a2.  v2:= lcmp(v8, v0);
  #L0cd3a6.  if v2 == 0 then goto L0cd3c0;
  #L0cd3aa.  v3.`kotlin.ranges.LongProgression.a` @type ^`long` := v4 @kind wide;
  #L0cd3ae.  call temp:= `getProgressionLastElement`(v4, v6, v8) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(JJJ)J` @kind static;
  #L0cd3b4.  v4:= temp @kind wide;
  #L0cd3b6.  v3.`kotlin.ranges.LongProgression.b` @type ^`long` := v4 @kind wide;
  #L0cd3ba.  v3.`kotlin.ranges.LongProgression.c` @type ^`long` := v8 @kind wide;
  #L0cd3be.  return @kind void;
  #L0cd3c0.  v4:= new `java.lang.IllegalArgumentException`;
  #L0cd3c4.  v5:= "Step must be greater than Long.MIN_VALUE to avoid overflow on negation." @kind object;
  #L0cd3c8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cd3ce.  throw v4;
  #L0cd3d0.  v4:= new `java.lang.IllegalArgumentException`;
  #L0cd3d4.  v5:= "Step must be non-zero." @kind object;
  #L0cd3d8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cd3de.  throw v4;
}
procedure `boolean` `equals`(`kotlin.ranges.LongProgression` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cd130.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongProgression` @kind boolean;
  #L0cd134.  if v0 == 0 then goto L0cd18e;
  #L0cd138.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L0cd13e.  v0:= temp;
  #L0cd140.  if v0 == 0 then goto L0cd156;
  #L0cd144.  v0:= v6 @kind object;
  #L0cd146.  v0:= (`kotlin.ranges.LongProgression`) v0 @kind object;
  #L0cd14a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L0cd150.  v0:= temp;
  #L0cd152.  if v0 != 0 then goto L0cd18a;
  #L0cd156.  v0:= v5.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd15a.  v6:= (`kotlin.ranges.LongProgression`) v6 @kind object;
  #L0cd15e.  v2:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd162.  v4:= lcmp(v0, v2);
  #L0cd166.  if v4 != 0 then goto L0cd18e;
  #L0cd16a.  v0:= v5.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd16e.  v2:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd172.  v4:= lcmp(v0, v2);
  #L0cd176.  if v4 != 0 then goto L0cd18e;
  #L0cd17a.  v0:= v5.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd17e.  v2:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd182.  v6:= lcmp(v0, v2);
  #L0cd186.  if v6 != 0 then goto L0cd18e;
  #L0cd18a.  v6:= 1I;
  #L0cd18c.  goto L0cd190;
  #L0cd18e.  v6:= 0I;
  #L0cd190.  return v6;
}
procedure `long` `getFirst`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0cd320.  v0:= v2.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd324.  return v0 @kind wide;
}
procedure `long` `getLast`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0cd338.  v0:= v2.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd33c.  return v0 @kind wide;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0cd350.  v0:= v2.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd354.  return v0 @kind wide;
}
procedure `int` `hashCode`(`kotlin.ranges.LongProgression` v9 @kind this) @signature `Lkotlin/ranges/LongProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0cd1e8.  call temp:= `isEmpty`(v9) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L0cd1ee.  v0:= temp;
  #L0cd1f0.  if v0 == 0 then goto L0cd1f8;
  #L0cd1f4.  v0:= -1I;
  #L0cd1f6.  goto L0cd22e;
  #L0cd1f8.  v0:= 31I;
  #L0cd1fc.  v0:= (`long`) v0 @kind i2l;
  #L0cd1fe.  v2:= v9.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd202.  v4:= 32I;
  #L0cd206.  v5:= v2 ^>> v4 @kind long;
  #L0cd20a.  v2:= v2 ^~ v5 @kind long;
  #L0cd20c.  v2:= v2 * v0 @kind long;
  #L0cd210.  v5:= v9.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd214.  v7:= v5 ^>> v4 @kind long;
  #L0cd218.  v5:= v5 ^~ v7 @kind long;
  #L0cd21a.  v2:= v2 + v5 @kind long;
  #L0cd21c.  v0:= v0 * v2 @kind long;
  #L0cd220.  v2:= v9.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd224.  v4:= v2 ^>> v4 @kind long;
  #L0cd228.  v2:= v2 ^~ v4 @kind long;
  #L0cd22a.  v0:= v0 + v2 @kind long;
  #L0cd22c.  v0:= (`int`) v0 @kind l2i;
  #L0cd22e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongProgression` v7 @kind this) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cd1a4.  v0:= v7.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd1a8.  v2:= 1I;
  #L0cd1aa.  v3:= 0I;
  #L0cd1ac.  v4:= 0L;
  #L0cd1b0.  v6:= lcmp(v0, v4);
  #L0cd1b4.  v0:= v7.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd1b8.  v4:= v7.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd1bc.  if v6 <= 0 then goto L0cd1ca;
  #L0cd1c0.  v6:= lcmp(v0, v4);
  #L0cd1c4.  if v6 <= 0 then goto L0cd1d4;
  #L0cd1c8.  goto L0cd1d6;
  #L0cd1ca.  v6:= lcmp(v0, v4);
  #L0cd1ce.  if v6 >= 0 then goto L0cd1d4;
  #L0cd1d2.  goto L0cd1d6;
  #L0cd1d4.  v2:= 0I;
  #L0cd1d6.  return v2;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.LongProgression` v1 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cd2d8.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @kind virtual;
  #L0cd2de.  v0:= temp @kind object;
  #L0cd2e0.  return v0 @kind object;
}
procedure `kotlin.collections.LongIterator` `iterator`(`kotlin.ranges.LongProgression` v8 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0cd2f4.  v7:= new `kotlin.ranges.LongProgressionIterator`;
  #L0cd2f8.  v1:= v8.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd2fc.  v3:= v8.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd300.  v5:= v8.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd304.  v0:= v7 @kind object;
  #L0cd306.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @kind direct;
  #L0cd30c.  return v7 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongProgression` v6 @kind this) @signature `Lkotlin/ranges/LongProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0cd240.  v0:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd244.  v2:= " step " @kind object;
  #L0cd248.  v3:= 0L;
  #L0cd24c.  v5:= lcmp(v0, v3);
  #L0cd250.  v0:= new `java.lang.StringBuilder`;
  #L0cd254.  if v5 <= 0 then goto L0cd288;
  #L0cd258.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cd25e.  v3:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd262.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd268.  v1:= ".." @kind object;
  #L0cd26c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd272.  v3:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd276.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd27c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd282.  v1:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd286.  goto L0cd2b8;
  #L0cd288.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cd28e.  v3:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L0cd292.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd298.  v1:= " downTo " @kind object;
  #L0cd29c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd2a2.  v3:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L0cd2a6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd2ac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd2b2.  v1:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L0cd2b6.  v1:= -v1 @kind long;
  #L0cd2b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd2be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cd2c4.  v0:= temp @kind object;
  #L0cd2c6.  return v0 @kind object;
}
