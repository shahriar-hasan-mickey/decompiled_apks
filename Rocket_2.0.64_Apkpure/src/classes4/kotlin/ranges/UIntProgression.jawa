record `kotlin.ranges.UIntProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.UIntProgression.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.UIntProgression.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.UIntProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.UIntProgression$Companion` `@@kotlin.ranges.UIntProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/UIntProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cfb8c.  v0:= new `kotlin.ranges.UIntProgression$Companion`;
  #L0cfb90.  v1:= 0I;
  #L0cfb92.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/UIntProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cfb98.  `@@kotlin.ranges.UIntProgression.Companion` @type ^`kotlin.ranges.UIntProgression$Companion` := v0 @kind object;
  #L0cfb9c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgression` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/UIntProgression;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L0cfbb0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cfbb6.  if v4 == 0 then goto L0cfbe8;
  #L0cfbba.  v0:= -2147483648I;
  #L0cfbbe.  if v4 == v0 then goto L0cfbd8;
  #L0cfbc2.  v1.`kotlin.ranges.UIntProgression.a` @type ^`int` := v2;
  #L0cfbc6.  call temp:= `getProgressionLastElement-Nkh28Cs`(v2, v3, v4) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-Nkh28Cs:(III)I` @kind static;
  #L0cfbcc.  v2:= temp;
  #L0cfbce.  v1.`kotlin.ranges.UIntProgression.b` @type ^`int` := v2;
  #L0cfbd2.  v1.`kotlin.ranges.UIntProgression.c` @type ^`int` := v4;
  #L0cfbd6.  return @kind void;
  #L0cfbd8.  v2:= new `java.lang.IllegalArgumentException`;
  #L0cfbdc.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L0cfbe0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cfbe6.  throw v2;
  #L0cfbe8.  v2:= new `java.lang.IllegalArgumentException`;
  #L0cfbec.  v3:= "Step must be non-zero." @kind object;
  #L0cfbf0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cfbf6.  throw v2;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgression` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/ranges/UIntProgression;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0cfc08.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/UIntProgression;.<init>:(III)V` @kind direct;
  #L0cfc0e.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.ranges.UIntProgression` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/UIntProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cf974.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.UIntProgression` @kind boolean;
  #L0cf978.  if v0 == 0 then goto L0cf9c6;
  #L0cf97c.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L0cf982.  v0:= temp;
  #L0cf984.  if v0 == 0 then goto L0cf99a;
  #L0cf988.  v0:= v3 @kind object;
  #L0cf98a.  v0:= (`kotlin.ranges.UIntProgression`) v0 @kind object;
  #L0cf98e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L0cf994.  v0:= temp;
  #L0cf996.  if v0 != 0 then goto L0cf9c2;
  #L0cf99a.  v0:= v2.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cf99e.  v3:= (`kotlin.ranges.UIntProgression`) v3 @kind object;
  #L0cf9a2.  v1:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cf9a6.  if v0 != v1 then goto L0cf9c6;
  #L0cf9aa.  v0:= v2.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cf9ae.  v1:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cf9b2.  if v0 != v1 then goto L0cf9c6;
  #L0cf9b6.  v0:= v2.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cf9ba.  v3:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cf9be.  if v0 != v3 then goto L0cf9c6;
  #L0cf9c2.  v3:= 1I;
  #L0cf9c4.  goto L0cf9c8;
  #L0cf9c6.  v3:= 0I;
  #L0cf9c8.  return v3;
}
procedure `int` `getFirst-pVg5ArA`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getFirst-pVg5ArA:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0cfa28.  v0:= v1.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfa2c.  return v0;
}
procedure `int` `getLast-pVg5ArA`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getLast-pVg5ArA:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0cfa40.  v0:= v1.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfa44.  return v0;
}
procedure `int` `getStep`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0cfa58.  v0:= v1.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfa5c.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.UIntProgression` v2 @kind this) @signature `Lkotlin/ranges/UIntProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cfa70.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L0cfa76.  v0:= temp;
  #L0cfa78.  if v0 == 0 then goto L0cfa80;
  #L0cfa7c.  v0:= -1I;
  #L0cfa7e.  goto L0cfa98;
  #L0cfa80.  v0:= v2.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfa84.  v0:= v0 * 31;
  #L0cfa88.  v1:= v2.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfa8c.  v0:= v0 + v1 @kind int;
  #L0cfa8e.  v0:= v0 * 31;
  #L0cfa92.  v1:= v2.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfa96.  v0:= v0 + v1 @kind int;
  #L0cfa98.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.UIntProgression` v4 @kind this) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0cf9dc.  v0:= v4.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cf9e0.  v1:= 1I;
  #L0cf9e2.  v2:= 0I;
  #L0cf9e4.  if v0 <= 0 then goto L0cf9fe;
  #L0cf9e8.  v0:= v4.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cf9ec.  v3:= v4.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cf9f0.  call temp:= `uintCompare`(v0, v3) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0cf9f6.  v0:= temp;
  #L0cf9f8.  if v0 <= 0 then goto L0cfa14;
  #L0cf9fc.  goto L0cfa16;
  #L0cf9fe.  v0:= v4.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfa02.  v3:= v4.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfa06.  call temp:= `uintCompare`(v0, v3) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0cfa0c.  v0:= temp;
  #L0cfa0e.  if v0 >= 0 then goto L0cfa14;
  #L0cfa12.  goto L0cfa16;
  #L0cfa14.  v1:= 0I;
  #L0cfa16.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.UIntProgression` v5 @kind this) @signature `Lkotlin/ranges/UIntProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cfb60.  v0:= new `kotlin.ranges.f`;
  #L0cfb64.  v1:= v5.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfb68.  v2:= v5.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfb6c.  v3:= v5.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfb70.  v4:= 0I;
  #L0cfb72.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlin/ranges/f;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cfb78.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.UIntProgression` v3 @kind this) @signature `Lkotlin/ranges/UIntProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cfaac.  v0:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfab0.  v1:= " step " @kind object;
  #L0cfab4.  if v0 <= 0 then goto L0cfafc;
  #L0cfab8.  v0:= new `java.lang.StringBuilder`;
  #L0cfabc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cfac2.  v2:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfac6.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L0cfacc.  v2:= temp @kind object;
  #L0cface.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfad4.  v2:= ".." @kind object;
  #L0cfad8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfade.  v2:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfae2.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L0cfae8.  v2:= temp @kind object;
  #L0cfaea.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfaf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfaf6.  v1:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfafa.  goto L0cfb40;
  #L0cfafc.  v0:= new `java.lang.StringBuilder`;
  #L0cfb00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cfb06.  v2:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L0cfb0a.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L0cfb10.  v2:= temp @kind object;
  #L0cfb12.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfb18.  v2:= " downTo " @kind object;
  #L0cfb1c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfb22.  v2:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L0cfb26.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L0cfb2c.  v2:= temp @kind object;
  #L0cfb2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfb34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfb3a.  v1:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L0cfb3e.  v1:= -v1 @kind int;
  #L0cfb40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cfb46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cfb4c.  v0:= temp @kind object;
  #L0cfb4e.  return v0 @kind object;
}
