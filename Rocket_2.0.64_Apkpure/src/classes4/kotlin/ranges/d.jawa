record `kotlin.ranges.d` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.ranges.d` v0 @kind this) @signature `Lkotlin/ranges/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cd744.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cd74a.  return @kind void;
}
procedure `void` `checkStepIsPositive`(`boolean` v2 , `java.lang.Number` v3 @kind object) @signature `Lkotlin/ranges/d;.checkStepIsPositive:(ZLjava/lang/Number;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0cd75c.  v0:= "step" @kind object;
  #L0cd760.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cd766.  if v2 == 0 then goto L0cd76c;
  #L0cd76a.  return @kind void;
  #L0cd76c.  v2:= new `java.lang.IllegalArgumentException`;
  #L0cd770.  v0:= new `java.lang.StringBuilder`;
  #L0cd774.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cd77a.  v1:= "Step must be positive, was: " @kind object;
  #L0cd77e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd784.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd78a.  v3:= 46I;
  #L0cd78e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cd794.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cd79a.  v3:= temp @kind object;
  #L0cd79c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cd7a2.  throw v2;
}
procedure `kotlin.ranges.ClosedFloatingPointRange` `rangeTo`(`double` v1 , `double` v3 ) @signature `Lkotlin/ranges/d;.rangeTo:(DD)Lkotlin/ranges/ClosedFloatingPointRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0cd6dc.  v0:= new `kotlin.ranges.a`;
  #L0cd6e0.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/a;.<init>:(DD)V` @kind direct;
  #L0cd6e6.  return v0 @kind object;
}
procedure `kotlin.ranges.ClosedFloatingPointRange` `rangeTo`(`float` v1 , `float` v2 ) @signature `Lkotlin/ranges/d;.rangeTo:(FF)Lkotlin/ranges/ClosedFloatingPointRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0cd6f8.  v0:= new `kotlin.ranges.b`;
  #L0cd6fc.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/b;.<init>:(FF)V` @kind direct;
  #L0cd702.  return v0 @kind object;
}
procedure `kotlin.ranges.ClosedRange` `rangeTo`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/d;.rangeTo:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Lkotlin/ranges/ClosedRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0cd714.  v0:= "<this>" @kind object;
  #L0cd718.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cd71e.  v0:= "that" @kind object;
  #L0cd722.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cd728.  v0:= new `kotlin.ranges.c`;
  #L0cd72c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/c;.<init>:(Ljava/lang/Comparable;Ljava/lang/Comparable;)V` @kind direct;
  #L0cd732.  return v0 @kind object;
}
