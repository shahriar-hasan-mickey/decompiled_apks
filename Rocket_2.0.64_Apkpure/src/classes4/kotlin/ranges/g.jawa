record `kotlin.ranges.g` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long` `kotlin.ranges.g.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.g.b` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.g.c` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.g.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.g` v5 @kind this, `long` v6 , `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/g;.<init>:(JJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cffec.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cfff2.  v5.`kotlin.ranges.g.a` @type ^`long` := v8 @kind wide;
  #L0cfff6.  v0:= 1I;
  #L0cfff8.  v1:= 0I;
  #L0cfffa.  v2:= 0L;
  #L0cfffe.  v4:= lcmp(v10, v2);
  #L0d0002.  call temp:= `ulongCompare`(v6, v8) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L0d0008.  v2:= temp;
  #L0d000a.  if v4 <= 0 then goto L0d0014;
  #L0d000e.  if v2 > 0 then goto L0d001a;
  #L0d0012.  goto L0d001c;
  #L0d0014.  if v2 < 0 then goto L0d001a;
  #L0d0018.  goto L0d001c;
  #L0d001a.  v0:= 0I;
  #L0d001c.  v5.`kotlin.ranges.g.b` @type ^`boolean` := v0 @kind boolean;
  #L0d0020.  call temp:= `constructor-impl`(v10) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0d0026.  v10:= temp @kind wide;
  #L0d0028.  v5.`kotlin.ranges.g.c` @type ^`long` := v10 @kind wide;
  #L0d002c.  v10:= v5.`kotlin.ranges.g.b` @type ^`boolean` @kind boolean;
  #L0d0030.  if v10 == 0 then goto L0d0036;
  #L0d0034.  goto L0d0038;
  #L0d0036.  v6:= v8 @kind wide;
  #L0d0038.  v5.`kotlin.ranges.g.d` @type ^`long` := v6 @kind wide;
  #L0d003c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.g` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v7 @kind object) @signature `Lkotlin/ranges/g;.<init>:(JJJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0d0050.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/g;.<init>:(JJJ)V` @kind direct;
  #L0d0056.  return @kind void;
}
procedure `long` `b`(`kotlin.ranges.g` v5 @kind this) @signature `Lkotlin/ranges/g;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0cff9c.  v0:= v5.`kotlin.ranges.g.d` @type ^`long` @kind wide;
  #L0cffa0.  v2:= v5.`kotlin.ranges.g.a` @type ^`long` @kind wide;
  #L0cffa4.  v4:= lcmp(v0, v2);
  #L0cffa8.  if v4 != 0 then goto L0cffc8;
  #L0cffac.  v2:= v5.`kotlin.ranges.g.b` @type ^`boolean` @kind boolean;
  #L0cffb0.  if v2 == 0 then goto L0cffbc;
  #L0cffb4.  v2:= 0I;
  #L0cffb6.  v5.`kotlin.ranges.g.b` @type ^`boolean` := v2 @kind boolean;
  #L0cffba.  goto L0cffda;
  #L0cffbc.  v0:= new `java.util.NoSuchElementException`;
  #L0cffc0.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0cffc6.  throw v0;
  #L0cffc8.  v2:= v5.`kotlin.ranges.g.c` @type ^`long` @kind wide;
  #L0cffcc.  v2:= v2 + v0 @kind long;
  #L0cffce.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0cffd4.  v2:= temp @kind wide;
  #L0cffd6.  v5.`kotlin.ranges.g.d` @type ^`long` := v2 @kind wide;
  #L0cffda.  return v0 @kind wide;
}
procedure `boolean` `hasNext`(`kotlin.ranges.g` v1 @kind this) @signature `Lkotlin/ranges/g;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cff60.  v0:= v1.`kotlin.ranges.g.b` @type ^`boolean` @kind boolean;
  #L0cff64.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.ranges.g` v2 @kind this) @signature `Lkotlin/ranges/g;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L0cff78.  call temp:= `b`(v2) @signature `Lkotlin/ranges/g;.b:()J` @kind virtual;
  #L0cff7e.  v0:= temp @kind wide;
  #L0cff80.  call temp:= `box-impl`(v0) @signature `Lkotlin/ULong;.box-impl:(J)Lkotlin/ULong;` @kind static;
  #L0cff86.  v0:= temp @kind object;
  #L0cff88.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.ranges.g` v2 @kind this) @signature `Lkotlin/ranges/g;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d0068.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0d006c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0d0070.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d0076.  throw v0;
}
