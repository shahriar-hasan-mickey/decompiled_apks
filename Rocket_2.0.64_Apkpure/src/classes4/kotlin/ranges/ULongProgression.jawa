record `kotlin.ranges.ULongProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long` `kotlin.ranges.ULongProgression.a` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.ULongProgression.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.ULongProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.ULongProgression$Companion` `@@kotlin.ranges.ULongProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/ULongProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0d02e4.  v0:= new `kotlin.ranges.ULongProgression$Companion`;
  #L0d02e8.  v1:= 0I;
  #L0d02ea.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/ULongProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0d02f0.  `@@kotlin.ranges.ULongProgression.Companion` @type ^`kotlin.ranges.ULongProgression$Companion` := v0 @kind object;
  #L0d02f4.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.ULongProgression` v3 @kind this, `long` v4 , `long` v6 , `long` v8 ) @signature `Lkotlin/ranges/ULongProgression;.<init>:(JJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0d0308.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d030e.  v0:= 0L;
  #L0d0312.  v2:= lcmp(v8, v0);
  #L0d0316.  if v2 == 0 then goto L0d034c;
  #L0d031a.  v0:= -9223372036854775808L;
  #L0d031e.  v2:= lcmp(v8, v0);
  #L0d0322.  if v2 == 0 then goto L0d033c;
  #L0d0326.  v3.`kotlin.ranges.ULongProgression.a` @type ^`long` := v4 @kind wide;
  #L0d032a.  call temp:= `getProgressionLastElement-7ftBX0g`(v4, v6, v8) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-7ftBX0g:(JJJ)J` @kind static;
  #L0d0330.  v4:= temp @kind wide;
  #L0d0332.  v3.`kotlin.ranges.ULongProgression.b` @type ^`long` := v4 @kind wide;
  #L0d0336.  v3.`kotlin.ranges.ULongProgression.c` @type ^`long` := v8 @kind wide;
  #L0d033a.  return @kind void;
  #L0d033c.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d0340.  v5:= "Step must be greater than Long.MIN_VALUE to avoid overflow on negation." @kind object;
  #L0d0344.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d034a.  throw v4;
  #L0d034c.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d0350.  v5:= "Step must be non-zero." @kind object;
  #L0d0354.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d035a.  throw v4;
}
procedure `void` `<init>`(`kotlin.ranges.ULongProgression` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v7 @kind object) @signature `Lkotlin/ranges/ULongProgression;.<init>:(JJJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0d036c.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/ULongProgression;.<init>:(JJJ)V` @kind direct;
  #L0d0372.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.ranges.ULongProgression` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/ULongProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0d0088.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.ULongProgression` @kind boolean;
  #L0d008c.  if v0 == 0 then goto L0d00e6;
  #L0d0090.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/ULongProgression;.isEmpty:()Z` @kind virtual;
  #L0d0096.  v0:= temp;
  #L0d0098.  if v0 == 0 then goto L0d00ae;
  #L0d009c.  v0:= v6 @kind object;
  #L0d009e.  v0:= (`kotlin.ranges.ULongProgression`) v0 @kind object;
  #L0d00a2.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/ULongProgression;.isEmpty:()Z` @kind virtual;
  #L0d00a8.  v0:= temp;
  #L0d00aa.  if v0 != 0 then goto L0d00e2;
  #L0d00ae.  v0:= v5.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d00b2.  v6:= (`kotlin.ranges.ULongProgression`) v6 @kind object;
  #L0d00b6.  v2:= v6.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d00ba.  v4:= lcmp(v0, v2);
  #L0d00be.  if v4 != 0 then goto L0d00e6;
  #L0d00c2.  v0:= v5.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d00c6.  v2:= v6.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d00ca.  v4:= lcmp(v0, v2);
  #L0d00ce.  if v4 != 0 then goto L0d00e6;
  #L0d00d2.  v0:= v5.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d00d6.  v2:= v6.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d00da.  v6:= lcmp(v0, v2);
  #L0d00de.  if v6 != 0 then goto L0d00e6;
  #L0d00e2.  v6:= 1I;
  #L0d00e4.  goto L0d00e8;
  #L0d00e6.  v6:= 0I;
  #L0d00e8.  return v6;
}
procedure `long` `getFirst-s-VKNKU`(`kotlin.ranges.ULongProgression` v2 @kind this) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0d029c.  v0:= v2.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d02a0.  return v0 @kind wide;
}
procedure `long` `getLast-s-VKNKU`(`kotlin.ranges.ULongProgression` v2 @kind this) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0d02b4.  v0:= v2.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d02b8.  return v0 @kind wide;
}
procedure `long` `getStep`(`kotlin.ranges.ULongProgression` v2 @kind this) @signature `Lkotlin/ranges/ULongProgression;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0d02cc.  v0:= v2.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d02d0.  return v0 @kind wide;
}
procedure `int` `hashCode`(`kotlin.ranges.ULongProgression` v7 @kind this) @signature `Lkotlin/ranges/ULongProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0d0140.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/ULongProgression;.isEmpty:()Z` @kind virtual;
  #L0d0146.  v0:= temp;
  #L0d0148.  if v0 == 0 then goto L0d0150;
  #L0d014c.  v0:= -1I;
  #L0d014e.  goto L0d01a6;
  #L0d0150.  v0:= v7.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d0154.  v2:= 32I;
  #L0d0158.  v3:= v0 ^>> v2 @kind long;
  #L0d015c.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0d0162.  v3:= temp @kind wide;
  #L0d0164.  v0:= v0 ^~ v3 @kind long;
  #L0d0166.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0d016c.  v0:= temp @kind wide;
  #L0d016e.  v1:= (`int`) v0 @kind l2i;
  #L0d0170.  v1:= v1 * 31;
  #L0d0174.  v3:= v7.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d0178.  v5:= v3 ^>> v2 @kind long;
  #L0d017c.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0d0182.  v5:= temp @kind wide;
  #L0d0184.  v3:= v3 ^~ v5 @kind long;
  #L0d0186.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0d018c.  v3:= temp @kind wide;
  #L0d018e.  v0:= (`int`) v3 @kind l2i;
  #L0d0190.  v1:= v1 + v0 @kind int;
  #L0d0192.  v1:= v1 * 31;
  #L0d0196.  v3:= v7.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d019a.  v5:= v3 ^>> v2 @kind long;
  #L0d019e.  v2:= v3 ^~ v5 @kind long;
  #L0d01a2.  v0:= (`int`) v2 @kind l2i;
  #L0d01a4.  v0:= v0 + v1 @kind int;
  #L0d01a6.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ULongProgression` v7 @kind this) @signature `Lkotlin/ranges/ULongProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0d00fc.  v0:= v7.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d0100.  v2:= 1I;
  #L0d0102.  v3:= 0I;
  #L0d0104.  v4:= 0L;
  #L0d0108.  v6:= lcmp(v0, v4);
  #L0d010c.  v0:= v7.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d0110.  v4:= v7.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d0114.  call temp:= `ulongCompare`(v0, v4) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L0d011a.  v0:= temp;
  #L0d011c.  if v6 <= 0 then goto L0d0126;
  #L0d0120.  if v0 <= 0 then goto L0d012c;
  #L0d0124.  goto L0d012e;
  #L0d0126.  if v0 >= 0 then goto L0d012c;
  #L0d012a.  goto L0d012e;
  #L0d012c.  v2:= 0I;
  #L0d012e.  return v2;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.ULongProgression` v9 @kind this) @signature `Lkotlin/ranges/ULongProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0d0270.  v8:= new `kotlin.ranges.g`;
  #L0d0274.  v1:= v9.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d0278.  v3:= v9.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d027c.  v5:= v9.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d0280.  v7:= 0I;
  #L0d0282.  v0:= v8 @kind object;
  #L0d0284.  call `<init>`(v0, v1, v3, v5, v7) @signature `Lkotlin/ranges/g;.<init>:(JJJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0d028a.  return v8 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.ULongProgression` v6 @kind this) @signature `Lkotlin/ranges/ULongProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0d01b8.  v0:= v6.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d01bc.  v2:= " step " @kind object;
  #L0d01c0.  v3:= 0L;
  #L0d01c4.  v5:= lcmp(v0, v3);
  #L0d01c8.  v0:= new `java.lang.StringBuilder`;
  #L0d01cc.  if v5 <= 0 then goto L0d0210;
  #L0d01d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d01d6.  v3:= v6.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d01da.  call temp:= `toString-impl`(v3) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0d01e0.  v1:= temp @kind object;
  #L0d01e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d01e8.  v1:= ".." @kind object;
  #L0d01ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d01f2.  v3:= v6.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d01f6.  call temp:= `toString-impl`(v3) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0d01fc.  v1:= temp @kind object;
  #L0d01fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d0204.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d020a.  v1:= v6.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d020e.  goto L0d0250;
  #L0d0210.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d0216.  v3:= v6.`kotlin.ranges.ULongProgression.a` @type ^`long` @kind wide;
  #L0d021a.  call temp:= `toString-impl`(v3) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0d0220.  v1:= temp @kind object;
  #L0d0222.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d0228.  v1:= " downTo " @kind object;
  #L0d022c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d0232.  v3:= v6.`kotlin.ranges.ULongProgression.b` @type ^`long` @kind wide;
  #L0d0236.  call temp:= `toString-impl`(v3) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L0d023c.  v1:= temp @kind object;
  #L0d023e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d0244.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d024a.  v1:= v6.`kotlin.ranges.ULongProgression.c` @type ^`long` @kind wide;
  #L0d024e.  v1:= -v1 @kind long;
  #L0d0250.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d0256.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d025c.  v0:= temp @kind object;
  #L0d025e.  return v0 @kind object;
}
