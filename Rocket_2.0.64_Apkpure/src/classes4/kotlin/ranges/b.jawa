record `kotlin.ranges.b` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `float` `kotlin.ranges.b.a` @AccessFlag PRIVATE_FINAL;
  `float` `kotlin.ranges.b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.b` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/b;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cc71c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cc722.  v0.`kotlin.ranges.b.a` @type ^`float` := v1;
  #L0cc726.  v0.`kotlin.ranges.b.b` @type ^`float` := v2;
  #L0cc72a.  return @kind void;
}
procedure `boolean` `a`(`kotlin.ranges.b` v1 @kind this, `float` v2 ) @signature `Lkotlin/ranges/b;.a:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc4c4.  v0:= v1.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc4c8.  v0:= fcmpl(v2, v0);
  #L0cc4cc.  if v0 < 0 then goto L0cc4e0;
  #L0cc4d0.  v0:= v1.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc4d4.  v2:= fcmpg(v2, v0);
  #L0cc4d8.  if v2 > 0 then goto L0cc4e0;
  #L0cc4dc.  v2:= 1I;
  #L0cc4de.  goto L0cc4e2;
  #L0cc4e0.  v2:= 0I;
  #L0cc4e2.  return v2;
}
procedure `java.lang.Float` `b`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.b:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc698.  v0:= v1.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc69c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0cc6a2.  v0:= temp @kind object;
  #L0cc6a4.  return v0 @kind object;
}
procedure `java.lang.Float` `c`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.c:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cc6b8.  v0:= v1.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc6bc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0cc6c2.  v0:= temp @kind object;
  #L0cc6c4.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.b` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/b;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0cc4f4.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0cc4f8.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0cc4fe.  v1:= temp;
  #L0cc500.  call temp:= `a`(v0, v1) @signature `Lkotlin/ranges/b;.a:(F)Z` @kind virtual;
  #L0cc506.  v1:= temp;
  #L0cc508.  return v1;
}
procedure `boolean` `d`(`kotlin.ranges.b` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/b;.d:(FF)Z` @AccessFlag PUBLIC {
    temp;

  #L0cc5bc.  v1:= fcmpg(v1, v2);
  #L0cc5c0.  if v1 > 0 then goto L0cc5c8;
  #L0cc5c4.  v1:= 1I;
  #L0cc5c6.  goto L0cc5ca;
  #L0cc5c8.  v1:= 0I;
  #L0cc5ca.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/ranges/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0cc51c.  v0:= instanceof @variable v5 @type ^`kotlin.ranges.b` @kind boolean;
  #L0cc520.  v1:= 1I;
  #L0cc522.  v2:= 0I;
  #L0cc524.  if v0 == 0 then goto L0cc580;
  #L0cc528.  call temp:= `isEmpty`(v4) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L0cc52e.  v0:= temp;
  #L0cc530.  if v0 == 0 then goto L0cc546;
  #L0cc534.  v0:= v5 @kind object;
  #L0cc536.  v0:= (`kotlin.ranges.b`) v0 @kind object;
  #L0cc53a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L0cc540.  v0:= temp;
  #L0cc542.  if v0 != 0 then goto L0cc582;
  #L0cc546.  v0:= v4.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc54a.  v5:= (`kotlin.ranges.b`) v5 @kind object;
  #L0cc54e.  v3:= v5.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc552.  v0:= fcmpg(v0, v3);
  #L0cc556.  if v0 != 0 then goto L0cc55e;
  #L0cc55a.  v0:= 1I;
  #L0cc55c.  goto L0cc560;
  #L0cc55e.  v0:= 0I;
  #L0cc560.  if v0 == 0 then goto L0cc580;
  #L0cc564.  v0:= v4.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc568.  v5:= v5.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc56c.  v5:= fcmpg(v0, v5);
  #L0cc570.  if v5 != 0 then goto L0cc578;
  #L0cc574.  v5:= 1I;
  #L0cc576.  goto L0cc57a;
  #L0cc578.  v5:= 0I;
  #L0cc57a.  if v5 == 0 then goto L0cc580;
  #L0cc57e.  goto L0cc582;
  #L0cc580.  v1:= 0I;
  #L0cc582.  return v1;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc660.  call temp:= `b`(v1) @signature `Lkotlin/ranges/b;.b:()Ljava/lang/Float;` @kind virtual;
  #L0cc666.  v0:= temp @kind object;
  #L0cc668.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0cc67c.  call temp:= `c`(v1) @signature `Lkotlin/ranges/b;.c:()Ljava/lang/Float;` @kind virtual;
  #L0cc682.  v0:= temp @kind object;
  #L0cc684.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc610.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L0cc616.  v0:= temp;
  #L0cc618.  if v0 == 0 then goto L0cc620;
  #L0cc61c.  v0:= -1I;
  #L0cc61e.  goto L0cc64e;
  #L0cc620.  v0:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc624.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0cc62a.  v0:= temp @kind object;
  #L0cc62c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc632.  v0:= temp;
  #L0cc634.  v0:= v0 * 31;
  #L0cc638.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc63c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L0cc642.  v1:= temp @kind object;
  #L0cc644.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0cc64a.  v1:= temp;
  #L0cc64c.  v0:= v0 + v1 @kind int;
  #L0cc64e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc594.  v0:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc598.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc59c.  v0:= fcmpg(v0, v1);
  #L0cc5a0.  if v0 <= 0 then goto L0cc5a8;
  #L0cc5a4.  v0:= 1I;
  #L0cc5a6.  goto L0cc5aa;
  #L0cc5a8.  v0:= 0I;
  #L0cc5aa.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.b` v0 @kind this, `java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/b;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0cc5dc.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0cc5e0.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0cc5e6.  v1:= temp;
  #L0cc5e8.  v2:= (`java.lang.Number`) v2 @kind object;
  #L0cc5ec.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L0cc5f2.  v2:= temp;
  #L0cc5f4.  call temp:= `d`(v0, v1, v2) @signature `Lkotlin/ranges/b;.d:(FF)Z` @kind virtual;
  #L0cc5fa.  v1:= temp;
  #L0cc5fc.  return v1;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cc6d8.  v0:= new `java.lang.StringBuilder`;
  #L0cc6dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cc6e2.  v1:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L0cc6e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc6ec.  v1:= ".." @kind object;
  #L0cc6f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc6f6.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L0cc6fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cc700.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cc706.  v0:= temp @kind object;
  #L0cc708.  return v0 @kind object;
}
