record `kotlin.ranges.IntRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.IntProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.IntRange$Companion` `@@kotlin.ranges.IntRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.IntRange` `@@kotlin.ranges.IntRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0ccfc0.  v0:= new `kotlin.ranges.IntRange$Companion`;
  #L0ccfc4.  v1:= 0I;
  #L0ccfc6.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0ccfcc.  `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` := v0 @kind object;
  #L0ccfd0.  v0:= new `kotlin.ranges.IntRange`;
  #L0ccfd4.  v1:= 1I;
  #L0ccfd6.  v2:= 0I;
  #L0ccfd8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0ccfde.  `@@kotlin.ranges.IntRange.d` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L0ccfe2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ccff4.  v0:= 1I;
  #L0ccff6.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @kind direct;
  #L0ccffc.  return @kind void;
}
procedure `kotlin.ranges.IntRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/IntRange;.access$getEMPTY$cp:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0ccfa8.  v0:= `@@kotlin.ranges.IntRange.d` @type ^`kotlin.ranges.IntRange` @kind object;
  #L0ccfac.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 ) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ccdb4.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0ccdba.  v0:= temp;
  #L0ccdbc.  if v0 > v2 then goto L0ccdd0;
  #L0ccdc0.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0ccdc6.  v0:= temp;
  #L0ccdc8.  if v2 > v0 then goto L0ccdd0;
  #L0ccdcc.  v2:= 1I;
  #L0ccdce.  goto L0ccdd2;
  #L0ccdd0.  v2:= 0I;
  #L0ccdd2.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/IntRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ccde4.  v1:= (`java.lang.Number`) v1 @kind object;
  #L0ccde8.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L0ccdee.  v1:= temp;
  #L0ccdf0.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0ccdf6.  v1:= temp;
  #L0ccdf8.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.IntRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cce0c.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntRange` @kind boolean;
  #L0cce10.  if v0 == 0 then goto L0cce62;
  #L0cce14.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L0cce1a.  v0:= temp;
  #L0cce1c.  if v0 == 0 then goto L0cce32;
  #L0cce20.  v0:= v3 @kind object;
  #L0cce22.  v0:= (`kotlin.ranges.IntRange`) v0 @kind object;
  #L0cce26.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L0cce2c.  v0:= temp;
  #L0cce2e.  if v0 != 0 then goto L0cce5e;
  #L0cce32.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cce38.  v0:= temp;
  #L0cce3a.  v3:= (`kotlin.ranges.IntRange`) v3 @kind object;
  #L0cce3e.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cce44.  v1:= temp;
  #L0cce46.  if v0 != v1 then goto L0cce62;
  #L0cce4a.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cce50.  v0:= temp;
  #L0cce52.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cce58.  v3:= temp;
  #L0cce5a.  if v0 != v3 then goto L0cce62;
  #L0cce5e.  v3:= 1I;
  #L0cce60.  goto L0cce64;
  #L0cce62.  v3:= 0I;
  #L0cce64.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0ccedc.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @kind virtual;
  #L0ccee2.  v0:= temp @kind object;
  #L0ccee4.  return v0 @kind object;
}
procedure `java.lang.Integer` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ccf14.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0ccf1a.  v0:= temp;
  #L0ccf1c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0ccf22.  v0:= temp @kind object;
  #L0ccf24.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0ccef8.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @kind virtual;
  #L0ccefe.  v0:= temp @kind object;
  #L0ccf00.  return v0 @kind object;
}
procedure `java.lang.Integer` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ccf38.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0ccf3e.  v0:= temp;
  #L0ccf40.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0ccf46.  v0:= temp @kind object;
  #L0ccf48.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ccea4.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L0cceaa.  v0:= temp;
  #L0cceac.  if v0 == 0 then goto L0cceb4;
  #L0cceb0.  v0:= -1I;
  #L0cceb2.  goto L0cceca;
  #L0cceb4.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cceba.  v0:= temp;
  #L0ccebc.  v0:= v0 * 31;
  #L0ccec0.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0ccec6.  v1:= temp;
  #L0ccec8.  v0:= v0 + v1 @kind int;
  #L0cceca.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cce78.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cce7e.  v0:= temp;
  #L0cce80.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cce86.  v1:= temp;
  #L0cce88.  if v0 <= v1 then goto L0cce90;
  #L0cce8c.  v0:= 1I;
  #L0cce8e.  goto L0cce92;
  #L0cce90.  v0:= 0I;
  #L0cce92.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ccf5c.  v0:= new `java.lang.StringBuilder`;
  #L0ccf60.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0ccf66.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0ccf6c.  v1:= temp;
  #L0ccf6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccf74.  v1:= ".." @kind object;
  #L0ccf78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccf7e.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0ccf84.  v1:= temp;
  #L0ccf86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0ccf8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0ccf92.  v0:= temp @kind object;
  #L0ccf94.  return v0 @kind object;
}
