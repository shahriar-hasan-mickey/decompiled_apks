record `kotlin.jvm.internal.CallableReference` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.reflect.KCallable` @kind interface, `java.io.Serializable` @kind interface {
  `boolean` `kotlin.jvm.internal.CallableReference.isTopLevel` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.name` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `kotlin.jvm.internal.CallableReference.owner` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.jvm.internal.CallableReference.receiver` @AccessFlag PROTECTED_FINAL;
  `kotlin.reflect.KCallable` `kotlin.jvm.internal.CallableReference.reflected` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.signature` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Object` `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/CallableReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c36cc.  call temp:= `a`() @signature `Lkotlin/jvm/internal/CallableReference$a;.a:()Lkotlin/jvm/internal/CallableReference$a;` @kind static;
  #L0c36d2.  v0:= temp @kind object;
  #L0c36d4.  `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` := v0 @kind object;
  #L0c36d8.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c36ec.  v0:= `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` @kind object;
  #L0c36f0.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L0c36f6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0c3708.  v2:= 0I;
  #L0c370a.  v3:= 0I;
  #L0c370c.  v4:= 0I;
  #L0c370e.  v5:= 0I;
  #L0c3710.  v0:= v6 @kind object;
  #L0c3712.  v1:= v7 @kind object;
  #L0c3714.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L0c371a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L0c372c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c3732.  v0.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` := v1 @kind object;
  #L0c3736.  v0.`kotlin.jvm.internal.CallableReference.owner` @type ^`java.lang.Class` := v2 @kind object;
  #L0c373a.  v0.`kotlin.jvm.internal.CallableReference.name` @type ^`java.lang.String` := v3 @kind object;
  #L0c373e.  v0.`kotlin.jvm.internal.CallableReference.signature` @type ^`java.lang.String` := v4 @kind object;
  #L0c3742.  v0.`kotlin.jvm.internal.CallableReference.isTopLevel` @type ^`boolean` := v5 @kind boolean;
  #L0c3746.  return @kind void;
}
procedure `java.lang.Object` `call`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c34fc.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3502.  v0:= temp @kind object;
  #L0c3504.  call temp:= `call`(v0, v2) @signature `Lkotlin/reflect/KCallable;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0c350a.  v2:= temp @kind object;
  #L0c350c.  return v2 @kind object;
}
procedure `java.lang.Object` `callBy`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c3520.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3526.  v0:= temp @kind object;
  #L0c3528.  call temp:= `callBy`(v0, v2) @signature `Lkotlin/reflect/KCallable;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @kind interface;
  #L0c352e.  v2:= temp @kind object;
  #L0c3530.  return v2 @kind object;
}
procedure `kotlin.reflect.KCallable` `compute`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c35f8.  v0:= v1.`kotlin.jvm.internal.CallableReference.reflected` @type ^`kotlin.reflect.KCallable` @kind object;
  #L0c35fc.  if v0 != 0 then goto L0c360c;
  #L0c3600.  call temp:= `computeReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3606.  v0:= temp @kind object;
  #L0c3608.  v1.`kotlin.jvm.internal.CallableReference.reflected` @type ^`kotlin.reflect.KCallable` := v0 @kind object;
  #L0c360c.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `computeReflected`() @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c358c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3592.  v0:= temp @kind object;
  #L0c3594.  call temp:= `getAnnotations`(v0) @signature `Lkotlin/reflect/KAnnotatedElement;.getAnnotations:()Ljava/util/List;` @kind interface;
  #L0c359a.  v0:= temp @kind object;
  #L0c359c.  return v0 @kind object;
}
procedure `java.lang.Object` `getBoundReceiver`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getBoundReceiver:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c3544.  v0:= v1.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` @kind object;
  #L0c3548.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c355c.  v0:= v1.`kotlin.jvm.internal.CallableReference.name` @type ^`java.lang.String` @kind object;
  #L0c3560.  return v0 @kind object;
}
procedure `kotlin.reflect.KDeclarationContainer` `getOwner`(`kotlin.jvm.internal.CallableReference` v2 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c364c.  v0:= v2.`kotlin.jvm.internal.CallableReference.owner` @type ^`java.lang.Class` @kind object;
  #L0c3650.  if v0 != 0 then goto L0c3658;
  #L0c3654.  v0:= 0I;
  #L0c3656.  goto L0c3672;
  #L0c3658.  v1:= v2.`kotlin.jvm.internal.CallableReference.isTopLevel` @type ^`boolean` @kind boolean;
  #L0c365c.  if v1 == 0 then goto L0c366a;
  #L0c3660.  call temp:= `getOrCreateKotlinPackage`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinPackage:(Ljava/lang/Class;)Lkotlin/reflect/KDeclarationContainer;` @kind static;
  #L0c3666.  v0:= temp @kind object;
  #L0c3668.  goto L0c3672;
  #L0c366a.  call temp:= `getOrCreateKotlinClass`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinClass:(Ljava/lang/Class;)Lkotlin/reflect/KClass;` @kind static;
  #L0c3670.  v0:= temp @kind object;
  #L0c3672.  return v0 @kind object;
}
procedure `java.util.List` `getParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c35b0.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c35b6.  v0:= temp @kind object;
  #L0c35b8.  call temp:= `getParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getParameters:()Ljava/util/List;` @kind interface;
  #L0c35be.  v0:= temp @kind object;
  #L0c35c0.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `getReflected`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0c3620.  call temp:= `compute`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3626.  v0:= temp @kind object;
  #L0c3628.  if v0 == v1 then goto L0c362e;
  #L0c362c.  return v0 @kind object;
  #L0c362e.  v0:= new `kotlin.jvm.KotlinReflectionNotSupportedError`;
  #L0c3632.  call `<init>`(v0) @signature `Lkotlin/jvm/KotlinReflectionNotSupportedError;.<init>:()V` @kind direct;
  #L0c3638.  throw v0;
}
procedure `kotlin.reflect.KType` `getReturnType`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReturnType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c3684.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c368a.  v0:= temp @kind object;
  #L0c368c.  call temp:= `getReturnType`(v0) @signature `Lkotlin/reflect/KCallable;.getReturnType:()Lkotlin/reflect/KType;` @kind interface;
  #L0c3692.  v0:= temp @kind object;
  #L0c3694.  return v0 @kind object;
}
procedure `java.lang.String` `getSignature`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c3574.  v0:= v1.`kotlin.jvm.internal.CallableReference.signature` @type ^`java.lang.String` @kind object;
  #L0c3578.  return v0 @kind object;
}
procedure `java.util.List` `getTypeParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getTypeParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c35d4.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c35da.  v0:= temp @kind object;
  #L0c35dc.  call temp:= `getTypeParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getTypeParameters:()Ljava/util/List;` @kind interface;
  #L0c35e2.  v0:= temp @kind object;
  #L0c35e4.  return v0 @kind object;
}
procedure `kotlin.reflect.KVisibility` `getVisibility`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getVisibility:()Lkotlin/reflect/KVisibility;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c36a8.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c36ae.  v0:= temp @kind object;
  #L0c36b0.  call temp:= `getVisibility`(v0) @signature `Lkotlin/reflect/KCallable;.getVisibility:()Lkotlin/reflect/KVisibility;` @kind interface;
  #L0c36b6.  v0:= temp @kind object;
  #L0c36b8.  return v0 @kind object;
}
procedure `boolean` `isAbstract`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isAbstract:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c346c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3472.  v0:= temp @kind object;
  #L0c3474.  call temp:= `isAbstract`(v0) @signature `Lkotlin/reflect/KCallable;.isAbstract:()Z` @kind interface;
  #L0c347a.  v0:= temp;
  #L0c347c.  return v0;
}
procedure `boolean` `isFinal`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isFinal:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c3490.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c3496.  v0:= temp @kind object;
  #L0c3498.  call temp:= `isFinal`(v0) @signature `Lkotlin/reflect/KCallable;.isFinal:()Z` @kind interface;
  #L0c349e.  v0:= temp;
  #L0c34a0.  return v0;
}
procedure `boolean` `isOpen`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c34b4.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c34ba.  v0:= temp @kind object;
  #L0c34bc.  call temp:= `isOpen`(v0) @signature `Lkotlin/reflect/KCallable;.isOpen:()Z` @kind interface;
  #L0c34c2.  v0:= temp;
  #L0c34c4.  return v0;
}
procedure `boolean` `isSuspend`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isSuspend:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c34d8.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c34de.  v0:= temp @kind object;
  #L0c34e0.  call temp:= `isSuspend`(v0) @signature `Lkotlin/reflect/KCallable;.isSuspend:()Z` @kind interface;
  #L0c34e6.  v0:= temp;
  #L0c34e8.  return v0;
}
