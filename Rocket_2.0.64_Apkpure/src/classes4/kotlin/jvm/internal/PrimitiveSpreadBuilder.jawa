record `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0c7358.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c735e.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int` := v1;
  #L0c7362.  v1:= new `java.lang.Object`[v1];
  #L0c7366.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L0c736a.  return @kind void;
}
procedure `void` `addSpread`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.addSpread:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0c737c.  v0:= "spreadArgument" @kind object;
  #L0c7380.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c7386.  v0:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`java.lang.Object`[] @kind object;
  #L0c738a.  v1:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`int`;
  #L0c738e.  v2:= v1 + 1;
  #L0c7392.  v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`int` := v2;
  #L0c7396.  v0[v1]:= v4 @kind object;
  #L0c739a.  return @kind void;
}
procedure `int` `getPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v1 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L0c7244.  v0:= v1.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`int`;
  #L0c7248.  return v0;
}
procedure `int` `getSize`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L0c73ac.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`int` := v1;
  #L0c73b0.  return @kind void;
}
procedure `int` `size`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v5 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0c725c.  v0:= new `kotlin.ranges.IntRange`;
  #L0c7260.  v1:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int`;
  #L0c7264.  v2:= 1I;
  #L0c7266.  v1:= v1 - v2 @kind int;
  #L0c7268.  v3:= 0I;
  #L0c726a.  call `<init>`(v0, v3, v1) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0c7270.  call temp:= `iterator`(v0) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @kind virtual;
  #L0c7276.  v0:= temp @kind object;
  #L0c7278.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0c727e.  v1:= temp;
  #L0c7280.  if v1 == 0 then goto L0c72a8;
  #L0c7284.  call temp:= `nextInt`(v0) @signature `Lkotlin/collections/IntIterator;.nextInt:()I` @kind virtual;
  #L0c728a.  v1:= temp;
  #L0c728c.  v4:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`java.lang.Object`[] @kind object;
  #L0c7290.  v1:= v4[v1] @kind object;
  #L0c7294.  if v1 == 0 then goto L0c72a2;
  #L0c7298.  call temp:= `getSize`(v5, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L0c729e.  v1:= temp;
  #L0c72a0.  goto L0c72a4;
  #L0c72a2.  v1:= 1I;
  #L0c72a4.  v3:= v3 + v1 @kind int;
  #L0c72a6.  goto L0c7278;
  #L0c72a8.  return v3;
}
procedure `java.lang.Object` `toArray`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0c72bc.  v0:= "values" @kind object;
  #L0c72c0.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c72c6.  v0:= "result" @kind object;
  #L0c72ca.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c72d0.  v0:= new `kotlin.ranges.IntRange`;
  #L0c72d4.  v1:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int`;
  #L0c72d8.  v1:= v1 + -1;
  #L0c72dc.  v2:= 0I;
  #L0c72de.  call `<init>`(v0, v2, v1) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0c72e4.  call temp:= `iterator`(v0) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @kind virtual;
  #L0c72ea.  v0:= temp @kind object;
  #L0c72ec.  v1:= 0I;
  #L0c72ee.  v3:= 0I;
  #L0c72f0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0c72f6.  v4:= temp;
  #L0c72f8.  if v4 == 0 then goto L0c7336;
  #L0c72fc.  call temp:= `nextInt`(v0) @signature `Lkotlin/collections/IntIterator;.nextInt:()I` @kind virtual;
  #L0c7302.  v4:= temp;
  #L0c7304.  v5:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`java.lang.Object`[] @kind object;
  #L0c7308.  v5:= v5[v4] @kind object;
  #L0c730c.  if v5 == 0 then goto L0c72f0;
  #L0c7310.  if v1 >= v4 then goto L0c7320;
  #L0c7314.  v6:= v4 - v1 @kind int;
  #L0c7318.  call `arraycopy`(v8, v1, v9, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L0c731e.  v3:= v3 + v6 @kind int;
  #L0c7320.  call temp:= `getSize`(v7, v5) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L0c7326.  v1:= temp;
  #L0c7328.  call `arraycopy`(v5, v2, v9, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L0c732e.  v3:= v3 + v1 @kind int;
  #L0c7330.  v1:= v4 + 1;
  #L0c7334.  goto L0c72f0;
  #L0c7336.  v0:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int`;
  #L0c733a.  if v1 >= v0 then goto L0c7346;
  #L0c733e.  v0:= v0 - v1 @kind int;
  #L0c7340.  call `arraycopy`(v8, v1, v9, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L0c7346.  return v9 @kind object;
}
