record `kotlin.jvm.internal.TypeReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KType` @kind interface {
  `kotlin.reflect.KClassifier` `kotlin.jvm.internal.TypeReference.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `kotlin.jvm.internal.TypeReference.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KType` `kotlin.jvm.internal.TypeReference.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.TypeReference.d` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.jvm.internal.TypeReference$Companion` `@@kotlin.jvm.internal.TypeReference.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_MARKED_NULLABLE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_MUTABLE_COLLECTION_TYPE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_NOTHING_TYPE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/TypeReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0c9a04.  v0:= new `kotlin.jvm.internal.TypeReference$Companion`;
  #L0c9a08.  v1:= 0I;
  #L0c9a0a.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0c9a10.  `@@kotlin.jvm.internal.TypeReference.Companion` @type ^`kotlin.jvm.internal.TypeReference$Companion` := v0 @kind object;
  #L0c9a14.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `kotlin.reflect.KClassifier` v2 @kind object, `java.util.List` v3 @kind object, `kotlin.reflect.KType` v4 @kind object, `int` v5 ) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Lkotlin/reflect/KType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c9a58.  v0:= "classifier" @kind object;
  #L0c9a5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c9a62.  v0:= "arguments" @kind object;
  #L0c9a66.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c9a6c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c9a72.  v1.`kotlin.jvm.internal.TypeReference.a` @type ^`kotlin.reflect.KClassifier` := v2 @kind object;
  #L0c9a76.  v1.`kotlin.jvm.internal.TypeReference.b` @type ^`java.util.List` := v3 @kind object;
  #L0c9a7a.  v1.`kotlin.jvm.internal.TypeReference.c` @type ^`kotlin.reflect.KType` := v4 @kind object;
  #L0c9a7e.  v1.`kotlin.jvm.internal.TypeReference.d` @type ^`int` := v5;
  #L0c9a82.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `kotlin.reflect.KClassifier` v2 @kind object, `java.util.List` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c9a28.  v0:= "classifier" @kind object;
  #L0c9a2c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c9a32.  v0:= "arguments" @kind object;
  #L0c9a36.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c9a3c.  v0:= 0I;
  #L0c9a3e.  call `<init>`(v1, v2, v3, v0, v4) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Lkotlin/reflect/KType;I)V` @kind direct;
  #L0c9a44.  return @kind void;
}
procedure `java.lang.String` `a`(`kotlin.jvm.internal.TypeReference` v3 @kind this, `kotlin.reflect.KTypeProjection` v4 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.a:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0c97c0.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L0c97c6.  v0:= temp @kind object;
  #L0c97c8.  if v0 != 0 then goto L0c97d2;
  #L0c97cc.  v4:= "*" @kind object;
  #L0c97d0.  return v4 @kind object;
  #L0c97d2.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L0c97d8.  v0:= temp @kind object;
  #L0c97da.  v1:= instanceof @variable v0 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L0c97de.  if v1 == 0 then goto L0c97e8;
  #L0c97e2.  v0:= (`kotlin.jvm.internal.TypeReference`) v0 @kind object;
  #L0c97e6.  goto L0c97ea;
  #L0c97e8.  v0:= 0I;
  #L0c97ea.  v1:= 1I;
  #L0c97ec.  if v0 == 0 then goto L0c97fc;
  #L0c97f0.  call temp:= `b`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Z)Ljava/lang/String;` @kind direct;
  #L0c97f6.  v0:= temp @kind object;
  #L0c97f8.  if v0 != 0 then goto L0c980c;
  #L0c97fc.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L0c9802.  v0:= temp @kind object;
  #L0c9804.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0c980a.  v0:= temp @kind object;
  #L0c980c.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L0c9812.  v4:= temp @kind object;
  #L0c9814.  v2:= `@@kotlin.jvm.internal.TypeReference$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0c9818.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0c981e.  v4:= temp;
  #L0c9820.  v4:= v2[v4];
  #L0c9824.  if v4 == v1 then goto L0c9886;
  #L0c9828.  v1:= 2I;
  #L0c982a.  if v4 == v1 then goto L0c9864;
  #L0c982e.  v1:= 3I;
  #L0c9830.  if v4 != v1 then goto L0c9858;
  #L0c9834.  v4:= new `java.lang.StringBuilder`;
  #L0c9838.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c983e.  v1:= "out " @kind object;
  #L0c9842.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9848.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c984e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c9854.  v0:= temp @kind object;
  #L0c9856.  goto L0c9886;
  #L0c9858.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L0c985c.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0c9862.  throw v4;
  #L0c9864.  v4:= new `java.lang.StringBuilder`;
  #L0c9868.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c986e.  v1:= "in " @kind object;
  #L0c9872.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9878.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c987e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c9884.  v0:= temp @kind object;
  #L0c9886.  return v0 @kind object;
}
procedure `java.lang.String` `access$asString`(`kotlin.jvm.internal.TypeReference` v0 @kind object, `kotlin.reflect.KTypeProjection` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.access$asString:(Lkotlin/jvm/internal/TypeReference;Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0c95b8.  call temp:= `a`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.a:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @kind direct;
  #L0c95be.  v0:= temp @kind object;
  #L0c95c0.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`kotlin.jvm.internal.TypeReference` v11 @kind this, `boolean` v12 ) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Z)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L0c95d4.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c95da.  v0:= temp @kind object;
  #L0c95dc.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L0c95e0.  v2:= 0I;
  #L0c95e2.  if v1 == 0 then goto L0c95ec;
  #L0c95e6.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L0c95ea.  goto L0c95ee;
  #L0c95ec.  v0:= v2 @kind object;
  #L0c95ee.  if v0 == 0 then goto L0c95fa;
  #L0c95f2.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L0c95f8.  v2:= temp @kind object;
  #L0c95fa.  if v2 != 0 then goto L0c9610;
  #L0c95fe.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c9604.  v12:= temp @kind object;
  #L0c9606.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c960c.  v12:= temp @kind object;
  #L0c960e.  goto L0c9678;
  #L0c9610.  v0:= v11.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c9614.  v0:= v0 ^& 4;
  #L0c9618.  if v0 == 0 then goto L0c9622;
  #L0c961c.  v12:= "kotlin.Nothing" @kind object;
  #L0c9620.  goto L0c9678;
  #L0c9622.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L0c9628.  v0:= temp;
  #L0c962a.  if v0 == 0 then goto L0c9638;
  #L0c962e.  call temp:= `c`(v11, v2) @signature `Lkotlin/jvm/internal/TypeReference;.c:(Ljava/lang/Class;)Ljava/lang/String;` @kind direct;
  #L0c9634.  v12:= temp @kind object;
  #L0c9636.  goto L0c9678;
  #L0c9638.  if v12 == 0 then goto L0c9670;
  #L0c963c.  call temp:= `isPrimitive`(v2) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L0c9642.  v12:= temp;
  #L0c9644.  if v12 == 0 then goto L0c9670;
  #L0c9648.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c964e.  v12:= temp @kind object;
  #L0c9650.  v0:= "null cannot be cast to non-null type kotlin.reflect.KClass<*>" @kind object;
  #L0c9654.  call `checkNotNull`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c965a.  v12:= (`kotlin.reflect.KClass`) v12 @kind object;
  #L0c965e.  call temp:= `getJavaObjectType`(v12) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L0c9664.  v12:= temp @kind object;
  #L0c9666.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c966c.  v12:= temp @kind object;
  #L0c966e.  goto L0c9678;
  #L0c9670.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c9676.  v12:= temp @kind object;
  #L0c9678.  call temp:= `getArguments`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L0c967e.  v0:= temp @kind object;
  #L0c9680.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0c9686.  v0:= temp;
  #L0c9688.  v1:= "" @kind object;
  #L0c968c.  if v0 == 0 then goto L0c9694;
  #L0c9690.  v0:= v1 @kind object;
  #L0c9692.  goto L0c96c4;
  #L0c9694.  call temp:= `getArguments`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L0c969a.  v2:= temp @kind object;
  #L0c969c.  v6:= 0I;
  #L0c969e.  v7:= 0I;
  #L0c96a0.  v8:= new `kotlin.jvm.internal.TypeReference$a`;
  #L0c96a4.  call `<init>`(v8, v11) @signature `Lkotlin/jvm/internal/TypeReference$a;.<init>:(Lkotlin/jvm/internal/TypeReference;)V` @kind direct;
  #L0c96aa.  v9:= 24I;
  #L0c96ae.  v10:= 0I;
  #L0c96b0.  v3:= ", " @kind object;
  #L0c96b4.  v4:= "<" @kind object;
  #L0c96b8.  v5:= ">" @kind object;
  #L0c96bc.  call temp:= `joinToString$default`(v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0c96c2.  v0:= temp @kind object;
  #L0c96c4.  call temp:= `isMarkedNullable`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L0c96ca.  v2:= temp;
  #L0c96cc.  if v2 == 0 then goto L0c96d4;
  #L0c96d0.  v1:= "?" @kind object;
  #L0c96d4.  v2:= new `java.lang.StringBuilder`;
  #L0c96d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c96de.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c96e4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c96ea.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c96f0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c96f6.  v12:= temp @kind object;
  #L0c96f8.  v0:= v11.`kotlin.jvm.internal.TypeReference.c` @type ^`kotlin.reflect.KType` @kind object;
  #L0c96fc.  v1:= instanceof @variable v0 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L0c9700.  if v1 == 0 then goto L0c97ae;
  #L0c9704.  v0:= (`kotlin.jvm.internal.TypeReference`) v0 @kind object;
  #L0c9708.  v1:= 1I;
  #L0c970a.  call temp:= `b`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Z)Ljava/lang/String;` @kind direct;
  #L0c9710.  v0:= temp @kind object;
  #L0c9712.  call temp:= `areEqual`(v0, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c9718.  v1:= temp;
  #L0c971a.  if v1 == 0 then goto L0c9720;
  #L0c971e.  goto L0c97ae;
  #L0c9720.  v1:= new `java.lang.StringBuilder`;
  #L0c9724.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c972a.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9730.  v2:= 63I;
  #L0c9734.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c973a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c9740.  v1:= temp @kind object;
  #L0c9742.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c9748.  v1:= temp;
  #L0c974a.  if v1 == 0 then goto L0c9772;
  #L0c974e.  v0:= new `java.lang.StringBuilder`;
  #L0c9752.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c9758.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c975e.  v12:= 33I;
  #L0c9762.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9768.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c976e.  v12:= temp @kind object;
  #L0c9770.  goto L0c97ae;
  #L0c9772.  v1:= new `java.lang.StringBuilder`;
  #L0c9776.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c977c.  v2:= 40I;
  #L0c9780.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9786.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c978c.  v12:= ".." @kind object;
  #L0c9790.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9796.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c979c.  v12:= 41I;
  #L0c97a0.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c97a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c97ac.  v12:= temp @kind object;
  #L0c97ae.  return v12 @kind object;
}
procedure `java.lang.String` `c`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.c:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0c9898.  v0:= constclass @type ^`boolean`[] @kind object;
  #L0c989c.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c98a2.  v0:= temp;
  #L0c98a4.  if v0 == 0 then goto L0c98ae;
  #L0c98a8.  v2:= "kotlin.BooleanArray" @kind object;
  #L0c98ac.  goto L0c994c;
  #L0c98ae.  v0:= constclass @type ^`char`[] @kind object;
  #L0c98b2.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c98b8.  v0:= temp;
  #L0c98ba.  if v0 == 0 then goto L0c98c4;
  #L0c98be.  v2:= "kotlin.CharArray" @kind object;
  #L0c98c2.  goto L0c994c;
  #L0c98c4.  v0:= constclass @type ^`byte`[] @kind object;
  #L0c98c8.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c98ce.  v0:= temp;
  #L0c98d0.  if v0 == 0 then goto L0c98da;
  #L0c98d4.  v2:= "kotlin.ByteArray" @kind object;
  #L0c98d8.  goto L0c994c;
  #L0c98da.  v0:= constclass @type ^`short`[] @kind object;
  #L0c98de.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c98e4.  v0:= temp;
  #L0c98e6.  if v0 == 0 then goto L0c98f0;
  #L0c98ea.  v2:= "kotlin.ShortArray" @kind object;
  #L0c98ee.  goto L0c994c;
  #L0c98f0.  v0:= constclass @type ^`int`[] @kind object;
  #L0c98f4.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c98fa.  v0:= temp;
  #L0c98fc.  if v0 == 0 then goto L0c9906;
  #L0c9900.  v2:= "kotlin.IntArray" @kind object;
  #L0c9904.  goto L0c994c;
  #L0c9906.  v0:= constclass @type ^`float`[] @kind object;
  #L0c990a.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c9910.  v0:= temp;
  #L0c9912.  if v0 == 0 then goto L0c991c;
  #L0c9916.  v2:= "kotlin.FloatArray" @kind object;
  #L0c991a.  goto L0c994c;
  #L0c991c.  v0:= constclass @type ^`long`[] @kind object;
  #L0c9920.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c9926.  v0:= temp;
  #L0c9928.  if v0 == 0 then goto L0c9932;
  #L0c992c.  v2:= "kotlin.LongArray" @kind object;
  #L0c9930.  goto L0c994c;
  #L0c9932.  v0:= constclass @type ^`double`[] @kind object;
  #L0c9936.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c993c.  v2:= temp;
  #L0c993e.  if v2 == 0 then goto L0c9948;
  #L0c9942.  v2:= "kotlin.DoubleArray" @kind object;
  #L0c9946.  goto L0c994c;
  #L0c9948.  v2:= "kotlin.Array" @kind object;
  #L0c994c.  return v2 @kind object;
}
procedure `void` `getFlags$kotlin_stdlib$annotations`() @signature `Lkotlin/jvm/internal/TypeReference;.getFlags$kotlin_stdlib$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0c9a94.  return @kind void;
}
procedure `void` `getPlatformTypeUpperBound$kotlin_stdlib$annotations`() @signature `Lkotlin/jvm/internal/TypeReference;.getPlatformTypeUpperBound$kotlin_stdlib$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0c9aa8.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c94ac.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L0c94b0.  if v0 == 0 then goto L0c9514;
  #L0c94b4.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c94ba.  v0:= temp @kind object;
  #L0c94bc.  v3:= (`kotlin.jvm.internal.TypeReference`) v3 @kind object;
  #L0c94c0.  call temp:= `getClassifier`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c94c6.  v1:= temp @kind object;
  #L0c94c8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c94ce.  v0:= temp;
  #L0c94d0.  if v0 == 0 then goto L0c9514;
  #L0c94d4.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L0c94da.  v0:= temp @kind object;
  #L0c94dc.  call temp:= `getArguments`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L0c94e2.  v1:= temp @kind object;
  #L0c94e4.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c94ea.  v0:= temp;
  #L0c94ec.  if v0 == 0 then goto L0c9514;
  #L0c94f0.  v0:= v2.`kotlin.jvm.internal.TypeReference.c` @type ^`kotlin.reflect.KType` @kind object;
  #L0c94f4.  v1:= v3.`kotlin.jvm.internal.TypeReference.c` @type ^`kotlin.reflect.KType` @kind object;
  #L0c94f8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c94fe.  v0:= temp;
  #L0c9500.  if v0 == 0 then goto L0c9514;
  #L0c9504.  v0:= v2.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c9508.  v3:= v3.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c950c.  if v0 != v3 then goto L0c9514;
  #L0c9510.  v3:= 1I;
  #L0c9512.  goto L0c9516;
  #L0c9514.  v3:= 0I;
  #L0c9516.  return v3;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c99a0.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L0c99a6.  v0:= temp @kind object;
  #L0c99a8.  return v0 @kind object;
}
procedure `java.util.List` `getArguments`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c99bc.  v0:= v1.`kotlin.jvm.internal.TypeReference.b` @type ^`java.util.List` @kind object;
  #L0c99c0.  return v0 @kind object;
}
procedure `kotlin.reflect.KClassifier` `getClassifier`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c99d4.  v0:= v1.`kotlin.jvm.internal.TypeReference.a` @type ^`kotlin.reflect.KClassifier` @kind object;
  #L0c99d8.  return v0 @kind object;
}
procedure `int` `getFlags$kotlin_stdlib`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getFlags$kotlin_stdlib:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0c954c.  v0:= v1.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c9550.  return v0;
}
procedure `kotlin.reflect.KType` `getPlatformTypeUpperBound$kotlin_stdlib`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getPlatformTypeUpperBound$kotlin_stdlib:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0c99ec.  v0:= v1.`kotlin.jvm.internal.TypeReference.c` @type ^`kotlin.reflect.KType` @kind object;
  #L0c99f0.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c9564.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L0c956a.  v0:= temp @kind object;
  #L0c956c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c9572.  v0:= temp;
  #L0c9574.  v0:= v0 * 31;
  #L0c9578.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L0c957e.  v1:= temp @kind object;
  #L0c9580.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c9586.  v1:= temp;
  #L0c9588.  v0:= v0 + v1 @kind int;
  #L0c958a.  v0:= v0 * 31;
  #L0c958e.  v1:= v2.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c9592.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0c9598.  v1:= temp @kind object;
  #L0c959a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c95a0.  v1:= temp;
  #L0c95a2.  v0:= v0 + v1 @kind int;
  #L0c95a4.  return v0;
}
procedure `boolean` `isMarkedNullable`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c9528.  v0:= v2.`kotlin.jvm.internal.TypeReference.d` @type ^`int`;
  #L0c952c.  v1:= 1I;
  #L0c952e.  v0:= v0 ^& v1 @kind int;
  #L0c9530.  if v0 == 0 then goto L0c9536;
  #L0c9534.  goto L0c9538;
  #L0c9536.  v1:= 0I;
  #L0c9538.  return v1;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c9960.  v0:= new `java.lang.StringBuilder`;
  #L0c9964.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c996a.  v1:= 0I;
  #L0c996c.  call temp:= `b`(v2, v1) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Z)Ljava/lang/String;` @kind direct;
  #L0c9972.  v1:= temp @kind object;
  #L0c9974.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c997a.  v1:= " (Kotlin reflection is not available)" @kind object;
  #L0c997e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9984.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c998a.  v0:= temp @kind object;
  #L0c998c.  return v0 @kind object;
}
