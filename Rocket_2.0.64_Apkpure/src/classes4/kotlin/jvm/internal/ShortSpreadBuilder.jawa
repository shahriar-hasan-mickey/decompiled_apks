record `kotlin.jvm.internal.ShortSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `short`[] `kotlin.jvm.internal.ShortSpreadBuilder.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ShortSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0c8580.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L0c8586.  v1:= new `short`[v1];
  #L0c858a.  v0.`kotlin.jvm.internal.ShortSpreadBuilder.d` @type ^`short`[] := v1 @kind object;
  #L0c858e.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.ShortSpreadBuilder` v3 @kind this, `short` v4 ) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.add:(S)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0c85a0.  v0:= v3.`kotlin.jvm.internal.ShortSpreadBuilder.d` @type ^`short`[] @kind object;
  #L0c85a4.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L0c85aa.  v1:= temp;
  #L0c85ac.  v2:= v1 + 1;
  #L0c85b0.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L0c85b6.  v0[v1]:= v4 @kind short;
  #L0c85ba.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.ShortSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0c8510.  v1:= (`short`[]) v1 @kind object;
  #L0c8514.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:([S)I` @kind virtual;
  #L0c851a.  v1:= temp;
  #L0c851c.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.ShortSpreadBuilder` v1 @kind this, `short`[] v2 @kind object) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:([S)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0c8530.  v0:= "<this>" @kind object;
  #L0c8534.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c853a.  v2:= length @variable v2;
  #L0c853c.  return v2;
}
procedure `short`[] `toArray`(`kotlin.jvm.internal.ShortSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.toArray:()[S` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0c8550.  v0:= v2.`kotlin.jvm.internal.ShortSpreadBuilder.d` @type ^`short`[] @kind object;
  #L0c8554.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L0c855a.  v1:= temp;
  #L0c855c.  v1:= new `short`[v1];
  #L0c8560.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0c8566.  v0:= temp @kind object;
  #L0c8568.  v0:= (`short`[]) v0 @kind object;
  #L0c856c.  return v0 @kind object;
}
