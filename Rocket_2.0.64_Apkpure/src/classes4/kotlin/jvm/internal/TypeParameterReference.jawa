record `kotlin.jvm.internal.TypeParameterReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KTypeParameter` @kind interface {
  `java.lang.Object` `kotlin.jvm.internal.TypeParameterReference.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.TypeParameterReference.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KVariance` `kotlin.jvm.internal.TypeParameterReference.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.jvm.internal.TypeParameterReference.d` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `kotlin.jvm.internal.TypeParameterReference.e` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.jvm.internal.TypeParameterReference$Companion` `@@kotlin.jvm.internal.TypeParameterReference.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0c92dc.  v0:= new `kotlin.jvm.internal.TypeParameterReference$Companion`;
  #L0c92e0.  v1:= 0I;
  #L0c92e2.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0c92e8.  `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` := v0 @kind object;
  #L0c92ec.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `kotlin.reflect.KVariance` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/TypeParameterReference;.<init>:(Ljava/lang/Object;Ljava/lang/String;Lkotlin/reflect/KVariance;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c9300.  v0:= "name" @kind object;
  #L0c9304.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c930a.  v0:= "variance" @kind object;
  #L0c930e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c9314.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c931a.  v1.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.lang.Object` := v2 @kind object;
  #L0c931e.  v1.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.String` := v3 @kind object;
  #L0c9322.  v1.`kotlin.jvm.internal.TypeParameterReference.c` @type ^`kotlin.reflect.KVariance` := v4 @kind object;
  #L0c9326.  v1.`kotlin.jvm.internal.TypeParameterReference.d` @type ^`boolean` := v5 @kind boolean;
  #L0c932a.  return @kind void;
}
procedure `void` `getUpperBounds$annotations`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0c933c.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c91b0.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeParameterReference` @kind boolean;
  #L0c91b4.  if v0 == 0 then goto L0c91f0;
  #L0c91b8.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.lang.Object` @kind object;
  #L0c91bc.  v3:= (`kotlin.jvm.internal.TypeParameterReference`) v3 @kind object;
  #L0c91c0.  v1:= v3.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.lang.Object` @kind object;
  #L0c91c4.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c91ca.  v0:= temp;
  #L0c91cc.  if v0 == 0 then goto L0c91f0;
  #L0c91d0.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c91d6.  v0:= temp @kind object;
  #L0c91d8.  call temp:= `getName`(v3) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c91de.  v3:= temp @kind object;
  #L0c91e0.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c91e6.  v3:= temp;
  #L0c91e8.  if v3 == 0 then goto L0c91f0;
  #L0c91ec.  v3:= 1I;
  #L0c91ee.  goto L0c91f2;
  #L0c91f0.  v3:= 0I;
  #L0c91f2.  return v3;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c9258.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.String` @kind object;
  #L0c925c.  return v0 @kind object;
}
procedure `java.util.List` `getUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c9290.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`java.util.List` @kind object;
  #L0c9294.  if v0 != 0 then goto L0c92b0;
  #L0c9298.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L0c929c.  call temp:= `nullableTypeOf`(v0) @signature `Lkotlin/jvm/internal/Reflection;.nullableTypeOf:(Ljava/lang/Class;)Lkotlin/reflect/KType;` @kind static;
  #L0c92a2.  v0:= temp @kind object;
  #L0c92a4.  call temp:= `listOf`(v0) @signature `Lkotlin/collections/CollectionsKt;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L0c92aa.  v0:= temp @kind object;
  #L0c92ac.  v1.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`java.util.List` := v0 @kind object;
  #L0c92b0.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c92c4.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.c` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0c92c8.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c921c.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.lang.Object` @kind object;
  #L0c9220.  if v0 == 0 then goto L0c922e;
  #L0c9224.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c922a.  v0:= temp;
  #L0c922c.  goto L0c9230;
  #L0c922e.  v0:= 0I;
  #L0c9230.  v0:= v0 * 31;
  #L0c9234.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c923a.  v1:= temp @kind object;
  #L0c923c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0c9242.  v1:= temp;
  #L0c9244.  v0:= v0 + v1 @kind int;
  #L0c9246.  return v0;
}
procedure `boolean` `isReified`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.isReified:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c9204.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.d` @type ^`boolean` @kind boolean;
  #L0c9208.  return v0;
}
procedure `void` `setUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.setUpperBounds:(Ljava/util/List;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0c9350.  v0:= "upperBounds" @kind object;
  #L0c9354.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c935a.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`java.util.List` @kind object;
  #L0c935e.  if v0 != 0 then goto L0c9368;
  #L0c9362.  v2.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`java.util.List` := v3 @kind object;
  #L0c9366.  return @kind void;
  #L0c9368.  v3:= new `java.lang.IllegalStateException`;
  #L0c936c.  v0:= new `java.lang.StringBuilder`;
  #L0c9370.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c9376.  v1:= "Upper bounds of type parameter '" @kind object;
  #L0c937a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9380.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9386.  v1:= "' have already been initialized." @kind object;
  #L0c938a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c9390.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c9396.  v0:= temp @kind object;
  #L0c9398.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c939e.  v0:= temp @kind object;
  #L0c93a0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0c93a6.  throw v3;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c9270.  v0:= `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` @kind object;
  #L0c9274.  call temp:= `toString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.toString:(Lkotlin/reflect/KTypeParameter;)Ljava/lang/String;` @kind virtual;
  #L0c927a.  v0:= temp @kind object;
  #L0c927c.  return v0 @kind object;
}
