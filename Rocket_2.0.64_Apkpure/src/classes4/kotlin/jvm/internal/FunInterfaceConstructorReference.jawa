record `kotlin.jvm.internal.FunInterfaceConstructorReference` @kind class @AccessFlag PUBLIC extends `kotlin.jvm.internal.FunctionReference` @kind class {
  `java.lang.Class` `kotlin.jvm.internal.FunInterfaceConstructorReference.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c4d48.  v0:= 1I;
  #L0c4d4a.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/FunctionReference;.<init>:(I)V` @kind direct;
  #L0c4d50.  v1.`kotlin.jvm.internal.FunInterfaceConstructorReference.a` @type ^`java.lang.Class` := v2 @kind object;
  #L0c4d54.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c4c70.  if v1 != v2 then goto L0c4c78;
  #L0c4c74.  v2:= 1I;
  #L0c4c76.  return v2;
  #L0c4c78.  v0:= instanceof @variable v2 @type ^`kotlin.jvm.internal.FunInterfaceConstructorReference` @kind boolean;
  #L0c4c7c.  if v0 != 0 then goto L0c4c84;
  #L0c4c80.  v2:= 0I;
  #L0c4c82.  return v2;
  #L0c4c84.  v2:= (`kotlin.jvm.internal.FunInterfaceConstructorReference`) v2 @kind object;
  #L0c4c88.  v0:= v1.`kotlin.jvm.internal.FunInterfaceConstructorReference.a` @type ^`java.lang.Class` @kind object;
  #L0c4c8c.  v2:= v2.`kotlin.jvm.internal.FunInterfaceConstructorReference.a` @type ^`java.lang.Class` @kind object;
  #L0c4c90.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0c4c96.  v2:= temp;
  #L0c4c98.  return v2;
}
procedure `kotlin.reflect.KCallable` `getReflected`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v1 @kind this) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.getReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L0c4d0c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.getReflected:()Lkotlin/reflect/KFunction;` @kind virtual;
  #L0c4d12.  v0:= temp @kind object;
  #L0c4d14.  return v0 @kind object;
}
procedure `kotlin.reflect.KFunction` `getReflected`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v2 @kind this) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.getReflected:()Lkotlin/reflect/KFunction;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L0c4d28.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0c4d2c.  v1:= "Functional interface constructor does not support reflection" @kind object;
  #L0c4d30.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0c4d36.  throw v0;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v1 @kind this) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c4cac.  v0:= v1.`kotlin.jvm.internal.FunInterfaceConstructorReference.a` @type ^`java.lang.Class` @kind object;
  #L0c4cb0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c4cb6.  v0:= temp;
  #L0c4cb8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.FunInterfaceConstructorReference` v2 @kind this) @signature `Lkotlin/jvm/internal/FunInterfaceConstructorReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c4ccc.  v0:= new `java.lang.StringBuilder`;
  #L0c4cd0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c4cd6.  v1:= "fun interface " @kind object;
  #L0c4cda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c4ce0.  v1:= v2.`kotlin.jvm.internal.FunInterfaceConstructorReference.a` @type ^`java.lang.Class` @kind object;
  #L0c4ce4.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c4cea.  v1:= temp @kind object;
  #L0c4cec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c4cf2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c4cf8.  v0:= temp @kind object;
  #L0c4cfa.  return v0 @kind object;
}
