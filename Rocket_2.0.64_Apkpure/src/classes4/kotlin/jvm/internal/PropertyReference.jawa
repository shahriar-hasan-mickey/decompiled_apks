record `kotlin.jvm.internal.PropertyReference` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.jvm.internal.CallableReference` @kind class, `kotlin.reflect.KProperty` @kind interface {
}
procedure `void` `<init>`(`kotlin.jvm.internal.PropertyReference` v0 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0c7a2c.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:()V` @kind direct;
  #L0c7a32.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PropertyReference` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/PropertyReference;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0c7a44.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L0c7a4a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PropertyReference` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.String` v10 @kind object, `java.lang.String` v11 @kind object, `int` v12 ) @signature `Lkotlin/jvm/internal/PropertyReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0c7a5c.  v0:= 1I;
  #L0c7a5e.  v12:= v12 ^& v0 @kind int;
  #L0c7a60.  if v12 != v0 then goto L0c7a68;
  #L0c7a64.  v6:= 1I;
  #L0c7a66.  goto L0c7a6c;
  #L0c7a68.  v0:= 0I;
  #L0c7a6a.  v6:= 0I;
  #L0c7a6c.  v1:= v7 @kind object;
  #L0c7a6e.  v2:= v8 @kind object;
  #L0c7a70.  v3:= v9 @kind object;
  #L0c7a72.  v4:= v10 @kind object;
  #L0c7a74.  v5:= v11 @kind object;
  #L0c7a76.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L0c7a7c.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.PropertyReference` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/jvm/internal/PropertyReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0c7844.  v0:= 1I;
  #L0c7846.  if v5 != v4 then goto L0c784c;
  #L0c784a.  return v0;
  #L0c784c.  v1:= instanceof @variable v5 @type ^`kotlin.jvm.internal.PropertyReference` @kind boolean;
  #L0c7850.  v2:= 0I;
  #L0c7852.  if v1 == 0 then goto L0c78d0;
  #L0c7856.  v5:= (`kotlin.jvm.internal.PropertyReference`) v5 @kind object;
  #L0c785a.  call temp:= `getOwner`(v4) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @kind virtual;
  #L0c7860.  v1:= temp @kind object;
  #L0c7862.  call temp:= `getOwner`(v5) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @kind virtual;
  #L0c7868.  v3:= temp @kind object;
  #L0c786a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0c7870.  v1:= temp;
  #L0c7872.  if v1 == 0 then goto L0c78cc;
  #L0c7876.  call temp:= `getName`(v4) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c787c.  v1:= temp @kind object;
  #L0c787e.  call temp:= `getName`(v5) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c7884.  v3:= temp @kind object;
  #L0c7886.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0c788c.  v1:= temp;
  #L0c788e.  if v1 == 0 then goto L0c78cc;
  #L0c7892.  call temp:= `getSignature`(v4) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @kind virtual;
  #L0c7898.  v1:= temp @kind object;
  #L0c789a.  call temp:= `getSignature`(v5) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @kind virtual;
  #L0c78a0.  v3:= temp @kind object;
  #L0c78a2.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0c78a8.  v1:= temp;
  #L0c78aa.  if v1 == 0 then goto L0c78cc;
  #L0c78ae.  call temp:= `getBoundReceiver`(v4) @signature `Lkotlin/jvm/internal/CallableReference;.getBoundReceiver:()Ljava/lang/Object;` @kind virtual;
  #L0c78b4.  v1:= temp @kind object;
  #L0c78b6.  call temp:= `getBoundReceiver`(v5) @signature `Lkotlin/jvm/internal/CallableReference;.getBoundReceiver:()Ljava/lang/Object;` @kind virtual;
  #L0c78bc.  v5:= temp @kind object;
  #L0c78be.  call temp:= `areEqual`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c78c4.  v5:= temp;
  #L0c78c6.  if v5 == 0 then goto L0c78cc;
  #L0c78ca.  goto L0c78ce;
  #L0c78cc.  v0:= 0I;
  #L0c78ce.  return v0;
  #L0c78d0.  v0:= instanceof @variable v5 @type ^`kotlin.reflect.KProperty` @kind boolean;
  #L0c78d4.  if v0 == 0 then goto L0c78ea;
  #L0c78d8.  call temp:= `compute`(v4) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c78de.  v0:= temp @kind object;
  #L0c78e0.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0c78e6.  v5:= temp;
  #L0c78e8.  return v5;
  #L0c78ea.  return v2;
}
procedure `kotlin.reflect.KCallable` `getReflected`(`kotlin.jvm.internal.PropertyReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.getReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L0c79f0.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/PropertyReference;.getReflected:()Lkotlin/reflect/KProperty;` @kind virtual;
  #L0c79f6.  v0:= temp @kind object;
  #L0c79f8.  return v0 @kind object;
}
procedure `kotlin.reflect.KProperty` `getReflected`(`kotlin.jvm.internal.PropertyReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.getReflected:()Lkotlin/reflect/KProperty;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0c7a0c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind super;
  #L0c7a12.  v0:= temp @kind object;
  #L0c7a14.  v0:= (`kotlin.reflect.KProperty`) v0 @kind object;
  #L0c7a18.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.PropertyReference` v2 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c7944.  call temp:= `getOwner`(v2) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @kind virtual;
  #L0c794a.  v0:= temp @kind object;
  #L0c794c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0c7952.  v0:= temp;
  #L0c7954.  v0:= v0 * 31;
  #L0c7958.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c795e.  v1:= temp @kind object;
  #L0c7960.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0c7966.  v1:= temp;
  #L0c7968.  v0:= v0 + v1 @kind int;
  #L0c796a.  v0:= v0 * 31;
  #L0c796e.  call temp:= `getSignature`(v2) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @kind virtual;
  #L0c7974.  v1:= temp @kind object;
  #L0c7976.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0c797c.  v1:= temp;
  #L0c797e.  v0:= v0 + v1 @kind int;
  #L0c7980.  return v0;
}
procedure `boolean` `isConst`(`kotlin.jvm.internal.PropertyReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.isConst:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c78fc.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/PropertyReference;.getReflected:()Lkotlin/reflect/KProperty;` @kind virtual;
  #L0c7902.  v0:= temp @kind object;
  #L0c7904.  call temp:= `isConst`(v0) @signature `Lkotlin/reflect/KProperty;.isConst:()Z` @kind interface;
  #L0c790a.  v0:= temp;
  #L0c790c.  return v0;
}
procedure `boolean` `isLateinit`(`kotlin.jvm.internal.PropertyReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.isLateinit:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0c7920.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/PropertyReference;.getReflected:()Lkotlin/reflect/KProperty;` @kind virtual;
  #L0c7926.  v0:= temp @kind object;
  #L0c7928.  call temp:= `isLateinit`(v0) @signature `Lkotlin/reflect/KProperty;.isLateinit:()Z` @kind interface;
  #L0c792e.  v0:= temp;
  #L0c7930.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.PropertyReference` v2 @kind this) @signature `Lkotlin/jvm/internal/PropertyReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c7994.  call temp:= `compute`(v2) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L0c799a.  v0:= temp @kind object;
  #L0c799c.  if v0 == v2 then goto L0c79aa;
  #L0c79a0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c79a6.  v0:= temp @kind object;
  #L0c79a8.  return v0 @kind object;
  #L0c79aa.  v0:= new `java.lang.StringBuilder`;
  #L0c79ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c79b4.  v1:= "property " @kind object;
  #L0c79b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c79be.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L0c79c4.  v1:= temp @kind object;
  #L0c79c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c79cc.  v1:= " (Kotlin reflection is not available)" @kind object;
  #L0c79d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c79d6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c79dc.  v0:= temp @kind object;
  #L0c79de.  return v0 @kind object;
}
