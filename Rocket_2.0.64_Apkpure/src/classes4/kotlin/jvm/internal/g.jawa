record `kotlin.jvm.internal.g` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object`[] `kotlin.jvm.internal.g.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.g.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.jvm.internal.g` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/jvm/internal/g;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0c305c.  v0:= "array" @kind object;
  #L0c3060.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c3066.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c306c.  v1.`kotlin.jvm.internal.g.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L0c3070.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.jvm.internal.g` v2 @kind this) @signature `Lkotlin/jvm/internal/g;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c2e9c.  v0:= v2.`kotlin.jvm.internal.g.b` @type ^`int`;
  #L0c2ea0.  v1:= v2.`kotlin.jvm.internal.g.a` @type ^`java.lang.Object`[] @kind object;
  #L0c2ea4.  v1:= length @variable v1;
  #L0c2ea6.  if v0 >= v1 then goto L0c2eae;
  #L0c2eaa.  v0:= 1I;
  #L0c2eac.  goto L0c2eb0;
  #L0c2eae.  v0:= 0I;
  #L0c2eb0.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.jvm.internal.g` v3 @kind this) @signature `Lkotlin/jvm/internal/g;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0c2ec4.  v0:= v3.`kotlin.jvm.internal.g.a` @type ^`java.lang.Object`[] @kind object;
  #L0c2ec8.  v1:= v3.`kotlin.jvm.internal.g.b` @type ^`int`;
  #L0c2ecc.  v2:= v1 + 1;
  #L0c2ed0.  v3.`kotlin.jvm.internal.g.b` @type ^`int` := v2;
  #L0c2ed4.  v0:= v0[v1] @kind object;
  #L0c2ed8.  return v0 @kind object;
  #L0c2eda.  v0:= Exception @type ^`java.lang.ArrayIndexOutOfBoundsException` @kind object;
  #L0c2edc.  v1:= v3.`kotlin.jvm.internal.g.b` @type ^`int`;
  #L0c2ee0.  v1:= v1 + -1;
  #L0c2ee4.  v3.`kotlin.jvm.internal.g.b` @type ^`int` := v1;
  #L0c2ee8.  v1:= new `java.util.NoSuchElementException`;
  #L0c2eec.  call temp:= `getMessage`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L0c2ef2.  v0:= temp @kind object;
  #L0c2ef4.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0c2efa.  throw v1;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L0c2ec4..L0c2ed8] goto L0c2eda;
}
procedure `void` `remove`(`kotlin.jvm.internal.g` v2 @kind this) @signature `Lkotlin/jvm/internal/g;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c3084.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0c3088.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0c308c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0c3092.  throw v0;
}
