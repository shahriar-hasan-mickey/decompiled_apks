record `kotlin.reflect.WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface, `java.lang.reflect.Type` @kind interface {
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.b` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.WildcardTypeImpl$Companion` `@@kotlin.reflect.WildcardTypeImpl.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.reflect.WildcardTypeImpl` `@@kotlin.reflect.WildcardTypeImpl.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/WildcardTypeImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0d2cd8.  v0:= new `kotlin.reflect.WildcardTypeImpl$Companion`;
  #L0d2cdc.  v1:= 0I;
  #L0d2cde.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0d2ce4.  `@@kotlin.reflect.WildcardTypeImpl.c` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` := v0 @kind object;
  #L0d2ce8.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L0d2cec.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L0d2cf2.  `@@kotlin.reflect.WildcardTypeImpl.d` @type ^`kotlin.reflect.WildcardTypeImpl` := v0 @kind object;
  #L0d2cf6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.WildcardTypeImpl` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0d2d08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d2d0e.  v0.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L0d2d12.  v0.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` := v2 @kind object;
  #L0d2d16.  return @kind void;
}
procedure `kotlin.reflect.WildcardTypeImpl` `a`() @signature `Lkotlin/reflect/WildcardTypeImpl;.a:()Lkotlin/reflect/WildcardTypeImpl;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0d2cc0.  v0:= `@@kotlin.reflect.WildcardTypeImpl.d` @type ^`kotlin.reflect.WildcardTypeImpl` @kind object;
  #L0d2cc4.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d2b1c.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L0d2b20.  if v0 == 0 then goto L0d2b64;
  #L0d2b24.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d2b2a.  v0:= temp @kind object;
  #L0d2b2c.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L0d2b30.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L0d2b36.  v1:= temp @kind object;
  #L0d2b38.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L0d2b3e.  v0:= temp;
  #L0d2b40.  if v0 == 0 then goto L0d2b64;
  #L0d2b44.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d2b4a.  v0:= temp @kind object;
  #L0d2b4c.  call temp:= `getLowerBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L0d2b52.  v3:= temp @kind object;
  #L0d2b54.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L0d2b5a.  v3:= temp;
  #L0d2b5c.  if v3 == 0 then goto L0d2b64;
  #L0d2b60.  v3:= 1I;
  #L0d2b62.  goto L0d2b66;
  #L0d2b64.  v3:= 0I;
  #L0d2b66.  return v3;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d2c60.  v0:= v3.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2c64.  v1:= 0I;
  #L0d2c66.  if v0 != 0 then goto L0d2c74;
  #L0d2c6a.  v0:= new `java.lang.reflect.Type`[v1];
  #L0d2c6e.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L0d2c72.  goto L0d2c80;
  #L0d2c74.  v2:= 1I;
  #L0d2c76.  v2:= new `java.lang.reflect.Type`[v2];
  #L0d2c7a.  v2[v1]:= v0 @kind object;
  #L0d2c7e.  v0:= v2 @kind object;
  #L0d2c80.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d2bac.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2bb0.  if v0 == 0 then goto L0d2be4;
  #L0d2bb4.  v0:= new `java.lang.StringBuilder`;
  #L0d2bb8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d2bbe.  v1:= "? super " @kind object;
  #L0d2bc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2bc8.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2bcc.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L0d2bd2.  v1:= temp @kind object;
  #L0d2bd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2bda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d2be0.  v0:= temp @kind object;
  #L0d2be2.  goto L0d2c30;
  #L0d2be4.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2be8.  if v0 == 0 then goto L0d2c2c;
  #L0d2bec.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L0d2bf0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d2bf6.  v0:= temp;
  #L0d2bf8.  if v0 != 0 then goto L0d2c2c;
  #L0d2bfc.  v0:= new `java.lang.StringBuilder`;
  #L0d2c00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d2c06.  v1:= "? extends " @kind object;
  #L0d2c0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2c10.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2c14.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L0d2c1a.  v1:= temp @kind object;
  #L0d2c1c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2c22.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d2c28.  v0:= temp @kind object;
  #L0d2c2a.  goto L0d2c30;
  #L0d2c2c.  v0:= "?" @kind object;
  #L0d2c30.  return v0 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d2c94.  v0:= 1I;
  #L0d2c96.  v0:= new `java.lang.reflect.Type`[v0];
  #L0d2c9a.  v1:= v3.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2c9e.  if v1 != 0 then goto L0d2ca6;
  #L0d2ca2.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L0d2ca6.  v2:= 0I;
  #L0d2ca8.  v0[v2]:= v1 @kind object;
  #L0d2cac.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d2b78.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d2b7e.  v0:= temp @kind object;
  #L0d2b80.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L0d2b86.  v0:= temp;
  #L0d2b88.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d2b8e.  v1:= temp @kind object;
  #L0d2b90.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L0d2b96.  v1:= temp;
  #L0d2b98.  v0:= v0 ^~ v1 @kind int;
  #L0d2b9a.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.WildcardTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2c44.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L0d2c4a.  v0:= temp @kind object;
  #L0d2c4c.  return v0 @kind object;
}
