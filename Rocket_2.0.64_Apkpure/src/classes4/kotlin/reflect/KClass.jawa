record `kotlin.reflect.KClass` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.reflect.KDeclarationContainer` @kind interface, `kotlin.reflect.KAnnotatedElement` @kind interface, `kotlin.reflect.KClassifier` @kind interface {
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/reflect/KClass;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Collection` `getConstructors`() @signature `Lkotlin/reflect/KClass;.getConstructors:()Ljava/util/Collection;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Collection` `getMembers`() @signature `Lkotlin/reflect/KClass;.getMembers:()Ljava/util/Collection;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Collection` `getNestedClasses`() @signature `Lkotlin/reflect/KClass;.getNestedClasses:()Ljava/util/Collection;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getObjectInstance`() @signature `Lkotlin/reflect/KClass;.getObjectInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getQualifiedName`() @signature `Lkotlin/reflect/KClass;.getQualifiedName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getSealedSubclasses`() @signature `Lkotlin/reflect/KClass;.getSealedSubclasses:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getSimpleName`() @signature `Lkotlin/reflect/KClass;.getSimpleName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getSupertypes`() @signature `Lkotlin/reflect/KClass;.getSupertypes:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getTypeParameters`() @signature `Lkotlin/reflect/KClass;.getTypeParameters:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.reflect.KVisibility` `getVisibility`() @signature `Lkotlin/reflect/KClass;.getVisibility:()Lkotlin/reflect/KVisibility;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`() @signature `Lkotlin/reflect/KClass;.hashCode:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isAbstract`() @signature `Lkotlin/reflect/KClass;.isAbstract:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCompanion`() @signature `Lkotlin/reflect/KClass;.isCompanion:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isData`() @signature `Lkotlin/reflect/KClass;.isData:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isFinal`() @signature `Lkotlin/reflect/KClass;.isFinal:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isFun`() @signature `Lkotlin/reflect/KClass;.isFun:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isInner`() @signature `Lkotlin/reflect/KClass;.isInner:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isInstance`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/reflect/KClass;.isInstance:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isOpen`() @signature `Lkotlin/reflect/KClass;.isOpen:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isSealed`() @signature `Lkotlin/reflect/KClass;.isSealed:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isValue`() @signature `Lkotlin/reflect/KClass;.isValue:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
