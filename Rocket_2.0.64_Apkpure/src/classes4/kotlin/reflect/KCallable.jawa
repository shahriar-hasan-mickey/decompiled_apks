record `kotlin.reflect.KCallable` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.reflect.KAnnotatedElement` @kind interface {
}
procedure `java.lang.Object` `call`(`java.lang.Object`[] v0 @kind object) @signature `Lkotlin/reflect/KCallable;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `callBy`(`java.util.Map` v0 @kind object) @signature `Lkotlin/reflect/KCallable;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getName`() @signature `Lkotlin/reflect/KCallable;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getParameters`() @signature `Lkotlin/reflect/KCallable;.getParameters:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.reflect.KType` `getReturnType`() @signature `Lkotlin/reflect/KCallable;.getReturnType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.List` `getTypeParameters`() @signature `Lkotlin/reflect/KCallable;.getTypeParameters:()Ljava/util/List;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.reflect.KVisibility` `getVisibility`() @signature `Lkotlin/reflect/KCallable;.getVisibility:()Lkotlin/reflect/KVisibility;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isAbstract`() @signature `Lkotlin/reflect/KCallable;.isAbstract:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isFinal`() @signature `Lkotlin/reflect/KCallable;.isFinal:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isOpen`() @signature `Lkotlin/reflect/KCallable;.isOpen:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isSuspend`() @signature `Lkotlin/reflect/KCallable;.isSuspend:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
