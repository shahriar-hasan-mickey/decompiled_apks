record `kotlin.reflect.KTypeProjection` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlin.reflect.KVariance` `kotlin.reflect.KTypeProjection.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KType` `kotlin.reflect.KTypeProjection.b` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.KTypeProjection$Companion` `@@kotlin.reflect.KTypeProjection.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.reflect.KTypeProjection` `@@kotlin.reflect.KTypeProjection.star` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/KTypeProjection;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0d1da8.  v0:= new `kotlin.reflect.KTypeProjection$Companion`;
  #L0d1dac.  v1:= 0I;
  #L0d1dae.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0d1db4.  `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` := v0 @kind object;
  #L0d1db8.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L0d1dbc.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L0d1dc2.  `@@kotlin.reflect.KTypeProjection.star` @type ^`kotlin.reflect.KTypeProjection` := v0 @kind object;
  #L0d1dc6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.KTypeProjection` v3 @kind this, `kotlin.reflect.KVariance` v4 @kind object, `kotlin.reflect.KType` v5 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0d1dd8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d1dde.  v3.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` := v4 @kind object;
  #L0d1de2.  v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` := v5 @kind object;
  #L0d1de6.  v0:= 1I;
  #L0d1de8.  v1:= 0I;
  #L0d1dea.  if v4 != 0 then goto L0d1df2;
  #L0d1dee.  v2:= 1I;
  #L0d1df0.  goto L0d1df4;
  #L0d1df2.  v2:= 0I;
  #L0d1df4.  if v5 != 0 then goto L0d1dfc;
  #L0d1df8.  v5:= 1I;
  #L0d1dfa.  goto L0d1dfe;
  #L0d1dfc.  v5:= 0I;
  #L0d1dfe.  if v2 != v5 then goto L0d1e04;
  #L0d1e02.  goto L0d1e06;
  #L0d1e04.  v0:= 0I;
  #L0d1e06.  if v0 != 0 then goto L0d1e54;
  #L0d1e0a.  if v4 != 0 then goto L0d1e14;
  #L0d1e0e.  v4:= "Star projection must have no type specified." @kind object;
  #L0d1e12.  goto L0d1e40;
  #L0d1e14.  v5:= new `java.lang.StringBuilder`;
  #L0d1e18.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d1e1e.  v0:= "The projection variance " @kind object;
  #L0d1e22.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1e28.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1e2e.  v4:= " requires type to be specified." @kind object;
  #L0d1e32.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1e38.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d1e3e.  v4:= temp @kind object;
  #L0d1e40.  v5:= new `java.lang.IllegalArgumentException`;
  #L0d1e44.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d1e4a.  v4:= temp @kind object;
  #L0d1e4c.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d1e52.  throw v5;
  #L0d1e54.  return @kind void;
}
procedure `kotlin.reflect.KTypeProjection` `contravariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d1cc8.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L0d1ccc.  call temp:= `contravariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L0d1cd2.  v1:= temp @kind object;
  #L0d1cd4.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy$default`(`kotlin.reflect.KTypeProjection` v0 @kind object, `kotlin.reflect.KVariance` v1 @kind object, `kotlin.reflect.KType` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy$default:(Lkotlin/reflect/KTypeProjection;Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;ILjava/lang/Object;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0d1ce8.  v4:= v3 ^& 1;
  #L0d1cec.  if v4 == 0 then goto L0d1cf4;
  #L0d1cf0.  v1:= v0.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1cf4.  v3:= v3 ^& 2;
  #L0d1cf8.  if v3 == 0 then goto L0d1d00;
  #L0d1cfc.  v2:= v0.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1d00.  call temp:= `copy`(v0, v1, v2) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L0d1d06.  v0:= temp @kind object;
  #L0d1d08.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `covariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d1d38.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L0d1d3c.  call temp:= `covariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L0d1d42.  v1:= temp @kind object;
  #L0d1d44.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `invariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0d1d58.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L0d1d5c.  call temp:= `invariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L0d1d62.  v1:= temp @kind object;
  #L0d1d64.  return v1 @kind object;
}
procedure `kotlin.reflect.KVariance` `component1`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d1d78.  v0:= v1.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1d7c.  return v0 @kind object;
}
procedure `kotlin.reflect.KType` `component2`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d1c98.  v0:= v1.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1c9c.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy`(`kotlin.reflect.KTypeProjection` v1 @kind this, `kotlin.reflect.KVariance` v2 @kind object, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d1d1c.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L0d1d20.  call `<init>`(v0, v2, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L0d1d26.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.KTypeProjection` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d1b54.  v0:= 1I;
  #L0d1b56.  if v4 != v5 then goto L0d1b5c;
  #L0d1b5a.  return v0;
  #L0d1b5c.  v1:= instanceof @variable v5 @type ^`kotlin.reflect.KTypeProjection` @kind boolean;
  #L0d1b60.  v2:= 0I;
  #L0d1b62.  if v1 != 0 then goto L0d1b68;
  #L0d1b66.  return v2;
  #L0d1b68.  v5:= (`kotlin.reflect.KTypeProjection`) v5 @kind object;
  #L0d1b6c.  v1:= v4.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1b70.  v3:= v5.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1b74.  if v1 == v3 then goto L0d1b7a;
  #L0d1b78.  return v2;
  #L0d1b7a.  v1:= v4.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1b7e.  v5:= v5.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1b82.  call temp:= `areEqual`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d1b88.  v5:= temp;
  #L0d1b8a.  if v5 != 0 then goto L0d1b90;
  #L0d1b8e.  return v2;
  #L0d1b90.  return v0;
}
procedure `kotlin.reflect.KType` `getType`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d1cb0.  v0:= v1.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1cb4.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0d1d90.  v0:= v1.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1d94.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.KTypeProjection` v3 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d1ba4.  v0:= v3.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1ba8.  v1:= 0I;
  #L0d1baa.  if v0 != 0 then goto L0d1bb2;
  #L0d1bae.  v0:= 0I;
  #L0d1bb0.  goto L0d1bba;
  #L0d1bb2.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L0d1bb8.  v0:= temp;
  #L0d1bba.  v0:= v0 * 31;
  #L0d1bbe.  v2:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1bc2.  if v2 != 0 then goto L0d1bc8;
  #L0d1bc6.  goto L0d1bd0;
  #L0d1bc8.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0d1bce.  v1:= temp;
  #L0d1bd0.  v0:= v0 + v1 @kind int;
  #L0d1bd2.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.KTypeProjection` v3 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0d1be4.  v0:= v3.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L0d1be8.  v1:= -1I;
  #L0d1bea.  if v0 != 0 then goto L0d1bf2;
  #L0d1bee.  v0:= -1I;
  #L0d1bf0.  goto L0d1c02;
  #L0d1bf2.  v2:= `@@kotlin.reflect.KTypeProjection$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0d1bf6.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0d1bfc.  v0:= temp;
  #L0d1bfe.  v0:= v2[v0];
  #L0d1c02.  if v0 == v1 then goto L0d1c82;
  #L0d1c06.  v1:= 1I;
  #L0d1c08.  if v0 == v1 then goto L0d1c74;
  #L0d1c0c.  v1:= 2I;
  #L0d1c0e.  if v0 == v1 then goto L0d1c4c;
  #L0d1c12.  v1:= 3I;
  #L0d1c14.  if v0 != v1 then goto L0d1c40;
  #L0d1c18.  v0:= new `java.lang.StringBuilder`;
  #L0d1c1c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d1c22.  v1:= "out " @kind object;
  #L0d1c26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1c2c.  v1:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1c30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1c36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d1c3c.  v0:= temp @kind object;
  #L0d1c3e.  goto L0d1c86;
  #L0d1c40.  v0:= new `kotlin.NoWhenBranchMatchedException`;
  #L0d1c44.  call `<init>`(v0) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0d1c4a.  throw v0;
  #L0d1c4c.  v0:= new `java.lang.StringBuilder`;
  #L0d1c50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d1c56.  v1:= "in " @kind object;
  #L0d1c5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1c60.  v1:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1c64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d1c6a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d1c70.  v0:= temp @kind object;
  #L0d1c72.  goto L0d1c86;
  #L0d1c74.  v0:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L0d1c78.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0d1c7e.  v0:= temp @kind object;
  #L0d1c80.  goto L0d1c86;
  #L0d1c82.  v0:= "*" @kind object;
  #L0d1c86.  return v0 @kind object;
}
