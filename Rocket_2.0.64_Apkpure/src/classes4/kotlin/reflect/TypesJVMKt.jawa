record `kotlin.reflect.TypesJVMKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.reflect.Type` `a`(`kotlin.reflect.KType` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d2714.  call temp:= `getClassifier`(v3) @signature `Lkotlin/reflect/KType;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind interface;
  #L0d271a.  v0:= temp @kind object;
  #L0d271c.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KTypeParameter` @kind boolean;
  #L0d2720.  if v1 == 0 then goto L0d2734;
  #L0d2724.  v3:= new `kotlin.reflect.c`;
  #L0d2728.  v0:= (`kotlin.reflect.KTypeParameter`) v0 @kind object;
  #L0d272c.  call `<init>`(v3, v0) @signature `Lkotlin/reflect/c;.<init>:(Lkotlin/reflect/KTypeParameter;)V` @kind direct;
  #L0d2732.  return v3 @kind object;
  #L0d2734.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L0d2738.  if v1 == 0 then goto L0d284c;
  #L0d273c.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L0d2740.  if v4 == 0 then goto L0d274e;
  #L0d2744.  call temp:= `getJavaObjectType`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L0d274a.  v4:= temp @kind object;
  #L0d274c.  goto L0d2756;
  #L0d274e.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L0d2754.  v4:= temp @kind object;
  #L0d2756.  call temp:= `getArguments`(v3) @signature `Lkotlin/reflect/KType;.getArguments:()Ljava/util/List;` @kind interface;
  #L0d275c.  v0:= temp @kind object;
  #L0d275e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0d2764.  v1:= temp;
  #L0d2766.  if v1 == 0 then goto L0d276c;
  #L0d276a.  return v4 @kind object;
  #L0d276c.  call temp:= `isArray`(v4) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L0d2772.  v1:= temp;
  #L0d2774.  if v1 == 0 then goto L0d2842;
  #L0d2778.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L0d277e.  v1:= temp @kind object;
  #L0d2780.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L0d2786.  v1:= temp;
  #L0d2788.  if v1 == 0 then goto L0d278e;
  #L0d278c.  return v4 @kind object;
  #L0d278e.  call temp:= `singleOrNull`(v0) @signature `Lkotlin/collections/CollectionsKt;.singleOrNull:(Ljava/util/List;)Ljava/lang/Object;` @kind static;
  #L0d2794.  v0:= temp @kind object;
  #L0d2796.  v0:= (`kotlin.reflect.KTypeProjection`) v0 @kind object;
  #L0d279a.  if v0 == 0 then goto L0d2814;
  #L0d279e.  call temp:= `component1`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L0d27a4.  v3:= temp @kind object;
  #L0d27a6.  call temp:= `component2`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @kind virtual;
  #L0d27ac.  v0:= temp @kind object;
  #L0d27ae.  v1:= -1I;
  #L0d27b0.  if v3 != 0 then goto L0d27b8;
  #L0d27b4.  v3:= -1I;
  #L0d27b6.  goto L0d27c8;
  #L0d27b8.  v2:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0d27bc.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0d27c2.  v3:= temp;
  #L0d27c4.  v3:= v2[v3];
  #L0d27c8.  if v3 == v1 then goto L0d2812;
  #L0d27cc.  v1:= 1I;
  #L0d27ce.  if v3 == v1 then goto L0d2812;
  #L0d27d2.  v2:= 2I;
  #L0d27d4.  if v3 == v2 then goto L0d27ec;
  #L0d27d8.  v2:= 3I;
  #L0d27da.  if v3 != v2 then goto L0d27e0;
  #L0d27de.  goto L0d27ec;
  #L0d27e0.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L0d27e4.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0d27ea.  throw v3;
  #L0d27ec.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d27f2.  v3:= 0I;
  #L0d27f4.  v2:= 0I;
  #L0d27f6.  call temp:= `b`(v0, v3, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L0d27fc.  v3:= temp @kind object;
  #L0d27fe.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L0d2802.  if v0 == 0 then goto L0d2808;
  #L0d2806.  goto L0d2812;
  #L0d2808.  v4:= new `kotlin.reflect.a`;
  #L0d280c.  call `<init>`(v4, v3) @signature `Lkotlin/reflect/a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L0d2812.  return v4 @kind object;
  #L0d2814.  v4:= new `java.lang.IllegalArgumentException`;
  #L0d2818.  v0:= new `java.lang.StringBuilder`;
  #L0d281c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d2822.  v1:= "kotlin.Array must have exactly one type argument: " @kind object;
  #L0d2826.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d282c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2832.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d2838.  v3:= temp @kind object;
  #L0d283a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d2840.  throw v4;
  #L0d2842.  call temp:= `c`(v4, v0) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L0d2848.  v3:= temp @kind object;
  #L0d284a.  return v3 @kind object;
  #L0d284c.  v4:= new `java.lang.UnsupportedOperationException`;
  #L0d2850.  v0:= new `java.lang.StringBuilder`;
  #L0d2854.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d285a.  v1:= "Unsupported type classifier: " @kind object;
  #L0d285e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2864.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d286a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d2870.  v3:= temp @kind object;
  #L0d2872.  call `<init>`(v4, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0d2878.  throw v4;
}
procedure `java.lang.reflect.Type` `access$computeJavaType`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 ) @signature `Lkotlin/reflect/TypesJVMKt;.access$computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d26d4.  call temp:= `a`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L0d26da.  v0:= temp @kind object;
  #L0d26dc.  return v0 @kind object;
}
procedure `java.lang.String` `access$typeToString`(`java.lang.reflect.Type` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L0d261c.  call temp:= `e`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.e:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L0d2622.  v0:= temp @kind object;
  #L0d2624.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `b`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L0d26f0.  v2:= v2 ^& 1;
  #L0d26f4.  if v2 == 0 then goto L0d26fa;
  #L0d26f8.  v1:= 0I;
  #L0d26fa.  call temp:= `a`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L0d2700.  v0:= temp @kind object;
  #L0d2702.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `c`(`java.lang.Class` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d288c.  call temp:= `getDeclaringClass`(v4) @signature `Ljava/lang/Class;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L0d2892.  v0:= temp @kind object;
  #L0d2894.  v1:= 10I;
  #L0d2898.  if v0 != 0 then goto L0d28ec;
  #L0d289c.  v0:= 0I;
  #L0d289e.  v2:= new `java.util.ArrayList`;
  #L0d28a2.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L0d28a8.  v1:= temp;
  #L0d28aa.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L0d28b0.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d28b6.  v5:= temp @kind object;
  #L0d28b8.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d28be.  v1:= temp;
  #L0d28c0.  if v1 == 0 then goto L0d28e0;
  #L0d28c4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d28ca.  v1:= temp @kind object;
  #L0d28cc.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L0d28d0.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L0d28d6.  v1:= temp @kind object;
  #L0d28d8.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d28de.  goto L0d28b8;
  #L0d28e0.  v5:= new `kotlin.reflect.b`;
  #L0d28e4.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L0d28ea.  return v5 @kind object;
  #L0d28ec.  call temp:= `getModifiers`(v4) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L0d28f2.  v2:= temp;
  #L0d28f4.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L0d28fa.  v2:= temp;
  #L0d28fc.  if v2 == 0 then goto L0d294e;
  #L0d2900.  v2:= new `java.util.ArrayList`;
  #L0d2904.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L0d290a.  v1:= temp;
  #L0d290c.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L0d2912.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d2918.  v5:= temp @kind object;
  #L0d291a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d2920.  v1:= temp;
  #L0d2922.  if v1 == 0 then goto L0d2942;
  #L0d2926.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d292c.  v1:= temp @kind object;
  #L0d292e.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L0d2932.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L0d2938.  v1:= temp @kind object;
  #L0d293a.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d2940.  goto L0d291a;
  #L0d2942.  v5:= new `kotlin.reflect.b`;
  #L0d2946.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L0d294c.  return v5 @kind object;
  #L0d294e.  call temp:= `getTypeParameters`(v4) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L0d2954.  v2:= temp @kind object;
  #L0d2956.  v2:= length @variable v2;
  #L0d2958.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0d295e.  v3:= temp;
  #L0d2960.  call temp:= `subList`(v5, v2, v3) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L0d2966.  v3:= temp @kind object;
  #L0d2968.  call temp:= `c`(v0, v3) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L0d296e.  v0:= temp @kind object;
  #L0d2970.  v3:= 0I;
  #L0d2972.  call temp:= `subList`(v5, v3, v2) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L0d2978.  v5:= temp @kind object;
  #L0d297a.  v2:= new `java.util.ArrayList`;
  #L0d297e.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L0d2984.  v1:= temp;
  #L0d2986.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L0d298c.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0d2992.  v5:= temp @kind object;
  #L0d2994.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0d299a.  v1:= temp;
  #L0d299c.  if v1 == 0 then goto L0d29bc;
  #L0d29a0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0d29a6.  v1:= temp @kind object;
  #L0d29a8.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L0d29ac.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L0d29b2.  v1:= temp @kind object;
  #L0d29b4.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0d29ba.  goto L0d2994;
  #L0d29bc.  v5:= new `kotlin.reflect.b`;
  #L0d29c0.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L0d29c6.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `d`(`kotlin.reflect.KTypeProjection` v4 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0d2a20.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L0d2a26.  v0:= temp @kind object;
  #L0d2a28.  if v0 != 0 then goto L0d2a3a;
  #L0d2a2c.  v4:= `@@kotlin.reflect.WildcardTypeImpl.c` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` @kind object;
  #L0d2a30.  call temp:= `getSTAR`(v4) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.getSTAR:()Lkotlin/reflect/WildcardTypeImpl;` @kind virtual;
  #L0d2a36.  v4:= temp @kind object;
  #L0d2a38.  return v4 @kind object;
  #L0d2a3a.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L0d2a40.  v4:= temp @kind object;
  #L0d2a42.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0d2a48.  v1:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0d2a4c.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0d2a52.  v0:= temp;
  #L0d2a54.  v0:= v1[v0];
  #L0d2a58.  v1:= 0I;
  #L0d2a5a.  v2:= 1I;
  #L0d2a5c.  if v0 == v2 then goto L0d2a96;
  #L0d2a60.  v3:= 2I;
  #L0d2a62.  if v0 == v3 then goto L0d2a8c;
  #L0d2a66.  v3:= 3I;
  #L0d2a68.  if v0 != v3 then goto L0d2a80;
  #L0d2a6c.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L0d2a70.  call temp:= `a`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L0d2a76.  v4:= temp @kind object;
  #L0d2a78.  call `<init>`(v0, v4, v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L0d2a7e.  goto L0d2aa8;
  #L0d2a80.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L0d2a84.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0d2a8a.  throw v4;
  #L0d2a8c.  call temp:= `a`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L0d2a92.  v0:= temp @kind object;
  #L0d2a94.  goto L0d2aa8;
  #L0d2a96.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L0d2a9a.  call temp:= `a`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L0d2aa0.  v4:= temp @kind object;
  #L0d2aa2.  call `<init>`(v0, v1, v4) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L0d2aa8.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.e:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0d2638.  v0:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L0d263c.  if v0 == 0 then goto L0d26ba;
  #L0d2640.  v0:= v2 @kind object;
  #L0d2642.  v0:= (`java.lang.Class`) v0 @kind object;
  #L0d2646.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L0d264c.  v1:= temp;
  #L0d264e.  if v1 == 0 then goto L0d26a6;
  #L0d2652.  v0:= `@@kotlin.reflect.TypesJVMKt$a.a` @type ^`kotlin.reflect.TypesJVMKt$a` @kind object;
  #L0d2656.  call temp:= `generateSequence`(v2, v0) @signature `Lkotlin/sequences/SequencesKt;.generateSequence:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L0d265c.  v2:= temp @kind object;
  #L0d265e.  v0:= new `java.lang.StringBuilder`;
  #L0d2662.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d2668.  call temp:= `last`(v2) @signature `Lkotlin/sequences/SequencesKt;.last:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @kind static;
  #L0d266e.  v1:= temp @kind object;
  #L0d2670.  v1:= (`java.lang.Class`) v1 @kind object;
  #L0d2674.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0d267a.  v1:= temp @kind object;
  #L0d267c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2682.  call temp:= `count`(v2) @signature `Lkotlin/sequences/SequencesKt;.count:(Lkotlin/sequences/Sequence;)I` @kind static;
  #L0d2688.  v2:= temp;
  #L0d268a.  v1:= "[]" @kind object;
  #L0d268e.  call temp:= `repeat`(v1, v2) @signature `Lkotlin/text/StringsKt;.repeat:(Ljava/lang/CharSequence;I)Ljava/lang/String;` @kind static;
  #L0d2694.  v2:= temp @kind object;
  #L0d2696.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d269c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d26a2.  v2:= temp @kind object;
  #L0d26a4.  goto L0d26ae;
  #L0d26a6.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0d26ac.  v2:= temp @kind object;
  #L0d26ae.  v0:= "{\n        if (type.isArr…   } else type.name\n    }" @kind object;
  #L0d26b2.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d26b8.  goto L0d26c2;
  #L0d26ba.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d26c0.  v2:= temp @kind object;
  #L0d26c2.  return v2 @kind object;
}
procedure `java.lang.reflect.Type` `getJavaType`(`kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KType;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0d29d8.  v0:= "<this>" @kind object;
  #L0d29dc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d29e2.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.KTypeBase` @kind boolean;
  #L0d29e6.  if v0 == 0 then goto L0d29fe;
  #L0d29ea.  v0:= v3 @kind object;
  #L0d29ec.  v0:= (`kotlin.jvm.internal.KTypeBase`) v0 @kind object;
  #L0d29f0.  call temp:= `getJavaType`(v0) @signature `Lkotlin/jvm/internal/KTypeBase;.getJavaType:()Ljava/lang/reflect/Type;` @kind interface;
  #L0d29f6.  v0:= temp @kind object;
  #L0d29f8.  if v0 == 0 then goto L0d29fe;
  #L0d29fc.  return v0 @kind object;
  #L0d29fe.  v0:= 0I;
  #L0d2a00.  v1:= 1I;
  #L0d2a02.  v2:= 0I;
  #L0d2a04.  call temp:= `b`(v3, v0, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L0d2a0a.  v3:= temp @kind object;
  #L0d2a0c.  return v3 @kind object;
}
procedure `void` `getJavaType$annotations`(`kotlin.reflect.KType` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType$annotations:(Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0d2abc.  return @kind void;
}
