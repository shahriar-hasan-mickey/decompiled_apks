record `kotlin.reflect.b` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface, `java.lang.reflect.Type` @kind interface {
  `java.lang.Class` `kotlin.reflect.b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `kotlin.reflect.b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `kotlin.reflect.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.reflect.b` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.reflect.Type` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0d22c4.  v0:= "rawType" @kind object;
  #L0d22c8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d22ce.  v0:= "typeArguments" @kind object;
  #L0d22d2.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d22d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0d22de.  v1.`kotlin.reflect.b.a` @type ^`java.lang.Class` := v2 @kind object;
  #L0d22e2.  v1.`kotlin.reflect.b.b` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L0d22e6.  v2:= 0I;
  #L0d22e8.  v2:= new `java.lang.reflect.Type`[v2];
  #L0d22ec.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L0d22f2.  v2:= temp @kind object;
  #L0d22f4.  v3:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>" @kind object;
  #L0d22f8.  call `checkNotNull`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d22fe.  v2:= (`java.lang.reflect.Type`[]) v2 @kind object;
  #L0d2302.  v1.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type`[] := v2 @kind object;
  #L0d2306.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.reflect.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d20fc.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L0d2100.  if v0 == 0 then goto L0d2158;
  #L0d2104.  v0:= v2.`kotlin.reflect.b.a` @type ^`java.lang.Class` @kind object;
  #L0d2108.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L0d210c.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L0d2112.  v1:= temp @kind object;
  #L0d2114.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d211a.  v0:= temp;
  #L0d211c.  if v0 == 0 then goto L0d2158;
  #L0d2120.  v0:= v2.`kotlin.reflect.b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2124.  call temp:= `getOwnerType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L0d212a.  v1:= temp @kind object;
  #L0d212c.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0d2132.  v0:= temp;
  #L0d2134.  if v0 == 0 then goto L0d2158;
  #L0d2138.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d213e.  v0:= temp @kind object;
  #L0d2140.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L0d2146.  v3:= temp @kind object;
  #L0d2148.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L0d214e.  v3:= temp;
  #L0d2150.  if v3 == 0 then goto L0d2158;
  #L0d2154.  v3:= 1I;
  #L0d2156.  goto L0d215a;
  #L0d2158.  v3:= 0I;
  #L0d215a.  return v3;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d22ac.  v0:= v1.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L0d22b0.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d227c.  v0:= v1.`kotlin.reflect.b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d2280.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2294.  v0:= v1.`kotlin.reflect.b.a` @type ^`java.lang.Class` @kind object;
  #L0d2298.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.b` v11 @kind this) @signature `Lkotlin/reflect/b;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L0d21b4.  v10:= new `java.lang.StringBuilder`;
  #L0d21b8.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0d21be.  v0:= v11.`kotlin.reflect.b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d21c2.  if v0 == 0 then goto L0d21f2;
  #L0d21c6.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L0d21cc.  v0:= temp @kind object;
  #L0d21ce.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d21d4.  v0:= "$" @kind object;
  #L0d21d8.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d21de.  v0:= v11.`kotlin.reflect.b.a` @type ^`java.lang.Class` @kind object;
  #L0d21e2.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L0d21e8.  v0:= temp @kind object;
  #L0d21ea.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d21f0.  goto L0d2204;
  #L0d21f2.  v0:= v11.`kotlin.reflect.b.a` @type ^`java.lang.Class` @kind object;
  #L0d21f6.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L0d21fc.  v0:= temp @kind object;
  #L0d21fe.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0d2204.  v0:= v11.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L0d2208.  v1:= length @variable v0;
  #L0d220a.  v2:= 1I;
  #L0d220c.  if v1 != 0 then goto L0d2214;
  #L0d2210.  v1:= 1I;
  #L0d2212.  goto L0d2216;
  #L0d2214.  v1:= 0I;
  #L0d2216.  v1:= v1 ^~ v2 @kind int;
  #L0d2218.  if v1 == 0 then goto L0d223c;
  #L0d221c.  v2:= 0I;
  #L0d221e.  v5:= 0I;
  #L0d2220.  v6:= 0I;
  #L0d2222.  v7:= `@@kotlin.reflect.b$a.a` @type ^`kotlin.reflect.b$a` @kind object;
  #L0d2226.  v8:= 50I;
  #L0d222a.  v9:= 0I;
  #L0d222c.  v3:= "<" @kind object;
  #L0d2230.  v4:= ">" @kind object;
  #L0d2234.  v1:= v10 @kind object;
  #L0d2236.  call temp:= `joinTo$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lkotlin/collections/ArraysKt;.joinTo$default:([Ljava/lang/Object;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Appendable;` @kind static;
  #L0d223c.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0d2242.  v0:= temp @kind object;
  #L0d2244.  v1:= "StringBuilder().apply(builderAction).toString()" @kind object;
  #L0d2248.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0d224e.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.b` v2 @kind this) @signature `Lkotlin/reflect/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0d216c.  v0:= v2.`kotlin.reflect.b.a` @type ^`java.lang.Class` @kind object;
  #L0d2170.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Class;.hashCode:()I` @kind virtual;
  #L0d2176.  v0:= temp;
  #L0d2178.  v1:= v2.`kotlin.reflect.b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L0d217c.  if v1 == 0 then goto L0d218a;
  #L0d2180.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0d2186.  v1:= temp;
  #L0d2188.  goto L0d218c;
  #L0d218a.  v1:= 0I;
  #L0d218c.  v0:= v0 ^~ v1 @kind int;
  #L0d218e.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L0d2194.  v1:= temp @kind object;
  #L0d2196.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L0d219c.  v1:= temp;
  #L0d219e.  v0:= v0 ^~ v1 @kind int;
  #L0d21a0.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0d2260.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/b;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L0d2266.  v0:= temp @kind object;
  #L0d2268.  return v0 @kind object;
}
