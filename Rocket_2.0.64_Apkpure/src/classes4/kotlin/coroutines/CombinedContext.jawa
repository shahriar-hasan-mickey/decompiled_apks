record `kotlin.coroutines.CombinedContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlin.coroutines.CombinedContext.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.CoroutineContext$Element` `kotlin.coroutines.CombinedContext.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext$Element` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bbef8.  v0:= "left" @kind object;
  #L0bbefc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbf02.  v0:= "element" @kind object;
  #L0bbf06.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbf0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0bbf12.  v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L0bbf16.  v1.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` := v3 @kind object;
  #L0bbf1a.  return @kind void;
}
procedure `boolean` `a`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0bbc08.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L0bbc0e.  v0:= temp @kind object;
  #L0bbc10.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L0bbc16.  v0:= temp @kind object;
  #L0bbc18.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0bbc1e.  v2:= temp;
  #L0bbc20.  return v2;
}
procedure `boolean` `b`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CombinedContext` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.b:(Lkotlin/coroutines/CombinedContext;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0bbc34.  v0:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbc38.  call temp:= `a`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L0bbc3e.  v0:= temp;
  #L0bbc40.  if v0 != 0 then goto L0bbc48;
  #L0bbc44.  v2:= 0I;
  #L0bbc46.  return v2;
  #L0bbc48.  v2:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbc4c.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L0bbc50.  if v0 == 0 then goto L0bbc5a;
  #L0bbc54.  v2:= (`kotlin.coroutines.CombinedContext`) v2 @kind object;
  #L0bbc58.  goto L0bbc34;
  #L0bbc5a.  v0:= "null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element" @kind object;
  #L0bbc5e.  call `checkNotNull`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbc64.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L0bbc68.  call temp:= `a`(v1, v2) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L0bbc6e.  v2:= temp;
  #L0bbc70.  return v2;
}
procedure `int` `c`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bbcfc.  v0:= 2I;
  #L0bbcfe.  v1:= v3 @kind object;
  #L0bbd00.  v1:= v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbd04.  v2:= instanceof @variable v1 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L0bbd08.  if v2 == 0 then goto L0bbd12;
  #L0bbd0c.  v1:= (`kotlin.coroutines.CombinedContext`) v1 @kind object;
  #L0bbd10.  goto L0bbd14;
  #L0bbd12.  v1:= 0I;
  #L0bbd14.  if v1 != 0 then goto L0bbd1a;
  #L0bbd18.  return v0;
  #L0bbd1a.  v0:= v0 + 1;
  #L0bbd1e.  goto L0bbd00;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.coroutines.CombinedContext` v5 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0bbd64.  call temp:= `c`(v5) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L0bbd6a.  v0:= temp;
  #L0bbd6c.  v1:= new `kotlin.coroutines.CoroutineContext`[v0];
  #L0bbd70.  v2:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L0bbd74.  call `<init>`(v2) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L0bbd7a.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0bbd7e.  v4:= new `kotlin.coroutines.CombinedContext$b`;
  #L0bbd82.  call `<init>`(v4, v1, v2) @signature `Lkotlin/coroutines/CombinedContext$b;.<init>:([Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/internal/Ref$IntRef;)V` @kind direct;
  #L0bbd88.  call temp:= `fold`(v5, v3, v4) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L0bbd8e.  v2:= v2.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L0bbd92.  if v2 != v0 then goto L0bbd9a;
  #L0bbd96.  v0:= 1I;
  #L0bbd98.  goto L0bbd9c;
  #L0bbd9a.  v0:= 0I;
  #L0bbd9c.  if v0 == 0 then goto L0bbdac;
  #L0bbda0.  v0:= new `kotlin.coroutines.CombinedContext$Serialized`;
  #L0bbda4.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/CombinedContext$Serialized;.<init>:([Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L0bbdaa.  return v0 @kind object;
  #L0bbdac.  v0:= new `java.lang.IllegalStateException`;
  #L0bbdb0.  v1:= "Check failed." @kind object;
  #L0bbdb4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0bbdba.  v1:= temp @kind object;
  #L0bbdbc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0bbdc2.  throw v0;
}
procedure `boolean` `equals`(`kotlin.coroutines.CombinedContext` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bbc84.  if v2 == v3 then goto L0bbcba;
  #L0bbc88.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L0bbc8c.  if v0 == 0 then goto L0bbcb6;
  #L0bbc90.  v3:= (`kotlin.coroutines.CombinedContext`) v3 @kind object;
  #L0bbc94.  call temp:= `c`(v3) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L0bbc9a.  v0:= temp;
  #L0bbc9c.  call temp:= `c`(v2) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L0bbca2.  v1:= temp;
  #L0bbca4.  if v0 != v1 then goto L0bbcb6;
  #L0bbca8.  call temp:= `b`(v3, v2) @signature `Lkotlin/coroutines/CombinedContext;.b:(Lkotlin/coroutines/CombinedContext;)Z` @kind direct;
  #L0bbcae.  v3:= temp;
  #L0bbcb0.  if v3 == 0 then goto L0bbcb6;
  #L0bbcb4.  goto L0bbcba;
  #L0bbcb6.  v3:= 0I;
  #L0bbcb8.  goto L0bbcbc;
  #L0bbcba.  v3:= 1I;
  #L0bbcbc.  return v3;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.CombinedContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bbd30.  v0:= "operation" @kind object;
  #L0bbd34.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbd3a.  v0:= v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbd3e.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L0bbd44.  v2:= temp @kind object;
  #L0bbd46.  v0:= v1.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbd4a.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0bbd50.  v2:= temp @kind object;
  #L0bbd52.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bbeac.  v0:= "key" @kind object;
  #L0bbeb0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbeb6.  v0:= v2 @kind object;
  #L0bbeb8.  v1:= v0.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbebc.  call temp:= `get`(v1, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0bbec2.  v1:= temp @kind object;
  #L0bbec4.  if v1 == 0 then goto L0bbeca;
  #L0bbec8.  return v1 @kind object;
  #L0bbeca.  v0:= v0.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbece.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L0bbed2.  if v1 == 0 then goto L0bbedc;
  #L0bbed6.  v0:= (`kotlin.coroutines.CombinedContext`) v0 @kind object;
  #L0bbeda.  goto L0bbeb8;
  #L0bbedc.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0bbee2.  v3:= temp @kind object;
  #L0bbee4.  return v3 @kind object;
}
procedure `int` `hashCode`(`kotlin.coroutines.CombinedContext` v2 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bbcd0.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbcd4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0bbcda.  v0:= temp;
  #L0bbcdc.  v1:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbce0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0bbce6.  v1:= temp;
  #L0bbce8.  v0:= v0 + v1 @kind int;
  #L0bbcea.  return v0;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bbe28.  v0:= "key" @kind object;
  #L0bbe2c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbe32.  v0:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbe36.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0bbe3c.  v0:= temp @kind object;
  #L0bbe3e.  if v0 == 0 then goto L0bbe48;
  #L0bbe42.  v3:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbe46.  return v3 @kind object;
  #L0bbe48.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbe4c.  call temp:= `minusKey`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0bbe52.  v3:= temp @kind object;
  #L0bbe54.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L0bbe58.  if v3 != v0 then goto L0bbe60;
  #L0bbe5c.  v3:= v2 @kind object;
  #L0bbe5e.  goto L0bbe7e;
  #L0bbe60.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L0bbe64.  if v3 != v0 then goto L0bbe6e;
  #L0bbe68.  v3:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbe6c.  goto L0bbe7e;
  #L0bbe6e.  v0:= new `kotlin.coroutines.CombinedContext`;
  #L0bbe72.  v1:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L0bbe76.  call `<init>`(v0, v3, v1) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @kind direct;
  #L0bbe7c.  v3:= v0 @kind object;
  #L0bbe7e.  return v3 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.CombinedContext` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L0bbe90.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L0bbe96.  v1:= temp @kind object;
  #L0bbe98.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0bbdd4.  v0:= new `java.lang.StringBuilder`;
  #L0bbdd8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0bbdde.  v1:= 91I;
  #L0bbde2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bbde8.  v1:= `@@kotlin.coroutines.CombinedContext$a.a` @type ^`kotlin.coroutines.CombinedContext$a` @kind object;
  #L0bbdec.  v2:= "" @kind object;
  #L0bbdf0.  call temp:= `fold`(v3, v2, v1) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L0bbdf6.  v1:= temp @kind object;
  #L0bbdf8.  v1:= (`java.lang.String`) v1 @kind object;
  #L0bbdfc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bbe02.  v1:= 93I;
  #L0bbe06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bbe0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0bbe12.  v0:= temp @kind object;
  #L0bbe14.  return v0 @kind object;
}
