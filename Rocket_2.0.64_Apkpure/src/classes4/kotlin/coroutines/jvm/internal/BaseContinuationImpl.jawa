record `kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0bcfcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0bcfd2.  v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L0bcfd6.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L0bcf34.  v1:= "completion" @kind object;
  #L0bcf38.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bcf3e.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0bcf42.  v2:= "create(Any?;Continuation) has not been overridden" @kind object;
  #L0bcf46.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0bcf4c.  throw v1;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bcf60.  v0:= "completion" @kind object;
  #L0bcf64.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bcf6a.  v2:= new `java.lang.UnsupportedOperationException`;
  #L0bcf6e.  v0:= "create(Continuation) has not been overridden" @kind object;
  #L0bcf72.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0bcf78.  throw v2;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bcfa4.  v0:= v2.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bcfa8.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L0bcfac.  if v1 == 0 then goto L0bcfb6;
  #L0bcfb0.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L0bcfb4.  goto L0bcfb8;
  #L0bcfb6.  v0:= 0I;
  #L0bcfb8.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation` `getCompletion`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCompletion:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0bcf8c.  v0:= v1.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bcf90.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bcec4.  call temp:= `getStackTraceElement`(v1) @signature `Lkotlin/coroutines/jvm/internal/DebugMetadataKt;.getStackTraceElement:(Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;)Ljava/lang/StackTraceElement;` @kind static;
  #L0bceca.  v0:= temp @kind object;
  #L0bcecc.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `releaseIntercepted`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @AccessFlag PROTECTED {
    temp;

  #L0bcfe8.  return @kind void;
}
procedure `void` `resumeWith`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bcffc.  v0:= v3 @kind object;
  #L0bcffe.  call `probeCoroutineResumed`(v0) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineResumed:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L0bd004.  v0:= (`kotlin.coroutines.jvm.internal.BaseContinuationImpl`) v0 @kind object;
  #L0bd008.  v1:= v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bd00c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0bd012.  call temp:= `invokeSuspend`(v0, v4) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0bd018.  v4:= temp @kind object;
  #L0bd01a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bd020.  v2:= temp @kind object;
  #L0bd022.  if v4 != v2 then goto L0bd028;
  #L0bd026.  return @kind void;
  #L0bd028.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L0bd02c.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L0bd032.  v4:= temp @kind object;
  #L0bd034.  goto L0bd04c;
  #L0bd036.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0bd038.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L0bd03c.  call temp:= `createFailure`(v4) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L0bd042.  v4:= temp @kind object;
  #L0bd044.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L0bd04a.  v4:= temp @kind object;
  #L0bd04c.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @kind virtual;
  #L0bd052.  v0:= instanceof @variable v1 @type ^`kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind boolean;
  #L0bd056.  if v0 == 0 then goto L0bd05e;
  #L0bd05a.  v0:= v1 @kind object;
  #L0bd05c.  goto L0bcffe;
  #L0bd05e.  call `resumeWith`(v1, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L0bd064.  return @kind void;
  catch `java.lang.Throwable` @[L0bd012..L0bd034] goto L0bd036;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bcee0.  v0:= new `java.lang.StringBuilder`;
  #L0bcee4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0bceea.  v1:= "Continuation at " @kind object;
  #L0bceee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bcef4.  call temp:= `getStackTraceElement`(v2) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind virtual;
  #L0bcefa.  v1:= temp @kind object;
  #L0bcefc.  if v1 == 0 then goto L0bcf02;
  #L0bcf00.  goto L0bcf12;
  #L0bcf02.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L0bcf08.  v1:= temp @kind object;
  #L0bcf0a.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0bcf10.  v1:= temp @kind object;
  #L0bcf12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bcf18.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0bcf1e.  v0:= temp @kind object;
  #L0bcf20.  return v0 @kind object;
}
