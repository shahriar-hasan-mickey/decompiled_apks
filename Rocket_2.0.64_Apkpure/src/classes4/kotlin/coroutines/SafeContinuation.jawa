record `kotlin.coroutines.SafeContinuation` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.SafeContinuation.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.coroutines.SafeContinuation.result` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.coroutines.SafeContinuation$a` `@@kotlin.coroutines.SafeContinuation.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlin.coroutines.SafeContinuation.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/SafeContinuation;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0bc718.  v0:= new `kotlin.coroutines.SafeContinuation$a`;
  #L0bc71c.  v1:= 0I;
  #L0bc71e.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/SafeContinuation$a;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0bc724.  `@@kotlin.coroutines.SafeContinuation.b` @type ^`kotlin.coroutines.SafeContinuation$a` := v0 @kind object;
  #L0bc728.  v0:= constclass @type ^`kotlin.coroutines.SafeContinuation` @kind object;
  #L0bc72c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L0bc730.  v2:= "result" @kind object;
  #L0bc734.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L0bc73a.  v0:= temp @kind object;
  #L0bc73c.  `@@kotlin.coroutines.SafeContinuation.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L0bc740.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bc754.  v0:= "delegate" @kind object;
  #L0bc758.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bc75e.  v0:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L0bc762.  call `<init>`(v1, v2, v0) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @kind direct;
  #L0bc768.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bc77c.  v0:= "delegate" @kind object;
  #L0bc780.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bc786.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0bc78c.  v1.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L0bc790.  v1.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` := v3 @kind object;
  #L0bc794.  return @kind void;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bc6f0.  v0:= v2.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bc6f4.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L0bc6f8.  if v1 == 0 then goto L0bc702;
  #L0bc6fc.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L0bc700.  goto L0bc704;
  #L0bc702.  v0:= 0I;
  #L0bc704.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bc6d0.  v0:= v1.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bc6d4.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0bc6da.  v0:= temp @kind object;
  #L0bc6dc.  return v0 @kind object;
}
procedure `java.lang.Object` `getOrThrow`(`kotlin.coroutines.SafeContinuation` v3 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getOrThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bc61c.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L0bc620.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L0bc624.  if v0 != v1 then goto L0bc64e;
  #L0bc628.  v0:= `@@kotlin.coroutines.SafeContinuation.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L0bc62c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bc632.  v2:= temp @kind object;
  #L0bc634.  call temp:= `a`(v0, v3, v1, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0bc63a.  v0:= temp;
  #L0bc63c.  if v0 == 0 then goto L0bc64a;
  #L0bc640.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bc646.  v0:= temp @kind object;
  #L0bc648.  return v0 @kind object;
  #L0bc64a.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L0bc64e.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L0bc652.  if v0 != v1 then goto L0bc660;
  #L0bc656.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bc65c.  v0:= temp @kind object;
  #L0bc65e.  goto L0bc668;
  #L0bc660.  v1:= instanceof @variable v0 @type ^`kotlin.Result$Failure` @kind boolean;
  #L0bc664.  if v1 != 0 then goto L0bc66a;
  #L0bc668.  return v0 @kind object;
  #L0bc66a.  v0:= (`kotlin.Result$Failure`) v0 @kind object;
  #L0bc66e.  v0:= v0.`kotlin.Result$Failure.exception` @type ^`java.lang.Throwable` @kind object;
  #L0bc672.  throw v0;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bc684.  v0:= 0I;
  #L0bc686.  return v0 @kind object;
}
procedure `void` `resumeWith`(`kotlin.coroutines.SafeContinuation` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0bc7a8.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L0bc7ac.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L0bc7b0.  if v0 != v1 then goto L0bc7c6;
  #L0bc7b4.  v0:= `@@kotlin.coroutines.SafeContinuation.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L0bc7b8.  call temp:= `a`(v0, v3, v1, v4) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0bc7be.  v0:= temp;
  #L0bc7c0.  if v0 == 0 then goto L0bc7a8;
  #L0bc7c4.  return @kind void;
  #L0bc7c6.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bc7cc.  v1:= temp @kind object;
  #L0bc7ce.  if v0 != v1 then goto L0bc7fa;
  #L0bc7d2.  v0:= `@@kotlin.coroutines.SafeContinuation.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L0bc7d6.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0bc7dc.  v1:= temp @kind object;
  #L0bc7de.  v2:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L0bc7e2.  call temp:= `a`(v0, v3, v1, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0bc7e8.  v0:= temp;
  #L0bc7ea.  if v0 == 0 then goto L0bc7a8;
  #L0bc7ee.  v0:= v3.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bc7f2.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L0bc7f8.  return @kind void;
  #L0bc7fa.  v4:= new `java.lang.IllegalStateException`;
  #L0bc7fe.  v0:= "Already resumed" @kind object;
  #L0bc802.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0bc808.  throw v4;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0bc698.  v0:= new `java.lang.StringBuilder`;
  #L0bc69c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0bc6a2.  v1:= "SafeContinuation for " @kind object;
  #L0bc6a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bc6ac.  v1:= v2.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0bc6b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0bc6b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0bc6bc.  v0:= temp @kind object;
  #L0bc6be.  return v0 @kind object;
}
