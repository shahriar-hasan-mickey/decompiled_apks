record `kotlin.coroutines.ContinuationInterceptor$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.fold:(Lkotlin/coroutines/ContinuationInterceptor;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0bbf2c.  v0:= "operation" @kind object;
  #L0bbf30.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbf36.  call temp:= `fold`(v1, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L0bbf3c.  v1:= temp @kind object;
  #L0bbf3e.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.ContinuationInterceptor` v2 @kind object, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.get:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0bbfd0.  v0:= "key" @kind object;
  #L0bbfd4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbfda.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L0bbfde.  v1:= 0I;
  #L0bbfe0.  if v0 == 0 then goto L0bc010;
  #L0bbfe4.  v3:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v3 @kind object;
  #L0bbfe8.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L0bbfee.  v0:= temp @kind object;
  #L0bbff0.  call temp:= `isSubKey$kotlin_stdlib`(v3, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L0bbff6.  v0:= temp;
  #L0bbff8.  if v0 == 0 then goto L0bc00e;
  #L0bbffc.  call temp:= `tryCast$kotlin_stdlib`(v3, v2) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L0bc002.  v2:= temp @kind object;
  #L0bc004.  v3:= instanceof @variable v2 @type ^`kotlin.coroutines.CoroutineContext$Element` @kind boolean;
  #L0bc008.  if v3 == 0 then goto L0bc00e;
  #L0bc00c.  v1:= v2 @kind object;
  #L0bc00e.  return v1 @kind object;
  #L0bc010.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L0bc014.  if v0 != v3 then goto L0bc024;
  #L0bc018.  v3:= "null cannot be cast to non-null type E of kotlin.coroutines.ContinuationInterceptor.get" @kind object;
  #L0bc01c.  call `checkNotNull`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bc022.  goto L0bc026;
  #L0bc024.  v2:= v1 @kind object;
  #L0bc026.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.minusKey:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0bbf50.  v0:= "key" @kind object;
  #L0bbf54.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbf5a.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L0bbf5e.  if v0 == 0 then goto L0bbf8c;
  #L0bbf62.  v2:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v2 @kind object;
  #L0bbf66.  call temp:= `getKey`(v1) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L0bbf6c.  v0:= temp @kind object;
  #L0bbf6e.  call temp:= `isSubKey$kotlin_stdlib`(v2, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L0bbf74.  v0:= temp;
  #L0bbf76.  if v0 == 0 then goto L0bbf8a;
  #L0bbf7a.  call temp:= `tryCast$kotlin_stdlib`(v2, v1) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L0bbf80.  v2:= temp @kind object;
  #L0bbf82.  if v2 == 0 then goto L0bbf8a;
  #L0bbf86.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L0bbf8a.  return v1 @kind object;
  #L0bbf8c.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L0bbf90.  if v0 != v2 then goto L0bbf98;
  #L0bbf94.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L0bbf98.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.plus:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0bbfac.  v0:= "context" @kind object;
  #L0bbfb0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bbfb6.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L0bbfbc.  v1:= temp @kind object;
  #L0bbfbe.  return v1 @kind object;
}
procedure `void` `releaseInterceptedContinuation`(`kotlin.coroutines.ContinuationInterceptor` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.releaseInterceptedContinuation:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L0bc038.  v0:= "continuation" @kind object;
  #L0bc03c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bc042.  return @kind void;
}
