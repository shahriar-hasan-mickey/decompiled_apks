record `kotlin.coroutines.AbstractCoroutineContextKey` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.CoroutineContext$Key` @kind interface {
  `kotlin.jvm.functions.Function1` `kotlin.coroutines.AbstractCoroutineContextKey.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.CoroutineContext$Key` `kotlin.coroutines.AbstractCoroutineContextKey.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.AbstractCoroutineContextKey` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bb9bc.  v0:= "baseKey" @kind object;
  #L0bb9c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bb9c6.  v0:= "safeCast" @kind object;
  #L0bb9ca.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bb9d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0bb9d6.  v1.`kotlin.coroutines.AbstractCoroutineContextKey.a` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L0bb9da.  v3:= instanceof @variable v2 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L0bb9de.  if v3 == 0 then goto L0bb9ea;
  #L0bb9e2.  v2:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v2 @kind object;
  #L0bb9e6.  v2:= v2.`kotlin.coroutines.AbstractCoroutineContextKey.b` @type ^`kotlin.coroutines.CoroutineContext$Key` @kind object;
  #L0bb9ea.  v1.`kotlin.coroutines.AbstractCoroutineContextKey.b` @type ^`kotlin.coroutines.CoroutineContext$Key` := v2 @kind object;
  #L0bb9ee.  return @kind void;
}
procedure `boolean` `isSubKey$kotlin_stdlib`(`kotlin.coroutines.AbstractCoroutineContextKey` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0bb960.  v0:= "key" @kind object;
  #L0bb964.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bb96a.  if v2 == v1 then goto L0bb97c;
  #L0bb96e.  v0:= v1.`kotlin.coroutines.AbstractCoroutineContextKey.b` @type ^`kotlin.coroutines.CoroutineContext$Key` @kind object;
  #L0bb972.  if v0 != v2 then goto L0bb978;
  #L0bb976.  goto L0bb97c;
  #L0bb978.  v2:= 0I;
  #L0bb97a.  goto L0bb97e;
  #L0bb97c.  v2:= 1I;
  #L0bb97e.  return v2;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `tryCast$kotlin_stdlib`(`kotlin.coroutines.AbstractCoroutineContextKey` v1 @kind this, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0bb990.  v0:= "element" @kind object;
  #L0bb994.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bb99a.  v0:= v1.`kotlin.coroutines.AbstractCoroutineContextKey.a` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0bb99e.  call temp:= `invoke`(v0, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0bb9a4.  v2:= temp @kind object;
  #L0bb9a6.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L0bb9aa.  return v2 @kind object;
}
