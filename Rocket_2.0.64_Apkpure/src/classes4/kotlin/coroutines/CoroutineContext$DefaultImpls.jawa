record `kotlin.coroutines.CoroutineContext$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0bc240.  v0:= "context" @kind object;
  #L0bc244.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bc24a.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L0bc24e.  if v2 != v0 then goto L0bc254;
  #L0bc252.  goto L0bc264;
  #L0bc254.  v0:= `@@kotlin.coroutines.CoroutineContext$DefaultImpls$a.a` @type ^`kotlin.coroutines.CoroutineContext$DefaultImpls$a` @kind object;
  #L0bc258.  call temp:= `fold`(v2, v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L0bc25e.  v1:= temp @kind object;
  #L0bc260.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L0bc264.  return v1 @kind object;
}
