record `kotlin.random.XorWowRandom` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.Random` @kind class, `java.io.Serializable` @kind interface {
  `int` `kotlin.random.XorWowRandom.b` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.c` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.d` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.e` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.f` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.g` @AccessFlag PRIVATE;
}
global `kotlin.random.XorWowRandom$a` `@@kotlin.random.XorWowRandom.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@kotlin.random.XorWowRandom.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/XorWowRandom;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cba4c.  v0:= new `kotlin.random.XorWowRandom$a`;
  #L0cba50.  v1:= 0I;
  #L0cba52.  call `<init>`(v0, v1) @signature `Lkotlin/random/XorWowRandom$a;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cba58.  `@@kotlin.random.XorWowRandom.h` @type ^`kotlin.random.XorWowRandom$a` := v0 @kind object;
  #L0cba5c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.XorWowRandom` v7 @kind this, `int` v8 , `int` v9 ) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cba70.  v5:= ~v8 @kind int;
  #L0cba72.  v0:= v8 ^< 10;
  #L0cba76.  v1:= v9 ^>> 4;
  #L0cba7a.  v6:= v0 ^~ v1 @kind int;
  #L0cba7e.  v3:= 0I;
  #L0cba80.  v4:= 0I;
  #L0cba82.  v0:= v7 @kind object;
  #L0cba84.  v1:= v8;
  #L0cba86.  v2:= v9;
  #L0cba88.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/random/XorWowRandom;.<init>:(IIIIII)V` @kind direct;
  #L0cba8e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.XorWowRandom` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/random/XorWowRandom;.<init>:(IIIIII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cbaa0.  call `<init>`(v0) @signature `Lkotlin/random/Random;.<init>:()V` @kind direct;
  #L0cbaa6.  v0.`kotlin.random.XorWowRandom.b` @type ^`int` := v1;
  #L0cbaaa.  v0.`kotlin.random.XorWowRandom.c` @type ^`int` := v2;
  #L0cbaae.  v0.`kotlin.random.XorWowRandom.d` @type ^`int` := v3;
  #L0cbab2.  v0.`kotlin.random.XorWowRandom.e` @type ^`int` := v4;
  #L0cbab6.  v0.`kotlin.random.XorWowRandom.f` @type ^`int` := v5;
  #L0cbaba.  v0.`kotlin.random.XorWowRandom.g` @type ^`int` := v6;
  #L0cbabe.  v1:= v1 ^| v2 @kind int;
  #L0cbac0.  v1:= v1 ^| v3 @kind int;
  #L0cbac2.  v1:= v1 ^| v4 @kind int;
  #L0cbac4.  v1:= v1 ^| v5 @kind int;
  #L0cbac6.  v2:= 0I;
  #L0cbac8.  if v1 == 0 then goto L0cbad0;
  #L0cbacc.  v1:= 1I;
  #L0cbace.  goto L0cbad2;
  #L0cbad0.  v1:= 0I;
  #L0cbad2.  if v1 == 0 then goto L0cbaec;
  #L0cbad6.  v1:= 64I;
  #L0cbada.  if v2 >= v1 then goto L0cbaea;
  #L0cbade.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @kind virtual;
  #L0cbae4.  v2:= v2 + 1;
  #L0cbae8.  goto L0cbada;
  #L0cbaea.  return @kind void;
  #L0cbaec.  v1:= new `java.lang.IllegalArgumentException`;
  #L0cbaf0.  v2:= "Initial state must have at least one non-zero element." @kind object;
  #L0cbaf4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cbafa.  v2:= temp @kind object;
  #L0cbafc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cbb02.  throw v1;
}
procedure `int` `nextBits`(`kotlin.random.XorWowRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/XorWowRandom;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cb9c8.  call temp:= `nextInt`(v1) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @kind virtual;
  #L0cb9ce.  v0:= temp;
  #L0cb9d0.  call temp:= `takeUpperBits`(v0, v2) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @kind static;
  #L0cb9d6.  v2:= temp;
  #L0cb9d8.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.XorWowRandom` v3 @kind this) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0cb9ec.  v0:= v3.`kotlin.random.XorWowRandom.b` @type ^`int`;
  #L0cb9f0.  v1:= v0 ^>> 2;
  #L0cb9f4.  v0:= v0 ^~ v1 @kind int;
  #L0cb9f6.  v1:= v3.`kotlin.random.XorWowRandom.c` @type ^`int`;
  #L0cb9fa.  v3.`kotlin.random.XorWowRandom.b` @type ^`int` := v1;
  #L0cb9fe.  v1:= v3.`kotlin.random.XorWowRandom.d` @type ^`int`;
  #L0cba02.  v3.`kotlin.random.XorWowRandom.c` @type ^`int` := v1;
  #L0cba06.  v1:= v3.`kotlin.random.XorWowRandom.e` @type ^`int`;
  #L0cba0a.  v3.`kotlin.random.XorWowRandom.d` @type ^`int` := v1;
  #L0cba0e.  v1:= v3.`kotlin.random.XorWowRandom.f` @type ^`int`;
  #L0cba12.  v3.`kotlin.random.XorWowRandom.e` @type ^`int` := v1;
  #L0cba16.  v2:= v0 ^< 1;
  #L0cba1a.  v0:= v0 ^~ v2 @kind int;
  #L0cba1c.  v0:= v0 ^~ v1 @kind int;
  #L0cba1e.  v1:= v1 ^< 4;
  #L0cba22.  v0:= v0 ^~ v1 @kind int;
  #L0cba24.  v3.`kotlin.random.XorWowRandom.f` @type ^`int` := v0;
  #L0cba28.  v1:= v3.`kotlin.random.XorWowRandom.g` @type ^`int`;
  #L0cba2c.  v2:= 362437I;
  #L0cba32.  v1:= v1 + v2 @kind int;
  #L0cba34.  v3.`kotlin.random.XorWowRandom.g` @type ^`int` := v1;
  #L0cba38.  v0:= v0 + v1 @kind int;
  #L0cba3a.  return v0;
}
