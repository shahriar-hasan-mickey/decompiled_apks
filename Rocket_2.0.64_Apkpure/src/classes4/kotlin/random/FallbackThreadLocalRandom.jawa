record `kotlin.random.FallbackThreadLocalRandom` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.AbstractPlatformRandom` @kind class {
  `kotlin.random.FallbackThreadLocalRandom$implStorage$1` `kotlin.random.FallbackThreadLocalRandom.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.random.FallbackThreadLocalRandom` v1 @kind this) @signature `Lkotlin/random/FallbackThreadLocalRandom;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ca5d8.  call `<init>`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.<init>:()V` @kind direct;
  #L0ca5de.  v0:= new `kotlin.random.FallbackThreadLocalRandom$implStorage$1`;
  #L0ca5e2.  call `<init>`(v0) @signature `Lkotlin/random/FallbackThreadLocalRandom$implStorage$1;.<init>:()V` @kind direct;
  #L0ca5e8.  v1.`kotlin.random.FallbackThreadLocalRandom.b` @type ^`kotlin.random.FallbackThreadLocalRandom$implStorage$1` := v0 @kind object;
  #L0ca5ec.  return @kind void;
}
procedure `java.util.Random` `getImpl`(`kotlin.random.FallbackThreadLocalRandom` v2 @kind this) @signature `Lkotlin/random/FallbackThreadLocalRandom;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ca5ac.  v0:= v2.`kotlin.random.FallbackThreadLocalRandom.b` @type ^`kotlin.random.FallbackThreadLocalRandom$implStorage$1` @kind object;
  #L0ca5b0.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L0ca5b6.  v0:= temp @kind object;
  #L0ca5b8.  v1:= "implStorage.get()" @kind object;
  #L0ca5bc.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ca5c2.  v0:= (`java.util.Random`) v0 @kind object;
  #L0ca5c6.  return v0 @kind object;
}
