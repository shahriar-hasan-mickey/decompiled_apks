record `kotlin.random.RandomKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.random.Random` `Random`(`int` v2 ) @signature `Lkotlin/random/RandomKt;.Random:(I)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0cad4c.  v0:= new `kotlin.random.XorWowRandom`;
  #L0cad50.  v1:= v2 ^> 31;
  #L0cad54.  call `<init>`(v0, v2, v1) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L0cad5a.  return v0 @kind object;
}
procedure `kotlin.random.Random` `Random`(`long` v3 ) @signature `Lkotlin/random/RandomKt;.Random:(J)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0cad6c.  v0:= new `kotlin.random.XorWowRandom`;
  #L0cad70.  v1:= (`int`) v3 @kind l2i;
  #L0cad72.  v2:= 32I;
  #L0cad76.  v3:= v3 ^> v2 @kind long;
  #L0cad78.  v4:= (`int`) v3 @kind l2i;
  #L0cad7a.  call `<init>`(v0, v1, v4) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L0cad80.  return v0 @kind object;
}
procedure `java.lang.String` `boundsErrorMessage`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0cace8.  v0:= "from" @kind object;
  #L0cacec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cacf2.  v0:= "until" @kind object;
  #L0cacf6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cacfc.  v0:= new `java.lang.StringBuilder`;
  #L0cad00.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cad06.  v1:= "Random range is empty: [" @kind object;
  #L0cad0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cad10.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cad16.  v2:= ", " @kind object;
  #L0cad1a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cad20.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cad26.  v2:= ")." @kind object;
  #L0cad2a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cad30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cad36.  v2:= temp @kind object;
  #L0cad38.  return v2 @kind object;
}
procedure `void` `checkRangeBounds`(`double` v1 , `double` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0cae68.  v0:= dcmpl(v3, v1);
  #L0cae6c.  if v0 <= 0 then goto L0cae74;
  #L0cae70.  v0:= 1I;
  #L0cae72.  goto L0cae76;
  #L0cae74.  v0:= 0I;
  #L0cae76.  if v0 == 0 then goto L0cae7c;
  #L0cae7a.  return @kind void;
  #L0cae7c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cae82.  v1:= temp @kind object;
  #L0cae84.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L0cae8a.  v2:= temp @kind object;
  #L0cae8c.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0cae92.  v1:= temp @kind object;
  #L0cae94.  v2:= new `java.lang.IllegalArgumentException`;
  #L0cae98.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cae9e.  v1:= temp @kind object;
  #L0caea0.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0caea6.  throw v2;
}
procedure `void` `checkRangeBounds`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0caeb8.  if v2 <= v1 then goto L0caec0;
  #L0caebc.  v0:= 1I;
  #L0caebe.  goto L0caec2;
  #L0caec0.  v0:= 0I;
  #L0caec2.  if v0 == 0 then goto L0caec8;
  #L0caec6.  return @kind void;
  #L0caec8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0caece.  v1:= temp @kind object;
  #L0caed0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0caed6.  v2:= temp @kind object;
  #L0caed8.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0caede.  v1:= temp @kind object;
  #L0caee0.  v2:= new `java.lang.IllegalArgumentException`;
  #L0caee4.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0caeea.  v1:= temp @kind object;
  #L0caeec.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0caef2.  throw v2;
}
procedure `void` `checkRangeBounds`(`long` v1 , `long` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0caf04.  v0:= lcmp(v3, v1);
  #L0caf08.  if v0 <= 0 then goto L0caf10;
  #L0caf0c.  v0:= 1I;
  #L0caf0e.  goto L0caf12;
  #L0caf10.  v0:= 0I;
  #L0caf12.  if v0 == 0 then goto L0caf18;
  #L0caf16.  return @kind void;
  #L0caf18.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L0caf1e.  v1:= temp @kind object;
  #L0caf20.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L0caf26.  v2:= temp @kind object;
  #L0caf28.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0caf2e.  v1:= temp @kind object;
  #L0caf30.  v2:= new `java.lang.IllegalArgumentException`;
  #L0caf34.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0caf3a.  v1:= temp @kind object;
  #L0caf3c.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0caf42.  throw v2;
}
procedure `int` `fastLog2`(`int` v0 ) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0cabdc.  call temp:= `numberOfLeadingZeros`(v0) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L0cabe2.  v0:= temp;
  #L0cabe4.  v0:= v0 - 31;
  #L0cabe8.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v2 @kind object, `kotlin.ranges.IntRange` v3 @kind object) @signature `Lkotlin/random/RandomKt;.nextInt:(Lkotlin/random/Random;Lkotlin/ranges/IntRange;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0cabfc.  v0:= "<this>" @kind object;
  #L0cac00.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cac06.  v0:= "range" @kind object;
  #L0cac0a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cac10.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L0cac16.  v0:= temp;
  #L0cac18.  if v0 != 0 then goto L0cac88;
  #L0cac1c.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cac22.  v0:= temp;
  #L0cac24.  v1:= 2147483647I;
  #L0cac2a.  if v0 >= v1 then goto L0cac4c;
  #L0cac2e.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cac34.  v0:= temp;
  #L0cac36.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cac3c.  v3:= temp;
  #L0cac3e.  v3:= v3 + 1;
  #L0cac42.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L0cac48.  v2:= temp;
  #L0cac4a.  goto L0cac86;
  #L0cac4c.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cac52.  v0:= temp;
  #L0cac54.  v1:= -2147483648I;
  #L0cac58.  if v0 <= v1 then goto L0cac7e;
  #L0cac5c.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L0cac62.  v0:= temp;
  #L0cac64.  v0:= v0 + -1;
  #L0cac68.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L0cac6e.  v3:= temp;
  #L0cac70.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L0cac76.  v2:= temp;
  #L0cac78.  v2:= v2 + 1;
  #L0cac7c.  goto L0cac86;
  #L0cac7e.  call temp:= `nextInt`(v2) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cac84.  v2:= temp;
  #L0cac86.  return v2;
  #L0cac88.  v2:= new `java.lang.IllegalArgumentException`;
  #L0cac8c.  v0:= new `java.lang.StringBuilder`;
  #L0cac90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cac96.  v1:= "Cannot get random in empty range: " @kind object;
  #L0cac9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0caca0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0caca6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cacac.  v3:= temp @kind object;
  #L0cacae.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cacb4.  throw v2;
}
procedure `long` `nextLong`(`kotlin.random.Random` v7 @kind object, `kotlin.ranges.LongRange` v8 @kind object) @signature `Lkotlin/random/RandomKt;.nextLong:(Lkotlin/random/Random;Lkotlin/ranges/LongRange;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0cad94.  v0:= "<this>" @kind object;
  #L0cad98.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cad9e.  v0:= "range" @kind object;
  #L0cada2.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cada8.  call temp:= `isEmpty`(v8) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L0cadae.  v0:= temp;
  #L0cadb0.  if v0 != 0 then goto L0cae2a;
  #L0cadb4.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cadba.  v0:= temp @kind wide;
  #L0cadbc.  v2:= 9223372036854775807L;
  #L0cadc6.  v4:= 1L;
  #L0cadca.  v6:= lcmp(v0, v2);
  #L0cadce.  if v6 >= 0 then goto L0cadee;
  #L0cadd2.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cadd8.  v0:= temp @kind wide;
  #L0cadda.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cade0.  v2:= temp @kind wide;
  #L0cade2.  v2:= v2 + v4 @kind long;
  #L0cade4.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L0cadea.  v7:= temp @kind wide;
  #L0cadec.  goto L0cae28;
  #L0cadee.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cadf4.  v0:= temp @kind wide;
  #L0cadf6.  v2:= -9223372036854775808L;
  #L0cadfa.  v6:= lcmp(v0, v2);
  #L0cadfe.  if v6 <= 0 then goto L0cae20;
  #L0cae02.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L0cae08.  v0:= temp @kind wide;
  #L0cae0a.  v0:= v0 - v4 @kind long;
  #L0cae0c.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L0cae12.  v2:= temp @kind wide;
  #L0cae14.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L0cae1a.  v7:= temp @kind wide;
  #L0cae1c.  v7:= v7 + v4 @kind long;
  #L0cae1e.  goto L0cae28;
  #L0cae20.  call temp:= `nextLong`(v7) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L0cae26.  v7:= temp @kind wide;
  #L0cae28.  return v7 @kind wide;
  #L0cae2a.  v7:= new `java.lang.IllegalArgumentException`;
  #L0cae2e.  v0:= new `java.lang.StringBuilder`;
  #L0cae32.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cae38.  v1:= "Cannot get random in empty range: " @kind object;
  #L0cae3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cae42.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cae48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cae4e.  v8:= temp @kind object;
  #L0cae50.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cae56.  throw v7;
}
procedure `int` `takeUpperBits`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0cacc8.  v0:= v2 - 32;
  #L0caccc.  v1:= v1 ^>> v0 @kind int;
  #L0cacce.  v2:= -v2 @kind int;
  #L0cacd0.  v2:= v2 ^> 31;
  #L0cacd4.  v1:= v1 ^& v2 @kind int;
  #L0cacd6.  return v1;
}
