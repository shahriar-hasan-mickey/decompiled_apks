record `kotlin.random.a` @kind class @AccessFlag FINAL extends `java.util.Random` @kind class {
  `kotlin.random.Random` `kotlin.random.a.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.random.a.b` @AccessFlag PRIVATE;
}
global `kotlin.random.a$a` `@@kotlin.random.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@kotlin.random.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0ca728.  v0:= new `kotlin.random.a$a`;
  #L0ca72c.  v1:= 0I;
  #L0ca72e.  call `<init>`(v0, v1) @signature `Lkotlin/random/a$a;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0ca734.  `@@kotlin.random.a.c` @type ^`kotlin.random.a$a` := v0 @kind object;
  #L0ca738.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.a` v1 @kind this, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/random/a;.<init>:(Lkotlin/random/Random;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ca74c.  v0:= "impl" @kind object;
  #L0ca750.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ca756.  call `<init>`(v1) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L0ca75c.  v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` := v2 @kind object;
  #L0ca760.  return @kind void;
}
procedure `kotlin.random.Random` `a`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.a:()Lkotlin/random/Random;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0ca6f0.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca6f4.  return v0 @kind object;
}
procedure `int` `next`(`kotlin.random.a` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/a;.next:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0ca690.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca694.  call temp:= `nextBits`(v0, v2) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0ca69a.  v2:= temp;
  #L0ca69c.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca630.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca634.  call temp:= `nextBoolean`(v0) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @kind virtual;
  #L0ca63a.  v0:= temp;
  #L0ca63c.  return v0;
}
procedure `void` `nextBytes`(`kotlin.random.a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/a;.nextBytes:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca774.  v0:= "bytes" @kind object;
  #L0ca778.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ca77e.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca782.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L0ca788.  return @kind void;
}
procedure `double` `nextDouble`(`kotlin.random.a` v2 @kind this) @signature `Lkotlin/random/a;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ca650.  v0:= v2.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca654.  call temp:= `nextDouble`(v0) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L0ca65a.  v0:= temp @kind wide;
  #L0ca65c.  return v0 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca670.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca674.  call temp:= `nextFloat`(v0) @signature `Lkotlin/random/Random;.nextFloat:()F` @kind virtual;
  #L0ca67a.  v0:= temp;
  #L0ca67c.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca6b0.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca6b4.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0ca6ba.  v0:= temp;
  #L0ca6bc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.a` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/a;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca6d0.  v0:= v1.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca6d4.  call temp:= `nextInt`(v0, v2) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L0ca6da.  v2:= temp;
  #L0ca6dc.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.a` v2 @kind this) @signature `Lkotlin/random/a;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0ca708.  v0:= v2.`kotlin.random.a.a` @type ^`kotlin.random.Random` @kind object;
  #L0ca70c.  call temp:= `nextLong`(v0) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L0ca712.  v0:= temp @kind wide;
  #L0ca714.  return v0 @kind wide;
}
procedure `void` `setSeed`(`kotlin.random.a` v0 @kind this, `long` v1 ) @signature `Lkotlin/random/a;.setSeed:(J)V` @AccessFlag PUBLIC {
    temp;

  #L0ca79c.  v1:= v0.`kotlin.random.a.b` @type ^`boolean` @kind boolean;
  #L0ca7a0.  if v1 != 0 then goto L0ca7ac;
  #L0ca7a4.  v1:= 1I;
  #L0ca7a6.  v0.`kotlin.random.a.b` @type ^`boolean` := v1 @kind boolean;
  #L0ca7aa.  return @kind void;
  #L0ca7ac.  v1:= new `java.lang.UnsupportedOperationException`;
  #L0ca7b0.  v2:= "Setting seed is not supported." @kind object;
  #L0ca7b4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0ca7ba.  throw v1;
}
