record `kotlin.random.Random$Default` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.Random` @kind class, `java.io.Serializable` @kind interface {
}
procedure `void` `<init>`(`kotlin.random.Random$Default` v0 @kind this) @signature `Lkotlin/random/Random$Default;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0cabac.  call `<init>`(v0) @signature `Lkotlin/random/Random;.<init>:()V` @kind direct;
  #L0cabb2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.Random$Default` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lkotlin/random/Random$Default;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L0cabc4.  call `<init>`(v0) @signature `Lkotlin/random/Random$Default;.<init>:()V` @kind direct;
  #L0cabca.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0cab28.  v0:= `@@kotlin.random.Random$Default$a.a` @type ^`kotlin.random.Random$Default$a` @kind object;
  #L0cab2c.  return v0 @kind object;
}
procedure `int` `nextBits`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caa98.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caa9e.  v0:= temp @kind object;
  #L0caaa0.  call temp:= `nextBits`(v0, v2) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0caaa6.  v2:= temp;
  #L0caaa8.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca968.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0ca96e.  v0:= temp @kind object;
  #L0ca970.  call temp:= `nextBoolean`(v0) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @kind virtual;
  #L0ca976.  v0:= temp;
  #L0ca978.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca9e4.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0ca9ea.  v0:= temp @kind object;
  #L0ca9ec.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:(I)[B` @kind virtual;
  #L0ca9f2.  v2:= temp @kind object;
  #L0ca9f4.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/Random$Default;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca98c.  v0:= "array" @kind object;
  #L0ca990.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ca996.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0ca99c.  v0:= temp @kind object;
  #L0ca99e.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L0ca9a4.  v2:= temp @kind object;
  #L0ca9a6.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lkotlin/random/Random$Default;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ca9b8.  v0:= "array" @kind object;
  #L0ca9bc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0ca9c2.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0ca9c8.  v0:= temp @kind object;
  #L0ca9ca.  call temp:= `nextBytes`(v0, v2, v3, v4) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L0ca9d0.  v2:= temp @kind object;
  #L0ca9d2.  return v2 @kind object;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v2 @kind this) @signature `Lkotlin/random/Random$Default;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0caa08.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caa0e.  v0:= temp @kind object;
  #L0caa10.  call temp:= `nextDouble`(v0) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L0caa16.  v0:= temp @kind wide;
  #L0caa18.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v1 @kind this, `double` v2 ) @signature `Lkotlin/random/Random$Default;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caa2c.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caa32.  v0:= temp @kind object;
  #L0caa34.  call temp:= `nextDouble`(v0, v2) @signature `Lkotlin/random/Random;.nextDouble:(D)D` @kind virtual;
  #L0caa3a.  v2:= temp @kind wide;
  #L0caa3c.  return v2 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lkotlin/random/Random$Default;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caa50.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caa56.  v0:= temp @kind object;
  #L0caa58.  call temp:= `nextDouble`(v0, v2, v4) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @kind virtual;
  #L0caa5e.  v2:= temp @kind wide;
  #L0caa60.  return v2 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caa74.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caa7a.  v0:= temp @kind object;
  #L0caa7c.  call temp:= `nextFloat`(v0) @signature `Lkotlin/random/Random;.nextFloat:()F` @kind virtual;
  #L0caa82.  v0:= temp;
  #L0caa84.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caabc.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caac2.  v0:= temp @kind object;
  #L0caac4.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0caaca.  v0:= temp;
  #L0caacc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0caae0.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0caae6.  v0:= temp @kind object;
  #L0caae8.  call temp:= `nextInt`(v0, v2) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L0caaee.  v2:= temp;
  #L0caaf0.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/random/Random$Default;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cab04.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0cab0a.  v0:= temp @kind object;
  #L0cab0c.  call temp:= `nextInt`(v0, v2, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L0cab12.  v2:= temp;
  #L0cab14.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v2 @kind this) @signature `Lkotlin/random/Random$Default;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cab40.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0cab46.  v0:= temp @kind object;
  #L0cab48.  call temp:= `nextLong`(v0) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L0cab4e.  v0:= temp @kind wide;
  #L0cab50.  return v0 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v1 @kind this, `long` v2 ) @signature `Lkotlin/random/Random$Default;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cab64.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0cab6a.  v0:= temp @kind object;
  #L0cab6c.  call temp:= `nextLong`(v0, v2) @signature `Lkotlin/random/Random;.nextLong:(J)J` @kind virtual;
  #L0cab72.  v2:= temp @kind wide;
  #L0cab74.  return v2 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lkotlin/random/Random$Default;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cab88.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L0cab8e.  v0:= temp @kind object;
  #L0cab90.  call temp:= `nextLong`(v0, v2, v4) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L0cab96.  v2:= temp @kind wide;
  #L0cab98.  return v2 @kind wide;
}
