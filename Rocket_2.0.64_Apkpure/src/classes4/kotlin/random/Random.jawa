record `kotlin.random.Random` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `kotlin.random.Random$Default` `@@kotlin.random.Random.Default` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.random.Random` `@@kotlin.random.Random.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/Random;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0cb4c4.  v0:= new `kotlin.random.Random$Default`;
  #L0cb4c8.  v1:= 0I;
  #L0cb4ca.  call `<init>`(v0, v1) @signature `Lkotlin/random/Random$Default;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0cb4d0.  `@@kotlin.random.Random.Default` @type ^`kotlin.random.Random$Default` := v0 @kind object;
  #L0cb4d4.  v0:= `@@kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS` @type ^`kotlin.internal.PlatformImplementations` @kind object;
  #L0cb4d8.  call temp:= `defaultPlatformRandom`(v0) @signature `Lkotlin/internal/PlatformImplementations;.defaultPlatformRandom:()Lkotlin/random/Random;` @kind virtual;
  #L0cb4de.  v0:= temp @kind object;
  #L0cb4e0.  `@@kotlin.random.Random.a` @type ^`kotlin.random.Random` := v0 @kind object;
  #L0cb4e4.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.Random` v0 @kind this) @signature `Lkotlin/random/Random;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cb4f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0cb4fe.  return @kind void;
}
procedure `kotlin.random.Random` `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L0cb37c.  v0:= `@@kotlin.random.Random.a` @type ^`kotlin.random.Random` @kind object;
  #L0cb380.  return v0 @kind object;
}
procedure `byte`[] `nextBytes$default`(`kotlin.random.Random` v0 @kind object, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/random/Random;.nextBytes$default:(Lkotlin/random/Random;[BIIILjava/lang/Object;)[B` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0caf78.  if v5 != 0 then goto L0caf9a;
  #L0caf7c.  v5:= v4 ^& 2;
  #L0caf80.  if v5 == 0 then goto L0caf86;
  #L0caf84.  v2:= 0I;
  #L0caf86.  v4:= v4 ^& 4;
  #L0caf8a.  if v4 == 0 then goto L0caf90;
  #L0caf8e.  v3:= length @variable v1;
  #L0caf90.  call temp:= `nextBytes`(v0, v1, v2, v3) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L0caf96.  v0:= temp @kind object;
  #L0caf98.  return v0 @kind object;
  #L0caf9a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0caf9e.  v1:= "Super calls with default arguments not supported in this target, function: nextBytes" @kind object;
  #L0cafa2.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cafa8.  throw v0;
}
procedure `int` `nextBits`(`int` v0 ) @signature `Lkotlin/random/Random;.nextBits:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `nextBoolean`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0caf54.  v0:= 1I;
  #L0caf56.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0caf5c.  v1:= temp;
  #L0caf5e.  if v1 == 0 then goto L0caf64;
  #L0caf62.  goto L0caf66;
  #L0caf64.  v0:= 0I;
  #L0caf66.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v0 @kind this, `int` v1 ) @signature `Lkotlin/random/Random;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;

  #L0cb174.  v1:= new `byte`[v1];
  #L0cb178.  call temp:= `nextBytes`(v0, v1) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L0cb17e.  v1:= temp @kind object;
  #L0cb180.  return v1 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v2 @kind this, `byte`[] v3 @kind object) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cafbc.  v0:= "array" @kind object;
  #L0cafc0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cafc6.  v0:= length @variable v3;
  #L0cafc8.  v1:= 0I;
  #L0cafca.  call temp:= `nextBytes`(v2, v3, v1, v0) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L0cafd0.  v3:= temp @kind object;
  #L0cafd2.  return v3 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0cafe4.  v0:= "array" @kind object;
  #L0cafe8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cafee.  v0:= new `kotlin.ranges.IntRange`;
  #L0caff2.  v1:= length @variable v7;
  #L0caff4.  v2:= 0I;
  #L0caff6.  call `<init>`(v0, v2, v1) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0caffc.  call temp:= `contains`(v0, v8) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0cb002.  v0:= temp;
  #L0cb004.  v1:= 1I;
  #L0cb006.  if v0 == 0 then goto L0cb026;
  #L0cb00a.  v0:= new `kotlin.ranges.IntRange`;
  #L0cb00e.  v3:= length @variable v7;
  #L0cb010.  call `<init>`(v0, v2, v3) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L0cb016.  call temp:= `contains`(v0, v9) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L0cb01c.  v0:= temp;
  #L0cb01e.  if v0 == 0 then goto L0cb026;
  #L0cb022.  v0:= 1I;
  #L0cb024.  goto L0cb028;
  #L0cb026.  v0:= 0I;
  #L0cb028.  v3:= "fromIndex (" @kind object;
  #L0cb02c.  if v0 == 0 then goto L0cb104;
  #L0cb030.  if v8 > v9 then goto L0cb036;
  #L0cb034.  goto L0cb038;
  #L0cb036.  v1:= 0I;
  #L0cb038.  if v1 == 0 then goto L0cb0b8;
  #L0cb03c.  v0:= v9 - v8 @kind int;
  #L0cb040.  v0:= v0 / 4;
  #L0cb044.  v1:= 0I;
  #L0cb046.  if v1 >= v0 then goto L0cb08c;
  #L0cb04a.  call temp:= `nextInt`(v6) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb050.  v3:= temp;
  #L0cb052.  v4:= (`byte`) v3 @kind i2b;
  #L0cb054.  v7[v8]:= v4 @kind byte;
  #L0cb058.  v4:= v8 + 1;
  #L0cb05c.  v5:= v3 ^>> 8;
  #L0cb060.  v5:= (`byte`) v5 @kind i2b;
  #L0cb062.  v7[v4]:= v5 @kind byte;
  #L0cb066.  v4:= v8 + 2;
  #L0cb06a.  v5:= v3 ^>> 16;
  #L0cb06e.  v5:= (`byte`) v5 @kind i2b;
  #L0cb070.  v7[v4]:= v5 @kind byte;
  #L0cb074.  v4:= v8 + 3;
  #L0cb078.  v3:= v3 ^>> 24;
  #L0cb07c.  v3:= (`byte`) v3 @kind i2b;
  #L0cb07e.  v7[v4]:= v3 @kind byte;
  #L0cb082.  v8:= v8 + 4;
  #L0cb086.  v1:= v1 + 1;
  #L0cb08a.  goto L0cb046;
  #L0cb08c.  v9:= v9 - v8 @kind int;
  #L0cb08e.  v0:= v9 * 8;
  #L0cb092.  call temp:= `nextBits`(v6, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb098.  v0:= temp;
  #L0cb09a.  if v2 >= v9 then goto L0cb0b6;
  #L0cb09e.  v1:= v8 + v2 @kind int;
  #L0cb0a2.  v3:= v2 * 8;
  #L0cb0a6.  v3:= v0 ^>> v3 @kind int;
  #L0cb0aa.  v3:= (`byte`) v3 @kind i2b;
  #L0cb0ac.  v7[v1]:= v3 @kind byte;
  #L0cb0b0.  v2:= v2 + 1;
  #L0cb0b4.  goto L0cb09a;
  #L0cb0b6.  return v7 @kind object;
  #L0cb0b8.  v7:= new `java.lang.StringBuilder`;
  #L0cb0bc.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cb0c2.  call temp:= `append`(v7, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb0c8.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb0ce.  v8:= ") must be not greater than toIndex (" @kind object;
  #L0cb0d2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb0d8.  call temp:= `append`(v7, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb0de.  v8:= ")." @kind object;
  #L0cb0e2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb0e8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cb0ee.  v7:= temp @kind object;
  #L0cb0f0.  v8:= new `java.lang.IllegalArgumentException`;
  #L0cb0f4.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cb0fa.  v7:= temp @kind object;
  #L0cb0fc.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cb102.  throw v8;
  #L0cb104.  v0:= new `java.lang.StringBuilder`;
  #L0cb108.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0cb10e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb114.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb11a.  v8:= ") or toIndex (" @kind object;
  #L0cb11e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb124.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb12a.  v8:= ") are out of range: 0.." @kind object;
  #L0cb12e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb134.  v7:= length @variable v7;
  #L0cb136.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb13c.  v7:= 46I;
  #L0cb140.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0cb146.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cb14c.  v7:= temp @kind object;
  #L0cb14e.  v8:= new `java.lang.IllegalArgumentException`;
  #L0cb152.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0cb158.  v7:= temp @kind object;
  #L0cb15a.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0cb160.  throw v8;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cb194.  v0:= 26I;
  #L0cb198.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb19e.  v0:= temp;
  #L0cb1a0.  v1:= 27I;
  #L0cb1a4.  call temp:= `nextBits`(v2, v1) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb1aa.  v1:= temp;
  #L0cb1ac.  call temp:= `doubleFromParts`(v0, v1) @signature `Lkotlin/random/PlatformRandomKt;.doubleFromParts:(II)D` @kind static;
  #L0cb1b2.  v0:= temp @kind wide;
  #L0cb1b4.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this, `double` v3 ) @signature `Lkotlin/random/Random;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cb1c8.  v0:= 0L;
  #L0cb1cc.  call temp:= `nextDouble`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @kind virtual;
  #L0cb1d2.  v3:= temp @kind wide;
  #L0cb1d4.  return v3 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v6 @kind this, `double` v7 , `double` v9 ) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0cb1e8.  call `checkRangeBounds`(v7, v9) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @kind static;
  #L0cb1ee.  v0:= v9 - v7 @kind double;
  #L0cb1f2.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L0cb1f8.  v2:= temp;
  #L0cb1fa.  if v2 == 0 then goto L0cb264;
  #L0cb1fe.  call temp:= `isInfinite`(v7) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L0cb204.  v2:= temp;
  #L0cb206.  v3:= 1I;
  #L0cb208.  v4:= 0I;
  #L0cb20a.  if v2 != 0 then goto L0cb21e;
  #L0cb20e.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L0cb214.  v2:= temp;
  #L0cb216.  if v2 != 0 then goto L0cb21e;
  #L0cb21a.  v2:= 1I;
  #L0cb21c.  goto L0cb220;
  #L0cb21e.  v2:= 0I;
  #L0cb220.  if v2 == 0 then goto L0cb264;
  #L0cb224.  call temp:= `isInfinite`(v9) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L0cb22a.  v2:= temp;
  #L0cb22c.  if v2 != 0 then goto L0cb23e;
  #L0cb230.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L0cb236.  v2:= temp;
  #L0cb238.  if v2 != 0 then goto L0cb23e;
  #L0cb23c.  goto L0cb240;
  #L0cb23e.  v3:= 0I;
  #L0cb240.  if v3 == 0 then goto L0cb264;
  #L0cb244.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L0cb24a.  v0:= temp @kind wide;
  #L0cb24c.  v2:= 2I;
  #L0cb24e.  v2:= (`double`) v2 @kind i2d;
  #L0cb250.  v4:= v9 / v2 @kind double;
  #L0cb254.  v2:= v7 / v2 @kind double;
  #L0cb258.  v4:= v4 - v2 @kind double;
  #L0cb25a.  v0:= v0 * v4 @kind double;
  #L0cb25e.  v7:= v7 + v0 @kind double;
  #L0cb260.  v7:= v7 + v0 @kind double;
  #L0cb262.  goto L0cb272;
  #L0cb264.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L0cb26a.  v2:= temp @kind wide;
  #L0cb26c.  v2:= v2 * v0 @kind double;
  #L0cb270.  v7:= v7 + v2 @kind double;
  #L0cb272.  v0:= dcmpl(v7, v9);
  #L0cb276.  if v0 < 0 then goto L0cb286;
  #L0cb27a.  v7:= -InfinityD;
  #L0cb27e.  call temp:= `nextAfter`(v9, v7) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L0cb284.  v7:= temp @kind wide;
  #L0cb286.  return v7 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cb298.  v0:= 24I;
  #L0cb29c.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb2a2.  v0:= temp;
  #L0cb2a4.  v0:= (`float`) v0 @kind i2f;
  #L0cb2a6.  v1:= 1.6777216E7F;
  #L0cb2aa.  v0:= v0 / v1 @kind float;
  #L0cb2ac.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this) @signature `Lkotlin/random/Random;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cb2c0.  v0:= 32I;
  #L0cb2c4.  call temp:= `nextBits`(v1, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb2ca.  v0:= temp;
  #L0cb2cc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cb2e0.  v0:= 0I;
  #L0cb2e2.  call temp:= `nextInt`(v1, v0, v2) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L0cb2e8.  v2:= temp;
  #L0cb2ea.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.Random` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lkotlin/random/Random;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0cb2fc.  call `checkRangeBounds`(v5, v6) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @kind static;
  #L0cb302.  v0:= v6 - v5 @kind int;
  #L0cb306.  v1:= 1I;
  #L0cb308.  if v0 > 0 then goto L0cb330;
  #L0cb30c.  v2:= -2147483648I;
  #L0cb310.  if v0 != v2 then goto L0cb316;
  #L0cb314.  goto L0cb330;
  #L0cb316.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb31c.  v0:= temp;
  #L0cb31e.  v2:= 0I;
  #L0cb320.  if v5 > v0 then goto L0cb32a;
  #L0cb324.  if v0 >= v6 then goto L0cb32a;
  #L0cb328.  v2:= 1I;
  #L0cb32a.  if v2 == 0 then goto L0cb316;
  #L0cb32e.  return v0;
  #L0cb330.  v6:= -v0 @kind int;
  #L0cb332.  v6:= v6 ^& v0 @kind int;
  #L0cb334.  if v6 != v0 then goto L0cb34a;
  #L0cb338.  call temp:= `fastLog2`(v0) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L0cb33e.  v6:= temp;
  #L0cb340.  call temp:= `nextBits`(v4, v6) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb346.  v6:= temp;
  #L0cb348.  goto L0cb366;
  #L0cb34a.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb350.  v6:= temp;
  #L0cb352.  v6:= v6 ^>> v1 @kind int;
  #L0cb354.  v2:= v6 %% v0 @kind int;
  #L0cb358.  v6:= v6 - v2 @kind int;
  #L0cb35a.  v3:= v0 + -1;
  #L0cb35e.  v6:= v6 + v3 @kind int;
  #L0cb360.  if v6 < 0 then goto L0cb34a;
  #L0cb364.  v6:= v2;
  #L0cb366.  v5:= v5 + v6 @kind int;
  #L0cb368.  return v5;
}
procedure `long` `nextLong`(`kotlin.random.Random` v4 @kind this) @signature `Lkotlin/random/Random;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0cb394.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb39a.  v0:= temp;
  #L0cb39c.  v0:= (`long`) v0 @kind i2l;
  #L0cb39e.  v2:= 32I;
  #L0cb3a2.  v0:= v0 ^< v2 @kind long;
  #L0cb3a4.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb3aa.  v2:= temp;
  #L0cb3ac.  v2:= (`long`) v2 @kind i2l;
  #L0cb3ae.  v0:= v0 + v2 @kind long;
  #L0cb3b0.  return v0 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v2 @kind this, `long` v3 ) @signature `Lkotlin/random/Random;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cb3c4.  v0:= 0L;
  #L0cb3c8.  call temp:= `nextLong`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L0cb3ce.  v3:= temp @kind wide;
  #L0cb3d0.  return v3 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v9 @kind this, `long` v10 , `long` v12 ) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0cb3e4.  call `checkRangeBounds`(v10, v12) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @kind static;
  #L0cb3ea.  v0:= v12 - v10 @kind long;
  #L0cb3ee.  v2:= 0L;
  #L0cb3f2.  v4:= 1I;
  #L0cb3f4.  v5:= lcmp(v0, v2);
  #L0cb3f8.  if v5 <= 0 then goto L0cb492;
  #L0cb3fc.  v12:= -v0 @kind long;
  #L0cb3fe.  v12:= v12 ^& v0 @kind long;
  #L0cb400.  v5:= lcmp(v12, v0);
  #L0cb404.  if v5 != 0 then goto L0cb46a;
  #L0cb408.  v12:= (`int`) v0 @kind l2i;
  #L0cb40a.  v13:= 32I;
  #L0cb40e.  v0:= v0 ^>> v13 @kind long;
  #L0cb410.  v1:= (`int`) v0 @kind l2i;
  #L0cb412.  v2:= 4294967295L;
  #L0cb41c.  if v12 == 0 then goto L0cb436;
  #L0cb420.  call temp:= `fastLog2`(v12) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L0cb426.  v12:= temp;
  #L0cb428.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb42e.  v12:= temp;
  #L0cb430.  v12:= (`long`) v12 @kind i2l;
  #L0cb432.  v12:= v12 ^& v2 @kind long;
  #L0cb434.  goto L0cb48e;
  #L0cb436.  if v1 != v4 then goto L0cb444;
  #L0cb43a.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb440.  v12:= temp;
  #L0cb442.  goto L0cb430;
  #L0cb444.  call temp:= `fastLog2`(v1) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L0cb44a.  v12:= temp;
  #L0cb44c.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L0cb452.  v12:= temp;
  #L0cb454.  v0:= (`long`) v12 @kind i2l;
  #L0cb456.  v12:= v0 ^< v13 @kind long;
  #L0cb45a.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L0cb460.  v0:= temp;
  #L0cb462.  v0:= (`long`) v0 @kind i2l;
  #L0cb464.  v0:= v0 ^& v2 @kind long;
  #L0cb466.  v12:= v12 + v0 @kind long;
  #L0cb468.  goto L0cb48e;
  #L0cb46a.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L0cb470.  v12:= temp @kind wide;
  #L0cb472.  v12:= v12 ^>> v4 @kind long;
  #L0cb474.  v5:= v12 %% v0 @kind long;
  #L0cb478.  v12:= v12 - v5 @kind long;
  #L0cb47a.  v7:= 1L;
  #L0cb47e.  v7:= v0 - v7 @kind long;
  #L0cb482.  v12:= v12 + v7 @kind long;
  #L0cb484.  v7:= lcmp(v12, v2);
  #L0cb488.  if v7 < 0 then goto L0cb46a;
  #L0cb48c.  v12:= v5 @kind wide;
  #L0cb48e.  v10:= v10 + v12 @kind long;
  #L0cb490.  return v10 @kind wide;
  #L0cb492.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L0cb498.  v0:= temp @kind wide;
  #L0cb49a.  v2:= 0I;
  #L0cb49c.  v3:= lcmp(v10, v0);
  #L0cb4a0.  if v3 > 0 then goto L0cb4ae;
  #L0cb4a4.  v3:= lcmp(v0, v12);
  #L0cb4a8.  if v3 >= 0 then goto L0cb4ae;
  #L0cb4ac.  v2:= 1I;
  #L0cb4ae.  if v2 == 0 then goto L0cb492;
  #L0cb4b2.  return v0 @kind wide;
}
