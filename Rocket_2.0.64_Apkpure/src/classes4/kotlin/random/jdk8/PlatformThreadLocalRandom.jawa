record `kotlin.random.jdk8.PlatformThreadLocalRandom` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.AbstractPlatformRandom` @kind class {
}
procedure `void` `<init>`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v0 @kind this) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0cbbc8.  call `<init>`(v0) @signature `Lkotlin/random/AbstractPlatformRandom;.<init>:()V` @kind direct;
  #L0cbbce.  return @kind void;
}
procedure `java.util.Random` `getImpl`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v2 @kind this) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0cbb5c.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L0cbb62.  v0:= temp @kind object;
  #L0cbb64.  v1:= "current()" @kind object;
  #L0cbb68.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0cbb6e.  return v0 @kind object;
}
procedure `double` `nextDouble`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `double` v2 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbb14.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L0cbb1a.  v0:= temp @kind object;
  #L0cbb1c.  call temp:= `nextDouble`(v0, v2) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextDouble:(D)D` @kind virtual;
  #L0cbb22.  v2:= temp @kind wide;
  #L0cbb24.  return v2 @kind wide;
}
procedure `int` `nextInt`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbb38.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L0cbb3e.  v0:= temp @kind object;
  #L0cbb40.  call temp:= `nextInt`(v0, v2, v3) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextInt:(II)I` @kind virtual;
  #L0cbb46.  v2:= temp;
  #L0cbb48.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `long` v2 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbb80.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L0cbb86.  v0:= temp @kind object;
  #L0cbb88.  call temp:= `nextLong`(v0, v2) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextLong:(J)J` @kind virtual;
  #L0cbb8e.  v2:= temp @kind wide;
  #L0cbb90.  return v2 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0cbba4.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L0cbbaa.  v0:= temp @kind object;
  #L0cbbac.  call temp:= `nextLong`(v0, v2, v4) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextLong:(JJ)J` @kind virtual;
  #L0cbbb2.  v2:= temp @kind wide;
  #L0cbbb4.  return v2 @kind wide;
}
