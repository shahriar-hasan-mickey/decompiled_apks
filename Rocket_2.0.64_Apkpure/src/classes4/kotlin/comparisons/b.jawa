record `kotlin.comparisons.b` @kind class @AccessFlag  extends `kotlin.comparisons.a` @kind class {
}
procedure `void` `<init>`(`kotlin.comparisons.b` v0 @kind this) @signature `Lkotlin/comparisons/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0baecc.  call `<init>`(v0) @signature `Lkotlin/comparisons/a;.<init>:()V` @kind direct;
  #L0baed2.  return @kind void;
}
procedure `byte` `maxOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0baabc.  v0:= "other" @kind object;
  #L0baac0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0baac6.  v0:= length @variable v4;
  #L0baac8.  v1:= 0I;
  #L0baaca.  if v1 >= v0 then goto L0baae2;
  #L0baace.  v2:= v4[v1] @kind byte;
  #L0baad2.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L0baad8.  v3:= temp;
  #L0baada.  v3:= (`byte`) v3 @kind i2b;
  #L0baadc.  v1:= v1 + 1;
  #L0baae0.  goto L0baaca;
  #L0baae2.  return v3;
}
procedure `double` `maxOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0bab2c.  v0:= "other" @kind object;
  #L0bab30.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bab36.  v0:= length @variable v6;
  #L0bab38.  v1:= 0I;
  #L0bab3a.  if v1 >= v0 then goto L0bab50;
  #L0bab3e.  v2:= v6[v1] @kind wide;
  #L0bab42.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L0bab48.  v4:= temp @kind wide;
  #L0bab4a.  v1:= v1 + 1;
  #L0bab4e.  goto L0bab3a;
  #L0bab50.  return v4 @kind wide;
}
procedure `float` `maxOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bab9c.  v0:= "other" @kind object;
  #L0baba0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0baba6.  v0:= length @variable v4;
  #L0baba8.  v1:= 0I;
  #L0babaa.  if v1 >= v0 then goto L0babc0;
  #L0babae.  v2:= v4[v1];
  #L0babb2.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L0babb8.  v3:= temp;
  #L0babba.  v1:= v1 + 1;
  #L0babbe.  goto L0babaa;
  #L0babc0.  return v3;
}
procedure `int` `maxOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bac0c.  v0:= "other" @kind object;
  #L0bac10.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bac16.  v0:= length @variable v4;
  #L0bac18.  v1:= 0I;
  #L0bac1a.  if v1 >= v0 then goto L0bac30;
  #L0bac1e.  v2:= v4[v1];
  #L0bac22.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L0bac28.  v3:= temp;
  #L0bac2a.  v1:= v1 + 1;
  #L0bac2e.  goto L0bac1a;
  #L0bac30.  return v3;
}
procedure `long` `maxOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0badec.  v0:= "other" @kind object;
  #L0badf0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0badf6.  v0:= length @variable v6;
  #L0badf8.  v1:= 0I;
  #L0badfa.  if v1 >= v0 then goto L0bae10;
  #L0badfe.  v2:= v6[v1] @kind wide;
  #L0bae02.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L0bae08.  v4:= temp @kind wide;
  #L0bae0a.  v1:= v1 + 1;
  #L0bae0e.  goto L0badfa;
  #L0bae10.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L0bac7c.  v0:= "a" @kind object;
  #L0bac80.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bac86.  v0:= "b" @kind object;
  #L0bac8a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bac90.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0bac96.  v0:= temp;
  #L0bac98.  if v0 < 0 then goto L0bac9e;
  #L0bac9c.  goto L0baca0;
  #L0bac9e.  v1:= v2 @kind object;
  #L0baca0.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0bacb4.  v0:= "a" @kind object;
  #L0bacb8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bacbe.  v0:= "b" @kind object;
  #L0bacc2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bacc8.  v0:= "c" @kind object;
  #L0baccc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bacd2.  call temp:= `maxOf`(v2, v3) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0bacd8.  v2:= temp @kind object;
  #L0bacda.  call temp:= `maxOf`(v1, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0bace0.  v1:= temp @kind object;
  #L0bace2.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bacf4.  v0:= "a" @kind object;
  #L0bacf8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bacfe.  v0:= "other" @kind object;
  #L0bad02.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad08.  v0:= length @variable v4;
  #L0bad0a.  v1:= 0I;
  #L0bad0c.  if v1 >= v0 then goto L0bad22;
  #L0bad10.  v2:= v4[v1] @kind object;
  #L0bad14.  call temp:= `maxOf`(v3, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0bad1a.  v3:= temp @kind object;
  #L0bad1c.  v1:= v1 + 1;
  #L0bad20.  goto L0bad0c;
  #L0bad22.  return v3 @kind object;
}
procedure `short` `maxOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bae5c.  v0:= "other" @kind object;
  #L0bae60.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bae66.  v0:= length @variable v4;
  #L0bae68.  v1:= 0I;
  #L0bae6a.  if v1 >= v0 then goto L0bae82;
  #L0bae6e.  v2:= v4[v1] @kind short;
  #L0bae72.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L0bae78.  v3:= temp;
  #L0bae7a.  v3:= (`short`) v3 @kind i2s;
  #L0bae7c.  v1:= v1 + 1;
  #L0bae80.  goto L0bae6a;
  #L0bae82.  return v3;
}
procedure `byte` `minOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0baaf4.  v0:= "other" @kind object;
  #L0baaf8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0baafe.  v0:= length @variable v4;
  #L0bab00.  v1:= 0I;
  #L0bab02.  if v1 >= v0 then goto L0bab1a;
  #L0bab06.  v2:= v4[v1] @kind byte;
  #L0bab0a.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L0bab10.  v3:= temp;
  #L0bab12.  v3:= (`byte`) v3 @kind i2b;
  #L0bab14.  v1:= v1 + 1;
  #L0bab18.  goto L0bab02;
  #L0bab1a.  return v3;
}
procedure `double` `minOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0bab64.  v0:= "other" @kind object;
  #L0bab68.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bab6e.  v0:= length @variable v6;
  #L0bab70.  v1:= 0I;
  #L0bab72.  if v1 >= v0 then goto L0bab88;
  #L0bab76.  v2:= v6[v1] @kind wide;
  #L0bab7a.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L0bab80.  v4:= temp @kind wide;
  #L0bab82.  v1:= v1 + 1;
  #L0bab86.  goto L0bab72;
  #L0bab88.  return v4 @kind wide;
}
procedure `float` `minOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0babd4.  v0:= "other" @kind object;
  #L0babd8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0babde.  v0:= length @variable v4;
  #L0babe0.  v1:= 0I;
  #L0babe2.  if v1 >= v0 then goto L0babf8;
  #L0babe6.  v2:= v4[v1];
  #L0babea.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L0babf0.  v3:= temp;
  #L0babf2.  v1:= v1 + 1;
  #L0babf6.  goto L0babe2;
  #L0babf8.  return v3;
}
procedure `int` `minOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bac44.  v0:= "other" @kind object;
  #L0bac48.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bac4e.  v0:= length @variable v4;
  #L0bac50.  v1:= 0I;
  #L0bac52.  if v1 >= v0 then goto L0bac68;
  #L0bac56.  v2:= v4[v1];
  #L0bac5a.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L0bac60.  v3:= temp;
  #L0bac62.  v1:= v1 + 1;
  #L0bac66.  goto L0bac52;
  #L0bac68.  return v3;
}
procedure `long` `minOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0bae24.  v0:= "other" @kind object;
  #L0bae28.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bae2e.  v0:= length @variable v6;
  #L0bae30.  v1:= 0I;
  #L0bae32.  if v1 >= v0 then goto L0bae48;
  #L0bae36.  v2:= v6[v1] @kind wide;
  #L0bae3a.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L0bae40.  v4:= temp @kind wide;
  #L0bae42.  v1:= v1 + 1;
  #L0bae46.  goto L0bae32;
  #L0bae48.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0bad34.  v0:= "a" @kind object;
  #L0bad38.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad3e.  v0:= "b" @kind object;
  #L0bad42.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad48.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L0bad4e.  v0:= temp;
  #L0bad50.  if v0 > 0 then goto L0bad56;
  #L0bad54.  goto L0bad58;
  #L0bad56.  v1:= v2 @kind object;
  #L0bad58.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0bad6c.  v0:= "a" @kind object;
  #L0bad70.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad76.  v0:= "b" @kind object;
  #L0bad7a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad80.  v0:= "c" @kind object;
  #L0bad84.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bad8a.  call temp:= `minOf`(v2, v3) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0bad90.  v2:= temp @kind object;
  #L0bad92.  call temp:= `minOf`(v1, v2) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0bad98.  v1:= temp @kind object;
  #L0bad9a.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0badac.  v0:= "a" @kind object;
  #L0badb0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0badb6.  v0:= "other" @kind object;
  #L0badba.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0badc0.  v0:= length @variable v4;
  #L0badc2.  v1:= 0I;
  #L0badc4.  if v1 >= v0 then goto L0badda;
  #L0badc8.  v2:= v4[v1] @kind object;
  #L0badcc.  call temp:= `minOf`(v3, v2) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L0badd2.  v3:= temp @kind object;
  #L0badd4.  v1:= v1 + 1;
  #L0badd8.  goto L0badc4;
  #L0badda.  return v3 @kind object;
}
procedure `short` `minOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bae94.  v0:= "other" @kind object;
  #L0bae98.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bae9e.  v0:= length @variable v4;
  #L0baea0.  v1:= 0I;
  #L0baea2.  if v1 >= v0 then goto L0baeba;
  #L0baea6.  v2:= v4[v1] @kind short;
  #L0baeaa.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L0baeb0.  v3:= temp;
  #L0baeb2.  v3:= (`short`) v3 @kind i2s;
  #L0baeb4.  v1:= v1 + 1;
  #L0baeb8.  goto L0baea2;
  #L0baeba.  return v3;
}
