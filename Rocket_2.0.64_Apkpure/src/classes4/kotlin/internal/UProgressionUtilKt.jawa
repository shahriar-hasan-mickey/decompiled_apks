record `kotlin.internal.UProgressionUtilKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L0be22c.  call temp:= `uintRemainder-J1ME1BU`(v1, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L0be232.  v1:= temp;
  #L0be234.  call temp:= `uintRemainder-J1ME1BU`(v2, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L0be23a.  v2:= temp;
  #L0be23c.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0be242.  v0:= temp;
  #L0be244.  v1:= v1 - v2 @kind int;
  #L0be246.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be24c.  v1:= temp;
  #L0be24e.  if v0 < 0 then goto L0be254;
  #L0be252.  goto L0be25e;
  #L0be254.  v1:= v1 + v3 @kind int;
  #L0be256.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be25c.  v1:= temp;
  #L0be25e.  return v1;
}
procedure `long` `b`(`long` v1 , `long` v3 , `long` v5 ) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L0be2f0.  call temp:= `ulongRemainder-eb3DHEI`(v1, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L0be2f6.  v1:= temp @kind wide;
  #L0be2f8.  call temp:= `ulongRemainder-eb3DHEI`(v3, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L0be2fe.  v3:= temp @kind wide;
  #L0be300.  call temp:= `ulongCompare`(v1, v3) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L0be306.  v0:= temp;
  #L0be308.  v1:= v1 - v3 @kind long;
  #L0be30a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be310.  v1:= temp @kind wide;
  #L0be312.  if v0 < 0 then goto L0be318;
  #L0be316.  goto L0be322;
  #L0be318.  v1:= v1 + v5 @kind long;
  #L0be31a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be320.  v1:= temp @kind wide;
  #L0be322.  return v1 @kind wide;
}
procedure `long` `getProgressionLastElement-7ftBX0g`(`long` v7 , `long` v9 , `long` v11 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-7ftBX0g:(JJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L0be334.  v0:= 0L;
  #L0be338.  v2:= lcmp(v11, v0);
  #L0be33c.  if v2 <= 0 then goto L0be36e;
  #L0be340.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L0be346.  v0:= temp;
  #L0be348.  if v0 < 0 then goto L0be34e;
  #L0be34c.  goto L0be3a0;
  #L0be34e.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be354.  v5:= temp @kind wide;
  #L0be356.  v1:= v9 @kind wide;
  #L0be358.  v3:= v7 @kind wide;
  #L0be35a.  call temp:= `b`(v1, v3, v5) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @kind static;
  #L0be360.  v7:= temp @kind wide;
  #L0be362.  v9:= v9 - v7 @kind long;
  #L0be364.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be36a.  v9:= temp @kind wide;
  #L0be36c.  goto L0be3a0;
  #L0be36e.  if v2 >= 0 then goto L0be3a2;
  #L0be372.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L0be378.  v0:= temp;
  #L0be37a.  if v0 > 0 then goto L0be380;
  #L0be37e.  goto L0be3a0;
  #L0be380.  v11:= -v11 @kind long;
  #L0be382.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be388.  v4:= temp @kind wide;
  #L0be38a.  v0:= v7 @kind wide;
  #L0be38c.  v2:= v9 @kind wide;
  #L0be38e.  call temp:= `b`(v0, v2, v4) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @kind static;
  #L0be394.  v7:= temp @kind wide;
  #L0be396.  v9:= v9 + v7 @kind long;
  #L0be398.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L0be39e.  v9:= temp @kind wide;
  #L0be3a0.  return v9 @kind wide;
  #L0be3a2.  v7:= new `java.lang.IllegalArgumentException`;
  #L0be3a6.  v8:= "Step is zero." @kind object;
  #L0be3aa.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0be3b0.  throw v7;
}
procedure `int` `getProgressionLastElement-Nkh28Cs`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-Nkh28Cs:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0be270.  if v3 <= 0 then goto L0be29e;
  #L0be274.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0be27a.  v0:= temp;
  #L0be27c.  if v0 < 0 then goto L0be282;
  #L0be280.  goto L0be2cc;
  #L0be282.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be288.  v3:= temp;
  #L0be28a.  call temp:= `a`(v2, v1, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @kind static;
  #L0be290.  v1:= temp;
  #L0be292.  v2:= v2 - v1 @kind int;
  #L0be294.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be29a.  v2:= temp;
  #L0be29c.  goto L0be2cc;
  #L0be29e.  if v3 >= 0 then goto L0be2ce;
  #L0be2a2.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L0be2a8.  v0:= temp;
  #L0be2aa.  if v0 > 0 then goto L0be2b0;
  #L0be2ae.  goto L0be2cc;
  #L0be2b0.  v3:= -v3 @kind int;
  #L0be2b2.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be2b8.  v3:= temp;
  #L0be2ba.  call temp:= `a`(v1, v2, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @kind static;
  #L0be2c0.  v1:= temp;
  #L0be2c2.  v2:= v2 + v1 @kind int;
  #L0be2c4.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L0be2ca.  v2:= temp;
  #L0be2cc.  return v2;
  #L0be2ce.  v1:= new `java.lang.IllegalArgumentException`;
  #L0be2d2.  v2:= "Step is zero." @kind object;
  #L0be2d6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0be2dc.  throw v1;
}
