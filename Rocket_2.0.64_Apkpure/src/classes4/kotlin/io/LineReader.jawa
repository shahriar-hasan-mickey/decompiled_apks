record `kotlin.io.LineReader` @kind class @AccessFlag PUBLIC_FINAL {
}
global `kotlin.io.LineReader` `@@kotlin.io.LineReader.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.CharsetDecoder` `@@kotlin.io.LineReader.a` @AccessFlag PRIVATE_STATIC;
global `boolean` `@@kotlin.io.LineReader.b` @AccessFlag PRIVATE_STATIC;
global `byte`[] `@@kotlin.io.LineReader.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@kotlin.io.LineReader.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.ByteBuffer` `@@kotlin.io.LineReader.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.CharBuffer` `@@kotlin.io.LineReader.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.StringBuilder` `@@kotlin.io.LineReader.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/io/LineReader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0c12fc.  v0:= new `kotlin.io.LineReader`;
  #L0c1300.  call `<init>`(v0) @signature `Lkotlin/io/LineReader;.<init>:()V` @kind direct;
  #L0c1306.  `@@kotlin.io.LineReader.INSTANCE` @type ^`kotlin.io.LineReader` := v0 @kind object;
  #L0c130a.  v0:= 32I;
  #L0c130e.  v1:= new `byte`[v0];
  #L0c1312.  `@@kotlin.io.LineReader.c` @type ^`byte`[] := v1 @kind object;
  #L0c1316.  v0:= new `char`[v0];
  #L0c131a.  `@@kotlin.io.LineReader.d` @type ^`char`[] := v0 @kind object;
  #L0c131e.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L0c1324.  v1:= temp @kind object;
  #L0c1326.  v2:= "wrap(bytes)" @kind object;
  #L0c132a.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c1330.  `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L0c1334.  call temp:= `wrap`(v0) @signature `Ljava/nio/CharBuffer;.wrap:([C)Ljava/nio/CharBuffer;` @kind static;
  #L0c133a.  v0:= temp @kind object;
  #L0c133c.  v1:= "wrap(chars)" @kind object;
  #L0c1340.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c1346.  `@@kotlin.io.LineReader.f` @type ^`java.nio.CharBuffer` := v0 @kind object;
  #L0c134a.  v0:= new `java.lang.StringBuilder`;
  #L0c134e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0c1354.  `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L0c1358.  return @kind void;
}
procedure `void` `<init>`(`kotlin.io.LineReader` v0 @kind this) @signature `Lkotlin/io/LineReader;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0c136c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c1372.  return @kind void;
}
procedure `int` `a`(`kotlin.io.LineReader` v3 @kind this) @signature `Lkotlin/io/LineReader;.a:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0c1014.  v0:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c1018.  call temp:= `compact`(v0) @signature `Ljava/nio/ByteBuffer;.compact:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L0c101e.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L0c1024.  v1:= temp;
  #L0c1026.  v2:= 0I;
  #L0c1028.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c102e.  return v1;
}
procedure `int` `b`(`kotlin.io.LineReader` v5 @kind this, `boolean` v6 ) @signature `Lkotlin/io/LineReader;.b:(Z)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0c1040.  v0:= `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L0c1044.  if v0 != 0 then goto L0c1054;
  #L0c1048.  v0:= "decoder" @kind object;
  #L0c104c.  call `throwUninitializedPropertyAccessException`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L0c1052.  v0:= 0I;
  #L0c1054.  v1:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c1058.  v2:= `@@kotlin.io.LineReader.f` @type ^`java.nio.CharBuffer` @kind object;
  #L0c105c.  call temp:= `decode`(v0, v1, v2, v6) @signature `Ljava/nio/charset/CharsetDecoder;.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;` @kind virtual;
  #L0c1062.  v0:= temp @kind object;
  #L0c1064.  v1:= "decoder.decode(byteBuf, charBuf, endOfInput)" @kind object;
  #L0c1068.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c106e.  call temp:= `isError`(v0) @signature `Ljava/nio/charset/CoderResult;.isError:()Z` @kind virtual;
  #L0c1074.  v1:= temp;
  #L0c1076.  if v1 == 0 then goto L0c1086;
  #L0c107a.  call `d`(v5) @signature `Lkotlin/io/LineReader;.d:()V` @kind direct;
  #L0c1080.  call `throwException`(v0) @signature `Ljava/nio/charset/CoderResult;.throwException:()V` @kind virtual;
  #L0c1086.  call temp:= `position`(v2) @signature `Ljava/nio/CharBuffer;.position:()I` @kind virtual;
  #L0c108c.  v1:= temp;
  #L0c108e.  call temp:= `isOverflow`(v0) @signature `Ljava/nio/charset/CoderResult;.isOverflow:()Z` @kind virtual;
  #L0c1094.  v0:= temp;
  #L0c1096.  if v0 != 0 then goto L0c109c;
  #L0c109a.  return v1;
  #L0c109c.  v0:= `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` @kind object;
  #L0c10a0.  v3:= `@@kotlin.io.LineReader.d` @type ^`char`[] @kind object;
  #L0c10a4.  v1:= v1 + -1;
  #L0c10a8.  v4:= 0I;
  #L0c10aa.  call temp:= `append`(v0, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c10b0.  call temp:= `position`(v2, v4) @signature `Ljava/nio/CharBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c10b6.  v0:= 32I;
  #L0c10ba.  call temp:= `limit`(v2, v0) @signature `Ljava/nio/CharBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c10c0.  v0:= v3[v1] @kind char;
  #L0c10c4.  call temp:= `put`(v2, v0) @signature `Ljava/nio/CharBuffer;.put:(C)Ljava/nio/CharBuffer;` @kind virtual;
  #L0c10ca.  goto L0c1040;
}
procedure `int` `c`(`kotlin.io.LineReader` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/io/LineReader;.c:(II)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L0c10dc.  v0:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c10e0.  call temp:= `limit`(v0, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c10e6.  v2:= `@@kotlin.io.LineReader.f` @type ^`java.nio.CharBuffer` @kind object;
  #L0c10ea.  call temp:= `position`(v2, v3) @signature `Ljava/nio/CharBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c10f0.  v2:= 1I;
  #L0c10f2.  call temp:= `b`(v1, v2) @signature `Lkotlin/io/LineReader;.b:(Z)I` @kind direct;
  #L0c10f8.  v2:= temp;
  #L0c10fa.  v3:= `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L0c10fe.  if v3 != 0 then goto L0c110e;
  #L0c1102.  v3:= "decoder" @kind object;
  #L0c1106.  call `throwUninitializedPropertyAccessException`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L0c110c.  v3:= 0I;
  #L0c110e.  call temp:= `reset`(v3) @signature `Ljava/nio/charset/CharsetDecoder;.reset:()Ljava/nio/charset/CharsetDecoder;` @kind virtual;
  #L0c1114.  v3:= 0I;
  #L0c1116.  call temp:= `position`(v0, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c111c.  return v2;
}
procedure `void` `d`(`kotlin.io.LineReader` v2 @kind this) @signature `Lkotlin/io/LineReader;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0c1384.  v0:= `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L0c1388.  if v0 != 0 then goto L0c1398;
  #L0c138c.  v0:= "decoder" @kind object;
  #L0c1390.  call `throwUninitializedPropertyAccessException`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L0c1396.  v0:= 0I;
  #L0c1398.  call temp:= `reset`(v0) @signature `Ljava/nio/charset/CharsetDecoder;.reset:()Ljava/nio/charset/CharsetDecoder;` @kind virtual;
  #L0c139e.  v0:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c13a2.  v1:= 0I;
  #L0c13a4.  call temp:= `position`(v0, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c13aa.  v0:= `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` @kind object;
  #L0c13ae.  call `setLength`(v0, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L0c13b4.  return @kind void;
}
procedure `void` `e`(`kotlin.io.LineReader` v2 @kind this) @signature `Lkotlin/io/LineReader;.e:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0c13c8.  v0:= `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` @kind object;
  #L0c13cc.  v1:= 32I;
  #L0c13d0.  call `setLength`(v0, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L0c13d6.  call `trimToSize`(v0) @signature `Ljava/lang/StringBuilder;.trimToSize:()V` @kind virtual;
  #L0c13dc.  return @kind void;
}
procedure `void` `f`(`kotlin.io.LineReader` v4 @kind this, `java.nio.charset.Charset` v5 @kind object) @signature `Lkotlin/io/LineReader;.f:(Ljava/nio/charset/Charset;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0c13f0.  call temp:= `newDecoder`(v5) @signature `Ljava/nio/charset/Charset;.newDecoder:()Ljava/nio/charset/CharsetDecoder;` @kind virtual;
  #L0c13f6.  v5:= temp @kind object;
  #L0c13f8.  v0:= "charset.newDecoder()" @kind object;
  #L0c13fc.  call `checkNotNullExpressionValue`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c1402.  `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` := v5 @kind object;
  #L0c1406.  v5:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c140a.  call temp:= `clear`(v5) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L0c1410.  v0:= `@@kotlin.io.LineReader.f` @type ^`java.nio.CharBuffer` @kind object;
  #L0c1414.  call temp:= `clear`(v0) @signature `Ljava/nio/CharBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L0c141a.  v1:= 10I;
  #L0c141e.  v2:= (`byte`) v1 @kind i2b;
  #L0c1420.  call temp:= `put`(v5, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L0c1426.  call temp:= `flip`(v5) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L0c142c.  v2:= `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L0c1430.  if v2 != 0 then goto L0c1440;
  #L0c1434.  v2:= "decoder" @kind object;
  #L0c1438.  call `throwUninitializedPropertyAccessException`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L0c143e.  v2:= 0I;
  #L0c1440.  v3:= 0I;
  #L0c1442.  call temp:= `decode`(v2, v5, v0, v3) @signature `Ljava/nio/charset/CharsetDecoder;.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;` @kind virtual;
  #L0c1448.  call temp:= `position`(v0) @signature `Ljava/nio/CharBuffer;.position:()I` @kind virtual;
  #L0c144e.  v5:= temp;
  #L0c1450.  v2:= 1I;
  #L0c1452.  if v5 != v2 then goto L0c1464;
  #L0c1456.  call temp:= `get`(v0, v3) @signature `Ljava/nio/CharBuffer;.get:(I)C` @kind virtual;
  #L0c145c.  v5:= temp;
  #L0c145e.  if v5 != v1 then goto L0c1464;
  #L0c1462.  v3:= 1I;
  #L0c1464.  `@@kotlin.io.LineReader.b` @type ^`boolean` := v3 @kind boolean;
  #L0c1468.  call `d`(v4) @signature `Lkotlin/io/LineReader;.d:()V` @kind direct;
  #L0c146e.  return @kind void;
}
procedure `java.lang.String` `readLine`(`kotlin.io.LineReader` v10 @kind this, `java.io.InputStream` v11 @kind object, `java.nio.charset.Charset` v12 @kind object) @signature `Lkotlin/io/LineReader;.readLine:(Ljava/io/InputStream;Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L0c1130.  @monitorenter v10
  #L0c1132.  v0:= "inputStream" @kind object;
  #L0c1136.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c113c.  v0:= "charset" @kind object;
  #L0c1140.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c1146.  v0:= `@@kotlin.io.LineReader.a` @type ^`java.nio.charset.CharsetDecoder` @kind object;
  #L0c114a.  v1:= 0I;
  #L0c114c.  if v0 == 0 then goto L0c1174;
  #L0c1150.  if v0 != 0 then goto L0c1160;
  #L0c1154.  v0:= "decoder" @kind object;
  #L0c1158.  call `throwUninitializedPropertyAccessException`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L0c115e.  v0:= v1 @kind object;
  #L0c1160.  call temp:= `charset`(v0) @signature `Ljava/nio/charset/CharsetDecoder;.charset:()Ljava/nio/charset/Charset;` @kind virtual;
  #L0c1166.  v0:= temp @kind object;
  #L0c1168.  call temp:= `areEqual`(v0, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0c116e.  v0:= temp;
  #L0c1170.  if v0 != 0 then goto L0c117a;
  #L0c1174.  call `f`(v10, v12) @signature `Lkotlin/io/LineReader;.f:(Ljava/nio/charset/Charset;)V` @kind direct;
  #L0c117a.  v12:= 0I;
  #L0c117c.  v0:= 0I;
  #L0c117e.  v2:= 0I;
  #L0c1180.  call temp:= `read`(v11) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L0c1186.  v3:= temp;
  #L0c1188.  v4:= 32I;
  #L0c118c.  v5:= 10I;
  #L0c1190.  v6:= -1I;
  #L0c1192.  v7:= 1I;
  #L0c1194.  if v3 != v6 then goto L0c11c8;
  #L0c1198.  v11:= `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` @kind object;
  #L0c119c.  call temp:= `length`(v11) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L0c11a2.  v11:= temp;
  #L0c11a4.  if v11 != 0 then goto L0c11ac;
  #L0c11a8.  v11:= 1I;
  #L0c11aa.  goto L0c11ae;
  #L0c11ac.  v11:= 0I;
  #L0c11ae.  if v11 == 0 then goto L0c11be;
  #L0c11b2.  if v0 != 0 then goto L0c11be;
  #L0c11b6.  if v2 != 0 then goto L0c11be;
  #L0c11ba.  @monitorexit v10
  #L0c11bc.  return v1 @kind object;
  #L0c11be.  call temp:= `c`(v10, v0, v2) @signature `Lkotlin/io/LineReader;.c:(II)I` @kind direct;
  #L0c11c4.  v11:= temp;
  #L0c11c6.  goto L0c1224;
  #L0c11c8.  v6:= `@@kotlin.io.LineReader.c` @type ^`byte`[] @kind object;
  #L0c11cc.  v8:= v0 + 1;
  #L0c11d0.  v9:= (`byte`) v3 @kind i2b;
  #L0c11d2.  v6[v0]:= v9 @kind byte;
  #L0c11d6.  if v3 == v5 then goto L0c11ec;
  #L0c11da.  if v8 == v4 then goto L0c11ec;
  #L0c11de.  v0:= `@@kotlin.io.LineReader.b` @type ^`boolean` @kind boolean;
  #L0c11e2.  if v0 != 0 then goto L0c11e8;
  #L0c11e6.  goto L0c11ec;
  #L0c11e8.  v0:= v8;
  #L0c11ea.  goto L0c1180;
  #L0c11ec.  v0:= `@@kotlin.io.LineReader.e` @type ^`java.nio.ByteBuffer` @kind object;
  #L0c11f0.  call temp:= `limit`(v0, v8) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c11f6.  v3:= `@@kotlin.io.LineReader.f` @type ^`java.nio.CharBuffer` @kind object;
  #L0c11fa.  call temp:= `position`(v3, v2) @signature `Ljava/nio/CharBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c1200.  call temp:= `b`(v10, v12) @signature `Lkotlin/io/LineReader;.b:(Z)I` @kind direct;
  #L0c1206.  v2:= temp;
  #L0c1208.  if v2 <= 0 then goto L0c12b6;
  #L0c120c.  v3:= `@@kotlin.io.LineReader.d` @type ^`char`[] @kind object;
  #L0c1210.  v6:= v2 + -1;
  #L0c1214.  v3:= v3[v6] @kind char;
  #L0c1218.  if v3 != v5 then goto L0c12b6;
  #L0c121c.  call temp:= `position`(v0, v12) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L0c1222.  v11:= v2;
  #L0c1224.  if v11 <= 0 then goto L0c1254;
  #L0c1228.  v0:= `@@kotlin.io.LineReader.d` @type ^`char`[] @kind object;
  #L0c122c.  v1:= v11 + -1;
  #L0c1230.  v1:= v0[v1] @kind char;
  #L0c1234.  if v1 != v5 then goto L0c1254;
  #L0c1238.  v11:= v11 + -1;
  #L0c123c.  if v11 <= 0 then goto L0c1254;
  #L0c1240.  v1:= v11 + -1;
  #L0c1244.  v0:= v0[v1] @kind char;
  #L0c1248.  v1:= 13I;
  #L0c124c.  if v0 != v1 then goto L0c1254;
  #L0c1250.  v11:= v11 + -1;
  #L0c1254.  v0:= `@@kotlin.io.LineReader.g` @type ^`java.lang.StringBuilder` @kind object;
  #L0c1258.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L0c125e.  v1:= temp;
  #L0c1260.  if v1 != 0 then goto L0c1266;
  #L0c1264.  goto L0c1268;
  #L0c1266.  v7:= 0I;
  #L0c1268.  if v7 == 0 then goto L0c127e;
  #L0c126c.  v0:= new `java.lang.String`;
  #L0c1270.  v1:= `@@kotlin.io.LineReader.d` @type ^`char`[] @kind object;
  #L0c1274.  call `<init>`(v0, v1, v12, v11) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L0c127a.  @monitorexit v10
  #L0c127c.  return v0 @kind object;
  #L0c127e.  v1:= `@@kotlin.io.LineReader.d` @type ^`char`[] @kind object;
  #L0c1282.  call temp:= `append`(v0, v1, v12, v11) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L0c1288.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0c128e.  v11:= temp @kind object;
  #L0c1290.  v1:= "sb.toString()" @kind object;
  #L0c1294.  call `checkNotNullExpressionValue`(v11, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0c129a.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L0c12a0.  v1:= temp;
  #L0c12a2.  if v1 <= v4 then goto L0c12ac;
  #L0c12a6.  call `e`(v10) @signature `Lkotlin/io/LineReader;.e:()V` @kind direct;
  #L0c12ac.  call `setLength`(v0, v12) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L0c12b2.  @monitorexit v10
  #L0c12b4.  return v11 @kind object;
  #L0c12b6.  call temp:= `a`(v10) @signature `Lkotlin/io/LineReader;.a:()I` @kind direct;
  #L0c12bc.  v0:= temp;
  #L0c12be.  goto L0c1180;
  #L0c12c2.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0c12c4.  @monitorexit v10
  #L0c12c6.  throw v11;
  catch `java.lang.Throwable` @[L0c1132..L0c11a4] goto L0c12c2;
  catch `java.lang.Throwable` @[L0c11be..L0c127a] goto L0c12c2;
  catch `java.lang.Throwable` @[L0c127e..L0c12b2] goto L0c12c2;
  catch `java.lang.Throwable` @[L0c12b6..L0c12be] goto L0c12c2;
}
