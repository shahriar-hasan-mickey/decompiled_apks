record `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a` @kind class @AccessFlag FINAL extends `kotlin.io.FileTreeWalk$a` @kind class {
  `boolean` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.b` @AccessFlag PRIVATE;
  `java.io.File`[] `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.c` @AccessFlag PRIVATE;
  `int` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.d` @AccessFlag PRIVATE;
  `boolean` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.e` @AccessFlag PRIVATE;
  `kotlin.io.FileTreeWalk$FileTreeWalkIterator` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a` v1 @kind this, `kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind object, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$a;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bef00.  v0:= "rootDir" @kind object;
  #L0bef04.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bef0a.  v1.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.f` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` := v2 @kind object;
  #L0bef0e.  call `<init>`(v1, v3) @signature `Lkotlin/io/FileTreeWalk$a;.<init>:(Ljava/io/File;)V` @kind direct;
  #L0bef14.  return @kind void;
}
procedure `java.io.File` `b`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a` v11 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$a;.b:()Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L0bedd4.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.e` @type ^`boolean` @kind boolean;
  #L0bedd8.  v1:= 0I;
  #L0bedda.  v2:= 1I;
  #L0beddc.  if v0 != 0 then goto L0bee82;
  #L0bede0.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.c` @type ^`java.io.File`[] @kind object;
  #L0bede4.  if v0 != 0 then goto L0bee82;
  #L0bede8.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.f` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L0bedec.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L0bedf0.  call temp:= `access$getOnEnter$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnEnter$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0bedf6.  v0:= temp @kind object;
  #L0bedf8.  v3:= 0I;
  #L0bedfa.  if v0 == 0 then goto L0bee20;
  #L0bedfe.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bee04.  v4:= temp @kind object;
  #L0bee06.  call temp:= `invoke`(v0, v4) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0bee0c.  v0:= temp @kind object;
  #L0bee0e.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L0bee12.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L0bee18.  v0:= temp;
  #L0bee1a.  if v0 != 0 then goto L0bee20;
  #L0bee1e.  v3:= 1I;
  #L0bee20.  if v3 == 0 then goto L0bee26;
  #L0bee24.  return v1 @kind object;
  #L0bee26.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bee2c.  v0:= temp @kind object;
  #L0bee2e.  call temp:= `listFiles`(v0) @signature `Ljava/io/File;.listFiles:()[Ljava/io/File;` @kind virtual;
  #L0bee34.  v0:= temp @kind object;
  #L0bee36.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.c` @type ^`java.io.File`[] := v0 @kind object;
  #L0bee3a.  if v0 != 0 then goto L0bee82;
  #L0bee3e.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.f` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L0bee42.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L0bee46.  call temp:= `access$getOnFail$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnFail$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L0bee4c.  v0:= temp @kind object;
  #L0bee4e.  if v0 == 0 then goto L0bee7e;
  #L0bee52.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bee58.  v3:= temp @kind object;
  #L0bee5a.  v10:= new `kotlin.io.AccessDeniedException`;
  #L0bee5e.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bee64.  v5:= temp @kind object;
  #L0bee66.  v6:= 0I;
  #L0bee68.  v8:= 2I;
  #L0bee6a.  v9:= 0I;
  #L0bee6c.  v7:= "Cannot list files in a directory" @kind object;
  #L0bee70.  v4:= v10 @kind object;
  #L0bee72.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lkotlin/io/AccessDeniedException;.<init>:(Ljava/io/File;Ljava/io/File;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0bee78.  call temp:= `invoke`(v0, v3, v10) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0bee7e.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.e` @type ^`boolean` := v2 @kind boolean;
  #L0bee82.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.c` @type ^`java.io.File`[] @kind object;
  #L0bee86.  if v0 == 0 then goto L0beeb6;
  #L0bee8a.  v3:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.d` @type ^`int`;
  #L0bee8e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0bee94.  v0:= length @variable v0;
  #L0bee96.  if v3 >= v0 then goto L0beeb6;
  #L0bee9a.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.c` @type ^`java.io.File`[] @kind object;
  #L0bee9e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0beea4.  v1:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.d` @type ^`int`;
  #L0beea8.  v2:= v1 + 1;
  #L0beeac.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.d` @type ^`int` := v2;
  #L0beeb0.  v0:= v0[v1] @kind object;
  #L0beeb4.  return v0 @kind object;
  #L0beeb6.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.b` @type ^`boolean` @kind boolean;
  #L0beeba.  if v0 != 0 then goto L0beecc;
  #L0beebe.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.b` @type ^`boolean` := v2 @kind boolean;
  #L0beec2.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0beec8.  v0:= temp @kind object;
  #L0beeca.  return v0 @kind object;
  #L0beecc.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$a.f` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L0beed0.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L0beed4.  call temp:= `access$getOnLeave$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnLeave$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L0beeda.  v0:= temp @kind object;
  #L0beedc.  if v0 == 0 then goto L0beeee;
  #L0beee0.  call temp:= `a`(v11) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0beee6.  v2:= temp @kind object;
  #L0beee8.  call temp:= `invoke`(v0, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L0beeee.  return v1 @kind object;
}
