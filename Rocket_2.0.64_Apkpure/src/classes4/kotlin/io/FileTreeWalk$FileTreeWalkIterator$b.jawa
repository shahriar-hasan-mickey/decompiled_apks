record `kotlin.io.FileTreeWalk$FileTreeWalkIterator$b` @kind class @AccessFlag FINAL extends `kotlin.io.FileTreeWalk$b` @kind class {
  `boolean` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$b.b` @AccessFlag PRIVATE;
  `kotlin.io.FileTreeWalk$FileTreeWalkIterator` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$b` v1 @kind this, `kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind object, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$b;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0bef54.  v0:= "rootFile" @kind object;
  #L0bef58.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L0bef5e.  v1.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$b.c` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` := v2 @kind object;
  #L0bef62.  call `<init>`(v1, v3) @signature `Lkotlin/io/FileTreeWalk$b;.<init>:(Ljava/io/File;)V` @kind direct;
  #L0bef68.  return @kind void;
}
procedure `java.io.File` `b`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$b` v1 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$b;.b:()Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0bef28.  v0:= v1.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$b.b` @type ^`boolean` @kind boolean;
  #L0bef2c.  if v0 == 0 then goto L0bef34;
  #L0bef30.  v0:= 0I;
  #L0bef32.  return v0 @kind object;
  #L0bef34.  v0:= 1I;
  #L0bef36.  v1.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$b.b` @type ^`boolean` := v0 @kind boolean;
  #L0bef3a.  call temp:= `a`(v1) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bef40.  v0:= temp @kind object;
  #L0bef42.  return v0 @kind object;
}
