record `kotlin.io.LinesSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.String` `kotlin.io.LinesSequence$iterator$1.a` @AccessFlag PRIVATE;
  `boolean` `kotlin.io.LinesSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.io.LinesSequence` `kotlin.io.LinesSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.LinesSequence$iterator$1` v0 @kind this, `kotlin.io.LinesSequence` v1 @kind object) @signature `Lkotlin/io/LinesSequence$iterator$1;.<init>:(Lkotlin/io/LinesSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0c1528.  v0.`kotlin.io.LinesSequence$iterator$1.c` @type ^`kotlin.io.LinesSequence` := v1 @kind object;
  #L0c152c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0c1532.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c1480.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.a` @type ^`java.lang.String` @kind object;
  #L0c1484.  v1:= 1I;
  #L0c1486.  if v0 != 0 then goto L0c14b2;
  #L0c148a.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.b` @type ^`boolean` @kind boolean;
  #L0c148e.  if v0 != 0 then goto L0c14b2;
  #L0c1492.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.c` @type ^`kotlin.io.LinesSequence` @kind object;
  #L0c1496.  call temp:= `a`(v0) @signature `Lkotlin/io/LinesSequence;.a:(Lkotlin/io/LinesSequence;)Ljava/io/BufferedReader;` @kind static;
  #L0c149c.  v0:= temp @kind object;
  #L0c149e.  call temp:= `readLine`(v0) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L0c14a4.  v0:= temp @kind object;
  #L0c14a6.  v2.`kotlin.io.LinesSequence$iterator$1.a` @type ^`java.lang.String` := v0 @kind object;
  #L0c14aa.  if v0 != 0 then goto L0c14b2;
  #L0c14ae.  v2.`kotlin.io.LinesSequence$iterator$1.b` @type ^`boolean` := v1 @kind boolean;
  #L0c14b2.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.a` @type ^`java.lang.String` @kind object;
  #L0c14b6.  if v0 == 0 then goto L0c14bc;
  #L0c14ba.  goto L0c14be;
  #L0c14bc.  v1:= 0I;
  #L0c14be.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.io.LinesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0c14d0.  call temp:= `next`(v1) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/String;` @kind virtual;
  #L0c14d6.  v0:= temp @kind object;
  #L0c14d8.  return v0 @kind object;
}
procedure `java.lang.String` `next`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c14ec.  call temp:= `hasNext`(v2) @signature `Lkotlin/io/LinesSequence$iterator$1;.hasNext:()Z` @kind virtual;
  #L0c14f2.  v0:= temp;
  #L0c14f4.  if v0 == 0 then goto L0c150a;
  #L0c14f8.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.a` @type ^`java.lang.String` @kind object;
  #L0c14fc.  v1:= 0I;
  #L0c14fe.  v2.`kotlin.io.LinesSequence$iterator$1.a` @type ^`java.lang.String` := v1 @kind object;
  #L0c1502.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0c1508.  return v0 @kind object;
  #L0c150a.  v0:= new `java.util.NoSuchElementException`;
  #L0c150e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L0c1514.  throw v0;
}
procedure `void` `remove`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0c1544.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0c1548.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L0c154c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0c1552.  throw v0;
}
