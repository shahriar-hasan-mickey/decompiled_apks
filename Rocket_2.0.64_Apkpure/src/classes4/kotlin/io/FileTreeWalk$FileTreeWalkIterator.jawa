record `kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `java.util.ArrayDeque` `kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @AccessFlag PRIVATE_FINAL;
  `kotlin.io.FileTreeWalk` `kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind this, `kotlin.io.FileTreeWalk` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.<init>:(Lkotlin/io/FileTreeWalk;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0bf238.  v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` := v3 @kind object;
  #L0bf23c.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L0bf242.  v0:= new `java.util.ArrayDeque`;
  #L0bf246.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L0bf24c.  v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L0bf250.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L0bf256.  v1:= temp @kind object;
  #L0bf258.  call temp:= `isDirectory`(v1) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L0bf25e.  v1:= temp;
  #L0bf260.  if v1 == 0 then goto L0bf27c;
  #L0bf264.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L0bf26a.  v3:= temp @kind object;
  #L0bf26c.  call temp:= `c`(v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @kind direct;
  #L0bf272.  v3:= temp @kind object;
  #L0bf274.  call `push`(v0, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L0bf27a.  goto L0bf2b0;
  #L0bf27c.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L0bf282.  v1:= temp @kind object;
  #L0bf284.  call temp:= `isFile`(v1) @signature `Ljava/io/File;.isFile:()Z` @kind virtual;
  #L0bf28a.  v1:= temp;
  #L0bf28c.  if v1 == 0 then goto L0bf2aa;
  #L0bf290.  v1:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$b`;
  #L0bf294.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L0bf29a.  v3:= temp @kind object;
  #L0bf29c.  call `<init>`(v1, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$b;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L0bf2a2.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L0bf2a8.  goto L0bf2b0;
  #L0bf2aa.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L0bf2b0.  return @kind void;
}
procedure `kotlin.io.FileTreeWalk$a` `c`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind this, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0bf1dc.  v0:= v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L0bf1e0.  call temp:= `access$getDirection$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getDirection$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/io/FileWalkDirection;` @kind static;
  #L0bf1e6.  v0:= temp @kind object;
  #L0bf1e8.  v1:= `@@kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0bf1ec.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0bf1f2.  v0:= temp;
  #L0bf1f4.  v0:= v1[v0];
  #L0bf1f8.  v1:= 1I;
  #L0bf1fa.  if v0 == v1 then goto L0bf21c;
  #L0bf1fe.  v1:= 2I;
  #L0bf200.  if v0 != v1 then goto L0bf210;
  #L0bf204.  v0:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$a`;
  #L0bf208.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$a;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L0bf20e.  goto L0bf226;
  #L0bf210.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L0bf214.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0bf21a.  throw v3;
  #L0bf21c.  v0:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$c`;
  #L0bf220.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$c;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L0bf226.  return v0 @kind object;
}
procedure `java.io.File` `d`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v3 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.d:()Ljava/io/File;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0bf148.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @type ^`java.util.ArrayDeque` @kind object;
  #L0bf14c.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L0bf152.  v0:= temp @kind object;
  #L0bf154.  v0:= (`kotlin.io.FileTreeWalk$b`) v0 @kind object;
  #L0bf158.  if v0 != 0 then goto L0bf160;
  #L0bf15c.  v0:= 0I;
  #L0bf15e.  return v0 @kind object;
  #L0bf160.  call temp:= `b`(v0) @signature `Lkotlin/io/FileTreeWalk$b;.b:()Ljava/io/File;` @kind virtual;
  #L0bf166.  v1:= temp @kind object;
  #L0bf168.  if v1 != 0 then goto L0bf178;
  #L0bf16c.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @type ^`java.util.ArrayDeque` @kind object;
  #L0bf170.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L0bf176.  goto L0bf148;
  #L0bf178.  call temp:= `a`(v0) @signature `Lkotlin/io/FileTreeWalk$b;.a:()Ljava/io/File;` @kind virtual;
  #L0bf17e.  v0:= temp @kind object;
  #L0bf180.  call temp:= `areEqual`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0bf186.  v0:= temp;
  #L0bf188.  if v0 != 0 then goto L0bf1ca;
  #L0bf18c.  call temp:= `isDirectory`(v1) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L0bf192.  v0:= temp;
  #L0bf194.  if v0 == 0 then goto L0bf1ca;
  #L0bf198.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @type ^`java.util.ArrayDeque` @kind object;
  #L0bf19c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L0bf1a2.  v0:= temp;
  #L0bf1a4.  v2:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L0bf1a8.  call temp:= `access$getMaxDepth$p`(v2) @signature `Lkotlin/io/FileTreeWalk;.access$getMaxDepth$p:(Lkotlin/io/FileTreeWalk;)I` @kind static;
  #L0bf1ae.  v2:= temp;
  #L0bf1b0.  if v0 < v2 then goto L0bf1b6;
  #L0bf1b4.  goto L0bf1ca;
  #L0bf1b6.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.c` @type ^`java.util.ArrayDeque` @kind object;
  #L0bf1ba.  call temp:= `c`(v3, v1) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @kind direct;
  #L0bf1c0.  v1:= temp @kind object;
  #L0bf1c2.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L0bf1c8.  goto L0bf148;
  #L0bf1ca.  return v1 @kind object;
}
procedure `void` `computeNext`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v1 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0bf2c4.  call temp:= `d`(v1) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.d:()Ljava/io/File;` @kind direct;
  #L0bf2ca.  v0:= temp @kind object;
  #L0bf2cc.  if v0 == 0 then goto L0bf2d8;
  #L0bf2d0.  call `setNext`(v1, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L0bf2d6.  goto L0bf2de;
  #L0bf2d8.  call `done`(v1) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L0bf2de.  return @kind void;
}
