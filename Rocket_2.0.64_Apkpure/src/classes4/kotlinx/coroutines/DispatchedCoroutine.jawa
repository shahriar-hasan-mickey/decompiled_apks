record `kotlinx.coroutines.DispatchedCoroutine` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.ScopeCoroutine` @kind class {
  `int` `kotlinx.coroutines.DispatchedCoroutine._decision` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.DispatchedCoroutine.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/DispatchedCoroutine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0f0e24.  v0:= constclass @type ^`kotlinx.coroutines.DispatchedCoroutine` @kind object;
  #L0f0e28.  v1:= "_decision" @kind object;
  #L0f0e2c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L0f0e32.  v0:= temp @kind object;
  #L0f0e34.  `@@kotlinx.coroutines.DispatchedCoroutine.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L0f0e38.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.DispatchedCoroutine` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f0e4c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0f0e52.  v1:= 0I;
  #L0f0e54.  v0.`kotlinx.coroutines.DispatchedCoroutine._decision` @type ^`int` := v1;
  #L0f0e58.  return @kind void;
}
procedure `boolean` `D`(`kotlinx.coroutines.DispatchedCoroutine` v4 @kind this) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.D:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0f0d38.  v0:= v4.`kotlinx.coroutines.DispatchedCoroutine._decision` @type ^`int`;
  #L0f0d3c.  v1:= 0I;
  #L0f0d3e.  v2:= 1I;
  #L0f0d40.  if v0 == 0 then goto L0f0d62;
  #L0f0d44.  if v0 != v2 then goto L0f0d4a;
  #L0f0d48.  return v1;
  #L0f0d4a.  v0:= new `java.lang.IllegalStateException`;
  #L0f0d4e.  v1:= "Already resumed" @kind object;
  #L0f0d52.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f0d58.  v1:= temp @kind object;
  #L0f0d5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f0d60.  throw v0;
  #L0f0d62.  v0:= `@@kotlinx.coroutines.DispatchedCoroutine.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L0f0d66.  v3:= 2I;
  #L0f0d68.  call temp:= `compareAndSet`(v0, v4, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L0f0d6e.  v0:= temp;
  #L0f0d70.  if v0 == 0 then goto L0f0d38;
  #L0f0d74.  return v2;
}
procedure `boolean` `E`(`kotlinx.coroutines.DispatchedCoroutine` v3 @kind this) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.E:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0f0d88.  v0:= v3.`kotlinx.coroutines.DispatchedCoroutine._decision` @type ^`int`;
  #L0f0d8c.  v1:= 0I;
  #L0f0d8e.  if v0 == 0 then goto L0f0db2;
  #L0f0d92.  v2:= 2I;
  #L0f0d94.  if v0 != v2 then goto L0f0d9a;
  #L0f0d98.  return v1;
  #L0f0d9a.  v0:= new `java.lang.IllegalStateException`;
  #L0f0d9e.  v1:= "Already suspended" @kind object;
  #L0f0da2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f0da8.  v1:= temp @kind object;
  #L0f0daa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f0db0.  throw v0;
  #L0f0db2.  v0:= `@@kotlinx.coroutines.DispatchedCoroutine.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L0f0db6.  v2:= 1I;
  #L0f0db8.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L0f0dbe.  v0:= temp;
  #L0f0dc0.  if v0 == 0 then goto L0f0d88;
  #L0f0dc4.  return v2;
}
procedure `void` `afterCompletion`(`kotlinx.coroutines.DispatchedCoroutine` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.afterCompletion:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L0f0e6c.  call `afterResume`(v0, v1) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.afterResume:(Ljava/lang/Object;)V` @kind virtual;
  #L0f0e72.  return @kind void;
}
procedure `void` `afterResume`(`kotlinx.coroutines.DispatchedCoroutine` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.afterResume:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L0f0e84.  call temp:= `D`(v3) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.D:()Z` @kind direct;
  #L0f0e8a.  v0:= temp;
  #L0f0e8c.  if v0 == 0 then goto L0f0e92;
  #L0f0e90.  return @kind void;
  #L0f0e92.  v0:= v3.`kotlinx.coroutines.internal.ScopeCoroutine.uCont` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0f0e96.  call temp:= `intercepted`(v0) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L0f0e9c.  v0:= temp @kind object;
  #L0f0e9e.  v1:= v3.`kotlinx.coroutines.internal.ScopeCoroutine.uCont` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L0f0ea2.  call temp:= `recoverResult`(v4, v1) @signature `Lkotlinx/coroutines/CompletionStateKt;.recoverResult:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L0f0ea8.  v4:= temp @kind object;
  #L0f0eaa.  v1:= 2I;
  #L0f0eac.  v2:= 0I;
  #L0f0eae.  call `resumeCancellableWith$default`(v0, v4, v2, v1, v2) @signature `Lkotlinx/coroutines/internal/DispatchedContinuationKt;.resumeCancellableWith$default:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @kind static;
  #L0f0eb4.  return @kind void;
}
procedure `java.lang.Object` `getResult`(`kotlinx.coroutines.DispatchedCoroutine` v2 @kind this) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.getResult:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0f0dd8.  call temp:= `E`(v2) @signature `Lkotlinx/coroutines/DispatchedCoroutine;.E:()Z` @kind direct;
  #L0f0dde.  v0:= temp;
  #L0f0de0.  if v0 == 0 then goto L0f0dee;
  #L0f0de4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0f0dea.  v0:= temp @kind object;
  #L0f0dec.  return v0 @kind object;
  #L0f0dee.  call temp:= `getState$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/JobSupport;.getState$kotlinx_coroutines_core:()Ljava/lang/Object;` @kind virtual;
  #L0f0df4.  v0:= temp @kind object;
  #L0f0df6.  call temp:= `unboxState`(v0) @signature `Lkotlinx/coroutines/JobSupportKt;.unboxState:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L0f0dfc.  v0:= temp @kind object;
  #L0f0dfe.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.CompletedExceptionally` @kind boolean;
  #L0f0e02.  if v1 != 0 then goto L0f0e08;
  #L0f0e06.  return v0 @kind object;
  #L0f0e08.  v0:= (`kotlinx.coroutines.CompletedExceptionally`) v0 @kind object;
  #L0f0e0c.  v0:= v0.`kotlinx.coroutines.CompletedExceptionally.cause` @type ^`java.lang.Throwable` @kind object;
  #L0f0e10.  throw v0;
}
