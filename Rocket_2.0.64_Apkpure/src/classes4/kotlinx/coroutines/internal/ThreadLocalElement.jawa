record `kotlinx.coroutines.internal.ThreadLocalElement` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.ThreadContextElement` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.internal.ThreadLocalElement.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ThreadLocal` `kotlinx.coroutines.internal.ThreadLocalElement.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.CoroutineContext$Key` `kotlinx.coroutines.internal.ThreadLocalElement.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ThreadLocalElement` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.ThreadLocal` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.<init>:(Ljava/lang/Object;Ljava/lang/ThreadLocal;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L122b14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L122b1a.  v0.`kotlinx.coroutines.internal.ThreadLocalElement.a` @type ^`java.lang.Object` := v1 @kind object;
  #L122b1e.  v0.`kotlinx.coroutines.internal.ThreadLocalElement.b` @type ^`java.lang.ThreadLocal` := v2 @kind object;
  #L122b22.  v1:= new `kotlinx.coroutines.internal.ThreadLocalKey`;
  #L122b26.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/ThreadLocalKey;.<init>:(Ljava/lang/ThreadLocal;)V` @kind direct;
  #L122b2c.  v0.`kotlinx.coroutines.internal.ThreadLocalElement.c` @type ^`kotlin.coroutines.CoroutineContext$Key` := v1 @kind object;
  #L122b30.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlinx.coroutines.internal.ThreadLocalElement` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L1229e4.  call temp:= `fold`(v0, v1, v2) @signature `Lkotlinx/coroutines/ThreadContextElement$DefaultImpls;.fold:(Lkotlinx/coroutines/ThreadContextElement;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L1229ea.  v1:= temp @kind object;
  #L1229ec.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlinx.coroutines.internal.ThreadLocalElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122ad0.  call temp:= `getKey`(v1) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind virtual;
  #L122ad6.  v0:= temp @kind object;
  #L122ad8.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L122ade.  v2:= temp;
  #L122ae0.  if v2 == 0 then goto L122ae8;
  #L122ae4.  v2:= v1 @kind object;
  #L122ae6.  goto L122aea;
  #L122ae8.  v2:= 0I;
  #L122aea.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Key` `getKey`(`kotlinx.coroutines.internal.ThreadLocalElement` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122afc.  v0:= v1.`kotlinx.coroutines.internal.ThreadLocalElement.c` @type ^`kotlin.coroutines.CoroutineContext$Key` @kind object;
  #L122b00.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlinx.coroutines.internal.ThreadLocalElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122a84.  call temp:= `getKey`(v1) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind virtual;
  #L122a8a.  v0:= temp @kind object;
  #L122a8c.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L122a92.  v2:= temp;
  #L122a94.  if v2 == 0 then goto L122a9e;
  #L122a98.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L122a9c.  goto L122aa0;
  #L122a9e.  v2:= v1 @kind object;
  #L122aa0.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlinx.coroutines.internal.ThreadLocalElement` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L122ab4.  call temp:= `plus`(v0, v1) @signature `Lkotlinx/coroutines/ThreadContextElement$DefaultImpls;.plus:(Lkotlinx/coroutines/ThreadContextElement;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L122aba.  v1:= temp @kind object;
  #L122abc.  return v1 @kind object;
}
procedure `void` `restoreThreadContext`(`kotlinx.coroutines.internal.ThreadLocalElement` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.restoreThreadContext:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L122b44.  v1:= v0.`kotlinx.coroutines.internal.ThreadLocalElement.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L122b48.  call `set`(v1, v2) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L122b4e.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.ThreadLocalElement` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122a2c.  v0:= new `java.lang.StringBuilder`;
  #L122a30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L122a36.  v1:= "ThreadLocal(value=" @kind object;
  #L122a3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122a40.  v1:= v2.`kotlinx.coroutines.internal.ThreadLocalElement.a` @type ^`java.lang.Object` @kind object;
  #L122a44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122a4a.  v1:= ", threadLocal = " @kind object;
  #L122a4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122a54.  v1:= v2.`kotlinx.coroutines.internal.ThreadLocalElement.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L122a58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122a5e.  v1:= 41I;
  #L122a62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L122a68.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L122a6e.  v0:= temp @kind object;
  #L122a70.  return v0 @kind object;
}
procedure `java.lang.Object` `updateThreadContext`(`kotlinx.coroutines.internal.ThreadLocalElement` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadLocalElement;.updateThreadContext:(Lkotlin/coroutines/CoroutineContext;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122a00.  v3:= v2.`kotlinx.coroutines.internal.ThreadLocalElement.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L122a04.  call temp:= `get`(v3) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L122a0a.  v3:= temp @kind object;
  #L122a0c.  v0:= v2.`kotlinx.coroutines.internal.ThreadLocalElement.b` @type ^`java.lang.ThreadLocal` @kind object;
  #L122a10.  v1:= v2.`kotlinx.coroutines.internal.ThreadLocalElement.a` @type ^`java.lang.Object` @kind object;
  #L122a14.  call `set`(v0, v1) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L122a1a.  return v3 @kind object;
}
