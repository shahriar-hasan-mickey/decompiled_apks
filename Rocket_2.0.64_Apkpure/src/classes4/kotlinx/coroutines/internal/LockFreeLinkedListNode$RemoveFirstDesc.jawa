record `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._affectedNode` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._originalNext` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.queue` @AccessFlag PUBLIC_FINAL;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11fe7c.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L11fe80.  v1:= constclass @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` @kind object;
  #L11fe84.  v2:= "_affectedNode" @kind object;
  #L11fe88.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11fe8e.  v2:= temp @kind object;
  #L11fe90.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L11fe94.  v2:= "_originalNext" @kind object;
  #L11fe98.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11fe9e.  v0:= temp @kind object;
  #L11fea0.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L11fea4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11feb8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.<init>:()V` @kind direct;
  #L11febe.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L11fec2.  v1:= 0I;
  #L11fec4.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._affectedNode` @type ^`java.lang.Object` := v1 @kind object;
  #L11fec8.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._originalNext` @type ^`java.lang.Object` := v1 @kind object;
  #L11fecc.  return @kind void;
}
procedure `void` `getResult$annotations`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getResult$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L11ff2c.  return @kind void;
}
procedure `java.lang.Object` `failure`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L11fd98.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fd9c.  if v2 != v0 then goto L11fdaa;
  #L11fda0.  call temp:= `getLIST_EMPTY`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListKt;.getLIST_EMPTY:()Ljava/lang/Object;` @kind static;
  #L11fda6.  v2:= temp @kind object;
  #L11fda8.  goto L11fdac;
  #L11fdaa.  v2:= 0I;
  #L11fdac.  return v2 @kind object;
}
procedure `void` `finishOnSuccess`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L11fee0.  v1:= 0I;
  #L11fee2.  call temp:= `access$correctPrev`(v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L11fee8.  return @kind void;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v3 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11fefc.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11ff00.  v1:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11ff04.  v2:= 0I;
  #L11ff06.  call temp:= `a`(v0, v3, v2, v1) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11ff0c.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11ff10.  v4:= v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11ff14.  call temp:= `a`(v0, v3, v2, v4) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11ff1a.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L11fdfc.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._affectedNode` @type ^`java.lang.Object` @kind object;
  #L11fe00.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L11fe04.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getOriginalNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L11fe18.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc._originalNext` @type ^`java.lang.Object` @kind object;
  #L11fe1c.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L11fe20.  return v0 @kind object;
}
procedure `java.lang.Object` `getResult`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getResult:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11fdc0.  call temp:= `getAffectedNode`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11fdc6.  v0:= temp @kind object;
  #L11fdc8.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L11fdce.  return v0 @kind object;
}
procedure `boolean` `retry`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED_FINAL {
    temp;

  #L11fd68.  v1:= instanceof @variable v2 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L11fd6c.  if v1 != 0 then goto L11fd74;
  #L11fd70.  v1:= 0I;
  #L11fd72.  return v1;
  #L11fd74.  v2:= (`kotlinx.coroutines.internal.b`) v2 @kind object;
  #L11fd78.  v1:= v2.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fd7c.  call `helpRemovePrev`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @kind virtual;
  #L11fd82.  v1:= 1I;
  #L11fd84.  return v1;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `takeAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v3 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11fe34.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fe38.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L11fe3c.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L11fe40.  if v2 == 0 then goto L11fe64;
  #L11fe44.  v1:= (`kotlinx.coroutines.internal.OpDescriptor`) v1 @kind object;
  #L11fe48.  call temp:= `isEarlierThan`(v4, v1) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @kind virtual;
  #L11fe4e.  v2:= temp;
  #L11fe50.  if v2 == 0 then goto L11fe58;
  #L11fe54.  v4:= 0I;
  #L11fe56.  return v4 @kind object;
  #L11fe58.  v2:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc.queue` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fe5c.  call temp:= `perform`(v1, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11fe62.  goto L11fe38;
  #L11fe64.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L11fe68.  return v1 @kind object;
}
procedure `java.lang.Object` `updatedNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L11fde0.  call temp:= `access$removed`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$removed:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/b;` @kind static;
  #L11fde6.  v1:= temp @kind object;
  #L11fde8.  return v1 @kind object;
}
