record `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11fd28.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L11fd2e.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L11fd32.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v2 @kind object;
  #L11fd36.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` := v3 @kind object;
  #L11fd3a.  return @kind void;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.finishPrepare:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11fd4c.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L11fd50.  call `finishPrepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @kind virtual;
  #L11fd56.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11fd08.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L11fd0c.  call temp:= `getAtomicOp`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L11fd12.  v0:= temp @kind object;
  #L11fd14.  return v0 @kind object;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11fc00.  v0:= "null cannot be cast to non-null type kotlinx.coroutines.internal.LockFreeLinkedListNode{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node }" @kind object;
  #L11fc04.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L11fc0a.  v6:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v6 @kind object;
  #L11fc0e.  v0:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L11fc12.  call temp:= `onPrepare`(v0, v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @kind virtual;
  #L11fc18.  v0:= temp @kind object;
  #L11fc1a.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L11fc1e.  v2:= 0I;
  #L11fc20.  if v0 != v1 then goto L11fc52;
  #L11fc24.  v0:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fc28.  call temp:= `access$removed`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$removed:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/b;` @kind static;
  #L11fc2e.  v3:= temp @kind object;
  #L11fc30.  v4:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11fc34.  call temp:= `a`(v4, v6, v5, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11fc3a.  v3:= temp;
  #L11fc3c.  if v3 == 0 then goto L11fc50;
  #L11fc40.  v3:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L11fc44.  call `onRemoved`(v3, v6) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onRemoved:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L11fc4a.  call temp:= `access$correctPrev`(v0, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L11fc50.  return v1 @kind object;
  #L11fc52.  if v0 == 0 then goto L11fc68;
  #L11fc56.  call temp:= `getAtomicOp`(v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L11fc5c.  v1:= temp @kind object;
  #L11fc5e.  call temp:= `decide`(v1, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11fc64.  v0:= temp @kind object;
  #L11fc66.  goto L11fc78;
  #L11fc68.  call temp:= `getAtomicOp`(v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L11fc6e.  v0:= temp @kind object;
  #L11fc70.  call temp:= `getConsensus`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getConsensus:()Ljava/lang/Object;` @kind virtual;
  #L11fc76.  v0:= temp @kind object;
  #L11fc78.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L11fc7c.  if v0 != v1 then goto L11fc8a;
  #L11fc80.  call temp:= `getAtomicOp`(v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L11fc86.  v0:= temp @kind object;
  #L11fc88.  goto L11fca4;
  #L11fc8a.  if v0 != 0 then goto L11fca0;
  #L11fc8e.  v0:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.desc` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind object;
  #L11fc92.  v1:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fc96.  call temp:= `updatedNext`(v0, v6, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L11fc9c.  v0:= temp @kind object;
  #L11fc9e.  goto L11fca4;
  #L11fca0.  v0:= v5.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.next` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L11fca4.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11fca8.  call temp:= `a`(v1, v6, v5, v0) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11fcae.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11fcc0.  v0:= new `java.lang.StringBuilder`;
  #L11fcc4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11fcca.  v1:= "PrepareOp(op=" @kind object;
  #L11fcce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11fcd4.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L11fcda.  v1:= temp @kind object;
  #L11fcdc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11fce2.  v1:= 41I;
  #L11fce6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11fcec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11fcf2.  v0:= temp @kind object;
  #L11fcf4.  return v0 @kind object;
}
