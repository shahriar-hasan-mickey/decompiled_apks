record `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` @kind class {
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function0` `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11ff9c.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.b` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L11ffa0.  v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.c` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L11ffa4.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L11ffaa.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11ff40.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L11ff44.  call temp:= `prepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L11ff4a.  v1:= temp @kind object;
  #L11ff4c.  return v1 @kind object;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.prepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L11ff60.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.c` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L11ff64.  call temp:= `invoke`(v1) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L11ff6a.  v1:= temp @kind object;
  #L11ff6c.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L11ff70.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L11ff76.  v1:= temp;
  #L11ff78.  if v1 == 0 then goto L11ff80;
  #L11ff7c.  v1:= 0I;
  #L11ff7e.  goto L11ff88;
  #L11ff80.  call temp:= `getCONDITION_FALSE`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListKt;.getCONDITION_FALSE:()Ljava/lang/Object;` @kind static;
  #L11ff86.  v1:= temp @kind object;
  #L11ff88.  return v1 @kind object;
}
