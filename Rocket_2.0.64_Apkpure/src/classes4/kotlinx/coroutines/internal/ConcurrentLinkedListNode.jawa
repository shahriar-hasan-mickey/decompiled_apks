record `kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.Object` `kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11d710.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L11d714.  v1:= constclass @type ^`kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind object;
  #L11d718.  v2:= "_next" @kind object;
  #L11d71c.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11d722.  v2:= temp @kind object;
  #L11d724.  `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L11d728.  v2:= "_prev" @kind object;
  #L11d72c.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11d732.  v0:= temp @kind object;
  #L11d734.  `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L11d738.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<init>:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L11d74c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d752.  v0:= 0I;
  #L11d754.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` := v0 @kind object;
  #L11d758.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` := v2 @kind object;
  #L11d75c.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `a`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.a:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L11d618.  call temp:= `getPrev`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getPrev:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L11d61e.  v0:= temp @kind object;
  #L11d620.  if v0 == 0 then goto L11d63a;
  #L11d624.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L11d62a.  v1:= temp;
  #L11d62c.  if v1 == 0 then goto L11d63a;
  #L11d630.  v0:= v0.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L11d634.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L11d638.  goto L11d620;
  #L11d63a.  return v0 @kind object;
}
procedure `java.lang.Object` `access$getNextOrClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L11d5e4.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.b:()Ljava/lang/Object;` @kind direct;
  #L11d5ea.  v0:= temp @kind object;
  #L11d5ec.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.b:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L11d600.  v0:= v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L11d604.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `c`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.c:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L11d698.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L11d69e.  v0:= temp @kind object;
  #L11d6a0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L11d6a6.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L11d6ac.  v1:= temp;
  #L11d6ae.  if v1 == 0 then goto L11d6c2;
  #L11d6b2.  call temp:= `getNext`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L11d6b8.  v0:= temp @kind object;
  #L11d6ba.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L11d6c0.  goto L11d6a6;
  #L11d6c2.  return v0 @kind object;
}
procedure `void` `cleanPrev`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.cleanPrev:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d770.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11d774.  v1:= 0I;
  #L11d776.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L11d77c.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `getNext`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d64c.  call temp:= `access$getNextOrClosed`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L11d652.  v0:= temp @kind object;
  #L11d654.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L11d65a.  v1:= temp @kind object;
  #L11d65c.  if v0 != v1 then goto L11d664;
  #L11d660.  v0:= 0I;
  #L11d662.  return v0 @kind object;
  #L11d664.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L11d668.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `getPrev`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getPrev:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11d67c.  v0:= v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L11d680.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L11d684.  return v0 @kind object;
}
procedure `boolean` `getRemoved`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isTail`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11d578.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getNext:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind virtual;
  #L11d57e.  v0:= temp @kind object;
  #L11d580.  if v0 != 0 then goto L11d588;
  #L11d584.  v0:= 1I;
  #L11d586.  goto L11d58a;
  #L11d588.  v0:= 0I;
  #L11d58a.  return v0;
}
procedure `boolean` `markAsClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.markAsClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11d59c.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11d5a0.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L11d5a6.  v1:= temp @kind object;
  #L11d5a8.  v2:= 0I;
  #L11d5aa.  call temp:= `a`(v0, v3, v2, v1) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11d5b0.  v0:= temp;
  #L11d5b2.  return v0;
}
procedure `kotlinx.coroutines.internal.ConcurrentLinkedListNode` `nextOrIfClosed`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.nextOrIfClosed:(Lkotlin/jvm/functions/Function0;)Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d6d4.  call temp:= `access$getNextOrClosed`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L11d6da.  v0:= temp @kind object;
  #L11d6dc.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L11d6e2.  v1:= temp @kind object;
  #L11d6e4.  if v0 == v1 then goto L11d6ee;
  #L11d6e8.  v0:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v0 @kind object;
  #L11d6ec.  return v0 @kind object;
  #L11d6ee.  call temp:= `invoke`(v3) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L11d6f4.  v3:= new `kotlin.KotlinNothingValueException`;
  #L11d6f8.  call `<init>`(v3) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L11d6fe.  throw v3;
}
procedure `void` `remove`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d790.  call temp:= `a`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.a:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind direct;
  #L11d796.  v0:= temp @kind object;
  #L11d798.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.c:()Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;` @kind direct;
  #L11d79e.  v1:= temp @kind object;
  #L11d7a0.  v1.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev` @type ^`java.lang.Object` := v0 @kind object;
  #L11d7a4.  if v0 == 0 then goto L11d7ac;
  #L11d7a8.  v0.`kotlinx.coroutines.internal.ConcurrentLinkedListNode._next` @type ^`java.lang.Object` := v1 @kind object;
  #L11d7ac.  call temp:= `getRemoved`(v1) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L11d7b2.  v1:= temp;
  #L11d7b4.  if v1 == 0 then goto L11d7ba;
  #L11d7b8.  goto L11d790;
  #L11d7ba.  if v0 == 0 then goto L11d7cc;
  #L11d7be.  call temp:= `getRemoved`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.getRemoved:()Z` @kind virtual;
  #L11d7c4.  v0:= temp;
  #L11d7c6.  if v0 == 0 then goto L11d7cc;
  #L11d7ca.  goto L11d790;
  #L11d7cc.  return @kind void;
}
procedure `boolean` `trySetNext`(`kotlinx.coroutines.internal.ConcurrentLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.ConcurrentLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d5c4.  v0:= `@@kotlinx.coroutines.internal.ConcurrentLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11d5c8.  v1:= 0I;
  #L11d5ca.  call temp:= `a`(v0, v2, v1, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11d5d0.  v3:= temp;
  #L11d5d2.  return v3;
}
