record `kotlinx.coroutines.internal.OpDescriptor` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.OpDescriptor` v0 @kind this) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L121784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12178a.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`() @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEarlierThan`(`kotlinx.coroutines.internal.OpDescriptor` v6 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v7 @kind object) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1216ec.  call temp:= `getAtomicOp`(v6) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L1216f2.  v0:= temp @kind object;
  #L1216f4.  v1:= 0I;
  #L1216f6.  if v0 != 0 then goto L1216fc;
  #L1216fa.  return v1;
  #L1216fc.  call temp:= `getAtomicOp`(v7) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L121702.  v7:= temp @kind object;
  #L121704.  if v7 != 0 then goto L12170a;
  #L121708.  return v1;
  #L12170a.  call temp:= `getOpSequence`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @kind virtual;
  #L121710.  v2:= temp @kind wide;
  #L121712.  call temp:= `getOpSequence`(v7) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @kind virtual;
  #L121718.  v4:= temp @kind wide;
  #L12171a.  v7:= lcmp(v2, v4);
  #L12171e.  if v7 >= 0 then goto L121724;
  #L121722.  v1:= 1I;
  #L121724.  return v1;
}
procedure `java.lang.Object` `perform`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.OpDescriptor` v2 @kind this) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L121738.  v0:= new `java.lang.StringBuilder`;
  #L12173c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L121742.  call temp:= `getClassSimpleName`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L121748.  v1:= temp @kind object;
  #L12174a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121750.  v1:= 64I;
  #L121754.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12175a.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L121760.  v1:= temp @kind object;
  #L121762.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121768.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12176e.  v0:= temp @kind object;
  #L121770.  return v0 @kind object;
}
