record `kotlinx.coroutines.internal.ResizableAtomicArray` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.ResizableAtomicArray.array` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ResizableAtomicArray` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L121868.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12186e.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L121872.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L121878.  v1.`kotlinx.coroutines.internal.ResizableAtomicArray.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L12187c.  return @kind void;
}
procedure `int` `currentLength`(`kotlinx.coroutines.internal.ResizableAtomicArray` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.currentLength:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L121818.  v0:= v1.`kotlinx.coroutines.internal.ResizableAtomicArray.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L12181c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L121822.  v0:= temp;
  #L121824.  return v0;
}
procedure `java.lang.Object` `get`(`kotlinx.coroutines.internal.ResizableAtomicArray` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L121838.  v0:= v2.`kotlinx.coroutines.internal.ResizableAtomicArray.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L12183c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L121842.  v1:= temp;
  #L121844.  if v3 >= v1 then goto L121852;
  #L121848.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L12184e.  v3:= temp @kind object;
  #L121850.  goto L121854;
  #L121852.  v3:= 0I;
  #L121854.  return v3 @kind object;
}
procedure `void` `setSynchronized`(`kotlinx.coroutines.internal.ResizableAtomicArray` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.setSynchronized:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L121890.  v0:= v6.`kotlinx.coroutines.internal.ResizableAtomicArray.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L121894.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L12189a.  v1:= temp;
  #L12189c.  if v7 >= v1 then goto L1218a8;
  #L1218a0.  call `set`(v0, v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1218a6.  goto L1218e8;
  #L1218a8.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1218ac.  v3:= v7 + 1;
  #L1218b0.  v4:= v1 * 2;
  #L1218b4.  call temp:= `coerceAtLeast`(v3, v4) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L1218ba.  v3:= temp;
  #L1218bc.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L1218c2.  v3:= 0I;
  #L1218c4.  if v3 >= v1 then goto L1218de;
  #L1218c8.  v4:= v3 + 1;
  #L1218cc.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1218d2.  v5:= temp @kind object;
  #L1218d4.  call `set`(v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1218da.  v3:= v4;
  #L1218dc.  goto L1218c4;
  #L1218de.  call `set`(v2, v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L1218e4.  v6.`kotlinx.coroutines.internal.ResizableAtomicArray.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L1218e8.  return @kind void;
}
