record `kotlinx.coroutines.internal.Segment` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.ConcurrentLinkedListNode` @kind class {
  `long` `kotlinx.coroutines.internal.Segment.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.Segment.cleanedAndPointers` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.internal.Segment.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/Segment;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L121cd0.  v0:= constclass @type ^`kotlinx.coroutines.internal.Segment` @kind object;
  #L121cd4.  v1:= "cleanedAndPointers" @kind object;
  #L121cd8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L121cde.  v0:= temp @kind object;
  #L121ce0.  `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L121ce4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.Segment` v0 @kind this, `long` v1 , `kotlinx.coroutines.internal.Segment` v3 @kind object, `int` v4 ) @signature `Lkotlinx/coroutines/internal/Segment;.<init>:(JLkotlinx/coroutines/internal/Segment;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L121cf8.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.<init>:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)V` @kind direct;
  #L121cfe.  v0.`kotlinx.coroutines.internal.Segment.c` @type ^`long` := v1 @kind wide;
  #L121d02.  v1:= v4 ^< 16;
  #L121d06.  v0.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int` := v1;
  #L121d0a.  return @kind void;
}
procedure `boolean` `decPointers$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L121bec.  v0:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L121bf0.  v1:= -65536I;
  #L121bf4.  call temp:= `addAndGet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.addAndGet:(Ljava/lang/Object;I)I` @kind virtual;
  #L121bfa.  v0:= temp;
  #L121bfc.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L121c02.  v1:= temp;
  #L121c04.  if v0 != v1 then goto L121c18;
  #L121c08.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L121c0e.  v0:= temp;
  #L121c10.  if v0 != 0 then goto L121c18;
  #L121c14.  v0:= 1I;
  #L121c16.  goto L121c1a;
  #L121c18.  v0:= 0I;
  #L121c1a.  return v0;
}
procedure `long` `getId`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L121cb8.  v0:= v2.`kotlinx.coroutines.internal.Segment.c` @type ^`long` @kind wide;
  #L121cbc.  return v0 @kind wide;
}
procedure `int` `getMaxSlots`() @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `getRemoved`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L121c2c.  v0:= v2.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int`;
  #L121c30.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L121c36.  v1:= temp;
  #L121c38.  if v0 != v1 then goto L121c4c;
  #L121c3c.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L121c42.  v0:= temp;
  #L121c44.  if v0 != 0 then goto L121c4c;
  #L121c48.  v0:= 1I;
  #L121c4a.  goto L121c4e;
  #L121c4c.  v0:= 0I;
  #L121c4e.  return v0;
}
procedure `void` `onSlotCleaned`(`kotlinx.coroutines.internal.Segment` v2 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.onSlotCleaned:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L121d1c.  v0:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L121d20.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L121d26.  v0:= temp;
  #L121d28.  call temp:= `getMaxSlots`(v2) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L121d2e.  v1:= temp;
  #L121d30.  if v0 != v1 then goto L121d46;
  #L121d34.  call temp:= `isTail`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L121d3a.  v0:= temp;
  #L121d3c.  if v0 != 0 then goto L121d46;
  #L121d40.  call `remove`(v2) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L121d46.  return @kind void;
}
procedure `boolean` `tryIncPointers$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.Segment` v4 @kind this) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L121c60.  v0:= v4.`kotlinx.coroutines.internal.Segment.cleanedAndPointers` @type ^`int`;
  #L121c64.  call temp:= `getMaxSlots`(v4) @signature `Lkotlinx/coroutines/internal/Segment;.getMaxSlots:()I` @kind virtual;
  #L121c6a.  v1:= temp;
  #L121c6c.  v2:= 0I;
  #L121c6e.  v3:= 1I;
  #L121c70.  if v0 != v1 then goto L121c86;
  #L121c74.  call temp:= `isTail`(v4) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.isTail:()Z` @kind virtual;
  #L121c7a.  v1:= temp;
  #L121c7c.  if v1 == 0 then goto L121c82;
  #L121c80.  goto L121c86;
  #L121c82.  v1:= 0I;
  #L121c84.  goto L121c88;
  #L121c86.  v1:= 1I;
  #L121c88.  if v1 != 0 then goto L121c8e;
  #L121c8c.  goto L121ca6;
  #L121c8e.  v1:= `@@kotlinx.coroutines.internal.Segment.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L121c92.  v2:= 65536I;
  #L121c96.  v2:= v2 + v0 @kind int;
  #L121c98.  call temp:= `compareAndSet`(v1, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L121c9e.  v0:= temp;
  #L121ca0.  if v0 == 0 then goto L121c60;
  #L121ca4.  v2:= 1I;
  #L121ca6.  return v2;
}
