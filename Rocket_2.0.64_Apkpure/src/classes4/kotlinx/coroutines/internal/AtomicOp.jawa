record `kotlinx.coroutines.internal.AtomicOp` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.AtomicOp._consensus` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.AtomicOp.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/AtomicOp;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11d2a0.  v0:= constclass @type ^`kotlinx.coroutines.internal.AtomicOp` @kind object;
  #L11d2a4.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L11d2a8.  v2:= "_consensus" @kind object;
  #L11d2ac.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11d2b2.  v0:= temp @kind object;
  #L11d2b4.  `@@kotlinx.coroutines.internal.AtomicOp.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L11d2b8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.AtomicOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L11d2cc.  call `<init>`(v1) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L11d2d2.  v0:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L11d2d6.  v1.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` := v0 @kind object;
  #L11d2da.  return @kind void;
}
procedure `void` `complete`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `decide`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d1f0.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L11d1f4.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L11d1f8.  if v0 == v1 then goto L11d1fe;
  #L11d1fc.  return v0 @kind object;
  #L11d1fe.  v0:= `@@kotlinx.coroutines.internal.AtomicOp.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11d202.  call temp:= `a`(v0, v2, v1, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11d208.  v0:= temp;
  #L11d20a.  if v0 == 0 then goto L11d210;
  #L11d20e.  return v3 @kind object;
  #L11d210.  v3:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L11d214.  return v3 @kind object;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.internal.AtomicOp` v0 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;

  #L11d274.  return v0 @kind object;
}
procedure `java.lang.Object` `getConsensus`(`kotlinx.coroutines.internal.AtomicOp` v1 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getConsensus:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11d228.  v0:= v1.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L11d22c.  return v0 @kind object;
}
procedure `long` `getOpSequence`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.getOpSequence:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d288.  v0:= 0L;
  #L11d28c.  return v0 @kind wide;
}
procedure `boolean` `isDecided`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d1cc.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L11d1d0.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L11d1d4.  if v0 == v1 then goto L11d1dc;
  #L11d1d8.  v0:= 1I;
  #L11d1da.  goto L11d1de;
  #L11d1dc.  v0:= 0I;
  #L11d1de.  return v0;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.internal.AtomicOp` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11d240.  v0:= v2.`kotlinx.coroutines.internal.AtomicOp._consensus` @type ^`java.lang.Object` @kind object;
  #L11d244.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.NO_DECISION` @type ^`java.lang.Object` @kind object;
  #L11d248.  if v0 != v1 then goto L11d25c;
  #L11d24c.  call temp:= `prepare`(v2, v3) @signature `Lkotlinx/coroutines/internal/AtomicOp;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11d252.  v0:= temp @kind object;
  #L11d254.  call temp:= `decide`(v2, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.decide:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11d25a.  v0:= temp @kind object;
  #L11d25c.  call `complete`(v2, v3, v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L11d262.  return v0 @kind object;
}
procedure `java.lang.Object` `prepare`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/AtomicOp;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
