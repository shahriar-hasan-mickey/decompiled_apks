record `kotlinx.coroutines.internal.f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.CtorCache` @kind class {
}
global `kotlinx.coroutines.internal.f` `@@kotlinx.coroutines.internal.f.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.locks.ReentrantReadWriteLock` `@@kotlinx.coroutines.internal.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.WeakHashMap` `@@kotlinx.coroutines.internal.f.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1233a4.  v0:= new `kotlinx.coroutines.internal.f`;
  #L1233a8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/f;.<init>:()V` @kind direct;
  #L1233ae.  `@@kotlinx.coroutines.internal.f.a` @type ^`kotlinx.coroutines.internal.f` := v0 @kind object;
  #L1233b2.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L1233b6.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L1233bc.  `@@kotlinx.coroutines.internal.f.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` := v0 @kind object;
  #L1233c0.  v0:= new `java.util.WeakHashMap`;
  #L1233c4.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L1233ca.  `@@kotlinx.coroutines.internal.f.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L1233ce.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.f` v0 @kind this) @signature `Lkotlinx/coroutines/internal/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1233e0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/CtorCache;.<init>:()V` @kind direct;
  #L1233e6.  return @kind void;
}
procedure `kotlin.jvm.functions.Function1` `get`(`kotlinx.coroutines.internal.f` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lkotlinx/coroutines/internal/f;.get:(Ljava/lang/Class;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L123294.  v0:= `@@kotlinx.coroutines.internal.f.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L123298.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L12329e.  v1:= temp @kind object;
  #L1232a0.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L1232a6.  v2:= `@@kotlinx.coroutines.internal.f.c` @type ^`java.util.WeakHashMap` @kind object;
  #L1232aa.  call temp:= `get`(v2, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1232b0.  v2:= temp @kind object;
  #L1232b2.  v2:= (`kotlin.jvm.functions.Function1`) v2 @kind object;
  #L1232b6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1232bc.  if v2 != 0 then goto L12336e;
  #L1232c0.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L1232c6.  v1:= temp @kind object;
  #L1232c8.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L1232ce.  v2:= temp;
  #L1232d0.  v3:= 0I;
  #L1232d2.  if v2 != 0 then goto L1232e0;
  #L1232d6.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L1232dc.  v2:= temp;
  #L1232de.  goto L1232e2;
  #L1232e0.  v2:= 0I;
  #L1232e2.  v4:= 0I;
  #L1232e4.  if v4 >= v2 then goto L1232f4;
  #L1232e8.  v4:= v4 + 1;
  #L1232ec.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L1232f2.  goto L1232e4;
  #L1232f4.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L1232fa.  v0:= temp @kind object;
  #L1232fc.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L123302.  v4:= `@@kotlinx.coroutines.internal.f.c` @type ^`java.util.WeakHashMap` @kind object;
  #L123306.  call temp:= `get`(v4, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12330c.  v5:= temp @kind object;
  #L12330e.  v5:= (`kotlin.jvm.functions.Function1`) v5 @kind object;
  #L123312.  if v5 != 0 then goto L12333c;
  #L123316.  call temp:= `access$createConstructor`(v7) @signature `Lkotlinx/coroutines/internal/ExceptionsConstructorKt;.access$createConstructor:(Ljava/lang/Class;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L12331c.  v5:= temp @kind object;
  #L12331e.  call temp:= `put`(v4, v7, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L123324.  if v3 >= v2 then goto L123334;
  #L123328.  v3:= v3 + 1;
  #L12332c.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L123332.  goto L123324;
  #L123334.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L12333a.  return v5 @kind object;
  #L12333c.  if v3 >= v2 then goto L12334c;
  #L123340.  v3:= v3 + 1;
  #L123344.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L12334a.  goto L12333c;
  #L12334c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L123352.  return v5 @kind object;
  #L123354.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L123356.  if v3 >= v2 then goto L123366;
  #L12335a.  v3:= v3 + 1;
  #L12335e.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L123364.  goto L123356;
  #L123366.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L12336c.  throw v7;
  #L12336e.  return v2 @kind object;
  #L123370.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L123372.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L123378.  throw v7;
  catch `java.lang.Throwable` @[L1232a6..L1232b6] goto L123370;
  catch `java.lang.Throwable` @[L123302..L123324] goto L123354;
}
