record `kotlinx.coroutines.internal.LockFreeLinkedListHead` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v0 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11f6a8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L11f6ae.  return @kind void;
}
procedure `void` `forEach`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v3 @kind this, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.forEach:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L11f6c0.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L11f6c6.  v0:= temp @kind object;
  #L11f6c8.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L11f6cc.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11f6d2.  v1:= temp;
  #L11f6d4.  if v1 != 0 then goto L11f6fc;
  #L11f6d8.  v1:= 3I;
  #L11f6da.  v2:= "T" @kind object;
  #L11f6de.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L11f6e4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind boolean;
  #L11f6e8.  if v1 == 0 then goto L11f6f2;
  #L11f6ec.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L11f6f2.  call temp:= `getNextNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f6f8.  v0:= temp @kind object;
  #L11f6fa.  goto L11f6cc;
  #L11f6fc.  return @kind void;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11f60c.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L11f612.  v0:= temp @kind object;
  #L11f614.  if v0 != v1 then goto L11f61c;
  #L11f618.  v0:= 1I;
  #L11f61a.  goto L11f61e;
  #L11f61c.  v0:= 0I;
  #L11f61e.  return v0;
}
procedure `boolean` `isRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11f630.  v0:= 0I;
  #L11f632.  return v0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `nextIfRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.nextIfRemoved:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L11f694.  v0:= 0I;
  #L11f696.  return v0 @kind object;
}
procedure `java.lang.Void` `remove`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.remove:()Ljava/lang/Void;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11f66c.  v0:= new `java.lang.IllegalStateException`;
  #L11f670.  v1:= "head cannot be removed" @kind object;
  #L11f674.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f67a.  v1:= temp @kind object;
  #L11f67c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f682.  throw v0;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.remove:()Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11f644.  call temp:= `remove`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.remove:()Ljava/lang/Void;` @kind virtual;
  #L11f64a.  v0:= temp @kind object;
  #L11f64c.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L11f650.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L11f656.  v0:= temp;
  #L11f658.  return v0;
}
procedure `void` `validate$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.LockFreeLinkedListHead` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.validate$kotlinx_coroutines_core:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11f710.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L11f716.  v0:= temp @kind object;
  #L11f718.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L11f71c.  v1:= v3 @kind object;
  #L11f71e.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11f724.  v2:= temp;
  #L11f726.  if v2 != 0 then goto L11f73e;
  #L11f72a.  call temp:= `getNextNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f730.  v2:= temp @kind object;
  #L11f732.  call `validateNode$kotlinx_coroutines_core`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L11f738.  v1:= v0 @kind object;
  #L11f73a.  v0:= v2 @kind object;
  #L11f73c.  goto L11f71e;
  #L11f73e.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L11f744.  v0:= temp @kind object;
  #L11f746.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L11f74a.  call `validateNode$kotlinx_coroutines_core`(v3, v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L11f750.  return @kind void;
}
