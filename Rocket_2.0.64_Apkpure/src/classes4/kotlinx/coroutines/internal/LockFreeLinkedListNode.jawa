record `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1205c4.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1205c8.  v1:= constclass @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1205cc.  v2:= "_next" @kind object;
  #L1205d0.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1205d6.  v2:= temp @kind object;
  #L1205d8.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1205dc.  v2:= "_prev" @kind object;
  #L1205e0.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1205e6.  v2:= temp @kind object;
  #L1205e8.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L1205ec.  v2:= "_removedRef" @kind object;
  #L1205f0.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1205f6.  v0:= temp @kind object;
  #L1205f8.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L1205fc.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L120610.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L120616.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` := v1 @kind object;
  #L12061a.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L12061e.  v0:= 0I;
  #L120620.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L120624.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `a`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v7 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v8 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L120310.  v0:= v7.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L120314.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L120318.  v1:= 0I;
  #L12031a.  v2:= v0 @kind object;
  #L12031c.  v3:= v1 @kind object;
  #L12031e.  v4:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L120322.  if v4 != v7 then goto L120340;
  #L120326.  if v0 != v2 then goto L12032c;
  #L12032a.  return v2 @kind object;
  #L12032c.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120330.  call temp:= `a`(v1, v7, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L120336.  v0:= temp;
  #L120338.  if v0 != 0 then goto L12033e;
  #L12033c.  goto L120310;
  #L12033e.  return v2 @kind object;
  #L120340.  call temp:= `isRemoved`(v7) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L120346.  v5:= temp;
  #L120348.  if v5 == 0 then goto L12034e;
  #L12034c.  return v1 @kind object;
  #L12034e.  if v4 != v8 then goto L120354;
  #L120352.  return v2 @kind object;
  #L120354.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L120358.  if v5 == 0 then goto L120380;
  #L12035c.  if v8 == 0 then goto L120374;
  #L120360.  v0:= v4 @kind object;
  #L120362.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L120366.  call temp:= `isEarlierThan`(v8, v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @kind virtual;
  #L12036c.  v0:= temp;
  #L12036e.  if v0 == 0 then goto L120374;
  #L120372.  return v1 @kind object;
  #L120374.  v4:= (`kotlinx.coroutines.internal.OpDescriptor`) v4 @kind object;
  #L120378.  call temp:= `perform`(v4, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12037e.  goto L120310;
  #L120380.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L120384.  if v5 == 0 then goto L1203b4;
  #L120388.  if v3 == 0 then goto L1203aa;
  #L12038c.  v5:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120390.  v4:= (`kotlinx.coroutines.internal.b`) v4 @kind object;
  #L120394.  v4:= v4.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L120398.  call temp:= `a`(v5, v3, v2, v4) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L12039e.  v2:= temp;
  #L1203a0.  if v2 != 0 then goto L1203a6;
  #L1203a4.  goto L120310;
  #L1203a6.  v2:= v3 @kind object;
  #L1203a8.  goto L12031c;
  #L1203aa.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L1203ae.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L1203b2.  goto L12031e;
  #L1203b4.  v3:= v4 @kind object;
  #L1203b6.  v3:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v3 @kind object;
  #L1203ba.  v6:= v3 @kind object;
  #L1203bc.  v3:= v2 @kind object;
  #L1203be.  v2:= v6 @kind object;
  #L1203c0.  goto L12031e;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `access$correctPrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.OpDescriptor` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$correctPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1202f4.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L1202fa.  v0:= temp @kind object;
  #L1202fc.  return v0 @kind object;
}
procedure `void` `access$finishAdd`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$finishAdd:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L120638.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L12063e.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b` `access$removed`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.access$removed:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/b;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L120574.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @kind direct;
  #L12057a.  v0:= temp @kind object;
  #L12057c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `b`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.b:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1203d4.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L1203da.  v0:= temp;
  #L1203dc.  if v0 != 0 then goto L1203e2;
  #L1203e0.  return v2 @kind object;
  #L1203e2.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L1203e6.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L1203ea.  goto L1203d4;
}
procedure `void` `c`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L120678.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L12067c.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L120680.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L120686.  v1:= temp @kind object;
  #L120688.  if v1 == v3 then goto L12068e;
  #L12068c.  return @kind void;
  #L12068e.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120692.  call temp:= `a`(v1, v3, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L120698.  v0:= temp;
  #L12069a.  if v0 == 0 then goto L120678;
  #L12069e.  call temp:= `isRemoved`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L1206a4.  v0:= temp;
  #L1206a6.  if v0 == 0 then goto L1206b2;
  #L1206aa.  v0:= 0I;
  #L1206ac.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L1206b2.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b` `d`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L120590.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` @kind object;
  #L120594.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L120598.  if v0 != 0 then goto L1205b0;
  #L12059c.  v0:= new `kotlinx.coroutines.internal.b`;
  #L1205a0.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/b;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L1205a6.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1205aa.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1205b0.  return v0 @kind object;
}
procedure `void` `addLast`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L120650.  call temp:= `getPrevNode`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L120656.  v0:= temp @kind object;
  #L120658.  call temp:= `addNext`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @kind virtual;
  #L12065e.  v0:= temp;
  #L120660.  if v0 == 0 then goto L120650;
  #L120664.  return @kind void;
}
procedure `boolean` `addLastIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlin.jvm.functions.Function0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIf:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L120008.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L12000c.  call `<init>`(v0, v3, v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L120012.  call temp:= `getPrevNode`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L120018.  v4:= temp @kind object;
  #L12001a.  call temp:= `tryCondAddNext`(v4, v3, v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L120020.  v4:= temp;
  #L120022.  v1:= 1I;
  #L120024.  if v4 == v1 then goto L120034;
  #L120028.  v1:= 2I;
  #L12002a.  if v4 == v1 then goto L120030;
  #L12002e.  goto L120012;
  #L120030.  v3:= 0I;
  #L120032.  return v3;
  #L120034.  return v1;
}
procedure `boolean` `addLastIfPrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIfPrev:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L120048.  call temp:= `getPrevNode`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L12004e.  v0:= temp @kind object;
  #L120050.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L120056.  v1:= temp @kind object;
  #L120058.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L12005c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L120062.  v1:= temp;
  #L120064.  if v1 != 0 then goto L12006c;
  #L120068.  v3:= 0I;
  #L12006a.  return v3;
  #L12006c.  call temp:= `addNext`(v0, v3, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @kind virtual;
  #L120072.  v0:= temp;
  #L120074.  if v0 == 0 then goto L120048;
  #L120078.  v3:= 1I;
  #L12007a.  return v3;
}
procedure `boolean` `addLastIfPrevAndIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function0` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLastIfPrevAndIf:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12008c.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L120090.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L120096.  call temp:= `getPrevNode`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L12009c.  v6:= temp @kind object;
  #L12009e.  call temp:= `invoke`(v5, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1200a4.  v1:= temp @kind object;
  #L1200a6.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L1200aa.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1200b0.  v1:= temp;
  #L1200b2.  v2:= 0I;
  #L1200b4.  if v1 != 0 then goto L1200ba;
  #L1200b8.  return v2;
  #L1200ba.  call temp:= `tryCondAddNext`(v6, v4, v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @kind virtual;
  #L1200c0.  v6:= temp;
  #L1200c2.  v1:= 1I;
  #L1200c4.  if v6 == v1 then goto L1200d2;
  #L1200c8.  v1:= 2I;
  #L1200ca.  if v6 == v1 then goto L1200d0;
  #L1200ce.  goto L120096;
  #L1200d0.  return v2;
  #L1200d2.  return v1;
}
procedure `boolean` `addNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1200e4.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1200e8.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1200ee.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1200f2.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1200f8.  call temp:= `a`(v0, v1, v3, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1200fe.  v0:= temp;
  #L120100.  if v0 != 0 then goto L120108;
  #L120104.  v2:= 0I;
  #L120106.  return v2;
  #L120108.  call `c`(v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L12010e.  v2:= 1I;
  #L120110.  return v2;
}
procedure `boolean` `addOneIfEmpty`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addOneIfEmpty:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L120124.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120128.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L12012e.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120132.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L120138.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L12013e.  v0:= temp @kind object;
  #L120140.  if v0 == v1 then goto L120148;
  #L120144.  v2:= 0I;
  #L120146.  return v2;
  #L120148.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L12014c.  call temp:= `a`(v0, v1, v1, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L120152.  v0:= temp;
  #L120154.  if v0 == 0 then goto L120138;
  #L120158.  call `c`(v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.c:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L12015e.  v2:= 1I;
  #L120160.  return v2;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc` `describeAddLast`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.describeAddLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L120520.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$AddLastDesc`;
  #L120524.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AddLastDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L12052a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` `describeRemoveFirst`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.describeRemoveFirst:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L120558.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc`;
  #L12055c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L120562.  return v0 @kind object;
}
procedure `java.lang.Object` `getNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L120204.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L120208.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L12020c.  if v1 != 0 then goto L120212;
  #L120210.  return v0 @kind object;
  #L120212.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L120216.  call temp:= `perform`(v0, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12021c.  goto L120204;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getNextNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNextNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1203fc.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L120402.  v0:= temp @kind object;
  #L120404.  call temp:= `unwrap`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListKt;.unwrap:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L12040a.  v0:= temp @kind object;
  #L12040c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getPrevNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getPrevNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L120420.  v0:= 0I;
  #L120422.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L120428.  v0:= temp @kind object;
  #L12042a.  if v0 != 0 then goto L12043e;
  #L12042e.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L120432.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L120436.  call temp:= `b`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.b:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L12043c.  v0:= temp @kind object;
  #L12043e.  return v0 @kind object;
}
procedure `void` `helpRemove`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemove:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1206c4.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1206ca.  v0:= temp @kind object;
  #L1206cc.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L1206d0.  v0:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1206d4.  call `helpRemovePrev`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @kind virtual;
  #L1206da.  return @kind void;
}
procedure `void` `helpRemovePrev`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1206ec.  v0:= v3 @kind object;
  #L1206ee.  call temp:= `getNext`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1206f4.  v1:= temp @kind object;
  #L1206f6.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L1206fa.  if v2 != 0 then goto L120708;
  #L1206fe.  v1:= 0I;
  #L120700.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L120706.  return @kind void;
  #L120708.  v1:= (`kotlinx.coroutines.internal.b`) v1 @kind object;
  #L12070c.  v0:= v1.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L120710.  goto L1206ee;
}
procedure `boolean` `isRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L120174.  call temp:= `getNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L12017a.  v0:= temp @kind object;
  #L12017c.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L120180.  return v0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` `makeCondAddOp`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.makeCondAddOp:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12053c.  v0:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1`;
  #L120540.  call `<init>`(v0, v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$makeCondAddOp$1;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L120546.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `nextIfRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.nextIfRemoved:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L120450.  call temp:= `getNext`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L120456.  v0:= temp @kind object;
  #L120458.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L12045c.  v2:= 0I;
  #L12045e.  if v1 == 0 then goto L120468;
  #L120462.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L120466.  goto L12046a;
  #L120468.  v0:= v2 @kind object;
  #L12046a.  if v0 != 0 then goto L120470;
  #L12046e.  goto L120474;
  #L120470.  v2:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L120474.  return v2 @kind object;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L120194.  call temp:= `removeOrNext`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L12019a.  v0:= temp @kind object;
  #L12019c.  if v0 != 0 then goto L1201a4;
  #L1201a0.  v0:= 1I;
  #L1201a2.  goto L1201a6;
  #L1201a4.  v0:= 0I;
  #L1201a6.  return v0;
}
procedure `java.lang.Object` `removeFirstIfIsInstanceOfOrPeekIf`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind this, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstIfIsInstanceOfOrPeekIf:(Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L120230.  call temp:= `getNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L120236.  v0:= temp @kind object;
  #L120238.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L12023c.  v1:= 0I;
  #L12023e.  if v0 != v4 then goto L120244;
  #L120242.  return v1 @kind object;
  #L120244.  v2:= 3I;
  #L120246.  v3:= "T" @kind object;
  #L12024a.  call `reifiedOperationMarker`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L120250.  v2:= instanceof @variable v0 @type ^`java.lang.Object` @kind boolean;
  #L120254.  if v2 != 0 then goto L12025a;
  #L120258.  return v1 @kind object;
  #L12025a.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L120260.  v1:= temp @kind object;
  #L120262.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L120266.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L12026c.  v1:= temp;
  #L12026e.  if v1 == 0 then goto L120280;
  #L120272.  call temp:= `isRemoved`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.isRemoved:()Z` @kind virtual;
  #L120278.  v1:= temp;
  #L12027a.  if v1 != 0 then goto L120280;
  #L12027e.  return v0 @kind object;
  #L120280.  call temp:= `removeOrNext`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L120286.  v1:= temp @kind object;
  #L120288.  if v1 != 0 then goto L12028e;
  #L12028c.  return v0 @kind object;
  #L12028e.  call `helpRemovePrev`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemovePrev:()V` @kind virtual;
  #L120294.  goto L120230;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `removeFirstOrNull`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstOrNull:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L120488.  call temp:= `getNext`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L12048e.  v0:= temp @kind object;
  #L120490.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L120494.  if v0 != v2 then goto L12049c;
  #L120498.  v0:= 0I;
  #L12049a.  return v0 @kind object;
  #L12049c.  call temp:= `remove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @kind virtual;
  #L1204a2.  v1:= temp;
  #L1204a4.  if v1 == 0 then goto L1204aa;
  #L1204a8.  return v0 @kind object;
  #L1204aa.  call `helpRemove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.helpRemove:()V` @kind virtual;
  #L1204b0.  goto L120488;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `removeOrNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeOrNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1204c4.  call temp:= `getNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.getNext:()Ljava/lang/Object;` @kind virtual;
  #L1204ca.  v0:= temp @kind object;
  #L1204cc.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b` @kind boolean;
  #L1204d0.  if v1 == 0 then goto L1204de;
  #L1204d4.  v0:= (`kotlinx.coroutines.internal.b`) v0 @kind object;
  #L1204d8.  v0:= v0.`kotlinx.coroutines.internal.b.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L1204dc.  return v0 @kind object;
  #L1204de.  if v0 != v4 then goto L1204e8;
  #L1204e2.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L1204e6.  return v0 @kind object;
  #L1204e8.  v1:= v0 @kind object;
  #L1204ea.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L1204ee.  call temp:= `d`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.d:()Lkotlinx/coroutines/internal/b;` @kind direct;
  #L1204f4.  v2:= temp @kind object;
  #L1204f6.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1204fa.  call temp:= `a`(v3, v4, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L120500.  v0:= temp;
  #L120502.  if v0 == 0 then goto L1204c4;
  #L120506.  v0:= 0I;
  #L120508.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.a:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L12050e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1202a8.  v0:= new `java.lang.StringBuilder`;
  #L1202ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1202b2.  v1:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$a`;
  #L1202b6.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1202bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1202c2.  v1:= 64I;
  #L1202c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1202cc.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1202d2.  v1:= temp @kind object;
  #L1202d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1202da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1202e0.  v0:= temp @kind object;
  #L1202e2.  return v0 @kind object;
}
procedure `int` `tryCondAddNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.tryCondAddNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1201b8.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1201bc.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1201c2.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1201c6.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1201cc.  v4.`kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp.oldNext` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v3 @kind object;
  #L1201d0.  call temp:= `a`(v0, v1, v3, v4) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1201d6.  v2:= temp;
  #L1201d8.  if v2 != 0 then goto L1201e0;
  #L1201dc.  v2:= 0I;
  #L1201de.  return v2;
  #L1201e0.  call temp:= `perform`(v4, v1) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1201e6.  v2:= temp @kind object;
  #L1201e8.  if v2 != 0 then goto L1201f0;
  #L1201ec.  v2:= 1I;
  #L1201ee.  goto L1201f2;
  #L1201f0.  v2:= 2I;
  #L1201f2.  return v2;
}
procedure `void` `validateNode$kotlinx_coroutines_core`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.validateNode$kotlinx_coroutines_core:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L120724.  return @kind void;
}
