record `kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.AtomicDesc` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11f99c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.<init>:()V` @kind direct;
  #L11f9a2.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v4 @kind this, `kotlinx.coroutines.internal.AtomicOp` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11f9b4.  if v6 != 0 then goto L11f9bc;
  #L11f9b8.  v6:= 1I;
  #L11f9ba.  goto L11f9be;
  #L11f9bc.  v6:= 0I;
  #L11f9be.  call temp:= `getAffectedNode`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f9c4.  v0:= temp @kind object;
  #L11f9c6.  if v0 != 0 then goto L11f9cc;
  #L11f9ca.  return @kind void;
  #L11f9cc.  call temp:= `getOriginalNext`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f9d2.  v1:= temp @kind object;
  #L11f9d4.  if v1 != 0 then goto L11f9da;
  #L11f9d8.  return @kind void;
  #L11f9da.  if v6 == 0 then goto L11f9e8;
  #L11f9de.  call temp:= `updatedNext`(v4, v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L11f9e4.  v2:= temp @kind object;
  #L11f9e6.  goto L11f9ea;
  #L11f9e8.  v2:= v1 @kind object;
  #L11f9ea.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11f9ee.  call temp:= `a`(v3, v0, v5, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11f9f4.  v5:= temp;
  #L11f9f6.  if v5 == 0 then goto L11fa04;
  #L11f9fa.  if v6 == 0 then goto L11fa04;
  #L11f9fe.  call `finishOnSuccess`(v4, v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L11fa04.  return @kind void;
}
procedure `java.lang.Object` `failure`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L11f880.  v1:= 0I;
  #L11f882.  return v1 @kind object;
}
procedure `void` `finishOnSuccess`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishOnSuccess:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `finishPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v0 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getAffectedNode`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `getOriginalNext`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getOriginalNext:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `onPrepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L11f894.  call `finishPrepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.finishPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)V` @kind virtual;
  #L11f89a.  v1:= 0I;
  #L11f89c.  return v1 @kind object;
}
procedure `void` `onRemoved`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.onRemoved:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC {
    temp;

  #L11fa18.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v5 @kind this, `kotlinx.coroutines.internal.AtomicOp` v6 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11f8b0.  call temp:= `takeAffectedNode`(v5, v6) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f8b6.  v0:= temp @kind object;
  #L11f8b8.  if v0 != 0 then goto L11f8c2;
  #L11f8bc.  v6:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L11f8c0.  return v6 @kind object;
  #L11f8c2.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L11f8c6.  v2:= 0I;
  #L11f8c8.  if v1 != v6 then goto L11f8ce;
  #L11f8cc.  return v2 @kind object;
  #L11f8ce.  call temp:= `isDecided`(v6) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @kind virtual;
  #L11f8d4.  v3:= temp;
  #L11f8d6.  if v3 == 0 then goto L11f8dc;
  #L11f8da.  return v2 @kind object;
  #L11f8dc.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L11f8e0.  if v3 == 0 then goto L11f902;
  #L11f8e4.  v1:= (`kotlinx.coroutines.internal.OpDescriptor`) v1 @kind object;
  #L11f8e8.  call temp:= `isEarlierThan`(v6, v1) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.isEarlierThan:(Lkotlinx/coroutines/internal/OpDescriptor;)Z` @kind virtual;
  #L11f8ee.  v2:= temp;
  #L11f8f0.  if v2 == 0 then goto L11f8fa;
  #L11f8f4.  v6:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L11f8f8.  return v6 @kind object;
  #L11f8fa.  call temp:= `perform`(v1, v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11f900.  goto L11f8b0;
  #L11f902.  call temp:= `failure`(v5, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L11f908.  v3:= temp @kind object;
  #L11f90a.  if v3 == 0 then goto L11f910;
  #L11f90e.  return v3 @kind object;
  #L11f910.  call temp:= `retry`(v5, v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @kind virtual;
  #L11f916.  v3:= temp;
  #L11f918.  if v3 == 0 then goto L11f91e;
  #L11f91c.  goto L11f8b0;
  #L11f91e.  v3:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp`;
  #L11f922.  v4:= v1 @kind object;
  #L11f924.  v4:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v4 @kind object;
  #L11f928.  call `<init>`(v3, v0, v4, v5) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;)V` @kind direct;
  #L11f92e.  v4:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11f932.  call temp:= `a`(v4, v0, v1, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11f938.  v4:= temp;
  #L11f93a.  if v4 == 0 then goto L11f8b0;
  #L11f93e.  call temp:= `perform`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11f944.  v4:= temp @kind object;
  #L11f946.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L11f94a.  if v4 != v0 then goto L11f950;
  #L11f94e.  goto L11f8b0;
  #L11f950.  return v2 @kind object;
  #L11f952.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11f954.  v2:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11f958.  call temp:= `a`(v2, v0, v3, v1) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11f95e.  throw v6;
  catch `java.lang.Throwable` @[L11f93e..L11f94a] goto L11f952;
}
procedure `boolean` `retry`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.retry:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED {
    temp;

  #L11f86c.  v1:= 0I;
  #L11f86e.  return v1;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `takeAffectedNode`(`kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc` v0 @kind this, `kotlinx.coroutines.internal.OpDescriptor` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.takeAffectedNode:(Lkotlinx/coroutines/internal/OpDescriptor;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED {
    temp;

  #L11f97c.  call temp:= `getAffectedNode`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.getAffectedNode:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L11f982.  v1:= temp @kind object;
  #L11f984.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L11f98a.  return v1 @kind object;
}
procedure `java.lang.Object` `updatedNext`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$AbstractAtomicDesc;.updatedNext:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
