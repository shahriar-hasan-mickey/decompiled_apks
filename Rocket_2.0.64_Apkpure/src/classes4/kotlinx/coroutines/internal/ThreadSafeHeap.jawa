record `kotlinx.coroutines.internal.ThreadSafeHeap` @kind class @AccessFlag PUBLIC {
  `int` `kotlinx.coroutines.internal.ThreadSafeHeap._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.ThreadSafeHeapNode`[] `kotlinx.coroutines.internal.ThreadSafeHeap.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L122fa4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L122faa.  v0:= 0I;
  #L122fac.  v1.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v0;
  #L122fb0.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode`[] `a`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.a:()[Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L122f48.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L122f4c.  if v0 != 0 then goto L122f5c;
  #L122f50.  v0:= 4I;
  #L122f52.  v0:= new `kotlinx.coroutines.internal.ThreadSafeHeapNode`[v0];
  #L122f56.  v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] := v0 @kind object;
  #L122f5a.  goto L122f90;
  #L122f5c.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122f62.  v1:= temp;
  #L122f64.  v2:= length @variable v0;
  #L122f66.  if v1 < v2 then goto L122f90;
  #L122f6a.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122f70.  v1:= temp;
  #L122f72.  v1:= v1 * 2;
  #L122f76.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L122f7c.  v0:= temp @kind object;
  #L122f7e.  v1:= "copyOf(this, newSize)" @kind object;
  #L122f82.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L122f88.  v0:= (`kotlinx.coroutines.internal.ThreadSafeHeapNode`[]) v0 @kind object;
  #L122f8c.  v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] := v0 @kind object;
  #L122f90.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.internal.ThreadSafeHeap` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L123088.  v0.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v1;
  #L12308c.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.internal.ThreadSafeHeap` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1230a0.  v0:= v6 * 2;
  #L1230a4.  v0:= v0 + 1;
  #L1230a8.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L1230ae.  v1:= temp;
  #L1230b0.  if v0 < v1 then goto L1230b6;
  #L1230b4.  return @kind void;
  #L1230b6.  v1:= v5.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L1230ba.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1230c0.  v2:= v0 + 1;
  #L1230c4.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L1230ca.  v3:= temp;
  #L1230cc.  if v2 >= v3 then goto L1230f6;
  #L1230d0.  v3:= v1[v2] @kind object;
  #L1230d4.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1230da.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L1230de.  v4:= v1[v0] @kind object;
  #L1230e2.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1230e8.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L1230ee.  v3:= temp;
  #L1230f0.  if v3 >= 0 then goto L1230f6;
  #L1230f4.  v0:= v2;
  #L1230f6.  v2:= v1[v6] @kind object;
  #L1230fa.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L123100.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L123104.  v1:= v1[v0] @kind object;
  #L123108.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L12310e.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L123114.  v1:= temp;
  #L123116.  if v1 > 0 then goto L12311c;
  #L12311a.  return @kind void;
  #L12311c.  call `e`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L123122.  v6:= v0;
  #L123124.  goto L1230a0;
}
procedure `void` `d`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L123138.  if v4 > 0 then goto L12313e;
  #L12313c.  return @kind void;
  #L12313e.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L123142.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L123148.  v1:= v4 + -1;
  #L12314c.  v1:= v1 / 2;
  #L123150.  v2:= v0[v1] @kind object;
  #L123154.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L12315a.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L12315e.  v0:= v0[v4] @kind object;
  #L123162.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L123168.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L12316e.  v0:= temp;
  #L123170.  if v0 > 0 then goto L123176;
  #L123174.  return @kind void;
  #L123176.  call `e`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L12317c.  v4:= v1;
  #L12317e.  goto L123138;
}
procedure `void` `e`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L123190.  v0:= v3.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L123194.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L12319a.  v1:= v0[v5] @kind object;
  #L12319e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1231a4.  v2:= v0[v4] @kind object;
  #L1231a8.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1231ae.  v0[v4]:= v1 @kind object;
  #L1231b2.  v0[v5]:= v2 @kind object;
  #L1231b6.  call `setIndex`(v1, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L1231bc.  call `setIndex`(v2, v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L1231c2.  return @kind void;
}
procedure `void` `addImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L122fc4.  call `setHeap`(v4, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setHeap:(Lkotlinx/coroutines/internal/ThreadSafeHeap;)V` @kind interface;
  #L122fca.  call temp:= `a`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.a:()[Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind direct;
  #L122fd0.  v0:= temp @kind object;
  #L122fd2.  call temp:= `getSize`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122fd8.  v1:= temp;
  #L122fda.  v2:= v1 + 1;
  #L122fde.  call `b`(v3, v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @kind direct;
  #L122fe4.  v0[v1]:= v4 @kind object;
  #L122fe8.  call `setIndex`(v4, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L122fee.  call `d`(v3, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @kind direct;
  #L122ff4.  return @kind void;
}
procedure `void` `addLast`(`kotlinx.coroutines.internal.ThreadSafeHeap` v0 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L123008.  @monitorenter v0
  #L12300a.  call `addImpl`(v0, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L123010.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L123014.  @monitorexit v0
  #L123016.  return @kind void;
  #L123018.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L12301a.  @monitorexit v0
  #L12301c.  throw v1;
  catch `java.lang.Throwable` @[L12300a..L123014] goto L123018;
}
procedure `boolean` `addLastIf`(`kotlinx.coroutines.internal.ThreadSafeHeap` v2 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLastIf:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L122c78.  @monitorenter v2
  #L122c7a.  v0:= 1I;
  #L122c7c.  call temp:= `firstImpl`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122c82.  v1:= temp @kind object;
  #L122c84.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L122c8a.  v4:= temp @kind object;
  #L122c8c.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L122c90.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L122c96.  v4:= temp;
  #L122c98.  if v4 == 0 then goto L122ca6;
  #L122c9c.  call `addImpl`(v2, v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addImpl:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L122ca2.  v3:= 1I;
  #L122ca4.  goto L122ca8;
  #L122ca6.  v3:= 0I;
  #L122ca8.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L122cae.  @monitorexit v2
  #L122cb0.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L122cb6.  return v3;
  #L122cb8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122cba.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L122cc0.  @monitorexit v2
  #L122cc2.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L122cc8.  throw v3;
  catch `java.lang.Throwable` @[L122c7c..L122ca2] goto L122cb8;
}
procedure `void` `clear`(`kotlinx.coroutines.internal.ThreadSafeHeap` v6 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L12303c.  @monitorenter v6
  #L12303e.  v0:= v6.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L123042.  if v0 != 0 then goto L123048;
  #L123046.  goto L123058;
  #L123048.  v1:= 0I;
  #L12304a.  v2:= 0I;
  #L12304c.  v3:= 0I;
  #L12304e.  v4:= 6I;
  #L123050.  v5:= 0I;
  #L123052.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L123058.  v0:= 0I;
  #L12305a.  v6.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int` := v0;
  #L12305e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L123062.  @monitorexit v6
  #L123064.  return @kind void;
  #L123066.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L123068.  @monitorexit v6
  #L12306a.  throw v0;
  catch `java.lang.Throwable` @[L12303e..L123062] goto L123066;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `firstImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v2 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L122d6c.  v0:= v2.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L122d70.  if v0 != 0 then goto L122d78;
  #L122d74.  v0:= 0I;
  #L122d76.  goto L122d7e;
  #L122d78.  v1:= 0I;
  #L122d7a.  v0:= v0[v1] @kind object;
  #L122d7e.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L122d54.  v0:= v1.`kotlinx.coroutines.internal.ThreadSafeHeap._size` @type ^`int`;
  #L122d58.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L122ce8.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122cee.  v0:= temp;
  #L122cf0.  if v0 != 0 then goto L122cf8;
  #L122cf4.  v0:= 1I;
  #L122cf6.  goto L122cfa;
  #L122cf8.  v0:= 0I;
  #L122cfa.  return v0;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `peek`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L122d90.  @monitorenter v1
  #L122d92.  call temp:= `firstImpl`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122d98.  v0:= temp @kind object;
  #L122d9a.  @monitorexit v1
  #L122d9c.  return v0 @kind object;
  #L122d9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122da0.  @monitorexit v1
  #L122da2.  throw v0;
  catch `java.lang.Throwable` @[L122d92..L122d9a] goto L122d9e;
}
procedure `boolean` `remove`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this, `kotlinx.coroutines.internal.ThreadSafeHeapNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.remove:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L122d0c.  @monitorenter v1
  #L122d0e.  call temp:= `getHeap`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getHeap:()Lkotlinx/coroutines/internal/ThreadSafeHeap;` @kind interface;
  #L122d14.  v0:= temp @kind object;
  #L122d16.  if v0 != 0 then goto L122d1e;
  #L122d1a.  v2:= 0I;
  #L122d1c.  goto L122d2e;
  #L122d1e.  call temp:= `getIndex`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.getIndex:()I` @kind interface;
  #L122d24.  v2:= temp;
  #L122d26.  call temp:= `removeAtImpl`(v1, v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122d2c.  v2:= 1I;
  #L122d2e.  @monitorexit v1
  #L122d30.  return v2;
  #L122d32.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122d34.  @monitorexit v1
  #L122d36.  throw v2;
  catch `java.lang.Throwable` @[L122d0e..L122d2c] goto L122d32;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeAtImpl`(`kotlinx.coroutines.internal.ThreadSafeHeap` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L122dc0.  v0:= v5.`kotlinx.coroutines.internal.ThreadSafeHeap.a` @type ^`kotlinx.coroutines.internal.ThreadSafeHeapNode`[] @kind object;
  #L122dc4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L122dca.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122dd0.  v1:= temp;
  #L122dd2.  v2:= -1I;
  #L122dd4.  v1:= v1 + v2 @kind int;
  #L122dd6.  call `b`(v5, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.b:(I)V` @kind direct;
  #L122ddc.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122de2.  v1:= temp;
  #L122de4.  if v6 >= v1 then goto L122e3a;
  #L122de8.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122dee.  v1:= temp;
  #L122df0.  call `e`(v5, v6, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L122df6.  v1:= v6 + -1;
  #L122dfa.  v1:= v1 / 2;
  #L122dfe.  if v6 <= 0 then goto L122e34;
  #L122e02.  v3:= v0[v6] @kind object;
  #L122e06.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L122e0c.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L122e10.  v4:= v0[v1] @kind object;
  #L122e14.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L122e1a.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L122e20.  v3:= temp;
  #L122e22.  if v3 >= 0 then goto L122e34;
  #L122e26.  call `e`(v5, v6, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.e:(II)V` @kind direct;
  #L122e2c.  call `d`(v5, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.d:(I)V` @kind direct;
  #L122e32.  goto L122e3a;
  #L122e34.  call `c`(v5, v6) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.c:(I)V` @kind direct;
  #L122e3a.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122e40.  v6:= temp;
  #L122e42.  v6:= v0[v6] @kind object;
  #L122e46.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L122e4c.  v1:= 0I;
  #L122e4e.  call `setHeap`(v6, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setHeap:(Lkotlinx/coroutines/internal/ThreadSafeHeap;)V` @kind interface;
  #L122e54.  call `setIndex`(v6, v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeapNode;.setIndex:(I)V` @kind interface;
  #L122e5a.  call temp:= `getSize`(v5) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122e60.  v2:= temp;
  #L122e62.  v0[v2]:= v1 @kind object;
  #L122e66.  return v6 @kind object;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeFirstIf`(`kotlinx.coroutines.internal.ThreadSafeHeap` v3 @kind this, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeFirstIf:(Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L122e78.  @monitorenter v3
  #L122e7a.  v0:= 1I;
  #L122e7c.  call temp:= `firstImpl`(v3) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122e82.  v1:= temp @kind object;
  #L122e84.  v2:= 0I;
  #L122e86.  if v1 != 0 then goto L122e9c;
  #L122e8a.  v4:= 2I;
  #L122e8c.  call `finallyStart`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L122e92.  @monitorexit v3
  #L122e94.  call `finallyEnd`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L122e9a.  return v2 @kind object;
  #L122e9c.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L122ea2.  v4:= temp @kind object;
  #L122ea4.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L122ea8.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L122eae.  v4:= temp;
  #L122eb0.  if v4 == 0 then goto L122ebe;
  #L122eb4.  v4:= 0I;
  #L122eb6.  call temp:= `removeAtImpl`(v3, v4) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122ebc.  v2:= temp @kind object;
  #L122ebe.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L122ec4.  @monitorexit v3
  #L122ec6.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L122ecc.  return v2 @kind object;
  #L122ece.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122ed0.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L122ed6.  @monitorexit v3
  #L122ed8.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L122ede.  throw v4;
  catch `java.lang.Throwable` @[L122e7c..L122e84] goto L122ece;
  catch `java.lang.Throwable` @[L122e9c..L122ebe] goto L122ece;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeapNode` `removeFirstOrNull`(`kotlinx.coroutines.internal.ThreadSafeHeap` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeFirstOrNull:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L122f04.  @monitorenter v1
  #L122f06.  call temp:= `getSize`(v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.getSize:()I` @kind virtual;
  #L122f0c.  v0:= temp;
  #L122f0e.  if v0 <= 0 then goto L122f1e;
  #L122f12.  v0:= 0I;
  #L122f14.  call temp:= `removeAtImpl`(v1, v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L122f1a.  v0:= temp @kind object;
  #L122f1c.  goto L122f20;
  #L122f1e.  v0:= 0I;
  #L122f20.  @monitorexit v1
  #L122f22.  return v0 @kind object;
  #L122f24.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122f26.  @monitorexit v1
  #L122f28.  throw v0;
  catch `java.lang.Throwable` @[L122f06..L122f1c] goto L122f24;
}
