record `kotlinx.coroutines.internal.LimitedDispatcherKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkParallelism`(`int` v1 ) @signature `Lkotlinx/coroutines/internal/LimitedDispatcherKt;.checkParallelism:(I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L11f2dc.  v0:= 1I;
  #L11f2de.  if v1 < v0 then goto L11f2e4;
  #L11f2e2.  goto L11f2e6;
  #L11f2e4.  v0:= 0I;
  #L11f2e6.  if v0 == 0 then goto L11f2ec;
  #L11f2ea.  return @kind void;
  #L11f2ec.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11f2f2.  v1:= temp @kind object;
  #L11f2f4.  v0:= "Expected positive parallelism level, but got " @kind object;
  #L11f2f8.  call temp:= `stringPlus`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11f2fe.  v1:= temp @kind object;
  #L11f300.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f304.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f30a.  v1:= temp @kind object;
  #L11f30c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f312.  throw v0;
}
