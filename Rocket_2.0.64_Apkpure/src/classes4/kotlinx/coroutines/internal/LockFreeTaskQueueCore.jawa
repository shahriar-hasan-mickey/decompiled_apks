record `kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @AccessFlag PRIVATE_SYNTHETIC;
}
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_CLOSED` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_FROZEN` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.ADD_SUCCESS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CAPACITY_BITS` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CLOSED_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.CLOSED_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.FROZEN_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.FROZEN_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.HEAD_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.HEAD_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.INITIAL_CAPACITY` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.MAX_CAPACITY_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.MIN_ADD_SPIN_CAPACITY` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.TAIL_MASK` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.TAIL_SHIFT` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L120e18.  v0:= constclass @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore` @kind object;
  #L120e1c.  v1:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion`;
  #L120e20.  v2:= 0I;
  #L120e22.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L120e28.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` := v1 @kind object;
  #L120e2c.  v1:= new `kotlinx.coroutines.internal.Symbol`;
  #L120e30.  v2:= "REMOVE_FROZEN" @kind object;
  #L120e34.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120e3a.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` := v1 @kind object;
  #L120e3e.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L120e42.  v2:= "_next" @kind object;
  #L120e46.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L120e4c.  v1:= temp @kind object;
  #L120e4e.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L120e52.  v1:= "_state" @kind object;
  #L120e56.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L120e5c.  v0:= temp @kind object;
  #L120e5e.  `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L120e62.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L120e74.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L120e7a.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int` := v5;
  #L120e7e.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` := v6 @kind boolean;
  #L120e82.  v6:= v5 + -1;
  #L120e86.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int` := v6;
  #L120e8a.  v0:= 0I;
  #L120e8c.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @type ^`java.lang.Object` := v0 @kind object;
  #L120e90.  v0:= 0L;
  #L120e94.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` := v0 @kind wide;
  #L120e98.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L120e9c.  call `<init>`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L120ea2.  v4.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L120ea6.  v0:= 0I;
  #L120ea8.  v1:= 1I;
  #L120eaa.  v2:= 1073741823I;
  #L120eb0.  if v6 > v2 then goto L120eb8;
  #L120eb4.  v2:= 1I;
  #L120eb6.  goto L120eba;
  #L120eb8.  v2:= 0I;
  #L120eba.  v3:= "Check failed." @kind object;
  #L120ebe.  if v2 == 0 then goto L120ee4;
  #L120ec2.  v5:= v5 ^& v6 @kind int;
  #L120ec4.  if v5 != 0 then goto L120eca;
  #L120ec8.  v0:= 1I;
  #L120eca.  if v0 == 0 then goto L120ed0;
  #L120ece.  return @kind void;
  #L120ed0.  v5:= new `java.lang.IllegalStateException`;
  #L120ed4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L120eda.  v6:= temp @kind object;
  #L120edc.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120ee2.  throw v5;
  #L120ee4.  v5:= new `java.lang.IllegalStateException`;
  #L120ee8.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L120eee.  v6:= temp @kind object;
  #L120ef0.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120ef6.  throw v5;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `a`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.a:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L120c20.  v0:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore`;
  #L120c24.  v1:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L120c28.  v1:= v1 * 2;
  #L120c2c.  v2:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L120c30.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.<init>:(IZ)V` @kind direct;
  #L120c36.  v1:= 1073741823L;
  #L120c3c.  v1:= v1 ^& v7 @kind long;
  #L120c3e.  v3:= 0I;
  #L120c40.  v1:= v1 ^> v3 @kind long;
  #L120c42.  v2:= (`int`) v1 @kind l2i;
  #L120c44.  v3:= 1152921503533105152L;
  #L120c4e.  v3:= v3 ^& v7 @kind long;
  #L120c50.  v1:= 30I;
  #L120c54.  v3:= v3 ^> v1 @kind long;
  #L120c56.  v1:= (`int`) v3 @kind l2i;
  #L120c58.  v3:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120c5c.  v4:= v2 ^& v3 @kind int;
  #L120c60.  v5:= v1 ^& v3 @kind int;
  #L120c64.  if v4 == v5 then goto L120c9a;
  #L120c68.  v4:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120c6c.  v3:= v3 ^& v2 @kind int;
  #L120c6e.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L120c74.  v3:= temp @kind object;
  #L120c76.  if v3 != 0 then goto L120c84;
  #L120c7a.  v3:= new `kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder`;
  #L120c7e.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Placeholder;.<init>:(I)V` @kind direct;
  #L120c84.  v4:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120c88.  v5:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120c8c.  v5:= v5 ^& v2 @kind int;
  #L120c8e.  call `set`(v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L120c94.  v2:= v2 + 1;
  #L120c98.  goto L120c58;
  #L120c9a.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L120c9e.  v2:= 1152921504606846976L;
  #L120ca2.  call temp:= `wo`(v1, v7, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.wo:(JJ)J` @kind virtual;
  #L120ca8.  v7:= temp @kind wide;
  #L120caa.  v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` := v7 @kind wide;
  #L120cae.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `b`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.b:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L120cc0.  v0:= v3.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._next` @type ^`java.lang.Object` @kind object;
  #L120cc4.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore`) v0 @kind object;
  #L120cc8.  if v0 == 0 then goto L120cce;
  #L120ccc.  return v0 @kind object;
  #L120cce.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L120cd2.  v1:= 0I;
  #L120cd4.  call temp:= `a`(v3, v4) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.a:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L120cda.  v2:= temp @kind object;
  #L120cdc.  call temp:= `a`(v0, v3, v1, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L120ce2.  goto L120cc0;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `c`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.c:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L120cf4.  v0:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120cf8.  v1:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120cfc.  v1:= v1 ^& v3 @kind int;
  #L120cfe.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L120d04.  v0:= temp @kind object;
  #L120d06.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L120d0a.  if v1 == 0 then goto L120d2c;
  #L120d0e.  v0:= (`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder`) v0 @kind object;
  #L120d12.  v0:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder.index` @type ^`int`;
  #L120d16.  if v0 != v3 then goto L120d2c;
  #L120d1a.  v0:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120d1e.  v1:= v2.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120d22.  v3:= v3 ^& v1 @kind int;
  #L120d24.  call `set`(v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L120d2a.  return v2 @kind object;
  #L120d2c.  v3:= 0I;
  #L120d2e.  return v3 @kind object;
}
procedure `long` `d`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v9 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.d:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L120dd4.  v2:= v9.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120dd8.  v0:= 1152921504606846976L;
  #L120ddc.  v4:= v2 ^& v0 @kind long;
  #L120de0.  v6:= 0L;
  #L120de4.  v8:= lcmp(v4, v6);
  #L120de8.  if v8 == 0 then goto L120dee;
  #L120dec.  return v2 @kind wide;
  #L120dee.  v6:= v2 ^| v0 @kind long;
  #L120df2.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L120df6.  v1:= v9 @kind object;
  #L120df8.  v4:= v6 @kind wide;
  #L120dfa.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L120e00.  v0:= temp;
  #L120e02.  if v0 == 0 then goto L120dd4;
  #L120e06.  return v6 @kind wide;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `e`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.e:(II)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L120d64.  v2:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120d68.  v9:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L120d6c.  v0:= 1073741823L;
  #L120d72.  v0:= v0 ^& v2 @kind long;
  #L120d74.  v4:= 0I;
  #L120d76.  v0:= v0 ^> v4 @kind long;
  #L120d78.  v6:= (`int`) v0 @kind l2i;
  #L120d7a.  v0:= 1152921504606846976L;
  #L120d7e.  v0:= v0 ^& v2 @kind long;
  #L120d80.  v4:= 0L;
  #L120d84.  v7:= lcmp(v0, v4);
  #L120d88.  if v7 == 0 then goto L120d96;
  #L120d8c.  call temp:= `next`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L120d92.  v9:= temp @kind object;
  #L120d94.  return v9 @kind object;
  #L120d96.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L120d9a.  call temp:= `updateHead`(v9, v2, v10) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateHead:(JI)J` @kind virtual;
  #L120da0.  v4:= temp @kind wide;
  #L120da2.  v1:= v8 @kind object;
  #L120da4.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L120daa.  v9:= temp;
  #L120dac.  if v9 == 0 then goto L120d64;
  #L120db0.  v9:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120db4.  v10:= v8.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120db8.  v10:= v10 ^& v6 @kind int;
  #L120dba.  v0:= 0I;
  #L120dbc.  call `set`(v9, v10, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L120dc2.  return v0 @kind object;
}
procedure `int` `addLast`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.addLast:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L12096c.  v2:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120970.  v0:= 1.727233711018889E-77D;
  #L120974.  v0:= v0 ^& v2 @kind long;
  #L120976.  v6:= 0L;
  #L12097a.  v4:= lcmp(v0, v6);
  #L12097e.  if v4 == 0 then goto L120990;
  #L120982.  v14:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L120986.  call temp:= `addFailReason`(v14, v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.addFailReason:(J)I` @kind virtual;
  #L12098c.  v14:= temp;
  #L12098e.  return v14;
  #L120990.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L120994.  v4:= 1073741823L;
  #L12099a.  v4:= v4 ^& v2 @kind long;
  #L12099c.  v8:= 0I;
  #L12099e.  v4:= v4 ^> v8 @kind long;
  #L1209a0.  v1:= (`int`) v4 @kind l2i;
  #L1209a2.  v4:= 1152921503533105152L;
  #L1209ac.  v4:= v4 ^& v2 @kind long;
  #L1209ae.  v9:= 30I;
  #L1209b2.  v4:= v4 ^> v9 @kind long;
  #L1209b4.  v9:= (`int`) v4 @kind l2i;
  #L1209b6.  v10:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L1209ba.  v4:= v9 + 2;
  #L1209be.  v4:= v4 ^& v10 @kind int;
  #L1209c0.  v5:= v1 ^& v10 @kind int;
  #L1209c4.  v11:= 1I;
  #L1209c6.  if v4 != v5 then goto L1209cc;
  #L1209ca.  return v11;
  #L1209cc.  v4:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L1209d0.  v5:= 1073741823I;
  #L1209d6.  if v4 != 0 then goto L120a0a;
  #L1209da.  v4:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L1209de.  v12:= v9 ^& v10 @kind int;
  #L1209e2.  call temp:= `get`(v4, v12) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1209e8.  v4:= temp @kind object;
  #L1209ea.  if v4 == 0 then goto L120a0a;
  #L1209ee.  v0:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L1209f2.  v2:= 1024I;
  #L1209f6.  if v0 < v2 then goto L120a08;
  #L1209fa.  v9:= v9 - v1 @kind int;
  #L1209fc.  v1:= v9 ^& v5 @kind int;
  #L120a00.  v0:= v0 ^> 1;
  #L120a04.  if v1 <= v0 then goto L12096c;
  #L120a08.  return v11;
  #L120a0a.  v1:= v9 + 1;
  #L120a0e.  v1:= v1 ^& v5 @kind int;
  #L120a10.  v4:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L120a14.  call temp:= `updateTail`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateTail:(JI)J` @kind virtual;
  #L120a1a.  v11:= temp @kind wide;
  #L120a1c.  v0:= v4 @kind object;
  #L120a1e.  v1:= v13 @kind object;
  #L120a20.  v4:= v11 @kind wide;
  #L120a22.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L120a28.  v0:= temp;
  #L120a2a.  if v0 == 0 then goto L12096c;
  #L120a2e.  v0:= v13.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120a32.  v1:= v9 ^& v10 @kind int;
  #L120a36.  call `set`(v0, v1, v14) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L120a3c.  v0:= v13 @kind object;
  #L120a3e.  v1:= v0.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120a42.  v3:= 1152921504606846976L;
  #L120a46.  v1:= v1 ^& v3 @kind long;
  #L120a48.  v3:= lcmp(v1, v6);
  #L120a4c.  if v3 != 0 then goto L120a52;
  #L120a50.  goto L120a66;
  #L120a52.  call temp:= `next`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind virtual;
  #L120a58.  v0:= temp @kind object;
  #L120a5a.  call temp:= `c`(v0, v9, v14) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.c:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L120a60.  v0:= temp @kind object;
  #L120a62.  if v0 != 0 then goto L120a3e;
  #L120a66.  return v8;
}
procedure `boolean` `close`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v10 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.close:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1208a4.  v2:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L1208a8.  v0:= 2305843009213693952L;
  #L1208ac.  v4:= v2 ^& v0 @kind long;
  #L1208b0.  v6:= 1I;
  #L1208b2.  v7:= 0L;
  #L1208b6.  v9:= lcmp(v4, v7);
  #L1208ba.  if v9 == 0 then goto L1208c0;
  #L1208be.  return v6;
  #L1208c0.  v4:= 1152921504606846976L;
  #L1208c4.  v4:= v4 ^& v2 @kind long;
  #L1208c6.  v9:= lcmp(v4, v7);
  #L1208ca.  if v9 == 0 then goto L1208d2;
  #L1208ce.  v0:= 0I;
  #L1208d0.  return v0;
  #L1208d2.  v4:= v2 ^| v0 @kind long;
  #L1208d6.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1208da.  v1:= v10 @kind object;
  #L1208dc.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L1208e2.  v0:= temp;
  #L1208e4.  if v0 == 0 then goto L1208a4;
  #L1208e8.  return v6;
}
procedure `int` `getSize`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v6 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.getSize:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L120a78.  v0:= v6.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120a7c.  v2:= 1073741823L;
  #L120a82.  v2:= v2 ^& v0 @kind long;
  #L120a84.  v4:= 0I;
  #L120a86.  v2:= v2 ^> v4 @kind long;
  #L120a88.  v3:= (`int`) v2 @kind l2i;
  #L120a8a.  v4:= 1152921503533105152L;
  #L120a94.  v0:= v0 ^& v4 @kind long;
  #L120a96.  v2:= 30I;
  #L120a9a.  v0:= v0 ^> v2 @kind long;
  #L120a9c.  v1:= (`int`) v0 @kind l2i;
  #L120a9e.  v1:= v1 - v3 @kind int;
  #L120aa0.  v0:= 1073741823I;
  #L120aa6.  v0:= v0 ^& v1 @kind int;
  #L120aa8.  return v0;
}
procedure `boolean` `isClosed`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v5 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isClosed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1208fc.  v0:= v5.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120900.  v2:= 2305843009213693952L;
  #L120904.  v0:= v0 ^& v2 @kind long;
  #L120906.  v2:= 0L;
  #L12090a.  v4:= lcmp(v0, v2);
  #L12090e.  if v4 == 0 then goto L120916;
  #L120912.  v0:= 1I;
  #L120914.  goto L120918;
  #L120916.  v0:= 0I;
  #L120918.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v7 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L12092c.  v0:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120930.  v2:= 1073741823L;
  #L120936.  v2:= v2 ^& v0 @kind long;
  #L120938.  v4:= 0I;
  #L12093a.  v2:= v2 ^> v4 @kind long;
  #L12093c.  v3:= (`int`) v2 @kind l2i;
  #L12093e.  v5:= 1152921503533105152L;
  #L120948.  v0:= v0 ^& v5 @kind long;
  #L12094a.  v2:= 30I;
  #L12094e.  v0:= v0 ^> v2 @kind long;
  #L120950.  v1:= (`int`) v0 @kind l2i;
  #L120952.  if v3 != v1 then goto L120958;
  #L120956.  v4:= 1I;
  #L120958.  return v4;
}
procedure `java.util.List` `map`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v7 @kind this, `kotlin.jvm.functions.Function1` v8 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.map:(Lkotlin/jvm/functions/Function1;)Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L120b9c.  v0:= new `java.util.ArrayList`;
  #L120ba0.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.a` @type ^`int`;
  #L120ba4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L120baa.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120bae.  v3:= 1073741823L;
  #L120bb4.  v3:= v3 ^& v1 @kind long;
  #L120bb6.  v5:= 0I;
  #L120bb8.  v3:= v3 ^> v5 @kind long;
  #L120bba.  v4:= (`int`) v3 @kind l2i;
  #L120bbc.  v5:= 1152921503533105152L;
  #L120bc6.  v1:= v1 ^& v5 @kind long;
  #L120bc8.  v3:= 30I;
  #L120bcc.  v1:= v1 ^> v3 @kind long;
  #L120bce.  v2:= (`int`) v1 @kind l2i;
  #L120bd0.  v1:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120bd4.  v3:= v4 ^& v1 @kind int;
  #L120bd8.  v5:= v2 ^& v1 @kind int;
  #L120bdc.  if v3 == v5 then goto L120c0e;
  #L120be0.  v3:= v7.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120be4.  v1:= v1 ^& v4 @kind int;
  #L120be6.  call temp:= `get`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L120bec.  v1:= temp @kind object;
  #L120bee.  if v1 == 0 then goto L120c08;
  #L120bf2.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L120bf6.  if v3 != 0 then goto L120c08;
  #L120bfa.  call temp:= `invoke`(v8, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L120c00.  v1:= temp @kind object;
  #L120c02.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L120c08.  v4:= v4 + 1;
  #L120c0c.  goto L120bd0;
  #L120c0e.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeTaskQueueCore` `next`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.next:()Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L120d40.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.d:()J` @kind direct;
  #L120d46.  v0:= temp @kind wide;
  #L120d48.  call temp:= `b`(v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.b:(J)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L120d4e.  v0:= temp @kind object;
  #L120d50.  return v0 @kind object;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlinx.coroutines.internal.LockFreeTaskQueueCore` v10 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L120abc.  v2:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore._state` @type ^`long` @kind wide;
  #L120ac0.  v0:= 1152921504606846976L;
  #L120ac4.  v0:= v0 ^& v2 @kind long;
  #L120ac6.  v4:= 0L;
  #L120aca.  v6:= lcmp(v0, v4);
  #L120ace.  if v6 == 0 then goto L120ad8;
  #L120ad2.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.REMOVE_FROZEN` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L120ad6.  return v0 @kind object;
  #L120ad8.  v0:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion` @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion` @kind object;
  #L120adc.  v4:= 1073741823L;
  #L120ae2.  v4:= v4 ^& v2 @kind long;
  #L120ae4.  v1:= 0I;
  #L120ae6.  v4:= v4 ^> v1 @kind long;
  #L120ae8.  v6:= (`int`) v4 @kind l2i;
  #L120aea.  v4:= 1152921503533105152L;
  #L120af4.  v4:= v4 ^& v2 @kind long;
  #L120af6.  v1:= 30I;
  #L120afa.  v4:= v4 ^> v1 @kind long;
  #L120afc.  v1:= (`int`) v4 @kind l2i;
  #L120afe.  v4:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120b02.  v1:= v1 ^& v4 @kind int;
  #L120b04.  v5:= v6 ^& v4 @kind int;
  #L120b08.  v7:= 0I;
  #L120b0a.  if v1 != v5 then goto L120b10;
  #L120b0e.  return v7 @kind object;
  #L120b10.  v1:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120b14.  v4:= v4 ^& v6 @kind int;
  #L120b16.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L120b1c.  v8:= temp @kind object;
  #L120b1e.  if v8 != 0 then goto L120b2c;
  #L120b22.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L120b26.  if v0 == 0 then goto L120abc;
  #L120b2a.  return v7 @kind object;
  #L120b2c.  v1:= instanceof @variable v8 @type ^`kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder` @kind boolean;
  #L120b30.  if v1 == 0 then goto L120b36;
  #L120b34.  return v7 @kind object;
  #L120b36.  v1:= v6 + 1;
  #L120b3a.  v4:= 1073741823I;
  #L120b40.  v9:= v1 ^& v4 @kind int;
  #L120b44.  v1:= `@@kotlinx.coroutines.internal.LockFreeTaskQueueCore.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L120b48.  call temp:= `updateHead`(v0, v2, v9) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore$Companion;.updateHead:(JI)J` @kind virtual;
  #L120b4e.  v4:= temp @kind wide;
  #L120b50.  v0:= v1 @kind object;
  #L120b52.  v1:= v10 @kind object;
  #L120b54.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L120b5a.  v0:= temp;
  #L120b5c.  if v0 == 0 then goto L120b72;
  #L120b60.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L120b64.  v1:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.c` @type ^`int`;
  #L120b68.  v1:= v1 ^& v6 @kind int;
  #L120b6a.  call `set`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L120b70.  return v8 @kind object;
  #L120b72.  v0:= v10.`kotlinx.coroutines.internal.LockFreeTaskQueueCore.b` @type ^`boolean` @kind boolean;
  #L120b76.  if v0 != 0 then goto L120b7c;
  #L120b7a.  goto L120abc;
  #L120b7c.  v0:= v10 @kind object;
  #L120b7e.  call temp:= `e`(v0, v6, v9) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;.e:(II)Lkotlinx/coroutines/internal/LockFreeTaskQueueCore;` @kind direct;
  #L120b84.  v0:= temp @kind object;
  #L120b86.  if v0 != 0 then goto L120b7e;
  #L120b8a.  return v8 @kind object;
}
