record `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.DORMANT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[] `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L123a34.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`;
  #L123a38.  v1:= "CPU_ACQUIRED" @kind object;
  #L123a3c.  v2:= 0I;
  #L123a3e.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123a44.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L123a48.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`;
  #L123a4c.  v1:= "BLOCKING" @kind object;
  #L123a50.  v2:= 1I;
  #L123a52.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123a58.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L123a5c.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`;
  #L123a60.  v1:= "PARKING" @kind object;
  #L123a64.  v2:= 2I;
  #L123a66.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123a6c.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L123a70.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`;
  #L123a74.  v1:= "DORMANT" @kind object;
  #L123a78.  v2:= 3I;
  #L123a7a.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123a80.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.DORMANT` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L123a84.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`;
  #L123a88.  v1:= "TERMINATED" @kind object;
  #L123a8c.  v2:= 4I;
  #L123a8e.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123a94.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L123a98.  call temp:= `a`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.a:()[Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;` @kind static;
  #L123a9e.  v0:= temp @kind object;
  #L123aa0.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.a` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[] := v0 @kind object;
  #L123aa4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L123ab8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L123abe.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[] `a`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.a:()[Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L1239c4.  v0:= 5I;
  #L1239c6.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[v0];
  #L1239ca.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239ce.  v2:= 0I;
  #L1239d0.  v0[v2]:= v1 @kind object;
  #L1239d4.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239d8.  v2:= 1I;
  #L1239da.  v0[v2]:= v1 @kind object;
  #L1239de.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239e2.  v2:= 2I;
  #L1239e4.  v0[v2]:= v1 @kind object;
  #L1239e8.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.DORMANT` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239ec.  v2:= 3I;
  #L1239ee.  v0[v2]:= v1 @kind object;
  #L1239f2.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239f6.  v2:= 4I;
  #L1239f8.  v0[v2]:= v1 @kind object;
  #L1239fc.  return v0 @kind object;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.valueOf:(Ljava/lang/String;)Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1239a0.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L1239a4.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1239aa.  v1:= temp @kind object;
  #L1239ac.  v1:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`) v1 @kind object;
  #L1239b0.  return v1 @kind object;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[] `values`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;.values:()[Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L123a10.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.a` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[] @kind object;
  #L123a14.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L123a1a.  v0:= temp @kind object;
  #L123a1c.  v0:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState`[]) v0 @kind object;
  #L123a20.  return v0 @kind object;
}
