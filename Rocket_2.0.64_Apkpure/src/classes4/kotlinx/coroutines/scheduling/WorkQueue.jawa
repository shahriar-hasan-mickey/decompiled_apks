record `kotlinx.coroutines.scheduling.WorkQueue` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.WorkQueue.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.WorkQueue.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L126198.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L12619c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1261a0.  v2:= "lastScheduledTask" @kind object;
  #L1261a4.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1261aa.  v1:= temp @kind object;
  #L1261ac.  `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L1261b0.  v1:= "producerIndex" @kind object;
  #L1261b4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1261ba.  v1:= temp @kind object;
  #L1261bc.  `@@kotlinx.coroutines.scheduling.WorkQueue.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L1261c0.  v1:= "consumerIndex" @kind object;
  #L1261c4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1261ca.  v1:= temp @kind object;
  #L1261cc.  `@@kotlinx.coroutines.scheduling.WorkQueue.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L1261d0.  v1:= "blockingTasksInBuffer" @kind object;
  #L1261d4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L1261da.  v0:= temp @kind object;
  #L1261dc.  `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L1261e0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1261f4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1261fa.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L1261fe.  v1:= 128I;
  #L126202.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L126208.  v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L12620c.  v0:= 0I;
  #L12620e.  v2.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L126212.  v0:= 0I;
  #L126214.  v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int` := v0;
  #L126218.  v2.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int` := v0;
  #L12621c.  v2.`kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @type ^`int` := v0;
  #L126220.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `a`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L125f40.  v0:= v3.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L125f44.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L125f4a.  v0:= temp;
  #L125f4c.  v1:= 1I;
  #L125f4e.  if v0 != v1 then goto L125f54;
  #L125f52.  goto L125f56;
  #L125f54.  v1:= 0I;
  #L125f56.  if v1 == 0 then goto L125f64;
  #L125f5a.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L125f5e.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L125f64.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L125f6a.  v0:= temp;
  #L125f6c.  v1:= 127I;
  #L125f70.  if v0 != v1 then goto L125f76;
  #L125f74.  return v3 @kind object;
  #L125f76.  v0:= v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L125f7a.  v0:= v0 ^& v1 @kind int;
  #L125f7c.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L125f80.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L125f86.  v1:= temp @kind object;
  #L125f88.  if v1 == 0 then goto L125f94;
  #L125f8c.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L125f92.  goto L125f7c;
  #L125f94.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L125f98.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L125f9e.  v3:= `@@kotlinx.coroutines.scheduling.WorkQueue.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L125fa2.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L125fa8.  v3:= 0I;
  #L125faa.  return v3 @kind object;
}
procedure `kotlinx.coroutines.scheduling.Task` `add$default`(`kotlinx.coroutines.scheduling.WorkQueue` v0 @kind object, `kotlinx.coroutines.scheduling.Task` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L125edc.  v3:= v3 ^& 2;
  #L125ee0.  if v3 == 0 then goto L125ee6;
  #L125ee4.  v2:= 0I;
  #L125ee6.  call temp:= `add`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L125eec.  v0:= temp @kind object;
  #L125eee.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.scheduling.WorkQueue` v1 @kind this, `kotlinx.coroutines.scheduling.Task` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.b:(Lkotlinx/coroutines/scheduling/Task;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L126234.  if v2 == 0 then goto L12625c;
  #L126238.  v2:= v2.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L12623c.  call temp:= `getTaskMode`(v2) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L126242.  v2:= temp;
  #L126244.  v0:= 1I;
  #L126246.  if v2 != v0 then goto L12624c;
  #L12624a.  goto L12624e;
  #L12624c.  v0:= 0I;
  #L12624e.  if v0 == 0 then goto L12625c;
  #L126252.  v2:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L126256.  call temp:= `decrementAndGet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L12625c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `c`(`kotlinx.coroutines.scheduling.WorkQueue` v5 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L125fec.  v0:= v5.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L125ff0.  v1:= v5.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L125ff4.  v1:= v0 - v1 @kind int;
  #L125ff8.  v2:= 0I;
  #L125ffa.  if v1 != 0 then goto L126000;
  #L125ffe.  return v2 @kind object;
  #L126000.  v1:= v0 ^& 127;
  #L126004.  v3:= `@@kotlinx.coroutines.scheduling.WorkQueue.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L126008.  v4:= v0 + 1;
  #L12600c.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L126012.  v0:= temp;
  #L126014.  if v0 == 0 then goto L125fec;
  #L126018.  v0:= v5.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L12601c.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L126022.  v0:= temp @kind object;
  #L126024.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L126028.  if v0 != 0 then goto L12602e;
  #L12602c.  goto L125fec;
  #L12602e.  call `b`(v5, v0) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.b:(Lkotlinx/coroutines/scheduling/Task;)V` @kind direct;
  #L126034.  return v0 @kind object;
}
procedure `boolean` `d`(`kotlinx.coroutines.scheduling.WorkQueue` v1 @kind this, `kotlinx.coroutines.scheduling.GlobalQueue` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.d:(Lkotlinx/coroutines/scheduling/GlobalQueue;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L125e64.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L125e6a.  v0:= temp @kind object;
  #L125e6c.  if v0 != 0 then goto L125e74;
  #L125e70.  v2:= 0I;
  #L125e72.  return v2;
  #L125e74.  call temp:= `addLast`(v2, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L125e7a.  v2:= 1I;
  #L125e7c.  return v2;
}
procedure `long` `e`(`kotlinx.coroutines.scheduling.WorkQueue` v7 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L126110.  v0:= v8.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L126114.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L126118.  v1:= -2L;
  #L12611c.  if v0 != 0 then goto L126122;
  #L126120.  return v1 @kind wide;
  #L126122.  v3:= 0I;
  #L126124.  if v9 == 0 then goto L126144;
  #L126128.  v4:= v0.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L12612c.  call temp:= `getTaskMode`(v4) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L126132.  v4:= temp;
  #L126134.  v5:= 1I;
  #L126136.  if v4 != v5 then goto L12613c;
  #L12613a.  goto L12613e;
  #L12613c.  v5:= 0I;
  #L12613e.  if v5 != 0 then goto L126144;
  #L126142.  return v1 @kind wide;
  #L126144.  v1:= `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` @kind object;
  #L126148.  call temp:= `nanoTime`(v1) @signature `Lkotlinx/coroutines/scheduling/SchedulerTimeSource;.nanoTime:()J` @kind virtual;
  #L12614e.  v1:= temp @kind wide;
  #L126150.  v4:= v0.`kotlinx.coroutines.scheduling.Task.submissionTime` @type ^`long` @kind wide;
  #L126154.  v1:= v1 - v4 @kind long;
  #L126156.  v4:= `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @type ^`long` @kind wide;
  #L12615a.  v6:= lcmp(v1, v4);
  #L12615e.  if v6 >= 0 then goto L126166;
  #L126162.  v4:= v4 - v1 @kind long;
  #L126164.  return v4 @kind wide;
  #L126166.  v1:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L12616a.  v2:= 0I;
  #L12616c.  call temp:= `a`(v1, v8, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L126172.  v1:= temp;
  #L126174.  if v1 == 0 then goto L126110;
  #L126178.  v8:= 2I;
  #L12617a.  call temp:= `add$default`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L126180.  v8:= -1L;
  #L126184.  return v8 @kind wide;
}
procedure `kotlinx.coroutines.scheduling.Task` `add`(`kotlinx.coroutines.scheduling.WorkQueue` v0 @kind this, `kotlinx.coroutines.scheduling.Task` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L125f00.  if v2 == 0 then goto L125f0e;
  #L125f04.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L125f0a.  v1:= temp @kind object;
  #L125f0c.  return v1 @kind object;
  #L125f0e.  v2:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L125f12.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L125f18.  v1:= temp @kind object;
  #L125f1a.  v1:= (`kotlinx.coroutines.scheduling.Task`) v1 @kind object;
  #L125f1e.  if v1 != 0 then goto L125f26;
  #L125f22.  v1:= 0I;
  #L125f24.  return v1 @kind object;
  #L125f26.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.a:(Lkotlinx/coroutines/scheduling/Task;)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L125f2c.  v1:= temp @kind object;
  #L125f2e.  return v1 @kind object;
}
procedure `int` `getBufferSize$kotlinx_coroutines_core`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L125e90.  v0:= v2.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L125e94.  v1:= v2.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L125e98.  v0:= v0 - v1 @kind int;
  #L125e9a.  return v0;
}
procedure `int` `getSize$kotlinx_coroutines_core`(`kotlinx.coroutines.scheduling.WorkQueue` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getSize$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L125eac.  v0:= v1.`kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L125eb0.  if v0 == 0 then goto L125ec2;
  #L125eb4.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L125eba.  v0:= temp;
  #L125ebc.  v0:= v0 + 1;
  #L125ec0.  goto L125eca;
  #L125ec2.  call temp:= `getBufferSize$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getBufferSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L125ec8.  v0:= temp;
  #L125eca.  return v0;
}
procedure `void` `offloadAllWorkTo`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this, `kotlinx.coroutines.scheduling.GlobalQueue` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.offloadAllWorkTo:(Lkotlinx/coroutines/scheduling/GlobalQueue;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L126270.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L126274.  v1:= 0I;
  #L126276.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12627c.  v0:= temp @kind object;
  #L12627e.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L126282.  if v0 != 0 then goto L126288;
  #L126286.  goto L12628e;
  #L126288.  call temp:= `addLast`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L12628e.  call temp:= `d`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.d:(Lkotlinx/coroutines/scheduling/GlobalQueue;)Z` @kind direct;
  #L126294.  v0:= temp;
  #L126296.  if v0 == 0 then goto L12629c;
  #L12629a.  goto L12628e;
  #L12629c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `poll`(`kotlinx.coroutines.scheduling.WorkQueue` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.poll:()Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L125fbc.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L125fc0.  v1:= 0I;
  #L125fc2.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L125fc8.  v0:= temp @kind object;
  #L125fca.  v0:= (`kotlinx.coroutines.scheduling.Task`) v0 @kind object;
  #L125fce.  if v0 != 0 then goto L125fda;
  #L125fd2.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L125fd8.  v0:= temp @kind object;
  #L125fda.  return v0 @kind object;
}
procedure `long` `tryStealBlockingFrom`(`kotlinx.coroutines.scheduling.WorkQueue` v8 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.tryStealBlockingFrom:(Lkotlinx/coroutines/scheduling/WorkQueue;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L126048.  v0:= v9.`kotlinx.coroutines.scheduling.WorkQueue.consumerIndex` @type ^`int`;
  #L12604c.  v1:= v9.`kotlinx.coroutines.scheduling.WorkQueue.producerIndex` @type ^`int`;
  #L126050.  v2:= v9.`kotlinx.coroutines.scheduling.WorkQueue.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L126054.  v3:= 1I;
  #L126056.  if v0 == v1 then goto L1260be;
  #L12605a.  v4:= v0 ^& 127;
  #L12605e.  v5:= v9.`kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer` @type ^`int`;
  #L126062.  if v5 != 0 then goto L126068;
  #L126066.  goto L1260be;
  #L126068.  call temp:= `get`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L12606e.  v5:= temp @kind object;
  #L126070.  v5:= (`kotlinx.coroutines.scheduling.Task`) v5 @kind object;
  #L126074.  if v5 == 0 then goto L1260b8;
  #L126078.  v6:= v5.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L12607c.  call temp:= `getTaskMode`(v6) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L126082.  v6:= temp;
  #L126084.  v7:= 0I;
  #L126086.  if v6 != v3 then goto L12608c;
  #L12608a.  goto L12608e;
  #L12608c.  v3:= 0I;
  #L12608e.  if v3 == 0 then goto L1260b8;
  #L126092.  v3:= 0I;
  #L126094.  call temp:= `compareAndSet`(v2, v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L12609a.  v4:= temp;
  #L12609c.  if v4 == 0 then goto L1260b8;
  #L1260a0.  v0:= `@@kotlinx.coroutines.scheduling.WorkQueue.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1260a4.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1260aa.  v9:= 2I;
  #L1260ac.  call temp:= `add$default`(v8, v5, v7, v9, v3) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L1260b2.  v0:= -1L;
  #L1260b6.  return v0 @kind wide;
  #L1260b8.  v0:= v0 + 1;
  #L1260bc.  goto L126054;
  #L1260be.  call temp:= `e`(v8, v9, v3) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @kind direct;
  #L1260c4.  v0:= temp @kind wide;
  #L1260c6.  return v0 @kind wide;
}
procedure `long` `tryStealFrom`(`kotlinx.coroutines.scheduling.WorkQueue` v3 @kind this, `kotlinx.coroutines.scheduling.WorkQueue` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.tryStealFrom:(Lkotlinx/coroutines/scheduling/WorkQueue;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1260d8.  call temp:= `c`(v4) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.c:()Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L1260de.  v0:= temp @kind object;
  #L1260e0.  v1:= 0I;
  #L1260e2.  if v0 == 0 then goto L1260f6;
  #L1260e6.  v4:= 2I;
  #L1260e8.  v2:= 0I;
  #L1260ea.  call temp:= `add$default`(v3, v0, v1, v4, v2) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add$default:(Lkotlinx/coroutines/scheduling/WorkQueue;Lkotlinx/coroutines/scheduling/Task;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/Task;` @kind static;
  #L1260f0.  v0:= -1L;
  #L1260f4.  return v0 @kind wide;
  #L1260f6.  call temp:= `e`(v3, v4, v1) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.e:(Lkotlinx/coroutines/scheduling/WorkQueue;Z)J` @kind direct;
  #L1260fc.  v0:= temp @kind wide;
  #L1260fe.  return v0 @kind wide;
}
