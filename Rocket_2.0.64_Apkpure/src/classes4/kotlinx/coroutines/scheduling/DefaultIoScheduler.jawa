record `kotlinx.coroutines.scheduling.DefaultIoScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.ExecutorCoroutineDispatcher` @kind class, `java.util.concurrent.Executor` @kind interface {
}
global `kotlinx.coroutines.scheduling.DefaultIoScheduler` `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.CoroutineDispatcher` `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L125118.  v0:= new `kotlinx.coroutines.scheduling.DefaultIoScheduler`;
  #L12511c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.<init>:()V` @kind direct;
  #L125122.  `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.INSTANCE` @type ^`kotlinx.coroutines.scheduling.DefaultIoScheduler` := v0 @kind object;
  #L125126.  v0:= `@@kotlinx.coroutines.scheduling.c.a` @type ^`kotlinx.coroutines.scheduling.c` @kind object;
  #L12512a.  call temp:= `getAVAILABLE_PROCESSORS`() @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.getAVAILABLE_PROCESSORS:()I` @kind static;
  #L125130.  v1:= temp;
  #L125132.  v2:= 64I;
  #L125136.  call temp:= `coerceAtLeast`(v2, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L12513c.  v4:= temp;
  #L12513e.  v3:= "kotlinx.coroutines.io.parallelism" @kind object;
  #L125142.  v5:= 0I;
  #L125144.  v6:= 0I;
  #L125146.  v7:= 12I;
  #L12514a.  v8:= 0I;
  #L12514c.  call temp:= `systemProp$default`(v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L125152.  v1:= temp;
  #L125154.  call temp:= `limitedParallelism`(v0, v1) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.limitedParallelism:(I)Lkotlinx/coroutines/CoroutineDispatcher;` @kind virtual;
  #L12515a.  v0:= temp @kind object;
  #L12515c.  `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.a` @type ^`kotlinx.coroutines.CoroutineDispatcher` := v0 @kind object;
  #L125160.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L125174.  call `<init>`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.<init>:()V` @kind direct;
  #L12517a.  return @kind void;
}
procedure `void` `close`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12518c.  v0:= new `java.lang.IllegalStateException`;
  #L125190.  v1:= "Cannot be invoked on Dispatchers.IO" @kind object;
  #L125194.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12519a.  v1:= temp @kind object;
  #L12519c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1251a2.  throw v0;
}
procedure `void` `dispatch`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Runnable` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.dispatch:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1251b4.  v0:= `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.a` @type ^`kotlinx.coroutines.CoroutineDispatcher` @kind object;
  #L1251b8.  call `dispatch`(v0, v2, v3) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.dispatch:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @kind virtual;
  #L1251be.  return @kind void;
}
procedure `void` `dispatchYield`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Runnable` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.dispatchYield:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1251d0.  v0:= `@@kotlinx.coroutines.scheduling.DefaultIoScheduler.a` @type ^`kotlinx.coroutines.CoroutineDispatcher` @kind object;
  #L1251d4.  call `dispatchYield`(v0, v2, v3) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.dispatchYield:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @kind virtual;
  #L1251da.  return @kind void;
}
procedure `void` `execute`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1251ec.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L1251f0.  call `dispatch`(v1, v0, v2) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.dispatch:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @kind virtual;
  #L1251f6.  return @kind void;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;

  #L1250e4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.CoroutineDispatcher` `limitedParallelism`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.limitedParallelism:(I)Lkotlinx/coroutines/CoroutineDispatcher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1250f8.  v0:= `@@kotlinx.coroutines.scheduling.c.a` @type ^`kotlinx.coroutines.scheduling.c` @kind object;
  #L1250fc.  call temp:= `limitedParallelism`(v0, v2) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.limitedParallelism:(I)Lkotlinx/coroutines/CoroutineDispatcher;` @kind virtual;
  #L125102.  v2:= temp @kind object;
  #L125104.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.scheduling.DefaultIoScheduler` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/DefaultIoScheduler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1250cc.  v0:= "Dispatchers.IO" @kind object;
  #L1250d0.  return v0 @kind object;
}
