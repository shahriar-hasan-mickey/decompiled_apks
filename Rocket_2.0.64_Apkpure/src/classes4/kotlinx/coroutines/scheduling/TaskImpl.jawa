record `kotlinx.coroutines.scheduling.TaskImpl` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.scheduling.Task` @kind class {
  `java.lang.Runnable` `kotlinx.coroutines.scheduling.TaskImpl.block` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.TaskImpl` v0 @kind this, `java.lang.Runnable` v1 @kind object, `long` v2 , `kotlinx.coroutines.scheduling.TaskContext` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/TaskImpl;.<init>:(Ljava/lang/Runnable;JLkotlinx/coroutines/scheduling/TaskContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L125c24.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/scheduling/Task;.<init>:(JLkotlinx/coroutines/scheduling/TaskContext;)V` @kind direct;
  #L125c2a.  v0.`kotlinx.coroutines.scheduling.TaskImpl.block` @type ^`java.lang.Runnable` := v1 @kind object;
  #L125c2e.  return @kind void;
}
procedure `void` `run`(`kotlinx.coroutines.scheduling.TaskImpl` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/TaskImpl;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L125c40.  v0:= v2.`kotlinx.coroutines.scheduling.TaskImpl.block` @type ^`java.lang.Runnable` @kind object;
  #L125c44.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L125c4a.  v0:= v2.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L125c4e.  call `afterTask`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.afterTask:()V` @kind interface;
  #L125c54.  return @kind void;
  #L125c56.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L125c58.  v1:= v2.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L125c5c.  call `afterTask`(v1) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.afterTask:()V` @kind interface;
  #L125c62.  throw v0;
  catch `java.lang.Throwable` @[L125c40..L125c4a] goto L125c56;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.scheduling.TaskImpl` v4 @kind this) @signature `Lkotlinx/coroutines/scheduling/TaskImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L125b98.  v0:= new `java.lang.StringBuilder`;
  #L125b9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L125ba2.  v1:= "Task[" @kind object;
  #L125ba6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bac.  v1:= v4.`kotlinx.coroutines.scheduling.TaskImpl.block` @type ^`java.lang.Runnable` @kind object;
  #L125bb0.  call temp:= `getClassSimpleName`(v1) @signature `Lkotlinx/coroutines/DebugStringsKt;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L125bb6.  v1:= temp @kind object;
  #L125bb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bbe.  v1:= 64I;
  #L125bc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bc8.  v1:= v4.`kotlinx.coroutines.scheduling.TaskImpl.block` @type ^`java.lang.Runnable` @kind object;
  #L125bcc.  call temp:= `getHexAddress`(v1) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L125bd2.  v1:= temp @kind object;
  #L125bd4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bda.  v1:= ", " @kind object;
  #L125bde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125be4.  v2:= v4.`kotlinx.coroutines.scheduling.Task.submissionTime` @type ^`long` @kind wide;
  #L125be8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bf4.  v1:= v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L125bf8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L125bfe.  v1:= 93I;
  #L125c02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L125c08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L125c0e.  v0:= temp @kind object;
  #L125c10.  return v0 @kind object;
}
