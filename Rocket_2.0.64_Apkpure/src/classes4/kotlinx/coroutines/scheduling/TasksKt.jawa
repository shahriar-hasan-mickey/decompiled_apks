record `kotlinx.coroutines.scheduling.TasksKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `kotlinx.coroutines.scheduling.TaskContext` `@@kotlinx.coroutines.scheduling.TasksKt.BlockingContext` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.scheduling.TasksKt.DEFAULT_SCHEDULER_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.scheduling.TaskContext` `@@kotlinx.coroutines.scheduling.TasksKt.NonBlockingContext` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.TASK_NON_BLOCKING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.TasksKt.TASK_PROBABLY_BLOCKING` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.scheduling.SchedulerTimeSource` `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/TasksKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L125cc8.  v0:= "kotlinx.coroutines.scheduler.resolution.ns" @kind object;
  #L125ccc.  v1:= 100000L;
  #L125cd2.  v3:= 0L;
  #L125cd6.  v5:= 0L;
  #L125cda.  v7:= 12I;
  #L125cde.  v8:= 0I;
  #L125ce0.  call temp:= `systemProp$default`(v0, v1, v3, v5, v7, v8) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;JJJILjava/lang/Object;)J` @kind static;
  #L125ce6.  v0:= temp @kind wide;
  #L125ce8.  `@@kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS` @type ^`long` := v0 @kind wide;
  #L125cec.  call temp:= `getAVAILABLE_PROCESSORS`() @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.getAVAILABLE_PROCESSORS:()I` @kind static;
  #L125cf2.  v0:= temp;
  #L125cf4.  v1:= 2I;
  #L125cf6.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L125cfc.  v3:= temp;
  #L125cfe.  v2:= "kotlinx.coroutines.scheduler.core.pool.size" @kind object;
  #L125d02.  v4:= 1I;
  #L125d04.  v5:= 0I;
  #L125d06.  v6:= 8I;
  #L125d0a.  v7:= 0I;
  #L125d0c.  call temp:= `systemProp$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L125d12.  v0:= temp;
  #L125d14.  `@@kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE` @type ^`int` := v0;
  #L125d18.  v1:= "kotlinx.coroutines.scheduler.max.pool.size" @kind object;
  #L125d1c.  v2:= 2097150I;
  #L125d22.  v3:= 0I;
  #L125d24.  v4:= 2097150I;
  #L125d2a.  v5:= 4I;
  #L125d2c.  v6:= 0I;
  #L125d2e.  call temp:= `systemProp$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L125d34.  v0:= temp;
  #L125d36.  `@@kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE` @type ^`int` := v0;
  #L125d3a.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L125d3e.  v1:= "kotlinx.coroutines.scheduler.keep.alive.sec" @kind object;
  #L125d42.  v2:= 60L;
  #L125d46.  v4:= 0L;
  #L125d4a.  v6:= 0L;
  #L125d4e.  v8:= 12I;
  #L125d52.  v9:= 0I;
  #L125d54.  call temp:= `systemProp$default`(v1, v2, v4, v6, v8, v9) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;JJJILjava/lang/Object;)J` @kind static;
  #L125d5a.  v1:= temp @kind wide;
  #L125d5c.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L125d62.  v0:= temp @kind wide;
  #L125d64.  `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @type ^`long` := v0 @kind wide;
  #L125d68.  v0:= `@@kotlinx.coroutines.scheduling.NanoTimeSource.INSTANCE` @type ^`kotlinx.coroutines.scheduling.NanoTimeSource` @kind object;
  #L125d6c.  `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` := v0 @kind object;
  #L125d70.  v0:= new `kotlinx.coroutines.scheduling.b`;
  #L125d74.  v1:= 0I;
  #L125d76.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/b;.<init>:(I)V` @kind direct;
  #L125d7c.  `@@kotlinx.coroutines.scheduling.TasksKt.NonBlockingContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` := v0 @kind object;
  #L125d80.  v0:= new `kotlinx.coroutines.scheduling.b`;
  #L125d84.  v1:= 1I;
  #L125d86.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/b;.<init>:(I)V` @kind direct;
  #L125d8c.  `@@kotlinx.coroutines.scheduling.TasksKt.BlockingContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` := v0 @kind object;
  #L125d90.  return @kind void;
}
procedure `boolean` `isBlocking`(`kotlinx.coroutines.scheduling.Task` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/TasksKt;.isBlocking:(Lkotlinx/coroutines/scheduling/Task;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L125ca0.  v1:= v1.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L125ca4.  call temp:= `getTaskMode`(v1) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L125caa.  v1:= temp;
  #L125cac.  v0:= 1I;
  #L125cae.  if v1 != v0 then goto L125cb4;
  #L125cb2.  goto L125cb6;
  #L125cb4.  v0:= 0I;
  #L125cb6.  return v0;
}
