record `kotlinx.coroutines.scheduling.CoroutineScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.Executor` @kind interface, `java.io.Closeable` @kind interface {
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @AccessFlag VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.GlobalQueue` `kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.GlobalQueue` `kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.String` `kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.ResizableAtomicArray` `kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @AccessFlag PUBLIC_FINAL;
}
global `kotlinx.coroutines.scheduling.CoroutineScheduler$Companion` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.MAX_SUPPORTED_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.MIN_SUPPORTED_POOL_SIZE` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L124acc.  v0:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$Companion`;
  #L124ad0.  v1:= 0I;
  #L124ad2.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L124ad8.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.Companion` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Companion` := v0 @kind object;
  #L124adc.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L124ae0.  v1:= "NOT_IN_STACK" @kind object;
  #L124ae4.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124aea.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L124aee.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L124af2.  v1:= "parkedWorkersStack" @kind object;
  #L124af6.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L124afc.  v0:= temp @kind object;
  #L124afe.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L124b02.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L124b06.  v1:= "controlState" @kind object;
  #L124b0a.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L124b10.  v0:= temp @kind object;
  #L124b12.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L124b16.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L124b1a.  v1:= "_isTerminated" @kind object;
  #L124b1e.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L124b24.  v0:= temp @kind object;
  #L124b26.  `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L124b2a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this, `int` v4 , `int` v5 , `long` v6 , `java.lang.String` v8 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L124b3c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L124b42.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int` := v4;
  #L124b46.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int` := v5;
  #L124b4a.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs` @type ^`long` := v6 @kind wide;
  #L124b4e.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` := v8 @kind object;
  #L124b52.  v8:= 0I;
  #L124b54.  v0:= 1I;
  #L124b56.  if v4 < v0 then goto L124b5e;
  #L124b5a.  v1:= 1I;
  #L124b5c.  goto L124b60;
  #L124b5e.  v1:= 0I;
  #L124b60.  if v1 == 0 then goto L124ca0;
  #L124b64.  if v5 < v4 then goto L124b6c;
  #L124b68.  v1:= 1I;
  #L124b6a.  goto L124b6e;
  #L124b6c.  v1:= 0I;
  #L124b6e.  v2:= "Max pool size " @kind object;
  #L124b72.  if v1 == 0 then goto L124c5e;
  #L124b76.  v1:= 2097150I;
  #L124b7c.  if v5 > v1 then goto L124b84;
  #L124b80.  v1:= 1I;
  #L124b82.  goto L124b86;
  #L124b84.  v1:= 0I;
  #L124b86.  if v1 == 0 then goto L124c22;
  #L124b8a.  v1:= 0L;
  #L124b8e.  v5:= lcmp(v6, v1);
  #L124b92.  if v5 <= 0 then goto L124b98;
  #L124b96.  goto L124b9a;
  #L124b98.  v0:= 0I;
  #L124b9a.  if v0 == 0 then goto L124be2;
  #L124b9e.  v5:= new `kotlinx.coroutines.scheduling.GlobalQueue`;
  #L124ba2.  call `<init>`(v5) @signature `Lkotlinx/coroutines/scheduling/GlobalQueue;.<init>:()V` @kind direct;
  #L124ba8.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` := v5 @kind object;
  #L124bac.  v5:= new `kotlinx.coroutines.scheduling.GlobalQueue`;
  #L124bb0.  call `<init>`(v5) @signature `Lkotlinx/coroutines/scheduling/GlobalQueue;.<init>:()V` @kind direct;
  #L124bb6.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` := v5 @kind object;
  #L124bba.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` := v1 @kind wide;
  #L124bbe.  v5:= new `kotlinx.coroutines.internal.ResizableAtomicArray`;
  #L124bc2.  v6:= v4 + 1;
  #L124bc6.  call `<init>`(v5, v6) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.<init>:(I)V` @kind direct;
  #L124bcc.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` := v5 @kind object;
  #L124bd0.  v4:= (`long`) v4 @kind i2l;
  #L124bd2.  v6:= 42I;
  #L124bd6.  v4:= v4 ^< v6 @kind long;
  #L124bd8.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` := v4 @kind wide;
  #L124bdc.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @type ^`int` := v8;
  #L124be0.  return @kind void;
  #L124be2.  v4:= new `java.lang.StringBuilder`;
  #L124be6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124bec.  v5:= "Idle worker keep alive time " @kind object;
  #L124bf0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124bf6.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L124bfc.  v5:= " must be positive" @kind object;
  #L124c00.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c06.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c0c.  v4:= temp @kind object;
  #L124c0e.  v5:= new `java.lang.IllegalArgumentException`;
  #L124c12.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c18.  v4:= temp @kind object;
  #L124c1a.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124c20.  throw v5;
  #L124c22.  v4:= new `java.lang.StringBuilder`;
  #L124c26.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124c2c.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c32.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c38.  v5:= " should not exceed maximal supported number of threads 2097150" @kind object;
  #L124c3c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c42.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c48.  v4:= temp @kind object;
  #L124c4a.  v5:= new `java.lang.IllegalArgumentException`;
  #L124c4e.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c54.  v4:= temp @kind object;
  #L124c56.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124c5c.  throw v5;
  #L124c5e.  v6:= new `java.lang.StringBuilder`;
  #L124c62.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124c68.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c6e.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c74.  v5:= " should be greater than or equals to core pool size " @kind object;
  #L124c78.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c7e.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124c84.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c8a.  v4:= temp @kind object;
  #L124c8c.  v5:= new `java.lang.IllegalArgumentException`;
  #L124c90.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L124c96.  v4:= temp @kind object;
  #L124c98.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124c9e.  throw v5;
  #L124ca0.  v5:= new `java.lang.StringBuilder`;
  #L124ca4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124caa.  v6:= "Core pool size " @kind object;
  #L124cae.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124cb4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124cba.  v4:= " should be at least 1" @kind object;
  #L124cbe.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124cc4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L124cca.  v4:= temp @kind object;
  #L124ccc.  v5:= new `java.lang.IllegalArgumentException`;
  #L124cd0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L124cd6.  v4:= temp @kind object;
  #L124cd8.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124cde.  throw v5;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v6 @kind this, `int` v7 , `int` v8 , `long` v9 , `java.lang.String` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L124cf0.  v13:= v12 ^& 4;
  #L124cf4.  if v13 == 0 then goto L124cfc;
  #L124cf8.  v9:= `@@kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS` @type ^`long` @kind wide;
  #L124cfc.  v3:= v9 @kind wide;
  #L124cfe.  v9:= v12 ^& 8;
  #L124d02.  if v9 == 0 then goto L124d0a;
  #L124d06.  v11:= "DefaultDispatcher" @kind object;
  #L124d0a.  v5:= v11 @kind object;
  #L124d0c.  v0:= v6 @kind object;
  #L124d0e.  v1:= v7;
  #L124d10.  v2:= v8;
  #L124d12.  call `<init>`(v0, v1, v2, v3, v5) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.<init>:(IIJLjava/lang/String;)V` @kind direct;
  #L124d18.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.a:(Lkotlinx/coroutines/scheduling/Task;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L12438c.  v0:= v3.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L124390.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L124396.  v0:= temp;
  #L124398.  v1:= 1I;
  #L12439a.  if v0 != v1 then goto L1243a0;
  #L12439e.  goto L1243a2;
  #L1243a0.  v1:= 0I;
  #L1243a2.  if v1 == 0 then goto L1243b4;
  #L1243a6.  v0:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L1243aa.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1243b0.  v3:= temp;
  #L1243b2.  goto L1243c0;
  #L1243b4.  v0:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L1243b8.  call temp:= `addLast`(v0, v3) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.addLast:(Ljava/lang/Object;)Z` @kind virtual;
  #L1243be.  v3:= temp;
  #L1243c0.  return v3;
}
procedure `int` `b`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v10 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L124558.  v0:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L12455c.  @monitorenter v0
  #L12455e.  call temp:= `isTerminated`(v10) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @kind virtual;
  #L124564.  v1:= temp;
  #L124566.  if v1 == 0 then goto L124570;
  #L12456a.  v1:= -1I;
  #L12456c.  @monitorexit v0
  #L12456e.  return v1;
  #L124570.  v1:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L124574.  v3:= 2097151L;
  #L12457a.  v5:= v1 ^& v3 @kind long;
  #L12457e.  v6:= (`int`) v5 @kind l2i;
  #L124580.  v7:= 4398044413952L;
  #L12458a.  v1:= v1 ^& v7 @kind long;
  #L12458c.  v5:= 21I;
  #L124590.  v1:= v1 ^> v5 @kind long;
  #L124592.  v2:= (`int`) v1 @kind l2i;
  #L124594.  v1:= v6 - v2 @kind int;
  #L124598.  v2:= 0I;
  #L12459a.  call temp:= `coerceAtLeast`(v1, v2) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L1245a0.  v1:= temp;
  #L1245a2.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L1245a6.  if v1 < v5 then goto L1245ae;
  #L1245aa.  @monitorexit v0
  #L1245ac.  return v2;
  #L1245ae.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L1245b2.  if v6 < v5 then goto L1245ba;
  #L1245b6.  @monitorexit v0
  #L1245b8.  return v2;
  #L1245ba.  v5:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L1245be.  v5:= v5 ^& v3 @kind long;
  #L1245c0.  v6:= (`int`) v5 @kind l2i;
  #L1245c2.  v5:= 1I;
  #L1245c4.  v6:= v6 + v5 @kind int;
  #L1245c6.  if v6 <= 0 then goto L1245de;
  #L1245ca.  v7:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L1245ce.  call temp:= `get`(v7, v6) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1245d4.  v7:= temp @kind object;
  #L1245d6.  if v7 != 0 then goto L1245de;
  #L1245da.  v7:= 1I;
  #L1245dc.  goto L1245e0;
  #L1245de.  v7:= 0I;
  #L1245e0.  if v7 == 0 then goto L124636;
  #L1245e4.  v7:= new `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`;
  #L1245e8.  call `<init>`(v7, v10, v6) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.<init>:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;I)V` @kind direct;
  #L1245ee.  v8:= v10.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L1245f2.  call `setSynchronized`(v8, v6, v7) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.setSynchronized:(ILjava/lang/Object;)V` @kind virtual;
  #L1245f8.  v8:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1245fc.  call temp:= `incrementAndGet`(v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)J` @kind virtual;
  #L124602.  v8:= temp @kind wide;
  #L124604.  v3:= v3 ^& v8 @kind long;
  #L124606.  v4:= (`int`) v3 @kind l2i;
  #L124608.  if v6 != v4 then goto L12460e;
  #L12460c.  v2:= 1I;
  #L12460e.  if v2 == 0 then goto L12461e;
  #L124612.  call `start`(v7) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L124618.  v1:= v1 + v5 @kind int;
  #L12461a.  @monitorexit v0
  #L12461c.  return v1;
  #L12461e.  v1:= "Failed requirement." @kind object;
  #L124622.  v2:= new `java.lang.IllegalArgumentException`;
  #L124626.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12462c.  v1:= temp @kind object;
  #L12462e.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124634.  throw v2;
  #L124636.  v1:= "Failed requirement." @kind object;
  #L12463a.  v2:= new `java.lang.IllegalArgumentException`;
  #L12463e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L124644.  v1:= temp @kind object;
  #L124646.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12464c.  throw v2;
  #L12464e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L124650.  @monitorexit v0
  #L124652.  throw v1;
  catch `java.lang.Throwable` @[L12455e..L124566] goto L12464e;
  catch `java.lang.Throwable` @[L124570..L1245a6] goto L12464e;
  catch `java.lang.Throwable` @[L1245ae..L1245b2] goto L12464e;
  catch `java.lang.Throwable` @[L1245ba..L124618] goto L12464e;
  catch `java.lang.Throwable` @[L12461e..L12464e] goto L12464e;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` `c`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L124970.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L124976.  v0:= temp @kind object;
  #L124978.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` @kind boolean;
  #L12497c.  v2:= 0I;
  #L12497e.  if v1 == 0 then goto L124988;
  #L124982.  v0:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v0 @kind object;
  #L124986.  goto L12498a;
  #L124988.  v0:= v2 @kind object;
  #L12498a.  if v0 != 0 then goto L124990;
  #L12498e.  goto L1249a6;
  #L124990.  call temp:= `access$getThis$0$p`(v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.access$getThis$0$p:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)Lkotlinx/coroutines/scheduling/CoroutineScheduler;` @kind static;
  #L124996.  v1:= temp @kind object;
  #L124998.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L12499e.  v1:= temp;
  #L1249a0.  if v1 == 0 then goto L1249a6;
  #L1249a4.  v2:= v0 @kind object;
  #L1249a6.  return v2 @kind object;
}
procedure `int` `d`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L124690.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L124696.  v2:= temp @kind object;
  #L124698.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L12469c.  if v2 != v0 then goto L1246a4;
  #L1246a0.  v2:= -1I;
  #L1246a2.  return v2;
  #L1246a4.  if v2 != 0 then goto L1246ac;
  #L1246a8.  v2:= 0I;
  #L1246aa.  return v2;
  #L1246ac.  v2:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v2 @kind object;
  #L1246b0.  call temp:= `getIndexInArray`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getIndexInArray:()I` @kind virtual;
  #L1246b6.  v0:= temp;
  #L1246b8.  if v0 == 0 then goto L1246be;
  #L1246bc.  return v0;
  #L1246be.  call temp:= `getNextParkedWorker`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L1246c4.  v2:= temp @kind object;
  #L1246c6.  goto L124698;
}
procedure `void` `dispatch$default`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v0 @kind object, `java.lang.Runnable` v1 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v2 @kind object, `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch$default:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L124d48.  v5:= v4 ^& 2;
  #L124d4c.  if v5 == 0 then goto L124d54;
  #L124d50.  v2:= `@@kotlinx.coroutines.scheduling.TasksKt.NonBlockingContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L124d54.  v4:= v4 ^& 4;
  #L124d58.  if v4 == 0 then goto L124d5e;
  #L124d5c.  v3:= 0I;
  #L124d5e.  call `dispatch`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;Z)V` @kind virtual;
  #L124d64.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` `e`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v9 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.e:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1249b8.  v2:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L1249bc.  v0:= 2097151L;
  #L1249c2.  v0:= v0 ^& v2 @kind long;
  #L1249c4.  v1:= (`int`) v0 @kind l2i;
  #L1249c6.  v0:= v9.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L1249ca.  call temp:= `get`(v0, v1) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L1249d0.  v0:= temp @kind object;
  #L1249d2.  v6:= v0 @kind object;
  #L1249d4.  v6:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v6 @kind object;
  #L1249d8.  if v6 != 0 then goto L1249e0;
  #L1249dc.  v0:= 0I;
  #L1249de.  return v0 @kind object;
  #L1249e0.  v0:= 2097152L;
  #L1249e6.  v0:= v0 + v2 @kind long;
  #L1249e8.  v4:= -2097152L;
  #L1249ee.  v0:= v0 ^& v4 @kind long;
  #L1249f0.  call temp:= `d`(v9, v6) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @kind direct;
  #L1249f6.  v4:= temp;
  #L1249f8.  if v4 >= 0 then goto L1249fe;
  #L1249fc.  goto L1249b8;
  #L1249fe.  v5:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L124a02.  v7:= (`long`) v4 @kind i2l;
  #L124a04.  v7:= v7 ^| v0 @kind long;
  #L124a06.  v0:= v5 @kind object;
  #L124a08.  v1:= v9 @kind object;
  #L124a0a.  v4:= v7 @kind wide;
  #L124a0c.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L124a12.  v0:= temp;
  #L124a14.  if v0 == 0 then goto L1249b8;
  #L124a18.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L124a1c.  call `setNextParkedWorker`(v6, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L124a22.  return v6 @kind object;
}
procedure `void` `f`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this, `boolean` v4 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.f:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L125044.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.b` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L125048.  v1:= 2097152L;
  #L12504e.  call temp:= `addAndGet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L125054.  v0:= temp @kind wide;
  #L125056.  if v4 == 0 then goto L12505c;
  #L12505a.  return @kind void;
  #L12505c.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L125062.  v4:= temp;
  #L125064.  if v4 == 0 then goto L12506a;
  #L125068.  return @kind void;
  #L12506a.  call temp:= `h`(v3, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @kind direct;
  #L125070.  v4:= temp;
  #L125072.  if v4 == 0 then goto L125078;
  #L125076.  return @kind void;
  #L125078.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L12507e.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `g`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v3 @kind object, `kotlinx.coroutines.scheduling.Task` v4 @kind object, `boolean` v5 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.g:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L124a74.  if v3 != 0 then goto L124a7a;
  #L124a78.  return v4 @kind object;
  #L124a7a.  v0:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L124a7e.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L124a82.  if v0 != v1 then goto L124a88;
  #L124a86.  return v4 @kind object;
  #L124a88.  v0:= v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L124a8c.  call temp:= `getTaskMode`(v0) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L124a92.  v0:= temp;
  #L124a94.  if v0 != 0 then goto L124aa6;
  #L124a98.  v0:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L124a9c.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L124aa0.  if v0 != v1 then goto L124aa6;
  #L124aa4.  return v4 @kind object;
  #L124aa6.  v0:= 1I;
  #L124aa8.  v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.mayHaveLocalTasks` @type ^`boolean` := v0 @kind boolean;
  #L124aac.  v3:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L124ab0.  call temp:= `add`(v3, v4, v5) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.add:(Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L124ab6.  v3:= temp @kind object;
  #L124ab8.  return v3 @kind object;
}
procedure `boolean` `h`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this, `long` v5 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L12448c.  v0:= 2097151L;
  #L124492.  v0:= v0 ^& v5 @kind long;
  #L124494.  v1:= (`int`) v0 @kind l2i;
  #L124496.  v2:= 4398044413952L;
  #L1244a0.  v5:= v5 ^& v2 @kind long;
  #L1244a2.  v0:= 21I;
  #L1244a6.  v5:= v5 ^> v0 @kind long;
  #L1244a8.  v6:= (`int`) v5 @kind l2i;
  #L1244aa.  v1:= v1 - v6 @kind int;
  #L1244ac.  v5:= 0I;
  #L1244ae.  call temp:= `coerceAtLeast`(v1, v5) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L1244b4.  v6:= temp;
  #L1244b6.  v0:= v4.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L1244ba.  if v6 >= v0 then goto L1244e0;
  #L1244be.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @kind direct;
  #L1244c4.  v6:= temp;
  #L1244c6.  v0:= 1I;
  #L1244c8.  if v6 != v0 then goto L1244da;
  #L1244cc.  v1:= v4.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L1244d0.  if v1 <= v0 then goto L1244da;
  #L1244d4.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.b:()I` @kind direct;
  #L1244da.  if v6 <= 0 then goto L1244e0;
  #L1244de.  return v0;
  #L1244e0.  return v5;
}
procedure `boolean` `i`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v0 @kind object, `long` v1 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.i:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;JILjava/lang/Object;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L124464.  v3:= v3 ^& 1;
  #L124468.  if v3 == 0 then goto L124470;
  #L12446c.  v1:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L124470.  call temp:= `h`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.h:(J)Z` @kind direct;
  #L124476.  v0:= temp;
  #L124478.  return v0;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1244f4.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.e:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L1244fa.  v0:= temp @kind object;
  #L1244fc.  v1:= 0I;
  #L1244fe.  if v0 != 0 then goto L124504;
  #L124502.  return v1;
  #L124504.  v2:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L124508.  v3:= -1I;
  #L12450a.  call temp:= `compareAndSet`(v2, v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L124510.  v1:= temp;
  #L124512.  if v1 == 0 then goto L1244f4;
  #L124516.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L12451c.  v0:= 1I;
  #L12451e.  return v0;
}
procedure `int` `availableCpuPermits`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `long` v3 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.availableCpuPermits:(J)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L124530.  v0:= 9223367638808264704L;
  #L12453a.  v3:= v3 ^& v0 @kind long;
  #L12453c.  v0:= 42I;
  #L124540.  v3:= v3 ^> v0 @kind long;
  #L124542.  v4:= (`int`) v3 @kind l2i;
  #L124544.  return v4;
}
procedure `void` `close`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L124d2c.  v0:= 10000L;
  #L124d30.  call `shutdown`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.shutdown:(J)V` @kind virtual;
  #L124d36.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.Task` `createTask`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.createTask:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;)Lkotlinx/coroutines/scheduling/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L124a34.  v0:= `@@kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource` @type ^`kotlinx.coroutines.scheduling.SchedulerTimeSource` @kind object;
  #L124a38.  call temp:= `nanoTime`(v0) @signature `Lkotlinx/coroutines/scheduling/SchedulerTimeSource;.nanoTime:()J` @kind virtual;
  #L124a3e.  v0:= temp @kind wide;
  #L124a40.  v2:= instanceof @variable v4 @type ^`kotlinx.coroutines.scheduling.Task` @kind boolean;
  #L124a44.  if v2 == 0 then goto L124a56;
  #L124a48.  v4:= (`kotlinx.coroutines.scheduling.Task`) v4 @kind object;
  #L124a4c.  v4.`kotlinx.coroutines.scheduling.Task.submissionTime` @type ^`long` := v0 @kind wide;
  #L124a50.  v4.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` := v5 @kind object;
  #L124a54.  return v4 @kind object;
  #L124a56.  v2:= new `kotlinx.coroutines.scheduling.TaskImpl`;
  #L124a5a.  call `<init>`(v2, v4, v0, v5) @signature `Lkotlinx/coroutines/scheduling/TaskImpl;.<init>:(Ljava/lang/Runnable;JLkotlinx/coroutines/scheduling/TaskContext;)V` @kind direct;
  #L124a60.  return v2 @kind object;
}
procedure `void` `dispatch`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `kotlinx.coroutines.scheduling.TaskContext` v3 @kind object, `boolean` v4 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L124d78.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L124d7e.  v0:= temp @kind object;
  #L124d80.  if v0 != 0 then goto L124d86;
  #L124d84.  goto L124d8c;
  #L124d86.  call `trackTask`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.trackTask:()V` @kind virtual;
  #L124d8c.  call temp:= `createTask`(v1, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.createTask:(Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L124d92.  v2:= temp @kind object;
  #L124d94.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L124d9a.  v3:= temp @kind object;
  #L124d9c.  call temp:= `g`(v1, v3, v2, v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.g:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;Lkotlinx/coroutines/scheduling/Task;Z)Lkotlinx/coroutines/scheduling/Task;` @kind direct;
  #L124da2.  v0:= temp @kind object;
  #L124da4.  if v0 == 0 then goto L124dd2;
  #L124da8.  call temp:= `a`(v1, v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.a:(Lkotlinx/coroutines/scheduling/Task;)Z` @kind direct;
  #L124dae.  v0:= temp;
  #L124db0.  if v0 == 0 then goto L124db6;
  #L124db4.  goto L124dd2;
  #L124db6.  v2:= new `java.util.concurrent.RejectedExecutionException`;
  #L124dba.  v3:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` @kind object;
  #L124dbe.  v4:= " was terminated" @kind object;
  #L124dc2.  call temp:= `stringPlus`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L124dc8.  v3:= temp @kind object;
  #L124dca.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L124dd0.  throw v2;
  #L124dd2.  if v4 == 0 then goto L124dde;
  #L124dd6.  if v3 == 0 then goto L124dde;
  #L124dda.  v3:= 1I;
  #L124ddc.  goto L124de0;
  #L124dde.  v3:= 0I;
  #L124de0.  v2:= v2.`kotlinx.coroutines.scheduling.Task.taskContext` @type ^`kotlinx.coroutines.scheduling.TaskContext` @kind object;
  #L124de4.  call temp:= `getTaskMode`(v2) @signature `Lkotlinx/coroutines/scheduling/TaskContext;.getTaskMode:()I` @kind interface;
  #L124dea.  v2:= temp;
  #L124dec.  if v2 != 0 then goto L124dfe;
  #L124df0.  if v3 == 0 then goto L124df6;
  #L124df4.  return @kind void;
  #L124df6.  call `signalCpuWork`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.signalCpuWork:()V` @kind virtual;
  #L124dfc.  goto L124e04;
  #L124dfe.  call `f`(v1, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.f:(Z)V` @kind direct;
  #L124e04.  return @kind void;
}
procedure `void` `execute`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v6 @kind this, `java.lang.Runnable` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L124e18.  v2:= 0I;
  #L124e1a.  v3:= 0I;
  #L124e1c.  v4:= 6I;
  #L124e1e.  v5:= 0I;
  #L124e20.  v0:= v6 @kind object;
  #L124e22.  v1:= v7 @kind object;
  #L124e24.  call `dispatch$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.dispatch$default:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;Ljava/lang/Runnable;Lkotlinx/coroutines/scheduling/TaskContext;ZILjava/lang/Object;)V` @kind static;
  #L124e2a.  return @kind void;
}
procedure `boolean` `isTerminated`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1243d4.  v0:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated` @type ^`int`;
  #L1243d8.  return v0;
}
procedure `boolean` `parkedWorkersStackPush`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v8 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.parkedWorkersStackPush:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1243ec.  call temp:= `getNextParkedWorker`(v9) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getNextParkedWorker:()Ljava/lang/Object;` @kind virtual;
  #L1243f2.  v0:= temp @kind object;
  #L1243f4.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1243f8.  if v0 == v1 then goto L124400;
  #L1243fc.  v9:= 0I;
  #L1243fe.  return v9;
  #L124400.  v2:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L124404.  v0:= 2097151L;
  #L12440a.  v0:= v0 ^& v2 @kind long;
  #L12440c.  v1:= (`int`) v0 @kind l2i;
  #L12440e.  v4:= 2097152L;
  #L124414.  v4:= v4 + v2 @kind long;
  #L124416.  v6:= -2097152L;
  #L12441c.  v4:= v4 ^& v6 @kind long;
  #L12441e.  call temp:= `getIndexInArray`(v9) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.getIndexInArray:()I` @kind virtual;
  #L124424.  v0:= temp;
  #L124426.  v6:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L12442a.  call temp:= `get`(v6, v1) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L124430.  v1:= temp @kind object;
  #L124432.  call `setNextParkedWorker`(v9, v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.setNextParkedWorker:(Ljava/lang/Object;)V` @kind virtual;
  #L124438.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L12443c.  v6:= (`long`) v0 @kind i2l;
  #L12443e.  v4:= v4 ^| v6 @kind long;
  #L124440.  v0:= v1 @kind object;
  #L124442.  v1:= v8 @kind object;
  #L124444.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L12444a.  v0:= temp;
  #L12444c.  if v0 == 0 then goto L124400;
  #L124450.  v9:= 1I;
  #L124452.  return v9;
}
procedure `void` `parkedWorkersStackTopUpdate`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v8 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$Worker` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.parkedWorkersStackTopUpdate:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L124e3c.  v2:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` @kind wide;
  #L124e40.  v0:= 2097151L;
  #L124e46.  v0:= v0 ^& v2 @kind long;
  #L124e48.  v1:= (`int`) v0 @kind l2i;
  #L124e4a.  v4:= 2097152L;
  #L124e50.  v4:= v4 + v2 @kind long;
  #L124e52.  v6:= -2097152L;
  #L124e58.  v4:= v4 ^& v6 @kind long;
  #L124e5a.  if v1 != v10 then goto L124e6e;
  #L124e5e.  if v11 != 0 then goto L124e6c;
  #L124e62.  call temp:= `d`(v8, v9) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.d:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;)I` @kind direct;
  #L124e68.  v1:= temp;
  #L124e6a.  goto L124e6e;
  #L124e6c.  v1:= v11;
  #L124e6e.  if v1 >= 0 then goto L124e74;
  #L124e72.  goto L124e3c;
  #L124e74.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L124e78.  v6:= (`long`) v1 @kind i2l;
  #L124e7a.  v4:= v4 ^| v6 @kind long;
  #L124e7c.  v1:= v8 @kind object;
  #L124e7e.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L124e84.  v0:= temp;
  #L124e86.  if v0 == 0 then goto L124e3c;
  #L124e8a.  return @kind void;
}
procedure `void` `runSafely`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v2 @kind this, `kotlinx.coroutines.scheduling.Task` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.runSafely:(Lkotlinx/coroutines/scheduling/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L124e9c.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L124ea2.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L124ea8.  v3:= temp @kind object;
  #L124eaa.  if v3 != 0 then goto L124eb0;
  #L124eae.  goto L124edc;
  #L124eb0.  call `unTrackTask`(v3) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unTrackTask:()V` @kind virtual;
  #L124eb6.  goto L124edc;
  #L124eb8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L124eba.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L124ec0.  v0:= temp @kind object;
  #L124ec2.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L124ec8.  v1:= temp @kind object;
  #L124eca.  call `uncaughtException`(v1, v0, v3) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L124ed0.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L124ed6.  v3:= temp @kind object;
  #L124ed8.  if v3 != 0 then goto L124eb0;
  #L124edc.  return @kind void;
  #L124ede.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L124ee0.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L124ee6.  v0:= temp @kind object;
  #L124ee8.  if v0 != 0 then goto L124eee;
  #L124eec.  goto L124ef4;
  #L124eee.  call `unTrackTask`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unTrackTask:()V` @kind virtual;
  #L124ef4.  throw v3;
  catch `java.lang.Throwable` @[L124e9c..L124ea2] goto L124eb8;
  catch `java.lang.Throwable` @[L124eba..L124ed0] goto L124ede;
}
procedure `void` `shutdown`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v7 @kind this, `long` v8 ) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.shutdown:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L124f20.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L124f24.  v1:= 0I;
  #L124f26.  v2:= 1I;
  #L124f28.  call temp:= `compareAndSet`(v0, v7, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L124f2e.  v0:= temp;
  #L124f30.  if v0 != 0 then goto L124f36;
  #L124f34.  return @kind void;
  #L124f36.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.c:()Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;` @kind direct;
  #L124f3c.  v0:= temp @kind object;
  #L124f3e.  v1:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L124f42.  @monitorenter v1
  #L124f44.  v3:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L124f48.  v5:= 2097151L;
  #L124f4e.  v3:= v3 ^& v5 @kind long;
  #L124f50.  v4:= (`int`) v3 @kind l2i;
  #L124f52.  @monitorexit v1
  #L124f54.  if v2 > v4 then goto L124faa;
  #L124f58.  v1:= 1I;
  #L124f5a.  v3:= v1 + 1;
  #L124f5e.  v5:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L124f62.  call temp:= `get`(v5, v1) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L124f68.  v5:= temp @kind object;
  #L124f6a.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L124f70.  v5:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v5 @kind object;
  #L124f74.  if v5 == v0 then goto L124fa0;
  #L124f78.  call temp:= `isAlive`(v5) @signature `Ljava/lang/Thread;.isAlive:()Z` @kind virtual;
  #L124f7e.  v6:= temp;
  #L124f80.  if v6 == 0 then goto L124f92;
  #L124f84.  call `unpark`(v5) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L124f8a.  call `join`(v5, v8) @signature `Ljava/lang/Thread;.join:(J)V` @kind virtual;
  #L124f90.  goto L124f78;
  #L124f92.  v5:= v5.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L124f96.  v6:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L124f9a.  call `offloadAllWorkTo`(v5, v6) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.offloadAllWorkTo:(Lkotlinx/coroutines/scheduling/GlobalQueue;)V` @kind virtual;
  #L124fa0.  if v1 != v4 then goto L124fa6;
  #L124fa4.  goto L124faa;
  #L124fa6.  v1:= v3;
  #L124fa8.  goto L124f5a;
  #L124faa.  v8:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L124fae.  call `close`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.close:()V` @kind virtual;
  #L124fb4.  v8:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L124fb8.  call `close`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.close:()V` @kind virtual;
  #L124fbe.  if v0 != 0 then goto L124fc6;
  #L124fc2.  v8:= 0I;
  #L124fc4.  goto L124fce;
  #L124fc6.  call temp:= `findTask`(v0, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.findTask:(Z)Lkotlinx/coroutines/scheduling/Task;` @kind virtual;
  #L124fcc.  v8:= temp @kind object;
  #L124fce.  if v8 != 0 then goto L125018;
  #L124fd2.  v8:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L124fd6.  call temp:= `removeFirstOrNull`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L124fdc.  v8:= temp @kind object;
  #L124fde.  v8:= (`kotlinx.coroutines.scheduling.Task`) v8 @kind object;
  #L124fe2.  if v8 != 0 then goto L125018;
  #L124fe6.  v8:= v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L124fea.  call temp:= `removeFirstOrNull`(v8) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L124ff0.  v8:= temp @kind object;
  #L124ff2.  v8:= (`kotlinx.coroutines.scheduling.Task`) v8 @kind object;
  #L124ff6.  if v8 != 0 then goto L125018;
  #L124ffa.  if v0 != 0 then goto L125000;
  #L124ffe.  goto L12500a;
  #L125000.  v8:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L125004.  call temp:= `tryReleaseCpu`(v0, v8) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler$Worker;.tryReleaseCpu:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L12500a.  v8:= 0L;
  #L12500e.  v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack` @type ^`long` := v8 @kind wide;
  #L125012.  v7.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` := v8 @kind wide;
  #L125016.  return @kind void;
  #L125018.  call `runSafely`(v7, v8) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.runSafely:(Lkotlinx/coroutines/scheduling/Task;)V` @kind virtual;
  #L12501e.  goto L124fbe;
  #L125020.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L125022.  @monitorexit v1
  #L125024.  throw v8;
  catch `java.lang.Throwable` @[L124f44..L124f48] goto L125020;
}
procedure `void` `signalCpuWork`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v4 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.signalCpuWork:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L125090.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L125096.  v0:= temp;
  #L125098.  if v0 == 0 then goto L12509e;
  #L12509c.  return @kind void;
  #L12509e.  v0:= 0L;
  #L1250a2.  v2:= 1I;
  #L1250a4.  v3:= 0I;
  #L1250a6.  call temp:= `i`(v4, v0, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.i:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;JILjava/lang/Object;)Z` @kind static;
  #L1250ac.  v0:= temp;
  #L1250ae.  if v0 == 0 then goto L1250b4;
  #L1250b2.  return @kind void;
  #L1250b4.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.j:()Z` @kind direct;
  #L1250ba.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.scheduling.CoroutineScheduler` v12 @kind this) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1246d8.  v0:= new `java.util.ArrayList`;
  #L1246dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1246e2.  v1:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L1246e6.  call temp:= `currentLength`(v1) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.currentLength:()I` @kind virtual;
  #L1246ec.  v1:= temp;
  #L1246ee.  v2:= 0I;
  #L1246f0.  v3:= 1I;
  #L1246f2.  v4:= 0I;
  #L1246f4.  v5:= 0I;
  #L1246f6.  v6:= 0I;
  #L1246f8.  v7:= 0I;
  #L1246fa.  v8:= 1I;
  #L1246fc.  if v8 >= v1 then goto L1247f4;
  #L124700.  v9:= v8 + 1;
  #L124704.  v10:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.workers` @type ^`kotlinx.coroutines.internal.ResizableAtomicArray` @kind object;
  #L124708.  call temp:= `get`(v10, v8) @signature `Lkotlinx/coroutines/internal/ResizableAtomicArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L12470e.  v8:= temp @kind object;
  #L124710.  v8:= (`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker`) v8 @kind object;
  #L124714.  if v8 != 0 then goto L12471c;
  #L124718.  v8:= v9;
  #L12471a.  goto L1246fc;
  #L12471c.  v10:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.localQueue` @type ^`kotlinx.coroutines.scheduling.WorkQueue` @kind object;
  #L124720.  call temp:= `getSize$kotlinx_coroutines_core`(v10) @signature `Lkotlinx/coroutines/scheduling/WorkQueue;.getSize$kotlinx_coroutines_core:()I` @kind virtual;
  #L124726.  v10:= temp;
  #L124728.  v8:= v8.`kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.state` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L12472c.  v11:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L124730.  call temp:= `ordinal`(v8) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L124736.  v8:= temp;
  #L124738.  v8:= v11[v8];
  #L12473c.  if v8 == v3 then goto L1247ee;
  #L124740.  v11:= 2I;
  #L124742.  if v8 == v11 then goto L1247c0;
  #L124746.  v11:= 3I;
  #L124748.  if v8 == v11 then goto L124792;
  #L12474c.  v11:= 4I;
  #L12474e.  if v8 == v11 then goto L124760;
  #L124752.  v10:= 5I;
  #L124754.  if v8 == v10 then goto L12475a;
  #L124758.  goto L124718;
  #L12475a.  v7:= v7 + 1;
  #L12475e.  goto L124718;
  #L124760.  v6:= v6 + 1;
  #L124764.  if v10 <= 0 then goto L124718;
  #L124768.  v8:= new `java.lang.StringBuilder`;
  #L12476c.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124772.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124778.  v10:= 100I;
  #L12477c.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L124782.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L124788.  v8:= temp @kind object;
  #L12478a.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L124790.  goto L124718;
  #L124792.  v2:= v2 + 1;
  #L124796.  v8:= new `java.lang.StringBuilder`;
  #L12479a.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1247a0.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1247a6.  v10:= 99I;
  #L1247aa.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1247b0.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1247b6.  v8:= temp @kind object;
  #L1247b8.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1247be.  goto L124718;
  #L1247c0.  v4:= v4 + 1;
  #L1247c4.  v8:= new `java.lang.StringBuilder`;
  #L1247c8.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1247ce.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1247d4.  v10:= 98I;
  #L1247d8.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1247de.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1247e4.  v8:= temp @kind object;
  #L1247e6.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1247ec.  goto L124718;
  #L1247ee.  v5:= v5 + 1;
  #L1247f2.  goto L124718;
  #L1247f4.  v8:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L1247f8.  v1:= new `java.lang.StringBuilder`;
  #L1247fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L124802.  v3:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName` @type ^`java.lang.String` @kind object;
  #L124806.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12480c.  v3:= 64I;
  #L124810.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L124816.  call temp:= `getHexAddress`(v12) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12481c.  v3:= temp @kind object;
  #L12481e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124824.  v3:= "[Pool Size {core = " @kind object;
  #L124828.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12482e.  v3:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L124832.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124838.  v3:= ", max = " @kind object;
  #L12483c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124842.  v3:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize` @type ^`int`;
  #L124846.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12484c.  v3:= "}, Worker States {CPU = " @kind object;
  #L124850.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124856.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12485c.  v2:= ", blocking = " @kind object;
  #L124860.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124866.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12486c.  v2:= ", parked = " @kind object;
  #L124870.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124876.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12487c.  v2:= ", dormant = " @kind object;
  #L124880.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124886.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12488c.  v2:= ", terminated = " @kind object;
  #L124890.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124896.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12489c.  v2:= "}, running workers queues = " @kind object;
  #L1248a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248a6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248ac.  v0:= ", global CPU queue size = " @kind object;
  #L1248b0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248b6.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L1248ba.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.getSize:()I` @kind virtual;
  #L1248c0.  v0:= temp;
  #L1248c2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248c8.  v0:= ", global blocking queue size = " @kind object;
  #L1248cc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248d2.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue` @type ^`kotlinx.coroutines.scheduling.GlobalQueue` @kind object;
  #L1248d6.  call temp:= `getSize`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeTaskQueue;.getSize:()I` @kind virtual;
  #L1248dc.  v0:= temp;
  #L1248de.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248e4.  v0:= ", Control State {created workers= " @kind object;
  #L1248e8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248ee.  v2:= 2097151L;
  #L1248f4.  v2:= v2 ^& v8 @kind long;
  #L1248f6.  v0:= (`int`) v2 @kind l2i;
  #L1248f8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1248fe.  v0:= ", blocking tasks = " @kind object;
  #L124902.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124908.  v2:= 4398044413952L;
  #L124912.  v2:= v2 ^& v8 @kind long;
  #L124914.  v0:= 21I;
  #L124918.  v2:= v2 ^> v0 @kind long;
  #L12491a.  v0:= (`int`) v2 @kind l2i;
  #L12491c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L124922.  v0:= ", CPUs acquired = " @kind object;
  #L124926.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12492c.  v0:= v12.`kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize` @type ^`int`;
  #L124930.  v2:= 9223367638808264704L;
  #L12493a.  v2:= v2 ^& v8 @kind long;
  #L12493c.  v4:= 42I;
  #L124940.  v2:= v2 ^> v4 @kind long;
  #L124942.  v3:= (`int`) v2 @kind l2i;
  #L124944.  v0:= v0 - v3 @kind int;
  #L124946.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12494c.  v0:= "}]" @kind object;
  #L124950.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L124956.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12495c.  v0:= temp @kind object;
  #L12495e.  return v0 @kind object;
}
