record `kotlinx.coroutines.test.TestCoroutineContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface {
  `java.lang.String` `kotlinx.coroutines.test.TestCoroutineContext.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `kotlinx.coroutines.test.TestCoroutineContext.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` `kotlinx.coroutines.test.TestCoroutineContext.c` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.CoroutineExceptionHandler` `kotlinx.coroutines.test.TestCoroutineContext.d` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.internal.ThreadSafeHeap` `kotlinx.coroutines.test.TestCoroutineContext.e` @AccessFlag PRIVATE_FINAL;
  `long` `kotlinx.coroutines.test.TestCoroutineContext.f` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.test.TestCoroutineContext.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1297c0.  v0:= 0I;
  #L1297c2.  v1:= 1I;
  #L1297c4.  call `<init>`(v2, v0, v1, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1297ca.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1297dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1297e2.  v1.`kotlinx.coroutines.test.TestCoroutineContext.a` @type ^`java.lang.String` := v2 @kind object;
  #L1297e6.  v2:= new `java.util.ArrayList`;
  #L1297ea.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1297f0.  v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` := v2 @kind object;
  #L1297f4.  v2:= new `kotlinx.coroutines.test.TestCoroutineContext$Dispatcher`;
  #L1297f8.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$Dispatcher;.<init>:(Lkotlinx/coroutines/test/TestCoroutineContext;)V` @kind direct;
  #L1297fe.  v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` := v2 @kind object;
  #L129802.  v2:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L129806.  v0:= new `kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1`;
  #L12980a.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1;.<init>:(Lkotlinx/coroutines/CoroutineExceptionHandler$Key;Lkotlinx/coroutines/test/TestCoroutineContext;)V` @kind direct;
  #L129810.  v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` := v0 @kind object;
  #L129814.  v2:= new `kotlinx.coroutines.internal.ThreadSafeHeap`;
  #L129818.  call `<init>`(v2) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.<init>:()V` @kind direct;
  #L12981e.  v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` := v2 @kind object;
  #L129822.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L129834.  v2:= v2 ^& 1;
  #L129838.  if v2 == 0 then goto L12983e;
  #L12983c.  v1:= 0I;
  #L12983e.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L129844.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.test.TestCoroutineContext` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.a:(Ljava/lang/Runnable;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L129b24.  v0:= v10.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129b28.  v9:= new `kotlinx.coroutines.test.a`;
  #L129b2c.  v3:= v10.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` @kind wide;
  #L129b30.  v1:= 1L;
  #L129b34.  v1:= v1 + v3 @kind long;
  #L129b36.  v10.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` := v1 @kind wide;
  #L129b3a.  v5:= 0L;
  #L129b3e.  v7:= 4I;
  #L129b40.  v8:= 0I;
  #L129b42.  v1:= v9 @kind object;
  #L129b44.  v2:= v11 @kind object;
  #L129b46.  call `<init>`(v1, v2, v3, v5, v7, v8) @signature `Lkotlinx/coroutines/test/a;.<init>:(Ljava/lang/Runnable;JJILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L129b4c.  call `addLast`(v0, v9) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L129b52.  return @kind void;
}
procedure `void` `access$enqueue`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.Runnable` v1 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$enqueue:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L129858.  call `a`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.a:(Ljava/lang/Runnable;)V` @kind direct;
  #L12985e.  return @kind void;
}
procedure `kotlinx.coroutines.internal.ThreadSafeHeap` `access$getQueue$p`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$getQueue$p:(Lkotlinx/coroutines/test/TestCoroutineContext;)Lkotlinx/coroutines/internal/ThreadSafeHeap;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L129628.  v0:= v0.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L12962c.  return v0 @kind object;
}
procedure `java.util.List` `access$getUncaughtExceptions$p`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$getUncaughtExceptions$p:(Lkotlinx/coroutines/test/TestCoroutineContext;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L12957c.  v0:= v0.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129580.  return v0 @kind object;
}
procedure `kotlinx.coroutines.test.a` `access$postDelayed`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.Runnable` v1 @kind object, `long` v2 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$postDelayed:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L129640.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.b:(Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @kind direct;
  #L129646.  v0:= temp @kind object;
  #L129648.  return v0 @kind object;
}
procedure `long` `access$processNextEvent`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.access$processNextEvent:(Lkotlinx/coroutines/test/TestCoroutineContext;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1296a8.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.c:()J` @kind direct;
  #L1296ae.  v0:= temp @kind wide;
  #L1296b0.  return v0 @kind wide;
}
procedure `long` `advanceTimeBy$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy$default:(Lkotlinx/coroutines/test/TestCoroutineContext;JLjava/util/concurrent/TimeUnit;ILjava/lang/Object;)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1296c4.  v4:= v4 ^& 2;
  #L1296c8.  if v4 == 0 then goto L1296d0;
  #L1296cc.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1296d0.  call temp:= `advanceTimeBy`(v0, v1, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L1296d6.  v0:= temp @kind wide;
  #L1296d8.  return v0 @kind wide;
}
procedure `void` `advanceTimeTo$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo$default:(Lkotlinx/coroutines/test/TestCoroutineContext;JLjava/util/concurrent/TimeUnit;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129870.  v4:= v4 ^& 2;
  #L129874.  if v4 == 0 then goto L12987c;
  #L129878.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L12987c.  call `advanceTimeTo`(v0, v1, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L129882.  return @kind void;
}
procedure `void` `assertAllUnhandledExceptions$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1298c4.  v3:= v3 ^& 1;
  #L1298c8.  if v3 == 0 then goto L1298d0;
  #L1298cc.  v1:= "" @kind object;
  #L1298d0.  call `assertAllUnhandledExceptions`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L1298d6.  return @kind void;
}
procedure `void` `assertAnyUnhandledException$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129968.  v3:= v3 ^& 1;
  #L12996c.  if v3 == 0 then goto L129974;
  #L129970.  v1:= "" @kind object;
  #L129974.  call `assertAnyUnhandledException`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L12997a.  return @kind void;
}
procedure `void` `assertExceptions$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129a0c.  v3:= v3 ^& 1;
  #L129a10.  if v3 == 0 then goto L129a18;
  #L129a14.  v1:= "" @kind object;
  #L129a18.  call `assertExceptions`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L129a1e.  return @kind void;
}
procedure `void` `assertUnhandledException$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129a74.  v3:= v3 ^& 1;
  #L129a78.  if v3 == 0 then goto L129a80;
  #L129a7c.  v1:= "" @kind object;
  #L129a80.  call `assertUnhandledException`(v0, v1, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @kind virtual;
  #L129a86.  return @kind void;
}
procedure `kotlinx.coroutines.test.a` `b`(`kotlinx.coroutines.test.TestCoroutineContext` v7 @kind this, `java.lang.Runnable` v8 @kind object, `long` v9 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.b:(Ljava/lang/Runnable;J)Lkotlinx/coroutines/test/a;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L12965c.  v6:= new `kotlinx.coroutines.test.a`;
  #L129660.  v2:= v7.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` @kind wide;
  #L129664.  v0:= 1L;
  #L129668.  v0:= v0 + v2 @kind long;
  #L12966a.  v7.`kotlinx.coroutines.test.TestCoroutineContext.f` @type ^`long` := v0 @kind wide;
  #L12966e.  v0:= v7.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L129672.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L129676.  call temp:= `toNanos`(v4, v9) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L12967c.  v9:= temp @kind wide;
  #L12967e.  v4:= v0 + v9 @kind long;
  #L129682.  v0:= v6 @kind object;
  #L129684.  v1:= v8 @kind object;
  #L129686.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlinx/coroutines/test/a;.<init>:(Ljava/lang/Runnable;JJ)V` @kind direct;
  #L12968c.  v8:= v7.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129690.  call `addLast`(v8, v6) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.addLast:(Lkotlinx/coroutines/internal/ThreadSafeHeapNode;)V` @kind virtual;
  #L129696.  return v6 @kind object;
}
procedure `long` `c`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.c:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L129770.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129774.  call temp:= `peek`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.peek:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L12977a.  v0:= temp @kind object;
  #L12977c.  v0:= (`kotlinx.coroutines.test.a`) v0 @kind object;
  #L129780.  if v0 == 0 then goto L12978e;
  #L129784.  v0:= v0.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L129788.  call `d`(v2, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L12978e.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129792.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L129798.  v0:= temp;
  #L12979a.  if v0 == 0 then goto L1297aa;
  #L12979e.  v0:= 9223372036854775807L;
  #L1297a8.  goto L1297ae;
  #L1297aa.  v0:= 0L;
  #L1297ae.  return v0 @kind wide;
}
procedure `void` `d`(`kotlinx.coroutines.test.TestCoroutineContext` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L129b80.  v0:= v6.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129b84.  @monitorenter v0
  #L129b86.  call temp:= `firstImpl`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.firstImpl:()Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L129b8c.  v1:= temp @kind object;
  #L129b8e.  v2:= 0I;
  #L129b90.  if v1 != 0 then goto L129b98;
  #L129b94.  @monitorexit v0
  #L129b96.  goto L129bc0;
  #L129b98.  v1:= (`kotlinx.coroutines.test.a`) v1 @kind object;
  #L129b9c.  v3:= v1.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L129ba0.  v1:= 0I;
  #L129ba2.  v5:= lcmp(v3, v7);
  #L129ba6.  if v5 > 0 then goto L129bae;
  #L129baa.  v3:= 1I;
  #L129bac.  goto L129bb0;
  #L129bae.  v3:= 0I;
  #L129bb0.  if v3 == 0 then goto L129bbe;
  #L129bb4.  call temp:= `removeAtImpl`(v0, v1) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.removeAtImpl:(I)Lkotlinx/coroutines/internal/ThreadSafeHeapNode;` @kind virtual;
  #L129bba.  v1:= temp @kind object;
  #L129bbc.  v2:= v1 @kind object;
  #L129bbe.  @monitorexit v0
  #L129bc0.  v2:= (`kotlinx.coroutines.test.a`) v2 @kind object;
  #L129bc4.  if v2 != 0 then goto L129bca;
  #L129bc8.  return @kind void;
  #L129bca.  v0:= v2.`kotlinx.coroutines.test.a.c` @type ^`long` @kind wide;
  #L129bce.  v3:= 0L;
  #L129bd2.  v5:= lcmp(v0, v3);
  #L129bd6.  if v5 == 0 then goto L129bde;
  #L129bda.  v6.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` := v0 @kind wide;
  #L129bde.  call `run`(v2) @signature `Lkotlinx/coroutines/test/a;.run:()V` @kind virtual;
  #L129be4.  goto L129b80;
  #L129be6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L129be8.  @monitorexit v0
  #L129bea.  throw v7;
  catch `java.lang.Throwable` @[L129b86..L129b8e] goto L129be6;
  catch `java.lang.Throwable` @[L129b98..L129bbc] goto L129be6;
}
procedure `long` `now$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `java.util.concurrent.TimeUnit` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Ljava/util/concurrent/TimeUnit;ILjava/lang/Object;)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129724.  v2:= v2 ^& 1;
  #L129728.  if v2 == 0 then goto L129730;
  #L12972c.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L129730.  call temp:= `now`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L129736.  v0:= temp @kind wide;
  #L129738.  return v0 @kind wide;
}
procedure `long` `advanceTimeBy`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1296ec.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L1296f0.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1296f6.  v4:= temp @kind wide;
  #L1296f8.  v4:= v4 + v0 @kind long;
  #L1296fa.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1296fe.  call `advanceTimeTo`(v3, v4, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L129704.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L129708.  v4:= v4 - v0 @kind long;
  #L12970a.  call temp:= `convert`(v6, v4, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L129710.  v4:= temp @kind wide;
  #L129712.  return v4 @kind wide;
}
procedure `void` `advanceTimeTo`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L129894.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L12989a.  v3:= temp @kind wide;
  #L12989c.  call `d`(v2, v3) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L1298a2.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L1298a6.  v5:= lcmp(v3, v0);
  #L1298aa.  if v5 <= 0 then goto L1298b2;
  #L1298ae.  v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` := v3 @kind wide;
  #L1298b2.  return @kind void;
}
procedure `void` `assertAllUnhandledExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.lang.String` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAllUnhandledExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1298e8.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1298ec.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L1298f0.  v2:= 1I;
  #L1298f2.  if v1 == 0 then goto L129904;
  #L1298f6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1298fc.  v1:= temp;
  #L1298fe.  if v1 == 0 then goto L129904;
  #L129902.  goto L12993a;
  #L129904.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L12990a.  v0:= temp @kind object;
  #L12990c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L129912.  v1:= temp;
  #L129914.  if v1 == 0 then goto L12993a;
  #L129918.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L12991e.  v1:= temp @kind object;
  #L129920.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L129926.  v1:= temp @kind object;
  #L129928.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L12992c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L129932.  v1:= temp;
  #L129934.  if v1 != 0 then goto L12990c;
  #L129938.  v2:= 0I;
  #L12993a.  if v2 == 0 then goto L12994a;
  #L12993e.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129942.  call `clear`(v4) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L129948.  return @kind void;
  #L12994a.  v5:= new `java.lang.AssertionError`;
  #L12994e.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L129954.  throw v5;
}
procedure `void` `assertAnyUnhandledException`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.lang.String` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertAnyUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12998c.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129990.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L129994.  v2:= 0I;
  #L129996.  if v1 == 0 then goto L1299a8;
  #L12999a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1299a0.  v1:= temp;
  #L1299a2.  if v1 == 0 then goto L1299a8;
  #L1299a6.  goto L1299de;
  #L1299a8.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1299ae.  v0:= temp @kind object;
  #L1299b0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1299b6.  v1:= temp;
  #L1299b8.  if v1 == 0 then goto L1299de;
  #L1299bc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1299c2.  v1:= temp @kind object;
  #L1299c4.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1299ca.  v1:= temp @kind object;
  #L1299cc.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L1299d0.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1299d6.  v1:= temp;
  #L1299d8.  if v1 == 0 then goto L1299b0;
  #L1299dc.  v2:= 1I;
  #L1299de.  if v2 == 0 then goto L1299ee;
  #L1299e2.  v4:= v3.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L1299e6.  call `clear`(v4) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1299ec.  return @kind void;
  #L1299ee.  v5:= new `java.lang.AssertionError`;
  #L1299f2.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1299f8.  throw v5;
}
procedure `void` `assertExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.String` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertExceptions:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L129a30.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129a34.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L129a3a.  v3:= temp @kind object;
  #L129a3c.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L129a40.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L129a46.  v3:= temp;
  #L129a48.  if v3 == 0 then goto L129a58;
  #L129a4c.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129a50.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L129a56.  return @kind void;
  #L129a58.  v3:= new `java.lang.AssertionError`;
  #L129a5c.  call `<init>`(v3, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L129a62.  throw v3;
}
procedure `void` `assertUnhandledException`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this, `java.lang.String` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.assertUnhandledException:(Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L129a98.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129a9c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L129aa2.  v0:= temp;
  #L129aa4.  v1:= 1I;
  #L129aa6.  if v0 != v1 then goto L129adc;
  #L129aaa.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129aae.  v1:= 0I;
  #L129ab0.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L129ab6.  v0:= temp @kind object;
  #L129ab8.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L129abe.  v4:= temp @kind object;
  #L129ac0.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L129ac4.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L129aca.  v4:= temp;
  #L129acc.  if v4 == 0 then goto L129adc;
  #L129ad0.  v3:= v2.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129ad4.  call `clear`(v3) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L129ada.  return @kind void;
  #L129adc.  v4:= new `java.lang.AssertionError`;
  #L129ae0.  call `<init>`(v4, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L129ae6.  throw v4;
}
procedure `void` `cancelAllActions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.cancelAllActions:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L129af8.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129afc.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.isEmpty:()Z` @kind virtual;
  #L129b02.  v0:= temp;
  #L129b04.  if v0 != 0 then goto L129b12;
  #L129b08.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.e` @type ^`kotlinx.coroutines.internal.ThreadSafeHeap` @kind object;
  #L129b0c.  call `clear`(v0) @signature `Lkotlinx/coroutines/internal/ThreadSafeHeap;.clear:()V` @kind virtual;
  #L129b12.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L129520.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L129524.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12952a.  v2:= temp @kind object;
  #L12952c.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L129530.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L129536.  v2:= temp @kind object;
  #L129538.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1295f8.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L1295fc.  if v2 != v0 then goto L129606;
  #L129600.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L129604.  goto L129616;
  #L129606.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L12960a.  if v2 != v0 then goto L129614;
  #L12960e.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L129612.  goto L129616;
  #L129614.  v2:= 0I;
  #L129616.  return v2 @kind object;
}
procedure `java.util.List` `getExceptions`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L129594.  v0:= v1.`kotlinx.coroutines.test.TestCoroutineContext.b` @type ^`java.util.List` @kind object;
  #L129598.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlinx.coroutines.test.TestCoroutineContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1295ac.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L1295b0.  if v2 != v0 then goto L1295ba;
  #L1295b4.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.d` @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L1295b8.  goto L1295ca;
  #L1295ba.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L1295be.  if v2 != v0 then goto L1295c8;
  #L1295c2.  v2:= v1.`kotlinx.coroutines.test.TestCoroutineContext.c` @type ^`kotlinx.coroutines.test.TestCoroutineContext$Dispatcher` @kind object;
  #L1295c6.  goto L1295ca;
  #L1295c8.  v2:= v1 @kind object;
  #L1295ca.  return v2 @kind object;
}
procedure `long` `now`(`kotlinx.coroutines.test.TestCoroutineContext` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12974c.  v0:= v3.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L129750.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L129754.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L12975a.  v0:= temp @kind wide;
  #L12975c.  return v0 @kind wide;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L1295dc.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L1295e2.  v1:= temp @kind object;
  #L1295e4.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12954c.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.a` @type ^`java.lang.String` @kind object;
  #L129550.  if v0 != 0 then goto L129568;
  #L129554.  call temp:= `getHexAddress`(v2) @signature `Lkotlinx/coroutines/DebugStringsKt;.getHexAddress:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12955a.  v0:= temp @kind object;
  #L12955c.  v1:= "TestCoroutineContext@" @kind object;
  #L129560.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L129566.  v0:= temp @kind object;
  #L129568.  return v0 @kind object;
}
procedure `void` `triggerActions`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind this) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.triggerActions:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L129b64.  v0:= v2.`kotlinx.coroutines.test.TestCoroutineContext.g` @type ^`long` @kind wide;
  #L129b68.  call `d`(v2, v0) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.d:(J)V` @kind direct;
  #L129b6e.  return @kind void;
}
