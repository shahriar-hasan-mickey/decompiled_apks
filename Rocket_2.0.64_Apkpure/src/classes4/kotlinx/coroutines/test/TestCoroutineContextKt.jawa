record `kotlinx.coroutines.test.TestCoroutineContextKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `withTestContext`(`kotlinx.coroutines.test.TestCoroutineContext` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L129498.  call temp:= `invoke`(v3, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12949e.  call temp:= `getExceptions`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L1294a4.  v3:= temp @kind object;
  #L1294a6.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L1294aa.  v1:= 1I;
  #L1294ac.  if v0 == 0 then goto L1294be;
  #L1294b0.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1294b6.  v0:= temp;
  #L1294b8.  if v0 == 0 then goto L1294be;
  #L1294bc.  goto L1294e8;
  #L1294be.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1294c4.  v3:= temp @kind object;
  #L1294c6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1294cc.  v0:= temp;
  #L1294ce.  if v0 == 0 then goto L1294e8;
  #L1294d2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1294d8.  v0:= temp @kind object;
  #L1294da.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L1294de.  v0:= instanceof @variable v0 @type ^`java.util.concurrent.CancellationException` @kind boolean;
  #L1294e2.  if v0 != 0 then goto L1294c6;
  #L1294e6.  v1:= 0I;
  #L1294e8.  if v1 == 0 then goto L1294ee;
  #L1294ec.  return @kind void;
  #L1294ee.  v3:= new `java.lang.AssertionError`;
  #L1294f2.  call temp:= `getExceptions`(v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L1294f8.  v2:= temp @kind object;
  #L1294fa.  v0:= "Coroutine encountered unhandled exceptions:\n" @kind object;
  #L1294fe.  call temp:= `stringPlus`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L129504.  v2:= temp @kind object;
  #L129506.  call `<init>`(v3, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L12950c.  throw v3;
}
procedure `void` `withTestContext$default`(`kotlinx.coroutines.test.TestCoroutineContext` v0 @kind object, `kotlin.jvm.functions.Function1` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext$default:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L12946c.  v3:= 1I;
  #L12946e.  v2:= v2 ^& v3 @kind int;
  #L129470.  if v2 == 0 then goto L129480;
  #L129474.  v0:= new `kotlinx.coroutines.test.TestCoroutineContext`;
  #L129478.  v2:= 0I;
  #L12947a.  call `<init>`(v0, v2, v3, v2) @signature `Lkotlinx/coroutines/test/TestCoroutineContext;.<init>:(Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L129480.  call `withTestContext`(v0, v1) @signature `Lkotlinx/coroutines/test/TestCoroutineContextKt;.withTestContext:(Lkotlinx/coroutines/test/TestCoroutineContext;Lkotlin/jvm/functions/Function1;)V` @kind static;
  #L129486.  return @kind void;
}
