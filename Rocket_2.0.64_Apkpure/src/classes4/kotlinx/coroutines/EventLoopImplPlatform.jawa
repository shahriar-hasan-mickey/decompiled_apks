record `kotlinx.coroutines.EventLoopImplPlatform` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.EventLoop` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.EventLoopImplPlatform` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f23d0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/EventLoop;.<init>:()V` @kind direct;
  #L0f23d6.  return @kind void;
}
procedure `java.lang.Thread` `getThread`() @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `reschedule`(`kotlinx.coroutines.EventLoopImplPlatform` v1 @kind this, `long` v2 , `kotlinx.coroutines.EventLoopImplBase$DelayedTask` v4 @kind object) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.reschedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0f23e8.  v0:= `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @type ^`kotlinx.coroutines.DefaultExecutor` @kind object;
  #L0f23ec.  call `schedule`(v0, v2, v4) @signature `Lkotlinx/coroutines/EventLoopImplBase;.schedule:(JLkotlinx/coroutines/EventLoopImplBase$DelayedTask;)V` @kind virtual;
  #L0f23f2.  return @kind void;
}
procedure `void` `unpark`(`kotlinx.coroutines.EventLoopImplPlatform` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.unpark:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L0f2404.  call temp:= `getThread`(v2) @signature `Lkotlinx/coroutines/EventLoopImplPlatform;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L0f240a.  v0:= temp @kind object;
  #L0f240c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L0f2412.  v1:= temp @kind object;
  #L0f2414.  if v1 == v0 then goto L0f243c;
  #L0f2418.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0f241e.  v1:= temp @kind object;
  #L0f2420.  if v1 != 0 then goto L0f2428;
  #L0f2424.  v1:= 0I;
  #L0f2426.  goto L0f2432;
  #L0f2428.  call `unpark`(v1, v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unpark:(Ljava/lang/Thread;)V` @kind virtual;
  #L0f242e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0f2432.  if v1 != 0 then goto L0f243c;
  #L0f2436.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L0f243c.  return @kind void;
}
