record `kotlinx.coroutines.CoroutineContextKt$b` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.CoroutineContextKt$b.a` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlinx.coroutines.CoroutineContextKt$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineContextKt$b` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/CoroutineContextKt$b;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0eee84.  v0.`kotlinx.coroutines.CoroutineContextKt$b.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L0eee88.  v0.`kotlinx.coroutines.CoroutineContextKt$b.b` @type ^`boolean` := v2 @kind boolean;
  #L0eee8c.  v1:= 2I;
  #L0eee8e.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L0eee94.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `a`(`kotlinx.coroutines.CoroutineContextKt$b` v4 @kind this, `kotlin.coroutines.CoroutineContext` v5 @kind object, `kotlin.coroutines.CoroutineContext$Element` v6 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$b;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0eedec.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.CopyableThreadContextElement` @kind boolean;
  #L0eedf0.  if v0 != 0 then goto L0eedfe;
  #L0eedf4.  call temp:= `plus`(v5, v6) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eedfa.  v5:= temp @kind object;
  #L0eedfc.  return v5 @kind object;
  #L0eedfe.  v0:= v4.`kotlinx.coroutines.CoroutineContextKt$b.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L0eee02.  v0:= v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L0eee06.  v0:= (`kotlin.coroutines.CoroutineContext`) v0 @kind object;
  #L0eee0a.  call temp:= `getKey`(v6) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L0eee10.  v1:= temp @kind object;
  #L0eee12.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0eee18.  v0:= temp @kind object;
  #L0eee1a.  if v0 != 0 then goto L0eee3c;
  #L0eee1e.  v0:= v4.`kotlinx.coroutines.CoroutineContextKt$b.b` @type ^`boolean` @kind boolean;
  #L0eee22.  v6:= (`kotlinx.coroutines.CopyableThreadContextElement`) v6 @kind object;
  #L0eee26.  if v0 == 0 then goto L0eee32;
  #L0eee2a.  call temp:= `copyForChild`(v6) @signature `Lkotlinx/coroutines/CopyableThreadContextElement;.copyForChild:()Lkotlinx/coroutines/CopyableThreadContextElement;` @kind interface;
  #L0eee30.  v6:= temp @kind object;
  #L0eee32.  call temp:= `plus`(v5, v6) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eee38.  v5:= temp @kind object;
  #L0eee3a.  return v5 @kind object;
  #L0eee3c.  v1:= v4.`kotlinx.coroutines.CoroutineContextKt$b.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L0eee40.  v2:= v1.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L0eee44.  v2:= (`kotlin.coroutines.CoroutineContext`) v2 @kind object;
  #L0eee48.  call temp:= `getKey`(v6) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L0eee4e.  v3:= temp @kind object;
  #L0eee50.  call temp:= `minusKey`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eee56.  v2:= temp @kind object;
  #L0eee58.  v1.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v2 @kind object;
  #L0eee5c.  v6:= (`kotlinx.coroutines.CopyableThreadContextElement`) v6 @kind object;
  #L0eee60.  call temp:= `mergeForChild`(v6, v0) @signature `Lkotlinx/coroutines/CopyableThreadContextElement;.mergeForChild:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eee66.  v6:= temp @kind object;
  #L0eee68.  call temp:= `plus`(v5, v6) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eee6e.  v5:= temp @kind object;
  #L0eee70.  return v5 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.CoroutineContextKt$b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$b;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0eedc8.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L0eedcc.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L0eedd0.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineContextKt$b;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L0eedd6.  v1:= temp @kind object;
  #L0eedd8.  return v1 @kind object;
}
