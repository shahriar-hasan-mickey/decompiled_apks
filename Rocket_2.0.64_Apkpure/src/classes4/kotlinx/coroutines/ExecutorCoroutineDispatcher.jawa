record `kotlinx.coroutines.ExecutorCoroutineDispatcher` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.CoroutineDispatcher` @kind class, `java.io.Closeable` @kind interface {
}
global `kotlinx.coroutines.ExecutorCoroutineDispatcher$Key` `@@kotlinx.coroutines.ExecutorCoroutineDispatcher.Key` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0f2c04.  v0:= new `kotlinx.coroutines.ExecutorCoroutineDispatcher$Key`;
  #L0f2c08.  v1:= 0I;
  #L0f2c0a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher$Key;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0f2c10.  `@@kotlinx.coroutines.ExecutorCoroutineDispatcher.Key` @type ^`kotlinx.coroutines.ExecutorCoroutineDispatcher$Key` := v0 @kind object;
  #L0f2c14.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.ExecutorCoroutineDispatcher` v0 @kind this) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f2c28.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L0f2c2e.  return @kind void;
}
procedure `void` `close`() @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.close:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.concurrent.Executor` `getExecutor`() @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcher;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
