record `kotlinx.coroutines.i0` @kind class @AccessFlag FINAL extends `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlinx.coroutines.i0._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.Job` `kotlinx.coroutines.i0.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread` `kotlinx.coroutines.i0.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.DisposableHandle` `kotlinx.coroutines.i0.c` @AccessFlag PRIVATE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.i0.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/i0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0f72fc.  v0:= constclass @type ^`kotlinx.coroutines.i0` @kind object;
  #L0f7300.  v1:= "_state" @kind object;
  #L0f7304.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L0f730a.  v0:= temp @kind object;
  #L0f730c.  `@@kotlinx.coroutines.i0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L0f7310.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.i0` v0 @kind this, `kotlinx.coroutines.Job` v1 @kind object) @signature `Lkotlinx/coroutines/i0;.<init>:(Lkotlinx/coroutines/Job;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f7324.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0f732a.  v0.`kotlinx.coroutines.i0.a` @type ^`kotlinx.coroutines.Job` := v1 @kind object;
  #L0f732e.  v1:= 0I;
  #L0f7330.  v0.`kotlinx.coroutines.i0._state` @type ^`int` := v1;
  #L0f7334.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L0f733a.  v1:= temp @kind object;
  #L0f733c.  v0.`kotlinx.coroutines.i0.b` @type ^`java.lang.Thread` := v1 @kind object;
  #L0f7340.  return @kind void;
}
procedure `java.lang.Void` `b`(`kotlinx.coroutines.i0` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/i0;.b:(I)Ljava/lang/Void;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0f72c4.  v0:= new `java.lang.IllegalStateException`;
  #L0f72c8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0f72ce.  v3:= temp @kind object;
  #L0f72d0.  v1:= "Illegal state " @kind object;
  #L0f72d4.  call temp:= `stringPlus`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0f72da.  v3:= temp @kind object;
  #L0f72dc.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f72e2.  v3:= temp @kind object;
  #L0f72e4.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f72ea.  throw v0;
}
procedure `void` `a`(`kotlinx.coroutines.i0` v3 @kind this) @signature `Lkotlinx/coroutines/i0;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0f7354.  v0:= v3.`kotlinx.coroutines.i0._state` @type ^`int`;
  #L0f7358.  if v0 == 0 then goto L0f7382;
  #L0f735c.  v1:= 2I;
  #L0f735e.  if v0 == v1 then goto L0f7354;
  #L0f7362.  v1:= 3I;
  #L0f7364.  if v0 != v1 then goto L0f7370;
  #L0f7368.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L0f736e.  return @kind void;
  #L0f7370.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/i0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L0f7376.  v0:= new `kotlin.KotlinNothingValueException`;
  #L0f737a.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L0f7380.  throw v0;
  #L0f7382.  v1:= `@@kotlinx.coroutines.i0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L0f7386.  v2:= 1I;
  #L0f7388.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L0f738e.  v0:= temp;
  #L0f7390.  if v0 == 0 then goto L0f7354;
  #L0f7394.  v0:= v3.`kotlinx.coroutines.i0.c` @type ^`kotlinx.coroutines.DisposableHandle` @kind object;
  #L0f7398.  if v0 != 0 then goto L0f739e;
  #L0f739c.  goto L0f73a4;
  #L0f739e.  call `dispose`(v0) @signature `Lkotlinx/coroutines/DisposableHandle;.dispose:()V` @kind interface;
  #L0f73a4.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.i0` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/i0;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0f73b8.  v4:= v3.`kotlinx.coroutines.i0._state` @type ^`int`;
  #L0f73bc.  v0:= 3I;
  #L0f73be.  v1:= 2I;
  #L0f73c0.  if v4 == 0 then goto L0f73e8;
  #L0f73c4.  v2:= 1I;
  #L0f73c6.  if v4 == v2 then goto L0f73e6;
  #L0f73ca.  if v4 == v1 then goto L0f73e6;
  #L0f73ce.  if v4 != v0 then goto L0f73d4;
  #L0f73d2.  goto L0f73e6;
  #L0f73d4.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/i0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L0f73da.  v4:= new `kotlin.KotlinNothingValueException`;
  #L0f73de.  call `<init>`(v4) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L0f73e4.  throw v4;
  #L0f73e6.  return @kind void;
  #L0f73e8.  v2:= `@@kotlinx.coroutines.i0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L0f73ec.  call temp:= `compareAndSet`(v2, v3, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L0f73f2.  v4:= temp;
  #L0f73f4.  if v4 == 0 then goto L0f73b8;
  #L0f73f8.  v4:= v3.`kotlinx.coroutines.i0.b` @type ^`java.lang.Thread` @kind object;
  #L0f73fc.  call `interrupt`(v4) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L0f7402.  v3.`kotlinx.coroutines.i0._state` @type ^`int` := v0;
  #L0f7406.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.i0` v3 @kind this) @signature `Lkotlinx/coroutines/i0;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0f7418.  v0:= v3.`kotlinx.coroutines.i0.a` @type ^`kotlinx.coroutines.Job` @kind object;
  #L0f741c.  v1:= 1I;
  #L0f741e.  call temp:= `invokeOnCompletion`(v0, v1, v1, v3) @signature `Lkotlinx/coroutines/Job;.invokeOnCompletion:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @kind interface;
  #L0f7424.  v0:= temp @kind object;
  #L0f7426.  v3.`kotlinx.coroutines.i0.c` @type ^`kotlinx.coroutines.DisposableHandle` := v0 @kind object;
  #L0f742a.  v0:= v3.`kotlinx.coroutines.i0._state` @type ^`int`;
  #L0f742e.  if v0 == 0 then goto L0f7454;
  #L0f7432.  v1:= 2I;
  #L0f7434.  if v0 == v1 then goto L0f7452;
  #L0f7438.  v1:= 3I;
  #L0f743a.  if v0 != v1 then goto L0f7440;
  #L0f743e.  goto L0f7452;
  #L0f7440.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/i0;.b:(I)Ljava/lang/Void;` @kind direct;
  #L0f7446.  v0:= new `kotlin.KotlinNothingValueException`;
  #L0f744a.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L0f7450.  throw v0;
  #L0f7452.  return @kind void;
  #L0f7454.  v1:= `@@kotlinx.coroutines.i0.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L0f7458.  v2:= 0I;
  #L0f745a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L0f7460.  v0:= temp;
  #L0f7462.  if v0 == 0 then goto L0f742a;
  #L0f7466.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.i0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/i0;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0f72a4.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L0f72a8.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/i0;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L0f72ae.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0f72b2.  return v1 @kind object;
}
