record `kotlinx.coroutines.Job` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
}
global `kotlinx.coroutines.Job$Key` `@@kotlinx.coroutines.Job.Key` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/Job;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0f6444.  v0:= `@@kotlinx.coroutines.Job$Key.a` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L0f6448.  `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` := v0 @kind object;
  #L0f644c.  return @kind void;
}
procedure `kotlinx.coroutines.ChildHandle` `attachChild`(`kotlinx.coroutines.ChildJob` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.attachChild:(Lkotlinx/coroutines/ChildJob;)Lkotlinx/coroutines/ChildHandle;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `cancel`() @signature `Lkotlinx/coroutines/Job;.cancel:()V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `cancel`(`java.util.concurrent.CancellationException` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.cancel:(Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `cancel`(`java.lang.Throwable` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.cancel:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.CancellationException` `getCancellationException`() @signature `Lkotlinx/coroutines/Job;.getCancellationException:()Ljava/util/concurrent/CancellationException;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.sequences.Sequence` `getChildren`() @signature `Lkotlinx/coroutines/Job;.getChildren:()Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.selects.SelectClause0` `getOnJoin`() @signature `Lkotlinx/coroutines/Job;.getOnJoin:()Lkotlinx/coroutines/selects/SelectClause0;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnCompletion`(`kotlin.jvm.functions.Function1` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.invokeOnCompletion:(Lkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnCompletion`(`boolean` v0 , `boolean` v1 , `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlinx/coroutines/Job;.invokeOnCompletion:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isActive`() @signature `Lkotlinx/coroutines/Job;.isActive:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCancelled`() @signature `Lkotlinx/coroutines/Job;.isCancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isCompleted`() @signature `Lkotlinx/coroutines/Job;.isCompleted:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `join`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.join:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.Job` `plus`(`kotlinx.coroutines.Job` v0 @kind object) @signature `Lkotlinx/coroutines/Job;.plus:(Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `start`() @signature `Lkotlinx/coroutines/Job;.start:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
