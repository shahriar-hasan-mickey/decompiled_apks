record `kotlinx.coroutines.CoroutineScopeKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlinx.coroutines.CoroutineScope` `CoroutineScope`(`kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.CoroutineScope:(Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0efbd0.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L0efbd4.  v1:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L0efbd8.  call temp:= `get`(v3, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0efbde.  v1:= temp @kind object;
  #L0efbe0.  if v1 == 0 then goto L0efbe6;
  #L0efbe4.  goto L0efbfa;
  #L0efbe6.  v1:= 1I;
  #L0efbe8.  v2:= 0I;
  #L0efbea.  call temp:= `Job$default`(v2, v1, v2) @signature `Lkotlinx/coroutines/JobKt;.Job$default:(Lkotlinx/coroutines/Job;ILjava/lang/Object;)Lkotlinx/coroutines/CompletableJob;` @kind static;
  #L0efbf0.  v1:= temp @kind object;
  #L0efbf2.  call temp:= `plus`(v3, v1) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efbf8.  v3:= temp @kind object;
  #L0efbfa.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L0efc00.  return v0 @kind object;
}
procedure `kotlinx.coroutines.CoroutineScope` `MainScope`() @signature `Lkotlinx/coroutines/CoroutineScopeKt;.MainScope:()Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0efc14.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L0efc18.  v1:= 0I;
  #L0efc1a.  v2:= 1I;
  #L0efc1c.  call temp:= `SupervisorJob$default`(v1, v2, v1) @signature `Lkotlinx/coroutines/SupervisorKt;.SupervisorJob$default:(Lkotlinx/coroutines/Job;ILjava/lang/Object;)Lkotlinx/coroutines/CompletableJob;` @kind static;
  #L0efc22.  v1:= temp @kind object;
  #L0efc24.  call temp:= `getMain`() @signature `Lkotlinx/coroutines/Dispatchers;.getMain:()Lkotlinx/coroutines/MainCoroutineDispatcher;` @kind static;
  #L0efc2a.  v2:= temp @kind object;
  #L0efc2c.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efc32.  v1:= temp @kind object;
  #L0efc34.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L0efc3a.  return v0 @kind object;
}
procedure `void` `cancel`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0efcc0.  call temp:= `CancellationException`(v1, v2) @signature `Lkotlinx/coroutines/ExceptionsKt;.CancellationException:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/util/concurrent/CancellationException;` @kind static;
  #L0efcc6.  v1:= temp @kind object;
  #L0efcc8.  call `cancel`(v0, v1) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @kind static;
  #L0efcce.  return @kind void;
}
procedure `void` `cancel`(`kotlinx.coroutines.CoroutineScope` v2 @kind object, `java.util.concurrent.CancellationException` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0efce0.  call temp:= `getCoroutineContext`(v2) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efce6.  v0:= temp @kind object;
  #L0efce8.  v1:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L0efcec.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0efcf2.  v0:= temp @kind object;
  #L0efcf4.  v0:= (`kotlinx.coroutines.Job`) v0 @kind object;
  #L0efcf8.  if v0 == 0 then goto L0efd04;
  #L0efcfc.  call `cancel`(v0, v3) @signature `Lkotlinx/coroutines/Job;.cancel:(Ljava/util/concurrent/CancellationException;)V` @kind interface;
  #L0efd02.  return @kind void;
  #L0efd04.  v3:= new `java.lang.IllegalStateException`;
  #L0efd08.  v0:= "Scope cannot be cancelled because it does not have a job: " @kind object;
  #L0efd0c.  call temp:= `stringPlus`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0efd12.  v2:= temp @kind object;
  #L0efd14.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0efd1a.  v2:= temp @kind object;
  #L0efd1c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0efd22.  throw v3;
}
procedure `void` `cancel$default`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel$default:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0efc78.  v3:= v3 ^& 2;
  #L0efc7c.  if v3 == 0 then goto L0efc82;
  #L0efc80.  v2:= 0I;
  #L0efc82.  call `cancel`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind static;
  #L0efc88.  return @kind void;
}
procedure `void` `cancel$default`(`kotlinx.coroutines.CoroutineScope` v0 @kind object, `java.util.concurrent.CancellationException` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel$default:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0efc9c.  v2:= v2 ^& 1;
  #L0efca0.  if v2 == 0 then goto L0efca6;
  #L0efca4.  v1:= 0I;
  #L0efca6.  call `cancel`(v0, v1) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.cancel:(Lkotlinx/coroutines/CoroutineScope;Ljava/util/concurrent/CancellationException;)V` @kind static;
  #L0efcac.  return @kind void;
}
procedure `java.lang.Object` `coroutineScope`(`kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.coroutineScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0efb74.  v0:= new `kotlinx.coroutines.internal.ScopeCoroutine`;
  #L0efb78.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efb7e.  v1:= temp @kind object;
  #L0efb80.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L0efb86.  call temp:= `startUndispatchedOrReturn`(v0, v0, v2) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startUndispatchedOrReturn:(Lkotlinx/coroutines/internal/ScopeCoroutine;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L0efb8c.  v2:= temp @kind object;
  #L0efb8e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L0efb94.  v0:= temp @kind object;
  #L0efb96.  if v2 != v0 then goto L0efba0;
  #L0efb9a.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L0efba0.  return v2 @kind object;
}
procedure `java.lang.Object` `currentCoroutineContext`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.currentCoroutineContext:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0efbb4.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efbba.  v0:= temp @kind object;
  #L0efbbc.  return v0 @kind object;
}
procedure `void` `ensureActive`(`kotlinx.coroutines.CoroutineScope` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.ensureActive:(Lkotlinx/coroutines/CoroutineScope;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L0efd34.  call temp:= `getCoroutineContext`(v0) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efd3a.  v0:= temp @kind object;
  #L0efd3c.  call `ensureActive`(v0) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L0efd42.  return @kind void;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.CoroutineScope` v1 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.isActive:(Lkotlinx/coroutines/CoroutineScope;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0efb38.  call temp:= `getCoroutineContext`(v1) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efb3e.  v1:= temp @kind object;
  #L0efb40.  v0:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L0efb44.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L0efb4a.  v1:= temp @kind object;
  #L0efb4c.  v1:= (`kotlinx.coroutines.Job`) v1 @kind object;
  #L0efb50.  if v1 != 0 then goto L0efb58;
  #L0efb54.  v1:= 1I;
  #L0efb56.  goto L0efb60;
  #L0efb58.  call temp:= `isActive`(v1) @signature `Lkotlinx/coroutines/Job;.isActive:()Z` @kind interface;
  #L0efb5e.  v1:= temp;
  #L0efb60.  return v1;
}
procedure `void` `isActive$annotations`(`kotlinx.coroutines.CoroutineScope` v0 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.isActive$annotations:(Lkotlinx/coroutines/CoroutineScope;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0efd54.  return @kind void;
}
procedure `kotlinx.coroutines.CoroutineScope` `plus`(`kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.plus:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/CoroutineScope;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0efc4c.  v0:= new `kotlinx.coroutines.internal.ContextScope`;
  #L0efc50.  call temp:= `getCoroutineContext`(v1) @signature `Lkotlinx/coroutines/CoroutineScope;.getCoroutineContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efc56.  v1:= temp @kind object;
  #L0efc58.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0efc5e.  v1:= temp @kind object;
  #L0efc60.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/ContextScope;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L0efc66.  return v0 @kind object;
}
