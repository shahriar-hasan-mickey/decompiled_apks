record `kotlinx.coroutines.channels.Receive` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class, `kotlinx.coroutines.channels.ReceiveOrClosed` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.Receive` v0 @kind this) @signature `Lkotlinx/coroutines/channels/Receive;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L104b3c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L104b42.  return @kind void;
}
procedure `java.lang.Object` `getOfferResult`(`kotlinx.coroutines.channels.Receive` v1 @kind this) @signature `Lkotlinx/coroutines/channels/Receive;.getOfferResult:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L104af4.  call temp:= `getOfferResult`(v1) @signature `Lkotlinx/coroutines/channels/Receive;.getOfferResult:()Lkotlinx/coroutines/internal/Symbol;` @kind virtual;
  #L104afa.  v0:= temp @kind object;
  #L104afc.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `getOfferResult`(`kotlinx.coroutines.channels.Receive` v1 @kind this) @signature `Lkotlinx/coroutines/channels/Receive;.getOfferResult:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L104b24.  v0:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L104b28.  return v0 @kind object;
}
procedure `kotlin.jvm.functions.Function1` `resumeOnCancellationFun`(`kotlinx.coroutines.channels.Receive` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/channels/Receive;.resumeOnCancellationFun:(Ljava/lang/Object;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC {
    temp;

  #L104b10.  v1:= 0I;
  #L104b12.  return v1 @kind object;
}
procedure `void` `resumeReceiveClosed`(`kotlinx.coroutines.channels.Closed` v0 @kind object) @signature `Lkotlinx/coroutines/channels/Receive;.resumeReceiveClosed:(Lkotlinx/coroutines/channels/Closed;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
