record `kotlinx.coroutines.channels.ArrayChannel` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.channels.AbstractChannel` @kind class {
  `int` `kotlinx.coroutines.channels.ArrayChannel.c` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.channels.ArrayChannel.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.ReentrantLock` `kotlinx.coroutines.channels.ArrayChannel.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.channels.ArrayChannel.f` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.channels.ArrayChannel.g` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.channels.ArrayChannel.size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.ArrayChannel` v6 @kind this, `int` v7 , `kotlinx.coroutines.channels.BufferOverflow` v8 @kind object, `kotlin.jvm.functions.Function1` v9 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.<init>:(ILkotlinx/coroutines/channels/BufferOverflow;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0fbef8.  call `<init>`(v6, v9) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L0fbefe.  v6.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int` := v7;
  #L0fbf02.  v6.`kotlinx.coroutines.channels.ArrayChannel.d` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v8 @kind object;
  #L0fbf06.  v8:= 0I;
  #L0fbf08.  v9:= 1I;
  #L0fbf0a.  if v7 < v9 then goto L0fbf10;
  #L0fbf0e.  goto L0fbf12;
  #L0fbf10.  v9:= 0I;
  #L0fbf12.  if v9 == 0 then goto L0fbf52;
  #L0fbf16.  v9:= new `java.util.concurrent.locks.ReentrantLock`;
  #L0fbf1a.  call `<init>`(v9) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L0fbf20.  v6.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` := v9 @kind object;
  #L0fbf24.  v9:= 8I;
  #L0fbf28.  call temp:= `min`(v7, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L0fbf2e.  v7:= temp;
  #L0fbf30.  v7:= new `java.lang.Object`[v7];
  #L0fbf34.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbf38.  v2:= 0I;
  #L0fbf3a.  v3:= 0I;
  #L0fbf3c.  v4:= 6I;
  #L0fbf3e.  v5:= 0I;
  #L0fbf40.  v0:= v7 @kind object;
  #L0fbf42.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L0fbf48.  v6.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] := v7 @kind object;
  #L0fbf4c.  v6.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v8;
  #L0fbf50.  return @kind void;
  #L0fbf52.  v8:= new `java.lang.StringBuilder`;
  #L0fbf56.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0fbf5c.  v9:= "ArrayChannel capacity must be at least 1, but " @kind object;
  #L0fbf60.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbf66.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbf6c.  v7:= " was specified" @kind object;
  #L0fbf70.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbf76.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0fbf7c.  v7:= temp @kind object;
  #L0fbf7e.  v8:= new `java.lang.IllegalArgumentException`;
  #L0fbf82.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0fbf88.  v7:= temp @kind object;
  #L0fbf8a.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0fbf90.  throw v8;
}
procedure `void` `q`(`kotlinx.coroutines.channels.ArrayChannel` v4 @kind this, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.q:(ILjava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0fbfa4.  v0:= v4.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fbfa8.  if v5 >= v0 then goto L0fbfc6;
  #L0fbfac.  call `r`(v4, v5) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.r:(I)V` @kind direct;
  #L0fbfb2.  v0:= v4.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbfb6.  v1:= v4.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbfba.  v1:= v1 + v5 @kind int;
  #L0fbfbc.  v5:= length @variable v0;
  #L0fbfbe.  v1:= v1 %% v5 @kind int;
  #L0fbfc0.  v0[v1]:= v6 @kind object;
  #L0fbfc4.  goto L0fbff0;
  #L0fbfc6.  v0:= v4.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbfca.  v1:= v4.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbfce.  v2:= length @variable v0;
  #L0fbfd0.  v2:= v1 %% v2 @kind int;
  #L0fbfd4.  v3:= 0I;
  #L0fbfd6.  v0[v2]:= v3 @kind object;
  #L0fbfda.  v5:= v5 + v1 @kind int;
  #L0fbfdc.  v2:= length @variable v0;
  #L0fbfde.  v5:= v5 %% v2 @kind int;
  #L0fbfe0.  v0[v5]:= v6 @kind object;
  #L0fbfe4.  v1:= v1 + 1;
  #L0fbfe8.  v5:= length @variable v0;
  #L0fbfea.  v1:= v1 %% v5 @kind int;
  #L0fbfec.  v4.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int` := v1;
  #L0fbff0.  return @kind void;
}
procedure `void` `r`(`kotlinx.coroutines.channels.ArrayChannel` v8 @kind this, `int` v9 ) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.r:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0fc004.  v0:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fc008.  v1:= length @variable v0;
  #L0fc00a.  if v9 < v1 then goto L0fc05c;
  #L0fc00e.  v0:= length @variable v0;
  #L0fc010.  v0:= v0 * 2;
  #L0fc014.  v1:= v8.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fc018.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L0fc01e.  v0:= temp;
  #L0fc020.  v1:= new `java.lang.Object`[v0];
  #L0fc024.  v2:= 0I;
  #L0fc026.  v3:= 0I;
  #L0fc028.  if v3 >= v9 then goto L0fc04a;
  #L0fc02c.  v4:= v3 + 1;
  #L0fc030.  v5:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fc034.  v6:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fc038.  v6:= v6 + v3 @kind int;
  #L0fc03a.  v7:= length @variable v5;
  #L0fc03c.  v6:= v6 %% v7 @kind int;
  #L0fc03e.  v5:= v5[v6] @kind object;
  #L0fc042.  v1[v3]:= v5 @kind object;
  #L0fc046.  v3:= v4;
  #L0fc048.  goto L0fc028;
  #L0fc04a.  v3:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fc04e.  call `fill`(v1, v3, v9, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L0fc054.  v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] := v1 @kind object;
  #L0fc058.  v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int` := v2;
  #L0fc05c.  return @kind void;
}
procedure `kotlinx.coroutines.internal.Symbol` `s`(`kotlinx.coroutines.channels.ArrayChannel` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.s:(I)Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L0fbe94.  v0:= v3.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fbe98.  v1:= 0I;
  #L0fbe9a.  v2:= 1I;
  #L0fbe9c.  if v4 >= v0 then goto L0fbea8;
  #L0fbea0.  v4:= v4 + v2 @kind int;
  #L0fbea2.  v3.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v4;
  #L0fbea6.  return v1 @kind object;
  #L0fbea8.  v4:= v3.`kotlinx.coroutines.channels.ArrayChannel.d` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L0fbeac.  v0:= `@@kotlinx.coroutines.channels.ArrayChannel$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L0fbeb0.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0fbeb6.  v4:= temp;
  #L0fbeb8.  v4:= v0[v4];
  #L0fbebc.  if v4 == v2 then goto L0fbee0;
  #L0fbec0.  v0:= 2I;
  #L0fbec2.  if v4 == v0 then goto L0fbeda;
  #L0fbec6.  v0:= 3I;
  #L0fbec8.  if v4 != v0 then goto L0fbece;
  #L0fbecc.  goto L0fbee4;
  #L0fbece.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L0fbed2.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L0fbed8.  throw v4;
  #L0fbeda.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbede.  goto L0fbee4;
  #L0fbee0.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbee4.  return v1 @kind object;
}
procedure `boolean` `enqueueReceiveInternal`(`kotlinx.coroutines.channels.ArrayChannel` v1 @kind this, `kotlinx.coroutines.channels.Receive` v2 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.enqueueReceiveInternal:(Lkotlinx/coroutines/channels/Receive;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0fb7f0.  v0:= v1.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fb7f4.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fb7fa.  call temp:= `enqueueReceiveInternal`(v1, v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.enqueueReceiveInternal:(Lkotlinx/coroutines/channels/Receive;)Z` @kind super;
  #L0fb800.  v2:= temp;
  #L0fb802.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb808.  return v2;
  #L0fb80a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fb80c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb812.  throw v2;
  catch `java.lang.Throwable` @[L0fb7fa..L0fb802] goto L0fb80a;
}
procedure `java.lang.Object` `enqueueSend`(`kotlinx.coroutines.channels.ArrayChannel` v1 @kind this, `kotlinx.coroutines.channels.Send` v2 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.enqueueSend:(Lkotlinx/coroutines/channels/Send;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0fb928.  v0:= v1.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fb92c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fb932.  call temp:= `enqueueSend`(v1, v2) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.enqueueSend:(Lkotlinx/coroutines/channels/Send;)Ljava/lang/Object;` @kind super;
  #L0fb938.  v2:= temp @kind object;
  #L0fb93a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb940.  return v2 @kind object;
  #L0fb942.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fb944.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb94a.  throw v2;
  catch `java.lang.Throwable` @[L0fb932..L0fb93a] goto L0fb942;
}
procedure `java.lang.String` `getBufferDebugString`(`kotlinx.coroutines.channels.ArrayChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.getBufferDebugString:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L0fbe3c.  v0:= new `java.lang.StringBuilder`;
  #L0fbe40.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0fbe46.  v1:= "(buffer:capacity=" @kind object;
  #L0fbe4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbe50.  v1:= v2.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fbe54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbe5a.  v1:= ",size=" @kind object;
  #L0fbe5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbe64.  v1:= v2.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fbe68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbe6e.  v1:= 41I;
  #L0fbe72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0fbe78.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0fbe7e.  v0:= temp @kind object;
  #L0fbe80.  return v0 @kind object;
}
procedure `boolean` `isBufferAlwaysEmpty`(`kotlinx.coroutines.channels.ArrayChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isBufferAlwaysEmpty:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L0fb830.  v0:= 0I;
  #L0fb832.  return v0;
}
procedure `boolean` `isBufferAlwaysFull`(`kotlinx.coroutines.channels.ArrayChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isBufferAlwaysFull:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L0fb844.  v0:= 0I;
  #L0fb846.  return v0;
}
procedure `boolean` `isBufferEmpty`(`kotlinx.coroutines.channels.ArrayChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isBufferEmpty:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L0fb858.  v0:= v1.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fb85c.  if v0 != 0 then goto L0fb864;
  #L0fb860.  v0:= 1I;
  #L0fb862.  goto L0fb866;
  #L0fb864.  v0:= 0I;
  #L0fb866.  return v0;
}
procedure `boolean` `isBufferFull`(`kotlinx.coroutines.channels.ArrayChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isBufferFull:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L0fb878.  v0:= v2.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fb87c.  v1:= v2.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fb880.  if v0 != v1 then goto L0fb894;
  #L0fb884.  v0:= v2.`kotlinx.coroutines.channels.ArrayChannel.d` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L0fb888.  v1:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L0fb88c.  if v0 != v1 then goto L0fb894;
  #L0fb890.  v0:= 1I;
  #L0fb892.  goto L0fb896;
  #L0fb894.  v0:= 0I;
  #L0fb896.  return v0;
}
procedure `boolean` `isClosedForReceive`(`kotlinx.coroutines.channels.ArrayChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isClosedForReceive:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0fb8a8.  v0:= v2.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fb8ac.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fb8b2.  call temp:= `isClosedForReceive`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.isClosedForReceive:()Z` @kind super;
  #L0fb8b8.  v1:= temp;
  #L0fb8ba.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb8c0.  return v1;
  #L0fb8c2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fb8c4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb8ca.  throw v1;
  catch `java.lang.Throwable` @[L0fb8b2..L0fb8ba] goto L0fb8c2;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.channels.ArrayChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0fb8e8.  v0:= v2.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fb8ec.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fb8f2.  call temp:= `isEmptyImpl`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.isEmptyImpl:()Z` @kind virtual;
  #L0fb8f8.  v1:= temp;
  #L0fb8fa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb900.  return v1;
  #L0fb902.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fb904.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb90a.  throw v1;
  catch `java.lang.Throwable` @[L0fb8f2..L0fb8fa] goto L0fb902;
}
procedure `java.lang.Object` `offerInternal`(`kotlinx.coroutines.channels.ArrayChannel` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.offerInternal:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0fb968.  v0:= v4.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fb96c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fb972.  v1:= v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fb976.  call temp:= `getClosedForSend`(v4) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L0fb97c.  v2:= temp @kind object;
  #L0fb97e.  if v2 != 0 then goto L0fb9fa;
  #L0fb982.  call temp:= `s`(v4, v1) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.s:(I)Lkotlinx/coroutines/internal/Symbol;` @kind direct;
  #L0fb988.  v2:= temp @kind object;
  #L0fb98a.  if v2 != 0 then goto L0fb9f2;
  #L0fb98e.  if v1 != 0 then goto L0fb9e0;
  #L0fb992.  call temp:= `takeFirstReceiveOrPeekClosed`(v4) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.takeFirstReceiveOrPeekClosed:()Lkotlinx/coroutines/channels/ReceiveOrClosed;` @kind virtual;
  #L0fb998.  v2:= temp @kind object;
  #L0fb99a.  if v2 != 0 then goto L0fb9a0;
  #L0fb99e.  goto L0fb9e0;
  #L0fb9a0.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0fb9a4.  if v3 == 0 then goto L0fb9b4;
  #L0fb9a8.  v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fb9ac.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb9b2.  return v2 @kind object;
  #L0fb9b4.  v3:= 0I;
  #L0fb9b6.  call temp:= `tryResumeReceive`(v2, v5, v3) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.tryResumeReceive:(Ljava/lang/Object;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @kind interface;
  #L0fb9bc.  v3:= temp @kind object;
  #L0fb9be.  if v3 == 0 then goto L0fb992;
  #L0fb9c2.  v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fb9c6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0fb9ca.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb9d0.  call `completeResumeReceive`(v2, v5) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.completeResumeReceive:(Ljava/lang/Object;)V` @kind interface;
  #L0fb9d6.  call temp:= `getOfferResult`(v2) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.getOfferResult:()Ljava/lang/Object;` @kind interface;
  #L0fb9dc.  v5:= temp @kind object;
  #L0fb9de.  return v5 @kind object;
  #L0fb9e0.  call `q`(v4, v1, v5) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.q:(ILjava/lang/Object;)V` @kind direct;
  #L0fb9e6.  v5:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fb9ea.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb9f0.  return v5 @kind object;
  #L0fb9f2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fb9f8.  return v2 @kind object;
  #L0fb9fa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fba00.  return v2 @kind object;
  #L0fba02.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fba04.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fba0a.  throw v5;
  catch `java.lang.Throwable` @[L0fb972..L0fb9ac] goto L0fba02;
  catch `java.lang.Throwable` @[L0fb9b6..L0fb9ca] goto L0fba02;
  catch `java.lang.Throwable` @[L0fb9e0..L0fb9ea] goto L0fba02;
}
procedure `java.lang.Object` `offerSelectInternal`(`kotlinx.coroutines.channels.ArrayChannel` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlinx.coroutines.selects.SelectInstance` v6 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.offerSelectInternal:(Ljava/lang/Object;Lkotlinx/coroutines/selects/SelectInstance;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0fba38.  v0:= v4.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fba3c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fba42.  v1:= v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fba46.  call temp:= `getClosedForSend`(v4) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L0fba4c.  v2:= temp @kind object;
  #L0fba4e.  if v2 != 0 then goto L0fbb36;
  #L0fba52.  call temp:= `s`(v4, v1) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.s:(I)Lkotlinx/coroutines/internal/Symbol;` @kind direct;
  #L0fba58.  v2:= temp @kind object;
  #L0fba5a.  if v2 != 0 then goto L0fbb2e;
  #L0fba5e.  if v1 != 0 then goto L0fbafc;
  #L0fba62.  call temp:= `describeTryOffer`(v4, v5) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.describeTryOffer:(Ljava/lang/Object;)Lkotlinx/coroutines/channels/AbstractSendChannel$TryOfferDesc;` @kind virtual;
  #L0fba68.  v2:= temp @kind object;
  #L0fba6a.  call temp:= `performAtomicTrySelect`(v6, v2) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @kind interface;
  #L0fba70.  v3:= temp @kind object;
  #L0fba72.  if v3 != 0 then goto L0fbaa6;
  #L0fba76.  v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fba7a.  call temp:= `getResult`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L0fba80.  v6:= temp @kind object;
  #L0fba82.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0fba86.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fba8c.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0fba92.  v6:= (`kotlinx.coroutines.channels.ReceiveOrClosed`) v6 @kind object;
  #L0fba96.  call `completeResumeReceive`(v6, v5) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.completeResumeReceive:(Ljava/lang/Object;)V` @kind interface;
  #L0fba9c.  call temp:= `getOfferResult`(v6) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.getOfferResult:()Ljava/lang/Object;` @kind interface;
  #L0fbaa2.  v5:= temp @kind object;
  #L0fbaa4.  return v5 @kind object;
  #L0fbaa6.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbaaa.  if v3 != v2 then goto L0fbab0;
  #L0fbaae.  goto L0fbafc;
  #L0fbab0.  v2:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L0fbab4.  if v3 != v2 then goto L0fbaba;
  #L0fbab8.  goto L0fba62;
  #L0fbaba.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L0fbac0.  v5:= temp @kind object;
  #L0fbac2.  if v3 == v5 then goto L0fbaf0;
  #L0fbac6.  v5:= instanceof @variable v3 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0fbaca.  if v5 == 0 then goto L0fbad0;
  #L0fbace.  goto L0fbaf0;
  #L0fbad0.  v5:= new `java.lang.IllegalStateException`;
  #L0fbad4.  v6:= "performAtomicTrySelect(describeTryOffer) returned " @kind object;
  #L0fbad8.  call temp:= `stringPlus`(v6, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0fbade.  v6:= temp @kind object;
  #L0fbae0.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0fbae6.  v6:= temp @kind object;
  #L0fbae8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0fbaee.  throw v5;
  #L0fbaf0.  v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbaf4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbafa.  return v3 @kind object;
  #L0fbafc.  call temp:= `trySelect`(v6) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @kind interface;
  #L0fbb02.  v6:= temp;
  #L0fbb04.  if v6 != 0 then goto L0fbb1c;
  #L0fbb08.  v4.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbb0c.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L0fbb12.  v5:= temp @kind object;
  #L0fbb14.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbb1a.  return v5 @kind object;
  #L0fbb1c.  call `q`(v4, v1, v5) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.q:(ILjava/lang/Object;)V` @kind direct;
  #L0fbb22.  v5:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbb26.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbb2c.  return v5 @kind object;
  #L0fbb2e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbb34.  return v2 @kind object;
  #L0fbb36.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbb3c.  return v2 @kind object;
  #L0fbb3e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fbb40.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbb46.  throw v5;
  catch `java.lang.Throwable` @[L0fba42..L0fba86] goto L0fbb3e;
  catch `java.lang.Throwable` @[L0fbaa6..L0fbaf4] goto L0fbb3e;
  catch `java.lang.Throwable` @[L0fbafc..L0fbb14] goto L0fbb3e;
  catch `java.lang.Throwable` @[L0fbb1c..L0fbb26] goto L0fbb3e;
}
procedure `void` `onCancelIdempotent`(`kotlinx.coroutines.channels.ArrayChannel` v9 @kind this, `boolean` v10 ) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.onCancelIdempotent:(Z)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0fc070.  v0:= v9.`kotlinx.coroutines.channels.AbstractSendChannel.onUndeliveredElement` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L0fc074.  v1:= v9.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fc078.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fc07e.  v2:= v9.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fc082.  v3:= 0I;
  #L0fc084.  v4:= 0I;
  #L0fc086.  v5:= 0I;
  #L0fc088.  if v5 >= v2 then goto L0fc0ce;
  #L0fc08c.  v5:= v5 + 1;
  #L0fc090.  v6:= v9.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fc094.  v7:= v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fc098.  v6:= v6[v7] @kind object;
  #L0fc09c.  if v0 == 0 then goto L0fc0b0;
  #L0fc0a0.  v7:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fc0a4.  if v6 == v7 then goto L0fc0b0;
  #L0fc0a8.  call temp:= `callUndeliveredElementCatchingException`(v0, v6, v4) @signature `Lkotlinx/coroutines/internal/OnUndeliveredElementKt;.callUndeliveredElementCatchingException:(Lkotlin/jvm/functions/Function1;Ljava/lang/Object;Lkotlinx/coroutines/internal/UndeliveredElementException;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind static;
  #L0fc0ae.  v4:= temp @kind object;
  #L0fc0b0.  v6:= v9.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fc0b4.  v7:= v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fc0b8.  v8:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fc0bc.  v6[v7]:= v8 @kind object;
  #L0fc0c0.  v7:= v7 + 1;
  #L0fc0c4.  v6:= length @variable v6;
  #L0fc0c6.  v7:= v7 %% v6 @kind int;
  #L0fc0c8.  v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int` := v7;
  #L0fc0cc.  goto L0fc088;
  #L0fc0ce.  v9.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v3;
  #L0fc0d2.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0fc0d6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fc0dc.  call `onCancelIdempotent`(v9, v10) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.onCancelIdempotent:(Z)V` @kind super;
  #L0fc0e2.  if v4 != 0 then goto L0fc0e8;
  #L0fc0e6.  return @kind void;
  #L0fc0e8.  throw v4;
  #L0fc0ea.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fc0ec.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fc0f2.  throw v10;
  catch `java.lang.Throwable` @[L0fc07e..L0fc0d6] goto L0fc0ea;
}
procedure `java.lang.Object` `pollInternal`(`kotlinx.coroutines.channels.ArrayChannel` v9 @kind this) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.pollInternal:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0fbb7c.  v0:= v9.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fbb80.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fbb86.  v1:= v9.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fbb8a.  if v1 != 0 then goto L0fbba6;
  #L0fbb8e.  call temp:= `getClosedForSend`(v9) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L0fbb94.  v1:= temp @kind object;
  #L0fbb96.  if v1 != 0 then goto L0fbb9e;
  #L0fbb9a.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbb9e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbba4.  return v1 @kind object;
  #L0fbba6.  v2:= v9.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbbaa.  v3:= v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbbae.  v4:= v2[v3] @kind object;
  #L0fbbb2.  v5:= 0I;
  #L0fbbb4.  v2[v3]:= v5 @kind object;
  #L0fbbb8.  v2:= v1 + -1;
  #L0fbbbc.  v9.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v2;
  #L0fbbc0.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbbc4.  v3:= v9.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fbbc8.  v6:= 1I;
  #L0fbbca.  v7:= 0I;
  #L0fbbcc.  if v1 != v3 then goto L0fbc06;
  #L0fbbd0.  v3:= v5 @kind object;
  #L0fbbd2.  call temp:= `takeFirstSendOrPeekClosed`(v9) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.takeFirstSendOrPeekClosed:()Lkotlinx/coroutines/channels/Send;` @kind virtual;
  #L0fbbd8.  v8:= temp @kind object;
  #L0fbbda.  if v8 != 0 then goto L0fbbe2;
  #L0fbbde.  v5:= v3 @kind object;
  #L0fbbe0.  goto L0fbc06;
  #L0fbbe2.  call temp:= `tryResumeSend`(v8, v5) @signature `Lkotlinx/coroutines/channels/Send;.tryResumeSend:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @kind virtual;
  #L0fbbe8.  v3:= temp @kind object;
  #L0fbbea.  if v3 == 0 then goto L0fbbfc;
  #L0fbbee.  call temp:= `getPollResult`(v8) @signature `Lkotlinx/coroutines/channels/Send;.getPollResult:()Ljava/lang/Object;` @kind virtual;
  #L0fbbf4.  v2:= temp @kind object;
  #L0fbbf6.  v5:= v8 @kind object;
  #L0fbbf8.  v7:= 1I;
  #L0fbbfa.  goto L0fbc06;
  #L0fbbfc.  call `undeliveredElement`(v8) @signature `Lkotlinx/coroutines/channels/Send;.undeliveredElement:()V` @kind virtual;
  #L0fbc02.  v3:= v8 @kind object;
  #L0fbc04.  goto L0fbbd2;
  #L0fbc06.  v3:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbc0a.  if v2 == v3 then goto L0fbc2c;
  #L0fbc0e.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0fbc12.  if v3 != 0 then goto L0fbc2c;
  #L0fbc16.  v9.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbc1a.  v3:= v9.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbc1e.  v8:= v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbc22.  v8:= v8 + v1 @kind int;
  #L0fbc24.  v1:= length @variable v3;
  #L0fbc26.  v8:= v8 %% v1 @kind int;
  #L0fbc28.  v3[v8]:= v2 @kind object;
  #L0fbc2c.  v1:= v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbc30.  v1:= v1 + v6 @kind int;
  #L0fbc32.  v2:= v9.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbc36.  v2:= length @variable v2;
  #L0fbc38.  v1:= v1 %% v2 @kind int;
  #L0fbc3a.  v9.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int` := v1;
  #L0fbc3e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0fbc42.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbc48.  if v7 == 0 then goto L0fbc58;
  #L0fbc4c.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0fbc52.  call `completeResumeSend`(v5) @signature `Lkotlinx/coroutines/channels/Send;.completeResumeSend:()V` @kind virtual;
  #L0fbc58.  return v4 @kind object;
  #L0fbc5a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fbc5c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbc62.  throw v1;
  catch `java.lang.Throwable` @[L0fbb86..L0fbb9e] goto L0fbc5a;
  catch `java.lang.Throwable` @[L0fbba6..L0fbc42] goto L0fbc5a;
}
procedure `java.lang.Object` `pollSelectInternal`(`kotlinx.coroutines.channels.ArrayChannel` v8 @kind this, `kotlinx.coroutines.selects.SelectInstance` v9 @kind object) @signature `Lkotlinx/coroutines/channels/ArrayChannel;.pollSelectInternal:(Lkotlinx/coroutines/selects/SelectInstance;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0fbc88.  v0:= v8.`kotlinx.coroutines.channels.ArrayChannel.e` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L0fbc8c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L0fbc92.  v1:= v8.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int`;
  #L0fbc96.  if v1 != 0 then goto L0fbcb2;
  #L0fbc9a.  call temp:= `getClosedForSend`(v8) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L0fbca0.  v9:= temp @kind object;
  #L0fbca2.  if v9 != 0 then goto L0fbcaa;
  #L0fbca6.  v9:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbcaa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbcb0.  return v9 @kind object;
  #L0fbcb2.  v2:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbcb6.  v3:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbcba.  v4:= v2[v3] @kind object;
  #L0fbcbe.  v5:= 0I;
  #L0fbcc0.  v2[v3]:= v5 @kind object;
  #L0fbcc4.  v2:= v1 + -1;
  #L0fbcc8.  v8.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v2;
  #L0fbccc.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbcd0.  v3:= v8.`kotlinx.coroutines.channels.ArrayChannel.c` @type ^`int`;
  #L0fbcd4.  v6:= 1I;
  #L0fbcd6.  if v1 != v3 then goto L0fbd74;
  #L0fbcda.  call temp:= `describeTryPoll`(v8) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.describeTryPoll:()Lkotlinx/coroutines/channels/AbstractChannel$TryPollDesc;` @kind virtual;
  #L0fbce0.  v3:= temp @kind object;
  #L0fbce2.  call temp:= `performAtomicTrySelect`(v9, v3) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @kind interface;
  #L0fbce8.  v7:= temp @kind object;
  #L0fbcea.  if v7 != 0 then goto L0fbd0e;
  #L0fbcee.  call temp:= `getResult`(v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L0fbcf4.  v5:= temp @kind object;
  #L0fbcf6.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0fbcfc.  v2:= v5 @kind object;
  #L0fbcfe.  v2:= (`kotlinx.coroutines.channels.Send`) v2 @kind object;
  #L0fbd02.  call temp:= `getPollResult`(v2) @signature `Lkotlinx/coroutines/channels/Send;.getPollResult:()Ljava/lang/Object;` @kind virtual;
  #L0fbd08.  v2:= temp @kind object;
  #L0fbd0a.  v3:= 1I;
  #L0fbd0c.  goto L0fbd76;
  #L0fbd0e.  v3:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbd12.  if v7 != v3 then goto L0fbd18;
  #L0fbd16.  goto L0fbd74;
  #L0fbd18.  v3:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L0fbd1c.  if v7 != v3 then goto L0fbd22;
  #L0fbd20.  goto L0fbcda;
  #L0fbd22.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L0fbd28.  v2:= temp @kind object;
  #L0fbd2a.  if v7 != v2 then goto L0fbd46;
  #L0fbd2e.  v8.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbd32.  v9:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbd36.  v1:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbd3a.  v9[v1]:= v4 @kind object;
  #L0fbd3e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbd44.  return v7 @kind object;
  #L0fbd46.  v2:= instanceof @variable v7 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0fbd4a.  if v2 == 0 then goto L0fbd54;
  #L0fbd4e.  v2:= v7 @kind object;
  #L0fbd50.  v5:= v2 @kind object;
  #L0fbd52.  goto L0fbd0a;
  #L0fbd54.  v9:= new `java.lang.IllegalStateException`;
  #L0fbd58.  v1:= "performAtomicTrySelect(describeTryOffer) returned " @kind object;
  #L0fbd5c.  call temp:= `stringPlus`(v1, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L0fbd62.  v1:= temp @kind object;
  #L0fbd64.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0fbd6a.  v1:= temp @kind object;
  #L0fbd6c.  call `<init>`(v9, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0fbd72.  throw v9;
  #L0fbd74.  v3:= 0I;
  #L0fbd76.  v7:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0fbd7a.  if v2 == v7 then goto L0fbd9e;
  #L0fbd7e.  v7:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0fbd82.  if v7 != 0 then goto L0fbd9e;
  #L0fbd86.  v8.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbd8a.  v9:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbd8e.  v7:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbd92.  v7:= v7 + v1 @kind int;
  #L0fbd94.  v1:= length @variable v9;
  #L0fbd96.  v7:= v7 %% v1 @kind int;
  #L0fbd98.  v9[v7]:= v2 @kind object;
  #L0fbd9c.  goto L0fbdca;
  #L0fbd9e.  call temp:= `trySelect`(v9) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @kind interface;
  #L0fbda4.  v9:= temp;
  #L0fbda6.  if v9 != 0 then goto L0fbdca;
  #L0fbdaa.  v8.`kotlinx.coroutines.channels.ArrayChannel.size` @type ^`int` := v1;
  #L0fbdae.  v9:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbdb2.  v1:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbdb6.  v9[v1]:= v4 @kind object;
  #L0fbdba.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L0fbdc0.  v9:= temp @kind object;
  #L0fbdc2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbdc8.  return v9 @kind object;
  #L0fbdca.  v9:= v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int`;
  #L0fbdce.  v9:= v9 + v6 @kind int;
  #L0fbdd0.  v1:= v8.`kotlinx.coroutines.channels.ArrayChannel.f` @type ^`java.lang.Object`[] @kind object;
  #L0fbdd4.  v1:= length @variable v1;
  #L0fbdd6.  v9:= v9 %% v1 @kind int;
  #L0fbdd8.  v8.`kotlinx.coroutines.channels.ArrayChannel.g` @type ^`int` := v9;
  #L0fbddc.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0fbde0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbde6.  if v3 == 0 then goto L0fbdfa;
  #L0fbdea.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0fbdf0.  v5:= (`kotlinx.coroutines.channels.Send`) v5 @kind object;
  #L0fbdf4.  call `completeResumeSend`(v5) @signature `Lkotlinx/coroutines/channels/Send;.completeResumeSend:()V` @kind virtual;
  #L0fbdfa.  return v4 @kind object;
  #L0fbdfc.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0fbdfe.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L0fbe04.  throw v9;
  catch `java.lang.Throwable` @[L0fbc92..L0fbcaa] goto L0fbdfc;
  catch `java.lang.Throwable` @[L0fbcb2..L0fbd3e] goto L0fbdfc;
  catch `java.lang.Throwable` @[L0fbd46..L0fbdc2] goto L0fbdfc;
  catch `java.lang.Throwable` @[L0fbdca..L0fbde0] goto L0fbdfc;
}
