record `kotlinx.coroutines.channels.TickerChannelsKt$ticker$3$WhenMappings` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
global `int`[] `@@kotlinx.coroutines.channels.TickerChannelsKt$ticker$3$WhenMappings.$EnumSwitchMapping$0` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/channels/TickerChannelsKt$ticker$3$WhenMappings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L104ed4.  call temp:= `values`() @signature `Lkotlinx/coroutines/channels/TickerMode;.values:()[Lkotlinx/coroutines/channels/TickerMode;` @kind static;
  #L104eda.  v0:= temp @kind object;
  #L104edc.  v0:= length @variable v0;
  #L104ede.  v0:= new `int`[v0];
  #L104ee2.  v1:= `@@kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD` @type ^`kotlinx.coroutines.channels.TickerMode` @kind object;
  #L104ee6.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L104eec.  v1:= temp;
  #L104eee.  v2:= 1I;
  #L104ef0.  v0[v1]:= v2;
  #L104ef4.  v1:= `@@kotlinx.coroutines.channels.TickerMode.FIXED_DELAY` @type ^`kotlinx.coroutines.channels.TickerMode` @kind object;
  #L104ef8.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L104efe.  v1:= temp;
  #L104f00.  v2:= 2I;
  #L104f02.  v0[v1]:= v2;
  #L104f06.  `@@kotlinx.coroutines.channels.TickerChannelsKt$ticker$3$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] := v0 @kind object;
  #L104f0a.  return @kind void;
}
