record `kotlinx.coroutines.channels.ConflatedChannel` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.channels.AbstractChannel` @kind class {
  `java.util.concurrent.locks.ReentrantLock` `kotlinx.coroutines.channels.ConflatedChannel.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.channels.ConflatedChannel.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.ConflatedChannel` v0 @kind this, `kotlin.jvm.functions.Function1` v1 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.<init>:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L103e44.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L103e4a.  v1:= new `java.util.concurrent.locks.ReentrantLock`;
  #L103e4e.  call `<init>`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L103e54.  v0.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` := v1 @kind object;
  #L103e58.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103e5c.  v0.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` := v1 @kind object;
  #L103e60.  return @kind void;
}
procedure `kotlinx.coroutines.internal.UndeliveredElementException` `q`(`kotlinx.coroutines.channels.ConflatedChannel` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.q:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L103e08.  v0:= v4.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103e0c.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103e10.  v2:= 0I;
  #L103e12.  if v0 != v1 then goto L103e18;
  #L103e16.  goto L103e2c;
  #L103e18.  v1:= v4.`kotlinx.coroutines.channels.AbstractSendChannel.onUndeliveredElement` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L103e1c.  if v1 != 0 then goto L103e22;
  #L103e20.  goto L103e2c;
  #L103e22.  v3:= 2I;
  #L103e24.  call temp:= `callUndeliveredElementCatchingException$default`(v1, v0, v2, v3, v2) @signature `Lkotlinx/coroutines/internal/OnUndeliveredElementKt;.callUndeliveredElementCatchingException$default:(Lkotlin/jvm/functions/Function1;Ljava/lang/Object;Lkotlinx/coroutines/internal/UndeliveredElementException;ILjava/lang/Object;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind static;
  #L103e2a.  v2:= temp @kind object;
  #L103e2c.  v4.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` := v5 @kind object;
  #L103e30.  return v2 @kind object;
}
procedure `boolean` `enqueueReceiveInternal`(`kotlinx.coroutines.channels.ConflatedChannel` v1 @kind this, `kotlinx.coroutines.channels.Receive` v2 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.enqueueReceiveInternal:(Lkotlinx/coroutines/channels/Receive;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1039e4.  v0:= v1.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1039e8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1039ee.  call temp:= `enqueueReceiveInternal`(v1, v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.enqueueReceiveInternal:(Lkotlinx/coroutines/channels/Receive;)Z` @kind super;
  #L1039f4.  v2:= temp;
  #L1039f6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1039fc.  return v2;
  #L1039fe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103a00.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103a06.  throw v2;
  catch `java.lang.Throwable` @[L1039ee..L1039f6] goto L1039fe;
}
procedure `java.lang.String` `getBufferDebugString`(`kotlinx.coroutines.channels.ConflatedChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.getBufferDebugString:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L103dc4.  v0:= new `java.lang.StringBuilder`;
  #L103dc8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L103dce.  v1:= "(value=" @kind object;
  #L103dd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L103dd8.  v1:= v2.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103ddc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L103de2.  v1:= 41I;
  #L103de6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L103dec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L103df2.  v0:= temp @kind object;
  #L103df4.  return v0 @kind object;
}
procedure `boolean` `isBufferAlwaysEmpty`(`kotlinx.coroutines.channels.ConflatedChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.isBufferAlwaysEmpty:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L103a24.  v0:= 0I;
  #L103a26.  return v0;
}
procedure `boolean` `isBufferAlwaysFull`(`kotlinx.coroutines.channels.ConflatedChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.isBufferAlwaysFull:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L103a38.  v0:= 0I;
  #L103a3a.  return v0;
}
procedure `boolean` `isBufferEmpty`(`kotlinx.coroutines.channels.ConflatedChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.isBufferEmpty:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L103a4c.  v0:= v2.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103a50.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103a54.  if v0 != v1 then goto L103a5c;
  #L103a58.  v0:= 1I;
  #L103a5a.  goto L103a5e;
  #L103a5c.  v0:= 0I;
  #L103a5e.  return v0;
}
procedure `boolean` `isBufferFull`(`kotlinx.coroutines.channels.ConflatedChannel` v1 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.isBufferFull:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L103a70.  v0:= 0I;
  #L103a72.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.channels.ConflatedChannel` v2 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L103a84.  v0:= v2.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103a88.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103a8e.  call temp:= `isEmptyImpl`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.isEmptyImpl:()Z` @kind virtual;
  #L103a94.  v1:= temp;
  #L103a96.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103a9c.  return v1;
  #L103a9e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103aa0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103aa6.  throw v1;
  catch `java.lang.Throwable` @[L103a8e..L103a96] goto L103a9e;
}
procedure `java.lang.Object` `offerInternal`(`kotlinx.coroutines.channels.ConflatedChannel` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.offerInternal:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L103ac4.  v0:= v3.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103ac8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103ace.  call temp:= `getClosedForSend`(v3) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L103ad4.  v1:= temp @kind object;
  #L103ad6.  if v1 != 0 then goto L103b46;
  #L103ada.  v1:= v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103ade.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103ae2.  if v1 != v2 then goto L103b2c;
  #L103ae6.  call temp:= `takeFirstReceiveOrPeekClosed`(v3) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.takeFirstReceiveOrPeekClosed:()Lkotlinx/coroutines/channels/ReceiveOrClosed;` @kind virtual;
  #L103aec.  v1:= temp @kind object;
  #L103aee.  if v1 != 0 then goto L103af4;
  #L103af2.  goto L103b2c;
  #L103af4.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L103af8.  if v2 == 0 then goto L103b04;
  #L103afc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103b02.  return v1 @kind object;
  #L103b04.  v2:= 0I;
  #L103b06.  call temp:= `tryResumeReceive`(v1, v4, v2) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.tryResumeReceive:(Ljava/lang/Object;Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @kind interface;
  #L103b0c.  v2:= temp @kind object;
  #L103b0e.  if v2 == 0 then goto L103ae6;
  #L103b12.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L103b16.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103b1c.  call `completeResumeReceive`(v1, v4) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.completeResumeReceive:(Ljava/lang/Object;)V` @kind interface;
  #L103b22.  call temp:= `getOfferResult`(v1) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.getOfferResult:()Ljava/lang/Object;` @kind interface;
  #L103b28.  v4:= temp @kind object;
  #L103b2a.  return v4 @kind object;
  #L103b2c.  call temp:= `q`(v3, v4) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.q:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind direct;
  #L103b32.  v4:= temp @kind object;
  #L103b34.  if v4 != 0 then goto L103b44;
  #L103b38.  v4:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103b3c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103b42.  return v4 @kind object;
  #L103b44.  throw v4;
  #L103b46.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103b4c.  return v1 @kind object;
  #L103b4e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103b50.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103b56.  throw v4;
  catch `java.lang.Throwable` @[L103ace..L103af8] goto L103b4e;
  catch `java.lang.Throwable` @[L103b06..L103b16] goto L103b4e;
  catch `java.lang.Throwable` @[L103b2c..L103b3c] goto L103b4e;
  catch `java.lang.Throwable` @[L103b44..L103b46] goto L103b4e;
}
procedure `java.lang.Object` `offerSelectInternal`(`kotlinx.coroutines.channels.ConflatedChannel` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlinx.coroutines.selects.SelectInstance` v5 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.offerSelectInternal:(Ljava/lang/Object;Lkotlinx/coroutines/selects/SelectInstance;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L103b8c.  v0:= v3.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103b90.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103b96.  call temp:= `getClosedForSend`(v3) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L103b9c.  v1:= temp @kind object;
  #L103b9e.  if v1 != 0 then goto L103c76;
  #L103ba2.  v1:= v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103ba6.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103baa.  if v1 != v2 then goto L103c40;
  #L103bae.  call temp:= `describeTryOffer`(v3, v4) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.describeTryOffer:(Ljava/lang/Object;)Lkotlinx/coroutines/channels/AbstractSendChannel$TryOfferDesc;` @kind virtual;
  #L103bb4.  v1:= temp @kind object;
  #L103bb6.  call temp:= `performAtomicTrySelect`(v5, v1) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @kind interface;
  #L103bbc.  v2:= temp @kind object;
  #L103bbe.  if v2 != 0 then goto L103bee;
  #L103bc2.  call temp:= `getResult`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L103bc8.  v5:= temp @kind object;
  #L103bca.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L103bce.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103bd4.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L103bda.  v5:= (`kotlinx.coroutines.channels.ReceiveOrClosed`) v5 @kind object;
  #L103bde.  call `completeResumeReceive`(v5, v4) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.completeResumeReceive:(Ljava/lang/Object;)V` @kind interface;
  #L103be4.  call temp:= `getOfferResult`(v5) @signature `Lkotlinx/coroutines/channels/ReceiveOrClosed;.getOfferResult:()Ljava/lang/Object;` @kind interface;
  #L103bea.  v4:= temp @kind object;
  #L103bec.  return v4 @kind object;
  #L103bee.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103bf2.  if v2 != v1 then goto L103bf8;
  #L103bf6.  goto L103c40;
  #L103bf8.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L103bfc.  if v2 != v1 then goto L103c02;
  #L103c00.  goto L103bae;
  #L103c02.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L103c08.  v4:= temp @kind object;
  #L103c0a.  if v2 == v4 then goto L103c38;
  #L103c0e.  v4:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L103c12.  if v4 == 0 then goto L103c18;
  #L103c16.  goto L103c38;
  #L103c18.  v4:= new `java.lang.IllegalStateException`;
  #L103c1c.  v5:= "performAtomicTrySelect(describeTryOffer) returned " @kind object;
  #L103c20.  call temp:= `stringPlus`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L103c26.  v5:= temp @kind object;
  #L103c28.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L103c2e.  v5:= temp @kind object;
  #L103c30.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L103c36.  throw v4;
  #L103c38.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103c3e.  return v2 @kind object;
  #L103c40.  call temp:= `trySelect`(v5) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @kind interface;
  #L103c46.  v5:= temp;
  #L103c48.  if v5 != 0 then goto L103c5c;
  #L103c4c.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L103c52.  v4:= temp @kind object;
  #L103c54.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103c5a.  return v4 @kind object;
  #L103c5c.  call temp:= `q`(v3, v4) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.q:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind direct;
  #L103c62.  v4:= temp @kind object;
  #L103c64.  if v4 != 0 then goto L103c74;
  #L103c68.  v4:= `@@kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103c6c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103c72.  return v4 @kind object;
  #L103c74.  throw v4;
  #L103c76.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103c7c.  return v1 @kind object;
  #L103c7e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103c80.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103c86.  throw v4;
  catch `java.lang.Throwable` @[L103b96..L103bce] goto L103c7e;
  catch `java.lang.Throwable` @[L103bee..L103c38] goto L103c7e;
  catch `java.lang.Throwable` @[L103c40..L103c54] goto L103c7e;
  catch `java.lang.Throwable` @[L103c5c..L103c6c] goto L103c7e;
  catch `java.lang.Throwable` @[L103c74..L103c76] goto L103c7e;
}
procedure `void` `onCancelIdempotent`(`kotlinx.coroutines.channels.ConflatedChannel` v3 @kind this, `boolean` v4 ) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.onCancelIdempotent:(Z)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L103e74.  v0:= v3.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103e78.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103e7e.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103e82.  call temp:= `q`(v3, v1) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.q:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind direct;
  #L103e88.  v1:= temp @kind object;
  #L103e8a.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L103e8e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103e94.  call `onCancelIdempotent`(v3, v4) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.onCancelIdempotent:(Z)V` @kind super;
  #L103e9a.  if v1 != 0 then goto L103ea0;
  #L103e9e.  return @kind void;
  #L103ea0.  throw v1;
  #L103ea2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103ea4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103eaa.  throw v4;
  catch `java.lang.Throwable` @[L103e7e..L103e8e] goto L103ea2;
}
procedure `java.lang.Object` `pollInternal`(`kotlinx.coroutines.channels.ConflatedChannel` v3 @kind this) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.pollInternal:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L103cc4.  v0:= v3.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103cc8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103cce.  v1:= v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103cd2.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103cd6.  if v1 != v2 then goto L103cf2;
  #L103cda.  call temp:= `getClosedForSend`(v3) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L103ce0.  v1:= temp @kind object;
  #L103ce2.  if v1 != 0 then goto L103cea;
  #L103ce6.  v1:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103cea.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103cf0.  return v1 @kind object;
  #L103cf2.  v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` := v2 @kind object;
  #L103cf6.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L103cfa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d00.  return v1 @kind object;
  #L103d02.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103d04.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d0a.  throw v1;
  catch `java.lang.Throwable` @[L103cce..L103cea] goto L103d02;
  catch `java.lang.Throwable` @[L103cf2..L103cfa] goto L103d02;
}
procedure `java.lang.Object` `pollSelectInternal`(`kotlinx.coroutines.channels.ConflatedChannel` v3 @kind this, `kotlinx.coroutines.selects.SelectInstance` v4 @kind object) @signature `Lkotlinx/coroutines/channels/ConflatedChannel;.pollSelectInternal:(Lkotlinx/coroutines/selects/SelectInstance;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L103d30.  v0:= v3.`kotlinx.coroutines.channels.ConflatedChannel.c` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L103d34.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L103d3a.  v1:= v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103d3e.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.EMPTY` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103d42.  if v1 != v2 then goto L103d5e;
  #L103d46.  call temp:= `getClosedForSend`(v3) @signature `Lkotlinx/coroutines/channels/AbstractSendChannel;.getClosedForSend:()Lkotlinx/coroutines/channels/Closed;` @kind virtual;
  #L103d4c.  v4:= temp @kind object;
  #L103d4e.  if v4 != 0 then goto L103d56;
  #L103d52.  v4:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L103d56.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d5c.  return v4 @kind object;
  #L103d5e.  call temp:= `trySelect`(v4) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @kind interface;
  #L103d64.  v4:= temp;
  #L103d66.  if v4 != 0 then goto L103d7a;
  #L103d6a.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L103d70.  v4:= temp @kind object;
  #L103d72.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d78.  return v4 @kind object;
  #L103d7a.  v4:= v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` @kind object;
  #L103d7e.  v3.`kotlinx.coroutines.channels.ConflatedChannel.d` @type ^`java.lang.Object` := v2 @kind object;
  #L103d82.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L103d86.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d8c.  return v4 @kind object;
  #L103d8e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L103d90.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L103d96.  throw v4;
  catch `java.lang.Throwable` @[L103d3a..L103d56] goto L103d8e;
  catch `java.lang.Throwable` @[L103d5e..L103d72] goto L103d8e;
  catch `java.lang.Throwable` @[L103d7a..L103d86] goto L103d8e;
}
