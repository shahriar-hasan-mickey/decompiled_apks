record `kotlinx.coroutines.channels.AbstractChannel$TryPollDesc` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.AbstractChannel$TryPollDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListHead` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$TryPollDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListHead;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f8e54.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$RemoveFirstDesc;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L0f8e5a.  return @kind void;
}
procedure `java.lang.Object` `failure`(`kotlinx.coroutines.channels.AbstractChannel$TryPollDesc` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$TryPollDesc;.failure:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0f8df0.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Closed` @kind boolean;
  #L0f8df4.  if v0 == 0 then goto L0f8dfa;
  #L0f8df8.  goto L0f8e0a;
  #L0f8dfa.  v2:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.Send` @kind boolean;
  #L0f8dfe.  if v2 != 0 then goto L0f8e08;
  #L0f8e02.  v2:= `@@kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L0f8e06.  goto L0f8e0a;
  #L0f8e08.  v2:= 0I;
  #L0f8e0a.  return v2 @kind object;
}
procedure `java.lang.Object` `onPrepare`(`kotlinx.coroutines.channels.AbstractChannel$TryPollDesc` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$TryPollDesc;.onPrepare:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f8e1c.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp.affected` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L0f8e20.  v0:= (`kotlinx.coroutines.channels.Send`) v0 @kind object;
  #L0f8e24.  call temp:= `tryResumeSend`(v0, v2) @signature `Lkotlinx/coroutines/channels/Send;.tryResumeSend:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode$PrepareOp;)Lkotlinx/coroutines/internal/Symbol;` @kind virtual;
  #L0f8e2a.  v2:= temp @kind object;
  #L0f8e2c.  if v2 != 0 then goto L0f8e36;
  #L0f8e30.  v2:= `@@kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED` @type ^`java.lang.Object` @kind object;
  #L0f8e34.  return v2 @kind object;
  #L0f8e36.  v0:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L0f8e3a.  if v2 != v0 then goto L0f8e40;
  #L0f8e3e.  return v0 @kind object;
  #L0f8e40.  v2:= 0I;
  #L0f8e42.  return v2 @kind object;
}
procedure `void` `onRemoved`(`kotlinx.coroutines.channels.AbstractChannel$TryPollDesc` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$TryPollDesc;.onRemoved:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC {
    temp;

  #L0f8e6c.  v1:= (`kotlinx.coroutines.channels.Send`) v1 @kind object;
  #L0f8e70.  call `undeliveredElement`(v1) @signature `Lkotlinx/coroutines/channels/Send;.undeliveredElement:()V` @kind virtual;
  #L0f8e76.  return @kind void;
}
