record `kotlinx.coroutines.ThreadPoolDispatcherKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Thread` `a`(`int` v0 , `java.lang.String` v1 @kind object, `java.util.concurrent.atomic.AtomicInteger` v2 @kind object, `java.lang.Runnable` v3 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.a:(ILjava/lang/String;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0f718c.  call temp:= `b`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.b:(ILjava/lang/String;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind static;
  #L0f7192.  v0:= temp @kind object;
  #L0f7194.  return v0 @kind object;
}
procedure `java.lang.Thread` `b`(`int` v2 , `java.lang.String` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `java.lang.Runnable` v5 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.b:(ILjava/lang/String;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0f71a8.  v0:= new `java.lang.Thread`;
  #L0f71ac.  v1:= 1I;
  #L0f71ae.  if v2 != v1 then goto L0f71b4;
  #L0f71b2.  goto L0f71e4;
  #L0f71b4.  v2:= new `java.lang.StringBuilder`;
  #L0f71b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0f71be.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f71c4.  v3:= 45I;
  #L0f71c8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f71ce.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L0f71d4.  v3:= temp;
  #L0f71d6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f71dc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f71e2.  v3:= temp @kind object;
  #L0f71e4.  call `<init>`(v0, v5, v3) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L0f71ea.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L0f71f0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.ExecutorCoroutineDispatcher` `newFixedThreadPoolContext`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.newFixedThreadPoolContext:(ILjava/lang/String;)Lkotlinx/coroutines/ExecutorCoroutineDispatcher;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L0f7204.  v0:= 1I;
  #L0f7206.  if v2 < v0 then goto L0f720c;
  #L0f720a.  goto L0f720e;
  #L0f720c.  v0:= 0I;
  #L0f720e.  if v0 == 0 then goto L0f7238;
  #L0f7212.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L0f7216.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L0f721c.  v1:= new `kotlinx.coroutines.h0`;
  #L0f7220.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlinx/coroutines/h0;.<init>:(ILjava/lang/String;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L0f7226.  call temp:= `newScheduledThreadPool`(v2, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L0f722c.  v2:= temp @kind object;
  #L0f722e.  call temp:= `from`(v2) @signature `Lkotlinx/coroutines/ExecutorsKt;.from:(Ljava/util/concurrent/ExecutorService;)Lkotlinx/coroutines/ExecutorCoroutineDispatcher;` @kind static;
  #L0f7234.  v2:= temp @kind object;
  #L0f7236.  return v2 @kind object;
  #L0f7238.  v3:= new `java.lang.StringBuilder`;
  #L0f723c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0f7242.  v0:= "Expected at least one thread, but " @kind object;
  #L0f7246.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f724c.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f7252.  v2:= " specified" @kind object;
  #L0f7256.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f725c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f7262.  v2:= temp @kind object;
  #L0f7264.  v3:= new `java.lang.IllegalArgumentException`;
  #L0f7268.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f726e.  v2:= temp @kind object;
  #L0f7270.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f7276.  throw v3;
}
procedure `kotlinx.coroutines.ExecutorCoroutineDispatcher` `newSingleThreadContext`(`java.lang.String` v1 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.newSingleThreadContext:(Ljava/lang/String;)Lkotlinx/coroutines/ExecutorCoroutineDispatcher;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L0f7288.  v0:= 1I;
  #L0f728a.  call temp:= `newFixedThreadPoolContext`(v0, v1) @signature `Lkotlinx/coroutines/ThreadPoolDispatcherKt;.newFixedThreadPoolContext:(ILjava/lang/String;)Lkotlinx/coroutines/ExecutorCoroutineDispatcher;` @kind static;
  #L0f7290.  v1:= temp @kind object;
  #L0f7292.  return v1 @kind object;
}
