record `kotlinx.coroutines.EventLoop` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
  `long` `kotlinx.coroutines.EventLoop.a` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.EventLoop.b` @AccessFlag PRIVATE;
  `kotlinx.coroutines.internal.ArrayQueue` `kotlinx.coroutines.EventLoop.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.EventLoop` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f271c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L0f2722.  return @kind void;
}
procedure `long` `a`(`kotlinx.coroutines.EventLoop` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L0f268c.  if v3 == 0 then goto L0f269c;
  #L0f2690.  v0:= 4294967296L;
  #L0f269a.  goto L0f26a0;
  #L0f269c.  v0:= 1L;
  #L0f26a0.  return v0 @kind wide;
}
procedure `void` `decrementUseCount$default`(`kotlinx.coroutines.EventLoop` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0f2734.  if v3 != 0 then goto L0f274a;
  #L0f2738.  v2:= v2 ^& 1;
  #L0f273c.  if v2 == 0 then goto L0f2742;
  #L0f2740.  v1:= 0I;
  #L0f2742.  call `decrementUseCount`(v0, v1) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount:(Z)V` @kind virtual;
  #L0f2748.  return @kind void;
  #L0f274a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0f274e.  v1:= "Super calls with default arguments not supported in this target, function: decrementUseCount" @kind object;
  #L0f2752.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f2758.  throw v0;
}
procedure `void` `incrementUseCount$default`(`kotlinx.coroutines.EventLoop` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L0f27dc.  if v3 != 0 then goto L0f27f2;
  #L0f27e0.  v2:= v2 ^& 1;
  #L0f27e4.  if v2 == 0 then goto L0f27ea;
  #L0f27e8.  v1:= 0I;
  #L0f27ea.  call `incrementUseCount`(v0, v1) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount:(Z)V` @kind virtual;
  #L0f27f0.  return @kind void;
  #L0f27f2.  v0:= new `java.lang.UnsupportedOperationException`;
  #L0f27f6.  v1:= "Super calls with default arguments not supported in this target, function: incrementUseCount" @kind object;
  #L0f27fa.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f2800.  throw v0;
}
procedure `void` `decrementUseCount`(`kotlinx.coroutines.EventLoop` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0f276c.  v0:= v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L0f2770.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L0f2776.  v2:= temp @kind wide;
  #L0f2778.  v0:= v0 - v2 @kind long;
  #L0f277a.  v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` := v0 @kind wide;
  #L0f277e.  v2:= 0L;
  #L0f2782.  v5:= lcmp(v0, v2);
  #L0f2786.  if v5 <= 0 then goto L0f278c;
  #L0f278a.  return @kind void;
  #L0f278c.  v5:= v4.`kotlinx.coroutines.EventLoop.b` @type ^`boolean` @kind boolean;
  #L0f2790.  if v5 == 0 then goto L0f279a;
  #L0f2794.  call `shutdown`(v4) @signature `Lkotlinx/coroutines/EventLoop;.shutdown:()V` @kind virtual;
  #L0f279a.  return @kind void;
}
procedure `void` `dispatchUnconfined`(`kotlinx.coroutines.EventLoop` v1 @kind this, `kotlinx.coroutines.DispatchedTask` v2 @kind object) @signature `Lkotlinx/coroutines/EventLoop;.dispatchUnconfined:(Lkotlinx/coroutines/DispatchedTask;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0f27ac.  v0:= v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L0f27b0.  if v0 != 0 then goto L0f27c2;
  #L0f27b4.  v0:= new `kotlinx.coroutines.internal.ArrayQueue`;
  #L0f27b8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.<init>:()V` @kind direct;
  #L0f27be.  v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` := v0 @kind object;
  #L0f27c2.  call `addLast`(v0, v2) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L0f27c8.  return @kind void;
}
procedure `long` `getNextTime`(`kotlinx.coroutines.EventLoop` v3 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.getNextTime:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L0f26b4.  v0:= v3.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L0f26b8.  v1:= 9223372036854775807L;
  #L0f26c2.  if v0 != 0 then goto L0f26c8;
  #L0f26c6.  return v1 @kind wide;
  #L0f26c8.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.isEmpty:()Z` @kind virtual;
  #L0f26ce.  v0:= temp;
  #L0f26d0.  if v0 == 0 then goto L0f26d6;
  #L0f26d4.  goto L0f26da;
  #L0f26d6.  v1:= 0L;
  #L0f26da.  return v1 @kind wide;
}
procedure `void` `incrementUseCount`(`kotlinx.coroutines.EventLoop` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0f2814.  v0:= v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L0f2818.  call temp:= `a`(v4, v5) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L0f281e.  v2:= temp @kind wide;
  #L0f2820.  v0:= v0 + v2 @kind long;
  #L0f2822.  v4.`kotlinx.coroutines.EventLoop.a` @type ^`long` := v0 @kind wide;
  #L0f2826.  if v5 != 0 then goto L0f2830;
  #L0f282a.  v5:= 1I;
  #L0f282c.  v4.`kotlinx.coroutines.EventLoop.b` @type ^`boolean` := v5 @kind boolean;
  #L0f2830.  return @kind void;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.EventLoop` v5 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isActive:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0f2590.  v0:= v5.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L0f2594.  v2:= 0L;
  #L0f2598.  v4:= lcmp(v0, v2);
  #L0f259c.  if v4 <= 0 then goto L0f25a4;
  #L0f25a0.  v0:= 1I;
  #L0f25a2.  goto L0f25a6;
  #L0f25a4.  v0:= 0I;
  #L0f25a6.  return v0;
}
procedure `boolean` `isEmpty`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isEmpty:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0f25b8.  call temp:= `isUnconfinedQueueEmpty`(v1) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedQueueEmpty:()Z` @kind virtual;
  #L0f25be.  v0:= temp;
  #L0f25c0.  return v0;
}
procedure `boolean` `isUnconfinedLoopActive`(`kotlinx.coroutines.EventLoop` v6 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedLoopActive:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0f25d4.  v0:= v6.`kotlinx.coroutines.EventLoop.a` @type ^`long` @kind wide;
  #L0f25d8.  v2:= 1I;
  #L0f25da.  call temp:= `a`(v6, v2) @signature `Lkotlinx/coroutines/EventLoop;.a:(Z)J` @kind direct;
  #L0f25e0.  v3:= temp @kind wide;
  #L0f25e2.  v5:= lcmp(v0, v3);
  #L0f25e6.  if v5 < 0 then goto L0f25ec;
  #L0f25ea.  goto L0f25ee;
  #L0f25ec.  v2:= 0I;
  #L0f25ee.  return v2;
}
procedure `boolean` `isUnconfinedQueueEmpty`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.isUnconfinedQueueEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0f2600.  v0:= v1.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L0f2604.  if v0 != 0 then goto L0f260c;
  #L0f2608.  v0:= 1I;
  #L0f260a.  goto L0f2614;
  #L0f260c.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.isEmpty:()Z` @kind virtual;
  #L0f2612.  v0:= temp;
  #L0f2614.  return v0;
}
procedure `kotlinx.coroutines.CoroutineDispatcher` `limitedParallelism`(`kotlinx.coroutines.EventLoop` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/EventLoop;.limitedParallelism:(I)Lkotlinx/coroutines/CoroutineDispatcher;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L0f2674.  call `checkParallelism`(v1) @signature `Lkotlinx/coroutines/internal/LimitedDispatcherKt;.checkParallelism:(I)V` @kind static;
  #L0f267a.  return v0 @kind object;
}
procedure `long` `processNextEvent`(`kotlinx.coroutines.EventLoop` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.processNextEvent:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0f26ec.  call temp:= `processUnconfinedEvent`(v2) @signature `Lkotlinx/coroutines/EventLoop;.processUnconfinedEvent:()Z` @kind virtual;
  #L0f26f2.  v0:= temp;
  #L0f26f4.  if v0 != 0 then goto L0f2704;
  #L0f26f8.  v0:= 9223372036854775807L;
  #L0f2702.  return v0 @kind wide;
  #L0f2704.  v0:= 0L;
  #L0f2708.  return v0 @kind wide;
}
procedure `boolean` `processUnconfinedEvent`(`kotlinx.coroutines.EventLoop` v2 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.processUnconfinedEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L0f2628.  v0:= v2.`kotlinx.coroutines.EventLoop.c` @type ^`kotlinx.coroutines.internal.ArrayQueue` @kind object;
  #L0f262c.  v1:= 0I;
  #L0f262e.  if v0 != 0 then goto L0f2634;
  #L0f2632.  return v1;
  #L0f2634.  call temp:= `removeFirstOrNull`(v0) @signature `Lkotlinx/coroutines/internal/ArrayQueue;.removeFirstOrNull:()Ljava/lang/Object;` @kind virtual;
  #L0f263a.  v0:= temp @kind object;
  #L0f263c.  v0:= (`kotlinx.coroutines.DispatchedTask`) v0 @kind object;
  #L0f2640.  if v0 != 0 then goto L0f2646;
  #L0f2644.  return v1;
  #L0f2646.  call `run`(v0) @signature `Lkotlinx/coroutines/DispatchedTask;.run:()V` @kind virtual;
  #L0f264c.  v0:= 1I;
  #L0f264e.  return v0;
}
procedure `boolean` `shouldBeProcessedFromContext`(`kotlinx.coroutines.EventLoop` v1 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.shouldBeProcessedFromContext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f2660.  v0:= 0I;
  #L0f2662.  return v0;
}
procedure `void` `shutdown`(`kotlinx.coroutines.EventLoop` v0 @kind this) @signature `Lkotlinx/coroutines/EventLoop;.shutdown:()V` @AccessFlag PUBLIC {
    temp;

  #L0f2844.  return @kind void;
}
