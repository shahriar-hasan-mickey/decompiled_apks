record `kotlinx.coroutines.YieldContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class {
  `boolean` `kotlinx.coroutines.YieldContext.dispatcherWasUnconfined` @AccessFlag PUBLIC;
}
global `kotlinx.coroutines.YieldContext$Key` `@@kotlinx.coroutines.YieldContext.Key` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/YieldContext;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0f7b38.  v0:= new `kotlinx.coroutines.YieldContext$Key`;
  #L0f7b3c.  v1:= 0I;
  #L0f7b3e.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/YieldContext$Key;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L0f7b44.  `@@kotlinx.coroutines.YieldContext.Key` @type ^`kotlinx.coroutines.YieldContext$Key` := v0 @kind object;
  #L0f7b48.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.YieldContext` v1 @kind this) @signature `Lkotlinx/coroutines/YieldContext;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0f7b5c.  v0:= `@@kotlinx.coroutines.YieldContext.Key` @type ^`kotlinx.coroutines.YieldContext$Key` @kind object;
  #L0f7b60.  call `<init>`(v1, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L0f7b66.  return @kind void;
}
