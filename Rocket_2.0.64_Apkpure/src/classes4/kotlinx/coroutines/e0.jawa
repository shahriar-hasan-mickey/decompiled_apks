record `kotlinx.coroutines.e0` @kind class @AccessFlag  extends `kotlinx.coroutines.AbstractCoroutine` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.e0` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `boolean` v3 ) @signature `Lkotlinx/coroutines/e0;.<init>:(Lkotlin/coroutines/CoroutineContext;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0f6dac.  v0:= 1I;
  #L0f6dae.  call `<init>`(v1, v2, v0, v3) @signature `Lkotlinx/coroutines/AbstractCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;ZZ)V` @kind direct;
  #L0f6db4.  return @kind void;
}
procedure `boolean` `handleJobException`(`kotlinx.coroutines.e0` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/e0;.handleJobException:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0f6d88.  call temp:= `getContext`(v1) @signature `Lkotlinx/coroutines/AbstractCoroutine;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L0f6d8e.  v0:= temp @kind object;
  #L0f6d90.  call `handleCoroutineException`(v0, v2) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerKt;.handleCoroutineException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @kind static;
  #L0f6d96.  v2:= 1I;
  #L0f6d98.  return v2;
}
