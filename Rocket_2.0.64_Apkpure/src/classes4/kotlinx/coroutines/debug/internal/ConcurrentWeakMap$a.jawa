record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind class @AccessFlag FINAL {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @AccessFlag SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L105cbc.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L105cc0.  v1:= "load" @kind object;
  #L105cc4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L105cca.  v0:= temp @kind object;
  #L105ccc.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L105cd0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L105ce4.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` := v1 @kind object;
  #L105ce8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L105cee.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int` := v2;
  #L105cf2.  call temp:= `numberOfLeadingZeros`(v2) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L105cf8.  v1:= temp;
  #L105cfa.  v1:= v1 + 1;
  #L105cfe.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int` := v1;
  #L105d02.  v1:= v2 * 2;
  #L105d06.  v1:= v1 / 3;
  #L105d0a.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int` := v1;
  #L105d0e.  v1:= 0I;
  #L105d10.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int` := v1;
  #L105d14.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L105d18.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L105d1e.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L105d22.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L105d26.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L105d2c.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L105d30.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1059e0.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L1059e4.  return v0;
}
procedure `int` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1059f8.  v0:= -1640531527I;
  #L1059fe.  v2:= v2 * v0 @kind int;
  #L105a02.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L105a06.  v2:= v2 ^>> v0 @kind int;
  #L105a08.  return v2;
}
procedure `java.lang.Object` `g`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlinx.coroutines.debug.internal.HashedWeakRef` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L105aa0.  v4:= v4 ^& 4;
  #L105aa4.  if v4 == 0 then goto L105aaa;
  #L105aa8.  v3:= 0I;
  #L105aaa.  call temp:= `f`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @kind virtual;
  #L105ab0.  v0:= temp @kind object;
  #L105ab2.  return v0 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L105d90.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105d94.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105d9a.  v0:= temp @kind object;
  #L105d9c.  if v0 != 0 then goto L105da2;
  #L105da0.  return @kind void;
  #L105da2.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L105da6.  if v1 == 0 then goto L105dac;
  #L105daa.  return @kind void;
  #L105dac.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105db0.  v2:= 0I;
  #L105db2.  call temp:= `compareAndSet`(v1, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L105db8.  v0:= temp;
  #L105dba.  if v0 == 0 then goto L105d90;
  #L105dbe.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L105dc2.  call `access$decrementSize`(v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$decrementSize:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @kind static;
  #L105dc8.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v2 @kind this, `kotlinx.coroutines.debug.internal.HashedWeakRef` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L105d44.  v0:= v3.`kotlinx.coroutines.debug.internal.HashedWeakRef.hash` @type ^`int`;
  #L105d48.  call temp:= `d`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L105d4e.  v0:= temp;
  #L105d50.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105d54.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105d5a.  v1:= temp @kind object;
  #L105d5c.  v1:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v1 @kind object;
  #L105d60.  if v1 != 0 then goto L105d66;
  #L105d64.  return @kind void;
  #L105d66.  if v1 != v3 then goto L105d72;
  #L105d6a.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L105d70.  return @kind void;
  #L105d72.  if v0 != 0 then goto L105d7a;
  #L105d76.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L105d7a.  v0:= v0 + -1;
  #L105d7e.  goto L105d50;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L105a1c.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L105a22.  v0:= temp;
  #L105a24.  call temp:= `d`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L105a2a.  v0:= temp;
  #L105a2c.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105a30.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105a36.  v1:= temp @kind object;
  #L105a38.  v1:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v1 @kind object;
  #L105a3c.  if v1 != 0 then goto L105a44;
  #L105a40.  v4:= 0I;
  #L105a42.  return v4 @kind object;
  #L105a44.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L105a4a.  v1:= temp @kind object;
  #L105a4c.  call temp:= `areEqual`(v4, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L105a52.  v2:= temp;
  #L105a54.  if v2 == 0 then goto L105a76;
  #L105a58.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105a5c.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105a62.  v4:= temp @kind object;
  #L105a64.  v0:= instanceof @variable v4 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L105a68.  if v0 == 0 then goto L105a74;
  #L105a6c.  v4:= (`kotlinx.coroutines.debug.internal.b`) v4 @kind object;
  #L105a70.  v4:= v4.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L105a74.  return v4 @kind object;
  #L105a76.  if v1 != 0 then goto L105a80;
  #L105a7a.  call `i`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L105a80.  if v0 != 0 then goto L105a88;
  #L105a84.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L105a88.  v0:= v0 + -1;
  #L105a8c.  goto L105a2c;
}
procedure `java.util.Iterator` `e`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.e:(Lkotlin/jvm/functions/Function2;)Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L105bc8.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a`;
  #L105bcc.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L105bd2.  return v0 @kind object;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `kotlinx.coroutines.debug.internal.HashedWeakRef` v8 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L105ac4.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L105aca.  v0:= temp;
  #L105acc.  call temp:= `d`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L105ad2.  v0:= temp;
  #L105ad4.  v1:= 0I;
  #L105ad6.  v2:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105ada.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105ae0.  v2:= temp @kind object;
  #L105ae2.  v2:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v2 @kind object;
  #L105ae6.  if v2 != 0 then goto L105b4e;
  #L105aea.  v2:= 0I;
  #L105aec.  if v7 != 0 then goto L105af2;
  #L105af0.  return v2 @kind object;
  #L105af2.  if v1 != 0 then goto L105b22;
  #L105af6.  v1:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int`;
  #L105afa.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int`;
  #L105afe.  if v1 < v3 then goto L105b0c;
  #L105b02.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L105b08.  v6:= temp @kind object;
  #L105b0a.  return v6 @kind object;
  #L105b0c.  v3:= v1 + 1;
  #L105b10.  v4:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L105b14.  call temp:= `compareAndSet`(v4, v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L105b1a.  v1:= temp;
  #L105b1c.  if v1 == 0 then goto L105af6;
  #L105b20.  v1:= 1I;
  #L105b22.  if v8 != 0 then goto L105b3c;
  #L105b26.  v8:= new `kotlinx.coroutines.debug.internal.HashedWeakRef`;
  #L105b2a.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L105b2e.  call temp:= `access$getWeakRefQueue$p`(v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$getWeakRefQueue$p:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @kind static;
  #L105b34.  v3:= temp @kind object;
  #L105b36.  call `<init>`(v8, v6, v3) @signature `Lkotlinx/coroutines/debug/internal/HashedWeakRef;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L105b3c.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105b40.  call temp:= `compareAndSet`(v3, v0, v2, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L105b46.  v2:= temp;
  #L105b48.  if v2 == 0 then goto L105ad6;
  #L105b4c.  goto L105b70;
  #L105b4e.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L105b54.  v2:= temp @kind object;
  #L105b56.  call temp:= `areEqual`(v6, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L105b5c.  v3:= temp;
  #L105b5e.  if v3 == 0 then goto L105ba0;
  #L105b62.  if v1 == 0 then goto L105b70;
  #L105b66.  v6:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L105b6a.  call temp:= `decrementAndGet`(v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L105b70.  v6:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105b74.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105b7a.  v6:= temp @kind object;
  #L105b7c.  v8:= instanceof @variable v6 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L105b80.  if v8 == 0 then goto L105b8e;
  #L105b84.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L105b8a.  v6:= temp @kind object;
  #L105b8c.  return v6 @kind object;
  #L105b8e.  v8:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105b92.  call temp:= `compareAndSet`(v8, v0, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L105b98.  v8:= temp;
  #L105b9a.  if v8 == 0 then goto L105b70;
  #L105b9e.  return v6 @kind object;
  #L105ba0.  if v2 != 0 then goto L105baa;
  #L105ba4.  call `i`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L105baa.  if v0 != 0 then goto L105bb2;
  #L105bae.  v0:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L105bb2.  v0:= v0 + -1;
  #L105bb6.  goto L105ad6;
}
procedure `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `h`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v9 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L105be4.  v0:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L105be8.  call temp:= `size`(v0) @signature `Lkotlin/collections/AbstractMutableMap;.size:()I` @kind virtual;
  #L105bee.  v0:= temp;
  #L105bf0.  v1:= 4I;
  #L105bf2.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L105bf8.  v0:= temp;
  #L105bfa.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L105c00.  v0:= temp;
  #L105c02.  v0:= v0 * 4;
  #L105c06.  v1:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L105c0a.  v2:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L105c0e.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L105c14.  v0:= 0I;
  #L105c16.  v2:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L105c1a.  if v0 >= v2 then goto L105ca8;
  #L105c1e.  v3:= v0 + 1;
  #L105c22.  v4:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105c26.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105c2c.  v4:= temp @kind object;
  #L105c2e.  v4:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v4 @kind object;
  #L105c32.  if v4 != 0 then goto L105c3a;
  #L105c36.  v5:= 0I;
  #L105c38.  goto L105c42;
  #L105c3a.  call temp:= `get`(v4) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L105c40.  v5:= temp @kind object;
  #L105c42.  if v4 == 0 then goto L105c50;
  #L105c46.  if v5 != 0 then goto L105c50;
  #L105c4a.  call `i`(v9, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L105c50.  v6:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105c54.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L105c5a.  v6:= temp @kind object;
  #L105c5c.  v7:= instanceof @variable v6 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L105c60.  if v7 == 0 then goto L105c6e;
  #L105c64.  v6:= (`kotlinx.coroutines.debug.internal.b`) v6 @kind object;
  #L105c68.  v6:= v6.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L105c6c.  goto L105c86;
  #L105c6e.  v7:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105c72.  call temp:= `access$mark`(v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$mark:(Ljava/lang/Object;)Lkotlinx/coroutines/debug/internal/b;` @kind static;
  #L105c78.  v8:= temp @kind object;
  #L105c7a.  call temp:= `compareAndSet`(v7, v0, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L105c80.  v7:= temp;
  #L105c82.  if v7 == 0 then goto L105c50;
  #L105c86.  if v5 == 0 then goto L105ca4;
  #L105c8a.  if v6 == 0 then goto L105ca4;
  #L105c8e.  call temp:= `f`(v1, v5, v6, v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @kind virtual;
  #L105c94.  v0:= temp @kind object;
  #L105c96.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L105c9c.  v4:= temp @kind object;
  #L105c9e.  if v0 != v4 then goto L105ca4;
  #L105ca2.  goto L105be4;
  #L105ca4.  v0:= v3;
  #L105ca6.  goto L105c1a;
  #L105ca8.  return v1 @kind object;
}
