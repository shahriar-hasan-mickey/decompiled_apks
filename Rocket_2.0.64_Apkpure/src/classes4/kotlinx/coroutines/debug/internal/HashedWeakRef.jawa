record `kotlinx.coroutines.debug.internal.HashedWeakRef` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.ref.WeakReference` @kind class {
  `int` `kotlinx.coroutines.debug.internal.HashedWeakRef.hash` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.HashedWeakRef` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.ref.ReferenceQueue` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/HashedWeakRef;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L108944.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L10894a.  if v1 != 0 then goto L108952;
  #L10894e.  v1:= 0I;
  #L108950.  goto L10895a;
  #L108952.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L108958.  v1:= temp;
  #L10895a.  v0.`kotlinx.coroutines.debug.internal.HashedWeakRef.hash` @type ^`int` := v1;
  #L10895e.  return @kind void;
}
