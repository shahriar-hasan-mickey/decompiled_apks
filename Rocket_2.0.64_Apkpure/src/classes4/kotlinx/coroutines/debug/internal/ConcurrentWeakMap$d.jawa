record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L105f18.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d`;
  #L105f1c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.<init>:()V` @kind direct;
  #L105f22.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` := v0 @kind object;
  #L105f26.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L105f38.  v0:= 2I;
  #L105f3a.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L105f40.  return @kind void;
}
procedure `java.util.Map$Entry` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L105efc.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$b`;
  #L105f00.  call `<init>`(v0, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$b;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L105f06.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L105ee0.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind virtual;
  #L105ee6.  v1:= temp @kind object;
  #L105ee8.  return v1 @kind object;
}
