record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableMap` @kind class {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.ref.ReferenceQueue` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L106248.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L10624c.  v1:= "_size" @kind object;
  #L106250.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L106256.  v0:= temp @kind object;
  #L106258.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L10625c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L106270.  v0:= 0I;
  #L106272.  v1:= 1I;
  #L106274.  v2:= 0I;
  #L106276.  call `<init>`(v3, v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L10627c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L106290.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.<init>:()V` @kind direct;
  #L106296.  v0:= 0I;
  #L106298.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int` := v0;
  #L10629c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L1062a0.  v1:= 16I;
  #L1062a4.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L1062aa.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L1062ae.  if v3 == 0 then goto L1062be;
  #L1062b2.  v3:= new `java.lang.ref.ReferenceQueue`;
  #L1062b6.  call `<init>`(v3) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L1062bc.  goto L1062c0;
  #L1062be.  v3:= 0I;
  #L1062c0.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` := v3 @kind object;
  #L1062c4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind this, `boolean` v1 , `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1062d8.  v2:= v2 ^& 1;
  #L1062dc.  if v2 == 0 then goto L1062e2;
  #L1062e0.  v1:= 0I;
  #L1062e2.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @kind direct;
  #L1062e8.  return @kind void;
}
procedure `void` `access$decrementSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$decrementSize:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1062fc.  call `c`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:()V` @kind direct;
  #L106302.  return @kind void;
}
procedure `java.lang.ref.ReferenceQueue` `access$getWeakRefQueue$p`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$getWeakRefQueue$p:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1061f0.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L1061f4.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `kotlinx.coroutines.debug.internal.HashedWeakRef` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L106314.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L106318.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L10631c.  call `b`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @kind virtual;
  #L106322.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L106374.  v0:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L106378.  call temp:= `decrementAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L10637e.  return @kind void;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L106130.  @monitorenter v7
  #L106132.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L106136.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L10613a.  v4:= 0I;
  #L10613c.  v5:= 4I;
  #L10613e.  v6:= 0I;
  #L106140.  v1:= v0 @kind object;
  #L106142.  v2:= v8 @kind object;
  #L106144.  v3:= v9 @kind object;
  #L106146.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L10614c.  v1:= temp @kind object;
  #L10614e.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L106154.  v2:= temp @kind object;
  #L106156.  if v1 == v2 then goto L10615e;
  #L10615a.  @monitorexit v7
  #L10615c.  return v1 @kind object;
  #L10615e.  call temp:= `h`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @kind virtual;
  #L106164.  v0:= temp @kind object;
  #L106166.  v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L10616a.  goto L10613a;
  #L10616c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10616e.  @monitorexit v7
  #L106170.  throw v8;
  catch `java.lang.Throwable` @[L106132..L106156] goto L10616c;
  catch `java.lang.Throwable` @[L10615e..L10616a] goto L10616c;
}
procedure `void` `clear`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L106334.  call temp:= `keySet`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L10633a.  v0:= temp @kind object;
  #L10633c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L106342.  v0:= temp @kind object;
  #L106344.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L10634a.  v1:= temp;
  #L10634c.  if v1 == 0 then goto L106360;
  #L106350.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L106356.  v1:= temp @kind object;
  #L106358.  call temp:= `remove`(v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L10635e.  goto L106344;
  #L106360.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1060b4.  if v2 != 0 then goto L1060bc;
  #L1060b8.  v2:= 0I;
  #L1060ba.  return v2 @kind object;
  #L1060bc.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L1060c0.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L1060c4.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1060ca.  v2:= temp @kind object;
  #L1060cc.  return v2 @kind object;
}
procedure `java.util.Set` `getEntries`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L106208.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c`;
  #L10620c.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$d` @kind object;
  #L106210.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L106216.  return v0 @kind object;
}
procedure `java.util.Set` `getKeys`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L106228.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c`;
  #L10622c.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` @kind object;
  #L106230.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L106236.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L10609c.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int`;
  #L1060a0.  return v0;
}
procedure `java.lang.Object` `put`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1060e0.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L1060e4.  v1:= v0 @kind object;
  #L1060e6.  v1:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v1 @kind object;
  #L1060ea.  v4:= 0I;
  #L1060ec.  v5:= 4I;
  #L1060ee.  v6:= 0I;
  #L1060f0.  v2:= v8 @kind object;
  #L1060f2.  v3:= v9 @kind object;
  #L1060f4.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1060fa.  v0:= temp @kind object;
  #L1060fc.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L106102.  v1:= temp @kind object;
  #L106104.  if v0 != v1 then goto L106110;
  #L106108.  call temp:= `d`(v7, v8, v9) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L10610e.  v0:= temp @kind object;
  #L106110.  if v0 != 0 then goto L10611e;
  #L106114.  v8:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L106118.  call temp:= `incrementAndGet`(v8, v7) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L10611e.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L106198.  v0:= 0I;
  #L10619a.  if v9 != 0 then goto L1061a0;
  #L10619e.  return v0 @kind object;
  #L1061a0.  v1:= v8.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L1061a4.  v2:= v1 @kind object;
  #L1061a6.  v2:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v2 @kind object;
  #L1061aa.  v4:= 0I;
  #L1061ac.  v5:= 0I;
  #L1061ae.  v6:= 4I;
  #L1061b0.  v7:= 0I;
  #L1061b2.  v3:= v9 @kind object;
  #L1061b4.  call temp:= `g`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1061ba.  v1:= temp @kind object;
  #L1061bc.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1061c2.  v2:= temp @kind object;
  #L1061c4.  if v1 != v2 then goto L1061d0;
  #L1061c8.  call temp:= `d`(v8, v9, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L1061ce.  v1:= temp @kind object;
  #L1061d0.  if v1 == 0 then goto L1061de;
  #L1061d4.  v9:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1061d8.  call temp:= `decrementAndGet`(v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L1061de.  return v1 @kind object;
}
procedure `void` `runWeakRefQueueCleaningLoopUntilInterrupted`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.runWeakRefQueueCleaningLoopUntilInterrupted:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L106390.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L106394.  if v0 == 0 then goto L10639c;
  #L106398.  v0:= 1I;
  #L10639a.  goto L10639e;
  #L10639c.  v0:= 0I;
  #L10639e.  if v0 == 0 then goto L1063de;
  #L1063a2.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.a` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L1063a6.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L1063ac.  v0:= temp @kind object;
  #L1063ae.  if v0 == 0 then goto L1063be;
  #L1063b2.  v0:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v0 @kind object;
  #L1063b6.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @kind direct;
  #L1063bc.  goto L1063a2;
  #L1063be.  v0:= new `java.lang.NullPointerException`;
  #L1063c2.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.debug.internal.HashedWeakRef<*>" @kind object;
  #L1063c6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1063cc.  throw v0;
  #L1063ce.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1063d4.  v0:= temp @kind object;
  #L1063d6.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L1063dc.  return @kind void;
  #L1063de.  v0:= new `java.lang.IllegalStateException`;
  #L1063e2.  v1:= "Must be created with weakRefQueue = true" @kind object;
  #L1063e6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1063ec.  v1:= temp @kind object;
  #L1063ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1063f4.  throw v0;
  catch `java.lang.InterruptedException` @[L1063a2..L1063ce] goto L1063ce;
}
