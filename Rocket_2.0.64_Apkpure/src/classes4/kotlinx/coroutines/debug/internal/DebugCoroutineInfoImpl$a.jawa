record `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.debug.internal.StackTraceFrame` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind object, `kotlinx.coroutines.debug.internal.StackTraceFrame` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L106504.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` := v1 @kind object;
  #L106508.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` := v2 @kind object;
  #L10650c.  v1:= 2I;
  #L10650e.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L106514.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1064dc.  v0:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`;
  #L1064e0.  v1:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind object;
  #L1064e4.  v2:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L1064e8.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1064ee.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @type ^`java.lang.Object` := v4 @kind object;
  #L1064f2.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L106418.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L10641c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L106420.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L106426.  v1:= temp @kind object;
  #L106428.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L10643c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L106442.  v1:= temp @kind object;
  #L106444.  v1:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`) v1 @kind object;
  #L106448.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10644c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L106452.  v1:= temp @kind object;
  #L106454.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L106468.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10646e.  v0:= temp @kind object;
  #L106470.  v1:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.a` @type ^`int`;
  #L106474.  v2:= 1I;
  #L106476.  if v1 == 0 then goto L106496;
  #L10647a.  if v1 != v2 then goto L106486;
  #L10647e.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L106484.  goto L1064c6;
  #L106486.  v5:= new `java.lang.IllegalStateException`;
  #L10648a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10648e.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L106494.  throw v5;
  #L106496.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10649c.  v5:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @type ^`java.lang.Object` @kind object;
  #L1064a0.  v5:= (`kotlin.sequences.SequenceScope`) v5 @kind object;
  #L1064a4.  v1:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind object;
  #L1064a8.  v3:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L1064ac.  call temp:= `getCallerFrame`(v3) @signature `Lkotlinx/coroutines/debug/internal/StackTraceFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L1064b2.  v3:= temp @kind object;
  #L1064b4.  v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.a` @type ^`int` := v2;
  #L1064b8.  call temp:= `access$yieldFrames`(v1, v5, v3, v4) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.access$yieldFrames:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L1064be.  v5:= temp @kind object;
  #L1064c0.  if v5 != v0 then goto L1064c6;
  #L1064c4.  return v0 @kind object;
  #L1064c6.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1064ca.  return v5 @kind object;
}
