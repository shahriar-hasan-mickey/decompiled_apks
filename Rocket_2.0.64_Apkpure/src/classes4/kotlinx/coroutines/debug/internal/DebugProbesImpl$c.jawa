record `kotlinx.coroutines.debug.internal.DebugProbesImpl$c` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
}
global `kotlinx.coroutines.debug.internal.DebugProbesImpl$c` `@@kotlinx.coroutines.debug.internal.DebugProbesImpl$c.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L106df0.  v0:= new `kotlinx.coroutines.debug.internal.DebugProbesImpl$c`;
  #L106df4.  call `<init>`(v0) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.<init>:()V` @kind direct;
  #L106dfa.  `@@kotlinx.coroutines.debug.internal.DebugProbesImpl$c.a` @type ^`kotlinx.coroutines.debug.internal.DebugProbesImpl$c` := v0 @kind object;
  #L106dfe.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$c` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L106e10.  v0:= 0I;
  #L106e12.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L106e18.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$c` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L106dd4.  call `invoke`(v1) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.invoke:()V` @kind virtual;
  #L106dda.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L106dde.  return v0 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$c` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$c;.invoke:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L106e2c.  call temp:= `access$getCallerInfoCache$p`() @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl;.access$getCallerInfoCache$p:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;` @kind static;
  #L106e32.  v0:= temp @kind object;
  #L106e34.  call `runWeakRefQueueCleaningLoopUntilInterrupted`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.runWeakRefQueueCleaningLoopUntilInterrupted:()V` @kind virtual;
  #L106e3a.  return @kind void;
}
