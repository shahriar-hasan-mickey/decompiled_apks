record `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlinx.coroutines.debug.internal.StackTraceFrame` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.WeakReference` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @AccessFlag PRIVATE;
  `java.lang.Thread` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedThread` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.sequenceNumber` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlinx.coroutines.debug.internal.StackTraceFrame` v2 @kind object, `long` v3 ) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/debug/internal/StackTraceFrame;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10680c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L106812.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` := v2 @kind object;
  #L106816.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.sequenceNumber` @type ^`long` := v3 @kind wide;
  #L10681a.  v2:= new `java.lang.ref.WeakReference`;
  #L10681e.  call `<init>`(v2, v1) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L106824.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L106828.  v1:= "CREATED" @kind object;
  #L10682c.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` := v1 @kind object;
  #L106830.  return @kind void;
}
procedure `java.util.List` `a`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.a:()Ljava/util/List;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1066f4.  v0:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L1066f8.  if v0 != 0 then goto L106706;
  #L1066fc.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L106702.  v0:= temp @kind object;
  #L106704.  return v0 @kind object;
  #L106706.  v1:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`;
  #L10670a.  v2:= 0I;
  #L10670c.  call `<init>`(v1, v3, v0, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L106712.  call temp:= `sequence`(v1) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L106718.  v0:= temp @kind object;
  #L10671a.  call temp:= `toList`(v0) @signature `Lkotlin/sequences/SequencesKt;.toList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L106720.  v0:= temp @kind object;
  #L106722.  return v0 @kind object;
}
procedure `java.lang.Object` `access$yieldFrames`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v0 @kind object, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.access$yieldFrames:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L106578.  call temp:= `b`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.b:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L10657e.  v0:= temp @kind object;
  #L106580.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v5 @kind this, `kotlin.sequences.SequenceScope` v6 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.b:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L106594.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b` @kind boolean;
  #L106598.  if v0 == 0 then goto L1065ba;
  #L10659c.  v0:= v8 @kind object;
  #L10659e.  v0:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b`) v0 @kind object;
  #L1065a2.  v1:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int`;
  #L1065a6.  v2:= -2147483648I;
  #L1065aa.  v3:= v1 ^& v2 @kind int;
  #L1065ae.  if v3 == 0 then goto L1065ba;
  #L1065b2.  v1:= v1 - v2 @kind int;
  #L1065b4.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int` := v1;
  #L1065b8.  goto L1065c4;
  #L1065ba.  v0:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b`;
  #L1065be.  call `<init>`(v0, v5, v8) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$b;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1065c4.  v8:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L1065c8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1065ce.  v1:= temp @kind object;
  #L1065d0.  v2:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int`;
  #L1065d4.  v3:= 1I;
  #L1065d6.  if v2 == 0 then goto L10660e;
  #L1065da.  if v2 != v3 then goto L1065fe;
  #L1065de.  v6:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L1065e2.  v6:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v6 @kind object;
  #L1065e6.  v7:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L1065ea.  v7:= (`kotlin.sequences.SequenceScope`) v7 @kind object;
  #L1065ee.  v2:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L1065f2.  v2:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl`) v2 @kind object;
  #L1065f6.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1065fc.  goto L106652;
  #L1065fe.  v6:= new `java.lang.IllegalStateException`;
  #L106602.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L106606.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10660c.  throw v6;
  #L10660e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L106614.  v2:= v5 @kind object;
  #L106616.  if v7 != 0 then goto L106620;
  #L10661a.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10661e.  return v6 @kind object;
  #L106620.  call temp:= `getStackTraceElement`(v7) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L106626.  v8:= temp @kind object;
  #L106628.  if v8 != 0 then goto L10662e;
  #L10662c.  goto L106658;
  #L10662e.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.a` @type ^`java.lang.Object` := v2 @kind object;
  #L106632.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.b` @type ^`java.lang.Object` := v6 @kind object;
  #L106636.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.c` @type ^`java.lang.Object` := v7 @kind object;
  #L10663a.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int` := v3;
  #L10663e.  call temp:= `yield`(v6, v8, v0) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L106644.  v8:= temp @kind object;
  #L106646.  if v8 != v1 then goto L10664c;
  #L10664a.  return v1 @kind object;
  #L10664c.  v4:= v7 @kind object;
  #L10664e.  v7:= v6 @kind object;
  #L106650.  v6:= v4 @kind object;
  #L106652.  v4:= v7 @kind object;
  #L106654.  v7:= v6 @kind object;
  #L106656.  v6:= v4 @kind object;
  #L106658.  call temp:= `getCallerFrame`(v7) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L10665e.  v7:= temp @kind object;
  #L106660.  if v7 == 0 then goto L106666;
  #L106664.  goto L106616;
  #L106666.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10666a.  return v6 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1067a4.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1067a8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1067ae.  v0:= temp @kind object;
  #L1067b0.  v0:= (`kotlin.coroutines.CoroutineContext`) v0 @kind object;
  #L1067b4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.debug.internal.StackTraceFrame` `getCreationStackBottom`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getCreationStackBottom:()Lkotlinx/coroutines/debug/internal/StackTraceFrame;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1067f4.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L1067f8.  return v0 @kind object;
}
procedure `java.util.List` `getCreationStackTrace`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getCreationStackTrace:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L106734.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.a:()Ljava/util/List;` @kind direct;
  #L10673a.  v0:= temp @kind object;
  #L10673c.  return v0 @kind object;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getLastObservedFrame$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1067c8.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @type ^`java.lang.ref.WeakReference` @kind object;
  #L1067cc.  if v0 != 0 then goto L1067d4;
  #L1067d0.  v0:= 0I;
  #L1067d2.  goto L1067e0;
  #L1067d4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1067da.  v0:= temp @kind object;
  #L1067dc.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L1067e0.  return v0 @kind object;
}
procedure `java.lang.String` `getState`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getState:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L10667c.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` @kind object;
  #L106680.  return v0 @kind object;
}
procedure `java.util.List` `lastObservedStackTrace`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.lastObservedStackTrace:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L106750.  call temp:= `getLastObservedFrame$kotlinx_coroutines_core`(v3) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L106756.  v0:= temp @kind object;
  #L106758.  if v0 != 0 then goto L106766;
  #L10675c.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L106762.  v0:= temp @kind object;
  #L106764.  return v0 @kind object;
  #L106766.  v1:= new `java.util.ArrayList`;
  #L10676a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L106770.  if v0 == 0 then goto L106792;
  #L106774.  call temp:= `getStackTraceElement`(v0) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L10677a.  v2:= temp @kind object;
  #L10677c.  if v2 != 0 then goto L106782;
  #L106780.  goto L106788;
  #L106782.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L106788.  call temp:= `getCallerFrame`(v0) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L10678e.  v0:= temp @kind object;
  #L106790.  goto L106770;
  #L106792.  return v1 @kind object;
}
procedure `void` `setLastObservedFrame$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.setLastObservedFrame$kotlinx_coroutines_core:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L106844.  if v2 != 0 then goto L10684c;
  #L106848.  v2:= 0I;
  #L10684a.  goto L106858;
  #L10684c.  v0:= new `java.lang.ref.WeakReference`;
  #L106850.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L106856.  v2:= v0 @kind object;
  #L106858.  v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L10685c.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L106694.  v0:= new `java.lang.StringBuilder`;
  #L106698.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L10669e.  v1:= "DebugCoroutineInfo(state=" @kind object;
  #L1066a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1066a8.  call temp:= `getState`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getState:()Ljava/lang/String;` @kind virtual;
  #L1066ae.  v1:= temp @kind object;
  #L1066b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1066b6.  v1:= ",context=" @kind object;
  #L1066ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1066c0.  call temp:= `getContext`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L1066c6.  v1:= temp @kind object;
  #L1066c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1066ce.  v1:= 41I;
  #L1066d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1066d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1066de.  v0:= temp @kind object;
  #L1066e0.  return v0 @kind object;
}
procedure `void` `updateState$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v2 @kind this, `java.lang.String` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.updateState$kotlinx_coroutines_core:(Ljava/lang/String;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L106870.  v0:= v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` @kind object;
  #L106874.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L10687a.  v0:= temp;
  #L10687c.  if v0 == 0 then goto L10689e;
  #L106880.  v0:= "SUSPENDED" @kind object;
  #L106884.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L10688a.  v0:= temp;
  #L10688c.  if v0 == 0 then goto L10689e;
  #L106890.  call temp:= `getLastObservedFrame$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L106896.  v0:= temp @kind object;
  #L106898.  if v0 == 0 then goto L10689e;
  #L10689c.  return @kind void;
  #L10689e.  v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` := v3 @kind object;
  #L1068a2.  v0:= instanceof @variable v4 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L1068a6.  v1:= 0I;
  #L1068a8.  if v0 == 0 then goto L1068b2;
  #L1068ac.  v4:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v4 @kind object;
  #L1068b0.  goto L1068b4;
  #L1068b2.  v4:= v1 @kind object;
  #L1068b4.  call `setLastObservedFrame$kotlinx_coroutines_core`(v2, v4) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.setLastObservedFrame$kotlinx_coroutines_core:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)V` @kind virtual;
  #L1068ba.  v4:= "RUNNING" @kind object;
  #L1068be.  call temp:= `areEqual`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1068c4.  v3:= temp;
  #L1068c6.  if v3 == 0 then goto L1068d2;
  #L1068ca.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1068d0.  v1:= temp @kind object;
  #L1068d2.  v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedThread` @type ^`java.lang.Thread` := v1 @kind object;
  #L1068d6.  return @kind void;
}
