record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMutableIterator` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @AccessFlag PRIVATE;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L105910.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` := v1 @kind object;
  #L105914.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10591a.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L10591e.  v1:= -1I;
  #L105920.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int` := v1;
  #L105924.  call `b`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @kind direct;
  #L10592a.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L10593c.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L105940.  v0:= v0 + 1;
  #L105944.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int` := v0;
  #L105948.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L10594c.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L105952.  v1:= temp;
  #L105954.  if v0 >= v1 then goto L1059b6;
  #L105958.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L10595c.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105960.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L105964.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L10596a.  v0:= temp @kind object;
  #L10596c.  v0:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v0 @kind object;
  #L105970.  if v0 != 0 then goto L105978;
  #L105974.  v0:= 0I;
  #L105976.  goto L105980;
  #L105978.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L10597e.  v0:= temp @kind object;
  #L105980.  if v0 != 0 then goto L105986;
  #L105984.  goto L10593c;
  #L105986.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L10598a.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L10598e.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L105992.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L105996.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L10599c.  v0:= temp @kind object;
  #L10599e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L1059a2.  if v1 == 0 then goto L1059ae;
  #L1059a6.  v0:= (`kotlinx.coroutines.debug.internal.b`) v0 @kind object;
  #L1059aa.  v0:= v0.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L1059ae.  if v0 == 0 then goto L10593c;
  #L1059b2.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L1059b6.  return @kind void;
}
procedure `java.lang.Void` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.c:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1058ec.  call temp:= `access$noImpl`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$noImpl:()Ljava/lang/Void;` @kind static;
  #L1058f2.  v0:= new `kotlin.KotlinNothingValueException`;
  #L1058f6.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L1058fc.  throw v0;
}
procedure `boolean` `hasNext`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L105850.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L105854.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L105858.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L10585e.  v1:= temp;
  #L105860.  if v0 >= v1 then goto L105868;
  #L105864.  v0:= 1I;
  #L105866.  goto L10586a;
  #L105868.  v0:= 0I;
  #L10586a.  return v0;
}
procedure `java.lang.Object` `next`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L10587c.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L105880.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L105884.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L10588a.  v1:= temp;
  #L10588c.  if v0 >= v1 then goto L1058d0;
  #L105890.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L105894.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`java.lang.Object` @kind object;
  #L105898.  if v1 != 0 then goto L1058aa;
  #L10589c.  v1:= "key" @kind object;
  #L1058a0.  call `throwUninitializedPropertyAccessException`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L1058a6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1058aa.  v2:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` @kind object;
  #L1058ae.  if v2 != 0 then goto L1058c0;
  #L1058b2.  v2:= "value" @kind object;
  #L1058b6.  call `throwUninitializedPropertyAccessException`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L1058bc.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1058c0.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1058c6.  v0:= temp @kind object;
  #L1058c8.  call `b`(v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @kind direct;
  #L1058ce.  return v0 @kind object;
  #L1058d0.  v0:= new `java.util.NoSuchElementException`;
  #L1058d4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1058da.  throw v0;
}
procedure `void` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v0 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.remove:()V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1059c8.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.c:()Ljava/lang/Void;` @kind virtual;
  #L1059ce.  return @kind void;
}
