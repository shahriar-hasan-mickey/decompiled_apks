record `kotlinx.coroutines.CoroutineContextKt$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlinx.coroutines.CoroutineContextKt$a` `@@kotlinx.coroutines.CoroutineContextKt$a.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0eed8c.  v0:= new `kotlinx.coroutines.CoroutineContextKt$a`;
  #L0eed90.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.<init>:()V` @kind direct;
  #L0eed96.  `@@kotlinx.coroutines.CoroutineContextKt$a.a` @type ^`kotlinx.coroutines.CoroutineContextKt$a` := v0 @kind object;
  #L0eed9a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineContextKt$a` v1 @kind this) @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L0eedac.  v0:= 2I;
  #L0eedae.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L0eedb4.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `a`(`kotlinx.coroutines.CoroutineContextKt$a` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext$Element` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0eed54.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.CopyableThreadContextElement` @kind boolean;
  #L0eed58.  if v0 == 0 then goto L0eed72;
  #L0eed5c.  v3:= (`kotlinx.coroutines.CopyableThreadContextElement`) v3 @kind object;
  #L0eed60.  call temp:= `copyForChild`(v3) @signature `Lkotlinx/coroutines/CopyableThreadContextElement;.copyForChild:()Lkotlinx/coroutines/CopyableThreadContextElement;` @kind interface;
  #L0eed66.  v3:= temp @kind object;
  #L0eed68.  call temp:= `plus`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eed6e.  v2:= temp @kind object;
  #L0eed70.  return v2 @kind object;
  #L0eed72.  call temp:= `plus`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L0eed78.  v2:= temp @kind object;
  #L0eed7a.  return v2 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.CoroutineContextKt$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0eed30.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L0eed34.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L0eed38.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineContextKt$a;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L0eed3e.  v1:= temp @kind object;
  #L0eed40.  return v1 @kind object;
}
