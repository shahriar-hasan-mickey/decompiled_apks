record `kotlinx.coroutines.c` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.AbstractCoroutine` @kind class {
  `java.lang.Thread` `kotlinx.coroutines.c.c` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.EventLoop` `kotlinx.coroutines.c.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.c` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Thread` v3 @kind object, `kotlinx.coroutines.EventLoop` v4 @kind object) @signature `Lkotlinx/coroutines/c;.<init>:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Thread;Lkotlinx/coroutines/EventLoop;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ecbbc.  v0:= 1I;
  #L0ecbbe.  call `<init>`(v1, v2, v0, v0) @signature `Lkotlinx/coroutines/AbstractCoroutine;.<init>:(Lkotlin/coroutines/CoroutineContext;ZZ)V` @kind direct;
  #L0ecbc4.  v1.`kotlinx.coroutines.c.c` @type ^`java.lang.Thread` := v3 @kind object;
  #L0ecbc8.  v1.`kotlinx.coroutines.c.d` @type ^`kotlinx.coroutines.EventLoop` := v4 @kind object;
  #L0ecbcc.  return @kind void;
}
procedure `java.lang.Object` `D`(`kotlinx.coroutines.c` v6 @kind this) @signature `Lkotlinx/coroutines/c;.D:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0eca6c.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0eca72.  v0:= temp @kind object;
  #L0eca74.  if v0 != 0 then goto L0eca7a;
  #L0eca78.  goto L0eca80;
  #L0eca7a.  call `registerTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.registerTimeLoopThread:()V` @kind virtual;
  #L0eca80.  v0:= v6.`kotlinx.coroutines.c.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L0eca84.  v1:= 1I;
  #L0eca86.  v2:= 0I;
  #L0eca88.  v3:= 0I;
  #L0eca8a.  if v0 != 0 then goto L0eca90;
  #L0eca8e.  goto L0eca96;
  #L0eca90.  call `incrementUseCount$default`(v0, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L0eca96.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L0eca9c.  v0:= temp;
  #L0eca9e.  if v0 != 0 then goto L0ecb3e;
  #L0ecaa2.  v0:= v6.`kotlinx.coroutines.c.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L0ecaa6.  if v0 != 0 then goto L0ecab6;
  #L0ecaaa.  v4:= 9223372036854775807L;
  #L0ecab4.  goto L0ecabe;
  #L0ecab6.  call temp:= `processNextEvent`(v0) @signature `Lkotlinx/coroutines/EventLoop;.processNextEvent:()J` @kind virtual;
  #L0ecabc.  v4:= temp @kind wide;
  #L0ecabe.  call temp:= `isCompleted`(v6) @signature `Lkotlinx/coroutines/JobSupport;.isCompleted:()Z` @kind virtual;
  #L0ecac4.  v0:= temp;
  #L0ecac6.  if v0 == 0 then goto L0ecb18;
  #L0ecaca.  v0:= v6.`kotlinx.coroutines.c.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L0ecace.  if v0 != 0 then goto L0ecad4;
  #L0ecad2.  goto L0ecada;
  #L0ecad4.  call `decrementUseCount$default`(v0, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L0ecada.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0ecae0.  v0:= temp @kind object;
  #L0ecae2.  if v0 != 0 then goto L0ecae8;
  #L0ecae6.  goto L0ecaee;
  #L0ecae8.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L0ecaee.  call temp:= `getState$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/JobSupport;.getState$kotlinx_coroutines_core:()Ljava/lang/Object;` @kind virtual;
  #L0ecaf4.  v0:= temp @kind object;
  #L0ecaf6.  call temp:= `unboxState`(v0) @signature `Lkotlinx/coroutines/JobSupportKt;.unboxState:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L0ecafc.  v0:= temp @kind object;
  #L0ecafe.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.CompletedExceptionally` @kind boolean;
  #L0ecb02.  if v1 == 0 then goto L0ecb0c;
  #L0ecb06.  v3:= v0 @kind object;
  #L0ecb08.  v3:= (`kotlinx.coroutines.CompletedExceptionally`) v3 @kind object;
  #L0ecb0c.  if v3 != 0 then goto L0ecb12;
  #L0ecb10.  return v0 @kind object;
  #L0ecb12.  v0:= v3.`kotlinx.coroutines.CompletedExceptionally.cause` @type ^`java.lang.Throwable` @kind object;
  #L0ecb16.  throw v0;
  #L0ecb18.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0ecb1e.  v0:= temp @kind object;
  #L0ecb20.  if v0 != 0 then goto L0ecb28;
  #L0ecb24.  v0:= v3 @kind object;
  #L0ecb26.  goto L0ecb32;
  #L0ecb28.  call `parkNanos`(v0, v6, v4) @signature `Lkotlinx/coroutines/AbstractTimeSource;.parkNanos:(Ljava/lang/Object;J)V` @kind virtual;
  #L0ecb2e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0ecb32.  if v0 != 0 then goto L0eca96;
  #L0ecb36.  call `parkNanos`(v6, v4) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(Ljava/lang/Object;J)V` @kind static;
  #L0ecb3c.  goto L0eca96;
  #L0ecb3e.  v0:= new `java.lang.InterruptedException`;
  #L0ecb42.  call `<init>`(v0) @signature `Ljava/lang/InterruptedException;.<init>:()V` @kind direct;
  #L0ecb48.  call temp:= `cancelCoroutine`(v6, v0) @signature `Lkotlinx/coroutines/JobSupport;.cancelCoroutine:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L0ecb4e.  throw v0;
  #L0ecb50.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0ecb52.  v4:= v6.`kotlinx.coroutines.c.d` @type ^`kotlinx.coroutines.EventLoop` @kind object;
  #L0ecb56.  if v4 != 0 then goto L0ecb5c;
  #L0ecb5a.  goto L0ecb62;
  #L0ecb5c.  call `decrementUseCount$default`(v4, v2, v1, v3) @signature `Lkotlinx/coroutines/EventLoop;.decrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L0ecb62.  throw v0;
  #L0ecb64.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0ecb66.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0ecb6c.  v1:= temp @kind object;
  #L0ecb6e.  if v1 != 0 then goto L0ecb74;
  #L0ecb72.  goto L0ecb7a;
  #L0ecb74.  call `unregisterTimeLoopThread`(v1) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L0ecb7a.  throw v0;
  catch `java.lang.Throwable` @[L0eca80..L0eca96] goto L0ecb64;
  catch `java.lang.Throwable` @[L0eca96..L0ecac6] goto L0ecb50;
  catch `java.lang.Throwable` @[L0ecaca..L0ecada] goto L0ecb64;
  catch `java.lang.Throwable` @[L0ecb18..L0ecb50] goto L0ecb50;
  catch `java.lang.Throwable` @[L0ecb52..L0ecb64] goto L0ecb64;
}
procedure `void` `afterCompletion`(`kotlinx.coroutines.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/c;.afterCompletion:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0ecbe0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L0ecbe6.  v2:= temp @kind object;
  #L0ecbe8.  v0:= v1.`kotlinx.coroutines.c.c` @type ^`java.lang.Thread` @kind object;
  #L0ecbec.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0ecbf2.  v2:= temp;
  #L0ecbf4.  if v2 != 0 then goto L0ecc20;
  #L0ecbf8.  v2:= v1.`kotlinx.coroutines.c.c` @type ^`java.lang.Thread` @kind object;
  #L0ecbfc.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L0ecc02.  v0:= temp @kind object;
  #L0ecc04.  if v0 != 0 then goto L0ecc0c;
  #L0ecc08.  v0:= 0I;
  #L0ecc0a.  goto L0ecc16;
  #L0ecc0c.  call `unpark`(v0, v2) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unpark:(Ljava/lang/Thread;)V` @kind virtual;
  #L0ecc12.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0ecc16.  if v0 != 0 then goto L0ecc20;
  #L0ecc1a.  call `unpark`(v2) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L0ecc20.  return @kind void;
}
procedure `boolean` `isScopedCoroutine`(`kotlinx.coroutines.c` v1 @kind this) @signature `Lkotlinx/coroutines/c;.isScopedCoroutine:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L0eca58.  v0:= 1I;
  #L0eca5a.  return v0;
}
