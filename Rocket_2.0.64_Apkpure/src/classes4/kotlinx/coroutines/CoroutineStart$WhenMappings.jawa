record `kotlinx.coroutines.CoroutineStart$WhenMappings` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
global `int`[] `@@kotlinx.coroutines.CoroutineStart$WhenMappings.$EnumSwitchMapping$0` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineStart$WhenMappings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0efd68.  call temp:= `values`() @signature `Lkotlinx/coroutines/CoroutineStart;.values:()[Lkotlinx/coroutines/CoroutineStart;` @kind static;
  #L0efd6e.  v0:= temp @kind object;
  #L0efd70.  v0:= length @variable v0;
  #L0efd72.  v0:= new `int`[v0];
  #L0efd76.  v1:= `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L0efd7a.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0efd80.  v1:= temp;
  #L0efd82.  v2:= 1I;
  #L0efd84.  v0[v1]:= v2;
  #L0efd88.  v1:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L0efd8c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0efd92.  v1:= temp;
  #L0efd94.  v2:= 2I;
  #L0efd96.  v0[v1]:= v2;
  #L0efd9a.  v1:= `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L0efd9e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0efda4.  v1:= temp;
  #L0efda6.  v2:= 3I;
  #L0efda8.  v0[v1]:= v2;
  #L0efdac.  v1:= `@@kotlinx.coroutines.CoroutineStart.LAZY` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L0efdb0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L0efdb6.  v1:= temp;
  #L0efdb8.  v2:= 4I;
  #L0efdba.  v0[v1]:= v2;
  #L0efdbe.  `@@kotlinx.coroutines.CoroutineStart$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] := v0 @kind object;
  #L0efdc2.  return @kind void;
}
