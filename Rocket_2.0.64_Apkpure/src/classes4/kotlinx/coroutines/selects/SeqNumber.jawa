record `kotlinx.coroutines.selects.SeqNumber` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `kotlinx.coroutines.selects.SeqNumber.number` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.selects.SeqNumber.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/selects/SeqNumber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L126fb8.  v0:= constclass @type ^`kotlinx.coroutines.selects.SeqNumber` @kind object;
  #L126fbc.  v1:= "number" @kind object;
  #L126fc0.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L126fc6.  v0:= temp @kind object;
  #L126fc8.  `@@kotlinx.coroutines.selects.SeqNumber.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L126fcc.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.selects.SeqNumber` v2 @kind this) @signature `Lkotlinx/coroutines/selects/SeqNumber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L126fe0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L126fe6.  v0:= 1L;
  #L126fea.  v2.`kotlinx.coroutines.selects.SeqNumber.number` @type ^`long` := v0 @kind wide;
  #L126fee.  return @kind void;
}
procedure `long` `next`(`kotlinx.coroutines.selects.SeqNumber` v2 @kind this) @signature `Lkotlinx/coroutines/selects/SeqNumber;.next:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L126f98.  v0:= `@@kotlinx.coroutines.selects.SeqNumber.a` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L126f9c.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)J` @kind virtual;
  #L126fa2.  v0:= temp @kind wide;
  #L126fa4.  return v0 @kind wide;
}
