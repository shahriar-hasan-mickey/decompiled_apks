record `kotlinx.coroutines.selects.SelectBuilderImpl$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicOp` @kind class {
  `kotlinx.coroutines.selects.SelectBuilderImpl` `kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.AtomicDesc` `kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v2 @kind this, `kotlinx.coroutines.selects.SelectBuilderImpl` v3 @kind object, `kotlinx.coroutines.internal.AtomicDesc` v4 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.<init>:(Lkotlinx/coroutines/selects/SelectBuilderImpl;Lkotlinx/coroutines/internal/AtomicDesc;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1263e4.  call `<init>`(v2) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @kind direct;
  #L1263ea.  v2.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` := v3 @kind object;
  #L1263ee.  v2.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` := v4 @kind object;
  #L1263f2.  call temp:= `access$getSelectOpSequenceNumber$p`() @signature `Lkotlinx/coroutines/selects/SelectKt;.access$getSelectOpSequenceNumber$p:()Lkotlinx/coroutines/selects/SeqNumber;` @kind static;
  #L1263f8.  v3:= temp @kind object;
  #L1263fa.  call temp:= `next`(v3) @signature `Lkotlinx/coroutines/selects/SeqNumber;.next:()J` @kind virtual;
  #L126400.  v0:= temp @kind wide;
  #L126402.  v2.`kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @type ^`long` := v0 @kind wide;
  #L126406.  call `setAtomicOp`(v4, v2) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.setAtomicOp:(Lkotlinx/coroutines/internal/AtomicOp;)V` @kind virtual;
  #L12640c.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L126444.  if v4 != 0 then goto L12644c;
  #L126448.  v4:= 1I;
  #L12644a.  goto L12644e;
  #L12644c.  v4:= 0I;
  #L12644e.  if v4 == 0 then goto L126456;
  #L126452.  v0:= 0I;
  #L126454.  goto L12645e;
  #L126456.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L12645c.  v0:= temp @kind object;
  #L12645e.  v1:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L126462.  v2:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L126466.  call temp:= `a`(v2, v1, v3, v0) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L12646c.  v0:= temp;
  #L12646e.  if v0 == 0 then goto L126480;
  #L126472.  if v4 == 0 then goto L126480;
  #L126476.  v4:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L12647a.  call `access$doAfterSelect`(v4) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl;.access$doAfterSelect:(Lkotlinx/coroutines/selects/SelectBuilderImpl;)V` @kind static;
  #L126480.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v5 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.b:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L126318.  v0:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L12631c.  v1:= v0.`kotlinx.coroutines.selects.SelectBuilderImpl._state` @type ^`java.lang.Object` @kind object;
  #L126320.  v2:= 0I;
  #L126322.  if v1 != v5 then goto L126328;
  #L126326.  return v2 @kind object;
  #L126328.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L12632c.  if v3 == 0 then goto L126340;
  #L126330.  v1:= (`kotlinx.coroutines.internal.OpDescriptor`) v1 @kind object;
  #L126334.  v2:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L126338.  call temp:= `perform`(v1, v2) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12633e.  goto L12631c;
  #L126340.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L126346.  v3:= temp @kind object;
  #L126348.  if v1 != v3 then goto L12636a;
  #L12634c.  v1:= v5.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L126350.  v3:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L126354.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L12635a.  v4:= temp @kind object;
  #L12635c.  call temp:= `a`(v3, v1, v4, v5) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L126362.  v1:= temp;
  #L126364.  if v1 == 0 then goto L12631c;
  #L126368.  return v2 @kind object;
  #L12636a.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L126370.  v0:= temp @kind object;
  #L126372.  return v0 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L126494.  v0:= v3.`kotlinx.coroutines.selects.SelectBuilderImpl$a.b` @type ^`kotlinx.coroutines.selects.SelectBuilderImpl` @kind object;
  #L126498.  v1:= `@@kotlinx.coroutines.selects.SelectBuilderImpl.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L12649c.  call temp:= `getNOT_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getNOT_SELECTED:()Ljava/lang/Object;` @kind static;
  #L1264a2.  v2:= temp @kind object;
  #L1264a4.  call temp:= `a`(v1, v0, v3, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1264aa.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L126420.  call `a`(v0, v2) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L126426.  v1:= v0.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` @kind object;
  #L12642a.  call `complete`(v1, v0, v2) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @kind virtual;
  #L126430.  return @kind void;
}
procedure `long` `getOpSequence`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v2 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.getOpSequence:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1263cc.  v0:= v2.`kotlinx.coroutines.selects.SelectBuilderImpl$a.d` @type ^`long` @kind wide;
  #L1263d0.  return v0 @kind wide;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1262cc.  if v2 != 0 then goto L1262e0;
  #L1262d0.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.b:()Ljava/lang/Object;` @kind direct;
  #L1262d6.  v0:= temp @kind object;
  #L1262d8.  if v0 != 0 then goto L1262de;
  #L1262dc.  goto L1262e0;
  #L1262de.  return v0 @kind object;
  #L1262e0.  v0:= v1.`kotlinx.coroutines.selects.SelectBuilderImpl$a.c` @type ^`kotlinx.coroutines.internal.AtomicDesc` @kind object;
  #L1262e4.  call temp:= `prepare`(v0, v1) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @kind virtual;
  #L1262ea.  v2:= temp @kind object;
  #L1262ec.  return v2 @kind object;
  #L1262ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1262f0.  if v2 != 0 then goto L1262fa;
  #L1262f4.  call `c`(v1) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.c:()V` @kind direct;
  #L1262fa.  throw v0;
  catch `java.lang.Throwable` @[L1262e0..L1262ec] goto L1262ee;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.selects.SelectBuilderImpl$a` v3 @kind this) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L126384.  v0:= new `java.lang.StringBuilder`;
  #L126388.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12638e.  v1:= "AtomicSelectOp(sequence=" @kind object;
  #L126392.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L126398.  call temp:= `getOpSequence`(v3) @signature `Lkotlinx/coroutines/selects/SelectBuilderImpl$a;.getOpSequence:()J` @kind virtual;
  #L12639e.  v1:= temp @kind wide;
  #L1263a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1263a6.  v1:= 41I;
  #L1263aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1263b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1263b6.  v0:= temp @kind object;
  #L1263b8.  return v0 @kind object;
}
