record `kotlinx.coroutines.sync.SemaphoreKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@kotlinx.coroutines.sync.SemaphoreKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.sync.SemaphoreKt.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@kotlinx.coroutines.sync.SemaphoreKt.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L129104.  v0:= "kotlinx.coroutines.semaphore.maxSpinCycles" @kind object;
  #L129108.  v1:= 100I;
  #L12910c.  v2:= 0I;
  #L12910e.  v3:= 0I;
  #L129110.  v4:= 12I;
  #L129114.  v5:= 0I;
  #L129116.  call temp:= `systemProp$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L12911c.  v0:= temp;
  #L12911e.  `@@kotlinx.coroutines.sync.SemaphoreKt.a` @type ^`int` := v0;
  #L129122.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L129126.  v1:= "PERMIT" @kind object;
  #L12912a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L129130.  `@@kotlinx.coroutines.sync.SemaphoreKt.b` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L129134.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L129138.  v1:= "TAKEN" @kind object;
  #L12913c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L129142.  `@@kotlinx.coroutines.sync.SemaphoreKt.c` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L129146.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L12914a.  v1:= "BROKEN" @kind object;
  #L12914e.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L129154.  `@@kotlinx.coroutines.sync.SemaphoreKt.d` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L129158.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L12915c.  v1:= "CANCELLED" @kind object;
  #L129160.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L129166.  `@@kotlinx.coroutines.sync.SemaphoreKt.e` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L12916a.  v2:= "kotlinx.coroutines.semaphore.segmentSize" @kind object;
  #L12916e.  v3:= 16I;
  #L129172.  v4:= 0I;
  #L129174.  v5:= 0I;
  #L129176.  v6:= 12I;
  #L12917a.  v7:= 0I;
  #L12917c.  call temp:= `systemProp$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/internal/SystemPropsKt;.systemProp$default:(Ljava/lang/String;IIIILjava/lang/Object;)I` @kind static;
  #L129182.  v0:= temp;
  #L129184.  `@@kotlinx.coroutines.sync.SemaphoreKt.f` @type ^`int` := v0;
  #L129188.  return @kind void;
}
procedure `kotlinx.coroutines.sync.Semaphore` `Semaphore`(`int` v1 , `int` v2 ) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore:(II)Lkotlinx/coroutines/sync/Semaphore;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1290ac.  v0:= new `kotlinx.coroutines.sync.c`;
  #L1290b0.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/c;.<init>:(II)V` @kind direct;
  #L1290b6.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.Semaphore` `Semaphore$default`(`int` v0 , `int` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore$default:(IIILjava/lang/Object;)Lkotlinx/coroutines/sync/Semaphore;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L129088.  v2:= v2 ^& 2;
  #L12908c.  if v2 == 0 then goto L129092;
  #L129090.  v1:= 0I;
  #L129092.  call temp:= `Semaphore`(v0, v1) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore:(II)Lkotlinx/coroutines/sync/Semaphore;` @kind static;
  #L129098.  v0:= temp @kind object;
  #L12909a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.d` `a`(`long` v2 , `kotlinx.coroutines.sync.d` v4 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.a:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1290e4.  v0:= new `kotlinx.coroutines.sync.d`;
  #L1290e8.  v1:= 0I;
  #L1290ea.  call `<init>`(v0, v2, v4, v1) @signature `Lkotlinx/coroutines/sync/d;.<init>:(JLkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L1290f0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.sync.d` `access$createSegment`(`long` v0 , `kotlinx.coroutines.sync.d` v2 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1290c8.  call temp:= `a`(v0, v2) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.a:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L1290ce.  v0:= temp @kind object;
  #L1290d0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getBROKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getBROKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L129028.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.d` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L12902c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getCANCELLED$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getCANCELLED$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L129040.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.e` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L129044.  return v0 @kind object;
}
procedure `int` `access$getMAX_SPIN_CYCLES$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getMAX_SPIN_CYCLES$p:()I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L128f14.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.a` @type ^`int`;
  #L128f18.  return v0;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L129058.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.b` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L12905c.  return v0 @kind object;
}
procedure `int` `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L128f2c.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.f` @type ^`int`;
  #L128f30.  return v0;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L129070.  v0:= `@@kotlinx.coroutines.sync.SemaphoreKt.c` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L129074.  return v0 @kind object;
}
procedure `java.lang.Object` `withPermit`(`kotlinx.coroutines.sync.Semaphore` v4 @kind object, `kotlin.jvm.functions.Function0` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.withPermit:(Lkotlinx/coroutines/sync/Semaphore;Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L128f44.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.sync.SemaphoreKt$a` @kind boolean;
  #L128f48.  if v0 == 0 then goto L128f6a;
  #L128f4c.  v0:= v6 @kind object;
  #L128f4e.  v0:= (`kotlinx.coroutines.sync.SemaphoreKt$a`) v0 @kind object;
  #L128f52.  v1:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int`;
  #L128f56.  v2:= -2147483648I;
  #L128f5a.  v3:= v1 ^& v2 @kind int;
  #L128f5e.  if v3 == 0 then goto L128f6a;
  #L128f62.  v1:= v1 - v2 @kind int;
  #L128f64.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int` := v1;
  #L128f68.  goto L128f74;
  #L128f6a.  v0:= new `kotlinx.coroutines.sync.SemaphoreKt$a`;
  #L128f6e.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/sync/SemaphoreKt$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L128f74.  v6:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.c` @type ^`java.lang.Object` @kind object;
  #L128f78.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L128f7e.  v1:= temp @kind object;
  #L128f80.  v2:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int`;
  #L128f84.  v3:= 1I;
  #L128f86.  if v2 == 0 then goto L128fb8;
  #L128f8a.  if v2 != v3 then goto L128fa8;
  #L128f8e.  v4:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.b` @type ^`java.lang.Object` @kind object;
  #L128f92.  v5:= v4 @kind object;
  #L128f94.  v5:= (`kotlin.jvm.functions.Function0`) v5 @kind object;
  #L128f98.  v4:= v0.`kotlinx.coroutines.sync.SemaphoreKt$a.a` @type ^`java.lang.Object` @kind object;
  #L128f9c.  v4:= (`kotlinx.coroutines.sync.Semaphore`) v4 @kind object;
  #L128fa0.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L128fa6.  goto L128fd8;
  #L128fa8.  v4:= new `java.lang.IllegalStateException`;
  #L128fac.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L128fb0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128fb6.  throw v4;
  #L128fb8.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L128fbe.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.a` @type ^`java.lang.Object` := v4 @kind object;
  #L128fc2.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.b` @type ^`java.lang.Object` := v5 @kind object;
  #L128fc6.  v0.`kotlinx.coroutines.sync.SemaphoreKt$a.d` @type ^`int` := v3;
  #L128fca.  call temp:= `acquire`(v4, v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L128fd0.  v6:= temp @kind object;
  #L128fd2.  if v6 != v1 then goto L128fd8;
  #L128fd6.  return v1 @kind object;
  #L128fd8.  call temp:= `invoke`(v5) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L128fde.  v5:= temp @kind object;
  #L128fe0.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L128fe6.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L128fec.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L128ff2.  return v5 @kind object;
  #L128ff4.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L128ff6.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L128ffc.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L129002.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L129008.  throw v5;
  catch `java.lang.Throwable` @[L128fd8..L128fe0] goto L128ff4;
}
