record `kotlinx.coroutines.sync.MutexImpl$f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicOp` @kind class {
  `kotlinx.coroutines.sync.MutexImpl$d` `kotlinx.coroutines.sync.MutexImpl$f.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl$d` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L127bb0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.<init>:()V` @kind direct;
  #L127bb6.  v0.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` := v1 @kind object;
  #L127bba.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.sync.MutexImpl$f` v1 @kind this, `kotlinx.coroutines.sync.MutexImpl` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.a:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L127be8.  if v3 != 0 then goto L127bf6;
  #L127bec.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127bf2.  v3:= temp @kind object;
  #L127bf4.  goto L127bfa;
  #L127bf6.  v3:= v1.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind object;
  #L127bfa.  v0:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127bfe.  call temp:= `a`(v0, v2, v1, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127c04.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.b:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L127b80.  v1:= v0.`kotlinx.coroutines.sync.MutexImpl$f.b` @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind object;
  #L127b84.  call temp:= `isEmpty`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @kind virtual;
  #L127b8a.  v1:= temp;
  #L127b8c.  if v1 == 0 then goto L127b94;
  #L127b90.  v1:= 0I;
  #L127b92.  goto L127b9c;
  #L127b94.  call temp:= `access$getUNLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L127b9a.  v1:= temp @kind object;
  #L127b9c.  return v1 @kind object;
}
procedure `void` `complete`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.complete:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L127bcc.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L127bd0.  call `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.a:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind virtual;
  #L127bd6.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.sync.MutexImpl$f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.prepare:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L127b60.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L127b64.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.b:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @kind virtual;
  #L127b6a.  v1:= temp @kind object;
  #L127b6c.  return v1 @kind object;
}
