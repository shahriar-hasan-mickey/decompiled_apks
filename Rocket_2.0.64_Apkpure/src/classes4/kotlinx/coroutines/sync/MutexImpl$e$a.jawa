record `kotlinx.coroutines.sync.MutexImpl$e$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.OpDescriptor` @kind class {
  `kotlinx.coroutines.internal.AtomicOp` `kotlinx.coroutines.sync.MutexImpl$e$a.a` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.sync.MutexImpl$e` `kotlinx.coroutines.sync.MutexImpl$e$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$e$a` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl$e` v1 @kind object, `kotlinx.coroutines.internal.AtomicOp` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$e;Lkotlinx/coroutines/internal/AtomicOp;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L127a84.  v0.`kotlinx.coroutines.sync.MutexImpl$e$a.b` @type ^`kotlinx.coroutines.sync.MutexImpl$e` := v1 @kind object;
  #L127a88.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.<init>:()V` @kind direct;
  #L127a8e.  v0.`kotlinx.coroutines.sync.MutexImpl$e$a.a` @type ^`kotlinx.coroutines.internal.AtomicOp` := v2 @kind object;
  #L127a92.  return @kind void;
}
procedure `kotlinx.coroutines.internal.AtomicOp` `getAtomicOp`(`kotlinx.coroutines.sync.MutexImpl$e$a` v1 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L127a6c.  v0:= v1.`kotlinx.coroutines.sync.MutexImpl$e$a.a` @type ^`kotlinx.coroutines.internal.AtomicOp` @kind object;
  #L127a70.  return v0 @kind object;
}
procedure `java.lang.Object` `perform`(`kotlinx.coroutines.sync.MutexImpl$e$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L127a18.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L127a1e.  v0:= temp @kind object;
  #L127a20.  call temp:= `isDecided`(v0) @signature `Lkotlinx/coroutines/internal/AtomicOp;.isDecided:()Z` @kind virtual;
  #L127a26.  v0:= temp;
  #L127a28.  if v0 == 0 then goto L127a36;
  #L127a2c.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127a32.  v0:= temp @kind object;
  #L127a34.  goto L127a3e;
  #L127a36.  call temp:= `getAtomicOp`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.getAtomicOp:()Lkotlinx/coroutines/internal/AtomicOp;` @kind virtual;
  #L127a3c.  v0:= temp @kind object;
  #L127a3e.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.sync.MutexImpl" @kind object;
  #L127a42.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L127a48.  v3:= (`kotlinx.coroutines.sync.MutexImpl`) v3 @kind object;
  #L127a4c.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127a50.  call temp:= `a`(v1, v3, v2, v0) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127a56.  v3:= 0I;
  #L127a58.  return v3 @kind object;
}
