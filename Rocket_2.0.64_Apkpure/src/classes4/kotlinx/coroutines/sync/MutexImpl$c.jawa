record `kotlinx.coroutines.sync.MutexImpl$c` @kind class @AccessFlag ABSTRACT extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class, `kotlinx.coroutines.DisposableHandle` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl$c.d` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$c.e` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.sync.MutexImpl$c.isTaken` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.sync.MutexImpl$c.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L127950.  v0:= constclass @type ^`kotlinx.coroutines.sync.MutexImpl$c` @kind object;
  #L127954.  v1:= "isTaken" @kind object;
  #L127958.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L12795e.  v0:= temp @kind object;
  #L127960.  `@@kotlinx.coroutines.sync.MutexImpl$c.f` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L127964.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$c` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L127978.  v0.`kotlinx.coroutines.sync.MutexImpl$c.e` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L12797c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L127982.  v0.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` := v2 @kind object;
  #L127986.  v1:= 0I;
  #L127988.  v0.`kotlinx.coroutines.sync.MutexImpl$c.isTaken` @type ^`int` := v1;
  #L12798c.  return @kind void;
}
procedure `void` `dispose`(`kotlinx.coroutines.sync.MutexImpl$c` v0 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1279a0.  call temp:= `remove`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.remove:()Z` @kind virtual;
  #L1279a6.  return @kind void;
}
procedure `void` `e`() @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.e:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `f`(`kotlinx.coroutines.sync.MutexImpl$c` v3 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12792c.  v0:= `@@kotlinx.coroutines.sync.MutexImpl$c.f` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L127930.  v1:= 0I;
  #L127932.  v2:= 1I;
  #L127934.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L12793a.  v0:= temp;
  #L12793c.  return v0;
}
procedure `boolean` `g`() @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.g:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
