record `kotlinx.coroutines.sync.Mutex$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `getOnLock$annotations`() @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.getOnLock$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L127634.  return @kind void;
}
procedure `java.lang.Object` `lock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.lock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1275fc.  if v4 != 0 then goto L127614;
  #L127600.  v3:= v3 ^& 1;
  #L127604.  if v3 == 0 then goto L12760a;
  #L127608.  v1:= 0I;
  #L12760a.  call temp:= `lock`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/Mutex;.lock:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L127610.  v0:= temp @kind object;
  #L127612.  return v0 @kind object;
  #L127614.  v0:= new `java.lang.UnsupportedOperationException`;
  #L127618.  v1:= "Super calls with default arguments not supported in this target, function: lock" @kind object;
  #L12761c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L127622.  throw v0;
}
procedure `boolean` `tryLock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.tryLock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;ILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1275c4.  if v3 != 0 then goto L1275dc;
  #L1275c8.  v2:= v2 ^& 1;
  #L1275cc.  if v2 == 0 then goto L1275d2;
  #L1275d0.  v1:= 0I;
  #L1275d2.  call temp:= `tryLock`(v0, v1) @signature `Lkotlinx/coroutines/sync/Mutex;.tryLock:(Ljava/lang/Object;)Z` @kind interface;
  #L1275d8.  v0:= temp;
  #L1275da.  return v0;
  #L1275dc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1275e0.  v1:= "Super calls with default arguments not supported in this target, function: tryLock" @kind object;
  #L1275e4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1275ea.  throw v0;
}
procedure `void` `unlock$default`(`kotlinx.coroutines.sync.Mutex` v0 @kind object, `java.lang.Object` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex$DefaultImpls;.unlock$default:(Lkotlinx/coroutines/sync/Mutex;Ljava/lang/Object;ILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L127648.  if v3 != 0 then goto L12765e;
  #L12764c.  v2:= v2 ^& 1;
  #L127650.  if v2 == 0 then goto L127656;
  #L127654.  v1:= 0I;
  #L127656.  call `unlock`(v0, v1) @signature `Lkotlinx/coroutines/sync/Mutex;.unlock:(Ljava/lang/Object;)V` @kind interface;
  #L12765c.  return @kind void;
  #L12765e.  v0:= new `java.lang.UnsupportedOperationException`;
  #L127662.  v1:= "Super calls with default arguments not supported in this target, function: unlock" @kind object;
  #L127666.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12766c.  throw v0;
}
