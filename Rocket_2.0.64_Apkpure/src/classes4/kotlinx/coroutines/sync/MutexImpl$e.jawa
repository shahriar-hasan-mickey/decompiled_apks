record `kotlinx.coroutines.sync.MutexImpl$e` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.AtomicDesc` @kind class {
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$e.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl$e.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$e` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L127af4.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/AtomicDesc;.<init>:()V` @kind direct;
  #L127afa.  v0.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L127afe.  v0.`kotlinx.coroutines.sync.MutexImpl$e.b` @type ^`java.lang.Object` := v2 @kind object;
  #L127b02.  return @kind void;
}
procedure `void` `complete`(`kotlinx.coroutines.sync.MutexImpl$e` v2 @kind this, `kotlinx.coroutines.internal.AtomicOp` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.complete:(Lkotlinx/coroutines/internal/AtomicOp;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L127b14.  if v4 == 0 then goto L127b22;
  #L127b18.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127b1e.  v4:= temp @kind object;
  #L127b20.  goto L127b40;
  #L127b22.  v4:= v2.`kotlinx.coroutines.sync.MutexImpl$e.b` @type ^`java.lang.Object` @kind object;
  #L127b26.  if v4 != 0 then goto L127b34;
  #L127b2a.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127b30.  v4:= temp @kind object;
  #L127b32.  goto L127b40;
  #L127b34.  v0:= new `kotlinx.coroutines.sync.b`;
  #L127b38.  call `<init>`(v0, v4) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L127b3e.  v4:= v0 @kind object;
  #L127b40.  v0:= v2.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L127b44.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127b48.  call temp:= `a`(v1, v0, v3, v4) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127b4e.  return @kind void;
}
procedure `java.lang.Object` `prepare`(`kotlinx.coroutines.sync.MutexImpl$e` v3 @kind this, `kotlinx.coroutines.internal.AtomicOp` v4 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.prepare:(Lkotlinx/coroutines/internal/AtomicOp;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L127aa4.  v0:= new `kotlinx.coroutines.sync.MutexImpl$e$a`;
  #L127aa8.  call `<init>`(v0, v3, v4) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$e;Lkotlinx/coroutines/internal/AtomicOp;)V` @kind direct;
  #L127aae.  v4:= v3.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L127ab2.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127ab6.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127abc.  v2:= temp @kind object;
  #L127abe.  call temp:= `a`(v1, v4, v2, v0) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127ac4.  v4:= temp;
  #L127ac6.  if v4 != 0 then goto L127ad4;
  #L127aca.  call temp:= `access$getLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L127ad0.  v4:= temp @kind object;
  #L127ad2.  return v4 @kind object;
  #L127ad4.  v4:= v3.`kotlinx.coroutines.sync.MutexImpl$e.a` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L127ad8.  call temp:= `perform`(v0, v4) @signature `Lkotlinx/coroutines/sync/MutexImpl$e$a;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L127ade.  v4:= temp @kind object;
  #L127ae0.  return v4 @kind object;
}
