record `kotlinx.coroutines.sync.MutexImpl` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.sync.Mutex` @kind interface, `kotlinx.coroutines.selects.SelectClause2` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.MutexImpl.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/MutexImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1280e8.  v0:= constclass @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L1280ec.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1280f0.  v2:= "_state" @kind object;
  #L1280f4.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L1280fa.  v0:= temp @kind object;
  #L1280fc.  `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L128100.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/sync/MutexImpl;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L128114.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12811a.  if v1 == 0 then goto L128128;
  #L12811e.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L128124.  v1:= temp @kind object;
  #L128126.  goto L128130;
  #L128128.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L12812e.  v1:= temp @kind object;
  #L128130.  v0.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` := v1 @kind object;
  #L128134.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.sync.MutexImpl` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L127ea0.  call temp:= `intercepted`(v8) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L127ea6.  v0:= temp @kind object;
  #L127ea8.  call temp:= `getOrCreateCancellableContinuation`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.getOrCreateCancellableContinuation:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/CancellableContinuationImpl;` @kind static;
  #L127eae.  v0:= temp @kind object;
  #L127eb0.  v1:= new `kotlinx.coroutines.sync.MutexImpl$a`;
  #L127eb4.  call `<init>`(v1, v6, v7, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/CancellableContinuation;)V` @kind direct;
  #L127eba.  v2:= v6.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127ebe.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L127ec2.  if v3 == 0 then goto L127f34;
  #L127ec6.  v3:= v2 @kind object;
  #L127ec8.  v3:= (`kotlinx.coroutines.sync.b`) v3 @kind object;
  #L127ecc.  v4:= v3.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L127ed0.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L127ed6.  v5:= temp @kind object;
  #L127ed8.  if v4 == v5 then goto L127ef6;
  #L127edc.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127ee0.  v5:= new `kotlinx.coroutines.sync.MutexImpl$d`;
  #L127ee4.  v3:= v3.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L127ee8.  call `<init>`(v5, v3) @signature `Lkotlinx/coroutines/sync/MutexImpl$d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L127eee.  call temp:= `a`(v4, v6, v2, v5) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127ef4.  goto L127eba;
  #L127ef6.  if v7 != 0 then goto L127f04;
  #L127efa.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127f00.  v3:= temp @kind object;
  #L127f02.  goto L127f0e;
  #L127f04.  v3:= new `kotlinx.coroutines.sync.b`;
  #L127f08.  call `<init>`(v3, v7) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L127f0e.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127f12.  call temp:= `a`(v4, v6, v2, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127f18.  v2:= temp;
  #L127f1a.  if v2 == 0 then goto L127eba;
  #L127f1e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L127f22.  v2:= new `kotlinx.coroutines.sync.MutexImpl$g`;
  #L127f26.  call `<init>`(v2, v6, v7) @signature `Lkotlinx/coroutines/sync/MutexImpl$g;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L127f2c.  call `resume`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L127f32.  goto L127f82;
  #L127f34.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L127f38.  if v3 == 0 then goto L127fd0;
  #L127f3c.  v3:= v2 @kind object;
  #L127f3e.  v3:= (`kotlinx.coroutines.sync.MutexImpl$d`) v3 @kind object;
  #L127f42.  v4:= v3.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L127f46.  if v4 == v7 then goto L127f4e;
  #L127f4a.  v4:= 1I;
  #L127f4c.  goto L127f50;
  #L127f4e.  v4:= 0I;
  #L127f50.  if v4 == 0 then goto L127fb0;
  #L127f54.  call `addLast`(v3, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L127f5a.  v3:= v6.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127f5e.  if v3 == v2 then goto L127f7c;
  #L127f62.  call temp:= `f`(v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Z` @kind virtual;
  #L127f68.  v2:= temp;
  #L127f6a.  if v2 != 0 then goto L127f70;
  #L127f6e.  goto L127f7c;
  #L127f70.  v1:= new `kotlinx.coroutines.sync.MutexImpl$a`;
  #L127f74.  call `<init>`(v1, v6, v7, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/CancellableContinuation;)V` @kind direct;
  #L127f7a.  goto L127eba;
  #L127f7c.  call `removeOnCancellation`(v0, v1) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.removeOnCancellation:(Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L127f82.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L127f88.  v7:= temp @kind object;
  #L127f8a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L127f90.  v0:= temp @kind object;
  #L127f92.  if v7 != v0 then goto L127f9c;
  #L127f96.  call `probeCoroutineSuspended`(v8) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L127f9c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L127fa2.  v8:= temp @kind object;
  #L127fa4.  if v7 != v8 then goto L127faa;
  #L127fa8.  return v7 @kind object;
  #L127faa.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L127fae.  return v7 @kind object;
  #L127fb0.  v8:= "Already locked by " @kind object;
  #L127fb4.  call temp:= `stringPlus`(v8, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L127fba.  v7:= temp @kind object;
  #L127fbc.  v8:= new `java.lang.IllegalStateException`;
  #L127fc0.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L127fc6.  v7:= temp @kind object;
  #L127fc8.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L127fce.  throw v8;
  #L127fd0.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L127fd4.  if v3 == 0 then goto L127fe6;
  #L127fd8.  v2:= (`kotlinx.coroutines.internal.OpDescriptor`) v2 @kind object;
  #L127fdc.  call temp:= `perform`(v2, v6) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L127fe2.  goto L127eba;
  #L127fe6.  v7:= new `java.lang.IllegalStateException`;
  #L127fea.  v8:= "Illegal state " @kind object;
  #L127fee.  call temp:= `stringPlus`(v8, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L127ff4.  v8:= temp @kind object;
  #L127ff6.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L127ffc.  v8:= temp @kind object;
  #L127ffe.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128004.  throw v7;
}
procedure `java.lang.Object` `access$lockSuspend`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.access$lockSuspend:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L127e44.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L127e4a.  v0:= temp @kind object;
  #L127e4c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.selects.SelectClause2` `getOnLock`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.getOnLock:()Lkotlinx/coroutines/selects/SelectClause2;` @AccessFlag PUBLIC {
    temp;

  #L1280d4.  return v0 @kind object;
}
procedure `boolean` `holdsLock`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.holdsLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L127c7c.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127c80.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L127c84.  v2:= 1I;
  #L127c86.  v3:= 0I;
  #L127c88.  if v1 == 0 then goto L127c9a;
  #L127c8c.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L127c90.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L127c94.  if v0 != v5 then goto L127cb0;
  #L127c98.  goto L127cb2;
  #L127c9a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L127c9e.  if v1 == 0 then goto L127cb0;
  #L127ca2.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L127ca6.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L127caa.  if v0 != v5 then goto L127cb0;
  #L127cae.  goto L127cb2;
  #L127cb0.  v2:= 0I;
  #L127cb2.  return v2;
}
procedure `boolean` `isLocked`(`kotlinx.coroutines.sync.MutexImpl` v3 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.isLocked:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L127cc4.  v0:= v3.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127cc8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L127ccc.  v2:= 1I;
  #L127cce.  if v1 == 0 then goto L127cec;
  #L127cd2.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L127cd6.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L127cda.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L127ce0.  v1:= temp @kind object;
  #L127ce2.  if v0 == v1 then goto L127ce8;
  #L127ce6.  goto L127cea;
  #L127ce8.  v2:= 0I;
  #L127cea.  return v2;
  #L127cec.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L127cf0.  if v1 == 0 then goto L127cf6;
  #L127cf4.  return v2;
  #L127cf6.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L127cfa.  if v1 == 0 then goto L127d0a;
  #L127cfe.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L127d02.  call temp:= `perform`(v0, v3) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L127d08.  goto L127cc4;
  #L127d0a.  v1:= new `java.lang.IllegalStateException`;
  #L127d0e.  v2:= "Illegal state " @kind object;
  #L127d12.  call temp:= `stringPlus`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L127d18.  v0:= temp @kind object;
  #L127d1a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L127d20.  v0:= temp @kind object;
  #L127d22.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L127d28.  throw v1;
}
procedure `boolean` `isLockedEmptyQueueState$kotlinx_coroutines_core`(`kotlinx.coroutines.sync.MutexImpl` v2 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.isLockedEmptyQueueState$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L127d3c.  v0:= v2.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127d40.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L127d44.  if v1 == 0 then goto L127d5c;
  #L127d48.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L127d4c.  call temp:= `isEmpty`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListHead;.isEmpty:()Z` @kind virtual;
  #L127d52.  v0:= temp;
  #L127d54.  if v0 == 0 then goto L127d5c;
  #L127d58.  v0:= 1I;
  #L127d5a.  goto L127d5e;
  #L127d5c.  v0:= 0I;
  #L127d5e.  return v0;
}
procedure `java.lang.Object` `lock`(`kotlinx.coroutines.sync.MutexImpl` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.lock:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L127e60.  call temp:= `tryLock`(v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl;.tryLock:(Ljava/lang/Object;)Z` @kind virtual;
  #L127e66.  v0:= temp;
  #L127e68.  if v0 == 0 then goto L127e72;
  #L127e6c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L127e70.  return v2 @kind object;
  #L127e72.  call temp:= `a`(v1, v2, v3) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L127e78.  v2:= temp @kind object;
  #L127e7a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L127e80.  v3:= temp @kind object;
  #L127e82.  if v2 != v3 then goto L127e88;
  #L127e86.  return v2 @kind object;
  #L127e88.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L127e8c.  return v2 @kind object;
}
procedure `void` `registerSelectClause2`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this, `kotlinx.coroutines.selects.SelectInstance` v5 @kind object, `java.lang.Object` v6 @kind object, `kotlin.jvm.functions.Function2` v7 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.registerSelectClause2:(Lkotlinx/coroutines/selects/SelectInstance;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L128148.  call temp:= `isSelected`(v5) @signature `Lkotlinx/coroutines/selects/SelectInstance;.isSelected:()Z` @kind interface;
  #L12814e.  v0:= temp;
  #L128150.  if v0 == 0 then goto L128156;
  #L128154.  return @kind void;
  #L128156.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L12815a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L12815e.  if v1 == 0 then goto L1281fe;
  #L128162.  v1:= v0 @kind object;
  #L128164.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L128168.  v2:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L12816c.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128172.  v3:= temp @kind object;
  #L128174.  if v2 == v3 then goto L128192;
  #L128178.  v2:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L12817c.  v3:= new `kotlinx.coroutines.sync.MutexImpl$d`;
  #L128180.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L128184.  call `<init>`(v3, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L12818a.  call temp:= `a`(v2, v4, v0, v3) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L128190.  goto L128148;
  #L128192.  v0:= new `kotlinx.coroutines.sync.MutexImpl$e`;
  #L128196.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/sync/MutexImpl$e;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L12819c.  call temp:= `performAtomicTrySelect`(v5, v0) @signature `Lkotlinx/coroutines/selects/SelectInstance;.performAtomicTrySelect:(Lkotlinx/coroutines/internal/AtomicDesc;)Ljava/lang/Object;` @kind interface;
  #L1281a2.  v0:= temp @kind object;
  #L1281a4.  if v0 != 0 then goto L1281b8;
  #L1281a8.  call temp:= `getCompletion`(v5) @signature `Lkotlinx/coroutines/selects/SelectInstance;.getCompletion:()Lkotlin/coroutines/Continuation;` @kind interface;
  #L1281ae.  v5:= temp @kind object;
  #L1281b0.  call `startCoroutineUnintercepted`(v7, v4, v5) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startCoroutineUnintercepted:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L1281b6.  return @kind void;
  #L1281b8.  call temp:= `getALREADY_SELECTED`() @signature `Lkotlinx/coroutines/selects/SelectKt;.getALREADY_SELECTED:()Ljava/lang/Object;` @kind static;
  #L1281be.  v1:= temp @kind object;
  #L1281c0.  if v0 != v1 then goto L1281c6;
  #L1281c4.  return @kind void;
  #L1281c6.  call temp:= `access$getLOCK_FAIL$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCK_FAIL$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1281cc.  v1:= temp @kind object;
  #L1281ce.  if v0 != v1 then goto L1281d4;
  #L1281d2.  goto L128148;
  #L1281d4.  v1:= `@@kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC` @type ^`java.lang.Object` @kind object;
  #L1281d8.  if v0 != v1 then goto L1281de;
  #L1281dc.  goto L128148;
  #L1281de.  v5:= new `java.lang.IllegalStateException`;
  #L1281e2.  v6:= "performAtomicTrySelect(TryLockDesc) returned " @kind object;
  #L1281e6.  call temp:= `stringPlus`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1281ec.  v6:= temp @kind object;
  #L1281ee.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1281f4.  v6:= temp @kind object;
  #L1281f6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1281fc.  throw v5;
  #L1281fe.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L128202.  if v1 == 0 then goto L12826a;
  #L128206.  v1:= v0 @kind object;
  #L128208.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L12820c.  v2:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L128210.  if v2 == v6 then goto L128218;
  #L128214.  v2:= 1I;
  #L128216.  goto L12821a;
  #L128218.  v2:= 0I;
  #L12821a.  if v2 == 0 then goto L12824a;
  #L12821e.  v2:= new `kotlinx.coroutines.sync.MutexImpl$b`;
  #L128222.  call `<init>`(v2, v4, v6, v5, v7) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/selects/SelectInstance;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L128228.  call `addLast`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.addLast:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L12822e.  v1:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L128232.  if v1 == v0 then goto L128242;
  #L128236.  call temp:= `f`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Z` @kind virtual;
  #L12823c.  v0:= temp;
  #L12823e.  if v0 != 0 then goto L128148;
  #L128242.  call `disposeOnSelect`(v5, v2) @signature `Lkotlinx/coroutines/selects/SelectInstance;.disposeOnSelect:(Lkotlinx/coroutines/DisposableHandle;)V` @kind interface;
  #L128248.  return @kind void;
  #L12824a.  v5:= "Already locked by " @kind object;
  #L12824e.  call temp:= `stringPlus`(v5, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L128254.  v5:= temp @kind object;
  #L128256.  v6:= new `java.lang.IllegalStateException`;
  #L12825a.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L128260.  v5:= temp @kind object;
  #L128262.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128268.  throw v6;
  #L12826a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L12826e.  if v1 == 0 then goto L128280;
  #L128272.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L128276.  call temp:= `perform`(v0, v4) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12827c.  goto L128148;
  #L128280.  v5:= new `java.lang.IllegalStateException`;
  #L128284.  v6:= "Illegal state " @kind object;
  #L128288.  call temp:= `stringPlus`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12828e.  v6:= temp @kind object;
  #L128290.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L128296.  v6:= temp @kind object;
  #L128298.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12829e.  throw v5;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L128018.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L12801c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L128020.  v2:= 93I;
  #L128024.  v3:= "Mutex[" @kind object;
  #L128028.  if v1 == 0 then goto L12805a;
  #L12802c.  v1:= new `java.lang.StringBuilder`;
  #L128030.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L128036.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12803c.  v0:= (`kotlinx.coroutines.sync.b`) v0 @kind object;
  #L128040.  v0:= v0.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L128044.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12804a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L128050.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L128056.  v0:= temp @kind object;
  #L128058.  return v0 @kind object;
  #L12805a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L12805e.  if v1 == 0 then goto L12806e;
  #L128062.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L128066.  call temp:= `perform`(v0, v4) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12806c.  goto L128018;
  #L12806e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L128072.  if v1 == 0 then goto L1280a4;
  #L128076.  v1:= new `java.lang.StringBuilder`;
  #L12807a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L128080.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L128086.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L12808a.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L12808e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L128094.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12809a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1280a0.  v0:= temp @kind object;
  #L1280a2.  return v0 @kind object;
  #L1280a4.  v1:= new `java.lang.IllegalStateException`;
  #L1280a8.  v2:= "Illegal state " @kind object;
  #L1280ac.  call temp:= `stringPlus`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1280b2.  v0:= temp @kind object;
  #L1280b4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1280ba.  v0:= temp @kind object;
  #L1280bc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1280c2.  throw v1;
}
procedure `boolean` `tryLock`(`kotlinx.coroutines.sync.MutexImpl` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.tryLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L127d70.  v0:= v5.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L127d74.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L127d78.  v2:= 1I;
  #L127d7a.  v3:= 0I;
  #L127d7c.  if v1 == 0 then goto L127dc2;
  #L127d80.  v1:= v0 @kind object;
  #L127d82.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L127d86.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L127d8a.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L127d90.  v4:= temp @kind object;
  #L127d92.  if v1 == v4 then goto L127d98;
  #L127d96.  return v3;
  #L127d98.  if v6 != 0 then goto L127da6;
  #L127d9c.  call temp:= `access$getEMPTY_LOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_LOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L127da2.  v1:= temp @kind object;
  #L127da4.  goto L127db0;
  #L127da6.  v1:= new `kotlinx.coroutines.sync.b`;
  #L127daa.  call `<init>`(v1, v6) @signature `Lkotlinx/coroutines/sync/b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L127db0.  v3:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L127db4.  call temp:= `a`(v3, v5, v0, v1) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L127dba.  v0:= temp;
  #L127dbc.  if v0 == 0 then goto L127d70;
  #L127dc0.  return v2;
  #L127dc2.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L127dc6.  if v1 == 0 then goto L127e00;
  #L127dca.  v0:= (`kotlinx.coroutines.sync.MutexImpl$d`) v0 @kind object;
  #L127dce.  v0:= v0.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L127dd2.  if v0 == v6 then goto L127dd8;
  #L127dd6.  goto L127dda;
  #L127dd8.  v2:= 0I;
  #L127dda.  if v2 == 0 then goto L127de0;
  #L127dde.  return v3;
  #L127de0.  v0:= "Already locked by " @kind object;
  #L127de4.  call temp:= `stringPlus`(v0, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L127dea.  v6:= temp @kind object;
  #L127dec.  v0:= new `java.lang.IllegalStateException`;
  #L127df0.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L127df6.  v6:= temp @kind object;
  #L127df8.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L127dfe.  throw v0;
  #L127e00.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L127e04.  if v1 == 0 then goto L127e14;
  #L127e08.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L127e0c.  call temp:= `perform`(v0, v5) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L127e12.  goto L127d70;
  #L127e14.  v6:= new `java.lang.IllegalStateException`;
  #L127e18.  v1:= "Illegal state " @kind object;
  #L127e1c.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L127e22.  v0:= temp @kind object;
  #L127e24.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L127e2a.  v0:= temp @kind object;
  #L127e2c.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L127e32.  throw v6;
}
procedure `void` `unlock`(`kotlinx.coroutines.sync.MutexImpl` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.unlock:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1282b0.  v0:= v7.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L1282b4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.b` @kind boolean;
  #L1282b8.  v2:= " but expected " @kind object;
  #L1282bc.  v3:= "Mutex is locked by " @kind object;
  #L1282c0.  v4:= 1I;
  #L1282c2.  v5:= 0I;
  #L1282c4.  if v1 == 0 then goto L128376;
  #L1282c8.  if v8 != 0 then goto L128304;
  #L1282cc.  v1:= v0 @kind object;
  #L1282ce.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L1282d2.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L1282d6.  call temp:= `access$getUNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getUNLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1282dc.  v2:= temp @kind object;
  #L1282de.  if v1 == v2 then goto L1282e4;
  #L1282e2.  goto L1282e6;
  #L1282e4.  v4:= 0I;
  #L1282e6.  if v4 == 0 then goto L1282ec;
  #L1282ea.  goto L12831a;
  #L1282ec.  v8:= new `java.lang.IllegalStateException`;
  #L1282f0.  v0:= "Mutex is not locked" @kind object;
  #L1282f4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1282fa.  v0:= temp @kind object;
  #L1282fc.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128302.  throw v8;
  #L128304.  v1:= v0 @kind object;
  #L128306.  v1:= (`kotlinx.coroutines.sync.b`) v1 @kind object;
  #L12830a.  v6:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L12830e.  if v6 != v8 then goto L128314;
  #L128312.  goto L128316;
  #L128314.  v4:= 0I;
  #L128316.  if v4 == 0 then goto L128334;
  #L12831a.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L12831e.  call temp:= `access$getEMPTY_UNLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getEMPTY_UNLOCKED$p:()Lkotlinx/coroutines/sync/b;` @kind static;
  #L128324.  v2:= temp @kind object;
  #L128326.  call temp:= `a`(v1, v7, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L12832c.  v0:= temp;
  #L12832e.  if v0 == 0 then goto L1282b0;
  #L128332.  return @kind void;
  #L128334.  v0:= new `java.lang.StringBuilder`;
  #L128338.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12833e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L128344.  v1:= v1.`kotlinx.coroutines.sync.b.a` @type ^`java.lang.Object` @kind object;
  #L128348.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12834e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L128354.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12835a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L128360.  v8:= temp @kind object;
  #L128362.  v0:= new `java.lang.IllegalStateException`;
  #L128366.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12836c.  v8:= temp @kind object;
  #L12836e.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128374.  throw v0;
  #L128376.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.OpDescriptor` @kind boolean;
  #L12837a.  if v1 == 0 then goto L12838a;
  #L12837e.  v0:= (`kotlinx.coroutines.internal.OpDescriptor`) v0 @kind object;
  #L128382.  call temp:= `perform`(v0, v7) @signature `Lkotlinx/coroutines/internal/OpDescriptor;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L128388.  goto L1282b0;
  #L12838a.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.MutexImpl$d` @kind boolean;
  #L12838e.  if v1 == 0 then goto L128456;
  #L128392.  if v8 == 0 then goto L1283f0;
  #L128396.  v1:= v0 @kind object;
  #L128398.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L12839c.  v6:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L1283a0.  if v6 != v8 then goto L1283a6;
  #L1283a4.  goto L1283a8;
  #L1283a6.  v4:= 0I;
  #L1283a8.  if v4 == 0 then goto L1283ae;
  #L1283ac.  goto L1283f0;
  #L1283ae.  v0:= new `java.lang.StringBuilder`;
  #L1283b2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1283b8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1283be.  v1:= v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` @kind object;
  #L1283c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1283c8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1283ce.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1283d4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1283da.  v8:= temp @kind object;
  #L1283dc.  v0:= new `java.lang.IllegalStateException`;
  #L1283e0.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1283e6.  v8:= temp @kind object;
  #L1283e8.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1283ee.  throw v0;
  #L1283f0.  v1:= v0 @kind object;
  #L1283f2.  v1:= (`kotlinx.coroutines.sync.MutexImpl$d`) v1 @kind object;
  #L1283f6.  call temp:= `removeFirstOrNull`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.removeFirstOrNull:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L1283fc.  v2:= temp @kind object;
  #L1283fe.  if v2 != 0 then goto L12842a;
  #L128402.  v2:= new `kotlinx.coroutines.sync.MutexImpl$f`;
  #L128406.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$f;.<init>:(Lkotlinx/coroutines/sync/MutexImpl$d;)V` @kind direct;
  #L12840c.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L128410.  call temp:= `a`(v1, v7, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L128416.  v0:= temp;
  #L128418.  if v0 == 0 then goto L1282b0;
  #L12841c.  call temp:= `perform`(v2, v7) @signature `Lkotlinx/coroutines/internal/AtomicOp;.perform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L128422.  v0:= temp @kind object;
  #L128424.  if v0 != 0 then goto L1282b0;
  #L128428.  return @kind void;
  #L12842a.  v2:= (`kotlinx.coroutines.sync.MutexImpl$c`) v2 @kind object;
  #L12842e.  call temp:= `g`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.g:()Z` @kind virtual;
  #L128434.  v0:= temp;
  #L128436.  if v0 == 0 then goto L1282b0;
  #L12843a.  v8:= v2.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` @kind object;
  #L12843e.  if v8 != 0 then goto L12844a;
  #L128442.  call temp:= `access$getLOCKED$p`() @signature `Lkotlinx/coroutines/sync/MutexKt;.access$getLOCKED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128448.  v8:= temp @kind object;
  #L12844a.  v1.`kotlinx.coroutines.sync.MutexImpl$d.d` @type ^`java.lang.Object` := v8 @kind object;
  #L12844e.  call `e`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.e:()V` @kind virtual;
  #L128454.  return @kind void;
  #L128456.  v8:= new `java.lang.IllegalStateException`;
  #L12845a.  v1:= "Illegal state " @kind object;
  #L12845e.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L128464.  v0:= temp @kind object;
  #L128466.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L12846c.  v0:= temp @kind object;
  #L12846e.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128474.  throw v8;
}
