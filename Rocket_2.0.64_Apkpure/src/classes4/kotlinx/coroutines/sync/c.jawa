record `kotlinx.coroutines.sync.c` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.sync.Semaphore` @kind interface {
  `int` `kotlinx.coroutines.sync.c._availablePermits` @AccessFlag VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.sync.c.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlinx.coroutines.sync.c.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlinx.coroutines.sync.c.deqIdx` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.sync.c.enqIdx` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.sync.c.head` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.sync.c.tail` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.c.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.sync.c.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.c.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.sync.c.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.sync.c.g` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L128d24.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L128d28.  v1:= constclass @type ^`kotlinx.coroutines.sync.c` @kind object;
  #L128d2c.  v2:= "head" @kind object;
  #L128d30.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L128d36.  v2:= temp @kind object;
  #L128d38.  `@@kotlinx.coroutines.sync.c.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L128d3c.  v2:= "deqIdx" @kind object;
  #L128d40.  call temp:= `newUpdater`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L128d46.  v2:= temp @kind object;
  #L128d48.  `@@kotlinx.coroutines.sync.c.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v2 @kind object;
  #L128d4c.  v2:= "tail" @kind object;
  #L128d50.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L128d56.  v0:= temp @kind object;
  #L128d58.  `@@kotlinx.coroutines.sync.c.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L128d5c.  v0:= "enqIdx" @kind object;
  #L128d60.  call temp:= `newUpdater`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L128d66.  v0:= temp @kind object;
  #L128d68.  `@@kotlinx.coroutines.sync.c.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L128d6c.  v0:= "_availablePermits" @kind object;
  #L128d70.  call temp:= `newUpdater`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L128d76.  v0:= temp @kind object;
  #L128d78.  `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L128d7c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.c` v5 @kind this, `int` v6 , `int` v7 ) @signature `Lkotlinx/coroutines/sync/c;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L128d90.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L128d96.  v5.`kotlinx.coroutines.sync.c.a` @type ^`int` := v6;
  #L128d9a.  v0:= 0L;
  #L128d9e.  v5.`kotlinx.coroutines.sync.c.deqIdx` @type ^`long` := v0 @kind wide;
  #L128da2.  v5.`kotlinx.coroutines.sync.c.enqIdx` @type ^`long` := v0 @kind wide;
  #L128da6.  v2:= 1I;
  #L128da8.  v3:= 0I;
  #L128daa.  if v6 <= 0 then goto L128db2;
  #L128dae.  v4:= 1I;
  #L128db0.  goto L128db4;
  #L128db2.  v4:= 0I;
  #L128db4.  if v4 == 0 then goto L128e1c;
  #L128db8.  if v7 < 0 then goto L128dc2;
  #L128dbc.  if v7 > v6 then goto L128dc2;
  #L128dc0.  goto L128dc4;
  #L128dc2.  v2:= 0I;
  #L128dc4.  if v2 == 0 then goto L128df4;
  #L128dc8.  v2:= new `kotlinx.coroutines.sync.d`;
  #L128dcc.  v3:= 0I;
  #L128dce.  v4:= 2I;
  #L128dd0.  call `<init>`(v2, v0, v3, v4) @signature `Lkotlinx/coroutines/sync/d;.<init>:(JLkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L128dd6.  v5.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` := v2 @kind object;
  #L128dda.  v5.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` := v2 @kind object;
  #L128dde.  v6:= v6 - v7 @kind int;
  #L128de0.  v5.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int` := v6;
  #L128de4.  v6:= new `kotlinx.coroutines.sync.c$a`;
  #L128de8.  call `<init>`(v6, v5) @signature `Lkotlinx/coroutines/sync/c$a;.<init>:(Lkotlinx/coroutines/sync/c;)V` @kind direct;
  #L128dee.  v5.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` := v6 @kind object;
  #L128df2.  return @kind void;
  #L128df4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L128dfa.  v6:= temp @kind object;
  #L128dfc.  v7:= "The number of acquired permits should be in 0.." @kind object;
  #L128e00.  call temp:= `stringPlus`(v7, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L128e06.  v6:= temp @kind object;
  #L128e08.  v7:= new `java.lang.IllegalArgumentException`;
  #L128e0c.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L128e12.  v6:= temp @kind object;
  #L128e14.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128e1a.  throw v7;
  #L128e1c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L128e22.  v6:= temp @kind object;
  #L128e24.  v7:= "Semaphore should have at least 1 permit, but had " @kind object;
  #L128e28.  call temp:= `stringPlus`(v7, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L128e2e.  v6:= temp @kind object;
  #L128e30.  v7:= new `java.lang.IllegalArgumentException`;
  #L128e34.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L128e3a.  v6:= temp @kind object;
  #L128e3c.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128e42.  throw v7;
}
procedure `boolean` `a`(`kotlinx.coroutines.sync.c` v0 @kind object, `kotlinx.coroutines.CancellableContinuation` v1 @kind object) @signature `Lkotlinx/coroutines/sync/c;.a:(Lkotlinx/coroutines/sync/c;Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1287cc.  call temp:= `d`(v0, v1) @signature `Lkotlinx/coroutines/sync/c;.d:(Lkotlinx/coroutines/CancellableContinuation;)Z` @kind direct;
  #L1287d2.  v0:= temp;
  #L1287d4.  return v0;
}
procedure `kotlin.jvm.functions.Function1` `b`(`kotlinx.coroutines.sync.c` v0 @kind object) @signature `Lkotlinx/coroutines/sync/c;.b:(Lkotlinx/coroutines/sync/c;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L128d0c.  v0:= v0.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L128d10.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.sync.c` v3 @kind this, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/sync/c;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L128c8c.  call temp:= `intercepted`(v4) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L128c92.  v0:= temp @kind object;
  #L128c94.  call temp:= `getOrCreateCancellableContinuation`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.getOrCreateCancellableContinuation:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/CancellableContinuationImpl;` @kind static;
  #L128c9a.  v0:= temp @kind object;
  #L128c9c.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/sync/c;.a:(Lkotlinx/coroutines/sync/c;Lkotlinx/coroutines/CancellableContinuation;)Z` @kind static;
  #L128ca2.  v1:= temp;
  #L128ca4.  if v1 == 0 then goto L128caa;
  #L128ca8.  goto L128ccc;
  #L128caa.  v1:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L128cae.  call temp:= `getAndDecrement`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)I` @kind virtual;
  #L128cb4.  v1:= temp;
  #L128cb6.  if v1 <= 0 then goto L128c9c;
  #L128cba.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L128cbe.  call temp:= `b`(v3) @signature `Lkotlinx/coroutines/sync/c;.b:(Lkotlinx/coroutines/sync/c;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L128cc4.  v2:= temp @kind object;
  #L128cc6.  call `resume`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L128ccc.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L128cd2.  v0:= temp @kind object;
  #L128cd4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L128cda.  v1:= temp @kind object;
  #L128cdc.  if v0 != v1 then goto L128ce6;
  #L128ce0.  call `probeCoroutineSuspended`(v4) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L128ce6.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L128cec.  v4:= temp @kind object;
  #L128cee.  if v0 != v4 then goto L128cf4;
  #L128cf2.  return v0 @kind object;
  #L128cf4.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L128cf8.  return v4 @kind object;
}
procedure `boolean` `d`(`kotlinx.coroutines.sync.c` v17 @kind this, `kotlinx.coroutines.CancellableContinuation` v18 @kind object) @signature `Lkotlinx/coroutines/sync/c;.d:(Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1287e8.  v0:= v17 @kind object;
  #L1287ec.  v1:= v18 @kind object;
  #L1287f0.  v2:= v0.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` @kind object;
  #L1287f4.  v2:= (`kotlinx.coroutines.sync.d`) v2 @kind object;
  #L1287f8.  v3:= `@@kotlinx.coroutines.sync.c.f` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L1287fc.  call temp:= `getAndIncrement`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndIncrement:(Ljava/lang/Object;)J` @kind virtual;
  #L128802.  v3:= temp @kind wide;
  #L128804.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L12880a.  v5:= temp;
  #L12880c.  v5:= (`long`) v5 @kind i2l;
  #L12880e.  v5:= v3 / v5 @kind long;
  #L128812.  v7:= v2 @kind object;
  #L128814.  call temp:= `getId`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L12881a.  v8:= temp @kind wide;
  #L12881c.  v10:= lcmp(v8, v5);
  #L128820.  if v10 < 0 then goto L12883c;
  #L128824.  call temp:= `getRemoved`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L12882a.  v8:= temp;
  #L12882c.  if v8 == 0 then goto L128832;
  #L128830.  goto L12883c;
  #L128832.  call temp:= `constructor-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L128838.  v7:= temp @kind object;
  #L12883a.  goto L128860;
  #L12883c.  call temp:= `access$getNextOrClosed`(v7) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L128842.  v8:= temp @kind object;
  #L128844.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L12884a.  v9:= temp @kind object;
  #L12884c.  if v8 != v9 then goto L12895a;
  #L128850.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128856.  v7:= temp @kind object;
  #L128858.  call temp:= `constructor-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L12885e.  v7:= temp @kind object;
  #L128860.  call temp:= `isClosed-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.isClosed-impl:(Ljava/lang/Object;)Z` @kind static;
  #L128866.  v8:= temp;
  #L128868.  v9:= 0I;
  #L12886a.  v10:= 1I;
  #L12886c.  if v8 != 0 then goto L1288ea;
  #L128870.  call temp:= `getSegment-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L128876.  v8:= temp @kind object;
  #L128878.  v11:= v0.`kotlinx.coroutines.sync.c.tail` @type ^`java.lang.Object` @kind object;
  #L12887c.  v11:= (`kotlinx.coroutines.internal.Segment`) v11 @kind object;
  #L128880.  call temp:= `getId`(v11) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128886.  v12:= temp @kind wide;
  #L128888.  call temp:= `getId`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L12888e.  v14:= temp @kind wide;
  #L128890.  v16:= lcmp(v12, v14);
  #L128894.  if v16 < 0 then goto L12889c;
  #L128898.  v8:= 1I;
  #L12889a.  goto L1288d0;
  #L12889c.  call temp:= `tryIncPointers$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1288a2.  v12:= temp;
  #L1288a4.  if v12 != 0 then goto L1288ac;
  #L1288a8.  v8:= 0I;
  #L1288aa.  goto L1288d0;
  #L1288ac.  v12:= `@@kotlinx.coroutines.sync.c.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1288b0.  call temp:= `a`(v12, v0, v11, v8) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1288b6.  v12:= temp;
  #L1288b8.  if v12 == 0 then goto L1288d6;
  #L1288bc.  call temp:= `decPointers$kotlinx_coroutines_core`(v11) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1288c2.  v8:= temp;
  #L1288c4.  if v8 == 0 then goto L128898;
  #L1288c8.  call `remove`(v11) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1288ce.  goto L128898;
  #L1288d0.  if v8 == 0 then goto L128812;
  #L1288d4.  goto L1288ea;
  #L1288d6.  call temp:= `decPointers$kotlinx_coroutines_core`(v8) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L1288dc.  v11:= temp;
  #L1288de.  if v11 == 0 then goto L128878;
  #L1288e2.  call `remove`(v8) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1288e8.  goto L128878;
  #L1288ea.  call temp:= `getSegment-impl`(v7) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L1288f0.  v2:= temp @kind object;
  #L1288f2.  v2:= (`kotlinx.coroutines.sync.d`) v2 @kind object;
  #L1288f6.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L1288fc.  v5:= temp;
  #L1288fe.  v5:= (`long`) v5 @kind i2l;
  #L128900.  v3:= v3 %% v5 @kind long;
  #L128902.  v4:= (`int`) v3 @kind l2i;
  #L128904.  v3:= 0I;
  #L128906.  v5:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L12890a.  call temp:= `compareAndSet`(v5, v4, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L128910.  v3:= temp;
  #L128912.  if v3 == 0 then goto L128928;
  #L128916.  v3:= new `kotlinx.coroutines.sync.a`;
  #L12891a.  call `<init>`(v3, v2, v4) @signature `Lkotlinx/coroutines/sync/a;.<init>:(Lkotlinx/coroutines/sync/d;I)V` @kind direct;
  #L128920.  call `invokeOnCancellation`(v1, v3) @signature `Lkotlinx/coroutines/CancellableContinuation;.invokeOnCancellation:(Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L128926.  return v10;
  #L128928.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L12892e.  v3:= temp @kind object;
  #L128930.  call temp:= `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128936.  v5:= temp @kind object;
  #L128938.  v2:= v2.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L12893c.  call temp:= `compareAndSet`(v2, v4, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L128942.  v2:= temp;
  #L128944.  if v2 == 0 then goto L128958;
  #L128948.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L12894c.  v3:= v0.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L128950.  call `resume`(v1, v2, v3) @signature `Lkotlinx/coroutines/CancellableContinuation;.resume:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L128956.  return v10;
  #L128958.  return v9;
  #L12895a.  v8:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v8 @kind object;
  #L12895e.  v8:= (`kotlinx.coroutines.internal.Segment`) v8 @kind object;
  #L128962.  if v8 == 0 then goto L12896c;
  #L128966.  v7:= v8 @kind object;
  #L128968.  goto L128814;
  #L12896c.  call temp:= `getId`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128972.  v8:= temp @kind wide;
  #L128974.  v10:= 1L;
  #L128978.  v8:= v8 + v10 @kind long;
  #L12897a.  v10:= v7 @kind object;
  #L12897c.  v10:= (`kotlinx.coroutines.sync.d`) v10 @kind object;
  #L128980.  call temp:= `access$createSegment`(v8, v10) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L128986.  v8:= temp @kind object;
  #L128988.  call temp:= `trySetNext`(v7, v8) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @kind virtual;
  #L12898e.  v9:= temp;
  #L128990.  if v9 == 0 then goto L128814;
  #L128994.  call temp:= `getRemoved`(v7) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L12899a.  v9:= temp;
  #L12899c.  if v9 == 0 then goto L128966;
  #L1289a0.  call `remove`(v7) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L1289a6.  goto L128966;
}
procedure `boolean` `e`(`kotlinx.coroutines.sync.c` v3 @kind this, `kotlinx.coroutines.CancellableContinuation` v4 @kind object) @signature `Lkotlinx/coroutines/sync/c;.e:(Lkotlinx/coroutines/CancellableContinuation;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1289ec.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1289f0.  v1:= v3.`kotlinx.coroutines.sync.c.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L1289f4.  v2:= 0I;
  #L1289f6.  call temp:= `tryResume`(v4, v0, v2, v1) @signature `Lkotlinx/coroutines/CancellableContinuation;.tryResume:(Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @kind interface;
  #L1289fc.  v0:= temp @kind object;
  #L1289fe.  if v0 != 0 then goto L128a06;
  #L128a02.  v4:= 0I;
  #L128a04.  return v4;
  #L128a06.  call `completeResume`(v4, v0) @signature `Lkotlinx/coroutines/CancellableContinuation;.completeResume:(Ljava/lang/Object;)V` @kind interface;
  #L128a0c.  v4:= 1I;
  #L128a0e.  return v4;
}
procedure `boolean` `f`(`kotlinx.coroutines.sync.c` v15 @kind this) @signature `Lkotlinx/coroutines/sync/c;.f:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L128a20.  v0:= v15.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` @kind object;
  #L128a24.  v0:= (`kotlinx.coroutines.sync.d`) v0 @kind object;
  #L128a28.  v1:= `@@kotlinx.coroutines.sync.c.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L128a2c.  call temp:= `getAndIncrement`(v1, v15) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndIncrement:(Ljava/lang/Object;)J` @kind virtual;
  #L128a32.  v1:= temp @kind wide;
  #L128a34.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L128a3a.  v3:= temp;
  #L128a3c.  v3:= (`long`) v3 @kind i2l;
  #L128a3e.  v3:= v1 / v3 @kind long;
  #L128a42.  v5:= v0 @kind object;
  #L128a44.  call temp:= `getId`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128a4a.  v6:= temp @kind wide;
  #L128a4c.  v8:= lcmp(v6, v3);
  #L128a50.  if v8 < 0 then goto L128a6c;
  #L128a54.  call temp:= `getRemoved`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L128a5a.  v6:= temp;
  #L128a5c.  if v6 == 0 then goto L128a62;
  #L128a60.  goto L128a6c;
  #L128a62.  call temp:= `constructor-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L128a68.  v5:= temp @kind object;
  #L128a6a.  goto L128a90;
  #L128a6c.  call temp:= `access$getNextOrClosed`(v5) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.access$getNextOrClosed:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Ljava/lang/Object;` @kind static;
  #L128a72.  v6:= temp @kind object;
  #L128a74.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128a7a.  v7:= temp @kind object;
  #L128a7c.  if v6 != v7 then goto L128bca;
  #L128a80.  call temp:= `access$getCLOSED$p`() @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListKt;.access$getCLOSED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128a86.  v5:= temp @kind object;
  #L128a88.  call temp:= `constructor-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L128a8e.  v5:= temp @kind object;
  #L128a90.  call temp:= `isClosed-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.isClosed-impl:(Ljava/lang/Object;)Z` @kind static;
  #L128a96.  v6:= temp;
  #L128a98.  v7:= 0I;
  #L128a9a.  v8:= 1I;
  #L128a9c.  if v6 != 0 then goto L128b1a;
  #L128aa0.  call temp:= `getSegment-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L128aa6.  v6:= temp @kind object;
  #L128aa8.  v9:= v15.`kotlinx.coroutines.sync.c.head` @type ^`java.lang.Object` @kind object;
  #L128aac.  v9:= (`kotlinx.coroutines.internal.Segment`) v9 @kind object;
  #L128ab0.  call temp:= `getId`(v9) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128ab6.  v10:= temp @kind wide;
  #L128ab8.  call temp:= `getId`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128abe.  v12:= temp @kind wide;
  #L128ac0.  v14:= lcmp(v10, v12);
  #L128ac4.  if v14 < 0 then goto L128acc;
  #L128ac8.  v6:= 1I;
  #L128aca.  goto L128b00;
  #L128acc.  call temp:= `tryIncPointers$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.tryIncPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L128ad2.  v10:= temp;
  #L128ad4.  if v10 != 0 then goto L128adc;
  #L128ad8.  v6:= 0I;
  #L128ada.  goto L128b00;
  #L128adc.  v10:= `@@kotlinx.coroutines.sync.c.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L128ae0.  call temp:= `a`(v10, v15, v9, v6) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L128ae6.  v10:= temp;
  #L128ae8.  if v10 == 0 then goto L128b06;
  #L128aec.  call temp:= `decPointers$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L128af2.  v6:= temp;
  #L128af4.  if v6 == 0 then goto L128ac8;
  #L128af8.  call `remove`(v9) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L128afe.  goto L128ac8;
  #L128b00.  if v6 == 0 then goto L128a42;
  #L128b04.  goto L128b1a;
  #L128b06.  call temp:= `decPointers$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/internal/Segment;.decPointers$kotlinx_coroutines_core:()Z` @kind virtual;
  #L128b0c.  v9:= temp;
  #L128b0e.  if v9 == 0 then goto L128aa8;
  #L128b12.  call `remove`(v6) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L128b18.  goto L128aa8;
  #L128b1a.  call temp:= `getSegment-impl`(v5) @signature `Lkotlinx/coroutines/internal/SegmentOrClosed;.getSegment-impl:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/Segment;` @kind static;
  #L128b20.  v0:= temp @kind object;
  #L128b22.  v0:= (`kotlinx.coroutines.sync.d`) v0 @kind object;
  #L128b26.  call `cleanPrev`(v0) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.cleanPrev:()V` @kind virtual;
  #L128b2c.  call temp:= `getId`(v0) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128b32.  v5:= temp @kind wide;
  #L128b34.  v9:= lcmp(v5, v3);
  #L128b38.  if v9 <= 0 then goto L128b3e;
  #L128b3c.  return v7;
  #L128b3e.  call temp:= `access$getSEGMENT_SIZE$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getSEGMENT_SIZE$p:()I` @kind static;
  #L128b44.  v3:= temp;
  #L128b46.  v3:= (`long`) v3 @kind i2l;
  #L128b48.  v1:= v1 %% v3 @kind long;
  #L128b4a.  v2:= (`int`) v1 @kind l2i;
  #L128b4c.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128b52.  v1:= temp @kind object;
  #L128b54.  v3:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L128b58.  call temp:= `getAndSet`(v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L128b5e.  v1:= temp @kind object;
  #L128b60.  if v1 != 0 then goto L128bae;
  #L128b64.  call temp:= `access$getMAX_SPIN_CYCLES$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getMAX_SPIN_CYCLES$p:()I` @kind static;
  #L128b6a.  v1:= temp;
  #L128b6c.  if v7 >= v1 then goto L128b8e;
  #L128b70.  v7:= v7 + 1;
  #L128b74.  v3:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L128b78.  call temp:= `get`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L128b7e.  v3:= temp @kind object;
  #L128b80.  call temp:= `access$getTAKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getTAKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128b86.  v4:= temp @kind object;
  #L128b88.  if v3 != v4 then goto L128b6c;
  #L128b8c.  return v8;
  #L128b8e.  call temp:= `access$getPERMIT$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getPERMIT$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128b94.  v1:= temp @kind object;
  #L128b96.  call temp:= `access$getBROKEN$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getBROKEN$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128b9c.  v3:= temp @kind object;
  #L128b9e.  v0:= v0.`kotlinx.coroutines.sync.d.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L128ba2.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L128ba8.  v0:= temp;
  #L128baa.  v0:= v0 ^~ v8 @kind int;
  #L128bac.  return v0;
  #L128bae.  call temp:= `access$getCANCELLED$p`() @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$getCANCELLED$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L128bb4.  v0:= temp @kind object;
  #L128bb6.  if v1 != v0 then goto L128bbc;
  #L128bba.  return v7;
  #L128bbc.  v1:= (`kotlinx.coroutines.CancellableContinuation`) v1 @kind object;
  #L128bc0.  call temp:= `e`(v15, v1) @signature `Lkotlinx/coroutines/sync/c;.e:(Lkotlinx/coroutines/CancellableContinuation;)Z` @kind direct;
  #L128bc6.  v0:= temp;
  #L128bc8.  return v0;
  #L128bca.  v6:= (`kotlinx.coroutines.internal.ConcurrentLinkedListNode`) v6 @kind object;
  #L128bce.  v6:= (`kotlinx.coroutines.internal.Segment`) v6 @kind object;
  #L128bd2.  if v6 == 0 then goto L128bdc;
  #L128bd6.  v5:= v6 @kind object;
  #L128bd8.  goto L128a44;
  #L128bdc.  call temp:= `getId`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getId:()J` @kind virtual;
  #L128be2.  v6:= temp @kind wide;
  #L128be4.  v8:= 1L;
  #L128be8.  v6:= v6 + v8 @kind long;
  #L128bea.  v8:= v5 @kind object;
  #L128bec.  v8:= (`kotlinx.coroutines.sync.d`) v8 @kind object;
  #L128bf0.  call temp:= `access$createSegment`(v6, v8) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.access$createSegment:(JLkotlinx/coroutines/sync/d;)Lkotlinx/coroutines/sync/d;` @kind static;
  #L128bf6.  v6:= temp @kind object;
  #L128bf8.  call temp:= `trySetNext`(v5, v6) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.trySetNext:(Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;)Z` @kind virtual;
  #L128bfe.  v7:= temp;
  #L128c00.  if v7 == 0 then goto L128a44;
  #L128c04.  call temp:= `getRemoved`(v5) @signature `Lkotlinx/coroutines/internal/Segment;.getRemoved:()Z` @kind virtual;
  #L128c0a.  v7:= temp;
  #L128c0c.  if v7 == 0 then goto L128bd6;
  #L128c10.  call `remove`(v5) @signature `Lkotlinx/coroutines/internal/ConcurrentLinkedListNode;.remove:()V` @kind virtual;
  #L128c16.  goto L128bd6;
}
procedure `java.lang.Object` `acquire`(`kotlinx.coroutines.sync.c` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/sync/c;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L128c48.  v0:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L128c4c.  call temp:= `getAndDecrement`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)I` @kind virtual;
  #L128c52.  v0:= temp;
  #L128c54.  if v0 <= 0 then goto L128c5e;
  #L128c58.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L128c5c.  return v2 @kind object;
  #L128c5e.  call temp:= `c`(v1, v2) @signature `Lkotlinx/coroutines/sync/c;.c:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L128c64.  v2:= temp @kind object;
  #L128c66.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L128c6c.  v0:= temp @kind object;
  #L128c6e.  if v2 != v0 then goto L128c74;
  #L128c72.  return v2 @kind object;
  #L128c74.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L128c78.  return v2 @kind object;
}
procedure `int` `getAvailablePermits`(`kotlinx.coroutines.sync.c` v2 @kind this) @signature `Lkotlinx/coroutines/sync/c;.getAvailablePermits:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L128c28.  v0:= v2.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L128c2c.  v1:= 0I;
  #L128c2e.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L128c34.  v0:= temp;
  #L128c36.  return v0;
}
procedure `void` `release`(`kotlinx.coroutines.sync.c` v3 @kind this) @signature `Lkotlinx/coroutines/sync/c;.release:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L128e54.  v0:= v3.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L128e58.  v1:= v3.`kotlinx.coroutines.sync.c.a` @type ^`int`;
  #L128e5c.  if v0 >= v1 then goto L128e64;
  #L128e60.  v2:= 1I;
  #L128e62.  goto L128e66;
  #L128e64.  v2:= 0I;
  #L128e66.  if v2 == 0 then goto L128e92;
  #L128e6a.  v1:= v0 + 1;
  #L128e6e.  v2:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L128e72.  call temp:= `compareAndSet`(v2, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L128e78.  v1:= temp;
  #L128e7a.  if v1 == 0 then goto L128e54;
  #L128e7e.  if v0 < 0 then goto L128e84;
  #L128e82.  return @kind void;
  #L128e84.  call temp:= `f`(v3) @signature `Lkotlinx/coroutines/sync/c;.f:()Z` @kind direct;
  #L128e8a.  v0:= temp;
  #L128e8c.  if v0 == 0 then goto L128e54;
  #L128e90.  return @kind void;
  #L128e92.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L128e98.  v0:= temp @kind object;
  #L128e9a.  v1:= "The number of released permits cannot be greater than " @kind object;
  #L128e9e.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L128ea4.  v0:= temp @kind object;
  #L128ea6.  v1:= new `java.lang.IllegalStateException`;
  #L128eaa.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L128eb0.  v0:= temp @kind object;
  #L128eb2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L128eb8.  throw v1;
}
procedure `boolean` `tryAcquire`(`kotlinx.coroutines.sync.c` v3 @kind this) @signature `Lkotlinx/coroutines/sync/c;.tryAcquire:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1289b8.  v0:= v3.`kotlinx.coroutines.sync.c._availablePermits` @type ^`int`;
  #L1289bc.  if v0 > 0 then goto L1289c4;
  #L1289c0.  v0:= 0I;
  #L1289c2.  return v0;
  #L1289c4.  v1:= `@@kotlinx.coroutines.sync.c.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L1289c8.  v2:= v0 + -1;
  #L1289cc.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L1289d2.  v0:= temp;
  #L1289d4.  if v0 == 0 then goto L1289b8;
  #L1289d8.  v0:= 1I;
  #L1289da.  return v0;
}
