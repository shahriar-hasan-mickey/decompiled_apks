record `kotlinx.coroutines.sync.Mutex` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `kotlinx.coroutines.selects.SelectClause2` `getOnLock`() @signature `Lkotlinx/coroutines/sync/Mutex;.getOnLock:()Lkotlinx/coroutines/selects/SelectClause2;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `holdsLock`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex;.holdsLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isLocked`() @signature `Lkotlinx/coroutines/sync/Mutex;.isLocked:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `lock`(`java.lang.Object` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex;.lock:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `tryLock`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex;.tryLock:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `unlock`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/sync/Mutex;.unlock:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
