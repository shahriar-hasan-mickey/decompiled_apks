record `kotlinx.coroutines.sync.MutexImpl$b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.sync.MutexImpl$c` @kind class {
  `kotlinx.coroutines.selects.SelectInstance` `kotlinx.coroutines.sync.MutexImpl$b.g` @AccessFlag PUBLIC_FINAL;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.sync.MutexImpl$b.h` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$b.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$b` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlinx.coroutines.selects.SelectInstance` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/selects/SelectInstance;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1278cc.  v0.`kotlinx.coroutines.sync.MutexImpl$b.i` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L1278d0.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L1278d6.  v0.`kotlinx.coroutines.sync.MutexImpl$b.g` @type ^`kotlinx.coroutines.selects.SelectInstance` := v3 @kind object;
  #L1278da.  v0.`kotlinx.coroutines.sync.MutexImpl$b.h` @type ^`kotlin.jvm.functions.Function2` := v4 @kind object;
  #L1278de.  return @kind void;
}
procedure `void` `e`(`kotlinx.coroutines.sync.MutexImpl$b` v5 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1278f0.  v0:= v5.`kotlinx.coroutines.sync.MutexImpl$b.h` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1278f4.  v1:= v5.`kotlinx.coroutines.sync.MutexImpl$b.i` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L1278f8.  v2:= v5.`kotlinx.coroutines.sync.MutexImpl$b.g` @type ^`kotlinx.coroutines.selects.SelectInstance` @kind object;
  #L1278fc.  call temp:= `getCompletion`(v2) @signature `Lkotlinx/coroutines/selects/SelectInstance;.getCompletion:()Lkotlin/coroutines/Continuation;` @kind interface;
  #L127902.  v2:= temp @kind object;
  #L127904.  v3:= new `kotlinx.coroutines.sync.MutexImpl$b$a`;
  #L127908.  v4:= v5.`kotlinx.coroutines.sync.MutexImpl$b.i` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L12790c.  call `<init>`(v3, v4, v5) @signature `Lkotlinx/coroutines/sync/MutexImpl$b$a;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Lkotlinx/coroutines/sync/MutexImpl$b;)V` @kind direct;
  #L127912.  call `startCoroutineCancellable`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/intrinsics/CancellableKt;.startCoroutineCancellable:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;Lkotlin/jvm/functions/Function1;)V` @kind static;
  #L127918.  return @kind void;
}
procedure `boolean` `g`(`kotlinx.coroutines.sync.MutexImpl$b` v1 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L127838.  call temp:= `f`(v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$c;.f:()Z` @kind virtual;
  #L12783e.  v0:= temp;
  #L127840.  if v0 == 0 then goto L127858;
  #L127844.  v0:= v1.`kotlinx.coroutines.sync.MutexImpl$b.g` @type ^`kotlinx.coroutines.selects.SelectInstance` @kind object;
  #L127848.  call temp:= `trySelect`(v0) @signature `Lkotlinx/coroutines/selects/SelectInstance;.trySelect:()Z` @kind interface;
  #L12784e.  v0:= temp;
  #L127850.  if v0 == 0 then goto L127858;
  #L127854.  v0:= 1I;
  #L127856.  goto L12785a;
  #L127858.  v0:= 0I;
  #L12785a.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.MutexImpl$b` v2 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12786c.  v0:= new `java.lang.StringBuilder`;
  #L127870.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L127876.  v1:= "LockSelect[" @kind object;
  #L12787a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L127880.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$c.d` @type ^`java.lang.Object` @kind object;
  #L127884.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12788a.  v1:= ", " @kind object;
  #L12788e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L127894.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$b.g` @type ^`kotlinx.coroutines.selects.SelectInstance` @kind object;
  #L127898.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12789e.  v1:= "] for " @kind object;
  #L1278a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1278a8.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$b.i` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L1278ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1278b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1278b8.  v0:= temp @kind object;
  #L1278ba.  return v0 @kind object;
}
