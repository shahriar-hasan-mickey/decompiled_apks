record `kotlinx.coroutines.g` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.JobNode` @kind class {
  `java.util.concurrent.Future` `kotlinx.coroutines.g.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.g` v0 @kind this, `java.util.concurrent.Future` v1 @kind object) @signature `Lkotlinx/coroutines/g;.<init>:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0ed0c8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/JobNode;.<init>:()V` @kind direct;
  #L0ed0ce.  v0.`kotlinx.coroutines.g.d` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L0ed0d2.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/g;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L0ed0a8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L0ed0ac.  call `invoke`(v0, v1) @signature `Lkotlinx/coroutines/g;.invoke:(Ljava/lang/Throwable;)V` @kind virtual;
  #L0ed0b2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L0ed0b6.  return v1 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.g` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/g;.invoke:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0ed0e4.  if v2 == 0 then goto L0ed0f4;
  #L0ed0e8.  v2:= v1.`kotlinx.coroutines.g.d` @type ^`java.util.concurrent.Future` @kind object;
  #L0ed0ec.  v0:= 0I;
  #L0ed0ee.  call temp:= `cancel`(v2, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L0ed0f4.  return @kind void;
}
