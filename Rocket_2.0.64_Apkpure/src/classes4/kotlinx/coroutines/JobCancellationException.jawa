record `kotlinx.coroutines.JobCancellationException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class, `kotlinx.coroutines.CopyableThrowable` @kind interface {
  `kotlinx.coroutines.Job` `kotlinx.coroutines.JobCancellationException.job` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.JobCancellationException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object, `kotlinx.coroutines.Job` v3 @kind object) @signature `Lkotlinx/coroutines/JobCancellationException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;Lkotlinx/coroutines/Job;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f3438.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0f343e.  v0.`kotlinx.coroutines.JobCancellationException.job` @type ^`kotlinx.coroutines.Job` := v3 @kind object;
  #L0f3442.  if v2 == 0 then goto L0f344c;
  #L0f3446.  call temp:= `initCause`(v0, v2) @signature `Ljava/util/concurrent/CancellationException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L0f344c.  return @kind void;
}
procedure `java.lang.Throwable` `createCopy`(`kotlinx.coroutines.JobCancellationException` v1 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L0f33e8.  call temp:= `createCopy`(v1) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Lkotlinx/coroutines/JobCancellationException;` @kind virtual;
  #L0f33ee.  v0:= temp @kind object;
  #L0f33f0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.JobCancellationException` `createCopy`(`kotlinx.coroutines.JobCancellationException` v1 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.createCopy:()Lkotlinx/coroutines/JobCancellationException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f3424.  v0:= 0I;
  #L0f3426.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlinx.coroutines.JobCancellationException` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/JobCancellationException;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0f32d0.  if v3 == v2 then goto L0f3332;
  #L0f32d4.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.JobCancellationException` @kind boolean;
  #L0f32d8.  if v0 == 0 then goto L0f332e;
  #L0f32dc.  v3:= (`kotlinx.coroutines.JobCancellationException`) v3 @kind object;
  #L0f32e0.  call temp:= `getMessage`(v3) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L0f32e6.  v0:= temp @kind object;
  #L0f32e8.  call temp:= `getMessage`(v2) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L0f32ee.  v1:= temp @kind object;
  #L0f32f0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0f32f6.  v0:= temp;
  #L0f32f8.  if v0 == 0 then goto L0f332e;
  #L0f32fc.  v0:= v3.`kotlinx.coroutines.JobCancellationException.job` @type ^`kotlinx.coroutines.Job` @kind object;
  #L0f3300.  v1:= v2.`kotlinx.coroutines.JobCancellationException.job` @type ^`kotlinx.coroutines.Job` @kind object;
  #L0f3304.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0f330a.  v0:= temp;
  #L0f330c.  if v0 == 0 then goto L0f332e;
  #L0f3310.  call temp:= `getCause`(v3) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L0f3316.  v3:= temp @kind object;
  #L0f3318.  call temp:= `getCause`(v2) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L0f331e.  v0:= temp @kind object;
  #L0f3320.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0f3326.  v3:= temp;
  #L0f3328.  if v3 == 0 then goto L0f332e;
  #L0f332c.  goto L0f3332;
  #L0f332e.  v3:= 0I;
  #L0f3330.  goto L0f3334;
  #L0f3332.  v3:= 1I;
  #L0f3334.  return v3;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.JobCancellationException` v1 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f3404.  v0:= 0I;
  #L0f3406.  v0:= new `java.lang.StackTraceElement`[v0];
  #L0f340a.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L0f3410.  return v1 @kind object;
}
procedure `int` `hashCode`(`kotlinx.coroutines.JobCancellationException` v2 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0f3348.  call temp:= `getMessage`(v2) @signature `Ljava/util/concurrent/CancellationException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L0f334e.  v0:= temp @kind object;
  #L0f3350.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L0f3356.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0f335c.  v0:= temp;
  #L0f335e.  v0:= v0 * 31;
  #L0f3362.  v1:= v2.`kotlinx.coroutines.JobCancellationException.job` @type ^`kotlinx.coroutines.Job` @kind object;
  #L0f3366.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L0f336c.  v1:= temp;
  #L0f336e.  v0:= v0 + v1 @kind int;
  #L0f3370.  v0:= v0 * 31;
  #L0f3374.  call temp:= `getCause`(v2) @signature `Ljava/util/concurrent/CancellationException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L0f337a.  v1:= temp @kind object;
  #L0f337c.  if v1 != 0 then goto L0f3384;
  #L0f3380.  v1:= 0I;
  #L0f3382.  goto L0f338c;
  #L0f3384.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Throwable;.hashCode:()I` @kind virtual;
  #L0f338a.  v1:= temp;
  #L0f338c.  v0:= v0 + v1 @kind int;
  #L0f338e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.JobCancellationException` v2 @kind this) @signature `Lkotlinx/coroutines/JobCancellationException;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0f33a0.  v0:= new `java.lang.StringBuilder`;
  #L0f33a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0f33aa.  call temp:= `toString`(v2) @signature `Ljava/util/concurrent/CancellationException;.toString:()Ljava/lang/String;` @kind super;
  #L0f33b0.  v1:= temp @kind object;
  #L0f33b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f33b8.  v1:= "; job=" @kind object;
  #L0f33bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f33c2.  v1:= v2.`kotlinx.coroutines.JobCancellationException.job` @type ^`kotlinx.coroutines.Job` @kind object;
  #L0f33c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0f33cc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0f33d2.  v0:= temp @kind object;
  #L0f33d4.  return v0 @kind object;
}
