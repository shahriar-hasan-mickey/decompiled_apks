record `kotlinx.coroutines.InactiveNodeList` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.Incomplete` @kind interface {
  `kotlinx.coroutines.NodeList` `kotlinx.coroutines.InactiveNodeList.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.InactiveNodeList` v0 @kind this, `kotlinx.coroutines.NodeList` v1 @kind object) @signature `Lkotlinx/coroutines/InactiveNodeList;.<init>:(Lkotlinx/coroutines/NodeList;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0f2d8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0f2d92.  v0.`kotlinx.coroutines.InactiveNodeList.a` @type ^`kotlinx.coroutines.NodeList` := v1 @kind object;
  #L0f2d96.  return @kind void;
}
procedure `kotlinx.coroutines.NodeList` `getList`(`kotlinx.coroutines.InactiveNodeList` v1 @kind this) @signature `Lkotlinx/coroutines/InactiveNodeList;.getList:()Lkotlinx/coroutines/NodeList;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f2d74.  v0:= v1.`kotlinx.coroutines.InactiveNodeList.a` @type ^`kotlinx.coroutines.NodeList` @kind object;
  #L0f2d78.  return v0 @kind object;
}
procedure `boolean` `isActive`(`kotlinx.coroutines.InactiveNodeList` v1 @kind this) @signature `Lkotlinx/coroutines/InactiveNodeList;.isActive:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f2d44.  v0:= 0I;
  #L0f2d46.  return v0;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.InactiveNodeList` v1 @kind this) @signature `Lkotlinx/coroutines/InactiveNodeList;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0f2d58.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind super;
  #L0f2d5e.  v0:= temp @kind object;
  #L0f2d60.  return v0 @kind object;
}
