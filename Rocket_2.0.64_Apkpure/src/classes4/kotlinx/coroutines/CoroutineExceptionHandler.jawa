record `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
}
global `kotlinx.coroutines.CoroutineExceptionHandler$Key` `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineExceptionHandler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0ef6b0.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler$Key.a` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L0ef6b4.  `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` := v0 @kind object;
  #L0ef6b8.  return @kind void;
}
procedure `void` `handleException`(`kotlin.coroutines.CoroutineContext` v0 @kind object, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/CoroutineExceptionHandler;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
