record `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10f064.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L10f068.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L10f06c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10f072.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10ef94.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1` @kind boolean;
  #L10ef98.  if v0 == 0 then goto L10efba;
  #L10ef9c.  v0:= v8 @kind object;
  #L10ef9e.  v0:= (`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1`) v0 @kind object;
  #L10efa2.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int`;
  #L10efa6.  v2:= -2147483648I;
  #L10efaa.  v3:= v1 ^& v2 @kind int;
  #L10efae.  if v3 == 0 then goto L10efba;
  #L10efb2.  v1:= v1 - v2 @kind int;
  #L10efb4.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v1;
  #L10efb8.  goto L10efc4;
  #L10efba.  v0:= new `kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1`;
  #L10efbe.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10efc4.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L10efc8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10efce.  v1:= temp @kind object;
  #L10efd0.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int`;
  #L10efd4.  v3:= 2I;
  #L10efd6.  v4:= 1I;
  #L10efd8.  if v2 == 0 then goto L10f00c;
  #L10efdc.  if v2 == v4 then goto L10effc;
  #L10efe0.  if v2 != v3 then goto L10efec;
  #L10efe4.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10efea.  goto L10f04e;
  #L10efec.  v7:= new `java.lang.IllegalStateException`;
  #L10eff0.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10eff4.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10effa.  throw v7;
  #L10effc.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` @kind object;
  #L10f000.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L10f004.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10f00a.  goto L10f036;
  #L10f00c.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10f012.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10f016.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L10f01a.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` := v8 @kind object;
  #L10f01e.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v4;
  #L10f022.  call temp:= `invoke`(v2, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10f028.  v7:= temp @kind object;
  #L10f02a.  if v7 != v1 then goto L10f030;
  #L10f02e.  return v1 @kind object;
  #L10f030.  v5:= v8 @kind object;
  #L10f032.  v8:= v7 @kind object;
  #L10f034.  v7:= v5 @kind object;
  #L10f036.  v2:= 0I;
  #L10f038.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L10f03c.  v0.`kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1$2$1.b` @type ^`int` := v3;
  #L10f040.  call temp:= `emit`(v7, v8, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10f046.  v7:= temp @kind object;
  #L10f048.  if v7 != v1 then goto L10f04e;
  #L10f04c.  return v1 @kind object;
  #L10f04e.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10f052.  return v7 @kind object;
}
