record `kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$drop$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10de08.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10de0c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.b` @type ^`int` := v2;
  #L10de10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10de16.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1` v4 @kind this, `kotlinx.coroutines.flow.FlowCollector` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$drop$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10ddc0.  v0:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L10ddc4.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L10ddca.  v1:= v4.`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10ddce.  v2:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$b`;
  #L10ddd2.  v3:= v4.`kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.b` @type ^`int`;
  #L10ddd6.  call `<init>`(v2, v0, v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$b;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;ILkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L10dddc.  call temp:= `collect`(v1, v2, v6) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10dde2.  v5:= temp @kind object;
  #L10dde4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10ddea.  v6:= temp @kind object;
  #L10ddec.  if v5 != v6 then goto L10ddf2;
  #L10ddf0.  return v5 @kind object;
  #L10ddf2.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10ddf6.  return v5 @kind object;
}
