record `kotlinx.coroutines.flow.f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
}
global `kotlinx.coroutines.flow.f` `@@kotlinx.coroutines.flow.f.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L109344.  v0:= new `kotlinx.coroutines.flow.f`;
  #L109348.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/f;.<init>:()V` @kind direct;
  #L10934e.  `@@kotlinx.coroutines.flow.f.a` @type ^`kotlinx.coroutines.flow.f` := v0 @kind object;
  #L109352.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.f` v0 @kind this) @signature `Lkotlinx/coroutines/flow/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L109364.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10936a.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.f` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/f;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L10932c.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109330.  return v1 @kind object;
}
