record `kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1128f4.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L1128f8.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L1128fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L112902.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11281c.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1` @kind boolean;
  #L112820.  if v0 == 0 then goto L112842;
  #L112824.  v0:= v8 @kind object;
  #L112826.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1`) v0 @kind object;
  #L11282a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L11282e.  v2:= -2147483648I;
  #L112832.  v3:= v1 ^& v2 @kind int;
  #L112836.  if v3 == 0 then goto L112842;
  #L11283a.  v1:= v1 - v2 @kind int;
  #L11283c.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v1;
  #L112840.  goto L11284c;
  #L112842.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1`;
  #L112846.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11284c.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L112850.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L112856.  v1:= temp @kind object;
  #L112858.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L11285c.  v3:= 2I;
  #L11285e.  v4:= 1I;
  #L112860.  if v2 == 0 then goto L112894;
  #L112864.  if v2 == v4 then goto L112884;
  #L112868.  if v2 != v3 then goto L112874;
  #L11286c.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L112872.  goto L1128dc;
  #L112874.  v7:= new `java.lang.IllegalStateException`;
  #L112878.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11287c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L112882.  throw v7;
  #L112884.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` @kind object;
  #L112888.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L11288c.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L112892.  goto L1128be;
  #L112894.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11289a.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11289e.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1128a2.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v8 @kind object;
  #L1128a6.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v4;
  #L1128aa.  call temp:= `invoke`(v2, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1128b0.  v7:= temp @kind object;
  #L1128b2.  if v7 != v1 then goto L1128b8;
  #L1128b6.  return v1 @kind object;
  #L1128b8.  v5:= v8 @kind object;
  #L1128ba.  v8:= v7 @kind object;
  #L1128bc.  v7:= v5 @kind object;
  #L1128be.  if v8 != 0 then goto L1128c4;
  #L1128c2.  goto L1128dc;
  #L1128c4.  v2:= 0I;
  #L1128c6.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v2 @kind object;
  #L1128ca.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v3;
  #L1128ce.  call temp:= `emit`(v7, v8, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1128d4.  v7:= temp @kind object;
  #L1128d6.  if v7 != v1 then goto L1128dc;
  #L1128da.  return v1 @kind object;
  #L1128dc.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1128e0.  return v7 @kind object;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1127c0.  v0:= 4I;
  #L1127c2.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1127c8.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1`;
  #L1127cc.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1127d2.  v0:= 5I;
  #L1127d4.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1127da.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L1127de.  v1:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$mapNotNull$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1127e2.  call temp:= `invoke`(v1, v3, v4) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1127e8.  v3:= temp @kind object;
  #L1127ea.  if v3 != 0 then goto L1127f0;
  #L1127ee.  goto L112806;
  #L1127f0.  v1:= 0I;
  #L1127f2.  call `mark`(v1) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L1127f8.  call temp:= `emit`(v0, v3, v4) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1127fe.  v3:= 1I;
  #L112800.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L112806.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11280a.  return v3 @kind object;
}
