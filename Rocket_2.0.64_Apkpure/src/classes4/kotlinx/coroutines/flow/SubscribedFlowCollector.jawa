record `kotlinx.coroutines.flow.SubscribedFlowCollector` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.SubscribedFlowCollector.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.SubscribedFlowCollector.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.SubscribedFlowCollector` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L119890.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L119896.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L11989a.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L11989e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.SubscribedFlowCollector` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119748.  v0:= v1.`kotlinx.coroutines.flow.SubscribedFlowCollector.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11974c.  call temp:= `emit`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L119752.  v2:= temp @kind object;
  #L119754.  return v2 @kind object;
}
procedure `java.lang.Object` `onSubscription`(`kotlinx.coroutines.flow.SubscribedFlowCollector` v6 @kind this, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L119768.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector$a` @kind boolean;
  #L11976c.  if v0 == 0 then goto L11978e;
  #L119770.  v0:= v7 @kind object;
  #L119772.  v0:= (`kotlinx.coroutines.flow.SubscribedFlowCollector$a`) v0 @kind object;
  #L119776.  v1:= v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.e` @type ^`int`;
  #L11977a.  v2:= -2147483648I;
  #L11977e.  v3:= v1 ^& v2 @kind int;
  #L119782.  if v3 == 0 then goto L11978e;
  #L119786.  v1:= v1 - v2 @kind int;
  #L119788.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.e` @type ^`int` := v1;
  #L11978c.  goto L119798;
  #L11978e.  v0:= new `kotlinx.coroutines.flow.SubscribedFlowCollector$a`;
  #L119792.  call `<init>`(v0, v6, v7) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector$a;.<init>:(Lkotlinx/coroutines/flow/SubscribedFlowCollector;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L119798.  v7:= v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.c` @type ^`java.lang.Object` @kind object;
  #L11979c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1197a2.  v1:= temp @kind object;
  #L1197a4.  v2:= v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.e` @type ^`int`;
  #L1197a8.  v3:= 2I;
  #L1197aa.  v4:= 1I;
  #L1197ac.  if v2 == 0 then goto L1197e8;
  #L1197b0.  if v2 == v4 then goto L1197d0;
  #L1197b4.  if v2 != v3 then goto L1197c0;
  #L1197b8.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1197be.  goto L119856;
  #L1197c0.  v7:= new `java.lang.IllegalStateException`;
  #L1197c4.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1197c8.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1197ce.  throw v7;
  #L1197d0.  v2:= v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.b` @type ^`java.lang.Object` @kind object;
  #L1197d4.  v2:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v2 @kind object;
  #L1197d8.  v4:= v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.a` @type ^`java.lang.Object` @kind object;
  #L1197dc.  v4:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v4 @kind object;
  #L1197e0.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1197e6.  goto L119824;
  #L1197e8.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1197ee.  v2:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L1197f2.  v7:= v6.`kotlinx.coroutines.flow.SubscribedFlowCollector.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L1197f6.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L1197fc.  v5:= temp @kind object;
  #L1197fe.  call `<init>`(v2, v7, v5) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L119804.  v7:= v6.`kotlinx.coroutines.flow.SubscribedFlowCollector.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L119808.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.a` @type ^`java.lang.Object` := v6 @kind object;
  #L11980c.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L119810.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.e` @type ^`int` := v4;
  #L119814.  call temp:= `invoke`(v7, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L11981a.  v7:= temp @kind object;
  #L11981c.  if v7 != v1 then goto L119822;
  #L119820.  return v1 @kind object;
  #L119822.  v4:= v6 @kind object;
  #L119824.  call `releaseIntercepted`(v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L11982a.  v7:= v4.`kotlinx.coroutines.flow.SubscribedFlowCollector.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11982e.  v2:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector` @kind boolean;
  #L119832.  if v2 == 0 then goto L11985c;
  #L119836.  v7:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v7 @kind object;
  #L11983a.  v2:= 0I;
  #L11983c.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L119840.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L119844.  v0.`kotlinx.coroutines.flow.SubscribedFlowCollector$a.e` @type ^`int` := v3;
  #L119848.  call temp:= `onSubscription`(v7, v0) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11984e.  v7:= temp @kind object;
  #L119850.  if v7 != v1 then goto L119856;
  #L119854.  return v1 @kind object;
  #L119856.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11985a.  return v7 @kind object;
  #L11985c.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L119860.  return v7 @kind object;
  #L119862.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119864.  call `releaseIntercepted`(v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L11986a.  throw v7;
  catch `java.lang.Throwable` @[L1197e0..L1197e6] goto L119862;
  catch `java.lang.Throwable` @[L119804..L11981c] goto L119862;
}
