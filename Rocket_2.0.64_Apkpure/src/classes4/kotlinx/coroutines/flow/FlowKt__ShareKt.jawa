record `kotlinx.coroutines.flow.FlowKt__ShareKt` @kind class @AccessFlag FINAL_SYNTHETIC {
}
procedure `kotlinx.coroutines.flow.SharedFlow` `a`(`kotlinx.coroutines.flow.MutableSharedFlow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.a:(Lkotlinx/coroutines/flow/MutableSharedFlow;)Lkotlinx/coroutines/flow/SharedFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L111920.  v0:= new `kotlinx.coroutines.flow.l`;
  #L111924.  v1:= 0I;
  #L111926.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/flow/l;.<init>:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlinx/coroutines/Job;)V` @kind direct;
  #L11192c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.StateFlow` `b`(`kotlinx.coroutines.flow.MutableStateFlow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.b:(Lkotlinx/coroutines/flow/MutableStateFlow;)Lkotlinx/coroutines/flow/StateFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L111a70.  v0:= new `kotlinx.coroutines.flow.m`;
  #L111a74.  v1:= 0I;
  #L111a76.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/flow/m;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlinx/coroutines/Job;)V` @kind direct;
  #L111a7c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.o` `c`(`kotlinx.coroutines.flow.Flow` v7 @kind object, `int` v8 ) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/o;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1119d0.  v0:= `@@kotlinx.coroutines.channels.Channel.Factory` @type ^`kotlinx.coroutines.channels.Channel$Factory` @kind object;
  #L1119d4.  call temp:= `getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/channels/Channel$Factory;.getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core:()I` @kind virtual;
  #L1119da.  v0:= temp;
  #L1119dc.  call temp:= `coerceAtLeast`(v8, v0) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L1119e2.  v0:= temp;
  #L1119e4.  v0:= v0 - v8 @kind int;
  #L1119e6.  v1:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind boolean;
  #L1119ea.  if v1 == 0 then goto L111a4a;
  #L1119ee.  v1:= v7 @kind object;
  #L1119f0.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlow`) v1 @kind object;
  #L1119f4.  call temp:= `dropChannelOperators`(v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @kind virtual;
  #L1119fa.  v2:= temp @kind object;
  #L1119fc.  if v2 == 0 then goto L111a4a;
  #L111a00.  v7:= new `kotlinx.coroutines.flow.o`;
  #L111a04.  v3:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L111a08.  v4:= -3I;
  #L111a0a.  v5:= 0I;
  #L111a0c.  if v3 == v4 then goto L111a1e;
  #L111a10.  v4:= -2I;
  #L111a12.  if v3 == v4 then goto L111a1e;
  #L111a16.  if v3 == 0 then goto L111a1e;
  #L111a1a.  v0:= v3;
  #L111a1c.  goto L111a3a;
  #L111a1e.  v4:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L111a22.  v6:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L111a26.  if v4 != v6 then goto L111a30;
  #L111a2a.  if v3 != 0 then goto L111a3a;
  #L111a2e.  goto L111a38;
  #L111a30.  if v8 != 0 then goto L111a38;
  #L111a34.  v0:= 1I;
  #L111a36.  goto L111a3a;
  #L111a38.  v0:= 0I;
  #L111a3a.  v8:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L111a3e.  v1:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L111a42.  call `<init>`(v7, v2, v0, v8, v1) @signature `Lkotlinx/coroutines/flow/o;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L111a48.  return v7 @kind object;
  #L111a4a.  v8:= new `kotlinx.coroutines.flow.o`;
  #L111a4e.  v1:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L111a52.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L111a56.  call `<init>`(v8, v7, v0, v1, v2) @signature `Lkotlinx/coroutines/flow/o;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L111a5c.  return v8 @kind object;
}
procedure `kotlinx.coroutines.Job` `d`(`kotlinx.coroutines.CoroutineScope` v8 @kind object, `kotlin.coroutines.CoroutineContext` v9 @kind object, `kotlinx.coroutines.flow.Flow` v10 @kind object, `kotlinx.coroutines.flow.MutableSharedFlow` v11 @kind object, `kotlinx.coroutines.flow.SharingStarted` v12 @kind object, `java.lang.Object` v13 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.d:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Lkotlinx/coroutines/flow/SharingStarted;Ljava/lang/Object;)Lkotlinx/coroutines/Job;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1118cc.  v0:= `@@kotlinx.coroutines.flow.SharingStarted.Companion` @type ^`kotlinx.coroutines.flow.SharingStarted$Companion` @kind object;
  #L1118d0.  call temp:= `getEagerly`(v0) @signature `Lkotlinx/coroutines/flow/SharingStarted$Companion;.getEagerly:()Lkotlinx/coroutines/flow/SharingStarted;` @kind virtual;
  #L1118d6.  v0:= temp @kind object;
  #L1118d8.  call temp:= `areEqual`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1118de.  v0:= temp;
  #L1118e0.  if v0 == 0 then goto L1118ea;
  #L1118e4.  v0:= `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L1118e8.  goto L1118ee;
  #L1118ea.  v0:= `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L1118ee.  v7:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1`;
  #L1118f2.  v6:= 0I;
  #L1118f4.  v1:= v7 @kind object;
  #L1118f6.  v2:= v12 @kind object;
  #L1118f8.  v3:= v10 @kind object;
  #L1118fa.  v4:= v11 @kind object;
  #L1118fc.  v5:= v13 @kind object;
  #L1118fe.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.<init>:(Lkotlinx/coroutines/flow/SharingStarted;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111904.  call temp:= `launch`(v8, v9, v0, v7) @signature `Lkotlinx/coroutines/BuildersKt;.launch:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/Job;` @kind static;
  #L11190a.  v8:= temp @kind object;
  #L11190c.  return v8 @kind object;
}
procedure `void` `e`(`kotlinx.coroutines.CoroutineScope` v6 @kind object, `kotlin.coroutines.CoroutineContext` v7 @kind object, `kotlinx.coroutines.flow.Flow` v8 @kind object, `kotlinx.coroutines.CompletableDeferred` v9 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.e:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CompletableDeferred;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L111ad8.  v3:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$a`;
  #L111adc.  v0:= 0I;
  #L111ade.  call `<init>`(v3, v8, v9, v0) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CompletableDeferred;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111ae4.  v2:= 0I;
  #L111ae6.  v4:= 2I;
  #L111ae8.  v5:= 0I;
  #L111aea.  v0:= v6 @kind object;
  #L111aec.  v1:= v7 @kind object;
  #L111aee.  call temp:= `launch$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/BuildersKt;.launch$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L111af4.  return @kind void;
}
procedure `kotlinx.coroutines.flow.SharedFlow` `f`(`kotlinx.coroutines.flow.SharedFlow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.f:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/SharedFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L111940.  v0:= new `kotlinx.coroutines.flow.u`;
  #L111944.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/u;.<init>:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L11194a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.SharedFlow` `g`(`kotlinx.coroutines.flow.Flow` v8 @kind object, `kotlinx.coroutines.CoroutineScope` v9 @kind object, `kotlinx.coroutines.flow.SharingStarted` v10 @kind object, `int` v11 ) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.g:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/flow/SharingStarted;I)Lkotlinx/coroutines/flow/SharedFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L111980.  call temp:= `c`(v8, v11) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/o;` @kind static;
  #L111986.  v8:= temp @kind object;
  #L111988.  v0:= v8.`kotlinx.coroutines.flow.o.b` @type ^`int`;
  #L11198c.  v1:= v8.`kotlinx.coroutines.flow.o.c` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L111990.  call temp:= `MutableSharedFlow`(v11, v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.MutableSharedFlow:(IILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/MutableSharedFlow;` @kind static;
  #L111996.  v11:= temp @kind object;
  #L111998.  v3:= v8.`kotlinx.coroutines.flow.o.d` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11199c.  v4:= v8.`kotlinx.coroutines.flow.o.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1119a0.  v7:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1119a4.  v2:= v9 @kind object;
  #L1119a6.  v5:= v11 @kind object;
  #L1119a8.  v6:= v10 @kind object;
  #L1119aa.  call temp:= `d`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.d:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Lkotlinx/coroutines/flow/SharingStarted;Ljava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L1119b0.  v8:= temp @kind object;
  #L1119b2.  v9:= new `kotlinx.coroutines.flow.l`;
  #L1119b6.  call `<init>`(v9, v11, v8) @signature `Lkotlinx/coroutines/flow/l;.<init>:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlinx/coroutines/Job;)V` @kind direct;
  #L1119bc.  return v9 @kind object;
}
procedure `kotlinx.coroutines.flow.SharedFlow` `h`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlinx.coroutines.flow.SharingStarted` v2 @kind object, `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.h:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/flow/SharingStarted;IILjava/lang/Object;)Lkotlinx/coroutines/flow/SharedFlow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L11195c.  v4:= v4 ^& 4;
  #L111960.  if v4 == 0 then goto L111966;
  #L111964.  v3:= 0I;
  #L111966.  call temp:= `shareIn`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/FlowKt;.shareIn:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/flow/SharingStarted;I)Lkotlinx/coroutines/flow/SharedFlow;` @kind static;
  #L11196c.  v0:= temp @kind object;
  #L11196e.  return v0 @kind object;
}
procedure `java.lang.Object` `i`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlinx.coroutines.CoroutineScope` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.i:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L111890.  v0:= 1I;
  #L111892.  call temp:= `c`(v2, v0) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/o;` @kind static;
  #L111898.  v2:= temp @kind object;
  #L11189a.  v1:= 0I;
  #L11189c.  call temp:= `CompletableDeferred$default`(v1, v0, v1) @signature `Lkotlinx/coroutines/CompletableDeferredKt;.CompletableDeferred$default:(Lkotlinx/coroutines/Job;ILjava/lang/Object;)Lkotlinx/coroutines/CompletableDeferred;` @kind static;
  #L1118a2.  v0:= temp @kind object;
  #L1118a4.  v1:= v2.`kotlinx.coroutines.flow.o.d` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L1118a8.  v2:= v2.`kotlinx.coroutines.flow.o.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1118ac.  call `e`(v3, v1, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.e:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CompletableDeferred;)V` @kind static;
  #L1118b2.  call temp:= `await`(v0, v4) @signature `Lkotlinx/coroutines/Deferred;.await:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1118b8.  v2:= temp @kind object;
  #L1118ba.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.StateFlow` `j`(`kotlinx.coroutines.flow.Flow` v7 @kind object, `kotlinx.coroutines.CoroutineScope` v8 @kind object, `kotlinx.coroutines.flow.SharingStarted` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.j:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/flow/SharingStarted;Ljava/lang/Object;)Lkotlinx/coroutines/flow/StateFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L111a90.  v0:= 1I;
  #L111a92.  call temp:= `c`(v7, v0) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/o;` @kind static;
  #L111a98.  v7:= temp @kind object;
  #L111a9a.  call temp:= `MutableStateFlow`(v10) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.MutableStateFlow:(Ljava/lang/Object;)Lkotlinx/coroutines/flow/MutableStateFlow;` @kind static;
  #L111aa0.  v6:= temp @kind object;
  #L111aa2.  v1:= v7.`kotlinx.coroutines.flow.o.d` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L111aa6.  v2:= v7.`kotlinx.coroutines.flow.o.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111aaa.  v0:= v8 @kind object;
  #L111aac.  v3:= v6 @kind object;
  #L111aae.  v4:= v9 @kind object;
  #L111ab0.  v5:= v10 @kind object;
  #L111ab2.  call temp:= `d`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt;.d:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Lkotlinx/coroutines/flow/SharingStarted;Ljava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L111ab8.  v7:= temp @kind object;
  #L111aba.  v8:= new `kotlinx.coroutines.flow.m`;
  #L111abe.  call `<init>`(v8, v6, v7) @signature `Lkotlinx/coroutines/flow/m;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlinx/coroutines/Job;)V` @kind direct;
  #L111ac4.  return v8 @kind object;
}
