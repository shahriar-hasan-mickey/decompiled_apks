record `kotlinx.coroutines.flow.StateFlowKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.flow.StateFlowKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.flow.StateFlowKt.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L119474.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L119478.  v1:= "NONE" @kind object;
  #L11947c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119482.  `@@kotlinx.coroutines.flow.StateFlowKt.a` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L119486.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L11948a.  v1:= "PENDING" @kind object;
  #L11948e.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119494.  `@@kotlinx.coroutines.flow.StateFlowKt.b` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L119498.  return @kind void;
}
procedure `kotlinx.coroutines.flow.MutableStateFlow` `MutableStateFlow`(`java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.MutableStateFlow:(Ljava/lang/Object;)Lkotlinx/coroutines/flow/MutableStateFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L119420.  v0:= new `kotlinx.coroutines.flow.s`;
  #L119424.  if v1 != 0 then goto L11942c;
  #L119428.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L11942c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/s;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L119432.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L119444.  v0:= `@@kotlinx.coroutines.flow.StateFlowKt.a` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L119448.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.Symbol` `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L11945c.  v0:= `@@kotlinx.coroutines.flow.StateFlowKt.b` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L119460.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuseStateFlow`(`kotlinx.coroutines.flow.StateFlow` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.fuseStateFlow:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1193e4.  v0:= 0I;
  #L1193e6.  if v4 < 0 then goto L1193f2;
  #L1193ea.  v1:= 2I;
  #L1193ec.  if v4 >= v1 then goto L1193f2;
  #L1193f0.  v0:= 1I;
  #L1193f2.  if v0 != 0 then goto L1193fc;
  #L1193f6.  v0:= -2I;
  #L1193f8.  if v4 != v0 then goto L119406;
  #L1193fc.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L119400.  if v5 != v0 then goto L119406;
  #L119404.  return v2 @kind object;
  #L119406.  call temp:= `fuseSharedFlow`(v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L11940c.  v2:= temp @kind object;
  #L11940e.  return v2 @kind object;
}
procedure `java.lang.Object` `getAndUpdate`(`kotlinx.coroutines.flow.MutableStateFlow` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.getAndUpdate:(Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L119384.  call temp:= `getValue`(v2) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.getValue:()Ljava/lang/Object;` @kind interface;
  #L11938a.  v0:= temp @kind object;
  #L11938c.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L119392.  v1:= temp @kind object;
  #L119394.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L11939a.  v1:= temp;
  #L11939c.  if v1 == 0 then goto L119384;
  #L1193a0.  return v0 @kind object;
}
procedure `void` `update`(`kotlinx.coroutines.flow.MutableStateFlow` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.update:(Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1194ac.  call temp:= `getValue`(v2) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1194b2.  v0:= temp @kind object;
  #L1194b4.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1194ba.  v1:= temp @kind object;
  #L1194bc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L1194c2.  v0:= temp;
  #L1194c4.  if v0 == 0 then goto L1194ac;
  #L1194c8.  return @kind void;
}
procedure `java.lang.Object` `updateAndGet`(`kotlinx.coroutines.flow.MutableStateFlow` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.updateAndGet:(Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1193b4.  call temp:= `getValue`(v2) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1193ba.  v0:= temp @kind object;
  #L1193bc.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1193c2.  v1:= temp @kind object;
  #L1193c4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Lkotlinx/coroutines/flow/MutableStateFlow;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L1193ca.  v0:= temp;
  #L1193cc.  if v0 == 0 then goto L1193b4;
  #L1193d0.  return v1 @kind object;
}
