record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `java.util.Iterator` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;.<init>:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1098b4.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L1098b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1098be.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1097ec.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1` @kind boolean;
  #L1097f0.  if v0 == 0 then goto L109812;
  #L1097f4.  v0:= v7 @kind object;
  #L1097f6.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1`) v0 @kind object;
  #L1097fa.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int`;
  #L1097fe.  v2:= -2147483648I;
  #L109802.  v3:= v1 ^& v2 @kind int;
  #L109806.  if v3 == 0 then goto L109812;
  #L10980a.  v1:= v1 - v2 @kind int;
  #L10980c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int` := v1;
  #L109810.  goto L10981c;
  #L109812.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1`;
  #L109816.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10981c.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.a` @type ^`java.lang.Object` @kind object;
  #L109820.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109826.  v1:= temp @kind object;
  #L109828.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int`;
  #L10982c.  v3:= 1I;
  #L10982e.  if v2 == 0 then goto L109860;
  #L109832.  if v2 != v3 then goto L109850;
  #L109836.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.e` @type ^`java.lang.Object` @kind object;
  #L10983a.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L10983e.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.d` @type ^`java.lang.Object` @kind object;
  #L109842.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L109846.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10984c.  v7:= v2 @kind object;
  #L10984e.  goto L109870;
  #L109850.  v6:= new `java.lang.IllegalStateException`;
  #L109854.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109858.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10985e.  throw v6;
  #L109860.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109866.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4.a` @type ^`java.util.Iterator` @kind object;
  #L10986a.  v4:= v7 @kind object;
  #L10986c.  v7:= v6 @kind object;
  #L10986e.  v6:= v4 @kind object;
  #L109870.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L109876.  v2:= temp;
  #L109878.  if v2 == 0 then goto L10989e;
  #L10987c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L109882.  v2:= temp @kind object;
  #L109884.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L109888.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L10988c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$4$1.b` @type ^`int` := v3;
  #L109890.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109896.  v2:= temp @kind object;
  #L109898.  if v2 != v1 then goto L109870;
  #L10989c.  return v1 @kind object;
  #L10989e.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1098a2.  return v6 @kind object;
}
