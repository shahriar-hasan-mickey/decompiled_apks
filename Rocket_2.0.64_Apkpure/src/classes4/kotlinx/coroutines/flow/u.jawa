record `kotlinx.coroutines.flow.u` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.SharedFlow` @kind interface {
  `kotlinx.coroutines.flow.SharedFlow` `kotlinx.coroutines.flow.u.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.u.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.u` v0 @kind this, `kotlinx.coroutines.flow.SharedFlow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/u;.<init>:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1199c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1199ce.  v0.`kotlinx.coroutines.flow.u.a` @type ^`kotlinx.coroutines.flow.SharedFlow` := v1 @kind object;
  #L1199d2.  v0.`kotlinx.coroutines.flow.u.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L1199d6.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.u` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/u;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L119900.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.u$a` @kind boolean;
  #L119904.  if v0 == 0 then goto L119926;
  #L119908.  v0:= v7 @kind object;
  #L11990a.  v0:= (`kotlinx.coroutines.flow.u$a`) v0 @kind object;
  #L11990e.  v1:= v0.`kotlinx.coroutines.flow.u$a.c` @type ^`int`;
  #L119912.  v2:= -2147483648I;
  #L119916.  v3:= v1 ^& v2 @kind int;
  #L11991a.  if v3 == 0 then goto L119926;
  #L11991e.  v1:= v1 - v2 @kind int;
  #L119920.  v0.`kotlinx.coroutines.flow.u$a.c` @type ^`int` := v1;
  #L119924.  goto L119930;
  #L119926.  v0:= new `kotlinx.coroutines.flow.u$a`;
  #L11992a.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/u$a;.<init>:(Lkotlinx/coroutines/flow/u;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L119930.  v7:= v0.`kotlinx.coroutines.flow.u$a.a` @type ^`java.lang.Object` @kind object;
  #L119934.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11993a.  v1:= temp @kind object;
  #L11993c.  v2:= v0.`kotlinx.coroutines.flow.u$a.c` @type ^`int`;
  #L119940.  v3:= 1I;
  #L119942.  if v2 == 0 then goto L119962;
  #L119946.  if v2 == v3 then goto L11995a;
  #L11994a.  v6:= new `java.lang.IllegalStateException`;
  #L11994e.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L119952.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119958.  throw v6;
  #L11995a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L119960.  goto L11998c;
  #L119962.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L119968.  v7:= v5.`kotlinx.coroutines.flow.u.a` @type ^`kotlinx.coroutines.flow.SharedFlow` @kind object;
  #L11996c.  v2:= new `kotlinx.coroutines.flow.SubscribedFlowCollector`;
  #L119970.  v4:= v5.`kotlinx.coroutines.flow.u.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L119974.  call `<init>`(v2, v6, v4) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L11997a.  v0.`kotlinx.coroutines.flow.u$a.c` @type ^`int` := v3;
  #L11997e.  call temp:= `collect`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/SharedFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L119984.  v6:= temp @kind object;
  #L119986.  if v6 != v1 then goto L11998c;
  #L11998a.  return v1 @kind object;
  #L11998c.  v6:= new `kotlin.KotlinNothingValueException`;
  #L119990.  call `<init>`(v6) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L119996.  throw v6;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.u` v1 @kind this) @signature `Lkotlinx/coroutines/flow/u;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1199a8.  v0:= v1.`kotlinx.coroutines.flow.u.a` @type ^`kotlinx.coroutines.flow.SharedFlow` @kind object;
  #L1199ac.  call temp:= `getReplayCache`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlow;.getReplayCache:()Ljava/util/List;` @kind interface;
  #L1199b2.  v0:= temp @kind object;
  #L1199b4.  return v0 @kind object;
}
