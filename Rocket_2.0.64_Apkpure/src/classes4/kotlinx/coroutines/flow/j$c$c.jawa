record `kotlinx.coroutines.flow.j$c$c` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.j$c$c.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.j$c$c.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.j$c$c.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.j$c$c` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$c;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10b6c0.  v0.`kotlinx.coroutines.flow.j$c$c.c` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10b6c4.  v1:= 2I;
  #L10b6c6.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L10b6cc.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.j$c$c` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$c;.a:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L10b5fc.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/j$c$c;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L10b602.  v1:= temp @kind object;
  #L10b604.  v1:= (`kotlinx.coroutines.flow.j$c$c`) v1 @kind object;
  #L10b608.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10b60c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/j$c$c;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L10b612.  v1:= temp @kind object;
  #L10b614.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.j$c$c` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$c;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L10b69c.  v0:= new `kotlinx.coroutines.flow.j$c$c`;
  #L10b6a0.  v1:= v2.`kotlinx.coroutines.flow.j$c$c.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10b6a4.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/j$c$c;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10b6aa.  v0.`kotlinx.coroutines.flow.j$c$c.b` @type ^`java.lang.Object` := v3 @kind object;
  #L10b6ae.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.j$c$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$c;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L10b5d8.  v1:= (`kotlinx.coroutines.channels.ProducerScope`) v1 @kind object;
  #L10b5dc.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L10b5e0.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/j$c$c;.a:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L10b5e6.  v1:= temp @kind object;
  #L10b5e8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.j$c$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$c;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10b628.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10b62e.  v0:= temp @kind object;
  #L10b630.  v1:= v4.`kotlinx.coroutines.flow.j$c$c.a` @type ^`int`;
  #L10b634.  v2:= 1I;
  #L10b636.  if v1 == 0 then goto L10b656;
  #L10b63a.  if v1 != v2 then goto L10b646;
  #L10b63e.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10b644.  goto L10b684;
  #L10b646.  v5:= new `java.lang.IllegalStateException`;
  #L10b64a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10b64e.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10b654.  throw v5;
  #L10b656.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10b65c.  v5:= v4.`kotlinx.coroutines.flow.j$c$c.b` @type ^`java.lang.Object` @kind object;
  #L10b660.  v5:= (`kotlinx.coroutines.channels.ProducerScope`) v5 @kind object;
  #L10b664.  v1:= v4.`kotlinx.coroutines.flow.j$c$c.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10b668.  v3:= new `kotlinx.coroutines.flow.j$c$c$a`;
  #L10b66c.  call `<init>`(v3, v5) @signature `Lkotlinx/coroutines/flow/j$c$c$a;.<init>:(Lkotlinx/coroutines/channels/ProducerScope;)V` @kind direct;
  #L10b672.  v4.`kotlinx.coroutines.flow.j$c$c.a` @type ^`int` := v2;
  #L10b676.  call temp:= `collect`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10b67c.  v5:= temp @kind object;
  #L10b67e.  if v5 != v0 then goto L10b684;
  #L10b682.  return v0 @kind object;
  #L10b684.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10b688.  return v5 @kind object;
}
