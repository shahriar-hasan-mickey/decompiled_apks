record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.sequences.Sequence` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5;.<init>:(Lkotlin/sequences/Sequence;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1099f0.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5.a` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L1099f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1099fa.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L109920.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1` @kind boolean;
  #L109924.  if v0 == 0 then goto L109946;
  #L109928.  v0:= v7 @kind object;
  #L10992a.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1`) v0 @kind object;
  #L10992e.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.b` @type ^`int`;
  #L109932.  v2:= -2147483648I;
  #L109936.  v3:= v1 ^& v2 @kind int;
  #L10993a.  if v3 == 0 then goto L109946;
  #L10993e.  v1:= v1 - v2 @kind int;
  #L109940.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.b` @type ^`int` := v1;
  #L109944.  goto L109950;
  #L109946.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1`;
  #L10994a.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L109950.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.a` @type ^`java.lang.Object` @kind object;
  #L109954.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10995a.  v1:= temp @kind object;
  #L10995c.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.b` @type ^`int`;
  #L109960.  v3:= 1I;
  #L109962.  if v2 == 0 then goto L109994;
  #L109966.  if v2 != v3 then goto L109984;
  #L10996a.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.e` @type ^`java.lang.Object` @kind object;
  #L10996e.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L109972.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.d` @type ^`java.lang.Object` @kind object;
  #L109976.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10997a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109980.  v7:= v2 @kind object;
  #L109982.  goto L1099ac;
  #L109984.  v6:= new `java.lang.IllegalStateException`;
  #L109988.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10998c.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109992.  throw v6;
  #L109994.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10999a.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L10999e.  call temp:= `iterator`(v7) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1099a4.  v7:= temp @kind object;
  #L1099a6.  v4:= v7 @kind object;
  #L1099a8.  v7:= v6 @kind object;
  #L1099aa.  v6:= v4 @kind object;
  #L1099ac.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1099b2.  v2:= temp;
  #L1099b4.  if v2 == 0 then goto L1099da;
  #L1099b8.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1099be.  v2:= temp @kind object;
  #L1099c0.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L1099c4.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L1099c8.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5$1.b` @type ^`int` := v3;
  #L1099cc.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1099d2.  v2:= temp @kind object;
  #L1099d4.  if v2 != v1 then goto L1099ac;
  #L1099d8.  return v1 @kind object;
  #L1099da.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1099de.  return v6 @kind object;
}
