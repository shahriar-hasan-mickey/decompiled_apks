record `kotlinx.coroutines.flow.n` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.AbstractFlow` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.n.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.n` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/n;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L116f10.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @kind direct;
  #L116f16.  v0.`kotlinx.coroutines.flow.n.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L116f1a.  return @kind void;
}
procedure `java.lang.Object` `collectSafely`(`kotlinx.coroutines.flow.n` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/n;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L116ee0.  v0:= v1.`kotlinx.coroutines.flow.n.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L116ee4.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L116eea.  v2:= temp @kind object;
  #L116eec.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L116ef2.  v3:= temp @kind object;
  #L116ef4.  if v2 != v3 then goto L116efa;
  #L116ef8.  return v2 @kind object;
  #L116efa.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L116efe.  return v2 @kind object;
}
