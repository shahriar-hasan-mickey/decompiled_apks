record `kotlinx.coroutines.flow.t` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` @kind class {
  `java.lang.Object` `kotlinx.coroutines.flow.t._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.flow.t.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11962c.  v0:= constclass @type ^`kotlinx.coroutines.flow.t` @kind object;
  #L119630.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L119634.  v2:= "_state" @kind object;
  #L119638.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L11963e.  v0:= temp @kind object;
  #L119640.  `@@kotlinx.coroutines.flow.t.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L119644.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.t` v1 @kind this) @signature `Lkotlinx/coroutines/flow/t;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L119658.  call `<init>`(v1) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.<init>:()V` @kind direct;
  #L11965e.  v0:= 0I;
  #L119660.  v1.`kotlinx.coroutines.flow.t._state` @type ^`java.lang.Object` := v0 @kind object;
  #L119664.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.flow.t` v0 @kind this, `kotlinx.coroutines.flow.s` v1 @kind object) @signature `Lkotlinx/coroutines/flow/t;.a:(Lkotlinx/coroutines/flow/s;)Z` @AccessFlag PUBLIC {
    temp;

  #L1194fc.  v1:= v0.`kotlinx.coroutines.flow.t._state` @type ^`java.lang.Object` @kind object;
  #L119500.  if v1 == 0 then goto L119508;
  #L119504.  v1:= 0I;
  #L119506.  return v1;
  #L119508.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L11950e.  v1:= temp @kind object;
  #L119510.  v0.`kotlinx.coroutines.flow.t._state` @type ^`java.lang.Object` := v1 @kind object;
  #L119514.  v1:= 1I;
  #L119516.  return v1;
}
procedure `boolean` `allocateLocked`(`kotlinx.coroutines.flow.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/t;.allocateLocked:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1194dc.  v1:= (`kotlinx.coroutines.flow.s`) v1 @kind object;
  #L1194e0.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/t;.a:(Lkotlinx/coroutines/flow/s;)Z` @kind virtual;
  #L1194e6.  v1:= temp;
  #L1194e8.  return v1;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.t` v3 @kind this, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/t;.b:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L119568.  v0:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L11956c.  call temp:= `intercepted`(v4) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L119572.  v1:= temp @kind object;
  #L119574.  v2:= 1I;
  #L119576.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L11957c.  call `initCancellability`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L119582.  v1:= `@@kotlinx.coroutines.flow.t.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L119586.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L11958c.  v2:= temp @kind object;
  #L11958e.  call temp:= `a`(v1, v3, v2, v0) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L119594.  v1:= temp;
  #L119596.  if v1 == 0 then goto L11959c;
  #L11959a.  goto L1195b2;
  #L11959c.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1195a0.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1195a4.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1195aa.  v1:= temp @kind object;
  #L1195ac.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1195b2.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L1195b8.  v0:= temp @kind object;
  #L1195ba.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1195c0.  v1:= temp @kind object;
  #L1195c2.  if v0 != v1 then goto L1195cc;
  #L1195c6.  call `probeCoroutineSuspended`(v4) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L1195cc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1195d2.  v4:= temp @kind object;
  #L1195d4.  if v0 != v4 then goto L1195da;
  #L1195d8.  return v0 @kind object;
  #L1195da.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1195de.  return v4 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `c`(`kotlinx.coroutines.flow.t` v0 @kind this, `kotlinx.coroutines.flow.s` v1 @kind object) @signature `Lkotlinx/coroutines/flow/t;.c:(Lkotlinx/coroutines/flow/s;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L119610.  v1:= 0I;
  #L119612.  v0.`kotlinx.coroutines.flow.t._state` @type ^`java.lang.Object` := v1 @kind object;
  #L119616.  v1:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L11961a.  return v1 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.flow.t` v3 @kind this) @signature `Lkotlinx/coroutines/flow/t;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L119678.  v0:= v3.`kotlinx.coroutines.flow.t._state` @type ^`java.lang.Object` @kind object;
  #L11967c.  if v0 != 0 then goto L119682;
  #L119680.  return @kind void;
  #L119682.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L119688.  v1:= temp @kind object;
  #L11968a.  if v0 != v1 then goto L119690;
  #L11968e.  return @kind void;
  #L119690.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L119696.  v1:= temp @kind object;
  #L119698.  if v0 != v1 then goto L1196b6;
  #L11969c.  v1:= `@@kotlinx.coroutines.flow.t.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1196a0.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1196a6.  v2:= temp @kind object;
  #L1196a8.  call temp:= `a`(v1, v3, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1196ae.  v0:= temp;
  #L1196b0.  if v0 == 0 then goto L119678;
  #L1196b4.  return @kind void;
  #L1196b6.  v1:= `@@kotlinx.coroutines.flow.t.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L1196ba.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L1196c0.  v2:= temp @kind object;
  #L1196c2.  call temp:= `a`(v1, v3, v0, v2) @signature `Landroidx/concurrent/futures/a;.a:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1196c8.  v1:= temp;
  #L1196ca.  if v1 == 0 then goto L119678;
  #L1196ce.  v0:= (`kotlinx.coroutines.CancellableContinuationImpl`) v0 @kind object;
  #L1196d2.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1196d6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1196da.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1196e0.  v1:= temp @kind object;
  #L1196e2.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1196e8.  return @kind void;
}
procedure `boolean` `e`(`kotlinx.coroutines.flow.t` v2 @kind this) @signature `Lkotlinx/coroutines/flow/t;.e:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L119528.  v0:= `@@kotlinx.coroutines.flow.t.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L11952c.  call temp:= `access$getNONE$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getNONE$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L119532.  v1:= temp @kind object;
  #L119534.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11953a.  v0:= temp @kind object;
  #L11953c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L119542.  call temp:= `access$getPENDING$p`() @signature `Lkotlinx/coroutines/flow/StateFlowKt;.access$getPENDING$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L119548.  v1:= temp @kind object;
  #L11954a.  if v0 != v1 then goto L119552;
  #L11954e.  v0:= 1I;
  #L119550.  goto L119554;
  #L119552.  v0:= 0I;
  #L119554.  return v0;
}
procedure `kotlin.coroutines.Continuation`[] `freeLocked`(`kotlinx.coroutines.flow.t` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/t;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1195f0.  v1:= (`kotlinx.coroutines.flow.s`) v1 @kind object;
  #L1195f4.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/flow/t;.c:(Lkotlinx/coroutines/flow/s;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L1195fa.  v1:= temp @kind object;
  #L1195fc.  return v1 @kind object;
}
