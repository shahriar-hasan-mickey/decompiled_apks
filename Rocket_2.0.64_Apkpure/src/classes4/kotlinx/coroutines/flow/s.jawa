record `kotlinx.coroutines.flow.s` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class, `kotlinx.coroutines.flow.MutableStateFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.flow.s._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.s.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.s` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/s;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L119324.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @kind direct;
  #L11932a.  v0.`kotlinx.coroutines.flow.s._state` @type ^`java.lang.Object` := v1 @kind object;
  #L11932e.  return @kind void;
}
procedure `boolean` `c`(`kotlinx.coroutines.flow.s` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/s;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L118f0c.  call temp:= `getSlots`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L118f12.  @monitorenter v6
  #L118f14.  v0:= v6.`kotlinx.coroutines.flow.s._state` @type ^`java.lang.Object` @kind object;
  #L118f18.  v1:= 0I;
  #L118f1a.  if v7 == 0 then goto L118f2e;
  #L118f1e.  call temp:= `areEqual`(v0, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L118f24.  v7:= temp;
  #L118f26.  if v7 != 0 then goto L118f2e;
  #L118f2a.  @monitorexit v6
  #L118f2c.  return v1;
  #L118f2e.  call temp:= `areEqual`(v0, v8) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L118f34.  v7:= temp;
  #L118f36.  v0:= 1I;
  #L118f38.  if v7 == 0 then goto L118f40;
  #L118f3c.  @monitorexit v6
  #L118f3e.  return v0;
  #L118f40.  v6.`kotlinx.coroutines.flow.s._state` @type ^`java.lang.Object` := v8 @kind object;
  #L118f44.  v7:= v6.`kotlinx.coroutines.flow.s.e` @type ^`int`;
  #L118f48.  v8:= v7 ^& 1;
  #L118f4c.  if v8 != 0 then goto L118fbc;
  #L118f50.  v7:= v7 + v0 @kind int;
  #L118f52.  v6.`kotlinx.coroutines.flow.s.e` @type ^`int` := v7;
  #L118f56.  call temp:= `getSlots`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L118f5c.  v8:= temp @kind object;
  #L118f5e.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L118f62.  @monitorexit v6
  #L118f64.  v8:= (`kotlinx.coroutines.flow.t`[]) v8 @kind object;
  #L118f68.  if v8 != 0 then goto L118f6e;
  #L118f6c.  goto L118f8c;
  #L118f6e.  v2:= length @variable v8;
  #L118f70.  v3:= 0I;
  #L118f72.  if v3 >= v2 then goto L118f8c;
  #L118f76.  v4:= v8[v3] @kind object;
  #L118f7a.  v3:= v3 + 1;
  #L118f7e.  if v4 != 0 then goto L118f84;
  #L118f82.  goto L118f72;
  #L118f84.  call `d`(v4) @signature `Lkotlinx/coroutines/flow/t;.d:()V` @kind virtual;
  #L118f8a.  goto L118f72;
  #L118f8c.  @monitorenter v6
  #L118f8e.  v8:= v6.`kotlinx.coroutines.flow.s.e` @type ^`int`;
  #L118f92.  if v8 != v7 then goto L118fa0;
  #L118f96.  v7:= v7 + v0 @kind int;
  #L118f98.  v6.`kotlinx.coroutines.flow.s.e` @type ^`int` := v7;
  #L118f9c.  @monitorexit v6
  #L118f9e.  return v0;
  #L118fa0.  call temp:= `getSlots`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L118fa6.  v7:= temp @kind object;
  #L118fa8.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L118fac.  @monitorexit v6
  #L118fae.  v5:= v8;
  #L118fb0.  v8:= v7 @kind object;
  #L118fb2.  v7:= v5;
  #L118fb4.  goto L118f64;
  #L118fb6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L118fb8.  @monitorexit v6
  #L118fba.  throw v7;
  #L118fbc.  v7:= v7 + 2;
  #L118fc0.  v6.`kotlinx.coroutines.flow.s.e` @type ^`int` := v7;
  #L118fc4.  @monitorexit v6
  #L118fc6.  return v0;
  #L118fc8.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L118fca.  @monitorexit v6
  #L118fcc.  throw v7;
  catch `java.lang.Throwable` @[L118f14..L118f26] goto L118fc8;
  catch `java.lang.Throwable` @[L118f2e..L118f36] goto L118fc8;
  catch `java.lang.Throwable` @[L118f40..L118f62] goto L118fc8;
  catch `java.lang.Throwable` @[L118f8e..L118f9c] goto L118fb6;
  catch `java.lang.Throwable` @[L118fa0..L118fac] goto L118fb6;
  catch `java.lang.Throwable` @[L118fc0..L118fc4] goto L118fc8;
}
procedure `kotlinx.coroutines.flow.t` `a`(`kotlinx.coroutines.flow.s` v1 @kind this) @signature `Lkotlinx/coroutines/flow/s;.a:()Lkotlinx/coroutines/flow/t;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1192b8.  v0:= new `kotlinx.coroutines.flow.t`;
  #L1192bc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/t;.<init>:()V` @kind direct;
  #L1192c2.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.t`[] `b`(`kotlinx.coroutines.flow.s` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/s;.b:(I)[Lkotlinx/coroutines/flow/t;` @AccessFlag PROTECTED {
    temp;

  #L1192d4.  v1:= new `kotlinx.coroutines.flow.t`[v1];
  #L1192d8.  return v1 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.s` v10 @kind this, `kotlinx.coroutines.flow.FlowCollector` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/s;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L119018.  v0:= instanceof @variable v12 @type ^`kotlinx.coroutines.flow.s$a` @kind boolean;
  #L11901c.  if v0 == 0 then goto L11903e;
  #L119020.  v0:= v12 @kind object;
  #L119022.  v0:= (`kotlinx.coroutines.flow.s$a`) v0 @kind object;
  #L119026.  v1:= v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int`;
  #L11902a.  v2:= -2147483648I;
  #L11902e.  v3:= v1 ^& v2 @kind int;
  #L119032.  if v3 == 0 then goto L11903e;
  #L119036.  v1:= v1 - v2 @kind int;
  #L119038.  v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int` := v1;
  #L11903c.  goto L119048;
  #L11903e.  v0:= new `kotlinx.coroutines.flow.s$a`;
  #L119042.  call `<init>`(v0, v10, v12) @signature `Lkotlinx/coroutines/flow/s$a;.<init>:(Lkotlinx/coroutines/flow/s;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L119048.  v12:= v0.`kotlinx.coroutines.flow.s$a.f` @type ^`java.lang.Object` @kind object;
  #L11904c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L119052.  v1:= temp @kind object;
  #L119054.  v2:= v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int`;
  #L119058.  v3:= 0I;
  #L11905a.  v4:= 3I;
  #L11905c.  v5:= 2I;
  #L11905e.  v6:= 1I;
  #L119060.  if v2 == 0 then goto L119104;
  #L119064.  if v2 == v6 then goto L1190da;
  #L119068.  if v2 == v5 then goto L1190ac;
  #L11906c.  if v2 != v4 then goto L11909c;
  #L119070.  v11:= v0.`kotlinx.coroutines.flow.s$a.e` @type ^`java.lang.Object` @kind object;
  #L119074.  v2:= v0.`kotlinx.coroutines.flow.s$a.d` @type ^`java.lang.Object` @kind object;
  #L119078.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L11907c.  v6:= v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` @kind object;
  #L119080.  v6:= (`kotlinx.coroutines.flow.t`) v6 @kind object;
  #L119084.  v7:= v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` @kind object;
  #L119088.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L11908c.  v8:= v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` @kind object;
  #L119090.  v8:= (`kotlinx.coroutines.flow.s`) v8 @kind object;
  #L119094.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11909a.  goto L119164;
  #L11909c.  v11:= new `java.lang.IllegalStateException`;
  #L1190a0.  v12:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1190a4.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1190aa.  throw v11;
  #L1190ac.  v11:= v0.`kotlinx.coroutines.flow.s$a.e` @type ^`java.lang.Object` @kind object;
  #L1190b0.  v2:= v0.`kotlinx.coroutines.flow.s$a.d` @type ^`java.lang.Object` @kind object;
  #L1190b4.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L1190b8.  v6:= v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` @kind object;
  #L1190bc.  v6:= (`kotlinx.coroutines.flow.t`) v6 @kind object;
  #L1190c0.  v7:= v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` @kind object;
  #L1190c4.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L1190c8.  v8:= v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` @kind object;
  #L1190cc.  v8:= (`kotlinx.coroutines.flow.s`) v8 @kind object;
  #L1190d0.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1190d6.  goto L1191ba;
  #L1190da.  v11:= v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` @kind object;
  #L1190de.  v6:= v11 @kind object;
  #L1190e0.  v6:= (`kotlinx.coroutines.flow.t`) v6 @kind object;
  #L1190e4.  v11:= v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` @kind object;
  #L1190e8.  v11:= (`kotlinx.coroutines.flow.FlowCollector`) v11 @kind object;
  #L1190ec.  v2:= v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` @kind object;
  #L1190f0.  v8:= v2 @kind object;
  #L1190f2.  v8:= (`kotlinx.coroutines.flow.s`) v8 @kind object;
  #L1190f6.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1190fc.  goto L119146;
  #L1190fe.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119100.  goto L1191f2;
  #L119104.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11910a.  call temp:= `allocateSlot`(v10) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L119110.  v12:= temp @kind object;
  #L119112.  v12:= (`kotlinx.coroutines.flow.t`) v12 @kind object;
  #L119116.  v2:= instanceof @variable v11 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector` @kind boolean;
  #L11911a.  if v2 == 0 then goto L119142;
  #L11911e.  v2:= v11 @kind object;
  #L119120.  v2:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v2 @kind object;
  #L119124.  v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` := v10 @kind object;
  #L119128.  v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` := v11 @kind object;
  #L11912c.  v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` := v12 @kind object;
  #L119130.  v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int` := v6;
  #L119134.  call temp:= `onSubscription`(v2, v0) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11913a.  v2:= temp @kind object;
  #L11913c.  if v2 != v1 then goto L119142;
  #L119140.  return v1 @kind object;
  #L119142.  v8:= v10 @kind object;
  #L119144.  v6:= v12 @kind object;
  #L119146.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11914c.  v12:= temp @kind object;
  #L11914e.  v2:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L119152.  call temp:= `get`(v12, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L119158.  v12:= temp @kind object;
  #L11915a.  v12:= (`kotlinx.coroutines.Job`) v12 @kind object;
  #L11915e.  v7:= v11 @kind object;
  #L119160.  v2:= v12 @kind object;
  #L119162.  v11:= v3 @kind object;
  #L119164.  v12:= v8.`kotlinx.coroutines.flow.s._state` @type ^`java.lang.Object` @kind object;
  #L119168.  if v2 != 0 then goto L11916e;
  #L11916c.  goto L119174;
  #L11916e.  call `ensureActive`(v2) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L119174.  if v11 == 0 then goto L119184;
  #L119178.  call temp:= `areEqual`(v11, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11917e.  v9:= temp;
  #L119180.  if v9 != 0 then goto L1191ba;
  #L119184.  v11:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L119188.  if v12 != v11 then goto L119190;
  #L11918c.  v11:= v3 @kind object;
  #L11918e.  goto L119192;
  #L119190.  v11:= v12 @kind object;
  #L119192.  v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` := v8 @kind object;
  #L119196.  v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L11919a.  v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` := v6 @kind object;
  #L11919e.  v0.`kotlinx.coroutines.flow.s$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L1191a2.  v0.`kotlinx.coroutines.flow.s$a.e` @type ^`java.lang.Object` := v12 @kind object;
  #L1191a6.  v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int` := v5;
  #L1191aa.  call temp:= `emit`(v7, v11, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1191b0.  v11:= temp @kind object;
  #L1191b2.  if v11 != v1 then goto L1191b8;
  #L1191b6.  return v1 @kind object;
  #L1191b8.  v11:= v12 @kind object;
  #L1191ba.  call temp:= `e`(v6) @signature `Lkotlinx/coroutines/flow/t;.e:()Z` @kind virtual;
  #L1191c0.  v12:= temp;
  #L1191c2.  if v12 != 0 then goto L119164;
  #L1191c6.  v0.`kotlinx.coroutines.flow.s$a.a` @type ^`java.lang.Object` := v8 @kind object;
  #L1191ca.  v0.`kotlinx.coroutines.flow.s$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L1191ce.  v0.`kotlinx.coroutines.flow.s$a.c` @type ^`java.lang.Object` := v6 @kind object;
  #L1191d2.  v0.`kotlinx.coroutines.flow.s$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L1191d6.  v0.`kotlinx.coroutines.flow.s$a.e` @type ^`java.lang.Object` := v11 @kind object;
  #L1191da.  v0.`kotlinx.coroutines.flow.s$a.h` @type ^`int` := v4;
  #L1191de.  call temp:= `b`(v6, v0) @signature `Lkotlinx/coroutines/flow/t;.b:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L1191e4.  v12:= temp @kind object;
  #L1191e6.  if v12 != v1 then goto L119164;
  #L1191ea.  return v1 @kind object;
  #L1191ec.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1191ee.  v8:= v10 @kind object;
  #L1191f0.  v6:= v12 @kind object;
  #L1191f2.  call `freeSlot`(v8, v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @kind virtual;
  #L1191f8.  throw v11;
  catch `java.lang.Throwable` @[L119094..L11909a] goto L1190fe;
  catch `java.lang.Throwable` @[L1190d0..L1190d6] goto L1190fe;
  catch `java.lang.Throwable` @[L1190f6..L1190fc] goto L1190fe;
  catch `java.lang.Throwable` @[L119116..L11913c] goto L1191ec;
  catch `java.lang.Throwable` @[L119146..L1191e6] goto L1190fe;
}
procedure `boolean` `compareAndSet`(`kotlinx.coroutines.flow.s` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/s;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L118ec4.  if v1 != 0 then goto L118ecc;
  #L118ec8.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L118ecc.  if v2 != 0 then goto L118ed4;
  #L118ed0.  v2:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L118ed4.  call temp:= `c`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/s;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L118eda.  v1:= temp;
  #L118edc.  return v1;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`(`kotlinx.coroutines.flow.s` v1 @kind this) @signature `Lkotlinx/coroutines/flow/s;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1192ec.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/flow/s;.a:()Lkotlinx/coroutines/flow/t;` @kind virtual;
  #L1192f2.  v0:= temp @kind object;
  #L1192f4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`kotlinx.coroutines.flow.s` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/s;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L119308.  call temp:= `b`(v0, v1) @signature `Lkotlinx/coroutines/flow/s;.b:(I)[Lkotlinx/coroutines/flow/t;` @kind virtual;
  #L11930e.  v1:= temp @kind object;
  #L119310.  return v1 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.s` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/s;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L11923c.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/s;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L119242.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L119246.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.s` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/s;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L11929c.  call temp:= `fuseStateFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.fuseStateFlow:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L1192a2.  v1:= temp @kind object;
  #L1192a4.  return v1 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.s` v1 @kind this) @signature `Lkotlinx/coroutines/flow/s;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119278.  call temp:= `getValue`(v1) @signature `Lkotlinx/coroutines/flow/s;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L11927e.  v0:= temp @kind object;
  #L119280.  call temp:= `listOf`(v0) @signature `Lkotlin/collections/CollectionsKt;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L119286.  v0:= temp @kind object;
  #L119288.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlinx.coroutines.flow.s` v2 @kind this) @signature `Lkotlinx/coroutines/flow/s;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119258.  v0:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L11925c.  v1:= v2.`kotlinx.coroutines.flow.s._state` @type ^`java.lang.Object` @kind object;
  #L119260.  if v1 != v0 then goto L119266;
  #L119264.  v1:= 0I;
  #L119266.  return v1 @kind object;
}
procedure `void` `resetReplayCache`(`kotlinx.coroutines.flow.s` v2 @kind this) @signature `Lkotlinx/coroutines/flow/s;.resetReplayCache:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119340.  v0:= new `java.lang.UnsupportedOperationException`;
  #L119344.  v1:= "MutableStateFlow.resetReplayCache is not supported" @kind object;
  #L119348.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11934e.  throw v0;
}
procedure `void` `setValue`(`kotlinx.coroutines.flow.s` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/s;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119360.  if v2 != 0 then goto L119368;
  #L119364.  v2:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L119368.  v0:= 0I;
  #L11936a.  call temp:= `c`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/s;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L119370.  return @kind void;
}
procedure `boolean` `tryEmit`(`kotlinx.coroutines.flow.s` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/s;.tryEmit:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L118ef0.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/s;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L118ef6.  v1:= 1I;
  #L118ef8.  return v1;
}
