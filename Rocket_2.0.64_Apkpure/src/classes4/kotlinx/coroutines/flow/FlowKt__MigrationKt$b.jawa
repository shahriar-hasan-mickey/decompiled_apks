record `kotlinx.coroutines.flow.FlowKt__MigrationKt$b` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__MigrationKt$b.a` @AccessFlag ;
  `long` `kotlinx.coroutines.flow.FlowKt__MigrationKt$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__MigrationKt$b` v0 @kind this, `long` v1 , `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.<init>:(JLkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10f788.  v0.`kotlinx.coroutines.flow.FlowKt__MigrationKt$b.b` @type ^`long` := v1 @kind wide;
  #L10f78c.  v1:= 2I;
  #L10f78e.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L10f794.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__MigrationKt$b` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L10f768.  v3:= new `kotlinx.coroutines.flow.FlowKt__MigrationKt$b`;
  #L10f76c.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__MigrationKt$b.b` @type ^`long` @kind wide;
  #L10f770.  call `<init>`(v3, v0, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.<init>:(JLkotlin/coroutines/Continuation;)V` @kind direct;
  #L10f776.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__MigrationKt$b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L10f6b8.  v1:= (`kotlinx.coroutines.flow.FlowCollector`) v1 @kind object;
  #L10f6bc.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L10f6c0.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L10f6c6.  v1:= temp @kind object;
  #L10f6c8.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__MigrationKt$b` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L10f6dc.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L10f6e2.  v1:= temp @kind object;
  #L10f6e4.  v1:= (`kotlinx.coroutines.flow.FlowKt__MigrationKt$b`) v1 @kind object;
  #L10f6e8.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10f6ec.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L10f6f2.  v1:= temp @kind object;
  #L10f6f4.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__MigrationKt$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__MigrationKt$b;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10f708.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10f70e.  v0:= temp @kind object;
  #L10f710.  v1:= v5.`kotlinx.coroutines.flow.FlowKt__MigrationKt$b.a` @type ^`int`;
  #L10f714.  v2:= 1I;
  #L10f716.  if v1 == 0 then goto L10f736;
  #L10f71a.  if v1 != v2 then goto L10f726;
  #L10f71e.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10f724.  goto L10f752;
  #L10f726.  v6:= new `java.lang.IllegalStateException`;
  #L10f72a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10f72e.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10f734.  throw v6;
  #L10f736.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10f73c.  v3:= v5.`kotlinx.coroutines.flow.FlowKt__MigrationKt$b.b` @type ^`long` @kind wide;
  #L10f740.  v5.`kotlinx.coroutines.flow.FlowKt__MigrationKt$b.a` @type ^`int` := v2;
  #L10f744.  call temp:= `delay`(v3, v5) @signature `Lkotlinx/coroutines/DelayKt;.delay:(JLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L10f74a.  v6:= temp @kind object;
  #L10f74c.  if v6 != v0 then goto L10f752;
  #L10f750.  return v0 @kind object;
  #L10f752.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10f756.  return v6 @kind object;
}
