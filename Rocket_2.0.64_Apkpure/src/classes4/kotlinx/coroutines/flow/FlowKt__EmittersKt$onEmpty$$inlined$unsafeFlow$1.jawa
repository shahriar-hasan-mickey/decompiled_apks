record `kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10c960.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10c964.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L10c968.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10c96e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1` v6 @kind this, `kotlinx.coroutines.flow.FlowCollector` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10c7fc.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1` @kind boolean;
  #L10c800.  if v0 == 0 then goto L10c822;
  #L10c804.  v0:= v8 @kind object;
  #L10c806.  v0:= (`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L10c80a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10c80e.  v2:= -2147483648I;
  #L10c812.  v3:= v1 ^& v2 @kind int;
  #L10c816.  if v3 == 0 then goto L10c822;
  #L10c81a.  v1:= v1 - v2 @kind int;
  #L10c81c.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L10c820.  goto L10c82c;
  #L10c822.  v0:= new `kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1`;
  #L10c826.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10c82c.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L10c830.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10c836.  v1:= temp @kind object;
  #L10c838.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10c83c.  v3:= 2I;
  #L10c83e.  v4:= 1I;
  #L10c840.  if v2 == 0 then goto L10c890;
  #L10c844.  if v2 == v4 then goto L10c870;
  #L10c848.  if v2 != v3 then goto L10c860;
  #L10c84c.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10c850.  v7:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v7 @kind object;
  #L10c854.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10c85a.  goto L10c924;
  #L10c85c.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10c85e.  goto L10c92c;
  #L10c860.  v7:= new `java.lang.IllegalStateException`;
  #L10c864.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10c868.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10c86e.  throw v7;
  #L10c870.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` @kind object;
  #L10c874.  v7:= (`kotlin.jvm.internal.Ref$BooleanRef`) v7 @kind object;
  #L10c878.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L10c87c.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10c880.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10c884.  v4:= (`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1`) v4 @kind object;
  #L10c888.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10c88e.  goto L10c8d6;
  #L10c890.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10c896.  v8:= new `kotlin.jvm.internal.Ref$BooleanRef`;
  #L10c89a.  call `<init>`(v8) @signature `Lkotlin/jvm/internal/Ref$BooleanRef;.<init>:()V` @kind direct;
  #L10c8a0.  v8.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v4 @kind boolean;
  #L10c8a4.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10c8a8.  v5:= new `kotlinx.coroutines.flow.FlowKt__EmittersKt$b`;
  #L10c8ac.  call `<init>`(v5, v8, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$b;.<init>:(Lkotlin/jvm/internal/Ref$BooleanRef;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L10c8b2.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v6 @kind object;
  #L10c8b6.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v7 @kind object;
  #L10c8ba.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v8 @kind object;
  #L10c8be.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.b` @type ^`int` := v4;
  #L10c8c2.  call temp:= `collect`(v2, v5, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10c8c8.  v2:= temp @kind object;
  #L10c8ca.  if v2 != v1 then goto L10c8d0;
  #L10c8ce.  return v1 @kind object;
  #L10c8d0.  v4:= v6 @kind object;
  #L10c8d2.  v2:= v7 @kind object;
  #L10c8d4.  v7:= v8 @kind object;
  #L10c8d6.  v7:= v7.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` @kind boolean;
  #L10c8da.  if v7 == 0 then goto L10c934;
  #L10c8de.  v7:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L10c8e2.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L10c8e8.  v8:= temp @kind object;
  #L10c8ea.  call `<init>`(v7, v2, v8) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L10c8f0.  v8:= v4.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L10c8f4.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L10c8f8.  v2:= 0I;
  #L10c8fa.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v2 @kind object;
  #L10c8fe.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v2 @kind object;
  #L10c902.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L10c906.  v2:= 6I;
  #L10c908.  call `mark`(v2) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10c90e.  call temp:= `invoke`(v8, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10c914.  v8:= temp @kind object;
  #L10c916.  v0:= 7I;
  #L10c918.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10c91e.  if v8 != v1 then goto L10c924;
  #L10c922.  return v1 @kind object;
  #L10c924.  call `releaseIntercepted`(v7) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L10c92a.  goto L10c934;
  #L10c92c.  call `releaseIntercepted`(v7) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L10c932.  throw v8;
  #L10c934.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10c938.  return v7 @kind object;
  catch `java.lang.Throwable` @[L10c854..L10c85a] goto L10c85c;
  catch `java.lang.Throwable` @[L10c8f0..L10c91e] goto L10c85c;
}
