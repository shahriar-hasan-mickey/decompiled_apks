record `kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1108dc.  v0.`kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L1108e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1108e6.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L110898.  v4:= v2.`kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L11089c.  v0:= v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L1108a0.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L1108a4.  if v0 != v1 then goto L1108b0;
  #L1108a8.  v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v3 @kind object;
  #L1108ac.  v3:= 1I;
  #L1108ae.  goto L1108b6;
  #L1108b0.  v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v1 @kind object;
  #L1108b4.  v3:= 0I;
  #L1108b6.  if v3 == 0 then goto L1108c0;
  #L1108ba.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1108be.  return v3 @kind object;
  #L1108c0.  v3:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L1108c4.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L1108ca.  throw v3;
}
