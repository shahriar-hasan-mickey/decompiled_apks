record `kotlinx.coroutines.flow.d` @kind class @AccessFlag  extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.d.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.d` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10910c.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L109112.  v0.`kotlinx.coroutines.flow.d.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L109116.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.d` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object, `int` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlinx/coroutines/flow/d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L109128.  v6:= v5 ^& 2;
  #L10912c.  if v6 == 0 then goto L109134;
  #L109130.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L109134.  v6:= v5 ^& 4;
  #L109138.  if v6 == 0 then goto L10913e;
  #L10913c.  v3:= -2I;
  #L10913e.  v5:= v5 ^& 8;
  #L109142.  if v5 == 0 then goto L10914a;
  #L109146.  v4:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L10914a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L109150.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.d` v0 @kind object, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/d;.b:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L109050.  v0:= v0.`kotlinx.coroutines.flow.d.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L109054.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10905a.  v0:= temp @kind object;
  #L10905c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109062.  v1:= temp @kind object;
  #L109064.  if v0 != v1 then goto L10906a;
  #L109068.  return v0 @kind object;
  #L10906a.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10906e.  return v0 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.d` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/d;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L109080.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/d;.b:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L109086.  v1:= temp @kind object;
  #L109088.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.d` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/d;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1090ec.  v0:= new `kotlinx.coroutines.flow.d`;
  #L1090f0.  v1:= v2.`kotlinx.coroutines.flow.d.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1090f4.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L1090fa.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.d` v2 @kind this) @signature `Lkotlinx/coroutines/flow/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L10909c.  v0:= new `java.lang.StringBuilder`;
  #L1090a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1090a6.  v1:= "block[" @kind object;
  #L1090aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1090b0.  v1:= v2.`kotlinx.coroutines.flow.d.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L1090b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1090ba.  v1:= "] -> " @kind object;
  #L1090be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1090c4.  call temp:= `toString`(v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @kind super;
  #L1090ca.  v1:= temp @kind object;
  #L1090cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1090d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1090d8.  v0:= temp @kind object;
  #L1090da.  return v0 @kind object;
}
