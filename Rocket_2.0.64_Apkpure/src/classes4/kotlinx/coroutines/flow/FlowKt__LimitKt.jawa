record `kotlinx.coroutines.flow.FlowKt__LimitKt` @kind class @AccessFlag FINAL_SYNTHETIC {
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L10e990.  call temp:= `e`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.e:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L10e996.  v0:= temp @kind object;
  #L10e998.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.Flow` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.b:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10e9ac.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$a` @kind boolean;
  #L10e9b0.  if v0 == 0 then goto L10e9d2;
  #L10e9b4.  v0:= v6 @kind object;
  #L10e9b6.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$a`) v0 @kind object;
  #L10e9ba.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int`;
  #L10e9be.  v2:= -2147483648I;
  #L10e9c2.  v3:= v1 ^& v2 @kind int;
  #L10e9c6.  if v3 == 0 then goto L10e9d2;
  #L10e9ca.  v1:= v1 - v2 @kind int;
  #L10e9cc.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int` := v1;
  #L10e9d0.  goto L10e9dc;
  #L10e9d2.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$a`;
  #L10e9d6.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10e9dc.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.b` @type ^`java.lang.Object` @kind object;
  #L10e9e0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10e9e6.  v1:= temp @kind object;
  #L10e9e8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int`;
  #L10e9ec.  v3:= 1I;
  #L10e9ee.  if v2 == 0 then goto L10ea1a;
  #L10e9f2.  if v2 != v3 then goto L10ea0a;
  #L10e9f6.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.a` @type ^`java.lang.Object` @kind object;
  #L10e9fa.  v4:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`) v4 @kind object;
  #L10e9fe.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10ea04.  goto L10ea4a;
  #L10ea06.  v5:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L10ea08.  goto L10ea44;
  #L10ea0a.  v4:= new `java.lang.IllegalStateException`;
  #L10ea0e.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10ea12.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ea18.  throw v4;
  #L10ea1a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10ea20.  v6:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`;
  #L10ea24.  call `<init>`(v6, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L10ea2a.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.a` @type ^`java.lang.Object` := v6 @kind object;
  #L10ea2e.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$a.c` @type ^`int` := v3;
  #L10ea32.  call temp:= `collect`(v4, v6, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10ea38.  v4:= temp @kind object;
  #L10ea3a.  if v4 != v1 then goto L10ea4a;
  #L10ea3e.  return v1 @kind object;
  #L10ea40.  v5:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L10ea42.  v4:= v6 @kind object;
  #L10ea44.  call `checkOwnership`(v5, v4) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkOwnership:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind static;
  #L10ea4a.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10ea4e.  return v4 @kind object;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L10e9fe..L10ea04] goto L10ea06;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L10ea2a..L10ea3a] goto L10ea40;
}
procedure `kotlinx.coroutines.flow.Flow` `c`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.c:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L10eb20.  if v2 < 0 then goto L10eb28;
  #L10eb24.  v0:= 1I;
  #L10eb26.  goto L10eb2a;
  #L10eb28.  v0:= 0I;
  #L10eb2a.  if v0 == 0 then goto L10eb3a;
  #L10eb2e.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1`;
  #L10eb32.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$drop$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @kind direct;
  #L10eb38.  return v0 @kind object;
  #L10eb3a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L10eb40.  v1:= temp @kind object;
  #L10eb42.  v2:= "Drop count should be non-negative, but had " @kind object;
  #L10eb46.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L10eb4c.  v1:= temp @kind object;
  #L10eb4e.  v2:= new `java.lang.IllegalArgumentException`;
  #L10eb52.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L10eb58.  v1:= temp @kind object;
  #L10eb5a.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10eb60.  throw v2;
}
procedure `kotlinx.coroutines.flow.Flow` `d`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.d:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L10eb74.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1`;
  #L10eb78.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$dropWhile$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L10eb7e.  return v0 @kind object;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.flow.FlowCollector` v4 @kind object, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.e:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10ea7c.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$d` @kind boolean;
  #L10ea80.  if v0 == 0 then goto L10eaa2;
  #L10ea84.  v0:= v6 @kind object;
  #L10ea86.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$d`) v0 @kind object;
  #L10ea8a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.c` @type ^`int`;
  #L10ea8e.  v2:= -2147483648I;
  #L10ea92.  v3:= v1 ^& v2 @kind int;
  #L10ea96.  if v3 == 0 then goto L10eaa2;
  #L10ea9a.  v1:= v1 - v2 @kind int;
  #L10ea9c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.c` @type ^`int` := v1;
  #L10eaa0.  goto L10eaac;
  #L10eaa2.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$d`;
  #L10eaa6.  call `<init>`(v0, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$d;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10eaac.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.b` @type ^`java.lang.Object` @kind object;
  #L10eab0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10eab6.  v1:= temp @kind object;
  #L10eab8.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.c` @type ^`int`;
  #L10eabc.  v3:= 1I;
  #L10eabe.  if v2 == 0 then goto L10eae6;
  #L10eac2.  if v2 == v3 then goto L10ead6;
  #L10eac6.  v4:= new `java.lang.IllegalStateException`;
  #L10eaca.  v5:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10eace.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ead4.  throw v4;
  #L10ead6.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.a` @type ^`java.lang.Object` @kind object;
  #L10eada.  v4:= (`kotlinx.coroutines.flow.FlowCollector`) v4 @kind object;
  #L10eade.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10eae4.  goto L10eb02;
  #L10eae6.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10eaec.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.a` @type ^`java.lang.Object` := v4 @kind object;
  #L10eaf0.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$d.c` @type ^`int` := v3;
  #L10eaf4.  call temp:= `emit`(v4, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10eafa.  v5:= temp @kind object;
  #L10eafc.  if v5 != v1 then goto L10eb02;
  #L10eb00.  return v1 @kind object;
  #L10eb02.  v5:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L10eb06.  call `<init>`(v5, v4) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L10eb0c.  throw v5;
}
procedure `kotlinx.coroutines.flow.Flow` `f`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.f:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L10eb90.  if v2 <= 0 then goto L10eb98;
  #L10eb94.  v0:= 1I;
  #L10eb96.  goto L10eb9a;
  #L10eb98.  v0:= 0I;
  #L10eb9a.  if v0 == 0 then goto L10ebaa;
  #L10eb9e.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1`;
  #L10eba2.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @kind direct;
  #L10eba8.  return v0 @kind object;
  #L10ebaa.  v1:= new `java.lang.StringBuilder`;
  #L10ebae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L10ebb4.  v0:= "Requested element count " @kind object;
  #L10ebb8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L10ebbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L10ebc4.  v2:= " should be positive" @kind object;
  #L10ebc8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L10ebce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L10ebd4.  v1:= temp @kind object;
  #L10ebd6.  v2:= new `java.lang.IllegalArgumentException`;
  #L10ebda.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L10ebe0.  v1:= temp @kind object;
  #L10ebe2.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ebe8.  throw v2;
}
procedure `kotlinx.coroutines.flow.Flow` `g`(`kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.g:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L10ebfc.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1`;
  #L10ec00.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L10ec06.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `h`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.h:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L10ec18.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1`;
  #L10ec1c.  v1:= 0I;
  #L10ec1e.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10ec24.  call temp:= `flow`(v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.flow:(Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10ec2a.  v2:= temp @kind object;
  #L10ec2c.  return v2 @kind object;
}
