record `kotlinx.coroutines.flow.SharedFlowKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `kotlinx.coroutines.internal.Symbol` `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L118260.  v0:= new `kotlinx.coroutines.internal.Symbol`;
  #L118264.  v1:= "NO_VALUE" @kind object;
  #L118268.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/Symbol;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11826e.  `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` := v0 @kind object;
  #L118272.  return @kind void;
}
procedure `kotlinx.coroutines.flow.MutableSharedFlow` `MutableSharedFlow`(`int` v3 , `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.MutableSharedFlow:(IILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/MutableSharedFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L118190.  v0:= 1I;
  #L118192.  v1:= 0I;
  #L118194.  if v3 < 0 then goto L11819c;
  #L118198.  v2:= 1I;
  #L11819a.  goto L11819e;
  #L11819c.  v2:= 0I;
  #L11819e.  if v2 == 0 then goto L118228;
  #L1181a2.  if v4 < 0 then goto L1181aa;
  #L1181a6.  v2:= 1I;
  #L1181a8.  goto L1181ac;
  #L1181aa.  v2:= 0I;
  #L1181ac.  if v2 == 0 then goto L118200;
  #L1181b0.  if v3 > 0 then goto L1181c4;
  #L1181b4.  if v4 > 0 then goto L1181c4;
  #L1181b8.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1181bc.  if v5 != v2 then goto L1181c2;
  #L1181c0.  goto L1181c4;
  #L1181c2.  v0:= 0I;
  #L1181c4.  if v0 == 0 then goto L1181e0;
  #L1181c8.  v4:= v4 + v3 @kind int;
  #L1181ca.  if v4 >= 0 then goto L1181d4;
  #L1181ce.  v4:= 2147483647I;
  #L1181d4.  v0:= new `kotlinx.coroutines.flow.SharedFlowImpl`;
  #L1181d8.  call `<init>`(v0, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.<init>:(IILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L1181de.  return v0 @kind object;
  #L1181e0.  v3:= "replay or extraBufferCapacity must be positive with non-default onBufferOverflow strategy " @kind object;
  #L1181e4.  call temp:= `stringPlus`(v3, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1181ea.  v3:= temp @kind object;
  #L1181ec.  v4:= new `java.lang.IllegalArgumentException`;
  #L1181f0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1181f6.  v3:= temp @kind object;
  #L1181f8.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1181fe.  throw v4;
  #L118200.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L118206.  v3:= temp @kind object;
  #L118208.  v4:= "extraBufferCapacity cannot be negative, but was " @kind object;
  #L11820c.  call temp:= `stringPlus`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L118212.  v3:= temp @kind object;
  #L118214.  v4:= new `java.lang.IllegalArgumentException`;
  #L118218.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11821e.  v3:= temp @kind object;
  #L118220.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L118226.  throw v4;
  #L118228.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11822e.  v3:= temp @kind object;
  #L118230.  v4:= "replay cannot be negative, but was " @kind object;
  #L118234.  call temp:= `stringPlus`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11823a.  v3:= temp @kind object;
  #L11823c.  v4:= new `java.lang.IllegalArgumentException`;
  #L118240.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L118246.  v3:= temp @kind object;
  #L118248.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11824e.  throw v4;
}
procedure `kotlinx.coroutines.flow.MutableSharedFlow` `MutableSharedFlow$default`(`int` v1 , `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.MutableSharedFlow$default:(IILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/MutableSharedFlow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;

  #L118154.  v5:= v4 ^& 1;
  #L118158.  v0:= 0I;
  #L11815a.  if v5 == 0 then goto L118160;
  #L11815e.  v1:= 0I;
  #L118160.  v5:= v4 ^& 2;
  #L118164.  if v5 == 0 then goto L11816a;
  #L118168.  v2:= 0I;
  #L11816a.  v4:= v4 ^& 4;
  #L11816e.  if v4 == 0 then goto L118176;
  #L118172.  v3:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L118176.  call temp:= `MutableSharedFlow`(v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.MutableSharedFlow:(IILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/MutableSharedFlow;` @kind static;
  #L11817c.  v1:= temp @kind object;
  #L11817e.  return v1 @kind object;
}
procedure `java.lang.Object` `a`(`java.lang.Object`[] v0 @kind object, `long` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L118104.  v2:= (`int`) v1 @kind l2i;
  #L118106.  v1:= length @variable v0;
  #L118108.  v1:= v1 + -1;
  #L11810c.  v1:= v1 ^& v2 @kind int;
  #L11810e.  v0:= v0[v1] @kind object;
  #L118112.  return v0 @kind object;
}
procedure `java.lang.Object` `access$getBufferAt`(`java.lang.Object`[] v0 @kind object, `long` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1180e8.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L1180ee.  v0:= temp @kind object;
  #L1180f0.  return v0 @kind object;
}
procedure `void` `access$setBufferAt`(`java.lang.Object`[] v0 @kind object, `long` v1 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L118284.  call `b`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L11828a.  return @kind void;
}
procedure `void` `b`(`java.lang.Object`[] v0 @kind object, `long` v1 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L1182b0.  v2:= (`int`) v1 @kind l2i;
  #L1182b2.  v1:= length @variable v0;
  #L1182b4.  v1:= v1 + -1;
  #L1182b8.  v1:= v1 ^& v2 @kind int;
  #L1182ba.  v0[v1]:= v3 @kind object;
  #L1182be.  return @kind void;
}
procedure `kotlinx.coroutines.flow.Flow` `fuseSharedFlow`(`kotlinx.coroutines.flow.SharedFlow` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L118124.  if v3 == 0 then goto L11812e;
  #L118128.  v0:= -3I;
  #L11812a.  if v3 != v0 then goto L118138;
  #L11812e.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L118132.  if v4 != v0 then goto L118138;
  #L118136.  return v1 @kind object;
  #L118138.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl`;
  #L11813c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L118142.  return v0 @kind object;
}
procedure `void` `getNO_VALUE$annotations`() @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.getNO_VALUE$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L11829c.  return @kind void;
}
