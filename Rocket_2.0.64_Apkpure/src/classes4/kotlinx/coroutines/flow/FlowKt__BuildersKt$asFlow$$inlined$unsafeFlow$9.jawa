record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.ranges.IntRange` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` v0 @kind this, `kotlin.ranges.IntRange` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;.<init>:(Lkotlin/ranges/IntRange;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L109f18.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @type ^`kotlin.ranges.IntRange` := v1 @kind object;
  #L109f1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L109f22.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L109e38.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1` @kind boolean;
  #L109e3c.  if v0 == 0 then goto L109e5e;
  #L109e40.  v0:= v7 @kind object;
  #L109e42.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1`) v0 @kind object;
  #L109e46.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int`;
  #L109e4a.  v2:= -2147483648I;
  #L109e4e.  v3:= v1 ^& v2 @kind int;
  #L109e52.  if v3 == 0 then goto L109e5e;
  #L109e56.  v1:= v1 - v2 @kind int;
  #L109e58.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int` := v1;
  #L109e5c.  goto L109e68;
  #L109e5e.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1`;
  #L109e62.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L109e68.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.a` @type ^`java.lang.Object` @kind object;
  #L109e6c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109e72.  v1:= temp @kind object;
  #L109e74.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int`;
  #L109e78.  v3:= 1I;
  #L109e7a.  if v2 == 0 then goto L109eac;
  #L109e7e.  if v2 != v3 then goto L109e9c;
  #L109e82.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.e` @type ^`java.lang.Object` @kind object;
  #L109e86.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L109e8a.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.d` @type ^`java.lang.Object` @kind object;
  #L109e8e.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L109e92.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109e98.  v7:= v2 @kind object;
  #L109e9a.  goto L109ec4;
  #L109e9c.  v6:= new `java.lang.IllegalStateException`;
  #L109ea0.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109ea4.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109eaa.  throw v6;
  #L109eac.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109eb2.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9.a` @type ^`kotlin.ranges.IntRange` @kind object;
  #L109eb6.  call temp:= `iterator`(v7) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L109ebc.  v7:= temp @kind object;
  #L109ebe.  v4:= v7 @kind object;
  #L109ec0.  v7:= v6 @kind object;
  #L109ec2.  v6:= v4 @kind object;
  #L109ec4.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L109eca.  v2:= temp;
  #L109ecc.  if v2 == 0 then goto L109f00;
  #L109ed0.  v2:= v6 @kind object;
  #L109ed2.  v2:= (`kotlin.collections.IntIterator`) v2 @kind object;
  #L109ed6.  call temp:= `nextInt`(v2) @signature `Lkotlin/collections/IntIterator;.nextInt:()I` @kind virtual;
  #L109edc.  v2:= temp;
  #L109ede.  call temp:= `boxInt`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxInt:(I)Ljava/lang/Integer;` @kind static;
  #L109ee4.  v2:= temp @kind object;
  #L109ee6.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L109eea.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L109eee.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$9$1.b` @type ^`int` := v3;
  #L109ef2.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109ef8.  v2:= temp @kind object;
  #L109efa.  if v2 != v1 then goto L109ec4;
  #L109efe.  return v1 @kind object;
  #L109f00.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109f04.  return v6 @kind object;
}
