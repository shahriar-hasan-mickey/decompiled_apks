record `kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlinx.coroutines.flow.Flow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/flow/Flow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10cc24.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L10cc28.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.b` @type ^`kotlinx.coroutines.flow.Flow` := v2 @kind object;
  #L10cc2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10cc32.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1` v6 @kind this, `kotlinx.coroutines.flow.FlowCollector` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10cae0.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1` @kind boolean;
  #L10cae4.  if v0 == 0 then goto L10cb06;
  #L10cae8.  v0:= v8 @kind object;
  #L10caea.  v0:= (`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L10caee.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10caf2.  v2:= -2147483648I;
  #L10caf6.  v3:= v1 ^& v2 @kind int;
  #L10cafa.  if v3 == 0 then goto L10cb06;
  #L10cafe.  v1:= v1 - v2 @kind int;
  #L10cb00.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L10cb04.  goto L10cb10;
  #L10cb06.  v0:= new `kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1`;
  #L10cb0a.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10cb10.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L10cb14.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10cb1a.  v1:= temp @kind object;
  #L10cb1c.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10cb20.  v3:= 2I;
  #L10cb22.  v4:= 1I;
  #L10cb24.  if v2 == 0 then goto L10cb6c;
  #L10cb28.  if v2 == v4 then goto L10cb48;
  #L10cb2c.  if v2 != v3 then goto L10cb38;
  #L10cb30.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10cb36.  goto L10cbe6;
  #L10cb38.  v7:= new `java.lang.IllegalStateException`;
  #L10cb3c.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10cb40.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10cb46.  throw v7;
  #L10cb48.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` @kind object;
  #L10cb4c.  v7:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v7 @kind object;
  #L10cb50.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L10cb54.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10cb58.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10cb5c.  v4:= (`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1`) v4 @kind object;
  #L10cb60.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10cb66.  goto L10cbbc;
  #L10cb68.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10cb6a.  goto L10cbf4;
  #L10cb6c.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10cb72.  v8:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L10cb76.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L10cb7c.  v2:= temp @kind object;
  #L10cb7e.  call `<init>`(v8, v7, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L10cb84.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L10cb88.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v6 @kind object;
  #L10cb8c.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v7 @kind object;
  #L10cb90.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v8 @kind object;
  #L10cb94.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.b` @type ^`int` := v4;
  #L10cb98.  v4:= 6I;
  #L10cb9a.  call `mark`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10cba0.  call temp:= `invoke`(v2, v8, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10cba6.  v2:= temp @kind object;
  #L10cba8.  v4:= 7I;
  #L10cbaa.  call `mark`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10cbb0.  if v2 != v1 then goto L10cbb6;
  #L10cbb4.  return v1 @kind object;
  #L10cbb6.  v4:= v6 @kind object;
  #L10cbb8.  v2:= v7 @kind object;
  #L10cbba.  v7:= v8 @kind object;
  #L10cbbc.  call `releaseIntercepted`(v7) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L10cbc2.  v7:= v4.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10cbc6.  v8:= 0I;
  #L10cbc8.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v8 @kind object;
  #L10cbcc.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v8 @kind object;
  #L10cbd0.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v8 @kind object;
  #L10cbd4.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$onStart$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L10cbd8.  call temp:= `collect`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10cbde.  v7:= temp @kind object;
  #L10cbe0.  if v7 != v1 then goto L10cbe6;
  #L10cbe4.  return v1 @kind object;
  #L10cbe6.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10cbea.  return v7 @kind object;
  #L10cbec.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10cbee.  v5:= v8 @kind object;
  #L10cbf0.  v8:= v7 @kind object;
  #L10cbf2.  v7:= v5 @kind object;
  #L10cbf4.  call `releaseIntercepted`(v7) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L10cbfa.  throw v8;
  catch `java.lang.Throwable` @[L10cb60..L10cb66] goto L10cb68;
  catch `java.lang.Throwable` @[L10cb84..L10cbb0] goto L10cbec;
}
