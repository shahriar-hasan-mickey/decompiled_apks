record `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @AccessFlag PUBLIC_FINAL;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.ChannelFlow.context` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlow` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11af24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11af2a.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L11af2e.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int` := v2;
  #L11af32.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v3 @kind object;
  #L11af36.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind object, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.a:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L11acd8.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$a`;
  #L11acdc.  v1:= 0I;
  #L11acde.  call `<init>`(v0, v3, v2, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11ace4.  call temp:= `coroutineScope`(v0, v4) @signature `Lkotlinx/coroutines/CoroutineScopeKt;.coroutineScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11acea.  v2:= temp @kind object;
  #L11acec.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11acf2.  v3:= temp @kind object;
  #L11acf4.  if v2 != v3 then goto L11acfa;
  #L11acf8.  return v2 @kind object;
  #L11acfa.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11acfe.  return v2 @kind object;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.internal.ChannelFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L11ad2c.  v0:= 0I;
  #L11ad2e.  return v0 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.internal.ChannelFlow` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L11ad10.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.a:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11ad16.  v1:= temp @kind object;
  #L11ad18.  return v1 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.channels.ProducerScope` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlin.coroutines.CoroutineContext` v0 @kind object, `int` v1 , `kotlinx.coroutines.channels.BufferOverflow` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.Flow` `dropChannelOperators`(`kotlinx.coroutines.flow.internal.ChannelFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ae88.  v0:= 0I;
  #L11ae8a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.internal.ChannelFlow` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ae9c.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11aea0.  call temp:= `plus`(v2, v0) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11aea6.  v2:= temp @kind object;
  #L11aea8.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11aeac.  if v4 == v0 then goto L11aeb2;
  #L11aeb0.  goto L11aee6;
  #L11aeb2.  v4:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11aeb6.  v0:= -3I;
  #L11aeb8.  if v4 != v0 then goto L11aebe;
  #L11aebc.  goto L11aee2;
  #L11aebe.  if v3 != v0 then goto L11aec6;
  #L11aec2.  v3:= v4;
  #L11aec4.  goto L11aee2;
  #L11aec6.  v0:= -2I;
  #L11aec8.  if v4 != v0 then goto L11aece;
  #L11aecc.  goto L11aee2;
  #L11aece.  if v3 != v0 then goto L11aed4;
  #L11aed2.  goto L11aec2;
  #L11aed4.  v4:= v4 + v3 @kind int;
  #L11aed6.  if v4 < 0 then goto L11aedc;
  #L11aeda.  goto L11aec2;
  #L11aedc.  v3:= 2147483647I;
  #L11aee2.  v4:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11aee6.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11aeea.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11aef0.  v0:= temp;
  #L11aef2.  if v0 == 0 then goto L11af08;
  #L11aef6.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11aefa.  if v3 != v0 then goto L11af08;
  #L11aefe.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11af02.  if v4 != v0 then goto L11af08;
  #L11af06.  return v1 @kind object;
  #L11af08.  call temp:= `create`(v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @kind virtual;
  #L11af0e.  v2:= temp @kind object;
  #L11af10.  return v2 @kind object;
}
procedure `kotlin.jvm.functions.Function2` `getCollectToFun$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11ae28.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$b`;
  #L11ae2c.  v1:= 0I;
  #L11ae2e.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$b;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11ae34.  return v0 @kind object;
}
procedure `int` `getProduceCapacity$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getProduceCapacity$kotlinx_coroutines_core:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11acb8.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11acbc.  v1:= -3I;
  #L11acbe.  if v0 != v1 then goto L11acc4;
  #L11acc2.  v0:= -2I;
  #L11acc4.  return v0;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.internal.ChannelFlow` v9 @kind this, `kotlinx.coroutines.CoroutineScope` v10 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11ae48.  v1:= v9.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11ae4c.  call temp:= `getProduceCapacity$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getProduceCapacity$kotlinx_coroutines_core:()I` @kind virtual;
  #L11ae52.  v2:= temp;
  #L11ae54.  v3:= v9.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11ae58.  v4:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L11ae5c.  call temp:= `getCollectToFun$kotlinx_coroutines_core`(v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @kind virtual;
  #L11ae62.  v6:= temp @kind object;
  #L11ae64.  v5:= 0I;
  #L11ae66.  v7:= 16I;
  #L11ae6a.  v8:= 0I;
  #L11ae6c.  v0:= v10 @kind object;
  #L11ae6e.  call temp:= `produce$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/channels/ProduceKt;.produce$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L11ae74.  v10:= temp @kind object;
  #L11ae76.  return v10 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.internal.ChannelFlow` v10 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11ad40.  v0:= new `java.util.ArrayList`;
  #L11ad44.  v1:= 4I;
  #L11ad46.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L11ad4c.  call temp:= `additionalToStringProps`(v10) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.additionalToStringProps:()Ljava/lang/String;` @kind virtual;
  #L11ad52.  v1:= temp @kind object;
  #L11ad54.  if v1 != 0 then goto L11ad5a;
  #L11ad58.  goto L11ad60;
  #L11ad5a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L11ad60.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11ad64.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L11ad68.  if v1 == v2 then goto L11ad7e;
  #L11ad6c.  v2:= "context=" @kind object;
  #L11ad70.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11ad76.  v1:= temp @kind object;
  #L11ad78.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L11ad7e.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11ad82.  v2:= -3I;
  #L11ad84.  if v1 == v2 then goto L11ada2;
  #L11ad88.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11ad8e.  v1:= temp @kind object;
  #L11ad90.  v2:= "capacity=" @kind object;
  #L11ad94.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11ad9a.  v1:= temp @kind object;
  #L11ad9c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L11ada2.  v1:= v10.`kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11ada6.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11adaa.  if v1 == v2 then goto L11adc0;
  #L11adae.  v2:= "onBufferOverflow=" @kind object;
  #L11adb2.  call temp:= `stringPlus`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11adb8.  v1:= temp @kind object;
  #L11adba.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L11adc0.  v9:= new `java.lang.StringBuilder`;
  #L11adc4.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11adca.  call temp:= `getClassSimpleName`(v10) @signature `Lkotlinx/coroutines/DebugStringsKt;.getClassSimpleName:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11add0.  v1:= temp @kind object;
  #L11add2.  call temp:= `append`(v9, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11add8.  v1:= 91I;
  #L11addc.  call temp:= `append`(v9, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ade2.  v2:= 0I;
  #L11ade4.  v3:= 0I;
  #L11ade6.  v4:= 0I;
  #L11ade8.  v5:= 0I;
  #L11adea.  v6:= 0I;
  #L11adec.  v7:= 62I;
  #L11adf0.  v8:= 0I;
  #L11adf2.  v1:= ", " @kind object;
  #L11adf6.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11adfc.  v0:= temp @kind object;
  #L11adfe.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ae04.  v0:= 93I;
  #L11ae08.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ae0e.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ae14.  v0:= temp @kind object;
  #L11ae16.  return v0 @kind object;
}
