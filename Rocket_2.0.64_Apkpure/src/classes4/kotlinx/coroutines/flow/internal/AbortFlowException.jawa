record `kotlinx.coroutines.flow.internal.AbortFlowException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.AbortFlowException.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L119a54.  v0:= "Flow was aborted, no more elements needed" @kind object;
  #L119a58.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119a5e.  v1.`kotlinx.coroutines.flow.internal.AbortFlowException.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v2 @kind object;
  #L119a62.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119a1c.  v0:= 0I;
  #L119a1e.  v0:= new `java.lang.StackTraceElement`[v0];
  #L119a22.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L119a28.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.FlowCollector` `getOwner`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.getOwner:()Lkotlinx/coroutines/flow/FlowCollector;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L119a3c.  v0:= v1.`kotlinx.coroutines.flow.internal.AbortFlowException.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L119a40.  return v0 @kind object;
}
