record `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.Job` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.Semaphore` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.channels.ProducerScope` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v0 @kind this, `kotlinx.coroutines.Job` v1 @kind object, `kotlinx.coroutines.sync.Semaphore` v2 @kind object, `kotlinx.coroutines.channels.ProducerScope` v3 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.<init>:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/sync/Semaphore;Lkotlinx/coroutines/channels/ProducerScope;Lkotlinx/coroutines/flow/internal/SendingCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11a2f4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @type ^`kotlinx.coroutines.Job` := v1 @kind object;
  #L11a2f8.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.sync.Semaphore` := v2 @kind object;
  #L11a2fc.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @type ^`kotlinx.coroutines.channels.ProducerScope` := v3 @kind object;
  #L11a300.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v4 @kind object;
  #L11a304.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11a30a.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v7 @kind this, `kotlinx.coroutines.flow.Flow` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.a:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a210.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b` @kind boolean;
  #L11a214.  if v0 == 0 then goto L11a236;
  #L11a218.  v0:= v9 @kind object;
  #L11a21a.  v0:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b`) v0 @kind object;
  #L11a21e.  v1:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.e` @type ^`int`;
  #L11a222.  v2:= -2147483648I;
  #L11a226.  v3:= v1 ^& v2 @kind int;
  #L11a22a.  if v3 == 0 then goto L11a236;
  #L11a22e.  v1:= v1 - v2 @kind int;
  #L11a230.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.e` @type ^`int` := v1;
  #L11a234.  goto L11a240;
  #L11a236.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b`;
  #L11a23a.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$b;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a240.  v9:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.c` @type ^`java.lang.Object` @kind object;
  #L11a244.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a24a.  v1:= temp @kind object;
  #L11a24c.  v2:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.e` @type ^`int`;
  #L11a250.  v3:= 1I;
  #L11a252.  if v2 == 0 then goto L11a282;
  #L11a256.  if v2 != v3 then goto L11a272;
  #L11a25a.  v8:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.b` @type ^`java.lang.Object` @kind object;
  #L11a25e.  v8:= (`kotlinx.coroutines.flow.Flow`) v8 @kind object;
  #L11a262.  v0:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.a` @type ^`java.lang.Object` @kind object;
  #L11a266.  v0:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a`) v0 @kind object;
  #L11a26a.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a270.  goto L11a2b8;
  #L11a272.  v8:= new `java.lang.IllegalStateException`;
  #L11a276.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11a27a.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a280.  throw v8;
  #L11a282.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a288.  v9:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.a` @type ^`kotlinx.coroutines.Job` @kind object;
  #L11a28c.  if v9 != 0 then goto L11a292;
  #L11a290.  goto L11a298;
  #L11a292.  call `ensureActive`(v9) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L11a298.  v9:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L11a29c.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.a` @type ^`java.lang.Object` := v7 @kind object;
  #L11a2a0.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.b` @type ^`java.lang.Object` := v8 @kind object;
  #L11a2a4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$b.e` @type ^`int` := v3;
  #L11a2a8.  call temp:= `acquire`(v9, v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.acquire:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11a2ae.  v9:= temp @kind object;
  #L11a2b0.  if v9 != v1 then goto L11a2b6;
  #L11a2b4.  return v1 @kind object;
  #L11a2b6.  v0:= v7 @kind object;
  #L11a2b8.  v1:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.c` @type ^`kotlinx.coroutines.channels.ProducerScope` @kind object;
  #L11a2bc.  v2:= 0I;
  #L11a2be.  v3:= 0I;
  #L11a2c0.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a`;
  #L11a2c4.  v9:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.d` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L11a2c8.  v0:= v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a.b` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L11a2cc.  v5:= 0I;
  #L11a2ce.  call `<init>`(v4, v8, v9, v0, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a2d4.  v5:= 3I;
  #L11a2d6.  v6:= 0I;
  #L11a2d8.  call temp:= `launch$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/BuildersKt;.launch$default:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/CoroutineStart;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)Lkotlinx/coroutines/Job;` @kind static;
  #L11a2de.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a2e2.  return v8 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11a1f0.  v1:= (`kotlinx.coroutines.flow.Flow`) v1 @kind object;
  #L11a1f4.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.a:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a1fa.  v1:= temp @kind object;
  #L11a1fc.  return v1 @kind object;
}
