record `kotlinx.coroutines.flow.internal.d` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.SharedFlowImpl` @kind class, `kotlinx.coroutines.flow.StateFlow` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.d` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/flow/internal/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11ce1c.  v0:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11ce20.  v1:= 1I;
  #L11ce22.  v2:= 2147483647I;
  #L11ce28.  call `<init>`(v3, v1, v2, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.<init>:(IILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11ce2e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11ce34.  v4:= temp @kind object;
  #L11ce36.  call temp:= `tryEmit`(v3, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @kind virtual;
  #L11ce3c.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`kotlinx.coroutines.flow.internal.d` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11ce00.  call temp:= `w`(v1) @signature `Lkotlinx/coroutines/flow/internal/d;.w:()Ljava/lang/Integer;` @kind virtual;
  #L11ce06.  v0:= temp @kind object;
  #L11ce08.  return v0 @kind object;
}
procedure `java.lang.Integer` `w`(`kotlinx.coroutines.flow.internal.d` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/d;.w:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cdbc.  @monitorenter v1
  #L11cdbe.  call temp:= `getLastReplayedLocked`(v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getLastReplayedLocked:()Ljava/lang/Object;` @kind virtual;
  #L11cdc4.  v0:= temp @kind object;
  #L11cdc6.  v0:= (`java.lang.Number`) v0 @kind object;
  #L11cdca.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11cdd0.  v0:= temp;
  #L11cdd2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11cdd8.  v0:= temp @kind object;
  #L11cdda.  @monitorexit v1
  #L11cddc.  return v0 @kind object;
  #L11cdde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11cde0.  @monitorexit v1
  #L11cde2.  throw v0;
  catch `java.lang.Throwable` @[L11cdbe..L11cdda] goto L11cdde;
}
procedure `boolean` `x`(`kotlinx.coroutines.flow.internal.d` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/flow/internal/d;.x:(I)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L11cd6c.  @monitorenter v1
  #L11cd6e.  call temp:= `getLastReplayedLocked`(v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getLastReplayedLocked:()Ljava/lang/Object;` @kind virtual;
  #L11cd74.  v0:= temp @kind object;
  #L11cd76.  v0:= (`java.lang.Number`) v0 @kind object;
  #L11cd7a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11cd80.  v0:= temp;
  #L11cd82.  v0:= v0 + v2 @kind int;
  #L11cd84.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11cd8a.  v2:= temp @kind object;
  #L11cd8c.  call temp:= `tryEmit`(v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @kind virtual;
  #L11cd92.  v2:= temp;
  #L11cd94.  @monitorexit v1
  #L11cd96.  return v2;
  #L11cd98.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11cd9a.  @monitorexit v1
  #L11cd9c.  throw v2;
  catch `java.lang.Throwable` @[L11cd6e..L11cd94] goto L11cd98;
}
