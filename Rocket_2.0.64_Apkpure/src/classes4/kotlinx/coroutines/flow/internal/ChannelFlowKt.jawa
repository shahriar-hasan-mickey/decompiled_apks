record `kotlinx.coroutines.flow.internal.ChannelFlowKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlinx.coroutines.flow.FlowCollector` `a`(`kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/FlowCollector;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L119ff4.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind boolean;
  #L119ff8.  if v0 == 0 then goto L11a000;
  #L119ffc.  v0:= 1I;
  #L119ffe.  goto L11a004;
  #L11a000.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.flow.internal.NopCollector` @kind boolean;
  #L11a004.  if v0 == 0 then goto L11a00a;
  #L11a008.  goto L11a016;
  #L11a00a.  v0:= new `kotlinx.coroutines.flow.internal.e`;
  #L11a00e.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/e;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L11a014.  v1:= v0 @kind object;
  #L11a016.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.FlowCollector` `access$withUndispatchedContextCollector`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.access$withUndispatchedContextCollector:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/FlowCollector;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L119fd8.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/FlowCollector;` @kind static;
  #L119fde.  v0:= temp @kind object;
  #L119fe0.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `asChannelFlow`(`kotlinx.coroutines.flow.Flow` v8 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.asChannelFlow:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a028.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind boolean;
  #L11a02c.  if v0 == 0 then goto L11a038;
  #L11a030.  v0:= v8 @kind object;
  #L11a032.  v0:= (`kotlinx.coroutines.flow.internal.ChannelFlow`) v0 @kind object;
  #L11a036.  goto L11a03a;
  #L11a038.  v0:= 0I;
  #L11a03a.  if v0 != 0 then goto L11a058;
  #L11a03e.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl`;
  #L11a042.  v3:= 0I;
  #L11a044.  v4:= 0I;
  #L11a046.  v5:= 0I;
  #L11a048.  v6:= 14I;
  #L11a04c.  v7:= 0I;
  #L11a04e.  v1:= v0 @kind object;
  #L11a050.  v2:= v8 @kind object;
  #L11a052.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L11a058.  return v0 @kind object;
}
procedure `java.lang.Object` `withContextUndispatched`(`kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `kotlin.jvm.functions.Function2` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.withContextUndispatched:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L119f70.  call temp:= `updateThreadContext`(v2, v4) @signature `Lkotlinx/coroutines/internal/ThreadContextKt;.updateThreadContext:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L119f76.  v4:= temp @kind object;
  #L119f78.  v0:= new `kotlinx.coroutines.flow.internal.c`;
  #L119f7c.  call `<init>`(v0, v6, v2) @signature `Lkotlinx/coroutines/flow/internal/c;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L119f82.  v1:= 2I;
  #L119f84.  call temp:= `beforeCheckcastToFunctionOfArity`(v5, v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.beforeCheckcastToFunctionOfArity:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L119f8a.  v5:= temp @kind object;
  #L119f8c.  v5:= (`kotlin.jvm.functions.Function2`) v5 @kind object;
  #L119f90.  call temp:= `invoke`(v5, v3, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L119f96.  v3:= temp @kind object;
  #L119f98.  call `restoreThreadContext`(v2, v4) @signature `Lkotlinx/coroutines/internal/ThreadContextKt;.restoreThreadContext:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind static;
  #L119f9e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L119fa4.  v2:= temp @kind object;
  #L119fa6.  if v3 != v2 then goto L119fb0;
  #L119faa.  call `probeCoroutineSuspended`(v6) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L119fb0.  return v3 @kind object;
  #L119fb2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119fb4.  call `restoreThreadContext`(v2, v4) @signature `Lkotlinx/coroutines/internal/ThreadContextKt;.restoreThreadContext:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind static;
  #L119fba.  throw v3;
  catch `java.lang.Throwable` @[L119f78..L119f98] goto L119fb2;
}
procedure `java.lang.Object` `withContextUndispatched$default`(`kotlin.coroutines.CoroutineContext` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.withContextUndispatched$default:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L119f44.  v5:= v5 ^& 4;
  #L119f48.  if v5 == 0 then goto L119f54;
  #L119f4c.  call temp:= `threadContextElements`(v0) @signature `Lkotlinx/coroutines/internal/ThreadContextKt;.threadContextElements:(Lkotlin/coroutines/CoroutineContext;)Ljava/lang/Object;` @kind static;
  #L119f52.  v2:= temp @kind object;
  #L119f54.  call temp:= `withContextUndispatched`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.withContextUndispatched:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L119f5a.  v0:= temp @kind object;
  #L119f5c.  return v0 @kind object;
}
