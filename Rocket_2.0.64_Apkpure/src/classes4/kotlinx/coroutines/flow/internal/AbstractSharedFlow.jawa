record `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @AccessFlag PRIVATE;
  `kotlinx.coroutines.flow.internal.d` `kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L119c30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L119c36.  return @kind void;
}
procedure `int` `access$getNCollectors`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L119abc.  v0:= v0.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int`;
  #L119ac0.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `access$getSlots`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L119c00.  v0:= v0.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] @kind object;
  #L119c04.  return v0 @kind object;
}
procedure `void` `getSlots$annotations`() @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots$annotations:()V` @AccessFlag PROTECTED_STATIC_SYNTHETIC {
    temp;

  #L119d24.  return @kind void;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `allocateSlot`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v4 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119b34.  @monitorenter v4
  #L119b36.  call temp:= `getSlots`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L119b3c.  v0:= temp @kind object;
  #L119b3e.  v1:= 2I;
  #L119b40.  if v0 != 0 then goto L119b52;
  #L119b44.  call temp:= `createSlotArray`(v4, v1) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L119b4a.  v0:= temp @kind object;
  #L119b4c.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] := v0 @kind object;
  #L119b50.  goto L119b86;
  #L119b52.  call temp:= `getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L119b58.  v2:= temp;
  #L119b5a.  v3:= length @variable v0;
  #L119b5c.  if v2 < v3 then goto L119b86;
  #L119b60.  v2:= length @variable v0;
  #L119b62.  v2:= v2 * 2;
  #L119b66.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L119b6c.  v0:= temp @kind object;
  #L119b6e.  v1:= "copyOf(this, newSize)" @kind object;
  #L119b72.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L119b78.  v1:= v0 @kind object;
  #L119b7a.  v1:= (`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[]) v1 @kind object;
  #L119b7e.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] := v1 @kind object;
  #L119b82.  v0:= (`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[]) v0 @kind object;
  #L119b86.  v1:= v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int`;
  #L119b8a.  v2:= v0[v1] @kind object;
  #L119b8e.  if v2 != 0 then goto L119b9e;
  #L119b92.  call temp:= `createSlot`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L119b98.  v2:= temp @kind object;
  #L119b9a.  v0[v1]:= v2 @kind object;
  #L119b9e.  v1:= v1 + 1;
  #L119ba2.  v3:= length @variable v0;
  #L119ba4.  if v1 < v3 then goto L119baa;
  #L119ba8.  v1:= 0I;
  #L119baa.  call temp:= `allocateLocked`(v2, v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.allocateLocked:(Ljava/lang/Object;)Z` @kind virtual;
  #L119bb0.  v3:= temp;
  #L119bb2.  if v3 == 0 then goto L119b8a;
  #L119bb6.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int` := v1;
  #L119bba.  call temp:= `getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L119bc0.  v0:= temp;
  #L119bc2.  v1:= 1I;
  #L119bc4.  v0:= v0 + v1 @kind int;
  #L119bc6.  v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int` := v0;
  #L119bca.  v0:= v4.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.internal.d` @kind object;
  #L119bce.  @monitorexit v4
  #L119bd0.  if v0 != 0 then goto L119bd6;
  #L119bd4.  goto L119bdc;
  #L119bd6.  call temp:= `x`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/d;.x:(I)Z` @kind virtual;
  #L119bdc.  return v2 @kind object;
  #L119bde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119be0.  @monitorexit v4
  #L119be2.  throw v0;
  catch `java.lang.Throwable` @[L119b36..L119bce] goto L119bde;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`() @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`int` v0 ) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `forEachSlotLocked`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v4 @kind this, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.forEachSlotLocked:(Lkotlin/jvm/functions/Function1;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119c48.  call temp:= `access$getNCollectors`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L119c4e.  v0:= temp;
  #L119c50.  if v0 != 0 then goto L119c56;
  #L119c54.  return @kind void;
  #L119c56.  call temp:= `access$getSlots`(v4) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L119c5c.  v0:= temp @kind object;
  #L119c5e.  if v0 != 0 then goto L119c64;
  #L119c62.  goto L119c80;
  #L119c64.  v1:= 0I;
  #L119c66.  v2:= length @variable v0;
  #L119c68.  if v1 >= v2 then goto L119c80;
  #L119c6c.  v3:= v0[v1] @kind object;
  #L119c70.  v1:= v1 + 1;
  #L119c74.  if v3 == 0 then goto L119c68;
  #L119c78.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L119c7e.  goto L119c68;
  #L119c80.  return @kind void;
}
procedure `void` `freeSlot`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v6 @kind this, `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` v7 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L119c94.  @monitorenter v6
  #L119c96.  call temp:= `getNCollectors`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L119c9c.  v0:= temp;
  #L119c9e.  v1:= -1I;
  #L119ca0.  v0:= v0 + v1 @kind int;
  #L119ca2.  v6.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int` := v0;
  #L119ca6.  v0:= v6.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.internal.d` @kind object;
  #L119caa.  call temp:= `getNCollectors`(v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L119cb0.  v2:= temp;
  #L119cb2.  v3:= 0I;
  #L119cb4.  if v2 != 0 then goto L119cbc;
  #L119cb8.  v6.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.c` @type ^`int` := v3;
  #L119cbc.  call temp:= `freeLocked`(v7, v6) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L119cc2.  v7:= temp @kind object;
  #L119cc4.  @monitorexit v6
  #L119cc6.  v2:= length @variable v7;
  #L119cc8.  if v3 >= v2 then goto L119cf2;
  #L119ccc.  v4:= v7[v3] @kind object;
  #L119cd0.  v3:= v3 + 1;
  #L119cd4.  if v4 != 0 then goto L119cda;
  #L119cd8.  goto L119cc8;
  #L119cda.  v5:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L119cde.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L119ce2.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L119ce8.  v5:= temp @kind object;
  #L119cea.  call `resumeWith`(v4, v5) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L119cf0.  goto L119cc8;
  #L119cf2.  if v0 != 0 then goto L119cf8;
  #L119cf6.  goto L119cfe;
  #L119cf8.  call temp:= `x`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/d;.x:(I)Z` @kind virtual;
  #L119cfe.  return @kind void;
  #L119d00.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119d02.  @monitorexit v6
  #L119d04.  throw v7;
  catch `java.lang.Throwable` @[L119c96..L119cc4] goto L119d00;
}
procedure `int` `getNCollectors`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L119ad4.  v0:= v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.b` @type ^`int`;
  #L119ad8.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `getSlots`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSlots:()[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L119c18.  v0:= v1.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.a` @type ^`kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] @kind object;
  #L119c1c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.StateFlow` `getSubscriptionCount`(`kotlinx.coroutines.flow.internal.AbstractSharedFlow` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L119aec.  @monitorenter v2
  #L119aee.  v0:= v2.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.internal.d` @kind object;
  #L119af2.  if v0 != 0 then goto L119b0c;
  #L119af6.  v0:= new `kotlinx.coroutines.flow.internal.d`;
  #L119afa.  call temp:= `getNCollectors`(v2) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L119b00.  v1:= temp;
  #L119b02.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/d;.<init>:(I)V` @kind direct;
  #L119b08.  v2.`kotlinx.coroutines.flow.internal.AbstractSharedFlow.d` @type ^`kotlinx.coroutines.flow.internal.d` := v0 @kind object;
  #L119b0c.  @monitorexit v2
  #L119b0e.  return v0 @kind object;
  #L119b10.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119b12.  @monitorexit v2
  #L119b14.  throw v0;
  catch `java.lang.Throwable` @[L119aee..L119b0c] goto L119b10;
}
