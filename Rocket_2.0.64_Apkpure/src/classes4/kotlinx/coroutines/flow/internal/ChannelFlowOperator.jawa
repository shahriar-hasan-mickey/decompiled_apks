record `kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11a80c.  call `<init>`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a812.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L11a816.  return @kind void;
}
procedure `java.lang.Object` `access$collectWithContextUndispatched`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind object, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.access$collectWithContextUndispatched:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L11a634.  call temp:= `d`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L11a63a.  v0:= temp @kind object;
  #L11a63c.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v4 @kind object, `kotlinx.coroutines.flow.FlowCollector` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.b:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a650.  v0:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11a654.  v1:= -3I;
  #L11a656.  if v0 != v1 then goto L11a6d2;
  #L11a65a.  call temp:= `getContext`(v6) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11a660.  v0:= temp @kind object;
  #L11a662.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11a666.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11a66c.  v1:= temp @kind object;
  #L11a66e.  call temp:= `areEqual`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11a674.  v2:= temp;
  #L11a676.  if v2 == 0 then goto L11a696;
  #L11a67a.  call temp:= `flowCollect`(v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a680.  v4:= temp @kind object;
  #L11a682.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a688.  v5:= temp @kind object;
  #L11a68a.  if v4 != v5 then goto L11a690;
  #L11a68e.  return v4 @kind object;
  #L11a690.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a694.  return v4 @kind object;
  #L11a696.  v2:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L11a69a.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11a6a0.  v3:= temp @kind object;
  #L11a6a2.  call temp:= `get`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11a6a8.  v0:= temp @kind object;
  #L11a6aa.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11a6b0.  v0:= temp;
  #L11a6b2.  if v0 == 0 then goto L11a6d2;
  #L11a6b6.  call temp:= `d`(v4, v5, v1, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L11a6bc.  v4:= temp @kind object;
  #L11a6be.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a6c4.  v5:= temp @kind object;
  #L11a6c6.  if v4 != v5 then goto L11a6cc;
  #L11a6ca.  return v4 @kind object;
  #L11a6cc.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a6d0.  return v4 @kind object;
  #L11a6d2.  call temp:= `collect`(v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind super;
  #L11a6d8.  v4:= temp @kind object;
  #L11a6da.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a6e0.  v5:= temp @kind object;
  #L11a6e2.  if v4 != v5 then goto L11a6e8;
  #L11a6e6.  return v4 @kind object;
  #L11a6e8.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a6ec.  return v4 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v1 @kind object, `kotlinx.coroutines.channels.ProducerScope` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.c:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L11a71c.  v0:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L11a720.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L11a726.  call temp:= `flowCollect`(v1, v0, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a72c.  v1:= temp @kind object;
  #L11a72e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a734.  v2:= temp @kind object;
  #L11a736.  if v1 != v2 then goto L11a73c;
  #L11a73a.  return v1 @kind object;
  #L11a73c.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a740.  return v1 @kind object;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v8 @kind this, `kotlinx.coroutines.flow.FlowCollector` v9 @kind object, `kotlin.coroutines.CoroutineContext` v10 @kind object, `kotlin.coroutines.Continuation` v11 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.d:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a770.  call temp:= `getContext`(v11) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11a776.  v0:= temp @kind object;
  #L11a778.  call temp:= `access$withUndispatchedContextCollector`(v9, v0) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.access$withUndispatchedContextCollector:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/FlowCollector;` @kind static;
  #L11a77e.  v2:= temp @kind object;
  #L11a780.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`;
  #L11a784.  v9:= 0I;
  #L11a786.  call `<init>`(v4, v8, v9) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a78c.  v3:= 0I;
  #L11a78e.  v6:= 4I;
  #L11a790.  v7:= 0I;
  #L11a792.  v1:= v10 @kind object;
  #L11a794.  v5:= v11 @kind object;
  #L11a796.  call temp:= `withContextUndispatched$default`(v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowKt;.withContextUndispatched$default:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L11a79c.  v9:= temp @kind object;
  #L11a79e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a7a4.  v10:= temp @kind object;
  #L11a7a6.  if v9 != v10 then goto L11a7ac;
  #L11a7aa.  return v9 @kind object;
  #L11a7ac.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a7b0.  return v9 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L11a700.  call temp:= `b`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.b:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11a706.  v1:= temp @kind object;
  #L11a708.  return v1 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v0 @kind this, `kotlinx.coroutines.channels.ProducerScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;

  #L11a754.  call temp:= `c`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.c:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11a75a.  v1:= temp @kind object;
  #L11a75c.  return v1 @kind object;
}
procedure `java.lang.Object` `flowCollect`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a7c4.  v0:= new `java.lang.StringBuilder`;
  #L11a7c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a7ce.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a7d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a7d8.  v1:= " -> " @kind object;
  #L11a7dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a7e2.  call temp:= `toString`(v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.toString:()Ljava/lang/String;` @kind super;
  #L11a7e8.  v1:= temp @kind object;
  #L11a7ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a7f0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a7f6.  v0:= temp @kind object;
  #L11a7f8.  return v0 @kind object;
}
