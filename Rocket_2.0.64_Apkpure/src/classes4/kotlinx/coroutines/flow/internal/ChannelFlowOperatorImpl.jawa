record `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11a5e0.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a5e6.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object, `int` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L11a5f8.  v6:= v5 ^& 2;
  #L11a5fc.  if v6 == 0 then goto L11a604;
  #L11a600.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L11a604.  v6:= v5 ^& 4;
  #L11a608.  if v6 == 0 then goto L11a60e;
  #L11a60c.  v3:= -3I;
  #L11a60e.  v5:= v5 ^& 8;
  #L11a612.  if v5 == 0 then goto L11a61a;
  #L11a616.  v4:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11a61a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a620.  return @kind void;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L11a5c0.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl`;
  #L11a5c4.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a5c8.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a5ce.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `dropChannelOperators`(`kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a5a8.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a5ac.  return v0 @kind object;
}
procedure `java.lang.Object` `flowCollect`(`kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L11a578.  v0:= v1.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a57c.  call temp:= `collect`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11a582.  v2:= temp @kind object;
  #L11a584.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a58a.  v3:= temp @kind object;
  #L11a58c.  if v2 != v3 then goto L11a592;
  #L11a590.  return v2 @kind object;
  #L11a592.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a596.  return v2 @kind object;
}
