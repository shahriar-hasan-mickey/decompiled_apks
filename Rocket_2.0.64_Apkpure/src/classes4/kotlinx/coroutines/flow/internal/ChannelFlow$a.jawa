record `kotlinx.coroutines.flow.internal.ChannelFlow$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.ChannelFlow` `kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlinx.coroutines.flow.internal.ChannelFlow` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L119e24.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L119e28.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` := v2 @kind object;
  #L119e2c.  v1:= 2I;
  #L119e2e.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L119e34.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L119dfc.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlow$a`;
  #L119e00.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L119e04.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind object;
  #L119e08.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/flow/internal/ChannelFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L119e0e.  v0.`kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @type ^`java.lang.Object` := v4 @kind object;
  #L119e12.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L119d38.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L119d3c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L119d40.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L119d46.  v1:= temp @kind object;
  #L119d48.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L119d5c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L119d62.  v1:= temp @kind object;
  #L119d64.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlow$a`) v1 @kind object;
  #L119d68.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L119d6c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L119d72.  v1:= temp @kind object;
  #L119d74.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlow$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119d88.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L119d8e.  v0:= temp @kind object;
  #L119d90.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @type ^`int`;
  #L119d94.  v2:= 1I;
  #L119d96.  if v1 == 0 then goto L119db6;
  #L119d9a.  if v1 != v2 then goto L119da6;
  #L119d9e.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L119da4.  goto L119de6;
  #L119da6.  v5:= new `java.lang.IllegalStateException`;
  #L119daa.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L119dae.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119db4.  throw v5;
  #L119db6.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L119dbc.  v5:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.b` @type ^`java.lang.Object` @kind object;
  #L119dc0.  v5:= (`kotlinx.coroutines.CoroutineScope`) v5 @kind object;
  #L119dc4.  v1:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L119dc8.  v3:= v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.d` @type ^`kotlinx.coroutines.flow.internal.ChannelFlow` @kind object;
  #L119dcc.  call temp:= `produceImpl`(v3, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind virtual;
  #L119dd2.  v5:= temp @kind object;
  #L119dd4.  v4.`kotlinx.coroutines.flow.internal.ChannelFlow$a.a` @type ^`int` := v2;
  #L119dd8.  call temp:= `emitAll`(v1, v5, v4) @signature `Lkotlinx/coroutines/flow/FlowKt;.emitAll:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L119dde.  v5:= temp @kind object;
  #L119de0.  if v5 != v0 then goto L119de6;
  #L119de4.  return v0 @kind object;
  #L119de6.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L119dea.  return v5 @kind object;
}
