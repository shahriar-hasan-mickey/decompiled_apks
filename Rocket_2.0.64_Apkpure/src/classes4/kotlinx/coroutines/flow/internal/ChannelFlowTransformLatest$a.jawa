record `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.b` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest` `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` v0 @kind this, `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest` v1 @kind object, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11abb0.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest` := v1 @kind object;
  #L11abb4.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.d` @type ^`kotlinx.coroutines.flow.FlowCollector` := v2 @kind object;
  #L11abb8.  v1:= 2I;
  #L11abba.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L11abc0.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11ab88.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a`;
  #L11ab8c.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest` @kind object;
  #L11ab90.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.d` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11ab94.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11ab9a.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.b` @type ^`java.lang.Object` := v4 @kind object;
  #L11ab9e.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11aab4.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L11aab8.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L11aabc.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11aac2.  v1:= temp @kind object;
  #L11aac4.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L11aad8.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11aade.  v1:= temp @kind object;
  #L11aae0.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a`) v1 @kind object;
  #L11aae4.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11aae8.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11aaee.  v1:= temp @kind object;
  #L11aaf0.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11ab04.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11ab0a.  v0:= temp @kind object;
  #L11ab0c.  v1:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.a` @type ^`int`;
  #L11ab10.  v2:= 1I;
  #L11ab12.  if v1 == 0 then goto L11ab32;
  #L11ab16.  if v1 != v2 then goto L11ab22;
  #L11ab1a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11ab20.  goto L11ab72;
  #L11ab22.  v8:= new `java.lang.IllegalStateException`;
  #L11ab26.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11ab2a.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ab30.  throw v8;
  #L11ab32.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11ab38.  v8:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.b` @type ^`java.lang.Object` @kind object;
  #L11ab3c.  v8:= (`kotlinx.coroutines.CoroutineScope`) v8 @kind object;
  #L11ab40.  v1:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L11ab44.  call `<init>`(v1) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L11ab4a.  v3:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest` @kind object;
  #L11ab4e.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator.flow` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11ab52.  v5:= new `kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a$a`;
  #L11ab56.  v6:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.d` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11ab5a.  call `<init>`(v5, v1, v8, v3, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest$a$a;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/flow/internal/ChannelFlowTransformLatest;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L11ab60.  v7.`kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$a.a` @type ^`int` := v2;
  #L11ab64.  call temp:= `collect`(v4, v5, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11ab6a.  v8:= temp @kind object;
  #L11ab6c.  if v8 != v0 then goto L11ab72;
  #L11ab70.  return v0 @kind object;
  #L11ab72.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11ab76.  return v8 @kind object;
}
