record `kotlinx.coroutines.flow.internal.SafeCollector` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.jvm.internal.ContinuationImpl` @kind class, `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.a` @AccessFlag PRIVATE;
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.internal.SafeCollector.b` @AccessFlag PRIVATE;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.internal.SafeCollector.collector` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11cb90.  v0:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlinx.coroutines.flow.internal.b` @kind object;
  #L11cb94.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L11cb98.  call `<init>`(v2, v0, v1) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L11cb9e.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.FlowCollector` := v3 @kind object;
  #L11cba2.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` := v4 @kind object;
  #L11cba6.  v3:= 0I;
  #L11cba8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11cbae.  v3:= temp @kind object;
  #L11cbb0.  v0:= `@@kotlinx.coroutines.flow.internal.SafeCollector$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector$a` @kind object;
  #L11cbb4.  call temp:= `fold`(v4, v3, v0) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L11cbba.  v3:= temp @kind object;
  #L11cbbc.  v3:= (`java.lang.Number`) v3 @kind object;
  #L11cbc0.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11cbc6.  v3:= temp;
  #L11cbc8.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @type ^`int` := v3;
  #L11cbcc.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L11cbe0.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` @kind boolean;
  #L11cbe4.  if v0 == 0 then goto L11cbf2;
  #L11cbe8.  v3:= (`kotlinx.coroutines.flow.internal.DownstreamExceptionContext`) v3 @kind object;
  #L11cbec.  call `c`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.c:(Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;Ljava/lang/Object;)V` @kind direct;
  #L11cbf2.  call `checkContext`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.checkContext:(Lkotlinx/coroutines/flow/internal/SafeCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L11cbf8.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlin.coroutines.Continuation` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.b:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L11ca80.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11ca86.  v0:= temp @kind object;
  #L11ca88.  call `ensureActive`(v0) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L11ca8e.  v1:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11ca92.  if v1 == v0 then goto L11caa0;
  #L11ca96.  call `a`(v2, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind direct;
  #L11ca9c.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v0 @kind object;
  #L11caa0.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L11caa4.  call temp:= `access$getEmitFun$p`() @signature `Lkotlinx/coroutines/flow/internal/SafeCollectorKt;.access$getEmitFun$p:()Lkotlin/jvm/functions/Function3;` @kind static;
  #L11caaa.  v3:= temp @kind object;
  #L11caac.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L11cab0.  call temp:= `invoke`(v3, v0, v4, v2) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L11cab6.  v3:= temp @kind object;
  #L11cab8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11cabe.  v4:= temp @kind object;
  #L11cac0.  call temp:= `areEqual`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L11cac6.  v4:= temp;
  #L11cac8.  if v4 != 0 then goto L11cad2;
  #L11cacc.  v4:= 0I;
  #L11cace.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` := v4 @kind object;
  #L11cad2.  return v3 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.flow.internal.SafeCollector` v3 @kind this, `kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.c:(Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11cc0c.  v0:= new `java.lang.IllegalStateException`;
  #L11cc10.  v1:= new `java.lang.StringBuilder`;
  #L11cc14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11cc1a.  v2:= "\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception " @kind object;
  #L11cc1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cc24.  v4:= v4.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.e` @type ^`java.lang.Throwable` @kind object;
  #L11cc28.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cc2e.  v4:= ", but then emission attempt of value '" @kind object;
  #L11cc32.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cc38.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cc3e.  v4:= "' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            " @kind object;
  #L11cc42.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cc48.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11cc4e.  v4:= temp @kind object;
  #L11cc50.  call temp:= `trimIndent`(v4) @signature `Lkotlin/text/StringsKt;.trimIndent:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L11cc56.  v4:= temp @kind object;
  #L11cc58.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11cc5e.  v4:= temp @kind object;
  #L11cc60.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc66.  throw v0;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ca1c.  call temp:= `b`(v1, v3, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.b:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L11ca22.  v2:= temp @kind object;
  #L11ca24.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11ca2a.  v0:= temp @kind object;
  #L11ca2c.  if v2 != v0 then goto L11ca36;
  #L11ca30.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L11ca36.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11ca3c.  v3:= temp @kind object;
  #L11ca3e.  if v2 != v3 then goto L11ca44;
  #L11ca42.  return v2 @kind object;
  #L11ca44.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11ca48.  return v2 @kind object;
  #L11ca4a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11ca4c.  v0:= new `kotlinx.coroutines.flow.internal.DownstreamExceptionContext`;
  #L11ca50.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11ca56.  v3:= temp @kind object;
  #L11ca58.  call `<init>`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L11ca5e.  v1.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v0 @kind object;
  #L11ca62.  throw v2;
  catch `java.lang.Throwable` @[L11ca1c..L11ca24] goto L11ca4a;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cb68.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L11cb6c.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L11cb70.  if v1 == 0 then goto L11cb7a;
  #L11cb74.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L11cb78.  goto L11cb7c;
  #L11cb7a.  v0:= 0I;
  #L11cb7c.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cb48.  v0:= v1.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11cb4c.  if v0 != 0 then goto L11cb54;
  #L11cb50.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L11cb54.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cb34.  v0:= 0I;
  #L11cb36.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.SafeCollector` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11cae4.  call temp:= `exceptionOrNull-impl`(v4) @signature `Lkotlin/Result;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L11caea.  v0:= temp @kind object;
  #L11caec.  if v0 != 0 then goto L11caf2;
  #L11caf0.  goto L11cb08;
  #L11caf2.  v1:= new `kotlinx.coroutines.flow.internal.DownstreamExceptionContext`;
  #L11caf6.  call temp:= `getContext`(v3) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L11cafc.  v2:= temp @kind object;
  #L11cafe.  call `<init>`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L11cb04.  v3.`kotlinx.coroutines.flow.internal.SafeCollector.a` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L11cb08.  v0:= v3.`kotlinx.coroutines.flow.internal.SafeCollector.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L11cb0c.  if v0 != 0 then goto L11cb12;
  #L11cb10.  goto L11cb18;
  #L11cb12.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L11cb18.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11cb1e.  v4:= temp @kind object;
  #L11cb20.  return v4 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlinx.coroutines.flow.internal.SafeCollector` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @AccessFlag PUBLIC {
    temp;

  #L11cc78.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.releaseIntercepted:()V` @kind super;
  #L11cc7e.  return @kind void;
}
