record `kotlinx.coroutines.flow.internal.ChannelFlowMerge` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 , `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11a410.  call `<init>`(v0, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a416.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L11a41a.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int` := v2;
  #L11a41e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v6 @kind this, `kotlinx.coroutines.flow.Flow` v7 @kind object, `int` v8 , `kotlin.coroutines.CoroutineContext` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11a430.  v13:= v12 ^& 4;
  #L11a434.  if v13 == 0 then goto L11a43c;
  #L11a438.  v9:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L11a43c.  v3:= v9 @kind object;
  #L11a43e.  v9:= v12 ^& 8;
  #L11a442.  if v9 == 0 then goto L11a44c;
  #L11a446.  v10:= -2I;
  #L11a448.  v4:= -2I;
  #L11a44a.  goto L11a44e;
  #L11a44c.  v4:= v10;
  #L11a44e.  v9:= v12 ^& 16;
  #L11a452.  if v9 == 0 then goto L11a45a;
  #L11a456.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L11a45a.  v5:= v11 @kind object;
  #L11a45c.  v0:= v6 @kind object;
  #L11a45e.  v1:= v7 @kind object;
  #L11a460.  v2:= v8;
  #L11a462.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a468.  return @kind void;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L11a38c.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L11a390.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11a396.  v0:= temp @kind object;
  #L11a398.  v1:= "concurrency=" @kind object;
  #L11a39c.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11a3a2.  v0:= temp @kind object;
  #L11a3a4.  return v0 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v5 @kind this, `kotlinx.coroutines.channels.ProducerScope` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a31c.  v0:= v5.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L11a320.  v1:= 0I;
  #L11a322.  v2:= 2I;
  #L11a324.  v3:= 0I;
  #L11a326.  call temp:= `Semaphore$default`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/sync/SemaphoreKt;.Semaphore$default:(IIILjava/lang/Object;)Lkotlinx/coroutines/sync/Semaphore;` @kind static;
  #L11a32c.  v0:= temp @kind object;
  #L11a32e.  v1:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L11a332.  call `<init>`(v1, v6) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L11a338.  call temp:= `getContext`(v7) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11a33e.  v2:= temp @kind object;
  #L11a340.  v3:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L11a344.  call temp:= `get`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11a34a.  v2:= temp @kind object;
  #L11a34c.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L11a350.  v3:= v5.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a354.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a`;
  #L11a358.  call `<init>`(v4, v2, v0, v6, v1) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a;.<init>:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/sync/Semaphore;Lkotlinx/coroutines/channels/ProducerScope;Lkotlinx/coroutines/flow/internal/SendingCollector;)V` @kind direct;
  #L11a35e.  call temp:= `collect`(v3, v4, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11a364.  v6:= temp @kind object;
  #L11a366.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a36c.  v7:= temp @kind object;
  #L11a36e.  if v6 != v7 then goto L11a374;
  #L11a372.  return v6 @kind object;
  #L11a374.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a378.  return v6 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v7 @kind this, `kotlin.coroutines.CoroutineContext` v8 @kind object, `int` v9 , `kotlinx.coroutines.channels.BufferOverflow` v10 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a3e4.  v6:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge`;
  #L11a3e8.  v1:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a3ec.  v2:= v7.`kotlinx.coroutines.flow.internal.ChannelFlowMerge.b` @type ^`int`;
  #L11a3f0.  v0:= v6 @kind object;
  #L11a3f2.  v3:= v8 @kind object;
  #L11a3f4.  v4:= v9;
  #L11a3f6.  v5:= v10 @kind object;
  #L11a3f8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.<init>:(Lkotlinx/coroutines/flow/Flow;ILkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L11a3fe.  return v6 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge` v3 @kind this, `kotlinx.coroutines.CoroutineScope` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11a3b8.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11a3bc.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L11a3c0.  call temp:= `getCollectToFun$kotlinx_coroutines_core`(v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.getCollectToFun$kotlinx_coroutines_core:()Lkotlin/jvm/functions/Function2;` @kind virtual;
  #L11a3c6.  v2:= temp @kind object;
  #L11a3c8.  call temp:= `produce`(v4, v0, v1, v2) @signature `Lkotlinx/coroutines/channels/ProduceKt;.produce:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/CoroutineContext;ILkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind static;
  #L11a3ce.  v4:= temp @kind object;
  #L11a3d0.  return v4 @kind object;
}
