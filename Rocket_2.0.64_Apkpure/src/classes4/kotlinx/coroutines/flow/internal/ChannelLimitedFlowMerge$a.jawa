record `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @AccessFlag ;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11b020.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L11b024.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v2 @kind object;
  #L11b028.  v1:= 2I;
  #L11b02a.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L11b030.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11affc.  v3:= new `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a`;
  #L11b000.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11b004.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L11b008.  call `<init>`(v3, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11b00e.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11af48.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L11af4c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L11af50.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11af56.  v1:= temp @kind object;
  #L11af58.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L11af6c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11af72.  v1:= temp @kind object;
  #L11af74.  v1:= (`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a`) v1 @kind object;
  #L11af78.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11af7c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11af82.  v1:= temp @kind object;
  #L11af84.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11af98.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11af9e.  v0:= temp @kind object;
  #L11afa0.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @type ^`int`;
  #L11afa4.  v2:= 1I;
  #L11afa6.  if v1 == 0 then goto L11afc6;
  #L11afaa.  if v1 != v2 then goto L11afb6;
  #L11afae.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11afb4.  goto L11afe6;
  #L11afb6.  v4:= new `java.lang.IllegalStateException`;
  #L11afba.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11afbe.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11afc4.  throw v4;
  #L11afc6.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11afcc.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11afd0.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L11afd4.  v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$a.a` @type ^`int` := v2;
  #L11afd8.  call temp:= `collect`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11afde.  v4:= temp @kind object;
  #L11afe0.  if v4 != v0 then goto L11afe6;
  #L11afe4.  return v0 @kind object;
  #L11afe6.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11afea.  return v4 @kind object;
}
