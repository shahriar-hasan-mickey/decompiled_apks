record `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.flow.internal.SafeCollector` `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v0 @kind this, `kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.<init>:(Lkotlinx/coroutines/flow/internal/SafeCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11c838.  v0.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector` := v1 @kind object;
  #L11c83c.  v1:= 2I;
  #L11c83e.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L11c844.  return @kind void;
}
procedure `java.lang.Integer` `a`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v3 @kind this, `int` v4 , `kotlin.coroutines.CoroutineContext$Element` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.a:(ILkotlin/coroutines/CoroutineContext$Element;)Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11c74c.  call temp:= `getKey`(v5) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L11c752.  v0:= temp @kind object;
  #L11c754.  v1:= v3.`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a.a` @type ^`kotlinx.coroutines.flow.internal.SafeCollector` @kind object;
  #L11c758.  v1:= v1.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c75c.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11c762.  v1:= temp @kind object;
  #L11c764.  v2:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L11c768.  if v0 == v2 then goto L11c784;
  #L11c76c.  if v5 == v1 then goto L11c776;
  #L11c770.  v4:= -2147483648I;
  #L11c774.  goto L11c77a;
  #L11c776.  v4:= v4 + 1;
  #L11c77a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11c780.  v4:= temp @kind object;
  #L11c782.  return v4 @kind object;
  #L11c784.  v1:= (`kotlinx.coroutines.Job`) v1 @kind object;
  #L11c788.  v5:= (`kotlinx.coroutines.Job`) v5 @kind object;
  #L11c78c.  call temp:= `transitiveCoroutineParent`(v5, v1) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.transitiveCoroutineParent:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @kind static;
  #L11c792.  v5:= temp @kind object;
  #L11c794.  if v5 != v1 then goto L11c7ac;
  #L11c798.  if v1 != 0 then goto L11c79e;
  #L11c79c.  goto L11c7a2;
  #L11c79e.  v4:= v4 + 1;
  #L11c7a2.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11c7a8.  v4:= temp @kind object;
  #L11c7aa.  return v4 @kind object;
  #L11c7ac.  v4:= new `java.lang.IllegalStateException`;
  #L11c7b0.  v0:= new `java.lang.StringBuilder`;
  #L11c7b4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c7ba.  v2:= "Flow invariant is violated:\n\t\tEmission from another coroutine is detected.\n\t\tChild of " @kind object;
  #L11c7be.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c7c4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c7ca.  v5:= ", expected child of " @kind object;
  #L11c7ce.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c7d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c7da.  v5:= ".\n\t\tFlowCollector is not thread-safe and concurrent emissions are prohibited.\n\t\tTo mitigate this restriction please use 'channelFlow' builder instead of 'flow'" @kind object;
  #L11c7de.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c7e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c7ea.  v5:= temp @kind object;
  #L11c7ec.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c7f2.  v5:= temp @kind object;
  #L11c7f4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c7fa.  throw v4;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11c80c.  v1:= (`java.lang.Number`) v1 @kind object;
  #L11c810.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11c816.  v1:= temp;
  #L11c818.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L11c81c.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.a:(ILkotlin/coroutines/CoroutineContext$Element;)Ljava/lang/Integer;` @kind virtual;
  #L11c822.  v1:= temp @kind object;
  #L11c824.  return v1 @kind object;
}
