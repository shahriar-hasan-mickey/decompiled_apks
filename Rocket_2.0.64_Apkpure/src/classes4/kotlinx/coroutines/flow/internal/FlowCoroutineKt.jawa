record `kotlinx.coroutines.flow.internal.FlowCoroutineKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `flowScope`(`kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.flowScope:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L11c384.  v0:= new `kotlinx.coroutines.flow.internal.a`;
  #L11c388.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11c38e.  v1:= temp @kind object;
  #L11c390.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11c396.  call temp:= `startUndispatchedOrReturn`(v0, v0, v2) @signature `Lkotlinx/coroutines/intrinsics/UndispatchedKt;.startUndispatchedOrReturn:(Lkotlinx/coroutines/internal/ScopeCoroutine;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L11c39c.  v2:= temp @kind object;
  #L11c39e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11c3a4.  v0:= temp @kind object;
  #L11c3a6.  if v2 != v0 then goto L11c3b0;
  #L11c3aa.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L11c3b0.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `scopedFlow`(`kotlin.jvm.functions.Function3` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt;.scopedFlow:(Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L11c3c4.  v0:= new `kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1`;
  #L11c3c8.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function3;)V` @kind direct;
  #L11c3ce.  return v0 @kind object;
}
