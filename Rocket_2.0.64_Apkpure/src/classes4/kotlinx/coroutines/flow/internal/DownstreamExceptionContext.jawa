record `kotlinx.coroutines.flow.internal.DownstreamExceptionContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
  `java.lang.Throwable` `kotlinx.coroutines.flow.internal.DownstreamExceptionContext.e` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v0 @kind this, `java.lang.Throwable` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11c204.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c20a.  v0.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L11c20e.  v0.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L11c212.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c184.  v0:= v1.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c188.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L11c18e.  v2:= temp @kind object;
  #L11c190.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c1e4.  v0:= v1.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c1e8.  call temp:= `get`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11c1ee.  v2:= temp @kind object;
  #L11c1f0.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c1a4.  v0:= v1.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c1a8.  call temp:= `minusKey`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11c1ae.  v2:= temp @kind object;
  #L11c1b0.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlinx.coroutines.flow.internal.DownstreamExceptionContext` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/DownstreamExceptionContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c1c4.  v0:= v1.`kotlinx.coroutines.flow.internal.DownstreamExceptionContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c1c8.  call temp:= `plus`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L11c1ce.  v2:= temp @kind object;
  #L11c1d0.  return v2 @kind object;
}
