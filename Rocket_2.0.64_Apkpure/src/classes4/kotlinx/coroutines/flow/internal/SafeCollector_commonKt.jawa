record `kotlinx.coroutines.flow.internal.SafeCollector_commonKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `checkContext`(`kotlinx.coroutines.flow.internal.SafeCollector` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.checkContext:(Lkotlinx/coroutines/flow/internal/SafeCollector;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11c984.  v0:= 0I;
  #L11c986.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11c98c.  v0:= temp @kind object;
  #L11c98e.  v1:= new `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$a`;
  #L11c992.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$a;.<init>:(Lkotlinx/coroutines/flow/internal/SafeCollector;)V` @kind direct;
  #L11c998.  call temp:= `fold`(v4, v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L11c99e.  v0:= temp @kind object;
  #L11c9a0.  v0:= (`java.lang.Number`) v0 @kind object;
  #L11c9a4.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11c9aa.  v0:= temp;
  #L11c9ac.  v1:= v3.`kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @type ^`int`;
  #L11c9b0.  if v0 != v1 then goto L11c9b6;
  #L11c9b4.  return @kind void;
  #L11c9b6.  v0:= new `java.lang.IllegalStateException`;
  #L11c9ba.  v1:= new `java.lang.StringBuilder`;
  #L11c9be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c9c4.  v2:= "Flow invariant is violated:\n\t\tFlow was collected in " @kind object;
  #L11c9c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9ce.  v3:= v3.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L11c9d2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9d8.  v3:= ",\n\t\tbut emission happened in " @kind object;
  #L11c9dc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9e2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9e8.  v3:= ".\n\t\tPlease refer to 'flow' documentation or use 'flowOn' instead" @kind object;
  #L11c9ec.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c9f8.  v3:= temp @kind object;
  #L11c9fa.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ca00.  v3:= temp @kind object;
  #L11ca02.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca08.  throw v0;
}
procedure `kotlinx.coroutines.Job` `transitiveCoroutineParent`(`kotlinx.coroutines.Job` v1 @kind object, `kotlinx.coroutines.Job` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.transitiveCoroutineParent:(Lkotlinx/coroutines/Job;Lkotlinx/coroutines/Job;)Lkotlinx/coroutines/Job;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L11c930.  if v1 != 0 then goto L11c938;
  #L11c934.  v1:= 0I;
  #L11c936.  return v1 @kind object;
  #L11c938.  if v1 != v2 then goto L11c93e;
  #L11c93c.  return v1 @kind object;
  #L11c93e.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.ScopeCoroutine` @kind boolean;
  #L11c942.  if v0 != 0 then goto L11c948;
  #L11c946.  return v1 @kind object;
  #L11c948.  v1:= (`kotlinx.coroutines.internal.ScopeCoroutine`) v1 @kind object;
  #L11c94c.  call temp:= `getParent$kotlinx_coroutines_core`(v1) @signature `Lkotlinx/coroutines/internal/ScopeCoroutine;.getParent$kotlinx_coroutines_core:()Lkotlinx/coroutines/Job;` @kind virtual;
  #L11c952.  v1:= temp @kind object;
  #L11c954.  goto L11c930;
}
procedure `kotlinx.coroutines.flow.Flow` `unsafeFlow`(`kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.unsafeFlow:(Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L11c968.  v0:= new `kotlinx.coroutines.flow.internal.SafeCollector_commonKt$unsafeFlow$1`;
  #L11c96c.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt$unsafeFlow$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L11c972.  return v0 @kind object;
}
