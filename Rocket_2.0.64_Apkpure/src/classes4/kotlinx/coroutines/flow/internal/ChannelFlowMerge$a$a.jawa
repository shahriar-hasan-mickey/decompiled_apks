record `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.a` @AccessFlag ;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.internal.SendingCollector` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.Semaphore` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlinx.coroutines.flow.internal.SendingCollector` v2 @kind object, `kotlinx.coroutines.sync.Semaphore` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11a178.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.b` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L11a17c.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` := v2 @kind object;
  #L11a180.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` := v3 @kind object;
  #L11a184.  v1:= 2I;
  #L11a186.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a18c.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11a150.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a`;
  #L11a154.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a158.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L11a15c.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L11a160.  call `<init>`(v4, v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/internal/SendingCollector;Lkotlinx/coroutines/sync/Semaphore;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a166.  return v4 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11a06c.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L11a070.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L11a074.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a07a.  v1:= temp @kind object;
  #L11a07c.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L11a090.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11a096.  v1:= temp @kind object;
  #L11a098.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a`) v1 @kind object;
  #L11a09c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a0a0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11a0a6.  v1:= temp @kind object;
  #L11a0a8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$a$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11a0bc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a0c2.  v0:= temp @kind object;
  #L11a0c4.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.a` @type ^`int`;
  #L11a0c8.  v2:= 1I;
  #L11a0ca.  if v1 == 0 then goto L11a0ee;
  #L11a0ce.  if v1 != v2 then goto L11a0de;
  #L11a0d2.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a0d8.  goto L11a10e;
  #L11a0da.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11a0dc.  goto L11a11e;
  #L11a0de.  v4:= new `java.lang.IllegalStateException`;
  #L11a0e2.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11a0e6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a0ec.  throw v4;
  #L11a0ee.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a0f4.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.b` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11a0f8.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.c` @type ^`kotlinx.coroutines.flow.internal.SendingCollector` @kind object;
  #L11a0fc.  v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.a` @type ^`int` := v2;
  #L11a100.  call temp:= `collect`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11a106.  v4:= temp @kind object;
  #L11a108.  if v4 != v0 then goto L11a10e;
  #L11a10c.  return v0 @kind object;
  #L11a10e.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L11a112.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L11a118.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a11c.  return v4 @kind object;
  #L11a11e.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$a$a.d` @type ^`kotlinx.coroutines.sync.Semaphore` @kind object;
  #L11a122.  call `release`(v0) @signature `Lkotlinx/coroutines/sync/Semaphore;.release:()V` @kind interface;
  #L11a128.  throw v4;
  catch `java.lang.Throwable` @[L11a0d2..L11a0d8] goto L11a0da;
  catch `java.lang.Throwable` @[L11a0f4..L11a108] goto L11a0da;
}
