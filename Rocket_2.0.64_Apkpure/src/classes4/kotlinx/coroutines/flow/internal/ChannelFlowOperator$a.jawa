record `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.flow.internal.ChannelFlowOperator` `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `kotlinx.coroutines.flow.internal.ChannelFlowOperator` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11a558.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` := v1 @kind object;
  #L11a55c.  v1:= 2I;
  #L11a55e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a564.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11a534.  v0:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`;
  #L11a538.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind object;
  #L11a53c.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.<init>:(Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11a542.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @type ^`java.lang.Object` := v3 @kind object;
  #L11a546.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L11a47c.  v1:= (`kotlinx.coroutines.flow.FlowCollector`) v1 @kind object;
  #L11a480.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L11a484.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a48a.  v1:= temp @kind object;
  #L11a48c.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invoke:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L11a4a0.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11a4a6.  v1:= temp @kind object;
  #L11a4a8.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a`) v1 @kind object;
  #L11a4ac.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a4b0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11a4b6.  v1:= temp @kind object;
  #L11a4b8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L11a4cc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11a4d2.  v0:= temp @kind object;
  #L11a4d4.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @type ^`int`;
  #L11a4d8.  v2:= 1I;
  #L11a4da.  if v1 == 0 then goto L11a4fa;
  #L11a4de.  if v1 != v2 then goto L11a4ea;
  #L11a4e2.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a4e8.  goto L11a51e;
  #L11a4ea.  v4:= new `java.lang.IllegalStateException`;
  #L11a4ee.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L11a4f2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a4f8.  throw v4;
  #L11a4fa.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11a500.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.b` @type ^`java.lang.Object` @kind object;
  #L11a504.  v4:= (`kotlinx.coroutines.flow.FlowCollector`) v4 @kind object;
  #L11a508.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.c` @type ^`kotlinx.coroutines.flow.internal.ChannelFlowOperator` @kind object;
  #L11a50c.  v3.`kotlinx.coroutines.flow.internal.ChannelFlowOperator$a.a` @type ^`int` := v2;
  #L11a510.  call temp:= `flowCollect`(v1, v4, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperator;.flowCollect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11a516.  v4:= temp @kind object;
  #L11a518.  if v4 != v0 then goto L11a51e;
  #L11a51c.  return v0 @kind object;
  #L11a51e.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11a522.  return v4 @kind object;
}
