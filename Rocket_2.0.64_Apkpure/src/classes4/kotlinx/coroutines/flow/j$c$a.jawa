record `kotlinx.coroutines.flow.j$c$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlinx.coroutines.flow.j$c$a.a` @AccessFlag ;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.j$c$a.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.j$c$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.j$c$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.internal.Ref$ObjectRef` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10b33c.  v0.`kotlinx.coroutines.flow.j$c$a.b` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L10b340.  v0.`kotlinx.coroutines.flow.j$c$a.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v2 @kind object;
  #L10b344.  v1:= 1I;
  #L10b346.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L10b34c.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.j$c$a` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$a;.a:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L10b270.  call temp:= `create`(v1, v2) @signature `Lkotlinx/coroutines/flow/j$c$a;.create:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L10b276.  v2:= temp @kind object;
  #L10b278.  v2:= (`kotlinx.coroutines.flow.j$c$a`) v2 @kind object;
  #L10b27c.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10b280.  call temp:= `invokeSuspend`(v2, v0) @signature `Lkotlinx/coroutines/flow/j$c$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L10b286.  v2:= temp @kind object;
  #L10b288.  return v2 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.j$c$a` v3 @kind this, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$a;.create:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L10b318.  v0:= new `kotlinx.coroutines.flow.j$c$a`;
  #L10b31c.  v1:= v3.`kotlinx.coroutines.flow.j$c$a.b` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10b320.  v2:= v3.`kotlinx.coroutines.flow.j$c$a.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L10b324.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlinx/coroutines/flow/j$c$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10b32a.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.j$c$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$a;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L10b250.  v1:= (`kotlin.coroutines.Continuation`) v1 @kind object;
  #L10b254.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/j$c$a;.a:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L10b25a.  v1:= temp @kind object;
  #L10b25c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.j$c$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/j$c$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10b29c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10b2a2.  v0:= temp @kind object;
  #L10b2a4.  v1:= v5.`kotlinx.coroutines.flow.j$c$a.a` @type ^`int`;
  #L10b2a8.  v2:= 0I;
  #L10b2aa.  v3:= 1I;
  #L10b2ac.  if v1 == 0 then goto L10b2cc;
  #L10b2b0.  if v1 != v3 then goto L10b2bc;
  #L10b2b4.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10b2ba.  goto L10b2fa;
  #L10b2bc.  v6:= new `java.lang.IllegalStateException`;
  #L10b2c0.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10b2c4.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10b2ca.  throw v6;
  #L10b2cc.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10b2d2.  v6:= v5.`kotlinx.coroutines.flow.j$c$a.b` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10b2d6.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L10b2da.  v4:= v5.`kotlinx.coroutines.flow.j$c$a.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L10b2de.  v4:= v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L10b2e2.  if v4 != v1 then goto L10b2e8;
  #L10b2e6.  v4:= v2 @kind object;
  #L10b2e8.  v5.`kotlinx.coroutines.flow.j$c$a.a` @type ^`int` := v3;
  #L10b2ec.  call temp:= `emit`(v6, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10b2f2.  v6:= temp @kind object;
  #L10b2f4.  if v6 != v0 then goto L10b2fa;
  #L10b2f8.  return v0 @kind object;
  #L10b2fa.  v6:= v5.`kotlinx.coroutines.flow.j$c$a.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L10b2fe.  v6.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v2 @kind object;
  #L10b302.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10b306.  return v6 @kind object;
}
