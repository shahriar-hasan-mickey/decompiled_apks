record `kotlinx.coroutines.flow.FlowKt__LimitKt$e` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$IntRef` `kotlinx.coroutines.flow.FlowKt__LimitKt$e.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$e.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__LimitKt$e.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$e` v0 @kind this, `kotlin.jvm.internal.Ref$IntRef` v1 @kind object, `int` v2 , `kotlinx.coroutines.flow.FlowCollector` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$e;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;ILkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10e408.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.a` @type ^`kotlin.jvm.internal.Ref$IntRef` := v1 @kind object;
  #L10e40c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.b` @type ^`int` := v2;
  #L10e410.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.c` @type ^`kotlinx.coroutines.flow.FlowCollector` := v3 @kind object;
  #L10e414.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10e41a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__LimitKt$e` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10e334.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a` @kind boolean;
  #L10e338.  if v0 == 0 then goto L10e35a;
  #L10e33c.  v0:= v7 @kind object;
  #L10e33e.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a`) v0 @kind object;
  #L10e342.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.c` @type ^`int`;
  #L10e346.  v2:= -2147483648I;
  #L10e34a.  v3:= v1 ^& v2 @kind int;
  #L10e34e.  if v3 == 0 then goto L10e35a;
  #L10e352.  v1:= v1 - v2 @kind int;
  #L10e354.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.c` @type ^`int` := v1;
  #L10e358.  goto L10e364;
  #L10e35a.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$e$a`;
  #L10e35e.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$e$a;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$e;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10e364.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.a` @type ^`java.lang.Object` @kind object;
  #L10e368.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10e36e.  v1:= temp @kind object;
  #L10e370.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.c` @type ^`int`;
  #L10e374.  v3:= 2I;
  #L10e376.  v4:= 1I;
  #L10e378.  if v2 == 0 then goto L10e3a4;
  #L10e37c.  if v2 == v4 then goto L10e39c;
  #L10e380.  if v2 != v3 then goto L10e38c;
  #L10e384.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e38a.  goto L10e3f2;
  #L10e38c.  v6:= new `java.lang.IllegalStateException`;
  #L10e390.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10e394.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10e39a.  throw v6;
  #L10e39c.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e3a2.  goto L10e3d6;
  #L10e3a4.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e3aa.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.a` @type ^`kotlin.jvm.internal.Ref$IntRef` @kind object;
  #L10e3ae.  v2:= v7.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L10e3b2.  v2:= v2 + v4 @kind int;
  #L10e3b4.  v7.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v2;
  #L10e3b8.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.b` @type ^`int`;
  #L10e3bc.  if v2 >= v7 then goto L10e3dc;
  #L10e3c0.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10e3c4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.c` @type ^`int` := v4;
  #L10e3c8.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10e3ce.  v6:= temp @kind object;
  #L10e3d0.  if v6 != v1 then goto L10e3d6;
  #L10e3d4.  return v1 @kind object;
  #L10e3d6.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e3da.  return v6 @kind object;
  #L10e3dc.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$e.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10e3e0.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$e$a.c` @type ^`int` := v3;
  #L10e3e4.  call temp:= `a`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L10e3ea.  v6:= temp @kind object;
  #L10e3ec.  if v6 != v1 then goto L10e3f2;
  #L10e3f0.  return v1 @kind object;
  #L10e3f2.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e3f6.  return v6 @kind object;
}
