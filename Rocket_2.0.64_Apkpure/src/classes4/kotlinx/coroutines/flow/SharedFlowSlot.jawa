record `kotlinx.coroutines.flow.SharedFlowSlot` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` @kind class {
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.SharedFlowSlot.cont` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.flow.SharedFlowSlot.index` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.SharedFlowSlot` v2 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L118370.  call `<init>`(v2) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;.<init>:()V` @kind direct;
  #L118376.  v0:= -1L;
  #L11837a.  v2.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` := v0 @kind wide;
  #L11837e.  return @kind void;
}
procedure `boolean` `allocateLocked`(`kotlinx.coroutines.flow.SharedFlowSlot` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.allocateLocked:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1182d0.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L1182d4.  call temp:= `allocateLocked`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.allocateLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @kind virtual;
  #L1182da.  v1:= temp;
  #L1182dc.  return v1;
}
procedure `boolean` `allocateLocked`(`kotlinx.coroutines.flow.SharedFlowSlot` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.allocateLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1182f0.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L1182f4.  v2:= 0L;
  #L1182f8.  v4:= lcmp(v0, v2);
  #L1182fc.  if v4 < 0 then goto L118304;
  #L118300.  v6:= 0I;
  #L118302.  return v6;
  #L118304.  call temp:= `updateNewCollectorIndexLocked$kotlinx_coroutines_core`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.updateNewCollectorIndexLocked$kotlinx_coroutines_core:()J` @kind virtual;
  #L11830a.  v0:= temp @kind wide;
  #L11830c.  v5.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` := v0 @kind wide;
  #L118310.  v6:= 1I;
  #L118312.  return v6;
}
procedure `kotlin.coroutines.Continuation`[] `freeLocked`(`kotlinx.coroutines.flow.SharedFlowSlot` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.freeLocked:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L118324.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L118328.  call temp:= `freeLocked`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.freeLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11832e.  v1:= temp @kind object;
  #L118330.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `freeLocked`(`kotlinx.coroutines.flow.SharedFlowSlot` v4 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.freeLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L118344.  v0:= v4.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L118348.  v2:= -1L;
  #L11834c.  v4.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` := v2 @kind wide;
  #L118350.  v2:= 0I;
  #L118352.  v4.`kotlinx.coroutines.flow.SharedFlowSlot.cont` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L118356.  call temp:= `updateCollectorIndexLocked$kotlinx_coroutines_core`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.updateCollectorIndexLocked$kotlinx_coroutines_core:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11835c.  v5:= temp @kind object;
  #L11835e.  return v5 @kind object;
}
