record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlin.ranges.LongRange` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10` v0 @kind this, `kotlin.ranges.LongRange` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10;.<init>:(Lkotlin/ranges/LongRange;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1094ac.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10.a` @type ^`kotlin.ranges.LongRange` := v1 @kind object;
  #L1094b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1094b6.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10` v7 @kind this, `kotlinx.coroutines.flow.FlowCollector` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1093cc.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1` @kind boolean;
  #L1093d0.  if v0 == 0 then goto L1093f2;
  #L1093d4.  v0:= v9 @kind object;
  #L1093d6.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1`) v0 @kind object;
  #L1093da.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.b` @type ^`int`;
  #L1093de.  v2:= -2147483648I;
  #L1093e2.  v3:= v1 ^& v2 @kind int;
  #L1093e6.  if v3 == 0 then goto L1093f2;
  #L1093ea.  v1:= v1 - v2 @kind int;
  #L1093ec.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.b` @type ^`int` := v1;
  #L1093f0.  goto L1093fc;
  #L1093f2.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1`;
  #L1093f6.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1093fc.  v9:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.a` @type ^`java.lang.Object` @kind object;
  #L109400.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109406.  v1:= temp @kind object;
  #L109408.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.b` @type ^`int`;
  #L10940c.  v3:= 1I;
  #L10940e.  if v2 == 0 then goto L109440;
  #L109412.  if v2 != v3 then goto L109430;
  #L109416.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.e` @type ^`java.lang.Object` @kind object;
  #L10941a.  v8:= (`java.util.Iterator`) v8 @kind object;
  #L10941e.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.d` @type ^`java.lang.Object` @kind object;
  #L109422.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L109426.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10942c.  v9:= v2 @kind object;
  #L10942e.  goto L109458;
  #L109430.  v8:= new `java.lang.IllegalStateException`;
  #L109434.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109438.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10943e.  throw v8;
  #L109440.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109446.  v9:= v7.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10.a` @type ^`kotlin.ranges.LongRange` @kind object;
  #L10944a.  call temp:= `iterator`(v9) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L109450.  v9:= temp @kind object;
  #L109452.  v6:= v9 @kind object;
  #L109454.  v9:= v8 @kind object;
  #L109456.  v8:= v6 @kind object;
  #L109458.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L10945e.  v2:= temp;
  #L109460.  if v2 == 0 then goto L109494;
  #L109464.  v2:= v8 @kind object;
  #L109466.  v2:= (`kotlin.collections.LongIterator`) v2 @kind object;
  #L10946a.  call temp:= `nextLong`(v2) @signature `Lkotlin/collections/LongIterator;.nextLong:()J` @kind virtual;
  #L109470.  v4:= temp @kind wide;
  #L109472.  call temp:= `boxLong`(v4) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxLong:(J)Ljava/lang/Long;` @kind static;
  #L109478.  v2:= temp @kind object;
  #L10947a.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.d` @type ^`java.lang.Object` := v9 @kind object;
  #L10947e.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.e` @type ^`java.lang.Object` := v8 @kind object;
  #L109482.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$10$1.b` @type ^`int` := v3;
  #L109486.  call temp:= `emit`(v9, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10948c.  v2:= temp @kind object;
  #L10948e.  if v2 != v1 then goto L109458;
  #L109492.  return v1 @kind object;
  #L109494.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109498.  return v8 @kind object;
}
