record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `java.lang.Object`[] `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L109b34.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L109b38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L109b3e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6` v7 @kind this, `kotlinx.coroutines.flow.FlowCollector` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L109a5c.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1` @kind boolean;
  #L109a60.  if v0 == 0 then goto L109a82;
  #L109a64.  v0:= v9 @kind object;
  #L109a66.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1`) v0 @kind object;
  #L109a6a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.b` @type ^`int`;
  #L109a6e.  v2:= -2147483648I;
  #L109a72.  v3:= v1 ^& v2 @kind int;
  #L109a76.  if v3 == 0 then goto L109a82;
  #L109a7a.  v1:= v1 - v2 @kind int;
  #L109a7c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.b` @type ^`int` := v1;
  #L109a80.  goto L109a8c;
  #L109a82.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1`;
  #L109a86.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L109a8c.  v9:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.a` @type ^`java.lang.Object` @kind object;
  #L109a90.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109a96.  v1:= temp @kind object;
  #L109a98.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.b` @type ^`int`;
  #L109a9c.  v3:= 1I;
  #L109a9e.  if v2 == 0 then goto L109ad8;
  #L109aa2.  if v2 != v3 then goto L109ac8;
  #L109aa6.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.g` @type ^`int`;
  #L109aaa.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.f` @type ^`int`;
  #L109aae.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.e` @type ^`java.lang.Object` @kind object;
  #L109ab2.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L109ab6.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.d` @type ^`java.lang.Object` @kind object;
  #L109aba.  v5:= (`kotlinx.coroutines.flow.FlowCollector`) v5 @kind object;
  #L109abe.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109ac4.  v9:= v5 @kind object;
  #L109ac6.  goto L109aee;
  #L109ac8.  v8:= new `java.lang.IllegalStateException`;
  #L109acc.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109ad0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109ad6.  throw v8;
  #L109ad8.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109ade.  v9:= v7.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6.a` @type ^`java.lang.Object`[] @kind object;
  #L109ae2.  v2:= 0I;
  #L109ae4.  v4:= length @variable v9;
  #L109ae6.  v6:= v9 @kind object;
  #L109ae8.  v9:= v8 @kind object;
  #L109aea.  v8:= v4;
  #L109aec.  v4:= v6 @kind object;
  #L109aee.  if v2 >= v8 then goto L109b1c;
  #L109af2.  v5:= v4[v2] @kind object;
  #L109af6.  v2:= v2 + 1;
  #L109afa.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.d` @type ^`java.lang.Object` := v9 @kind object;
  #L109afe.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L109b02.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.f` @type ^`int` := v2;
  #L109b06.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.g` @type ^`int` := v8;
  #L109b0a.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$6$1.b` @type ^`int` := v3;
  #L109b0e.  call temp:= `emit`(v9, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109b14.  v5:= temp @kind object;
  #L109b16.  if v5 != v1 then goto L109aee;
  #L109b1a.  return v1 @kind object;
  #L109b1c.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109b20.  return v8 @kind object;
}
