record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `int`[] `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7` v0 @kind this, `int`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7;.<init>:([I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L109c80.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7.a` @type ^`int`[] := v1 @kind object;
  #L109c84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L109c8a.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7` v7 @kind this, `kotlinx.coroutines.flow.FlowCollector` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L109ba0.  v0:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1` @kind boolean;
  #L109ba4.  if v0 == 0 then goto L109bc6;
  #L109ba8.  v0:= v9 @kind object;
  #L109baa.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1`) v0 @kind object;
  #L109bae.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.b` @type ^`int`;
  #L109bb2.  v2:= -2147483648I;
  #L109bb6.  v3:= v1 ^& v2 @kind int;
  #L109bba.  if v3 == 0 then goto L109bc6;
  #L109bbe.  v1:= v1 - v2 @kind int;
  #L109bc0.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.b` @type ^`int` := v1;
  #L109bc4.  goto L109bd0;
  #L109bc6.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1`;
  #L109bca.  call `<init>`(v0, v7, v9) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L109bd0.  v9:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.a` @type ^`java.lang.Object` @kind object;
  #L109bd4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109bda.  v1:= temp @kind object;
  #L109bdc.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.b` @type ^`int`;
  #L109be0.  v3:= 1I;
  #L109be2.  if v2 == 0 then goto L109c1c;
  #L109be6.  if v2 != v3 then goto L109c0c;
  #L109bea.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.g` @type ^`int`;
  #L109bee.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.f` @type ^`int`;
  #L109bf2.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.e` @type ^`java.lang.Object` @kind object;
  #L109bf6.  v4:= (`int`[]) v4 @kind object;
  #L109bfa.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.d` @type ^`java.lang.Object` @kind object;
  #L109bfe.  v5:= (`kotlinx.coroutines.flow.FlowCollector`) v5 @kind object;
  #L109c02.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109c08.  v9:= v5 @kind object;
  #L109c0a.  goto L109c32;
  #L109c0c.  v8:= new `java.lang.IllegalStateException`;
  #L109c10.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109c14.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109c1a.  throw v8;
  #L109c1c.  call `throwOnFailure`(v9) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109c22.  v9:= v7.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7.a` @type ^`int`[] @kind object;
  #L109c26.  v2:= 0I;
  #L109c28.  v4:= length @variable v9;
  #L109c2a.  v6:= v9 @kind object;
  #L109c2c.  v9:= v8 @kind object;
  #L109c2e.  v8:= v4;
  #L109c30.  v4:= v6 @kind object;
  #L109c32.  if v2 >= v8 then goto L109c68;
  #L109c36.  v5:= v4[v2];
  #L109c3a.  v2:= v2 + 1;
  #L109c3e.  call temp:= `boxInt`(v5) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxInt:(I)Ljava/lang/Integer;` @kind static;
  #L109c44.  v5:= temp @kind object;
  #L109c46.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.d` @type ^`java.lang.Object` := v9 @kind object;
  #L109c4a.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L109c4e.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.f` @type ^`int` := v2;
  #L109c52.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.g` @type ^`int` := v8;
  #L109c56.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$7$1.b` @type ^`int` := v3;
  #L109c5a.  call temp:= `emit`(v9, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109c60.  v5:= temp @kind object;
  #L109c62.  if v5 != v1 then goto L109c32;
  #L109c66.  return v1 @kind object;
  #L109c68.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109c6c.  return v8 @kind object;
}
