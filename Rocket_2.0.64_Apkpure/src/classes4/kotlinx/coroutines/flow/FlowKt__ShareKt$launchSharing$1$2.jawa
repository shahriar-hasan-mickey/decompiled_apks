record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.a` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.b` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.MutableSharedFlow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlinx.coroutines.flow.MutableSharedFlow` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1114b8.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.c` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L1114bc.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` := v2 @kind object;
  #L1114c0.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.e` @type ^`java.lang.Object` := v3 @kind object;
  #L1114c4.  v1:= 2I;
  #L1114c6.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L1114cc.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `kotlinx.coroutines.flow.SharingCommand` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.a:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1113b4.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L1113ba.  v1:= temp @kind object;
  #L1113bc.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`) v1 @kind object;
  #L1113c0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1113c4.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1113ca.  v1:= temp @kind object;
  #L1113cc.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11148c.  v0:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`;
  #L111490.  v1:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111494.  v2:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L111498.  v3:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.e` @type ^`java.lang.Object` @kind object;
  #L11149c.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1114a2.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.b` @type ^`java.lang.Object` := v5 @kind object;
  #L1114a6.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L111390.  v1:= (`kotlinx.coroutines.flow.SharingCommand`) v1 @kind object;
  #L111394.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L111398.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.a:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11139e.  v1:= temp @kind object;
  #L1113a0.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1113e0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1113e6.  v0:= temp @kind object;
  #L1113e8.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.a` @type ^`int`;
  #L1113ec.  v2:= 1I;
  #L1113ee.  if v1 == 0 then goto L11140e;
  #L1113f2.  if v1 != v2 then goto L1113fe;
  #L1113f6.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1113fc.  goto L111476;
  #L1113fe.  v4:= new `java.lang.IllegalStateException`;
  #L111402.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L111406.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11140c.  throw v4;
  #L11140e.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111414.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.b` @type ^`java.lang.Object` @kind object;
  #L111418.  v4:= (`kotlinx.coroutines.flow.SharingCommand`) v4 @kind object;
  #L11141c.  v1:= `@@kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L111420.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L111426.  v4:= temp;
  #L111428.  v4:= v1[v4];
  #L11142c.  if v4 == v2 then goto L11145c;
  #L111430.  v0:= 3I;
  #L111432.  if v4 == v0 then goto L111438;
  #L111436.  goto L111476;
  #L111438.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.e` @type ^`java.lang.Object` @kind object;
  #L11143c.  v0:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L111440.  if v4 != v0 then goto L111450;
  #L111444.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L111448.  call `resetReplayCache`(v4) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.resetReplayCache:()V` @kind interface;
  #L11144e.  goto L111476;
  #L111450.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L111454.  call temp:= `tryEmit`(v0, v4) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.tryEmit:(Ljava/lang/Object;)Z` @kind interface;
  #L11145a.  goto L111476;
  #L11145c.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111460.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L111464.  v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.a` @type ^`int` := v2;
  #L111468.  call temp:= `collect`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L11146e.  v4:= temp @kind object;
  #L111470.  if v4 != v0 then goto L111476;
  #L111474.  return v0 @kind object;
  #L111476.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11147a.  return v4 @kind object;
}
