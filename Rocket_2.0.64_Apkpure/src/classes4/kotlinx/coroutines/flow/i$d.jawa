record `kotlinx.coroutines.flow.i$d` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.i$d.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$IntRef` `kotlinx.coroutines.flow.i$d.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.i$d` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.jvm.internal.Ref$IntRef` v2 @kind object) @signature `Lkotlinx/coroutines/flow/i$d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/jvm/internal/Ref$IntRef;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10afe4.  v0.`kotlinx.coroutines.flow.i$d.a` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L10afe8.  v0.`kotlinx.coroutines.flow.i$d.b` @type ^`kotlin.jvm.internal.Ref$IntRef` := v2 @kind object;
  #L10afec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10aff2.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.i$d` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/i$d;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10af24.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.i$d$a` @kind boolean;
  #L10af28.  if v0 == 0 then goto L10af4a;
  #L10af2c.  v0:= v6 @kind object;
  #L10af2e.  v0:= (`kotlinx.coroutines.flow.i$d$a`) v0 @kind object;
  #L10af32.  v1:= v0.`kotlinx.coroutines.flow.i$d$a.d` @type ^`int`;
  #L10af36.  v2:= -2147483648I;
  #L10af3a.  v3:= v1 ^& v2 @kind int;
  #L10af3e.  if v3 == 0 then goto L10af4a;
  #L10af42.  v1:= v1 - v2 @kind int;
  #L10af44.  v0.`kotlinx.coroutines.flow.i$d$a.d` @type ^`int` := v1;
  #L10af48.  goto L10af54;
  #L10af4a.  v0:= new `kotlinx.coroutines.flow.i$d$a`;
  #L10af4e.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/i$d$a;.<init>:(Lkotlinx/coroutines/flow/i$d;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10af54.  v6:= v0.`kotlinx.coroutines.flow.i$d$a.b` @type ^`java.lang.Object` @kind object;
  #L10af58.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10af5e.  v1:= temp @kind object;
  #L10af60.  v2:= v0.`kotlinx.coroutines.flow.i$d$a.d` @type ^`int`;
  #L10af64.  v3:= 1I;
  #L10af66.  if v2 == 0 then goto L10af8e;
  #L10af6a.  if v2 != v3 then goto L10af7e;
  #L10af6e.  v5:= v0.`kotlinx.coroutines.flow.i$d$a.a` @type ^`java.lang.Object` @kind object;
  #L10af72.  v5:= (`kotlinx.coroutines.flow.i$d`) v5 @kind object;
  #L10af76.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10af7c.  goto L10afb0;
  #L10af7e.  v5:= new `java.lang.IllegalStateException`;
  #L10af82.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10af86.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10af8c.  throw v5;
  #L10af8e.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10af94.  v6:= v4.`kotlinx.coroutines.flow.i$d.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L10af98.  v0.`kotlinx.coroutines.flow.i$d$a.a` @type ^`java.lang.Object` := v4 @kind object;
  #L10af9c.  v0.`kotlinx.coroutines.flow.i$d$a.d` @type ^`int` := v3;
  #L10afa0.  call temp:= `invoke`(v6, v5, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10afa6.  v6:= temp @kind object;
  #L10afa8.  if v6 != v1 then goto L10afae;
  #L10afac.  return v1 @kind object;
  #L10afae.  v5:= v4 @kind object;
  #L10afb0.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L10afb4.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L10afba.  v6:= temp;
  #L10afbc.  if v6 == 0 then goto L10afce;
  #L10afc0.  v5:= v5.`kotlinx.coroutines.flow.i$d.b` @type ^`kotlin.jvm.internal.Ref$IntRef` @kind object;
  #L10afc4.  v6:= v5.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L10afc8.  v6:= v6 + v3 @kind int;
  #L10afca.  v5.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v6;
  #L10afce.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10afd2.  return v5 @kind object;
}
