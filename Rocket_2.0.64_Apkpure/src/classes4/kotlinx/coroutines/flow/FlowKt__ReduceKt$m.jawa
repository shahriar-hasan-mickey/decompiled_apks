record `kotlinx.coroutines.flow.FlowKt__ReduceKt$m` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.FlowKt__ReduceKt$m.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$m` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$m;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11087c.  v0.`kotlinx.coroutines.flow.FlowKt__ReduceKt$m.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L110880.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L110886.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__ReduceKt$m` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ReduceKt$m;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L110830.  v4:= v2.`kotlinx.coroutines.flow.FlowKt__ReduceKt$m.a` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L110834.  v0:= v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L110838.  v1:= `@@kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L11083c.  if v0 != v1 then goto L110844;
  #L110840.  v0:= 1I;
  #L110842.  goto L110846;
  #L110844.  v0:= 0I;
  #L110846.  if v0 == 0 then goto L110854;
  #L11084a.  v4.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v3 @kind object;
  #L11084e.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L110852.  return v3 @kind object;
  #L110854.  v3:= new `java.lang.IllegalArgumentException`;
  #L110858.  v4:= "Flow has more than one element" @kind object;
  #L11085c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L110862.  v4:= temp @kind object;
  #L110864.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11086a.  throw v3;
}
