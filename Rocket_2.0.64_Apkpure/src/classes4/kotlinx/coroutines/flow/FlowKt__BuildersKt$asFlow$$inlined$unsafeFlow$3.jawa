record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `java.lang.Iterable` `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L109780.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L109784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10978a.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1096b0.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1` @kind boolean;
  #L1096b4.  if v0 == 0 then goto L1096d6;
  #L1096b8.  v0:= v7 @kind object;
  #L1096ba.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1`) v0 @kind object;
  #L1096be.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.b` @type ^`int`;
  #L1096c2.  v2:= -2147483648I;
  #L1096c6.  v3:= v1 ^& v2 @kind int;
  #L1096ca.  if v3 == 0 then goto L1096d6;
  #L1096ce.  v1:= v1 - v2 @kind int;
  #L1096d0.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.b` @type ^`int` := v1;
  #L1096d4.  goto L1096e0;
  #L1096d6.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1`;
  #L1096da.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1096e0.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.a` @type ^`java.lang.Object` @kind object;
  #L1096e4.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1096ea.  v1:= temp @kind object;
  #L1096ec.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.b` @type ^`int`;
  #L1096f0.  v3:= 1I;
  #L1096f2.  if v2 == 0 then goto L109724;
  #L1096f6.  if v2 != v3 then goto L109714;
  #L1096fa.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.e` @type ^`java.lang.Object` @kind object;
  #L1096fe.  v6:= (`java.util.Iterator`) v6 @kind object;
  #L109702.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.d` @type ^`java.lang.Object` @kind object;
  #L109706.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10970a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109710.  v7:= v2 @kind object;
  #L109712.  goto L10973c;
  #L109714.  v6:= new `java.lang.IllegalStateException`;
  #L109718.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10971c.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109722.  throw v6;
  #L109724.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10972a.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3.a` @type ^`java.lang.Iterable` @kind object;
  #L10972e.  call temp:= `iterator`(v7) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L109734.  v7:= temp @kind object;
  #L109736.  v4:= v7 @kind object;
  #L109738.  v7:= v6 @kind object;
  #L10973a.  v6:= v4 @kind object;
  #L10973c.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L109742.  v2:= temp;
  #L109744.  if v2 == 0 then goto L10976a;
  #L109748.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L10974e.  v2:= temp @kind object;
  #L109750.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L109754.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L109758.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$3$1.b` @type ^`int` := v3;
  #L10975c.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109762.  v2:= temp @kind object;
  #L109764.  if v2 != v1 then goto L10973c;
  #L109768.  return v1 @kind object;
  #L10976a.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10976e.  return v6 @kind object;
}
