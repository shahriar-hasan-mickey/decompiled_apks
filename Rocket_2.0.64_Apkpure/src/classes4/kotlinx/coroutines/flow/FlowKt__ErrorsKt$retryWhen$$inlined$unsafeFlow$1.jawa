record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function4` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function4` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function4;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10d970.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10d974.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function4` := v2 @kind object;
  #L10d978.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10d97e.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1` v11 @kind this, `kotlinx.coroutines.flow.FlowCollector` v12 @kind object, `kotlin.coroutines.Continuation` v13 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L10d7fc.  v0:= instanceof @variable v13 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1` @kind boolean;
  #L10d800.  if v0 == 0 then goto L10d822;
  #L10d804.  v0:= v13 @kind object;
  #L10d806.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L10d80a.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10d80e.  v2:= -2147483648I;
  #L10d812.  v3:= v1 ^& v2 @kind int;
  #L10d816.  if v3 == 0 then goto L10d822;
  #L10d81a.  v1:= v1 - v2 @kind int;
  #L10d81c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L10d820.  goto L10d82c;
  #L10d822.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1`;
  #L10d826.  call `<init>`(v0, v11, v13) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10d82c.  v13:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L10d830.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10d836.  v1:= temp @kind object;
  #L10d838.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10d83c.  v3:= 2I;
  #L10d83e.  v4:= 1I;
  #L10d840.  if v2 == 0 then goto L10d8a0;
  #L10d844.  if v2 == v4 then goto L10d880;
  #L10d848.  if v2 != v3 then goto L10d870;
  #L10d84c.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` @kind wide;
  #L10d850.  v12:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` @kind object;
  #L10d854.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L10d858.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L10d85c.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10d860.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10d864.  v7:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1`) v7 @kind object;
  #L10d868.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d86e.  goto L10d930;
  #L10d870.  v12:= new `java.lang.IllegalStateException`;
  #L10d874.  v13:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10d878.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10d87e.  throw v12;
  #L10d880.  v12:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.h` @type ^`int`;
  #L10d884.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` @kind wide;
  #L10d888.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L10d88c.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L10d890.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10d894.  v7:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1`) v7 @kind object;
  #L10d898.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d89e.  goto L10d8e4;
  #L10d8a0.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d8a6.  v5:= 0L;
  #L10d8aa.  v13:= v11 @kind object;
  #L10d8ac.  v2:= 0I;
  #L10d8ae.  v7:= v13.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10d8b2.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v13 @kind object;
  #L10d8b6.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v12 @kind object;
  #L10d8ba.  v8:= 0I;
  #L10d8bc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v8 @kind object;
  #L10d8c0.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` := v5 @kind wide;
  #L10d8c4.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.h` @type ^`int` := v2;
  #L10d8c8.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v4;
  #L10d8cc.  call temp:= `catchImpl`(v7, v12, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.catchImpl:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L10d8d2.  v7:= temp @kind object;
  #L10d8d4.  if v7 != v1 then goto L10d8da;
  #L10d8d8.  return v1 @kind object;
  #L10d8da.  v2:= v12 @kind object;
  #L10d8dc.  v12:= 0I;
  #L10d8de.  v10:= v7 @kind object;
  #L10d8e0.  v7:= v13 @kind object;
  #L10d8e2.  v13:= v10 @kind object;
  #L10d8e4.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L10d8e8.  if v13 == 0 then goto L10d94e;
  #L10d8ec.  v12:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function4` @kind object;
  #L10d8f0.  call temp:= `boxLong`(v5) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxLong:(J)Ljava/lang/Long;` @kind static;
  #L10d8f6.  v8:= temp @kind object;
  #L10d8f8.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L10d8fc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v2 @kind object;
  #L10d900.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.f` @type ^`java.lang.Object` := v13 @kind object;
  #L10d904.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.g` @type ^`long` := v5 @kind wide;
  #L10d908.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retryWhen$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L10d90c.  v9:= 6I;
  #L10d90e.  call `mark`(v9) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10d914.  call temp:= `invoke`(v12, v2, v13, v8, v0) @signature `Lkotlin/jvm/functions/Function4;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10d91a.  v12:= temp @kind object;
  #L10d91c.  v8:= 7I;
  #L10d91e.  call `mark`(v8) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10d924.  if v12 != v1 then goto L10d92a;
  #L10d928.  return v1 @kind object;
  #L10d92a.  v10:= v13 @kind object;
  #L10d92c.  v13:= v12 @kind object;
  #L10d92e.  v12:= v10 @kind object;
  #L10d930.  v13:= (`java.lang.Boolean`) v13 @kind object;
  #L10d934.  call temp:= `booleanValue`(v13) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L10d93a.  v13:= temp;
  #L10d93c.  if v13 == 0 then goto L10d94c;
  #L10d940.  v12:= 1L;
  #L10d944.  v5:= v5 + v12 @kind long;
  #L10d946.  v13:= v7 @kind object;
  #L10d948.  v12:= 1I;
  #L10d94a.  goto L10d950;
  #L10d94c.  throw v12;
  #L10d94e.  v13:= v7 @kind object;
  #L10d950.  if v12 != 0 then goto L10d95a;
  #L10d954.  v12:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10d958.  return v12 @kind object;
  #L10d95a.  v12:= v2 @kind object;
  #L10d95c.  goto L10d8ac;
}
