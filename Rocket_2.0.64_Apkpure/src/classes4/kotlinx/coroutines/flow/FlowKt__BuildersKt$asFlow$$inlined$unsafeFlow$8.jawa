record `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `long`[] `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8` v0 @kind this, `long`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8;.<init>:([J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L109dcc.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8.a` @type ^`long`[] := v1 @kind object;
  #L109dd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L109dd6.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8` v8 @kind this, `kotlinx.coroutines.flow.FlowCollector` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L109cec.  v0:= instanceof @variable v10 @type ^`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1` @kind boolean;
  #L109cf0.  if v0 == 0 then goto L109d12;
  #L109cf4.  v0:= v10 @kind object;
  #L109cf6.  v0:= (`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1`) v0 @kind object;
  #L109cfa.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.b` @type ^`int`;
  #L109cfe.  v2:= -2147483648I;
  #L109d02.  v3:= v1 ^& v2 @kind int;
  #L109d06.  if v3 == 0 then goto L109d12;
  #L109d0a.  v1:= v1 - v2 @kind int;
  #L109d0c.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.b` @type ^`int` := v1;
  #L109d10.  goto L109d1c;
  #L109d12.  v0:= new `kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1`;
  #L109d16.  call `<init>`(v0, v8, v10) @signature `Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L109d1c.  v10:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.a` @type ^`java.lang.Object` @kind object;
  #L109d20.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L109d26.  v1:= temp @kind object;
  #L109d28.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.b` @type ^`int`;
  #L109d2c.  v3:= 1I;
  #L109d2e.  if v2 == 0 then goto L109d68;
  #L109d32.  if v2 != v3 then goto L109d58;
  #L109d36.  v9:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.g` @type ^`int`;
  #L109d3a.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.f` @type ^`int`;
  #L109d3e.  v4:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.e` @type ^`java.lang.Object` @kind object;
  #L109d42.  v4:= (`long`[]) v4 @kind object;
  #L109d46.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.d` @type ^`java.lang.Object` @kind object;
  #L109d4a.  v5:= (`kotlinx.coroutines.flow.FlowCollector`) v5 @kind object;
  #L109d4e.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109d54.  v10:= v5 @kind object;
  #L109d56.  goto L109d7e;
  #L109d58.  v9:= new `java.lang.IllegalStateException`;
  #L109d5c.  v10:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L109d60.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L109d66.  throw v9;
  #L109d68.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L109d6e.  v10:= v8.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8.a` @type ^`long`[] @kind object;
  #L109d72.  v2:= 0I;
  #L109d74.  v4:= length @variable v10;
  #L109d76.  v7:= v10 @kind object;
  #L109d78.  v10:= v9 @kind object;
  #L109d7a.  v9:= v4;
  #L109d7c.  v4:= v7 @kind object;
  #L109d7e.  if v2 >= v9 then goto L109db4;
  #L109d82.  v5:= v4[v2] @kind wide;
  #L109d86.  v2:= v2 + 1;
  #L109d8a.  call temp:= `boxLong`(v5) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxLong:(J)Ljava/lang/Long;` @kind static;
  #L109d90.  v5:= temp @kind object;
  #L109d92.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.d` @type ^`java.lang.Object` := v10 @kind object;
  #L109d96.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L109d9a.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.f` @type ^`int` := v2;
  #L109d9e.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.g` @type ^`int` := v9;
  #L109da2.  v0.`kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$8$1.b` @type ^`int` := v3;
  #L109da6.  call temp:= `emit`(v10, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L109dac.  v5:= temp @kind object;
  #L109dae.  if v5 != v1 then goto L109d7e;
  #L109db2.  return v1 @kind object;
  #L109db4.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L109db8.  return v9 @kind object;
}
