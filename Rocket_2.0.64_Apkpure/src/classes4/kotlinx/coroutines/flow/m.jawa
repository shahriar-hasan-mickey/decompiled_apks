record `kotlinx.coroutines.flow.m` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.StateFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `kotlinx.coroutines.Job` `kotlinx.coroutines.flow.m.a` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.flow.StateFlow` `kotlinx.coroutines.flow.m.b` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.m` v0 @kind this, `kotlinx.coroutines.flow.StateFlow` v1 @kind object, `kotlinx.coroutines.Job` v2 @kind object) @signature `Lkotlinx/coroutines/flow/m;.<init>:(Lkotlinx/coroutines/flow/StateFlow;Lkotlinx/coroutines/Job;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L116ec0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L116ec6.  v0.`kotlinx.coroutines.flow.m.a` @type ^`kotlinx.coroutines.Job` := v2 @kind object;
  #L116eca.  v0.`kotlinx.coroutines.flow.m.b` @type ^`kotlinx.coroutines.flow.StateFlow` := v1 @kind object;
  #L116ece.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.m` v1 @kind this, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/m;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L116e44.  v0:= v1.`kotlinx.coroutines.flow.m.b` @type ^`kotlinx.coroutines.flow.StateFlow` @kind object;
  #L116e48.  call temp:= `collect`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L116e4e.  v2:= temp @kind object;
  #L116e50.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.m` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/m;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L116ea4.  call temp:= `fuseStateFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/StateFlowKt;.fuseStateFlow:(Lkotlinx/coroutines/flow/StateFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L116eaa.  v1:= temp @kind object;
  #L116eac.  return v1 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.m` v1 @kind this) @signature `Lkotlinx/coroutines/flow/m;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L116e84.  v0:= v1.`kotlinx.coroutines.flow.m.b` @type ^`kotlinx.coroutines.flow.StateFlow` @kind object;
  #L116e88.  call temp:= `getReplayCache`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlow;.getReplayCache:()Ljava/util/List;` @kind interface;
  #L116e8e.  v0:= temp @kind object;
  #L116e90.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlinx.coroutines.flow.m` v1 @kind this) @signature `Lkotlinx/coroutines/flow/m;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L116e64.  v0:= v1.`kotlinx.coroutines.flow.m.b` @type ^`kotlinx.coroutines.flow.StateFlow` @kind object;
  #L116e68.  call temp:= `getValue`(v0) @signature `Lkotlinx/coroutines/flow/StateFlow;.getValue:()Ljava/lang/Object;` @kind interface;
  #L116e6e.  v0:= temp @kind object;
  #L116e70.  return v0 @kind object;
}
