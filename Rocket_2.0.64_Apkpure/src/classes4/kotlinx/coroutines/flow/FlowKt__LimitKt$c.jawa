record `kotlinx.coroutines.flow.FlowKt__LimitKt$c` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$BooleanRef` `kotlinx.coroutines.flow.FlowKt__LimitKt$c.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__LimitKt$c.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__LimitKt$c.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$c` v0 @kind this, `kotlin.jvm.internal.Ref$BooleanRef` v1 @kind object, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$c;.<init>:(Lkotlin/jvm/internal/Ref$BooleanRef;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10e130.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.a` @type ^`kotlin.jvm.internal.Ref$BooleanRef` := v1 @kind object;
  #L10e134.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.b` @type ^`kotlinx.coroutines.flow.FlowCollector` := v2 @kind object;
  #L10e138.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.c` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L10e13c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10e142.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__LimitKt$c` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$c;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10e004.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a` @kind boolean;
  #L10e008.  if v0 == 0 then goto L10e02a;
  #L10e00c.  v0:= v8 @kind object;
  #L10e00e.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a`) v0 @kind object;
  #L10e012.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int`;
  #L10e016.  v2:= -2147483648I;
  #L10e01a.  v3:= v1 ^& v2 @kind int;
  #L10e01e.  if v3 == 0 then goto L10e02a;
  #L10e022.  v1:= v1 - v2 @kind int;
  #L10e024.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int` := v1;
  #L10e028.  goto L10e034;
  #L10e02a.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$c$a`;
  #L10e02e.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$c$a;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$c;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10e034.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.c` @type ^`java.lang.Object` @kind object;
  #L10e038.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10e03e.  v1:= temp @kind object;
  #L10e040.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int`;
  #L10e044.  v3:= 3I;
  #L10e046.  v4:= 2I;
  #L10e048.  v5:= 1I;
  #L10e04a.  if v2 == 0 then goto L10e08e;
  #L10e04e.  if v2 == v5 then goto L10e086;
  #L10e052.  if v2 == v4 then goto L10e072;
  #L10e056.  if v2 != v3 then goto L10e062;
  #L10e05a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e060.  goto L10e114;
  #L10e062.  v7:= new `java.lang.IllegalStateException`;
  #L10e066.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10e06a.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10e070.  throw v7;
  #L10e072.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.b` @type ^`java.lang.Object` @kind object;
  #L10e076.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.a` @type ^`java.lang.Object` @kind object;
  #L10e07a.  v2:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$c`) v2 @kind object;
  #L10e07e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e084.  goto L10e0dc;
  #L10e086.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e08c.  goto L10e0b6;
  #L10e08e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e094.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.a` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L10e098.  v8:= v8.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` @kind boolean;
  #L10e09c.  if v8 == 0 then goto L10e0bc;
  #L10e0a0.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.b` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10e0a4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int` := v5;
  #L10e0a8.  call temp:= `emit`(v8, v7, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10e0ae.  v7:= temp @kind object;
  #L10e0b0.  if v7 != v1 then goto L10e0b6;
  #L10e0b4.  return v1 @kind object;
  #L10e0b6.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e0ba.  return v7 @kind object;
  #L10e0bc.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.c` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L10e0c0.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.a` @type ^`java.lang.Object` := v6 @kind object;
  #L10e0c4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.b` @type ^`java.lang.Object` := v7 @kind object;
  #L10e0c8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int` := v4;
  #L10e0cc.  call temp:= `invoke`(v8, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10e0d2.  v8:= temp @kind object;
  #L10e0d4.  if v8 != v1 then goto L10e0da;
  #L10e0d8.  return v1 @kind object;
  #L10e0da.  v2:= v6 @kind object;
  #L10e0dc.  v8:= (`java.lang.Boolean`) v8 @kind object;
  #L10e0e0.  call temp:= `booleanValue`(v8) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L10e0e6.  v8:= temp;
  #L10e0e8.  if v8 != 0 then goto L10e11a;
  #L10e0ec.  v8:= v2.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.a` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L10e0f0.  v8.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v5 @kind boolean;
  #L10e0f4.  v8:= v2.`kotlinx.coroutines.flow.FlowKt__LimitKt$c.b` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10e0f8.  v2:= 0I;
  #L10e0fa.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L10e0fe.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L10e102.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$c$a.e` @type ^`int` := v3;
  #L10e106.  call temp:= `emit`(v8, v7, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10e10c.  v7:= temp @kind object;
  #L10e10e.  if v7 != v1 then goto L10e114;
  #L10e112.  return v1 @kind object;
  #L10e114.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e118.  return v7 @kind object;
  #L10e11a.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e11e.  return v7 @kind object;
}
