record `kotlinx.coroutines.flow.a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.d` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.a` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object) @signature `Lkotlinx/coroutines/flow/a;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L108c50.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/d;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108c56.  v0.`kotlinx.coroutines.flow.a.b` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L108c5a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.a` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object, `int` v3 , `kotlinx.coroutines.channels.BufferOverflow` v4 @kind object, `int` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v6 @kind object) @signature `Lkotlinx/coroutines/flow/a;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L108c6c.  v6:= v5 ^& 2;
  #L108c70.  if v6 == 0 then goto L108c78;
  #L108c74.  v2:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L108c78.  v6:= v5 ^& 4;
  #L108c7c.  if v6 == 0 then goto L108c82;
  #L108c80.  v3:= -2I;
  #L108c82.  v5:= v5 ^& 8;
  #L108c86.  if v5 == 0 then goto L108c8e;
  #L108c8a.  v4:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L108c8e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlinx/coroutines/flow/a;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108c94.  return @kind void;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.a` v4 @kind this, `kotlinx.coroutines.channels.ProducerScope` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/a;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L108b78.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.a$a` @kind boolean;
  #L108b7c.  if v0 == 0 then goto L108b9e;
  #L108b80.  v0:= v6 @kind object;
  #L108b82.  v0:= (`kotlinx.coroutines.flow.a$a`) v0 @kind object;
  #L108b86.  v1:= v0.`kotlinx.coroutines.flow.a$a.d` @type ^`int`;
  #L108b8a.  v2:= -2147483648I;
  #L108b8e.  v3:= v1 ^& v2 @kind int;
  #L108b92.  if v3 == 0 then goto L108b9e;
  #L108b96.  v1:= v1 - v2 @kind int;
  #L108b98.  v0.`kotlinx.coroutines.flow.a$a.d` @type ^`int` := v1;
  #L108b9c.  goto L108ba8;
  #L108b9e.  v0:= new `kotlinx.coroutines.flow.a$a`;
  #L108ba2.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/a$a;.<init>:(Lkotlinx/coroutines/flow/a;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L108ba8.  v6:= v0.`kotlinx.coroutines.flow.a$a.b` @type ^`java.lang.Object` @kind object;
  #L108bac.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108bb2.  v1:= temp @kind object;
  #L108bb4.  v2:= v0.`kotlinx.coroutines.flow.a$a.d` @type ^`int`;
  #L108bb8.  v3:= 1I;
  #L108bba.  if v2 == 0 then goto L108be2;
  #L108bbe.  if v2 != v3 then goto L108bd2;
  #L108bc2.  v5:= v0.`kotlinx.coroutines.flow.a$a.a` @type ^`java.lang.Object` @kind object;
  #L108bc6.  v5:= (`kotlinx.coroutines.channels.ProducerScope`) v5 @kind object;
  #L108bca.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108bd0.  goto L108bfe;
  #L108bd2.  v5:= new `java.lang.IllegalStateException`;
  #L108bd6.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L108bda.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L108be0.  throw v5;
  #L108be2.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108be8.  v0.`kotlinx.coroutines.flow.a$a.a` @type ^`java.lang.Object` := v5 @kind object;
  #L108bec.  v0.`kotlinx.coroutines.flow.a$a.d` @type ^`int` := v3;
  #L108bf0.  call temp:= `collectTo`(v4, v5, v0) @signature `Lkotlinx/coroutines/flow/d;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind super;
  #L108bf6.  v6:= temp @kind object;
  #L108bf8.  if v6 != v1 then goto L108bfe;
  #L108bfc.  return v1 @kind object;
  #L108bfe.  call temp:= `isClosedForSend`(v5) @signature `Lkotlinx/coroutines/channels/SendChannel;.isClosedForSend:()Z` @kind interface;
  #L108c04.  v5:= temp;
  #L108c06.  if v5 == 0 then goto L108c10;
  #L108c0a.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108c0e.  return v5 @kind object;
  #L108c10.  v5:= new `java.lang.IllegalStateException`;
  #L108c14.  v6:= "'awaitClose { yourCallbackOrListener.cancel() }' should be used in the end of callbackFlow block.\nOtherwise, a callback/listener may leak in case of external cancellation.\nSee callbackFlow API documentation for the details." @kind object;
  #L108c18.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L108c1e.  throw v5;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.a` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/a;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L108c30.  v0:= new `kotlinx.coroutines.flow.a`;
  #L108c34.  v1:= v2.`kotlinx.coroutines.flow.a.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L108c38.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/a;.<init>:(Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108c3e.  return v0 @kind object;
}
