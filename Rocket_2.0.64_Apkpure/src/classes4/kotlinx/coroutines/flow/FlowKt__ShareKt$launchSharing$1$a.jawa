record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a.a` @AccessFlag ;
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a.b` @AccessFlag SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L111318.  v0:= 2I;
  #L11131a.  call `<init>`(v1, v0, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L111320.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` v0 @kind this, `int` v1 , `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.a:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L111240.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L111246.  v1:= temp @kind object;
  #L111248.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11124e.  v1:= temp @kind object;
  #L111250.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a`) v1 @kind object;
  #L111254.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111258.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11125e.  v1:= temp @kind object;
  #L111260.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1112ec.  v0:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a`;
  #L1112f0.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1112f6.  v2:= (`java.lang.Number`) v2 @kind object;
  #L1112fa.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L111300.  v2:= temp;
  #L111302.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a.b` @type ^`int` := v2;
  #L111306.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L111274.  v1:= (`java.lang.Number`) v1 @kind object;
  #L111278.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L11127e.  v1:= temp;
  #L111280.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L111284.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.a:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11128a.  v1:= temp @kind object;
  #L11128c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1112a0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1112a6.  v0:= v1.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a.a` @type ^`int`;
  #L1112aa.  if v0 != 0 then goto L1112cc;
  #L1112ae.  call `throwOnFailure`(v2) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1112b4.  v2:= v1.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a.b` @type ^`int`;
  #L1112b8.  if v2 <= 0 then goto L1112c0;
  #L1112bc.  v2:= 1I;
  #L1112be.  goto L1112c2;
  #L1112c0.  v2:= 0I;
  #L1112c2.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L1112c8.  v2:= temp @kind object;
  #L1112ca.  return v2 @kind object;
  #L1112cc.  v2:= new `java.lang.IllegalStateException`;
  #L1112d0.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1112d4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1112da.  throw v2;
}
