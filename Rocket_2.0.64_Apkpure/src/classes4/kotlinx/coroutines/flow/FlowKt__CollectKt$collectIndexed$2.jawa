record `kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.a` @AccessFlag PRIVATE;
  `kotlin.jvm.functions.Function3` `kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2` v0 @kind this, `kotlin.jvm.functions.Function3` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CollectKt$collectIndexed$2;.<init>:(Lkotlin/jvm/functions/Function3;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10a7b0.  v0.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.b` @type ^`kotlin.jvm.functions.Function3` := v1 @kind object;
  #L10a7b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10a7ba.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CollectKt$collectIndexed$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L10a758.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.b` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L10a75c.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.a` @type ^`int`;
  #L10a760.  v2:= v1 + 1;
  #L10a764.  v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.a` @type ^`int` := v2;
  #L10a768.  if v1 < 0 then goto L10a790;
  #L10a76c.  call temp:= `boxInt`(v1) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxInt:(I)Ljava/lang/Integer;` @kind static;
  #L10a772.  v1:= temp @kind object;
  #L10a774.  call temp:= `invoke`(v0, v1, v4, v5) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10a77a.  v4:= temp @kind object;
  #L10a77c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10a782.  v5:= temp @kind object;
  #L10a784.  if v4 != v5 then goto L10a78a;
  #L10a788.  return v4 @kind object;
  #L10a78a.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10a78e.  return v4 @kind object;
  #L10a790.  v4:= new `java.lang.ArithmeticException`;
  #L10a794.  v5:= "Index overflow has happened" @kind object;
  #L10a798.  call `<init>`(v4, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10a79e.  throw v4;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__CollectKt$collectIndexed$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L10a6f4.  v0:= 4I;
  #L10a6f6.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10a6fc.  v0:= new `kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1`;
  #L10a700.  call `<init>`(v0, v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__CollectKt$collectIndexed$2$emit$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__CollectKt$collectIndexed$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10a706.  v0:= 5I;
  #L10a708.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10a70e.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.b` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L10a712.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.a` @type ^`int`;
  #L10a716.  v2:= v1 + 1;
  #L10a71a.  v3.`kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.a` @type ^`int` := v2;
  #L10a71e.  if v1 < 0 then goto L10a736;
  #L10a722.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L10a728.  v1:= temp @kind object;
  #L10a72a.  call temp:= `invoke`(v0, v1, v4, v5) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10a730.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10a734.  return v4 @kind object;
  #L10a736.  v4:= new `java.lang.ArithmeticException`;
  #L10a73a.  v5:= "Index overflow has happened" @kind object;
  #L10a73e.  call `<init>`(v4, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10a744.  throw v4;
}
