record `kotlinx.coroutines.flow.AbstractFlow` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.Flow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.AbstractFlow` v0 @kind this) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L108b10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L108b16.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.AbstractFlow` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L108a2c.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.AbstractFlow$a` @kind boolean;
  #L108a30.  if v0 == 0 then goto L108a52;
  #L108a34.  v0:= v7 @kind object;
  #L108a36.  v0:= (`kotlinx.coroutines.flow.AbstractFlow$a`) v0 @kind object;
  #L108a3a.  v1:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int`;
  #L108a3e.  v2:= -2147483648I;
  #L108a42.  v3:= v1 ^& v2 @kind int;
  #L108a46.  if v3 == 0 then goto L108a52;
  #L108a4a.  v1:= v1 - v2 @kind int;
  #L108a4c.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int` := v1;
  #L108a50.  goto L108a5c;
  #L108a52.  v0:= new `kotlinx.coroutines.flow.AbstractFlow$a`;
  #L108a56.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/AbstractFlow$a;.<init>:(Lkotlinx/coroutines/flow/AbstractFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L108a5c.  v7:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.b` @type ^`java.lang.Object` @kind object;
  #L108a60.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108a66.  v1:= temp @kind object;
  #L108a68.  v2:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int`;
  #L108a6c.  v3:= 1I;
  #L108a6e.  if v2 == 0 then goto L108a9a;
  #L108a72.  if v2 != v3 then goto L108a8a;
  #L108a76.  v6:= v0.`kotlinx.coroutines.flow.AbstractFlow$a.a` @type ^`java.lang.Object` @kind object;
  #L108a7a.  v6:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v6 @kind object;
  #L108a7e.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108a84.  goto L108aca;
  #L108a86.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L108a88.  goto L108ade;
  #L108a8a.  v6:= new `java.lang.IllegalStateException`;
  #L108a8e.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L108a92.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L108a98.  throw v6;
  #L108a9a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108aa0.  v7:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L108aa4.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L108aaa.  v2:= temp @kind object;
  #L108aac.  call `<init>`(v7, v6, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L108ab2.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.a` @type ^`java.lang.Object` := v7 @kind object;
  #L108ab6.  v0.`kotlinx.coroutines.flow.AbstractFlow$a.d` @type ^`int` := v3;
  #L108aba.  call temp:= `collectSafely`(v5, v7, v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L108ac0.  v6:= temp @kind object;
  #L108ac2.  if v6 != v1 then goto L108ac8;
  #L108ac6.  return v1 @kind object;
  #L108ac8.  v6:= v7 @kind object;
  #L108aca.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L108ad0.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108ad4.  return v6 @kind object;
  #L108ad6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L108ad8.  v4:= v7 @kind object;
  #L108ada.  v7:= v6 @kind object;
  #L108adc.  v6:= v4 @kind object;
  #L108ade.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L108ae4.  throw v7;
  catch `java.lang.Throwable` @[L108a7e..L108a84] goto L108a86;
  catch `java.lang.Throwable` @[L108ab2..L108ac2] goto L108ad6;
}
procedure `java.lang.Object` `collectSafely`(`kotlinx.coroutines.flow.FlowCollector` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.collectSafely:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
