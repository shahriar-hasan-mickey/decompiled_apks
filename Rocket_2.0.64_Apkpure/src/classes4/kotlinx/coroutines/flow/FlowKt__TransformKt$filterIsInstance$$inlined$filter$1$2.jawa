record `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L111f80.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L111f84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L111f8a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L111ed8.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1` @kind boolean;
  #L111edc.  if v0 == 0 then goto L111efe;
  #L111ee0.  v0:= v7 @kind object;
  #L111ee2.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`) v0 @kind object;
  #L111ee6.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int`;
  #L111eea.  v2:= -2147483648I;
  #L111eee.  v3:= v1 ^& v2 @kind int;
  #L111ef2.  if v3 == 0 then goto L111efe;
  #L111ef6.  v1:= v1 - v2 @kind int;
  #L111ef8.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int` := v1;
  #L111efc.  goto L111f08;
  #L111efe.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`;
  #L111f02.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111f08.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L111f0c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L111f12.  v1:= temp @kind object;
  #L111f14.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int`;
  #L111f18.  v3:= 1I;
  #L111f1a.  if v2 == 0 then goto L111f3a;
  #L111f1e.  if v2 != v3 then goto L111f2a;
  #L111f22.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111f28.  goto L111f6a;
  #L111f2a.  v6:= new `java.lang.IllegalStateException`;
  #L111f2e.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L111f32.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L111f38.  throw v6;
  #L111f3a.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111f40.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L111f44.  v2:= 3I;
  #L111f46.  v4:= "R" @kind object;
  #L111f4a.  call `reifiedOperationMarker`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L111f50.  v2:= instanceof @variable v6 @type ^`java.lang.Object` @kind boolean;
  #L111f54.  if v2 == 0 then goto L111f6a;
  #L111f58.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1.b` @type ^`int` := v3;
  #L111f5c.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L111f62.  v6:= temp @kind object;
  #L111f64.  if v6 != v1 then goto L111f6a;
  #L111f68.  return v1 @kind object;
  #L111f6a.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111f6e.  return v6 @kind object;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L111e78.  v0:= 4I;
  #L111e7a.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111e80.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1`;
  #L111e84.  call `<init>`(v0, v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111e8a.  v0:= 5I;
  #L111e8c.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111e92.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L111e96.  v1:= 3I;
  #L111e98.  v2:= "R" @kind object;
  #L111e9c.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L111ea2.  v1:= instanceof @variable v4 @type ^`java.lang.Object` @kind boolean;
  #L111ea6.  if v1 == 0 then goto L111ec0;
  #L111eaa.  v1:= 0I;
  #L111eac.  call `mark`(v1) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111eb2.  call temp:= `emit`(v0, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L111eb8.  v4:= 1I;
  #L111eba.  call `mark`(v4) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111ec0.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111ec4.  return v4 @kind object;
}
