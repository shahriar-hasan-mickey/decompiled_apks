record `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.<init>:(Lkotlinx/coroutines/flow/Flow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L112038.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L11203c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L112042.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L111ff8.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111ffc.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L112002.  v1:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2`;
  #L112006.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L11200c.  call temp:= `collect`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L112012.  v3:= temp @kind object;
  #L112014.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11201a.  v4:= temp @kind object;
  #L11201c.  if v3 != v4 then goto L112022;
  #L112020.  return v3 @kind object;
  #L112022.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L112026.  return v3 @kind object;
}
procedure `java.lang.Object` `collect$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;.collect$$forInline:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L111f9c.  v0:= 4I;
  #L111f9e.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111fa4.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$1`;
  #L111fa8.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111fae.  v0:= 5I;
  #L111fb0.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111fb6.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111fba.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L111fc0.  v1:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2`;
  #L111fc4.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filterIsInstance$$inlined$filter$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L111fca.  v3:= 0I;
  #L111fcc.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111fd2.  call temp:= `collect`(v0, v1, v4) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L111fd8.  v3:= 1I;
  #L111fda.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111fe0.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111fe4.  return v3 @kind object;
}
