record `kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L111d00.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L111d04.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L111d08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L111d0e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L111c10.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1` @kind boolean;
  #L111c14.  if v0 == 0 then goto L111c36;
  #L111c18.  v0:= v8 @kind object;
  #L111c1a.  v0:= (`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1`) v0 @kind object;
  #L111c1e.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L111c22.  v2:= -2147483648I;
  #L111c26.  v3:= v1 ^& v2 @kind int;
  #L111c2a.  if v3 == 0 then goto L111c36;
  #L111c2e.  v1:= v1 - v2 @kind int;
  #L111c30.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v1;
  #L111c34.  goto L111c40;
  #L111c36.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1`;
  #L111c3a.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111c40.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.a` @type ^`java.lang.Object` @kind object;
  #L111c44.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L111c4a.  v1:= temp @kind object;
  #L111c4c.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.b` @type ^`int`;
  #L111c50.  v3:= 2I;
  #L111c52.  v4:= 1I;
  #L111c54.  if v2 == 0 then goto L111c8c;
  #L111c58.  if v2 == v4 then goto L111c78;
  #L111c5c.  if v2 != v3 then goto L111c68;
  #L111c60.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111c66.  goto L111ce8;
  #L111c68.  v7:= new `java.lang.IllegalStateException`;
  #L111c6c.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L111c70.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L111c76.  throw v7;
  #L111c78.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.e` @type ^`java.lang.Object` @kind object;
  #L111c7c.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L111c80.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` @kind object;
  #L111c84.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111c8a.  goto L111cbc;
  #L111c8c.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111c92.  v8:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L111c96.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L111c9a.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L111c9e.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.e` @type ^`java.lang.Object` := v8 @kind object;
  #L111ca2.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v4;
  #L111ca6.  call temp:= `invoke`(v2, v7, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111cac.  v2:= temp @kind object;
  #L111cae.  if v2 != v1 then goto L111cb4;
  #L111cb2.  return v1 @kind object;
  #L111cb4.  v5:= v2 @kind object;
  #L111cb6.  v2:= v7 @kind object;
  #L111cb8.  v7:= v8 @kind object;
  #L111cba.  v8:= v5 @kind object;
  #L111cbc.  v8:= (`java.lang.Boolean`) v8 @kind object;
  #L111cc0.  call temp:= `booleanValue`(v8) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L111cc6.  v8:= temp;
  #L111cc8.  if v8 == 0 then goto L111ce8;
  #L111ccc.  v8:= 0I;
  #L111cce.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.d` @type ^`java.lang.Object` := v8 @kind object;
  #L111cd2.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.e` @type ^`java.lang.Object` := v8 @kind object;
  #L111cd6.  v0.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1.b` @type ^`int` := v3;
  #L111cda.  call temp:= `emit`(v7, v2, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L111ce0.  v7:= temp @kind object;
  #L111ce2.  if v7 != v1 then goto L111ce8;
  #L111ce6.  return v1 @kind object;
  #L111ce8.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111cec.  return v7 @kind object;
}
procedure `java.lang.Object` `emit$$forInline`(`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2;.emit$$forInline:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L111ba8.  v0:= 4I;
  #L111baa.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111bb0.  v0:= new `kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1`;
  #L111bb4.  call `<init>`(v0, v2, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111bba.  v0:= 5I;
  #L111bbc.  call `mark`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111bc2.  v0:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L111bc6.  v1:= v2.`kotlinx.coroutines.flow.FlowKt__TransformKt$filter$$inlined$unsafeTransform$1$2.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L111bca.  call temp:= `invoke`(v1, v3, v4) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111bd0.  v1:= temp @kind object;
  #L111bd2.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L111bd6.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L111bdc.  v1:= temp;
  #L111bde.  if v1 == 0 then goto L111bf8;
  #L111be2.  v1:= 0I;
  #L111be4.  call `mark`(v1) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111bea.  call temp:= `emit`(v0, v3, v4) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L111bf0.  v3:= 1I;
  #L111bf2.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L111bf8.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111bfc.  return v3 @kind object;
}
