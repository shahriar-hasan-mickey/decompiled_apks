record `kotlinx.coroutines.flow.FlowKt__EmittersKt$b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$BooleanRef` `kotlinx.coroutines.flow.FlowKt__EmittersKt$b.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__EmittersKt$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$b` v0 @kind this, `kotlin.jvm.internal.Ref$BooleanRef` v1 @kind object, `kotlinx.coroutines.flow.FlowCollector` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$b;.<init>:(Lkotlin/jvm/internal/Ref$BooleanRef;Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10ca70.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b.a` @type ^`kotlin.jvm.internal.Ref$BooleanRef` := v1 @kind object;
  #L10ca74.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b.b` @type ^`kotlinx.coroutines.flow.FlowCollector` := v2 @kind object;
  #L10ca78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10ca7e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__EmittersKt$b` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$b;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L10c9d0.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a` @kind boolean;
  #L10c9d4.  if v0 == 0 then goto L10c9f6;
  #L10c9d8.  v0:= v6 @kind object;
  #L10c9da.  v0:= (`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a`) v0 @kind object;
  #L10c9de.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a.c` @type ^`int`;
  #L10c9e2.  v2:= -2147483648I;
  #L10c9e6.  v3:= v1 ^& v2 @kind int;
  #L10c9ea.  if v3 == 0 then goto L10c9f6;
  #L10c9ee.  v1:= v1 - v2 @kind int;
  #L10c9f0.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a.c` @type ^`int` := v1;
  #L10c9f4.  goto L10ca00;
  #L10c9f6.  v0:= new `kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a`;
  #L10c9fa.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__EmittersKt$b$a;.<init>:(Lkotlinx/coroutines/flow/FlowKt__EmittersKt$b;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10ca00.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a.a` @type ^`java.lang.Object` @kind object;
  #L10ca04.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10ca0a.  v1:= temp @kind object;
  #L10ca0c.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a.c` @type ^`int`;
  #L10ca10.  v3:= 1I;
  #L10ca12.  if v2 == 0 then goto L10ca32;
  #L10ca16.  if v2 != v3 then goto L10ca22;
  #L10ca1a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10ca20.  goto L10ca58;
  #L10ca22.  v5:= new `java.lang.IllegalStateException`;
  #L10ca26.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10ca2a.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ca30.  throw v5;
  #L10ca32.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10ca38.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b.a` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L10ca3c.  v2:= 0I;
  #L10ca3e.  v6.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v2 @kind boolean;
  #L10ca42.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b.b` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10ca46.  v0.`kotlinx.coroutines.flow.FlowKt__EmittersKt$b$a.c` @type ^`int` := v3;
  #L10ca4a.  call temp:= `emit`(v6, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10ca50.  v5:= temp @kind object;
  #L10ca52.  if v5 != v1 then goto L10ca58;
  #L10ca56.  return v1 @kind object;
  #L10ca58.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10ca5c.  return v5 @kind object;
}
