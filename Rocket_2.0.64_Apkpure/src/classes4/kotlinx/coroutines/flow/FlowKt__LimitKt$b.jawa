record `kotlinx.coroutines.flow.FlowKt__LimitKt$b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$IntRef` `kotlinx.coroutines.flow.FlowKt__LimitKt$b.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$b.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$b` v0 @kind this, `kotlin.jvm.internal.Ref$IntRef` v1 @kind object, `int` v2 , `kotlinx.coroutines.flow.FlowCollector` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$b;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;ILkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10df28.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.a` @type ^`kotlin.jvm.internal.Ref$IntRef` := v1 @kind object;
  #L10df2c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.b` @type ^`int` := v2;
  #L10df30.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`kotlinx.coroutines.flow.FlowCollector` := v3 @kind object;
  #L10df34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10df3a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__LimitKt$b` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$b;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10de78.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a` @kind boolean;
  #L10de7c.  if v0 == 0 then goto L10de9e;
  #L10de80.  v0:= v7 @kind object;
  #L10de82.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a`) v0 @kind object;
  #L10de86.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a.c` @type ^`int`;
  #L10de8a.  v2:= -2147483648I;
  #L10de8e.  v3:= v1 ^& v2 @kind int;
  #L10de92.  if v3 == 0 then goto L10de9e;
  #L10de96.  v1:= v1 - v2 @kind int;
  #L10de98.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a.c` @type ^`int` := v1;
  #L10de9c.  goto L10dea8;
  #L10de9e.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$b$a`;
  #L10dea2.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$b$a;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$b;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10dea8.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a.a` @type ^`java.lang.Object` @kind object;
  #L10deac.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10deb2.  v1:= temp @kind object;
  #L10deb4.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a.c` @type ^`int`;
  #L10deb8.  v3:= 1I;
  #L10deba.  if v2 == 0 then goto L10deda;
  #L10debe.  if v2 != v3 then goto L10deca;
  #L10dec2.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10dec8.  goto L10df06;
  #L10deca.  v6:= new `java.lang.IllegalStateException`;
  #L10dece.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10ded2.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ded8.  throw v6;
  #L10deda.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10dee0.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.a` @type ^`kotlin.jvm.internal.Ref$IntRef` @kind object;
  #L10dee4.  v2:= v7.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L10dee8.  v4:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.b` @type ^`int`;
  #L10deec.  if v2 < v4 then goto L10df0c;
  #L10def0.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$b.c` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L10def4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$b$a.c` @type ^`int` := v3;
  #L10def8.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10defe.  v6:= temp @kind object;
  #L10df00.  if v6 != v1 then goto L10df06;
  #L10df04.  return v1 @kind object;
  #L10df06.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10df0a.  return v6 @kind object;
  #L10df0c.  v2:= v2 + v3 @kind int;
  #L10df0e.  v7.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v2;
  #L10df12.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10df16.  return v6 @kind object;
}
