record `kotlinx.coroutines.flow.c` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.ChannelFlow` @kind class {
  `kotlinx.coroutines.channels.ReceiveChannel` `kotlinx.coroutines.flow.c.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.flow.c.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.c.consumed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.flow.c.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L108f64.  v0:= constclass @type ^`kotlinx.coroutines.flow.c` @kind object;
  #L108f68.  v1:= "consumed" @kind object;
  #L108f6c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L108f72.  v0:= temp @kind object;
  #L108f74.  `@@kotlinx.coroutines.flow.c.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L108f78.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.c` v0 @kind this, `kotlinx.coroutines.channels.ReceiveChannel` v1 @kind object, `boolean` v2 , `kotlin.coroutines.CoroutineContext` v3 @kind object, `int` v4 , `kotlinx.coroutines.channels.BufferOverflow` v5 @kind object) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L108f8c.  call `<init>`(v0, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.<init>:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108f92.  v0.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` := v1 @kind object;
  #L108f96.  v0.`kotlinx.coroutines.flow.c.b` @type ^`boolean` := v2 @kind boolean;
  #L108f9a.  v1:= 0I;
  #L108f9c.  v0.`kotlinx.coroutines.flow.c.consumed` @type ^`int` := v1;
  #L108fa0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.c` v6 @kind this, `kotlinx.coroutines.channels.ReceiveChannel` v7 @kind object, `boolean` v8 , `kotlin.coroutines.CoroutineContext` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object, `int` v12 , `kotlin.jvm.internal.DefaultConstructorMarker` v13 @kind object) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L108fb4.  v13:= v12 ^& 4;
  #L108fb8.  if v13 == 0 then goto L108fc0;
  #L108fbc.  v9:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L108fc0.  v3:= v9 @kind object;
  #L108fc2.  v9:= v12 ^& 8;
  #L108fc6.  if v9 == 0 then goto L108fd0;
  #L108fca.  v10:= -3I;
  #L108fcc.  v4:= -3I;
  #L108fce.  goto L108fd2;
  #L108fd0.  v4:= v10;
  #L108fd2.  v9:= v12 ^& 16;
  #L108fd6.  if v9 == 0 then goto L108fde;
  #L108fda.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L108fde.  v5:= v11 @kind object;
  #L108fe0.  v0:= v6 @kind object;
  #L108fe2.  v1:= v7 @kind object;
  #L108fe4.  v2:= v8;
  #L108fe6.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108fec.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.flow.c` v2 @kind this) @signature `Lkotlinx/coroutines/flow/c;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L109000.  v0:= v2.`kotlinx.coroutines.flow.c.b` @type ^`boolean` @kind boolean;
  #L109004.  if v0 == 0 then goto L10903c;
  #L109008.  v0:= `@@kotlinx.coroutines.flow.c.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L10900c.  v1:= 1I;
  #L10900e.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.getAndSet:(Ljava/lang/Object;I)I` @kind virtual;
  #L109014.  v0:= temp;
  #L109016.  if v0 != 0 then goto L10901c;
  #L10901a.  goto L10901e;
  #L10901c.  v1:= 0I;
  #L10901e.  if v1 == 0 then goto L109024;
  #L109022.  goto L10903c;
  #L109024.  v0:= new `java.lang.IllegalStateException`;
  #L109028.  v1:= "ReceiveChannel.consumeAsFlow can be collected just once" @kind object;
  #L10902c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L109032.  v1:= temp @kind object;
  #L109034.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10903a.  throw v0;
  #L10903c.  return @kind void;
}
procedure `java.lang.String` `additionalToStringProps`(`kotlinx.coroutines.flow.c` v2 @kind this) @signature `Lkotlinx/coroutines/flow/c;.additionalToStringProps:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L108eb0.  v0:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108eb4.  v1:= "channel=" @kind object;
  #L108eb8.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L108ebe.  v0:= temp @kind object;
  #L108ec0.  return v0 @kind object;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.c` v2 @kind this, `kotlinx.coroutines.flow.FlowCollector` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/c;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L108e10.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L108e14.  v1:= -3I;
  #L108e16.  if v0 != v1 then goto L108e44;
  #L108e1a.  call `b`(v2) @signature `Lkotlinx/coroutines/flow/c;.b:()V` @kind direct;
  #L108e20.  v0:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108e24.  v1:= v2.`kotlinx.coroutines.flow.c.b` @type ^`boolean` @kind boolean;
  #L108e28.  call temp:= `a`(v3, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ChannelsKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L108e2e.  v3:= temp @kind object;
  #L108e30.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108e36.  v4:= temp @kind object;
  #L108e38.  if v3 != v4 then goto L108e3e;
  #L108e3c.  return v3 @kind object;
  #L108e3e.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108e42.  return v3 @kind object;
  #L108e44.  call temp:= `collect`(v2, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind super;
  #L108e4a.  v3:= temp @kind object;
  #L108e4c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108e52.  v4:= temp @kind object;
  #L108e54.  if v3 != v4 then goto L108e5a;
  #L108e58.  return v3 @kind object;
  #L108e5a.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108e5e.  return v3 @kind object;
}
procedure `java.lang.Object` `collectTo`(`kotlinx.coroutines.flow.c` v2 @kind this, `kotlinx.coroutines.channels.ProducerScope` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/c;.collectTo:(Lkotlinx/coroutines/channels/ProducerScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L108e70.  v0:= new `kotlinx.coroutines.flow.internal.SendingCollector`;
  #L108e74.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/flow/internal/SendingCollector;.<init>:(Lkotlinx/coroutines/channels/SendChannel;)V` @kind direct;
  #L108e7a.  v3:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108e7e.  v1:= v2.`kotlinx.coroutines.flow.c.b` @type ^`boolean` @kind boolean;
  #L108e82.  call temp:= `a`(v0, v3, v1, v4) @signature `Lkotlinx/coroutines/flow/FlowKt__ChannelsKt;.a:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L108e88.  v3:= temp @kind object;
  #L108e8a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108e90.  v4:= temp @kind object;
  #L108e92.  if v3 != v4 then goto L108e98;
  #L108e96.  return v3 @kind object;
  #L108e98.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108e9c.  return v3 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.ChannelFlow` `create`(`kotlinx.coroutines.flow.c` v7 @kind this, `kotlin.coroutines.CoroutineContext` v8 @kind object, `int` v9 , `kotlinx.coroutines.channels.BufferOverflow` v10 @kind object) @signature `Lkotlinx/coroutines/flow/c;.create:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/internal/ChannelFlow;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L108f38.  v6:= new `kotlinx.coroutines.flow.c`;
  #L108f3c.  v1:= v7.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108f40.  v2:= v7.`kotlinx.coroutines.flow.c.b` @type ^`boolean` @kind boolean;
  #L108f44.  v0:= v6 @kind object;
  #L108f46.  v3:= v8 @kind object;
  #L108f48.  v4:= v9;
  #L108f4a.  v5:= v10 @kind object;
  #L108f4c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)V` @kind direct;
  #L108f52.  return v6 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `dropChannelOperators`(`kotlinx.coroutines.flow.c` v9 @kind this) @signature `Lkotlinx/coroutines/flow/c;.dropChannelOperators:()Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L108f04.  v8:= new `kotlinx.coroutines.flow.c`;
  #L108f08.  v1:= v9.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108f0c.  v2:= v9.`kotlinx.coroutines.flow.c.b` @type ^`boolean` @kind boolean;
  #L108f10.  v3:= 0I;
  #L108f12.  v4:= 0I;
  #L108f14.  v5:= 0I;
  #L108f16.  v6:= 28I;
  #L108f1a.  v7:= 0I;
  #L108f1c.  v0:= v8 @kind object;
  #L108f1e.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/c;.<init>:(Lkotlinx/coroutines/channels/ReceiveChannel;ZLkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L108f24.  return v8 @kind object;
}
procedure `kotlinx.coroutines.channels.ReceiveChannel` `produceImpl`(`kotlinx.coroutines.flow.c` v2 @kind this, `kotlinx.coroutines.CoroutineScope` v3 @kind object) @signature `Lkotlinx/coroutines/flow/c;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L108ed4.  call `b`(v2) @signature `Lkotlinx/coroutines/flow/c;.b:()V` @kind direct;
  #L108eda.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelFlow.capacity` @type ^`int`;
  #L108ede.  v1:= -3I;
  #L108ee0.  if v0 != v1 then goto L108eea;
  #L108ee4.  v3:= v2.`kotlinx.coroutines.flow.c.a` @type ^`kotlinx.coroutines.channels.ReceiveChannel` @kind object;
  #L108ee8.  goto L108ef2;
  #L108eea.  call temp:= `produceImpl`(v2, v3) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlow;.produceImpl:(Lkotlinx/coroutines/CoroutineScope;)Lkotlinx/coroutines/channels/ReceiveChannel;` @kind super;
  #L108ef0.  v3:= temp @kind object;
  #L108ef2.  return v3 @kind object;
}
