record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @AccessFlag ;
  `kotlinx.coroutines.flow.SharingStarted` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.MutableSharedFlow` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `kotlinx.coroutines.flow.SharingStarted` v1 @kind object, `kotlinx.coroutines.flow.Flow` v2 @kind object, `kotlinx.coroutines.flow.MutableSharedFlow` v3 @kind object, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.<init>:(Lkotlinx/coroutines/flow/SharingStarted;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L111690.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` := v1 @kind object;
  #L111694.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` := v2 @kind object;
  #L111698.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` := v3 @kind object;
  #L11169c.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L1116a0.  v1:= 2I;
  #L1116a2.  call `<init>`(v0, v1, v5) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L1116a8.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L111660.  v7:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1`;
  #L111664.  v1:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L111668.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11166c.  v3:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L111670.  v4:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` @kind object;
  #L111674.  v0:= v7 @kind object;
  #L111676.  v5:= v8 @kind object;
  #L111678.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.<init>:(Lkotlinx/coroutines/flow/SharingStarted;Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11167e.  return v7 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1114e0.  v1:= (`kotlinx.coroutines.CoroutineScope`) v1 @kind object;
  #L1114e4.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L1114e8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L1114ee.  v1:= temp @kind object;
  #L1114f0.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v0 @kind this, `kotlinx.coroutines.CoroutineScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invoke:(Lkotlinx/coroutines/CoroutineScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L111504.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11150a.  v1:= temp @kind object;
  #L11150c.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1`) v1 @kind object;
  #L111510.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L111514.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L11151a.  v1:= temp @kind object;
  #L11151c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L111530.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L111536.  v0:= temp @kind object;
  #L111538.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int`;
  #L11153c.  v2:= 4I;
  #L11153e.  v3:= 3I;
  #L111540.  v4:= 2I;
  #L111542.  v5:= 1I;
  #L111544.  if v1 == 0 then goto L11157a;
  #L111548.  if v1 == v5 then goto L111572;
  #L11154c.  if v1 == v4 then goto L11156a;
  #L111550.  if v1 == v3 then goto L111572;
  #L111554.  if v1 != v2 then goto L11155a;
  #L111558.  goto L111572;
  #L11155a.  v8:= new `java.lang.IllegalStateException`;
  #L11155e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L111562.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L111568.  throw v8;
  #L11156a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111570.  goto L1115e8;
  #L111572.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111578.  goto L11164a;
  #L11157a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L111580.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L111584.  v1:= `@@kotlinx.coroutines.flow.SharingStarted.Companion` @type ^`kotlinx.coroutines.flow.SharingStarted$Companion` @kind object;
  #L111588.  call temp:= `getEagerly`(v1) @signature `Lkotlinx/coroutines/flow/SharingStarted$Companion;.getEagerly:()Lkotlinx/coroutines/flow/SharingStarted;` @kind virtual;
  #L11158e.  v6:= temp @kind object;
  #L111590.  if v8 != v6 then goto L1115ae;
  #L111594.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L111598.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L11159c.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v5;
  #L1115a0.  call temp:= `collect`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1115a6.  v8:= temp @kind object;
  #L1115a8.  if v8 != v0 then goto L11164a;
  #L1115ac.  return v0 @kind object;
  #L1115ae.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L1115b2.  call temp:= `getLazily`(v1) @signature `Lkotlinx/coroutines/flow/SharingStarted$Companion;.getLazily:()Lkotlinx/coroutines/flow/SharingStarted;` @kind virtual;
  #L1115b8.  v1:= temp @kind object;
  #L1115ba.  v5:= 0I;
  #L1115bc.  if v8 != v1 then goto L111602;
  #L1115c0.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L1115c4.  call temp:= `getSubscriptionCount`(v8) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @kind interface;
  #L1115ca.  v8:= temp @kind object;
  #L1115cc.  v1:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$a`;
  #L1115d0.  call `<init>`(v1, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$a;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1115d6.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v4;
  #L1115da.  call temp:= `first`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/FlowKt;.first:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L1115e0.  v8:= temp @kind object;
  #L1115e2.  if v8 != v0 then goto L1115e8;
  #L1115e6.  return v0 @kind object;
  #L1115e8.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L1115ec.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L1115f0.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v3;
  #L1115f4.  call temp:= `collect`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1115fa.  v8:= temp @kind object;
  #L1115fc.  if v8 != v0 then goto L11164a;
  #L111600.  return v0 @kind object;
  #L111602.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.b` @type ^`kotlinx.coroutines.flow.SharingStarted` @kind object;
  #L111606.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L11160a.  call temp:= `getSubscriptionCount`(v1) @signature `Lkotlinx/coroutines/flow/MutableSharedFlow;.getSubscriptionCount:()Lkotlinx/coroutines/flow/StateFlow;` @kind interface;
  #L111610.  v1:= temp @kind object;
  #L111612.  call temp:= `command`(v8, v1) @signature `Lkotlinx/coroutines/flow/SharingStarted;.command:(Lkotlinx/coroutines/flow/StateFlow;)Lkotlinx/coroutines/flow/Flow;` @kind interface;
  #L111618.  v8:= temp @kind object;
  #L11161a.  call temp:= `distinctUntilChanged`(v8) @signature `Lkotlinx/coroutines/flow/FlowKt;.distinctUntilChanged:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L111620.  v8:= temp @kind object;
  #L111622.  v1:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`;
  #L111626.  v3:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.c` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L11162a.  v4:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.d` @type ^`kotlinx.coroutines.flow.MutableSharedFlow` @kind object;
  #L11162e.  v6:= v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.e` @type ^`java.lang.Object` @kind object;
  #L111632.  call `<init>`(v1, v3, v4, v6, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/MutableSharedFlow;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L111638.  v7.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.a` @type ^`int` := v2;
  #L11163c.  call temp:= `collectLatest`(v8, v1, v7) @signature `Lkotlinx/coroutines/flow/FlowKt;.collectLatest:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L111642.  v8:= temp @kind object;
  #L111644.  if v8 != v0 then goto L11164a;
  #L111648.  return v0 @kind object;
  #L11164a.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11164e.  return v8 @kind object;
}
