record `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10e2c4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10e2c8.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @type ^`int` := v2;
  #L10e2cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10e2d2.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1` v6 @kind this, `kotlinx.coroutines.flow.FlowCollector` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10e1ec.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1` @kind boolean;
  #L10e1f0.  if v0 == 0 then goto L10e212;
  #L10e1f4.  v0:= v8 @kind object;
  #L10e1f6.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L10e1fa.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10e1fe.  v2:= -2147483648I;
  #L10e202.  v3:= v1 ^& v2 @kind int;
  #L10e206.  if v3 == 0 then goto L10e212;
  #L10e20a.  v1:= v1 - v2 @kind int;
  #L10e20c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L10e210.  goto L10e21c;
  #L10e212.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1`;
  #L10e216.  call `<init>`(v0, v6, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10e21c.  v8:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L10e220.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10e226.  v1:= temp @kind object;
  #L10e228.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10e22c.  v3:= 1I;
  #L10e22e.  if v2 == 0 then goto L10e256;
  #L10e232.  if v2 != v3 then goto L10e246;
  #L10e236.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10e23a.  v7:= (`kotlinx.coroutines.flow.FlowCollector`) v7 @kind object;
  #L10e23e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e244.  goto L10e296;
  #L10e246.  v7:= new `java.lang.IllegalStateException`;
  #L10e24a.  v8:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10e24e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10e254.  throw v7;
  #L10e256.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10e25c.  v8:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L10e260.  call `<init>`(v8) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L10e266.  v2:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10e26a.  v4:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$e`;
  #L10e26e.  v5:= v6.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.b` @type ^`int`;
  #L10e272.  call `<init>`(v4, v8, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$e;.<init>:(Lkotlin/jvm/internal/Ref$IntRef;ILkotlinx/coroutines/flow/FlowCollector;)V` @kind direct;
  #L10e278.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v7 @kind object;
  #L10e27c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L10e280.  call temp:= `collect`(v2, v4, v0) @signature `Lkotlinx/coroutines/flow/Flow;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L10e286.  v7:= temp @kind object;
  #L10e288.  if v7 != v1 then goto L10e296;
  #L10e28c.  return v1 @kind object;
  #L10e28e.  v8:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L10e290.  call `checkOwnership`(v8, v7) @signature `Lkotlinx/coroutines/flow/internal/FlowExceptions_commonKt;.checkOwnership:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/FlowCollector;)V` @kind static;
  #L10e296.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10e29a.  return v7 @kind object;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L10e23e..L10e244] goto L10e28e;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L10e266..L10e288] goto L10e28e;
}
