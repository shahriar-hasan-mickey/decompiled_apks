record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.Flow` @kind interface {
  `kotlinx.coroutines.flow.Flow` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function3` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.Flow` v1 @kind object, `kotlin.jvm.functions.Function3` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/jvm/functions/Function3;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10d418.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` := v1 @kind object;
  #L10d41c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function3` := v2 @kind object;
  #L10d420.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10d426.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` v5 @kind this, `kotlinx.coroutines.flow.FlowCollector` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10d324.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1` @kind boolean;
  #L10d328.  if v0 == 0 then goto L10d34a;
  #L10d32c.  v0:= v7 @kind object;
  #L10d32e.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L10d332.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10d336.  v2:= -2147483648I;
  #L10d33a.  v3:= v1 ^& v2 @kind int;
  #L10d33e.  if v3 == 0 then goto L10d34a;
  #L10d342.  v1:= v1 - v2 @kind int;
  #L10d344.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.b` @type ^`int` := v1;
  #L10d348.  goto L10d354;
  #L10d34a.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1`;
  #L10d34e.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L10d354.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.a` @type ^`java.lang.Object` @kind object;
  #L10d358.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L10d35e.  v1:= temp @kind object;
  #L10d360.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.b` @type ^`int`;
  #L10d364.  v3:= 2I;
  #L10d366.  v4:= 1I;
  #L10d368.  if v2 == 0 then goto L10d3a4;
  #L10d36c.  if v2 == v4 then goto L10d38c;
  #L10d370.  if v2 != v3 then goto L10d37c;
  #L10d374.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d37a.  goto L10d402;
  #L10d37c.  v6:= new `java.lang.IllegalStateException`;
  #L10d380.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L10d384.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10d38a.  throw v6;
  #L10d38c.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` @kind object;
  #L10d390.  v6:= (`kotlinx.coroutines.flow.FlowCollector`) v6 @kind object;
  #L10d394.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` @kind object;
  #L10d398.  v2:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1`) v2 @kind object;
  #L10d39c.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d3a2.  goto L10d3ca;
  #L10d3a4.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L10d3aa.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.a` @type ^`kotlinx.coroutines.flow.Flow` @kind object;
  #L10d3ae.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v5 @kind object;
  #L10d3b2.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v6 @kind object;
  #L10d3b6.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.b` @type ^`int` := v4;
  #L10d3ba.  call temp:= `catchImpl`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.catchImpl:(Lkotlinx/coroutines/flow/Flow;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L10d3c0.  v7:= temp @kind object;
  #L10d3c2.  if v7 != v1 then goto L10d3c8;
  #L10d3c6.  return v1 @kind object;
  #L10d3c8.  v2:= v5 @kind object;
  #L10d3ca.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L10d3ce.  if v7 == 0 then goto L10d402;
  #L10d3d2.  v2:= v2.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L10d3d6.  v4:= 0I;
  #L10d3d8.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.d` @type ^`java.lang.Object` := v4 @kind object;
  #L10d3dc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.e` @type ^`java.lang.Object` := v4 @kind object;
  #L10d3e0.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.b` @type ^`int` := v3;
  #L10d3e4.  v3:= 6I;
  #L10d3e6.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10d3ec.  call temp:= `invoke`(v2, v6, v7, v0) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10d3f2.  v6:= temp @kind object;
  #L10d3f4.  v7:= 7I;
  #L10d3f6.  call `mark`(v7) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L10d3fc.  if v6 != v1 then goto L10d402;
  #L10d400.  return v1 @kind object;
  #L10d402.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L10d406.  return v6 @kind object;
}
