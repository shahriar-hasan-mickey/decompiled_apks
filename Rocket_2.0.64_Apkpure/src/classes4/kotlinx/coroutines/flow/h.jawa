record `kotlinx.coroutines.flow.h` @kind class @AccessFlag FINAL_SYNTHETIC {
}
procedure `kotlinx.coroutines.flow.Flow` `a`(`kotlinx.coroutines.flow.Flow` v2 @kind object, `int` v3 ) @signature `Lkotlinx/coroutines/flow/h;.a:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L10ac10.  v0:= 0I;
  #L10ac12.  v1:= 2I;
  #L10ac14.  call temp:= `buffer$default`(v2, v3, v0, v1, v0) @signature `Lkotlinx/coroutines/flow/FlowKt;.buffer$default:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10ac1a.  v2:= temp @kind object;
  #L10ac1c.  return v2 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `b`(`kotlinx.coroutines.flow.Flow` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object) @signature `Lkotlinx/coroutines/flow/h;.b:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L10ac30.  v0:= 1I;
  #L10ac32.  v1:= 0I;
  #L10ac34.  v2:= -1I;
  #L10ac36.  if v10 >= 0 then goto L10ac4a;
  #L10ac3a.  v3:= -2I;
  #L10ac3c.  if v10 == v3 then goto L10ac4a;
  #L10ac40.  if v10 != v2 then goto L10ac46;
  #L10ac44.  goto L10ac4a;
  #L10ac46.  v3:= 0I;
  #L10ac48.  goto L10ac4c;
  #L10ac4a.  v3:= 1I;
  #L10ac4c.  if v3 == 0 then goto L10acca;
  #L10ac50.  if v10 != v2 then goto L10ac60;
  #L10ac54.  v3:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L10ac58.  if v11 != v3 then goto L10ac5e;
  #L10ac5c.  goto L10ac60;
  #L10ac5e.  v0:= 0I;
  #L10ac60.  if v0 == 0 then goto L10acb2;
  #L10ac64.  if v10 != v2 then goto L10ac72;
  #L10ac68.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L10ac6c.  v6:= v11 @kind object;
  #L10ac6e.  v5:= 0I;
  #L10ac70.  goto L10ac76;
  #L10ac72.  v5:= v10;
  #L10ac74.  v6:= v11 @kind object;
  #L10ac76.  v10:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.internal.FusibleFlow` @kind boolean;
  #L10ac7a.  if v10 == 0 then goto L10ac9a;
  #L10ac7e.  v2:= v9 @kind object;
  #L10ac80.  v2:= (`kotlinx.coroutines.flow.internal.FusibleFlow`) v2 @kind object;
  #L10ac84.  v3:= 0I;
  #L10ac86.  v9:= 1I;
  #L10ac88.  v7:= 0I;
  #L10ac8a.  v4:= v5;
  #L10ac8c.  v5:= v6 @kind object;
  #L10ac8e.  v6:= v9;
  #L10ac90.  call temp:= `fuse$default`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/internal/FusibleFlow$DefaultImpls;.fuse$default:(Lkotlinx/coroutines/flow/internal/FusibleFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10ac96.  v9:= temp @kind object;
  #L10ac98.  goto L10acb0;
  #L10ac9a.  v10:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl`;
  #L10ac9e.  v4:= 0I;
  #L10aca0.  v7:= 2I;
  #L10aca2.  v8:= 0I;
  #L10aca4.  v2:= v10 @kind object;
  #L10aca6.  v3:= v9 @kind object;
  #L10aca8.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L10acae.  v9:= v10 @kind object;
  #L10acb0.  return v9 @kind object;
  #L10acb2.  v9:= new `java.lang.IllegalArgumentException`;
  #L10acb6.  v10:= "CONFLATED capacity cannot be used with non-default onBufferOverflow" @kind object;
  #L10acba.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L10acc0.  v10:= temp @kind object;
  #L10acc2.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10acc8.  throw v9;
  #L10acca.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L10acd0.  v9:= temp @kind object;
  #L10acd2.  v10:= "Buffer size should be non-negative, BUFFERED, or CONFLATED, but was " @kind object;
  #L10acd6.  call temp:= `stringPlus`(v10, v9) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L10acdc.  v9:= temp @kind object;
  #L10acde.  v10:= new `java.lang.IllegalArgumentException`;
  #L10ace2.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L10ace8.  v9:= temp @kind object;
  #L10acea.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10acf0.  throw v10;
}
procedure `kotlinx.coroutines.flow.Flow` `c`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `int` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/flow/h;.c:(Lkotlinx/coroutines/flow/Flow;IILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L10abbc.  v2:= v2 ^& 1;
  #L10abc0.  if v2 == 0 then goto L10abc6;
  #L10abc4.  v1:= -2I;
  #L10abc6.  call temp:= `buffer`(v0, v1) @signature `Lkotlinx/coroutines/flow/FlowKt;.buffer:(Lkotlinx/coroutines/flow/Flow;I)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10abcc.  v0:= temp @kind object;
  #L10abce.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `d`(`kotlinx.coroutines.flow.Flow` v0 @kind object, `int` v1 , `kotlinx.coroutines.channels.BufferOverflow` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/h;.d:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L10abe0.  v4:= v3 ^& 1;
  #L10abe4.  if v4 == 0 then goto L10abea;
  #L10abe8.  v1:= -2I;
  #L10abea.  v3:= v3 ^& 2;
  #L10abee.  if v3 == 0 then goto L10abf6;
  #L10abf2.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L10abf6.  call temp:= `buffer`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt;.buffer:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10abfc.  v0:= temp @kind object;
  #L10abfe.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `e`(`kotlinx.coroutines.flow.Flow` v1 @kind object) @signature `Lkotlinx/coroutines/flow/h;.e:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L10ad04.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.flow.CancellableFlow` @kind boolean;
  #L10ad08.  if v0 == 0 then goto L10ad0e;
  #L10ad0c.  goto L10ad1a;
  #L10ad0e.  v0:= new `kotlinx.coroutines.flow.b`;
  #L10ad12.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/b;.<init>:(Lkotlinx/coroutines/flow/Flow;)V` @kind direct;
  #L10ad18.  v1:= v0 @kind object;
  #L10ad1a.  return v1 @kind object;
}
procedure `void` `f`(`kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/flow/h;.f:(Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L10adb4.  v0:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L10adb8.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L10adbe.  v0:= temp @kind object;
  #L10adc0.  if v0 != 0 then goto L10adc8;
  #L10adc4.  v0:= 1I;
  #L10adc6.  goto L10adca;
  #L10adc8.  v0:= 0I;
  #L10adca.  if v0 == 0 then goto L10add0;
  #L10adce.  return @kind void;
  #L10add0.  v0:= "Flow context cannot contain job in it. Had " @kind object;
  #L10add4.  call temp:= `stringPlus`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L10adda.  v1:= temp @kind object;
  #L10addc.  v0:= new `java.lang.IllegalArgumentException`;
  #L10ade0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L10ade6.  v1:= temp @kind object;
  #L10ade8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10adee.  throw v0;
}
procedure `kotlinx.coroutines.flow.Flow` `g`(`kotlinx.coroutines.flow.Flow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/h;.g:(Lkotlinx/coroutines/flow/Flow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L10ad2c.  v0:= -1I;
  #L10ad2e.  v1:= 0I;
  #L10ad30.  v2:= 2I;
  #L10ad32.  call temp:= `buffer$default`(v3, v0, v1, v2, v1) @signature `Lkotlinx/coroutines/flow/FlowKt;.buffer$default:(Lkotlinx/coroutines/flow/Flow;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10ad38.  v3:= temp @kind object;
  #L10ad3a.  return v3 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `h`(`kotlinx.coroutines.flow.Flow` v8 @kind object, `kotlin.coroutines.CoroutineContext` v9 @kind object) @signature `Lkotlinx/coroutines/flow/h;.h:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L10ad4c.  call `f`(v9) @signature `Lkotlinx/coroutines/flow/h;.f:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L10ad52.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L10ad56.  call temp:= `areEqual`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L10ad5c.  v0:= temp;
  #L10ad5e.  if v0 == 0 then goto L10ad64;
  #L10ad62.  goto L10ada2;
  #L10ad64.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.flow.internal.FusibleFlow` @kind boolean;
  #L10ad68.  if v0 == 0 then goto L10ad86;
  #L10ad6c.  v1:= v8 @kind object;
  #L10ad6e.  v1:= (`kotlinx.coroutines.flow.internal.FusibleFlow`) v1 @kind object;
  #L10ad72.  v3:= 0I;
  #L10ad74.  v4:= 0I;
  #L10ad76.  v5:= 6I;
  #L10ad78.  v6:= 0I;
  #L10ad7a.  v2:= v9 @kind object;
  #L10ad7c.  call temp:= `fuse$default`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/FusibleFlow$DefaultImpls;.fuse$default:(Lkotlinx/coroutines/flow/internal/FusibleFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L10ad82.  v8:= temp @kind object;
  #L10ad84.  goto L10ada2;
  #L10ad86.  v7:= new `kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl`;
  #L10ad8a.  v3:= 0I;
  #L10ad8c.  v4:= 0I;
  #L10ad8e.  v5:= 12I;
  #L10ad92.  v6:= 0I;
  #L10ad94.  v0:= v7 @kind object;
  #L10ad96.  v1:= v8 @kind object;
  #L10ad98.  v2:= v9 @kind object;
  #L10ad9a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowOperatorImpl;.<init>:(Lkotlinx/coroutines/flow/Flow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L10ada0.  v8:= v7 @kind object;
  #L10ada2.  return v8 @kind object;
}
