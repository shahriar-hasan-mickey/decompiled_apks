record `kotlinx.coroutines.flow.b$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.FlowCollector` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.FlowCollector` `kotlinx.coroutines.flow.b$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.b$a` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object) @signature `Lkotlinx/coroutines/flow/b$a;.<init>:(Lkotlinx/coroutines/flow/FlowCollector;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L108d9c.  v0.`kotlinx.coroutines.flow.b$a.a` @type ^`kotlinx.coroutines.flow.FlowCollector` := v1 @kind object;
  #L108da0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L108da6.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.b$a` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/b$a;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L108cf8.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.b$a$a` @kind boolean;
  #L108cfc.  if v0 == 0 then goto L108d1e;
  #L108d00.  v0:= v6 @kind object;
  #L108d02.  v0:= (`kotlinx.coroutines.flow.b$a$a`) v0 @kind object;
  #L108d06.  v1:= v0.`kotlinx.coroutines.flow.b$a$a.c` @type ^`int`;
  #L108d0a.  v2:= -2147483648I;
  #L108d0e.  v3:= v1 ^& v2 @kind int;
  #L108d12.  if v3 == 0 then goto L108d1e;
  #L108d16.  v1:= v1 - v2 @kind int;
  #L108d18.  v0.`kotlinx.coroutines.flow.b$a$a.c` @type ^`int` := v1;
  #L108d1c.  goto L108d28;
  #L108d1e.  v0:= new `kotlinx.coroutines.flow.b$a$a`;
  #L108d22.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/b$a$a;.<init>:(Lkotlinx/coroutines/flow/b$a;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L108d28.  v6:= v0.`kotlinx.coroutines.flow.b$a$a.a` @type ^`java.lang.Object` @kind object;
  #L108d2c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L108d32.  v1:= temp @kind object;
  #L108d34.  v2:= v0.`kotlinx.coroutines.flow.b$a$a.c` @type ^`int`;
  #L108d38.  v3:= 1I;
  #L108d3a.  if v2 == 0 then goto L108d5a;
  #L108d3e.  if v2 != v3 then goto L108d4a;
  #L108d42.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108d48.  goto L108d84;
  #L108d4a.  v5:= new `java.lang.IllegalStateException`;
  #L108d4e.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L108d52.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L108d58.  throw v5;
  #L108d5a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L108d60.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L108d66.  v6:= temp @kind object;
  #L108d68.  call `ensureActive`(v6) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L108d6e.  v6:= v4.`kotlinx.coroutines.flow.b$a.a` @type ^`kotlinx.coroutines.flow.FlowCollector` @kind object;
  #L108d72.  v0.`kotlinx.coroutines.flow.b$a$a.c` @type ^`int` := v3;
  #L108d76.  call temp:= `emit`(v6, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L108d7c.  v5:= temp @kind object;
  #L108d7e.  if v5 != v1 then goto L108d84;
  #L108d82.  return v1 @kind object;
  #L108d84.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L108d88.  return v5 @kind object;
}
