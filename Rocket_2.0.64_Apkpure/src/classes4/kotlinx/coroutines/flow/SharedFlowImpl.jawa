record `kotlinx.coroutines.flow.SharedFlowImpl` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.flow.internal.AbstractSharedFlow` @kind class, `kotlinx.coroutines.flow.MutableSharedFlow` @kind interface, `kotlinx.coroutines.flow.CancellableFlow` @kind interface, `kotlinx.coroutines.flow.internal.FusibleFlow` @kind interface {
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.e` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.f` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.flow.SharedFlowImpl.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.flow.SharedFlowImpl.h` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.i` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.j` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.k` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 , `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.<init>:(IILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L117d70.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.<init>:()V` @kind direct;
  #L117d76.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int` := v1;
  #L117d7a.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int` := v2;
  #L117d7e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v3 @kind object;
  #L117d82.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.SharedFlowSlot` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.a:(Lkotlinx/coroutines/flow/SharedFlowSlot;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11728c.  v0:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L117290.  call temp:= `intercepted`(v8) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L117296.  v1:= temp @kind object;
  #L117298.  v2:= 1I;
  #L11729a.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L1172a0.  call `initCancellability`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L1172a6.  @monitorenter v6
  #L1172a8.  call temp:= `access$tryPeekLocked`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$tryPeekLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @kind static;
  #L1172ae.  v1:= temp @kind wide;
  #L1172b0.  v3:= 0L;
  #L1172b4.  v5:= lcmp(v1, v3);
  #L1172b8.  if v5 >= 0 then goto L1172c2;
  #L1172bc.  v7.`kotlinx.coroutines.flow.SharedFlowSlot.cont` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L1172c0.  goto L1172d8;
  #L1172c2.  v7:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1172c6.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1172ca.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1172d0.  v7:= temp @kind object;
  #L1172d2.  call `resumeWith`(v0, v7) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1172d8.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1172dc.  @monitorexit v6
  #L1172de.  call temp:= `getResult`(v0) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L1172e4.  v0:= temp @kind object;
  #L1172e6.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1172ec.  v1:= temp @kind object;
  #L1172ee.  if v0 != v1 then goto L1172f8;
  #L1172f2.  call `probeCoroutineSuspended`(v8) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L1172f8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L1172fe.  v8:= temp @kind object;
  #L117300.  if v0 != v8 then goto L117306;
  #L117304.  return v0 @kind object;
  #L117306.  return v7 @kind object;
  #L117308.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11730a.  @monitorexit v6
  #L11730c.  throw v7;
  catch `java.lang.Throwable` @[L1172a8..L1172dc] goto L117308;
}
procedure `java.lang.Object` `access$awaitValue`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.SharedFlowSlot` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$awaitValue:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/SharedFlowSlot;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117254.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.a:(Lkotlinx/coroutines/flow/SharedFlowSlot;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L11725a.  v0:= temp @kind object;
  #L11725c.  return v0 @kind object;
}
procedure `void` `access$cancelEmitter`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.SharedFlowImpl$a` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$cancelEmitter:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117d94.  call `b`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @kind direct;
  #L117d9a.  return @kind void;
}
procedure `java.lang.Object` `access$emitSuspend`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$emitSuspend:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117270.  call temp:= `h`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.h:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L117276.  v0:= temp @kind object;
  #L117278.  return v0 @kind object;
}
procedure `void` `access$enqueueLocked`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$enqueueLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117dac.  call `i`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Ljava/lang/Object;)V` @kind direct;
  #L117db2.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `access$findSlotsToResumeLocked`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlin.coroutines.Continuation`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$findSlotsToResumeLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1178c8.  call temp:= `j`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L1178ce.  v0:= temp @kind object;
  #L1178d0.  return v0 @kind object;
}
procedure `int` `access$getBufferCapacity$p`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getBufferCapacity$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1171c0.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L1171c4.  return v0;
}
procedure `long` `access$getHead`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getHead:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L117c48.  call temp:= `l`(v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117c4e.  v0:= temp @kind wide;
  #L117c50.  return v0 @kind wide;
}
procedure `int` `access$getQueueSize$p`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getQueueSize$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1171d8.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L1171dc.  return v0;
}
procedure `int` `access$getTotalSize`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getTotalSize:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1171f0.  call temp:= `p`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:()I` @kind direct;
  #L1171f6.  v0:= temp;
  #L1171f8.  return v0;
}
procedure `void` `access$setQueueSize$p`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$setQueueSize$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117dc4.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v1;
  #L117dc8.  return @kind void;
}
procedure `boolean` `access$tryEmitLocked`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$tryEmitLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L11701c.  call temp:= `r`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Ljava/lang/Object;)Z` @kind direct;
  #L117022.  v0:= temp;
  #L117024.  return v0;
}
procedure `long` `access$tryPeekLocked`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.SharedFlowSlot` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$tryPeekLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L117c64.  call temp:= `t`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @kind direct;
  #L117c6a.  v0:= temp @kind wide;
  #L117c6c.  return v0 @kind wide;
}
procedure `void` `b`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl$a` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.b:(Lkotlinx/coroutines/flow/SharedFlowImpl$a;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L117ddc.  @monitorenter v5
  #L117dde.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L117de2.  call temp:= `l`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117de8.  v2:= temp @kind wide;
  #L117dea.  v4:= lcmp(v0, v2);
  #L117dee.  if v4 >= 0 then goto L117df6;
  #L117df2.  @monitorexit v5
  #L117df4.  return @kind void;
  #L117df6.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117dfa.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117e00.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L117e04.  call temp:= `access$getBufferAt`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L117e0a.  v1:= temp @kind object;
  #L117e0c.  if v1 == v6 then goto L117e14;
  #L117e10.  @monitorexit v5
  #L117e12.  return @kind void;
  #L117e14.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl$a.b` @type ^`long` @kind wide;
  #L117e18.  v6:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L117e1c.  call `access$setBufferAt`(v0, v1, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117e22.  call `c`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:()V` @kind direct;
  #L117e28.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L117e2c.  @monitorexit v5
  #L117e2e.  return @kind void;
  #L117e30.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L117e32.  @monitorexit v5
  #L117e34.  throw v6;
  catch `java.lang.Throwable` @[L117dde..L117dea] goto L117e30;
  catch `java.lang.Throwable` @[L117df6..L117e0c] goto L117e30;
  catch `java.lang.Throwable` @[L117e14..L117e2c] goto L117e30;
}
procedure `void` `c`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L117e64.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L117e68.  if v0 != 0 then goto L117e78;
  #L117e6c.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117e70.  v1:= 1I;
  #L117e72.  if v0 > v1 then goto L117e78;
  #L117e76.  return @kind void;
  #L117e78.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117e7c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117e82.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117e86.  if v1 <= 0 then goto L117ede;
  #L117e8a.  call temp:= `l`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117e90.  v1:= temp @kind wide;
  #L117e92.  call temp:= `p`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:()I` @kind direct;
  #L117e98.  v3:= temp;
  #L117e9a.  v3:= (`long`) v3 @kind i2l;
  #L117e9c.  v1:= v1 + v3 @kind long;
  #L117e9e.  v3:= 1L;
  #L117ea2.  v1:= v1 - v3 @kind long;
  #L117ea4.  call temp:= `access$getBufferAt`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L117eaa.  v1:= temp @kind object;
  #L117eac.  v2:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L117eb0.  if v1 != v2 then goto L117ede;
  #L117eb4.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117eb8.  v1:= v1 + -1;
  #L117ebc.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v1;
  #L117ec0.  call temp:= `l`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117ec6.  v1:= temp @kind wide;
  #L117ec8.  call temp:= `p`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:()I` @kind direct;
  #L117ece.  v3:= temp;
  #L117ed0.  v3:= (`long`) v3 @kind i2l;
  #L117ed2.  v1:= v1 + v3 @kind long;
  #L117ed4.  v3:= 0I;
  #L117ed6.  call `access$setBufferAt`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117edc.  goto L117e82;
  #L117ede.  return @kind void;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind object, `kotlinx.coroutines.flow.FlowCollector` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11732c.  v0:= instanceof @variable v10 @type ^`kotlinx.coroutines.flow.SharedFlowImpl$b` @kind boolean;
  #L117330.  if v0 == 0 then goto L117352;
  #L117334.  v0:= v10 @kind object;
  #L117336.  v0:= (`kotlinx.coroutines.flow.SharedFlowImpl$b`) v0 @kind object;
  #L11733a.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int`;
  #L11733e.  v2:= -2147483648I;
  #L117342.  v3:= v1 ^& v2 @kind int;
  #L117346.  if v3 == 0 then goto L117352;
  #L11734a.  v1:= v1 - v2 @kind int;
  #L11734c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v1;
  #L117350.  goto L11735c;
  #L117352.  v0:= new `kotlinx.coroutines.flow.SharedFlowImpl$b`;
  #L117356.  call `<init>`(v0, v8, v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl$b;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L11735c.  v10:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.e` @type ^`java.lang.Object` @kind object;
  #L117360.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L117366.  v1:= temp @kind object;
  #L117368.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int`;
  #L11736c.  v3:= 3I;
  #L11736e.  v4:= 2I;
  #L117370.  v5:= 1I;
  #L117372.  if v2 == 0 then goto L117416;
  #L117376.  if v2 == v5 then goto L1173e8;
  #L11737a.  if v2 == v4 then goto L1173c0;
  #L11737e.  if v2 != v3 then goto L1173b0;
  #L117382.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L117386.  v8:= (`kotlinx.coroutines.Job`) v8 @kind object;
  #L11738a.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L11738e.  v9:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v9 @kind object;
  #L117392.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L117396.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L11739a.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L11739e.  v5:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v5 @kind object;
  #L1173a2.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L1173a8.  v10:= v2 @kind object;
  #L1173aa.  v2:= v8 @kind object;
  #L1173ac.  v8:= v5 @kind object;
  #L1173ae.  goto L117472;
  #L1173b0.  v8:= new `java.lang.IllegalStateException`;
  #L1173b4.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L1173b8.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1173be.  throw v8;
  #L1173c0.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L1173c4.  v8:= (`kotlinx.coroutines.Job`) v8 @kind object;
  #L1173c8.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L1173cc.  v9:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v9 @kind object;
  #L1173d0.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L1173d4.  v2:= (`kotlinx.coroutines.flow.FlowCollector`) v2 @kind object;
  #L1173d8.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L1173dc.  v5:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v5 @kind object;
  #L1173e0.  goto L1173a2;
  #L1173e2.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1173e4.  goto L1174e2;
  #L1173e8.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L1173ec.  v9:= v8 @kind object;
  #L1173ee.  v9:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v9 @kind object;
  #L1173f2.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L1173f6.  v8:= (`kotlinx.coroutines.flow.FlowCollector`) v8 @kind object;
  #L1173fa.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L1173fe.  v2:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v2 @kind object;
  #L117402.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L117408.  v10:= v8 @kind object;
  #L11740a.  v8:= v2 @kind object;
  #L11740c.  goto L11745a;
  #L11740e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L117410.  v5:= v2 @kind object;
  #L117412.  goto L1174e2;
  #L117416.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L11741c.  call temp:= `allocateSlot`(v8) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.allocateSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind virtual;
  #L117422.  v10:= temp @kind object;
  #L117424.  v10:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v10 @kind object;
  #L117428.  v2:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.SubscribedFlowCollector` @kind boolean;
  #L11742c.  if v2 == 0 then goto L117454;
  #L117430.  v2:= v9 @kind object;
  #L117432.  v2:= (`kotlinx.coroutines.flow.SubscribedFlowCollector`) v2 @kind object;
  #L117436.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v8 @kind object;
  #L11743a.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v9 @kind object;
  #L11743e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v10 @kind object;
  #L117442.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v5;
  #L117446.  call temp:= `onSubscription`(v2, v0) @signature `Lkotlinx/coroutines/flow/SubscribedFlowCollector;.onSubscription:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L11744c.  v2:= temp @kind object;
  #L11744e.  if v2 != v1 then goto L117454;
  #L117452.  return v1 @kind object;
  #L117454.  v7:= v10 @kind object;
  #L117456.  v10:= v9 @kind object;
  #L117458.  v9:= v7 @kind object;
  #L11745a.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L117460.  v2:= temp @kind object;
  #L117462.  v5:= `@@kotlinx.coroutines.Job.Key` @type ^`kotlinx.coroutines.Job$Key` @kind object;
  #L117466.  call temp:= `get`(v2, v5) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L11746c.  v2:= temp @kind object;
  #L11746e.  v2:= (`kotlinx.coroutines.Job`) v2 @kind object;
  #L117472.  call temp:= `u`(v8, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:(Lkotlinx/coroutines/flow/SharedFlowSlot;)Ljava/lang/Object;` @kind direct;
  #L117478.  v5:= temp @kind object;
  #L11747a.  v6:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L11747e.  if v5 == v6 then goto L1174b0;
  #L117482.  if v2 != 0 then goto L117488;
  #L117486.  goto L11748e;
  #L117488.  call `ensureActive`(v2) @signature `Lkotlinx/coroutines/JobKt;.ensureActive:(Lkotlinx/coroutines/Job;)V` @kind static;
  #L11748e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v8 @kind object;
  #L117492.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v10 @kind object;
  #L117496.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v9 @kind object;
  #L11749a.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` := v2 @kind object;
  #L11749e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v3;
  #L1174a2.  call temp:= `emit`(v10, v5, v0) @signature `Lkotlinx/coroutines/flow/FlowCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L1174a8.  v5:= temp @kind object;
  #L1174aa.  if v5 != v1 then goto L117472;
  #L1174ae.  return v1 @kind object;
  #L1174b0.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.a` @type ^`java.lang.Object` := v8 @kind object;
  #L1174b4.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.b` @type ^`java.lang.Object` := v10 @kind object;
  #L1174b8.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.c` @type ^`java.lang.Object` := v9 @kind object;
  #L1174bc.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.d` @type ^`java.lang.Object` := v2 @kind object;
  #L1174c0.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$b.g` @type ^`int` := v4;
  #L1174c4.  call temp:= `a`(v8, v9, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.a:(Lkotlinx/coroutines/flow/SharedFlowSlot;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L1174ca.  v5:= temp @kind object;
  #L1174cc.  if v5 != v1 then goto L117472;
  #L1174d0.  return v1 @kind object;
  #L1174d2.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1174d4.  v5:= v8 @kind object;
  #L1174d6.  v8:= v10 @kind object;
  #L1174d8.  goto L1174e2;
  #L1174da.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1174dc.  v5:= v8 @kind object;
  #L1174de.  v8:= v9 @kind object;
  #L1174e0.  v9:= v10 @kind object;
  #L1174e2.  call `freeSlot`(v5, v9) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.freeSlot:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;)V` @kind virtual;
  #L1174e8.  throw v8;
  catch `java.lang.Throwable` @[L1173a2..L1173a8] goto L1173e2;
  catch `java.lang.Throwable` @[L117402..L117408] goto L11740e;
  catch `java.lang.Throwable` @[L117428..L11744e] goto L1174da;
  catch `java.lang.Throwable` @[L11745a..L1174cc] goto L1174d2;
}
procedure `void` `e`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this, `long` v10 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.e:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L117ef0.  call temp:= `access$getNCollectors`(v9) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L117ef6.  v0:= temp;
  #L117ef8.  if v0 != 0 then goto L117efe;
  #L117efc.  goto L117f42;
  #L117efe.  call temp:= `access$getSlots`(v9) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L117f04.  v0:= temp @kind object;
  #L117f06.  if v0 != 0 then goto L117f0c;
  #L117f0a.  goto L117f42;
  #L117f0c.  v1:= 0I;
  #L117f0e.  v2:= length @variable v0;
  #L117f10.  if v1 >= v2 then goto L117f42;
  #L117f14.  v3:= v0[v1] @kind object;
  #L117f18.  v1:= v1 + 1;
  #L117f1c.  if v3 == 0 then goto L117f10;
  #L117f20.  v3:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v3 @kind object;
  #L117f24.  v4:= v3.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L117f28.  v6:= 0L;
  #L117f2c.  v8:= lcmp(v4, v6);
  #L117f30.  if v8 < 0 then goto L117f10;
  #L117f34.  v6:= lcmp(v4, v10);
  #L117f38.  if v6 >= 0 then goto L117f10;
  #L117f3c.  v3.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` := v10 @kind wide;
  #L117f40.  goto L117f10;
  #L117f42.  v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v10 @kind wide;
  #L117f46.  return @kind void;
}
procedure `void` `f`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.f:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L117f58.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117f5c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117f62.  call temp:= `l`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117f68.  v1:= temp @kind wide;
  #L117f6a.  v3:= 0I;
  #L117f6c.  call `access$setBufferAt`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117f72.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117f76.  v0:= v0 + -1;
  #L117f7a.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v0;
  #L117f7e.  call temp:= `l`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117f84.  v0:= temp @kind wide;
  #L117f86.  v2:= 1L;
  #L117f8a.  v0:= v0 + v2 @kind long;
  #L117f8c.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117f90.  v4:= lcmp(v2, v0);
  #L117f94.  if v4 >= 0 then goto L117f9c;
  #L117f98.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` := v0 @kind wide;
  #L117f9c.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117fa0.  v4:= lcmp(v2, v0);
  #L117fa4.  if v4 >= 0 then goto L117fae;
  #L117fa8.  call `e`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.e:(J)V` @kind direct;
  #L117fae.  return @kind void;
}
procedure `java.lang.Object` `g`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.g:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L117544.  call temp:= `tryEmit`(v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @kind virtual;
  #L11754a.  v0:= temp;
  #L11754c.  if v0 == 0 then goto L117556;
  #L117550.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L117554.  return v1 @kind object;
  #L117556.  call temp:= `h`(v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.h:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L11755c.  v1:= temp @kind object;
  #L11755e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L117564.  v2:= temp @kind object;
  #L117566.  if v1 != v2 then goto L11756c;
  #L11756a.  return v1 @kind object;
  #L11756c.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L117570.  return v1 @kind object;
}
procedure `void` `getLastReplayedLocked$annotations`() @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getLastReplayedLocked$annotations:()V` @AccessFlag PROTECTED_STATIC_SYNTHETIC {
    temp;

  #L118018.  return @kind void;
}
procedure `java.lang.Object` `h`(`kotlinx.coroutines.flow.SharedFlowImpl` v10 @kind this, `java.lang.Object` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.h:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1175a0.  v6:= new `kotlinx.coroutines.CancellableContinuationImpl`;
  #L1175a4.  call temp:= `intercepted`(v12) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L1175aa.  v0:= temp @kind object;
  #L1175ac.  v7:= 1I;
  #L1175ae.  call `<init>`(v6, v0, v7) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L1175b4.  call `initCancellability`(v6) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.initCancellability:()V` @kind virtual;
  #L1175ba.  v8:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L1175be.  @monitorenter v10
  #L1175c0.  call temp:= `access$tryEmitLocked`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$tryEmitLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @kind static;
  #L1175c6.  v0:= temp;
  #L1175c8.  if v0 == 0 then goto L1175ee;
  #L1175cc.  v11:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1175d0.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1175d4.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1175da.  v11:= temp @kind object;
  #L1175dc.  call `resumeWith`(v6, v11) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1175e2.  call temp:= `access$findSlotsToResumeLocked`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$findSlotsToResumeLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L1175e8.  v11:= temp @kind object;
  #L1175ea.  v0:= 0I;
  #L1175ec.  goto L117642;
  #L1175ee.  v9:= new `kotlinx.coroutines.flow.SharedFlowImpl$a`;
  #L1175f2.  call temp:= `access$getHead`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getHead:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @kind static;
  #L1175f8.  v0:= temp @kind wide;
  #L1175fa.  call temp:= `access$getTotalSize`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getTotalSize:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L117600.  v2:= temp;
  #L117602.  v2:= (`long`) v2 @kind i2l;
  #L117604.  v2:= v2 + v0 @kind long;
  #L117606.  v0:= v9 @kind object;
  #L117608.  v1:= v10 @kind object;
  #L11760a.  v4:= v11 @kind object;
  #L11760c.  v5:= v6 @kind object;
  #L11760e.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl$a;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;JLjava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L117614.  call `access$enqueueLocked`(v10, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$enqueueLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @kind static;
  #L11761a.  call temp:= `access$getQueueSize$p`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getQueueSize$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L117620.  v11:= temp;
  #L117622.  v11:= v11 + v7 @kind int;
  #L117624.  call `access$setQueueSize$p`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$setQueueSize$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @kind static;
  #L11762a.  call temp:= `access$getBufferCapacity$p`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$getBufferCapacity$p:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L117630.  v11:= temp;
  #L117632.  if v11 != 0 then goto L11763e;
  #L117636.  call temp:= `access$findSlotsToResumeLocked`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.access$findSlotsToResumeLocked:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L11763c.  v8:= temp @kind object;
  #L11763e.  v11:= v8 @kind object;
  #L117640.  v0:= v9 @kind object;
  #L117642.  @monitorexit v10
  #L117644.  if v0 != 0 then goto L11764a;
  #L117648.  goto L117650;
  #L11764a.  call `disposeOnCancellation`(v6, v0) @signature `Lkotlinx/coroutines/CancellableContinuationKt;.disposeOnCancellation:(Lkotlinx/coroutines/CancellableContinuation;Lkotlinx/coroutines/DisposableHandle;)V` @kind static;
  #L117650.  v0:= 0I;
  #L117652.  v1:= length @variable v11;
  #L117654.  if v0 >= v1 then goto L11767e;
  #L117658.  v2:= v11[v0] @kind object;
  #L11765c.  v0:= v0 + 1;
  #L117660.  if v2 != 0 then goto L117666;
  #L117664.  goto L117654;
  #L117666.  v3:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L11766a.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L11766e.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L117674.  v3:= temp @kind object;
  #L117676.  call `resumeWith`(v2, v3) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L11767c.  goto L117654;
  #L11767e.  call temp:= `getResult`(v6) @signature `Lkotlinx/coroutines/CancellableContinuationImpl;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L117684.  v11:= temp @kind object;
  #L117686.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11768c.  v0:= temp @kind object;
  #L11768e.  if v11 != v0 then goto L117698;
  #L117692.  call `probeCoroutineSuspended`(v12) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L117698.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L11769e.  v12:= temp @kind object;
  #L1176a0.  if v11 != v12 then goto L1176a6;
  #L1176a4.  return v11 @kind object;
  #L1176a6.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1176aa.  return v11 @kind object;
  #L1176ac.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1176ae.  @monitorexit v10
  #L1176b0.  throw v11;
  catch `java.lang.Throwable` @[L1175c0..L11763e] goto L1176ac;
}
procedure `void` `i`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L117fc0.  call temp:= `p`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:()I` @kind direct;
  #L117fc6.  v0:= temp;
  #L117fc8.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117fcc.  v2:= 2I;
  #L117fce.  if v1 != 0 then goto L117fe0;
  #L117fd2.  v1:= 0I;
  #L117fd4.  v3:= 0I;
  #L117fd6.  call temp:= `q`(v6, v1, v3, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L117fdc.  v1:= temp @kind object;
  #L117fde.  goto L117ff4;
  #L117fe0.  v3:= length @variable v1;
  #L117fe2.  if v0 < v3 then goto L117ff4;
  #L117fe6.  v3:= length @variable v1;
  #L117fe8.  v3:= v3 * 2;
  #L117fec.  call temp:= `q`(v6, v1, v0, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L117ff2.  v1:= temp @kind object;
  #L117ff4.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117ffa.  v2:= temp @kind wide;
  #L117ffc.  v4:= (`long`) v0 @kind i2l;
  #L117ffe.  v2:= v2 + v4 @kind long;
  #L118000.  call `access$setBufferAt`(v1, v2, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L118006.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `j`(`kotlinx.coroutines.flow.SharedFlowImpl` v11 @kind this, `kotlin.coroutines.Continuation`[] v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1178e4.  v0:= length @variable v12;
  #L1178e6.  call temp:= `access$getNCollectors`(v11) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L1178ec.  v1:= temp;
  #L1178ee.  if v1 != 0 then goto L1178f4;
  #L1178f2.  goto L11797a;
  #L1178f4.  call temp:= `access$getSlots`(v11) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L1178fa.  v1:= temp @kind object;
  #L1178fc.  if v1 != 0 then goto L117902;
  #L117900.  goto L11797a;
  #L117902.  v2:= 0I;
  #L117904.  v3:= length @variable v1;
  #L117906.  if v2 >= v3 then goto L11797a;
  #L11790a.  v4:= v1[v2] @kind object;
  #L11790e.  v2:= v2 + 1;
  #L117912.  if v4 == 0 then goto L117906;
  #L117916.  v4:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v4 @kind object;
  #L11791a.  v5:= v4.`kotlinx.coroutines.flow.SharedFlowSlot.cont` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L11791e.  if v5 != 0 then goto L117924;
  #L117922.  goto L117906;
  #L117924.  call temp:= `t`(v11, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @kind direct;
  #L11792a.  v6:= temp @kind wide;
  #L11792c.  v8:= 0L;
  #L117930.  v10:= lcmp(v6, v8);
  #L117934.  if v10 >= 0 then goto L11793a;
  #L117938.  goto L117906;
  #L11793a.  v6:= length @variable v12;
  #L11793c.  if v0 < v6 then goto L117962;
  #L117940.  v6:= length @variable v12;
  #L117942.  v7:= 2I;
  #L117944.  v6:= v6 * 2;
  #L117948.  call temp:= `max`(v7, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L11794e.  v6:= temp;
  #L117950.  call temp:= `copyOf`(v12, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L117956.  v12:= temp @kind object;
  #L117958.  v6:= "copyOf(this, newSize)" @kind object;
  #L11795c.  call `checkNotNullExpressionValue`(v12, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L117962.  v6:= v12 @kind object;
  #L117964.  v6:= (`kotlin.coroutines.Continuation`[]) v6 @kind object;
  #L117968.  v7:= v0 + 1;
  #L11796c.  v6[v0]:= v5 @kind object;
  #L117970.  v0:= 0I;
  #L117972.  v4.`kotlinx.coroutines.flow.SharedFlowSlot.cont` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L117976.  v0:= v7;
  #L117978.  goto L117906;
  #L11797a.  v12:= (`kotlin.coroutines.Continuation`[]) v12 @kind object;
  #L11797e.  return v12 @kind object;
}
procedure `long` `k`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L117c80.  call temp:= `l`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117c86.  v0:= temp @kind wide;
  #L117c88.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117c8c.  v2:= (`long`) v2 @kind i2l;
  #L117c8e.  v0:= v0 + v2 @kind long;
  #L117c90.  return v0 @kind wide;
}
procedure `long` `l`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L117ca4.  v0:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117ca8.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117cac.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L117cb2.  v0:= temp @kind wide;
  #L117cb4.  return v0 @kind wide;
}
procedure `java.lang.Object` `m`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this, `long` v2 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.m:(J)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L11770c.  v0:= v1.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117710.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117716.  call temp:= `access$getBufferAt`(v0, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L11771c.  v2:= temp @kind object;
  #L11771e.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.SharedFlowImpl$a` @kind boolean;
  #L117722.  if v3 == 0 then goto L11772e;
  #L117726.  v2:= (`kotlinx.coroutines.flow.SharedFlowImpl$a`) v2 @kind object;
  #L11772a.  v2:= v2.`kotlinx.coroutines.flow.SharedFlowImpl$a.c` @type ^`java.lang.Object` @kind object;
  #L11772e.  return v2 @kind object;
}
procedure `long` `n`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L117cc8.  call temp:= `l`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117cce.  v0:= temp @kind wide;
  #L117cd0.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117cd4.  v2:= (`long`) v2 @kind i2l;
  #L117cd6.  v0:= v0 + v2 @kind long;
  #L117cd8.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117cdc.  v2:= (`long`) v2 @kind i2l;
  #L117cde.  v0:= v0 + v2 @kind long;
  #L117ce0.  return v0 @kind wide;
}
procedure `int` `o`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11720c.  call temp:= `l`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117212.  v0:= temp @kind wide;
  #L117214.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117218.  v2:= (`long`) v2 @kind i2l;
  #L11721a.  v0:= v0 + v2 @kind long;
  #L11721c.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117220.  v0:= v0 - v2 @kind long;
  #L117222.  v1:= (`int`) v0 @kind l2i;
  #L117224.  return v1;
}
procedure `int` `p`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L117238.  v0:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L11723c.  v1:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117240.  v0:= v0 + v1 @kind int;
  #L117242.  return v0;
}
procedure `java.lang.Object`[] `q`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1177d8.  v0:= 0I;
  #L1177da.  if v9 <= 0 then goto L1177e2;
  #L1177de.  v1:= 1I;
  #L1177e0.  goto L1177e4;
  #L1177e2.  v1:= 0I;
  #L1177e4.  if v1 == 0 then goto L11781e;
  #L1177e8.  v9:= new `java.lang.Object`[v9];
  #L1177ec.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] := v9 @kind object;
  #L1177f0.  if v7 != 0 then goto L1177f6;
  #L1177f4.  return v9 @kind object;
  #L1177f6.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L1177fc.  v1:= temp @kind wide;
  #L1177fe.  if v0 >= v8 then goto L11781c;
  #L117802.  v3:= v0 + 1;
  #L117806.  v4:= (`long`) v0 @kind i2l;
  #L117808.  v4:= v4 + v1 @kind long;
  #L11780a.  call temp:= `access$getBufferAt`(v7, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L117810.  v0:= temp @kind object;
  #L117812.  call `access$setBufferAt`(v9, v4, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117818.  v0:= v3;
  #L11781a.  goto L1177fe;
  #L11781c.  return v9 @kind object;
  #L11781e.  v7:= new `java.lang.IllegalStateException`;
  #L117822.  v8:= "Buffer size overflow" @kind object;
  #L117826.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L11782c.  v8:= temp @kind object;
  #L11782e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L117834.  throw v7;
}
procedure `boolean` `r`(`kotlinx.coroutines.flow.SharedFlowImpl` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1170ac.  call temp:= `getNCollectors`(v14) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L1170b2.  v0:= temp;
  #L1170b4.  if v0 != 0 then goto L1170c2;
  #L1170b8.  call temp:= `s`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)Z` @kind direct;
  #L1170be.  v15:= temp;
  #L1170c0.  return v15;
  #L1170c2.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L1170c6.  v1:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L1170ca.  v2:= 1I;
  #L1170cc.  if v0 < v1 then goto L117106;
  #L1170d0.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L1170d4.  v3:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L1170d8.  v5:= lcmp(v0, v3);
  #L1170dc.  if v5 > 0 then goto L117106;
  #L1170e0.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L1170e4.  v1:= `@@kotlinx.coroutines.flow.SharedFlowImpl$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L1170e8.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1170ee.  v0:= temp;
  #L1170f0.  v0:= v1[v0];
  #L1170f4.  if v0 == v2 then goto L117102;
  #L1170f8.  v1:= 2I;
  #L1170fa.  if v0 == v1 then goto L117100;
  #L1170fe.  goto L117106;
  #L117100.  return v2;
  #L117102.  v15:= 0I;
  #L117104.  return v15;
  #L117106.  call `i`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Ljava/lang/Object;)V` @kind direct;
  #L11710c.  v15:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117110.  v15:= v15 + v2 @kind int;
  #L117112.  v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v15;
  #L117116.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L11711a.  if v15 <= v0 then goto L117124;
  #L11711e.  call `f`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.f:()V` @kind direct;
  #L117124.  call temp:= `o`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()I` @kind direct;
  #L11712a.  v15:= temp;
  #L11712c.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L117130.  if v15 <= v0 then goto L11715c;
  #L117134.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117138.  v3:= 1L;
  #L11713c.  v6:= v0 + v3 @kind long;
  #L117140.  v8:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117144.  call temp:= `k`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @kind direct;
  #L11714a.  v10:= temp @kind wide;
  #L11714c.  call temp:= `n`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:()J` @kind direct;
  #L117152.  v12:= temp @kind wide;
  #L117154.  v5:= v14 @kind object;
  #L117156.  call `v`(v5, v6, v8, v10, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(JJJJ)V` @kind direct;
  #L11715c.  return v2;
}
procedure `boolean` `s`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L117170.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L117174.  v1:= 1I;
  #L117176.  if v0 != 0 then goto L11717c;
  #L11717a.  return v1;
  #L11717c.  call `i`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:(Ljava/lang/Object;)V` @kind direct;
  #L117182.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L117186.  v7:= v7 + v1 @kind int;
  #L117188.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v7;
  #L11718c.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L117190.  if v7 <= v0 then goto L11719a;
  #L117194.  call `f`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.f:()V` @kind direct;
  #L11719a.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L1171a0.  v2:= temp @kind wide;
  #L1171a2.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L1171a6.  v4:= (`long`) v7 @kind i2l;
  #L1171a8.  v2:= v2 + v4 @kind long;
  #L1171aa.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v2 @kind wide;
  #L1171ae.  return v1;
}
procedure `long` `t`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.SharedFlowSlot` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L117cf4.  v0:= v7.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L117cf8.  call temp:= `k`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @kind direct;
  #L117cfe.  v2:= temp @kind wide;
  #L117d00.  v7:= lcmp(v0, v2);
  #L117d04.  if v7 >= 0 then goto L117d0a;
  #L117d08.  return v0 @kind wide;
  #L117d0a.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L117d0e.  v2:= -1L;
  #L117d12.  if v7 <= 0 then goto L117d18;
  #L117d16.  return v2 @kind wide;
  #L117d18.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L117d1e.  v4:= temp @kind wide;
  #L117d20.  v7:= lcmp(v0, v4);
  #L117d24.  if v7 <= 0 then goto L117d2a;
  #L117d28.  return v2 @kind wide;
  #L117d2a.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117d2e.  if v7 != 0 then goto L117d34;
  #L117d32.  return v2 @kind wide;
  #L117d34.  return v0 @kind wide;
}
procedure `java.lang.Object` `u`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind this, `kotlinx.coroutines.flow.SharedFlowSlot` v9 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:(Lkotlinx/coroutines/flow/SharedFlowSlot;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L117740.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L117744.  @monitorenter v8
  #L117746.  call temp:= `t`(v8, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowSlot;)J` @kind direct;
  #L11774c.  v1:= temp @kind wide;
  #L11774e.  v3:= 0L;
  #L117752.  v5:= lcmp(v1, v3);
  #L117756.  if v5 >= 0 then goto L117760;
  #L11775a.  v9:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L11775e.  goto L117784;
  #L117760.  v3:= v9.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L117764.  call temp:= `m`(v8, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.m:(J)Ljava/lang/Object;` @kind direct;
  #L11776a.  v0:= temp @kind object;
  #L11776c.  v5:= 1L;
  #L117770.  v1:= v1 + v5 @kind long;
  #L117772.  v9.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` := v1 @kind wide;
  #L117776.  call temp:= `updateCollectorIndexLocked$kotlinx_coroutines_core`(v8, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.updateCollectorIndexLocked$kotlinx_coroutines_core:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L11777c.  v9:= temp @kind object;
  #L11777e.  v7:= v0 @kind object;
  #L117780.  v0:= v9 @kind object;
  #L117782.  v9:= v7 @kind object;
  #L117784.  @monitorexit v8
  #L117786.  v1:= 0I;
  #L117788.  v2:= length @variable v0;
  #L11778a.  if v1 >= v2 then goto L1177b4;
  #L11778e.  v3:= v0[v1] @kind object;
  #L117792.  v1:= v1 + 1;
  #L117796.  if v3 != 0 then goto L11779c;
  #L11779a.  goto L11778a;
  #L11779c.  v4:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L1177a0.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1177a4.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1177aa.  v4:= temp @kind object;
  #L1177ac.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L1177b2.  goto L11778a;
  #L1177b4.  return v9 @kind object;
  #L1177b6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1177b8.  @monitorexit v8
  #L1177ba.  throw v9;
  catch `java.lang.Throwable` @[L117746..L11777e] goto L1177b6;
}
procedure `void` `v`(`kotlinx.coroutines.flow.SharedFlowImpl` v13 @kind this, `long` v14 , `long` v16 , `long` v18 , `long` v20 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(JJJJ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L11807c.  v0:= v13 @kind object;
  #L11807e.  v1:= v14 @kind wide;
  #L118080.  v3:= v16 @kind wide;
  #L118084.  call temp:= `min`(v3, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11808a.  v5:= temp @kind wide;
  #L11808c.  call temp:= `l`(v13) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L118092.  v7:= temp @kind wide;
  #L118094.  v9:= lcmp(v7, v5);
  #L118098.  if v9 >= 0 then goto L1180b8;
  #L11809c.  v9:= 1L;
  #L1180a0.  v9:= v9 + v7 @kind long;
  #L1180a2.  v11:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L1180a6.  call `checkNotNull`(v11) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1180ac.  v12:= 0I;
  #L1180ae.  call `access$setBufferAt`(v11, v7, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L1180b4.  v7:= v9 @kind wide;
  #L1180b6.  goto L118094;
  #L1180b8.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` := v1 @kind wide;
  #L1180bc.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v3 @kind wide;
  #L1180c0.  v1:= v18 - v5 @kind long;
  #L1180c4.  v2:= (`int`) v1 @kind l2i;
  #L1180c6.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int` := v2;
  #L1180ca.  v1:= v20 - v18 @kind long;
  #L1180ce.  v2:= (`int`) v1 @kind l2i;
  #L1180d0.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v2;
  #L1180d4.  return @kind void;
}
procedure `java.lang.Object` `collect`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `kotlinx.coroutines.flow.FlowCollector` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.collect:(Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L117528.  call temp:= `d`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/FlowCollector;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11752e.  v1:= temp @kind object;
  #L117530.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.SharedFlowSlot` `createSlot`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlot:()Lkotlinx/coroutines/flow/SharedFlowSlot;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L117bdc.  v0:= new `kotlinx.coroutines.flow.SharedFlowSlot`;
  #L117be0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlowSlot;.<init>:()V` @kind direct;
  #L117be6.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot` `createSlot`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlot:()Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L117c10.  call temp:= `createSlot`(v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlot:()Lkotlinx/coroutines/flow/SharedFlowSlot;` @kind virtual;
  #L117c16.  v0:= temp @kind object;
  #L117c18.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.SharedFlowSlot`[] `createSlotArray`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlotArray:(I)[Lkotlinx/coroutines/flow/SharedFlowSlot;` @AccessFlag PROTECTED {
    temp;

  #L117bf8.  v1:= new `kotlinx.coroutines.flow.SharedFlowSlot`[v1];
  #L117bfc.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot`[] `createSlotArray`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlotArray:(I)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L117c2c.  call temp:= `createSlotArray`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.createSlotArray:(I)[Lkotlinx/coroutines/flow/SharedFlowSlot;` @kind virtual;
  #L117c32.  v1:= temp @kind object;
  #L117c34.  return v1 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L117584.  call temp:= `g`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.g:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L11758a.  v1:= temp @kind object;
  #L11758c.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.Flow` `fuse`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.fuse:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @AccessFlag PUBLIC {
    temp;

  #L117bc0.  call temp:= `fuseSharedFlow`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.fuseSharedFlow:(Lkotlinx/coroutines/flow/SharedFlow;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/Flow;` @kind static;
  #L117bc6.  v1:= temp @kind object;
  #L117bc8.  return v1 @kind object;
}
procedure `java.lang.Object` `getLastReplayedLocked`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getLastReplayedLocked:()Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1176d0.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L1176d4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1176da.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L1176de.  call temp:= `o`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()I` @kind direct;
  #L1176e4.  v3:= temp;
  #L1176e6.  v3:= (`long`) v3 @kind i2l;
  #L1176e8.  v1:= v1 + v3 @kind long;
  #L1176ea.  v3:= 1L;
  #L1176ee.  v1:= v1 - v3 @kind long;
  #L1176f0.  call temp:= `access$getBufferAt`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L1176f6.  v0:= temp @kind object;
  #L1176f8.  return v0 @kind object;
}
procedure `java.util.List` `getReplayCache`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.getReplayCache:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L117848.  @monitorenter v9
  #L11784a.  call temp:= `o`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:()I` @kind direct;
  #L117850.  v0:= temp;
  #L117852.  if v0 != 0 then goto L117862;
  #L117856.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L11785c.  v0:= temp @kind object;
  #L11785e.  @monitorexit v9
  #L117860.  return v0 @kind object;
  #L117862.  v1:= new `java.util.ArrayList`;
  #L117866.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L11786c.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117870.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117876.  v3:= 0I;
  #L117878.  if v3 >= v0 then goto L11789a;
  #L11787c.  v4:= v3 + 1;
  #L117880.  v5:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117884.  v7:= (`long`) v3 @kind i2l;
  #L117886.  v5:= v5 + v7 @kind long;
  #L117888.  call temp:= `access$getBufferAt`(v2, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L11788e.  v3:= temp @kind object;
  #L117890.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L117896.  v3:= v4;
  #L117898.  goto L117878;
  #L11789a.  @monitorexit v9
  #L11789c.  return v1 @kind object;
  #L11789e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1178a0.  @monitorexit v9
  #L1178a2.  throw v0;
  catch `java.lang.Throwable` @[L11784a..L11785e] goto L11789e;
  catch `java.lang.Throwable` @[L117862..L117896] goto L11789e;
}
procedure `void` `resetReplayCache`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.resetReplayCache:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11802c.  @monitorenter v9
  #L11802e.  call temp:= `k`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @kind direct;
  #L118034.  v1:= temp @kind wide;
  #L118036.  v3:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L11803a.  call temp:= `k`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @kind direct;
  #L118040.  v5:= temp @kind wide;
  #L118042.  call temp:= `n`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:()J` @kind direct;
  #L118048.  v7:= temp @kind wide;
  #L11804a.  v0:= v9 @kind object;
  #L11804c.  call `v`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(JJJJ)V` @kind direct;
  #L118052.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L118056.  @monitorexit v9
  #L118058.  return @kind void;
  #L11805a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11805c.  @monitorexit v9
  #L11805e.  throw v0;
  catch `java.lang.Throwable` @[L11802e..L118056] goto L11805a;
}
procedure `boolean` `tryEmit`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.tryEmit:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L117038.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L11703c.  @monitorenter v5
  #L11703e.  call temp:= `r`(v5, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Ljava/lang/Object;)Z` @kind direct;
  #L117044.  v6:= temp;
  #L117046.  v1:= 0I;
  #L117048.  if v6 == 0 then goto L117058;
  #L11704c.  call temp:= `j`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L117052.  v0:= temp @kind object;
  #L117054.  v6:= 1I;
  #L117056.  goto L11705a;
  #L117058.  v6:= 0I;
  #L11705a.  @monitorexit v5
  #L11705c.  v2:= length @variable v0;
  #L11705e.  if v1 >= v2 then goto L117088;
  #L117062.  v3:= v0[v1] @kind object;
  #L117066.  v1:= v1 + 1;
  #L11706a.  if v3 != 0 then goto L117070;
  #L11706e.  goto L11705e;
  #L117070.  v4:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L117074.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L117078.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L11707e.  v4:= temp @kind object;
  #L117080.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L117086.  goto L11705e;
  #L117088.  return v6;
  #L11708a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11708c.  @monitorexit v5
  #L11708e.  throw v6;
  catch `java.lang.Throwable` @[L11703e..L117054] goto L11708a;
}
procedure `kotlin.coroutines.Continuation`[] `updateCollectorIndexLocked$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.SharedFlowImpl` v22 @kind this, `long` v23 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.updateCollectorIndexLocked$kotlinx_coroutines_core:(J)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L117990.  v9:= v22 @kind object;
  #L117994.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117998.  v2:= lcmp(v23, v0);
  #L11799c.  if v2 <= 0 then goto L1179a6;
  #L1179a0.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L1179a4.  return v0 @kind object;
  #L1179a6.  call temp:= `l`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.l:()J` @kind direct;
  #L1179ac.  v0:= temp @kind wide;
  #L1179ae.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`int`;
  #L1179b2.  v2:= (`long`) v2 @kind i2l;
  #L1179b4.  v2:= v2 + v0 @kind long;
  #L1179b6.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L1179ba.  v5:= 1L;
  #L1179be.  if v4 != 0 then goto L1179cc;
  #L1179c2.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L1179c6.  if v4 <= 0 then goto L1179cc;
  #L1179ca.  v2:= v2 + v5 @kind long;
  #L1179cc.  call temp:= `access$getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getNCollectors:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)I` @kind static;
  #L1179d2.  v4:= temp;
  #L1179d4.  if v4 != 0 then goto L1179da;
  #L1179d8.  goto L117a1c;
  #L1179da.  call temp:= `access$getSlots`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.access$getSlots:(Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;)[Lkotlinx/coroutines/flow/internal/AbstractSharedFlowSlot;` @kind static;
  #L1179e0.  v4:= temp @kind object;
  #L1179e2.  if v4 != 0 then goto L1179e8;
  #L1179e6.  goto L117a1c;
  #L1179e8.  v7:= length @variable v4;
  #L1179ea.  v8:= 0I;
  #L1179ec.  if v8 >= v7 then goto L117a1c;
  #L1179f0.  v11:= v4[v8] @kind object;
  #L1179f4.  v8:= v8 + 1;
  #L1179f8.  if v11 == 0 then goto L1179ec;
  #L1179fc.  v11:= (`kotlinx.coroutines.flow.SharedFlowSlot`) v11 @kind object;
  #L117a00.  v11:= v11.`kotlinx.coroutines.flow.SharedFlowSlot.index` @type ^`long` @kind wide;
  #L117a04.  v13:= 0L;
  #L117a08.  v15:= lcmp(v11, v13);
  #L117a0c.  if v15 < 0 then goto L1179ec;
  #L117a10.  v13:= lcmp(v11, v2);
  #L117a14.  if v13 >= 0 then goto L1179ec;
  #L117a18.  v2:= v11 @kind wide;
  #L117a1a.  goto L1179ec;
  #L117a1c.  v7:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117a20.  v4:= lcmp(v2, v7);
  #L117a24.  if v4 > 0 then goto L117a2e;
  #L117a28.  v0:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L117a2c.  return v0 @kind object;
  #L117a2e.  call temp:= `k`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.k:()J` @kind direct;
  #L117a34.  v7:= temp @kind wide;
  #L117a36.  call temp:= `getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L117a3c.  v4:= temp;
  #L117a3e.  if v4 <= 0 then goto L117a5c;
  #L117a42.  v11:= v7 - v2 @kind long;
  #L117a46.  v4:= (`int`) v11 @kind l2i;
  #L117a48.  v11:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117a4c.  v12:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L117a50.  v12:= v12 - v4 @kind int;
  #L117a52.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L117a58.  v4:= temp;
  #L117a5a.  goto L117a60;
  #L117a5c.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117a60.  v11:= `@@kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L117a64.  v12:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L117a68.  v12:= (`long`) v12 @kind i2l;
  #L117a6a.  v12:= v12 + v7 @kind long;
  #L117a6c.  if v4 <= 0 then goto L117b04;
  #L117a70.  v11:= new `kotlin.coroutines.Continuation`[v4];
  #L117a74.  v14:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117a78.  call `checkNotNull`(v14) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117a7e.  v16:= v7 @kind wide;
  #L117a82.  v15:= 0I;
  #L117a84.  v18:= lcmp(v7, v12);
  #L117a88.  if v18 >= 0 then goto L117afa;
  #L117a8c.  v18:= v7 + v5 @kind long;
  #L117a90.  call temp:= `access$getBufferAt`(v14, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L117a96.  v10:= temp @kind object;
  #L117a98.  v5:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L117a9c.  if v10 == v5 then goto L117aec;
  #L117aa0.  v6:= "null cannot be cast to non-null type kotlinx.coroutines.flow.SharedFlowImpl.Emitter" @kind object;
  #L117aa4.  call temp:= `requireNonNull`(v10, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L117aaa.  v10:= (`kotlinx.coroutines.flow.SharedFlowImpl$a`) v10 @kind object;
  #L117aae.  v6:= v15 + 1;
  #L117ab2.  v20:= v2 @kind wide;
  #L117ab6.  v2:= v10.`kotlinx.coroutines.flow.SharedFlowImpl$a.d` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L117aba.  v11[v15]:= v2 @kind object;
  #L117abe.  call `access$setBufferAt`(v14, v7, v5) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117ac4.  v2:= v10.`kotlinx.coroutines.flow.SharedFlowImpl$a.c` @type ^`java.lang.Object` @kind object;
  #L117ac8.  v7:= v16 @kind wide;
  #L117acc.  call `access$setBufferAt`(v14, v7, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$setBufferAt:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L117ad2.  v2:= 1L;
  #L117ad6.  v16:= v7 + v2 @kind long;
  #L117ada.  if v6 < v4 then goto L117ae0;
  #L117ade.  goto L117afe;
  #L117ae0.  v15:= v6;
  #L117ae2.  v7:= v18 @kind wide;
  #L117ae6.  v2:= v20 @kind wide;
  #L117aea.  goto L117af4;
  #L117aec.  v7:= v16 @kind wide;
  #L117af0.  v7:= v18 @kind wide;
  #L117af4.  v5:= 1L;
  #L117af8.  goto L117a84;
  #L117afa.  v20:= v2 @kind wide;
  #L117afe.  v7:= v16 @kind wide;
  #L117b02.  goto L117b08;
  #L117b04.  v20:= v2 @kind wide;
  #L117b08.  v0:= v7 - v0 @kind long;
  #L117b0c.  v1:= (`int`) v0 @kind l2i;
  #L117b0e.  call temp:= `getNCollectors`(v22) @signature `Lkotlinx/coroutines/flow/internal/AbstractSharedFlow;.getNCollectors:()I` @kind virtual;
  #L117b14.  v0:= temp;
  #L117b16.  if v0 != 0 then goto L117b1e;
  #L117b1a.  v3:= v7 @kind wide;
  #L117b1c.  goto L117b22;
  #L117b1e.  v3:= v20 @kind wide;
  #L117b22.  v5:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117b26.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.e` @type ^`int`;
  #L117b2a.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L117b30.  v0:= temp;
  #L117b32.  v0:= (`long`) v0 @kind i2l;
  #L117b34.  v0:= v7 - v0 @kind long;
  #L117b38.  call temp:= `max`(v5, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L117b3e.  v0:= temp @kind wide;
  #L117b40.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L117b44.  if v2 != 0 then goto L117b7a;
  #L117b48.  v2:= lcmp(v0, v12);
  #L117b4c.  if v2 >= 0 then goto L117b7a;
  #L117b50.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`java.lang.Object`[] @kind object;
  #L117b54.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L117b5a.  call temp:= `access$getBufferAt`(v2, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowKt;.access$getBufferAt:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L117b60.  v2:= temp @kind object;
  #L117b62.  v5:= `@@kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE` @type ^`kotlinx.coroutines.internal.Symbol` @kind object;
  #L117b66.  call temp:= `areEqual`(v2, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L117b6c.  v2:= temp;
  #L117b6e.  if v2 == 0 then goto L117b7a;
  #L117b72.  v5:= 1L;
  #L117b76.  v7:= v7 + v5 @kind long;
  #L117b78.  v0:= v0 + v5 @kind long;
  #L117b7a.  v1:= v0 @kind wide;
  #L117b7c.  v5:= v7 @kind wide;
  #L117b7e.  v0:= v22 @kind object;
  #L117b82.  v7:= v12 @kind wide;
  #L117b84.  call `v`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(JJJJ)V` @kind direct;
  #L117b8a.  call `c`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:()V` @kind direct;
  #L117b90.  v0:= length @variable v11;
  #L117b92.  v1:= 1I;
  #L117b94.  if v0 != 0 then goto L117b9c;
  #L117b98.  v10:= 1I;
  #L117b9a.  goto L117b9e;
  #L117b9c.  v10:= 0I;
  #L117b9e.  v0:= v10 ^~ 1;
  #L117ba2.  if v0 == 0 then goto L117bae;
  #L117ba6.  call temp:= `j`(v9, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L117bac.  v11:= temp @kind object;
  #L117bae.  return v11 @kind object;
}
procedure `long` `updateNewCollectorIndexLocked$kotlinx_coroutines_core`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.updateNewCollectorIndexLocked$kotlinx_coroutines_core:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L117d48.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`long` @kind wide;
  #L117d4c.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L117d50.  v4:= lcmp(v0, v2);
  #L117d54.  if v4 >= 0 then goto L117d5c;
  #L117d58.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v0 @kind wide;
  #L117d5c.  return v0 @kind wide;
}
