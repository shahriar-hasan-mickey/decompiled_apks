record `kotlinx.coroutines.android.AndroidExceptionPreHandler` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v1 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0f7d48.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.Key` @type ^`kotlinx.coroutines.CoroutineExceptionHandler$Key` @kind object;
  #L0f7d4c.  call `<init>`(v1, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L0f7d52.  v1.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v1 @kind object;
  #L0f7d56.  return @kind void;
}
procedure `java.lang.reflect.Method` `preHandler`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v5 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0f7cd0.  v0:= v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` @kind object;
  #L0f7cd4.  if v0 == v5 then goto L0f7cde;
  #L0f7cd8.  v0:= (`java.lang.reflect.Method`) v0 @kind object;
  #L0f7cdc.  return v0 @kind object;
  #L0f7cde.  v0:= 0I;
  #L0f7ce0.  v1:= constclass @type ^`java.lang.Thread` @kind object;
  #L0f7ce4.  v2:= "getUncaughtExceptionPreHandler" @kind object;
  #L0f7ce8.  v3:= 0I;
  #L0f7cea.  v4:= new `java.lang.Class`[v3];
  #L0f7cee.  call temp:= `getDeclaredMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L0f7cf4.  v1:= temp @kind object;
  #L0f7cf6.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L0f7cfc.  v2:= temp;
  #L0f7cfe.  call temp:= `isPublic`(v2) @signature `Ljava/lang/reflect/Modifier;.isPublic:(I)Z` @kind static;
  #L0f7d04.  v2:= temp;
  #L0f7d06.  if v2 == 0 then goto L0f7d20;
  #L0f7d0a.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L0f7d10.  v2:= temp;
  #L0f7d12.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L0f7d18.  v2:= temp;
  #L0f7d1a.  if v2 == 0 then goto L0f7d20;
  #L0f7d1e.  v3:= 1I;
  #L0f7d20.  if v3 == 0 then goto L0f7d26;
  #L0f7d24.  v0:= v1 @kind object;
  #L0f7d26.  v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v0 @kind object;
  #L0f7d2a.  return v0 @kind object;
  catch `java.lang.Throwable` @[L0f7ce0..L0f7d1a] goto L0f7d26;
}
procedure `void` `handleException`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0f7d68.  v3:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L0f7d6c.  v0:= 0I;
  #L0f7d6e.  v1:= 26I;
  #L0f7d72.  if v1 > v3 then goto L0f7d82;
  #L0f7d76.  v1:= 28I;
  #L0f7d7a.  if v3 >= v1 then goto L0f7d82;
  #L0f7d7e.  v3:= 1I;
  #L0f7d80.  goto L0f7d84;
  #L0f7d82.  v3:= 0I;
  #L0f7d84.  if v3 == 0 then goto L0f7dc8;
  #L0f7d88.  call temp:= `preHandler`(v2) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @kind direct;
  #L0f7d8e.  v3:= temp @kind object;
  #L0f7d90.  v1:= 0I;
  #L0f7d92.  if v3 != 0 then goto L0f7d9a;
  #L0f7d96.  v3:= v1 @kind object;
  #L0f7d98.  goto L0f7da6;
  #L0f7d9a.  v0:= new `java.lang.Object`[v0];
  #L0f7d9e.  call temp:= `invoke`(v3, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0f7da4.  v3:= temp @kind object;
  #L0f7da6.  v0:= instanceof @variable v3 @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind boolean;
  #L0f7daa.  if v0 == 0 then goto L0f7db4;
  #L0f7dae.  v1:= v3 @kind object;
  #L0f7db0.  v1:= (`java.lang.Thread$UncaughtExceptionHandler`) v1 @kind object;
  #L0f7db4.  if v1 != 0 then goto L0f7dba;
  #L0f7db8.  goto L0f7dc8;
  #L0f7dba.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L0f7dc0.  v3:= temp @kind object;
  #L0f7dc2.  call `uncaughtException`(v1, v3, v4) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L0f7dc8.  return @kind void;
}
