record `okio.RealBufferedSource$inputStream$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `okio.RealBufferedSource` `okio.RealBufferedSource$inputStream$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.RealBufferedSource$inputStream$1` v0 @kind this, `okio.RealBufferedSource` v1 @kind object) @signature `Lokio/RealBufferedSource$inputStream$1;.<init>:(Lokio/RealBufferedSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L16a834.  v0.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` := v1 @kind object;
  #L16a838.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L16a83e.  return @kind void;
}
procedure `int` `available`(`okio.RealBufferedSource$inputStream$1` v4 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16a690.  v0:= v4.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a694.  v1:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L16a698.  if v1 != 0 then goto L16a6bc;
  #L16a69c.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a6a0.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a6a6.  v0:= temp @kind wide;
  #L16a6a8.  v2:= 2147483647I;
  #L16a6ae.  v2:= (`long`) v2 @kind i2l;
  #L16a6b0.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16a6b6.  v0:= temp @kind wide;
  #L16a6b8.  v1:= (`int`) v0 @kind l2i;
  #L16a6ba.  return v1;
  #L16a6bc.  v0:= new `java.io.IOException`;
  #L16a6c0.  v1:= "closed" @kind object;
  #L16a6c4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a6ca.  throw v0;
}
procedure `void` `close`(`okio.RealBufferedSource$inputStream$1` v1 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a850.  v0:= v1.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a854.  call `close`(v0) @signature `Lokio/RealBufferedSource;.close:()V` @kind virtual;
  #L16a85a.  return @kind void;
}
procedure `int` `read`(`okio.RealBufferedSource$inputStream$1` v5 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16a6dc.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a6e0.  v1:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L16a6e4.  if v1 != 0 then goto L16a740;
  #L16a6e8.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a6ec.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a6f2.  v0:= temp @kind wide;
  #L16a6f4.  v2:= 0L;
  #L16a6f8.  v4:= lcmp(v0, v2);
  #L16a6fc.  if v4 != 0 then goto L16a72a;
  #L16a700.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a704.  v1:= v0.`okio.RealBufferedSource.source` @type ^`okio.Source` @kind object;
  #L16a708.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a70c.  v2:= 8192I;
  #L16a710.  v2:= (`long`) v2 @kind i2l;
  #L16a712.  call temp:= `read`(v1, v0, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L16a718.  v0:= temp @kind wide;
  #L16a71a.  v2:= -1L;
  #L16a71e.  v4:= lcmp(v0, v2);
  #L16a722.  if v4 != 0 then goto L16a72a;
  #L16a726.  v0:= -1I;
  #L16a728.  return v0;
  #L16a72a.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a72e.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a732.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16a738.  v0:= temp;
  #L16a73a.  v0:= v0 ^& 255;
  #L16a73e.  return v0;
  #L16a740.  v0:= new `java.io.IOException`;
  #L16a744.  v1:= "closed" @kind object;
  #L16a748.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a74e.  throw v0;
}
procedure `int` `read`(`okio.RealBufferedSource$inputStream$1` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/RealBufferedSource$inputStream$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16a760.  v0:= "data" @kind object;
  #L16a764.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a76a.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a76e.  v0:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L16a772.  if v0 != 0 then goto L16a7dc;
  #L16a776.  v0:= length @variable v8;
  #L16a778.  v1:= (`long`) v0 @kind i2l;
  #L16a77a.  v3:= (`long`) v9 @kind i2l;
  #L16a77c.  v5:= (`long`) v10 @kind i2l;
  #L16a77e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L16a784.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a788.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a78c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a792.  v0:= temp @kind wide;
  #L16a794.  v2:= 0L;
  #L16a798.  v4:= lcmp(v0, v2);
  #L16a79c.  if v4 != 0 then goto L16a7ca;
  #L16a7a0.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a7a4.  v1:= v0.`okio.RealBufferedSource.source` @type ^`okio.Source` @kind object;
  #L16a7a8.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a7ac.  v2:= 8192I;
  #L16a7b0.  v2:= (`long`) v2 @kind i2l;
  #L16a7b2.  call temp:= `read`(v1, v0, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L16a7b8.  v0:= temp @kind wide;
  #L16a7ba.  v2:= -1L;
  #L16a7be.  v4:= lcmp(v0, v2);
  #L16a7c2.  if v4 != 0 then goto L16a7ca;
  #L16a7c6.  v8:= -1I;
  #L16a7c8.  return v8;
  #L16a7ca.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a7ce.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a7d2.  call temp:= `read`(v0, v8, v9, v10) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L16a7d8.  v8:= temp;
  #L16a7da.  return v8;
  #L16a7dc.  v8:= new `java.io.IOException`;
  #L16a7e0.  v9:= "closed" @kind object;
  #L16a7e4.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a7ea.  throw v8;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSource$inputStream$1` v2 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16a7fc.  v0:= new `java.lang.StringBuilder`;
  #L16a800.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a806.  v1:= v2.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L16a80a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a810.  v1:= ".inputStream()" @kind object;
  #L16a814.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a81a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a820.  v0:= temp @kind object;
  #L16a822.  return v0 @kind object;
}
