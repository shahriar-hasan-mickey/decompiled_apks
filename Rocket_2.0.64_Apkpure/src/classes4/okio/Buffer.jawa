record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `long` `okio.Buffer.a` @AccessFlag PRIVATE;
  `okio.Segment` `okio.Buffer.head` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1646fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L164702.  return @kind void;
}
procedure `okio.ByteString` `a`(`okio.Buffer` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L164104.  call temp:= `getInstance`(v6) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L16410a.  v6:= temp @kind object;
  #L16410c.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164110.  if v0 == 0 then goto L164156;
  #L164114.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L164118.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L16411c.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L164120.  v3:= v3 - v2 @kind int;
  #L164122.  call `update`(v6, v1, v2, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L164128.  v1:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16412c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164132.  if v1 == v0 then goto L164156;
  #L164136.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16413a.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L16413e.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L164142.  v4:= v4 - v3 @kind int;
  #L164144.  call `update`(v6, v2, v3, v4) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L16414a.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16414e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164154.  goto L164132;
  #L164156.  v0:= new `okio.ByteString`;
  #L16415a.  call temp:= `digest`(v6) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L164160.  v6:= temp @kind object;
  #L164162.  v1:= "messageDigest.digest()" @kind object;
  #L164166.  call `checkNotNullExpressionValue`(v6, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16416c.  call `<init>`(v0, v6) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L164172.  return v0 @kind object;
}
procedure `okio.ByteString` `b`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object, `okio.ByteString` v6 @kind object) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L164184.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L16418a.  v0:= temp @kind object;
  #L16418c.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L164190.  call temp:= `internalArray$okio`(v6) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L164196.  v6:= temp @kind object;
  #L164198.  call `<init>`(v1, v6, v5) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L16419e.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1641a4.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1641a8.  if v5 == 0 then goto L1641ee;
  #L1641ac.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1641b0.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L1641b4.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L1641b8.  v2:= v2 - v1 @kind int;
  #L1641ba.  call `update`(v0, v6, v1, v2) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L1641c0.  v6:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1641c4.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1641ca.  if v6 == v5 then goto L1641ee;
  #L1641ce.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1641d2.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1641d6.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1641da.  v3:= v3 - v2 @kind int;
  #L1641dc.  call `update`(v0, v1, v2, v3) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L1641e2.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1641e6.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1641ec.  goto L1641ca;
  #L1641ee.  v5:= new `okio.ByteString`;
  #L1641f2.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L1641f8.  v6:= temp @kind object;
  #L1641fa.  v0:= "mac.doFinal()" @kind object;
  #L1641fe.  call `checkNotNullExpressionValue`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L164204.  call `<init>`(v5, v6) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L16420a.  return v5 @kind object;
  #L16420c.  v5:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L16420e.  v6:= new `java.lang.IllegalArgumentException`;
  #L164212.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L164218.  throw v6;
  catch `java.security.InvalidKeyException` @[L164184..L16420a] goto L16420c;
}
procedure `void` `c`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 , `boolean` v8 ) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16475c.  v0:= 0L;
  #L164760.  v2:= lcmp(v6, v0);
  #L164764.  if v2 > 0 then goto L164770;
  #L164768.  if v8 == 0 then goto L16476e;
  #L16476c.  goto L164770;
  #L16476e.  return @kind void;
  #L164770.  v0:= 1I;
  #L164772.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L164778.  v0:= temp @kind object;
  #L16477a.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L16477e.  v1:= v1 - 8192;
  #L164782.  v1:= (`long`) v1 @kind i2l;
  #L164784.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16478a.  v1:= temp @kind wide;
  #L16478c.  v2:= (`int`) v1 @kind l2i;
  #L16478e.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L164792.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L164796.  call temp:= `read`(v5, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L16479c.  v1:= temp;
  #L16479e.  v2:= -1I;
  #L1647a0.  if v1 != v2 then goto L1647d4;
  #L1647a4.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1647a8.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L1647ac.  if v5 != v6 then goto L1647c2;
  #L1647b0.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1647b6.  v5:= temp @kind object;
  #L1647b8.  v4.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L1647bc.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1647c2.  if v8 == 0 then goto L1647c8;
  #L1647c6.  return @kind void;
  #L1647c8.  v5:= new `java.io.EOFException`;
  #L1647cc.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1647d2.  throw v5;
  #L1647d4.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1647d8.  v2:= v2 + v1 @kind int;
  #L1647da.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1647de.  v2:= v4.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1647e2.  v0:= (`long`) v1 @kind i2l;
  #L1647e4.  v2:= v2 + v0 @kind long;
  #L1647e6.  v4.`okio.Buffer.a` @type ^`long` := v2 @kind wide;
  #L1647ea.  v6:= v6 - v0 @kind long;
  #L1647ec.  goto L16475c;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v6 @kind object, `java.io.OutputStream` v7 @kind object, `long` v8 , `long` v10 , `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L162afc.  v13:= v12 ^& 2;
  #L162b00.  if v13 == 0 then goto L162b08;
  #L162b04.  v8:= 0L;
  #L162b08.  v2:= v8 @kind wide;
  #L162b0a.  v8:= v12 ^& 4;
  #L162b0e.  if v8 == 0 then goto L162b1a;
  #L162b12.  v8:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L162b16.  v10:= v8 - v2 @kind long;
  #L162b1a.  v4:= v10 @kind wide;
  #L162b1c.  v0:= v6 @kind object;
  #L162b1e.  v1:= v7 @kind object;
  #L162b20.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L162b26.  v6:= temp @kind object;
  #L162b28.  return v6 @kind object;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v0 @kind object, `okio.Buffer` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Lokio/Buffer;JILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L162b3c.  v4:= v4 ^& 2;
  #L162b40.  if v4 == 0 then goto L162b48;
  #L162b44.  v2:= 0L;
  #L162b48.  call temp:= `copyTo`(v0, v1, v2) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;J)Lokio/Buffer;` @kind virtual;
  #L162b4e.  v0:= temp @kind object;
  #L162b50.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v6 @kind object, `okio.Buffer` v7 @kind object, `long` v8 , `long` v10 , `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Lokio/Buffer;JJILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L162b64.  v12:= v12 ^& 2;
  #L162b68.  if v12 == 0 then goto L162b70;
  #L162b6c.  v8:= 0L;
  #L162b70.  v2:= v8 @kind wide;
  #L162b72.  v0:= v6 @kind object;
  #L162b74.  v1:= v7 @kind object;
  #L162b76.  v4:= v10 @kind wide;
  #L162b78.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L162b7e.  v6:= temp @kind object;
  #L162b80.  return v6 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe$default`(`okio.Buffer` v0 @kind object, `okio.Buffer$UnsafeCursor` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L163d5c.  v2:= v2 ^& 1;
  #L163d60.  if v2 == 0 then goto L163d6e;
  #L163d64.  v1:= new `okio.Buffer$UnsafeCursor`;
  #L163d68.  call `<init>`(v1) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L163d6e.  call temp:= `readAndWriteUnsafe`(v0, v1) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L163d74.  v0:= temp @kind object;
  #L163d76.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe$default`(`okio.Buffer` v0 @kind object, `okio.Buffer$UnsafeCursor` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lokio/Buffer;.readUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L163df8.  v2:= v2 ^& 1;
  #L163dfc.  if v2 == 0 then goto L163e0a;
  #L163e00.  v1:= new `okio.Buffer$UnsafeCursor`;
  #L163e04.  call `<init>`(v1) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L163e0a.  call temp:= `readUnsafe`(v0, v1) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L163e10.  v0:= temp @kind object;
  #L163e12.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo$default`(`okio.Buffer` v0 @kind object, `java.io.OutputStream` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/Buffer;.writeTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L163760.  v4:= v4 ^& 2;
  #L163764.  if v4 == 0 then goto L16376c;
  #L163768.  v2:= v0.`okio.Buffer.a` @type ^`long` @kind wide;
  #L16376c.  call temp:= `writeTo`(v0, v1, v2) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L163772.  v0:= temp @kind object;
  #L163774.  return v0 @kind object;
}
procedure `byte` `-deprecated_getByte`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.-deprecated_getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;

  #L161100.  call temp:= `getByte`(v0, v1) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L161106.  v1:= temp;
  #L161108.  return v1;
}
procedure `long` `-deprecated_size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.-deprecated_size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L161c1c.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L161c20.  return v0 @kind wide;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L162a40.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L164714.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16471a.  v0:= temp @kind wide;
  #L16471c.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L164722.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L161868.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L16186e.  v0:= temp @kind object;
  #L161870.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162a54.  call temp:= `copy`(v1) @signature `Lokio/Buffer;.copy:()Lokio/Buffer;` @kind virtual;
  #L162a5a.  v0:= temp @kind object;
  #L162a5c.  return v0 @kind object;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L164734.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L161c34.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161c3a.  v0:= temp @kind wide;
  #L161c3c.  v2:= 0L;
  #L161c40.  v4:= lcmp(v0, v2);
  #L161c44.  if v4 != 0 then goto L161c4a;
  #L161c48.  goto L161c7e;
  #L161c4a.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161c4e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161c54.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L161c58.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161c5e.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L161c62.  v4:= 8192I;
  #L161c66.  if v3 >= v4 then goto L161c7c;
  #L161c6a.  v4:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L161c6e.  if v4 == 0 then goto L161c7c;
  #L161c72.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L161c76.  v3:= v3 - v2 @kind int;
  #L161c78.  v2:= (`long`) v3 @kind i2l;
  #L161c7a.  v0:= v0 - v2 @kind long;
  #L161c7c.  v2:= v0 @kind wide;
  #L161c7e.  return v2 @kind wide;
}
procedure `okio.Buffer` `copy`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.copy:()Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L162a70.  v0:= new `okio.Buffer`;
  #L162a74.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L162a7a.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162a80.  v1:= temp @kind wide;
  #L162a82.  v3:= 0L;
  #L162a86.  v5:= lcmp(v1, v3);
  #L162a8a.  if v5 != 0 then goto L162a90;
  #L162a8e.  goto L162ae8;
  #L162a90.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162a94.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162a9a.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L162aa0.  v2:= temp @kind object;
  #L162aa2.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L162aa6.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L162aaa.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L162aae.  v3:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162ab2.  if v3 == v1 then goto L162ada;
  #L162ab6.  v4:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L162aba.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162ac0.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162ac6.  call temp:= `sharedCopy`(v3) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L162acc.  v5:= temp @kind object;
  #L162ace.  call temp:= `push`(v4, v5) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L162ad4.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162ad8.  goto L162ab2;
  #L162ada.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162ae0.  v1:= temp @kind wide;
  #L162ae2.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L162ae8.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162b94.  v2:= 0L;
  #L162b98.  v4:= 0L;
  #L162b9c.  v6:= 6I;
  #L162b9e.  v7:= 0I;
  #L162ba0.  v0:= v8 @kind object;
  #L162ba2.  v1:= v9 @kind object;
  #L162ba4.  call temp:= `copyTo$default`(v0, v1, v2, v4, v6, v7) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L162baa.  v9:= temp @kind object;
  #L162bac.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162bc0.  v4:= 0L;
  #L162bc4.  v6:= 4I;
  #L162bc6.  v7:= 0I;
  #L162bc8.  v0:= v8 @kind object;
  #L162bca.  v1:= v9 @kind object;
  #L162bcc.  v2:= v10 @kind wide;
  #L162bce.  call temp:= `copyTo$default`(v0, v1, v2, v4, v6, v7) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L162bd4.  v9:= temp @kind object;
  #L162bd6.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162be8.  v0:= "out" @kind object;
  #L162bec.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162bf2.  v1:= v8.`okio.Buffer.a` @type ^`long` @kind wide;
  #L162bf6.  v3:= v10 @kind wide;
  #L162bf8.  v5:= v12 @kind wide;
  #L162bfa.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L162c00.  v0:= 0L;
  #L162c04.  v2:= lcmp(v12, v0);
  #L162c08.  if v2 != 0 then goto L162c0e;
  #L162c0c.  return v8 @kind object;
  #L162c0e.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162c12.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162c18.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L162c1c.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L162c20.  v5:= v3 - v4 @kind int;
  #L162c24.  v5:= (`long`) v5 @kind i2l;
  #L162c26.  v7:= lcmp(v10, v5);
  #L162c2a.  if v7 < 0 then goto L162c3a;
  #L162c2e.  v3:= v3 - v4 @kind int;
  #L162c30.  v3:= (`long`) v3 @kind i2l;
  #L162c32.  v10:= v10 - v3 @kind long;
  #L162c34.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162c38.  goto L162c12;
  #L162c3a.  v3:= lcmp(v12, v0);
  #L162c3e.  if v3 <= 0 then goto L162c7a;
  #L162c42.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162c48.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L162c4c.  v3:= (`long`) v3 @kind i2l;
  #L162c4e.  v3:= v3 + v10 @kind long;
  #L162c50.  v10:= (`int`) v3 @kind l2i;
  #L162c52.  v11:= v2.`okio.Segment.limit` @type ^`int`;
  #L162c56.  v11:= v11 - v10 @kind int;
  #L162c58.  v3:= (`long`) v11 @kind i2l;
  #L162c5a.  call temp:= `min`(v3, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L162c60.  v3:= temp @kind wide;
  #L162c62.  v11:= (`int`) v3 @kind l2i;
  #L162c64.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L162c68.  call `write`(v9, v3, v10, v11) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L162c6e.  v10:= (`long`) v11 @kind i2l;
  #L162c70.  v12:= v12 - v10 @kind long;
  #L162c72.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162c76.  v10:= v0 @kind wide;
  #L162c78.  goto L162c3a;
  #L162c7a.  return v8 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162c8c.  v0:= "out" @kind object;
  #L162c90.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162c96.  v0:= v8.`okio.Buffer.a` @type ^`long` @kind wide;
  #L162c9a.  v6:= v0 - v10 @kind long;
  #L162c9e.  v2:= v8 @kind object;
  #L162ca0.  v3:= v9 @kind object;
  #L162ca2.  v4:= v10 @kind wide;
  #L162ca4.  call temp:= `copyTo`(v2, v3, v4, v6) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L162caa.  v9:= temp @kind object;
  #L162cac.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L162cc0.  v0:= "out" @kind object;
  #L162cc4.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162cca.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162cd0.  v1:= temp @kind wide;
  #L162cd2.  v3:= v10 @kind wide;
  #L162cd4.  v5:= v12 @kind wide;
  #L162cd6.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L162cdc.  v0:= 0L;
  #L162ce0.  v2:= lcmp(v12, v0);
  #L162ce4.  if v2 != 0 then goto L162cea;
  #L162ce8.  goto L162d9e;
  #L162cea.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162cf0.  v2:= temp @kind wide;
  #L162cf2.  v2:= v2 + v12 @kind long;
  #L162cf4.  call `setSize$okio`(v9, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L162cfa.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162cfe.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162d04.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L162d08.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L162d0c.  v5:= v3 - v4 @kind int;
  #L162d10.  v5:= (`long`) v5 @kind i2l;
  #L162d12.  v7:= lcmp(v10, v5);
  #L162d16.  if v7 < 0 then goto L162d26;
  #L162d1a.  v3:= v3 - v4 @kind int;
  #L162d1c.  v3:= (`long`) v3 @kind i2l;
  #L162d1e.  v10:= v10 - v3 @kind long;
  #L162d20.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162d24.  goto L162cfe;
  #L162d26.  v3:= lcmp(v12, v0);
  #L162d2a.  if v3 <= 0 then goto L162d9e;
  #L162d2e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162d34.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L162d3a.  v3:= temp @kind object;
  #L162d3c.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L162d40.  v11:= (`int`) v10 @kind l2i;
  #L162d42.  v4:= v4 + v11 @kind int;
  #L162d44.  v3.`okio.Segment.pos` @type ^`int` := v4;
  #L162d48.  v10:= (`int`) v12 @kind l2i;
  #L162d4a.  v4:= v4 + v10 @kind int;
  #L162d4c.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L162d50.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L162d56.  v10:= temp;
  #L162d58.  v3.`okio.Segment.limit` @type ^`int` := v10;
  #L162d5c.  v10:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162d60.  if v10 != 0 then goto L162d72;
  #L162d64.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L162d68.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L162d6c.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L162d70.  goto L162d88;
  #L162d72.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162d78.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L162d7c.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162d82.  call temp:= `push`(v10, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L162d88.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L162d8c.  v11:= v3.`okio.Segment.pos` @type ^`int`;
  #L162d90.  v10:= v10 - v11 @kind int;
  #L162d92.  v10:= (`long`) v10 @kind i2l;
  #L162d94.  v12:= v12 - v10 @kind long;
  #L162d96.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162d9a.  v10:= v0 @kind wide;
  #L162d9c.  goto L162d26;
  #L162d9e.  return v8 @kind object;
}
procedure `okio.Buffer` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L162db0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L163e94.  call temp:= `emit`(v1) @signature `Lokio/Buffer;.emit:()Lokio/Buffer;` @kind virtual;
  #L163e9a.  v0:= temp @kind object;
  #L163e9c.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L162dc4.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L163eb0.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L163eb6.  v0:= temp @kind object;
  #L163eb8.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v20 @kind this, `java.lang.Object` v21 @kind object) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L160ed0.  v0:= v20 @kind object;
  #L160ed4.  v1:= v21 @kind object;
  #L160ed8.  v2:= 0I;
  #L160eda.  v3:= 1I;
  #L160edc.  if v0 != v1 then goto L160ee6;
  #L160ee0.  v2:= 1I;
  #L160ee2.  goto L160fd4;
  #L160ee6.  v4:= instanceof @variable v1 @type ^`okio.Buffer` @kind boolean;
  #L160eea.  if v4 != 0 then goto L160ef2;
  #L160eee.  goto L160fd4;
  #L160ef2.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160ef8.  v4:= temp @kind wide;
  #L160efa.  v1:= (`okio.Buffer`) v1 @kind object;
  #L160efe.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160f04.  v6:= temp @kind wide;
  #L160f06.  v8:= lcmp(v4, v6);
  #L160f0a.  if v8 == 0 then goto L160f10;
  #L160f0e.  goto L160fd4;
  #L160f10.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160f16.  v4:= temp @kind wide;
  #L160f18.  v6:= 0L;
  #L160f1c.  v8:= lcmp(v4, v6);
  #L160f20.  if v8 != 0 then goto L160f26;
  #L160f24.  goto L160ee0;
  #L160f26.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L160f2a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L160f30.  v1:= v1.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L160f34.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L160f3a.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L160f3e.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L160f42.  v9:= v6 @kind wide;
  #L160f44.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160f4a.  v11:= temp @kind wide;
  #L160f4c.  v13:= lcmp(v9, v11);
  #L160f50.  if v13 >= 0 then goto L160ee0;
  #L160f54.  v11:= v4.`okio.Segment.limit` @type ^`int`;
  #L160f58.  v11:= v11 - v5 @kind int;
  #L160f5a.  v12:= v1.`okio.Segment.limit` @type ^`int`;
  #L160f5e.  v12:= v12 - v8 @kind int;
  #L160f60.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L160f66.  v11:= temp;
  #L160f68.  v11:= (`long`) v11 @kind i2l;
  #L160f6a.  v13:= v6 @kind wide;
  #L160f6c.  v15:= lcmp(v13, v11);
  #L160f70.  if v15 >= 0 then goto L160fa4;
  #L160f74.  v15:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L160f78.  v16:= v5 + 1;
  #L160f7c.  v5:= v15[v5] @kind byte;
  #L160f80.  v15:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L160f84.  v17:= v8 + 1;
  #L160f88.  v8:= v15[v8] @kind byte;
  #L160f8c.  if v5 == v8 then goto L160f92;
  #L160f90.  goto L160fd4;
  #L160f92.  v18:= 1L;
  #L160f96.  v13:= v13 + v18 @kind long;
  #L160f9a.  v5:= v16;
  #L160f9e.  v8:= v17;
  #L160fa2.  goto L160f6c;
  #L160fa4.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L160fa8.  if v5 != v13 then goto L160fba;
  #L160fac.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L160fb0.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L160fb6.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L160fba.  v13:= v1.`okio.Segment.limit` @type ^`int`;
  #L160fbe.  if v8 != v13 then goto L160fd0;
  #L160fc2.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L160fc6.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L160fcc.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L160fd0.  v9:= v9 + v11 @kind long;
  #L160fd2.  goto L160f44;
  #L160fd4.  return v2;
}
procedure `boolean` `exhausted`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160fe8.  v0:= v5.`okio.Buffer.a` @type ^`long` @kind wide;
  #L160fec.  v2:= 0L;
  #L160ff0.  v4:= lcmp(v0, v2);
  #L160ff4.  if v4 != 0 then goto L160ffc;
  #L160ff8.  v0:= 1I;
  #L160ffa.  goto L160ffe;
  #L160ffc.  v0:= 0I;
  #L160ffe.  return v0;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L164748.  return @kind void;
}
procedure `okio.Buffer` `getBuffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.getBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L162dd8.  return v0 @kind object;
}
procedure `byte` `getByte`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16111c.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161122.  v0:= temp @kind wide;
  #L161124.  v4:= 1L;
  #L161128.  v2:= v7 @kind wide;
  #L16112a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L161130.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161134.  if v0 == 0 then goto L1611d4;
  #L161138.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16113e.  v1:= temp @kind wide;
  #L161140.  v1:= v1 - v7 @kind long;
  #L161142.  v3:= lcmp(v1, v7);
  #L161146.  if v3 >= 0 then goto L161190;
  #L16114a.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161150.  v1:= temp @kind wide;
  #L161152.  v3:= lcmp(v1, v7);
  #L161156.  if v3 <= 0 then goto L161174;
  #L16115a.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16115e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161164.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L161168.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L16116c.  v3:= v3 - v4 @kind int;
  #L16116e.  v3:= (`long`) v3 @kind i2l;
  #L161170.  v1:= v1 - v3 @kind long;
  #L161172.  goto L161152;
  #L161174.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16117a.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16117e.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L161182.  v4:= (`long`) v0 @kind i2l;
  #L161184.  v4:= v4 + v7 @kind long;
  #L161186.  v4:= v4 - v1 @kind long;
  #L161188.  v7:= (`int`) v4 @kind l2i;
  #L16118a.  v7:= v3[v7] @kind byte;
  #L16118e.  goto L1611c4;
  #L161190.  v1:= 0L;
  #L161194.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L161198.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L16119c.  v3:= v3 - v4 @kind int;
  #L16119e.  v3:= (`long`) v3 @kind i2l;
  #L1611a0.  v3:= v3 + v1 @kind long;
  #L1611a2.  v5:= lcmp(v3, v7);
  #L1611a6.  if v5 <= 0 then goto L1611c6;
  #L1611aa.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1611b0.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1611b4.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1611b8.  v4:= (`long`) v0 @kind i2l;
  #L1611ba.  v4:= v4 + v7 @kind long;
  #L1611bc.  v4:= v4 - v1 @kind long;
  #L1611be.  v7:= (`int`) v4 @kind l2i;
  #L1611c0.  v7:= v3[v7] @kind byte;
  #L1611c4.  return v7;
  #L1611c6.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1611ca.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1611d0.  v1:= v3 @kind wide;
  #L1611d2.  goto L161194;
  #L1611d4.  v7:= 0I;
  #L1611d6.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1611dc.  throw v7;
}
procedure `int` `hashCode`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16132c.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161330.  if v0 == 0 then goto L16136a;
  #L161334.  v1:= 1I;
  #L161336.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L16133a.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L16133e.  if v2 >= v3 then goto L161356;
  #L161342.  v1:= v1 * 31;
  #L161346.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16134a.  v4:= v4[v2] @kind byte;
  #L16134e.  v1:= v1 + v4 @kind int;
  #L161350.  v2:= v2 + 1;
  #L161354.  goto L16133e;
  #L161356.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16135a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161360.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161364.  if v0 != v2 then goto L161336;
  #L161368.  goto L16136c;
  #L16136a.  v1:= 0I;
  #L16136c.  return v1;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16423c.  v0:= "key" @kind object;
  #L164240.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L164246.  v0:= "HmacSHA1" @kind object;
  #L16424a.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L164250.  v2:= temp @kind object;
  #L164252.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L164264.  v0:= "key" @kind object;
  #L164268.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16426e.  v0:= "HmacSHA256" @kind object;
  #L164272.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L164278.  v2:= temp @kind object;
  #L16427a.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16428c.  v0:= "key" @kind object;
  #L164290.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L164296.  v0:= "HmacSHA512" @kind object;
  #L16429a.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L1642a0.  v2:= temp @kind object;
  #L1642a2.  return v2 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 ) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L161c90.  v2:= 0L;
  #L161c94.  v4:= 9223372036854775807L;
  #L161c9e.  v0:= v6 @kind object;
  #L161ca0.  v1:= v7;
  #L161ca2.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L161ca8.  v0:= temp @kind wide;
  #L161caa.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 , `long` v8 ) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L161cbc.  v4:= 9223372036854775807L;
  #L161cc6.  v0:= v6 @kind object;
  #L161cc8.  v1:= v7;
  #L161cca.  v2:= v8 @kind wide;
  #L161ccc.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L161cd2.  v7:= temp @kind wide;
  #L161cd4.  return v7 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v10 @kind this, `byte` v11 , `long` v12 , `long` v14 ) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L161ce8.  v0:= 0L;
  #L161cec.  v2:= lcmp(v0, v12);
  #L161cf0.  if v2 <= 0 then goto L161cf6;
  #L161cf4.  goto L161d02;
  #L161cf6.  v2:= lcmp(v14, v12);
  #L161cfa.  if v2 < 0 then goto L161d02;
  #L161cfe.  v2:= 1I;
  #L161d00.  goto L161d04;
  #L161d02.  v2:= 0I;
  #L161d04.  if v2 == 0 then goto L161e6a;
  #L161d08.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161d0e.  v2:= temp @kind wide;
  #L161d10.  v4:= lcmp(v14, v2);
  #L161d14.  if v4 <= 0 then goto L161d20;
  #L161d18.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161d1e.  v14:= temp @kind wide;
  #L161d20.  v2:= -1L;
  #L161d24.  v4:= lcmp(v12, v14);
  #L161d28.  if v4 != 0 then goto L161d30;
  #L161d2c.  goto L161e68;
  #L161d30.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161d34.  if v4 == 0 then goto L161e68;
  #L161d38.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161d3e.  v5:= temp @kind wide;
  #L161d40.  v5:= v5 - v12 @kind long;
  #L161d42.  v7:= lcmp(v5, v12);
  #L161d46.  if v7 >= 0 then goto L161de2;
  #L161d4a.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161d50.  v0:= temp @kind wide;
  #L161d52.  v5:= lcmp(v0, v12);
  #L161d56.  if v5 <= 0 then goto L161d74;
  #L161d5a.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L161d5e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161d64.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L161d68.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L161d6c.  v5:= v5 - v6 @kind int;
  #L161d6e.  v5:= (`long`) v5 @kind i2l;
  #L161d70.  v0:= v0 - v5 @kind long;
  #L161d72.  goto L161d52;
  #L161d74.  v5:= lcmp(v0, v14);
  #L161d78.  if v5 >= 0 then goto L161e68;
  #L161d7c.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L161d80.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L161d84.  v6:= (`long`) v6 @kind i2l;
  #L161d86.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L161d8a.  v8:= (`long`) v8 @kind i2l;
  #L161d8c.  v8:= v8 + v14 @kind long;
  #L161d8e.  v8:= v8 - v0 @kind long;
  #L161d90.  call temp:= `min`(v6, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L161d96.  v6:= temp @kind wide;
  #L161d98.  v7:= (`int`) v6 @kind l2i;
  #L161d9a.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L161d9e.  v8:= (`long`) v6 @kind i2l;
  #L161da0.  v8:= v8 + v12 @kind long;
  #L161da2.  v8:= v8 - v0 @kind long;
  #L161da4.  v12:= (`int`) v8 @kind l2i;
  #L161da6.  if v12 >= v7 then goto L161dc6;
  #L161daa.  v13:= v5[v12] @kind byte;
  #L161dae.  if v13 != v11 then goto L161dc0;
  #L161db2.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L161db6.  v12:= v12 - v11 @kind int;
  #L161db8.  v11:= (`long`) v12 @kind i2l;
  #L161dba.  v2:= v11 + v0 @kind long;
  #L161dbe.  goto L161e68;
  #L161dc0.  v12:= v12 + 1;
  #L161dc4.  goto L161da6;
  #L161dc6.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L161dca.  v13:= v4.`okio.Segment.pos` @type ^`int`;
  #L161dce.  v12:= v12 - v13 @kind int;
  #L161dd0.  v12:= (`long`) v12 @kind i2l;
  #L161dd2.  v0:= v0 + v12 @kind long;
  #L161dd4.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L161dd8.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161dde.  v12:= v0 @kind wide;
  #L161de0.  goto L161d74;
  #L161de2.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L161de6.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L161dea.  v5:= v5 - v6 @kind int;
  #L161dec.  v5:= (`long`) v5 @kind i2l;
  #L161dee.  v5:= v5 + v0 @kind long;
  #L161df0.  v7:= lcmp(v5, v12);
  #L161df4.  if v7 <= 0 then goto L161e5a;
  #L161df8.  v5:= lcmp(v0, v14);
  #L161dfc.  if v5 >= 0 then goto L161e68;
  #L161e00.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L161e04.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L161e08.  v6:= (`long`) v6 @kind i2l;
  #L161e0a.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L161e0e.  v8:= (`long`) v8 @kind i2l;
  #L161e10.  v8:= v8 + v14 @kind long;
  #L161e12.  v8:= v8 - v0 @kind long;
  #L161e14.  call temp:= `min`(v6, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L161e1a.  v6:= temp @kind wide;
  #L161e1c.  v7:= (`int`) v6 @kind l2i;
  #L161e1e.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L161e22.  v8:= (`long`) v6 @kind i2l;
  #L161e24.  v8:= v8 + v12 @kind long;
  #L161e26.  v8:= v8 - v0 @kind long;
  #L161e28.  v12:= (`int`) v8 @kind l2i;
  #L161e2a.  if v12 >= v7 then goto L161e3e;
  #L161e2e.  v13:= v5[v12] @kind byte;
  #L161e32.  if v13 != v11 then goto L161e38;
  #L161e36.  goto L161db2;
  #L161e38.  v12:= v12 + 1;
  #L161e3c.  goto L161e2a;
  #L161e3e.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L161e42.  v13:= v4.`okio.Segment.pos` @type ^`int`;
  #L161e46.  v12:= v12 - v13 @kind int;
  #L161e48.  v12:= (`long`) v12 @kind i2l;
  #L161e4a.  v0:= v0 + v12 @kind long;
  #L161e4c.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L161e50.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161e56.  v12:= v0 @kind wide;
  #L161e58.  goto L161df8;
  #L161e5a.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L161e5e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161e64.  v0:= v5 @kind wide;
  #L161e66.  goto L161de2;
  #L161e68.  return v2 @kind wide;
  #L161e6a.  v11:= new `java.lang.StringBuilder`;
  #L161e6e.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161e74.  v0:= "size=" @kind object;
  #L161e78.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e7e.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161e84.  v0:= temp @kind wide;
  #L161e86.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e8c.  v0:= " fromIndex=" @kind object;
  #L161e90.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e96.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e9c.  v12:= " toIndex=" @kind object;
  #L161ea0.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161ea6.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161eac.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161eb2.  v11:= temp @kind object;
  #L161eb4.  v12:= new `java.lang.IllegalArgumentException`;
  #L161eb8.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L161ebe.  v11:= temp @kind object;
  #L161ec0.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161ec6.  throw v12;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161ed8.  v0:= "bytes" @kind object;
  #L161edc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L161ee2.  v0:= 0L;
  #L161ee6.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L161eec.  v0:= temp @kind wide;
  #L161eee.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v17 @kind this, `okio.ByteString` v18 @kind object, `long` v19 ) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L161f00.  v0:= v19 @kind wide;
  #L161f04.  v2:= "bytes" @kind object;
  #L161f08.  v3:= v18 @kind object;
  #L161f0c.  call `checkNotNullParameter`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L161f12.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L161f18.  v2:= temp;
  #L161f1a.  v4:= 0I;
  #L161f1c.  if v2 <= 0 then goto L161f24;
  #L161f20.  v2:= 1I;
  #L161f22.  goto L161f26;
  #L161f24.  v2:= 0I;
  #L161f26.  if v2 == 0 then goto L16214a;
  #L161f2a.  v6:= 0L;
  #L161f2e.  v2:= lcmp(v0, v6);
  #L161f32.  if v2 < 0 then goto L161f3a;
  #L161f36.  v2:= 1I;
  #L161f38.  goto L161f3c;
  #L161f3a.  v2:= 0I;
  #L161f3c.  if v2 == 0 then goto L162110;
  #L161f40.  v2:= v17 @kind object;
  #L161f44.  v8:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161f48.  if v8 == 0 then goto L16210a;
  #L161f4c.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161f52.  v11:= temp @kind wide;
  #L161f54.  v11:= v11 - v0 @kind long;
  #L161f56.  v13:= 1L;
  #L161f5a.  v15:= lcmp(v11, v0);
  #L161f5e.  if v15 >= 0 then goto L16203a;
  #L161f62.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161f68.  v6:= temp @kind wide;
  #L161f6a.  v11:= lcmp(v6, v0);
  #L161f6e.  if v11 <= 0 then goto L161f8c;
  #L161f72.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L161f76.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L161f7c.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L161f80.  v12:= v8.`okio.Segment.pos` @type ^`int`;
  #L161f84.  v11:= v11 - v12 @kind int;
  #L161f86.  v11:= (`long`) v11 @kind i2l;
  #L161f88.  v6:= v6 - v11 @kind long;
  #L161f8a.  goto L161f6a;
  #L161f8c.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L161f92.  v11:= temp @kind object;
  #L161f94.  v4:= v11[v4] @kind byte;
  #L161f98.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L161f9e.  v3:= temp;
  #L161fa0.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161fa6.  v15:= temp @kind wide;
  #L161fa8.  v9:= (`long`) v3 @kind i2l;
  #L161faa.  v15:= v15 - v9 @kind long;
  #L161fac.  v15:= v15 + v13 @kind long;
  #L161fae.  v9:= lcmp(v6, v15);
  #L161fb2.  if v9 >= 0 then goto L16210a;
  #L161fb6.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L161fba.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L161fbe.  v12:= v8.`okio.Segment.pos` @type ^`int`;
  #L161fc2.  v12:= (`long`) v12 @kind i2l;
  #L161fc4.  v12:= v12 + v15 @kind long;
  #L161fc6.  v12:= v12 - v6 @kind long;
  #L161fc8.  v18:= v6 @kind wide;
  #L161fcc.  v5:= (`long`) v10 @kind i2l;
  #L161fce.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L161fd4.  v5:= temp @kind wide;
  #L161fd6.  v6:= (`int`) v5 @kind l2i;
  #L161fd8.  v5:= v8.`okio.Segment.pos` @type ^`int`;
  #L161fdc.  v12:= (`long`) v5 @kind i2l;
  #L161fde.  v12:= v12 + v0 @kind long;
  #L161fe0.  v0:= v18 @kind wide;
  #L161fe4.  v12:= v12 - v0 @kind long;
  #L161fe6.  v5:= (`int`) v12 @kind l2i;
  #L161fe8.  if v5 >= v6 then goto L16201c;
  #L161fec.  v7:= v9[v5] @kind byte;
  #L161ff0.  if v7 != v4 then goto L162016;
  #L161ff4.  v7:= v5 + 1;
  #L161ff8.  v10:= 1I;
  #L161ffa.  call temp:= `rangeEquals`(v8, v7, v11, v10, v3) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L162000.  v7:= temp;
  #L162002.  if v7 == 0 then goto L162016;
  #L162006.  v3:= v8.`okio.Segment.pos` @type ^`int`;
  #L16200a.  v5:= v5 - v3 @kind int;
  #L16200c.  v3:= (`long`) v5 @kind i2l;
  #L16200e.  v9:= v3 + v0 @kind long;
  #L162012.  goto L16210e;
  #L162016.  v5:= v5 + 1;
  #L16201a.  goto L161fe8;
  #L16201c.  v5:= v8.`okio.Segment.limit` @type ^`int`;
  #L162020.  v6:= v8.`okio.Segment.pos` @type ^`int`;
  #L162024.  v5:= v5 - v6 @kind int;
  #L162026.  v5:= (`long`) v5 @kind i2l;
  #L162028.  v6:= v0 + v5 @kind long;
  #L16202c.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162030.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162036.  v0:= v6 @kind wide;
  #L162038.  goto L161fae;
  #L16203a.  v5:= v8.`okio.Segment.limit` @type ^`int`;
  #L16203e.  v9:= v8.`okio.Segment.pos` @type ^`int`;
  #L162042.  v5:= v5 - v9 @kind int;
  #L162044.  v9:= (`long`) v5 @kind i2l;
  #L162046.  v9:= v9 + v6 @kind long;
  #L162048.  v5:= lcmp(v9, v0);
  #L16204c.  if v5 <= 0 then goto L1620fa;
  #L162050.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L162056.  v5:= temp @kind object;
  #L162058.  v4:= v5[v4] @kind byte;
  #L16205c.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L162062.  v3:= temp;
  #L162064.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16206a.  v9:= temp @kind wide;
  #L16206c.  v11:= (`long`) v3 @kind i2l;
  #L16206e.  v9:= v9 - v11 @kind long;
  #L162070.  v9:= v9 + v13 @kind long;
  #L162072.  v11:= lcmp(v6, v9);
  #L162076.  if v11 >= 0 then goto L16210a;
  #L16207a.  v11:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16207e.  v12:= v8.`okio.Segment.limit` @type ^`int`;
  #L162082.  v13:= v8.`okio.Segment.pos` @type ^`int`;
  #L162086.  v13:= (`long`) v13 @kind i2l;
  #L162088.  v13:= v13 + v9 @kind long;
  #L16208a.  v13:= v13 - v6 @kind long;
  #L16208c.  v15:= v9 @kind wide;
  #L16208e.  v9:= (`long`) v12 @kind i2l;
  #L162090.  call temp:= `min`(v9, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L162096.  v9:= temp @kind wide;
  #L162098.  v10:= (`int`) v9 @kind l2i;
  #L16209a.  v9:= v8.`okio.Segment.pos` @type ^`int`;
  #L16209e.  v12:= (`long`) v9 @kind i2l;
  #L1620a0.  v12:= v12 + v0 @kind long;
  #L1620a2.  v12:= v12 - v6 @kind long;
  #L1620a4.  v0:= (`int`) v12 @kind l2i;
  #L1620a6.  if v0 >= v10 then goto L1620da;
  #L1620aa.  v1:= v11[v0] @kind byte;
  #L1620ae.  if v1 != v4 then goto L1620d2;
  #L1620b2.  v1:= v0 + 1;
  #L1620b6.  v12:= 1I;
  #L1620b8.  call temp:= `rangeEquals`(v8, v1, v5, v12, v3) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L1620be.  v1:= temp;
  #L1620c0.  if v1 == 0 then goto L1620d4;
  #L1620c4.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1620c8.  v0:= v0 - v1 @kind int;
  #L1620ca.  v0:= (`long`) v0 @kind i2l;
  #L1620cc.  v9:= v0 + v6 @kind long;
  #L1620d0.  goto L16210e;
  #L1620d2.  v12:= 1I;
  #L1620d4.  v0:= v0 + 1;
  #L1620d8.  goto L1620a6;
  #L1620da.  v12:= 1I;
  #L1620dc.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L1620e0.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1620e4.  v0:= v0 - v1 @kind int;
  #L1620e6.  v0:= (`long`) v0 @kind i2l;
  #L1620e8.  v6:= v6 + v0 @kind long;
  #L1620ea.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1620ee.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1620f4.  v0:= v6 @kind wide;
  #L1620f6.  v9:= v15 @kind wide;
  #L1620f8.  goto L162072;
  #L1620fa.  v12:= 1I;
  #L1620fc.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162100.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162106.  v6:= v9 @kind wide;
  #L162108.  goto L16203a;
  #L16210a.  v9:= -1L;
  #L16210e.  return v9 @kind wide;
  #L162110.  v2:= v17 @kind object;
  #L162114.  v3:= new `java.lang.StringBuilder`;
  #L162118.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16211e.  v4:= "fromIndex < 0: " @kind object;
  #L162122.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162128.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16212e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162134.  v0:= temp @kind object;
  #L162136.  v1:= new `java.lang.IllegalArgumentException`;
  #L16213a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L162140.  v0:= temp @kind object;
  #L162142.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162148.  throw v1;
  #L16214a.  v2:= v17 @kind object;
  #L16214e.  v0:= new `java.lang.IllegalArgumentException`;
  #L162152.  v1:= "bytes is empty" @kind object;
  #L162156.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16215c.  v1:= temp @kind object;
  #L16215e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162164.  throw v0;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162178.  v0:= "targetBytes" @kind object;
  #L16217c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162182.  v0:= 0L;
  #L162186.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L16218c.  v0:= temp @kind wide;
  #L16218e.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v11 @kind this, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1621a0.  v0:= "targetBytes" @kind object;
  #L1621a4.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1621aa.  v0:= 0L;
  #L1621ae.  v2:= 0I;
  #L1621b0.  v3:= 1I;
  #L1621b2.  v4:= lcmp(v13, v0);
  #L1621b6.  if v4 < 0 then goto L1621be;
  #L1621ba.  v4:= 1I;
  #L1621bc.  goto L1621c0;
  #L1621be.  v4:= 0I;
  #L1621c0.  if v4 == 0 then goto L162410;
  #L1621c4.  v4:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1621c8.  v5:= -1L;
  #L1621cc.  if v4 == 0 then goto L16240e;
  #L1621d0.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1621d6.  v7:= temp @kind wide;
  #L1621d8.  v7:= v7 - v13 @kind long;
  #L1621da.  v9:= 2I;
  #L1621dc.  v10:= lcmp(v7, v13);
  #L1621e0.  if v10 >= 0 then goto L162304;
  #L1621e4.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1621ea.  v0:= temp @kind wide;
  #L1621ec.  v7:= lcmp(v0, v13);
  #L1621f0.  if v7 <= 0 then goto L16220e;
  #L1621f4.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1621f8.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1621fe.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L162202.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L162206.  v7:= v7 - v8 @kind int;
  #L162208.  v7:= (`long`) v7 @kind i2l;
  #L16220a.  v0:= v0 - v7 @kind long;
  #L16220c.  goto L1621ec;
  #L16220e.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L162214.  v7:= temp;
  #L162216.  if v7 != v9 then goto L162292;
  #L16221a.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L162220.  v2:= temp;
  #L162222.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L162228.  v12:= temp;
  #L16222a.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162230.  v7:= temp @kind wide;
  #L162232.  v3:= lcmp(v0, v7);
  #L162236.  if v3 >= 0 then goto L16240e;
  #L16223a.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16223e.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L162242.  v7:= (`long`) v7 @kind i2l;
  #L162244.  v7:= v7 + v13 @kind long;
  #L162246.  v7:= v7 - v0 @kind long;
  #L162248.  v13:= (`int`) v7 @kind l2i;
  #L16224a.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16224e.  if v13 >= v14 then goto L162276;
  #L162252.  v7:= v3[v13] @kind byte;
  #L162256.  if v7 == v2 then goto L162266;
  #L16225a.  if v7 != v12 then goto L162260;
  #L16225e.  goto L162266;
  #L162260.  v13:= v13 + 1;
  #L162264.  goto L16224e;
  #L162266.  v12:= v4.`okio.Segment.pos` @type ^`int`;
  #L16226a.  v13:= v13 - v12 @kind int;
  #L16226c.  v12:= (`long`) v13 @kind i2l;
  #L16226e.  v5:= v12 + v0 @kind long;
  #L162272.  goto L16240e;
  #L162276.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L16227a.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16227e.  v13:= v13 - v14 @kind int;
  #L162280.  v13:= (`long`) v13 @kind i2l;
  #L162282.  v0:= v0 + v13 @kind long;
  #L162284.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162288.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16228e.  v13:= v0 @kind wide;
  #L162290.  goto L16222a;
  #L162292.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L162298.  v12:= temp @kind object;
  #L16229a.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1622a0.  v7:= temp @kind wide;
  #L1622a2.  v3:= lcmp(v0, v7);
  #L1622a6.  if v3 >= 0 then goto L16240e;
  #L1622aa.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1622ae.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1622b2.  v7:= (`long`) v7 @kind i2l;
  #L1622b4.  v7:= v7 + v13 @kind long;
  #L1622b6.  v7:= v7 - v0 @kind long;
  #L1622b8.  v13:= (`int`) v7 @kind l2i;
  #L1622ba.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1622be.  if v13 >= v14 then goto L1622e8;
  #L1622c2.  v7:= v3[v13] @kind byte;
  #L1622c6.  v8:= length @variable v12;
  #L1622c8.  v9:= 0I;
  #L1622ca.  if v9 >= v8 then goto L1622e2;
  #L1622ce.  v10:= v12[v9] @kind byte;
  #L1622d2.  if v7 != v10 then goto L1622dc;
  #L1622d6.  v12:= v4.`okio.Segment.pos` @type ^`int`;
  #L1622da.  goto L16226a;
  #L1622dc.  v9:= v9 + 1;
  #L1622e0.  goto L1622ca;
  #L1622e2.  v13:= v13 + 1;
  #L1622e6.  goto L1622be;
  #L1622e8.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1622ec.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1622f0.  v13:= v13 - v14 @kind int;
  #L1622f2.  v13:= (`long`) v13 @kind i2l;
  #L1622f4.  v0:= v0 + v13 @kind long;
  #L1622f6.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1622fa.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162300.  v13:= v0 @kind wide;
  #L162302.  goto L16229a;
  #L162304.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L162308.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L16230c.  v7:= v7 - v8 @kind int;
  #L16230e.  v7:= (`long`) v7 @kind i2l;
  #L162310.  v7:= v7 + v0 @kind long;
  #L162312.  v10:= lcmp(v7, v13);
  #L162316.  if v10 <= 0 then goto L1623fe;
  #L16231a.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L162320.  v7:= temp;
  #L162322.  if v7 != v9 then goto L162390;
  #L162326.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16232c.  v2:= temp;
  #L16232e.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L162334.  v12:= temp;
  #L162336.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16233c.  v7:= temp @kind wide;
  #L16233e.  v3:= lcmp(v0, v7);
  #L162342.  if v3 >= 0 then goto L16240e;
  #L162346.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16234a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16234e.  v7:= (`long`) v7 @kind i2l;
  #L162350.  v7:= v7 + v13 @kind long;
  #L162352.  v7:= v7 - v0 @kind long;
  #L162354.  v13:= (`int`) v7 @kind l2i;
  #L162356.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16235a.  if v13 >= v14 then goto L162374;
  #L16235e.  v7:= v3[v13] @kind byte;
  #L162362.  if v7 == v2 then goto L162266;
  #L162366.  if v7 != v12 then goto L16236e;
  #L16236a.  goto L162266;
  #L16236e.  v13:= v13 + 1;
  #L162372.  goto L16235a;
  #L162374.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L162378.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16237c.  v13:= v13 - v14 @kind int;
  #L16237e.  v13:= (`long`) v13 @kind i2l;
  #L162380.  v0:= v0 + v13 @kind long;
  #L162382.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162386.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16238c.  v13:= v0 @kind wide;
  #L16238e.  goto L162336;
  #L162390.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L162396.  v12:= temp @kind object;
  #L162398.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16239e.  v7:= temp @kind wide;
  #L1623a0.  v3:= lcmp(v0, v7);
  #L1623a4.  if v3 >= 0 then goto L16240e;
  #L1623a8.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1623ac.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1623b0.  v7:= (`long`) v7 @kind i2l;
  #L1623b2.  v7:= v7 + v13 @kind long;
  #L1623b4.  v7:= v7 - v0 @kind long;
  #L1623b6.  v13:= (`int`) v7 @kind l2i;
  #L1623b8.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1623bc.  if v13 >= v14 then goto L1623e2;
  #L1623c0.  v7:= v3[v13] @kind byte;
  #L1623c4.  v8:= length @variable v12;
  #L1623c6.  v9:= 0I;
  #L1623c8.  if v9 >= v8 then goto L1623dc;
  #L1623cc.  v10:= v12[v9] @kind byte;
  #L1623d0.  if v7 != v10 then goto L1623d6;
  #L1623d4.  goto L1622d6;
  #L1623d6.  v9:= v9 + 1;
  #L1623da.  goto L1623c8;
  #L1623dc.  v13:= v13 + 1;
  #L1623e0.  goto L1623bc;
  #L1623e2.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1623e6.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1623ea.  v13:= v13 - v14 @kind int;
  #L1623ec.  v13:= (`long`) v13 @kind i2l;
  #L1623ee.  v0:= v0 + v13 @kind long;
  #L1623f0.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1623f4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1623fa.  v13:= v0 @kind wide;
  #L1623fc.  goto L162398;
  #L1623fe.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L162402.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162408.  v0:= v7 @kind wide;
  #L16240a.  goto L162304;
  #L16240e.  return v5 @kind wide;
  #L162410.  v12:= new `java.lang.StringBuilder`;
  #L162414.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16241a.  v0:= "fromIndex < 0: " @kind object;
  #L16241e.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162424.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16242a.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162430.  v12:= temp @kind object;
  #L162432.  v13:= new `java.lang.IllegalArgumentException`;
  #L162436.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16243c.  v12:= temp @kind object;
  #L16243e.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162444.  throw v13;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161830.  v0:= new `okio.Buffer$inputStream$1`;
  #L161834.  call `<init>`(v0, v1) @signature `Lokio/Buffer$inputStream$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L16183a.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161010.  v0:= 1I;
  #L161012.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1642b4.  v0:= "MD5" @kind object;
  #L1642b8.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1642be.  v0:= temp @kind object;
  #L1642c0.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16184c.  v0:= new `okio.Buffer$outputStream$1`;
  #L161850.  call `<init>`(v0, v1) @signature `Lokio/Buffer$outputStream$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L161856.  return v0 @kind object;
}
procedure `okio.BufferedSource` `peek`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.peek:()Lokio/BufferedSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1640e0.  v0:= new `okio.PeekSource`;
  #L1640e4.  call `<init>`(v0, v1) @signature `Lokio/PeekSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L1640ea.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1640f0.  v0:= temp @kind object;
  #L1640f2.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 , `okio.ByteString` v10 @kind object) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L161024.  v0:= "bytes" @kind object;
  #L161028.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16102e.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L161034.  v6:= temp;
  #L161036.  v5:= 0I;
  #L161038.  v1:= v7 @kind object;
  #L16103a.  v2:= v8 @kind wide;
  #L16103c.  v4:= v10 @kind object;
  #L16103e.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L161044.  v8:= temp;
  #L161046.  return v8;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L161058.  v0:= "bytes" @kind object;
  #L16105c.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L161062.  v0:= 0I;
  #L161064.  v1:= 0L;
  #L161068.  v3:= lcmp(v7, v1);
  #L16106c.  if v3 < 0 then goto L1610c8;
  #L161070.  if v10 < 0 then goto L1610c8;
  #L161074.  if v11 < 0 then goto L1610c8;
  #L161078.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16107e.  v1:= temp @kind wide;
  #L161080.  v1:= v1 - v7 @kind long;
  #L161082.  v3:= (`long`) v11 @kind i2l;
  #L161084.  v5:= lcmp(v1, v3);
  #L161088.  if v5 < 0 then goto L1610c8;
  #L16108c.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L161092.  v1:= temp;
  #L161094.  v1:= v1 - v10 @kind int;
  #L161096.  if v1 >= v11 then goto L16109c;
  #L16109a.  goto L1610c8;
  #L16109c.  v1:= 0I;
  #L16109e.  if v1 >= v11 then goto L1610c6;
  #L1610a2.  v2:= (`long`) v1 @kind i2l;
  #L1610a4.  v2:= v2 + v7 @kind long;
  #L1610a6.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1610ac.  v2:= temp;
  #L1610ae.  v3:= v10 + v1 @kind int;
  #L1610b2.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1610b8.  v3:= temp;
  #L1610ba.  if v2 == v3 then goto L1610c0;
  #L1610be.  goto L1610c8;
  #L1610c0.  v1:= v1 + 1;
  #L1610c4.  goto L16109e;
  #L1610c6.  v0:= 1I;
  #L1610c8.  return v0;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16143c.  v0:= "sink" @kind object;
  #L161440.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L161446.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16144a.  if v0 == 0 then goto L1614a8;
  #L16144e.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L161454.  v1:= temp;
  #L161456.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L16145a.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L16145e.  v2:= v2 - v3 @kind int;
  #L161460.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L161466.  v1:= temp;
  #L161468.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16146c.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L161470.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L161476.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L16147a.  v7:= v7 + v1 @kind int;
  #L16147c.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L161480.  v2:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L161484.  v4:= (`long`) v1 @kind i2l;
  #L161486.  v2:= v2 - v4 @kind long;
  #L161488.  v6.`okio.Buffer.a` @type ^`long` := v2 @kind wide;
  #L16148c.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L161490.  if v7 != v2 then goto L1614a6;
  #L161494.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16149a.  v7:= temp @kind object;
  #L16149c.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1614a0.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1614a6.  return v1;
  #L1614a8.  v7:= -1I;
  #L1614aa.  return v7;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161380.  v0:= "sink" @kind object;
  #L161384.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16138a.  v0:= length @variable v3;
  #L16138c.  v1:= 0I;
  #L16138e.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L161394.  v3:= temp;
  #L161396.  return v3;
}
procedure `int` `read`(`okio.Buffer` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1613a8.  v0:= "sink" @kind object;
  #L1613ac.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1613b2.  v0:= length @variable v8;
  #L1613b4.  v1:= (`long`) v0 @kind i2l;
  #L1613b6.  v3:= (`long`) v9 @kind i2l;
  #L1613b8.  v5:= (`long`) v10 @kind i2l;
  #L1613ba.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1613c0.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1613c4.  if v0 == 0 then goto L161428;
  #L1613c8.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1613cc.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1613d0.  v1:= v1 - v2 @kind int;
  #L1613d2.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1613d8.  v10:= temp;
  #L1613da.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1613de.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1613e2.  v3:= v2 + v10 @kind int;
  #L1613e6.  call temp:= `copyInto`(v1, v8, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1613ec.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L1613f0.  v8:= v8 + v10 @kind int;
  #L1613f2.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L1613f6.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1613fc.  v8:= temp @kind wide;
  #L1613fe.  v1:= (`long`) v10 @kind i2l;
  #L161400.  v8:= v8 - v1 @kind long;
  #L161402.  call `setSize$okio`(v7, v8) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L161408.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L16140c.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L161410.  if v8 != v9 then goto L16142a;
  #L161414.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16141a.  v8:= temp @kind object;
  #L16141c.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L161420.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L161426.  goto L16142a;
  #L161428.  v10:= -1I;
  #L16142a.  return v10;
}
procedure `long` `read`(`okio.Buffer` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L162458.  v0:= "sink" @kind object;
  #L16245c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162462.  v0:= 0L;
  #L162466.  v2:= lcmp(v7, v0);
  #L16246a.  if v2 < 0 then goto L162472;
  #L16246e.  v2:= 1I;
  #L162470.  goto L162474;
  #L162472.  v2:= 0I;
  #L162474.  if v2 == 0 then goto L1624b0;
  #L162478.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16247e.  v2:= temp @kind wide;
  #L162480.  v4:= lcmp(v2, v0);
  #L162484.  if v4 != 0 then goto L16248e;
  #L162488.  v6:= -1L;
  #L16248c.  goto L1624ae;
  #L16248e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162494.  v0:= temp @kind wide;
  #L162496.  v2:= lcmp(v7, v0);
  #L16249a.  if v2 <= 0 then goto L1624a6;
  #L16249e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1624a4.  v7:= temp @kind wide;
  #L1624a6.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1624ac.  v6:= v7 @kind wide;
  #L1624ae.  return v6 @kind wide;
  #L1624b0.  v6:= new `java.lang.StringBuilder`;
  #L1624b4.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1624ba.  v0:= "byteCount < 0: " @kind object;
  #L1624be.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1624c4.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1624ca.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1624d0.  v6:= temp @kind object;
  #L1624d2.  v7:= new `java.lang.IllegalArgumentException`;
  #L1624d6.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1624dc.  v6:= temp @kind object;
  #L1624de.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1624e4.  throw v7;
}
procedure `long` `readAll`(`okio.Buffer` v5 @kind this, `okio.Sink` v6 @kind object) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1624f8.  v0:= "sink" @kind object;
  #L1624fc.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162502.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162508.  v0:= temp @kind wide;
  #L16250a.  v2:= 0L;
  #L16250e.  v4:= lcmp(v0, v2);
  #L162512.  if v4 <= 0 then goto L16251c;
  #L162516.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L16251c.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L163d88.  v0:= 0I;
  #L163d8a.  v1:= 1I;
  #L163d8c.  call temp:= `readAndWriteUnsafe$default`(v2, v0, v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L163d92.  v0:= temp @kind object;
  #L163d94.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L163da8.  v0:= "unsafeCursor" @kind object;
  #L163dac.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163db2.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L163db6.  v1:= 1I;
  #L163db8.  if v0 != 0 then goto L163dc0;
  #L163dbc.  v0:= 1I;
  #L163dbe.  goto L163dc2;
  #L163dc0.  v0:= 0I;
  #L163dc2.  if v0 == 0 then goto L163dd0;
  #L163dc6.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L163dca.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v1 @kind boolean;
  #L163dce.  return v3 @kind object;
  #L163dd0.  v3:= new `java.lang.IllegalStateException`;
  #L163dd4.  v0:= "already attached to a buffer" @kind object;
  #L163dd8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163dde.  v0:= temp @kind object;
  #L163de0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163de6.  throw v3;
}
procedure `byte` `readByte`(`okio.Buffer` v9 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1611f0.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1611f6.  v0:= temp @kind wide;
  #L1611f8.  v2:= 0L;
  #L1611fc.  v4:= lcmp(v0, v2);
  #L161200.  if v4 == 0 then goto L161254;
  #L161204.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L161208.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16120e.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L161212.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L161216.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16121a.  v4:= v1 + 1;
  #L16121e.  v1:= v3[v1] @kind byte;
  #L161222.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161228.  v5:= temp @kind wide;
  #L16122a.  v7:= 1L;
  #L16122e.  v5:= v5 - v7 @kind long;
  #L161230.  call `setSize$okio`(v9, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L161236.  if v4 != v2 then goto L16124e;
  #L16123a.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L161240.  v2:= temp @kind object;
  #L161242.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L161246.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16124c.  goto L161252;
  #L16124e.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L161252.  return v1;
  #L161254.  v0:= new `java.io.EOFException`;
  #L161258.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16125e.  throw v0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161270.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161276.  v0:= temp @kind wide;
  #L161278.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L16127e.  v0:= temp @kind object;
  #L161280.  return v0 @kind object;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161294.  v0:= 0L;
  #L161298.  v2:= lcmp(v4, v0);
  #L16129c.  if v2 < 0 then goto L1612b4;
  #L1612a0.  v0:= 2147483647I;
  #L1612a6.  v0:= (`long`) v0 @kind i2l;
  #L1612a8.  v2:= lcmp(v4, v0);
  #L1612ac.  if v2 > 0 then goto L1612b4;
  #L1612b0.  v0:= 1I;
  #L1612b2.  goto L1612b6;
  #L1612b4.  v0:= 0I;
  #L1612b6.  if v0 == 0 then goto L1612e4;
  #L1612ba.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1612c0.  v0:= temp @kind wide;
  #L1612c2.  v2:= lcmp(v0, v4);
  #L1612c6.  if v2 < 0 then goto L1612d8;
  #L1612ca.  v5:= (`int`) v4 @kind l2i;
  #L1612cc.  v4:= new `byte`[v5];
  #L1612d0.  call `readFully`(v3, v4) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L1612d6.  return v4 @kind object;
  #L1612d8.  v4:= new `java.io.EOFException`;
  #L1612dc.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1612e2.  throw v4;
  #L1612e4.  v0:= new `java.lang.StringBuilder`;
  #L1612e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1612ee.  v1:= "byteCount: " @kind object;
  #L1612f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1612f8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1612fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161304.  v4:= temp @kind object;
  #L161306.  v5:= new `java.lang.IllegalArgumentException`;
  #L16130a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L161310.  v4:= temp @kind object;
  #L161312.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161318.  throw v5;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1642d4.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1642da.  v0:= temp @kind wide;
  #L1642dc.  call temp:= `readByteString`(v2, v0) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @kind virtual;
  #L1642e2.  v0:= temp @kind object;
  #L1642e4.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1642f8.  v0:= 0L;
  #L1642fc.  v2:= lcmp(v4, v0);
  #L164300.  if v2 < 0 then goto L164318;
  #L164304.  v0:= 2147483647I;
  #L16430a.  v0:= (`long`) v0 @kind i2l;
  #L16430c.  v2:= lcmp(v4, v0);
  #L164310.  if v2 > 0 then goto L164318;
  #L164314.  v0:= 1I;
  #L164316.  goto L16431a;
  #L164318.  v0:= 0I;
  #L16431a.  if v0 == 0 then goto L16436e;
  #L16431e.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164324.  v0:= temp @kind wide;
  #L164326.  v2:= lcmp(v0, v4);
  #L16432a.  if v2 < 0 then goto L164362;
  #L16432e.  v0:= 4096I;
  #L164332.  v0:= (`long`) v0 @kind i2l;
  #L164334.  v2:= lcmp(v4, v0);
  #L164338.  if v2 < 0 then goto L16434e;
  #L16433c.  v0:= (`int`) v4 @kind l2i;
  #L16433e.  call temp:= `snapshot`(v3, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L164344.  v0:= temp @kind object;
  #L164346.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16434c.  goto L164360;
  #L16434e.  v0:= new `okio.ByteString`;
  #L164352.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L164358.  v4:= temp @kind object;
  #L16435a.  call `<init>`(v0, v4) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L164360.  return v0 @kind object;
  #L164362.  v4:= new `java.io.EOFException`;
  #L164366.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16436c.  throw v4;
  #L16436e.  v0:= new `java.lang.StringBuilder`;
  #L164372.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L164378.  v1:= "byteCount: " @kind object;
  #L16437c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L164382.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L164388.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16438e.  v4:= temp @kind object;
  #L164390.  v5:= new `java.lang.IllegalArgumentException`;
  #L164394.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16439a.  v4:= temp @kind object;
  #L16439c.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1643a2.  throw v5;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v17 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L162530.  v0:= v17 @kind object;
  #L162534.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16253a.  v1:= temp @kind wide;
  #L16253c.  v3:= 0L;
  #L162540.  v5:= lcmp(v1, v3);
  #L162544.  if v5 == 0 then goto L1626d0;
  #L162548.  v1:= -7L;
  #L16254c.  v5:= 0I;
  #L16254e.  v6:= 0I;
  #L162550.  v7:= 0I;
  #L162552.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162556.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16255c.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L162560.  v10:= v8.`okio.Segment.pos` @type ^`int`;
  #L162564.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L162568.  v12:= 1I;
  #L16256a.  if v10 >= v11 then goto L162682;
  #L16256e.  v13:= v9[v10] @kind byte;
  #L162572.  v14:= 48I;
  #L162576.  v14:= (`byte`) v14 @kind i2b;
  #L162578.  if v13 < v14 then goto L162618;
  #L16257c.  v15:= 57I;
  #L162580.  v15:= (`byte`) v15 @kind i2b;
  #L162582.  if v13 > v15 then goto L162618;
  #L162586.  v14:= v14 - v13 @kind int;
  #L162588.  v15:= -922337203685477580L;
  #L162592.  v12:= lcmp(v3, v15);
  #L162596.  if v12 < 0 then goto L1625be;
  #L16259a.  v15:= v7;
  #L16259c.  v16:= v8 @kind object;
  #L1625a0.  if v12 != 0 then goto L1625b0;
  #L1625a4.  v7:= (`long`) v14 @kind i2l;
  #L1625a6.  v12:= lcmp(v7, v1);
  #L1625aa.  if v12 >= 0 then goto L1625b0;
  #L1625ae.  goto L1625be;
  #L1625b0.  v7:= 10L;
  #L1625b4.  v3:= v3 * v7 @kind long;
  #L1625b8.  v7:= (`long`) v14 @kind i2l;
  #L1625ba.  v3:= v3 + v7 @kind long;
  #L1625bc.  goto L162634;
  #L1625be.  v1:= new `okio.Buffer`;
  #L1625c2.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1625c8.  call temp:= `writeDecimalLong`(v1, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1625ce.  v1:= temp @kind object;
  #L1625d0.  call temp:= `writeByte`(v1, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1625d6.  v1:= temp @kind object;
  #L1625d8.  if v6 != 0 then goto L1625e2;
  #L1625dc.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1625e2.  v2:= new `java.lang.NumberFormatException`;
  #L1625e6.  v3:= new `java.lang.StringBuilder`;
  #L1625ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1625f0.  v4:= "Number too large: " @kind object;
  #L1625f4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1625fa.  call temp:= `readUtf8`(v1) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L162600.  v1:= temp @kind object;
  #L162602.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162608.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16260e.  v1:= temp @kind object;
  #L162610.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162616.  throw v2;
  #L162618.  v15:= v7;
  #L16261a.  v16:= v8 @kind object;
  #L16261e.  v7:= 45I;
  #L162622.  v7:= (`byte`) v7 @kind i2b;
  #L162624.  if v13 != v7 then goto L162644;
  #L162628.  if v5 != 0 then goto L162644;
  #L16262c.  v6:= 1L;
  #L162630.  v1:= v1 - v6 @kind long;
  #L162632.  v6:= 1I;
  #L162634.  v10:= v10 + 1;
  #L162638.  v5:= v5 + 1;
  #L16263c.  v7:= v15;
  #L16263e.  v8:= v16 @kind object;
  #L162642.  goto L162568;
  #L162644.  if v5 == 0 then goto L16264c;
  #L162648.  v7:= 1I;
  #L16264a.  goto L162688;
  #L16264c.  v1:= new `java.lang.NumberFormatException`;
  #L162650.  v2:= new `java.lang.StringBuilder`;
  #L162654.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16265a.  v3:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L16265e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162664.  call temp:= `toHexString`(v13) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L16266a.  v3:= temp @kind object;
  #L16266c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162672.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162678.  v2:= temp @kind object;
  #L16267a.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162680.  throw v1;
  #L162682.  v15:= v7;
  #L162684.  v16:= v8 @kind object;
  #L162688.  if v10 != v11 then goto L1626a0;
  #L16268c.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L162692.  v8:= temp @kind object;
  #L162694.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L162698.  call `recycle`(v16) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16269e.  goto L1626a8;
  #L1626a0.  v8:= v16 @kind object;
  #L1626a4.  v8.`okio.Segment.pos` @type ^`int` := v10;
  #L1626a8.  if v7 != 0 then goto L1626b4;
  #L1626ac.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1626b0.  if v8 != 0 then goto L162552;
  #L1626b4.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1626ba.  v1:= temp @kind wide;
  #L1626bc.  v7:= (`long`) v5 @kind i2l;
  #L1626be.  v1:= v1 - v7 @kind long;
  #L1626c0.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1626c6.  if v6 == 0 then goto L1626cc;
  #L1626ca.  goto L1626ce;
  #L1626cc.  v3:= -v3 @kind long;
  #L1626ce.  return v3 @kind wide;
  #L1626d0.  v1:= new `java.io.EOFException`;
  #L1626d4.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1626da.  throw v1;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L162dec.  v0:= "input" @kind object;
  #L162df0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162df6.  v0:= 9223372036854775807L;
  #L162e00.  v2:= 1I;
  #L162e02.  call `c`(v3, v4, v0, v2) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L162e08.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162e1c.  v0:= "input" @kind object;
  #L162e20.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162e26.  v0:= 0I;
  #L162e28.  v1:= 0L;
  #L162e2c.  v3:= lcmp(v6, v1);
  #L162e30.  if v3 < 0 then goto L162e38;
  #L162e34.  v1:= 1I;
  #L162e36.  goto L162e3a;
  #L162e38.  v1:= 0I;
  #L162e3a.  if v1 == 0 then goto L162e46;
  #L162e3e.  call `c`(v4, v5, v6, v0) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L162e44.  return v4 @kind object;
  #L162e46.  v5:= new `java.lang.StringBuilder`;
  #L162e4a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162e50.  v0:= "byteCount < 0: " @kind object;
  #L162e54.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162e5a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L162e60.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162e66.  v5:= temp @kind object;
  #L162e68.  v6:= new `java.lang.IllegalArgumentException`;
  #L162e6c.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L162e72.  v5:= temp @kind object;
  #L162e74.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162e7a.  throw v6;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L164848.  v0:= "sink" @kind object;
  #L16484c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L164852.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164858.  v0:= temp @kind wide;
  #L16485a.  v2:= lcmp(v0, v5);
  #L16485e.  if v2 < 0 then goto L16486a;
  #L164862.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L164868.  return @kind void;
  #L16486a.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164870.  v5:= temp @kind wide;
  #L164872.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L164878.  v4:= new `java.io.EOFException`;
  #L16487c.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L164882.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L164800.  v0:= "sink" @kind object;
  #L164804.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16480a.  v0:= 0I;
  #L16480c.  v1:= length @variable v4;
  #L16480e.  if v0 >= v1 then goto L164834;
  #L164812.  v1:= length @variable v4;
  #L164814.  v1:= v1 - v0 @kind int;
  #L164816.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L16481c.  v1:= temp;
  #L16481e.  v2:= -1I;
  #L164820.  if v1 == v2 then goto L164828;
  #L164824.  v0:= v0 + v1 @kind int;
  #L164826.  goto L16480c;
  #L164828.  v4:= new `java.io.EOFException`;
  #L16482c.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L164832.  throw v4;
  #L164834.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1626ec.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1626f2.  v0:= temp @kind wide;
  #L1626f4.  v2:= 0L;
  #L1626f8.  v4:= lcmp(v0, v2);
  #L1626fc.  if v4 == 0 then goto L16285c;
  #L162700.  v0:= 0I;
  #L162702.  v4:= v2 @kind wide;
  #L162704.  v1:= 0I;
  #L162706.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16270a.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162710.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L162714.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L162718.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L16271c.  if v8 >= v9 then goto L162820;
  #L162720.  v10:= v7[v8] @kind byte;
  #L162724.  v11:= 48I;
  #L162728.  v11:= (`byte`) v11 @kind i2b;
  #L16272a.  if v10 < v11 then goto L16273e;
  #L16272e.  v12:= 57I;
  #L162732.  v12:= (`byte`) v12 @kind i2b;
  #L162734.  if v10 > v12 then goto L16273e;
  #L162738.  v11:= v10 - v11 @kind int;
  #L16273c.  goto L162772;
  #L16273e.  v11:= 97I;
  #L162742.  v11:= (`byte`) v11 @kind i2b;
  #L162744.  if v10 < v11 then goto L16275c;
  #L162748.  v12:= 102I;
  #L16274c.  v12:= (`byte`) v12 @kind i2b;
  #L16274e.  if v10 > v12 then goto L16275c;
  #L162752.  v11:= v10 - v11 @kind int;
  #L162756.  v11:= v11 + 10;
  #L16275a.  goto L162772;
  #L16275c.  v11:= 65I;
  #L162760.  v11:= (`byte`) v11 @kind i2b;
  #L162762.  if v10 < v11 then goto L1627e2;
  #L162766.  v12:= 70I;
  #L16276a.  v12:= (`byte`) v12 @kind i2b;
  #L16276c.  if v10 > v12 then goto L1627e2;
  #L162770.  goto L162752;
  #L162772.  v12:= -3.105036184601418E231D;
  #L162776.  v12:= v12 ^& v4 @kind long;
  #L162778.  v14:= lcmp(v12, v2);
  #L16277c.  if v14 != 0 then goto L162792;
  #L162780.  v10:= 4I;
  #L162782.  v4:= v4 ^< v10 @kind long;
  #L162784.  v10:= (`long`) v11 @kind i2l;
  #L162786.  v4:= v4 ^| v10 @kind long;
  #L162788.  v8:= v8 + 1;
  #L16278c.  v0:= v0 + 1;
  #L162790.  goto L16271c;
  #L162792.  v0:= new `okio.Buffer`;
  #L162796.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L16279c.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1627a2.  v0:= temp @kind object;
  #L1627a4.  call temp:= `writeByte`(v0, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1627aa.  v0:= temp @kind object;
  #L1627ac.  v1:= new `java.lang.NumberFormatException`;
  #L1627b0.  v2:= new `java.lang.StringBuilder`;
  #L1627b4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1627ba.  v3:= "Number too large: " @kind object;
  #L1627be.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1627c4.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1627ca.  v0:= temp @kind object;
  #L1627cc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1627d2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1627d8.  v0:= temp @kind object;
  #L1627da.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1627e0.  throw v1;
  #L1627e2.  if v0 == 0 then goto L1627ea;
  #L1627e6.  v1:= 1I;
  #L1627e8.  goto L162820;
  #L1627ea.  v0:= new `java.lang.NumberFormatException`;
  #L1627ee.  v1:= new `java.lang.StringBuilder`;
  #L1627f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1627f8.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L1627fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162802.  call temp:= `toHexString`(v10) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L162808.  v2:= temp @kind object;
  #L16280a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162810.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162816.  v1:= temp @kind object;
  #L162818.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16281e.  throw v0;
  #L162820.  if v8 != v9 then goto L162838;
  #L162824.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16282a.  v7:= temp @kind object;
  #L16282c.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L162830.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L162836.  goto L16283c;
  #L162838.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L16283c.  if v1 != 0 then goto L162848;
  #L162840.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162844.  if v6 != 0 then goto L162706;
  #L162848.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16284e.  v1:= temp @kind wide;
  #L162850.  v6:= (`long`) v0 @kind i2l;
  #L162852.  v1:= v1 - v6 @kind long;
  #L162854.  call `setSize$okio`(v15, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16285a.  return v4 @kind wide;
  #L16285c.  v0:= new `java.io.EOFException`;
  #L162860.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L162866.  throw v0;
}
procedure `int` `readInt`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1614bc.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1614c2.  v0:= temp @kind wide;
  #L1614c4.  v2:= 4L;
  #L1614c8.  v4:= lcmp(v0, v2);
  #L1614cc.  if v4 < 0 then goto L1615aa;
  #L1614d0.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1614d4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1614da.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1614de.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1614e2.  v5:= v4 - v1 @kind int;
  #L1614e6.  v5:= (`long`) v5 @kind i2l;
  #L1614e8.  v7:= lcmp(v5, v2);
  #L1614ec.  if v7 >= 0 then goto L161534;
  #L1614f0.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1614f6.  v0:= temp;
  #L1614f8.  v0:= v0 ^& 255;
  #L1614fc.  v0:= v0 ^< 24;
  #L161500.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L161506.  v1:= temp;
  #L161508.  v1:= v1 ^& 255;
  #L16150c.  v1:= v1 ^< 16;
  #L161510.  v0:= v0 ^| v1 @kind int;
  #L161512.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L161518.  v1:= temp;
  #L16151a.  v1:= v1 ^& 255;
  #L16151e.  v1:= v1 ^< 8;
  #L161522.  v0:= v0 ^| v1 @kind int;
  #L161524.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16152a.  v1:= temp;
  #L16152c.  v1:= v1 ^& 255;
  #L161530.  v0:= v0 ^| v1 @kind int;
  #L161532.  goto L1615a8;
  #L161534.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L161538.  v6:= v1 + 1;
  #L16153c.  v1:= v5[v1] @kind byte;
  #L161540.  v1:= v1 ^& 255;
  #L161544.  v1:= v1 ^< 24;
  #L161548.  v7:= v6 + 1;
  #L16154c.  v6:= v5[v6] @kind byte;
  #L161550.  v6:= v6 ^& 255;
  #L161554.  v6:= v6 ^< 16;
  #L161558.  v1:= v1 ^| v6 @kind int;
  #L16155a.  v6:= v7 + 1;
  #L16155e.  v7:= v5[v7] @kind byte;
  #L161562.  v7:= v7 ^& 255;
  #L161566.  v7:= v7 ^< 8;
  #L16156a.  v1:= v1 ^| v7 @kind int;
  #L16156c.  v7:= v6 + 1;
  #L161570.  v5:= v5[v6] @kind byte;
  #L161574.  v5:= v5 ^& 255;
  #L161578.  v1:= v1 ^| v5 @kind int;
  #L16157a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161580.  v5:= temp @kind wide;
  #L161582.  v5:= v5 - v2 @kind long;
  #L161584.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16158a.  if v7 != v4 then goto L1615a2;
  #L16158e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L161594.  v2:= temp @kind object;
  #L161596.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L16159a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1615a0.  goto L1615a6;
  #L1615a2.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1615a6.  v0:= v1;
  #L1615a8.  return v0;
  #L1615aa.  v0:= new `java.io.EOFException`;
  #L1615ae.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1615b4.  throw v0;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1615c8.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1615ce.  v0:= temp;
  #L1615d0.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(I)I` @kind static;
  #L1615d6.  v0:= temp;
  #L1615d8.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L162878.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16287e.  v0:= temp @kind wide;
  #L162880.  v2:= 8L;
  #L162884.  v4:= lcmp(v0, v2);
  #L162888.  if v4 < 0 then goto L1629a8;
  #L16288c.  v0:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L162890.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L162896.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16289a.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L16289e.  v5:= v4 - v1 @kind int;
  #L1628a2.  v5:= (`long`) v5 @kind i2l;
  #L1628a4.  v7:= 32I;
  #L1628a8.  v8:= lcmp(v5, v2);
  #L1628ac.  if v8 >= 0 then goto L1628d8;
  #L1628b0.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1628b6.  v0:= temp;
  #L1628b8.  v0:= (`long`) v0 @kind i2l;
  #L1628ba.  v2:= 4294967295L;
  #L1628c4.  v0:= v0 ^& v2 @kind long;
  #L1628c6.  v0:= v0 ^< v7 @kind long;
  #L1628c8.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1628ce.  v4:= temp;
  #L1628d0.  v4:= (`long`) v4 @kind i2l;
  #L1628d2.  v2:= v2 ^& v4 @kind long;
  #L1628d4.  v0:= v0 ^| v2 @kind long;
  #L1628d6.  goto L1629a6;
  #L1628d8.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1628dc.  v6:= v1 + 1;
  #L1628e0.  v1:= v5[v1] @kind byte;
  #L1628e4.  v8:= (`long`) v1 @kind i2l;
  #L1628e6.  v10:= 255L;
  #L1628ea.  v8:= v8 ^& v10 @kind long;
  #L1628ec.  v1:= 56I;
  #L1628f0.  v8:= v8 ^< v1 @kind long;
  #L1628f2.  v1:= v6 + 1;
  #L1628f6.  v6:= v5[v6] @kind byte;
  #L1628fa.  v12:= (`long`) v6 @kind i2l;
  #L1628fc.  v12:= v12 ^& v10 @kind long;
  #L1628fe.  v6:= 48I;
  #L162902.  v12:= v12 ^< v6 @kind long;
  #L162904.  v8:= v8 ^| v12 @kind long;
  #L162906.  v6:= v1 + 1;
  #L16290a.  v1:= v5[v1] @kind byte;
  #L16290e.  v12:= (`long`) v1 @kind i2l;
  #L162910.  v12:= v12 ^& v10 @kind long;
  #L162912.  v1:= 40I;
  #L162916.  v12:= v12 ^< v1 @kind long;
  #L162918.  v8:= v8 ^| v12 @kind long;
  #L16291a.  v1:= v6 + 1;
  #L16291e.  v6:= v5[v6] @kind byte;
  #L162922.  v12:= (`long`) v6 @kind i2l;
  #L162924.  v12:= v12 ^& v10 @kind long;
  #L162926.  v6:= v12 ^< v7 @kind long;
  #L16292a.  v6:= v6 ^| v8 @kind long;
  #L16292c.  v8:= v1 + 1;
  #L162930.  v1:= v5[v1] @kind byte;
  #L162934.  v12:= (`long`) v1 @kind i2l;
  #L162936.  v12:= v12 ^& v10 @kind long;
  #L162938.  v1:= 24I;
  #L16293c.  v12:= v12 ^< v1 @kind long;
  #L16293e.  v6:= v6 ^| v12 @kind long;
  #L162940.  v1:= v8 + 1;
  #L162944.  v8:= v5[v8] @kind byte;
  #L162948.  v8:= (`long`) v8 @kind i2l;
  #L16294a.  v8:= v8 ^& v10 @kind long;
  #L16294c.  v12:= 16I;
  #L162950.  v8:= v8 ^< v12 @kind long;
  #L162952.  v6:= v6 ^| v8 @kind long;
  #L162954.  v8:= v1 + 1;
  #L162958.  v1:= v5[v1] @kind byte;
  #L16295c.  v12:= (`long`) v1 @kind i2l;
  #L16295e.  v12:= v12 ^& v10 @kind long;
  #L162960.  v1:= 8I;
  #L162964.  v12:= v12 ^< v1 @kind long;
  #L162966.  v6:= v6 ^| v12 @kind long;
  #L162968.  v1:= v8 + 1;
  #L16296c.  v5:= v5[v8] @kind byte;
  #L162970.  v8:= (`long`) v5 @kind i2l;
  #L162972.  v8:= v8 ^& v10 @kind long;
  #L162974.  v5:= v6 ^| v8 @kind long;
  #L162978.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16297e.  v7:= temp @kind wide;
  #L162980.  v7:= v7 - v2 @kind long;
  #L162982.  call `setSize$okio`(v14, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L162988.  if v1 != v4 then goto L1629a0;
  #L16298c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L162992.  v1:= temp @kind object;
  #L162994.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L162998.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16299e.  goto L1629a4;
  #L1629a0.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1629a4.  v0:= v5 @kind wide;
  #L1629a6.  return v0 @kind wide;
  #L1629a8.  v0:= new `java.io.EOFException`;
  #L1629ac.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1629b2.  throw v0;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1629c4.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L1629ca.  v0:= temp @kind wide;
  #L1629cc.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(J)J` @kind static;
  #L1629d2.  v0:= temp @kind wide;
  #L1629d4.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L164618.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16461e.  v0:= temp @kind wide;
  #L164620.  v2:= 2L;
  #L164624.  v4:= lcmp(v0, v2);
  #L164628.  if v4 < 0 then goto L1646bc;
  #L16462c.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164630.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164636.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16463a.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L16463e.  v5:= v4 - v1 @kind int;
  #L164642.  v6:= 2I;
  #L164644.  if v5 >= v6 then goto L16466a;
  #L164648.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16464e.  v0:= temp;
  #L164650.  v0:= v0 ^& 255;
  #L164654.  v0:= v0 ^< 8;
  #L164658.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16465e.  v1:= temp;
  #L164660.  v1:= v1 ^& 255;
  #L164664.  v0:= v0 ^| v1 @kind int;
  #L164666.  v0:= (`short`) v0 @kind i2s;
  #L164668.  goto L1646ba;
  #L16466a.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16466e.  v6:= v1 + 1;
  #L164672.  v1:= v5[v1] @kind byte;
  #L164676.  v1:= v1 ^& 255;
  #L16467a.  v1:= v1 ^< 8;
  #L16467e.  v7:= v6 + 1;
  #L164682.  v5:= v5[v6] @kind byte;
  #L164686.  v5:= v5 ^& 255;
  #L16468a.  v1:= v1 ^| v5 @kind int;
  #L16468c.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164692.  v5:= temp @kind wide;
  #L164694.  v5:= v5 - v2 @kind long;
  #L164696.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16469c.  if v7 != v4 then goto L1646b4;
  #L1646a0.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1646a6.  v2:= temp @kind object;
  #L1646a8.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1646ac.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1646b2.  goto L1646b8;
  #L1646b4.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1646b8.  v0:= (`short`) v1 @kind i2s;
  #L1646ba.  return v0;
  #L1646bc.  v0:= new `java.io.EOFException`;
  #L1646c0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1646c6.  throw v0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1646d8.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L1646de.  v0:= temp;
  #L1646e0.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(S)S` @kind static;
  #L1646e6.  v0:= temp;
  #L1646e8.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1618ac.  v0:= "charset" @kind object;
  #L1618b0.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1618b6.  v0:= 0L;
  #L1618ba.  v2:= lcmp(v8, v0);
  #L1618be.  if v2 < 0 then goto L1618d6;
  #L1618c2.  v0:= 2147483647I;
  #L1618c8.  v0:= (`long`) v0 @kind i2l;
  #L1618ca.  v3:= lcmp(v8, v0);
  #L1618ce.  if v3 > 0 then goto L1618d6;
  #L1618d2.  v0:= 1I;
  #L1618d4.  goto L1618d8;
  #L1618d6.  v0:= 0I;
  #L1618d8.  if v0 == 0 then goto L161972;
  #L1618dc.  v0:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1618e0.  v3:= lcmp(v0, v8);
  #L1618e4.  if v3 < 0 then goto L161966;
  #L1618e8.  if v2 != 0 then goto L1618f2;
  #L1618ec.  v8:= "" @kind object;
  #L1618f0.  return v8 @kind object;
  #L1618f2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1618f6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1618fc.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L161900.  v2:= (`long`) v1 @kind i2l;
  #L161902.  v2:= v2 + v8 @kind long;
  #L161904.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L161908.  v4:= (`long`) v4 @kind i2l;
  #L16190a.  v6:= lcmp(v2, v4);
  #L16190e.  if v6 <= 0 then goto L161926;
  #L161912.  call temp:= `readByteArray`(v7, v8) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L161918.  v8:= temp @kind object;
  #L16191a.  v9:= new `java.lang.String`;
  #L16191e.  call `<init>`(v9, v8, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L161924.  return v9 @kind object;
  #L161926.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16192a.  v3:= (`int`) v8 @kind l2i;
  #L16192c.  v4:= new `java.lang.String`;
  #L161930.  call `<init>`(v4, v2, v1, v3, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L161936.  v10:= v0.`okio.Segment.pos` @type ^`int`;
  #L16193a.  v10:= v10 + v3 @kind int;
  #L16193c.  v0.`okio.Segment.pos` @type ^`int` := v10;
  #L161940.  v1:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L161944.  v1:= v1 - v8 @kind long;
  #L161946.  v7.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L16194a.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L16194e.  if v10 != v8 then goto L161964;
  #L161952.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L161958.  v8:= temp @kind object;
  #L16195a.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L16195e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L161964.  return v4 @kind object;
  #L161966.  v8:= new `java.io.EOFException`;
  #L16196a.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L161970.  throw v8;
  #L161972.  v10:= new `java.lang.StringBuilder`;
  #L161976.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16197c.  v0:= "byteCount: " @kind object;
  #L161980.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161986.  call temp:= `append`(v10, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16198c.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161992.  v8:= temp @kind object;
  #L161994.  v9:= new `java.lang.IllegalArgumentException`;
  #L161998.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16199e.  v8:= temp @kind object;
  #L1619a0.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1619a6.  throw v9;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161884.  v0:= "charset" @kind object;
  #L161888.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16188e.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L161892.  call temp:= `readString`(v2, v0, v3) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L161898.  v3:= temp @kind object;
  #L16189a.  return v3 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L163e24.  v0:= 0I;
  #L163e26.  v1:= 1I;
  #L163e28.  call temp:= `readUnsafe$default`(v2, v0, v1, v0) @signature `Lokio/Buffer;.readUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L163e2e.  v0:= temp @kind object;
  #L163e30.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L163e44.  v0:= "unsafeCursor" @kind object;
  #L163e48.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163e4e.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L163e52.  v1:= 0I;
  #L163e54.  if v0 != 0 then goto L163e5c;
  #L163e58.  v0:= 1I;
  #L163e5a.  goto L163e5e;
  #L163e5c.  v0:= 0I;
  #L163e5e.  if v0 == 0 then goto L163e6c;
  #L163e62.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L163e66.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v1 @kind boolean;
  #L163e6a.  return v3 @kind object;
  #L163e6c.  v3:= new `java.lang.IllegalStateException`;
  #L163e70.  v0:= "already attached to a buffer" @kind object;
  #L163e74.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163e7a.  v0:= temp @kind object;
  #L163e7c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163e82.  throw v3;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v3 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1619b8.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1619bc.  v2:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1619c0.  call temp:= `readString`(v3, v0, v2) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1619c6.  v0:= temp @kind object;
  #L1619c8.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1619dc.  v0:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1619e0.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1619e6.  v2:= temp @kind object;
  #L1619e8.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1615ec.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1615f2.  v0:= temp @kind wide;
  #L1615f4.  v2:= 0L;
  #L1615f8.  v4:= lcmp(v0, v2);
  #L1615fc.  if v4 == 0 then goto L161756;
  #L161600.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L161606.  v0:= temp;
  #L161608.  v1:= v0 ^& 128;
  #L16160c.  v2:= 1I;
  #L16160e.  v3:= 128I;
  #L161612.  v4:= 65533I;
  #L161618.  if v1 != 0 then goto L161628;
  #L16161c.  v1:= v0 ^& 127;
  #L161620.  v5:= 0I;
  #L161622.  v5:= 1I;
  #L161624.  v6:= 0I;
  #L161626.  goto L16166e;
  #L161628.  v1:= v0 ^& 224;
  #L16162c.  v5:= 192I;
  #L161630.  if v1 != v5 then goto L161640;
  #L161634.  v1:= v0 ^& 31;
  #L161638.  v5:= 2I;
  #L16163a.  v6:= 128I;
  #L16163e.  goto L16166e;
  #L161640.  v1:= v0 ^& 240;
  #L161644.  v5:= 224I;
  #L161648.  if v1 != v5 then goto L161658;
  #L16164c.  v1:= v0 ^& 15;
  #L161650.  v5:= 3I;
  #L161652.  v6:= 2048I;
  #L161656.  goto L16166e;
  #L161658.  v1:= v0 ^& 248;
  #L16165c.  v5:= 240I;
  #L161660.  if v1 != v5 then goto L16174a;
  #L161664.  v1:= v0 ^& 7;
  #L161668.  v5:= 4I;
  #L16166a.  v6:= 65536I;
  #L16166e.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161674.  v7:= temp @kind wide;
  #L161676.  v9:= (`long`) v5 @kind i2l;
  #L161678.  v11:= lcmp(v7, v9);
  #L16167c.  if v11 < 0 then goto L1616e2;
  #L161680.  if v2 >= v5 then goto L1616ae;
  #L161684.  v7:= (`long`) v2 @kind i2l;
  #L161686.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16168c.  v0:= temp;
  #L16168e.  v11:= v0 ^& 192;
  #L161692.  if v11 != v3 then goto L1616a6;
  #L161696.  v1:= v1 ^< 6;
  #L16169a.  v0:= v0 ^& 63;
  #L16169e.  v1:= v1 ^| v0 @kind int;
  #L1616a0.  v2:= v2 + 1;
  #L1616a4.  goto L161680;
  #L1616a6.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1616ac.  goto L161754;
  #L1616ae.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1616b4.  v0:= 1114111I;
  #L1616ba.  if v1 <= v0 then goto L1616c0;
  #L1616be.  goto L161754;
  #L1616c0.  v0:= 57343I;
  #L1616c6.  v2:= 55296I;
  #L1616cc.  if v2 <= v1 then goto L1616d2;
  #L1616d0.  goto L1616d8;
  #L1616d2.  if v0 < v1 then goto L1616d8;
  #L1616d6.  goto L161754;
  #L1616d8.  if v1 >= v6 then goto L1616de;
  #L1616dc.  goto L161754;
  #L1616de.  v4:= v1;
  #L1616e0.  goto L161754;
  #L1616e2.  v1:= new `java.io.EOFException`;
  #L1616e6.  v2:= new `java.lang.StringBuilder`;
  #L1616ea.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1616f0.  v3:= "size < " @kind object;
  #L1616f4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1616fa.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L161700.  v3:= ": " @kind object;
  #L161704.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16170a.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161710.  v3:= temp @kind wide;
  #L161712.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161718.  v3:= " (to read code point prefixed 0x" @kind object;
  #L16171c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161722.  call temp:= `toHexString`(v0) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L161728.  v0:= temp @kind object;
  #L16172a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161730.  v0:= 41I;
  #L161734.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16173a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161740.  v0:= temp @kind object;
  #L161742.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161748.  throw v1;
  #L16174a.  v0:= 1L;
  #L16174e.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L161754.  return v4;
  #L161756.  v0:= new `java.io.EOFException`;
  #L16175a.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L161760.  throw v0;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1619fc.  v0:= 10I;
  #L161a00.  v0:= (`byte`) v0 @kind i2b;
  #L161a02.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L161a08.  v0:= temp @kind wide;
  #L161a0a.  v2:= -1L;
  #L161a0e.  v4:= lcmp(v0, v2);
  #L161a12.  if v4 == 0 then goto L161a20;
  #L161a16.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L161a1c.  v0:= temp @kind object;
  #L161a1e.  goto L161a48;
  #L161a20.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161a26.  v0:= temp @kind wide;
  #L161a28.  v2:= 0L;
  #L161a2c.  v4:= lcmp(v0, v2);
  #L161a30.  if v4 == 0 then goto L161a46;
  #L161a34.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161a3a.  v0:= temp @kind wide;
  #L161a3c.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L161a42.  v0:= temp @kind object;
  #L161a44.  goto L161a48;
  #L161a46.  v0:= 0I;
  #L161a48.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161a5c.  v0:= 9223372036854775807L;
  #L161a66.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L161a6c.  v0:= temp @kind object;
  #L161a6e.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v11 @kind this, `long` v12 ) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L161a80.  v0:= 0L;
  #L161a84.  v2:= lcmp(v12, v0);
  #L161a88.  if v2 < 0 then goto L161a90;
  #L161a8c.  v0:= 1I;
  #L161a8e.  goto L161a92;
  #L161a90.  v0:= 0I;
  #L161a92.  if v0 == 0 then goto L161bb2;
  #L161a96.  v0:= 1L;
  #L161a9a.  v2:= 9223372036854775807L;
  #L161aa4.  v4:= lcmp(v12, v2);
  #L161aa8.  if v4 != 0 then goto L161aae;
  #L161aac.  goto L161ab2;
  #L161aae.  v2:= v12 + v0 @kind long;
  #L161ab2.  v4:= 10I;
  #L161ab6.  v10:= (`byte`) v4 @kind i2b;
  #L161ab8.  v6:= 0L;
  #L161abc.  v4:= v11 @kind object;
  #L161abe.  v5:= v10;
  #L161ac0.  v8:= v2 @kind wide;
  #L161ac2.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L161ac8.  v4:= temp @kind wide;
  #L161aca.  v6:= -1L;
  #L161ace.  v8:= lcmp(v4, v6);
  #L161ad2.  if v8 == 0 then goto L161ae0;
  #L161ad6.  call temp:= `readUtf8Line`(v11, v4) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L161adc.  v12:= temp @kind object;
  #L161ade.  goto L161b1a;
  #L161ae0.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161ae6.  v4:= temp @kind wide;
  #L161ae8.  v6:= lcmp(v2, v4);
  #L161aec.  if v6 >= 0 then goto L161b1c;
  #L161af0.  v0:= v2 - v0 @kind long;
  #L161af4.  call temp:= `getByte`(v11, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L161afa.  v0:= temp;
  #L161afc.  v1:= 13I;
  #L161b00.  v1:= (`byte`) v1 @kind i2b;
  #L161b02.  if v0 != v1 then goto L161b1c;
  #L161b06.  call temp:= `getByte`(v11, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L161b0c.  v0:= temp;
  #L161b0e.  if v0 != v10 then goto L161b1c;
  #L161b12.  call temp:= `readUtf8Line`(v11, v2) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L161b18.  v12:= temp @kind object;
  #L161b1a.  return v12 @kind object;
  #L161b1c.  v6:= new `okio.Buffer`;
  #L161b20.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L161b26.  v2:= 0L;
  #L161b2a.  v0:= 32I;
  #L161b2e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161b34.  v4:= temp @kind wide;
  #L161b36.  v0:= (`long`) v0 @kind i2l;
  #L161b38.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L161b3e.  v4:= temp @kind wide;
  #L161b40.  v0:= v11 @kind object;
  #L161b42.  v1:= v6 @kind object;
  #L161b44.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L161b4a.  v0:= new `java.io.EOFException`;
  #L161b4e.  v1:= new `java.lang.StringBuilder`;
  #L161b52.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161b58.  v2:= "\\n not found: limit=" @kind object;
  #L161b5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161b62.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L161b68.  v2:= temp @kind wide;
  #L161b6a.  call temp:= `min`(v2, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L161b70.  v12:= temp @kind wide;
  #L161b72.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161b78.  v12:= " content=" @kind object;
  #L161b7c.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161b82.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L161b88.  v12:= temp @kind object;
  #L161b8a.  call temp:= `hex`(v12) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L161b90.  v12:= temp @kind object;
  #L161b92.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161b98.  v12:= 8230I;
  #L161b9c.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L161ba2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161ba8.  v12:= temp @kind object;
  #L161baa.  call `<init>`(v0, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161bb0.  throw v0;
  #L161bb2.  v0:= new `java.lang.StringBuilder`;
  #L161bb6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161bbc.  v1:= "limit < 0: " @kind object;
  #L161bc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161bc6.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L161bcc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161bd2.  v12:= temp @kind object;
  #L161bd4.  v13:= new `java.lang.IllegalArgumentException`;
  #L161bd8.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L161bde.  v12:= temp @kind object;
  #L161be0.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161be6.  throw v13;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1610dc.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1610e0.  v2:= lcmp(v0, v4);
  #L1610e4.  if v2 < 0 then goto L1610ec;
  #L1610e8.  v4:= 1I;
  #L1610ea.  goto L1610ee;
  #L1610ec.  v4:= 0I;
  #L1610ee.  return v4;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L164894.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L164898.  v2:= lcmp(v0, v4);
  #L16489c.  if v2 < 0 then goto L1648a2;
  #L1648a0.  return @kind void;
  #L1648a2.  v4:= new `java.io.EOFException`;
  #L1648a6.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1648ac.  throw v4;
}
procedure `int` `select`(`okio.Buffer` v3 @kind this, `okio.Options` v4 @kind object) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161774.  v0:= "options" @kind object;
  #L161778.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16177e.  v0:= 0I;
  #L161780.  v1:= 2I;
  #L161782.  v2:= 0I;
  #L161784.  call temp:= `selectPrefix$default`(v3, v4, v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @kind static;
  #L16178a.  v0:= temp;
  #L16178c.  v1:= -1I;
  #L16178e.  if v0 != v1 then goto L161796;
  #L161792.  v0:= -1I;
  #L161794.  goto L1617b2;
  #L161796.  call temp:= `getByteStrings$okio`(v4) @signature `Lokio/Options;.getByteStrings$okio:()[Lokio/ByteString;` @kind virtual;
  #L16179c.  v4:= temp @kind object;
  #L16179e.  v4:= v4[v0] @kind object;
  #L1617a2.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1617a8.  v4:= temp;
  #L1617aa.  v1:= (`long`) v4 @kind i2l;
  #L1617ac.  call `skip`(v3, v1) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1617b2.  return v0;
}
procedure `void` `setSize$okio`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.setSize$okio:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1648c0.  v0.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L1648c4.  return @kind void;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1643b4.  v0:= "SHA-1" @kind object;
  #L1643b8.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1643be.  v0:= temp @kind object;
  #L1643c0.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1643d4.  v0:= "SHA-256" @kind object;
  #L1643d8.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1643de.  v0:= temp @kind object;
  #L1643e0.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1643f4.  v0:= "SHA-512" @kind object;
  #L1643f8.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1643fe.  v0:= temp @kind object;
  #L164400.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1629e8.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1629ec.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 ) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1648d8.  v0:= 0L;
  #L1648dc.  v2:= lcmp(v8, v0);
  #L1648e0.  if v2 <= 0 then goto L164948;
  #L1648e4.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1648e8.  if v0 == 0 then goto L16493c;
  #L1648ec.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1648f0.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1648f4.  v1:= v1 - v2 @kind int;
  #L1648f6.  v1:= (`long`) v1 @kind i2l;
  #L1648f8.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1648fe.  v1:= temp @kind wide;
  #L164900.  v2:= (`int`) v1 @kind l2i;
  #L164902.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164908.  v3:= temp @kind wide;
  #L16490a.  v5:= (`long`) v2 @kind i2l;
  #L16490c.  v3:= v3 - v5 @kind long;
  #L16490e.  call `setSize$okio`(v7, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L164914.  v8:= v8 - v5 @kind long;
  #L164916.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16491a.  v1:= v1 + v2 @kind int;
  #L16491c.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L164920.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L164924.  if v1 != v2 then goto L1648d8;
  #L164928.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16492e.  v1:= temp @kind object;
  #L164930.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L164934.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16493a.  goto L1648d8;
  #L16493c.  v8:= new `java.io.EOFException`;
  #L164940.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L164946.  throw v8;
  #L164948.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L164414.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16441a.  v0:= temp @kind wide;
  #L16441c.  v2:= 2147483647I;
  #L164422.  v2:= (`long`) v2 @kind i2l;
  #L164424.  v4:= lcmp(v0, v2);
  #L164428.  if v4 > 0 then goto L164430;
  #L16442c.  v0:= 1I;
  #L16442e.  goto L164432;
  #L164430.  v0:= 0I;
  #L164432.  if v0 == 0 then goto L16444a;
  #L164436.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16443c.  v0:= temp @kind wide;
  #L16443e.  v1:= (`int`) v0 @kind l2i;
  #L164440.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L164446.  v0:= temp @kind object;
  #L164448.  return v0 @kind object;
  #L16444a.  v0:= new `java.lang.StringBuilder`;
  #L16444e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L164454.  v1:= "size > Int.MAX_VALUE: " @kind object;
  #L164458.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16445e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164464.  v1:= temp @kind wide;
  #L164466.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16446c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L164472.  v0:= temp @kind object;
  #L164474.  v1:= new `java.lang.IllegalStateException`;
  #L164478.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16447e.  v0:= temp @kind object;
  #L164480.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L164486.  throw v1;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v8 @kind this, `int` v9 ) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L164498.  if v9 != 0 then goto L1644a2;
  #L16449c.  v9:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1644a0.  goto L164556;
  #L1644a2.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1644a8.  v0:= temp @kind wide;
  #L1644aa.  v2:= 0L;
  #L1644ae.  v4:= (`long`) v9 @kind i2l;
  #L1644b0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1644b6.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1644ba.  v1:= 0I;
  #L1644bc.  v2:= 0I;
  #L1644be.  v3:= 0I;
  #L1644c0.  if v2 >= v9 then goto L1644f4;
  #L1644c4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1644ca.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1644ce.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1644d2.  if v4 == v5 then goto L1644e4;
  #L1644d6.  v4:= v4 - v5 @kind int;
  #L1644d8.  v2:= v2 + v4 @kind int;
  #L1644da.  v3:= v3 + 1;
  #L1644de.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1644e2.  goto L1644c0;
  #L1644e4.  v9:= new `java.lang.AssertionError`;
  #L1644e8.  v0:= "s.limit == s.pos" @kind object;
  #L1644ec.  call `<init>`(v9, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1644f2.  throw v9;
  #L1644f4.  v0:= new `byte`[][v3];
  #L1644f8.  v2:= v3 * 2;
  #L1644fc.  v2:= new `int`[v2];
  #L164500.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164504.  v5:= v4 @kind object;
  #L164506.  v4:= 0I;
  #L164508.  if v1 >= v9 then goto L16454c;
  #L16450c.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164512.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L164516.  v0[v4]:= v6 @kind object;
  #L16451a.  v6:= v5.`okio.Segment.limit` @type ^`int`;
  #L16451e.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L164522.  v6:= v6 - v7 @kind int;
  #L164524.  v1:= v1 + v6 @kind int;
  #L164526.  call temp:= `min`(v1, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L16452c.  v6:= temp;
  #L16452e.  v2[v4]:= v6;
  #L164532.  v6:= v4 + v3 @kind int;
  #L164536.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L16453a.  v2[v6]:= v7;
  #L16453e.  v6:= 1I;
  #L164540.  v5.`okio.Segment.shared` @type ^`boolean` := v6 @kind boolean;
  #L164544.  v4:= v4 + v6 @kind int;
  #L164546.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16454a.  goto L164508;
  #L16454c.  v9:= new `okio.SegmentedByteString`;
  #L164550.  call `<init>`(v9, v0, v2) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L164556.  return v9 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L164600.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L164604.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161bf8.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L161bfe.  v0:= temp @kind object;
  #L161c00.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L161c06.  v0:= temp @kind object;
  #L161c08.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment$okio`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L164568.  v0:= 8192I;
  #L16456c.  v1:= 1I;
  #L16456e.  if v4 < v1 then goto L164578;
  #L164572.  if v4 > v0 then goto L164578;
  #L164576.  goto L16457a;
  #L164578.  v1:= 0I;
  #L16457a.  if v1 == 0 then goto L1645d6;
  #L16457e.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164582.  if v1 != 0 then goto L16459c;
  #L164586.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L16458c.  v4:= temp @kind object;
  #L16458e.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L164592.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L164596.  v4.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L16459a.  goto L1645d4;
  #L16459c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1645a2.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1645a6.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1645ac.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1645b0.  v2:= v2 + v4 @kind int;
  #L1645b2.  if v2 > v0 then goto L1645c4;
  #L1645b6.  v4:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1645ba.  if v4 != 0 then goto L1645c0;
  #L1645be.  goto L1645c4;
  #L1645c0.  v4:= v1 @kind object;
  #L1645c2.  goto L1645d4;
  #L1645c4.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1645ca.  v4:= temp @kind object;
  #L1645cc.  call temp:= `push`(v1, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1645d2.  v4:= temp @kind object;
  #L1645d4.  return v4 @kind object;
  #L1645d6.  v4:= new `java.lang.IllegalArgumentException`;
  #L1645da.  v0:= "unexpected capacity" @kind object;
  #L1645de.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1645e4.  v0:= temp @kind object;
  #L1645e6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1645ec.  throw v4;
}
procedure `int` `write`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1617c4.  v0:= "source" @kind object;
  #L1617c8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1617ce.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1617d4.  v0:= temp;
  #L1617d6.  v1:= v0;
  #L1617d8.  if v1 <= 0 then goto L161812;
  #L1617dc.  v2:= 1I;
  #L1617de.  call temp:= `writableSegment$okio`(v6, v2) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1617e4.  v2:= temp @kind object;
  #L1617e6.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1617ea.  v3:= v3 - 8192;
  #L1617ee.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1617f4.  v3:= temp;
  #L1617f6.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1617fa.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L1617fe.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L161804.  v1:= v1 - v3 @kind int;
  #L161806.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L16180a.  v4:= v4 + v3 @kind int;
  #L16180c.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L161810.  goto L1617d8;
  #L161812.  v1:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L161816.  v3:= (`long`) v0 @kind i2l;
  #L161818.  v1:= v1 + v3 @kind long;
  #L16181a.  v6.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L16181e.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162f34.  v0:= "byteString" @kind object;
  #L162f38.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162f3e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L162f44.  v0:= temp;
  #L162f46.  v1:= 0I;
  #L162f48.  call `write$okio`(v3, v2, v1, v0) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L162f4e.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162f60.  v0:= "byteString" @kind object;
  #L162f64.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162f6a.  call `write$okio`(v2, v1, v3, v4) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L162f70.  return v1 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L162f84.  v0:= "source" @kind object;
  #L162f88.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162f8e.  v0:= 0L;
  #L162f92.  v2:= lcmp(v7, v0);
  #L162f96.  if v2 <= 0 then goto L162fbe;
  #L162f9a.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L162fa0.  v0:= temp @kind wide;
  #L162fa2.  v2:= -1L;
  #L162fa6.  v4:= lcmp(v0, v2);
  #L162faa.  if v4 == 0 then goto L162fb2;
  #L162fae.  v7:= v7 - v0 @kind long;
  #L162fb0.  goto L162f8e;
  #L162fb2.  v6:= new `java.io.EOFException`;
  #L162fb6.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L162fbc.  throw v6;
  #L162fbe.  return v5 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162e8c.  v0:= "source" @kind object;
  #L162e90.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162e96.  v0:= length @variable v3;
  #L162e98.  v1:= 0I;
  #L162e9a.  call temp:= `write`(v2, v3, v1, v0) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L162ea0.  v3:= temp @kind object;
  #L162ea2.  return v3 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L162eb4.  v0:= "source" @kind object;
  #L162eb8.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162ebe.  v0:= length @variable v10;
  #L162ec0.  v1:= (`long`) v0 @kind i2l;
  #L162ec2.  v3:= (`long`) v11 @kind i2l;
  #L162ec4.  v7:= (`long`) v12 @kind i2l;
  #L162ec6.  v5:= v7 @kind wide;
  #L162ec8.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L162ece.  v12:= v12 + v11 @kind int;
  #L162ed0.  if v11 >= v12 then goto L162f12;
  #L162ed4.  v0:= 1I;
  #L162ed6.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L162edc.  v0:= temp @kind object;
  #L162ede.  v1:= v12 - v11 @kind int;
  #L162ee2.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L162ee6.  v2:= v2 - 8192;
  #L162eea.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L162ef0.  v1:= temp;
  #L162ef2.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L162ef6.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L162efa.  v4:= v11 + v1 @kind int;
  #L162efe.  call temp:= `copyInto`(v10, v2, v3, v11, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L162f04.  v11:= v0.`okio.Segment.limit` @type ^`int`;
  #L162f08.  v11:= v11 + v1 @kind int;
  #L162f0a.  v0.`okio.Segment.limit` @type ^`int` := v11;
  #L162f0e.  v11:= v4;
  #L162f10.  goto L162ed0;
  #L162f12.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162f18.  v10:= temp @kind wide;
  #L162f1a.  v10:= v10 + v7 @kind long;
  #L162f1c.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L162f22.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f04.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L163f0a.  v1:= temp @kind object;
  #L163f0c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f20.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @kind virtual;
  #L163f26.  v1:= temp @kind object;
  #L163f28.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.Source` v1 @kind object, `long` v2 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f3c.  call temp:= `write`(v0, v1, v2) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/Buffer;` @kind virtual;
  #L163f42.  v1:= temp @kind object;
  #L163f44.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163ecc.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L163ed2.  v1:= temp @kind object;
  #L163ed4.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163ee8.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L163eee.  v1:= temp @kind object;
  #L163ef0.  return v1 @kind object;
}
procedure `void` `write`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16495c.  v0:= "source" @kind object;
  #L164960.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L164966.  v0:= 0I;
  #L164968.  if v9 == v8 then goto L164970;
  #L16496c.  v1:= 1I;
  #L16496e.  goto L164972;
  #L164970.  v1:= 0I;
  #L164972.  if v1 == 0 then goto L164ad4;
  #L164976.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16497c.  v2:= temp @kind wide;
  #L16497e.  v4:= 0L;
  #L164982.  v6:= v10 @kind wide;
  #L164984.  call `checkOffsetAndCount`(v2, v4, v6) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L16498a.  v1:= 0L;
  #L16498e.  v3:= lcmp(v10, v1);
  #L164992.  if v3 <= 0 then goto L164ad2;
  #L164996.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16499a.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1649a0.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L1649a4.  v2:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1649a8.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1649ae.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1649b2.  v1:= v1 - v2 @kind int;
  #L1649b4.  v1:= (`long`) v1 @kind i2l;
  #L1649b6.  v3:= lcmp(v10, v1);
  #L1649ba.  if v3 >= 0 then goto L164a56;
  #L1649be.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1649c2.  if v1 == 0 then goto L1649d2;
  #L1649c6.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1649cc.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1649d0.  goto L1649d4;
  #L1649d2.  v1:= 0I;
  #L1649d4.  if v1 == 0 then goto L164a3e;
  #L1649d8.  v2:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1649dc.  if v2 == 0 then goto L164a3e;
  #L1649e0.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1649e4.  v2:= (`long`) v2 @kind i2l;
  #L1649e6.  v2:= v2 + v10 @kind long;
  #L1649e8.  v4:= v1.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1649ec.  if v4 == 0 then goto L1649f4;
  #L1649f0.  v4:= 0I;
  #L1649f2.  goto L1649f8;
  #L1649f4.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L1649f8.  v4:= (`long`) v4 @kind i2l;
  #L1649fa.  v2:= v2 - v4 @kind long;
  #L1649fc.  v4:= 8192I;
  #L164a00.  v4:= (`long`) v4 @kind i2l;
  #L164a02.  v6:= lcmp(v2, v4);
  #L164a06.  if v6 > 0 then goto L164a3e;
  #L164a0a.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164a0e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164a14.  v2:= (`int`) v10 @kind l2i;
  #L164a16.  call `writeTo`(v0, v1, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L164a1c.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164a22.  v0:= temp @kind wide;
  #L164a24.  v0:= v0 - v10 @kind long;
  #L164a26.  call `setSize$okio`(v9, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L164a2c.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164a32.  v0:= temp @kind wide;
  #L164a34.  v0:= v0 + v10 @kind long;
  #L164a36.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L164a3c.  goto L164ad2;
  #L164a3e.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164a42.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164a48.  v2:= (`int`) v10 @kind l2i;
  #L164a4a.  call temp:= `split`(v1, v2) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L164a50.  v1:= temp @kind object;
  #L164a52.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L164a56.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164a5a.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164a60.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L164a64.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L164a68.  v2:= v2 - v3 @kind int;
  #L164a6a.  v2:= (`long`) v2 @kind i2l;
  #L164a6c.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L164a72.  v4:= temp @kind object;
  #L164a74.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L164a78.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L164a7c.  if v4 != 0 then goto L164a8e;
  #L164a80.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L164a84.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L164a88.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L164a8c.  goto L164aac;
  #L164a8e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164a94.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L164a98.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L164a9e.  call temp:= `push`(v4, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L164aa4.  v1:= temp @kind object;
  #L164aa6.  call `compact`(v1) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L164aac.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164ab2.  v4:= temp @kind wide;
  #L164ab4.  v4:= v4 - v2 @kind long;
  #L164ab6.  call `setSize$okio`(v9, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L164abc.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L164ac2.  v4:= temp @kind wide;
  #L164ac4.  v4:= v4 + v2 @kind long;
  #L164ac6.  call `setSize$okio`(v8, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L164acc.  v10:= v10 - v2 @kind long;
  #L164ace.  goto L16498a;
  #L164ad2.  return @kind void;
  #L164ad4.  v9:= new `java.lang.IllegalArgumentException`;
  #L164ad8.  v10:= "source == this" @kind object;
  #L164adc.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L164ae2.  v10:= temp @kind object;
  #L164ae4.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L164aea.  throw v9;
}
procedure `long` `writeAll`(`okio.Buffer` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L162a00.  v0:= "source" @kind object;
  #L162a04.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L162a0a.  v0:= 0L;
  #L162a0e.  v2:= 8192I;
  #L162a12.  v2:= (`long`) v2 @kind i2l;
  #L162a14.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L162a1a.  v2:= temp @kind wide;
  #L162a1c.  v4:= -1L;
  #L162a20.  v6:= lcmp(v2, v4);
  #L162a24.  if v6 != 0 then goto L162a2a;
  #L162a28.  return v0 @kind wide;
  #L162a2a.  v0:= v0 + v2 @kind long;
  #L162a2c.  goto L162a0e;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v4 @kind this, `int` v5 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162fd0.  v0:= 1I;
  #L162fd2.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L162fd8.  v0:= temp @kind object;
  #L162fda.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L162fde.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L162fe2.  v3:= v2 + 1;
  #L162fe6.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L162fea.  v5:= (`byte`) v5 @kind i2b;
  #L162fec.  v1[v2]:= v5 @kind byte;
  #L162ff0.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L162ff6.  v0:= temp @kind wide;
  #L162ff8.  v2:= 1L;
  #L162ffc.  v0:= v0 + v2 @kind long;
  #L162ffe.  call `setSize$okio`(v4, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163004.  return v4 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f58.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L163f5e.  v1:= temp @kind object;
  #L163f60.  return v1 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v12 @kind this, `long` v13 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L163018.  v0:= 0L;
  #L16301c.  v2:= lcmp(v13, v0);
  #L163020.  if v2 != 0 then goto L163034;
  #L163024.  v13:= 48I;
  #L163028.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L16302e.  v13:= temp @kind object;
  #L163030.  goto L163256;
  #L163034.  v3:= 0I;
  #L163036.  v4:= 1I;
  #L163038.  if v2 >= 0 then goto L163058;
  #L16303c.  v13:= -v13 @kind long;
  #L16303e.  v2:= lcmp(v13, v0);
  #L163042.  if v2 >= 0 then goto L163056;
  #L163046.  v13:= "-9223372036854775808" @kind object;
  #L16304a.  call temp:= `writeUtf8`(v12, v13) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L163050.  v13:= temp @kind object;
  #L163052.  goto L163256;
  #L163056.  v3:= 1I;
  #L163058.  v5:= 100000000L;
  #L16305e.  v2:= 10I;
  #L163062.  v7:= lcmp(v13, v5);
  #L163066.  if v7 >= 0 then goto L1630f4;
  #L16306a.  v5:= 10000L;
  #L16306e.  v7:= lcmp(v13, v5);
  #L163072.  if v7 >= 0 then goto L1630b0;
  #L163076.  v5:= 100L;
  #L16307a.  v7:= lcmp(v13, v5);
  #L16307e.  if v7 >= 0 then goto L163098;
  #L163082.  v5:= 10L;
  #L163086.  v7:= lcmp(v13, v5);
  #L16308a.  if v7 >= 0 then goto L163092;
  #L16308e.  goto L1631e4;
  #L163092.  v4:= 2I;
  #L163094.  goto L1631e4;
  #L163098.  v4:= 1000L;
  #L16309c.  v6:= lcmp(v13, v4);
  #L1630a0.  if v6 >= 0 then goto L1630aa;
  #L1630a4.  v4:= 3I;
  #L1630a6.  goto L1631e4;
  #L1630aa.  v4:= 4I;
  #L1630ac.  goto L1631e4;
  #L1630b0.  v4:= 1000000L;
  #L1630b6.  v6:= lcmp(v13, v4);
  #L1630ba.  if v6 >= 0 then goto L1630d8;
  #L1630be.  v4:= 100000L;
  #L1630c4.  v6:= lcmp(v13, v4);
  #L1630c8.  if v6 >= 0 then goto L1630d2;
  #L1630cc.  v4:= 5I;
  #L1630ce.  goto L1631e4;
  #L1630d2.  v4:= 6I;
  #L1630d4.  goto L1631e4;
  #L1630d8.  v4:= 10000000L;
  #L1630de.  v6:= lcmp(v13, v4);
  #L1630e2.  if v6 >= 0 then goto L1630ec;
  #L1630e6.  v4:= 7I;
  #L1630e8.  goto L1631e4;
  #L1630ec.  v4:= 8I;
  #L1630f0.  goto L1631e4;
  #L1630f4.  v4:= 1000000000000L;
  #L1630fe.  v6:= lcmp(v13, v4);
  #L163102.  if v6 >= 0 then goto L163150;
  #L163106.  v4:= 10000000000L;
  #L163110.  v6:= lcmp(v13, v4);
  #L163114.  if v6 >= 0 then goto L163132;
  #L163118.  v4:= 1000000000L;
  #L16311e.  v6:= lcmp(v13, v4);
  #L163122.  if v6 >= 0 then goto L16312c;
  #L163126.  v4:= 9I;
  #L16312a.  goto L1631e4;
  #L16312c.  v4:= 10I;
  #L163130.  goto L1631e4;
  #L163132.  v4:= 100000000000L;
  #L16313c.  v6:= lcmp(v13, v4);
  #L163140.  if v6 >= 0 then goto L16314a;
  #L163144.  v4:= 11I;
  #L163148.  goto L1631e4;
  #L16314a.  v4:= 12I;
  #L16314e.  goto L1631e4;
  #L163150.  v4:= 1000000000000000L;
  #L16315a.  v6:= lcmp(v13, v4);
  #L16315e.  if v6 >= 0 then goto L163198;
  #L163162.  v4:= 10000000000000L;
  #L16316c.  v6:= lcmp(v13, v4);
  #L163170.  if v6 >= 0 then goto L16317a;
  #L163174.  v4:= 13I;
  #L163178.  goto L1631e4;
  #L16317a.  v4:= 100000000000000L;
  #L163184.  v6:= lcmp(v13, v4);
  #L163188.  if v6 >= 0 then goto L163192;
  #L16318c.  v4:= 14I;
  #L163190.  goto L1631e4;
  #L163192.  v4:= 15I;
  #L163196.  goto L1631e4;
  #L163198.  v4:= 100000000000000000L;
  #L1631a2.  v6:= lcmp(v13, v4);
  #L1631a6.  if v6 >= 0 then goto L1631c8;
  #L1631aa.  v4:= 10000000000000000L;
  #L1631b4.  v6:= lcmp(v13, v4);
  #L1631b8.  if v6 >= 0 then goto L1631c2;
  #L1631bc.  v4:= 16I;
  #L1631c0.  goto L1631e4;
  #L1631c2.  v4:= 17I;
  #L1631c6.  goto L1631e4;
  #L1631c8.  v4:= 1000000000000000000L;
  #L1631d2.  v6:= lcmp(v13, v4);
  #L1631d6.  if v6 >= 0 then goto L1631e0;
  #L1631da.  v4:= 18I;
  #L1631de.  goto L1631e4;
  #L1631e0.  v4:= 19I;
  #L1631e4.  if v3 == 0 then goto L1631ec;
  #L1631e8.  v4:= v4 + 1;
  #L1631ec.  call temp:= `writableSegment$okio`(v12, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1631f2.  v5:= temp @kind object;
  #L1631f4.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1631f8.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1631fc.  v7:= v7 + v4 @kind int;
  #L1631fe.  v8:= lcmp(v13, v0);
  #L163202.  if v8 == 0 then goto L163226;
  #L163206.  v8:= (`long`) v2 @kind i2l;
  #L163208.  v10:= v13 %% v8 @kind long;
  #L16320c.  v11:= (`int`) v10 @kind l2i;
  #L16320e.  v7:= v7 + -1;
  #L163212.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L163218.  v10:= temp @kind object;
  #L16321a.  v10:= v10[v11] @kind byte;
  #L16321e.  v6[v7]:= v10 @kind byte;
  #L163222.  v13:= v13 / v8 @kind long;
  #L163224.  goto L1631fe;
  #L163226.  if v3 == 0 then goto L163238;
  #L16322a.  v7:= v7 + -1;
  #L16322e.  v13:= 45I;
  #L163232.  v13:= (`byte`) v13 @kind i2b;
  #L163234.  v6[v7]:= v13 @kind byte;
  #L163238.  v13:= v5.`okio.Segment.limit` @type ^`int`;
  #L16323c.  v13:= v13 + v4 @kind int;
  #L16323e.  v5.`okio.Segment.limit` @type ^`int` := v13;
  #L163242.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163248.  v13:= temp @kind wide;
  #L16324a.  v0:= (`long`) v4 @kind i2l;
  #L16324c.  v13:= v13 + v0 @kind long;
  #L16324e.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163254.  v13:= v12 @kind object;
  #L163256.  return v13 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f74.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L163f7a.  v1:= temp @kind object;
  #L163f7c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v12 @kind this, `long` v13 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L163268.  v0:= 0L;
  #L16326c.  v2:= lcmp(v13, v0);
  #L163270.  if v2 != 0 then goto L163282;
  #L163274.  v13:= 48I;
  #L163278.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L16327e.  v13:= temp @kind object;
  #L163280.  goto L16336e;
  #L163282.  v0:= 1I;
  #L163284.  v1:= v13 ^>> v0 @kind long;
  #L163288.  v1:= v1 ^| v13 @kind long;
  #L16328a.  v3:= 2I;
  #L16328c.  v4:= v1 ^>> v3 @kind long;
  #L163290.  v1:= v1 ^| v4 @kind long;
  #L163292.  v4:= 4I;
  #L163294.  v5:= v1 ^>> v4 @kind long;
  #L163298.  v1:= v1 ^| v5 @kind long;
  #L16329a.  v5:= 8I;
  #L16329e.  v6:= v1 ^>> v5 @kind long;
  #L1632a2.  v1:= v1 ^| v6 @kind long;
  #L1632a4.  v6:= 16I;
  #L1632a8.  v7:= v1 ^>> v6 @kind long;
  #L1632ac.  v1:= v1 ^| v7 @kind long;
  #L1632ae.  v7:= 32I;
  #L1632b2.  v8:= v1 ^>> v7 @kind long;
  #L1632b6.  v1:= v1 ^| v8 @kind long;
  #L1632b8.  v8:= v1 ^>> v0 @kind long;
  #L1632bc.  v10:= 1.1945305291614955E103D;
  #L1632c6.  v8:= v8 ^& v10 @kind long;
  #L1632c8.  v1:= v1 - v8 @kind long;
  #L1632ca.  v8:= v1 ^>> v3 @kind long;
  #L1632ce.  v10:= 4.667261458395856E-62D;
  #L1632d8.  v8:= v8 ^& v10 @kind long;
  #L1632da.  v1:= v1 ^& v10 @kind long;
  #L1632dc.  v8:= v8 + v1 @kind long;
  #L1632de.  v1:= v8 ^>> v4 @kind long;
  #L1632e2.  v1:= v1 + v8 @kind long;
  #L1632e4.  v8:= 3.815736827118017E-236D;
  #L1632ee.  v1:= v1 ^& v8 @kind long;
  #L1632f0.  v8:= v1 ^>> v5 @kind long;
  #L1632f4.  v1:= v1 + v8 @kind long;
  #L1632f6.  v5:= v1 ^>> v6 @kind long;
  #L1632fa.  v1:= v1 + v5 @kind long;
  #L1632fc.  v5:= 63L;
  #L163300.  v8:= v1 ^& v5 @kind long;
  #L163304.  v1:= v1 ^>> v7 @kind long;
  #L163306.  v1:= v1 ^& v5 @kind long;
  #L163308.  v8:= v8 + v1 @kind long;
  #L16330a.  v1:= 3I;
  #L16330c.  v1:= (`long`) v1 @kind i2l;
  #L16330e.  v8:= v8 + v1 @kind long;
  #L163310.  v1:= (`long`) v4 @kind i2l;
  #L163312.  v8:= v8 / v1 @kind long;
  #L163314.  v1:= (`int`) v8 @kind l2i;
  #L163316.  call temp:= `writableSegment$okio`(v12, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L16331c.  v2:= temp @kind object;
  #L16331e.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163322.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L163326.  v6:= v5 + v1 @kind int;
  #L16332a.  v6:= v6 - v0 @kind int;
  #L16332c.  if v6 < v5 then goto L163350;
  #L163330.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L163336.  v0:= temp @kind object;
  #L163338.  v7:= 15L;
  #L16333c.  v7:= v7 ^& v13 @kind long;
  #L16333e.  v8:= (`int`) v7 @kind l2i;
  #L163340.  v0:= v0[v8] @kind byte;
  #L163344.  v3[v6]:= v0 @kind byte;
  #L163348.  v13:= v13 ^>> v4 @kind long;
  #L16334a.  v6:= v6 + -1;
  #L16334e.  goto L16332c;
  #L163350.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L163354.  v13:= v13 + v1 @kind int;
  #L163356.  v2.`okio.Segment.limit` @type ^`int` := v13;
  #L16335a.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163360.  v13:= temp @kind wide;
  #L163362.  v0:= (`long`) v1 @kind i2l;
  #L163364.  v13:= v13 + v0 @kind long;
  #L163366.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16336c.  v13:= v12 @kind object;
  #L16336e.  return v13 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163f90.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L163f96.  v1:= temp @kind object;
  #L163f98.  return v1 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L163380.  v0:= 4I;
  #L163382.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163388.  v0:= temp @kind object;
  #L16338a.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16338e.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L163392.  v3:= v2 + 1;
  #L163396.  v4:= v6 ^>> 24;
  #L16339a.  v4:= v4 ^& 255;
  #L16339e.  v4:= (`byte`) v4 @kind i2b;
  #L1633a0.  v1[v2]:= v4 @kind byte;
  #L1633a4.  v2:= v3 + 1;
  #L1633a8.  v4:= v6 ^>> 16;
  #L1633ac.  v4:= v4 ^& 255;
  #L1633b0.  v4:= (`byte`) v4 @kind i2b;
  #L1633b2.  v1[v3]:= v4 @kind byte;
  #L1633b6.  v3:= v2 + 1;
  #L1633ba.  v4:= v6 ^>> 8;
  #L1633be.  v4:= v4 ^& 255;
  #L1633c2.  v4:= (`byte`) v4 @kind i2b;
  #L1633c4.  v1[v2]:= v4 @kind byte;
  #L1633c8.  v2:= v3 + 1;
  #L1633cc.  v6:= v6 ^& 255;
  #L1633d0.  v6:= (`byte`) v6 @kind i2b;
  #L1633d2.  v1[v3]:= v6 @kind byte;
  #L1633d6.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1633da.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1633e0.  v0:= temp @kind wide;
  #L1633e2.  v2:= 4L;
  #L1633e6.  v0:= v0 + v2 @kind long;
  #L1633e8.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1633ee.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163fac.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L163fb2.  v1:= temp @kind object;
  #L163fb4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L163400.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(I)I` @kind static;
  #L163406.  v1:= temp;
  #L163408.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L16340e.  v1:= temp @kind object;
  #L163410.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163fc8.  call temp:= `writeIntLe`(v0, v1) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L163fce.  v1:= temp @kind object;
  #L163fd0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L163424.  v0:= 8I;
  #L163428.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L16342e.  v1:= temp @kind object;
  #L163430.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163434.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L163438.  v4:= v3 + 1;
  #L16343c.  v5:= 56I;
  #L163440.  v5:= v10 ^>> v5 @kind long;
  #L163444.  v7:= 255L;
  #L163448.  v5:= v5 ^& v7 @kind long;
  #L16344a.  v6:= (`int`) v5 @kind l2i;
  #L16344c.  v5:= (`byte`) v6 @kind i2b;
  #L16344e.  v2[v3]:= v5 @kind byte;
  #L163452.  v3:= v4 + 1;
  #L163456.  v5:= 48I;
  #L16345a.  v5:= v10 ^>> v5 @kind long;
  #L16345e.  v5:= v5 ^& v7 @kind long;
  #L163460.  v6:= (`int`) v5 @kind l2i;
  #L163462.  v5:= (`byte`) v6 @kind i2b;
  #L163464.  v2[v4]:= v5 @kind byte;
  #L163468.  v4:= v3 + 1;
  #L16346c.  v5:= 40I;
  #L163470.  v5:= v10 ^>> v5 @kind long;
  #L163474.  v5:= v5 ^& v7 @kind long;
  #L163476.  v6:= (`int`) v5 @kind l2i;
  #L163478.  v5:= (`byte`) v6 @kind i2b;
  #L16347a.  v2[v3]:= v5 @kind byte;
  #L16347e.  v3:= v4 + 1;
  #L163482.  v5:= 32I;
  #L163486.  v5:= v10 ^>> v5 @kind long;
  #L16348a.  v5:= v5 ^& v7 @kind long;
  #L16348c.  v6:= (`int`) v5 @kind l2i;
  #L16348e.  v5:= (`byte`) v6 @kind i2b;
  #L163490.  v2[v4]:= v5 @kind byte;
  #L163494.  v4:= v3 + 1;
  #L163498.  v5:= 24I;
  #L16349c.  v5:= v10 ^>> v5 @kind long;
  #L1634a0.  v5:= v5 ^& v7 @kind long;
  #L1634a2.  v6:= (`int`) v5 @kind l2i;
  #L1634a4.  v5:= (`byte`) v6 @kind i2b;
  #L1634a6.  v2[v3]:= v5 @kind byte;
  #L1634aa.  v3:= v4 + 1;
  #L1634ae.  v5:= 16I;
  #L1634b2.  v5:= v10 ^>> v5 @kind long;
  #L1634b6.  v5:= v5 ^& v7 @kind long;
  #L1634b8.  v6:= (`int`) v5 @kind l2i;
  #L1634ba.  v5:= (`byte`) v6 @kind i2b;
  #L1634bc.  v2[v4]:= v5 @kind byte;
  #L1634c0.  v4:= v3 + 1;
  #L1634c4.  v5:= v10 ^>> v0 @kind long;
  #L1634c8.  v5:= v5 ^& v7 @kind long;
  #L1634ca.  v0:= (`int`) v5 @kind l2i;
  #L1634cc.  v0:= (`byte`) v0 @kind i2b;
  #L1634ce.  v2[v3]:= v0 @kind byte;
  #L1634d2.  v0:= v4 + 1;
  #L1634d6.  v10:= v10 ^& v7 @kind long;
  #L1634d8.  v11:= (`int`) v10 @kind l2i;
  #L1634da.  v10:= (`byte`) v11 @kind i2b;
  #L1634dc.  v2[v4]:= v10 @kind byte;
  #L1634e0.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L1634e4.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1634ea.  v10:= temp @kind wide;
  #L1634ec.  v0:= 8L;
  #L1634f0.  v10:= v10 + v0 @kind long;
  #L1634f2.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1634f8.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L163fe4.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L163fea.  v1:= temp @kind object;
  #L163fec.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L16350c.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(J)J` @kind static;
  #L163512.  v1:= temp @kind wide;
  #L163514.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L16351a.  v1:= temp @kind object;
  #L16351c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L164000.  call temp:= `writeLongLe`(v0, v1) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L164006.  v1:= temp @kind object;
  #L164008.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L163530.  v0:= 2I;
  #L163532.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163538.  v0:= temp @kind object;
  #L16353a.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16353e.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L163542.  v3:= v2 + 1;
  #L163546.  v4:= v6 ^>> 8;
  #L16354a.  v4:= v4 ^& 255;
  #L16354e.  v4:= (`byte`) v4 @kind i2b;
  #L163550.  v1[v2]:= v4 @kind byte;
  #L163554.  v2:= v3 + 1;
  #L163558.  v6:= v6 ^& 255;
  #L16355c.  v6:= (`byte`) v6 @kind i2b;
  #L16355e.  v1[v3]:= v6 @kind byte;
  #L163562.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L163566.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16356c.  v0:= temp @kind wide;
  #L16356e.  v2:= 2L;
  #L163572.  v0:= v0 + v2 @kind long;
  #L163574.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16357a.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L16401c.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L164022.  v1:= temp @kind object;
  #L164024.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L16358c.  v1:= (`short`) v1 @kind i2s;
  #L16358e.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(S)S` @kind static;
  #L163594.  v1:= temp;
  #L163596.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L16359c.  v1:= temp @kind object;
  #L16359e.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L164038.  call temp:= `writeShortLe`(v0, v1) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L16403e.  v1:= temp @kind object;
  #L164040.  return v1 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 , `java.nio.charset.Charset` v7 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1635b0.  v0:= "string" @kind object;
  #L1635b4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1635ba.  v0:= "charset" @kind object;
  #L1635be.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1635c4.  v0:= 1I;
  #L1635c6.  v1:= 0I;
  #L1635c8.  if v5 < 0 then goto L1635d0;
  #L1635cc.  v2:= 1I;
  #L1635ce.  goto L1635d2;
  #L1635d0.  v2:= 0I;
  #L1635d2.  if v2 == 0 then goto L1636e0;
  #L1635d6.  if v6 < v5 then goto L1635de;
  #L1635da.  v2:= 1I;
  #L1635dc.  goto L1635e0;
  #L1635de.  v2:= 0I;
  #L1635e0.  if v2 == 0 then goto L16369a;
  #L1635e4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1635ea.  v2:= temp;
  #L1635ec.  if v6 > v2 then goto L1635f2;
  #L1635f0.  goto L1635f4;
  #L1635f2.  v0:= 0I;
  #L1635f4.  if v0 == 0 then goto L16364c;
  #L1635f8.  v0:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1635fc.  call temp:= `areEqual`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L163602.  v0:= temp;
  #L163604.  if v0 == 0 then goto L163612;
  #L163608.  call temp:= `writeUtf8`(v3, v4, v5, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L16360e.  v4:= temp @kind object;
  #L163610.  return v4 @kind object;
  #L163612.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L163618.  v4:= temp @kind object;
  #L16361a.  v5:= "(this as java.lang.Strin…ing(startIndex, endIndex)" @kind object;
  #L16361e.  call `checkNotNullExpressionValue`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163624.  v5:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L163628.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L16362e.  call temp:= `getBytes`(v4, v7) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L163634.  v4:= temp @kind object;
  #L163636.  v5:= "(this as java.lang.String).getBytes(charset)" @kind object;
  #L16363a.  call `checkNotNullExpressionValue`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163640.  v5:= length @variable v4;
  #L163642.  call temp:= `write`(v3, v4, v1, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L163648.  v4:= temp @kind object;
  #L16364a.  return v4 @kind object;
  #L16364c.  v5:= new `java.lang.StringBuilder`;
  #L163650.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163656.  v7:= "endIndex > string.length: " @kind object;
  #L16365a.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163660.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163666.  v6:= " > " @kind object;
  #L16366a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163670.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L163676.  v4:= temp;
  #L163678.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16367e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163684.  v4:= temp @kind object;
  #L163686.  v5:= new `java.lang.IllegalArgumentException`;
  #L16368a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163690.  v4:= temp @kind object;
  #L163692.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163698.  throw v5;
  #L16369a.  v4:= new `java.lang.StringBuilder`;
  #L16369e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1636a4.  v7:= "endIndex < beginIndex: " @kind object;
  #L1636a8.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636ae.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636b4.  v6:= " < " @kind object;
  #L1636b8.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636be.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636c4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1636ca.  v4:= temp @kind object;
  #L1636cc.  v5:= new `java.lang.IllegalArgumentException`;
  #L1636d0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1636d6.  v4:= temp @kind object;
  #L1636d8.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1636de.  throw v5;
  #L1636e0.  v4:= new `java.lang.StringBuilder`;
  #L1636e4.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1636ea.  v6:= "beginIndex < 0: " @kind object;
  #L1636ee.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636f4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1636fa.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163700.  v4:= temp @kind object;
  #L163702.  v5:= new `java.lang.IllegalArgumentException`;
  #L163706.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16370c.  v4:= temp @kind object;
  #L16370e.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163714.  throw v5;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163728.  v0:= "string" @kind object;
  #L16372c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163732.  v0:= "charset" @kind object;
  #L163736.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16373c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L163742.  v0:= temp;
  #L163744.  v1:= 0I;
  #L163746.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L16374c.  v3:= temp @kind object;
  #L16374e.  return v3 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L164054.  call temp:= `writeString`(v0, v1, v2, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L16405a.  v1:= temp @kind object;
  #L16405c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L164070.  call temp:= `writeString`(v0, v1, v2) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L164076.  v1:= temp @kind object;
  #L164078.  return v1 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L163788.  v2:= 0L;
  #L16378c.  v4:= 2I;
  #L16378e.  v5:= 0I;
  #L163790.  v0:= v6 @kind object;
  #L163792.  v1:= v7 @kind object;
  #L163794.  call temp:= `writeTo$default`(v0, v1, v2, v4, v5) @signature `Lokio/Buffer;.writeTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L16379a.  v7:= temp @kind object;
  #L16379c.  return v7 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v7 @kind this, `java.io.OutputStream` v8 @kind object, `long` v9 ) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1637b0.  v0:= "out" @kind object;
  #L1637b4.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1637ba.  v1:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1637be.  v3:= 0L;
  #L1637c2.  v5:= v9 @kind wide;
  #L1637c4.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1637ca.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1637ce.  v1:= 0L;
  #L1637d2.  v3:= lcmp(v9, v1);
  #L1637d6.  if v3 <= 0 then goto L16383a;
  #L1637da.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1637e0.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1637e4.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1637e8.  v1:= v1 - v2 @kind int;
  #L1637ea.  v1:= (`long`) v1 @kind i2l;
  #L1637ec.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1637f2.  v1:= temp @kind wide;
  #L1637f4.  v2:= (`int`) v1 @kind l2i;
  #L1637f6.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1637fa.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1637fe.  call `write`(v8, v1, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L163804.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L163808.  v1:= v1 + v2 @kind int;
  #L16380a.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L16380e.  v3:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L163812.  v5:= (`long`) v2 @kind i2l;
  #L163814.  v3:= v3 - v5 @kind long;
  #L163816.  v7.`okio.Buffer.a` @type ^`long` := v3 @kind wide;
  #L16381a.  v9:= v9 - v5 @kind long;
  #L16381c.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L163820.  if v1 != v2 then goto L1637ce;
  #L163824.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16382a.  v1:= temp @kind object;
  #L16382c.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L163830.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L163836.  v0:= v1 @kind object;
  #L163838.  goto L1637ce;
  #L16383a.  return v7 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16384c.  v0:= "string" @kind object;
  #L163850.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163856.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16385c.  v0:= temp;
  #L16385e.  v1:= 0I;
  #L163860.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L163866.  v3:= temp @kind object;
  #L163868.  return v3 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v11 @kind this, `java.lang.String` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L16387c.  v0:= "string" @kind object;
  #L163880.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L163886.  v0:= 0I;
  #L163888.  v1:= 1I;
  #L16388a.  if v13 < 0 then goto L163892;
  #L16388e.  v2:= 1I;
  #L163890.  goto L163894;
  #L163892.  v2:= 0I;
  #L163894.  if v2 == 0 then goto L163b6a;
  #L163898.  if v14 < v13 then goto L1638a0;
  #L16389c.  v2:= 1I;
  #L16389e.  goto L1638a2;
  #L1638a0.  v2:= 0I;
  #L1638a2.  if v2 == 0 then goto L163b24;
  #L1638a6.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1638ac.  v2:= temp;
  #L1638ae.  if v14 > v2 then goto L1638b6;
  #L1638b2.  v2:= 1I;
  #L1638b4.  goto L1638b8;
  #L1638b6.  v2:= 0I;
  #L1638b8.  if v2 == 0 then goto L163ad6;
  #L1638bc.  if v13 >= v14 then goto L163ad4;
  #L1638c0.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1638c6.  v2:= temp;
  #L1638c8.  v3:= 128I;
  #L1638cc.  if v2 >= v3 then goto L163940;
  #L1638d0.  call temp:= `writableSegment$okio`(v11, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1638d6.  v4:= temp @kind object;
  #L1638d8.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1638dc.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1638e0.  v6:= v6 - v13 @kind int;
  #L1638e2.  v7:= v6 - 8192;
  #L1638e6.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1638ec.  v7:= temp;
  #L1638ee.  v8:= v13 + 1;
  #L1638f2.  v13:= v13 + v6 @kind int;
  #L1638f4.  v2:= (`byte`) v2 @kind i2b;
  #L1638f6.  v5[v13]:= v2 @kind byte;
  #L1638fa.  if v8 >= v7 then goto L16391c;
  #L1638fe.  call temp:= `charAt`(v12, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L163904.  v13:= temp;
  #L163906.  if v13 < v3 then goto L16390c;
  #L16390a.  goto L16391c;
  #L16390c.  v2:= v8 + 1;
  #L163910.  v8:= v8 + v6 @kind int;
  #L163912.  v13:= (`byte`) v13 @kind i2b;
  #L163914.  v5[v8]:= v13 @kind byte;
  #L163918.  v8:= v2;
  #L16391a.  goto L1638fa;
  #L16391c.  v6:= v6 + v8 @kind int;
  #L16391e.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L163922.  v6:= v6 - v13 @kind int;
  #L163924.  v13:= v13 + v6 @kind int;
  #L163926.  v4.`okio.Segment.limit` @type ^`int` := v13;
  #L16392a.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163930.  v2:= temp @kind wide;
  #L163932.  v4:= (`long`) v6 @kind i2l;
  #L163934.  v2:= v2 + v4 @kind long;
  #L163936.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16393c.  v13:= v8;
  #L16393e.  goto L1638bc;
  #L163940.  v4:= 2048I;
  #L163944.  if v2 >= v4 then goto L163998;
  #L163948.  v4:= 2I;
  #L16394a.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163950.  v5:= temp @kind object;
  #L163952.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163956.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L16395a.  v8:= v2 ^> 6;
  #L16395e.  v8:= v8 ^| 192;
  #L163962.  v8:= (`byte`) v8 @kind i2b;
  #L163964.  v6[v7]:= v8 @kind byte;
  #L163968.  v8:= v7 + 1;
  #L16396c.  v2:= v2 ^& 63;
  #L163970.  v2:= v2 ^| v3 @kind int;
  #L163972.  v2:= (`byte`) v2 @kind i2b;
  #L163974.  v6[v8]:= v2 @kind byte;
  #L163978.  v7:= v7 + v4 @kind int;
  #L16397a.  v5.`okio.Segment.limit` @type ^`int` := v7;
  #L16397e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163984.  v2:= temp @kind wide;
  #L163986.  v4:= 2L;
  #L16398a.  v2:= v2 + v4 @kind long;
  #L16398c.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163992.  v13:= v13 + 1;
  #L163996.  goto L1638bc;
  #L163998.  v4:= 55296I;
  #L16399e.  v5:= 63I;
  #L1639a2.  if v2 < v4 then goto L163a74;
  #L1639a6.  v4:= 57343I;
  #L1639ac.  if v2 <= v4 then goto L1639b2;
  #L1639b0.  goto L163a74;
  #L1639b2.  v6:= v13 + 1;
  #L1639b6.  if v6 >= v14 then goto L1639c4;
  #L1639ba.  call temp:= `charAt`(v12, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1639c0.  v7:= temp;
  #L1639c2.  goto L1639c6;
  #L1639c4.  v7:= 0I;
  #L1639c6.  v8:= 56319I;
  #L1639cc.  if v2 > v8 then goto L163a68;
  #L1639d0.  v8:= 56320I;
  #L1639d6.  if v8 > v7 then goto L163a68;
  #L1639da.  if v4 >= v7 then goto L1639e0;
  #L1639de.  goto L163a68;
  #L1639e0.  v4:= 65536I;
  #L1639e4.  v2:= v2 ^& 1023;
  #L1639e8.  v2:= v2 ^< 10;
  #L1639ec.  v6:= v7 ^& 1023;
  #L1639f0.  v2:= v2 ^| v6 @kind int;
  #L1639f2.  v2:= v2 + v4 @kind int;
  #L1639f4.  v4:= 4I;
  #L1639f6.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1639fc.  v6:= temp @kind object;
  #L1639fe.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163a02.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L163a06.  v9:= v2 ^> 18;
  #L163a0a.  v9:= v9 ^| 240;
  #L163a0e.  v9:= (`byte`) v9 @kind i2b;
  #L163a10.  v7[v8]:= v9 @kind byte;
  #L163a14.  v9:= v8 + 1;
  #L163a18.  v10:= v2 ^> 12;
  #L163a1c.  v10:= v10 ^& v5 @kind int;
  #L163a1e.  v10:= v10 ^| v3 @kind int;
  #L163a20.  v10:= (`byte`) v10 @kind i2b;
  #L163a22.  v7[v9]:= v10 @kind byte;
  #L163a26.  v9:= v8 + 2;
  #L163a2a.  v10:= v2 ^> 6;
  #L163a2e.  v10:= v10 ^& v5 @kind int;
  #L163a30.  v10:= v10 ^| v3 @kind int;
  #L163a32.  v10:= (`byte`) v10 @kind i2b;
  #L163a34.  v7[v9]:= v10 @kind byte;
  #L163a38.  v9:= v8 + 3;
  #L163a3c.  v2:= v2 ^& v5 @kind int;
  #L163a3e.  v2:= v2 ^| v3 @kind int;
  #L163a40.  v2:= (`byte`) v2 @kind i2b;
  #L163a42.  v7[v9]:= v2 @kind byte;
  #L163a46.  v8:= v8 + v4 @kind int;
  #L163a48.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L163a4c.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163a52.  v2:= temp @kind wide;
  #L163a54.  v4:= 4L;
  #L163a58.  v2:= v2 + v4 @kind long;
  #L163a5a.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163a60.  v13:= v13 + 2;
  #L163a64.  goto L1638bc;
  #L163a68.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L163a6e.  v13:= v6;
  #L163a70.  goto L1638bc;
  #L163a74.  v4:= 3I;
  #L163a76.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163a7c.  v6:= temp @kind object;
  #L163a7e.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163a82.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L163a86.  v9:= v2 ^> 12;
  #L163a8a.  v9:= v9 ^| 224;
  #L163a8e.  v9:= (`byte`) v9 @kind i2b;
  #L163a90.  v7[v8]:= v9 @kind byte;
  #L163a94.  v9:= v8 + 1;
  #L163a98.  v10:= v2 ^> 6;
  #L163a9c.  v5:= v5 ^& v10 @kind int;
  #L163a9e.  v5:= v5 ^| v3 @kind int;
  #L163aa0.  v5:= (`byte`) v5 @kind i2b;
  #L163aa2.  v7[v9]:= v5 @kind byte;
  #L163aa6.  v5:= v8 + 2;
  #L163aaa.  v2:= v2 ^& 63;
  #L163aae.  v2:= v2 ^| v3 @kind int;
  #L163ab0.  v2:= (`byte`) v2 @kind i2b;
  #L163ab2.  v7[v5]:= v2 @kind byte;
  #L163ab6.  v8:= v8 + v4 @kind int;
  #L163ab8.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L163abc.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163ac2.  v2:= temp @kind wide;
  #L163ac4.  v4:= 3L;
  #L163ac8.  v2:= v2 + v4 @kind long;
  #L163aca.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163ad0.  goto L163992;
  #L163ad4.  return v11 @kind object;
  #L163ad6.  v13:= new `java.lang.StringBuilder`;
  #L163ada.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163ae0.  v0:= "endIndex > string.length: " @kind object;
  #L163ae4.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163aea.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163af0.  v14:= " > " @kind object;
  #L163af4.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163afa.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L163b00.  v12:= temp;
  #L163b02.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b08.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b0e.  v12:= temp @kind object;
  #L163b10.  v13:= new `java.lang.IllegalArgumentException`;
  #L163b14.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b1a.  v12:= temp @kind object;
  #L163b1c.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163b22.  throw v13;
  #L163b24.  v12:= new `java.lang.StringBuilder`;
  #L163b28.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163b2e.  v0:= "endIndex < beginIndex: " @kind object;
  #L163b32.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b38.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b3e.  v14:= " < " @kind object;
  #L163b42.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b48.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b4e.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b54.  v12:= temp @kind object;
  #L163b56.  v13:= new `java.lang.IllegalArgumentException`;
  #L163b5a.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b60.  v12:= temp @kind object;
  #L163b62.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163b68.  throw v13;
  #L163b6a.  v12:= new `java.lang.StringBuilder`;
  #L163b6e.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163b74.  v14:= "beginIndex < 0: " @kind object;
  #L163b78.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b7e.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163b84.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b8a.  v12:= temp @kind object;
  #L163b8c.  v13:= new `java.lang.IllegalArgumentException`;
  #L163b90.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L163b96.  v12:= temp @kind object;
  #L163b98.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163b9e.  throw v13;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L16408c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L164092.  v1:= temp @kind object;
  #L164094.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1640a8.  call temp:= `writeUtf8`(v0, v1, v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1640ae.  v1:= temp @kind object;
  #L1640b0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v8 @kind this, `int` v9 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L163bb0.  v0:= 128I;
  #L163bb4.  if v9 >= v0 then goto L163bc2;
  #L163bb8.  call temp:= `writeByte`(v8, v9) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L163bbe.  goto L163d12;
  #L163bc2.  v1:= 2048I;
  #L163bc6.  v2:= 63I;
  #L163bca.  if v9 >= v1 then goto L163c1a;
  #L163bce.  v1:= 2I;
  #L163bd0.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163bd6.  v3:= temp @kind object;
  #L163bd8.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163bdc.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L163be0.  v6:= v9 ^> 6;
  #L163be4.  v6:= v6 ^| 192;
  #L163be8.  v6:= (`byte`) v6 @kind i2b;
  #L163bea.  v4[v5]:= v6 @kind byte;
  #L163bee.  v6:= v5 + 1;
  #L163bf2.  v9:= v9 ^& v2 @kind int;
  #L163bf4.  v9:= v9 ^| v0 @kind int;
  #L163bf6.  v9:= (`byte`) v9 @kind i2b;
  #L163bf8.  v4[v6]:= v9 @kind byte;
  #L163bfc.  v5:= v5 + v1 @kind int;
  #L163bfe.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L163c02.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163c08.  v0:= temp @kind wide;
  #L163c0a.  v2:= 2L;
  #L163c0e.  v0:= v0 + v2 @kind long;
  #L163c10.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163c16.  goto L163d12;
  #L163c1a.  v1:= 57343I;
  #L163c20.  v3:= 55296I;
  #L163c26.  if v3 <= v9 then goto L163c2c;
  #L163c2a.  goto L163c38;
  #L163c2c.  if v1 < v9 then goto L163c38;
  #L163c30.  call temp:= `writeByte`(v8, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L163c36.  goto L163d12;
  #L163c38.  v1:= 65536I;
  #L163c3c.  if v9 >= v1 then goto L163c9c;
  #L163c40.  v1:= 3I;
  #L163c42.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163c48.  v3:= temp @kind object;
  #L163c4a.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163c4e.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L163c52.  v6:= v9 ^> 12;
  #L163c56.  v6:= v6 ^| 224;
  #L163c5a.  v6:= (`byte`) v6 @kind i2b;
  #L163c5c.  v4[v5]:= v6 @kind byte;
  #L163c60.  v6:= v5 + 1;
  #L163c64.  v7:= v9 ^> 6;
  #L163c68.  v7:= v7 ^& v2 @kind int;
  #L163c6a.  v7:= v7 ^| v0 @kind int;
  #L163c6c.  v7:= (`byte`) v7 @kind i2b;
  #L163c6e.  v4[v6]:= v7 @kind byte;
  #L163c72.  v6:= v5 + 2;
  #L163c76.  v9:= v9 ^& v2 @kind int;
  #L163c78.  v9:= v9 ^| v0 @kind int;
  #L163c7a.  v9:= (`byte`) v9 @kind i2b;
  #L163c7c.  v4[v6]:= v9 @kind byte;
  #L163c80.  v5:= v5 + v1 @kind int;
  #L163c82.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L163c86.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163c8c.  v0:= temp @kind wide;
  #L163c8e.  v2:= 3L;
  #L163c92.  v0:= v0 + v2 @kind long;
  #L163c94.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163c9a.  goto L163d12;
  #L163c9c.  v1:= 1114111I;
  #L163ca2.  if v9 > v1 then goto L163d14;
  #L163ca6.  v1:= 4I;
  #L163ca8.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L163cae.  v3:= temp @kind object;
  #L163cb0.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L163cb4.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L163cb8.  v6:= v9 ^> 18;
  #L163cbc.  v6:= v6 ^| 240;
  #L163cc0.  v6:= (`byte`) v6 @kind i2b;
  #L163cc2.  v4[v5]:= v6 @kind byte;
  #L163cc6.  v6:= v5 + 1;
  #L163cca.  v7:= v9 ^> 12;
  #L163cce.  v7:= v7 ^& v2 @kind int;
  #L163cd0.  v7:= v7 ^| v0 @kind int;
  #L163cd2.  v7:= (`byte`) v7 @kind i2b;
  #L163cd4.  v4[v6]:= v7 @kind byte;
  #L163cd8.  v6:= v5 + 2;
  #L163cdc.  v7:= v9 ^> 6;
  #L163ce0.  v7:= v7 ^& v2 @kind int;
  #L163ce2.  v7:= v7 ^| v0 @kind int;
  #L163ce4.  v7:= (`byte`) v7 @kind i2b;
  #L163ce6.  v4[v6]:= v7 @kind byte;
  #L163cea.  v6:= v5 + 3;
  #L163cee.  v9:= v9 ^& v2 @kind int;
  #L163cf0.  v9:= v9 ^| v0 @kind int;
  #L163cf2.  v9:= (`byte`) v9 @kind i2b;
  #L163cf4.  v4[v6]:= v9 @kind byte;
  #L163cf8.  v5:= v5 + v1 @kind int;
  #L163cfa.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L163cfe.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L163d04.  v0:= temp @kind wide;
  #L163d06.  v2:= 4L;
  #L163d0a.  v0:= v0 + v2 @kind long;
  #L163d0c.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L163d12.  return v8 @kind object;
  #L163d14.  v0:= new `java.lang.IllegalArgumentException`;
  #L163d18.  v1:= new `java.lang.StringBuilder`;
  #L163d1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163d22.  v2:= "Unexpected code point: 0x" @kind object;
  #L163d26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163d2c.  call temp:= `toHexString`(v9) @signature `Lokio/-Util;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L163d32.  v9:= temp @kind object;
  #L163d34.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163d3a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L163d40.  v9:= temp @kind object;
  #L163d42.  call `<init>`(v0, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163d48.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1640c4.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1640ca.  v1:= temp @kind object;
  #L1640cc.  return v1 @kind object;
}
