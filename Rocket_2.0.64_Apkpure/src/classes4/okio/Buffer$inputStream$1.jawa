record `okio.Buffer$inputStream$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `okio.Buffer` `okio.Buffer$inputStream$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$inputStream$1` v0 @kind this, `okio.Buffer` v1 @kind object) @signature `Lokio/Buffer$inputStream$1;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L160de0.  v0.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` := v1 @kind object;
  #L160de4.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L160dea.  return @kind void;
}
procedure `int` `available`(`okio.Buffer$inputStream$1` v4 @kind this) @signature `Lokio/Buffer$inputStream$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L160d10.  v0:= v4.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L160d14.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160d1a.  v0:= temp @kind wide;
  #L160d1c.  v2:= 2147483647I;
  #L160d22.  v2:= (`long`) v2 @kind i2l;
  #L160d24.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L160d2a.  v0:= temp @kind wide;
  #L160d2c.  v1:= (`int`) v0 @kind l2i;
  #L160d2e.  return v1;
}
procedure `void` `close`(`okio.Buffer$inputStream$1` v0 @kind this) @signature `Lokio/Buffer$inputStream$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L160dfc.  return @kind void;
}
procedure `int` `read`(`okio.Buffer$inputStream$1` v5 @kind this) @signature `Lokio/Buffer$inputStream$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L160d40.  v0:= v5.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L160d44.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L160d4a.  v0:= temp @kind wide;
  #L160d4c.  v2:= 0L;
  #L160d50.  v4:= lcmp(v0, v2);
  #L160d54.  if v4 <= 0 then goto L160d6a;
  #L160d58.  v0:= v5.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L160d5c.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L160d62.  v0:= temp;
  #L160d64.  v0:= v0 ^& 255;
  #L160d68.  goto L160d6c;
  #L160d6a.  v0:= -1I;
  #L160d6c.  return v0;
}
procedure `int` `read`(`okio.Buffer$inputStream$1` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer$inputStream$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160d80.  v0:= "sink" @kind object;
  #L160d84.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L160d8a.  v0:= v1.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L160d8e.  call temp:= `read`(v0, v2, v3, v4) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L160d94.  v2:= temp;
  #L160d96.  return v2;
}
procedure `java.lang.String` `toString`(`okio.Buffer$inputStream$1` v2 @kind this) @signature `Lokio/Buffer$inputStream$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160da8.  v0:= new `java.lang.StringBuilder`;
  #L160dac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160db2.  v1:= v2.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L160db6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160dbc.  v1:= ".inputStream()" @kind object;
  #L160dc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160dc6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160dcc.  v0:= temp @kind object;
  #L160dce.  return v0 @kind object;
}
