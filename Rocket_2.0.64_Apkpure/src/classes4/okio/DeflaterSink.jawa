record `okio.DeflaterSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.DeflaterSink.a` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okio.DeflaterSink.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.DeflaterSink.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.BufferedSink` v2 @kind object, `java.util.zip.Deflater` v3 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16608c.  v0:= "sink" @kind object;
  #L166090.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L166096.  v0:= "deflater" @kind object;
  #L16609a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1660a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1660a6.  v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` := v2 @kind object;
  #L1660aa.  v1.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` := v3 @kind object;
  #L1660ae.  return @kind void;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.Sink` v2 @kind object, `java.util.zip.Deflater` v3 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/Sink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1660c0.  v0:= "sink" @kind object;
  #L1660c4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1660ca.  v0:= "deflater" @kind object;
  #L1660ce.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1660d4.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L1660da.  v2:= temp @kind object;
  #L1660dc.  call `<init>`(v1, v2, v3) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L1660e2.  return @kind void;
}
procedure `void` `a`(`okio.DeflaterSink` v7 @kind this, `boolean` v8 ) @signature `Lokio/DeflaterSink;.a:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L166170.  v0:= v7.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L166174.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSink;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L16617a.  v0:= temp @kind object;
  #L16617c.  v1:= 1I;
  #L16617e.  call temp:= `writableSegment$okio`(v0, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L166184.  v1:= temp @kind object;
  #L166186.  if v8 == 0 then goto L1661a6;
  #L16618a.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L16618e.  v3:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L166192.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L166196.  v5:= v4 - 8192;
  #L16619a.  v6:= 2I;
  #L16619c.  call temp:= `deflate`(v2, v3, v4, v5, v6) @signature `Ljava/util/zip/Deflater;.deflate:([BIII)I` @kind virtual;
  #L1661a2.  v2:= temp;
  #L1661a4.  goto L1661be;
  #L1661a6.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1661aa.  v3:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1661ae.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L1661b2.  v5:= v4 - 8192;
  #L1661b6.  call temp:= `deflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Deflater;.deflate:([BII)I` @kind virtual;
  #L1661bc.  v2:= temp;
  #L1661be.  if v2 <= 0 then goto L1661ea;
  #L1661c2.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L1661c6.  v3:= v3 + v2 @kind int;
  #L1661c8.  v1.`okio.Segment.limit` @type ^`int` := v3;
  #L1661cc.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1661d2.  v3:= temp @kind wide;
  #L1661d4.  v1:= (`long`) v2 @kind i2l;
  #L1661d6.  v3:= v3 + v1 @kind long;
  #L1661d8.  call `setSize$okio`(v0, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1661de.  v1:= v7.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1661e2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/BufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind interface;
  #L1661e8.  goto L16617c;
  #L1661ea.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1661ee.  call temp:= `needsInput`(v2) @signature `Ljava/util/zip/Deflater;.needsInput:()Z` @kind virtual;
  #L1661f4.  v2:= temp;
  #L1661f6.  if v2 == 0 then goto L16617c;
  #L1661fa.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L1661fe.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L166202.  if v8 != v2 then goto L166218;
  #L166206.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16620c.  v8:= temp @kind object;
  #L16620e.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L166212.  call `recycle`(v1) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L166218.  return @kind void;
}
procedure `void` `close`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1660f4.  v0:= v2.`okio.DeflaterSink.a` @type ^`boolean` @kind boolean;
  #L1660f8.  if v0 == 0 then goto L1660fe;
  #L1660fc.  return @kind void;
  #L1660fe.  v0:= 0I;
  #L166100.  call `finishDeflate$okio`(v2) @signature `Lokio/DeflaterSink;.finishDeflate$okio:()V` @kind virtual;
  #L166106.  goto L16610a;
  #L166108.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16610a.  v1:= v2.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L16610e.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L166114.  goto L16611e;
  #L166116.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L166118.  if v0 != 0 then goto L16611e;
  #L16611c.  v0:= v1 @kind object;
  #L16611e.  v1:= v2.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L166122.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L166128.  goto L166132;
  #L16612a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16612c.  if v0 != 0 then goto L166132;
  #L166130.  v0:= v1 @kind object;
  #L166132.  v1:= 1I;
  #L166134.  v2.`okio.DeflaterSink.a` @type ^`boolean` := v1 @kind boolean;
  #L166138.  if v0 != 0 then goto L16613e;
  #L16613c.  return @kind void;
  #L16613e.  throw v0;
  catch `java.lang.Throwable` @[L166100..L166106] goto L166108;
  catch `java.lang.Throwable` @[L16610a..L166114] goto L166116;
  catch `java.lang.Throwable` @[L16611e..L166128] goto L16612a;
}
procedure `void` `finishDeflate$okio`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.finishDeflate$okio:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16622c.  v0:= v1.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L166230.  call `finish`(v0) @signature `Ljava/util/zip/Deflater;.finish:()V` @kind virtual;
  #L166236.  v0:= 0I;
  #L166238.  call `a`(v1, v0) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L16623e.  return @kind void;
}
procedure `void` `flush`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166250.  v0:= 1I;
  #L166252.  call `a`(v1, v0) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L166258.  v0:= v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L16625c.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L166262.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16606c.  v0:= v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L166070.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L166076.  v0:= temp @kind object;
  #L166078.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L166028.  v0:= new `java.lang.StringBuilder`;
  #L16602c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166032.  v1:= "DeflaterSink(" @kind object;
  #L166036.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16603c.  v1:= v2.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L166040.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166046.  v1:= 41I;
  #L16604a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166050.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166056.  v0:= temp @kind object;
  #L166058.  return v0 @kind object;
}
procedure `void` `write`(`okio.DeflaterSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L166274.  v0:= "source" @kind object;
  #L166278.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16627e.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L166284.  v1:= temp @kind wide;
  #L166286.  v3:= 0L;
  #L16628a.  v5:= v9 @kind wide;
  #L16628c.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L166292.  v0:= 0L;
  #L166296.  v2:= lcmp(v9, v0);
  #L16629a.  if v2 <= 0 then goto L166312;
  #L16629e.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1662a2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1662a8.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1662ac.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1662b0.  v1:= v1 - v2 @kind int;
  #L1662b2.  v1:= (`long`) v1 @kind i2l;
  #L1662b4.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1662ba.  v1:= temp @kind wide;
  #L1662bc.  v2:= (`int`) v1 @kind l2i;
  #L1662be.  v1:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1662c2.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1662c6.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L1662ca.  call `setInput`(v1, v3, v4, v2) @signature `Ljava/util/zip/Deflater;.setInput:([BII)V` @kind virtual;
  #L1662d0.  v1:= 0I;
  #L1662d2.  call `a`(v7, v1) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L1662d8.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1662de.  v3:= temp @kind wide;
  #L1662e0.  v5:= (`long`) v2 @kind i2l;
  #L1662e2.  v3:= v3 - v5 @kind long;
  #L1662e4.  call `setSize$okio`(v8, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1662ea.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1662ee.  v1:= v1 + v2 @kind int;
  #L1662f0.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1662f4.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1662f8.  if v1 != v2 then goto L16630e;
  #L1662fc.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L166302.  v1:= temp @kind object;
  #L166304.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L166308.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16630e.  v9:= v9 - v5 @kind long;
  #L166310.  goto L166292;
  #L166312.  return @kind void;
}
