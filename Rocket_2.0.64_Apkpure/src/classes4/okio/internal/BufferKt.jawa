record `okio.internal.BufferKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `long` `@@okio.internal.BufferKt.OVERFLOW_DIGIT_START` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@okio.internal.BufferKt.OVERFLOW_ZONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okio.internal.BufferKt.SEGMENTING_THRESHOLD` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@okio.internal.BufferKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/internal/BufferKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L17120c.  v0:= "0123456789abcdef" @kind object;
  #L171210.  call temp:= `asUtf8ToByteArray`(v0) @signature `Lokio/-Platform;.asUtf8ToByteArray:(Ljava/lang/String;)[B` @kind static;
  #L171216.  v0:= temp @kind object;
  #L171218.  `@@okio.internal.BufferKt.a` @type ^`byte`[] := v0 @kind object;
  #L17121c.  return @kind void;
}
procedure `void` `commonClear`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonClear:(Lokio/Buffer;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L171230.  v0:= "$this$commonClear" @kind object;
  #L171234.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17123a.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L171240.  v0:= temp @kind wide;
  #L171242.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L171248.  return @kind void;
}
procedure `long` `commonCompleteSegmentByteCount`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonCompleteSegmentByteCount:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16f310.  v0:= "$this$commonCompleteSegmentByteCount" @kind object;
  #L16f314.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f31a.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f320.  v0:= temp @kind wide;
  #L16f322.  v2:= 0L;
  #L16f326.  v4:= lcmp(v0, v2);
  #L16f32a.  if v4 != 0 then goto L16f330;
  #L16f32e.  return v2 @kind wide;
  #L16f330.  v5:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16f334.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f33a.  v5:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16f33e.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f344.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L16f348.  v3:= 8192I;
  #L16f34c.  if v2 >= v3 then goto L16f362;
  #L16f350.  v3:= v5.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L16f354.  if v3 == 0 then goto L16f362;
  #L16f358.  v5:= v5.`okio.Segment.pos` @type ^`int`;
  #L16f35c.  v2:= v2 - v5 @kind int;
  #L16f35e.  v2:= (`long`) v2 @kind i2l;
  #L16f360.  v0:= v0 - v2 @kind long;
  #L16f362.  return v0 @kind wide;
}
procedure `okio.Buffer` `commonCopy`(`okio.Buffer` v6 @kind object) @signature `Lokio/internal/BufferKt;.commonCopy:(Lokio/Buffer;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L170090.  v0:= "$this$commonCopy" @kind object;
  #L170094.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17009a.  v0:= new `okio.Buffer`;
  #L17009e.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1700a4.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1700aa.  v1:= temp @kind wide;
  #L1700ac.  v3:= 0L;
  #L1700b0.  v5:= lcmp(v1, v3);
  #L1700b4.  if v5 != 0 then goto L1700ba;
  #L1700b8.  return v0 @kind object;
  #L1700ba.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1700be.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1700c4.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1700ca.  v2:= temp @kind object;
  #L1700cc.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1700d0.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1700d4.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1700d8.  v3:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1700dc.  if v3 == v1 then goto L170104;
  #L1700e0.  v4:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1700e4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1700ea.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1700f0.  call temp:= `sharedCopy`(v3) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1700f6.  v5:= temp @kind object;
  #L1700f8.  call temp:= `push`(v4, v5) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1700fe.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L170102.  goto L1700dc;
  #L170104.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L17010a.  v1:= temp @kind wide;
  #L17010c.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170112.  return v0 @kind object;
}
procedure `okio.Buffer` `commonCopyTo`(`okio.Buffer` v8 @kind object, `okio.Buffer` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/internal/BufferKt;.commonCopyTo:(Lokio/Buffer;Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L170124.  v0:= "$this$commonCopyTo" @kind object;
  #L170128.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17012e.  v0:= "out" @kind object;
  #L170132.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170138.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L17013e.  v1:= temp @kind wide;
  #L170140.  v3:= v10 @kind wide;
  #L170142.  v5:= v12 @kind wide;
  #L170144.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L17014a.  v0:= 0L;
  #L17014e.  v2:= lcmp(v12, v0);
  #L170152.  if v2 != 0 then goto L170158;
  #L170156.  return v8 @kind object;
  #L170158.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L17015e.  v2:= temp @kind wide;
  #L170160.  v2:= v2 + v12 @kind long;
  #L170162.  call `setSize$okio`(v9, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170168.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L17016c.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L170172.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L170176.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L17017a.  v5:= v3 - v4 @kind int;
  #L17017e.  v5:= (`long`) v5 @kind i2l;
  #L170180.  v7:= lcmp(v10, v5);
  #L170184.  if v7 < 0 then goto L170194;
  #L170188.  v3:= v3 - v4 @kind int;
  #L17018a.  v3:= (`long`) v3 @kind i2l;
  #L17018c.  v10:= v10 - v3 @kind long;
  #L17018e.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L170192.  goto L17016c;
  #L170194.  v3:= lcmp(v12, v0);
  #L170198.  if v3 <= 0 then goto L17020c;
  #L17019c.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1701a2.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1701a8.  v3:= temp @kind object;
  #L1701aa.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L1701ae.  v11:= (`int`) v10 @kind l2i;
  #L1701b0.  v4:= v4 + v11 @kind int;
  #L1701b2.  v3.`okio.Segment.pos` @type ^`int` := v4;
  #L1701b6.  v10:= (`int`) v12 @kind l2i;
  #L1701b8.  v4:= v4 + v10 @kind int;
  #L1701ba.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1701be.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1701c4.  v10:= temp;
  #L1701c6.  v3.`okio.Segment.limit` @type ^`int` := v10;
  #L1701ca.  v10:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1701ce.  if v10 != 0 then goto L1701e0;
  #L1701d2.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1701d6.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1701da.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L1701de.  goto L1701f6;
  #L1701e0.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1701e6.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1701ea.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1701f0.  call temp:= `push`(v10, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1701f6.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1701fa.  v11:= v3.`okio.Segment.pos` @type ^`int`;
  #L1701fe.  v10:= v10 - v11 @kind int;
  #L170200.  v10:= (`long`) v10 @kind i2l;
  #L170202.  v12:= v12 - v10 @kind long;
  #L170204.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L170208.  v10:= v0 @kind wide;
  #L17020a.  goto L170194;
  #L17020c.  return v8 @kind object;
}
procedure `boolean` `commonEquals`(`okio.Buffer` v18 @kind object, `java.lang.Object` v19 @kind object) @signature `Lokio/internal/BufferKt;.commonEquals:(Lokio/Buffer;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L16e4ac.  v0:= v18 @kind object;
  #L16e4b0.  v1:= v19 @kind object;
  #L16e4b4.  v2:= "$this$commonEquals" @kind object;
  #L16e4b8.  call `checkNotNullParameter`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e4be.  v2:= 1I;
  #L16e4c0.  if v0 != v1 then goto L16e4c6;
  #L16e4c4.  return v2;
  #L16e4c6.  v3:= instanceof @variable v1 @type ^`okio.Buffer` @kind boolean;
  #L16e4ca.  v4:= 0I;
  #L16e4cc.  if v3 != 0 then goto L16e4d2;
  #L16e4d0.  return v4;
  #L16e4d2.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e4d8.  v5:= temp @kind wide;
  #L16e4da.  v1:= (`okio.Buffer`) v1 @kind object;
  #L16e4de.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e4e4.  v7:= temp @kind wide;
  #L16e4e6.  v3:= lcmp(v5, v7);
  #L16e4ea.  if v3 == 0 then goto L16e4f0;
  #L16e4ee.  return v4;
  #L16e4f0.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e4f6.  v5:= temp @kind wide;
  #L16e4f8.  v7:= 0L;
  #L16e4fc.  v3:= lcmp(v5, v7);
  #L16e500.  if v3 != 0 then goto L16e506;
  #L16e504.  return v2;
  #L16e506.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e50a.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e510.  v1:= v1.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e514.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e51a.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L16e51e.  v6:= v1.`okio.Segment.pos` @type ^`int`;
  #L16e522.  v9:= v7 @kind wide;
  #L16e524.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e52a.  v11:= temp @kind wide;
  #L16e52c.  v13:= lcmp(v9, v11);
  #L16e530.  if v13 >= 0 then goto L16e5b2;
  #L16e534.  v11:= v3.`okio.Segment.limit` @type ^`int`;
  #L16e538.  v11:= v11 - v5 @kind int;
  #L16e53a.  v12:= v1.`okio.Segment.limit` @type ^`int`;
  #L16e53e.  v12:= v12 - v6 @kind int;
  #L16e540.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L16e546.  v11:= temp;
  #L16e548.  v11:= (`long`) v11 @kind i2l;
  #L16e54a.  v13:= v7 @kind wide;
  #L16e54c.  v15:= lcmp(v13, v11);
  #L16e550.  if v15 >= 0 then goto L16e582;
  #L16e554.  v15:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e558.  v16:= v5 + 1;
  #L16e55c.  v5:= v15[v5] @kind byte;
  #L16e560.  v15:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e564.  v17:= v6 + 1;
  #L16e568.  v6:= v15[v6] @kind byte;
  #L16e56c.  if v5 == v6 then goto L16e572;
  #L16e570.  return v4;
  #L16e572.  v5:= 1L;
  #L16e576.  v13:= v13 + v5 @kind long;
  #L16e578.  v5:= v16;
  #L16e57c.  v6:= v17;
  #L16e580.  goto L16e54c;
  #L16e582.  v13:= v3.`okio.Segment.limit` @type ^`int`;
  #L16e586.  if v5 != v13 then goto L16e598;
  #L16e58a.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16e58e.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e594.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L16e598.  v13:= v1.`okio.Segment.limit` @type ^`int`;
  #L16e59c.  if v6 != v13 then goto L16e5ae;
  #L16e5a0.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16e5a4.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e5aa.  v6:= v1.`okio.Segment.pos` @type ^`int`;
  #L16e5ae.  v9:= v9 + v11 @kind long;
  #L16e5b0.  goto L16e524;
  #L16e5b2.  return v2;
}
procedure `byte` `commonGet`(`okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/internal/BufferKt;.commonGet:(Lokio/Buffer;J)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16e6c4.  v0:= "$this$commonGet" @kind object;
  #L16e6c8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e6ce.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e6d4.  v1:= temp @kind wide;
  #L16e6d6.  v5:= 1L;
  #L16e6da.  v3:= v8 @kind wide;
  #L16e6dc.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L16e6e2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e6e6.  if v0 == 0 then goto L16e786;
  #L16e6ea.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e6f0.  v1:= temp @kind wide;
  #L16e6f2.  v1:= v1 - v8 @kind long;
  #L16e6f4.  v3:= lcmp(v1, v8);
  #L16e6f8.  if v3 >= 0 then goto L16e742;
  #L16e6fc.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e702.  v1:= temp @kind wide;
  #L16e704.  v7:= lcmp(v1, v8);
  #L16e708.  if v7 <= 0 then goto L16e726;
  #L16e70c.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16e710.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e716.  v7:= v0.`okio.Segment.limit` @type ^`int`;
  #L16e71a.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e71e.  v7:= v7 - v3 @kind int;
  #L16e720.  v3:= (`long`) v7 @kind i2l;
  #L16e722.  v1:= v1 - v3 @kind long;
  #L16e724.  goto L16e704;
  #L16e726.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e72c.  v7:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e730.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e734.  v3:= (`long`) v0 @kind i2l;
  #L16e736.  v3:= v3 + v8 @kind long;
  #L16e738.  v3:= v3 - v1 @kind long;
  #L16e73a.  v8:= (`int`) v3 @kind l2i;
  #L16e73c.  v7:= v7[v8] @kind byte;
  #L16e740.  return v7;
  #L16e742.  v1:= 0L;
  #L16e746.  v7:= v0.`okio.Segment.limit` @type ^`int`;
  #L16e74a.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e74e.  v7:= v7 - v3 @kind int;
  #L16e750.  v3:= (`long`) v7 @kind i2l;
  #L16e752.  v3:= v3 + v1 @kind long;
  #L16e754.  v7:= lcmp(v3, v8);
  #L16e758.  if v7 <= 0 then goto L16e778;
  #L16e75c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e762.  v7:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e766.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e76a.  v3:= (`long`) v0 @kind i2l;
  #L16e76c.  v3:= v3 + v8 @kind long;
  #L16e76e.  v3:= v3 - v1 @kind long;
  #L16e770.  v8:= (`int`) v3 @kind l2i;
  #L16e772.  v7:= v7[v8] @kind byte;
  #L16e776.  return v7;
  #L16e778.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16e77c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e782.  v1:= v3 @kind wide;
  #L16e784.  goto L16e746;
  #L16e786.  v7:= 0I;
  #L16e788.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e78e.  throw v7;
}
procedure `int` `commonHashCode`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonHashCode:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16e910.  v0:= "$this$commonHashCode" @kind object;
  #L16e914.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e91a.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e91e.  if v0 == 0 then goto L16e958;
  #L16e922.  v1:= 1I;
  #L16e924.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e928.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L16e92c.  if v2 >= v3 then goto L16e944;
  #L16e930.  v1:= v1 * 31;
  #L16e934.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e938.  v4:= v4[v2] @kind byte;
  #L16e93c.  v1:= v1 + v4 @kind int;
  #L16e93e.  v2:= v2 + 1;
  #L16e942.  goto L16e92c;
  #L16e944.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16e948.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e94e.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e952.  if v0 != v2 then goto L16e924;
  #L16e956.  return v1;
  #L16e958.  v5:= 0I;
  #L16e95a.  return v5;
}
procedure `long` `commonIndexOf`(`okio.Buffer` v9 @kind object, `byte` v10 , `long` v11 , `long` v13 ) @signature `Lokio/internal/BufferKt;.commonIndexOf:(Lokio/Buffer;BJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L16f374.  v0:= "$this$commonIndexOf" @kind object;
  #L16f378.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f37e.  v0:= 0L;
  #L16f382.  v2:= lcmp(v0, v11);
  #L16f386.  if v2 <= 0 then goto L16f38c;
  #L16f38a.  goto L16f398;
  #L16f38c.  v2:= lcmp(v13, v11);
  #L16f390.  if v2 < 0 then goto L16f398;
  #L16f394.  v2:= 1I;
  #L16f396.  goto L16f39a;
  #L16f398.  v2:= 0I;
  #L16f39a.  if v2 == 0 then goto L16f500;
  #L16f39e.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f3a4.  v2:= temp @kind wide;
  #L16f3a6.  v4:= lcmp(v13, v2);
  #L16f3aa.  if v4 <= 0 then goto L16f3b6;
  #L16f3ae.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f3b4.  v13:= temp @kind wide;
  #L16f3b6.  v2:= -1L;
  #L16f3ba.  v4:= lcmp(v11, v13);
  #L16f3be.  if v4 != 0 then goto L16f3c4;
  #L16f3c2.  return v2 @kind wide;
  #L16f3c4.  v4:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16f3c8.  if v4 == 0 then goto L16f4fe;
  #L16f3cc.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f3d2.  v5:= temp @kind wide;
  #L16f3d4.  v5:= v5 - v11 @kind long;
  #L16f3d6.  v7:= lcmp(v5, v11);
  #L16f3da.  if v7 >= 0 then goto L16f476;
  #L16f3de.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f3e4.  v0:= temp @kind wide;
  #L16f3e6.  v9:= lcmp(v0, v11);
  #L16f3ea.  if v9 <= 0 then goto L16f408;
  #L16f3ee.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16f3f2.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f3f8.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f3fc.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f400.  v9:= v9 - v5 @kind int;
  #L16f402.  v5:= (`long`) v9 @kind i2l;
  #L16f404.  v0:= v0 - v5 @kind long;
  #L16f406.  goto L16f3e6;
  #L16f408.  v9:= lcmp(v0, v13);
  #L16f40c.  if v9 >= 0 then goto L16f474;
  #L16f410.  v9:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f414.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f418.  v5:= (`long`) v5 @kind i2l;
  #L16f41a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f41e.  v7:= (`long`) v7 @kind i2l;
  #L16f420.  v7:= v7 + v13 @kind long;
  #L16f422.  v7:= v7 - v0 @kind long;
  #L16f424.  call temp:= `min`(v5, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f42a.  v5:= temp @kind wide;
  #L16f42c.  v6:= (`int`) v5 @kind l2i;
  #L16f42e.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f432.  v7:= (`long`) v5 @kind i2l;
  #L16f434.  v7:= v7 + v11 @kind long;
  #L16f436.  v7:= v7 - v0 @kind long;
  #L16f438.  v11:= (`int`) v7 @kind l2i;
  #L16f43a.  if v11 >= v6 then goto L16f458;
  #L16f43e.  v12:= v9[v11] @kind byte;
  #L16f442.  if v12 != v10 then goto L16f452;
  #L16f446.  v9:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f44a.  v11:= v11 - v9 @kind int;
  #L16f44c.  v9:= (`long`) v11 @kind i2l;
  #L16f44e.  v9:= v9 + v0 @kind long;
  #L16f450.  return v9 @kind wide;
  #L16f452.  v11:= v11 + 1;
  #L16f456.  goto L16f43a;
  #L16f458.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f45c.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f460.  v9:= v9 - v11 @kind int;
  #L16f462.  v11:= (`long`) v9 @kind i2l;
  #L16f464.  v0:= v0 + v11 @kind long;
  #L16f466.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f46a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f470.  v11:= v0 @kind wide;
  #L16f472.  goto L16f408;
  #L16f474.  return v2 @kind wide;
  #L16f476.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f47a.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f47e.  v9:= v9 - v5 @kind int;
  #L16f480.  v5:= (`long`) v9 @kind i2l;
  #L16f482.  v5:= v5 + v0 @kind long;
  #L16f484.  v9:= lcmp(v5, v11);
  #L16f488.  if v9 <= 0 then goto L16f4f0;
  #L16f48c.  v9:= lcmp(v0, v13);
  #L16f490.  if v9 >= 0 then goto L16f4ee;
  #L16f494.  v9:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f498.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f49c.  v5:= (`long`) v5 @kind i2l;
  #L16f49e.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f4a2.  v7:= (`long`) v7 @kind i2l;
  #L16f4a4.  v7:= v7 + v13 @kind long;
  #L16f4a6.  v7:= v7 - v0 @kind long;
  #L16f4a8.  call temp:= `min`(v5, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f4ae.  v5:= temp @kind wide;
  #L16f4b0.  v6:= (`int`) v5 @kind l2i;
  #L16f4b2.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f4b6.  v7:= (`long`) v5 @kind i2l;
  #L16f4b8.  v7:= v7 + v11 @kind long;
  #L16f4ba.  v7:= v7 - v0 @kind long;
  #L16f4bc.  v11:= (`int`) v7 @kind l2i;
  #L16f4be.  if v11 >= v6 then goto L16f4d2;
  #L16f4c2.  v12:= v9[v11] @kind byte;
  #L16f4c6.  if v12 != v10 then goto L16f4cc;
  #L16f4ca.  goto L16f446;
  #L16f4cc.  v11:= v11 + 1;
  #L16f4d0.  goto L16f4be;
  #L16f4d2.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f4d6.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f4da.  v9:= v9 - v11 @kind int;
  #L16f4dc.  v11:= (`long`) v9 @kind i2l;
  #L16f4de.  v0:= v0 + v11 @kind long;
  #L16f4e0.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f4e4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f4ea.  v11:= v0 @kind wide;
  #L16f4ec.  goto L16f48c;
  #L16f4ee.  return v2 @kind wide;
  #L16f4f0.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f4f4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f4fa.  v0:= v5 @kind wide;
  #L16f4fc.  goto L16f476;
  #L16f4fe.  return v2 @kind wide;
  #L16f500.  v10:= new `java.lang.StringBuilder`;
  #L16f504.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f50a.  v0:= "size=" @kind object;
  #L16f50e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f514.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f51a.  v0:= temp @kind wide;
  #L16f51c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f522.  v9:= " fromIndex=" @kind object;
  #L16f526.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f52c.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f532.  v9:= " toIndex=" @kind object;
  #L16f536.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f53c.  call temp:= `append`(v10, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f542.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f548.  v9:= temp @kind object;
  #L16f54a.  v10:= new `java.lang.IllegalArgumentException`;
  #L16f54e.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f554.  v9:= temp @kind object;
  #L16f556.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f55c.  throw v10;
}
procedure `long` `commonIndexOf`(`okio.Buffer` v17 @kind object, `okio.ByteString` v18 @kind object, `long` v19 ) @signature `Lokio/internal/BufferKt;.commonIndexOf:(Lokio/Buffer;Lokio/ByteString;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L16f570.  v0:= v17 @kind object;
  #L16f574.  v1:= v19 @kind wide;
  #L16f578.  v3:= "$this$commonIndexOf" @kind object;
  #L16f57c.  call `checkNotNullParameter`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f582.  v3:= "bytes" @kind object;
  #L16f586.  v4:= v18 @kind object;
  #L16f58a.  call `checkNotNullParameter`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f590.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16f596.  v3:= temp;
  #L16f598.  v5:= 0I;
  #L16f59a.  v6:= 1I;
  #L16f59c.  if v3 <= 0 then goto L16f5a4;
  #L16f5a0.  v3:= 1I;
  #L16f5a2.  goto L16f5a6;
  #L16f5a4.  v3:= 0I;
  #L16f5a6.  if v3 == 0 then goto L16f7c0;
  #L16f5aa.  v7:= 0L;
  #L16f5ae.  v3:= lcmp(v1, v7);
  #L16f5b2.  if v3 < 0 then goto L16f5ba;
  #L16f5b6.  v3:= 1I;
  #L16f5b8.  goto L16f5bc;
  #L16f5ba.  v3:= 0I;
  #L16f5bc.  if v3 == 0 then goto L16f78a;
  #L16f5c0.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16f5c4.  if v3 == 0 then goto L16f784;
  #L16f5c8.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f5ce.  v11:= temp @kind wide;
  #L16f5d0.  v11:= v11 - v1 @kind long;
  #L16f5d2.  v13:= 1L;
  #L16f5d6.  v15:= lcmp(v11, v1);
  #L16f5da.  if v15 >= 0 then goto L16f6ac;
  #L16f5de.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f5e4.  v7:= temp @kind wide;
  #L16f5e6.  v11:= lcmp(v7, v1);
  #L16f5ea.  if v11 <= 0 then goto L16f608;
  #L16f5ee.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16f5f2.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f5f8.  v11:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f5fc.  v12:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f600.  v11:= v11 - v12 @kind int;
  #L16f602.  v11:= (`long`) v11 @kind i2l;
  #L16f604.  v7:= v7 - v11 @kind long;
  #L16f606.  goto L16f5e6;
  #L16f608.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L16f60e.  v11:= temp @kind object;
  #L16f610.  v5:= v11[v5] @kind byte;
  #L16f614.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16f61a.  v4:= temp;
  #L16f61c.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f622.  v15:= temp @kind wide;
  #L16f624.  v9:= (`long`) v4 @kind i2l;
  #L16f626.  v15:= v15 - v9 @kind long;
  #L16f628.  v15:= v15 + v13 @kind long;
  #L16f62a.  v0:= lcmp(v7, v15);
  #L16f62e.  if v0 >= 0 then goto L16f6a6;
  #L16f632.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f636.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f63a.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f63e.  v12:= (`long`) v10 @kind i2l;
  #L16f640.  v12:= v12 + v15 @kind long;
  #L16f642.  v12:= v12 - v7 @kind long;
  #L16f644.  v9:= (`long`) v9 @kind i2l;
  #L16f646.  call temp:= `min`(v9, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f64c.  v9:= temp @kind wide;
  #L16f64e.  v10:= (`int`) v9 @kind l2i;
  #L16f650.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f654.  v12:= (`long`) v9 @kind i2l;
  #L16f656.  v12:= v12 + v1 @kind long;
  #L16f658.  v12:= v12 - v7 @kind long;
  #L16f65a.  v1:= (`int`) v12 @kind l2i;
  #L16f65c.  if v1 >= v10 then goto L16f68a;
  #L16f660.  v2:= v0[v1] @kind byte;
  #L16f664.  if v2 != v5 then goto L16f684;
  #L16f668.  v2:= v1 + 1;
  #L16f66c.  call temp:= `rangeEquals`(v3, v2, v11, v6, v4) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L16f672.  v2:= temp;
  #L16f674.  if v2 == 0 then goto L16f684;
  #L16f678.  v0:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f67c.  v1:= v1 - v0 @kind int;
  #L16f67e.  v0:= (`long`) v1 @kind i2l;
  #L16f680.  v0:= v0 + v7 @kind long;
  #L16f682.  return v0 @kind wide;
  #L16f684.  v1:= v1 + 1;
  #L16f688.  goto L16f65c;
  #L16f68a.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f68e.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f692.  v0:= v0 - v1 @kind int;
  #L16f694.  v0:= (`long`) v0 @kind i2l;
  #L16f696.  v7:= v7 + v0 @kind long;
  #L16f698.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f69c.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f6a2.  v1:= v7 @kind wide;
  #L16f6a4.  goto L16f62a;
  #L16f6a6.  v0:= -1L;
  #L16f6aa.  return v0 @kind wide;
  #L16f6ac.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f6b0.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f6b4.  v9:= v9 - v10 @kind int;
  #L16f6b6.  v9:= (`long`) v9 @kind i2l;
  #L16f6b8.  v9:= v9 + v7 @kind long;
  #L16f6ba.  v11:= lcmp(v9, v1);
  #L16f6be.  if v11 <= 0 then goto L16f76e;
  #L16f6c2.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L16f6c8.  v9:= temp @kind object;
  #L16f6ca.  v5:= v9[v5] @kind byte;
  #L16f6ce.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16f6d4.  v4:= temp;
  #L16f6d6.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f6dc.  v10:= temp @kind wide;
  #L16f6de.  v15:= v7 @kind wide;
  #L16f6e0.  v6:= (`long`) v4 @kind i2l;
  #L16f6e2.  v10:= v10 - v6 @kind long;
  #L16f6e4.  v10:= v10 + v13 @kind long;
  #L16f6e6.  v7:= v15 @kind wide;
  #L16f6e8.  v0:= lcmp(v7, v10);
  #L16f6ec.  if v0 >= 0 then goto L16f768;
  #L16f6f0.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f6f4.  v6:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f6f8.  v13:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f6fc.  v13:= (`long`) v13 @kind i2l;
  #L16f6fe.  v13:= v13 + v10 @kind long;
  #L16f700.  v13:= v13 - v7 @kind long;
  #L16f702.  v17:= v10 @kind wide;
  #L16f706.  v10:= (`long`) v6 @kind i2l;
  #L16f708.  call temp:= `min`(v10, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f70e.  v10:= temp @kind wide;
  #L16f710.  v6:= (`int`) v10 @kind l2i;
  #L16f712.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f716.  v10:= (`long`) v10 @kind i2l;
  #L16f718.  v10:= v10 + v1 @kind long;
  #L16f71a.  v10:= v10 - v7 @kind long;
  #L16f71c.  v1:= (`int`) v10 @kind l2i;
  #L16f71e.  if v1 >= v6 then goto L16f746;
  #L16f722.  v2:= v0[v1] @kind byte;
  #L16f726.  if v2 != v5 then goto L16f73e;
  #L16f72a.  v2:= v1 + 1;
  #L16f72e.  v11:= 1I;
  #L16f730.  call temp:= `rangeEquals`(v3, v2, v9, v11, v4) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L16f736.  v2:= temp;
  #L16f738.  if v2 == 0 then goto L16f740;
  #L16f73c.  goto L16f678;
  #L16f73e.  v11:= 1I;
  #L16f740.  v1:= v1 + 1;
  #L16f744.  goto L16f71e;
  #L16f746.  v11:= 1I;
  #L16f748.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L16f74c.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L16f750.  v0:= v0 - v1 @kind int;
  #L16f752.  v0:= (`long`) v0 @kind i2l;
  #L16f754.  v7:= v7 + v0 @kind long;
  #L16f756.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f75a.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f760.  v10:= v17 @kind wide;
  #L16f764.  v1:= v7 @kind wide;
  #L16f766.  goto L16f6e8;
  #L16f768.  v6:= -1L;
  #L16f76c.  return v6 @kind wide;
  #L16f76e.  v6:= -1L;
  #L16f772.  v11:= 1I;
  #L16f774.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f778.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f77e.  v7:= v9 @kind wide;
  #L16f780.  v6:= 1I;
  #L16f782.  goto L16f6ac;
  #L16f784.  v6:= -1L;
  #L16f788.  return v6 @kind wide;
  #L16f78a.  v0:= new `java.lang.StringBuilder`;
  #L16f78e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f794.  v3:= "fromIndex < 0: " @kind object;
  #L16f798.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f79e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f7a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f7aa.  v0:= temp @kind object;
  #L16f7ac.  v1:= new `java.lang.IllegalArgumentException`;
  #L16f7b0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f7b6.  v0:= temp @kind object;
  #L16f7b8.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f7be.  throw v1;
  #L16f7c0.  v0:= new `java.lang.IllegalArgumentException`;
  #L16f7c4.  v1:= "bytes is empty" @kind object;
  #L16f7c8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f7ce.  v1:= temp @kind object;
  #L16f7d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f7d6.  throw v0;
}
procedure `long` `commonIndexOfElement`(`okio.Buffer` v11 @kind object, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonIndexOfElement:(Lokio/Buffer;Lokio/ByteString;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L16f7e8.  v0:= "$this$commonIndexOfElement" @kind object;
  #L16f7ec.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f7f2.  v0:= "targetBytes" @kind object;
  #L16f7f6.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f7fc.  v0:= 0L;
  #L16f800.  v2:= 0I;
  #L16f802.  v3:= 1I;
  #L16f804.  v4:= lcmp(v13, v0);
  #L16f808.  if v4 < 0 then goto L16f810;
  #L16f80c.  v4:= 1I;
  #L16f80e.  goto L16f812;
  #L16f810.  v4:= 0I;
  #L16f812.  if v4 == 0 then goto L16fa64;
  #L16f816.  v4:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16f81a.  v5:= -1L;
  #L16f81e.  if v4 == 0 then goto L16fa62;
  #L16f822.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f828.  v7:= temp @kind wide;
  #L16f82a.  v7:= v7 - v13 @kind long;
  #L16f82c.  v9:= 2I;
  #L16f82e.  v10:= lcmp(v7, v13);
  #L16f832.  if v10 >= 0 then goto L16f954;
  #L16f836.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f83c.  v0:= temp @kind wide;
  #L16f83e.  v7:= lcmp(v0, v13);
  #L16f842.  if v7 <= 0 then goto L16f860;
  #L16f846.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16f84a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f850.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f854.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f858.  v7:= v7 - v8 @kind int;
  #L16f85a.  v7:= (`long`) v7 @kind i2l;
  #L16f85c.  v0:= v0 - v7 @kind long;
  #L16f85e.  goto L16f83e;
  #L16f860.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16f866.  v7:= temp;
  #L16f868.  if v7 != v9 then goto L16f8e0;
  #L16f86c.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16f872.  v2:= temp;
  #L16f874.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16f87a.  v12:= temp;
  #L16f87c.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f882.  v7:= temp @kind wide;
  #L16f884.  v3:= lcmp(v0, v7);
  #L16f888.  if v3 >= 0 then goto L16f952;
  #L16f88c.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f890.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f894.  v7:= (`long`) v7 @kind i2l;
  #L16f896.  v7:= v7 + v13 @kind long;
  #L16f898.  v7:= v7 - v0 @kind long;
  #L16f89a.  v13:= (`int`) v7 @kind l2i;
  #L16f89c.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f8a0.  if v13 >= v14 then goto L16f8c4;
  #L16f8a4.  v7:= v3[v13] @kind byte;
  #L16f8a8.  if v7 == v2 then goto L16f8b8;
  #L16f8ac.  if v7 != v12 then goto L16f8b2;
  #L16f8b0.  goto L16f8b8;
  #L16f8b2.  v13:= v13 + 1;
  #L16f8b6.  goto L16f8a0;
  #L16f8b8.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f8bc.  v13:= v13 - v11 @kind int;
  #L16f8be.  v11:= (`long`) v13 @kind i2l;
  #L16f8c0.  v11:= v11 + v0 @kind long;
  #L16f8c2.  return v11 @kind wide;
  #L16f8c4.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f8c8.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f8cc.  v13:= v13 - v14 @kind int;
  #L16f8ce.  v13:= (`long`) v13 @kind i2l;
  #L16f8d0.  v0:= v0 + v13 @kind long;
  #L16f8d2.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f8d6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f8dc.  v13:= v0 @kind wide;
  #L16f8de.  goto L16f87c;
  #L16f8e0.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L16f8e6.  v12:= temp @kind object;
  #L16f8e8.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f8ee.  v7:= temp @kind wide;
  #L16f8f0.  v3:= lcmp(v0, v7);
  #L16f8f4.  if v3 >= 0 then goto L16f952;
  #L16f8f8.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f8fc.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f900.  v7:= (`long`) v7 @kind i2l;
  #L16f902.  v7:= v7 + v13 @kind long;
  #L16f904.  v7:= v7 - v0 @kind long;
  #L16f906.  v13:= (`int`) v7 @kind l2i;
  #L16f908.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f90c.  if v13 >= v14 then goto L16f936;
  #L16f910.  v7:= v3[v13] @kind byte;
  #L16f914.  v8:= length @variable v12;
  #L16f916.  v9:= 0I;
  #L16f918.  if v9 >= v8 then goto L16f930;
  #L16f91c.  v10:= v12[v9] @kind byte;
  #L16f920.  if v7 != v10 then goto L16f92a;
  #L16f924.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f928.  goto L16f8bc;
  #L16f92a.  v9:= v9 + 1;
  #L16f92e.  goto L16f918;
  #L16f930.  v13:= v13 + 1;
  #L16f934.  goto L16f90c;
  #L16f936.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f93a.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f93e.  v13:= v13 - v14 @kind int;
  #L16f940.  v13:= (`long`) v13 @kind i2l;
  #L16f942.  v0:= v0 + v13 @kind long;
  #L16f944.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f948.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f94e.  v13:= v0 @kind wide;
  #L16f950.  goto L16f8e8;
  #L16f952.  return v5 @kind wide;
  #L16f954.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f958.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f95c.  v7:= v7 - v8 @kind int;
  #L16f95e.  v7:= (`long`) v7 @kind i2l;
  #L16f960.  v7:= v7 + v0 @kind long;
  #L16f962.  v10:= lcmp(v7, v13);
  #L16f966.  if v10 <= 0 then goto L16fa52;
  #L16f96a.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16f970.  v7:= temp;
  #L16f972.  if v7 != v9 then goto L16f9e0;
  #L16f976.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16f97c.  v2:= temp;
  #L16f97e.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16f984.  v12:= temp;
  #L16f986.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f98c.  v7:= temp @kind wide;
  #L16f98e.  v3:= lcmp(v0, v7);
  #L16f992.  if v3 >= 0 then goto L16fa50;
  #L16f996.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f99a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f99e.  v7:= (`long`) v7 @kind i2l;
  #L16f9a0.  v7:= v7 + v13 @kind long;
  #L16f9a2.  v7:= v7 - v0 @kind long;
  #L16f9a4.  v13:= (`int`) v7 @kind l2i;
  #L16f9a6.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f9aa.  if v13 >= v14 then goto L16f9c4;
  #L16f9ae.  v7:= v3[v13] @kind byte;
  #L16f9b2.  if v7 == v2 then goto L16f8b8;
  #L16f9b6.  if v7 != v12 then goto L16f9be;
  #L16f9ba.  goto L16f8b8;
  #L16f9be.  v13:= v13 + 1;
  #L16f9c2.  goto L16f9aa;
  #L16f9c4.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L16f9c8.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16f9cc.  v13:= v13 - v14 @kind int;
  #L16f9ce.  v13:= (`long`) v13 @kind i2l;
  #L16f9d0.  v0:= v0 + v13 @kind long;
  #L16f9d2.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16f9d6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16f9dc.  v13:= v0 @kind wide;
  #L16f9de.  goto L16f986;
  #L16f9e0.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L16f9e6.  v12:= temp @kind object;
  #L16f9e8.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f9ee.  v7:= temp @kind wide;
  #L16f9f0.  v3:= lcmp(v0, v7);
  #L16f9f4.  if v3 >= 0 then goto L16fa50;
  #L16f9f8.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f9fc.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L16fa00.  v7:= (`long`) v7 @kind i2l;
  #L16fa02.  v7:= v7 + v13 @kind long;
  #L16fa04.  v7:= v7 - v0 @kind long;
  #L16fa06.  v13:= (`int`) v7 @kind l2i;
  #L16fa08.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L16fa0c.  if v13 >= v14 then goto L16fa34;
  #L16fa10.  v7:= v3[v13] @kind byte;
  #L16fa14.  v8:= length @variable v12;
  #L16fa16.  v9:= 0I;
  #L16fa18.  if v9 >= v8 then goto L16fa2e;
  #L16fa1c.  v10:= v12[v9] @kind byte;
  #L16fa20.  if v7 != v10 then goto L16fa28;
  #L16fa24.  goto L16f924;
  #L16fa28.  v9:= v9 + 1;
  #L16fa2c.  goto L16fa18;
  #L16fa2e.  v13:= v13 + 1;
  #L16fa32.  goto L16fa0c;
  #L16fa34.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L16fa38.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L16fa3c.  v13:= v13 - v14 @kind int;
  #L16fa3e.  v13:= (`long`) v13 @kind i2l;
  #L16fa40.  v0:= v0 + v13 @kind long;
  #L16fa42.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16fa46.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16fa4c.  v13:= v0 @kind wide;
  #L16fa4e.  goto L16f9e8;
  #L16fa50.  return v5 @kind wide;
  #L16fa52.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16fa56.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16fa5c.  v0:= v7 @kind wide;
  #L16fa5e.  goto L16f954;
  #L16fa62.  return v5 @kind wide;
  #L16fa64.  v11:= new `java.lang.StringBuilder`;
  #L16fa68.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fa6e.  v12:= "fromIndex < 0: " @kind object;
  #L16fa72.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fa78.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fa7e.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fa84.  v11:= temp @kind object;
  #L16fa86.  v12:= new `java.lang.IllegalArgumentException`;
  #L16fa8a.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fa90.  v11:= temp @kind object;
  #L16fa92.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fa98.  throw v12;
}
procedure `boolean` `commonRangeEquals`(`okio.Buffer` v6 @kind object, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/internal/BufferKt;.commonRangeEquals:(Lokio/Buffer;JLokio/ByteString;II)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16e5c4.  v0:= "$this$commonRangeEquals" @kind object;
  #L16e5c8.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e5ce.  v0:= "bytes" @kind object;
  #L16e5d2.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e5d8.  v0:= 0I;
  #L16e5da.  v1:= 0L;
  #L16e5de.  v3:= lcmp(v7, v1);
  #L16e5e2.  if v3 < 0 then goto L16e640;
  #L16e5e6.  if v10 < 0 then goto L16e640;
  #L16e5ea.  if v11 < 0 then goto L16e640;
  #L16e5ee.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e5f4.  v1:= temp @kind wide;
  #L16e5f6.  v1:= v1 - v7 @kind long;
  #L16e5f8.  v3:= (`long`) v11 @kind i2l;
  #L16e5fa.  v5:= lcmp(v1, v3);
  #L16e5fe.  if v5 < 0 then goto L16e640;
  #L16e602.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16e608.  v1:= temp;
  #L16e60a.  v1:= v1 - v10 @kind int;
  #L16e60c.  if v1 >= v11 then goto L16e612;
  #L16e610.  goto L16e640;
  #L16e612.  v1:= 0I;
  #L16e614.  if v1 >= v11 then goto L16e63c;
  #L16e618.  v2:= (`long`) v1 @kind i2l;
  #L16e61a.  v2:= v2 + v7 @kind long;
  #L16e61c.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16e622.  v2:= temp;
  #L16e624.  v3:= v10 + v1 @kind int;
  #L16e628.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L16e62e.  v3:= temp;
  #L16e630.  if v2 == v3 then goto L16e636;
  #L16e634.  return v0;
  #L16e636.  v1:= v1 + 1;
  #L16e63a.  goto L16e614;
  #L16e63c.  v6:= 1I;
  #L16e63e.  return v6;
  #L16e640.  return v0;
}
procedure `int` `commonRead`(`okio.Buffer` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;[B)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L16e96c.  v0:= "$this$commonRead" @kind object;
  #L16e970.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e976.  v0:= "sink" @kind object;
  #L16e97a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e980.  v0:= length @variable v3;
  #L16e982.  v1:= 0I;
  #L16e984.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L16e98a.  v2:= temp;
  #L16e98c.  return v2;
}
procedure `int` `commonRead`(`okio.Buffer` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;[BII)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16e9a0.  v0:= "$this$commonRead" @kind object;
  #L16e9a4.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e9aa.  v0:= "sink" @kind object;
  #L16e9ae.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e9b4.  v0:= length @variable v8;
  #L16e9b6.  v1:= (`long`) v0 @kind i2l;
  #L16e9b8.  v3:= (`long`) v9 @kind i2l;
  #L16e9ba.  v5:= (`long`) v10 @kind i2l;
  #L16e9bc.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L16e9c2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e9c6.  if v0 == 0 then goto L16ea2a;
  #L16e9ca.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L16e9ce.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e9d2.  v1:= v1 - v2 @kind int;
  #L16e9d4.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L16e9da.  v10:= temp;
  #L16e9dc.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e9e0.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e9e4.  v3:= v2 + v10 @kind int;
  #L16e9e8.  call temp:= `copyInto`(v1, v8, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L16e9ee.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e9f2.  v8:= v8 + v10 @kind int;
  #L16e9f4.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L16e9f8.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e9fe.  v8:= temp @kind wide;
  #L16ea00.  v1:= (`long`) v10 @kind i2l;
  #L16ea02.  v8:= v8 - v1 @kind long;
  #L16ea04.  call `setSize$okio`(v7, v8) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16ea0a.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ea0e.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ea12.  if v8 != v9 then goto L16ea28;
  #L16ea16.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16ea1c.  v8:= temp @kind object;
  #L16ea1e.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L16ea22.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16ea28.  return v10;
  #L16ea2a.  v7:= -1I;
  #L16ea2c.  return v7;
}
procedure `long` `commonRead`(`okio.Buffer` v5 @kind object, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;Lokio/Buffer;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16faac.  v0:= "$this$commonRead" @kind object;
  #L16fab0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fab6.  v0:= "sink" @kind object;
  #L16faba.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fac0.  v0:= 0L;
  #L16fac4.  v2:= lcmp(v7, v0);
  #L16fac8.  if v2 < 0 then goto L16fad0;
  #L16facc.  v2:= 1I;
  #L16face.  goto L16fad2;
  #L16fad0.  v2:= 0I;
  #L16fad2.  if v2 == 0 then goto L16fb0c;
  #L16fad6.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fadc.  v2:= temp @kind wide;
  #L16fade.  v4:= lcmp(v2, v0);
  #L16fae2.  if v4 != 0 then goto L16faec;
  #L16fae6.  v5:= -1L;
  #L16faea.  return v5 @kind wide;
  #L16faec.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16faf2.  v0:= temp @kind wide;
  #L16faf4.  v2:= lcmp(v7, v0);
  #L16faf8.  if v2 <= 0 then goto L16fb04;
  #L16fafc.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fb02.  v7:= temp @kind wide;
  #L16fb04.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L16fb0a.  return v7 @kind wide;
  #L16fb0c.  v5:= new `java.lang.StringBuilder`;
  #L16fb10.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fb16.  v6:= "byteCount < 0: " @kind object;
  #L16fb1a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fb20.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fb26.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fb2c.  v5:= temp @kind object;
  #L16fb2e.  v6:= new `java.lang.IllegalArgumentException`;
  #L16fb32.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fb38.  v5:= temp @kind object;
  #L16fb3a.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fb40.  throw v6;
}
procedure `long` `commonReadAll`(`okio.Buffer` v5 @kind object, `okio.Sink` v6 @kind object) @signature `Lokio/internal/BufferKt;.commonReadAll:(Lokio/Buffer;Lokio/Sink;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16fb54.  v0:= "$this$commonReadAll" @kind object;
  #L16fb58.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fb5e.  v0:= "sink" @kind object;
  #L16fb62.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fb68.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fb6e.  v0:= temp @kind wide;
  #L16fb70.  v2:= 0L;
  #L16fb74.  v4:= lcmp(v0, v2);
  #L16fb78.  if v4 <= 0 then goto L16fb82;
  #L16fb7c.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L16fb82.  return v0 @kind wide;
}
procedure `byte` `commonReadByte`(`okio.Buffer` v9 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByte:(Lokio/Buffer;)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L16e7a0.  v0:= "$this$commonReadByte" @kind object;
  #L16e7a4.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e7aa.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e7b0.  v0:= temp @kind wide;
  #L16e7b2.  v2:= 0L;
  #L16e7b6.  v4:= lcmp(v0, v2);
  #L16e7ba.  if v4 == 0 then goto L16e80e;
  #L16e7be.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16e7c2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e7c8.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16e7cc.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L16e7d0.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e7d4.  v4:= v1 + 1;
  #L16e7d8.  v1:= v3[v1] @kind byte;
  #L16e7dc.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e7e2.  v5:= temp @kind wide;
  #L16e7e4.  v7:= 1L;
  #L16e7e8.  v5:= v5 - v7 @kind long;
  #L16e7ea.  call `setSize$okio`(v9, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16e7f0.  if v4 != v2 then goto L16e808;
  #L16e7f4.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16e7fa.  v2:= temp @kind object;
  #L16e7fc.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L16e800.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16e806.  goto L16e80c;
  #L16e808.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L16e80c.  return v1;
  #L16e80e.  v9:= new `java.io.EOFException`;
  #L16e812.  call `<init>`(v9) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16e818.  throw v9;
}
procedure `byte`[] `commonReadByteArray`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByteArray:(Lokio/Buffer;)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L16e82c.  v0:= "$this$commonReadByteArray" @kind object;
  #L16e830.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e836.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e83c.  v0:= temp @kind wide;
  #L16e83e.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L16e844.  v2:= temp @kind object;
  #L16e846.  return v2 @kind object;
}
procedure `byte`[] `commonReadByteArray`(`okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokio/internal/BufferKt;.commonReadByteArray:(Lokio/Buffer;J)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16e858.  v0:= "$this$commonReadByteArray" @kind object;
  #L16e85c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e862.  v0:= 0L;
  #L16e866.  v2:= lcmp(v4, v0);
  #L16e86a.  if v2 < 0 then goto L16e882;
  #L16e86e.  v0:= 2147483647I;
  #L16e874.  v0:= (`long`) v0 @kind i2l;
  #L16e876.  v2:= lcmp(v4, v0);
  #L16e87a.  if v2 > 0 then goto L16e882;
  #L16e87e.  v0:= 1I;
  #L16e880.  goto L16e884;
  #L16e882.  v0:= 0I;
  #L16e884.  if v0 == 0 then goto L16e8b2;
  #L16e888.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16e88e.  v0:= temp @kind wide;
  #L16e890.  v2:= lcmp(v0, v4);
  #L16e894.  if v2 < 0 then goto L16e8a6;
  #L16e898.  v5:= (`int`) v4 @kind l2i;
  #L16e89a.  v4:= new `byte`[v5];
  #L16e89e.  call `readFully`(v3, v4) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L16e8a4.  return v4 @kind object;
  #L16e8a6.  v3:= new `java.io.EOFException`;
  #L16e8aa.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16e8b0.  throw v3;
  #L16e8b2.  v3:= new `java.lang.StringBuilder`;
  #L16e8b6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16e8bc.  v0:= "byteCount: " @kind object;
  #L16e8c0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e8c6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e8cc.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16e8d2.  v3:= temp @kind object;
  #L16e8d4.  v4:= new `java.lang.IllegalArgumentException`;
  #L16e8d8.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16e8de.  v3:= temp @kind object;
  #L16e8e0.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16e8e6.  throw v4;
}
procedure `okio.ByteString` `commonReadByteString`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByteString:(Lokio/Buffer;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L170e48.  v0:= "$this$commonReadByteString" @kind object;
  #L170e4c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170e52.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170e58.  v0:= temp @kind wide;
  #L170e5a.  call temp:= `readByteString`(v2, v0) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @kind virtual;
  #L170e60.  v2:= temp @kind object;
  #L170e62.  return v2 @kind object;
}
procedure `okio.ByteString` `commonReadByteString`(`okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokio/internal/BufferKt;.commonReadByteString:(Lokio/Buffer;J)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L170e74.  v0:= "$this$commonReadByteString" @kind object;
  #L170e78.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170e7e.  v0:= 0L;
  #L170e82.  v2:= lcmp(v4, v0);
  #L170e86.  if v2 < 0 then goto L170e9e;
  #L170e8a.  v0:= 2147483647I;
  #L170e90.  v0:= (`long`) v0 @kind i2l;
  #L170e92.  v2:= lcmp(v4, v0);
  #L170e96.  if v2 > 0 then goto L170e9e;
  #L170e9a.  v0:= 1I;
  #L170e9c.  goto L170ea0;
  #L170e9e.  v0:= 0I;
  #L170ea0.  if v0 == 0 then goto L170ef4;
  #L170ea4.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170eaa.  v0:= temp @kind wide;
  #L170eac.  v2:= lcmp(v0, v4);
  #L170eb0.  if v2 < 0 then goto L170ee8;
  #L170eb4.  v0:= 4096I;
  #L170eb8.  v0:= (`long`) v0 @kind i2l;
  #L170eba.  v2:= lcmp(v4, v0);
  #L170ebe.  if v2 < 0 then goto L170ed4;
  #L170ec2.  v0:= (`int`) v4 @kind l2i;
  #L170ec4.  call temp:= `snapshot`(v3, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L170eca.  v0:= temp @kind object;
  #L170ecc.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L170ed2.  return v0 @kind object;
  #L170ed4.  v0:= new `okio.ByteString`;
  #L170ed8.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L170ede.  v3:= temp @kind object;
  #L170ee0.  call `<init>`(v0, v3) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L170ee6.  return v0 @kind object;
  #L170ee8.  v3:= new `java.io.EOFException`;
  #L170eec.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L170ef2.  throw v3;
  #L170ef4.  v3:= new `java.lang.StringBuilder`;
  #L170ef8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170efe.  v0:= "byteCount: " @kind object;
  #L170f02.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170f08.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L170f0e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170f14.  v3:= temp @kind object;
  #L170f16.  v4:= new `java.lang.IllegalArgumentException`;
  #L170f1a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170f20.  v3:= temp @kind object;
  #L170f22.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170f28.  throw v4;
}
procedure `long` `commonReadDecimalLong`(`okio.Buffer` v17 @kind object) @signature `Lokio/internal/BufferKt;.commonReadDecimalLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L16fb94.  v0:= v17 @kind object;
  #L16fb98.  v1:= "$this$commonReadDecimalLong" @kind object;
  #L16fb9c.  call `checkNotNullParameter`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fba2.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fba8.  v1:= temp @kind wide;
  #L16fbaa.  v3:= 0L;
  #L16fbae.  v5:= lcmp(v1, v3);
  #L16fbb2.  if v5 == 0 then goto L16fd3e;
  #L16fbb6.  v1:= -7L;
  #L16fbba.  v5:= 0I;
  #L16fbbc.  v6:= 0I;
  #L16fbbe.  v7:= 0I;
  #L16fbc0.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16fbc4.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16fbca.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16fbce.  v10:= v8.`okio.Segment.pos` @type ^`int`;
  #L16fbd2.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L16fbd6.  v12:= 1I;
  #L16fbd8.  if v10 >= v11 then goto L16fcf0;
  #L16fbdc.  v13:= v9[v10] @kind byte;
  #L16fbe0.  v14:= 48I;
  #L16fbe4.  v14:= (`byte`) v14 @kind i2b;
  #L16fbe6.  if v13 < v14 then goto L16fc86;
  #L16fbea.  v15:= 57I;
  #L16fbee.  v15:= (`byte`) v15 @kind i2b;
  #L16fbf0.  if v13 > v15 then goto L16fc86;
  #L16fbf4.  v14:= v14 - v13 @kind int;
  #L16fbf6.  v15:= -922337203685477580L;
  #L16fc00.  v12:= lcmp(v3, v15);
  #L16fc04.  if v12 < 0 then goto L16fc2c;
  #L16fc08.  v15:= v7;
  #L16fc0a.  v16:= v8 @kind object;
  #L16fc0e.  if v12 != 0 then goto L16fc1e;
  #L16fc12.  v7:= (`long`) v14 @kind i2l;
  #L16fc14.  v12:= lcmp(v7, v1);
  #L16fc18.  if v12 >= 0 then goto L16fc1e;
  #L16fc1c.  goto L16fc2c;
  #L16fc1e.  v7:= 10L;
  #L16fc22.  v3:= v3 * v7 @kind long;
  #L16fc26.  v7:= (`long`) v14 @kind i2l;
  #L16fc28.  v3:= v3 + v7 @kind long;
  #L16fc2a.  goto L16fca2;
  #L16fc2c.  v0:= new `okio.Buffer`;
  #L16fc30.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L16fc36.  call temp:= `writeDecimalLong`(v0, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L16fc3c.  v0:= temp @kind object;
  #L16fc3e.  call temp:= `writeByte`(v0, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L16fc44.  v0:= temp @kind object;
  #L16fc46.  if v6 != 0 then goto L16fc50;
  #L16fc4a.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16fc50.  v1:= new `java.lang.NumberFormatException`;
  #L16fc54.  v2:= new `java.lang.StringBuilder`;
  #L16fc58.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fc5e.  v3:= "Number too large: " @kind object;
  #L16fc62.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fc68.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L16fc6e.  v0:= temp @kind object;
  #L16fc70.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fc76.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fc7c.  v0:= temp @kind object;
  #L16fc7e.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fc84.  throw v1;
  #L16fc86.  v15:= v7;
  #L16fc88.  v16:= v8 @kind object;
  #L16fc8c.  v7:= 45I;
  #L16fc90.  v7:= (`byte`) v7 @kind i2b;
  #L16fc92.  if v13 != v7 then goto L16fcb2;
  #L16fc96.  if v5 != 0 then goto L16fcb2;
  #L16fc9a.  v6:= 1L;
  #L16fc9e.  v1:= v1 - v6 @kind long;
  #L16fca0.  v6:= 1I;
  #L16fca2.  v10:= v10 + 1;
  #L16fca6.  v5:= v5 + 1;
  #L16fcaa.  v7:= v15;
  #L16fcac.  v8:= v16 @kind object;
  #L16fcb0.  goto L16fbd6;
  #L16fcb2.  if v5 == 0 then goto L16fcba;
  #L16fcb6.  v7:= 1I;
  #L16fcb8.  goto L16fcf6;
  #L16fcba.  v0:= new `java.lang.NumberFormatException`;
  #L16fcbe.  v1:= new `java.lang.StringBuilder`;
  #L16fcc2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fcc8.  v2:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L16fccc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fcd2.  call temp:= `toHexString`(v13) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L16fcd8.  v2:= temp @kind object;
  #L16fcda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fce0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fce6.  v1:= temp @kind object;
  #L16fce8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fcee.  throw v0;
  #L16fcf0.  v15:= v7;
  #L16fcf2.  v16:= v8 @kind object;
  #L16fcf6.  if v10 != v11 then goto L16fd0e;
  #L16fcfa.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16fd00.  v8:= temp @kind object;
  #L16fd02.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L16fd06.  call `recycle`(v16) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16fd0c.  goto L16fd16;
  #L16fd0e.  v8:= v16 @kind object;
  #L16fd12.  v8.`okio.Segment.pos` @type ^`int` := v10;
  #L16fd16.  if v7 != 0 then goto L16fd22;
  #L16fd1a.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16fd1e.  if v8 != 0 then goto L16fbc0;
  #L16fd22.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fd28.  v1:= temp @kind wide;
  #L16fd2a.  v7:= (`long`) v5 @kind i2l;
  #L16fd2c.  v1:= v1 - v7 @kind long;
  #L16fd2e.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16fd34.  if v6 == 0 then goto L16fd3a;
  #L16fd38.  goto L16fd3c;
  #L16fd3a.  v3:= -v3 @kind long;
  #L16fd3c.  return v3 @kind wide;
  #L16fd3e.  v0:= new `java.io.EOFException`;
  #L16fd42.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16fd48.  throw v0;
}
procedure `void` `commonReadFully`(`okio.Buffer` v3 @kind object, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/internal/BufferKt;.commonReadFully:(Lokio/Buffer;Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1712ac.  v0:= "$this$commonReadFully" @kind object;
  #L1712b0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1712b6.  v0:= "sink" @kind object;
  #L1712ba.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1712c0.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1712c6.  v0:= temp @kind wide;
  #L1712c8.  v2:= lcmp(v0, v5);
  #L1712cc.  if v2 < 0 then goto L1712d8;
  #L1712d0.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1712d6.  return @kind void;
  #L1712d8.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1712de.  v5:= temp @kind wide;
  #L1712e0.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1712e6.  v3:= new `java.io.EOFException`;
  #L1712ea.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1712f0.  throw v3;
}
procedure `void` `commonReadFully`(`okio.Buffer` v3 @kind object, `byte`[] v4 @kind object) @signature `Lokio/internal/BufferKt;.commonReadFully:(Lokio/Buffer;[B)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L17125c.  v0:= "$this$commonReadFully" @kind object;
  #L171260.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L171266.  v0:= "sink" @kind object;
  #L17126a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L171270.  v0:= 0I;
  #L171272.  v1:= length @variable v4;
  #L171274.  if v0 >= v1 then goto L17129a;
  #L171278.  v1:= length @variable v4;
  #L17127a.  v1:= v1 - v0 @kind int;
  #L17127c.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L171282.  v1:= temp;
  #L171284.  v2:= -1I;
  #L171286.  if v1 == v2 then goto L17128e;
  #L17128a.  v0:= v0 + v1 @kind int;
  #L17128c.  goto L171272;
  #L17128e.  v3:= new `java.io.EOFException`;
  #L171292.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L171298.  throw v3;
  #L17129a.  return @kind void;
}
procedure `long` `commonReadHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind object) @signature `Lokio/internal/BufferKt;.commonReadHexadecimalUnsignedLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L16fd5c.  v0:= "$this$commonReadHexadecimalUnsignedLong" @kind object;
  #L16fd60.  call `checkNotNullParameter`(v15, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fd66.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fd6c.  v0:= temp @kind wide;
  #L16fd6e.  v2:= 0L;
  #L16fd72.  v4:= lcmp(v0, v2);
  #L16fd76.  if v4 == 0 then goto L16fed6;
  #L16fd7a.  v0:= 0I;
  #L16fd7c.  v4:= v2 @kind wide;
  #L16fd7e.  v1:= 0I;
  #L16fd80.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16fd84.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16fd8a.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16fd8e.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L16fd92.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L16fd96.  if v8 >= v9 then goto L16fe9a;
  #L16fd9a.  v10:= v7[v8] @kind byte;
  #L16fd9e.  v11:= 48I;
  #L16fda2.  v11:= (`byte`) v11 @kind i2b;
  #L16fda4.  if v10 < v11 then goto L16fdb8;
  #L16fda8.  v12:= 57I;
  #L16fdac.  v12:= (`byte`) v12 @kind i2b;
  #L16fdae.  if v10 > v12 then goto L16fdb8;
  #L16fdb2.  v11:= v10 - v11 @kind int;
  #L16fdb6.  goto L16fdec;
  #L16fdb8.  v11:= 97I;
  #L16fdbc.  v11:= (`byte`) v11 @kind i2b;
  #L16fdbe.  if v10 < v11 then goto L16fdd6;
  #L16fdc2.  v12:= 102I;
  #L16fdc6.  v12:= (`byte`) v12 @kind i2b;
  #L16fdc8.  if v10 > v12 then goto L16fdd6;
  #L16fdcc.  v11:= v10 - v11 @kind int;
  #L16fdd0.  v11:= v11 + 10;
  #L16fdd4.  goto L16fdec;
  #L16fdd6.  v11:= 65I;
  #L16fdda.  v11:= (`byte`) v11 @kind i2b;
  #L16fddc.  if v10 < v11 then goto L16fe5c;
  #L16fde0.  v12:= 70I;
  #L16fde4.  v12:= (`byte`) v12 @kind i2b;
  #L16fde6.  if v10 > v12 then goto L16fe5c;
  #L16fdea.  goto L16fdcc;
  #L16fdec.  v12:= -3.105036184601418E231D;
  #L16fdf0.  v12:= v12 ^& v4 @kind long;
  #L16fdf2.  v14:= lcmp(v12, v2);
  #L16fdf6.  if v14 != 0 then goto L16fe0c;
  #L16fdfa.  v10:= 4I;
  #L16fdfc.  v4:= v4 ^< v10 @kind long;
  #L16fdfe.  v10:= (`long`) v11 @kind i2l;
  #L16fe00.  v4:= v4 ^| v10 @kind long;
  #L16fe02.  v8:= v8 + 1;
  #L16fe06.  v0:= v0 + 1;
  #L16fe0a.  goto L16fd96;
  #L16fe0c.  v15:= new `okio.Buffer`;
  #L16fe10.  call `<init>`(v15) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L16fe16.  call temp:= `writeHexadecimalUnsignedLong`(v15, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L16fe1c.  v15:= temp @kind object;
  #L16fe1e.  call temp:= `writeByte`(v15, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L16fe24.  v15:= temp @kind object;
  #L16fe26.  v0:= new `java.lang.NumberFormatException`;
  #L16fe2a.  v1:= new `java.lang.StringBuilder`;
  #L16fe2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fe34.  v2:= "Number too large: " @kind object;
  #L16fe38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fe3e.  call temp:= `readUtf8`(v15) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L16fe44.  v15:= temp @kind object;
  #L16fe46.  call temp:= `append`(v1, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fe4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fe52.  v15:= temp @kind object;
  #L16fe54.  call `<init>`(v0, v15) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fe5a.  throw v0;
  #L16fe5c.  if v0 == 0 then goto L16fe64;
  #L16fe60.  v1:= 1I;
  #L16fe62.  goto L16fe9a;
  #L16fe64.  v15:= new `java.lang.NumberFormatException`;
  #L16fe68.  v0:= new `java.lang.StringBuilder`;
  #L16fe6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16fe72.  v1:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L16fe76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fe7c.  call temp:= `toHexString`(v10) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L16fe82.  v1:= temp @kind object;
  #L16fe84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16fe8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16fe90.  v0:= temp @kind object;
  #L16fe92.  call `<init>`(v15, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16fe98.  throw v15;
  #L16fe9a.  if v8 != v9 then goto L16feb2;
  #L16fe9e.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16fea4.  v7:= temp @kind object;
  #L16fea6.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L16feaa.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16feb0.  goto L16feb6;
  #L16feb2.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L16feb6.  if v1 != 0 then goto L16fec2;
  #L16feba.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16febe.  if v6 != 0 then goto L16fd80;
  #L16fec2.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16fec8.  v1:= temp @kind wide;
  #L16feca.  v6:= (`long`) v0 @kind i2l;
  #L16fecc.  v1:= v1 - v6 @kind long;
  #L16fece.  call `setSize$okio`(v15, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16fed4.  return v4 @kind wide;
  #L16fed6.  v15:= new `java.io.EOFException`;
  #L16feda.  call `<init>`(v15) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16fee0.  throw v15;
}
procedure `int` `commonReadInt`(`okio.Buffer` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonReadInt:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16ea40.  v0:= "$this$commonReadInt" @kind object;
  #L16ea44.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16ea4a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16ea50.  v0:= temp @kind wide;
  #L16ea52.  v2:= 4L;
  #L16ea56.  v4:= lcmp(v0, v2);
  #L16ea5a.  if v4 < 0 then goto L16eb36;
  #L16ea5e.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16ea62.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ea68.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ea6c.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ea70.  v5:= v4 - v1 @kind int;
  #L16ea74.  v5:= (`long`) v5 @kind i2l;
  #L16ea76.  v7:= lcmp(v5, v2);
  #L16ea7a.  if v7 >= 0 then goto L16eac2;
  #L16ea7e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16ea84.  v0:= temp;
  #L16ea86.  v0:= v0 ^& 255;
  #L16ea8a.  v0:= v0 ^< 24;
  #L16ea8e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16ea94.  v1:= temp;
  #L16ea96.  v1:= v1 ^& 255;
  #L16ea9a.  v1:= v1 ^< 16;
  #L16ea9e.  v0:= v0 ^| v1 @kind int;
  #L16eaa0.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16eaa6.  v1:= temp;
  #L16eaa8.  v1:= v1 ^& 255;
  #L16eaac.  v1:= v1 ^< 8;
  #L16eab0.  v0:= v0 ^| v1 @kind int;
  #L16eab2.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L16eab8.  v8:= temp;
  #L16eaba.  v8:= v8 ^& 255;
  #L16eabe.  v8:= v8 ^| v0 @kind int;
  #L16eac0.  return v8;
  #L16eac2.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16eac6.  v6:= v1 + 1;
  #L16eaca.  v1:= v5[v1] @kind byte;
  #L16eace.  v1:= v1 ^& 255;
  #L16ead2.  v1:= v1 ^< 24;
  #L16ead6.  v7:= v6 + 1;
  #L16eada.  v6:= v5[v6] @kind byte;
  #L16eade.  v6:= v6 ^& 255;
  #L16eae2.  v6:= v6 ^< 16;
  #L16eae6.  v1:= v1 ^| v6 @kind int;
  #L16eae8.  v6:= v7 + 1;
  #L16eaec.  v7:= v5[v7] @kind byte;
  #L16eaf0.  v7:= v7 ^& 255;
  #L16eaf4.  v7:= v7 ^< 8;
  #L16eaf8.  v1:= v1 ^| v7 @kind int;
  #L16eafa.  v7:= v6 + 1;
  #L16eafe.  v5:= v5[v6] @kind byte;
  #L16eb02.  v5:= v5 ^& 255;
  #L16eb06.  v1:= v1 ^| v5 @kind int;
  #L16eb08.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16eb0e.  v5:= temp @kind wide;
  #L16eb10.  v5:= v5 - v2 @kind long;
  #L16eb12.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16eb18.  if v7 != v4 then goto L16eb30;
  #L16eb1c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16eb22.  v2:= temp @kind object;
  #L16eb24.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L16eb28.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16eb2e.  goto L16eb34;
  #L16eb30.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L16eb34.  return v1;
  #L16eb36.  v8:= new `java.io.EOFException`;
  #L16eb3a.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16eb40.  throw v8;
}
procedure `long` `commonReadLong`(`okio.Buffer` v14 @kind object) @signature `Lokio/internal/BufferKt;.commonReadLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L16fef4.  v0:= "$this$commonReadLong" @kind object;
  #L16fef8.  call `checkNotNullParameter`(v14, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16fefe.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16ff04.  v0:= temp @kind wide;
  #L16ff06.  v2:= 8L;
  #L16ff0a.  v4:= lcmp(v0, v2);
  #L16ff0e.  if v4 < 0 then goto L17002c;
  #L16ff12.  v0:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16ff16.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ff1c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ff20.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ff24.  v5:= v4 - v1 @kind int;
  #L16ff28.  v5:= (`long`) v5 @kind i2l;
  #L16ff2a.  v7:= 32I;
  #L16ff2e.  v8:= lcmp(v5, v2);
  #L16ff32.  if v8 >= 0 then goto L16ff5e;
  #L16ff36.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L16ff3c.  v0:= temp;
  #L16ff3e.  v0:= (`long`) v0 @kind i2l;
  #L16ff40.  v2:= 4294967295L;
  #L16ff4a.  v0:= v0 ^& v2 @kind long;
  #L16ff4c.  v0:= v0 ^< v7 @kind long;
  #L16ff4e.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L16ff54.  v14:= temp;
  #L16ff56.  v4:= (`long`) v14 @kind i2l;
  #L16ff58.  v2:= v2 ^& v4 @kind long;
  #L16ff5a.  v0:= v0 ^| v2 @kind long;
  #L16ff5c.  return v0 @kind wide;
  #L16ff5e.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16ff62.  v6:= v1 + 1;
  #L16ff66.  v1:= v5[v1] @kind byte;
  #L16ff6a.  v8:= (`long`) v1 @kind i2l;
  #L16ff6c.  v10:= 255L;
  #L16ff70.  v8:= v8 ^& v10 @kind long;
  #L16ff72.  v1:= 56I;
  #L16ff76.  v8:= v8 ^< v1 @kind long;
  #L16ff78.  v1:= v6 + 1;
  #L16ff7c.  v6:= v5[v6] @kind byte;
  #L16ff80.  v12:= (`long`) v6 @kind i2l;
  #L16ff82.  v12:= v12 ^& v10 @kind long;
  #L16ff84.  v6:= 48I;
  #L16ff88.  v12:= v12 ^< v6 @kind long;
  #L16ff8a.  v8:= v8 ^| v12 @kind long;
  #L16ff8c.  v6:= v1 + 1;
  #L16ff90.  v1:= v5[v1] @kind byte;
  #L16ff94.  v12:= (`long`) v1 @kind i2l;
  #L16ff96.  v12:= v12 ^& v10 @kind long;
  #L16ff98.  v1:= 40I;
  #L16ff9c.  v12:= v12 ^< v1 @kind long;
  #L16ff9e.  v8:= v8 ^| v12 @kind long;
  #L16ffa0.  v1:= v6 + 1;
  #L16ffa4.  v6:= v5[v6] @kind byte;
  #L16ffa8.  v12:= (`long`) v6 @kind i2l;
  #L16ffaa.  v12:= v12 ^& v10 @kind long;
  #L16ffac.  v6:= v12 ^< v7 @kind long;
  #L16ffb0.  v6:= v6 ^| v8 @kind long;
  #L16ffb2.  v8:= v1 + 1;
  #L16ffb6.  v1:= v5[v1] @kind byte;
  #L16ffba.  v12:= (`long`) v1 @kind i2l;
  #L16ffbc.  v12:= v12 ^& v10 @kind long;
  #L16ffbe.  v1:= 24I;
  #L16ffc2.  v12:= v12 ^< v1 @kind long;
  #L16ffc4.  v6:= v6 ^| v12 @kind long;
  #L16ffc6.  v1:= v8 + 1;
  #L16ffca.  v8:= v5[v8] @kind byte;
  #L16ffce.  v8:= (`long`) v8 @kind i2l;
  #L16ffd0.  v8:= v8 ^& v10 @kind long;
  #L16ffd2.  v12:= 16I;
  #L16ffd6.  v8:= v8 ^< v12 @kind long;
  #L16ffd8.  v6:= v6 ^| v8 @kind long;
  #L16ffda.  v8:= v1 + 1;
  #L16ffde.  v1:= v5[v1] @kind byte;
  #L16ffe2.  v12:= (`long`) v1 @kind i2l;
  #L16ffe4.  v12:= v12 ^& v10 @kind long;
  #L16ffe6.  v1:= 8I;
  #L16ffea.  v12:= v12 ^< v1 @kind long;
  #L16ffec.  v6:= v6 ^| v12 @kind long;
  #L16ffee.  v1:= v8 + 1;
  #L16fff2.  v5:= v5[v8] @kind byte;
  #L16fff6.  v8:= (`long`) v5 @kind i2l;
  #L16fff8.  v8:= v8 ^& v10 @kind long;
  #L16fffa.  v5:= v6 ^| v8 @kind long;
  #L16fffe.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170004.  v7:= temp @kind wide;
  #L170006.  v7:= v7 - v2 @kind long;
  #L170008.  call `setSize$okio`(v14, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17000e.  if v1 != v4 then goto L170026;
  #L170012.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L170018.  v1:= temp @kind object;
  #L17001a.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L17001e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L170024.  goto L17002a;
  #L170026.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L17002a.  return v5 @kind wide;
  #L17002c.  v14:= new `java.io.EOFException`;
  #L170030.  call `<init>`(v14) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L170036.  throw v14;
}
procedure `short` `commonReadShort`(`okio.Buffer` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonReadShort:(Lokio/Buffer;)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L171140.  v0:= "$this$commonReadShort" @kind object;
  #L171144.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17114a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L171150.  v0:= temp @kind wide;
  #L171152.  v2:= 2L;
  #L171156.  v4:= lcmp(v0, v2);
  #L17115a.  if v4 < 0 then goto L1711ee;
  #L17115e.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L171162.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L171168.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L17116c.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L171170.  v5:= v4 - v1 @kind int;
  #L171174.  v6:= 2I;
  #L171176.  if v5 >= v6 then goto L17119c;
  #L17117a.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L171180.  v0:= temp;
  #L171182.  v0:= v0 ^& 255;
  #L171186.  v0:= v0 ^< 8;
  #L17118a.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L171190.  v8:= temp;
  #L171192.  v8:= v8 ^& 255;
  #L171196.  v8:= v8 ^| v0 @kind int;
  #L171198.  v8:= (`short`) v8 @kind i2s;
  #L17119a.  return v8;
  #L17119c.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1711a0.  v6:= v1 + 1;
  #L1711a4.  v1:= v5[v1] @kind byte;
  #L1711a8.  v1:= v1 ^& 255;
  #L1711ac.  v1:= v1 ^< 8;
  #L1711b0.  v7:= v6 + 1;
  #L1711b4.  v5:= v5[v6] @kind byte;
  #L1711b8.  v5:= v5 ^& 255;
  #L1711bc.  v1:= v1 ^| v5 @kind int;
  #L1711be.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1711c4.  v5:= temp @kind wide;
  #L1711c6.  v5:= v5 - v2 @kind long;
  #L1711c8.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1711ce.  if v7 != v4 then goto L1711e6;
  #L1711d2.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1711d8.  v2:= temp @kind object;
  #L1711da.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1711de.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1711e4.  goto L1711ea;
  #L1711e6.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1711ea.  v8:= (`short`) v1 @kind i2s;
  #L1711ec.  return v8;
  #L1711ee.  v8:= new `java.io.EOFException`;
  #L1711f2.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1711f8.  throw v8;
}
procedure `java.lang.String` `commonReadUtf8`(`okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/internal/BufferKt;.commonReadUtf8:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16efa0.  v0:= "$this$commonReadUtf8" @kind object;
  #L16efa4.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16efaa.  v0:= 0I;
  #L16efac.  v1:= 0L;
  #L16efb0.  v3:= lcmp(v9, v1);
  #L16efb4.  if v3 < 0 then goto L16efcc;
  #L16efb8.  v1:= 2147483647I;
  #L16efbe.  v1:= (`long`) v1 @kind i2l;
  #L16efc0.  v4:= lcmp(v9, v1);
  #L16efc4.  if v4 > 0 then goto L16efcc;
  #L16efc8.  v1:= 1I;
  #L16efca.  goto L16efce;
  #L16efcc.  v1:= 0I;
  #L16efce.  if v1 == 0 then goto L16f07a;
  #L16efd2.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16efd8.  v1:= temp @kind wide;
  #L16efda.  v4:= lcmp(v1, v9);
  #L16efde.  if v4 < 0 then goto L16f06e;
  #L16efe2.  if v3 != 0 then goto L16efec;
  #L16efe6.  v8:= "" @kind object;
  #L16efea.  return v8 @kind object;
  #L16efec.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16eff0.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16eff6.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L16effa.  v3:= (`long`) v2 @kind i2l;
  #L16effc.  v3:= v3 + v9 @kind long;
  #L16effe.  v5:= v1.`okio.Segment.limit` @type ^`int`;
  #L16f002.  v5:= (`long`) v5 @kind i2l;
  #L16f004.  v7:= lcmp(v3, v5);
  #L16f008.  if v7 <= 0 then goto L16f022;
  #L16f00c.  call temp:= `readByteArray`(v8, v9) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L16f012.  v8:= temp @kind object;
  #L16f014.  v9:= 3I;
  #L16f016.  v10:= 0I;
  #L16f018.  call temp:= `commonToUtf8String$default`(v8, v0, v0, v9, v10) @signature `Lokio/internal/_Utf8Kt;.commonToUtf8String$default:([BIIILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L16f01e.  v8:= temp @kind object;
  #L16f020.  return v8 @kind object;
  #L16f022.  v0:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16f026.  v3:= (`int`) v9 @kind l2i;
  #L16f028.  v4:= v2 + v3 @kind int;
  #L16f02c.  call temp:= `commonToUtf8String`(v0, v2, v4) @signature `Lokio/internal/_Utf8Kt;.commonToUtf8String:([BII)Ljava/lang/String;` @kind static;
  #L16f032.  v0:= temp @kind object;
  #L16f034.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L16f038.  v2:= v2 + v3 @kind int;
  #L16f03a.  v1.`okio.Segment.pos` @type ^`int` := v2;
  #L16f03e.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f044.  v2:= temp @kind wide;
  #L16f046.  v2:= v2 - v9 @kind long;
  #L16f048.  call `setSize$okio`(v8, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L16f04e.  v9:= v1.`okio.Segment.pos` @type ^`int`;
  #L16f052.  v10:= v1.`okio.Segment.limit` @type ^`int`;
  #L16f056.  if v9 != v10 then goto L16f06c;
  #L16f05a.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L16f060.  v9:= temp @kind object;
  #L16f062.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v9 @kind object;
  #L16f066.  call `recycle`(v1) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L16f06c.  return v0 @kind object;
  #L16f06e.  v8:= new `java.io.EOFException`;
  #L16f072.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16f078.  throw v8;
  #L16f07a.  v8:= new `java.lang.StringBuilder`;
  #L16f07e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f084.  v0:= "byteCount: " @kind object;
  #L16f088.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f08e.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f094.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f09a.  v8:= temp @kind object;
  #L16f09c.  v9:= new `java.lang.IllegalArgumentException`;
  #L16f0a0.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f0a6.  v8:= temp @kind object;
  #L16f0a8.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f0ae.  throw v9;
}
procedure `int` `commonReadUtf8CodePoint`(`okio.Buffer` v12 @kind object) @signature `Lokio/internal/BufferKt;.commonReadUtf8CodePoint:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L16eb54.  v0:= "$this$commonReadUtf8CodePoint" @kind object;
  #L16eb58.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16eb5e.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16eb64.  v0:= temp @kind wide;
  #L16eb66.  v2:= 0L;
  #L16eb6a.  v4:= lcmp(v0, v2);
  #L16eb6e.  if v4 == 0 then goto L16ecc8;
  #L16eb72.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16eb78.  v0:= temp;
  #L16eb7a.  v1:= v0 ^& 128;
  #L16eb7e.  v2:= 1I;
  #L16eb80.  v3:= 128I;
  #L16eb84.  v4:= 65533I;
  #L16eb8a.  if v1 != 0 then goto L16eb9a;
  #L16eb8e.  v1:= v0 ^& 127;
  #L16eb92.  v5:= 0I;
  #L16eb94.  v5:= 1I;
  #L16eb96.  v6:= 0I;
  #L16eb98.  goto L16ebe0;
  #L16eb9a.  v1:= v0 ^& 224;
  #L16eb9e.  v5:= 192I;
  #L16eba2.  if v1 != v5 then goto L16ebb2;
  #L16eba6.  v1:= v0 ^& 31;
  #L16ebaa.  v5:= 2I;
  #L16ebac.  v6:= 128I;
  #L16ebb0.  goto L16ebe0;
  #L16ebb2.  v1:= v0 ^& 240;
  #L16ebb6.  v5:= 224I;
  #L16ebba.  if v1 != v5 then goto L16ebca;
  #L16ebbe.  v1:= v0 ^& 15;
  #L16ebc2.  v5:= 3I;
  #L16ebc4.  v6:= 2048I;
  #L16ebc8.  goto L16ebe0;
  #L16ebca.  v1:= v0 ^& 248;
  #L16ebce.  v5:= 240I;
  #L16ebd2.  if v1 != v5 then goto L16ecbc;
  #L16ebd6.  v1:= v0 ^& 7;
  #L16ebda.  v5:= 4I;
  #L16ebdc.  v6:= 65536I;
  #L16ebe0.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16ebe6.  v7:= temp @kind wide;
  #L16ebe8.  v9:= (`long`) v5 @kind i2l;
  #L16ebea.  v11:= lcmp(v7, v9);
  #L16ebee.  if v11 < 0 then goto L16ec54;
  #L16ebf2.  if v2 >= v5 then goto L16ec20;
  #L16ebf6.  v7:= (`long`) v2 @kind i2l;
  #L16ebf8.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16ebfe.  v0:= temp;
  #L16ec00.  v11:= v0 ^& 192;
  #L16ec04.  if v11 != v3 then goto L16ec18;
  #L16ec08.  v1:= v1 ^< 6;
  #L16ec0c.  v0:= v0 ^& 63;
  #L16ec10.  v1:= v1 ^| v0 @kind int;
  #L16ec12.  v2:= v2 + 1;
  #L16ec16.  goto L16ebf2;
  #L16ec18.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16ec1e.  return v4;
  #L16ec20.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16ec26.  v12:= 1114111I;
  #L16ec2c.  if v1 <= v12 then goto L16ec32;
  #L16ec30.  goto L16ec52;
  #L16ec32.  v12:= 57343I;
  #L16ec38.  v0:= 55296I;
  #L16ec3e.  if v0 <= v1 then goto L16ec44;
  #L16ec42.  goto L16ec4a;
  #L16ec44.  if v12 < v1 then goto L16ec4a;
  #L16ec48.  goto L16ec52;
  #L16ec4a.  if v1 >= v6 then goto L16ec50;
  #L16ec4e.  goto L16ec52;
  #L16ec50.  v4:= v1;
  #L16ec52.  return v4;
  #L16ec54.  v1:= new `java.io.EOFException`;
  #L16ec58.  v2:= new `java.lang.StringBuilder`;
  #L16ec5c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ec62.  v3:= "size < " @kind object;
  #L16ec66.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec6c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec72.  v3:= ": " @kind object;
  #L16ec76.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec7c.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16ec82.  v3:= temp @kind wide;
  #L16ec84.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec8a.  v12:= " (to read code point prefixed 0x" @kind object;
  #L16ec8e.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec94.  call temp:= `toHexString`(v0) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L16ec9a.  v12:= temp @kind object;
  #L16ec9c.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eca2.  v12:= 41I;
  #L16eca6.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ecac.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ecb2.  v12:= temp @kind object;
  #L16ecb4.  call `<init>`(v1, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ecba.  throw v1;
  #L16ecbc.  v0:= 1L;
  #L16ecc0.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16ecc6.  return v4;
  #L16ecc8.  v12:= new `java.io.EOFException`;
  #L16eccc.  call `<init>`(v12) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16ecd2.  throw v12;
}
procedure `java.lang.String` `commonReadUtf8Line`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonReadUtf8Line:(Lokio/Buffer;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16f0c0.  v0:= "$this$commonReadUtf8Line" @kind object;
  #L16f0c4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f0ca.  v0:= 10I;
  #L16f0ce.  v0:= (`byte`) v0 @kind i2b;
  #L16f0d0.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L16f0d6.  v0:= temp @kind wide;
  #L16f0d8.  v2:= -1L;
  #L16f0dc.  v4:= lcmp(v0, v2);
  #L16f0e0.  if v4 == 0 then goto L16f0ee;
  #L16f0e4.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L16f0ea.  v5:= temp @kind object;
  #L16f0ec.  goto L16f116;
  #L16f0ee.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f0f4.  v0:= temp @kind wide;
  #L16f0f6.  v2:= 0L;
  #L16f0fa.  v4:= lcmp(v0, v2);
  #L16f0fe.  if v4 == 0 then goto L16f114;
  #L16f102.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f108.  v0:= temp @kind wide;
  #L16f10a.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L16f110.  v5:= temp @kind object;
  #L16f112.  goto L16f116;
  #L16f114.  v5:= 0I;
  #L16f116.  return v5 @kind object;
}
procedure `java.lang.String` `commonReadUtf8LineStrict`(`okio.Buffer` v11 @kind object, `long` v12 ) @signature `Lokio/internal/BufferKt;.commonReadUtf8LineStrict:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L16f128.  v0:= "$this$commonReadUtf8LineStrict" @kind object;
  #L16f12c.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f132.  v0:= 0L;
  #L16f136.  v2:= lcmp(v12, v0);
  #L16f13a.  if v2 < 0 then goto L16f142;
  #L16f13e.  v0:= 1I;
  #L16f140.  goto L16f144;
  #L16f142.  v0:= 0I;
  #L16f144.  if v0 == 0 then goto L16f264;
  #L16f148.  v0:= 1L;
  #L16f14c.  v2:= 9223372036854775807L;
  #L16f156.  v4:= lcmp(v12, v2);
  #L16f15a.  if v4 != 0 then goto L16f160;
  #L16f15e.  goto L16f164;
  #L16f160.  v2:= v12 + v0 @kind long;
  #L16f164.  v4:= 10I;
  #L16f168.  v10:= (`byte`) v4 @kind i2b;
  #L16f16a.  v6:= 0L;
  #L16f16e.  v4:= v11 @kind object;
  #L16f170.  v5:= v10;
  #L16f172.  v8:= v2 @kind wide;
  #L16f174.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L16f17a.  v4:= temp @kind wide;
  #L16f17c.  v6:= -1L;
  #L16f180.  v8:= lcmp(v4, v6);
  #L16f184.  if v8 == 0 then goto L16f192;
  #L16f188.  call temp:= `readUtf8Line`(v11, v4) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L16f18e.  v11:= temp @kind object;
  #L16f190.  return v11 @kind object;
  #L16f192.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f198.  v4:= temp @kind wide;
  #L16f19a.  v6:= lcmp(v2, v4);
  #L16f19e.  if v6 >= 0 then goto L16f1ce;
  #L16f1a2.  v0:= v2 - v0 @kind long;
  #L16f1a6.  call temp:= `getByte`(v11, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16f1ac.  v0:= temp;
  #L16f1ae.  v1:= 13I;
  #L16f1b2.  v1:= (`byte`) v1 @kind i2b;
  #L16f1b4.  if v0 != v1 then goto L16f1ce;
  #L16f1b8.  call temp:= `getByte`(v11, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16f1be.  v0:= temp;
  #L16f1c0.  if v0 != v10 then goto L16f1ce;
  #L16f1c4.  call temp:= `readUtf8Line`(v11, v2) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L16f1ca.  v11:= temp @kind object;
  #L16f1cc.  return v11 @kind object;
  #L16f1ce.  v6:= new `okio.Buffer`;
  #L16f1d2.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L16f1d8.  v2:= 0L;
  #L16f1dc.  v0:= 32I;
  #L16f1e0.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f1e6.  v4:= temp @kind wide;
  #L16f1e8.  v0:= (`long`) v0 @kind i2l;
  #L16f1ea.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f1f0.  v4:= temp @kind wide;
  #L16f1f2.  v0:= v11 @kind object;
  #L16f1f4.  v1:= v6 @kind object;
  #L16f1f6.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L16f1fc.  v0:= new `java.io.EOFException`;
  #L16f200.  v1:= new `java.lang.StringBuilder`;
  #L16f204.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f20a.  v2:= "\\n not found: limit=" @kind object;
  #L16f20e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f214.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16f21a.  v2:= temp @kind wide;
  #L16f21c.  call temp:= `min`(v2, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16f222.  v11:= temp @kind wide;
  #L16f224.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f22a.  v11:= " content=" @kind object;
  #L16f22e.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f234.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L16f23a.  v11:= temp @kind object;
  #L16f23c.  call temp:= `hex`(v11) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L16f242.  v11:= temp @kind object;
  #L16f244.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f24a.  v11:= 8230I;
  #L16f24e.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f254.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f25a.  v11:= temp @kind object;
  #L16f25c.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f262.  throw v0;
  #L16f264.  v11:= new `java.lang.StringBuilder`;
  #L16f268.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f26e.  v0:= "limit < 0: " @kind object;
  #L16f272.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f278.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f27e.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f284.  v11:= temp @kind object;
  #L16f286.  v12:= new `java.lang.IllegalArgumentException`;
  #L16f28a.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f290.  v11:= temp @kind object;
  #L16f292.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f298.  throw v12;
}
procedure `int` `commonSelect`(`okio.Buffer` v3 @kind object, `okio.Options` v4 @kind object) @signature `Lokio/internal/BufferKt;.commonSelect:(Lokio/Buffer;Lokio/Options;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16ece4.  v0:= "$this$commonSelect" @kind object;
  #L16ece8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16ecee.  v0:= "options" @kind object;
  #L16ecf2.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16ecf8.  v0:= 0I;
  #L16ecfa.  v1:= 2I;
  #L16ecfc.  v2:= 0I;
  #L16ecfe.  call temp:= `selectPrefix$default`(v3, v4, v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @kind static;
  #L16ed04.  v0:= temp;
  #L16ed06.  v1:= -1I;
  #L16ed08.  if v0 != v1 then goto L16ed0e;
  #L16ed0c.  return v1;
  #L16ed0e.  call temp:= `getByteStrings$okio`(v4) @signature `Lokio/Options;.getByteStrings$okio:()[Lokio/ByteString;` @kind virtual;
  #L16ed14.  v4:= temp @kind object;
  #L16ed16.  v4:= v4[v0] @kind object;
  #L16ed1a.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L16ed20.  v4:= temp;
  #L16ed22.  v1:= (`long`) v4 @kind i2l;
  #L16ed24.  call `skip`(v3, v1) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16ed2a.  return v0;
}
procedure `void` `commonSkip`(`okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/internal/BufferKt;.commonSkip:(Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L171304.  v0:= "$this$commonSkip" @kind object;
  #L171308.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17130e.  v0:= 0L;
  #L171312.  v2:= lcmp(v8, v0);
  #L171316.  if v2 <= 0 then goto L17137e;
  #L17131a.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L17131e.  if v0 == 0 then goto L171372;
  #L171322.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L171326.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L17132a.  v1:= v1 - v2 @kind int;
  #L17132c.  v1:= (`long`) v1 @kind i2l;
  #L17132e.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L171334.  v1:= temp @kind wide;
  #L171336.  v2:= (`int`) v1 @kind l2i;
  #L171338.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L17133e.  v3:= temp @kind wide;
  #L171340.  v5:= (`long`) v2 @kind i2l;
  #L171342.  v3:= v3 - v5 @kind long;
  #L171344.  call `setSize$okio`(v7, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17134a.  v8:= v8 - v5 @kind long;
  #L17134c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L171350.  v1:= v1 + v2 @kind int;
  #L171352.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L171356.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L17135a.  if v1 != v2 then goto L17130e;
  #L17135e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L171364.  v1:= temp @kind object;
  #L171366.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L17136a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L171370.  goto L17130e;
  #L171372.  v7:= new `java.io.EOFException`;
  #L171376.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L17137c.  throw v7;
  #L17137e.  return @kind void;
}
procedure `okio.ByteString` `commonSnapshot`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonSnapshot:(Lokio/Buffer;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L170f3c.  v0:= "$this$commonSnapshot" @kind object;
  #L170f40.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170f46.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170f4c.  v0:= temp @kind wide;
  #L170f4e.  v2:= 2147483647I;
  #L170f54.  v2:= (`long`) v2 @kind i2l;
  #L170f56.  v4:= lcmp(v0, v2);
  #L170f5a.  if v4 > 0 then goto L170f62;
  #L170f5e.  v0:= 1I;
  #L170f60.  goto L170f64;
  #L170f62.  v0:= 0I;
  #L170f64.  if v0 == 0 then goto L170f7c;
  #L170f68.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170f6e.  v0:= temp @kind wide;
  #L170f70.  v1:= (`int`) v0 @kind l2i;
  #L170f72.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L170f78.  v5:= temp @kind object;
  #L170f7a.  return v5 @kind object;
  #L170f7c.  v0:= new `java.lang.StringBuilder`;
  #L170f80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170f86.  v1:= "size > Int.MAX_VALUE: " @kind object;
  #L170f8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170f90.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170f96.  v1:= temp @kind wide;
  #L170f98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L170f9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170fa4.  v5:= temp @kind object;
  #L170fa6.  v0:= new `java.lang.IllegalStateException`;
  #L170faa.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170fb0.  v5:= temp @kind object;
  #L170fb2.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170fb8.  throw v0;
}
procedure `okio.ByteString` `commonSnapshot`(`okio.Buffer` v7 @kind object, `int` v8 ) @signature `Lokio/internal/BufferKt;.commonSnapshot:(Lokio/Buffer;I)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L170fcc.  v0:= "$this$commonSnapshot" @kind object;
  #L170fd0.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170fd6.  if v8 != 0 then goto L170fe0;
  #L170fda.  v7:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L170fde.  return v7 @kind object;
  #L170fe0.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170fe6.  v0:= temp @kind wide;
  #L170fe8.  v2:= 0L;
  #L170fec.  v4:= (`long`) v8 @kind i2l;
  #L170fee.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L170ff4.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L170ff8.  v1:= 0I;
  #L170ffa.  v2:= 0I;
  #L170ffc.  v3:= 0I;
  #L170ffe.  if v2 >= v8 then goto L171032;
  #L171002.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L171008.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L17100c.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L171010.  if v4 == v5 then goto L171022;
  #L171014.  v4:= v4 - v5 @kind int;
  #L171016.  v2:= v2 + v4 @kind int;
  #L171018.  v3:= v3 + 1;
  #L17101c.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L171020.  goto L170ffe;
  #L171022.  v7:= new `java.lang.AssertionError`;
  #L171026.  v8:= "s.limit == s.pos" @kind object;
  #L17102a.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L171030.  throw v7;
  #L171032.  v0:= new `byte`[][v3];
  #L171036.  v2:= v3 * 2;
  #L17103a.  v2:= new `int`[v2];
  #L17103e.  v7:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L171042.  v4:= 0I;
  #L171044.  if v1 >= v8 then goto L171088;
  #L171048.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17104e.  v5:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L171052.  v0[v4]:= v5 @kind object;
  #L171056.  v5:= v7.`okio.Segment.limit` @type ^`int`;
  #L17105a.  v6:= v7.`okio.Segment.pos` @type ^`int`;
  #L17105e.  v5:= v5 - v6 @kind int;
  #L171060.  v1:= v1 + v5 @kind int;
  #L171062.  call temp:= `min`(v1, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L171068.  v5:= temp;
  #L17106a.  v2[v4]:= v5;
  #L17106e.  v5:= v4 + v3 @kind int;
  #L171072.  v6:= v7.`okio.Segment.pos` @type ^`int`;
  #L171076.  v2[v5]:= v6;
  #L17107a.  v5:= 1I;
  #L17107c.  v7.`okio.Segment.shared` @type ^`boolean` := v5 @kind boolean;
  #L171080.  v4:= v4 + v5 @kind int;
  #L171082.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L171086.  goto L171044;
  #L171088.  v7:= new `okio.SegmentedByteString`;
  #L17108c.  call `<init>`(v7, v0, v2) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L171092.  return v7 @kind object;
}
procedure `okio.Segment` `commonWritableSegment`(`okio.Buffer` v2 @kind object, `int` v3 ) @signature `Lokio/internal/BufferKt;.commonWritableSegment:(Lokio/Buffer;I)Lokio/Segment;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1710a4.  v0:= "$this$commonWritableSegment" @kind object;
  #L1710a8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1710ae.  v0:= 8192I;
  #L1710b2.  v1:= 1I;
  #L1710b4.  if v3 < v1 then goto L1710be;
  #L1710b8.  if v3 > v0 then goto L1710be;
  #L1710bc.  goto L1710c0;
  #L1710be.  v1:= 0I;
  #L1710c0.  if v1 == 0 then goto L171116;
  #L1710c4.  v1:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1710c8.  if v1 != 0 then goto L1710e2;
  #L1710cc.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1710d2.  v3:= temp @kind object;
  #L1710d4.  v2.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L1710d8.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1710dc.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1710e0.  return v3 @kind object;
  #L1710e2.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1710e8.  v2:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1710ec.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1710f2.  v1:= v2.`okio.Segment.limit` @type ^`int`;
  #L1710f6.  v1:= v1 + v3 @kind int;
  #L1710f8.  if v1 > v0 then goto L171104;
  #L1710fc.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L171100.  if v3 != 0 then goto L171114;
  #L171104.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L17110a.  v3:= temp @kind object;
  #L17110c.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L171112.  v2:= temp @kind object;
  #L171114.  return v2 @kind object;
  #L171116.  v2:= new `java.lang.IllegalArgumentException`;
  #L17111a.  v3:= "unexpected capacity" @kind object;
  #L17111e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L171124.  v3:= temp @kind object;
  #L171126.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17112c.  throw v2;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v1 @kind object, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/ByteString;II)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L170328.  v0:= "$this$commonWrite" @kind object;
  #L17032c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170332.  v0:= "byteString" @kind object;
  #L170336.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17033c.  call `write$okio`(v2, v1, v3, v4) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L170342.  return v1 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v5 @kind object, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/Source;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L170354.  v0:= "$this$commonWrite" @kind object;
  #L170358.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17035e.  v0:= "source" @kind object;
  #L170362.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170368.  v0:= 0L;
  #L17036c.  v2:= lcmp(v7, v0);
  #L170370.  if v2 <= 0 then goto L170398;
  #L170374.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L17037a.  v0:= temp @kind wide;
  #L17037c.  v2:= -1L;
  #L170380.  v4:= lcmp(v0, v2);
  #L170384.  if v4 == 0 then goto L17038c;
  #L170388.  v7:= v7 - v0 @kind long;
  #L17038a.  goto L170368;
  #L17038c.  v5:= new `java.io.EOFException`;
  #L170390.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L170396.  throw v5;
  #L170398.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;[B)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L170268.  v0:= "$this$commonWrite" @kind object;
  #L17026c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170272.  v0:= "source" @kind object;
  #L170276.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17027c.  v0:= length @variable v3;
  #L17027e.  v1:= 0I;
  #L170280.  call temp:= `write`(v2, v3, v1, v0) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L170286.  v2:= temp @kind object;
  #L170288.  return v2 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v9 @kind object, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;[BII)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L17029c.  v0:= "$this$commonWrite" @kind object;
  #L1702a0.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1702a6.  v0:= "source" @kind object;
  #L1702aa.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1702b0.  v0:= length @variable v10;
  #L1702b2.  v1:= (`long`) v0 @kind i2l;
  #L1702b4.  v3:= (`long`) v11 @kind i2l;
  #L1702b6.  v7:= (`long`) v12 @kind i2l;
  #L1702b8.  v5:= v7 @kind wide;
  #L1702ba.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1702c0.  v12:= v12 + v11 @kind int;
  #L1702c2.  if v11 >= v12 then goto L170304;
  #L1702c6.  v0:= 1I;
  #L1702c8.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1702ce.  v0:= temp @kind object;
  #L1702d0.  v1:= v12 - v11 @kind int;
  #L1702d4.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1702d8.  v2:= v2 - 8192;
  #L1702dc.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1702e2.  v1:= temp;
  #L1702e4.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1702e8.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1702ec.  v4:= v11 + v1 @kind int;
  #L1702f0.  call temp:= `copyInto`(v10, v2, v3, v11, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1702f6.  v11:= v0.`okio.Segment.limit` @type ^`int`;
  #L1702fa.  v11:= v11 + v1 @kind int;
  #L1702fc.  v0.`okio.Segment.limit` @type ^`int` := v11;
  #L170300.  v11:= v4;
  #L170302.  goto L1702c2;
  #L170304.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L17030a.  v10:= temp @kind wide;
  #L17030c.  v10:= v10 + v7 @kind long;
  #L17030e.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170314.  return v9 @kind object;
}
procedure `void` `commonWrite`(`okio.Buffer` v8 @kind object, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L171390.  v0:= "$this$commonWrite" @kind object;
  #L171394.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17139a.  v0:= "source" @kind object;
  #L17139e.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1713a4.  v0:= 0I;
  #L1713a6.  if v9 == v8 then goto L1713ae;
  #L1713aa.  v1:= 1I;
  #L1713ac.  goto L1713b0;
  #L1713ae.  v1:= 0I;
  #L1713b0.  if v1 == 0 then goto L171512;
  #L1713b4.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1713ba.  v2:= temp @kind wide;
  #L1713bc.  v4:= 0L;
  #L1713c0.  v6:= v10 @kind wide;
  #L1713c2.  call `checkOffsetAndCount`(v2, v4, v6) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1713c8.  v1:= 0L;
  #L1713cc.  v3:= lcmp(v10, v1);
  #L1713d0.  if v3 <= 0 then goto L171510;
  #L1713d4.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1713d8.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1713de.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L1713e2.  v2:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1713e6.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1713ec.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1713f0.  v1:= v1 - v2 @kind int;
  #L1713f2.  v1:= (`long`) v1 @kind i2l;
  #L1713f4.  v3:= lcmp(v10, v1);
  #L1713f8.  if v3 >= 0 then goto L171494;
  #L1713fc.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L171400.  if v1 == 0 then goto L171410;
  #L171404.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17140a.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L17140e.  goto L171412;
  #L171410.  v1:= 0I;
  #L171412.  if v1 == 0 then goto L17147c;
  #L171416.  v2:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L17141a.  if v2 == 0 then goto L17147c;
  #L17141e.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L171422.  v2:= (`long`) v2 @kind i2l;
  #L171424.  v2:= v2 + v10 @kind long;
  #L171426.  v4:= v1.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L17142a.  if v4 == 0 then goto L171432;
  #L17142e.  v4:= 0I;
  #L171430.  goto L171436;
  #L171432.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L171436.  v4:= (`long`) v4 @kind i2l;
  #L171438.  v2:= v2 - v4 @kind long;
  #L17143a.  v4:= 8192I;
  #L17143e.  v4:= (`long`) v4 @kind i2l;
  #L171440.  v6:= lcmp(v2, v4);
  #L171444.  if v6 > 0 then goto L17147c;
  #L171448.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L17144c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L171452.  v2:= (`int`) v10 @kind l2i;
  #L171454.  call `writeTo`(v0, v1, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L17145a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L171460.  v0:= temp @kind wide;
  #L171462.  v0:= v0 - v10 @kind long;
  #L171464.  call `setSize$okio`(v9, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17146a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L171470.  v0:= temp @kind wide;
  #L171472.  v0:= v0 + v10 @kind long;
  #L171474.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17147a.  return @kind void;
  #L17147c.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L171480.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L171486.  v2:= (`int`) v10 @kind l2i;
  #L171488.  call temp:= `split`(v1, v2) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L17148e.  v1:= temp @kind object;
  #L171490.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L171494.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L171498.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L17149e.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1714a2.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L1714a6.  v2:= v2 - v3 @kind int;
  #L1714a8.  v2:= (`long`) v2 @kind i2l;
  #L1714aa.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1714b0.  v4:= temp @kind object;
  #L1714b2.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L1714b6.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1714ba.  if v4 != 0 then goto L1714cc;
  #L1714be.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1714c2.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1714c6.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1714ca.  goto L1714ea;
  #L1714cc.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1714d2.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1714d6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1714dc.  call temp:= `push`(v4, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1714e2.  v1:= temp @kind object;
  #L1714e4.  call `compact`(v1) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L1714ea.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1714f0.  v4:= temp @kind wide;
  #L1714f2.  v4:= v4 - v2 @kind long;
  #L1714f4.  call `setSize$okio`(v9, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1714fa.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L171500.  v4:= temp @kind wide;
  #L171502.  v4:= v4 + v2 @kind long;
  #L171504.  call `setSize$okio`(v8, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17150a.  v10:= v10 - v2 @kind long;
  #L17150c.  goto L1713c8;
  #L171510.  return @kind void;
  #L171512.  v8:= new `java.lang.IllegalArgumentException`;
  #L171516.  v9:= "source == this" @kind object;
  #L17151a.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L171520.  v9:= temp @kind object;
  #L171522.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L171528.  throw v8;
}
procedure `okio.Buffer` `commonWrite$default`(`okio.Buffer` v0 @kind object, `okio.ByteString` v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonWrite$default:(Lokio/Buffer;Lokio/ByteString;IIILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L170220.  v5:= v4 ^& 2;
  #L170224.  if v5 == 0 then goto L17022a;
  #L170228.  v2:= 0I;
  #L17022a.  v4:= v4 ^& 4;
  #L17022e.  if v4 == 0 then goto L17023a;
  #L170232.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L170238.  v3:= temp;
  #L17023a.  v4:= "$this$commonWrite" @kind object;
  #L17023e.  call `checkNotNullParameter`(v0, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170244.  v4:= "byteString" @kind object;
  #L170248.  call `checkNotNullParameter`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17024e.  call `write$okio`(v1, v0, v2, v3) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L170254.  return v0 @kind object;
}
procedure `long` `commonWriteAll`(`okio.Buffer` v7 @kind object, `okio.Source` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonWriteAll:(Lokio/Buffer;Lokio/Source;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L170048.  v0:= "$this$commonWriteAll" @kind object;
  #L17004c.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170052.  v0:= "source" @kind object;
  #L170056.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17005c.  v0:= 0L;
  #L170060.  v2:= 8192I;
  #L170064.  v2:= (`long`) v2 @kind i2l;
  #L170066.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L17006c.  v2:= temp @kind wide;
  #L17006e.  v4:= -1L;
  #L170072.  v6:= lcmp(v2, v4);
  #L170076.  if v6 != 0 then goto L17007c;
  #L17007a.  return v0 @kind wide;
  #L17007c.  v0:= v0 + v2 @kind long;
  #L17007e.  goto L170060;
}
procedure `okio.Buffer` `commonWriteByte`(`okio.Buffer` v4 @kind object, `int` v5 ) @signature `Lokio/internal/BufferKt;.commonWriteByte:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1703ac.  v0:= "$this$commonWriteByte" @kind object;
  #L1703b0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1703b6.  v0:= 1I;
  #L1703b8.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1703be.  v0:= temp @kind object;
  #L1703c0.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1703c4.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1703c8.  v3:= v2 + 1;
  #L1703cc.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1703d0.  v5:= (`byte`) v5 @kind i2b;
  #L1703d2.  v1[v2]:= v5 @kind byte;
  #L1703d6.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1703dc.  v0:= temp @kind wide;
  #L1703de.  v2:= 1L;
  #L1703e2.  v0:= v0 + v2 @kind long;
  #L1703e4.  call `setSize$okio`(v4, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1703ea.  return v4 @kind object;
}
procedure `okio.Buffer` `commonWriteDecimalLong`(`okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonWriteDecimalLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1703fc.  v0:= "$this$commonWriteDecimalLong" @kind object;
  #L170400.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170406.  v0:= 0L;
  #L17040a.  v2:= lcmp(v13, v0);
  #L17040e.  if v2 != 0 then goto L170420;
  #L170412.  v13:= 48I;
  #L170416.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L17041c.  v12:= temp @kind object;
  #L17041e.  return v12 @kind object;
  #L170420.  v3:= 0I;
  #L170422.  v4:= 1I;
  #L170424.  if v2 >= 0 then goto L170442;
  #L170428.  v13:= -v13 @kind long;
  #L17042a.  v2:= lcmp(v13, v0);
  #L17042e.  if v2 >= 0 then goto L170440;
  #L170432.  v13:= "-9223372036854775808" @kind object;
  #L170436.  call temp:= `writeUtf8`(v12, v13) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L17043c.  v12:= temp @kind object;
  #L17043e.  return v12 @kind object;
  #L170440.  v3:= 1I;
  #L170442.  v5:= 100000000L;
  #L170448.  v2:= 10I;
  #L17044c.  v7:= lcmp(v13, v5);
  #L170450.  if v7 >= 0 then goto L1704de;
  #L170454.  v5:= 10000L;
  #L170458.  v7:= lcmp(v13, v5);
  #L17045c.  if v7 >= 0 then goto L17049a;
  #L170460.  v5:= 100L;
  #L170464.  v7:= lcmp(v13, v5);
  #L170468.  if v7 >= 0 then goto L170482;
  #L17046c.  v5:= 10L;
  #L170470.  v7:= lcmp(v13, v5);
  #L170474.  if v7 >= 0 then goto L17047c;
  #L170478.  goto L1705ce;
  #L17047c.  v4:= 2I;
  #L17047e.  goto L1705ce;
  #L170482.  v4:= 1000L;
  #L170486.  v6:= lcmp(v13, v4);
  #L17048a.  if v6 >= 0 then goto L170494;
  #L17048e.  v4:= 3I;
  #L170490.  goto L1705ce;
  #L170494.  v4:= 4I;
  #L170496.  goto L1705ce;
  #L17049a.  v4:= 1000000L;
  #L1704a0.  v6:= lcmp(v13, v4);
  #L1704a4.  if v6 >= 0 then goto L1704c2;
  #L1704a8.  v4:= 100000L;
  #L1704ae.  v6:= lcmp(v13, v4);
  #L1704b2.  if v6 >= 0 then goto L1704bc;
  #L1704b6.  v4:= 5I;
  #L1704b8.  goto L1705ce;
  #L1704bc.  v4:= 6I;
  #L1704be.  goto L1705ce;
  #L1704c2.  v4:= 10000000L;
  #L1704c8.  v6:= lcmp(v13, v4);
  #L1704cc.  if v6 >= 0 then goto L1704d6;
  #L1704d0.  v4:= 7I;
  #L1704d2.  goto L1705ce;
  #L1704d6.  v4:= 8I;
  #L1704da.  goto L1705ce;
  #L1704de.  v4:= 1000000000000L;
  #L1704e8.  v6:= lcmp(v13, v4);
  #L1704ec.  if v6 >= 0 then goto L17053a;
  #L1704f0.  v4:= 10000000000L;
  #L1704fa.  v6:= lcmp(v13, v4);
  #L1704fe.  if v6 >= 0 then goto L17051c;
  #L170502.  v4:= 1000000000L;
  #L170508.  v6:= lcmp(v13, v4);
  #L17050c.  if v6 >= 0 then goto L170516;
  #L170510.  v4:= 9I;
  #L170514.  goto L1705ce;
  #L170516.  v4:= 10I;
  #L17051a.  goto L1705ce;
  #L17051c.  v4:= 100000000000L;
  #L170526.  v6:= lcmp(v13, v4);
  #L17052a.  if v6 >= 0 then goto L170534;
  #L17052e.  v4:= 11I;
  #L170532.  goto L1705ce;
  #L170534.  v4:= 12I;
  #L170538.  goto L1705ce;
  #L17053a.  v4:= 1000000000000000L;
  #L170544.  v6:= lcmp(v13, v4);
  #L170548.  if v6 >= 0 then goto L170582;
  #L17054c.  v4:= 10000000000000L;
  #L170556.  v6:= lcmp(v13, v4);
  #L17055a.  if v6 >= 0 then goto L170564;
  #L17055e.  v4:= 13I;
  #L170562.  goto L1705ce;
  #L170564.  v4:= 100000000000000L;
  #L17056e.  v6:= lcmp(v13, v4);
  #L170572.  if v6 >= 0 then goto L17057c;
  #L170576.  v4:= 14I;
  #L17057a.  goto L1705ce;
  #L17057c.  v4:= 15I;
  #L170580.  goto L1705ce;
  #L170582.  v4:= 100000000000000000L;
  #L17058c.  v6:= lcmp(v13, v4);
  #L170590.  if v6 >= 0 then goto L1705b2;
  #L170594.  v4:= 10000000000000000L;
  #L17059e.  v6:= lcmp(v13, v4);
  #L1705a2.  if v6 >= 0 then goto L1705ac;
  #L1705a6.  v4:= 16I;
  #L1705aa.  goto L1705ce;
  #L1705ac.  v4:= 17I;
  #L1705b0.  goto L1705ce;
  #L1705b2.  v4:= 1000000000000000000L;
  #L1705bc.  v6:= lcmp(v13, v4);
  #L1705c0.  if v6 >= 0 then goto L1705ca;
  #L1705c4.  v4:= 18I;
  #L1705c8.  goto L1705ce;
  #L1705ca.  v4:= 19I;
  #L1705ce.  if v3 == 0 then goto L1705d6;
  #L1705d2.  v4:= v4 + 1;
  #L1705d6.  call temp:= `writableSegment$okio`(v12, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1705dc.  v5:= temp @kind object;
  #L1705de.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1705e2.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1705e6.  v7:= v7 + v4 @kind int;
  #L1705e8.  v8:= lcmp(v13, v0);
  #L1705ec.  if v8 == 0 then goto L170610;
  #L1705f0.  v8:= (`long`) v2 @kind i2l;
  #L1705f2.  v10:= v13 %% v8 @kind long;
  #L1705f6.  v11:= (`int`) v10 @kind l2i;
  #L1705f8.  v7:= v7 + -1;
  #L1705fc.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L170602.  v10:= temp @kind object;
  #L170604.  v10:= v10[v11] @kind byte;
  #L170608.  v6[v7]:= v10 @kind byte;
  #L17060c.  v13:= v13 / v8 @kind long;
  #L17060e.  goto L1705e8;
  #L170610.  if v3 == 0 then goto L170622;
  #L170614.  v7:= v7 + -1;
  #L170618.  v13:= 45I;
  #L17061c.  v13:= (`byte`) v13 @kind i2b;
  #L17061e.  v6[v7]:= v13 @kind byte;
  #L170622.  v13:= v5.`okio.Segment.limit` @type ^`int`;
  #L170626.  v13:= v13 + v4 @kind int;
  #L170628.  v5.`okio.Segment.limit` @type ^`int` := v13;
  #L17062c.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170632.  v13:= temp @kind wide;
  #L170634.  v0:= (`long`) v4 @kind i2l;
  #L170636.  v13:= v13 + v0 @kind long;
  #L170638.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17063e.  return v12 @kind object;
}
procedure `okio.Buffer` `commonWriteHexadecimalUnsignedLong`(`okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonWriteHexadecimalUnsignedLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L170650.  v0:= "$this$commonWriteHexadecimalUnsignedLong" @kind object;
  #L170654.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17065a.  v0:= 0L;
  #L17065e.  v2:= lcmp(v13, v0);
  #L170662.  if v2 != 0 then goto L170674;
  #L170666.  v13:= 48I;
  #L17066a.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L170670.  v12:= temp @kind object;
  #L170672.  return v12 @kind object;
  #L170674.  v0:= 1I;
  #L170676.  v1:= v13 ^>> v0 @kind long;
  #L17067a.  v1:= v1 ^| v13 @kind long;
  #L17067c.  v3:= 2I;
  #L17067e.  v4:= v1 ^>> v3 @kind long;
  #L170682.  v1:= v1 ^| v4 @kind long;
  #L170684.  v4:= 4I;
  #L170686.  v5:= v1 ^>> v4 @kind long;
  #L17068a.  v1:= v1 ^| v5 @kind long;
  #L17068c.  v5:= 8I;
  #L170690.  v6:= v1 ^>> v5 @kind long;
  #L170694.  v1:= v1 ^| v6 @kind long;
  #L170696.  v6:= 16I;
  #L17069a.  v7:= v1 ^>> v6 @kind long;
  #L17069e.  v1:= v1 ^| v7 @kind long;
  #L1706a0.  v7:= 32I;
  #L1706a4.  v8:= v1 ^>> v7 @kind long;
  #L1706a8.  v1:= v1 ^| v8 @kind long;
  #L1706aa.  v8:= v1 ^>> v0 @kind long;
  #L1706ae.  v10:= 1.1945305291614955E103D;
  #L1706b8.  v8:= v8 ^& v10 @kind long;
  #L1706ba.  v1:= v1 - v8 @kind long;
  #L1706bc.  v8:= v1 ^>> v3 @kind long;
  #L1706c0.  v10:= 4.667261458395856E-62D;
  #L1706ca.  v8:= v8 ^& v10 @kind long;
  #L1706cc.  v1:= v1 ^& v10 @kind long;
  #L1706ce.  v8:= v8 + v1 @kind long;
  #L1706d0.  v1:= v8 ^>> v4 @kind long;
  #L1706d4.  v1:= v1 + v8 @kind long;
  #L1706d6.  v8:= 3.815736827118017E-236D;
  #L1706e0.  v1:= v1 ^& v8 @kind long;
  #L1706e2.  v8:= v1 ^>> v5 @kind long;
  #L1706e6.  v1:= v1 + v8 @kind long;
  #L1706e8.  v5:= v1 ^>> v6 @kind long;
  #L1706ec.  v1:= v1 + v5 @kind long;
  #L1706ee.  v5:= 63L;
  #L1706f2.  v8:= v1 ^& v5 @kind long;
  #L1706f6.  v1:= v1 ^>> v7 @kind long;
  #L1706f8.  v1:= v1 ^& v5 @kind long;
  #L1706fa.  v8:= v8 + v1 @kind long;
  #L1706fc.  v1:= 3I;
  #L1706fe.  v1:= (`long`) v1 @kind i2l;
  #L170700.  v8:= v8 + v1 @kind long;
  #L170702.  v1:= (`long`) v4 @kind i2l;
  #L170704.  v8:= v8 / v1 @kind long;
  #L170706.  v1:= (`int`) v8 @kind l2i;
  #L170708.  call temp:= `writableSegment$okio`(v12, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L17070e.  v2:= temp @kind object;
  #L170710.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170714.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L170718.  v6:= v5 + v1 @kind int;
  #L17071c.  v6:= v6 - v0 @kind int;
  #L17071e.  if v6 < v5 then goto L170742;
  #L170722.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L170728.  v0:= temp @kind object;
  #L17072a.  v7:= 15L;
  #L17072e.  v7:= v7 ^& v13 @kind long;
  #L170730.  v8:= (`int`) v7 @kind l2i;
  #L170732.  v0:= v0[v8] @kind byte;
  #L170736.  v3[v6]:= v0 @kind byte;
  #L17073a.  v13:= v13 ^>> v4 @kind long;
  #L17073c.  v6:= v6 + -1;
  #L170740.  goto L17071e;
  #L170742.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L170746.  v13:= v13 + v1 @kind int;
  #L170748.  v2.`okio.Segment.limit` @type ^`int` := v13;
  #L17074c.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170752.  v13:= temp @kind wide;
  #L170754.  v0:= (`long`) v1 @kind i2l;
  #L170756.  v13:= v13 + v0 @kind long;
  #L170758.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L17075e.  return v12 @kind object;
}
procedure `okio.Buffer` `commonWriteInt`(`okio.Buffer` v5 @kind object, `int` v6 ) @signature `Lokio/internal/BufferKt;.commonWriteInt:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L170770.  v0:= "$this$commonWriteInt" @kind object;
  #L170774.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17077a.  v0:= 4I;
  #L17077c.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170782.  v0:= temp @kind object;
  #L170784.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170788.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L17078c.  v3:= v2 + 1;
  #L170790.  v4:= v6 ^>> 24;
  #L170794.  v4:= v4 ^& 255;
  #L170798.  v4:= (`byte`) v4 @kind i2b;
  #L17079a.  v1[v2]:= v4 @kind byte;
  #L17079e.  v2:= v3 + 1;
  #L1707a2.  v4:= v6 ^>> 16;
  #L1707a6.  v4:= v4 ^& 255;
  #L1707aa.  v4:= (`byte`) v4 @kind i2b;
  #L1707ac.  v1[v3]:= v4 @kind byte;
  #L1707b0.  v3:= v2 + 1;
  #L1707b4.  v4:= v6 ^>> 8;
  #L1707b8.  v4:= v4 ^& 255;
  #L1707bc.  v4:= (`byte`) v4 @kind i2b;
  #L1707be.  v1[v2]:= v4 @kind byte;
  #L1707c2.  v2:= v3 + 1;
  #L1707c6.  v6:= v6 ^& 255;
  #L1707ca.  v6:= (`byte`) v6 @kind i2b;
  #L1707cc.  v1[v3]:= v6 @kind byte;
  #L1707d0.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1707d4.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1707da.  v0:= temp @kind wide;
  #L1707dc.  v2:= 4L;
  #L1707e0.  v0:= v0 + v2 @kind long;
  #L1707e2.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1707e8.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWriteLong`(`okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/internal/BufferKt;.commonWriteLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1707fc.  v0:= "$this$commonWriteLong" @kind object;
  #L170800.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170806.  v0:= 8I;
  #L17080a.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170810.  v1:= temp @kind object;
  #L170812.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170816.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L17081a.  v4:= v3 + 1;
  #L17081e.  v5:= 56I;
  #L170822.  v5:= v10 ^>> v5 @kind long;
  #L170826.  v7:= 255L;
  #L17082a.  v5:= v5 ^& v7 @kind long;
  #L17082c.  v6:= (`int`) v5 @kind l2i;
  #L17082e.  v5:= (`byte`) v6 @kind i2b;
  #L170830.  v2[v3]:= v5 @kind byte;
  #L170834.  v3:= v4 + 1;
  #L170838.  v5:= 48I;
  #L17083c.  v5:= v10 ^>> v5 @kind long;
  #L170840.  v5:= v5 ^& v7 @kind long;
  #L170842.  v6:= (`int`) v5 @kind l2i;
  #L170844.  v5:= (`byte`) v6 @kind i2b;
  #L170846.  v2[v4]:= v5 @kind byte;
  #L17084a.  v4:= v3 + 1;
  #L17084e.  v5:= 40I;
  #L170852.  v5:= v10 ^>> v5 @kind long;
  #L170856.  v5:= v5 ^& v7 @kind long;
  #L170858.  v6:= (`int`) v5 @kind l2i;
  #L17085a.  v5:= (`byte`) v6 @kind i2b;
  #L17085c.  v2[v3]:= v5 @kind byte;
  #L170860.  v3:= v4 + 1;
  #L170864.  v5:= 32I;
  #L170868.  v5:= v10 ^>> v5 @kind long;
  #L17086c.  v5:= v5 ^& v7 @kind long;
  #L17086e.  v6:= (`int`) v5 @kind l2i;
  #L170870.  v5:= (`byte`) v6 @kind i2b;
  #L170872.  v2[v4]:= v5 @kind byte;
  #L170876.  v4:= v3 + 1;
  #L17087a.  v5:= 24I;
  #L17087e.  v5:= v10 ^>> v5 @kind long;
  #L170882.  v5:= v5 ^& v7 @kind long;
  #L170884.  v6:= (`int`) v5 @kind l2i;
  #L170886.  v5:= (`byte`) v6 @kind i2b;
  #L170888.  v2[v3]:= v5 @kind byte;
  #L17088c.  v3:= v4 + 1;
  #L170890.  v5:= 16I;
  #L170894.  v5:= v10 ^>> v5 @kind long;
  #L170898.  v5:= v5 ^& v7 @kind long;
  #L17089a.  v6:= (`int`) v5 @kind l2i;
  #L17089c.  v5:= (`byte`) v6 @kind i2b;
  #L17089e.  v2[v4]:= v5 @kind byte;
  #L1708a2.  v4:= v3 + 1;
  #L1708a6.  v5:= v10 ^>> v0 @kind long;
  #L1708aa.  v5:= v5 ^& v7 @kind long;
  #L1708ac.  v0:= (`int`) v5 @kind l2i;
  #L1708ae.  v0:= (`byte`) v0 @kind i2b;
  #L1708b0.  v2[v3]:= v0 @kind byte;
  #L1708b4.  v0:= v4 + 1;
  #L1708b8.  v10:= v10 ^& v7 @kind long;
  #L1708ba.  v11:= (`int`) v10 @kind l2i;
  #L1708bc.  v10:= (`byte`) v11 @kind i2b;
  #L1708be.  v2[v4]:= v10 @kind byte;
  #L1708c2.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L1708c6.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1708cc.  v10:= temp @kind wide;
  #L1708ce.  v0:= 8L;
  #L1708d2.  v10:= v10 + v0 @kind long;
  #L1708d4.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1708da.  return v9 @kind object;
}
procedure `okio.Buffer` `commonWriteShort`(`okio.Buffer` v5 @kind object, `int` v6 ) @signature `Lokio/internal/BufferKt;.commonWriteShort:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1708ec.  v0:= "$this$commonWriteShort" @kind object;
  #L1708f0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1708f6.  v0:= 2I;
  #L1708f8.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1708fe.  v0:= temp @kind object;
  #L170900.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170904.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L170908.  v3:= v2 + 1;
  #L17090c.  v4:= v6 ^>> 8;
  #L170910.  v4:= v4 ^& 255;
  #L170914.  v4:= (`byte`) v4 @kind i2b;
  #L170916.  v1[v2]:= v4 @kind byte;
  #L17091a.  v2:= v3 + 1;
  #L17091e.  v6:= v6 ^& 255;
  #L170922.  v6:= (`byte`) v6 @kind i2b;
  #L170924.  v1[v3]:= v6 @kind byte;
  #L170928.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L17092c.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170932.  v0:= temp @kind wide;
  #L170934.  v2:= 2L;
  #L170938.  v0:= v0 + v2 @kind long;
  #L17093a.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170940.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWriteUtf8`(`okio.Buffer` v11 @kind object, `java.lang.String` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/internal/BufferKt;.commonWriteUtf8:(Lokio/Buffer;Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L170954.  v0:= "$this$commonWriteUtf8" @kind object;
  #L170958.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L17095e.  v0:= "string" @kind object;
  #L170962.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170968.  v0:= 0I;
  #L17096a.  v1:= 1I;
  #L17096c.  if v13 < 0 then goto L170974;
  #L170970.  v2:= 1I;
  #L170972.  goto L170976;
  #L170974.  v2:= 0I;
  #L170976.  if v2 == 0 then goto L170c4c;
  #L17097a.  if v14 < v13 then goto L170982;
  #L17097e.  v2:= 1I;
  #L170980.  goto L170984;
  #L170982.  v2:= 0I;
  #L170984.  if v2 == 0 then goto L170c06;
  #L170988.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L17098e.  v2:= temp;
  #L170990.  if v14 > v2 then goto L170998;
  #L170994.  v2:= 1I;
  #L170996.  goto L17099a;
  #L170998.  v2:= 0I;
  #L17099a.  if v2 == 0 then goto L170bb8;
  #L17099e.  if v13 >= v14 then goto L170bb6;
  #L1709a2.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1709a8.  v2:= temp;
  #L1709aa.  v3:= 128I;
  #L1709ae.  if v2 >= v3 then goto L170a22;
  #L1709b2.  call temp:= `writableSegment$okio`(v11, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1709b8.  v4:= temp @kind object;
  #L1709ba.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1709be.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1709c2.  v6:= v6 - v13 @kind int;
  #L1709c4.  v7:= v6 - 8192;
  #L1709c8.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1709ce.  v7:= temp;
  #L1709d0.  v8:= v13 + 1;
  #L1709d4.  v13:= v13 + v6 @kind int;
  #L1709d6.  v2:= (`byte`) v2 @kind i2b;
  #L1709d8.  v5[v13]:= v2 @kind byte;
  #L1709dc.  if v8 >= v7 then goto L1709fe;
  #L1709e0.  call temp:= `charAt`(v12, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1709e6.  v13:= temp;
  #L1709e8.  if v13 < v3 then goto L1709ee;
  #L1709ec.  goto L1709fe;
  #L1709ee.  v2:= v8 + 1;
  #L1709f2.  v8:= v8 + v6 @kind int;
  #L1709f4.  v13:= (`byte`) v13 @kind i2b;
  #L1709f6.  v5[v8]:= v13 @kind byte;
  #L1709fa.  v8:= v2;
  #L1709fc.  goto L1709dc;
  #L1709fe.  v6:= v6 + v8 @kind int;
  #L170a00.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L170a04.  v6:= v6 - v13 @kind int;
  #L170a06.  v13:= v13 + v6 @kind int;
  #L170a08.  v4.`okio.Segment.limit` @type ^`int` := v13;
  #L170a0c.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170a12.  v2:= temp @kind wide;
  #L170a14.  v4:= (`long`) v6 @kind i2l;
  #L170a16.  v2:= v2 + v4 @kind long;
  #L170a18.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170a1e.  v13:= v8;
  #L170a20.  goto L17099e;
  #L170a22.  v4:= 2048I;
  #L170a26.  if v2 >= v4 then goto L170a7a;
  #L170a2a.  v4:= 2I;
  #L170a2c.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170a32.  v5:= temp @kind object;
  #L170a34.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170a38.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L170a3c.  v8:= v2 ^> 6;
  #L170a40.  v8:= v8 ^| 192;
  #L170a44.  v8:= (`byte`) v8 @kind i2b;
  #L170a46.  v6[v7]:= v8 @kind byte;
  #L170a4a.  v8:= v7 + 1;
  #L170a4e.  v2:= v2 ^& 63;
  #L170a52.  v2:= v2 ^| v3 @kind int;
  #L170a54.  v2:= (`byte`) v2 @kind i2b;
  #L170a56.  v6[v8]:= v2 @kind byte;
  #L170a5a.  v7:= v7 + v4 @kind int;
  #L170a5c.  v5.`okio.Segment.limit` @type ^`int` := v7;
  #L170a60.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170a66.  v2:= temp @kind wide;
  #L170a68.  v4:= 2L;
  #L170a6c.  v2:= v2 + v4 @kind long;
  #L170a6e.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170a74.  v13:= v13 + 1;
  #L170a78.  goto L17099e;
  #L170a7a.  v4:= 55296I;
  #L170a80.  v5:= 63I;
  #L170a84.  if v2 < v4 then goto L170b56;
  #L170a88.  v4:= 57343I;
  #L170a8e.  if v2 <= v4 then goto L170a94;
  #L170a92.  goto L170b56;
  #L170a94.  v6:= v13 + 1;
  #L170a98.  if v6 >= v14 then goto L170aa6;
  #L170a9c.  call temp:= `charAt`(v12, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L170aa2.  v7:= temp;
  #L170aa4.  goto L170aa8;
  #L170aa6.  v7:= 0I;
  #L170aa8.  v8:= 56319I;
  #L170aae.  if v2 > v8 then goto L170b4a;
  #L170ab2.  v8:= 56320I;
  #L170ab8.  if v8 > v7 then goto L170b4a;
  #L170abc.  if v4 >= v7 then goto L170ac2;
  #L170ac0.  goto L170b4a;
  #L170ac2.  v4:= 65536I;
  #L170ac6.  v2:= v2 ^& 1023;
  #L170aca.  v2:= v2 ^< 10;
  #L170ace.  v6:= v7 ^& 1023;
  #L170ad2.  v2:= v2 ^| v6 @kind int;
  #L170ad4.  v2:= v2 + v4 @kind int;
  #L170ad6.  v4:= 4I;
  #L170ad8.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170ade.  v6:= temp @kind object;
  #L170ae0.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170ae4.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L170ae8.  v9:= v2 ^> 18;
  #L170aec.  v9:= v9 ^| 240;
  #L170af0.  v9:= (`byte`) v9 @kind i2b;
  #L170af2.  v7[v8]:= v9 @kind byte;
  #L170af6.  v9:= v8 + 1;
  #L170afa.  v10:= v2 ^> 12;
  #L170afe.  v10:= v10 ^& v5 @kind int;
  #L170b00.  v10:= v10 ^| v3 @kind int;
  #L170b02.  v10:= (`byte`) v10 @kind i2b;
  #L170b04.  v7[v9]:= v10 @kind byte;
  #L170b08.  v9:= v8 + 2;
  #L170b0c.  v10:= v2 ^> 6;
  #L170b10.  v10:= v10 ^& v5 @kind int;
  #L170b12.  v10:= v10 ^| v3 @kind int;
  #L170b14.  v10:= (`byte`) v10 @kind i2b;
  #L170b16.  v7[v9]:= v10 @kind byte;
  #L170b1a.  v9:= v8 + 3;
  #L170b1e.  v2:= v2 ^& v5 @kind int;
  #L170b20.  v2:= v2 ^| v3 @kind int;
  #L170b22.  v2:= (`byte`) v2 @kind i2b;
  #L170b24.  v7[v9]:= v2 @kind byte;
  #L170b28.  v8:= v8 + v4 @kind int;
  #L170b2a.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L170b2e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170b34.  v2:= temp @kind wide;
  #L170b36.  v4:= 4L;
  #L170b3a.  v2:= v2 + v4 @kind long;
  #L170b3c.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170b42.  v13:= v13 + 2;
  #L170b46.  goto L17099e;
  #L170b4a.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L170b50.  v13:= v6;
  #L170b52.  goto L17099e;
  #L170b56.  v4:= 3I;
  #L170b58.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170b5e.  v6:= temp @kind object;
  #L170b60.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170b64.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L170b68.  v9:= v2 ^> 12;
  #L170b6c.  v9:= v9 ^| 224;
  #L170b70.  v9:= (`byte`) v9 @kind i2b;
  #L170b72.  v7[v8]:= v9 @kind byte;
  #L170b76.  v9:= v8 + 1;
  #L170b7a.  v10:= v2 ^> 6;
  #L170b7e.  v5:= v5 ^& v10 @kind int;
  #L170b80.  v5:= v5 ^| v3 @kind int;
  #L170b82.  v5:= (`byte`) v5 @kind i2b;
  #L170b84.  v7[v9]:= v5 @kind byte;
  #L170b88.  v5:= v8 + 2;
  #L170b8c.  v2:= v2 ^& 63;
  #L170b90.  v2:= v2 ^| v3 @kind int;
  #L170b92.  v2:= (`byte`) v2 @kind i2b;
  #L170b94.  v7[v5]:= v2 @kind byte;
  #L170b98.  v8:= v8 + v4 @kind int;
  #L170b9a.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L170b9e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170ba4.  v2:= temp @kind wide;
  #L170ba6.  v4:= 3L;
  #L170baa.  v2:= v2 + v4 @kind long;
  #L170bac.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170bb2.  goto L170a74;
  #L170bb6.  return v11 @kind object;
  #L170bb8.  v11:= new `java.lang.StringBuilder`;
  #L170bbc.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170bc2.  v13:= "endIndex > string.length: " @kind object;
  #L170bc6.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170bcc.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L170bd2.  v13:= " > " @kind object;
  #L170bd6.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170bdc.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L170be2.  v12:= temp;
  #L170be4.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L170bea.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170bf0.  v11:= temp @kind object;
  #L170bf2.  v12:= new `java.lang.IllegalArgumentException`;
  #L170bf6.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170bfc.  v11:= temp @kind object;
  #L170bfe.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170c04.  throw v12;
  #L170c06.  v11:= new `java.lang.StringBuilder`;
  #L170c0a.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170c10.  v12:= "endIndex < beginIndex: " @kind object;
  #L170c14.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c1a.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c20.  v12:= " < " @kind object;
  #L170c24.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c2a.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c30.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170c36.  v11:= temp @kind object;
  #L170c38.  v12:= new `java.lang.IllegalArgumentException`;
  #L170c3c.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170c42.  v11:= temp @kind object;
  #L170c44.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170c4a.  throw v12;
  #L170c4c.  v11:= new `java.lang.StringBuilder`;
  #L170c50.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170c56.  v12:= "beginIndex < 0: " @kind object;
  #L170c5a.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c60.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L170c66.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170c6c.  v11:= temp @kind object;
  #L170c6e.  v12:= new `java.lang.IllegalArgumentException`;
  #L170c72.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L170c78.  v11:= temp @kind object;
  #L170c7a.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170c80.  throw v12;
}
procedure `okio.Buffer` `commonWriteUtf8CodePoint`(`okio.Buffer` v8 @kind object, `int` v9 ) @signature `Lokio/internal/BufferKt;.commonWriteUtf8CodePoint:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L170c94.  v0:= "$this$commonWriteUtf8CodePoint" @kind object;
  #L170c98.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L170c9e.  v0:= 128I;
  #L170ca2.  if v9 >= v0 then goto L170cb0;
  #L170ca6.  call temp:= `writeByte`(v8, v9) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L170cac.  goto L170e00;
  #L170cb0.  v1:= 2048I;
  #L170cb4.  v2:= 63I;
  #L170cb8.  if v9 >= v1 then goto L170d08;
  #L170cbc.  v1:= 2I;
  #L170cbe.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170cc4.  v3:= temp @kind object;
  #L170cc6.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170cca.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L170cce.  v6:= v9 ^> 6;
  #L170cd2.  v6:= v6 ^| 192;
  #L170cd6.  v6:= (`byte`) v6 @kind i2b;
  #L170cd8.  v4[v5]:= v6 @kind byte;
  #L170cdc.  v6:= v5 + 1;
  #L170ce0.  v9:= v9 ^& v2 @kind int;
  #L170ce2.  v9:= v9 ^| v0 @kind int;
  #L170ce4.  v9:= (`byte`) v9 @kind i2b;
  #L170ce6.  v4[v6]:= v9 @kind byte;
  #L170cea.  v5:= v5 + v1 @kind int;
  #L170cec.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L170cf0.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170cf6.  v0:= temp @kind wide;
  #L170cf8.  v2:= 2L;
  #L170cfc.  v0:= v0 + v2 @kind long;
  #L170cfe.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170d04.  goto L170e00;
  #L170d08.  v1:= 57343I;
  #L170d0e.  v3:= 55296I;
  #L170d14.  if v3 <= v9 then goto L170d1a;
  #L170d18.  goto L170d26;
  #L170d1a.  if v1 < v9 then goto L170d26;
  #L170d1e.  call temp:= `writeByte`(v8, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L170d24.  goto L170e00;
  #L170d26.  v1:= 65536I;
  #L170d2a.  if v9 >= v1 then goto L170d8a;
  #L170d2e.  v1:= 3I;
  #L170d30.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170d36.  v3:= temp @kind object;
  #L170d38.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170d3c.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L170d40.  v6:= v9 ^> 12;
  #L170d44.  v6:= v6 ^| 224;
  #L170d48.  v6:= (`byte`) v6 @kind i2b;
  #L170d4a.  v4[v5]:= v6 @kind byte;
  #L170d4e.  v6:= v5 + 1;
  #L170d52.  v7:= v9 ^> 6;
  #L170d56.  v7:= v7 ^& v2 @kind int;
  #L170d58.  v7:= v7 ^| v0 @kind int;
  #L170d5a.  v7:= (`byte`) v7 @kind i2b;
  #L170d5c.  v4[v6]:= v7 @kind byte;
  #L170d60.  v6:= v5 + 2;
  #L170d64.  v9:= v9 ^& v2 @kind int;
  #L170d66.  v9:= v9 ^| v0 @kind int;
  #L170d68.  v9:= (`byte`) v9 @kind i2b;
  #L170d6a.  v4[v6]:= v9 @kind byte;
  #L170d6e.  v5:= v5 + v1 @kind int;
  #L170d70.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L170d74.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170d7a.  v0:= temp @kind wide;
  #L170d7c.  v2:= 3L;
  #L170d80.  v0:= v0 + v2 @kind long;
  #L170d82.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170d88.  goto L170e00;
  #L170d8a.  v1:= 1114111I;
  #L170d90.  if v9 > v1 then goto L170e02;
  #L170d94.  v1:= 4I;
  #L170d96.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L170d9c.  v3:= temp @kind object;
  #L170d9e.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L170da2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L170da6.  v6:= v9 ^> 18;
  #L170daa.  v6:= v6 ^| 240;
  #L170dae.  v6:= (`byte`) v6 @kind i2b;
  #L170db0.  v4[v5]:= v6 @kind byte;
  #L170db4.  v6:= v5 + 1;
  #L170db8.  v7:= v9 ^> 12;
  #L170dbc.  v7:= v7 ^& v2 @kind int;
  #L170dbe.  v7:= v7 ^| v0 @kind int;
  #L170dc0.  v7:= (`byte`) v7 @kind i2b;
  #L170dc2.  v4[v6]:= v7 @kind byte;
  #L170dc6.  v6:= v5 + 2;
  #L170dca.  v7:= v9 ^> 6;
  #L170dce.  v7:= v7 ^& v2 @kind int;
  #L170dd0.  v7:= v7 ^| v0 @kind int;
  #L170dd2.  v7:= (`byte`) v7 @kind i2b;
  #L170dd4.  v4[v6]:= v7 @kind byte;
  #L170dd8.  v6:= v5 + 3;
  #L170ddc.  v9:= v9 ^& v2 @kind int;
  #L170dde.  v9:= v9 ^| v0 @kind int;
  #L170de0.  v9:= (`byte`) v9 @kind i2b;
  #L170de2.  v4[v6]:= v9 @kind byte;
  #L170de6.  v5:= v5 + v1 @kind int;
  #L170de8.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L170dec.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L170df2.  v0:= temp @kind wide;
  #L170df4.  v2:= 4L;
  #L170df8.  v0:= v0 + v2 @kind long;
  #L170dfa.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L170e00.  return v8 @kind object;
  #L170e02.  v8:= new `java.lang.IllegalArgumentException`;
  #L170e06.  v0:= new `java.lang.StringBuilder`;
  #L170e0a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L170e10.  v1:= "Unexpected code point: 0x" @kind object;
  #L170e14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170e1a.  call temp:= `toHexString`(v9) @signature `Lokio/-Util;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L170e20.  v9:= temp @kind object;
  #L170e22.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L170e28.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L170e2e.  v9:= temp @kind object;
  #L170e30.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L170e36.  throw v8;
}
procedure `byte`[] `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L16e8f8.  v0:= `@@okio.internal.BufferKt.a` @type ^`byte`[] @kind object;
  #L16e8fc.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Segment` v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16e654.  v0:= "segment" @kind object;
  #L16e658.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e65e.  v0:= "bytes" @kind object;
  #L16e662.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16e668.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L16e66c.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e670.  if v8 >= v9 then goto L16e6b0;
  #L16e674.  if v6 != v0 then goto L16e696;
  #L16e678.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16e67c.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16e682.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16e686.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L16e68a.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L16e68e.  v4:= v1;
  #L16e690.  v1:= v6 @kind object;
  #L16e692.  v6:= v0;
  #L16e694.  v0:= v4;
  #L16e696.  v2:= v1[v6] @kind byte;
  #L16e69a.  v3:= v7[v8] @kind byte;
  #L16e69e.  if v2 == v3 then goto L16e6a6;
  #L16e6a2.  v5:= 0I;
  #L16e6a4.  return v5;
  #L16e6a6.  v6:= v6 + 1;
  #L16e6aa.  v8:= v8 + 1;
  #L16e6ae.  goto L16e670;
  #L16e6b0.  v5:= 1I;
  #L16e6b2.  return v5;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16f2ac.  v0:= "$this$readUtf8Line" @kind object;
  #L16f2b0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16f2b6.  v0:= 1L;
  #L16f2ba.  v2:= 0L;
  #L16f2be.  v4:= lcmp(v7, v2);
  #L16f2c2.  if v4 <= 0 then goto L16f2f0;
  #L16f2c6.  v2:= v7 - v0 @kind long;
  #L16f2ca.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L16f2d0.  v4:= temp;
  #L16f2d2.  v5:= 13I;
  #L16f2d6.  v5:= (`byte`) v5 @kind i2b;
  #L16f2d8.  if v4 != v5 then goto L16f2f0;
  #L16f2dc.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L16f2e2.  v7:= temp @kind object;
  #L16f2e4.  v0:= 2L;
  #L16f2e8.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16f2ee.  goto L16f2fe;
  #L16f2f0.  call temp:= `readUtf8`(v6, v7) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L16f2f6.  v7:= temp @kind object;
  #L16f2f8.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L16f2fe.  return v7 @kind object;
}
procedure `java.lang.Object` `seek`(`okio.Buffer` v5 @kind object, `long` v6 , `kotlin.jvm.functions.Function2` v8 @kind object) @signature `Lokio/internal/BufferKt;.seek:(Lokio/Buffer;JLkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16eed4.  v0:= "$this$seek" @kind object;
  #L16eed8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16eede.  v0:= "lambda" @kind object;
  #L16eee2.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16eee8.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16eeec.  if v0 == 0 then goto L16ef78;
  #L16eef0.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16eef6.  v1:= temp @kind wide;
  #L16eef8.  v1:= v1 - v6 @kind long;
  #L16eefa.  v3:= lcmp(v1, v6);
  #L16eefe.  if v3 >= 0 then goto L16ef3e;
  #L16ef02.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16ef08.  v1:= temp @kind wide;
  #L16ef0a.  v5:= lcmp(v1, v6);
  #L16ef0e.  if v5 <= 0 then goto L16ef2c;
  #L16ef12.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L16ef16.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ef1c.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ef20.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ef24.  v5:= v5 - v3 @kind int;
  #L16ef26.  v3:= (`long`) v5 @kind i2l;
  #L16ef28.  v1:= v1 - v3 @kind long;
  #L16ef2a.  goto L16ef0a;
  #L16ef2c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16ef32.  v5:= temp @kind object;
  #L16ef34.  call temp:= `invoke`(v8, v0, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ef3a.  v5:= temp @kind object;
  #L16ef3c.  return v5 @kind object;
  #L16ef3e.  v1:= 0L;
  #L16ef42.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ef46.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ef4a.  v5:= v5 - v3 @kind int;
  #L16ef4c.  v3:= (`long`) v5 @kind i2l;
  #L16ef4e.  v3:= v3 + v1 @kind long;
  #L16ef50.  v5:= lcmp(v3, v6);
  #L16ef54.  if v5 <= 0 then goto L16ef6a;
  #L16ef58.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16ef5e.  v5:= temp @kind object;
  #L16ef60.  call temp:= `invoke`(v8, v0, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ef66.  v5:= temp @kind object;
  #L16ef68.  return v5 @kind object;
  #L16ef6a.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16ef6e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ef74.  v1:= v3 @kind wide;
  #L16ef76.  goto L16ef42;
  #L16ef78.  v5:= 0I;
  #L16ef7a.  v6:= -1L;
  #L16ef7e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16ef84.  v6:= temp @kind object;
  #L16ef86.  call temp:= `invoke`(v8, v5, v6) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ef8c.  v5:= temp @kind object;
  #L16ef8e.  return v5 @kind object;
}
procedure `int` `selectPrefix`(`okio.Buffer` v17 @kind object, `okio.Options` v18 @kind object, `boolean` v19 ) @signature `Lokio/internal/BufferKt;.selectPrefix:(Lokio/Buffer;Lokio/Options;Z)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L16ed60.  v0:= v17 @kind object;
  #L16ed64.  v1:= "$this$selectPrefix" @kind object;
  #L16ed68.  call `checkNotNullParameter`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16ed6e.  v1:= "options" @kind object;
  #L16ed72.  v2:= v18 @kind object;
  #L16ed76.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16ed7c.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L16ed80.  v1:= -2I;
  #L16ed82.  v3:= -1I;
  #L16ed84.  if v0 == 0 then goto L16eeb8;
  #L16ed88.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16ed8c.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L16ed90.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L16ed94.  call temp:= `getTrie$okio`(v18) @signature `Lokio/Options;.getTrie$okio:()[I` @kind virtual;
  #L16ed9a.  v2:= temp @kind object;
  #L16ed9c.  v7:= 0I;
  #L16ed9e.  v9:= v0 @kind object;
  #L16eda0.  v8:= 0I;
  #L16eda2.  v10:= -1I;
  #L16eda4.  v11:= v8 + 1;
  #L16eda8.  v8:= v2[v8];
  #L16edac.  v12:= v11 + 1;
  #L16edb0.  v11:= v2[v11];
  #L16edb4.  if v11 == v3 then goto L16edba;
  #L16edb8.  v10:= v11;
  #L16edba.  if v9 != 0 then goto L16edc0;
  #L16edbe.  goto L16ee1a;
  #L16edc0.  v11:= 0I;
  #L16edc2.  if v8 >= 0 then goto L16ee5a;
  #L16edc6.  v8:= v8 * -1;
  #L16edca.  v13:= v12 + v8 @kind int;
  #L16edce.  v8:= v5 + 1;
  #L16edd2.  v5:= v4[v5] @kind byte;
  #L16edd6.  v5:= v5 ^& 255;
  #L16edda.  v14:= v12 + 1;
  #L16edde.  v12:= v2[v12];
  #L16ede2.  if v5 == v12 then goto L16ede8;
  #L16ede6.  return v10;
  #L16ede8.  if v14 != v13 then goto L16edf0;
  #L16edec.  v5:= 1I;
  #L16edee.  goto L16edf2;
  #L16edf0.  v5:= 0I;
  #L16edf2.  if v8 != v6 then goto L16ee34;
  #L16edf6.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16edfc.  v4:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16ee00.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ee06.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L16ee0a.  v8:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16ee0e.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L16ee12.  if v4 != v0 then goto L16ee28;
  #L16ee16.  if v5 != 0 then goto L16ee22;
  #L16ee1a.  if v19 == 0 then goto L16ee20;
  #L16ee1e.  return v1;
  #L16ee20.  return v10;
  #L16ee22.  v4:= v8 @kind object;
  #L16ee24.  v8:= v11 @kind object;
  #L16ee26.  goto L16ee40;
  #L16ee28.  v16:= v8 @kind object;
  #L16ee2c.  v8:= v4 @kind object;
  #L16ee2e.  v4:= v16 @kind object;
  #L16ee32.  goto L16ee40;
  #L16ee34.  v16:= v9 @kind object;
  #L16ee38.  v9:= v6;
  #L16ee3a.  v6:= v8;
  #L16ee3c.  v8:= v16 @kind object;
  #L16ee40.  if v5 == 0 then goto L16ee50;
  #L16ee44.  v5:= v2[v14];
  #L16ee48.  v13:= v6;
  #L16ee4a.  v6:= v9;
  #L16ee4c.  v9:= v8 @kind object;
  #L16ee4e.  goto L16eea4;
  #L16ee50.  v5:= v6;
  #L16ee52.  v6:= v9;
  #L16ee54.  v12:= v14;
  #L16ee56.  v9:= v8 @kind object;
  #L16ee58.  goto L16edce;
  #L16ee5a.  v13:= v5 + 1;
  #L16ee5e.  v5:= v4[v5] @kind byte;
  #L16ee62.  v5:= v5 ^& 255;
  #L16ee66.  v14:= v12 + v8 @kind int;
  #L16ee6a.  if v12 != v14 then goto L16ee70;
  #L16ee6e.  return v10;
  #L16ee70.  v15:= v2[v12];
  #L16ee74.  if v5 != v15 then goto L16eeb2;
  #L16ee78.  v12:= v12 + v8 @kind int;
  #L16ee7a.  v5:= v2[v12];
  #L16ee7e.  if v13 != v6 then goto L16eea4;
  #L16ee82.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L16ee86.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16ee8c.  v4:= v9.`okio.Segment.pos` @type ^`int`;
  #L16ee90.  v6:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L16ee94.  v8:= v9.`okio.Segment.limit` @type ^`int`;
  #L16ee98.  v13:= v4;
  #L16ee9a.  v4:= v6 @kind object;
  #L16ee9c.  v6:= v8;
  #L16ee9e.  if v9 != v0 then goto L16eea4;
  #L16eea2.  v9:= v11 @kind object;
  #L16eea4.  if v5 < 0 then goto L16eeaa;
  #L16eea8.  return v5;
  #L16eeaa.  v8:= -v5 @kind int;
  #L16eeac.  v5:= v13;
  #L16eeae.  goto L16eda4;
  #L16eeb2.  v12:= v12 + 1;
  #L16eeb6.  goto L16ee6a;
  #L16eeb8.  if v19 == 0 then goto L16eebe;
  #L16eebc.  goto L16eec0;
  #L16eebe.  v1:= -1I;
  #L16eec0.  return v1;
}
procedure `int` `selectPrefix$default`(`okio.Buffer` v0 @kind object, `okio.Options` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L16ed3c.  v3:= v3 ^& 2;
  #L16ed40.  if v3 == 0 then goto L16ed46;
  #L16ed44.  v2:= 0I;
  #L16ed46.  call temp:= `selectPrefix`(v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix:(Lokio/Buffer;Lokio/Options;Z)I` @kind static;
  #L16ed4c.  v0:= temp;
  #L16ed4e.  return v0;
}
