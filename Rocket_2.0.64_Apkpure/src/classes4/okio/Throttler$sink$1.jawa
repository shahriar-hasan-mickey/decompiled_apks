record `okio.Throttler$sink$1` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `okio.Throttler` `okio.Throttler$sink$1.b` @AccessFlag FINAL_SYNTHETIC;
  `okio.Sink` `okio.Throttler$sink$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Throttler$sink$1` v0 @kind this, `okio.Throttler` v1 @kind object, `okio.Sink` v2 @kind object, `okio.Sink` v3 @kind object) @signature `Lokio/Throttler$sink$1;.<init>:(Lokio/Throttler;Lokio/Sink;Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L16cc4c.  v0.`okio.Throttler$sink$1.b` @type ^`okio.Throttler` := v1 @kind object;
  #L16cc50.  v0.`okio.Throttler$sink$1.c` @type ^`okio.Sink` := v2 @kind object;
  #L16cc54.  call `<init>`(v0, v3) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L16cc5a.  return @kind void;
}
procedure `void` `write`(`okio.Throttler$sink$1` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Throttler$sink$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16cc6c.  v0:= "source" @kind object;
  #L16cc70.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16cc76.  v0:= 0L;
  #L16cc7a.  v2:= lcmp(v5, v0);
  #L16cc7e.  if v2 <= 0 then goto L16ccb6;
  #L16cc82.  v0:= v3.`okio.Throttler$sink$1.b` @type ^`okio.Throttler` @kind object;
  #L16cc86.  call temp:= `take$okio`(v0, v5) @signature `Lokio/Throttler;.take$okio:(J)J` @kind virtual;
  #L16cc8c.  v0:= temp @kind wide;
  #L16cc8e.  call `write`(v3, v4, v0) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L16cc94.  v5:= v5 - v0 @kind long;
  #L16cc96.  goto L16cc76;
  #L16cc98.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L16cc9e.  v4:= temp @kind object;
  #L16cca0.  call `interrupt`(v4) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L16cca6.  v4:= new `java.io.InterruptedIOException`;
  #L16ccaa.  v5:= "interrupted" @kind object;
  #L16ccae.  call `<init>`(v4, v5) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ccb4.  throw v4;
  #L16ccb6.  return @kind void;
  catch `java.lang.InterruptedException` @[L16cc82..L16cc94] goto L16cc98;
}
