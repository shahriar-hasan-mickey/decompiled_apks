record `okio.PeekSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `okio.Buffer` `okio.PeekSource.a` @AccessFlag PRIVATE_FINAL;
  `okio.Segment` `okio.PeekSource.b` @AccessFlag PRIVATE;
  `int` `okio.PeekSource.c` @AccessFlag PRIVATE;
  `boolean` `okio.PeekSource.d` @AccessFlag PRIVATE;
  `long` `okio.PeekSource.e` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.PeekSource.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.PeekSource` v1 @kind this, `okio.BufferedSource` v2 @kind object) @signature `Lokio/PeekSource;.<init>:(Lokio/BufferedSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L168d0c.  v0:= "upstream" @kind object;
  #L168d10.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L168d16.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L168d1c.  v1.`okio.PeekSource.f` @type ^`okio.BufferedSource` := v2 @kind object;
  #L168d20.  call temp:= `getBuffer`(v2) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L168d26.  v2:= temp @kind object;
  #L168d28.  v1.`okio.PeekSource.a` @type ^`okio.Buffer` := v2 @kind object;
  #L168d2c.  v2:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L168d30.  v1.`okio.PeekSource.b` @type ^`okio.Segment` := v2 @kind object;
  #L168d34.  if v2 == 0 then goto L168d3e;
  #L168d38.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L168d3c.  goto L168d40;
  #L168d3e.  v2:= -1I;
  #L168d40.  v1.`okio.PeekSource.c` @type ^`int` := v2;
  #L168d44.  return @kind void;
}
procedure `void` `close`(`okio.PeekSource` v1 @kind this) @signature `Lokio/PeekSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L168d58.  v0:= 1I;
  #L168d5a.  v1.`okio.PeekSource.d` @type ^`boolean` := v0 @kind boolean;
  #L168d5e.  return @kind void;
}
procedure `long` `read`(`okio.PeekSource` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/PeekSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L168b98.  v0:= "sink" @kind object;
  #L168b9c.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L168ba2.  v0:= 0I;
  #L168ba4.  v1:= 0L;
  #L168ba8.  v3:= 1I;
  #L168baa.  v4:= lcmp(v10, v1);
  #L168bae.  if v4 < 0 then goto L168bb6;
  #L168bb2.  v5:= 1I;
  #L168bb4.  goto L168bb8;
  #L168bb6.  v5:= 0I;
  #L168bb8.  if v5 == 0 then goto L168ca6;
  #L168bbc.  v5:= v8.`okio.PeekSource.d` @type ^`boolean` @kind boolean;
  #L168bc0.  v5:= v5 ^~ v3 @kind int;
  #L168bc2.  if v5 == 0 then goto L168c8e;
  #L168bc6.  v5:= v8.`okio.PeekSource.b` @type ^`okio.Segment` @kind object;
  #L168bca.  if v5 == 0 then goto L168bec;
  #L168bce.  v6:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L168bd2.  v6:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L168bd6.  if v5 != v6 then goto L168bee;
  #L168bda.  v5:= v8.`okio.PeekSource.c` @type ^`int`;
  #L168bde.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L168be4.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L168be8.  if v5 != v6 then goto L168bee;
  #L168bec.  v0:= 1I;
  #L168bee.  if v0 == 0 then goto L168c76;
  #L168bf2.  if v4 != 0 then goto L168bf8;
  #L168bf6.  return v1 @kind wide;
  #L168bf8.  v0:= v8.`okio.PeekSource.f` @type ^`okio.BufferedSource` @kind object;
  #L168bfc.  v1:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L168c00.  v3:= 1L;
  #L168c04.  v1:= v1 + v3 @kind long;
  #L168c06.  call temp:= `request`(v0, v1) @signature `Lokio/BufferedSource;.request:(J)Z` @kind interface;
  #L168c0c.  v0:= temp;
  #L168c0e.  if v0 != 0 then goto L168c18;
  #L168c12.  v9:= -1L;
  #L168c16.  return v9 @kind wide;
  #L168c18.  v0:= v8.`okio.PeekSource.b` @type ^`okio.Segment` @kind object;
  #L168c1c.  if v0 != 0 then goto L168c3e;
  #L168c20.  v0:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L168c24.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L168c28.  if v0 == 0 then goto L168c3e;
  #L168c2c.  v8.`okio.PeekSource.b` @type ^`okio.Segment` := v0 @kind object;
  #L168c30.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L168c36.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L168c3a.  v8.`okio.PeekSource.c` @type ^`int` := v0;
  #L168c3e.  v0:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L168c42.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L168c48.  v0:= temp @kind wide;
  #L168c4a.  v2:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L168c4e.  v0:= v0 - v2 @kind long;
  #L168c50.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L168c56.  v10:= temp @kind wide;
  #L168c58.  v2:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L168c5c.  v4:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L168c60.  v3:= v9 @kind object;
  #L168c62.  v6:= v10 @kind wide;
  #L168c64.  call temp:= `copyTo`(v2, v3, v4, v6) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L168c6a.  v0:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L168c6e.  v0:= v0 + v10 @kind long;
  #L168c70.  v8.`okio.PeekSource.e` @type ^`long` := v0 @kind wide;
  #L168c74.  return v10 @kind wide;
  #L168c76.  v9:= new `java.lang.IllegalStateException`;
  #L168c7a.  v10:= "Peek source is invalid because upstream source was used" @kind object;
  #L168c7e.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L168c84.  v10:= temp @kind object;
  #L168c86.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168c8c.  throw v9;
  #L168c8e.  v9:= new `java.lang.IllegalStateException`;
  #L168c92.  v10:= "closed" @kind object;
  #L168c96.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L168c9c.  v10:= temp @kind object;
  #L168c9e.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168ca4.  throw v9;
  #L168ca6.  v9:= new `java.lang.StringBuilder`;
  #L168caa.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L168cb0.  v0:= "byteCount < 0: " @kind object;
  #L168cb4.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168cba.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L168cc0.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L168cc6.  v9:= temp @kind object;
  #L168cc8.  v10:= new `java.lang.IllegalArgumentException`;
  #L168ccc.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L168cd2.  v9:= temp @kind object;
  #L168cd4.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168cda.  throw v10;
}
procedure `okio.Timeout` `timeout`(`okio.PeekSource` v1 @kind this) @signature `Lokio/PeekSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L168cec.  v0:= v1.`okio.PeekSource.f` @type ^`okio.BufferedSource` @kind object;
  #L168cf0.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L168cf6.  v0:= temp @kind object;
  #L168cf8.  return v0 @kind object;
}
