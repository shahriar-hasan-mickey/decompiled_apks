record `okio.RealBufferedSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.bufferField` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag PUBLIC;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16a500.  v0:= "sink" @kind object;
  #L16a504.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a50a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16a510.  v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v2 @kind object;
  #L16a514.  v2:= new `okio.Buffer`;
  #L16a518.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L16a51e.  v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` := v2 @kind object;
  #L16a522.  return @kind void;
}
procedure `void` `getBuffer$annotations`() @signature `Lokio/RealBufferedSink;.getBuffer$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L16a62c.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169e20.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169e24.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16a534.  v0:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a538.  if v0 == 0 then goto L16a53e;
  #L16a53c.  goto L16a590;
  #L16a53e.  v0:= 0I;
  #L16a540.  v1:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a544.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a54a.  v1:= temp @kind wide;
  #L16a54c.  v3:= 0L;
  #L16a550.  v5:= lcmp(v1, v3);
  #L16a554.  if v5 <= 0 then goto L16a572;
  #L16a558.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L16a55c.  v2:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a560.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a566.  v3:= temp @kind wide;
  #L16a568.  call `write`(v1, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L16a56e.  goto L16a572;
  #L16a570.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16a572.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L16a576.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L16a57c.  goto L16a586;
  #L16a57e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16a580.  if v0 != 0 then goto L16a586;
  #L16a584.  v0:= v1 @kind object;
  #L16a586.  v1:= 1I;
  #L16a588.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L16a58c.  if v0 != 0 then goto L16a592;
  #L16a590.  return @kind void;
  #L16a592.  throw v0;
  catch `java.lang.Throwable` @[L16a540..L16a56e] goto L16a570;
  catch `java.lang.Throwable` @[L16a572..L16a57c] goto L16a57e;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L169e50.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169e54.  v0:= v0 ^~ 1;
  #L169e58.  if v0 == 0 then goto L169e84;
  #L169e5c.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169e60.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L169e66.  v0:= temp @kind wide;
  #L169e68.  v2:= 0L;
  #L169e6c.  v4:= lcmp(v0, v2);
  #L169e70.  if v4 <= 0 then goto L169e82;
  #L169e74.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L169e78.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169e7c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L169e82.  return v5 @kind object;
  #L169e84.  v0:= new `java.lang.IllegalStateException`;
  #L169e88.  v1:= "closed" @kind object;
  #L169e8c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169e92.  v1:= temp @kind object;
  #L169e94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169e9a.  throw v0;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L169eac.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169eb0.  v0:= v0 ^~ 1;
  #L169eb4.  if v0 == 0 then goto L169ee0;
  #L169eb8.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169ebc.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L169ec2.  v0:= temp @kind wide;
  #L169ec4.  v2:= 0L;
  #L169ec8.  v4:= lcmp(v0, v2);
  #L169ecc.  if v4 <= 0 then goto L169ede;
  #L169ed0.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L169ed4.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169ed8.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L169ede.  return v5 @kind object;
  #L169ee0.  v0:= new `java.lang.IllegalStateException`;
  #L169ee4.  v1:= "closed" @kind object;
  #L169ee8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169eee.  v1:= temp @kind object;
  #L169ef0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169ef6.  throw v0;
}
procedure `void` `flush`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16a5bc.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a5c0.  v0:= v0 ^~ 1;
  #L16a5c4.  if v0 == 0 then goto L16a602;
  #L16a5c8.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a5cc.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a5d2.  v0:= temp @kind wide;
  #L16a5d4.  v2:= 0L;
  #L16a5d8.  v4:= lcmp(v0, v2);
  #L16a5dc.  if v4 <= 0 then goto L16a5f6;
  #L16a5e0.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L16a5e4.  v1:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a5e8.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L16a5ee.  v2:= temp @kind wide;
  #L16a5f0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L16a5f6.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L16a5fa.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L16a600.  return @kind void;
  #L16a602.  v0:= new `java.lang.IllegalStateException`;
  #L16a606.  v1:= "closed" @kind object;
  #L16a60a.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a610.  v1:= temp @kind object;
  #L16a612.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a618.  throw v0;
}
procedure `okio.Buffer` `getBuffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.getBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169e38.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169e3c.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169d08.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169d0c.  v0:= v0 ^~ 1;
  #L169d10.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169d78.  v0:= new `okio.RealBufferedSink$outputStream$1`;
  #L169d7c.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$outputStream$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L169d82.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a4e0.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L16a4e4.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L16a4ea.  v0:= temp @kind object;
  #L16a4ec.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L169d94.  v0:= new `java.lang.StringBuilder`;
  #L169d98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169d9e.  v1:= "buffer(" @kind object;
  #L169da2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169da8.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L169dac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169db2.  v1:= 41I;
  #L169db6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L169dbc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169dc2.  v0:= temp @kind object;
  #L169dc4.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169d24.  v0:= "source" @kind object;
  #L169d28.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L169d2e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169d32.  v0:= v0 ^~ 1;
  #L169d36.  if v0 == 0 then goto L169d4e;
  #L169d3a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169d3e.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L169d44.  v2:= temp;
  #L169d46.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L169d4c.  return v2;
  #L169d4e.  v2:= new `java.lang.IllegalStateException`;
  #L169d52.  v0:= "closed" @kind object;
  #L169d56.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169d5c.  v0:= temp @kind object;
  #L169d5e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169d64.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169fb0.  v0:= "byteString" @kind object;
  #L169fb4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L169fba.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169fbe.  v0:= v0 ^~ 1;
  #L169fc2.  if v0 == 0 then goto L169fda;
  #L169fc6.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169fca.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L169fd0.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L169fd6.  v2:= temp @kind object;
  #L169fd8.  return v2 @kind object;
  #L169fda.  v2:= new `java.lang.IllegalStateException`;
  #L169fde.  v0:= "closed" @kind object;
  #L169fe2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169fe8.  v0:= temp @kind object;
  #L169fea.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169ff0.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a004.  v0:= "byteString" @kind object;
  #L16a008.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a00e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a012.  v0:= v0 ^~ 1;
  #L16a016.  if v0 == 0 then goto L16a02e;
  #L16a01a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a01e.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @kind virtual;
  #L16a024.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a02a.  v2:= temp @kind object;
  #L16a02c.  return v2 @kind object;
  #L16a02e.  v2:= new `java.lang.IllegalStateException`;
  #L16a032.  v3:= "closed" @kind object;
  #L16a036.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a03c.  v3:= temp @kind object;
  #L16a03e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a044.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16a058.  v0:= "source" @kind object;
  #L16a05c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a062.  v0:= 0L;
  #L16a066.  v2:= lcmp(v7, v0);
  #L16a06a.  if v2 <= 0 then goto L16a09c;
  #L16a06e.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a072.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L16a078.  v0:= temp @kind wide;
  #L16a07a.  v2:= -1L;
  #L16a07e.  v4:= lcmp(v0, v2);
  #L16a082.  if v4 == 0 then goto L16a090;
  #L16a086.  v7:= v7 - v0 @kind long;
  #L16a088.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a08e.  goto L16a062;
  #L16a090.  v6:= new `java.io.EOFException`;
  #L16a094.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16a09a.  throw v6;
  #L16a09c.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169f08.  v0:= "source" @kind object;
  #L169f0c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L169f12.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169f16.  v0:= v0 ^~ 1;
  #L169f1a.  if v0 == 0 then goto L169f32;
  #L169f1e.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169f22.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L169f28.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L169f2e.  v2:= temp @kind object;
  #L169f30.  return v2 @kind object;
  #L169f32.  v2:= new `java.lang.IllegalStateException`;
  #L169f36.  v0:= "closed" @kind object;
  #L169f3a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169f40.  v0:= temp @kind object;
  #L169f42.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169f48.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L169f5c.  v0:= "source" @kind object;
  #L169f60.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L169f66.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L169f6a.  v0:= v0 ^~ 1;
  #L169f6e.  if v0 == 0 then goto L169f86;
  #L169f72.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169f76.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L169f7c.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L169f82.  v2:= temp @kind object;
  #L169f84.  return v2 @kind object;
  #L169f86.  v2:= new `java.lang.IllegalStateException`;
  #L169f8a.  v3:= "closed" @kind object;
  #L169f8e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L169f94.  v3:= temp @kind object;
  #L169f96.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169f9c.  throw v2;
}
procedure `void` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a640.  v0:= "source" @kind object;
  #L16a644.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a64a.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a64e.  v0:= v0 ^~ 1;
  #L16a652.  if v0 == 0 then goto L16a668;
  #L16a656.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a65a.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L16a660.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a666.  return @kind void;
  #L16a668.  v2:= new `java.lang.IllegalStateException`;
  #L16a66c.  v3:= "closed" @kind object;
  #L16a670.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a676.  v3:= temp @kind object;
  #L16a678.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a67e.  throw v2;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L169dd8.  v0:= "source" @kind object;
  #L169ddc.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L169de2.  v0:= 0L;
  #L169de6.  v2:= v7.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L169dea.  v3:= 8192I;
  #L169dee.  v3:= (`long`) v3 @kind i2l;
  #L169df0.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L169df6.  v2:= temp @kind wide;
  #L169df8.  v4:= -1L;
  #L169dfc.  v6:= lcmp(v2, v4);
  #L169e00.  if v6 != 0 then goto L169e06;
  #L169e04.  return v0 @kind wide;
  #L169e06.  v0:= v0 + v2 @kind long;
  #L169e08.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L169e0e.  goto L169de6;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a0b0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a0b4.  v0:= v0 ^~ 1;
  #L16a0b8.  if v0 == 0 then goto L16a0d0;
  #L16a0bc.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a0c0.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L16a0c6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a0cc.  v2:= temp @kind object;
  #L16a0ce.  return v2 @kind object;
  #L16a0d0.  v2:= new `java.lang.IllegalStateException`;
  #L16a0d4.  v0:= "closed" @kind object;
  #L16a0d8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a0de.  v0:= temp @kind object;
  #L16a0e0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a0e6.  throw v2;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a0f8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a0fc.  v0:= v0 ^~ 1;
  #L16a100.  if v0 == 0 then goto L16a118;
  #L16a104.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a108.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L16a10e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a114.  v2:= temp @kind object;
  #L16a116.  return v2 @kind object;
  #L16a118.  v2:= new `java.lang.IllegalStateException`;
  #L16a11c.  v3:= "closed" @kind object;
  #L16a120.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a126.  v3:= temp @kind object;
  #L16a128.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a12e.  throw v2;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a140.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a144.  v0:= v0 ^~ 1;
  #L16a148.  if v0 == 0 then goto L16a160;
  #L16a14c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a150.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L16a156.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a15c.  v2:= temp @kind object;
  #L16a15e.  return v2 @kind object;
  #L16a160.  v2:= new `java.lang.IllegalStateException`;
  #L16a164.  v3:= "closed" @kind object;
  #L16a168.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a16e.  v3:= temp @kind object;
  #L16a170.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a176.  throw v2;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a188.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a18c.  v0:= v0 ^~ 1;
  #L16a190.  if v0 == 0 then goto L16a1a8;
  #L16a194.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a198.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L16a19e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a1a4.  v2:= temp @kind object;
  #L16a1a6.  return v2 @kind object;
  #L16a1a8.  v2:= new `java.lang.IllegalStateException`;
  #L16a1ac.  v0:= "closed" @kind object;
  #L16a1b0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a1b6.  v0:= temp @kind object;
  #L16a1b8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a1be.  throw v2;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a1d0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a1d4.  v0:= v0 ^~ 1;
  #L16a1d8.  if v0 == 0 then goto L16a1f0;
  #L16a1dc.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a1e0.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L16a1e6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a1ec.  v2:= temp @kind object;
  #L16a1ee.  return v2 @kind object;
  #L16a1f0.  v2:= new `java.lang.IllegalStateException`;
  #L16a1f4.  v0:= "closed" @kind object;
  #L16a1f8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a1fe.  v0:= temp @kind object;
  #L16a200.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a206.  throw v2;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a218.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a21c.  v0:= v0 ^~ 1;
  #L16a220.  if v0 == 0 then goto L16a238;
  #L16a224.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a228.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L16a22e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a234.  v2:= temp @kind object;
  #L16a236.  return v2 @kind object;
  #L16a238.  v2:= new `java.lang.IllegalStateException`;
  #L16a23c.  v3:= "closed" @kind object;
  #L16a240.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a246.  v3:= temp @kind object;
  #L16a248.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a24e.  throw v2;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a260.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a264.  v0:= v0 ^~ 1;
  #L16a268.  if v0 == 0 then goto L16a280;
  #L16a26c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a270.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L16a276.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a27c.  v2:= temp @kind object;
  #L16a27e.  return v2 @kind object;
  #L16a280.  v2:= new `java.lang.IllegalStateException`;
  #L16a284.  v3:= "closed" @kind object;
  #L16a288.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a28e.  v3:= temp @kind object;
  #L16a290.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a296.  throw v2;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a2a8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a2ac.  v0:= v0 ^~ 1;
  #L16a2b0.  if v0 == 0 then goto L16a2c8;
  #L16a2b4.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a2b8.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L16a2be.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a2c4.  v2:= temp @kind object;
  #L16a2c6.  return v2 @kind object;
  #L16a2c8.  v2:= new `java.lang.IllegalStateException`;
  #L16a2cc.  v0:= "closed" @kind object;
  #L16a2d0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a2d6.  v0:= temp @kind object;
  #L16a2d8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a2de.  throw v2;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a2f0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a2f4.  v0:= v0 ^~ 1;
  #L16a2f8.  if v0 == 0 then goto L16a310;
  #L16a2fc.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a300.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L16a306.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a30c.  v2:= temp @kind object;
  #L16a30e.  return v2 @kind object;
  #L16a310.  v2:= new `java.lang.IllegalStateException`;
  #L16a314.  v0:= "closed" @kind object;
  #L16a318.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a31e.  v0:= temp @kind object;
  #L16a320.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a326.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a338.  v0:= "string" @kind object;
  #L16a33c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a342.  v0:= "charset" @kind object;
  #L16a346.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a34c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a350.  v0:= v0 ^~ 1;
  #L16a354.  if v0 == 0 then goto L16a36c;
  #L16a358.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a35c.  call temp:= `writeString`(v0, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L16a362.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a368.  v2:= temp @kind object;
  #L16a36a.  return v2 @kind object;
  #L16a36c.  v2:= new `java.lang.IllegalStateException`;
  #L16a370.  v3:= "closed" @kind object;
  #L16a374.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a37a.  v3:= temp @kind object;
  #L16a37c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a382.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a394.  v0:= "string" @kind object;
  #L16a398.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a39e.  v0:= "charset" @kind object;
  #L16a3a2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a3a8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a3ac.  v0:= v0 ^~ 1;
  #L16a3b0.  if v0 == 0 then goto L16a3c8;
  #L16a3b4.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a3b8.  call temp:= `writeString`(v0, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L16a3be.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a3c4.  v2:= temp @kind object;
  #L16a3c6.  return v2 @kind object;
  #L16a3c8.  v2:= new `java.lang.IllegalStateException`;
  #L16a3cc.  v3:= "closed" @kind object;
  #L16a3d0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a3d6.  v3:= temp @kind object;
  #L16a3d8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a3de.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a3f0.  v0:= "string" @kind object;
  #L16a3f4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a3fa.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a3fe.  v0:= v0 ^~ 1;
  #L16a402.  if v0 == 0 then goto L16a41a;
  #L16a406.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a40a.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L16a410.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a416.  v2:= temp @kind object;
  #L16a418.  return v2 @kind object;
  #L16a41a.  v2:= new `java.lang.IllegalStateException`;
  #L16a41e.  v0:= "closed" @kind object;
  #L16a422.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a428.  v0:= temp @kind object;
  #L16a42a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a430.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a444.  v0:= "string" @kind object;
  #L16a448.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16a44e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a452.  v0:= v0 ^~ 1;
  #L16a456.  if v0 == 0 then goto L16a46e;
  #L16a45a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a45e.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L16a464.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a46a.  v2:= temp @kind object;
  #L16a46c.  return v2 @kind object;
  #L16a46e.  v2:= new `java.lang.IllegalStateException`;
  #L16a472.  v3:= "closed" @kind object;
  #L16a476.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a47c.  v3:= temp @kind object;
  #L16a47e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a484.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16a498.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L16a49c.  v0:= v0 ^~ 1;
  #L16a4a0.  if v0 == 0 then goto L16a4b8;
  #L16a4a4.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L16a4a8.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L16a4ae.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L16a4b4.  v2:= temp @kind object;
  #L16a4b6.  return v2 @kind object;
  #L16a4b8.  v2:= new `java.lang.IllegalStateException`;
  #L16a4bc.  v0:= "closed" @kind object;
  #L16a4c0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a4c6.  v0:= temp @kind object;
  #L16a4c8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a4ce.  throw v2;
}
