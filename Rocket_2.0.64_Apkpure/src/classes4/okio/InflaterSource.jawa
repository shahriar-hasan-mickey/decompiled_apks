record `okio.InflaterSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `int` `okio.InflaterSource.a` @AccessFlag PRIVATE;
  `boolean` `okio.InflaterSource.b` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.InflaterSource.c` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.InflaterSource.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.InflaterSource` v1 @kind this, `okio.BufferedSource` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L167990.  v0:= "source" @kind object;
  #L167994.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16799a.  v0:= "inflater" @kind object;
  #L16799e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1679a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1679aa.  v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1679ae.  v1.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` := v3 @kind object;
  #L1679b2.  return @kind void;
}
procedure `void` `<init>`(`okio.InflaterSource` v1 @kind this, `okio.Source` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Lokio/InflaterSource;.<init>:(Lokio/Source;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1679c4.  v0:= "source" @kind object;
  #L1679c8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1679ce.  v0:= "inflater" @kind object;
  #L1679d2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1679d8.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1679de.  v2:= temp @kind object;
  #L1679e0.  call `<init>`(v1, v2, v3) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L1679e6.  return @kind void;
}
procedure `void` `a`(`okio.InflaterSource` v4 @kind this) @signature `Lokio/InflaterSource;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L167a30.  v0:= v4.`okio.InflaterSource.a` @type ^`int`;
  #L167a34.  if v0 != 0 then goto L167a3a;
  #L167a38.  return @kind void;
  #L167a3a.  v1:= v4.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L167a3e.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L167a44.  v1:= temp;
  #L167a46.  v0:= v0 - v1 @kind int;
  #L167a48.  v1:= v4.`okio.InflaterSource.a` @type ^`int`;
  #L167a4c.  v1:= v1 - v0 @kind int;
  #L167a4e.  v4.`okio.InflaterSource.a` @type ^`int` := v1;
  #L167a52.  v1:= v4.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L167a56.  v2:= (`long`) v0 @kind i2l;
  #L167a58.  call `skip`(v1, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L167a5e.  return @kind void;
}
procedure `void` `close`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1679f8.  v0:= v1.`okio.InflaterSource.b` @type ^`boolean` @kind boolean;
  #L1679fc.  if v0 == 0 then goto L167a02;
  #L167a00.  return @kind void;
  #L167a02.  v0:= v1.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L167a06.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L167a0c.  v0:= 1I;
  #L167a0e.  v1.`okio.InflaterSource.b` @type ^`boolean` := v0 @kind boolean;
  #L167a12.  v0:= v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L167a16.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L167a1c.  return @kind void;
}
procedure `long` `read`(`okio.InflaterSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1677c8.  v0:= "sink" @kind object;
  #L1677cc.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1677d2.  call temp:= `readOrInflate`(v5, v6, v7) @signature `Lokio/InflaterSource;.readOrInflate:(Lokio/Buffer;J)J` @kind virtual;
  #L1677d8.  v0:= temp @kind wide;
  #L1677da.  v2:= 0L;
  #L1677de.  v4:= lcmp(v0, v2);
  #L1677e2.  if v4 <= 0 then goto L1677e8;
  #L1677e6.  return v0 @kind wide;
  #L1677e8.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1677ec.  call temp:= `finished`(v0) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L1677f2.  v0:= temp;
  #L1677f4.  if v0 != 0 then goto L16782c;
  #L1677f8.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1677fc.  call temp:= `needsDictionary`(v0) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L167802.  v0:= temp;
  #L167804.  if v0 == 0 then goto L16780a;
  #L167808.  goto L16782c;
  #L16780a.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L16780e.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L167814.  v0:= temp;
  #L167816.  if v0 != 0 then goto L16781c;
  #L16781a.  goto L1677d2;
  #L16781c.  v6:= new `java.io.EOFException`;
  #L167820.  v7:= "source exhausted prematurely" @kind object;
  #L167824.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16782a.  throw v6;
  #L16782c.  v6:= -1L;
  #L167830.  return v6 @kind wide;
}
procedure `long` `readOrInflate`(`okio.InflaterSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/InflaterSource;.readOrInflate:(Lokio/Buffer;J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L167844.  v0:= "sink" @kind object;
  #L167848.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L16784e.  v0:= 1I;
  #L167850.  v1:= 0L;
  #L167854.  v3:= lcmp(v7, v1);
  #L167858.  if v3 < 0 then goto L167860;
  #L16785c.  v4:= 1I;
  #L16785e.  goto L167862;
  #L167860.  v4:= 0I;
  #L167862.  if v4 == 0 then goto L16791a;
  #L167866.  v4:= v5.`okio.InflaterSource.b` @type ^`boolean` @kind boolean;
  #L16786a.  v4:= v4 ^~ v0 @kind int;
  #L16786c.  if v4 == 0 then goto L167902;
  #L167870.  if v3 != 0 then goto L167876;
  #L167874.  return v1 @kind wide;
  #L167876.  call temp:= `writableSegment$okio`(v6, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L16787c.  v0:= temp @kind object;
  #L16787e.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L167882.  v3:= v3 - 8192;
  #L167886.  v3:= (`long`) v3 @kind i2l;
  #L167888.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L16788e.  v7:= temp @kind wide;
  #L167890.  v8:= (`int`) v7 @kind l2i;
  #L167892.  call temp:= `refill`(v5) @signature `Lokio/InflaterSource;.refill:()Z` @kind virtual;
  #L167898.  v7:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L16789c.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1678a0.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1678a4.  call temp:= `inflate`(v7, v3, v4, v8) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L1678aa.  v7:= temp;
  #L1678ac.  call `a`(v5) @signature `Lokio/InflaterSource;.a:()V` @kind direct;
  #L1678b2.  if v7 <= 0 then goto L1678d4;
  #L1678b6.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L1678ba.  v8:= v8 + v7 @kind int;
  #L1678bc.  v0.`okio.Segment.limit` @type ^`int` := v8;
  #L1678c0.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1678c6.  v0:= temp @kind wide;
  #L1678c8.  v7:= (`long`) v7 @kind i2l;
  #L1678ca.  v0:= v0 + v7 @kind long;
  #L1678cc.  call `setSize$okio`(v6, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1678d2.  return v7 @kind wide;
  #L1678d4.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L1678d8.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L1678dc.  if v7 != v8 then goto L1678f2;
  #L1678e0.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1678e6.  v7:= temp @kind object;
  #L1678e8.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1678ec.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1678f2.  return v1 @kind wide;
  #L1678f4.  v6:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L1678f6.  v7:= new `java.io.IOException`;
  #L1678fa.  call `<init>`(v7, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L167900.  throw v7;
  #L167902.  v6:= new `java.lang.IllegalStateException`;
  #L167906.  v7:= "closed" @kind object;
  #L16790a.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L167910.  v7:= temp @kind object;
  #L167912.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167918.  throw v6;
  #L16791a.  v6:= new `java.lang.StringBuilder`;
  #L16791e.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167924.  v0:= "byteCount < 0: " @kind object;
  #L167928.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16792e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L167934.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16793a.  v6:= temp @kind object;
  #L16793c.  v7:= new `java.lang.IllegalArgumentException`;
  #L167940.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L167946.  v6:= temp @kind object;
  #L167948.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16794e.  throw v7;
  catch `java.util.zip.DataFormatException` @[L167876..L1678f2] goto L1678f4;
}
procedure `boolean` `refill`(`okio.InflaterSource` v5 @kind this) @signature `Lokio/InflaterSource;.refill:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16775c.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L167760.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L167766.  v0:= temp;
  #L167768.  v1:= 0I;
  #L16776a.  if v0 != 0 then goto L167770;
  #L16776e.  return v1;
  #L167770.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L167774.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L16777a.  v0:= temp;
  #L16777c.  if v0 == 0 then goto L167784;
  #L167780.  v0:= 1I;
  #L167782.  return v0;
  #L167784.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L167788.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L16778e.  v0:= temp @kind object;
  #L167790.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L167794.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L16779a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L16779e.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1677a2.  v2:= v2 - v3 @kind int;
  #L1677a4.  v5.`okio.InflaterSource.a` @type ^`int` := v2;
  #L1677a8.  v4:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1677ac.  v0:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1677b0.  call `setInput`(v4, v0, v3, v2) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L1677b6.  return v1;
}
procedure `okio.Timeout` `timeout`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167970.  v0:= v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L167974.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L16797a.  v0:= temp @kind object;
  #L16797c.  return v0 @kind object;
}
