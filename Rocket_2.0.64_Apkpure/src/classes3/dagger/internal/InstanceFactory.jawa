record `dagger.internal.InstanceFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.Factory` @kind interface, `dagger.Lazy` @kind interface {
  `java.lang.Object` `dagger.internal.InstanceFactory.a` @AccessFlag PRIVATE_FINAL;
}
global `dagger.internal.InstanceFactory` `@@dagger.internal.InstanceFactory.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/InstanceFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3cd348.  v0:= new `dagger.internal.InstanceFactory`;
  #L3cd34c.  v1:= 0I;
  #L3cd34e.  call `<init>`(v0, v1) @signature `Ldagger/internal/InstanceFactory;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3cd354.  `@@dagger.internal.InstanceFactory.b` @type ^`dagger.internal.InstanceFactory` := v0 @kind object;
  #L3cd358.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.InstanceFactory` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ldagger/internal/InstanceFactory;.<init>:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cd36c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd372.  v0.`dagger.internal.InstanceFactory.a` @type ^`java.lang.Object` := v1 @kind object;
  #L3cd376.  return @kind void;
}
procedure `dagger.internal.InstanceFactory` `a`() @signature `Ldagger/internal/InstanceFactory;.a:()Ldagger/internal/InstanceFactory;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3cd318.  v0:= `@@dagger.internal.InstanceFactory.b` @type ^`dagger.internal.InstanceFactory` @kind object;
  #L3cd31c.  return v0 @kind object;
}
procedure `dagger.internal.Factory` `create`(`java.lang.Object` v2 @kind object) @signature `Ldagger/internal/InstanceFactory;.create:(Ljava/lang/Object;)Ldagger/internal/Factory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3cd2c4.  v0:= new `dagger.internal.InstanceFactory`;
  #L3cd2c8.  v1:= "instance cannot be null" @kind object;
  #L3cd2cc.  call temp:= `checkNotNull`(v2, v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cd2d2.  v2:= temp @kind object;
  #L3cd2d4.  call `<init>`(v0, v2) @signature `Ldagger/internal/InstanceFactory;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3cd2da.  return v0 @kind object;
}
procedure `dagger.internal.Factory` `createNullable`(`java.lang.Object` v1 @kind object) @signature `Ldagger/internal/InstanceFactory;.createNullable:(Ljava/lang/Object;)Ldagger/internal/Factory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd2ec.  if v1 != 0 then goto L3cd2fa;
  #L3cd2f0.  call temp:= `a`() @signature `Ldagger/internal/InstanceFactory;.a:()Ldagger/internal/InstanceFactory;` @kind static;
  #L3cd2f6.  v1:= temp @kind object;
  #L3cd2f8.  goto L3cd306;
  #L3cd2fa.  v0:= new `dagger.internal.InstanceFactory`;
  #L3cd2fe.  call `<init>`(v0, v1) @signature `Ldagger/internal/InstanceFactory;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3cd304.  v1:= v0 @kind object;
  #L3cd306.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.InstanceFactory` v1 @kind this) @signature `Ldagger/internal/InstanceFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cd330.  v0:= v1.`dagger.internal.InstanceFactory.a` @type ^`java.lang.Object` @kind object;
  #L3cd334.  return v0 @kind object;
}
