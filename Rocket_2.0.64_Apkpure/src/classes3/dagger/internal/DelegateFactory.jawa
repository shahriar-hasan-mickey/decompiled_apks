record `dagger.internal.DelegateFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.Factory` @kind interface {
  `javax.inject.Provider` `dagger.internal.DelegateFactory.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`dagger.internal.DelegateFactory` v0 @kind this) @signature `Ldagger/internal/DelegateFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3cd0e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd0ea.  return @kind void;
}
procedure `void` `setDelegate`(`javax.inject.Provider` v1 @kind object, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/DelegateFactory;.setDelegate:(Ljavax/inject/Provider;Ljavax/inject/Provider;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd0fc.  call temp:= `checkNotNull`(v2) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd102.  v1:= (`dagger.internal.DelegateFactory`) v1 @kind object;
  #L3cd106.  v0:= v1.`dagger.internal.DelegateFactory.a` @type ^`javax.inject.Provider` @kind object;
  #L3cd10a.  if v0 != 0 then goto L3cd114;
  #L3cd10e.  v1.`dagger.internal.DelegateFactory.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L3cd112.  return @kind void;
  #L3cd114.  v1:= new `java.lang.IllegalStateException`;
  #L3cd118.  call `<init>`(v1) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3cd11e.  throw v1;
}
procedure `javax.inject.Provider` `a`(`dagger.internal.DelegateFactory` v1 @kind this) @signature `Ldagger/internal/DelegateFactory;.a:()Ljavax/inject/Provider;` @AccessFlag  {
    temp;
    v0;

  #L3cd0c0.  v0:= v1.`dagger.internal.DelegateFactory.a` @type ^`javax.inject.Provider` @kind object;
  #L3cd0c4.  call temp:= `checkNotNull`(v0) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd0ca.  v0:= temp @kind object;
  #L3cd0cc.  v0:= (`javax.inject.Provider`) v0 @kind object;
  #L3cd0d0.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.DelegateFactory` v1 @kind this) @signature `Ldagger/internal/DelegateFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cd090.  v0:= v1.`dagger.internal.DelegateFactory.a` @type ^`javax.inject.Provider` @kind object;
  #L3cd094.  if v0 == 0 then goto L3cd0a2;
  #L3cd098.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L3cd09e.  v0:= temp @kind object;
  #L3cd0a0.  return v0 @kind object;
  #L3cd0a2.  v0:= new `java.lang.IllegalStateException`;
  #L3cd0a6.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3cd0ac.  throw v0;
}
procedure `void` `setDelegatedProvider`(`dagger.internal.DelegateFactory` v0 @kind this, `javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DelegateFactory;.setDelegatedProvider:(Ljavax/inject/Provider;)V` @AccessFlag PUBLIC {
    temp;

  #L3cd130.  call `setDelegate`(v0, v1) @signature `Ldagger/internal/DelegateFactory;.setDelegate:(Ljavax/inject/Provider;Ljavax/inject/Provider;)V` @kind static;
  #L3cd136.  return @kind void;
}
