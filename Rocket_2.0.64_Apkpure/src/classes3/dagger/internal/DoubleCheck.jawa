record `dagger.internal.DoubleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface, `dagger.Lazy` @kind interface {
  `javax.inject.Provider` `dagger.internal.DoubleCheck.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `dagger.internal.DoubleCheck.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.internal.DoubleCheck.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/DoubleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cd280.  v0:= new `java.lang.Object`;
  #L3cd284.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd28a.  `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` := v0 @kind object;
  #L3cd28e.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.DoubleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3cd2a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd2a6.  v0:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L3cd2aa.  v1.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3cd2ae.  v1.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L3cd2b2.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/DoubleCheck;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3cd1e0.  v0:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L3cd1e4.  if v3 == v0 then goto L3cd1ec;
  #L3cd1e8.  v0:= 1I;
  #L3cd1ea.  goto L3cd1ee;
  #L3cd1ec.  v0:= 0I;
  #L3cd1ee.  if v0 == 0 then goto L3cd240;
  #L3cd1f2.  if v3 != v4 then goto L3cd1f8;
  #L3cd1f6.  goto L3cd240;
  #L3cd1f8.  v0:= new `java.lang.IllegalStateException`;
  #L3cd1fc.  v1:= new `java.lang.StringBuilder`;
  #L3cd200.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd206.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L3cd20a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd210.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd216.  v3:= " & " @kind object;
  #L3cd21a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd220.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd226.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L3cd22a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd230.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd236.  v3:= temp @kind object;
  #L3cd238.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd23e.  throw v0;
  #L3cd240.  return v4 @kind object;
}
procedure `dagger.Lazy` `lazy`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.lazy:(Ljavax/inject/Provider;)Ldagger/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd148.  v0:= instanceof @variable v1 @type ^`dagger.Lazy` @kind boolean;
  #L3cd14c.  if v0 == 0 then goto L3cd156;
  #L3cd150.  v1:= (`dagger.Lazy`) v1 @kind object;
  #L3cd154.  return v1 @kind object;
  #L3cd156.  v0:= new `dagger.internal.DoubleCheck`;
  #L3cd15a.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd160.  v1:= temp @kind object;
  #L3cd162.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L3cd166.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L3cd16c.  return v0 @kind object;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd254.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd25a.  v0:= instanceof @variable v1 @type ^`dagger.internal.DoubleCheck` @kind boolean;
  #L3cd25e.  if v0 == 0 then goto L3cd264;
  #L3cd262.  return v1 @kind object;
  #L3cd264.  v0:= new `dagger.internal.DoubleCheck`;
  #L3cd268.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L3cd26e.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.DoubleCheck` v2 @kind this) @signature `Ldagger/internal/DoubleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd180.  v0:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L3cd184.  v1:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L3cd188.  if v0 != v1 then goto L3cd1c2;
  #L3cd18c.  @monitorenter v2
  #L3cd18e.  v0:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L3cd192.  if v0 != v1 then goto L3cd1b8;
  #L3cd196.  v0:= v2.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` @kind object;
  #L3cd19a.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L3cd1a0.  v0:= temp @kind object;
  #L3cd1a2.  v1:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L3cd1a6.  call temp:= `a`(v1, v0) @signature `Ldagger/internal/DoubleCheck;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd1ac.  v1:= temp @kind object;
  #L3cd1ae.  v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v1 @kind object;
  #L3cd1b2.  v1:= 0I;
  #L3cd1b4.  v2.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L3cd1b8.  @monitorexit v2
  #L3cd1ba.  goto L3cd1c2;
  #L3cd1bc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3cd1be.  @monitorexit v2
  #L3cd1c0.  throw v0;
  #L3cd1c2.  return v0 @kind object;
  catch `java.lang.Throwable` @[L3cd18e..L3cd1c0] goto L3cd1bc;
}
