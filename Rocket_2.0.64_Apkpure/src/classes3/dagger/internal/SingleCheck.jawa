record `dagger.internal.SingleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface {
  `javax.inject.Provider` `dagger.internal.SingleCheck.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `dagger.internal.SingleCheck.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.internal.SingleCheck.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/SingleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cde54.  v0:= new `java.lang.Object`;
  #L3cde58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cde5e.  `@@dagger.internal.SingleCheck.c` @type ^`java.lang.Object` := v0 @kind object;
  #L3cde62.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SingleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/SingleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3cde74.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cde7a.  v0:= `@@dagger.internal.SingleCheck.c` @type ^`java.lang.Object` @kind object;
  #L3cde7e.  v1.`dagger.internal.SingleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3cde82.  v1.`dagger.internal.SingleCheck.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L3cde86.  return @kind void;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/SingleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cde18.  v0:= instanceof @variable v1 @type ^`dagger.internal.SingleCheck` @kind boolean;
  #L3cde1c.  if v0 != 0 then goto L3cde42;
  #L3cde20.  v0:= instanceof @variable v1 @type ^`dagger.internal.DoubleCheck` @kind boolean;
  #L3cde24.  if v0 == 0 then goto L3cde2a;
  #L3cde28.  goto L3cde42;
  #L3cde2a.  v0:= new `dagger.internal.SingleCheck`;
  #L3cde2e.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cde34.  v1:= temp @kind object;
  #L3cde36.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L3cde3a.  call `<init>`(v0, v1) @signature `Ldagger/internal/SingleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L3cde40.  return v0 @kind object;
  #L3cde42.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.SingleCheck` v2 @kind this) @signature `Ldagger/internal/SingleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cddd8.  v0:= v2.`dagger.internal.SingleCheck.b` @type ^`java.lang.Object` @kind object;
  #L3cdddc.  v1:= `@@dagger.internal.SingleCheck.c` @type ^`java.lang.Object` @kind object;
  #L3cdde0.  if v0 != v1 then goto L3cde04;
  #L3cdde4.  v0:= v2.`dagger.internal.SingleCheck.a` @type ^`javax.inject.Provider` @kind object;
  #L3cdde8.  if v0 != 0 then goto L3cddf2;
  #L3cddec.  v0:= v2.`dagger.internal.SingleCheck.b` @type ^`java.lang.Object` @kind object;
  #L3cddf0.  goto L3cde04;
  #L3cddf2.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L3cddf8.  v0:= temp @kind object;
  #L3cddfa.  v2.`dagger.internal.SingleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3cddfe.  v1:= 0I;
  #L3cde00.  v2.`dagger.internal.SingleCheck.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L3cde04.  return v0 @kind object;
}
