record `dagger.internal.DaggerCollections` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`dagger.internal.DaggerCollections` v0 @kind this) @signature `Ldagger/internal/DaggerCollections;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cd078.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd07e.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ccfc4.  v0:= 3I;
  #L3ccfc6.  if v1 >= v0 then goto L3ccfd0;
  #L3ccfca.  v1:= v1 + 1;
  #L3ccfce.  return v1;
  #L3ccfd0.  v0:= 2.0F;
  #L3ccfd4.  if v1 >= v0 then goto L3ccfea;
  #L3ccfd8.  v1:= (`float`) v1 @kind i2f;
  #L3ccfda.  v0:= 0.75F;
  #L3ccfde.  v1:= v1 / v0 @kind float;
  #L3ccfe0.  v0:= 1.0F;
  #L3ccfe4.  v1:= v1 + v0 @kind float;
  #L3ccfe6.  v1:= (`int`) v1 @kind f2i;
  #L3ccfe8.  return v1;
  #L3ccfea.  v1:= 2147483647I;
  #L3ccff0.  return v1;
}
procedure `java.util.HashSet` `b`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.b:(I)Ljava/util/HashSet;` @AccessFlag STATIC {
    temp;
    v0;

  #L3cd004.  v0:= new `java.util.HashSet`;
  #L3cd008.  call temp:= `a`(v1) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @kind static;
  #L3cd00e.  v1:= temp;
  #L3cd010.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L3cd016.  return v0 @kind object;
}
procedure `boolean` `hasDuplicates`(`java.util.List` v3 @kind object) @signature `Ldagger/internal/DaggerCollections;.hasDuplicates:(Ljava/util/List;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ccf80.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3ccf86.  v0:= temp;
  #L3ccf88.  v1:= 0I;
  #L3ccf8a.  v2:= 2I;
  #L3ccf8c.  if v0 >= v2 then goto L3ccf92;
  #L3ccf90.  return v1;
  #L3ccf92.  v0:= new `java.util.HashSet`;
  #L3ccf96.  call `<init>`(v0, v3) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3ccf9c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3ccfa2.  v3:= temp;
  #L3ccfa4.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3ccfaa.  v0:= temp;
  #L3ccfac.  if v3 == v0 then goto L3ccfb2;
  #L3ccfb0.  v1:= 1I;
  #L3ccfb2.  return v1;
}
procedure `java.util.LinkedHashMap` `newLinkedHashMapWithExpectedSize`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd028.  v0:= new `java.util.LinkedHashMap`;
  #L3cd02c.  call temp:= `a`(v1) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @kind static;
  #L3cd032.  v1:= temp;
  #L3cd034.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L3cd03a.  return v0 @kind object;
}
procedure `java.util.List` `presizedList`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.presizedList:(I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd04c.  if v1 != 0 then goto L3cd05a;
  #L3cd050.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3cd056.  v1:= temp @kind object;
  #L3cd058.  return v1 @kind object;
  #L3cd05a.  v0:= new `java.util.ArrayList`;
  #L3cd05e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3cd064.  return v0 @kind object;
}
