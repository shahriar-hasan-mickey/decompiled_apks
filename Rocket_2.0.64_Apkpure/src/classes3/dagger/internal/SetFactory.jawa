record `dagger.internal.SetFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.Factory` @kind interface {
  `java.util.List` `dagger.internal.SetFactory.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `dagger.internal.SetFactory.b` @AccessFlag PRIVATE_FINAL;
}
global `dagger.internal.Factory` `@@dagger.internal.SetFactory.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/SetFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3cdd78.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L3cdd7e.  v0:= temp @kind object;
  #L3cdd80.  call temp:= `create`(v0) @signature `Ldagger/internal/InstanceFactory;.create:(Ljava/lang/Object;)Ldagger/internal/Factory;` @kind static;
  #L3cdd86.  v0:= temp @kind object;
  #L3cdd88.  `@@dagger.internal.SetFactory.c` @type ^`dagger.internal.Factory` := v0 @kind object;
  #L3cdd8c.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cdda0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cdda6.  v0.`dagger.internal.SetFactory.a` @type ^`java.util.List` := v1 @kind object;
  #L3cddaa.  v0.`dagger.internal.SetFactory.b` @type ^`java.util.List` := v2 @kind object;
  #L3cddae.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object, `dagger.internal.SetFactory$a` v3 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;Ldagger/internal/SetFactory$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3cddc0.  call `<init>`(v0, v1, v2) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L3cddc6.  return @kind void;
}
procedure `dagger.internal.SetFactory$Builder` `builder`(`int` v2 , `int` v3 ) @signature `Ldagger/internal/SetFactory;.builder:(II)Ldagger/internal/SetFactory$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3cdc28.  v0:= new `dagger.internal.SetFactory$Builder`;
  #L3cdc2c.  v1:= 0I;
  #L3cdc2e.  call `<init>`(v0, v2, v3, v1) @signature `Ldagger/internal/SetFactory$Builder;.<init>:(IILdagger/internal/SetFactory$a;)V` @kind direct;
  #L3cdc34.  return v0 @kind object;
}
procedure `dagger.internal.Factory` `empty`() @signature `Ldagger/internal/SetFactory;.empty:()Ldagger/internal/Factory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cdc10.  v0:= `@@dagger.internal.SetFactory.c` @type ^`dagger.internal.Factory` @kind object;
  #L3cdc14.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.SetFactory` v1 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3cdc48.  call temp:= `get`(v1) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @kind virtual;
  #L3cdc4e.  v0:= temp @kind object;
  #L3cdc50.  return v0 @kind object;
}
procedure `java.util.Set` `get`(`dagger.internal.SetFactory` v7 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3cdc64.  v0:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L3cdc68.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdc6e.  v0:= temp;
  #L3cdc70.  v1:= new `java.util.ArrayList`;
  #L3cdc74.  v2:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L3cdc78.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdc7e.  v2:= temp;
  #L3cdc80.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3cdc86.  v2:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L3cdc8a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdc90.  v2:= temp;
  #L3cdc92.  v3:= 0I;
  #L3cdc94.  v4:= 0I;
  #L3cdc96.  if v4 >= v2 then goto L3cdccc;
  #L3cdc9a.  v5:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L3cdc9e.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cdca4.  v5:= temp @kind object;
  #L3cdca6.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L3cdcaa.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L3cdcb0.  v5:= temp @kind object;
  #L3cdcb2.  v5:= (`java.util.Collection`) v5 @kind object;
  #L3cdcb6.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3cdcbc.  v6:= temp;
  #L3cdcbe.  v0:= v0 + v6 @kind int;
  #L3cdcc0.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cdcc6.  v4:= v4 + 1;
  #L3cdcca.  goto L3cdc96;
  #L3cdccc.  call temp:= `b`(v0) @signature `Ldagger/internal/DaggerCollections;.b:(I)Ljava/util/HashSet;` @kind static;
  #L3cdcd2.  v0:= temp @kind object;
  #L3cdcd4.  v2:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L3cdcd8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdcde.  v2:= temp;
  #L3cdce0.  v4:= 0I;
  #L3cdce2.  if v4 >= v2 then goto L3cdd12;
  #L3cdce6.  v5:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L3cdcea.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cdcf0.  v5:= temp @kind object;
  #L3cdcf2.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L3cdcf6.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L3cdcfc.  v5:= temp @kind object;
  #L3cdcfe.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cdd04.  v5:= temp @kind object;
  #L3cdd06.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cdd0c.  v4:= v4 + 1;
  #L3cdd10.  goto L3cdce2;
  #L3cdd12.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdd18.  v2:= temp;
  #L3cdd1a.  if v3 >= v2 then goto L3cdd5c;
  #L3cdd1e.  call temp:= `get`(v1, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cdd24.  v4:= temp @kind object;
  #L3cdd26.  v4:= (`java.util.Collection`) v4 @kind object;
  #L3cdd2a.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cdd30.  v4:= temp @kind object;
  #L3cdd32.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cdd38.  v5:= temp;
  #L3cdd3a.  if v5 == 0 then goto L3cdd56;
  #L3cdd3e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cdd44.  v5:= temp @kind object;
  #L3cdd46.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cdd4c.  v5:= temp @kind object;
  #L3cdd4e.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cdd54.  goto L3cdd32;
  #L3cdd56.  v3:= v3 + 1;
  #L3cdd5a.  goto L3cdd1a;
  #L3cdd5c.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L3cdd62.  v0:= temp @kind object;
  #L3cdd64.  return v0 @kind object;
}
