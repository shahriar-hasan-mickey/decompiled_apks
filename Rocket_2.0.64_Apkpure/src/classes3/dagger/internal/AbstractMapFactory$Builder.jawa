record `dagger.internal.AbstractMapFactory$Builder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.util.LinkedHashMap` `dagger.internal.AbstractMapFactory$Builder.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`dagger.internal.AbstractMapFactory$Builder` v0 @kind this, `int` v1 ) @signature `Ldagger/internal/AbstractMapFactory$Builder;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ccf08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ccf0e.  call temp:= `newLinkedHashMapWithExpectedSize`(v1) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @kind static;
  #L3ccf14.  v1:= temp @kind object;
  #L3ccf16.  v0.`dagger.internal.AbstractMapFactory$Builder.a` @type ^`java.util.LinkedHashMap` := v1 @kind object;
  #L3ccf1a.  return @kind void;
}
procedure `dagger.internal.AbstractMapFactory$Builder` `put`(`dagger.internal.AbstractMapFactory$Builder` v2 @kind this, `java.lang.Object` v3 @kind object, `javax.inject.Provider` v4 @kind object) @signature `Ldagger/internal/AbstractMapFactory$Builder;.put:(Ljava/lang/Object;Ljavax/inject/Provider;)Ldagger/internal/AbstractMapFactory$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3cce8c.  v0:= v2.`dagger.internal.AbstractMapFactory$Builder.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3cce90.  v1:= "key" @kind object;
  #L3cce94.  call temp:= `checkNotNull`(v3, v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cce9a.  v3:= temp @kind object;
  #L3cce9c.  v1:= "provider" @kind object;
  #L3ccea0.  call temp:= `checkNotNull`(v4, v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3ccea6.  v4:= temp @kind object;
  #L3ccea8.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3cceae.  return v2 @kind object;
}
procedure `dagger.internal.AbstractMapFactory$Builder` `putAll`(`dagger.internal.AbstractMapFactory$Builder` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/AbstractMapFactory$Builder;.putAll:(Ljavax/inject/Provider;)Ldagger/internal/AbstractMapFactory$Builder;` @AccessFlag  {
    temp;
    v0;

  #L3ccec0.  v0:= instanceof @variable v2 @type ^`dagger.internal.DelegateFactory` @kind boolean;
  #L3ccec4.  if v0 == 0 then goto L3ccede;
  #L3ccec8.  v2:= (`dagger.internal.DelegateFactory`) v2 @kind object;
  #L3ccecc.  call temp:= `a`(v2) @signature `Ldagger/internal/DelegateFactory;.a:()Ljavax/inject/Provider;` @kind virtual;
  #L3cced2.  v2:= temp @kind object;
  #L3cced4.  call temp:= `putAll`(v1, v2) @signature `Ldagger/internal/AbstractMapFactory$Builder;.putAll:(Ljavax/inject/Provider;)Ldagger/internal/AbstractMapFactory$Builder;` @kind virtual;
  #L3cceda.  v2:= temp @kind object;
  #L3ccedc.  return v2 @kind object;
  #L3ccede.  v2:= (`dagger.internal.AbstractMapFactory`) v2 @kind object;
  #L3ccee2.  v0:= v1.`dagger.internal.AbstractMapFactory$Builder.a` @type ^`java.util.LinkedHashMap` @kind object;
  #L3ccee6.  call temp:= `a`(v2) @signature `Ldagger/internal/AbstractMapFactory;.a:(Ldagger/internal/AbstractMapFactory;)Ljava/util/Map;` @kind static;
  #L3cceec.  v2:= temp @kind object;
  #L3cceee.  call `putAll`(v0, v2) @signature `Ljava/util/LinkedHashMap;.putAll:(Ljava/util/Map;)V` @kind virtual;
  #L3ccef4.  return v1 @kind object;
}
