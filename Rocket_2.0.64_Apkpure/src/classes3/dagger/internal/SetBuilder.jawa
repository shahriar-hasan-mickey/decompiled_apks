record `dagger.internal.SetBuilder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `dagger.internal.SetBuilder.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`dagger.internal.SetBuilder` v1 @kind this, `int` v2 ) @signature `Ldagger/internal/SetBuilder;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3cdb2c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cdb32.  v0:= new `java.util.ArrayList`;
  #L3cdb36.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3cdb3c.  v1.`dagger.internal.SetBuilder.a` @type ^`java.util.List` := v0 @kind object;
  #L3cdb40.  return @kind void;
}
procedure `dagger.internal.SetBuilder` `newSetBuilder`(`int` v1 ) @signature `Ldagger/internal/SetBuilder;.newSetBuilder:(I)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cdaa4.  v0:= new `dagger.internal.SetBuilder`;
  #L3cdaa8.  call `<init>`(v0, v1) @signature `Ldagger/internal/SetBuilder;.<init>:(I)V` @kind direct;
  #L3cdaae.  return v0 @kind object;
}
procedure `dagger.internal.SetBuilder` `add`(`dagger.internal.SetBuilder` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ldagger/internal/SetBuilder;.add:(Ljava/lang/Object;)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cda38.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cda3c.  v1:= "Set contributions cannot be null" @kind object;
  #L3cda40.  call temp:= `checkNotNull`(v3, v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cda46.  v3:= temp @kind object;
  #L3cda48.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cda4e.  return v2 @kind object;
}
procedure `dagger.internal.SetBuilder` `addAll`(`dagger.internal.SetBuilder` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Ldagger/internal/SetBuilder;.addAll:(Ljava/util/Collection;)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cda60.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cda66.  v0:= temp @kind object;
  #L3cda68.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cda6e.  v1:= temp;
  #L3cda70.  if v1 == 0 then goto L3cda88;
  #L3cda74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cda7a.  v1:= temp @kind object;
  #L3cda7c.  v2:= "Set contributions cannot be null" @kind object;
  #L3cda80.  call temp:= `checkNotNull`(v1, v2) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cda86.  goto L3cda68;
  #L3cda88.  v0:= v3.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cda8c.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3cda92.  return v3 @kind object;
}
procedure `java.util.Set` `build`(`dagger.internal.SetBuilder` v2 @kind this) @signature `Ldagger/internal/SetBuilder;.build:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cdac0.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cdac4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3cdaca.  v0:= temp;
  #L3cdacc.  if v0 == 0 then goto L3cdada;
  #L3cdad0.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L3cdad6.  v0:= temp @kind object;
  #L3cdad8.  return v0 @kind object;
  #L3cdada.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cdade.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cdae4.  v0:= temp;
  #L3cdae6.  v1:= 1I;
  #L3cdae8.  if v0 != v1 then goto L3cdb04;
  #L3cdaec.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cdaf0.  v1:= 0I;
  #L3cdaf2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cdaf8.  v0:= temp @kind object;
  #L3cdafa.  call temp:= `singleton`(v0) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L3cdb00.  v0:= temp @kind object;
  #L3cdb02.  return v0 @kind object;
  #L3cdb04.  v0:= new `java.util.HashSet`;
  #L3cdb08.  v1:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L3cdb0c.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3cdb12.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L3cdb18.  v0:= temp @kind object;
  #L3cdb1a.  return v0 @kind object;
}
