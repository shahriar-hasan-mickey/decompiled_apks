record `dagger.internal.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`dagger.internal.Preconditions` v0 @kind this) @signature `Ldagger/internal/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cd940.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cd946.  return @kind void;
}
procedure `void` `checkBuilderRequirement`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Ldagger/internal/Preconditions;.checkBuilderRequirement:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd958.  if v1 == 0 then goto L3cd95e;
  #L3cd95c.  return @kind void;
  #L3cd95e.  v1:= new `java.lang.IllegalStateException`;
  #L3cd962.  v0:= new `java.lang.StringBuilder`;
  #L3cd966.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd96c.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L3cd972.  v2:= temp @kind object;
  #L3cd974.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd97a.  v2:= " must be set" @kind object;
  #L3cd97e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd984.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd98a.  v2:= temp @kind object;
  #L3cd98c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd992.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3cd84c.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L3cd852.  return v0 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3cd864.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cd86a.  return v0 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3cd87c.  if v2 != 0 then goto L3cd8f6;
  #L3cd880.  v2:= "%s" @kind object;
  #L3cd884.  call temp:= `contains`(v3, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3cd88a.  v0:= temp;
  #L3cd88c.  if v0 == 0 then goto L3cd8e6;
  #L3cd890.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L3cd896.  v0:= temp;
  #L3cd898.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L3cd89e.  v1:= temp;
  #L3cd8a0.  if v0 != v1 then goto L3cd8d6;
  #L3cd8a4.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L3cd8a8.  if v0 == 0 then goto L3cd8ba;
  #L3cd8ac.  v4:= (`java.lang.Class`) v4 @kind object;
  #L3cd8b0.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L3cd8b6.  v4:= temp @kind object;
  #L3cd8b8.  goto L3cd8c2;
  #L3cd8ba.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3cd8c0.  v4:= temp @kind object;
  #L3cd8c2.  v0:= new `java.lang.NullPointerException`;
  #L3cd8c6.  call temp:= `replace`(v3, v2, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3cd8cc.  v2:= temp @kind object;
  #L3cd8ce.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd8d4.  throw v0;
  #L3cd8d6.  v2:= new `java.lang.IllegalArgumentException`;
  #L3cd8da.  v3:= "errorMessageTemplate has more than one format specifier" @kind object;
  #L3cd8de.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd8e4.  throw v2;
  #L3cd8e6.  v2:= new `java.lang.IllegalArgumentException`;
  #L3cd8ea.  v3:= "errorMessageTemplate has no format specifiers" @kind object;
  #L3cd8ee.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd8f4.  throw v2;
  #L3cd8f6.  return v2 @kind object;
}
procedure `java.lang.Object` `checkNotNullFromComponent`(`java.lang.Object` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNullFromComponent:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd908.  v0:= "Cannot return null from a non-@Nullable component method" @kind object;
  #L3cd90c.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cd912.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNullFromProvides`(`java.lang.Object` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNullFromProvides:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3cd924.  v0:= "Cannot return null from a non-@Nullable @Provides method" @kind object;
  #L3cd928.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3cd92e.  return v1 @kind object;
}
