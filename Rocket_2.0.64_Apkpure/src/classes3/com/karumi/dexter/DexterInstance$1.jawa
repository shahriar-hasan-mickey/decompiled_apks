record `com.karumi.dexter.DexterInstance$1` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `com.karumi.dexter.DexterInstance` `com.karumi.dexter.DexterInstance$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `com.karumi.dexter.DexterInstance$1.val$listener` @AccessFlag FINAL_SYNTHETIC;
  `java.util.Collection` `com.karumi.dexter.DexterInstance$1.val$permissions` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.karumi.dexter.DexterInstance$1` v0 @kind this, `com.karumi.dexter.DexterInstance` v1 @kind object, `java.util.Collection` v2 @kind object, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance$1;.<init>:(Lcom/karumi/dexter/DexterInstance;Ljava/util/Collection;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a9850.  v0.`com.karumi.dexter.DexterInstance$1.this$0` @type ^`com.karumi.dexter.DexterInstance` := v1 @kind object;
  #L3a9854.  v0.`com.karumi.dexter.DexterInstance$1.val$permissions` @type ^`java.util.Collection` := v2 @kind object;
  #L3a9858.  v0.`com.karumi.dexter.DexterInstance$1.val$listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v3 @kind object;
  #L3a985c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a9862.  return @kind void;
}
procedure `void` `run`(`com.karumi.dexter.DexterInstance$1` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance$1;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a9874.  v0:= new `com.karumi.dexter.MultiplePermissionsReport`;
  #L3a9878.  call `<init>`(v0) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.<init>:()V` @kind direct;
  #L3a987e.  v1:= v3.`com.karumi.dexter.DexterInstance$1.val$permissions` @type ^`java.util.Collection` @kind object;
  #L3a9882.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3a9888.  v1:= temp @kind object;
  #L3a988a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3a9890.  v2:= temp;
  #L3a9892.  if v2 == 0 then goto L3a98b2;
  #L3a9896.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3a989c.  v2:= temp @kind object;
  #L3a989e.  v2:= (`java.lang.String`) v2 @kind object;
  #L3a98a2.  call temp:= `from`(v2) @signature `Lcom/karumi/dexter/listener/PermissionGrantedResponse;.from:(Ljava/lang/String;)Lcom/karumi/dexter/listener/PermissionGrantedResponse;` @kind static;
  #L3a98a8.  v2:= temp @kind object;
  #L3a98aa.  call temp:= `addGrantedPermissionResponse`(v0, v2) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addGrantedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionGrantedResponse;)Z` @kind virtual;
  #L3a98b0.  goto L3a988a;
  #L3a98b2.  v1:= v3.`com.karumi.dexter.DexterInstance$1.this$0` @type ^`com.karumi.dexter.DexterInstance` @kind object;
  #L3a98b6.  call temp:= `access$600`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.access$600:(Lcom/karumi/dexter/DexterInstance;)Ljava/util/concurrent/atomic/AtomicBoolean;` @kind static;
  #L3a98bc.  v1:= temp @kind object;
  #L3a98be.  v2:= 0I;
  #L3a98c0.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a98c6.  v1:= v3.`com.karumi.dexter.DexterInstance$1.val$listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a98ca.  call `onPermissionsChecked`(v1, v0) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @kind interface;
  #L3a98d0.  v0:= v3.`com.karumi.dexter.DexterInstance$1.this$0` @type ^`com.karumi.dexter.DexterInstance` @kind object;
  #L3a98d4.  call temp:= `access$800`() @signature `Lcom/karumi/dexter/DexterInstance;.access$800:()Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @kind static;
  #L3a98da.  v1:= temp @kind object;
  #L3a98dc.  call temp:= `access$702`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.access$702:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @kind static;
  #L3a98e2.  return @kind void;
}
