record `com.karumi.dexter.ThreadFactory` @kind class @AccessFlag FINAL {
}
procedure `void` `<init>`(`com.karumi.dexter.ThreadFactory` v0 @kind this) @signature `Lcom/karumi/dexter/ThreadFactory;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3abcd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3abcde.  return @kind void;
}
procedure `com.karumi.dexter.Thread` `makeMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.makeMainThread:()Lcom/karumi/dexter/Thread;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3abc88.  v0:= new `com.karumi.dexter.MainThread`;
  #L3abc8c.  call `<init>`(v0) @signature `Lcom/karumi/dexter/MainThread;.<init>:()V` @kind direct;
  #L3abc92.  return v0 @kind object;
}
procedure `com.karumi.dexter.Thread` `makeSameThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.makeSameThread:()Lcom/karumi/dexter/Thread;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3abca4.  call temp:= `runningMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.runningMainThread:()Z` @kind static;
  #L3abcaa.  v0:= temp;
  #L3abcac.  if v0 == 0 then goto L3abcbc;
  #L3abcb0.  v0:= new `com.karumi.dexter.MainThread`;
  #L3abcb4.  call `<init>`(v0) @signature `Lcom/karumi/dexter/MainThread;.<init>:()V` @kind direct;
  #L3abcba.  return v0 @kind object;
  #L3abcbc.  v0:= new `com.karumi.dexter.WorkerThread`;
  #L3abcc0.  call `<init>`(v0) @signature `Lcom/karumi/dexter/WorkerThread;.<init>:()V` @kind direct;
  #L3abcc6.  return v0 @kind object;
}
procedure `boolean` `runningMainThread`() @signature `Lcom/karumi/dexter/ThreadFactory;.runningMainThread:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3abc54.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L3abc5a.  v0:= temp @kind object;
  #L3abc5c.  call temp:= `getThread`(v0) @signature `Landroid/os/Looper;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L3abc62.  v0:= temp @kind object;
  #L3abc64.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3abc6a.  v1:= temp @kind object;
  #L3abc6c.  if v0 != v1 then goto L3abc74;
  #L3abc70.  v0:= 1I;
  #L3abc72.  goto L3abc76;
  #L3abc74.  v0:= 0I;
  #L3abc76.  return v0;
}
