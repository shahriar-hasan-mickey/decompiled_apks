record `com.karumi.dexter.PermissionRationaleToken` @kind class @AccessFlag FINAL extends `com.karumi.dexter.PermissionToken` @kind interface {
  `com.karumi.dexter.DexterInstance` `com.karumi.dexter.PermissionRationaleToken.dexterInstance` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.karumi.dexter.PermissionRationaleToken` v1 @kind this, `com.karumi.dexter.DexterInstance` v2 @kind object) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.<init>:(Lcom/karumi/dexter/DexterInstance;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3aa7b0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aa7b6.  v0:= 0I;
  #L3aa7b8.  v1.`com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @type ^`boolean` := v0 @kind boolean;
  #L3aa7bc.  v1.`com.karumi.dexter.PermissionRationaleToken.dexterInstance` @type ^`com.karumi.dexter.DexterInstance` := v2 @kind object;
  #L3aa7c0.  return @kind void;
}
procedure `void` `cancelPermissionRequest`(`com.karumi.dexter.PermissionRationaleToken` v1 @kind this) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.cancelPermissionRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa7d4.  v0:= v1.`com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @type ^`boolean` @kind boolean;
  #L3aa7d8.  if v0 != 0 then goto L3aa7ec;
  #L3aa7dc.  v0:= v1.`com.karumi.dexter.PermissionRationaleToken.dexterInstance` @type ^`com.karumi.dexter.DexterInstance` @kind object;
  #L3aa7e0.  call `onCancelPermissionRequest`(v0) @signature `Lcom/karumi/dexter/DexterInstance;.onCancelPermissionRequest:()V` @kind virtual;
  #L3aa7e6.  v0:= 1I;
  #L3aa7e8.  v1.`com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @type ^`boolean` := v0 @kind boolean;
  #L3aa7ec.  return @kind void;
}
procedure `void` `continuePermissionRequest`(`com.karumi.dexter.PermissionRationaleToken` v1 @kind this) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.continuePermissionRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa800.  v0:= v1.`com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @type ^`boolean` @kind boolean;
  #L3aa804.  if v0 != 0 then goto L3aa818;
  #L3aa808.  v0:= v1.`com.karumi.dexter.PermissionRationaleToken.dexterInstance` @type ^`com.karumi.dexter.DexterInstance` @kind object;
  #L3aa80c.  call `onContinuePermissionRequest`(v0) @signature `Lcom/karumi/dexter/DexterInstance;.onContinuePermissionRequest:()V` @kind virtual;
  #L3aa812.  v0:= 1I;
  #L3aa814.  v1.`com.karumi.dexter.PermissionRationaleToken.isTokenResolved` @type ^`boolean` := v0 @kind boolean;
  #L3aa818.  return @kind void;
}
