record `com.karumi.dexter.DexterInstance` @kind class @AccessFlag FINAL {
  `android.app.Activity` `com.karumi.dexter.DexterInstance.activity` @AccessFlag PRIVATE;
  `com.karumi.dexter.AndroidPermissionService` `com.karumi.dexter.DexterInstance.androidPermissionService` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.WeakReference` `com.karumi.dexter.DexterInstance.context` @AccessFlag PRIVATE;
  `com.karumi.dexter.IntentProvider` `com.karumi.dexter.DexterInstance.intentProvider` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isRequestingPermission` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isShowingNativeDialog` @AccessFlag PRIVATE_FINAL;
  `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `com.karumi.dexter.DexterInstance.listener` @AccessFlag PRIVATE;
  `com.karumi.dexter.MultiplePermissionsReport` `com.karumi.dexter.DexterInstance.multiplePermissionsReport` @AccessFlag PRIVATE_FINAL;
  `java.util.Collection` `com.karumi.dexter.DexterInstance.pendingPermissions` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.rationaleAccepted` @AccessFlag PRIVATE_FINAL;
}
global `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.karumi.dexter.DexterInstance.PERMISSIONS_REQUEST_CODE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/karumi/dexter/DexterInstance;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a9ba4.  v0:= new `com.karumi.dexter.listener.multi.BaseMultiplePermissionsListener`;
  #L3a9ba8.  call `<init>`(v0) @signature `Lcom/karumi/dexter/listener/multi/BaseMultiplePermissionsListener;.<init>:()V` @kind direct;
  #L3a9bae.  `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3a9bb2.  return @kind void;
}
procedure `void` `<init>`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object, `com.karumi.dexter.AndroidPermissionService` v3 @kind object, `com.karumi.dexter.IntentProvider` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.<init>:(Landroid/content/Context;Lcom/karumi/dexter/AndroidPermissionService;Lcom/karumi/dexter/IntentProvider;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3a9bc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a9bca.  v0:= new `java.lang.Object`;
  #L3a9bce.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3a9bd4.  v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` := v0 @kind object;
  #L3a9bd8.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9bdc.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3a9be0.  v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` := v3 @kind object;
  #L3a9be4.  v1.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` := v4 @kind object;
  #L3a9be8.  v3:= new `java.util.TreeSet`;
  #L3a9bec.  call `<init>`(v3) @signature `Ljava/util/TreeSet;.<init>:()V` @kind direct;
  #L3a9bf2.  v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` := v3 @kind object;
  #L3a9bf6.  v3:= new `com.karumi.dexter.MultiplePermissionsReport`;
  #L3a9bfa.  call `<init>`(v3) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.<init>:()V` @kind direct;
  #L3a9c00.  v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` := v3 @kind object;
  #L3a9c04.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3a9c08.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3a9c0e.  v1.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L3a9c12.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3a9c16.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3a9c1c.  v1.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L3a9c20.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L3a9c24.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L3a9c2a.  v1.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L3a9c2e.  call `setContext`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @kind virtual;
  #L3a9c34.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicBoolean` `access$600`(`com.karumi.dexter.DexterInstance` v0 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$600:(Lcom/karumi/dexter/DexterInstance;)Ljava/util/concurrent/atomic/AtomicBoolean;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3a9b8c.  v0:= v0.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9b90.  return v0 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$702`(`com.karumi.dexter.DexterInstance` v0 @kind object, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$702:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3a9b28.  v0.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L3a9b2c.  return v1 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$800`() @signature `Lcom/karumi/dexter/DexterInstance;.access$800:()Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3a9b40.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9b44.  return v0 @kind object;
}
procedure `void` `checkMultiplePermissions`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v2 @kind object, `java.util.Collection` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a9c48.  call `checkNoDexterRequestOngoing`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @kind direct;
  #L3a9c4e.  call `checkRequestSomePermission`(v1, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @kind direct;
  #L3a9c54.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L3a9c58.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a9c5e.  v0:= temp @kind object;
  #L3a9c60.  if v0 != 0 then goto L3a9c66;
  #L3a9c64.  return @kind void;
  #L3a9c66.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9c6a.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L3a9c70.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9c74.  call temp:= `addAll`(v0, v3) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3a9c7a.  v0:= v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L3a9c7e.  call `clear`(v0) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.clear:()V` @kind virtual;
  #L3a9c84.  v0:= new `com.karumi.dexter.MultiplePermissionListenerThreadDecorator`;
  #L3a9c88.  call `<init>`(v0, v2, v4) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.<init>:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3a9c8e.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3a9c92.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L3a9c96.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3a9c9c.  v0:= temp @kind object;
  #L3a9c9e.  v0:= (`android.content.Context`) v0 @kind object;
  #L3a9ca2.  call temp:= `isEveryPermissionGranted`(v1, v3, v0) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @kind direct;
  #L3a9ca8.  v0:= temp;
  #L3a9caa.  if v0 == 0 then goto L3a9cc0;
  #L3a9cae.  v0:= new `com.karumi.dexter.DexterInstance$1`;
  #L3a9cb2.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/karumi/dexter/DexterInstance$1;.<init>:(Lcom/karumi/dexter/DexterInstance;Ljava/util/Collection;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)V` @kind direct;
  #L3a9cb8.  call `execute`(v4, v0) @signature `Lcom/karumi/dexter/Thread;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3a9cbe.  goto L3a9cc6;
  #L3a9cc0.  call `startTransparentActivityIfNeeded`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @kind direct;
  #L3a9cc6.  call `loop`(v4) @signature `Lcom/karumi/dexter/Thread;.loop:()V` @kind interface;
  #L3a9ccc.  return @kind void;
}
procedure `void` `checkNoDexterRequestOngoing`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3a9ce0.  v0:= v3.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9ce4.  v1:= 1I;
  #L3a9ce6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L3a9cec.  v0:= temp;
  #L3a9cee.  if v0 != 0 then goto L3a9cf4;
  #L3a9cf2.  return @kind void;
  #L3a9cf4.  v0:= new `com.karumi.dexter.DexterException`;
  #L3a9cf8.  v1:= `@@com.karumi.dexter.listener.DexterError.REQUEST_ONGOING` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L3a9cfc.  v2:= "Only one Dexter request at a time is allowed" @kind object;
  #L3a9d00.  call `<init>`(v0, v2, v1) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L3a9d06.  throw v0;
}
procedure `void` `checkRequestSomePermission`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a9d48.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3a9d4e.  v3:= temp;
  #L3a9d50.  if v3 != 0 then goto L3a9d56;
  #L3a9d54.  return @kind void;
  #L3a9d56.  v3:= new `com.karumi.dexter.DexterException`;
  #L3a9d5a.  v0:= `@@com.karumi.dexter.listener.DexterError.NO_PERMISSIONS_REQUESTED` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L3a9d5e.  v1:= "Dexter has to be called with at least one permission" @kind object;
  #L3a9d62.  call `<init>`(v3, v1, v0) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L3a9d68.  throw v3;
}
procedure `int` `checkSelfPermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a9b58.  v0:= v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L3a9b5c.  call temp:= `checkSelfPermission`(v0, v2, v3) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L3a9b62.  v2:= temp;
  #L3a9b64.  return v2;
  #L3a9b66.  v2:= -1I;
  #L3a9b68.  return v2;
  catch `java.lang.RuntimeException` @[L3a9b58..L3a9b64] goto L3a9b66;
}
procedure `void` `checkSinglePermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v2 @kind object, `java.lang.String` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3a9d7c.  v0:= new `com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter`;
  #L3a9d80.  call `<init>`(v0, v2) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.<init>:(Lcom/karumi/dexter/listener/single/PermissionListener;)V` @kind direct;
  #L3a9d86.  call temp:= `singleton`(v3) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L3a9d8c.  v2:= temp @kind object;
  #L3a9d8e.  call `checkMultiplePermissions`(v1, v0, v2, v4) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3a9d94.  return @kind void;
}
procedure `com.karumi.dexter.DexterInstance$PermissionStates` `getPermissionStates`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a9ab8.  v0:= new `com.karumi.dexter.DexterInstance$PermissionStates`;
  #L3a9abc.  v1:= 0I;
  #L3a9abe.  call `<init>`(v0, v4, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.<init>:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/DexterInstance$1;)V` @kind direct;
  #L3a9ac4.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3a9aca.  v5:= temp @kind object;
  #L3a9acc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3a9ad2.  v1:= temp;
  #L3a9ad4.  if v1 == 0 then goto L3a9b14;
  #L3a9ad8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3a9ade.  v1:= temp @kind object;
  #L3a9ae0.  v1:= (`java.lang.String`) v1 @kind object;
  #L3a9ae4.  v2:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3a9ae8.  call temp:= `checkSelfPermission`(v4, v2, v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @kind direct;
  #L3a9aee.  v2:= temp;
  #L3a9af0.  v3:= -2I;
  #L3a9af2.  if v2 == v3 then goto L3a9b0c;
  #L3a9af6.  v3:= -1I;
  #L3a9af8.  if v2 == v3 then goto L3a9b04;
  #L3a9afc.  call `access$500`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$500:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L3a9b02.  goto L3a9acc;
  #L3a9b04.  call `access$400`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$400:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L3a9b0a.  goto L3a9acc;
  #L3a9b0c.  call `access$300`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$300:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L3a9b12.  goto L3a9acc;
  #L3a9b14.  return v0 @kind object;
}
procedure `void` `handleDeniedPermissions`(`com.karumi.dexter.DexterInstance` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a9da8.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3a9dae.  v0:= temp;
  #L3a9db0.  if v0 == 0 then goto L3a9db6;
  #L3a9db4.  return @kind void;
  #L3a9db6.  v0:= new `java.util.LinkedList`;
  #L3a9dba.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L3a9dc0.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3a9dc6.  v1:= temp @kind object;
  #L3a9dc8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3a9dce.  v2:= temp;
  #L3a9dd0.  if v2 == 0 then goto L3a9e06;
  #L3a9dd4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3a9dda.  v2:= temp @kind object;
  #L3a9ddc.  v2:= (`java.lang.String`) v2 @kind object;
  #L3a9de0.  v3:= v5.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L3a9de4.  v4:= v5.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3a9de8.  call temp:= `shouldShowRequestPermissionRationale`(v3, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.shouldShowRequestPermissionRationale:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L3a9dee.  v3:= temp;
  #L3a9df0.  if v3 == 0 then goto L3a9dc8;
  #L3a9df4.  v3:= new `com.karumi.dexter.listener.PermissionRequest`;
  #L3a9df8.  call `<init>`(v3, v2) @signature `Lcom/karumi/dexter/listener/PermissionRequest;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a9dfe.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3a9e04.  goto L3a9dc8;
  #L3a9e06.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3a9e0c.  v1:= temp;
  #L3a9e0e.  if v1 == 0 then goto L3a9e1a;
  #L3a9e12.  call `requestPermissionsToSystem`(v5, v6) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L3a9e18.  goto L3a9e3e;
  #L3a9e1a.  v6:= v5.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9e1e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3a9e24.  v6:= temp;
  #L3a9e26.  if v6 != 0 then goto L3a9e3e;
  #L3a9e2a.  v6:= new `com.karumi.dexter.PermissionRationaleToken`;
  #L3a9e2e.  call `<init>`(v6, v5) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.<init>:(Lcom/karumi/dexter/DexterInstance;)V` @kind direct;
  #L3a9e34.  v1:= v5.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9e38.  call `onPermissionRationaleShouldBeShown`(v1, v0, v6) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionRationaleShouldBeShown:(Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @kind interface;
  #L3a9e3e.  return @kind void;
}
procedure `boolean` `isEveryPermissionGranted`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object, `android.content.Context` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a9a70.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3a9a76.  v3:= temp @kind object;
  #L3a9a78.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3a9a7e.  v0:= temp;
  #L3a9a80.  if v0 == 0 then goto L3a9aa4;
  #L3a9a84.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3a9a8a.  v0:= temp @kind object;
  #L3a9a8c.  v0:= (`java.lang.String`) v0 @kind object;
  #L3a9a90.  v1:= v2.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L3a9a94.  call temp:= `checkSelfPermission`(v1, v4, v0) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L3a9a9a.  v0:= temp;
  #L3a9a9c.  if v0 == 0 then goto L3a9a78;
  #L3a9aa0.  v3:= 0I;
  #L3a9aa2.  return v3;
  #L3a9aa4.  v3:= 1I;
  #L3a9aa6.  return v3;
}
procedure `void` `onPermissionsChecked`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a9f8c.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9f90.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3a9f96.  v0:= temp;
  #L3a9f98.  if v0 == 0 then goto L3a9f9e;
  #L3a9f9c.  return @kind void;
  #L3a9f9e.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L3a9fa2.  @monitorenter v0
  #L3a9fa4.  v1:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9fa8.  call temp:= `removeAll`(v1, v3) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3a9fae.  v3:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9fb2.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3a9fb8.  v3:= temp;
  #L3a9fba.  if v3 == 0 then goto L3aa004;
  #L3a9fbe.  v3:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3a9fc2.  call `finish`(v3) @signature `Landroid/app/Activity;.finish:()V` @kind virtual;
  #L3a9fc8.  v3:= 0I;
  #L3a9fca.  v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v3 @kind object;
  #L3a9fce.  v3:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9fd2.  v1:= 0I;
  #L3a9fd4.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9fda.  v3:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9fde.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9fe4.  v3:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9fe8.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9fee.  v3:= v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9ff2.  v1:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9ff6.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L3a9ffa.  v1:= v2.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L3a9ffe.  call `onPermissionsChecked`(v3, v1) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @kind interface;
  #L3aa004.  @monitorexit v0
  #L3aa006.  return @kind void;
  #L3aa008.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3aa00a.  @monitorexit v0
  #L3aa00c.  throw v3;
  catch `java.lang.Throwable` @[L3a9fa4..L3aa00c] goto L3aa008;
}
procedure `void` `requestPermissionsToSystem`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3aa02c.  v0:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3aa030.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3aa036.  v0:= temp;
  #L3aa038.  if v0 != 0 then goto L3aa060;
  #L3aa03c.  v0:= v3.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L3aa040.  v1:= v3.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3aa044.  v2:= 0I;
  #L3aa046.  v2:= new `java.lang.String`[v2];
  #L3aa04a.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3aa050.  v4:= temp @kind object;
  #L3aa052.  v4:= (`java.lang.String`[]) v4 @kind object;
  #L3aa056.  v2:= 42I;
  #L3aa05a.  call `requestPermissions`(v0, v1, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.requestPermissions:(Landroid/app/Activity;[Ljava/lang/String;I)V` @kind virtual;
  #L3aa060.  v4:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3aa064.  v0:= 1I;
  #L3aa066.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3aa06c.  return @kind void;
}
procedure `void` `startTransparentActivityIfNeeded`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3aa0a0.  v0:= v3.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L3aa0a4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3aa0aa.  v0:= temp @kind object;
  #L3aa0ac.  v0:= (`android.content.Context`) v0 @kind object;
  #L3aa0b0.  if v0 != 0 then goto L3aa0b6;
  #L3aa0b4.  return @kind void;
  #L3aa0b6.  v1:= v3.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` @kind object;
  #L3aa0ba.  v2:= constclass @type ^`com.karumi.dexter.DexterActivity` @kind object;
  #L3aa0be.  call temp:= `get`(v1, v0, v2) @signature `Lcom/karumi/dexter/IntentProvider;.get:(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;` @kind virtual;
  #L3aa0c4.  v1:= temp @kind object;
  #L3aa0c6.  v2:= instanceof @variable v0 @type ^`android.app.Application` @kind boolean;
  #L3aa0ca.  if v2 == 0 then goto L3aa0d8;
  #L3aa0ce.  v2:= 268435456I;
  #L3aa0d2.  call temp:= `addFlags`(v1, v2) @signature `Landroid/content/Intent;.addFlags:(I)Landroid/content/Intent;` @kind virtual;
  #L3aa0d8.  call `startActivity`(v0, v1) @signature `Landroid/content/Context;.startActivity:(Landroid/content/Intent;)V` @kind virtual;
  #L3aa0de.  return @kind void;
}
procedure `void` `updatePermissionsAsDenied`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3aa0f0.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aa0f6.  v0:= temp @kind object;
  #L3aa0f8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aa0fe.  v1:= temp;
  #L3aa100.  if v1 == 0 then goto L3aa134;
  #L3aa104.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3aa10a.  v1:= temp @kind object;
  #L3aa10c.  v1:= (`java.lang.String`) v1 @kind object;
  #L3aa110.  v2:= v4.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L3aa114.  v3:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3aa118.  call temp:= `isPermissionPermanentlyDenied`(v2, v3, v1) @signature `Lcom/karumi/dexter/AndroidPermissionService;.isPermissionPermanentlyDenied:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L3aa11e.  v2:= temp;
  #L3aa120.  call temp:= `from`(v1, v2) @signature `Lcom/karumi/dexter/listener/PermissionDeniedResponse;.from:(Ljava/lang/String;Z)Lcom/karumi/dexter/listener/PermissionDeniedResponse;` @kind static;
  #L3aa126.  v1:= temp @kind object;
  #L3aa128.  v2:= v4.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L3aa12c.  call temp:= `addDeniedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addDeniedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionDeniedResponse;)Z` @kind virtual;
  #L3aa132.  goto L3aa0f8;
  #L3aa134.  call `onPermissionsChecked`(v4, v5) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L3aa13a.  return @kind void;
}
procedure `void` `updatePermissionsAsGranted`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3aa14c.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3aa152.  v0:= temp @kind object;
  #L3aa154.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3aa15a.  v1:= temp;
  #L3aa15c.  if v1 == 0 then goto L3aa180;
  #L3aa160.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3aa166.  v1:= temp @kind object;
  #L3aa168.  v1:= (`java.lang.String`) v1 @kind object;
  #L3aa16c.  call temp:= `from`(v1) @signature `Lcom/karumi/dexter/listener/PermissionGrantedResponse;.from:(Ljava/lang/String;)Lcom/karumi/dexter/listener/PermissionGrantedResponse;` @kind static;
  #L3aa172.  v1:= temp @kind object;
  #L3aa174.  v2:= v3.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L3aa178.  call temp:= `addGrantedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addGrantedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionGrantedResponse;)Z` @kind virtual;
  #L3aa17e.  goto L3aa154;
  #L3aa180.  call `onPermissionsChecked`(v3, v4) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L3aa186.  return @kind void;
}
procedure `void` `checkPermission`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v1 @kind object, `java.lang.String` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L3a9d18.  call `checkSinglePermission`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3a9d1e.  return @kind void;
}
procedure `void` `checkPermissions`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object, `java.util.Collection` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L3a9d30.  call `checkMultiplePermissions`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3a9d36.  return @kind void;
}
procedure `void` `onActivityDestroyed`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityDestroyed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3a9e50.  v0:= 0I;
  #L3a9e52.  v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v0 @kind object;
  #L3a9e56.  v0:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9e5a.  v1:= 0I;
  #L3a9e5c.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9e62.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9e66.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9e6c.  v0:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9e70.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9e76.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3a9e7a.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3a9e7e.  return @kind void;
}
procedure `void` `onActivityReady`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityReady:(Landroid/app/Activity;)V` @AccessFlag  {
    temp;
    v0;

  #L3a9e90.  v1.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v2 @kind object;
  #L3a9e94.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L3a9e98.  @monitorenter v0
  #L3a9e9a.  if v2 == 0 then goto L3a9eac;
  #L3a9e9e.  v2:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9ea2.  call temp:= `getPermissionStates`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @kind direct;
  #L3a9ea8.  v2:= temp @kind object;
  #L3a9eaa.  goto L3a9eae;
  #L3a9eac.  v2:= 0I;
  #L3a9eae.  @monitorexit v0
  #L3a9eb0.  if v2 == 0 then goto L3a9ede;
  #L3a9eb4.  call temp:= `access$000`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$000:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L3a9eba.  v0:= temp @kind object;
  #L3a9ebc.  call `handleDeniedPermissions`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @kind direct;
  #L3a9ec2.  call temp:= `getImpossibleToGrantPermissions`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.getImpossibleToGrantPermissions:()Ljava/util/Collection;` @kind virtual;
  #L3a9ec8.  v0:= temp @kind object;
  #L3a9eca.  call `updatePermissionsAsDenied`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L3a9ed0.  call temp:= `access$100`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$100:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L3a9ed6.  v2:= temp @kind object;
  #L3a9ed8.  call `updatePermissionsAsGranted`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L3a9ede.  return @kind void;
  #L3a9ee0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3a9ee2.  @monitorexit v0
  #L3a9ee4.  throw v2;
  catch `java.lang.Throwable` @[L3a9e9e..L3a9eb0] goto L3a9ee0;
  catch `java.lang.Throwable` @[L3a9ee2..L3a9ee4] goto L3a9ee0;
}
procedure `void` `onCancelPermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onCancelPermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3a9f0c.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9f10.  v1:= 0I;
  #L3a9f12.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9f18.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9f1c.  call `updatePermissionsAsDenied`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L3a9f22.  return @kind void;
}
procedure `void` `onContinuePermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onContinuePermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3a9f34.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3a9f38.  v1:= 1I;
  #L3a9f3a.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L3a9f40.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3a9f44.  call `requestPermissionsToSystem`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L3a9f4a.  return @kind void;
}
procedure `void` `onPermissionRequestDenied`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestDenied:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L3a9f5c.  call `updatePermissionsAsDenied`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L3a9f62.  return @kind void;
}
procedure `void` `onPermissionRequestGranted`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestGranted:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L3a9f74.  call `updatePermissionsAsGranted`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L3a9f7a.  return @kind void;
}
procedure `void` `setContext`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @AccessFlag  {
    temp;
    v0;

  #L3aa080.  v0:= new `java.lang.ref.WeakReference`;
  #L3aa084.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3aa08a.  v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L3aa08e.  return @kind void;
}
