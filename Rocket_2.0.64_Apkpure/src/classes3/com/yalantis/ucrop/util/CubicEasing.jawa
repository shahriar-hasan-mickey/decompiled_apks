record `com.yalantis.ucrop.util.CubicEasing` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.CubicEasing` v0 @kind this) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3c88c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c88ce.  return @kind void;
}
procedure `float` `easeIn`(`float` v0 , `float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeIn:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c8830.  v0:= v0 / v3 @kind float;
  #L3c8832.  v2:= v2 * v0 @kind float;
  #L3c8836.  v2:= v2 * v0 @kind float;
  #L3c883a.  v2:= v2 * v0 @kind float;
  #L3c883e.  v2:= v2 + v1 @kind float;
  #L3c8840.  return v2;
}
procedure `float` `easeInOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeInOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c8854.  v0:= 2.0F;
  #L3c8858.  v4:= v4 / v0 @kind float;
  #L3c885a.  v1:= v1 / v4 @kind float;
  #L3c885c.  v4:= 1.0F;
  #L3c8860.  v4:= fcmpg(v1, v4);
  #L3c8864.  v3:= v3 / v0 @kind float;
  #L3c8866.  if v4 >= 0 then goto L3c8878;
  #L3c886a.  v3:= v3 * v1 @kind float;
  #L3c886e.  v3:= v3 * v1 @kind float;
  #L3c8872.  v3:= v3 * v1 @kind float;
  #L3c8876.  goto L3c8888;
  #L3c8878.  v1:= v1 - v0 @kind float;
  #L3c887a.  v4:= v1 * v1 @kind float;
  #L3c887e.  v4:= v4 * v1 @kind float;
  #L3c8882.  v4:= v4 + v0 @kind float;
  #L3c8884.  v3:= v3 * v4 @kind float;
  #L3c8888.  v3:= v3 + v2 @kind float;
  #L3c888a.  return v3;
}
procedure `float` `easeOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c889c.  v1:= v1 / v4 @kind float;
  #L3c889e.  v4:= 1.0F;
  #L3c88a2.  v1:= v1 - v4 @kind float;
  #L3c88a4.  v0:= v1 * v1 @kind float;
  #L3c88a8.  v0:= v0 * v1 @kind float;
  #L3c88ac.  v0:= v0 + v4 @kind float;
  #L3c88ae.  v3:= v3 * v0 @kind float;
  #L3c88b2.  v3:= v3 + v2 @kind float;
  #L3c88b4.  return v3;
}
