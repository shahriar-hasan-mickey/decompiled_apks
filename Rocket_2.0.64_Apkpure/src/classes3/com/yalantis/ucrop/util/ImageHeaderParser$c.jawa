record `com.yalantis.ucrop.util.ImageHeaderParser$c` @kind class @AccessFlag  extends `com.yalantis.ucrop.util.ImageHeaderParser$b` @kind interface {
  `java.io.InputStream` `com.yalantis.ucrop.util.ImageHeaderParser$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.ImageHeaderParser$c` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$c;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3c91fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c9202.  v0.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` := v1 @kind object;
  #L3c9206.  return @kind void;
}
procedure `int` `a`(`com.yalantis.ucrop.util.ImageHeaderParser$c` v2 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$c;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c9108.  v0:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c910c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3c9112.  v0:= temp;
  #L3c9114.  v0:= v0 ^< 8;
  #L3c9118.  v1:= 65280I;
  #L3c911e.  v0:= v0 ^& v1 @kind int;
  #L3c9120.  v1:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c9124.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3c912a.  v1:= temp;
  #L3c912c.  v1:= v1 ^& 255;
  #L3c9130.  v0:= v0 ^| v1 @kind int;
  #L3c9132.  return v0;
}
procedure `int` `b`(`com.yalantis.ucrop.util.ImageHeaderParser$c` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$c;.b:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3c9144.  v0:= v5;
  #L3c9146.  if v0 <= 0 then goto L3c9164;
  #L3c914a.  v1:= v3.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c914e.  v2:= v5 - v0 @kind int;
  #L3c9152.  call temp:= `read`(v1, v4, v2, v0) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3c9158.  v1:= temp;
  #L3c915a.  v2:= -1I;
  #L3c915c.  if v1 == v2 then goto L3c9164;
  #L3c9160.  v0:= v0 - v1 @kind int;
  #L3c9162.  goto L3c9146;
  #L3c9164.  v5:= v5 - v0 @kind int;
  #L3c9166.  return v5;
}
procedure `short` `c`(`com.yalantis.ucrop.util.ImageHeaderParser$c` v1 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$c;.c:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c91d8.  v0:= v1.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c91dc.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3c91e2.  v0:= temp;
  #L3c91e4.  v0:= v0 ^& 255;
  #L3c91e8.  v0:= (`short`) v0 @kind i2s;
  #L3c91ea.  return v0;
}
procedure `long` `skip`(`com.yalantis.ucrop.util.ImageHeaderParser$c` v7 @kind this, `long` v8 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$c;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3c9178.  v0:= 0L;
  #L3c917c.  v2:= lcmp(v8, v0);
  #L3c9180.  if v2 >= 0 then goto L3c9186;
  #L3c9184.  return v0 @kind wide;
  #L3c9186.  v2:= v8 @kind wide;
  #L3c9188.  v4:= lcmp(v2, v0);
  #L3c918c.  if v4 <= 0 then goto L3c91c2;
  #L3c9190.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c9194.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3c919a.  v4:= temp @kind wide;
  #L3c919c.  v6:= lcmp(v4, v0);
  #L3c91a0.  if v6 <= 0 then goto L3c91a8;
  #L3c91a4.  v2:= v2 - v4 @kind long;
  #L3c91a6.  goto L3c9188;
  #L3c91a8.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$c.a` @type ^`java.io.InputStream` @kind object;
  #L3c91ac.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3c91b2.  v4:= temp;
  #L3c91b4.  v5:= -1I;
  #L3c91b6.  if v4 != v5 then goto L3c91bc;
  #L3c91ba.  goto L3c91c2;
  #L3c91bc.  v4:= 1L;
  #L3c91c0.  goto L3c91a4;
  #L3c91c2.  v8:= v8 - v2 @kind long;
  #L3c91c4.  return v8 @kind wide;
}
