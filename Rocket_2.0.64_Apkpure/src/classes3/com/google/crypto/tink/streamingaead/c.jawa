record `com.google.crypto.tink.streamingaead.c` @kind class @AccessFlag FINAL extends `java.nio.channels.SeekableByteChannel` @kind interface {
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.a` @AccessFlag ;
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.b` @AccessFlag ;
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.streamingaead.c.c` @AccessFlag ;
  `long` `com.google.crypto.tink.streamingaead.c.d` @AccessFlag ;
  `long` `com.google.crypto.tink.streamingaead.c.e` @AccessFlag ;
  `java.util.Deque` `com.google.crypto.tink.streamingaead.c.f` @AccessFlag ;
  `byte`[] `com.google.crypto.tink.streamingaead.c.g` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.c` v2 @kind this, `com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.nio.channels.SeekableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/nio/channels/SeekableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1dfd38.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1dfd3e.  v0:= 0I;
  #L1dfd40.  v2.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L1dfd44.  v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L1dfd48.  v0:= new `java.util.ArrayDeque`;
  #L1dfd4c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1dfd52.  v2.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` := v0 @kind object;
  #L1dfd56.  call temp:= `getRawPrimitives`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L1dfd5c.  v3:= temp @kind object;
  #L1dfd5e.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1dfd64.  v3:= temp @kind object;
  #L1dfd66.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1dfd6c.  v0:= temp;
  #L1dfd6e.  if v0 == 0 then goto L1dfd96;
  #L1dfd72.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1dfd78.  v0:= temp @kind object;
  #L1dfd7a.  v0:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v0 @kind object;
  #L1dfd7e.  v1:= v2.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L1dfd82.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1dfd88.  v0:= temp @kind object;
  #L1dfd8a.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L1dfd8e.  call temp:= `add`(v1, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1dfd94.  goto L1dfd66;
  #L1dfd96.  v2.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` := v4 @kind object;
  #L1dfd9a.  v0:= -1L;
  #L1dfd9e.  v2.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` := v0 @kind wide;
  #L1dfda2.  call temp:= `position`(v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L1dfda8.  v3:= temp @kind wide;
  #L1dfdaa.  v2.`com.google.crypto.tink.streamingaead.c.e` @type ^`long` := v3 @kind wide;
  #L1dfdae.  call temp:= `clone`(v5) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1dfdb4.  v3:= temp @kind object;
  #L1dfdb6.  v3:= (`byte`[]) v3 @kind object;
  #L1dfdba.  v2.`com.google.crypto.tink.streamingaead.c.g` @type ^`byte`[] := v3 @kind object;
  #L1dfdbe.  return @kind void;
}
procedure `java.nio.channels.SeekableByteChannel` `a`(`com.google.crypto.tink.streamingaead.c` v6 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dfb74.  @monitorenter v6
  #L1dfb76.  v0:= v6.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L1dfb7a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L1dfb80.  v0:= temp;
  #L1dfb82.  if v0 != 0 then goto L1dfbce;
  #L1dfb86.  v0:= v6.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfb8a.  v1:= v6.`com.google.crypto.tink.streamingaead.c.e` @type ^`long` @kind wide;
  #L1dfb8e.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1dfb94.  v0:= v6.`com.google.crypto.tink.streamingaead.c.f` @type ^`java.util.Deque` @kind object;
  #L1dfb98.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L1dfb9e.  v0:= temp @kind object;
  #L1dfba0.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L1dfba4.  v1:= v6.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfba8.  v2:= v6.`com.google.crypto.tink.streamingaead.c.g` @type ^`byte`[] @kind object;
  #L1dfbac.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/StreamingAead;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1dfbb2.  v0:= temp @kind object;
  #L1dfbb4.  v1:= v6.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` @kind wide;
  #L1dfbb8.  v3:= 0L;
  #L1dfbbc.  v5:= lcmp(v1, v3);
  #L1dfbc0.  if v5 < 0 then goto L1dfbca;
  #L1dfbc4.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1dfbca.  @monitorexit v6
  #L1dfbcc.  return v0 @kind object;
  #L1dfbce.  v0:= new `java.io.IOException`;
  #L1dfbd2.  v1:= "No matching key found for the ciphertext in the stream." @kind object;
  #L1dfbd6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dfbdc.  throw v0;
  #L1dfbde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfbe0.  @monitorexit v6
  #L1dfbe2.  throw v0;
  catch `java.lang.Throwable` @[L1dfb76..L1dfba4] goto L1dfbde;
  catch `java.security.GeneralSecurityException` @[L1dfba4..L1dfbca] goto L1dfb76;
  catch `java.lang.Throwable` @[L1dfba4..L1dfbca] goto L1dfbde;
  catch `java.lang.Throwable` @[L1dfbce..L1dfbde] goto L1dfbde;
}
procedure `void` `close`(`com.google.crypto.tink.streamingaead.c` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dfdd0.  @monitorenter v1
  #L1dfdd2.  v0:= v1.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfdd6.  call `close`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.close:()V` @kind interface;
  #L1dfddc.  @monitorexit v1
  #L1dfdde.  return @kind void;
  #L1dfde0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfde2.  @monitorexit v1
  #L1dfde4.  throw v0;
  catch `java.lang.Throwable` @[L1dfdd2..L1dfddc] goto L1dfde0;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.streamingaead.c` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dfa64.  @monitorenter v1
  #L1dfa66.  v0:= v1.`com.google.crypto.tink.streamingaead.c.c` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfa6a.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.isOpen:()Z` @kind interface;
  #L1dfa70.  v0:= temp;
  #L1dfa72.  @monitorexit v1
  #L1dfa74.  return v0;
  #L1dfa76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfa78.  @monitorexit v1
  #L1dfa7a.  throw v0;
  catch `java.lang.Throwable` @[L1dfa66..L1dfa72] goto L1dfa76;
}
procedure `long` `position`(`com.google.crypto.tink.streamingaead.c` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.position:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dfca0.  @monitorenter v2
  #L1dfca2.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfca6.  if v0 == 0 then goto L1dfcb6;
  #L1dfcaa.  call temp:= `position`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L1dfcb0.  v0:= temp @kind wide;
  #L1dfcb2.  @monitorexit v2
  #L1dfcb4.  return v0 @kind wide;
  #L1dfcb6.  v0:= v2.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` @kind wide;
  #L1dfcba.  @monitorexit v2
  #L1dfcbc.  return v0 @kind wide;
  #L1dfcbe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfcc0.  @monitorexit v2
  #L1dfcc2.  throw v0;
  catch `java.lang.Throwable` @[L1dfca2..L1dfcb2] goto L1dfcbe;
  catch `java.lang.Throwable` @[L1dfcb6..L1dfcba] goto L1dfcbe;
}
procedure `java.nio.channels.SeekableByteChannel` `position`(`com.google.crypto.tink.streamingaead.c` v3 @kind this, `long` v4 ) @signature `Lcom/google/crypto/tink/streamingaead/c;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dfc14.  @monitorenter v3
  #L1dfc16.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfc1a.  if v0 == 0 then goto L1dfc26;
  #L1dfc1e.  call temp:= `position`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1dfc24.  goto L1dfc44;
  #L1dfc26.  v0:= 0L;
  #L1dfc2a.  v2:= lcmp(v4, v0);
  #L1dfc2e.  if v2 < 0 then goto L1dfc48;
  #L1dfc32.  v3.`com.google.crypto.tink.streamingaead.c.d` @type ^`long` := v4 @kind wide;
  #L1dfc36.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfc3a.  if v0 == 0 then goto L1dfc44;
  #L1dfc3e.  call temp:= `position`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1dfc44.  @monitorexit v3
  #L1dfc46.  return v3 @kind object;
  #L1dfc48.  v4:= new `java.lang.IllegalArgumentException`;
  #L1dfc4c.  v5:= "Position must be non-negative" @kind object;
  #L1dfc50.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dfc56.  throw v4;
  #L1dfc58.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfc5a.  @monitorexit v3
  #L1dfc5c.  throw v4;
  catch `java.lang.Throwable` @[L1dfc16..L1dfc44] goto L1dfc58;
  catch `java.lang.Throwable` @[L1dfc48..L1dfc58] goto L1dfc58;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.c` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dfa98.  @monitorenter v3
  #L1dfa9a.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1dfaa0.  v0:= temp;
  #L1dfaa2.  v1:= 0I;
  #L1dfaa4.  if v0 != 0 then goto L1dfaac;
  #L1dfaa8.  @monitorexit v3
  #L1dfaaa.  return v1;
  #L1dfaac.  v0:= v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfab0.  if v0 == 0 then goto L1dfac0;
  #L1dfab4.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1dfaba.  v4:= temp;
  #L1dfabc.  @monitorexit v3
  #L1dfabe.  return v4;
  #L1dfac0.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfac4.  if v0 != 0 then goto L1dfad4;
  #L1dfac8.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @kind direct;
  #L1dface.  v0:= temp @kind object;
  #L1dfad0.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L1dfad4.  v0:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfad8.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1dfade.  v0:= temp;
  #L1dfae0.  if v0 != 0 then goto L1dfae8;
  #L1dfae4.  @monitorexit v3
  #L1dfae6.  return v1;
  #L1dfae8.  v2:= v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfaec.  v3.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` := v2 @kind object;
  #L1dfaf0.  v2:= 0I;
  #L1dfaf2.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v2 @kind object;
  #L1dfaf6.  @monitorexit v3
  #L1dfaf8.  return v0;
  #L1dfafa.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/c;.a:()Ljava/nio/channels/SeekableByteChannel;` @kind direct;
  #L1dfb00.  v0:= temp @kind object;
  #L1dfb02.  v3.`com.google.crypto.tink.streamingaead.c.a` @type ^`java.nio.channels.SeekableByteChannel` := v0 @kind object;
  #L1dfb06.  goto L1dfad4;
  #L1dfb08.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfb0a.  @monitorexit v3
  #L1dfb0c.  throw v4;
  catch `java.lang.Throwable` @[L1dfa9a..L1dfaa2] goto L1dfb08;
  catch `java.lang.Throwable` @[L1dfaac..L1dfabc] goto L1dfb08;
  catch `java.lang.Throwable` @[L1dfac0..L1dfad4] goto L1dfb08;
  catch `java.io.IOException` @[L1dfad4..L1dfae0] goto L1dfafa;
  catch `java.lang.Throwable` @[L1dfad4..L1dfae0] goto L1dfb08;
  catch `java.io.IOException` @[L1dfae8..L1dfaf6] goto L1dfafa;
  catch `java.lang.Throwable` @[L1dfae8..L1dfaf6] goto L1dfb08;
  catch `java.lang.Throwable` @[L1dfafa..L1dfb06] goto L1dfb08;
}
procedure `long` `size`(`com.google.crypto.tink.streamingaead.c` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/c;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dfce8.  @monitorenter v2
  #L1dfcea.  v0:= v2.`com.google.crypto.tink.streamingaead.c.b` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1dfcee.  if v0 == 0 then goto L1dfcfe;
  #L1dfcf2.  call temp:= `size`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.size:()J` @kind interface;
  #L1dfcf8.  v0:= temp @kind wide;
  #L1dfcfa.  @monitorexit v2
  #L1dfcfc.  return v0 @kind wide;
  #L1dfcfe.  v0:= new `java.io.IOException`;
  #L1dfd02.  v1:= "Cannot determine size before first read()-call." @kind object;
  #L1dfd06.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dfd0c.  throw v0;
  #L1dfd0e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfd10.  @monitorexit v2
  #L1dfd12.  throw v0;
  catch `java.lang.Throwable` @[L1dfcea..L1dfcfa] goto L1dfd0e;
  catch `java.lang.Throwable` @[L1dfcfe..L1dfd0e] goto L1dfd0e;
}
procedure `java.nio.channels.SeekableByteChannel` `truncate`(`com.google.crypto.tink.streamingaead.c` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/streamingaead/c;.truncate:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L1dfc84.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L1dfc88.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L1dfc8e.  throw v1;
}
procedure `int` `write`(`com.google.crypto.tink.streamingaead.c` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/c;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;

  #L1dfb58.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L1dfb5c.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L1dfb62.  throw v1;
}
