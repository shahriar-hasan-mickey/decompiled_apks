record `com.google.crypto.tink.streamingaead.b` @kind class @AccessFlag FINAL extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.streamingaead.b.a` @AccessFlag ;
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.streamingaead.b.b` @AccessFlag ;
  `com.google.crypto.tink.subtle.RewindableReadableByteChannel` `com.google.crypto.tink.streamingaead.b.c` @AccessFlag ;
  `java.util.Deque` `com.google.crypto.tink.streamingaead.b.d` @AccessFlag ;
  `byte`[] `com.google.crypto.tink.streamingaead.b.e` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.b` v2 @kind this, `com.google.crypto.tink.PrimitiveSet` v3 @kind object, `java.nio.channels.ReadableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/b;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/nio/channels/ReadableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1df9a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1df9a6.  v0:= 0I;
  #L1df9a8.  v2.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L1df9ac.  v2.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L1df9b0.  v0:= new `java.util.ArrayDeque`;
  #L1df9b4.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L1df9ba.  v2.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` := v0 @kind object;
  #L1df9be.  call temp:= `getRawPrimitives`(v3) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L1df9c4.  v3:= temp @kind object;
  #L1df9c6.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1df9cc.  v3:= temp @kind object;
  #L1df9ce.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1df9d4.  v0:= temp;
  #L1df9d6.  if v0 == 0 then goto L1df9fe;
  #L1df9da.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1df9e0.  v0:= temp @kind object;
  #L1df9e2.  v0:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v0 @kind object;
  #L1df9e6.  v1:= v2.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L1df9ea.  call temp:= `getPrimitive`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1df9f0.  v0:= temp @kind object;
  #L1df9f2.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L1df9f6.  call temp:= `add`(v1, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1df9fc.  goto L1df9ce;
  #L1df9fe.  v3:= new `com.google.crypto.tink.subtle.RewindableReadableByteChannel`;
  #L1dfa02.  call `<init>`(v3, v4) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.<init>:(Ljava/nio/channels/ReadableByteChannel;)V` @kind direct;
  #L1dfa08.  v2.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` := v3 @kind object;
  #L1dfa0c.  call temp:= `clone`(v5) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1dfa12.  v3:= temp @kind object;
  #L1dfa14.  v3:= (`byte`[]) v3 @kind object;
  #L1dfa18.  v2.`com.google.crypto.tink.streamingaead.b.e` @type ^`byte`[] := v3 @kind object;
  #L1dfa1c.  return @kind void;
}
procedure `java.nio.channels.ReadableByteChannel` `a`(`com.google.crypto.tink.streamingaead.b` v3 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1df918.  @monitorenter v3
  #L1df91a.  v0:= v3.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L1df91e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L1df924.  v0:= temp;
  #L1df926.  if v0 != 0 then goto L1df95a;
  #L1df92a.  v0:= v3.`com.google.crypto.tink.streamingaead.b.d` @type ^`java.util.Deque` @kind object;
  #L1df92e.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L1df934.  v0:= temp @kind object;
  #L1df936.  v0:= (`com.google.crypto.tink.StreamingAead`) v0 @kind object;
  #L1df93a.  v1:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1df93e.  v2:= v3.`com.google.crypto.tink.streamingaead.b.e` @type ^`byte`[] @kind object;
  #L1df942.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/StreamingAead;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind interface;
  #L1df948.  v0:= temp @kind object;
  #L1df94a.  @monitorexit v3
  #L1df94c.  return v0 @kind object;
  #L1df94e.  v0:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1df952.  call `rewind`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @kind virtual;
  #L1df958.  goto L1df91a;
  #L1df95a.  v0:= new `java.io.IOException`;
  #L1df95e.  v1:= "No matching key found for the ciphertext in the stream." @kind object;
  #L1df962.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df968.  throw v0;
  #L1df96a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df96c.  @monitorexit v3
  #L1df96e.  throw v0;
  catch `java.lang.Throwable` @[L1df91a..L1df93a] goto L1df96a;
  catch `java.security.GeneralSecurityException` @[L1df93a..L1df94a] goto L1df94e;
  catch `java.lang.Throwable` @[L1df93a..L1df94a] goto L1df96a;
  catch `java.lang.Throwable` @[L1df94e..L1df96a] goto L1df96a;
}
procedure `void` `close`(`com.google.crypto.tink.streamingaead.b` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dfa30.  @monitorenter v1
  #L1dfa32.  v0:= v1.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1dfa36.  call `close`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.close:()V` @kind virtual;
  #L1dfa3c.  @monitorexit v1
  #L1dfa3e.  return @kind void;
  #L1dfa40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dfa42.  @monitorexit v1
  #L1dfa44.  throw v0;
  catch `java.lang.Throwable` @[L1dfa32..L1dfa3c] goto L1dfa40;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.streamingaead.b` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/b;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df810.  @monitorenter v1
  #L1df812.  v0:= v1.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1df816.  call temp:= `isOpen`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.isOpen:()Z` @kind virtual;
  #L1df81c.  v0:= temp;
  #L1df81e.  @monitorexit v1
  #L1df820.  return v0;
  #L1df822.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df824.  @monitorexit v1
  #L1df826.  throw v0;
  catch `java.lang.Throwable` @[L1df812..L1df81e] goto L1df822;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.b` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/b;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1df844.  @monitorenter v3
  #L1df846.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1df84c.  v0:= temp;
  #L1df84e.  v1:= 0I;
  #L1df850.  if v0 != 0 then goto L1df858;
  #L1df854.  @monitorexit v3
  #L1df856.  return v1;
  #L1df858.  v0:= v3.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1df85c.  if v0 == 0 then goto L1df86c;
  #L1df860.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1df866.  v4:= temp;
  #L1df868.  @monitorexit v3
  #L1df86a.  return v4;
  #L1df86c.  v0:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1df870.  if v0 != 0 then goto L1df880;
  #L1df874.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @kind direct;
  #L1df87a.  v0:= temp @kind object;
  #L1df87c.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L1df880.  v0:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1df884.  call temp:= `read`(v0, v4) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1df88a.  v0:= temp;
  #L1df88c.  if v0 != 0 then goto L1df894;
  #L1df890.  @monitorexit v3
  #L1df892.  return v1;
  #L1df894.  v2:= v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1df898.  v3.`com.google.crypto.tink.streamingaead.b.b` @type ^`java.nio.channels.ReadableByteChannel` := v2 @kind object;
  #L1df89c.  v2:= 0I;
  #L1df89e.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v2 @kind object;
  #L1df8a2.  v2:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1df8a6.  call `disableRewinding`(v2) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.disableRewinding:()V` @kind virtual;
  #L1df8ac.  @monitorexit v3
  #L1df8ae.  return v0;
  #L1df8b0.  v0:= v3.`com.google.crypto.tink.streamingaead.b.c` @type ^`com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind object;
  #L1df8b4.  call `rewind`(v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @kind virtual;
  #L1df8ba.  call temp:= `a`(v3) @signature `Lcom/google/crypto/tink/streamingaead/b;.a:()Ljava/nio/channels/ReadableByteChannel;` @kind direct;
  #L1df8c0.  v0:= temp @kind object;
  #L1df8c2.  v3.`com.google.crypto.tink.streamingaead.b.a` @type ^`java.nio.channels.ReadableByteChannel` := v0 @kind object;
  #L1df8c6.  goto L1df880;
  #L1df8c8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df8ca.  @monitorexit v3
  #L1df8cc.  throw v4;
  catch `java.lang.Throwable` @[L1df846..L1df84e] goto L1df8c8;
  catch `java.lang.Throwable` @[L1df858..L1df868] goto L1df8c8;
  catch `java.lang.Throwable` @[L1df86c..L1df880] goto L1df8c8;
  catch `java.io.IOException` @[L1df880..L1df88c] goto L1df8b0;
  catch `java.lang.Throwable` @[L1df880..L1df88c] goto L1df8c8;
  catch `java.io.IOException` @[L1df894..L1df8ac] goto L1df8b0;
  catch `java.lang.Throwable` @[L1df894..L1df8ac] goto L1df8c8;
  catch `java.lang.Throwable` @[L1df8b0..L1df8c6] goto L1df8c8;
}
