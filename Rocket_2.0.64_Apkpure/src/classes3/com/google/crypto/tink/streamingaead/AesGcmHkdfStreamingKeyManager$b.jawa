record `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` @kind class @AccessFlag  extends `com.google.crypto.tink.KeyTypeManager$KeyFactory` @kind class {
  `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.<init>:(Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1df1c8.  v0.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` := v1 @kind object;
  #L1df1cc.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1df1d2.  return @kind void;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `a`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df014.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind static;
  #L1df01a.  v0:= temp @kind object;
  #L1df01c.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L1df022.  v1:= temp;
  #L1df024.  call temp:= `randBytes`(v1) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1df02a.  v1:= temp @kind object;
  #L1df02c.  call temp:= `copyFrom`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1df032.  v1:= temp @kind object;
  #L1df034.  call temp:= `setKeyValue`(v0, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df03a.  v0:= temp @kind object;
  #L1df03c.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L1df042.  v3:= temp @kind object;
  #L1df044.  call temp:= `setParams`(v0, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df04a.  v3:= temp @kind object;
  #L1df04c.  v0:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L1df050.  call temp:= `getVersion`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L1df056.  v0:= temp;
  #L1df058.  call temp:= `setVersion`(v3, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df05e.  v3:= temp @kind object;
  #L1df060.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1df066.  v3:= temp @kind object;
  #L1df068.  v3:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v3 @kind object;
  #L1df06c.  return v3 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `b`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object, `java.io.InputStream` v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df080.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getVersion:()I` @kind virtual;
  #L1df086.  v0:= temp;
  #L1df088.  v1:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L1df08c.  call temp:= `getVersion`(v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L1df092.  v1:= temp;
  #L1df094.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L1df09a.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L1df0a0.  v0:= temp;
  #L1df0a2.  v0:= new `byte`[v0];
  #L1df0a6.  call temp:= `read`(v4, v0) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L1df0ac.  v4:= temp;
  #L1df0ae.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L1df0b4.  v1:= temp;
  #L1df0b6.  if v4 != v1 then goto L1df104;
  #L1df0ba.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind static;
  #L1df0c0.  v4:= temp @kind object;
  #L1df0c2.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1df0c8.  v0:= temp @kind object;
  #L1df0ca.  call temp:= `setKeyValue`(v4, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setKeyValue:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df0d0.  v4:= temp @kind object;
  #L1df0d2.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L1df0d8.  v3:= temp @kind object;
  #L1df0da.  call temp:= `setParams`(v4, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df0e0.  v3:= temp @kind object;
  #L1df0e2.  v4:= v2.`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b.b` @type ^`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind object;
  #L1df0e6.  call temp:= `getVersion`(v4) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L1df0ec.  v4:= temp;
  #L1df0ee.  call temp:= `setVersion`(v3, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;.setVersion:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey$Builder;` @kind virtual;
  #L1df0f4.  v3:= temp @kind object;
  #L1df0f6.  call temp:= `build`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1df0fc.  v3:= temp @kind object;
  #L1df0fe.  v3:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v3 @kind object;
  #L1df102.  return v3 @kind object;
  #L1df104.  v3:= new `java.security.GeneralSecurityException`;
  #L1df108.  v4:= "Not enough pseudorandomness given" @kind object;
  #L1df10c.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df112.  throw v3;
  #L1df114.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L1df116.  v4:= new `java.security.GeneralSecurityException`;
  #L1df11a.  v0:= "Reading pseudorandomness failed" @kind object;
  #L1df11e.  call `<init>`(v4, v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1df124.  throw v4;
  catch `java.io.IOException` @[L1df0a6..L1df114] goto L1df114;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` `c`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df148.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1df14e.  v0:= temp @kind object;
  #L1df150.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @kind static;
  #L1df156.  v2:= temp @kind object;
  #L1df158.  return v2 @kind object;
}
procedure `java.lang.Object` `createKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.createKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df188.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L1df18c.  call temp:= `a`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.a:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L1df192.  v1:= temp @kind object;
  #L1df194.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df1e4.  call temp:= `getKeySize`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getKeySize:()I` @kind virtual;
  #L1df1ea.  v0:= temp;
  #L1df1ec.  v1:= 16I;
  #L1df1f0.  if v0 < v1 then goto L1df204;
  #L1df1f4.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L1df1fa.  v3:= temp @kind object;
  #L1df1fc.  call `b`(v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L1df202.  return @kind void;
  #L1df204.  v3:= new `java.security.GeneralSecurityException`;
  #L1df208.  v0:= "key_size must be at least 16 bytes" @kind object;
  #L1df20c.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df212.  throw v3;
}
procedure `java.lang.Object` `deriveKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.deriveKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;Ljava/io/InputStream;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df1a8.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L1df1ac.  call temp:= `b`(v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;Ljava/io/InputStream;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L1df1b2.  v1:= temp @kind object;
  #L1df1b4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKeyFormat`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.parseKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df16c.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.c:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;` @kind virtual;
  #L1df172.  v1:= temp @kind object;
  #L1df174.  return v1 @kind object;
}
procedure `void` `validateKeyFormat`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.validateKeyFormat:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df224.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L1df228.  call `d`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;)V` @kind virtual;
  #L1df22e.  return @kind void;
}
