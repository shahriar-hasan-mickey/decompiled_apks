record `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.KeyTypeManager` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v4 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1df40c.  v0:= constclass @type ^`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` @kind object;
  #L1df410.  v1:= 1I;
  #L1df412.  v1:= new `com.google.crypto.tink.KeyTypeManager$PrimitiveFactory`[v1];
  #L1df416.  v2:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$a`;
  #L1df41a.  v3:= constclass @type ^`com.google.crypto.tink.StreamingAead` @kind object;
  #L1df41e.  call `<init>`(v2, v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$a;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L1df424.  v3:= 0I;
  #L1df426.  v1[v3]:= v2 @kind object;
  #L1df42a.  call `<init>`(v4, v0, v1) @signature `Lcom/google/crypto/tink/KeyTypeManager;.<init>:(Ljava/lang/Class;[Lcom/google/crypto/tink/KeyTypeManager$PrimitiveFactory;)V` @kind direct;
  #L1df430.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmHkdf1MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes128GcmHkdf1MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1df240.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1df244.  v1:= 16I;
  #L1df248.  v2:= 1048576I;
  #L1df24c.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1df252.  v0:= temp @kind object;
  #L1df254.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes128GcmHkdf4KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes128GcmHkdf4KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1df268.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1df26c.  v1:= 16I;
  #L1df270.  v2:= 4096I;
  #L1df274.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1df27a.  v0:= temp @kind object;
  #L1df27c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmHkdf1MBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes256GcmHkdf1MBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1df290.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1df294.  v1:= 32I;
  #L1df298.  v2:= 1048576I;
  #L1df29c.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1df2a2.  v0:= temp @kind object;
  #L1df2a4.  return v0 @kind object;
}
procedure `com.google.crypto.tink.KeyTemplate` `aes256GcmHkdf4KBTemplate`() @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.aes256GcmHkdf4KBTemplate:()Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1df2b8.  v0:= `@@com.google.crypto.tink.proto.HashType.SHA256` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1df2bc.  v1:= 32I;
  #L1df2c0.  v2:= 4096I;
  #L1df2c4.  call temp:= `c`(v1, v0, v1, v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1df2ca.  v0:= temp @kind object;
  #L1df2cc.  return v0 @kind object;
}
procedure `void` `b`(`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams` v0 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.b:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1df444.  call `d`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L1df44a.  return @kind void;
}
procedure `com.google.crypto.tink.KeyTemplate` `c`(`int` v1 , `com.google.crypto.tink.proto.HashType` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.c:(ILcom/google/crypto/tink/proto/HashType;II)Lcom/google/crypto/tink/KeyTemplate;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1df2e0.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind static;
  #L1df2e6.  v0:= temp @kind object;
  #L1df2e8.  call temp:= `setCiphertextSegmentSize`(v0, v4) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setCiphertextSegmentSize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L1df2ee.  v4:= temp @kind object;
  #L1df2f0.  call temp:= `setDerivedKeySize`(v4, v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setDerivedKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L1df2f6.  v3:= temp @kind object;
  #L1df2f8.  call temp:= `setHkdfHashType`(v3, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;.setHkdfHashType:(Lcom/google/crypto/tink/proto/HashType;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams$Builder;` @kind virtual;
  #L1df2fe.  v2:= temp @kind object;
  #L1df300.  call temp:= `build`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1df306.  v2:= temp @kind object;
  #L1df308.  v2:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams`) v2 @kind object;
  #L1df30c.  call temp:= `newBuilder`() @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat;.newBuilder:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind static;
  #L1df312.  v3:= temp @kind object;
  #L1df314.  call temp:= `setKeySize`(v3, v1) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;.setKeySize:(I)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind virtual;
  #L1df31a.  v1:= temp @kind object;
  #L1df31c.  call temp:= `setParams`(v1, v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;.setParams:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKeyFormat$Builder;` @kind virtual;
  #L1df322.  v1:= temp @kind object;
  #L1df324.  call temp:= `build`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite$Builder;.build:()Lcom/google/crypto/tink/shaded/protobuf/GeneratedMessageLite;` @kind virtual;
  #L1df32a.  v1:= temp @kind object;
  #L1df32c.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat`) v1 @kind object;
  #L1df330.  v2:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager`;
  #L1df334.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @kind direct;
  #L1df33a.  call temp:= `getKeyType`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @kind virtual;
  #L1df340.  v2:= temp @kind object;
  #L1df342.  call temp:= `toByteArray`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/AbstractMessageLite;.toByteArray:()[B` @kind virtual;
  #L1df348.  v1:= temp @kind object;
  #L1df34a.  v3:= `@@com.google.crypto.tink.KeyTemplate$OutputPrefixType.RAW` @type ^`com.google.crypto.tink.KeyTemplate$OutputPrefixType` @kind object;
  #L1df34e.  call temp:= `create`(v2, v1, v3) @signature `Lcom/google/crypto/tink/KeyTemplate;.create:(Ljava/lang/String;[BLcom/google/crypto/tink/KeyTemplate$OutputPrefixType;)Lcom/google/crypto/tink/KeyTemplate;` @kind static;
  #L1df354.  v1:= temp @kind object;
  #L1df356.  return v1 @kind object;
}
procedure `void` `d`(`com.google.crypto.tink.proto.AesGcmHkdfStreamingParams` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1df4d4.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L1df4da.  v0:= temp;
  #L1df4dc.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L1df4e2.  call temp:= `getHkdfHashType`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getHkdfHashType:()Lcom/google/crypto/tink/proto/HashType;` @kind virtual;
  #L1df4e8.  v0:= temp @kind object;
  #L1df4ea.  v1:= `@@com.google.crypto.tink.proto.HashType.UNKNOWN_HASH` @type ^`com.google.crypto.tink.proto.HashType` @kind object;
  #L1df4ee.  if v0 == v1 then goto L1df524;
  #L1df4f2.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getCiphertextSegmentSize:()I` @kind virtual;
  #L1df4f8.  v0:= temp;
  #L1df4fa.  call temp:= `getDerivedKeySize`(v2) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;.getDerivedKeySize:()I` @kind virtual;
  #L1df500.  v2:= temp;
  #L1df502.  v2:= v2 + 7;
  #L1df506.  v2:= v2 + 16;
  #L1df50a.  v2:= v2 + 2;
  #L1df50e.  if v0 < v2 then goto L1df514;
  #L1df512.  return @kind void;
  #L1df514.  v2:= new `java.security.GeneralSecurityException`;
  #L1df518.  v0:= "ciphertext_segment_size must be at least (derived_key_size + NONCE_PREFIX_IN_BYTES + TAG_SIZE_IN_BYTES + 2)" @kind object;
  #L1df51c.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df522.  throw v2;
  #L1df524.  v2:= new `java.security.GeneralSecurityException`;
  #L1df528.  v0:= "unknown HKDF hash type" @kind object;
  #L1df52c.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df532.  throw v2;
}
procedure `void` `register`(`boolean` v1 ) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.register:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1df45c.  v0:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager`;
  #L1df460.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.<init>:()V` @kind direct;
  #L1df466.  call `registerKeyManager`(v0, v1) @signature `Lcom/google/crypto/tink/Registry;.registerKeyManager:(Lcom/google/crypto/tink/KeyTypeManager;Z)V` @kind static;
  #L1df46c.  return @kind void;
}
procedure `java.lang.String` `getKeyType`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getKeyType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df3f4.  v0:= "type.googleapis.com/google.crypto.tink.AesGcmHkdfStreamingKey" @kind object;
  #L1df3f8.  return v0 @kind object;
}
procedure `int` `getVersion`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df3e0.  v0:= 0I;
  #L1df3e2.  return v0;
}
procedure `com.google.crypto.tink.KeyTypeManager$KeyFactory` `keyFactory`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.keyFactory:()Lcom/google/crypto/tink/KeyTypeManager$KeyFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df368.  v0:= new `com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager$b`;
  #L1df36c.  v1:= constclass @type ^`com.google.crypto.tink.proto.AesGcmHkdfStreamingKeyFormat` @kind object;
  #L1df370.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager$b;.<init>:(Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;Ljava/lang/Class;)V` @kind direct;
  #L1df376.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.KeyData$KeyMaterialType` `keyMaterialType`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.keyMaterialType:()Lcom/google/crypto/tink/proto/KeyData$KeyMaterialType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df3ac.  v0:= `@@com.google.crypto.tink.proto.KeyData$KeyMaterialType.SYMMETRIC` @type ^`com.google.crypto.tink.proto.KeyData$KeyMaterialType` @kind object;
  #L1df3b0.  return v0 @kind object;
}
procedure `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` `parseKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v2 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df388.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1df38e.  v0:= temp @kind object;
  #L1df390.  call temp:= `parseFrom`(v2, v0) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.parseFrom:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind static;
  #L1df396.  v2:= temp @kind object;
  #L1df398.  return v2 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `parseKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.ByteString` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df3c4.  call temp:= `parseKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.parseKey:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;` @kind virtual;
  #L1df3ca.  v1:= temp @kind object;
  #L1df3cc.  return v1 @kind object;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v2 @kind this, `com.google.crypto.tink.proto.AesGcmHkdfStreamingKey` v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df480.  call temp:= `getVersion`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.getVersion:()I` @kind virtual;
  #L1df486.  v0:= temp;
  #L1df488.  call temp:= `getVersion`(v2) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.getVersion:()I` @kind virtual;
  #L1df48e.  v1:= temp;
  #L1df490.  call `validateVersion`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @kind static;
  #L1df496.  call temp:= `getParams`(v3) @signature `Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;.getParams:()Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;` @kind virtual;
  #L1df49c.  v3:= temp @kind object;
  #L1df49e.  call `d`(v3) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.d:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingParams;)V` @kind static;
  #L1df4a4.  return @kind void;
}
procedure `void` `validateKey`(`com.google.crypto.tink.streamingaead.AesGcmHkdfStreamingKeyManager` v0 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite` v1 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1df4b8.  v1:= (`com.google.crypto.tink.proto.AesGcmHkdfStreamingKey`) v1 @kind object;
  #L1df4bc.  call `validateKey`(v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager;.validateKey:(Lcom/google/crypto/tink/proto/AesGcmHkdfStreamingKey;)V` @kind virtual;
  #L1df4c2.  return @kind void;
}
