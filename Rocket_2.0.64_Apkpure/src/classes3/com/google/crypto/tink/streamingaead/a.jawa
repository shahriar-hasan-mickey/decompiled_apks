record `com.google.crypto.tink.streamingaead.a` @kind class @AccessFlag FINAL extends `java.io.InputStream` @kind class {
  `boolean` `com.google.crypto.tink.streamingaead.a.a` @AccessFlag ;
  `java.io.InputStream` `com.google.crypto.tink.streamingaead.a.b` @AccessFlag ;
  `java.io.InputStream` `com.google.crypto.tink.streamingaead.a.c` @AccessFlag ;
  `com.google.crypto.tink.PrimitiveSet` `com.google.crypto.tink.streamingaead.a.d` @AccessFlag ;
  `byte`[] `com.google.crypto.tink.streamingaead.a.e` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.streamingaead.a` v1 @kind this, `com.google.crypto.tink.PrimitiveSet` v2 @kind object, `java.io.InputStream` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/a;.<init>:(Lcom/google/crypto/tink/PrimitiveSet;Ljava/io/InputStream;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1df738.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1df73e.  v0:= 0I;
  #L1df740.  v1.`com.google.crypto.tink.streamingaead.a.a` @type ^`boolean` := v0 @kind boolean;
  #L1df744.  v0:= 0I;
  #L1df746.  v1.`com.google.crypto.tink.streamingaead.a.b` @type ^`java.io.InputStream` := v0 @kind object;
  #L1df74a.  v1.`com.google.crypto.tink.streamingaead.a.d` @type ^`com.google.crypto.tink.PrimitiveSet` := v2 @kind object;
  #L1df74e.  call temp:= `markSupported`(v3) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L1df754.  v2:= temp;
  #L1df756.  if v2 == 0 then goto L1df760;
  #L1df75a.  v1.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` := v3 @kind object;
  #L1df75e.  goto L1df76e;
  #L1df760.  v2:= new `java.io.BufferedInputStream`;
  #L1df764.  call `<init>`(v2, v3) @signature `Ljava/io/BufferedInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L1df76a.  v1.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` := v2 @kind object;
  #L1df76e.  v2:= v1.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` @kind object;
  #L1df772.  v3:= 2147483647I;
  #L1df778.  call `mark`(v2, v3) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L1df77e.  call temp:= `clone`(v4) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1df784.  v2:= temp @kind object;
  #L1df786.  v2:= (`byte`[]) v2 @kind object;
  #L1df78a.  v1.`com.google.crypto.tink.streamingaead.a.e` @type ^`byte`[] := v2 @kind object;
  #L1df78e.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.streamingaead.a` v2 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1df7d4.  v0:= v2.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` @kind object;
  #L1df7d8.  v1:= 0I;
  #L1df7da.  call `mark`(v0, v1) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L1df7e0.  return @kind void;
}
procedure `void` `b`(`com.google.crypto.tink.streamingaead.a` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1df7f4.  v0:= v1.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` @kind object;
  #L1df7f8.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L1df7fe.  return @kind void;
}
procedure `int` `available`(`com.google.crypto.tink.streamingaead.a` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df558.  @monitorenter v1
  #L1df55a.  v0:= v1.`com.google.crypto.tink.streamingaead.a.b` @type ^`java.io.InputStream` @kind object;
  #L1df55e.  if v0 != 0 then goto L1df568;
  #L1df562.  v0:= 0I;
  #L1df564.  @monitorexit v1
  #L1df566.  return v0;
  #L1df568.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L1df56e.  v0:= temp;
  #L1df570.  @monitorexit v1
  #L1df572.  return v0;
  #L1df574.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df576.  @monitorexit v1
  #L1df578.  throw v0;
  catch `java.lang.Throwable` @[L1df55a..L1df55e] goto L1df574;
  catch `java.lang.Throwable` @[L1df568..L1df570] goto L1df574;
}
procedure `void` `close`(`com.google.crypto.tink.streamingaead.a` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df7a0.  @monitorenter v1
  #L1df7a2.  v0:= v1.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` @kind object;
  #L1df7a6.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L1df7ac.  @monitorexit v1
  #L1df7ae.  return @kind void;
  #L1df7b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df7b2.  @monitorexit v1
  #L1df7b4.  throw v0;
  catch `java.lang.Throwable` @[L1df7a2..L1df7ac] goto L1df7b0;
}
procedure `boolean` `markSupported`(`com.google.crypto.tink.streamingaead.a` v1 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1df544.  v0:= 0I;
  #L1df546.  return v0;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.a` v3 @kind this) @signature `Lcom/google/crypto/tink/streamingaead/a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1df5a0.  @monitorenter v3
  #L1df5a2.  v0:= 1I;
  #L1df5a4.  v1:= new `byte`[v0];
  #L1df5a8.  call temp:= `read`(v3, v1) @signature `Lcom/google/crypto/tink/streamingaead/a;.read:([B)I` @kind virtual;
  #L1df5ae.  v2:= temp;
  #L1df5b0.  if v2 != v0 then goto L1df5be;
  #L1df5b4.  v0:= 0I;
  #L1df5b6.  v0:= v1[v0] @kind byte;
  #L1df5ba.  @monitorexit v3
  #L1df5bc.  return v0;
  #L1df5be.  v0:= -1I;
  #L1df5c0.  @monitorexit v3
  #L1df5c2.  return v0;
  #L1df5c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df5c6.  @monitorexit v3
  #L1df5c8.  throw v0;
  catch `java.lang.Throwable` @[L1df5a4..L1df5ba] goto L1df5c4;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.a` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/streamingaead/a;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1df5e8.  @monitorenter v2
  #L1df5ea.  v0:= 0I;
  #L1df5ec.  v1:= length @variable v3;
  #L1df5ee.  call temp:= `read`(v2, v3, v0, v1) @signature `Lcom/google/crypto/tink/streamingaead/a;.read:([BII)I` @kind virtual;
  #L1df5f4.  v3:= temp;
  #L1df5f6.  @monitorexit v2
  #L1df5f8.  return v3;
  #L1df5fa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df5fc.  @monitorexit v2
  #L1df5fe.  throw v3;
  catch `java.lang.Throwable` @[L1df5ec..L1df5f6] goto L1df5fa;
}
procedure `int` `read`(`com.google.crypto.tink.streamingaead.a` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/google/crypto/tink/streamingaead/a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1df61c.  @monitorenter v4
  #L1df61e.  if v7 != 0 then goto L1df628;
  #L1df622.  v5:= 0I;
  #L1df624.  @monitorexit v4
  #L1df626.  return v5;
  #L1df628.  v0:= v4.`com.google.crypto.tink.streamingaead.a.b` @type ^`java.io.InputStream` @kind object;
  #L1df62c.  if v0 == 0 then goto L1df63c;
  #L1df630.  call temp:= `read`(v0, v5, v6, v7) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1df636.  v5:= temp;
  #L1df638.  @monitorexit v4
  #L1df63a.  return v5;
  #L1df63c.  v0:= v4.`com.google.crypto.tink.streamingaead.a.a` @type ^`boolean` @kind boolean;
  #L1df640.  if v0 != 0 then goto L1df6dc;
  #L1df644.  v0:= 1I;
  #L1df646.  v4.`com.google.crypto.tink.streamingaead.a.a` @type ^`boolean` := v0 @kind boolean;
  #L1df64a.  v0:= v4.`com.google.crypto.tink.streamingaead.a.d` @type ^`com.google.crypto.tink.PrimitiveSet` @kind object;
  #L1df64e.  call temp:= `getRawPrimitives`(v0) @signature `Lcom/google/crypto/tink/PrimitiveSet;.getRawPrimitives:()Ljava/util/List;` @kind virtual;
  #L1df654.  v0:= temp @kind object;
  #L1df656.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1df65c.  v0:= temp @kind object;
  #L1df65e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1df664.  v1:= temp;
  #L1df666.  if v1 == 0 then goto L1df6cc;
  #L1df66a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1df670.  v1:= temp @kind object;
  #L1df672.  v1:= (`com.google.crypto.tink.PrimitiveSet$Entry`) v1 @kind object;
  #L1df676.  call temp:= `getPrimitive`(v1) @signature `Lcom/google/crypto/tink/PrimitiveSet$Entry;.getPrimitive:()Ljava/lang/Object;` @kind virtual;
  #L1df67c.  v1:= temp @kind object;
  #L1df67e.  v1:= (`com.google.crypto.tink.StreamingAead`) v1 @kind object;
  #L1df682.  v2:= v4.`com.google.crypto.tink.streamingaead.a.c` @type ^`java.io.InputStream` @kind object;
  #L1df686.  v3:= v4.`com.google.crypto.tink.streamingaead.a.e` @type ^`byte`[] @kind object;
  #L1df68a.  call temp:= `newDecryptingStream`(v1, v2, v3) @signature `Lcom/google/crypto/tink/StreamingAead;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @kind interface;
  #L1df690.  v1:= temp @kind object;
  #L1df692.  call temp:= `read`(v1, v5, v6, v7) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1df698.  v2:= temp;
  #L1df69a.  if v2 == 0 then goto L1df6ac;
  #L1df69e.  v4.`com.google.crypto.tink.streamingaead.a.b` @type ^`java.io.InputStream` := v1 @kind object;
  #L1df6a2.  call `a`(v4) @signature `Lcom/google/crypto/tink/streamingaead/a;.a:()V` @kind direct;
  #L1df6a8.  @monitorexit v4
  #L1df6aa.  return v2;
  #L1df6ac.  v1:= new `java.io.IOException`;
  #L1df6b0.  v2:= "Could not read bytes from the ciphertext stream" @kind object;
  #L1df6b4.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df6ba.  throw v1;
  #L1df6bc.  call `b`(v4) @signature `Lcom/google/crypto/tink/streamingaead/a;.b:()V` @kind direct;
  #L1df6c2.  goto L1df65e;
  #L1df6c4.  call `b`(v4) @signature `Lcom/google/crypto/tink/streamingaead/a;.b:()V` @kind direct;
  #L1df6ca.  goto L1df65e;
  #L1df6cc.  v5:= new `java.io.IOException`;
  #L1df6d0.  v6:= "No matching key found for the ciphertext in the stream." @kind object;
  #L1df6d4.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df6da.  throw v5;
  #L1df6dc.  v5:= new `java.io.IOException`;
  #L1df6e0.  v6:= "No matching key found for the ciphertext in the stream." @kind object;
  #L1df6e4.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df6ea.  throw v5;
  #L1df6ec.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1df6ee.  @monitorexit v4
  #L1df6f0.  throw v5;
  catch `java.lang.Throwable` @[L1df628..L1df638] goto L1df6ec;
  catch `java.lang.Throwable` @[L1df63c..L1df676] goto L1df6ec;
  catch `java.io.IOException` @[L1df676..L1df6a8] goto L1df6c4;
  catch `java.security.GeneralSecurityException` @[L1df676..L1df6a8] goto L1df6bc;
  catch `java.lang.Throwable` @[L1df676..L1df6a8] goto L1df6ec;
  catch `java.io.IOException` @[L1df6ac..L1df6bc] goto L1df6c4;
  catch `java.security.GeneralSecurityException` @[L1df6ac..L1df6bc] goto L1df6bc;
  catch `java.lang.Throwable` @[L1df6ac..L1df6bc] goto L1df6ec;
  catch `java.lang.Throwable` @[L1df6bc..L1df6ec] goto L1df6ec;
}
