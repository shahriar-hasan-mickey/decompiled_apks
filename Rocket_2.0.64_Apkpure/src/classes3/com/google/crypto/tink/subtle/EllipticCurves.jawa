record `com.google.crypto.tink.subtle.EllipticCurves` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EllipticCurves` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e9a88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e9a8e.  return @kind void;
}
procedure `void` `a`(`java.security.spec.ECPoint` v4 @kind object, `java.security.spec.EllipticCurve` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e9aa0.  call temp:= `getModulus`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e9aa6.  v0:= temp @kind object;
  #L1e9aa8.  call temp:= `getAffineX`(v4) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9aae.  v1:= temp @kind object;
  #L1e9ab0.  call temp:= `getAffineY`(v4) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9ab6.  v4:= temp @kind object;
  #L1e9ab8.  if v1 == 0 then goto L1e9b78;
  #L1e9abc.  if v4 == 0 then goto L1e9b78;
  #L1e9ac0.  call temp:= `signum`(v1) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L1e9ac6.  v2:= temp;
  #L1e9ac8.  v3:= -1I;
  #L1e9aca.  if v2 == v3 then goto L1e9b68;
  #L1e9ace.  call temp:= `compareTo`(v1, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1e9ad4.  v2:= temp;
  #L1e9ad6.  if v2 >= 0 then goto L1e9b68;
  #L1e9ada.  call temp:= `signum`(v4) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L1e9ae0.  v2:= temp;
  #L1e9ae2.  if v2 == v3 then goto L1e9b58;
  #L1e9ae6.  call temp:= `compareTo`(v4, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1e9aec.  v2:= temp;
  #L1e9aee.  if v2 >= 0 then goto L1e9b58;
  #L1e9af2.  call temp:= `multiply`(v4, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9af8.  v4:= temp @kind object;
  #L1e9afa.  call temp:= `mod`(v4, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b00.  v4:= temp @kind object;
  #L1e9b02.  call temp:= `multiply`(v1, v1) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b08.  v2:= temp @kind object;
  #L1e9b0a.  call temp:= `getA`(v5) @signature `Ljava/security/spec/EllipticCurve;.getA:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9b10.  v3:= temp @kind object;
  #L1e9b12.  call temp:= `add`(v2, v3) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b18.  v2:= temp @kind object;
  #L1e9b1a.  call temp:= `multiply`(v2, v1) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b20.  v1:= temp @kind object;
  #L1e9b22.  call temp:= `getB`(v5) @signature `Ljava/security/spec/EllipticCurve;.getB:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9b28.  v5:= temp @kind object;
  #L1e9b2a.  call temp:= `add`(v1, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b30.  v5:= temp @kind object;
  #L1e9b32.  call temp:= `mod`(v5, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9b38.  v5:= temp @kind object;
  #L1e9b3a.  call temp:= `equals`(v4, v5) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e9b40.  v4:= temp;
  #L1e9b42.  if v4 == 0 then goto L1e9b48;
  #L1e9b46.  return @kind void;
  #L1e9b48.  v4:= new `java.security.GeneralSecurityException`;
  #L1e9b4c.  v5:= "Point is not on curve" @kind object;
  #L1e9b50.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9b56.  throw v4;
  #L1e9b58.  v4:= new `java.security.GeneralSecurityException`;
  #L1e9b5c.  v5:= "y is out of range" @kind object;
  #L1e9b60.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9b66.  throw v4;
  #L1e9b68.  v4:= new `java.security.GeneralSecurityException`;
  #L1e9b6c.  v5:= "x is out of range" @kind object;
  #L1e9b70.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9b76.  throw v4;
  #L1e9b78.  v4:= new `java.security.GeneralSecurityException`;
  #L1e9b7c.  v5:= "point is at infinity" @kind object;
  #L1e9b80.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9b86.  throw v4;
}
procedure `void` `b`(`java.security.interfaces.ECPublicKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.b:(Ljava/security/interfaces/ECPublicKey;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1e9b98.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1e9b9e.  v0:= temp @kind object;
  #L1e9ba0.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e9ba6.  v1:= temp @kind object;
  #L1e9ba8.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e9bae.  v1:= temp @kind object;
  #L1e9bb0.  call `a`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e9bb6.  return @kind void;
}
procedure `int` `c`(`java.security.spec.EllipticCurve` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.c:(Ljava/security/spec/EllipticCurve;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L1e9198.  call temp:= `getModulus`(v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e919e.  v1:= temp @kind object;
  #L1e91a0.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L1e91a4.  call temp:= `subtract`(v1, v0) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e91aa.  v1:= temp @kind object;
  #L1e91ac.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1e91b2.  v1:= temp;
  #L1e91b4.  return v1;
}
procedure `byte`[] `computeSharedSecret`(`java.security.interfaces.ECPrivateKey` v0 @kind object, `java.security.interfaces.ECPublicKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/interfaces/ECPublicKey;)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e8ce8.  call `f`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L1e8cee.  call temp:= `getW`(v1) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1e8cf4.  v1:= temp @kind object;
  #L1e8cf6.  call temp:= `computeSharedSecret`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/ECPoint;)[B` @kind static;
  #L1e8cfc.  v0:= temp @kind object;
  #L1e8cfe.  return v0 @kind object;
}
procedure `byte`[] `computeSharedSecret`(`java.security.interfaces.ECPrivateKey` v2 @kind object, `java.security.spec.ECPoint` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.computeSharedSecret:(Ljava/security/interfaces/ECPrivateKey;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e8d10.  call temp:= `getParams`(v2) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e8d16.  v0:= temp @kind object;
  #L1e8d18.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e8d1e.  v0:= temp @kind object;
  #L1e8d20.  call `a`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e8d26.  call temp:= `getParams`(v2) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e8d2c.  v0:= temp @kind object;
  #L1e8d2e.  v1:= new `java.security.spec.ECPublicKeySpec`;
  #L1e8d32.  call `<init>`(v1, v3, v0) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L1e8d38.  v3:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e8d3c.  v0:= "EC" @kind object;
  #L1e8d40.  call temp:= `getInstance`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e8d46.  v3:= temp @kind object;
  #L1e8d48.  v3:= (`java.security.KeyFactory`) v3 @kind object;
  #L1e8d4c.  call temp:= `generatePublic`(v3, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L1e8d52.  v3:= temp @kind object;
  #L1e8d54.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_AGREEMENT` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e8d58.  v1:= "ECDH" @kind object;
  #L1e8d5c.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e8d62.  v0:= temp @kind object;
  #L1e8d64.  v0:= (`javax.crypto.KeyAgreement`) v0 @kind object;
  #L1e8d68.  call `init`(v0, v2) @signature `Ljavax/crypto/KeyAgreement;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1e8d6e.  v1:= 1I;
  #L1e8d70.  call temp:= `doPhase`(v0, v3, v1) @signature `Ljavax/crypto/KeyAgreement;.doPhase:(Ljava/security/Key;Z)Ljava/security/Key;` @kind virtual;
  #L1e8d76.  call temp:= `generateSecret`(v0) @signature `Ljavax/crypto/KeyAgreement;.generateSecret:()[B` @kind virtual;
  #L1e8d7c.  v3:= temp @kind object;
  #L1e8d7e.  call `g`(v3, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.g:([BLjava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L1e8d84.  return v3 @kind object;
  #L1e8d86.  v2:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L1e8d88.  v3:= new `java.security.GeneralSecurityException`;
  #L1e8d8c.  call temp:= `toString`(v2) @signature `Ljava/lang/IllegalStateException;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e8d92.  v2:= temp @kind object;
  #L1e8d94.  call `<init>`(v3, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8d9a.  throw v3;
  catch `java.lang.IllegalStateException` @[L1e8d70..L1e8d84] goto L1e8d86;
}
procedure `java.security.spec.ECParameterSpec` `d`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e9768.  v0:= new `java.math.BigInteger`;
  #L1e976c.  call `<init>`(v0, v3) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9772.  v3:= new `java.math.BigInteger`;
  #L1e9776.  call `<init>`(v3, v4) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e977c.  v4:= new `java.math.BigInteger`;
  #L1e9780.  v1:= "3" @kind object;
  #L1e9784.  call `<init>`(v4, v1) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e978a.  call temp:= `subtract`(v0, v4) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9790.  v4:= temp @kind object;
  #L1e9792.  v1:= new `java.math.BigInteger`;
  #L1e9796.  v2:= 16I;
  #L1e979a.  call `<init>`(v1, v5, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1e97a0.  v5:= new `java.math.BigInteger`;
  #L1e97a4.  call `<init>`(v5, v6, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1e97aa.  v6:= new `java.math.BigInteger`;
  #L1e97ae.  call `<init>`(v6, v7, v2) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1e97b4.  v7:= new `java.security.spec.ECFieldFp`;
  #L1e97b8.  call `<init>`(v7, v0) @signature `Ljava/security/spec/ECFieldFp;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L1e97be.  v0:= new `java.security.spec.EllipticCurve`;
  #L1e97c2.  call `<init>`(v0, v7, v4, v1) @signature `Ljava/security/spec/EllipticCurve;.<init>:(Ljava/security/spec/ECField;Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e97c8.  v4:= new `java.security.spec.ECPoint`;
  #L1e97cc.  call `<init>`(v4, v5, v6) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e97d2.  v5:= new `java.security.spec.ECParameterSpec`;
  #L1e97d6.  v6:= 1I;
  #L1e97d8.  call `<init>`(v5, v0, v4, v3, v6) @signature `Ljava/security/spec/ECParameterSpec;.<init>:(Ljava/security/spec/EllipticCurve;Ljava/security/spec/ECPoint;Ljava/math/BigInteger;I)V` @kind direct;
  #L1e97de.  return v5 @kind object;
}
procedure `byte`[] `e`(`byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e90e0.  v0:= 0I;
  #L1e90e2.  v1:= 0I;
  #L1e90e4.  v2:= length @variable v5;
  #L1e90e6.  if v1 >= v2 then goto L1e90f8;
  #L1e90ea.  v2:= v5[v1] @kind byte;
  #L1e90ee.  if v2 != 0 then goto L1e90f8;
  #L1e90f2.  v1:= v1 + 1;
  #L1e90f6.  goto L1e90e4;
  #L1e90f8.  v2:= length @variable v5;
  #L1e90fa.  v3:= 1I;
  #L1e90fc.  if v1 != v2 then goto L1e9104;
  #L1e9100.  v1:= length @variable v5;
  #L1e9102.  v1:= v1 - v3 @kind int;
  #L1e9104.  v2:= v5[v1] @kind byte;
  #L1e9108.  v4:= 128I;
  #L1e910c.  v2:= v2 ^& v4 @kind int;
  #L1e910e.  if v2 != v4 then goto L1e9114;
  #L1e9112.  v0:= 1I;
  #L1e9114.  v2:= length @variable v5;
  #L1e9116.  v2:= v2 - v1 @kind int;
  #L1e9118.  v2:= v2 + v0 @kind int;
  #L1e911a.  v2:= new `byte`[v2];
  #L1e911e.  v3:= length @variable v5;
  #L1e9120.  v3:= v3 - v1 @kind int;
  #L1e9122.  call `arraycopy`(v5, v1, v2, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e9128.  return v2 @kind object;
}
procedure `java.security.spec.ECPoint` `ecPointDecode`(`java.security.spec.EllipticCurve` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecPointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e9880.  call temp:= `pointDecode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L1e9886.  v0:= temp @kind object;
  #L1e9888.  return v0 @kind object;
}
procedure `byte`[] `ecdsaDer2Ieee`(`byte`[] v8 @kind object, `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecdsaDer2Ieee:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e8dbc.  call temp:= `isValidDerEncoding`(v8) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isValidDerEncoding:([B)Z` @kind static;
  #L1e8dc2.  v0:= temp;
  #L1e8dc4.  if v0 == 0 then goto L1e8e3c;
  #L1e8dc8.  v0:= new `byte`[v9];
  #L1e8dcc.  v1:= 1I;
  #L1e8dce.  v2:= v8[v1] @kind byte;
  #L1e8dd2.  v2:= v2 ^& 255;
  #L1e8dd6.  v3:= 128I;
  #L1e8dda.  if v2 < v3 then goto L1e8de2;
  #L1e8dde.  v2:= 3I;
  #L1e8de0.  goto L1e8de4;
  #L1e8de2.  v2:= 2I;
  #L1e8de4.  v2:= v2 + v1 @kind int;
  #L1e8de6.  v3:= v2 + 1;
  #L1e8dea.  v2:= v8[v2] @kind byte;
  #L1e8dee.  v4:= v8[v3] @kind byte;
  #L1e8df2.  v5:= 0I;
  #L1e8df4.  if v4 != 0 then goto L1e8dfc;
  #L1e8df8.  v4:= 1I;
  #L1e8dfa.  goto L1e8dfe;
  #L1e8dfc.  v4:= 0I;
  #L1e8dfe.  v6:= v3 + v4 @kind int;
  #L1e8e02.  v7:= v9 / 2;
  #L1e8e06.  v7:= v7 - v2 @kind int;
  #L1e8e08.  v7:= v7 + v4 @kind int;
  #L1e8e0a.  v4:= v2 - v4 @kind int;
  #L1e8e0e.  call `arraycopy`(v8, v6, v0, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e8e14.  v2:= v2 + v1 @kind int;
  #L1e8e16.  v3:= v3 + v2 @kind int;
  #L1e8e18.  v2:= v3 + 1;
  #L1e8e1c.  v3:= v8[v3] @kind byte;
  #L1e8e20.  v4:= v8[v2] @kind byte;
  #L1e8e24.  if v4 != 0 then goto L1e8e2a;
  #L1e8e28.  goto L1e8e2c;
  #L1e8e2a.  v1:= 0I;
  #L1e8e2c.  v2:= v2 + v1 @kind int;
  #L1e8e2e.  v9:= v9 - v3 @kind int;
  #L1e8e30.  v9:= v9 + v1 @kind int;
  #L1e8e32.  v3:= v3 - v1 @kind int;
  #L1e8e34.  call `arraycopy`(v8, v2, v0, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e8e3a.  return v0 @kind object;
  #L1e8e3c.  v8:= new `java.security.GeneralSecurityException`;
  #L1e8e40.  v9:= "Invalid DER encoding" @kind object;
  #L1e8e44.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8e4a.  throw v8;
}
procedure `byte`[] `ecdsaIeee2Der`(`byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.ecdsaIeee2Der:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e8e5c.  v0:= length @variable v7;
  #L1e8e5e.  v1:= 2I;
  #L1e8e60.  v0:= v0 %% v1 @kind int;
  #L1e8e62.  if v0 != 0 then goto L1e8f2c;
  #L1e8e66.  v0:= length @variable v7;
  #L1e8e68.  if v0 == 0 then goto L1e8f2c;
  #L1e8e6c.  v0:= length @variable v7;
  #L1e8e6e.  v2:= 132I;
  #L1e8e72.  if v0 > v2 then goto L1e8f2c;
  #L1e8e76.  v0:= length @variable v7;
  #L1e8e78.  v0:= v0 / v1 @kind int;
  #L1e8e7a.  call temp:= `copyOf`(v7, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e8e80.  v0:= temp @kind object;
  #L1e8e82.  call temp:= `e`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @kind static;
  #L1e8e88.  v0:= temp @kind object;
  #L1e8e8a.  v2:= length @variable v7;
  #L1e8e8c.  v2:= v2 / v1 @kind int;
  #L1e8e8e.  v3:= length @variable v7;
  #L1e8e90.  call temp:= `copyOfRange`(v7, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e8e96.  v7:= temp @kind object;
  #L1e8e98.  call temp:= `e`(v7) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.e:([B)[B` @kind static;
  #L1e8e9e.  v7:= temp @kind object;
  #L1e8ea0.  v2:= length @variable v0;
  #L1e8ea2.  v2:= v2 + v1 @kind int;
  #L1e8ea4.  v3:= 1I;
  #L1e8ea6.  v2:= v2 + v3 @kind int;
  #L1e8ea8.  v2:= v2 + v3 @kind int;
  #L1e8eaa.  v4:= length @variable v7;
  #L1e8eac.  v2:= v2 + v4 @kind int;
  #L1e8eae.  v4:= 128I;
  #L1e8eb2.  v5:= 48I;
  #L1e8eb6.  v6:= 0I;
  #L1e8eb8.  if v2 < v4 then goto L1e8eda;
  #L1e8ebc.  v4:= v2 + 3;
  #L1e8ec0.  v4:= new `byte`[v4];
  #L1e8ec4.  v4[v6]:= v5 @kind byte;
  #L1e8ec8.  v5:= -127I;
  #L1e8ecc.  v4[v3]:= v5 @kind byte;
  #L1e8ed0.  v2:= (`byte`) v2 @kind i2b;
  #L1e8ed2.  v4[v1]:= v2 @kind byte;
  #L1e8ed6.  v2:= 3I;
  #L1e8ed8.  goto L1e8eee;
  #L1e8eda.  v4:= v2 + 2;
  #L1e8ede.  v4:= new `byte`[v4];
  #L1e8ee2.  v4[v6]:= v5 @kind byte;
  #L1e8ee6.  v2:= (`byte`) v2 @kind i2b;
  #L1e8ee8.  v4[v3]:= v2 @kind byte;
  #L1e8eec.  v2:= 2I;
  #L1e8eee.  v3:= v2 + 1;
  #L1e8ef2.  v4[v2]:= v1 @kind byte;
  #L1e8ef6.  v2:= v3 + 1;
  #L1e8efa.  v5:= length @variable v0;
  #L1e8efc.  v5:= (`byte`) v5 @kind i2b;
  #L1e8efe.  v4[v3]:= v5 @kind byte;
  #L1e8f02.  v3:= length @variable v0;
  #L1e8f04.  call `arraycopy`(v0, v6, v4, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e8f0a.  v0:= length @variable v0;
  #L1e8f0c.  v2:= v2 + v0 @kind int;
  #L1e8f0e.  v0:= v2 + 1;
  #L1e8f12.  v4[v2]:= v1 @kind byte;
  #L1e8f16.  v1:= v0 + 1;
  #L1e8f1a.  v2:= length @variable v7;
  #L1e8f1c.  v2:= (`byte`) v2 @kind i2b;
  #L1e8f1e.  v4[v0]:= v2 @kind byte;
  #L1e8f22.  v0:= length @variable v7;
  #L1e8f24.  call `arraycopy`(v7, v6, v4, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e8f2a.  return v4 @kind object;
  #L1e8f2c.  v7:= new `java.security.GeneralSecurityException`;
  #L1e8f30.  v0:= "Invalid IEEE_P1363 encoding" @kind object;
  #L1e8f34.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e8f3a.  throw v7;
}
procedure `int` `encodingSizeInBytes`(`java.security.spec.EllipticCurve` v2 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.encodingSizeInBytes:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e913c.  call temp:= `fieldSizeInBytes`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L1e9142.  v2:= temp;
  #L1e9144.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L1e9148.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1e914e.  v3:= temp;
  #L1e9150.  v3:= v0[v3];
  #L1e9154.  v0:= 2I;
  #L1e9156.  v1:= 1I;
  #L1e9158.  if v3 == v1 then goto L1e9180;
  #L1e915c.  if v3 == v0 then goto L1e917a;
  #L1e9160.  v0:= 3I;
  #L1e9162.  if v3 != v0 then goto L1e916a;
  #L1e9166.  v2:= v2 + v1 @kind int;
  #L1e9168.  return v2;
  #L1e916a.  v2:= new `java.security.GeneralSecurityException`;
  #L1e916e.  v3:= "unknown EC point format" @kind object;
  #L1e9172.  call `<init>`(v2, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9178.  throw v2;
  #L1e917a.  v2:= v2 * 2;
  #L1e917e.  return v2;
  #L1e9180.  v2:= v2 * 2;
  #L1e9184.  v2:= v2 + v1 @kind int;
  #L1e9186.  return v2;
}
procedure `void` `f`(`java.security.interfaces.ECPublicKey` v0 @kind object, `java.security.interfaces.ECPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @AccessFlag STATIC {
    temp;

  #L1e9c00.  call temp:= `getParams`(v0) @signature `Ljava/security/interfaces/ECPublicKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e9c06.  v0:= temp @kind object;
  #L1e9c08.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e9c0e.  v1:= temp @kind object;
  #L1e9c10.  call temp:= `isSameEcParameterSpec`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L1e9c16.  v0:= temp;
  #L1e9c18.  if v0 == 0 then goto L1e9c1e;
  #L1e9c1c.  return @kind void;
  #L1e9c1e.  v0:= new `java.security.GeneralSecurityException`;
  #L1e9c22.  v1:= "invalid public key spec" @kind object;
  #L1e9c26.  call `<init>`(v0, v1) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9c2c.  throw v0;
  #L1e9c2e.  v0:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L1e9c30.  goto L1e9c34;
  #L1e9c32.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1e9c34.  v1:= new `java.security.GeneralSecurityException`;
  #L1e9c38.  call temp:= `toString`(v0) @signature `Ljava/lang/RuntimeException;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e9c3e.  v0:= temp @kind object;
  #L1e9c40.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9c46.  throw v1;
  catch `java.lang.IllegalArgumentException` @[L1e9c00..L1e9c2e] goto L1e9c32;
  catch `java.lang.NullPointerException` @[L1e9c00..L1e9c2e] goto L1e9c2e;
}
procedure `int` `fieldSizeInBytes`(`java.security.spec.EllipticCurve` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e91c8.  call temp:= `c`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.c:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L1e91ce.  v0:= temp;
  #L1e91d0.  v0:= v0 + 7;
  #L1e91d4.  v0:= v0 / 8;
  #L1e91d8.  return v0;
}
procedure `void` `g`(`byte`[] v3 @kind object, `java.security.interfaces.ECPrivateKey` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.g:([BLjava/security/interfaces/ECPrivateKey;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e9c68.  call temp:= `getParams`(v4) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e9c6e.  v4:= temp @kind object;
  #L1e9c70.  call temp:= `getCurve`(v4) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e9c76.  v4:= temp @kind object;
  #L1e9c78.  v0:= new `java.math.BigInteger`;
  #L1e9c7c.  v1:= 1I;
  #L1e9c7e.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9c84.  call temp:= `signum`(v0) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L1e9c8a.  v3:= temp;
  #L1e9c8c.  v2:= -1I;
  #L1e9c8e.  if v3 == v2 then goto L1e9cae;
  #L1e9c92.  call temp:= `getModulus`(v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e9c98.  v3:= temp @kind object;
  #L1e9c9a.  call temp:= `compareTo`(v0, v3) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1e9ca0.  v3:= temp;
  #L1e9ca2.  if v3 >= 0 then goto L1e9cae;
  #L1e9ca6.  call temp:= `getY`(v0, v1, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e9cac.  return @kind void;
  #L1e9cae.  v3:= new `java.security.GeneralSecurityException`;
  #L1e9cb2.  v4:= "shared secret is out of range" @kind object;
  #L1e9cb6.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9cbc.  throw v3;
}
procedure `java.security.KeyPair` `generateKeyPair`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e94e4.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e94ea.  v0:= temp @kind object;
  #L1e94ec.  call temp:= `generateKeyPair`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Ljava/security/spec/ECParameterSpec;)Ljava/security/KeyPair;` @kind static;
  #L1e94f2.  v0:= temp @kind object;
  #L1e94f4.  return v0 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`(`java.security.spec.ECParameterSpec` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.generateKeyPair:(Ljava/security/spec/ECParameterSpec;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e9508.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_PAIR_GENERATOR` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e950c.  v1:= "EC" @kind object;
  #L1e9510.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e9516.  v0:= temp @kind object;
  #L1e9518.  v0:= (`java.security.KeyPairGenerator`) v0 @kind object;
  #L1e951c.  call `initialize`(v0, v2) @signature `Ljava/security/KeyPairGenerator;.initialize:(Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L1e9522.  call temp:= `generateKeyPair`(v0) @signature `Ljava/security/KeyPairGenerator;.generateKeyPair:()Ljava/security/KeyPair;` @kind virtual;
  #L1e9528.  v2:= temp @kind object;
  #L1e952a.  return v2 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getCurveSpec`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e96e8.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.b` @type ^`int`[] @kind object;
  #L1e96ec.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1e96f2.  v1:= temp;
  #L1e96f4.  v0:= v0[v1];
  #L1e96f8.  v1:= 1I;
  #L1e96fa.  if v0 == v1 then goto L1e974c;
  #L1e96fe.  v1:= 2I;
  #L1e9700.  if v0 == v1 then goto L1e9742;
  #L1e9704.  v1:= 3I;
  #L1e9706.  if v0 != v1 then goto L1e9714;
  #L1e970a.  call temp:= `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e9710.  v3:= temp @kind object;
  #L1e9712.  return v3 @kind object;
  #L1e9714.  v0:= new `java.security.NoSuchAlgorithmException`;
  #L1e9718.  v1:= new `java.lang.StringBuilder`;
  #L1e971c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e9722.  v2:= "curve not implemented:" @kind object;
  #L1e9726.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e972c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e9732.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e9738.  v3:= temp @kind object;
  #L1e973a.  call `<init>`(v0, v3) @signature `Ljava/security/NoSuchAlgorithmException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9740.  throw v0;
  #L1e9742.  call temp:= `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e9748.  v3:= temp @kind object;
  #L1e974a.  return v3 @kind object;
  #L1e974c.  call temp:= `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e9752.  v3:= temp @kind object;
  #L1e9754.  return v3 @kind object;
}
procedure `java.security.interfaces.ECPrivateKey` `getEcPrivateKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPrivateKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B)Ljava/security/interfaces/ECPrivateKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e9578.  call temp:= `getCurveSpec`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e957e.  v2:= temp @kind object;
  #L1e9580.  v0:= new `java.math.BigInteger`;
  #L1e9584.  v1:= 1I;
  #L1e9586.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e958c.  v3:= new `java.security.spec.ECPrivateKeySpec`;
  #L1e9590.  call `<init>`(v3, v0, v2) @signature `Ljava/security/spec/ECPrivateKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L1e9596.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e959a.  v0:= "EC" @kind object;
  #L1e959e.  call temp:= `getInstance`(v2, v0) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e95a4.  v2:= temp @kind object;
  #L1e95a6.  v2:= (`java.security.KeyFactory`) v2 @kind object;
  #L1e95aa.  call temp:= `generatePrivate`(v2, v3) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L1e95b0.  v2:= temp @kind object;
  #L1e95b2.  v2:= (`java.security.interfaces.ECPrivateKey`) v2 @kind object;
  #L1e95b6.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPrivateKey` `getEcPrivateKey`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPrivateKey:([B)Ljava/security/interfaces/ECPrivateKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e953c.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e9540.  v1:= "EC" @kind object;
  #L1e9544.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e954a.  v0:= temp @kind object;
  #L1e954c.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L1e9550.  v1:= new `java.security.spec.PKCS8EncodedKeySpec`;
  #L1e9554.  call `<init>`(v1, v2) @signature `Ljava/security/spec/PKCS8EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L1e955a.  call temp:= `generatePrivate`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePrivate:(Ljava/security/spec/KeySpec;)Ljava/security/PrivateKey;` @kind virtual;
  #L1e9560.  v2:= temp @kind object;
  #L1e9562.  v2:= (`java.security.interfaces.ECPrivateKey`) v2 @kind object;
  #L1e9566.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e9678.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e967e.  v0:= temp @kind object;
  #L1e9680.  call temp:= `getEcPublicKey`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Ljava/security/spec/ECParameterSpec;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @kind static;
  #L1e9686.  v0:= temp @kind object;
  #L1e9688.  return v0 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v2 @kind object, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;[B[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e9604.  call temp:= `getCurveSpec`(v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e960a.  v2:= temp @kind object;
  #L1e960c.  v0:= new `java.math.BigInteger`;
  #L1e9610.  v1:= 1I;
  #L1e9612.  call `<init>`(v0, v1, v3) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9618.  v3:= new `java.math.BigInteger`;
  #L1e961c.  call `<init>`(v3, v1, v4) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9622.  v4:= new `java.security.spec.ECPoint`;
  #L1e9626.  call `<init>`(v4, v0, v3) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e962c.  call temp:= `getCurve`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e9632.  v3:= temp @kind object;
  #L1e9634.  call `a`(v4, v3) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e963a.  v3:= new `java.security.spec.ECPublicKeySpec`;
  #L1e963e.  call `<init>`(v3, v4, v2) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L1e9644.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e9648.  v4:= "EC" @kind object;
  #L1e964c.  call temp:= `getInstance`(v2, v4) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e9652.  v2:= temp @kind object;
  #L1e9654.  v2:= (`java.security.KeyFactory`) v2 @kind object;
  #L1e9658.  call temp:= `generatePublic`(v2, v3) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L1e965e.  v2:= temp @kind object;
  #L1e9660.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L1e9664.  return v2 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`java.security.spec.ECParameterSpec` v1 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:(Ljava/security/spec/ECParameterSpec;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e969c.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e96a2.  v0:= temp @kind object;
  #L1e96a4.  call temp:= `pointDecode`(v0, v2, v3) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L1e96aa.  v2:= temp @kind object;
  #L1e96ac.  v3:= new `java.security.spec.ECPublicKeySpec`;
  #L1e96b0.  call `<init>`(v3, v2, v1) @signature `Ljava/security/spec/ECPublicKeySpec;.<init>:(Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V` @kind direct;
  #L1e96b6.  v1:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e96ba.  v2:= "EC" @kind object;
  #L1e96be.  call temp:= `getInstance`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e96c4.  v1:= temp @kind object;
  #L1e96c6.  v1:= (`java.security.KeyFactory`) v1 @kind object;
  #L1e96ca.  call temp:= `generatePublic`(v1, v3) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L1e96d0.  v1:= temp @kind object;
  #L1e96d2.  v1:= (`java.security.interfaces.ECPublicKey`) v1 @kind object;
  #L1e96d6.  return v1 @kind object;
}
procedure `java.security.interfaces.ECPublicKey` `getEcPublicKey`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getEcPublicKey:([B)Ljava/security/interfaces/ECPublicKey;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e95c8.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e95cc.  v1:= "EC" @kind object;
  #L1e95d0.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e95d6.  v0:= temp @kind object;
  #L1e95d8.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L1e95dc.  v1:= new `java.security.spec.X509EncodedKeySpec`;
  #L1e95e0.  call `<init>`(v1, v2) @signature `Ljava/security/spec/X509EncodedKeySpec;.<init>:([B)V` @kind direct;
  #L1e95e6.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L1e95ec.  v2:= temp @kind object;
  #L1e95ee.  v2:= (`java.security.interfaces.ECPublicKey`) v2 @kind object;
  #L1e95f2.  return v2 @kind object;
}
procedure `java.math.BigInteger` `getModulus`(`java.security.spec.EllipticCurve` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e91ec.  call temp:= `getField`(v1) @signature `Ljava/security/spec/EllipticCurve;.getField:()Ljava/security/spec/ECField;` @kind virtual;
  #L1e91f2.  v1:= temp @kind object;
  #L1e91f4.  v0:= instanceof @variable v1 @type ^`java.security.spec.ECFieldFp` @kind boolean;
  #L1e91f8.  if v0 == 0 then goto L1e920a;
  #L1e91fc.  v1:= (`java.security.spec.ECFieldFp`) v1 @kind object;
  #L1e9200.  call temp:= `getP`(v1) @signature `Ljava/security/spec/ECFieldFp;.getP:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9206.  v1:= temp @kind object;
  #L1e9208.  return v1 @kind object;
  #L1e920a.  v1:= new `java.security.GeneralSecurityException`;
  #L1e920e.  v0:= "Only curves over prime order fields are supported" @kind object;
  #L1e9212.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9218.  throw v1;
}
procedure `java.security.spec.ECParameterSpec` `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e97f0.  v0:= "115792089210356248762697446949407573530086143415290314195533631308867097853951" @kind object;
  #L1e97f4.  v1:= "115792089210356248762697446949407573529996955224135760342422259061068512044369" @kind object;
  #L1e97f8.  v2:= "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b" @kind object;
  #L1e97fc.  v3:= "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296" @kind object;
  #L1e9800.  v4:= "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5" @kind object;
  #L1e9804.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e980a.  v0:= temp @kind object;
  #L1e980c.  return v0 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e9820.  v0:= "39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319" @kind object;
  #L1e9824.  v1:= "39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643" @kind object;
  #L1e9828.  v2:= "b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef" @kind object;
  #L1e982c.  v3:= "aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7" @kind object;
  #L1e9830.  v4:= "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f" @kind object;
  #L1e9834.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e983a.  v0:= temp @kind object;
  #L1e983c.  return v0 @kind object;
}
procedure `java.security.spec.ECParameterSpec` `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e9850.  v0:= "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151" @kind object;
  #L1e9854.  v1:= "6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449" @kind object;
  #L1e9858.  v2:= "051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00" @kind object;
  #L1e985c.  v3:= "c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66" @kind object;
  #L1e9860.  v4:= "11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650" @kind object;
  #L1e9864.  call temp:= `d`(v0, v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.d:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e986a.  v0:= temp @kind object;
  #L1e986c.  return v0 @kind object;
}
procedure `java.math.BigInteger` `getY`(`java.math.BigInteger` v3 @kind object, `boolean` v4 , `java.security.spec.EllipticCurve` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e922c.  call temp:= `getModulus`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e9232.  v0:= temp @kind object;
  #L1e9234.  call temp:= `getA`(v5) @signature `Ljava/security/spec/EllipticCurve;.getA:()Ljava/math/BigInteger;` @kind virtual;
  #L1e923a.  v1:= temp @kind object;
  #L1e923c.  call temp:= `getB`(v5) @signature `Ljava/security/spec/EllipticCurve;.getB:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9242.  v5:= temp @kind object;
  #L1e9244.  call temp:= `multiply`(v3, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e924a.  v2:= temp @kind object;
  #L1e924c.  call temp:= `add`(v2, v1) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9252.  v1:= temp @kind object;
  #L1e9254.  call temp:= `multiply`(v1, v3) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e925a.  v3:= temp @kind object;
  #L1e925c.  call temp:= `add`(v3, v5) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9262.  v3:= temp @kind object;
  #L1e9264.  call temp:= `mod`(v3, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e926a.  v3:= temp @kind object;
  #L1e926c.  call temp:= `modSqrt`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.modSqrt:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind static;
  #L1e9272.  v3:= temp @kind object;
  #L1e9274.  v5:= 0I;
  #L1e9276.  call temp:= `testBit`(v3, v5) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e927c.  v5:= temp;
  #L1e927e.  if v4 == v5 then goto L1e9292;
  #L1e9282.  call temp:= `subtract`(v0, v3) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9288.  v3:= temp @kind object;
  #L1e928a.  call temp:= `mod`(v3, v0) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9290.  v3:= temp @kind object;
  #L1e9292.  return v3 @kind object;
}
procedure `boolean` `isNistEcParameterSpec`(`java.security.spec.ECParameterSpec` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isNistEcParameterSpec:(Ljava/security/spec/ECParameterSpec;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e8ae8.  call temp:= `getNistP256Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP256Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e8aee.  v0:= temp @kind object;
  #L1e8af0.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L1e8af6.  v0:= temp;
  #L1e8af8.  if v0 != 0 then goto L1e8b2a;
  #L1e8afc.  call temp:= `getNistP384Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP384Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e8b02.  v0:= temp @kind object;
  #L1e8b04.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L1e8b0a.  v0:= temp;
  #L1e8b0c.  if v0 != 0 then goto L1e8b2a;
  #L1e8b10.  call temp:= `getNistP521Params`() @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getNistP521Params:()Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e8b16.  v0:= temp @kind object;
  #L1e8b18.  call temp:= `isSameEcParameterSpec`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @kind static;
  #L1e8b1e.  v1:= temp;
  #L1e8b20.  if v1 == 0 then goto L1e8b26;
  #L1e8b24.  goto L1e8b2a;
  #L1e8b26.  v1:= 0I;
  #L1e8b28.  goto L1e8b2c;
  #L1e8b2a.  v1:= 1I;
  #L1e8b2c.  return v1;
}
procedure `boolean` `isSameEcParameterSpec`(`java.security.spec.ECParameterSpec` v2 @kind object, `java.security.spec.ECParameterSpec` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isSameEcParameterSpec:(Ljava/security/spec/ECParameterSpec;Ljava/security/spec/ECParameterSpec;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e8b40.  call temp:= `getCurve`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e8b46.  v0:= temp @kind object;
  #L1e8b48.  call temp:= `getCurve`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e8b4e.  v1:= temp @kind object;
  #L1e8b50.  call temp:= `equals`(v0, v1) @signature `Ljava/security/spec/EllipticCurve;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e8b56.  v0:= temp;
  #L1e8b58.  if v0 == 0 then goto L1e8bac;
  #L1e8b5c.  call temp:= `getGenerator`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getGenerator:()Ljava/security/spec/ECPoint;` @kind virtual;
  #L1e8b62.  v0:= temp @kind object;
  #L1e8b64.  call temp:= `getGenerator`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getGenerator:()Ljava/security/spec/ECPoint;` @kind virtual;
  #L1e8b6a.  v1:= temp @kind object;
  #L1e8b6c.  call temp:= `equals`(v0, v1) @signature `Ljava/security/spec/ECPoint;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e8b72.  v0:= temp;
  #L1e8b74.  if v0 == 0 then goto L1e8bac;
  #L1e8b78.  call temp:= `getOrder`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getOrder:()Ljava/math/BigInteger;` @kind virtual;
  #L1e8b7e.  v0:= temp @kind object;
  #L1e8b80.  call temp:= `getOrder`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getOrder:()Ljava/math/BigInteger;` @kind virtual;
  #L1e8b86.  v1:= temp @kind object;
  #L1e8b88.  call temp:= `equals`(v0, v1) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e8b8e.  v0:= temp;
  #L1e8b90.  if v0 == 0 then goto L1e8bac;
  #L1e8b94.  call temp:= `getCofactor`(v2) @signature `Ljava/security/spec/ECParameterSpec;.getCofactor:()I` @kind virtual;
  #L1e8b9a.  v2:= temp;
  #L1e8b9c.  call temp:= `getCofactor`(v3) @signature `Ljava/security/spec/ECParameterSpec;.getCofactor:()I` @kind virtual;
  #L1e8ba2.  v3:= temp;
  #L1e8ba4.  if v2 != v3 then goto L1e8bac;
  #L1e8ba8.  v2:= 1I;
  #L1e8baa.  goto L1e8bae;
  #L1e8bac.  v2:= 0I;
  #L1e8bae.  return v2;
}
procedure `boolean` `isValidDerEncoding`(`byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.isValidDerEncoding:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1e8bc0.  v0:= length @variable v9;
  #L1e8bc2.  v1:= 0I;
  #L1e8bc4.  v2:= 8I;
  #L1e8bc8.  if v0 >= v2 then goto L1e8bce;
  #L1e8bcc.  return v1;
  #L1e8bce.  v0:= v9[v1] @kind byte;
  #L1e8bd2.  v2:= 48I;
  #L1e8bd6.  if v0 == v2 then goto L1e8bdc;
  #L1e8bda.  return v1;
  #L1e8bdc.  v0:= 1I;
  #L1e8bde.  v2:= v9[v0] @kind byte;
  #L1e8be2.  v2:= v2 ^& 255;
  #L1e8be6.  v3:= 129I;
  #L1e8bea.  v4:= 2I;
  #L1e8bec.  v5:= 128I;
  #L1e8bf0.  if v2 != v3 then goto L1e8c06;
  #L1e8bf4.  v2:= v9[v4] @kind byte;
  #L1e8bf8.  v2:= v2 ^& 255;
  #L1e8bfc.  if v2 >= v5 then goto L1e8c02;
  #L1e8c00.  return v1;
  #L1e8c02.  v3:= 2I;
  #L1e8c04.  goto L1e8c12;
  #L1e8c06.  if v2 == v5 then goto L1e8cd6;
  #L1e8c0a.  if v2 <= v3 then goto L1e8c10;
  #L1e8c0e.  goto L1e8cd6;
  #L1e8c10.  v3:= 1I;
  #L1e8c12.  v6:= length @variable v9;
  #L1e8c14.  v6:= v6 - v0 @kind int;
  #L1e8c16.  v6:= v6 - v3 @kind int;
  #L1e8c18.  if v2 == v6 then goto L1e8c1e;
  #L1e8c1c.  return v1;
  #L1e8c1e.  v2:= v3 + 1;
  #L1e8c22.  v6:= v9[v2] @kind byte;
  #L1e8c26.  if v6 == v4 then goto L1e8c2c;
  #L1e8c2a.  return v1;
  #L1e8c2c.  v2:= v2 + v0 @kind int;
  #L1e8c2e.  v6:= v9[v2] @kind byte;
  #L1e8c32.  v6:= v6 ^& 255;
  #L1e8c36.  v2:= v2 + v0 @kind int;
  #L1e8c38.  v2:= v2 + v6 @kind int;
  #L1e8c3a.  v2:= v2 + v0 @kind int;
  #L1e8c3c.  v7:= length @variable v9;
  #L1e8c3e.  if v2 < v7 then goto L1e8c44;
  #L1e8c42.  return v1;
  #L1e8c44.  if v6 != 0 then goto L1e8c4a;
  #L1e8c48.  return v1;
  #L1e8c4a.  v7:= v3 + 3;
  #L1e8c4e.  v8:= v9[v7] @kind byte;
  #L1e8c52.  v8:= v8 ^& 255;
  #L1e8c56.  if v8 < v5 then goto L1e8c5c;
  #L1e8c5a.  return v1;
  #L1e8c5c.  if v6 <= v0 then goto L1e8c7a;
  #L1e8c60.  v8:= v9[v7] @kind byte;
  #L1e8c64.  if v8 != 0 then goto L1e8c7a;
  #L1e8c68.  v8:= v3 + 4;
  #L1e8c6c.  v8:= v9[v8] @kind byte;
  #L1e8c70.  v8:= v8 ^& 255;
  #L1e8c74.  if v8 >= v5 then goto L1e8c7a;
  #L1e8c78.  return v1;
  #L1e8c7a.  v7:= v7 + v6 @kind int;
  #L1e8c7c.  v7:= v9[v7] @kind byte;
  #L1e8c80.  if v7 == v4 then goto L1e8c86;
  #L1e8c84.  return v1;
  #L1e8c86.  v4:= v9[v2] @kind byte;
  #L1e8c8a.  v4:= v4 ^& 255;
  #L1e8c8e.  v2:= v2 + v0 @kind int;
  #L1e8c90.  v2:= v2 + v4 @kind int;
  #L1e8c92.  v7:= length @variable v9;
  #L1e8c94.  if v2 == v7 then goto L1e8c9a;
  #L1e8c98.  return v1;
  #L1e8c9a.  if v4 != 0 then goto L1e8ca0;
  #L1e8c9e.  return v1;
  #L1e8ca0.  v2:= v3 + 5;
  #L1e8ca4.  v2:= v2 + v6 @kind int;
  #L1e8ca6.  v7:= v9[v2] @kind byte;
  #L1e8caa.  v7:= v7 ^& 255;
  #L1e8cae.  if v7 < v5 then goto L1e8cb4;
  #L1e8cb2.  return v1;
  #L1e8cb4.  if v4 <= v0 then goto L1e8cd4;
  #L1e8cb8.  v2:= v9[v2] @kind byte;
  #L1e8cbc.  if v2 != 0 then goto L1e8cd4;
  #L1e8cc0.  v3:= v3 + 6;
  #L1e8cc4.  v3:= v3 + v6 @kind int;
  #L1e8cc6.  v9:= v9[v3] @kind byte;
  #L1e8cca.  v9:= v9 ^& 255;
  #L1e8cce.  if v9 >= v5 then goto L1e8cd4;
  #L1e8cd2.  return v1;
  #L1e8cd4.  return v0;
  #L1e8cd6.  return v1;
}
procedure `java.math.BigInteger` `modSqrt`(`java.math.BigInteger` v9 @kind object, `java.math.BigInteger` v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.modSqrt:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1e92a4.  call temp:= `signum`(v10) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L1e92aa.  v0:= temp;
  #L1e92ac.  v1:= 1I;
  #L1e92ae.  if v0 != v1 then goto L1e94c2;
  #L1e92b2.  call temp:= `mod`(v9, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e92b8.  v9:= temp @kind object;
  #L1e92ba.  v0:= 0I;
  #L1e92bc.  v2:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L1e92c0.  call temp:= `equals`(v9, v2) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e92c6.  v3:= temp;
  #L1e92c8.  if v3 == 0 then goto L1e92ce;
  #L1e92cc.  return v2 @kind object;
  #L1e92ce.  v2:= 0I;
  #L1e92d0.  call temp:= `testBit`(v10, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e92d6.  v3:= temp;
  #L1e92d8.  v4:= 2I;
  #L1e92da.  if v3 == 0 then goto L1e930a;
  #L1e92de.  call temp:= `testBit`(v10, v1) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e92e4.  v3:= temp;
  #L1e92e6.  if v3 == 0 then goto L1e930a;
  #L1e92ea.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L1e92ee.  call temp:= `add`(v10, v0) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e92f4.  v0:= temp @kind object;
  #L1e92f6.  call temp:= `shiftRight`(v0, v4) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L1e92fc.  v0:= temp @kind object;
  #L1e92fe.  call temp:= `modPow`(v9, v0, v10) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9304.  v0:= temp @kind object;
  #L1e9306.  goto L1e948e;
  #L1e930a.  call temp:= `testBit`(v10, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e9310.  v3:= temp;
  #L1e9312.  if v3 == 0 then goto L1e948e;
  #L1e9316.  call temp:= `testBit`(v10, v1) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e931c.  v3:= temp;
  #L1e931e.  if v3 != 0 then goto L1e948e;
  #L1e9322.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L1e9326.  call temp:= `subtract`(v10, v0) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e932c.  v3:= temp @kind object;
  #L1e932e.  call temp:= `shiftRight`(v3, v1) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L1e9334.  v3:= temp @kind object;
  #L1e9336.  call temp:= `multiply`(v0, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e933c.  v5:= temp @kind object;
  #L1e933e.  call temp:= `subtract`(v5, v9) @signature `Ljava/math/BigInteger;.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9344.  v5:= temp @kind object;
  #L1e9346.  call temp:= `mod`(v5, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e934c.  v5:= temp @kind object;
  #L1e934e.  v6:= `@@java.math.BigInteger.ZERO` @type ^`java.math.BigInteger` @kind object;
  #L1e9352.  call temp:= `equals`(v5, v6) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e9358.  v6:= temp;
  #L1e935a.  if v6 == 0 then goto L1e9360;
  #L1e935e.  return v0 @kind object;
  #L1e9360.  call temp:= `modPow`(v5, v3, v10) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9366.  v6:= temp @kind object;
  #L1e9368.  v7:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L1e936c.  call temp:= `add`(v6, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9372.  v8:= temp @kind object;
  #L1e9374.  call temp:= `equals`(v8, v10) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e937a.  v8:= temp;
  #L1e937c.  if v8 == 0 then goto L1e9440;
  #L1e9380.  call temp:= `add`(v10, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9386.  v2:= temp @kind object;
  #L1e9388.  call temp:= `shiftRight`(v2, v1) @signature `Ljava/math/BigInteger;.shiftRight:(I)Ljava/math/BigInteger;` @kind virtual;
  #L1e938e.  v1:= temp @kind object;
  #L1e9390.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1e9396.  v2:= temp;
  #L1e9398.  v2:= v2 - v4 @kind int;
  #L1e939a.  v3:= v2;
  #L1e939c.  v2:= v0 @kind object;
  #L1e939e.  if v3 < 0 then goto L1e943c;
  #L1e93a2.  call temp:= `multiply`(v2, v7) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93a8.  v4:= temp @kind object;
  #L1e93aa.  call temp:= `multiply`(v2, v2) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93b0.  v2:= temp @kind object;
  #L1e93b2.  call temp:= `multiply`(v7, v7) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93b8.  v6:= temp @kind object;
  #L1e93ba.  call temp:= `mod`(v6, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93c0.  v6:= temp @kind object;
  #L1e93c2.  call temp:= `multiply`(v6, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93c8.  v6:= temp @kind object;
  #L1e93ca.  call temp:= `add`(v2, v6) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93d0.  v2:= temp @kind object;
  #L1e93d2.  call temp:= `mod`(v2, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93d8.  v2:= temp @kind object;
  #L1e93da.  call temp:= `add`(v4, v4) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93e0.  v4:= temp @kind object;
  #L1e93e2.  call temp:= `mod`(v4, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93e8.  v4:= temp @kind object;
  #L1e93ea.  call temp:= `testBit`(v1, v3) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e93f0.  v6:= temp;
  #L1e93f2.  if v6 == 0 then goto L1e9434;
  #L1e93f6.  call temp:= `multiply`(v2, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e93fc.  v6:= temp @kind object;
  #L1e93fe.  call temp:= `multiply`(v4, v5) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9404.  v7:= temp @kind object;
  #L1e9406.  call temp:= `add`(v6, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e940c.  v6:= temp @kind object;
  #L1e940e.  call temp:= `mod`(v6, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9414.  v6:= temp @kind object;
  #L1e9416.  call temp:= `multiply`(v0, v4) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e941c.  v4:= temp @kind object;
  #L1e941e.  call temp:= `add`(v4, v2) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9424.  v2:= temp @kind object;
  #L1e9426.  call temp:= `mod`(v2, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e942c.  v2:= temp @kind object;
  #L1e942e.  v7:= v2 @kind object;
  #L1e9430.  v2:= v6 @kind object;
  #L1e9432.  goto L1e9436;
  #L1e9434.  v7:= v4 @kind object;
  #L1e9436.  v3:= v3 + -1;
  #L1e943a.  goto L1e939e;
  #L1e943c.  v0:= v2 @kind object;
  #L1e943e.  goto L1e948e;
  #L1e9440.  call temp:= `equals`(v6, v7) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e9446.  v5:= temp;
  #L1e9448.  v6:= "p is not prime" @kind object;
  #L1e944c.  if v5 == 0 then goto L1e9482;
  #L1e9450.  call temp:= `add`(v0, v7) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9456.  v0:= temp @kind object;
  #L1e9458.  v2:= v2 + v1 @kind int;
  #L1e945a.  v5:= 128I;
  #L1e945e.  if v2 != v5 then goto L1e9336;
  #L1e9462.  v5:= 80I;
  #L1e9466.  call temp:= `isProbablePrime`(v10, v5) @signature `Ljava/math/BigInteger;.isProbablePrime:(I)Z` @kind virtual;
  #L1e946c.  v5:= temp;
  #L1e946e.  if v5 == 0 then goto L1e9476;
  #L1e9472.  goto L1e9336;
  #L1e9476.  v9:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e947a.  call `<init>`(v9, v6) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9480.  throw v9;
  #L1e9482.  v9:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e9486.  call `<init>`(v9, v6) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e948c.  throw v9;
  #L1e948e.  if v0 == 0 then goto L1e94c0;
  #L1e9492.  call temp:= `multiply`(v0, v0) @signature `Ljava/math/BigInteger;.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e9498.  v1:= temp @kind object;
  #L1e949a.  call temp:= `mod`(v1, v10) @signature `Ljava/math/BigInteger;.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1e94a0.  v10:= temp @kind object;
  #L1e94a2.  call temp:= `compareTo`(v10, v9) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1e94a8.  v9:= temp;
  #L1e94aa.  if v9 != 0 then goto L1e94b0;
  #L1e94ae.  goto L1e94c0;
  #L1e94b0.  v9:= new `java.security.GeneralSecurityException`;
  #L1e94b4.  v10:= "Could not find a modular square root" @kind object;
  #L1e94b8.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e94be.  throw v9;
  #L1e94c0.  return v0 @kind object;
  #L1e94c2.  v9:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e94c6.  v10:= "p must be positive" @kind object;
  #L1e94ca.  call `<init>`(v9, v10) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e94d0.  throw v9;
}
procedure `java.security.spec.ECPoint` `pointDecode`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e989c.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e98a2.  v0:= temp @kind object;
  #L1e98a4.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e98aa.  v0:= temp @kind object;
  #L1e98ac.  call temp:= `pointDecode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @kind static;
  #L1e98b2.  v0:= temp @kind object;
  #L1e98b4.  return v0 @kind object;
}
procedure `java.security.spec.ECPoint` `pointDecode`(`java.security.spec.EllipticCurve` v6 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v7 @kind object, `byte`[] v8 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointDecode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;[B)Ljava/security/spec/ECPoint;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e98c8.  call temp:= `fieldSizeInBytes`(v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L1e98ce.  v0:= temp;
  #L1e98d0.  v1:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L1e98d4.  call temp:= `ordinal`(v7) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1e98da.  v2:= temp;
  #L1e98dc.  v1:= v1[v2];
  #L1e98e0.  v2:= "invalid point size" @kind object;
  #L1e98e4.  v3:= 0I;
  #L1e98e6.  v4:= 1I;
  #L1e98e8.  if v1 == v4 then goto L1e9a0a;
  #L1e98ec.  v5:= 2I;
  #L1e98ee.  if v1 == v5 then goto L1e99bc;
  #L1e98f2.  v2:= 3I;
  #L1e98f4.  if v1 != v2 then goto L1e998e;
  #L1e98f8.  call temp:= `getModulus`(v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getModulus:(Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e98fe.  v7:= temp @kind object;
  #L1e9900.  v1:= length @variable v8;
  #L1e9902.  v0:= v0 + v4 @kind int;
  #L1e9904.  if v1 != v0 then goto L1e997e;
  #L1e9908.  v0:= v8[v3] @kind byte;
  #L1e990c.  if v0 != v5 then goto L1e9912;
  #L1e9910.  goto L1e991c;
  #L1e9912.  v0:= v8[v3] @kind byte;
  #L1e9916.  if v0 != v2 then goto L1e996e;
  #L1e991a.  v3:= 1I;
  #L1e991c.  v0:= new `java.math.BigInteger`;
  #L1e9920.  v1:= length @variable v8;
  #L1e9922.  call temp:= `copyOfRange`(v8, v4, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9928.  v8:= temp @kind object;
  #L1e992a.  call `<init>`(v0, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9930.  call temp:= `signum`(v0) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L1e9936.  v8:= temp;
  #L1e9938.  v1:= -1I;
  #L1e993a.  if v8 == v1 then goto L1e995e;
  #L1e993e.  call temp:= `compareTo`(v0, v7) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1e9944.  v7:= temp;
  #L1e9946.  if v7 >= 0 then goto L1e995e;
  #L1e994a.  call temp:= `getY`(v0, v3, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getY:(Ljava/math/BigInteger;ZLjava/security/spec/EllipticCurve;)Ljava/math/BigInteger;` @kind static;
  #L1e9950.  v6:= temp @kind object;
  #L1e9952.  v7:= new `java.security.spec.ECPoint`;
  #L1e9956.  call `<init>`(v7, v0, v6) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e995c.  return v7 @kind object;
  #L1e995e.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9962.  v7:= "x is out of range" @kind object;
  #L1e9966.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e996c.  throw v6;
  #L1e996e.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9972.  v7:= "invalid format" @kind object;
  #L1e9976.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e997c.  throw v6;
  #L1e997e.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9982.  v7:= "compressed point has wrong length" @kind object;
  #L1e9986.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e998c.  throw v6;
  #L1e998e.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9992.  v8:= new `java.lang.StringBuilder`;
  #L1e9996.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e999c.  v0:= "invalid format:" @kind object;
  #L1e99a0.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e99a6.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e99ac.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e99b2.  v7:= temp @kind object;
  #L1e99b4.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e99ba.  throw v6;
  #L1e99bc.  v7:= length @variable v8;
  #L1e99be.  v1:= v0 * 2;
  #L1e99c2.  if v7 != v1 then goto L1e99fe;
  #L1e99c6.  v7:= new `java.math.BigInteger`;
  #L1e99ca.  call temp:= `copyOfRange`(v8, v3, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e99d0.  v1:= temp @kind object;
  #L1e99d2.  call `<init>`(v7, v4, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e99d8.  v1:= new `java.math.BigInteger`;
  #L1e99dc.  v2:= length @variable v8;
  #L1e99de.  call temp:= `copyOfRange`(v8, v0, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e99e4.  v8:= temp @kind object;
  #L1e99e6.  call `<init>`(v1, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e99ec.  v8:= new `java.security.spec.ECPoint`;
  #L1e99f0.  call `<init>`(v8, v7, v1) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e99f6.  call `a`(v8, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e99fc.  return v8 @kind object;
  #L1e99fe.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9a02.  call `<init>`(v6, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9a08.  throw v6;
  #L1e9a0a.  v7:= length @variable v8;
  #L1e9a0c.  v1:= v0 * 2;
  #L1e9a10.  v1:= v1 + v4 @kind int;
  #L1e9a12.  if v7 != v1 then goto L1e9a6a;
  #L1e9a16.  v7:= v8[v3] @kind byte;
  #L1e9a1a.  v1:= 4I;
  #L1e9a1c.  if v7 != v1 then goto L1e9a5a;
  #L1e9a20.  v7:= new `java.math.BigInteger`;
  #L1e9a24.  v0:= v0 + v4 @kind int;
  #L1e9a26.  call temp:= `copyOfRange`(v8, v4, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9a2c.  v1:= temp @kind object;
  #L1e9a2e.  call `<init>`(v7, v4, v1) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9a34.  v1:= new `java.math.BigInteger`;
  #L1e9a38.  v2:= length @variable v8;
  #L1e9a3a.  call temp:= `copyOfRange`(v8, v0, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9a40.  v8:= temp @kind object;
  #L1e9a42.  call `<init>`(v1, v4, v8) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1e9a48.  v8:= new `java.security.spec.ECPoint`;
  #L1e9a4c.  call `<init>`(v8, v7, v1) @signature `Ljava/security/spec/ECPoint;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1e9a52.  call `a`(v8, v6) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e9a58.  return v8 @kind object;
  #L1e9a5a.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9a5e.  v7:= "invalid point format" @kind object;
  #L1e9a62.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9a68.  throw v6;
  #L1e9a6a.  v6:= new `java.security.GeneralSecurityException`;
  #L1e9a6e.  call `<init>`(v6, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9a74.  throw v6;
}
procedure `byte`[] `pointEncode`(`com.google.crypto.tink.subtle.EllipticCurves$CurveType` v0 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v1 @kind object, `java.security.spec.ECPoint` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e8f4c.  call temp:= `getCurveSpec`(v0) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.getCurveSpec:(Lcom/google/crypto/tink/subtle/EllipticCurves$CurveType;)Ljava/security/spec/ECParameterSpec;` @kind static;
  #L1e8f52.  v0:= temp @kind object;
  #L1e8f54.  call temp:= `getCurve`(v0) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e8f5a.  v0:= temp @kind object;
  #L1e8f5c.  call temp:= `pointEncode`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @kind static;
  #L1e8f62.  v0:= temp @kind object;
  #L1e8f64.  return v0 @kind object;
}
procedure `byte`[] `pointEncode`(`java.security.spec.EllipticCurve` v5 @kind object, `com.google.crypto.tink.subtle.EllipticCurves$PointFormatType` v6 @kind object, `java.security.spec.ECPoint` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.pointEncode:(Ljava/security/spec/EllipticCurve;Lcom/google/crypto/tink/subtle/EllipticCurves$PointFormatType;Ljava/security/spec/ECPoint;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e8f78.  call `a`(v7, v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e8f7e.  call temp:= `fieldSizeInBytes`(v5) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.fieldSizeInBytes:(Ljava/security/spec/EllipticCurve;)I` @kind static;
  #L1e8f84.  v5:= temp;
  #L1e8f86.  v0:= `@@com.google.crypto.tink.subtle.EllipticCurves$a.a` @type ^`int`[] @kind object;
  #L1e8f8a.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1e8f90.  v1:= temp;
  #L1e8f92.  v0:= v0[v1];
  #L1e8f96.  v1:= 1I;
  #L1e8f98.  v2:= 0I;
  #L1e8f9a.  if v0 == v1 then goto L1e9082;
  #L1e8f9e.  v3:= 2I;
  #L1e8fa0.  if v0 == v3 then goto L1e9018;
  #L1e8fa4.  v4:= 3I;
  #L1e8fa6.  if v0 != v4 then goto L1e8fea;
  #L1e8faa.  v5:= v5 + v1 @kind int;
  #L1e8fac.  v6:= new `byte`[v5];
  #L1e8fb0.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1e8fb6.  v0:= temp @kind object;
  #L1e8fb8.  call temp:= `toByteArray`(v0) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1e8fbe.  v0:= temp @kind object;
  #L1e8fc0.  v1:= length @variable v0;
  #L1e8fc2.  v5:= v5 - v1 @kind int;
  #L1e8fc4.  v1:= length @variable v0;
  #L1e8fc6.  call `arraycopy`(v0, v2, v6, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e8fcc.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1e8fd2.  v5:= temp @kind object;
  #L1e8fd4.  call temp:= `testBit`(v5, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1e8fda.  v5:= temp;
  #L1e8fdc.  if v5 == 0 then goto L1e8fe2;
  #L1e8fe0.  v3:= 3I;
  #L1e8fe2.  v5:= (`byte`) v3 @kind i2b;
  #L1e8fe4.  v6[v2]:= v5 @kind byte;
  #L1e8fe8.  return v6 @kind object;
  #L1e8fea.  v5:= new `java.security.GeneralSecurityException`;
  #L1e8fee.  v7:= new `java.lang.StringBuilder`;
  #L1e8ff2.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e8ff8.  v0:= "invalid format:" @kind object;
  #L1e8ffc.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e9002.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e9008.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e900e.  v6:= temp @kind object;
  #L1e9010.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9016.  throw v5;
  #L1e9018.  v6:= v5 * 2;
  #L1e901c.  v0:= new `byte`[v6];
  #L1e9020.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9026.  v1:= temp @kind object;
  #L1e9028.  call temp:= `toByteArray`(v1) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1e902e.  v1:= temp @kind object;
  #L1e9030.  v3:= length @variable v1;
  #L1e9032.  if v3 <= v5 then goto L1e9044;
  #L1e9036.  v3:= length @variable v1;
  #L1e9038.  v3:= v3 - v5 @kind int;
  #L1e903a.  v4:= length @variable v1;
  #L1e903c.  call temp:= `copyOfRange`(v1, v3, v4) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9042.  v1:= temp @kind object;
  #L1e9044.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1e904a.  v7:= temp @kind object;
  #L1e904c.  call temp:= `toByteArray`(v7) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1e9052.  v7:= temp @kind object;
  #L1e9054.  v3:= length @variable v7;
  #L1e9056.  if v3 <= v5 then goto L1e9068;
  #L1e905a.  v3:= length @variable v7;
  #L1e905c.  v3:= v3 - v5 @kind int;
  #L1e905e.  v4:= length @variable v7;
  #L1e9060.  call temp:= `copyOfRange`(v7, v3, v4) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9066.  v7:= temp @kind object;
  #L1e9068.  v3:= length @variable v7;
  #L1e906a.  v6:= v6 - v3 @kind int;
  #L1e906c.  v3:= length @variable v7;
  #L1e906e.  call `arraycopy`(v7, v2, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e9074.  v6:= length @variable v1;
  #L1e9076.  v5:= v5 - v6 @kind int;
  #L1e9078.  v6:= length @variable v1;
  #L1e907a.  call `arraycopy`(v1, v2, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e9080.  return v0 @kind object;
  #L1e9082.  v6:= v5 * 2;
  #L1e9086.  v6:= v6 + v1 @kind int;
  #L1e9088.  v0:= new `byte`[v6];
  #L1e908c.  call temp:= `getAffineX`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineX:()Ljava/math/BigInteger;` @kind virtual;
  #L1e9092.  v3:= temp @kind object;
  #L1e9094.  call temp:= `toByteArray`(v3) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1e909a.  v3:= temp @kind object;
  #L1e909c.  call temp:= `getAffineY`(v7) @signature `Ljava/security/spec/ECPoint;.getAffineY:()Ljava/math/BigInteger;` @kind virtual;
  #L1e90a2.  v7:= temp @kind object;
  #L1e90a4.  call temp:= `toByteArray`(v7) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1e90aa.  v7:= temp @kind object;
  #L1e90ac.  v4:= length @variable v7;
  #L1e90ae.  v6:= v6 - v4 @kind int;
  #L1e90b0.  v4:= length @variable v7;
  #L1e90b2.  call `arraycopy`(v7, v2, v0, v6, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e90b8.  v5:= v5 + v1 @kind int;
  #L1e90ba.  v6:= length @variable v3;
  #L1e90bc.  v5:= v5 - v6 @kind int;
  #L1e90be.  v6:= length @variable v3;
  #L1e90c0.  call `arraycopy`(v3, v2, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e90c6.  v5:= 4I;
  #L1e90c8.  v0[v2]:= v5 @kind byte;
  #L1e90cc.  return v0 @kind object;
}
procedure `void` `validatePublicKey`(`java.security.interfaces.ECPublicKey` v0 @kind object, `java.security.interfaces.ECPrivateKey` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.validatePublicKey:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1e9bc8.  call `f`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.f:(Ljava/security/interfaces/ECPublicKey;Ljava/security/interfaces/ECPrivateKey;)V` @kind static;
  #L1e9bce.  call temp:= `getW`(v0) @signature `Ljava/security/interfaces/ECPublicKey;.getW:()Ljava/security/spec/ECPoint;` @kind interface;
  #L1e9bd4.  v0:= temp @kind object;
  #L1e9bd6.  call temp:= `getParams`(v1) @signature `Ljava/security/interfaces/ECPrivateKey;.getParams:()Ljava/security/spec/ECParameterSpec;` @kind interface;
  #L1e9bdc.  v1:= temp @kind object;
  #L1e9bde.  call temp:= `getCurve`(v1) @signature `Ljava/security/spec/ECParameterSpec;.getCurve:()Ljava/security/spec/EllipticCurve;` @kind virtual;
  #L1e9be4.  v1:= temp @kind object;
  #L1e9be6.  call `a`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EllipticCurves;.a:(Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V` @kind static;
  #L1e9bec.  return @kind void;
}
