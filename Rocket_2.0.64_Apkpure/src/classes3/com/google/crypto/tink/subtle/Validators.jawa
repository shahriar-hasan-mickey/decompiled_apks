record `com.google.crypto.tink.subtle.Validators` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.regex.Pattern` `@@com.google.crypto.tink.subtle.Validators.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@com.google.crypto.tink.subtle.Validators.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Validators;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1eff98.  v0:= 4I;
  #L1eff9a.  v1:= new `java.lang.Object`[v0];
  #L1eff9e.  v2:= 0I;
  #L1effa0.  v3:= "([0-9a-zA-Z\\-\\.\\_~])+" @kind object;
  #L1effa4.  v1[v2]:= v3 @kind object;
  #L1effa8.  v4:= 1I;
  #L1effaa.  v1[v4]:= v3 @kind object;
  #L1effae.  v5:= 2I;
  #L1effb0.  v1[v5]:= v3 @kind object;
  #L1effb4.  v6:= 3I;
  #L1effb6.  v1[v6]:= v3 @kind object;
  #L1effba.  v7:= "^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s$" @kind object;
  #L1effbe.  call temp:= `format`(v7, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1effc4.  v1:= temp @kind object;
  #L1effc6.  call temp:= `compile`(v1, v5) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L1effcc.  v1:= temp @kind object;
  #L1effce.  `@@com.google.crypto.tink.subtle.Validators.a` @type ^`java.util.regex.Pattern` := v1 @kind object;
  #L1effd2.  v1:= 5I;
  #L1effd4.  v1:= new `java.lang.Object`[v1];
  #L1effd8.  v1[v2]:= v3 @kind object;
  #L1effdc.  v1[v4]:= v3 @kind object;
  #L1effe0.  v1[v5]:= v3 @kind object;
  #L1effe4.  v1[v6]:= v3 @kind object;
  #L1effe8.  v1[v0]:= v3 @kind object;
  #L1effec.  v0:= "^projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s/cryptoKeyVersions/%s$" @kind object;
  #L1efff0.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1efff6.  v0:= temp @kind object;
  #L1efff8.  call temp:= `compile`(v0, v5) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;I)Ljava/util/regex/Pattern;` @kind static;
  #L1efffe.  v0:= temp @kind object;
  #L1f0000.  `@@com.google.crypto.tink.subtle.Validators.b` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1f0004.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Validators` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Validators;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1f0018.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f001e.  return @kind void;
}
procedure `void` `validateAesKeySize`(`int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f0030.  v0:= 16I;
  #L1f0034.  if v3 == v0 then goto L1f0072;
  #L1f0038.  v0:= 32I;
  #L1f003c.  if v3 != v0 then goto L1f0042;
  #L1f0040.  goto L1f0072;
  #L1f0042.  v0:= new `java.security.InvalidAlgorithmParameterException`;
  #L1f0046.  v1:= 1I;
  #L1f0048.  v1:= new `java.lang.Object`[v1];
  #L1f004c.  v2:= 0I;
  #L1f004e.  v3:= v3 * 8;
  #L1f0052.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f0058.  v3:= temp @kind object;
  #L1f005a.  v1[v2]:= v3 @kind object;
  #L1f005e.  v3:= "invalid key size %d; only 128-bit and 256-bit AES keys are supported" @kind object;
  #L1f0062.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f0068.  v3:= temp @kind object;
  #L1f006a.  call `<init>`(v0, v3) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f0070.  throw v0;
  #L1f0072.  return @kind void;
}
procedure `void` `validateCryptoKeyUri`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateCryptoKeyUri:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f0084.  v0:= `@@com.google.crypto.tink.subtle.Validators.a` @type ^`java.util.regex.Pattern` @kind object;
  #L1f0088.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1f008e.  v0:= temp @kind object;
  #L1f0090.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1f0096.  v0:= temp;
  #L1f0098.  if v0 != 0 then goto L1f00d4;
  #L1f009c.  v0:= `@@com.google.crypto.tink.subtle.Validators.b` @type ^`java.util.regex.Pattern` @kind object;
  #L1f00a0.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1f00a6.  v1:= temp @kind object;
  #L1f00a8.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L1f00ae.  v1:= temp;
  #L1f00b0.  if v1 == 0 then goto L1f00c4;
  #L1f00b4.  v1:= new `java.security.GeneralSecurityException`;
  #L1f00b8.  v0:= "Invalid Google Cloud KMS Key URI. The URI must point to a CryptoKey, not a CryptoKeyVersion" @kind object;
  #L1f00bc.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f00c2.  throw v1;
  #L1f00c4.  v1:= new `java.security.GeneralSecurityException`;
  #L1f00c8.  v0:= "Invalid Google Cloud KMS Key URI. The URI must point to a CryptoKey in the format projects/*/locations/*/keyRings/*/cryptoKeys/*. See https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys#CryptoKey" @kind object;
  #L1f00cc.  call `<init>`(v1, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f00d2.  throw v1;
  #L1f00d4.  return @kind void;
}
procedure `void` `validateExists`(`java.io.File` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateExists:(Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f00e8.  call temp:= `exists`(v3) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L1f00ee.  v0:= temp;
  #L1f00f0.  if v0 == 0 then goto L1f00f6;
  #L1f00f4.  return @kind void;
  #L1f00f6.  v0:= new `java.io.IOException`;
  #L1f00fa.  v1:= 1I;
  #L1f00fc.  v1:= new `java.lang.Object`[v1];
  #L1f0100.  v2:= 0I;
  #L1f0102.  v1[v2]:= v3 @kind object;
  #L1f0106.  v3:= "Error: %s doesn't exist, please choose another file\n" @kind object;
  #L1f010a.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f0110.  v3:= temp @kind object;
  #L1f0112.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f0118.  throw v0;
}
procedure `java.lang.String` `validateKmsKeyUriAndRemovePrefix`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateKmsKeyUriAndRemovePrefix:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1eff38.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1eff3c.  call temp:= `toLowerCase`(v3, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1eff42.  v0:= temp @kind object;
  #L1eff44.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1eff4a.  v0:= temp;
  #L1eff4c.  if v0 == 0 then goto L1eff62;
  #L1eff50.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1eff56.  v2:= temp;
  #L1eff58.  call temp:= `substring`(v3, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1eff5e.  v2:= temp @kind object;
  #L1eff60.  return v2 @kind object;
  #L1eff62.  v3:= new `java.lang.IllegalArgumentException`;
  #L1eff66.  v0:= 1I;
  #L1eff68.  v0:= new `java.lang.Object`[v0];
  #L1eff6c.  v1:= 0I;
  #L1eff6e.  v0[v1]:= v2 @kind object;
  #L1eff72.  v2:= "key URI must start with %s" @kind object;
  #L1eff76.  call temp:= `format`(v2, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1eff7c.  v2:= temp @kind object;
  #L1eff7e.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eff84.  throw v3;
}
procedure `void` `validateNotExists`(`java.io.File` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateNotExists:(Ljava/io/File;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f012c.  call temp:= `exists`(v3) @signature `Ljava/io/File;.exists:()Z` @kind virtual;
  #L1f0132.  v0:= temp;
  #L1f0134.  if v0 != 0 then goto L1f013a;
  #L1f0138.  return @kind void;
  #L1f013a.  v0:= new `java.io.IOException`;
  #L1f013e.  v1:= 1I;
  #L1f0140.  v1:= new `java.lang.Object`[v1];
  #L1f0144.  v2:= 0I;
  #L1f0146.  v1[v2]:= v3 @kind object;
  #L1f014a.  v3:= "%s exists, please choose another file\n" @kind object;
  #L1f014e.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f0154.  v3:= temp @kind object;
  #L1f0156.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f015c.  throw v0;
}
procedure `void` `validateRsaModulusSize`(`int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f0170.  v0:= 2048I;
  #L1f0174.  if v3 < v0 then goto L1f017a;
  #L1f0178.  return @kind void;
  #L1f017a.  v0:= new `java.security.GeneralSecurityException`;
  #L1f017e.  v1:= 1I;
  #L1f0180.  v1:= new `java.lang.Object`[v1];
  #L1f0184.  v2:= 0I;
  #L1f0186.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f018c.  v3:= temp @kind object;
  #L1f018e.  v1[v2]:= v3 @kind object;
  #L1f0192.  v3:= "Modulus size is %d; only modulus size >= 2048-bit is supported" @kind object;
  #L1f0196.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f019c.  v3:= temp @kind object;
  #L1f019e.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f01a4.  throw v0;
}
procedure `void` `validateRsaPublicExponent`(`java.math.BigInteger` v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1f01b8.  v0:= 0I;
  #L1f01ba.  call temp:= `testBit`(v2, v0) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L1f01c0.  v0:= temp;
  #L1f01c2.  if v0 == 0 then goto L1f01f2;
  #L1f01c6.  v0:= 65536L;
  #L1f01cc.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L1f01d2.  v0:= temp @kind object;
  #L1f01d4.  call temp:= `compareTo`(v2, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1f01da.  v2:= temp;
  #L1f01dc.  if v2 <= 0 then goto L1f01e2;
  #L1f01e0.  return @kind void;
  #L1f01e2.  v2:= new `java.security.GeneralSecurityException`;
  #L1f01e6.  v0:= "Public exponent must be greater than 65536." @kind object;
  #L1f01ea.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f01f0.  throw v2;
  #L1f01f2.  v2:= new `java.security.GeneralSecurityException`;
  #L1f01f6.  v0:= "Public exponent must be odd." @kind object;
  #L1f01fa.  call `<init>`(v2, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f0200.  throw v2;
}
procedure `void` `validateSignatureHash`(`com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f0214.  v0:= `@@com.google.crypto.tink.subtle.Validators$a.a` @type ^`int`[] @kind object;
  #L1f0218.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1f021e.  v1:= temp;
  #L1f0220.  v0:= v0[v1];
  #L1f0224.  v1:= 1I;
  #L1f0226.  if v0 == v1 then goto L1f026e;
  #L1f022a.  v1:= 2I;
  #L1f022c.  if v0 == v1 then goto L1f026e;
  #L1f0230.  v1:= 3I;
  #L1f0232.  if v0 != v1 then goto L1f0238;
  #L1f0236.  goto L1f026e;
  #L1f0238.  v0:= new `java.security.GeneralSecurityException`;
  #L1f023c.  v1:= new `java.lang.StringBuilder`;
  #L1f0240.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1f0246.  v2:= "Unsupported hash: " @kind object;
  #L1f024a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f0250.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L1f0256.  v3:= temp @kind object;
  #L1f0258.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1f025e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1f0264.  v3:= temp @kind object;
  #L1f0266.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f026c.  throw v0;
  #L1f026e.  return @kind void;
}
procedure `void` `validateTypeUrl`(`java.lang.String` v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateTypeUrl:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1f0280.  v0:= "type.googleapis.com/" @kind object;
  #L1f0284.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1f028a.  v1:= temp;
  #L1f028c.  v2:= 1I;
  #L1f028e.  v3:= 0I;
  #L1f0290.  if v1 == 0 then goto L1f02c6;
  #L1f0294.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1f029a.  v0:= temp;
  #L1f029c.  v1:= 20I;
  #L1f02a0.  if v0 == v1 then goto L1f02a6;
  #L1f02a4.  return @kind void;
  #L1f02a6.  v0:= new `java.security.GeneralSecurityException`;
  #L1f02aa.  v1:= new `java.lang.Object`[v2];
  #L1f02ae.  v1[v3]:= v5 @kind object;
  #L1f02b2.  v5:= "Error: type URL %s is invalid; it has no message name.\n" @kind object;
  #L1f02b6.  call temp:= `format`(v5, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f02bc.  v5:= temp @kind object;
  #L1f02be.  call `<init>`(v0, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f02c4.  throw v0;
  #L1f02c6.  v1:= new `java.security.GeneralSecurityException`;
  #L1f02ca.  v4:= 2I;
  #L1f02cc.  v4:= new `java.lang.Object`[v4];
  #L1f02d0.  v4[v3]:= v5 @kind object;
  #L1f02d4.  v4[v2]:= v0 @kind object;
  #L1f02d8.  v5:= "Error: type URL %s is invalid; it must start with %s.\n" @kind object;
  #L1f02dc.  call temp:= `format`(v5, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f02e2.  v5:= temp @kind object;
  #L1f02e4.  call `<init>`(v1, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f02ea.  throw v1;
}
procedure `void` `validateVersion`(`int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateVersion:(II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f02fc.  if v3 < 0 then goto L1f0306;
  #L1f0300.  if v3 > v4 then goto L1f0306;
  #L1f0304.  return @kind void;
  #L1f0306.  v0:= new `java.security.GeneralSecurityException`;
  #L1f030a.  v1:= 2I;
  #L1f030c.  v1:= new `java.lang.Object`[v1];
  #L1f0310.  v2:= 0I;
  #L1f0312.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f0318.  v3:= temp @kind object;
  #L1f031a.  v1[v2]:= v3 @kind object;
  #L1f031e.  v3:= 1I;
  #L1f0320.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f0326.  v4:= temp @kind object;
  #L1f0328.  v1[v3]:= v4 @kind object;
  #L1f032c.  v3:= "key has version %d; only keys with version in range [0..%d] are supported" @kind object;
  #L1f0330.  call temp:= `format`(v3, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f0336.  v3:= temp @kind object;
  #L1f0338.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f033e.  throw v0;
}
