record `com.google.crypto.tink.subtle.c` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.subtle.IndCpaCipher` @kind interface {
  `int`[] `com.google.crypto.tink.subtle.c.a` @AccessFlag ;
  `int` `com.google.crypto.tink.subtle.c.b` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@com.google.crypto.tink.subtle.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e3bf4.  v0:= 16I;
  #L1e3bf8.  v0:= new `byte`[v0];
  #L1e3bfc.  goto L1e3c10;
  #L1e3c02.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L1e3c08.  v0:= temp @kind object;
  #L1e3c0a.  `@@com.google.crypto.tink.subtle.c.c` @type ^`int`[] := v0 @kind object;
  #L1e3c0e.  return @kind void;
  #L1e3c10.  v0:= (101I, 120I, 112I, 97I, 110I, 100I, 32I, 51I, 50I, 45I, 98I, 121I, 116I, 101I, 32I, 107I) @kind object;
  #L1e3c27.  goto L1e3c02;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.c` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/c;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e3c38.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e3c3e.  v0:= length @variable v3;
  #L1e3c40.  v1:= 32I;
  #L1e3c44.  if v0 != v1 then goto L1e3c5a;
  #L1e3c48.  call temp:= `k`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L1e3c4e.  v3:= temp @kind object;
  #L1e3c50.  v2.`com.google.crypto.tink.subtle.c.a` @type ^`int`[] := v3 @kind object;
  #L1e3c54.  v2.`com.google.crypto.tink.subtle.c.b` @type ^`int` := v4;
  #L1e3c58.  return @kind void;
  #L1e3c5a.  v3:= new `java.security.InvalidKeyException`;
  #L1e3c5e.  v4:= "The key length in bytes must be 32." @kind object;
  #L1e3c62.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3c68.  throw v3;
}
procedure `void` `f`(`com.google.crypto.tink.subtle.c` v6 @kind this, `byte`[] v7 @kind object, `java.nio.ByteBuffer` v8 @kind object, `java.nio.ByteBuffer` v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e3cdc.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e3ce2.  v0:= temp;
  #L1e3ce4.  v1:= v0 / 64;
  #L1e3ce8.  v1:= v1 + 1;
  #L1e3cec.  v2:= 0I;
  #L1e3cee.  if v2 >= v1 then goto L1e3d24;
  #L1e3cf2.  v3:= v6.`com.google.crypto.tink.subtle.c.b` @type ^`int`;
  #L1e3cf6.  v3:= v3 + v2 @kind int;
  #L1e3cf8.  call temp:= `a`(v6, v7, v3) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3cfe.  v3:= temp @kind object;
  #L1e3d00.  v4:= v1 + -1;
  #L1e3d04.  v5:= 64I;
  #L1e3d08.  if v2 != v4 then goto L1e3d18;
  #L1e3d0c.  v4:= v0 %% 64;
  #L1e3d10.  call `xor`(v8, v9, v3, v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L1e3d16.  goto L1e3d1e;
  #L1e3d18.  call `xor`(v8, v9, v3, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @kind static;
  #L1e3d1e.  v2:= v2 + 1;
  #L1e3d22.  goto L1e3cee;
  #L1e3d24.  return @kind void;
}
procedure `void` `g`(`int`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1e3d38.  v0:= v2[v3];
  #L1e3d3c.  v1:= v2[v4];
  #L1e3d40.  v0:= v0 + v1 @kind int;
  #L1e3d42.  v2[v3]:= v0;
  #L1e3d46.  v0:= v2[v6];
  #L1e3d4a.  v1:= v2[v3];
  #L1e3d4e.  v0:= v0 ^~ v1 @kind int;
  #L1e3d50.  v1:= 16I;
  #L1e3d54.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L1e3d5a.  v0:= temp;
  #L1e3d5c.  v2[v6]:= v0;
  #L1e3d60.  v0:= v2[v5];
  #L1e3d64.  v1:= v2[v6];
  #L1e3d68.  v0:= v0 + v1 @kind int;
  #L1e3d6a.  v2[v5]:= v0;
  #L1e3d6e.  v0:= v2[v4];
  #L1e3d72.  v1:= v2[v5];
  #L1e3d76.  v0:= v0 ^~ v1 @kind int;
  #L1e3d78.  v1:= 12I;
  #L1e3d7c.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L1e3d82.  v0:= temp;
  #L1e3d84.  v2[v4]:= v0;
  #L1e3d88.  v0:= v2[v3];
  #L1e3d8c.  v1:= v2[v4];
  #L1e3d90.  v0:= v0 + v1 @kind int;
  #L1e3d92.  v2[v3]:= v0;
  #L1e3d96.  v0:= v2[v6];
  #L1e3d9a.  v3:= v2[v3];
  #L1e3d9e.  v3:= v3 ^~ v0 @kind int;
  #L1e3da0.  v0:= 8I;
  #L1e3da4.  call temp:= `h`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L1e3daa.  v3:= temp;
  #L1e3dac.  v2[v6]:= v3;
  #L1e3db0.  v3:= v2[v5];
  #L1e3db4.  v6:= v2[v6];
  #L1e3db8.  v3:= v3 + v6 @kind int;
  #L1e3dba.  v2[v5]:= v3;
  #L1e3dbe.  v3:= v2[v4];
  #L1e3dc2.  v5:= v2[v5];
  #L1e3dc6.  v3:= v3 ^~ v5 @kind int;
  #L1e3dc8.  v5:= 7I;
  #L1e3dca.  call temp:= `h`(v3, v5) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @kind static;
  #L1e3dd0.  v3:= temp;
  #L1e3dd2.  v2[v4]:= v3;
  #L1e3dd6.  return @kind void;
}
procedure `int` `h`(`int` v1 , `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/c;.h:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1e3b1c.  v0:= v1 ^< v2 @kind int;
  #L1e3b20.  v2:= -v2 @kind int;
  #L1e3b22.  v1:= v1 ^>> v2 @kind int;
  #L1e3b24.  v1:= v1 ^| v0 @kind int;
  #L1e3b26.  return v1;
}
procedure `void` `i`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.i:([I[I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e3de8.  v0:= `@@com.google.crypto.tink.subtle.c.c` @type ^`int`[] @kind object;
  #L1e3dec.  v1:= length @variable v0;
  #L1e3dee.  v2:= 0I;
  #L1e3df0.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e3df6.  v0:= length @variable v0;
  #L1e3df8.  v1:= 8I;
  #L1e3dfc.  call `arraycopy`(v4, v2, v3, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e3e02.  return @kind void;
}
procedure `void` `j`(`int`[] v16 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.j:([I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1e3e14.  v0:= v16 @kind object;
  #L1e3e18.  v1:= 0I;
  #L1e3e1a.  v2:= 0I;
  #L1e3e1c.  v3:= 10I;
  #L1e3e20.  if v2 >= v3 then goto L1e3e8a;
  #L1e3e24.  v4:= 4I;
  #L1e3e26.  v5:= 8I;
  #L1e3e2a.  v6:= 12I;
  #L1e3e2e.  call `g`(v0, v1, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e34.  v7:= 1I;
  #L1e3e36.  v8:= 5I;
  #L1e3e38.  v9:= 9I;
  #L1e3e3c.  v10:= 13I;
  #L1e3e40.  call `g`(v0, v7, v8, v9, v10) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e46.  v11:= 2I;
  #L1e3e48.  v12:= 6I;
  #L1e3e4a.  v13:= 14I;
  #L1e3e4e.  call `g`(v0, v11, v12, v3, v13) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e54.  v14:= 3I;
  #L1e3e56.  v15:= 7I;
  #L1e3e58.  v4:= 11I;
  #L1e3e5c.  v9:= 15I;
  #L1e3e60.  call `g`(v0, v14, v15, v4, v9) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e66.  call `g`(v0, v1, v8, v3, v9) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e6c.  call `g`(v0, v7, v12, v4, v6) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e72.  call `g`(v0, v11, v15, v5, v10) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e78.  v3:= 9I;
  #L1e3e7c.  v4:= 4I;
  #L1e3e7e.  call `g`(v0, v14, v4, v3, v13) @signature `Lcom/google/crypto/tink/subtle/c;.g:([IIIII)V` @kind static;
  #L1e3e84.  v2:= v2 + 1;
  #L1e3e88.  goto L1e3e1c;
  #L1e3e8a.  return @kind void;
}
procedure `int`[] `k`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @AccessFlag STATIC {
    temp;
    v0;

  #L1e3b38.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3b3e.  v1:= temp @kind object;
  #L1e3b40.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L1e3b44.  call temp:= `order`(v1, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3b4a.  v1:= temp @kind object;
  #L1e3b4c.  call temp:= `asIntBuffer`(v1) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L1e3b52.  v1:= temp @kind object;
  #L1e3b54.  call temp:= `remaining`(v1) @signature `Ljava/nio/IntBuffer;.remaining:()I` @kind virtual;
  #L1e3b5a.  v0:= temp;
  #L1e3b5c.  v0:= new `int`[v0];
  #L1e3b60.  call temp:= `get`(v1, v0) @signature `Ljava/nio/IntBuffer;.get:([I)Ljava/nio/IntBuffer;` @kind virtual;
  #L1e3b66.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `a`(`com.google.crypto.tink.subtle.c` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3b78.  call temp:= `k`(v5) @signature `Lcom/google/crypto/tink/subtle/c;.k:([B)[I` @kind static;
  #L1e3b7e.  v5:= temp @kind object;
  #L1e3b80.  call temp:= `b`(v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/c;.b:([II)[I` @kind virtual;
  #L1e3b86.  v5:= temp @kind object;
  #L1e3b88.  call temp:= `clone`(v5) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L1e3b8e.  v6:= temp @kind object;
  #L1e3b90.  v6:= (`int`[]) v6 @kind object;
  #L1e3b94.  call `j`(v6) @signature `Lcom/google/crypto/tink/subtle/c;.j:([I)V` @kind static;
  #L1e3b9a.  v0:= 0I;
  #L1e3b9c.  v1:= 0I;
  #L1e3b9e.  v2:= length @variable v5;
  #L1e3ba0.  if v1 >= v2 then goto L1e3bb8;
  #L1e3ba4.  v2:= v5[v1];
  #L1e3ba8.  v3:= v6[v1];
  #L1e3bac.  v2:= v2 + v3 @kind int;
  #L1e3bae.  v5[v1]:= v2;
  #L1e3bb2.  v1:= v1 + 1;
  #L1e3bb6.  goto L1e3b9e;
  #L1e3bb8.  v6:= 64I;
  #L1e3bbc.  call temp:= `allocate`(v6) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3bc2.  v6:= temp @kind object;
  #L1e3bc4.  v1:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L1e3bc8.  call temp:= `order`(v6, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3bce.  v6:= temp @kind object;
  #L1e3bd0.  call temp:= `asIntBuffer`(v6) @signature `Ljava/nio/ByteBuffer;.asIntBuffer:()Ljava/nio/IntBuffer;` @kind virtual;
  #L1e3bd6.  v1:= temp @kind object;
  #L1e3bd8.  v2:= 16I;
  #L1e3bdc.  call temp:= `put`(v1, v5, v0, v2) @signature `Ljava/nio/IntBuffer;.put:([III)Ljava/nio/IntBuffer;` @kind virtual;
  #L1e3be2.  return v6 @kind object;
}
procedure `int`[] `b`(`int`[] v0 @kind object, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/c;.b:([II)[I` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.c` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1e3a58.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e3a5e.  v0:= temp;
  #L1e3a60.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3a66.  v1:= temp;
  #L1e3a68.  if v0 < v1 then goto L1e3a9e;
  #L1e3a6c.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3a72.  v0:= temp;
  #L1e3a74.  v0:= new `byte`[v0];
  #L1e3a78.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3a7e.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e3a84.  v1:= temp;
  #L1e3a86.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3a8c.  v1:= temp @kind object;
  #L1e3a8e.  call `f`(v2, v0, v1, v3) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L1e3a94.  call temp:= `array`(v1) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e3a9a.  v3:= temp @kind object;
  #L1e3a9c.  return v3 @kind object;
  #L1e3a9e.  v3:= new `java.security.GeneralSecurityException`;
  #L1e3aa2.  v0:= "ciphertext too short" @kind object;
  #L1e3aa6.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3aac.  throw v3;
}
procedure `void` `d`(`com.google.crypto.tink.subtle.c` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1e3c7c.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e3c82.  v0:= temp;
  #L1e3c84.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3c8a.  v1:= temp;
  #L1e3c8c.  v0:= v0 - v1 @kind int;
  #L1e3c8e.  v1:= length @variable v4;
  #L1e3c90.  if v0 < v1 then goto L1e3cba;
  #L1e3c94.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3c9a.  v0:= temp;
  #L1e3c9c.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1e3ca2.  v0:= temp @kind object;
  #L1e3ca4.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3caa.  call temp:= `wrap`(v4) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3cb0.  v4:= temp @kind object;
  #L1e3cb2.  call `f`(v2, v0, v3, v4) @signature `Lcom/google/crypto/tink/subtle/c;.f:([BLjava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V` @kind direct;
  #L1e3cb8.  return @kind void;
  #L1e3cba.  v3:= new `java.lang.IllegalArgumentException`;
  #L1e3cbe.  v4:= "Given ByteBuffer output is too small" @kind object;
  #L1e3cc2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3cc8.  throw v3;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.c` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.decrypt:([B)[B` @AccessFlag PUBLIC {
    temp;

  #L1e3a34.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3a3a.  v1:= temp @kind object;
  #L1e3a3c.  call temp:= `c`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L1e3a42.  v1:= temp @kind object;
  #L1e3a44.  return v1 @kind object;
}
procedure `int` `e`() @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/c;.encrypt:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e3ac0.  v0:= length @variable v4;
  #L1e3ac2.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3ac8.  v1:= temp;
  #L1e3aca.  v2:= 2147483647I;
  #L1e3ad0.  v2:= v2 - v1 @kind int;
  #L1e3ad2.  if v0 > v2 then goto L1e3afa;
  #L1e3ad6.  call temp:= `e`(v3) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3adc.  v0:= temp;
  #L1e3ade.  v1:= length @variable v4;
  #L1e3ae0.  v0:= v0 + v1 @kind int;
  #L1e3ae2.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3ae8.  v0:= temp @kind object;
  #L1e3aea.  call `d`(v3, v0, v4) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L1e3af0.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e3af6.  v4:= temp @kind object;
  #L1e3af8.  return v4 @kind object;
  #L1e3afa.  v4:= new `java.security.GeneralSecurityException`;
  #L1e3afe.  v0:= "plaintext too long" @kind object;
  #L1e3b02.  call `<init>`(v4, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3b08.  throw v4;
}
