record `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PublicKeyVerify` @kind interface {
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v1 @kind this, `java.security.interfaces.RSAPublicKey` v2 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.<init>:(Ljava/security/interfaces/RSAPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1edc44.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1edc4a.  call `validateSignatureHash`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1edc50.  call temp:= `getModulus`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1edc56.  v0:= temp @kind object;
  #L1edc58.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1edc5e.  v0:= temp;
  #L1edc60.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L1edc66.  call temp:= `getPublicExponent`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1edc6c.  v0:= temp @kind object;
  #L1edc6e.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L1edc74.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` := v2 @kind object;
  #L1edc78.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v3 @kind object;
  #L1edc7c.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v4 @kind object;
  #L1edc80.  v1.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int` := v5;
  #L1edc84.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v18 @kind this, `byte`[] v19 @kind object, `byte`[] v20 @kind object, `int` v21 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.a:([B[BI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1edc98.  v0:= v18 @kind object;
  #L1edc9c.  v1:= v20 @kind object;
  #L1edca0.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1edca4.  call `validateSignatureHash`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1edcaa.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1edcae.  v3:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1edcb2.  call temp:= `toDigestAlgo`(v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L1edcb8.  v3:= temp @kind object;
  #L1edcba.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1edcc0.  v2:= temp @kind object;
  #L1edcc2.  v2:= (`java.security.MessageDigest`) v2 @kind object;
  #L1edcc6.  v3:= v19 @kind object;
  #L1edcca.  call temp:= `digest`(v2, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L1edcd0.  v3:= temp @kind object;
  #L1edcd2.  call temp:= `getDigestLength`(v2) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L1edcd8.  v4:= temp;
  #L1edcda.  v5:= length @variable v1;
  #L1edcdc.  v6:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L1edce0.  v6:= v6 + v4 @kind int;
  #L1edce2.  v6:= v6 + 2;
  #L1edce6.  v7:= "inconsistent" @kind object;
  #L1edcea.  if v5 < v6 then goto L1ede8c;
  #L1edcee.  v6:= length @variable v1;
  #L1edcf0.  v8:= 1I;
  #L1edcf2.  v6:= v6 - v8 @kind int;
  #L1edcf4.  v6:= v1[v6] @kind byte;
  #L1edcf8.  v9:= -68I;
  #L1edcfc.  if v6 != v9 then goto L1ede80;
  #L1edd00.  v6:= v5 - v4 @kind int;
  #L1edd04.  v9:= v6 + -1;
  #L1edd08.  call temp:= `copyOf`(v1, v9) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1edd0e.  v10:= temp @kind object;
  #L1edd10.  v11:= length @variable v10;
  #L1edd12.  v12:= length @variable v10;
  #L1edd14.  v12:= v12 + v4 @kind int;
  #L1edd16.  call temp:= `copyOfRange`(v1, v11, v12) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1edd1c.  v1:= temp @kind object;
  #L1edd1e.  v12:= 0I;
  #L1edd20.  v13:= (`long`) v12 @kind i2l;
  #L1edd22.  v15:= v9;
  #L1edd24.  v8:= (`long`) v5 @kind i2l;
  #L1edd26.  v16:= 8L;
  #L1edd2a.  v8:= v8 * v16 @kind long;
  #L1edd2e.  v11:= v21;
  #L1edd32.  v16:= v2 @kind object;
  #L1edd36.  v17:= v3 @kind object;
  #L1edd3a.  v2:= (`long`) v11 @kind i2l;
  #L1edd3c.  v8:= v8 - v2 @kind long;
  #L1edd3e.  v2:= lcmp(v13, v8);
  #L1edd42.  if v2 >= 0 then goto L1edd7e;
  #L1edd46.  v2:= v12 / 8;
  #L1edd4a.  v3:= v12 %% 8;
  #L1edd4e.  v3:= v3 - 7;
  #L1edd52.  v2:= v10[v2] @kind byte;
  #L1edd56.  v2:= v2 ^> v3 @kind int;
  #L1edd58.  v3:= 1I;
  #L1edd5a.  v2:= v2 ^& v3 @kind int;
  #L1edd5c.  if v2 != 0 then goto L1edd72;
  #L1edd60.  v12:= v12 + 1;
  #L1edd64.  v9:= v15;
  #L1edd66.  v2:= v16 @kind object;
  #L1edd6a.  v3:= v17 @kind object;
  #L1edd6e.  v8:= 1I;
  #L1edd70.  goto L1edd20;
  #L1edd72.  v1:= new `java.security.GeneralSecurityException`;
  #L1edd76.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1edd7c.  throw v1;
  #L1edd7e.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1edd82.  v3:= v15;
  #L1edd84.  call temp:= `mgf1`(v1, v3, v2) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind static;
  #L1edd8a.  v2:= temp @kind object;
  #L1edd8c.  v3:= length @variable v2;
  #L1edd8e.  v5:= new `byte`[v3];
  #L1edd92.  v11:= 0I;
  #L1edd94.  if v11 >= v3 then goto L1eddae;
  #L1edd98.  v12:= v2[v11] @kind byte;
  #L1edd9c.  v13:= v10[v11] @kind byte;
  #L1edda0.  v12:= v12 ^~ v13 @kind int;
  #L1edda2.  v12:= (`byte`) v12 @kind i2b;
  #L1edda4.  v5[v11]:= v12 @kind byte;
  #L1edda8.  v11:= v11 + 1;
  #L1eddac.  goto L1edd94;
  #L1eddae.  v2:= 0I;
  #L1eddb0.  v10:= (`long`) v2 @kind i2l;
  #L1eddb2.  v12:= lcmp(v10, v8);
  #L1eddb6.  if v12 > 0 then goto L1edde0;
  #L1eddba.  v10:= v2 / 8;
  #L1eddbe.  v11:= v2 %% 8;
  #L1eddc2.  v11:= v11 - 7;
  #L1eddc6.  v12:= v5[v10] @kind byte;
  #L1eddca.  v13:= 1I;
  #L1eddcc.  v11:= v13 ^< v11 @kind int;
  #L1eddd0.  v11:= ~v11 @kind int;
  #L1eddd2.  v11:= v11 ^& v12 @kind int;
  #L1eddd4.  v11:= (`byte`) v11 @kind i2b;
  #L1eddd6.  v5[v10]:= v11 @kind byte;
  #L1eddda.  v2:= v2 + 1;
  #L1eddde.  goto L1eddb0;
  #L1edde0.  v2:= 0I;
  #L1edde2.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L1edde6.  v9:= v6 - v8 @kind int;
  #L1eddea.  v9:= v9 + -2;
  #L1eddee.  if v2 >= v9 then goto L1ede0c;
  #L1eddf2.  v8:= v5[v2] @kind byte;
  #L1eddf6.  if v8 != 0 then goto L1ede00;
  #L1eddfa.  v2:= v2 + 1;
  #L1eddfe.  goto L1edde2;
  #L1ede00.  v1:= new `java.security.GeneralSecurityException`;
  #L1ede04.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ede0a.  throw v1;
  #L1ede0c.  v6:= v6 - v8 @kind int;
  #L1ede0e.  v6:= v6 + -2;
  #L1ede12.  v2:= v5[v6] @kind byte;
  #L1ede16.  v6:= 1I;
  #L1ede18.  if v2 != v6 then goto L1ede74;
  #L1ede1c.  v2:= v3 - v8 @kind int;
  #L1ede20.  call temp:= `copyOfRange`(v5, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1ede26.  v2:= temp @kind object;
  #L1ede28.  v3:= 8I;
  #L1ede2c.  v4:= v4 + v3 @kind int;
  #L1ede2e.  v5:= v0.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.d` @type ^`int`;
  #L1ede32.  v5:= v5 + v4 @kind int;
  #L1ede34.  v5:= new `byte`[v5];
  #L1ede38.  v6:= v17 @kind object;
  #L1ede3c.  v8:= length @variable v6;
  #L1ede3e.  v9:= 0I;
  #L1ede40.  call `arraycopy`(v6, v9, v5, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ede46.  v3:= length @variable v2;
  #L1ede48.  call `arraycopy`(v2, v9, v5, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ede4e.  v2:= v16 @kind object;
  #L1ede52.  call temp:= `digest`(v2, v5) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L1ede58.  v2:= temp @kind object;
  #L1ede5a.  call temp:= `equal`(v2, v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L1ede60.  v1:= temp;
  #L1ede62.  if v1 == 0 then goto L1ede68;
  #L1ede66.  return @kind void;
  #L1ede68.  v1:= new `java.security.GeneralSecurityException`;
  #L1ede6c.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ede72.  throw v1;
  #L1ede74.  v1:= new `java.security.GeneralSecurityException`;
  #L1ede78.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ede7e.  throw v1;
  #L1ede80.  v1:= new `java.security.GeneralSecurityException`;
  #L1ede84.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ede8a.  throw v1;
  #L1ede8c.  v1:= new `java.security.GeneralSecurityException`;
  #L1ede90.  call `<init>`(v1, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ede96.  throw v1;
}
procedure `void` `verify`(`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce` v5 @kind this, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.verify:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1edea8.  v0:= v5.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1edeac.  call temp:= `getPublicExponent`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1edeb2.  v0:= temp @kind object;
  #L1edeb4.  v1:= v5.`com.google.crypto.tink.subtle.RsaSsaPssVerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1edeb8.  call temp:= `getModulus`(v1) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1edebe.  v1:= temp @kind object;
  #L1edec0.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1edec6.  v2:= temp;
  #L1edec8.  v2:= v2 + 7;
  #L1edecc.  v2:= v2 / 8;
  #L1eded0.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1eded6.  v3:= temp;
  #L1eded8.  v3:= v3 + -1;
  #L1ededc.  v3:= v3 + 7;
  #L1edee0.  v3:= v3 / 8;
  #L1edee4.  v4:= length @variable v6;
  #L1edee6.  if v2 != v4 then goto L1edf32;
  #L1edeea.  call temp:= `bytes2Integer`(v6) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.bytes2Integer:([B)Ljava/math/BigInteger;` @kind static;
  #L1edef0.  v6:= temp @kind object;
  #L1edef2.  call temp:= `compareTo`(v6, v1) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1edef8.  v2:= temp;
  #L1edefa.  if v2 >= 0 then goto L1edf22;
  #L1edefe.  call temp:= `modPow`(v6, v0, v1) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1edf04.  v6:= temp @kind object;
  #L1edf06.  call temp:= `integer2Bytes`(v6, v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @kind static;
  #L1edf0c.  v6:= temp @kind object;
  #L1edf0e.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1edf14.  v0:= temp;
  #L1edf16.  v0:= v0 + -1;
  #L1edf1a.  call `a`(v5, v7, v6, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssVerifyJce;.a:([B[BI)V` @kind direct;
  #L1edf20.  return @kind void;
  #L1edf22.  v6:= new `java.security.GeneralSecurityException`;
  #L1edf26.  v7:= "signature out of range" @kind object;
  #L1edf2a.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1edf30.  throw v6;
  #L1edf32.  v6:= new `java.security.GeneralSecurityException`;
  #L1edf36.  v7:= "invalid signature's length" @kind object;
  #L1edf3a.  call `<init>`(v6, v7) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1edf40.  throw v6;
}
