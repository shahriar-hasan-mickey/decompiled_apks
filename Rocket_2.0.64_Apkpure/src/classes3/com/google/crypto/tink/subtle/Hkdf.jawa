record `com.google.crypto.tink.subtle.Hkdf` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Hkdf` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ebc34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ebc3a.  return @kind void;
}
procedure `byte`[] `computeEciesHkdfSymmetricKey`(`byte`[] v2 @kind object, `byte`[] v3 @kind object, `java.lang.String` v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object, `int` v7 ) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeEciesHkdfSymmetricKey:([B[BLjava/lang/String;[B[BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ebb20.  v0:= 2I;
  #L1ebb22.  v0:= new `byte`[][v0];
  #L1ebb26.  v1:= 0I;
  #L1ebb28.  v0[v1]:= v2 @kind object;
  #L1ebb2c.  v2:= 1I;
  #L1ebb2e.  v0[v2]:= v3 @kind object;
  #L1ebb32.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1ebb38.  v2:= temp @kind object;
  #L1ebb3a.  call temp:= `computeHkdf`(v4, v2, v5, v6, v7) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L1ebb40.  v2:= temp @kind object;
  #L1ebb42.  return v2 @kind object;
}
procedure `byte`[] `computeHkdf`(`java.lang.String` v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object, `byte`[] v7 @kind object, `int` v8 ) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ebb54.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MAC` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ebb58.  call temp:= `getInstance`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ebb5e.  v0:= temp @kind object;
  #L1ebb60.  v0:= (`javax.crypto.Mac`) v0 @kind object;
  #L1ebb64.  call temp:= `getMacLength`(v0) @signature `Ljavax/crypto/Mac;.getMacLength:()I` @kind virtual;
  #L1ebb6a.  v1:= temp;
  #L1ebb6c.  v1:= v1 * 255;
  #L1ebb70.  if v8 > v1 then goto L1ebc14;
  #L1ebb74.  if v6 == 0 then goto L1ebb92;
  #L1ebb78.  v1:= length @variable v6;
  #L1ebb7a.  if v1 != 0 then goto L1ebb80;
  #L1ebb7e.  goto L1ebb92;
  #L1ebb80.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L1ebb84.  call `<init>`(v1, v6, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1ebb8a.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1ebb90.  goto L1ebbae;
  #L1ebb92.  v6:= new `javax.crypto.spec.SecretKeySpec`;
  #L1ebb96.  call temp:= `getMacLength`(v0) @signature `Ljavax/crypto/Mac;.getMacLength:()I` @kind virtual;
  #L1ebb9c.  v1:= temp;
  #L1ebb9e.  v1:= new `byte`[v1];
  #L1ebba2.  call `<init>`(v6, v1, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1ebba8.  call `init`(v0, v6) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1ebbae.  call temp:= `doFinal`(v0, v5) @signature `Ljavax/crypto/Mac;.doFinal:([B)[B` @kind virtual;
  #L1ebbb4.  v5:= temp @kind object;
  #L1ebbb6.  v6:= new `byte`[v8];
  #L1ebbba.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L1ebbbe.  call `<init>`(v1, v5, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1ebbc4.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1ebbca.  v4:= 0I;
  #L1ebbcc.  v5:= new `byte`[v4];
  #L1ebbd0.  v1:= 1I;
  #L1ebbd2.  v2:= 0I;
  #L1ebbd4.  call `update`(v0, v5) @signature `Ljavax/crypto/Mac;.update:([B)V` @kind virtual;
  #L1ebbda.  call `update`(v0, v7) @signature `Ljavax/crypto/Mac;.update:([B)V` @kind virtual;
  #L1ebbe0.  v5:= (`byte`) v1 @kind i2b;
  #L1ebbe2.  call `update`(v0, v5) @signature `Ljavax/crypto/Mac;.update:(B)V` @kind virtual;
  #L1ebbe8.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L1ebbee.  v5:= temp @kind object;
  #L1ebbf0.  v3:= length @variable v5;
  #L1ebbf2.  v3:= v3 + v2 @kind int;
  #L1ebbf4.  if v3 >= v8 then goto L1ebc0a;
  #L1ebbf8.  v3:= length @variable v5;
  #L1ebbfa.  call `arraycopy`(v5, v4, v6, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebc00.  v3:= length @variable v5;
  #L1ebc02.  v2:= v2 + v3 @kind int;
  #L1ebc04.  v1:= v1 + 1;
  #L1ebc08.  goto L1ebbd4;
  #L1ebc0a.  v8:= v8 - v2 @kind int;
  #L1ebc0c.  call `arraycopy`(v5, v4, v6, v2, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebc12.  return v6 @kind object;
  #L1ebc14.  v4:= new `java.security.GeneralSecurityException`;
  #L1ebc18.  v5:= "size too large" @kind object;
  #L1ebc1c.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebc22.  throw v4;
}
