record `com.google.crypto.tink.subtle.d` @kind class @AccessFlag ABSTRACT extends `com.google.crypto.tink.Aead` @kind interface {
  `com.google.crypto.tink.subtle.c` `com.google.crypto.tink.subtle.d.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.c` `com.google.crypto.tink.subtle.d.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.d` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e40d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e40de.  v0:= 1I;
  #L1e40e0.  call temp:= `e`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @kind virtual;
  #L1e40e6.  v0:= temp @kind object;
  #L1e40e8.  v1.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` := v0 @kind object;
  #L1e40ec.  v0:= 0I;
  #L1e40ee.  call temp:= `e`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @kind virtual;
  #L1e40f4.  v2:= temp @kind object;
  #L1e40f6.  v1.`com.google.crypto.tink.subtle.d.b` @type ^`com.google.crypto.tink.subtle.c` := v2 @kind object;
  #L1e40fa.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.d` v4 @kind this, `java.nio.ByteBuffer` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.a:(Ljava/nio/ByteBuffer;[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3ec0.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e3ec6.  v0:= temp;
  #L1e3ec8.  v1:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e3ecc.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3ed2.  v1:= temp;
  #L1e3ed4.  v2:= 16I;
  #L1e3ed8.  v1:= v1 + v2 @kind int;
  #L1e3eda.  if v0 < v1 then goto L1e3f76;
  #L1e3ede.  call temp:= `position`(v5) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1e3ee4.  v0:= temp;
  #L1e3ee6.  v1:= new `byte`[v2];
  #L1e3eea.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1e3ef0.  v3:= temp;
  #L1e3ef2.  v3:= v3 - v2 @kind int;
  #L1e3ef4.  call temp:= `position`(v5, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e3efa.  call temp:= `get`(v5, v1) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3f00.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e3f06.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1e3f0c.  v3:= temp;
  #L1e3f0e.  v3:= v3 - v2 @kind int;
  #L1e3f10.  call temp:= `limit`(v5, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e3f16.  v2:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e3f1a.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3f20.  v2:= temp;
  #L1e3f22.  v2:= new `byte`[v2];
  #L1e3f26.  call temp:= `get`(v5, v2) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3f2c.  if v6 != 0 then goto L1e3f36;
  #L1e3f30.  v6:= 0I;
  #L1e3f32.  v6:= new `byte`[v6];
  #L1e3f36.  call temp:= `c`(v4, v2) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @kind direct;
  #L1e3f3c.  v2:= temp @kind object;
  #L1e3f3e.  call temp:= `d`(v6, v5) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L1e3f44.  v6:= temp @kind object;
  #L1e3f46.  call `f`(v2, v6, v1) @signature `Lcom/google/crypto/tink/subtle/j;.f:([B[B[B)V` @kind static;
  #L1e3f4c.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e3f52.  v6:= v4.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e3f56.  call temp:= `c`(v6, v5) @signature `Lcom/google/crypto/tink/subtle/c;.c:(Ljava/nio/ByteBuffer;)[B` @kind virtual;
  #L1e3f5c.  v5:= temp @kind object;
  #L1e3f5e.  return v5 @kind object;
  #L1e3f60.  v5:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1e3f62.  v6:= new `javax.crypto.AEADBadTagException`;
  #L1e3f66.  call temp:= `toString`(v5) @signature `Ljava/security/GeneralSecurityException;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e3f6c.  v5:= temp @kind object;
  #L1e3f6e.  call `<init>`(v6, v5) @signature `Ljavax/crypto/AEADBadTagException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3f74.  throw v6;
  #L1e3f76.  v5:= new `java.security.GeneralSecurityException`;
  #L1e3f7a.  v6:= "ciphertext too short" @kind object;
  #L1e3f7e.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3f84.  throw v5;
  catch `java.security.GeneralSecurityException` @[L1e3f36..L1e3f4c] goto L1e3f60;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.d` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.b:(Ljava/nio/ByteBuffer;[B[B)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1e410c.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e4112.  v0:= temp;
  #L1e4114.  v1:= length @variable v5;
  #L1e4116.  v2:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e411a.  call temp:= `e`(v2) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e4120.  v2:= temp;
  #L1e4122.  v1:= v1 + v2 @kind int;
  #L1e4124.  v1:= v1 + 16;
  #L1e4128.  if v0 < v1 then goto L1e41a8;
  #L1e412c.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1e4132.  v0:= temp;
  #L1e4134.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e4138.  call `d`(v1, v4, v5) @signature `Lcom/google/crypto/tink/subtle/c;.d:(Ljava/nio/ByteBuffer;[B)V` @kind virtual;
  #L1e413e.  call temp:= `position`(v4, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e4144.  v5:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e4148.  call temp:= `e`(v5) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e414e.  v5:= temp;
  #L1e4150.  v5:= new `byte`[v5];
  #L1e4154.  call temp:= `get`(v4, v5) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e415a.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1e4160.  v0:= temp;
  #L1e4162.  v0:= v0 + -16;
  #L1e4166.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e416c.  if v6 != 0 then goto L1e4176;
  #L1e4170.  v6:= 0I;
  #L1e4172.  v6:= new `byte`[v6];
  #L1e4176.  call temp:= `c`(v3, v5) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @kind direct;
  #L1e417c.  v5:= temp @kind object;
  #L1e417e.  call temp:= `d`(v6, v4) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @kind static;
  #L1e4184.  v6:= temp @kind object;
  #L1e4186.  call temp:= `a`(v5, v6) @signature `Lcom/google/crypto/tink/subtle/j;.a:([B[B)[B` @kind static;
  #L1e418c.  v5:= temp @kind object;
  #L1e418e.  call temp:= `limit`(v4) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1e4194.  v6:= temp;
  #L1e4196.  v6:= v6 + 16;
  #L1e419a.  call temp:= `limit`(v4, v6) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e41a0.  call temp:= `put`(v4, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e41a6.  return @kind void;
  #L1e41a8.  v4:= new `java.lang.IllegalArgumentException`;
  #L1e41ac.  v5:= "Given ByteBuffer output is too small" @kind object;
  #L1e41b0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e41b6.  throw v4;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.d` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.c:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1e4014.  v0:= v2.`com.google.crypto.tink.subtle.d.b` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e4018.  v1:= 0I;
  #L1e401a.  call temp:= `a`(v0, v3, v1) @signature `Lcom/google/crypto/tink/subtle/c;.a:([BI)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e4020.  v3:= temp @kind object;
  #L1e4022.  v0:= 32I;
  #L1e4026.  v0:= new `byte`[v0];
  #L1e402a.  call temp:= `get`(v3, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e4030.  return v0 @kind object;
}
procedure `byte`[] `d`(`byte`[] v5 @kind object, `java.nio.ByteBuffer` v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.d:([BLjava/nio/ByteBuffer;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e4044.  v0:= length @variable v5;
  #L1e4046.  v0:= v0 %% 16;
  #L1e404a.  if v0 != 0 then goto L1e4052;
  #L1e404e.  v0:= length @variable v5;
  #L1e4050.  goto L1e4060;
  #L1e4052.  v0:= length @variable v5;
  #L1e4054.  v0:= v0 + 16;
  #L1e4058.  v1:= length @variable v5;
  #L1e405a.  v1:= v1 %% 16;
  #L1e405e.  v0:= v0 - v1 @kind int;
  #L1e4060.  call temp:= `remaining`(v6) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e4066.  v1:= temp;
  #L1e4068.  v2:= v1 %% 16;
  #L1e406c.  if v2 != 0 then goto L1e4074;
  #L1e4070.  v3:= v1;
  #L1e4072.  goto L1e407a;
  #L1e4074.  v3:= v1 + 16;
  #L1e4078.  v3:= v3 - v2 @kind int;
  #L1e407a.  v3:= v3 + v0 @kind int;
  #L1e407c.  v2:= v3 + 16;
  #L1e4080.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e4086.  v2:= temp @kind object;
  #L1e4088.  v4:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L1e408c.  call temp:= `order`(v2, v4) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e4092.  v2:= temp @kind object;
  #L1e4094.  call temp:= `put`(v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e409a.  call temp:= `position`(v2, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e40a0.  call temp:= `put`(v2, v6) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e40a6.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1e40ac.  v5:= length @variable v5;
  #L1e40ae.  v5:= (`long`) v5 @kind i2l;
  #L1e40b0.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e40b6.  v5:= (`long`) v1 @kind i2l;
  #L1e40b8.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e40be.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e40c4.  v5:= temp @kind object;
  #L1e40c6.  return v5 @kind object;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.d` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;

  #L1e3e9c.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3ea2.  v1:= temp @kind object;
  #L1e3ea4.  call temp:= `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/d;.a:(Ljava/nio/ByteBuffer;[B)[B` @kind direct;
  #L1e3eaa.  v1:= temp @kind object;
  #L1e3eac.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.c` `e`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/d;.e:([BI)Lcom/google/crypto/tink/subtle/c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.d` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/d;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1e3fa8.  v0:= length @variable v4;
  #L1e3faa.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e3fae.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3fb4.  v1:= temp;
  #L1e3fb6.  v2:= 2147483647I;
  #L1e3fbc.  v2:= v2 - v1 @kind int;
  #L1e3fbe.  v2:= v2 + -16;
  #L1e3fc2.  if v0 > v2 then goto L1e3ff2;
  #L1e3fc6.  v0:= length @variable v4;
  #L1e3fc8.  v1:= v3.`com.google.crypto.tink.subtle.d.a` @type ^`com.google.crypto.tink.subtle.c` @kind object;
  #L1e3fcc.  call temp:= `e`(v1) @signature `Lcom/google/crypto/tink/subtle/c;.e:()I` @kind virtual;
  #L1e3fd2.  v1:= temp;
  #L1e3fd4.  v0:= v0 + v1 @kind int;
  #L1e3fd6.  v0:= v0 + 16;
  #L1e3fda.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e3fe0.  v0:= temp @kind object;
  #L1e3fe2.  call `b`(v3, v0, v4, v5) @signature `Lcom/google/crypto/tink/subtle/d;.b:(Ljava/nio/ByteBuffer;[B[B)V` @kind direct;
  #L1e3fe8.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e3fee.  v4:= temp @kind object;
  #L1e3ff0.  return v4 @kind object;
  #L1e3ff2.  v4:= new `java.security.GeneralSecurityException`;
  #L1e3ff6.  v5:= "plaintext too long" @kind object;
  #L1e3ffa.  call `<init>`(v4, v5) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e4000.  throw v4;
}
