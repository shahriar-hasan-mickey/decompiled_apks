record `com.google.crypto.tink.subtle.Base64$c` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.Base64$a` @kind class {
  `byte`[] `com.google.crypto.tink.subtle.Base64$c.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.Base64$c.d` @AccessFlag ;
  `int` `com.google.crypto.tink.subtle.Base64$c.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.f` @AccessFlag PUBLIC_FINAL;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.g` @AccessFlag PUBLIC_FINAL;
  `boolean` `com.google.crypto.tink.subtle.Base64$c.h` @AccessFlag PUBLIC_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.Base64$c.i` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.google.crypto.tink.subtle.Base64$c.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.Base64$c.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e336c.  v0:= 64I;
  #L1e3370.  v1:= new `byte`[v0];
  #L1e3374.  goto L1e3390;
  #L1e337a.  `@@com.google.crypto.tink.subtle.Base64$c.j` @type ^`byte`[] := v1 @kind object;
  #L1e337e.  v0:= new `byte`[v0];
  #L1e3382.  goto L1e33d8;
  #L1e3388.  `@@com.google.crypto.tink.subtle.Base64$c.k` @type ^`byte`[] := v0 @kind object;
  #L1e338c.  return @kind void;
  #L1e338e.  
  #L1e3390.  v1:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L1e33d7.  goto L1e337a;
  #L1e33d8.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L1e341f.  goto L1e3388;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64$c` v3 @kind this, `int` v4 , `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<init>:(I[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e3430.  call `<init>`(v3) @signature `Lcom/google/crypto/tink/subtle/Base64$a;.<init>:()V` @kind direct;
  #L1e3436.  v3.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v5 @kind object;
  #L1e343a.  v5:= v4 ^& 1;
  #L1e343e.  v0:= 0I;
  #L1e3440.  v1:= 1I;
  #L1e3442.  if v5 != 0 then goto L1e344a;
  #L1e3446.  v5:= 1I;
  #L1e3448.  goto L1e344c;
  #L1e344a.  v5:= 0I;
  #L1e344c.  v3.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` := v5 @kind boolean;
  #L1e3450.  v5:= v4 ^& 2;
  #L1e3454.  if v5 != 0 then goto L1e345c;
  #L1e3458.  v5:= 1I;
  #L1e345a.  goto L1e345e;
  #L1e345c.  v5:= 0I;
  #L1e345e.  v3.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` := v5 @kind boolean;
  #L1e3462.  v2:= v4 ^& 4;
  #L1e3466.  if v2 == 0 then goto L1e346c;
  #L1e346a.  goto L1e346e;
  #L1e346c.  v1:= 0I;
  #L1e346e.  v3.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` := v1 @kind boolean;
  #L1e3472.  v4:= v4 ^& 8;
  #L1e3476.  if v4 != 0 then goto L1e3480;
  #L1e347a.  v4:= `@@com.google.crypto.tink.subtle.Base64$c.j` @type ^`byte`[] @kind object;
  #L1e347e.  goto L1e3484;
  #L1e3480.  v4:= `@@com.google.crypto.tink.subtle.Base64$c.k` @type ^`byte`[] @kind object;
  #L1e3484.  v3.`com.google.crypto.tink.subtle.Base64$c.i` @type ^`byte`[] := v4 @kind object;
  #L1e3488.  v4:= 2I;
  #L1e348a.  v4:= new `byte`[v4];
  #L1e348e.  v3.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] := v4 @kind object;
  #L1e3492.  v3.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v0;
  #L1e3496.  if v5 == 0 then goto L1e34a0;
  #L1e349a.  v4:= 19I;
  #L1e349e.  goto L1e34a2;
  #L1e34a0.  v4:= -1I;
  #L1e34a2.  v3.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int` := v4;
  #L1e34a6.  return @kind void;
}
procedure `boolean` `a`(`com.google.crypto.tink.subtle.Base64$c` v17 @kind this, `byte`[] v18 @kind object, `int` v19 , `int` v20 , `boolean` v21 ) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.a:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1e2fa0.  v0:= v17 @kind object;
  #L1e2fa4.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.i` @type ^`byte`[] @kind object;
  #L1e2fa8.  v2:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L1e2fac.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int`;
  #L1e2fb0.  v4:= v20 + v19 @kind int;
  #L1e2fb4.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L1e2fb8.  v6:= -1I;
  #L1e2fba.  v7:= 0I;
  #L1e2fbc.  v8:= 2I;
  #L1e2fbe.  v9:= 1I;
  #L1e2fc0.  if v5 == v9 then goto L1e3002;
  #L1e2fc4.  if v5 == v8 then goto L1e2fca;
  #L1e2fc8.  goto L1e3040;
  #L1e2fca.  v5:= v19 + 1;
  #L1e2fce.  if v5 > v4 then goto L1e3040;
  #L1e2fd2.  v10:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e2fd6.  v11:= v10[v7] @kind byte;
  #L1e2fda.  v11:= v11 ^& 255;
  #L1e2fde.  v11:= v11 ^< 16;
  #L1e2fe2.  v10:= v10[v9] @kind byte;
  #L1e2fe6.  v10:= v10 ^& 255;
  #L1e2fea.  v10:= v10 ^< 8;
  #L1e2fee.  v10:= v10 ^| v11 @kind int;
  #L1e2ff0.  v11:= v18[v19] @kind byte;
  #L1e2ff4.  v11:= v11 ^& 255;
  #L1e2ff8.  v10:= v10 ^| v11 @kind int;
  #L1e2ffa.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v7;
  #L1e2ffe.  v11:= v5;
  #L1e3000.  goto L1e3046;
  #L1e3002.  v5:= v19 + 2;
  #L1e3006.  if v5 > v4 then goto L1e3040;
  #L1e300a.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e300e.  v5:= v5[v7] @kind byte;
  #L1e3012.  v5:= v5 ^& 255;
  #L1e3016.  v5:= v5 ^< 16;
  #L1e301a.  v10:= v19 + 1;
  #L1e301e.  v11:= v18[v19] @kind byte;
  #L1e3022.  v11:= v11 ^& 255;
  #L1e3026.  v11:= v11 ^< 8;
  #L1e302a.  v5:= v5 ^| v11 @kind int;
  #L1e302c.  v11:= v10 + 1;
  #L1e3030.  v10:= v18[v10] @kind byte;
  #L1e3034.  v10:= v10 ^& 255;
  #L1e3038.  v10:= v10 ^| v5 @kind int;
  #L1e303a.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v7;
  #L1e303e.  goto L1e3046;
  #L1e3040.  v11:= v19;
  #L1e3044.  v10:= -1I;
  #L1e3046.  v12:= 4I;
  #L1e3048.  v13:= 13I;
  #L1e304c.  v14:= 10I;
  #L1e3050.  if v10 == v6 then goto L1e30be;
  #L1e3054.  v6:= v10 ^> 18;
  #L1e3058.  v6:= v6 ^& 63;
  #L1e305c.  v6:= v1[v6] @kind byte;
  #L1e3060.  v2[v7]:= v6 @kind byte;
  #L1e3064.  v6:= v10 ^> 12;
  #L1e3068.  v6:= v6 ^& 63;
  #L1e306c.  v6:= v1[v6] @kind byte;
  #L1e3070.  v2[v9]:= v6 @kind byte;
  #L1e3074.  v6:= v10 ^> 6;
  #L1e3078.  v6:= v6 ^& 63;
  #L1e307c.  v6:= v1[v6] @kind byte;
  #L1e3080.  v2[v8]:= v6 @kind byte;
  #L1e3084.  v6:= v10 ^& 63;
  #L1e3088.  v6:= v1[v6] @kind byte;
  #L1e308c.  v10:= 3I;
  #L1e308e.  v2[v10]:= v6 @kind byte;
  #L1e3092.  v3:= v3 + -1;
  #L1e3096.  if v3 != 0 then goto L1e30ba;
  #L1e309a.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e309e.  if v3 == 0 then goto L1e30aa;
  #L1e30a2.  v3:= 5I;
  #L1e30a4.  v2[v12]:= v13 @kind byte;
  #L1e30a8.  goto L1e30ac;
  #L1e30aa.  v3:= 4I;
  #L1e30ac.  v6:= v3 + 1;
  #L1e30b0.  v2[v3]:= v14 @kind byte;
  #L1e30b4.  v3:= 19I;
  #L1e30b8.  goto L1e30c0;
  #L1e30ba.  v6:= 4I;
  #L1e30bc.  goto L1e30c0;
  #L1e30be.  v6:= 0I;
  #L1e30c0.  v10:= v11 + 3;
  #L1e30c4.  if v10 > v4 then goto L1e316c;
  #L1e30c8.  v15:= v18[v11] @kind byte;
  #L1e30cc.  v15:= v15 ^& 255;
  #L1e30d0.  v15:= v15 ^< 16;
  #L1e30d4.  v16:= v11 + 1;
  #L1e30d8.  v5:= v18[v16] @kind byte;
  #L1e30dc.  v5:= v5 ^& 255;
  #L1e30e0.  v5:= v5 ^< 8;
  #L1e30e4.  v5:= v5 ^| v15 @kind int;
  #L1e30e6.  v11:= v11 + 2;
  #L1e30ea.  v11:= v18[v11] @kind byte;
  #L1e30ee.  v11:= v11 ^& 255;
  #L1e30f2.  v5:= v5 ^| v11 @kind int;
  #L1e30f4.  v11:= v5 ^> 18;
  #L1e30f8.  v11:= v11 ^& 63;
  #L1e30fc.  v11:= v1[v11] @kind byte;
  #L1e3100.  v2[v6]:= v11 @kind byte;
  #L1e3104.  v11:= v6 + 1;
  #L1e3108.  v15:= v5 ^> 12;
  #L1e310c.  v15:= v15 ^& 63;
  #L1e3110.  v15:= v1[v15] @kind byte;
  #L1e3114.  v2[v11]:= v15 @kind byte;
  #L1e3118.  v11:= v6 + 2;
  #L1e311c.  v15:= v5 ^> 6;
  #L1e3120.  v15:= v15 ^& 63;
  #L1e3124.  v15:= v1[v15] @kind byte;
  #L1e3128.  v2[v11]:= v15 @kind byte;
  #L1e312c.  v11:= v6 + 3;
  #L1e3130.  v5:= v5 ^& 63;
  #L1e3134.  v5:= v1[v5] @kind byte;
  #L1e3138.  v2[v11]:= v5 @kind byte;
  #L1e313c.  v6:= v6 + 4;
  #L1e3140.  v3:= v3 + -1;
  #L1e3144.  if v3 != 0 then goto L1e3168;
  #L1e3148.  v3:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e314c.  if v3 == 0 then goto L1e315a;
  #L1e3150.  v3:= v6 + 1;
  #L1e3154.  v2[v6]:= v13 @kind byte;
  #L1e3158.  v6:= v3;
  #L1e315a.  v3:= v6 + 1;
  #L1e315e.  v2[v6]:= v14 @kind byte;
  #L1e3162.  v6:= v3;
  #L1e3164.  v11:= v10;
  #L1e3166.  goto L1e30b4;
  #L1e3168.  v11:= v10;
  #L1e316a.  goto L1e30c0;
  #L1e316c.  if v21 == 0 then goto L1e32fe;
  #L1e3170.  v5:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L1e3174.  v10:= v11 - v5 @kind int;
  #L1e3178.  v15:= v4 + -1;
  #L1e317c.  v16:= 61I;
  #L1e3180.  if v10 != v15 then goto L1e3208;
  #L1e3184.  if v5 <= 0 then goto L1e3194;
  #L1e3188.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e318c.  v4:= v4[v7] @kind byte;
  #L1e3190.  v7:= 1I;
  #L1e3192.  goto L1e3198;
  #L1e3194.  v4:= v18[v11] @kind byte;
  #L1e3198.  v4:= v4 ^& 255;
  #L1e319c.  v4:= v4 ^< v12 @kind int;
  #L1e319e.  v5:= v5 - v7 @kind int;
  #L1e31a0.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v5;
  #L1e31a4.  v5:= v6 + 1;
  #L1e31a8.  v7:= v4 ^> 6;
  #L1e31ac.  v7:= v7 ^& 63;
  #L1e31b0.  v7:= v1[v7] @kind byte;
  #L1e31b4.  v2[v6]:= v7 @kind byte;
  #L1e31b8.  v6:= v5 + 1;
  #L1e31bc.  v4:= v4 ^& 63;
  #L1e31c0.  v1:= v1[v4] @kind byte;
  #L1e31c4.  v2[v5]:= v1 @kind byte;
  #L1e31c8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L1e31cc.  if v1 == 0 then goto L1e31e0;
  #L1e31d0.  v1:= v6 + 1;
  #L1e31d4.  v2[v6]:= v16 @kind byte;
  #L1e31d8.  v6:= v1 + 1;
  #L1e31dc.  v2[v1]:= v16 @kind byte;
  #L1e31e0.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L1e31e4.  if v1 == 0 then goto L1e3350;
  #L1e31e8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e31ec.  if v1 == 0 then goto L1e31fa;
  #L1e31f0.  v1:= v6 + 1;
  #L1e31f4.  v2[v6]:= v13 @kind byte;
  #L1e31f8.  v6:= v1;
  #L1e31fa.  v1:= v6 + 1;
  #L1e31fe.  v2[v6]:= v14 @kind byte;
  #L1e3202.  v6:= v1;
  #L1e3204.  goto L1e3350;
  #L1e3208.  v10:= v11 - v5 @kind int;
  #L1e320c.  v4:= v4 - v8 @kind int;
  #L1e320e.  if v10 != v4 then goto L1e32ce;
  #L1e3212.  if v5 <= v9 then goto L1e3222;
  #L1e3216.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e321a.  v4:= v4[v7] @kind byte;
  #L1e321e.  v7:= 1I;
  #L1e3220.  goto L1e322e;
  #L1e3222.  v4:= v11 + 1;
  #L1e3226.  v10:= v18[v11] @kind byte;
  #L1e322a.  v11:= v4;
  #L1e322c.  v4:= v10;
  #L1e322e.  v4:= v4 ^& 255;
  #L1e3232.  v4:= v4 ^< v14 @kind int;
  #L1e3234.  if v5 <= 0 then goto L1e3246;
  #L1e3238.  v10:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e323c.  v11:= v7 + 1;
  #L1e3240.  v7:= v10[v7] @kind byte;
  #L1e3244.  goto L1e324e;
  #L1e3246.  v10:= v18[v11] @kind byte;
  #L1e324a.  v11:= v7;
  #L1e324c.  v7:= v10;
  #L1e324e.  v7:= v7 ^& 255;
  #L1e3252.  v7:= v7 ^< v8 @kind int;
  #L1e3254.  v4:= v4 ^| v7 @kind int;
  #L1e3256.  v5:= v5 - v11 @kind int;
  #L1e3258.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v5;
  #L1e325c.  v5:= v6 + 1;
  #L1e3260.  v7:= v4 ^> 12;
  #L1e3264.  v7:= v7 ^& 63;
  #L1e3268.  v7:= v1[v7] @kind byte;
  #L1e326c.  v2[v6]:= v7 @kind byte;
  #L1e3270.  v6:= v5 + 1;
  #L1e3274.  v7:= v4 ^> 6;
  #L1e3278.  v7:= v7 ^& 63;
  #L1e327c.  v7:= v1[v7] @kind byte;
  #L1e3280.  v2[v5]:= v7 @kind byte;
  #L1e3284.  v5:= v6 + 1;
  #L1e3288.  v4:= v4 ^& 63;
  #L1e328c.  v1:= v1[v4] @kind byte;
  #L1e3290.  v2[v6]:= v1 @kind byte;
  #L1e3294.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L1e3298.  if v1 == 0 then goto L1e32a6;
  #L1e329c.  v1:= v5 + 1;
  #L1e32a0.  v2[v5]:= v16 @kind byte;
  #L1e32a4.  v5:= v1;
  #L1e32a6.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L1e32aa.  if v1 == 0 then goto L1e32ca;
  #L1e32ae.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e32b2.  if v1 == 0 then goto L1e32c0;
  #L1e32b6.  v1:= v5 + 1;
  #L1e32ba.  v2[v5]:= v13 @kind byte;
  #L1e32be.  v5:= v1;
  #L1e32c0.  v1:= v5 + 1;
  #L1e32c4.  v2[v5]:= v14 @kind byte;
  #L1e32c8.  v5:= v1;
  #L1e32ca.  v6:= v5;
  #L1e32cc.  goto L1e3350;
  #L1e32ce.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L1e32d2.  if v1 == 0 then goto L1e3350;
  #L1e32d6.  if v6 <= 0 then goto L1e3350;
  #L1e32da.  v1:= 19I;
  #L1e32de.  if v3 == v1 then goto L1e3350;
  #L1e32e2.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e32e6.  if v1 == 0 then goto L1e32f4;
  #L1e32ea.  v1:= v6 + 1;
  #L1e32ee.  v2[v6]:= v13 @kind byte;
  #L1e32f2.  v6:= v1;
  #L1e32f4.  v1:= v6 + 1;
  #L1e32f8.  v2[v6]:= v14 @kind byte;
  #L1e32fc.  goto L1e3202;
  #L1e32fe.  v1:= v4 + -1;
  #L1e3302.  if v11 != v1 then goto L1e3320;
  #L1e3306.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e330a.  v2:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L1e330e.  v4:= v2 + 1;
  #L1e3312.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v4;
  #L1e3316.  v4:= v18[v11] @kind byte;
  #L1e331a.  v1[v2]:= v4 @kind byte;
  #L1e331e.  goto L1e3350;
  #L1e3320.  v4:= v4 - v8 @kind int;
  #L1e3322.  if v11 != v4 then goto L1e3350;
  #L1e3326.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.c` @type ^`byte`[] @kind object;
  #L1e332a.  v2:= v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int`;
  #L1e332e.  v4:= v2 + 1;
  #L1e3332.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v4;
  #L1e3336.  v5:= v18[v11] @kind byte;
  #L1e333a.  v1[v2]:= v5 @kind byte;
  #L1e333e.  v2:= v4 + 1;
  #L1e3342.  v0.`com.google.crypto.tink.subtle.Base64$c.d` @type ^`int` := v2;
  #L1e3346.  v11:= v11 + v9 @kind int;
  #L1e3348.  v2:= v18[v11] @kind byte;
  #L1e334c.  v1[v4]:= v2 @kind byte;
  #L1e3350.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v6;
  #L1e3354.  v0.`com.google.crypto.tink.subtle.Base64$c.e` @type ^`int` := v3;
  #L1e3358.  return v9;
}
