record `com.google.crypto.tink.subtle.AesCtrHmacStreaming` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.subtle.i` @kind class {
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v6 @kind this, `byte`[] v7 @kind object, `java.lang.String` v8 @kind object, `int` v9 , `java.lang.String` v10 @kind object, `int` v11 , `int` v12 , `int` v13 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.<init>:([BLjava/lang/String;ILjava/lang/String;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e0d30.  call `<init>`(v6) @signature `Lcom/google/crypto/tink/subtle/i;.<init>:()V` @kind direct;
  #L1e0d36.  v0:= length @variable v7;
  #L1e0d38.  v1:= v9;
  #L1e0d3a.  v2:= v10 @kind object;
  #L1e0d3c.  v3:= v11;
  #L1e0d3e.  v4:= v12;
  #L1e0d40.  v5:= v13;
  #L1e0d42.  call `s`(v0, v1, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.s:(IILjava/lang/String;III)V` @kind static;
  #L1e0d48.  v0:= length @variable v7;
  #L1e0d4a.  call temp:= `copyOf`(v7, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e0d50.  v7:= temp @kind object;
  #L1e0d52.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @type ^`byte`[] := v7 @kind object;
  #L1e0d56.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @type ^`java.lang.String` := v8 @kind object;
  #L1e0d5a.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int` := v9;
  #L1e0d5e.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` := v10 @kind object;
  #L1e0d62.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int` := v11;
  #L1e0d66.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int` := v12;
  #L1e0d6a.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int` := v13;
  #L1e0d6e.  v12:= v12 - v11 @kind int;
  #L1e0d70.  v6.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int` := v12;
  #L1e0d74.  return @kind void;
}
procedure `javax.crypto.Cipher` `a`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.a:()Ljavax/crypto/Cipher;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1e0bd4.  call temp:= `k`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.k:()Ljavax/crypto/Cipher;` @kind static;
  #L1e0bda.  v0:= temp @kind object;
  #L1e0bdc.  return v0 @kind object;
}
procedure `javax.crypto.Mac` `b`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.b:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)Ljavax/crypto/Mac;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0c18.  call temp:= `o`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.o:()Ljavax/crypto/Mac;` @kind direct;
  #L1e0c1e.  v0:= temp @kind object;
  #L1e0c20.  return v0 @kind object;
}
procedure `byte`[] `c`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.c:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e08e4.  call temp:= `r`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.r:()[B` @kind direct;
  #L1e08ea.  v0:= temp @kind object;
  #L1e08ec.  return v0 @kind object;
}
procedure `byte`[] `d`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.d:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0900.  call temp:= `q`(v0) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.q:()[B` @kind direct;
  #L1e0906.  v0:= temp @kind object;
  #L1e0908.  return v0 @kind object;
}
procedure `byte`[] `e`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.e:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B[B)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e091c.  call temp:= `m`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.m:([B[B)[B` @kind direct;
  #L1e0922.  v0:= temp @kind object;
  #L1e0924.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `f`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.f:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0c5c.  call temp:= `n`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.n:([B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L1e0c62.  v0:= temp @kind object;
  #L1e0c64.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `g`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.g:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0c78.  call temp:= `l`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.l:([B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L1e0c7e.  v0:= temp @kind object;
  #L1e0c80.  return v0 @kind object;
}
procedure `byte`[] `h`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object, `byte`[] v1 @kind object, `long` v2 , `boolean` v4 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.h:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[BJZ)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0938.  call temp:= `p`(v0, v1, v2, v4) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.p:([BJZ)[B` @kind direct;
  #L1e093e.  v0:= temp @kind object;
  #L1e0940.  return v0 @kind object;
}
procedure `int` `i`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.i:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0a78.  v0:= v0.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L1e0a7c.  return v0;
}
procedure `int` `j`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.j:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e0a90.  v0:= v0.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e0a94.  return v0;
}
procedure `javax.crypto.Cipher` `k`() @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.k:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1e0bf0.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e0bf4.  v1:= "AES/CTR/NoPadding" @kind object;
  #L1e0bf8.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e0bfe.  v0:= temp @kind object;
  #L1e0c00.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1e0c04.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `l`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.l:([B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e0c94.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e0c98.  v1:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e0c9c.  v2:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` @kind object;
  #L1e0ca0.  v3:= 32I;
  #L1e0ca4.  call `<init>`(v0, v5, v1, v3, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L1e0caa.  return v0 @kind object;
}
procedure `byte`[] `m`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.m:([B[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1e0954.  v0:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e0958.  v0:= v0 + 32;
  #L1e095c.  v1:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.g` @type ^`java.lang.String` @kind object;
  #L1e0960.  v2:= v3.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.h` @type ^`byte`[] @kind object;
  #L1e0964.  call temp:= `computeHkdf`(v1, v2, v4, v5, v0) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L1e096a.  v4:= temp @kind object;
  #L1e096c.  return v4 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `n`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v4 @kind this, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.n:([B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e0cbc.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e0cc0.  v1:= v4.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e0cc4.  v2:= 0I;
  #L1e0cc6.  v3:= "AES" @kind object;
  #L1e0cca.  call `<init>`(v0, v5, v2, v1, v3) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BIILjava/lang/String;)V` @kind direct;
  #L1e0cd0.  return v0 @kind object;
}
procedure `javax.crypto.Mac` `o`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.o:()Ljavax/crypto/Mac;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1e0c34.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MAC` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e0c38.  v1:= v2.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.b` @type ^`java.lang.String` @kind object;
  #L1e0c3c.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e0c42.  v0:= temp @kind object;
  #L1e0c44.  v0:= (`javax.crypto.Mac`) v0 @kind object;
  #L1e0c48.  return v0 @kind object;
}
procedure `byte`[] `p`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this, `byte`[] v3 @kind object, `long` v4 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.p:([BJZ)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1e0980.  v0:= 16I;
  #L1e0984.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e098a.  v0:= temp @kind object;
  #L1e098c.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L1e0990.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e0996.  call temp:= `put`(v0, v3) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e099c.  call `putAsUnsigedInt`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @kind static;
  #L1e09a2.  v3:= (`byte`) v6 @kind i2b;
  #L1e09a4.  call temp:= `put`(v0, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e09aa.  v3:= 0I;
  #L1e09ac.  call temp:= `putInt`(v0, v3) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e09b2.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e09b8.  v3:= temp @kind object;
  #L1e09ba.  return v3 @kind object;
}
procedure `byte`[] `q`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.q:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e09cc.  v0:= 7I;
  #L1e09ce.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1e09d4.  v0:= temp @kind object;
  #L1e09d6.  return v0 @kind object;
}
procedure `byte`[] `r`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.r:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e09e8.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e09ec.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1e09f2.  v0:= temp @kind object;
  #L1e09f4.  return v0 @kind object;
}
procedure `void` `s`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.s:(IILjava/lang/String;III)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1e0d88.  v0:= 16I;
  #L1e0d8c.  if v1 < v0 then goto L1e0e4e;
  #L1e0d90.  if v1 < v2 then goto L1e0e4e;
  #L1e0d94.  call `validateAesKeySize`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L1e0d9a.  v1:= 10I;
  #L1e0d9e.  if v4 < v1 then goto L1e0e20;
  #L1e0da2.  v1:= "HmacSha1" @kind object;
  #L1e0da6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0dac.  v1:= temp;
  #L1e0dae.  if v1 == 0 then goto L1e0dba;
  #L1e0db2.  v1:= 20I;
  #L1e0db6.  if v4 > v1 then goto L1e0dec;
  #L1e0dba.  v1:= "HmacSha256" @kind object;
  #L1e0dbe.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0dc4.  v1:= temp;
  #L1e0dc6.  if v1 == 0 then goto L1e0dd2;
  #L1e0dca.  v1:= 32I;
  #L1e0dce.  if v4 > v1 then goto L1e0dec;
  #L1e0dd2.  v1:= "HmacSha512" @kind object;
  #L1e0dd6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1e0ddc.  v1:= temp;
  #L1e0dde.  if v1 == 0 then goto L1e0dfc;
  #L1e0de2.  v1:= 64I;
  #L1e0de6.  if v4 > v1 then goto L1e0dec;
  #L1e0dea.  goto L1e0dfc;
  #L1e0dec.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e0df0.  v2:= "tag size too big" @kind object;
  #L1e0df4.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0dfa.  throw v1;
  #L1e0dfc.  v5:= v5 - v6 @kind int;
  #L1e0dfe.  v5:= v5 - v4 @kind int;
  #L1e0e00.  v5:= v5 - v2 @kind int;
  #L1e0e02.  v5:= v5 + -7;
  #L1e0e06.  v5:= v5 + -1;
  #L1e0e0a.  if v5 <= 0 then goto L1e0e10;
  #L1e0e0e.  return @kind void;
  #L1e0e10.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e0e14.  v2:= "ciphertextSegmentSize too small" @kind object;
  #L1e0e18.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0e1e.  throw v1;
  #L1e0e20.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e0e24.  v2:= new `java.lang.StringBuilder`;
  #L1e0e28.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e0e2e.  v3:= "tag size too small " @kind object;
  #L1e0e32.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0e38.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0e3e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e0e44.  v2:= temp @kind object;
  #L1e0e46.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0e4c.  throw v1;
  #L1e0e4e.  v1:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e0e52.  v3:= new `java.lang.StringBuilder`;
  #L1e0e56.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e0e5c.  v4:= "ikm too short, must be >= " @kind object;
  #L1e0e60.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0e66.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1e0e6c.  v2:= temp;
  #L1e0e6e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e0e74.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e0e7a.  v2:= temp @kind object;
  #L1e0e7c.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e0e82.  throw v1;
}
procedure `long` `expectedCiphertextSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v5 @kind this, `long` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.expectedCiphertextSize:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e0ce4.  call temp:= `getCiphertextOffset`(v5) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOffset:()I` @kind virtual;
  #L1e0cea.  v0:= temp;
  #L1e0cec.  v0:= (`long`) v0 @kind i2l;
  #L1e0cee.  v6:= v6 + v0 @kind long;
  #L1e0cf0.  v0:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int`;
  #L1e0cf4.  v1:= (`long`) v0 @kind i2l;
  #L1e0cf6.  v1:= v6 / v1 @kind long;
  #L1e0cfa.  v3:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int`;
  #L1e0cfe.  v3:= (`long`) v3 @kind i2l;
  #L1e0d00.  v1:= v1 * v3 @kind long;
  #L1e0d04.  v3:= (`long`) v0 @kind i2l;
  #L1e0d06.  v6:= v6 %% v3 @kind long;
  #L1e0d08.  v3:= 0L;
  #L1e0d0c.  v0:= lcmp(v6, v3);
  #L1e0d10.  if v0 <= 0 then goto L1e0d1e;
  #L1e0d14.  v0:= v5.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L1e0d18.  v3:= (`long`) v0 @kind i2l;
  #L1e0d1a.  v6:= v6 + v3 @kind long;
  #L1e0d1c.  v1:= v1 + v6 @kind long;
  #L1e0d1e.  return v1 @kind wide;
}
procedure `int` `getCiphertextOffset`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e0aa8.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getHeaderLength:()I` @kind virtual;
  #L1e0aae.  v0:= temp;
  #L1e0ab0.  v1:= v2.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int`;
  #L1e0ab4.  v0:= v0 + v1 @kind int;
  #L1e0ab6.  return v0;
}
procedure `int` `getCiphertextOverhead`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextOverhead:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0ac8.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.c` @type ^`int`;
  #L1e0acc.  return v0;
}
procedure `int` `getCiphertextSegmentSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getCiphertextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0ae0.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.d` @type ^`int`;
  #L1e0ae4.  return v0;
}
procedure `int` `getFirstSegmentOffset`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getFirstSegmentOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0af8.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.f` @type ^`int`;
  #L1e0afc.  return v0;
}
procedure `int` `getHeaderLength`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getHeaderLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0b10.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.a` @type ^`int`;
  #L1e0b14.  v0:= v0 + 1;
  #L1e0b18.  v0:= v0 + 7;
  #L1e0b1c.  return v0;
}
procedure `int` `getPlaintextSegmentSize`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.getPlaintextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0b30.  v0:= v1.`com.google.crypto.tink.subtle.AesCtrHmacStreaming.e` @type ^`int`;
  #L1e0b34.  return v0;
}
procedure `java.nio.channels.ReadableByteChannel` `newDecryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0b80.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind super;
  #L1e0b86.  v1:= temp @kind object;
  #L1e0b88.  return v1 @kind object;
}
procedure `java.io.InputStream` `newDecryptingStream`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0b48.  call temp:= `newDecryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @kind super;
  #L1e0b4e.  v1:= temp @kind object;
  #L1e0b50.  return v1 @kind object;
}
procedure `java.nio.channels.WritableByteChannel` `newEncryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.WritableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0bb8.  call temp:= `newEncryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @kind super;
  #L1e0bbe.  v1:= temp @kind object;
  #L1e0bc0.  return v1 @kind object;
}
procedure `java.io.OutputStream` `newEncryptingStream`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.io.OutputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0b64.  call temp:= `newEncryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @kind super;
  #L1e0b6a.  v1:= temp @kind object;
  #L1e0b6c.  return v1 @kind object;
}
procedure `java.nio.channels.SeekableByteChannel` `newSeekableDecryptingChannel`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `java.nio.channels.SeekableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0b9c.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind super;
  #L1e0ba2.  v1:= temp @kind object;
  #L1e0ba4.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesCtrHmacStreaming$a` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0a08.  v0:= new `com.google.crypto.tink.subtle.AesCtrHmacStreaming$a`;
  #L1e0a0c.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;.<init>:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;)V` @kind direct;
  #L1e0a12.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1e0a40.  call temp:= `newStreamSegmentDecrypter`(v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$a;` @kind virtual;
  #L1e0a46.  v0:= temp @kind object;
  #L1e0a48.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesCtrHmacStreaming$b` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e0a24.  v0:= new `com.google.crypto.tink.subtle.AesCtrHmacStreaming$b`;
  #L1e0a28.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;.<init>:(Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;[B)V` @kind direct;
  #L1e0a2e.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesCtrHmacStreaming` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e0a5c.  call temp:= `newStreamSegmentEncrypter`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesCtrHmacStreaming$b;` @kind virtual;
  #L1e0a62.  v1:= temp @kind object;
  #L1e0a64.  return v1 @kind object;
}
