record `com.google.crypto.tink.subtle.p` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.c` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.p` v0 @kind this, `byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/p;.<init>:([BI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f062c.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/c;.<init>:([BI)V` @kind direct;
  #L1f0632.  return @kind void;
}
procedure `int`[] `l`(`int`[] v4 @kind object, `int`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/p;.l:([I[I)[I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f0598.  v0:= 16I;
  #L1f059c.  v0:= new `int`[v0];
  #L1f05a0.  call `i`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/c;.i:([I[I)V` @kind static;
  #L1f05a6.  v4:= 0I;
  #L1f05a8.  v4:= v5[v4];
  #L1f05ac.  v1:= 12I;
  #L1f05b0.  v0[v1]:= v4;
  #L1f05b4.  v4:= 1I;
  #L1f05b6.  v4:= v5[v4];
  #L1f05ba.  v2:= 13I;
  #L1f05be.  v0[v2]:= v4;
  #L1f05c2.  v4:= 2I;
  #L1f05c4.  v4:= v5[v4];
  #L1f05c8.  v3:= 14I;
  #L1f05cc.  v0[v3]:= v4;
  #L1f05d0.  v4:= 3I;
  #L1f05d2.  v4:= v5[v4];
  #L1f05d6.  v5:= 15I;
  #L1f05da.  v0[v5]:= v4;
  #L1f05de.  call `j`(v0) @signature `Lcom/google/crypto/tink/subtle/c;.j:([I)V` @kind static;
  #L1f05e4.  v4:= v0[v1];
  #L1f05e8.  v1:= 4I;
  #L1f05ea.  v0[v1]:= v4;
  #L1f05ee.  v4:= v0[v2];
  #L1f05f2.  v1:= 5I;
  #L1f05f4.  v0[v1]:= v4;
  #L1f05f8.  v4:= v0[v3];
  #L1f05fc.  v1:= 6I;
  #L1f05fe.  v0[v1]:= v4;
  #L1f0602.  v4:= v0[v5];
  #L1f0606.  v5:= 7I;
  #L1f0608.  v0[v5]:= v4;
  #L1f060c.  v4:= 8I;
  #L1f0610.  call temp:= `copyOf`(v0, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L1f0616.  v4:= temp @kind object;
  #L1f0618.  return v4 @kind object;
}
procedure `int`[] `b`(`com.google.crypto.tink.subtle.p` v4 @kind this, `int`[] v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/p;.b:([II)[I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1f04fc.  v0:= length @variable v5;
  #L1f04fe.  call temp:= `e`(v4) @signature `Lcom/google/crypto/tink/subtle/p;.e:()I` @kind virtual;
  #L1f0504.  v1:= temp;
  #L1f0506.  v2:= 4I;
  #L1f0508.  v1:= v1 / v2 @kind int;
  #L1f050a.  v3:= 0I;
  #L1f050c.  if v0 != v1 then goto L1f0556;
  #L1f0510.  v0:= 16I;
  #L1f0514.  v0:= new `int`[v0];
  #L1f0518.  v1:= v4.`com.google.crypto.tink.subtle.c.a` @type ^`int`[] @kind object;
  #L1f051c.  call temp:= `l`(v1, v5) @signature `Lcom/google/crypto/tink/subtle/p;.l:([I[I)[I` @kind static;
  #L1f0522.  v1:= temp @kind object;
  #L1f0524.  call `i`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/c;.i:([I[I)V` @kind static;
  #L1f052a.  v1:= 12I;
  #L1f052e.  v0[v1]:= v6;
  #L1f0532.  v6:= 13I;
  #L1f0536.  v0[v6]:= v3;
  #L1f053a.  v6:= 14I;
  #L1f053e.  v1:= v5[v2];
  #L1f0542.  v0[v6]:= v1;
  #L1f0546.  v6:= 15I;
  #L1f054a.  v1:= 5I;
  #L1f054c.  v5:= v5[v1];
  #L1f0550.  v0[v6]:= v5;
  #L1f0554.  return v0 @kind object;
  #L1f0556.  v6:= new `java.lang.IllegalArgumentException`;
  #L1f055a.  v0:= 1I;
  #L1f055c.  v0:= new `java.lang.Object`[v0];
  #L1f0560.  v5:= length @variable v5;
  #L1f0562.  v5:= v5 * 32;
  #L1f0566.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1f056c.  v5:= temp @kind object;
  #L1f056e.  v0[v3]:= v5 @kind object;
  #L1f0572.  v5:= "XChaCha20 uses 192-bit nonces, but got a %d-bit nonce" @kind object;
  #L1f0576.  call temp:= `format`(v5, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f057c.  v5:= temp @kind object;
  #L1f057e.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f0584.  throw v6;
}
procedure `int` `e`(`com.google.crypto.tink.subtle.p` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/p;.e:()I` @AccessFlag  {
    temp;
    v0;

  #L1f04e4.  v0:= 24I;
  #L1f04e8.  return v0;
}
