record `com.google.crypto.tink.subtle.AesSiv` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.DeterministicAead` @kind interface {
  `com.google.crypto.tink.subtle.PrfAesCmac` `com.google.crypto.tink.subtle.AesSiv.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesSiv.b` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Collection` `@@com.google.crypto.tink.subtle.AesSiv.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.AesSiv.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.google.crypto.tink.subtle.AesSiv.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/AesSiv;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e22d4.  v0:= 1I;
  #L1e22d6.  v0:= new `java.lang.Integer`[v0];
  #L1e22da.  v1:= 64I;
  #L1e22de.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e22e4.  v1:= temp @kind object;
  #L1e22e6.  v2:= 0I;
  #L1e22e8.  v0[v2]:= v1 @kind object;
  #L1e22ec.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L1e22f2.  v0:= temp @kind object;
  #L1e22f4.  `@@com.google.crypto.tink.subtle.AesSiv.c` @type ^`java.util.Collection` := v0 @kind object;
  #L1e22f8.  v0:= 16I;
  #L1e22fc.  v1:= new `byte`[v0];
  #L1e2300.  `@@com.google.crypto.tink.subtle.AesSiv.d` @type ^`byte`[] := v1 @kind object;
  #L1e2304.  v0:= new `byte`[v0];
  #L1e2308.  goto L1e2314;
  #L1e230e.  `@@com.google.crypto.tink.subtle.AesSiv.e` @type ^`byte`[] := v0 @kind object;
  #L1e2312.  return @kind void;
  #L1e2314.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 1I) @kind object;
  #L1e232b.  goto L1e230e;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesSiv` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1e233c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e2342.  v0:= `@@com.google.crypto.tink.subtle.AesSiv.c` @type ^`java.util.Collection` @kind object;
  #L1e2346.  v1:= length @variable v4;
  #L1e2348.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1e234e.  v1:= temp @kind object;
  #L1e2350.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1e2356.  v0:= temp;
  #L1e2358.  if v0 == 0 then goto L1e2390;
  #L1e235c.  v0:= 0I;
  #L1e235e.  v1:= length @variable v4;
  #L1e2360.  v1:= v1 / 2;
  #L1e2364.  call temp:= `copyOfRange`(v4, v0, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e236a.  v0:= temp @kind object;
  #L1e236c.  v1:= length @variable v4;
  #L1e236e.  v1:= v1 / 2;
  #L1e2372.  v2:= length @variable v4;
  #L1e2374.  call temp:= `copyOfRange`(v4, v1, v2) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e237a.  v4:= temp @kind object;
  #L1e237c.  v3.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] := v4 @kind object;
  #L1e2380.  v4:= new `com.google.crypto.tink.subtle.PrfAesCmac`;
  #L1e2384.  call `<init>`(v4, v0) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.<init>:([B)V` @kind direct;
  #L1e238a.  v3.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` := v4 @kind object;
  #L1e238e.  return @kind void;
  #L1e2390.  v0:= new `java.security.InvalidKeyException`;
  #L1e2394.  v1:= new `java.lang.StringBuilder`;
  #L1e2398.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e239e.  v2:= "invalid key size: " @kind object;
  #L1e23a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e23a8.  v4:= length @variable v4;
  #L1e23aa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e23b0.  v4:= " bytes; key must have 64 bytes" @kind object;
  #L1e23b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e23ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e23c0.  v4:= temp @kind object;
  #L1e23c2.  call `<init>`(v0, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e23c8.  throw v0;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.AesSiv` v6 @kind this, `byte`[][] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e2214.  v0:= length @variable v7;
  #L1e2216.  v1:= 16I;
  #L1e221a.  if v0 != 0 then goto L1e2230;
  #L1e221e.  v7:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L1e2222.  v0:= `@@com.google.crypto.tink.subtle.AesSiv.e` @type ^`byte`[] @kind object;
  #L1e2226.  call temp:= `compute`(v7, v0, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L1e222c.  v7:= temp @kind object;
  #L1e222e.  return v7 @kind object;
  #L1e2230.  v0:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L1e2234.  v2:= `@@com.google.crypto.tink.subtle.AesSiv.d` @type ^`byte`[] @kind object;
  #L1e2238.  call temp:= `compute`(v0, v2, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L1e223e.  v0:= temp @kind object;
  #L1e2240.  v2:= 0I;
  #L1e2242.  v3:= 0I;
  #L1e2244.  v4:= length @variable v7;
  #L1e2246.  v4:= v4 + -1;
  #L1e224a.  if v3 >= v4 then goto L1e2282;
  #L1e224e.  v4:= v7[v3] @kind object;
  #L1e2252.  if v4 != 0 then goto L1e225c;
  #L1e2256.  v4:= new `byte`[v2];
  #L1e225a.  goto L1e2260;
  #L1e225c.  v4:= v7[v3] @kind object;
  #L1e2260.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L1e2266.  v0:= temp @kind object;
  #L1e2268.  v5:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L1e226c.  call temp:= `compute`(v5, v4, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L1e2272.  v4:= temp @kind object;
  #L1e2274.  call temp:= `xor`(v0, v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L1e227a.  v0:= temp @kind object;
  #L1e227c.  v3:= v3 + 1;
  #L1e2280.  goto L1e2244;
  #L1e2282.  v2:= length @variable v7;
  #L1e2284.  v2:= v2 + -1;
  #L1e2288.  v7:= v7[v2] @kind object;
  #L1e228c.  v2:= length @variable v7;
  #L1e228e.  if v2 < v1 then goto L1e229c;
  #L1e2292.  call temp:= `xorEnd`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xorEnd:([B[B)[B` @kind static;
  #L1e2298.  v7:= temp @kind object;
  #L1e229a.  goto L1e22b4;
  #L1e229c.  call temp:= `a`(v7) @signature `Lcom/google/crypto/tink/subtle/a;.a:([B)[B` @kind static;
  #L1e22a2.  v7:= temp @kind object;
  #L1e22a4.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L1e22aa.  v0:= temp @kind object;
  #L1e22ac.  call temp:= `xor`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L1e22b2.  v7:= temp @kind object;
  #L1e22b4.  v0:= v6.`com.google.crypto.tink.subtle.AesSiv.a` @type ^`com.google.crypto.tink.subtle.PrfAesCmac` @kind object;
  #L1e22b8.  call temp:= `compute`(v0, v7, v1) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @kind virtual;
  #L1e22be.  v7:= temp @kind object;
  #L1e22c0.  return v7 @kind object;
}
procedure `byte`[] `decryptDeterministically`(`com.google.crypto.tink.subtle.AesSiv` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.decryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e204c.  v0:= length @variable v9;
  #L1e204e.  v1:= 16I;
  #L1e2052.  if v0 < v1 then goto L1e2128;
  #L1e2056.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e205a.  v2:= "AES/CTR/NoPadding" @kind object;
  #L1e205e.  call temp:= `getInstance`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e2064.  v0:= temp @kind object;
  #L1e2066.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1e206a.  v2:= 0I;
  #L1e206c.  call temp:= `copyOfRange`(v9, v2, v1) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e2072.  v3:= temp @kind object;
  #L1e2074.  call temp:= `clone`(v3) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1e207a.  v4:= temp @kind object;
  #L1e207c.  v4:= (`byte`[]) v4 @kind object;
  #L1e2080.  v5:= 8I;
  #L1e2084.  v6:= v4[v5] @kind byte;
  #L1e2088.  v6:= v6 ^& 127;
  #L1e208c.  v6:= (`byte`) v6 @kind i2b;
  #L1e208e.  v4[v5]:= v6 @kind byte;
  #L1e2092.  v5:= 12I;
  #L1e2096.  v6:= v4[v5] @kind byte;
  #L1e209a.  v6:= v6 ^& 127;
  #L1e209e.  v6:= (`byte`) v6 @kind i2b;
  #L1e20a0.  v4[v5]:= v6 @kind byte;
  #L1e20a4.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e20a8.  v6:= v8.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] @kind object;
  #L1e20ac.  v7:= "AES" @kind object;
  #L1e20b0.  call `<init>`(v5, v6, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e20b6.  v6:= new `javax.crypto.spec.IvParameterSpec`;
  #L1e20ba.  call `<init>`(v6, v4) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L1e20c0.  v4:= 2I;
  #L1e20c2.  call `init`(v0, v4, v5, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L1e20c8.  v5:= length @variable v9;
  #L1e20ca.  call temp:= `copyOfRange`(v9, v1, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e20d0.  v9:= temp @kind object;
  #L1e20d2.  call temp:= `doFinal`(v0, v9) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1e20d8.  v0:= temp @kind object;
  #L1e20da.  v9:= length @variable v9;
  #L1e20dc.  if v9 != 0 then goto L1e20f4;
  #L1e20e0.  if v0 != 0 then goto L1e20f4;
  #L1e20e4.  call temp:= `isAndroid`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.isAndroid:()Z` @kind static;
  #L1e20ea.  v9:= temp;
  #L1e20ec.  if v9 == 0 then goto L1e20f4;
  #L1e20f0.  v0:= new `byte`[v2];
  #L1e20f4.  v9:= new `byte`[][v4];
  #L1e20f8.  v9[v2]:= v10 @kind object;
  #L1e20fc.  v10:= 1I;
  #L1e20fe.  v9[v10]:= v0 @kind object;
  #L1e2102.  call temp:= `a`(v8, v9) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @kind direct;
  #L1e2108.  v9:= temp @kind object;
  #L1e210a.  call temp:= `equal`(v3, v9) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L1e2110.  v9:= temp;
  #L1e2112.  if v9 == 0 then goto L1e2118;
  #L1e2116.  return v0 @kind object;
  #L1e2118.  v9:= new `javax.crypto.AEADBadTagException`;
  #L1e211c.  v10:= "Integrity check failed." @kind object;
  #L1e2120.  call `<init>`(v9, v10) @signature `Ljavax/crypto/AEADBadTagException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2126.  throw v9;
  #L1e2128.  v9:= new `java.security.GeneralSecurityException`;
  #L1e212c.  v10:= "Ciphertext too short." @kind object;
  #L1e2130.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2136.  throw v9;
}
procedure `byte`[] `encryptDeterministically`(`com.google.crypto.tink.subtle.AesSiv` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.encryptDeterministically:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e2148.  v0:= length @variable v9;
  #L1e214a.  v1:= 2147483631I;
  #L1e2150.  if v0 > v1 then goto L1e21f2;
  #L1e2154.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e2158.  v1:= "AES/CTR/NoPadding" @kind object;
  #L1e215c.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e2162.  v0:= temp @kind object;
  #L1e2164.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1e2168.  v1:= 2I;
  #L1e216a.  v2:= new `byte`[][v1];
  #L1e216e.  v3:= 0I;
  #L1e2170.  v2[v3]:= v10 @kind object;
  #L1e2174.  v10:= 1I;
  #L1e2176.  v2[v10]:= v9 @kind object;
  #L1e217a.  call temp:= `a`(v8, v2) @signature `Lcom/google/crypto/tink/subtle/AesSiv;.a:([[B)[B` @kind direct;
  #L1e2180.  v2:= temp @kind object;
  #L1e2182.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1e2188.  v4:= temp @kind object;
  #L1e218a.  v4:= (`byte`[]) v4 @kind object;
  #L1e218e.  v5:= 8I;
  #L1e2192.  v6:= v4[v5] @kind byte;
  #L1e2196.  v6:= v6 ^& 127;
  #L1e219a.  v6:= (`byte`) v6 @kind i2b;
  #L1e219c.  v4[v5]:= v6 @kind byte;
  #L1e21a0.  v5:= 12I;
  #L1e21a4.  v6:= v4[v5] @kind byte;
  #L1e21a8.  v6:= v6 ^& 127;
  #L1e21ac.  v6:= (`byte`) v6 @kind i2b;
  #L1e21ae.  v4[v5]:= v6 @kind byte;
  #L1e21b2.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e21b6.  v6:= v8.`com.google.crypto.tink.subtle.AesSiv.b` @type ^`byte`[] @kind object;
  #L1e21ba.  v7:= "AES" @kind object;
  #L1e21be.  call `<init>`(v5, v6, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e21c4.  v6:= new `javax.crypto.spec.IvParameterSpec`;
  #L1e21c8.  call `<init>`(v6, v4) @signature `Ljavax/crypto/spec/IvParameterSpec;.<init>:([B)V` @kind direct;
  #L1e21ce.  call `init`(v0, v10, v5, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L1e21d4.  call temp:= `doFinal`(v0, v9) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1e21da.  v9:= temp @kind object;
  #L1e21dc.  v0:= new `byte`[][v1];
  #L1e21e0.  v0[v3]:= v2 @kind object;
  #L1e21e4.  v0[v10]:= v9 @kind object;
  #L1e21e8.  call temp:= `concat`(v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1e21ee.  v9:= temp @kind object;
  #L1e21f0.  return v9 @kind object;
  #L1e21f2.  v9:= new `java.security.GeneralSecurityException`;
  #L1e21f6.  v10:= "plaintext too long" @kind object;
  #L1e21fa.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e2200.  throw v9;
}
