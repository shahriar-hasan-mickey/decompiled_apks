record `com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PublicKeyVerify` @kind interface {
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce` v1 @kind this, `java.security.interfaces.RSAPublicKey` v2 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.<init>:(Ljava/security/interfaces/RSAPublicKey;Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ed888.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ed88e.  call `validateSignatureHash`(v3) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1ed894.  call temp:= `getModulus`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1ed89a.  v0:= temp @kind object;
  #L1ed89c.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1ed8a2.  v0:= temp;
  #L1ed8a4.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L1ed8aa.  call temp:= `getPublicExponent`(v2) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1ed8b0.  v0:= temp @kind object;
  #L1ed8b2.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L1ed8b8.  v1.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` := v2 @kind object;
  #L1ed8bc.  v1.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v3 @kind object;
  #L1ed8c0.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `com.google.crypto.tink.subtle.Enums$HashType` v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.a:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ed758.  call `validateSignatureHash`(v10) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1ed75e.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ed762.  v1:= v7.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1ed766.  call temp:= `toDigestAlgo`(v1) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L1ed76c.  v1:= temp @kind object;
  #L1ed76e.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ed774.  v0:= temp @kind object;
  #L1ed776.  v0:= (`java.security.MessageDigest`) v0 @kind object;
  #L1ed77a.  call `update`(v0, v8) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L1ed780.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L1ed786.  v8:= temp @kind object;
  #L1ed788.  call temp:= `b`(v7, v10) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.b:(Lcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind direct;
  #L1ed78e.  v10:= temp @kind object;
  #L1ed790.  v0:= length @variable v10;
  #L1ed792.  v1:= length @variable v8;
  #L1ed794.  v0:= v0 + v1 @kind int;
  #L1ed796.  v1:= v0 + 11;
  #L1ed79a.  if v9 < v1 then goto L1ed7ee;
  #L1ed79e.  v1:= new `byte`[v9];
  #L1ed7a2.  v2:= 0I;
  #L1ed7a4.  v1[v2]:= v2 @kind byte;
  #L1ed7a8.  v3:= 2I;
  #L1ed7aa.  v4:= 1I;
  #L1ed7ac.  v1[v4]:= v4 @kind byte;
  #L1ed7b0.  v4:= 0I;
  #L1ed7b2.  v5:= v9 - v0 @kind int;
  #L1ed7b6.  v5:= v5 + -3;
  #L1ed7ba.  if v4 >= v5 then goto L1ed7d0;
  #L1ed7be.  v5:= v3 + 1;
  #L1ed7c2.  v6:= -1I;
  #L1ed7c4.  v1[v3]:= v6 @kind byte;
  #L1ed7c8.  v4:= v4 + 1;
  #L1ed7cc.  v3:= v5;
  #L1ed7ce.  goto L1ed7b2;
  #L1ed7d0.  v9:= v3 + 1;
  #L1ed7d4.  v1[v3]:= v2 @kind byte;
  #L1ed7d8.  v0:= length @variable v10;
  #L1ed7da.  call `arraycopy`(v10, v2, v1, v9, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ed7e0.  v10:= length @variable v10;
  #L1ed7e2.  v9:= v9 + v10 @kind int;
  #L1ed7e4.  v10:= length @variable v8;
  #L1ed7e6.  call `arraycopy`(v8, v2, v1, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ed7ec.  return v1 @kind object;
  #L1ed7ee.  v8:= new `java.security.GeneralSecurityException`;
  #L1ed7f2.  v9:= "intended encoded message length too short" @kind object;
  #L1ed7f6.  call `<init>`(v8, v9) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed7fc.  throw v8;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce` v3 @kind this, `com.google.crypto.tink.subtle.Enums$HashType` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.b:(Lcom/google/crypto/tink/subtle/Enums$HashType;)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ed810.  v0:= `@@com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce$a.a` @type ^`int`[] @kind object;
  #L1ed814.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1ed81a.  v1:= temp;
  #L1ed81c.  v0:= v0[v1];
  #L1ed820.  v1:= 1I;
  #L1ed822.  if v0 == v1 then goto L1ed868;
  #L1ed826.  v1:= 2I;
  #L1ed828.  if v0 != v1 then goto L1ed83a;
  #L1ed82c.  v4:= "3051300d060960864801650304020305000440" @kind object;
  #L1ed830.  call temp:= `decode`(v4) @signature `Lcom/google/crypto/tink/subtle/Hex;.decode:(Ljava/lang/String;)[B` @kind static;
  #L1ed836.  v4:= temp @kind object;
  #L1ed838.  return v4 @kind object;
  #L1ed83a.  v0:= new `java.security.GeneralSecurityException`;
  #L1ed83e.  v1:= new `java.lang.StringBuilder`;
  #L1ed842.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ed848.  v2:= "Unsupported hash " @kind object;
  #L1ed84c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ed852.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ed858.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ed85e.  v4:= temp @kind object;
  #L1ed860.  call `<init>`(v0, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed866.  throw v0;
  #L1ed868.  v4:= "3031300d060960864801650304020105000420" @kind object;
  #L1ed86c.  call temp:= `decode`(v4) @signature `Lcom/google/crypto/tink/subtle/Hex;.decode:(Ljava/lang/String;)[B` @kind static;
  #L1ed872.  v4:= temp @kind object;
  #L1ed874.  return v4 @kind object;
}
procedure `void` `verify`(`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce` v4 @kind this, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.verify:([B[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ed8d4.  v0:= v4.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1ed8d8.  call temp:= `getPublicExponent`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1ed8de.  v0:= temp @kind object;
  #L1ed8e0.  v1:= v4.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.a` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1ed8e4.  call temp:= `getModulus`(v1) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1ed8ea.  v1:= temp @kind object;
  #L1ed8ec.  call temp:= `bitLength`(v1) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1ed8f2.  v2:= temp;
  #L1ed8f4.  v2:= v2 + 7;
  #L1ed8f8.  v2:= v2 / 8;
  #L1ed8fc.  v3:= length @variable v5;
  #L1ed8fe.  if v2 != v3 then goto L1ed960;
  #L1ed902.  call temp:= `bytes2Integer`(v5) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.bytes2Integer:([B)Ljava/math/BigInteger;` @kind static;
  #L1ed908.  v5:= temp @kind object;
  #L1ed90a.  call temp:= `compareTo`(v5, v1) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L1ed910.  v3:= temp;
  #L1ed912.  if v3 >= 0 then goto L1ed950;
  #L1ed916.  call temp:= `modPow`(v5, v0, v1) @signature `Ljava/math/BigInteger;.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L1ed91c.  v5:= temp @kind object;
  #L1ed91e.  call temp:= `integer2Bytes`(v5, v2) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @kind static;
  #L1ed924.  v5:= temp @kind object;
  #L1ed926.  v0:= v4.`com.google.crypto.tink.subtle.RsaSsaPkcs1VerifyJce.b` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1ed92a.  call temp:= `a`(v4, v6, v2, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPkcs1VerifyJce;.a:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind direct;
  #L1ed930.  v6:= temp @kind object;
  #L1ed932.  call temp:= `equal`(v5, v6) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L1ed938.  v5:= temp;
  #L1ed93a.  if v5 == 0 then goto L1ed940;
  #L1ed93e.  return @kind void;
  #L1ed940.  v5:= new `java.security.GeneralSecurityException`;
  #L1ed944.  v6:= "invalid signature" @kind object;
  #L1ed948.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed94e.  throw v5;
  #L1ed950.  v5:= new `java.security.GeneralSecurityException`;
  #L1ed954.  v6:= "signature out of range" @kind object;
  #L1ed958.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed95e.  throw v5;
  #L1ed960.  v5:= new `java.security.GeneralSecurityException`;
  #L1ed964.  v6:= "invalid signature's length" @kind object;
  #L1ed968.  call `<init>`(v5, v6) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed96e.  throw v5;
}
