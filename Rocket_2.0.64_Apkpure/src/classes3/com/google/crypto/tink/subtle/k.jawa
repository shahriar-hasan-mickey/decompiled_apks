record `com.google.crypto.tink.subtle.k` @kind class @AccessFlag  extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.subtle.k.a` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.b` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.c` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.k.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.f` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.g` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.k.h` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.k.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.k.j` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.k.k` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.k.l` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.k.m` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.k` v1 @kind this, `com.google.crypto.tink.subtle.i` v2 @kind object, `java.nio.channels.ReadableByteChannel` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/ReadableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ee470.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ee476.  call temp:= `newStreamSegmentDecrypter`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L1ee47c.  v0:= temp @kind object;
  #L1ee47e.  v1.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v0 @kind object;
  #L1ee482.  v1.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` := v3 @kind object;
  #L1ee486.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L1ee48c.  v3:= temp;
  #L1ee48e.  call temp:= `allocate`(v3) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ee494.  v3:= temp @kind object;
  #L1ee496.  v1.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L1ee49a.  v3:= length @variable v4;
  #L1ee49c.  call temp:= `copyOf`(v4, v3) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1ee4a2.  v3:= temp @kind object;
  #L1ee4a4.  v1.`com.google.crypto.tink.subtle.k.i` @type ^`byte`[] := v3 @kind object;
  #L1ee4a8.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L1ee4ae.  v3:= temp;
  #L1ee4b0.  v1.`com.google.crypto.tink.subtle.k.l` @type ^`int` := v3;
  #L1ee4b4.  v4:= v3 + 1;
  #L1ee4b8.  call temp:= `allocate`(v4) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ee4be.  v4:= temp @kind object;
  #L1ee4c0.  v1.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L1ee4c4.  v0:= 0I;
  #L1ee4c6.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee4cc.  call temp:= `getCiphertextOffset`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L1ee4d2.  v4:= temp;
  #L1ee4d4.  v3:= v3 - v4 @kind int;
  #L1ee4d6.  v1.`com.google.crypto.tink.subtle.k.m` @type ^`int` := v3;
  #L1ee4da.  call temp:= `getPlaintextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L1ee4e0.  v2:= temp;
  #L1ee4e2.  v2:= v2 + 16;
  #L1ee4e6.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ee4ec.  v2:= temp @kind object;
  #L1ee4ee.  v1.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L1ee4f2.  call temp:= `limit`(v2, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee4f8.  v1.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` := v0 @kind boolean;
  #L1ee4fc.  v1.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` := v0 @kind boolean;
  #L1ee500.  v1.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` := v0 @kind boolean;
  #L1ee504.  v1.`com.google.crypto.tink.subtle.k.j` @type ^`int` := v0;
  #L1ee508.  v2:= 1I;
  #L1ee50a.  v1.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` := v2 @kind boolean;
  #L1ee50e.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.k` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ee554.  v0:= v2.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ee558.  call temp:= `read`(v0, v3) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ee55e.  v0:= temp;
  #L1ee560.  if v0 <= 0 then goto L1ee570;
  #L1ee564.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee56a.  v1:= temp;
  #L1ee56c.  if v1 > 0 then goto L1ee554;
  #L1ee570.  v3:= -1I;
  #L1ee572.  if v0 != v3 then goto L1ee57c;
  #L1ee576.  v3:= 1I;
  #L1ee578.  v2.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` := v3 @kind boolean;
  #L1ee57c.  return @kind void;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.k` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ee590.  v0:= 0I;
  #L1ee592.  v2.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` := v0 @kind boolean;
  #L1ee596.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee59a.  call temp:= `limit`(v1, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee5a0.  return @kind void;
}
procedure `boolean` `c`(`com.google.crypto.tink.subtle.k` v7 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.c:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1edf88.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1edf8c.  if v0 != 0 then goto L1edf9a;
  #L1edf90.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edf94.  call `a`(v7, v0) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L1edf9a.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edf9e.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1edfa4.  v0:= temp;
  #L1edfa6.  v1:= 0I;
  #L1edfa8.  if v0 <= 0 then goto L1edfb6;
  #L1edfac.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1edfb0.  if v0 != 0 then goto L1edfb6;
  #L1edfb4.  return v1;
  #L1edfb6.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1edfba.  v2:= 1I;
  #L1edfbc.  if v0 != 0 then goto L1edfea;
  #L1edfc0.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edfc4.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1edfca.  v1:= temp;
  #L1edfcc.  v1:= v1 - v2 @kind int;
  #L1edfce.  call temp:= `get`(v0, v1) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L1edfd4.  v1:= temp;
  #L1edfd6.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edfda.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1edfe0.  v3:= temp;
  #L1edfe2.  v3:= v3 - v2 @kind int;
  #L1edfe4.  call temp:= `position`(v0, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1edfea.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edfee.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1edff4.  v0:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1edff8.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1edffe.  v0:= v7.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1ee002.  v3:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee006.  v4:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L1ee00a.  v5:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee00e.  v6:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee012.  call `decryptSegment`(v0, v3, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1ee018.  v0:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L1ee01c.  v0:= v0 + v2 @kind int;
  #L1ee01e.  v7.`com.google.crypto.tink.subtle.k.j` @type ^`int` := v0;
  #L1ee022.  v0:= v7.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee026.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee02c.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee030.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee036.  v0:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee03a.  if v0 != 0 then goto L1ee062;
  #L1ee03e.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee042.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee048.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee04c.  v3:= v7.`com.google.crypto.tink.subtle.k.l` @type ^`int`;
  #L1ee050.  v3:= v3 + v2 @kind int;
  #L1ee052.  call temp:= `limit`(v0, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee058.  v0:= v7.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee05c.  call temp:= `put`(v0, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ee062.  return v2;
  #L1ee064.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1ee066.  call `b`(v7) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @kind direct;
  #L1ee06c.  v1:= new `java.io.IOException`;
  #L1ee070.  v2:= new `java.lang.StringBuilder`;
  #L1ee074.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ee07a.  call temp:= `getMessage`(v0) @signature `Ljava/security/GeneralSecurityException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ee080.  v3:= temp @kind object;
  #L1ee082.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee088.  v3:= "\n" @kind object;
  #L1ee08c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee092.  call temp:= `toString`(v7) @signature `Lcom/google/crypto/tink/subtle/k;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ee098.  v3:= temp @kind object;
  #L1ee09a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee0a0.  v3:= "\nsegmentNr:" @kind object;
  #L1ee0a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee0aa.  v3:= v7.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L1ee0ae.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee0b4.  v3:= " endOfCiphertext:" @kind object;
  #L1ee0b8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee0be.  v3:= v7.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee0c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee0c8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ee0ce.  v2:= temp @kind object;
  #L1ee0d0.  call `<init>`(v1, v2, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1ee0d6.  throw v1;
  catch `java.security.GeneralSecurityException` @[L1edffe..L1ee018] goto L1ee064;
}
procedure `boolean` `d`(`com.google.crypto.tink.subtle.k` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ee0f8.  v0:= v3.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee0fc.  if v0 != 0 then goto L1ee156;
  #L1ee100.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee104.  call `a`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/k;.a:(Ljava/nio/ByteBuffer;)V` @kind direct;
  #L1ee10a.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee10e.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee114.  v0:= temp;
  #L1ee116.  if v0 <= 0 then goto L1ee11e;
  #L1ee11a.  v0:= 0I;
  #L1ee11c.  return v0;
  #L1ee11e.  v0:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee122.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee128.  v0:= v3.`com.google.crypto.tink.subtle.k.k` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1ee12c.  v1:= v3.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee130.  v2:= v3.`com.google.crypto.tink.subtle.k.i` @type ^`byte`[] @kind object;
  #L1ee134.  call `init`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L1ee13a.  v0:= 1I;
  #L1ee13c.  v3.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` := v0 @kind boolean;
  #L1ee140.  return v0;
  #L1ee142.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1ee144.  call `b`(v3) @signature `Lcom/google/crypto/tink/subtle/k;.b:()V` @kind direct;
  #L1ee14a.  v1:= new `java.io.IOException`;
  #L1ee14e.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1ee154.  throw v1;
  #L1ee156.  v0:= new `java.io.IOException`;
  #L1ee15a.  v1:= "Ciphertext is too short" @kind object;
  #L1ee15e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ee164.  throw v0;
  catch `java.security.GeneralSecurityException` @[L1ee128..L1ee140] goto L1ee142;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.k` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ee520.  @monitorenter v1
  #L1ee522.  v0:= v1.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ee526.  call `close`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.close:()V` @kind interface;
  #L1ee52c.  @monitorexit v1
  #L1ee52e.  return @kind void;
  #L1ee530.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee532.  @monitorexit v1
  #L1ee534.  throw v0;
  catch `java.lang.Throwable` @[L1ee522..L1ee52c] goto L1ee530;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.k` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1edf54.  @monitorenter v1
  #L1edf56.  v0:= v1.`com.google.crypto.tink.subtle.k.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1edf5a.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.isOpen:()Z` @kind interface;
  #L1edf60.  v0:= temp;
  #L1edf62.  @monitorexit v1
  #L1edf64.  return v0;
  #L1edf66.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1edf68.  @monitorexit v1
  #L1edf6a.  throw v0;
  catch `java.lang.Throwable` @[L1edf56..L1edf62] goto L1edf66;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.k` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/k;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ee188.  @monitorenter v6
  #L1ee18a.  v0:= v6.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` @kind boolean;
  #L1ee18e.  if v0 == 0 then goto L1ee2a2;
  #L1ee192.  v0:= v6.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` @kind boolean;
  #L1ee196.  v1:= 1I;
  #L1ee198.  if v0 != 0 then goto L1ee1c8;
  #L1ee19c.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/subtle/k;.d:()Z` @kind direct;
  #L1ee1a2.  v0:= temp;
  #L1ee1a4.  if v0 != 0 then goto L1ee1ae;
  #L1ee1a8.  v7:= 0I;
  #L1ee1aa.  @monitorexit v6
  #L1ee1ac.  return v7;
  #L1ee1ae.  v0:= v6.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee1b2.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee1b8.  v0:= v6.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee1bc.  v2:= v6.`com.google.crypto.tink.subtle.k.m` @type ^`int`;
  #L1ee1c0.  v2:= v2 + v1 @kind int;
  #L1ee1c2.  call temp:= `limit`(v0, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee1c8.  v0:= v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L1ee1cc.  v2:= -1I;
  #L1ee1ce.  if v0 == 0 then goto L1ee1d6;
  #L1ee1d2.  @monitorexit v6
  #L1ee1d4.  return v2;
  #L1ee1d6.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee1dc.  v0:= temp;
  #L1ee1de.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee1e4.  v3:= temp;
  #L1ee1e6.  if v3 <= 0 then goto L1ee284;
  #L1ee1ea.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee1ee.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee1f4.  v3:= temp;
  #L1ee1f6.  if v3 != 0 then goto L1ee216;
  #L1ee1fa.  v3:= v6.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee1fe.  if v3 == 0 then goto L1ee208;
  #L1ee202.  v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` := v1 @kind boolean;
  #L1ee206.  goto L1ee284;
  #L1ee208.  call temp:= `c`(v6) @signature `Lcom/google/crypto/tink/subtle/k;.c:()Z` @kind direct;
  #L1ee20e.  v3:= temp;
  #L1ee210.  if v3 != 0 then goto L1ee216;
  #L1ee214.  goto L1ee284;
  #L1ee216.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee21a.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee220.  v3:= temp;
  #L1ee222.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee228.  v4:= temp;
  #L1ee22a.  if v3 > v4 then goto L1ee244;
  #L1ee22e.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee232.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee238.  v3:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee23c.  call temp:= `put`(v7, v3) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ee242.  goto L1ee1de;
  #L1ee244.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee24a.  v3:= temp;
  #L1ee24c.  v4:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee250.  call temp:= `duplicate`(v4) @signature `Ljava/nio/ByteBuffer;.duplicate:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ee256.  v4:= temp @kind object;
  #L1ee258.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee25e.  v5:= temp;
  #L1ee260.  v5:= v5 + v3 @kind int;
  #L1ee262.  call temp:= `limit`(v4, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee268.  call temp:= `put`(v7, v4) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ee26e.  v4:= v6.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee272.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee278.  v5:= temp;
  #L1ee27a.  v5:= v5 + v3 @kind int;
  #L1ee27c.  call temp:= `position`(v4, v5) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee282.  goto L1ee1de;
  #L1ee284.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee28a.  v7:= temp;
  #L1ee28c.  v7:= v7 - v0 @kind int;
  #L1ee28e.  if v7 != 0 then goto L1ee29e;
  #L1ee292.  v0:= v6.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L1ee296.  if v0 == 0 then goto L1ee29e;
  #L1ee29a.  @monitorexit v6
  #L1ee29c.  return v2;
  #L1ee29e.  @monitorexit v6
  #L1ee2a0.  return v7;
  #L1ee2a2.  v7:= new `java.io.IOException`;
  #L1ee2a6.  v0:= "This StreamingAeadDecryptingChannel is in an undefined state" @kind object;
  #L1ee2aa.  call `<init>`(v7, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ee2b0.  throw v7;
  #L1ee2b2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee2b4.  @monitorexit v6
  #L1ee2b6.  throw v7;
  catch `java.lang.Throwable` @[L1ee18a..L1ee1a4] goto L1ee2b2;
  catch `java.lang.Throwable` @[L1ee1ae..L1ee1cc] goto L1ee2b2;
  catch `java.lang.Throwable` @[L1ee1d6..L1ee296] goto L1ee2b2;
  catch `java.lang.Throwable` @[L1ee2a2..L1ee2b2] goto L1ee2b2;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.k` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ee2ec.  @monitorenter v2
  #L1ee2ee.  v0:= new `java.lang.StringBuilder`;
  #L1ee2f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ee2f8.  v1:= "StreamingAeadDecryptingChannel" @kind object;
  #L1ee2fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee302.  v1:= "\nsegmentNr:" @kind object;
  #L1ee306.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee30c.  v1:= v2.`com.google.crypto.tink.subtle.k.j` @type ^`int`;
  #L1ee310.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee316.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L1ee31a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee320.  v1:= v2.`com.google.crypto.tink.subtle.k.l` @type ^`int`;
  #L1ee324.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee32a.  v1:= "\nheaderRead:" @kind object;
  #L1ee32e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee334.  v1:= v2.`com.google.crypto.tink.subtle.k.e` @type ^`boolean` @kind boolean;
  #L1ee338.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee33e.  v1:= "\nendOfCiphertext:" @kind object;
  #L1ee342.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee348.  v1:= v2.`com.google.crypto.tink.subtle.k.f` @type ^`boolean` @kind boolean;
  #L1ee34c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee352.  v1:= "\nendOfPlaintext:" @kind object;
  #L1ee356.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee35c.  v1:= v2.`com.google.crypto.tink.subtle.k.g` @type ^`boolean` @kind boolean;
  #L1ee360.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee366.  v1:= "\ndefinedState:" @kind object;
  #L1ee36a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee370.  v1:= v2.`com.google.crypto.tink.subtle.k.h` @type ^`boolean` @kind boolean;
  #L1ee374.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee37a.  v1:= "\nHeader" @kind object;
  #L1ee37e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee384.  v1:= " position:" @kind object;
  #L1ee388.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee38e.  v1:= v2.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee392.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee398.  v1:= temp;
  #L1ee39a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3a0.  v1:= " limit:" @kind object;
  #L1ee3a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3aa.  v1:= v2.`com.google.crypto.tink.subtle.k.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee3ae.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee3b4.  v1:= temp;
  #L1ee3b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3bc.  v1:= "\nciphertextSgement" @kind object;
  #L1ee3c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3c6.  v1:= " position:" @kind object;
  #L1ee3ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3d0.  v1:= v2.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee3d4.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee3da.  v1:= temp;
  #L1ee3dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3e2.  v1:= " limit:" @kind object;
  #L1ee3e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3ec.  v1:= v2.`com.google.crypto.tink.subtle.k.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee3f0.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ee3f6.  v1:= temp;
  #L1ee3f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee3fe.  v1:= "\nplaintextSegment" @kind object;
  #L1ee402.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee408.  v1:= " position:" @kind object;
  #L1ee40c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee412.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee416.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee41c.  v1:= temp;
  #L1ee41e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee424.  v1:= " limit:" @kind object;
  #L1ee428.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee42e.  v1:= v2.`com.google.crypto.tink.subtle.k.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee432.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ee438.  v1:= temp;
  #L1ee43a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee440.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ee446.  v0:= temp @kind object;
  #L1ee448.  @monitorexit v2
  #L1ee44a.  return v0 @kind object;
  #L1ee44c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee44e.  @monitorexit v2
  #L1ee450.  throw v0;
  catch `java.lang.Throwable` @[L1ee2ee..L1ee448] goto L1ee44c;
}
