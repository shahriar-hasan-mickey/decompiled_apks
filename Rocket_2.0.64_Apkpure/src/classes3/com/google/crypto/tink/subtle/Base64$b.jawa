record `com.google.crypto.tink.subtle.Base64$b` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.Base64$a` @kind class {
  `int` `com.google.crypto.tink.subtle.Base64$b.c` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.Base64$b.d` @AccessFlag PRIVATE;
  `int`[] `com.google.crypto.tink.subtle.Base64$b.e` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@com.google.crypto.tink.subtle.Base64$b.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.crypto.tink.subtle.Base64$b.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e2720.  v0:= 256I;
  #L1e2724.  v1:= new `int`[v0];
  #L1e2728.  goto L1e2744;
  #L1e272e.  `@@com.google.crypto.tink.subtle.Base64$b.f` @type ^`int`[] := v1 @kind object;
  #L1e2732.  v0:= new `int`[v0];
  #L1e2736.  goto L1e2b4c;
  #L1e273c.  `@@com.google.crypto.tink.subtle.Base64$b.g` @type ^`int`[] := v0 @kind object;
  #L1e2740.  return @kind void;
  #L1e2742.  
  #L1e2744.  v1:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, -1I, 63I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, -1I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L1e2b4b.  goto L1e272e;
  #L1e2b4c.  v0:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 62I, -1I, -1I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -1I, -1I, -1I, -2I, -1I, -1I, -1I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -1I, -1I, -1I, -1I, 63I, -1I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I) @kind object;
  #L1e2f53.  goto L1e273c;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64$b` v0 @kind this, `int` v1 , `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<init>:(I[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e2f64.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/subtle/Base64$a;.<init>:()V` @kind direct;
  #L1e2f6a.  v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v2 @kind object;
  #L1e2f6e.  v1:= v1 ^& 8;
  #L1e2f72.  if v1 != 0 then goto L1e2f7c;
  #L1e2f76.  v1:= `@@com.google.crypto.tink.subtle.Base64$b.f` @type ^`int`[] @kind object;
  #L1e2f7a.  goto L1e2f80;
  #L1e2f7c.  v1:= `@@com.google.crypto.tink.subtle.Base64$b.g` @type ^`int`[] @kind object;
  #L1e2f80.  v0.`com.google.crypto.tink.subtle.Base64$b.e` @type ^`int`[] := v1 @kind object;
  #L1e2f84.  v1:= 0I;
  #L1e2f86.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v1;
  #L1e2f8a.  v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int` := v1;
  #L1e2f8e.  return @kind void;
}
procedure `boolean` `a`(`com.google.crypto.tink.subtle.Base64$b` v16 @kind this, `byte`[] v17 @kind object, `int` v18 , `int` v19 , `boolean` v20 ) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.a:([BIIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1e24c4.  v0:= v16 @kind object;
  #L1e24c8.  v1:= v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int`;
  #L1e24cc.  v2:= 0I;
  #L1e24ce.  v3:= 6I;
  #L1e24d0.  if v1 != v3 then goto L1e24d6;
  #L1e24d4.  return v2;
  #L1e24d6.  v4:= v19 + v18 @kind int;
  #L1e24da.  v5:= v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int`;
  #L1e24de.  v6:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L1e24e2.  v7:= v0.`com.google.crypto.tink.subtle.Base64$b.e` @type ^`int`[] @kind object;
  #L1e24e6.  v8:= v5;
  #L1e24e8.  v9:= 0I;
  #L1e24ea.  v5:= v1;
  #L1e24ec.  v1:= v18;
  #L1e24f0.  v10:= 3I;
  #L1e24f2.  v11:= 4I;
  #L1e24f4.  v12:= 2I;
  #L1e24f6.  v13:= 1I;
  #L1e24f8.  if v1 >= v4 then goto L1e26a6;
  #L1e24fc.  if v5 != 0 then goto L1e258a;
  #L1e2500.  v14:= v1 + 4;
  #L1e2504.  if v14 > v4 then goto L1e2582;
  #L1e2508.  v8:= v17[v1] @kind byte;
  #L1e250c.  v8:= v8 ^& 255;
  #L1e2510.  v8:= v7[v8];
  #L1e2514.  v8:= v8 ^< 18;
  #L1e2518.  v15:= v1 + 1;
  #L1e251c.  v15:= v17[v15] @kind byte;
  #L1e2520.  v15:= v15 ^& 255;
  #L1e2524.  v15:= v7[v15];
  #L1e2528.  v15:= v15 ^< 12;
  #L1e252c.  v8:= v8 ^| v15 @kind int;
  #L1e252e.  v15:= v1 + 2;
  #L1e2532.  v15:= v17[v15] @kind byte;
  #L1e2536.  v15:= v15 ^& 255;
  #L1e253a.  v15:= v7[v15];
  #L1e253e.  v15:= v15 ^< v3 @kind int;
  #L1e2540.  v8:= v8 ^| v15 @kind int;
  #L1e2542.  v15:= v1 + 3;
  #L1e2546.  v15:= v17[v15] @kind byte;
  #L1e254a.  v15:= v15 ^& 255;
  #L1e254e.  v15:= v7[v15];
  #L1e2552.  v8:= v8 ^| v15 @kind int;
  #L1e2554.  if v8 < 0 then goto L1e2582;
  #L1e2558.  v1:= v9 + 2;
  #L1e255c.  v15:= (`byte`) v8 @kind i2b;
  #L1e255e.  v6[v1]:= v15 @kind byte;
  #L1e2562.  v1:= v9 + 1;
  #L1e2566.  v15:= v8 ^> 8;
  #L1e256a.  v15:= (`byte`) v15 @kind i2b;
  #L1e256c.  v6[v1]:= v15 @kind byte;
  #L1e2570.  v1:= v8 ^> 16;
  #L1e2574.  v1:= (`byte`) v1 @kind i2b;
  #L1e2576.  v6[v9]:= v1 @kind byte;
  #L1e257a.  v9:= v9 + 3;
  #L1e257e.  v1:= v14;
  #L1e2580.  goto L1e2500;
  #L1e2582.  if v1 < v4 then goto L1e258a;
  #L1e2586.  goto L1e26a6;
  #L1e258a.  v14:= v1 + 1;
  #L1e258e.  v1:= v17[v1] @kind byte;
  #L1e2592.  v1:= v1 ^& 255;
  #L1e2596.  v1:= v7[v1];
  #L1e259a.  v15:= 5I;
  #L1e259c.  v2:= -1I;
  #L1e259e.  if v5 == 0 then goto L1e2686;
  #L1e25a2.  if v5 == v13 then goto L1e266e;
  #L1e25a6.  v13:= -2I;
  #L1e25a8.  if v5 == v12 then goto L1e2646;
  #L1e25ac.  if v5 == v10 then goto L1e25e0;
  #L1e25b0.  if v5 == v11 then goto L1e25c8;
  #L1e25b4.  if v5 == v15 then goto L1e25bc;
  #L1e25b8.  goto L1e269e;
  #L1e25bc.  if v1 == v2 then goto L1e269e;
  #L1e25c0.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e25c4.  v10:= 0I;
  #L1e25c6.  return v10;
  #L1e25c8.  v10:= 0I;
  #L1e25ca.  if v1 != v13 then goto L1e25d6;
  #L1e25ce.  v5:= v5 + 1;
  #L1e25d2.  goto L1e269e;
  #L1e25d6.  if v1 == v2 then goto L1e269e;
  #L1e25da.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e25de.  return v10;
  #L1e25e0.  if v1 < 0 then goto L1e2616;
  #L1e25e4.  v2:= v8 ^< 6;
  #L1e25e8.  v1:= v1 ^| v2 @kind int;
  #L1e25ea.  v2:= v9 + 2;
  #L1e25ee.  v5:= (`byte`) v1 @kind i2b;
  #L1e25f0.  v6[v2]:= v5 @kind byte;
  #L1e25f4.  v2:= v9 + 1;
  #L1e25f8.  v5:= v1 ^> 8;
  #L1e25fc.  v5:= (`byte`) v5 @kind i2b;
  #L1e25fe.  v6[v2]:= v5 @kind byte;
  #L1e2602.  v2:= v1 ^> 16;
  #L1e2606.  v2:= (`byte`) v2 @kind i2b;
  #L1e2608.  v6[v9]:= v2 @kind byte;
  #L1e260c.  v9:= v9 + 3;
  #L1e2610.  v8:= v1;
  #L1e2612.  v5:= 0I;
  #L1e2614.  goto L1e269e;
  #L1e2616.  if v1 != v13 then goto L1e263a;
  #L1e261a.  v1:= v9 + 1;
  #L1e261e.  v2:= v8 ^> 2;
  #L1e2622.  v2:= (`byte`) v2 @kind i2b;
  #L1e2624.  v6[v1]:= v2 @kind byte;
  #L1e2628.  v1:= v8 ^> 10;
  #L1e262c.  v1:= (`byte`) v1 @kind i2b;
  #L1e262e.  v6[v9]:= v1 @kind byte;
  #L1e2632.  v9:= v9 + 2;
  #L1e2636.  v5:= 5I;
  #L1e2638.  goto L1e269e;
  #L1e263a.  if v1 == v2 then goto L1e269e;
  #L1e263e.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e2642.  v1:= 0I;
  #L1e2644.  return v1;
  #L1e2646.  if v1 < 0 then goto L1e264c;
  #L1e264a.  goto L1e2674;
  #L1e264c.  if v1 != v13 then goto L1e2664;
  #L1e2650.  v1:= v9 + 1;
  #L1e2654.  v2:= v8 ^> 4;
  #L1e2658.  v2:= (`byte`) v2 @kind i2b;
  #L1e265a.  v6[v9]:= v2 @kind byte;
  #L1e265e.  v9:= v1;
  #L1e2660.  v5:= 4I;
  #L1e2662.  goto L1e269e;
  #L1e2664.  if v1 == v2 then goto L1e269e;
  #L1e2668.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e266c.  goto L1e25c4;
  #L1e266e.  v10:= 0I;
  #L1e2670.  if v1 < 0 then goto L1e267c;
  #L1e2674.  v2:= v8 ^< 6;
  #L1e2678.  v1:= v1 ^| v2 @kind int;
  #L1e267a.  goto L1e268c;
  #L1e267c.  if v1 == v2 then goto L1e269e;
  #L1e2680.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e2684.  return v10;
  #L1e2686.  v10:= 0I;
  #L1e2688.  if v1 < 0 then goto L1e2694;
  #L1e268c.  v5:= v5 + 1;
  #L1e2690.  v8:= v1;
  #L1e2692.  goto L1e269e;
  #L1e2694.  if v1 == v2 then goto L1e269e;
  #L1e2698.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e269c.  return v10;
  #L1e269e.  v1:= v14;
  #L1e26a0.  v2:= 0I;
  #L1e26a2.  goto L1e24f0;
  #L1e26a6.  if v20 != 0 then goto L1e26b8;
  #L1e26aa.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v5;
  #L1e26ae.  v0.`com.google.crypto.tink.subtle.Base64$b.d` @type ^`int` := v8;
  #L1e26b2.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v9;
  #L1e26b6.  return v13;
  #L1e26b8.  if v5 == v13 then goto L1e2708;
  #L1e26bc.  if v5 == v12 then goto L1e26ee;
  #L1e26c0.  if v5 == v10 then goto L1e26d0;
  #L1e26c4.  if v5 == v11 then goto L1e26ca;
  #L1e26c8.  goto L1e26fe;
  #L1e26ca.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e26ce.  goto L1e2642;
  #L1e26d0.  v1:= v9 + 1;
  #L1e26d4.  v2:= v8 ^> 10;
  #L1e26d8.  v2:= (`byte`) v2 @kind i2b;
  #L1e26da.  v6[v9]:= v2 @kind byte;
  #L1e26de.  v9:= v1 + 1;
  #L1e26e2.  v2:= v8 ^> 2;
  #L1e26e6.  v2:= (`byte`) v2 @kind i2b;
  #L1e26e8.  v6[v1]:= v2 @kind byte;
  #L1e26ec.  goto L1e26fe;
  #L1e26ee.  v1:= v9 + 1;
  #L1e26f2.  v2:= v8 ^> 4;
  #L1e26f6.  v2:= (`byte`) v2 @kind i2b;
  #L1e26f8.  v6[v9]:= v2 @kind byte;
  #L1e26fc.  v9:= v1;
  #L1e26fe.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v5;
  #L1e2702.  v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int` := v9;
  #L1e2706.  return v13;
  #L1e2708.  v0.`com.google.crypto.tink.subtle.Base64$b.c` @type ^`int` := v3;
  #L1e270c.  goto L1e2642;
}
