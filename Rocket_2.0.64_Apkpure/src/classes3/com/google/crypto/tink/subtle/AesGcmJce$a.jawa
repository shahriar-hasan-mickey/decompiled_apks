record `com.google.crypto.tink.subtle.AesGcmJce$a` @kind class @AccessFlag  extends `java.lang.ThreadLocal` @kind class {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesGcmJce$a` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmJce$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1e1df8.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L1e1dfe.  return @kind void;
}
procedure `javax.crypto.Cipher` `a`(`com.google.crypto.tink.subtle.AesGcmJce$a` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmJce$a;.a:()Ljavax/crypto/Cipher;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1e1db4.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e1db8.  v1:= "AES/GCM/NoPadding" @kind object;
  #L1e1dbc.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e1dc2.  v0:= temp @kind object;
  #L1e1dc4.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1e1dc8.  return v0 @kind object;
  #L1e1dca.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1e1dcc.  v1:= new `java.lang.IllegalStateException`;
  #L1e1dd0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1e1dd6.  throw v1;
  catch `java.security.GeneralSecurityException` @[L1e1db4..L1e1dc8] goto L1e1dca;
}
procedure `java.lang.Object` `initialValue`(`com.google.crypto.tink.subtle.AesGcmJce$a` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmJce$a;.initialValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L1e1d98.  call temp:= `a`(v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmJce$a;.a:()Ljavax/crypto/Cipher;` @kind virtual;
  #L1e1d9e.  v0:= temp @kind object;
  #L1e1da0.  return v0 @kind object;
}
