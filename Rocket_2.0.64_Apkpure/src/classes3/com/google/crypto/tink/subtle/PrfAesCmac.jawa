record `com.google.crypto.tink.subtle.PrfAesCmac` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.prf.Prf` @kind interface {
  `javax.crypto.SecretKey` `com.google.crypto.tink.subtle.PrfAesCmac.a` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.PrfAesCmac.b` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.PrfAesCmac.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.PrfAesCmac` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ecd38.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ecd3e.  v0:= length @variable v3;
  #L1ecd40.  call `validateAesKeySize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L1ecd46.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L1ecd4a.  v1:= "AES" @kind object;
  #L1ecd4e.  call `<init>`(v0, v3, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1ecd54.  v2.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` := v0 @kind object;
  #L1ecd58.  call `a`(v2) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.a:()V` @kind direct;
  #L1ecd5e.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.PrfAesCmac` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ecd70.  call temp:= `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @kind static;
  #L1ecd76.  v0:= temp @kind object;
  #L1ecd78.  v1:= v3.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L1ecd7c.  v2:= 1I;
  #L1ecd7e.  call `init`(v0, v2, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1ecd84.  v1:= 16I;
  #L1ecd88.  v1:= new `byte`[v1];
  #L1ecd8c.  call temp:= `doFinal`(v0, v1) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1ecd92.  v0:= temp @kind object;
  #L1ecd94.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L1ecd9a.  v0:= temp @kind object;
  #L1ecd9c.  v3.`com.google.crypto.tink.subtle.PrfAesCmac.b` @type ^`byte`[] := v0 @kind object;
  #L1ecda0.  call temp:= `b`(v0) @signature `Lcom/google/crypto/tink/subtle/a;.b:([B)[B` @kind static;
  #L1ecda6.  v0:= temp @kind object;
  #L1ecda8.  v3.`com.google.crypto.tink.subtle.PrfAesCmac.c` @type ^`byte`[] := v0 @kind object;
  #L1ecdac.  return @kind void;
}
procedure `javax.crypto.Cipher` `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1ecd10.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ecd14.  v1:= "AES/ECB/NoPadding" @kind object;
  #L1ecd18.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ecd1e.  v0:= temp @kind object;
  #L1ecd20.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1ecd24.  return v0 @kind object;
}
procedure `byte`[] `compute`(`com.google.crypto.tink.subtle.PrfAesCmac` v9 @kind this, `byte`[] v10 @kind object, `int` v11 ) @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.compute:([BI)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ecc24.  v0:= 16I;
  #L1ecc28.  if v11 > v0 then goto L1eccf0;
  #L1ecc2c.  call temp:= `b`() @signature `Lcom/google/crypto/tink/subtle/PrfAesCmac;.b:()Ljavax/crypto/Cipher;` @kind static;
  #L1ecc32.  v1:= temp @kind object;
  #L1ecc34.  v2:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L1ecc38.  v3:= 1I;
  #L1ecc3a.  call `init`(v1, v3, v2) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1ecc40.  v2:= length @variable v10;
  #L1ecc42.  v4:= (`double`) v2 @kind i2d;
  #L1ecc44.  v6:= 16.0D;
  #L1ecc48.  v4:= v4 / v6 @kind double;
  #L1ecc4a.  call temp:= `ceil`(v4) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L1ecc50.  v4:= temp @kind wide;
  #L1ecc52.  v2:= (`int`) v4 @kind d2i;
  #L1ecc54.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ecc5a.  v2:= temp;
  #L1ecc5c.  v4:= v2 * 16;
  #L1ecc60.  v5:= length @variable v10;
  #L1ecc62.  v6:= 0I;
  #L1ecc64.  if v4 != v5 then goto L1ecc6c;
  #L1ecc68.  v4:= 1I;
  #L1ecc6a.  goto L1ecc6e;
  #L1ecc6c.  v4:= 0I;
  #L1ecc6e.  if v4 == 0 then goto L1ecc88;
  #L1ecc72.  v4:= v2 + -1;
  #L1ecc76.  v4:= v4 * 16;
  #L1ecc7a.  v5:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.b` @type ^`byte`[] @kind object;
  #L1ecc7e.  call temp:= `xor`(v10, v4, v5, v6, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L1ecc84.  v4:= temp @kind object;
  #L1ecc86.  goto L1eccae;
  #L1ecc88.  v4:= v2 + -1;
  #L1ecc8c.  v4:= v4 * 16;
  #L1ecc90.  v5:= length @variable v10;
  #L1ecc92.  call temp:= `copyOfRange`(v10, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1ecc98.  v4:= temp @kind object;
  #L1ecc9a.  call temp:= `a`(v4) @signature `Lcom/google/crypto/tink/subtle/a;.a:([B)[B` @kind static;
  #L1ecca0.  v4:= temp @kind object;
  #L1ecca2.  v5:= v9.`com.google.crypto.tink.subtle.PrfAesCmac.c` @type ^`byte`[] @kind object;
  #L1ecca6.  call temp:= `xor`(v4, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L1eccac.  v4:= temp @kind object;
  #L1eccae.  v5:= new `byte`[v0];
  #L1eccb2.  v7:= 0I;
  #L1eccb4.  v8:= v2 + -1;
  #L1eccb8.  if v7 >= v8 then goto L1eccd6;
  #L1eccbc.  v8:= v7 * 16;
  #L1eccc0.  call temp:= `xor`(v5, v6, v10, v8, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L1eccc6.  v5:= temp @kind object;
  #L1eccc8.  call temp:= `doFinal`(v1, v5) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1eccce.  v5:= temp @kind object;
  #L1eccd0.  v7:= v7 + 1;
  #L1eccd4.  goto L1eccb4;
  #L1eccd6.  call temp:= `xor`(v4, v5) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @kind static;
  #L1eccdc.  v10:= temp @kind object;
  #L1eccde.  call temp:= `doFinal`(v1, v10) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1ecce4.  v10:= temp @kind object;
  #L1ecce6.  call temp:= `copyOf`(v10, v11) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1eccec.  v10:= temp @kind object;
  #L1eccee.  return v10 @kind object;
  #L1eccf0.  v10:= new `java.security.InvalidAlgorithmParameterException`;
  #L1eccf4.  v11:= "outputLength too large, max is 16 bytes" @kind object;
  #L1eccf8.  call `<init>`(v10, v11) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eccfe.  throw v10;
}
