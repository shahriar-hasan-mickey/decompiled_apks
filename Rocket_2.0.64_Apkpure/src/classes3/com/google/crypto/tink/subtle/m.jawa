record `com.google.crypto.tink.subtle.m` @kind class @AccessFlag  extends `java.nio.channels.WritableByteChannel` @kind interface {
  `java.nio.channels.WritableByteChannel` `com.google.crypto.tink.subtle.m.a` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `com.google.crypto.tink.subtle.m.b` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.m.c` @AccessFlag ;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.m.d` @AccessFlag ;
  `int` `com.google.crypto.tink.subtle.m.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.m.f` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.m` v2 @kind this, `com.google.crypto.tink.subtle.i` v3 @kind object, `java.nio.channels.WritableByteChannel` v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/m;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/WritableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1eee54.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1eee5a.  v0:= 1I;
  #L1eee5c.  v2.`com.google.crypto.tink.subtle.m.f` @type ^`boolean` := v0 @kind boolean;
  #L1eee60.  v2.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` := v4 @kind object;
  #L1eee64.  call temp:= `newStreamSegmentEncrypter`(v3, v5) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @kind virtual;
  #L1eee6a.  v5:= temp @kind object;
  #L1eee6c.  v2.`com.google.crypto.tink.subtle.m.b` @type ^`com.google.crypto.tink.subtle.StreamSegmentEncrypter` := v5 @kind object;
  #L1eee70.  call temp:= `getPlaintextSegmentSize`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L1eee76.  v5:= temp;
  #L1eee78.  v2.`com.google.crypto.tink.subtle.m.e` @type ^`int` := v5;
  #L1eee7c.  call temp:= `allocate`(v5) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1eee82.  v5:= temp @kind object;
  #L1eee84.  v2.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` := v5 @kind object;
  #L1eee88.  v0:= v2.`com.google.crypto.tink.subtle.m.e` @type ^`int`;
  #L1eee8c.  call temp:= `getCiphertextOffset`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L1eee92.  v1:= temp;
  #L1eee94.  v0:= v0 - v1 @kind int;
  #L1eee96.  call temp:= `limit`(v5, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eee9c.  call temp:= `getCiphertextSegmentSize`(v3) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L1eeea2.  v3:= temp;
  #L1eeea4.  call temp:= `allocate`(v3) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1eeeaa.  v3:= temp @kind object;
  #L1eeeac.  v2.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L1eeeb0.  v5:= v2.`com.google.crypto.tink.subtle.m.b` @type ^`com.google.crypto.tink.subtle.StreamSegmentEncrypter` @kind object;
  #L1eeeb4.  call temp:= `getHeader`(v5) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;.getHeader:()Ljava/nio/ByteBuffer;` @kind interface;
  #L1eeeba.  v5:= temp @kind object;
  #L1eeebc.  call temp:= `put`(v3, v5) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1eeec2.  v3:= v2.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeec6.  call temp:= `flip`(v3) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eeecc.  v3:= v2.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeed0.  call temp:= `write`(v4, v3) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1eeed6.  return @kind void;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.m` v4 @kind this) @signature `Lcom/google/crypto/tink/subtle/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1eeee8.  @monitorenter v4
  #L1eeeea.  v0:= v4.`com.google.crypto.tink.subtle.m.f` @type ^`boolean` @kind boolean;
  #L1eeeee.  if v0 != 0 then goto L1eeef6;
  #L1eeef2.  @monitorexit v4
  #L1eeef4.  return @kind void;
  #L1eeef6.  v0:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeefa.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eef00.  v0:= temp;
  #L1eef02.  if v0 <= 0 then goto L1eef2c;
  #L1eef06.  v0:= v4.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L1eef0a.  v1:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef0e.  call temp:= `write`(v0, v1) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1eef14.  v0:= temp;
  #L1eef16.  if v0 <= 0 then goto L1eef1c;
  #L1eef1a.  goto L1eeef6;
  #L1eef1c.  v0:= new `java.io.IOException`;
  #L1eef20.  v1:= "Failed to write ciphertext before closing" @kind object;
  #L1eef24.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eef2a.  throw v0;
  #L1eef2c.  v0:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef30.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eef36.  v0:= v4.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef3a.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eef40.  v0:= v4.`com.google.crypto.tink.subtle.m.b` @type ^`com.google.crypto.tink.subtle.StreamSegmentEncrypter` @kind object;
  #L1eef44.  v1:= v4.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef48.  v2:= 1I;
  #L1eef4a.  v3:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef4e.  call `encryptSegment`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;.encryptSegment:(Ljava/nio/ByteBuffer;ZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1eef54.  v0:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef58.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eef5e.  v0:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef62.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eef68.  v0:= temp;
  #L1eef6a.  if v0 <= 0 then goto L1eef94;
  #L1eef6e.  v0:= v4.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L1eef72.  v1:= v4.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eef76.  call temp:= `write`(v0, v1) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1eef7c.  v0:= temp;
  #L1eef7e.  if v0 <= 0 then goto L1eef84;
  #L1eef82.  goto L1eef5e;
  #L1eef84.  v0:= new `java.io.IOException`;
  #L1eef88.  v1:= "Failed to write ciphertext before closing" @kind object;
  #L1eef8c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eef92.  throw v0;
  #L1eef94.  v0:= v4.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L1eef98.  call `close`(v0) @signature `Ljava/nio/channels/WritableByteChannel;.close:()V` @kind interface;
  #L1eef9e.  v0:= 0I;
  #L1eefa0.  v4.`com.google.crypto.tink.subtle.m.f` @type ^`boolean` := v0 @kind boolean;
  #L1eefa4.  @monitorexit v4
  #L1eefa6.  return @kind void;
  #L1eefa8.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1eefaa.  v1:= new `java.io.IOException`;
  #L1eefae.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1eefb4.  throw v1;
  #L1eefb6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1eefb8.  @monitorexit v4
  #L1eefba.  throw v0;
  catch `java.lang.Throwable` @[L1eeeea..L1eeeee] goto L1eefb6;
  catch `java.lang.Throwable` @[L1eeef6..L1eef2c] goto L1eefb6;
  catch `java.security.GeneralSecurityException` @[L1eef2c..L1eef54] goto L1eefa8;
  catch `java.lang.Throwable` @[L1eef2c..L1eef54] goto L1eefb6;
  catch `java.lang.Throwable` @[L1eef54..L1eefa4] goto L1eefb6;
  catch `java.lang.Throwable` @[L1eefaa..L1eefb6] goto L1eefb6;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.m` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/m;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1eecb4.  v0:= v1.`com.google.crypto.tink.subtle.m.f` @type ^`boolean` @kind boolean;
  #L1eecb8.  return v0;
}
procedure `int` `write`(`com.google.crypto.tink.subtle.m` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/m;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1eeccc.  @monitorenter v6
  #L1eecce.  v0:= v6.`com.google.crypto.tink.subtle.m.f` @type ^`boolean` @kind boolean;
  #L1eecd2.  if v0 == 0 then goto L1eedfc;
  #L1eecd6.  v0:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eecda.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eece0.  v0:= temp;
  #L1eece2.  if v0 <= 0 then goto L1eecf4;
  #L1eece6.  v0:= v6.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L1eecea.  v1:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eecee.  call temp:= `write`(v0, v1) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1eecf4.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eecfa.  v0:= temp;
  #L1eecfc.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eed02.  v1:= temp;
  #L1eed04.  v2:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed08.  call temp:= `remaining`(v2) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eed0e.  v2:= temp;
  #L1eed10.  if v1 <= v2 then goto L1eede4;
  #L1eed14.  v1:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed18.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eed1e.  v1:= temp;
  #L1eed20.  if v1 <= 0 then goto L1eed32;
  #L1eed24.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eed2a.  v7:= temp;
  #L1eed2c.  v7:= v7 - v0 @kind int;
  #L1eed2e.  @monitorexit v6
  #L1eed30.  return v7;
  #L1eed32.  v1:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed36.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eed3c.  v1:= temp;
  #L1eed3e.  call temp:= `slice`(v7) @signature `Ljava/nio/ByteBuffer;.slice:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1eed44.  v2:= temp @kind object;
  #L1eed46.  call temp:= `limit`(v2, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eed4c.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eed52.  v3:= temp;
  #L1eed54.  v3:= v3 + v1 @kind int;
  #L1eed56.  call temp:= `position`(v7, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eed5c.  v1:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed60.  call temp:= `flip`(v1) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eed66.  v1:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed6a.  call temp:= `clear`(v1) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eed70.  call temp:= `remaining`(v2) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eed76.  v1:= temp;
  #L1eed78.  v3:= 0I;
  #L1eed7a.  if v1 == 0 then goto L1eed92;
  #L1eed7e.  v1:= v6.`com.google.crypto.tink.subtle.m.b` @type ^`com.google.crypto.tink.subtle.StreamSegmentEncrypter` @kind object;
  #L1eed82.  v4:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed86.  v5:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed8a.  call `encryptSegment`(v1, v4, v2, v3, v5) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;.encryptSegment:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;ZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1eed90.  goto L1eeda4;
  #L1eed92.  v1:= v6.`com.google.crypto.tink.subtle.m.b` @type ^`com.google.crypto.tink.subtle.StreamSegmentEncrypter` @kind object;
  #L1eed96.  v2:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed9a.  v4:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eed9e.  call `encryptSegment`(v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;.encryptSegment:(Ljava/nio/ByteBuffer;ZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1eeda4.  v1:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeda8.  call temp:= `flip`(v1) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eedae.  v1:= v6.`com.google.crypto.tink.subtle.m.a` @type ^`java.nio.channels.WritableByteChannel` @kind object;
  #L1eedb2.  v2:= v6.`com.google.crypto.tink.subtle.m.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eedb6.  call temp:= `write`(v1, v2) @signature `Ljava/nio/channels/WritableByteChannel;.write:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1eedbc.  v1:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eedc0.  call temp:= `clear`(v1) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eedc6.  v1:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eedca.  v2:= v6.`com.google.crypto.tink.subtle.m.e` @type ^`int`;
  #L1eedce.  call temp:= `limit`(v1, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eedd4.  goto L1eecfc;
  #L1eedd6.  v7:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1eedd8.  v0:= new `java.io.IOException`;
  #L1eeddc.  call `<init>`(v0, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1eede2.  throw v0;
  #L1eede4.  v1:= v6.`com.google.crypto.tink.subtle.m.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eede8.  call temp:= `put`(v1, v7) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1eedee.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eedf4.  v7:= temp;
  #L1eedf6.  v7:= v7 - v0 @kind int;
  #L1eedf8.  @monitorexit v6
  #L1eedfa.  return v7;
  #L1eedfc.  v7:= new `java.nio.channels.ClosedChannelException`;
  #L1eee00.  call `<init>`(v7) @signature `Ljava/nio/channels/ClosedChannelException;.<init>:()V` @kind direct;
  #L1eee06.  throw v7;
  #L1eee08.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1eee0a.  @monitorexit v6
  #L1eee0c.  throw v7;
  catch `java.lang.Throwable` @[L1eecce..L1eed2c] goto L1eee08;
  catch `java.lang.Throwable` @[L1eed32..L1eed5c] goto L1eee08;
  catch `java.security.GeneralSecurityException` @[L1eed5c..L1eeda4] goto L1eedd6;
  catch `java.lang.Throwable` @[L1eed5c..L1eeda4] goto L1eee08;
  catch `java.lang.Throwable` @[L1eeda4..L1eedf6] goto L1eee08;
  catch `java.lang.Throwable` @[L1eedfc..L1eee08] goto L1eee08;
}
