record `com.google.crypto.tink.subtle.X25519` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.X25519` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/X25519;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1f0460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f0466.  return @kind void;
}
procedure `byte`[] `computeSharedSecret`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/X25519;.computeSharedSecret:([B[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f0350.  v0:= length @variable v3;
  #L1f0352.  v1:= 32I;
  #L1f0356.  if v0 != v1 then goto L1f03aa;
  #L1f035a.  v0:= 11I;
  #L1f035e.  v0:= new `long`[v0];
  #L1f0362.  call temp:= `copyOf`(v3, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1f0368.  v3:= temp @kind object;
  #L1f036a.  v1:= 0I;
  #L1f036c.  v2:= v3[v1] @kind byte;
  #L1f0370.  v2:= v2 ^& 248;
  #L1f0374.  v2:= (`byte`) v2 @kind i2b;
  #L1f0376.  v3[v1]:= v2 @kind byte;
  #L1f037a.  v1:= 31I;
  #L1f037e.  v2:= v3[v1] @kind byte;
  #L1f0382.  v2:= v2 ^& 127;
  #L1f0386.  v2:= (`byte`) v2 @kind i2b;
  #L1f0388.  v3[v1]:= v2 @kind byte;
  #L1f038c.  v2:= v3[v1] @kind byte;
  #L1f0390.  v2:= v2 ^| 64;
  #L1f0394.  v2:= (`byte`) v2 @kind i2b;
  #L1f0396.  v3[v1]:= v2 @kind byte;
  #L1f039a.  call `b`(v0, v3, v4) @signature `Lcom/google/crypto/tink/subtle/e;.b:([J[B[B)V` @kind static;
  #L1f03a0.  call temp:= `a`(v0) @signature `Lcom/google/crypto/tink/subtle/h;.a:([J)[B` @kind static;
  #L1f03a6.  v3:= temp @kind object;
  #L1f03a8.  return v3 @kind object;
  #L1f03aa.  v3:= new `java.security.InvalidKeyException`;
  #L1f03ae.  v4:= "Private key must have 32 bytes." @kind object;
  #L1f03b2.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f03b8.  throw v3;
}
procedure `byte`[] `generatePrivateKey`() @signature `Lcom/google/crypto/tink/subtle/X25519;.generatePrivateKey:()[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f03cc.  v0:= 32I;
  #L1f03d0.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1f03d6.  v0:= temp @kind object;
  #L1f03d8.  v1:= 0I;
  #L1f03da.  v2:= v0[v1] @kind byte;
  #L1f03de.  v2:= v2 ^| 7;
  #L1f03e2.  v2:= (`byte`) v2 @kind i2b;
  #L1f03e4.  v0[v1]:= v2 @kind byte;
  #L1f03e8.  v1:= 31I;
  #L1f03ec.  v2:= v0[v1] @kind byte;
  #L1f03f0.  v2:= v2 ^& 63;
  #L1f03f4.  v2:= (`byte`) v2 @kind i2b;
  #L1f03f6.  v0[v1]:= v2 @kind byte;
  #L1f03fa.  v2:= v0[v1] @kind byte;
  #L1f03fe.  v2:= v2 ^| 128;
  #L1f0402.  v2:= (`byte`) v2 @kind i2b;
  #L1f0404.  v0[v1]:= v2 @kind byte;
  #L1f0408.  return v0 @kind object;
}
procedure `byte`[] `publicFromPrivate`(`byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/X25519;.publicFromPrivate:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f041c.  v0:= length @variable v3;
  #L1f041e.  v1:= 32I;
  #L1f0422.  if v0 != v1 then goto L1f043e;
  #L1f0426.  v0:= new `byte`[v1];
  #L1f042a.  v1:= 0I;
  #L1f042c.  v2:= 9I;
  #L1f0430.  v0[v1]:= v2 @kind byte;
  #L1f0434.  call temp:= `computeSharedSecret`(v3, v0) @signature `Lcom/google/crypto/tink/subtle/X25519;.computeSharedSecret:([B[B)[B` @kind static;
  #L1f043a.  v3:= temp @kind object;
  #L1f043c.  return v3 @kind object;
  #L1f043e.  v3:= new `java.security.InvalidKeyException`;
  #L1f0442.  v0:= "Private key must have 32 bytes." @kind object;
  #L1f0446.  call `<init>`(v3, v0) @signature `Ljava/security/InvalidKeyException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f044c.  throw v3;
}
