record `com.google.crypto.tink.subtle.l` @kind class @AccessFlag  extends `java.io.FilterInputStream` @kind class {
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.l.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.l.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.crypto.tink.subtle.l.d` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.e` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.f` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.l.g` @AccessFlag PRIVATE;
  `byte`[] `com.google.crypto.tink.subtle.l.h` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.i` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.l.j` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.k` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.l.l` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.l` v1 @kind this, `com.google.crypto.tink.subtle.i` v2 @kind object, `java.io.InputStream` v3 @kind object, `byte`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/l;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/io/InputStream;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ee8f4.  call `<init>`(v1, v3) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L1ee8fa.  call temp:= `newStreamSegmentDecrypter`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L1ee900.  v3:= temp @kind object;
  #L1ee902.  v1.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v3 @kind object;
  #L1ee906.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L1ee90c.  v3:= temp;
  #L1ee90e.  v1.`com.google.crypto.tink.subtle.l.c` @type ^`int` := v3;
  #L1ee912.  v3:= length @variable v4;
  #L1ee914.  call temp:= `copyOf`(v4, v3) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1ee91a.  v3:= temp @kind object;
  #L1ee91c.  v1.`com.google.crypto.tink.subtle.l.h` @type ^`byte`[] := v3 @kind object;
  #L1ee920.  call temp:= `getCiphertextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L1ee926.  v3:= temp;
  #L1ee928.  v1.`com.google.crypto.tink.subtle.l.k` @type ^`int` := v3;
  #L1ee92c.  v4:= v3 + 1;
  #L1ee930.  call temp:= `allocate`(v4) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ee936.  v4:= temp @kind object;
  #L1ee938.  v1.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` := v4 @kind object;
  #L1ee93c.  v0:= 0I;
  #L1ee93e.  call temp:= `limit`(v4, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee944.  call temp:= `getCiphertextOffset`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L1ee94a.  v4:= temp;
  #L1ee94c.  v3:= v3 - v4 @kind int;
  #L1ee94e.  v1.`com.google.crypto.tink.subtle.l.l` @type ^`int` := v3;
  #L1ee952.  call temp:= `getPlaintextSegmentSize`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L1ee958.  v2:= temp;
  #L1ee95a.  v2:= v2 + 16;
  #L1ee95e.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ee964.  v2:= temp @kind object;
  #L1ee966.  v1.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L1ee96a.  call temp:= `limit`(v2, v0) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee970.  v1.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` := v0 @kind boolean;
  #L1ee974.  v1.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` := v0 @kind boolean;
  #L1ee978.  v1.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` := v0 @kind boolean;
  #L1ee97c.  v1.`com.google.crypto.tink.subtle.l.i` @type ^`int` := v0;
  #L1ee980.  v1.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` := v0 @kind boolean;
  #L1ee984.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.l` v7 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ee9c8.  v0:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1ee9cc.  v1:= 1I;
  #L1ee9ce.  if v0 != 0 then goto L1eea4e;
  #L1ee9d2.  v0:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee9d6.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee9dc.  v0:= temp;
  #L1ee9de.  if v0 <= 0 then goto L1eea4e;
  #L1ee9e2.  v0:= v7.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L1ee9e6.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee9ea.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1ee9f0.  v2:= temp @kind object;
  #L1ee9f2.  v3:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee9f6.  call temp:= `position`(v3) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee9fc.  v3:= temp;
  #L1ee9fe.  v4:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea02.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eea08.  v4:= temp;
  #L1eea0a.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1eea10.  v0:= temp;
  #L1eea12.  if v0 <= 0 then goto L1eea2c;
  #L1eea16.  v1:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea1a.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eea20.  v2:= temp;
  #L1eea22.  v2:= v2 + v0 @kind int;
  #L1eea24.  call temp:= `position`(v1, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eea2a.  goto L1ee9c8;
  #L1eea2c.  v2:= -1I;
  #L1eea2e.  if v0 != v2 then goto L1eea38;
  #L1eea32.  v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` := v1 @kind boolean;
  #L1eea36.  goto L1ee9c8;
  #L1eea38.  if v0 == 0 then goto L1eea3e;
  #L1eea3c.  goto L1ee9c8;
  #L1eea3e.  v0:= new `java.io.IOException`;
  #L1eea42.  v1:= "Could not read bytes from the ciphertext stream" @kind object;
  #L1eea46.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eea4c.  throw v0;
  #L1eea4e.  v0:= 0I;
  #L1eea50.  v2:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1eea54.  if v2 != 0 then goto L1eea82;
  #L1eea58.  v0:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea5c.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eea62.  v2:= temp;
  #L1eea64.  v2:= v2 - v1 @kind int;
  #L1eea66.  call temp:= `get`(v0, v2) @signature `Ljava/nio/ByteBuffer;.get:(I)B` @kind virtual;
  #L1eea6c.  v0:= temp;
  #L1eea6e.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea72.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eea78.  v3:= temp;
  #L1eea7a.  v3:= v3 - v1 @kind int;
  #L1eea7c.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eea82.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea86.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eea8c.  v2:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea90.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eea96.  v2:= v7.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1eea9a.  v3:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eea9e.  v4:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L1eeaa2.  v5:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1eeaa6.  v6:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeaaa.  call `decryptSegment`(v2, v3, v4, v5, v6) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1eeab0.  v2:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L1eeab4.  v2:= v2 + v1 @kind int;
  #L1eeab6.  v7.`com.google.crypto.tink.subtle.l.i` @type ^`int` := v2;
  #L1eeaba.  v2:= v7.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeabe.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eeac4.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeac8.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eeace.  v2:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1eead2.  if v2 != 0 then goto L1eeafa;
  #L1eead6.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeada.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1eeae0.  v2:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeae4.  v3:= v7.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L1eeae8.  v3:= v3 + v1 @kind int;
  #L1eeaea.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eeaf0.  v1:= v7.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eeaf4.  call temp:= `put`(v1, v0) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1eeafa.  return @kind void;
  #L1eeafc.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1eeafe.  call `c`(v7) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L1eeb04.  v1:= new `java.io.IOException`;
  #L1eeb08.  v2:= new `java.lang.StringBuilder`;
  #L1eeb0c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1eeb12.  call temp:= `getMessage`(v0) @signature `Ljava/security/GeneralSecurityException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1eeb18.  v3:= temp @kind object;
  #L1eeb1a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb20.  v3:= "\n" @kind object;
  #L1eeb24.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb2a.  call temp:= `toString`(v7) @signature `Lcom/google/crypto/tink/subtle/l;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eeb30.  v3:= temp @kind object;
  #L1eeb32.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb38.  v3:= "\nsegmentNr:" @kind object;
  #L1eeb3c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb42.  v3:= v7.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L1eeb46.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb4c.  v3:= " endOfCiphertext:" @kind object;
  #L1eeb50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb56.  v3:= v7.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1eeb5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1eeb60.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1eeb66.  v2:= temp @kind object;
  #L1eeb68.  call `<init>`(v1, v2, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1eeb6e.  throw v1;
  catch `java.security.GeneralSecurityException` @[L1eea96..L1eeab0] goto L1eeafc;
}
procedure `void` `b`(`com.google.crypto.tink.subtle.l` v5 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1eeba8.  v0:= v5.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L1eebac.  if v0 != 0 then goto L1eec58;
  #L1eebb0.  v0:= v5.`com.google.crypto.tink.subtle.l.c` @type ^`int`;
  #L1eebb4.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1eebba.  v0:= temp @kind object;
  #L1eebbc.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eebc2.  v1:= temp;
  #L1eebc4.  if v1 <= 0 then goto L1eec2e;
  #L1eebc8.  v1:= v5.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L1eebcc.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1eebd2.  v2:= temp @kind object;
  #L1eebd4.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eebda.  v3:= temp;
  #L1eebdc.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1eebe2.  v4:= temp;
  #L1eebe4.  call temp:= `read`(v1, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1eebea.  v1:= temp;
  #L1eebec.  v2:= -1I;
  #L1eebee.  if v1 == v2 then goto L1eec18;
  #L1eebf2.  if v1 == 0 then goto L1eec08;
  #L1eebf6.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1eebfc.  v2:= temp;
  #L1eebfe.  v2:= v2 + v1 @kind int;
  #L1eec00.  call temp:= `position`(v0, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eec06.  goto L1eebbc;
  #L1eec08.  v0:= new `java.io.IOException`;
  #L1eec0c.  v1:= "Could not read bytes from the ciphertext stream" @kind object;
  #L1eec10.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eec16.  throw v0;
  #L1eec18.  call `c`(v5) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L1eec1e.  v0:= new `java.io.IOException`;
  #L1eec22.  v1:= "Ciphertext is too short" @kind object;
  #L1eec26.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eec2c.  throw v0;
  #L1eec2e.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1eec34.  v1:= v5.`com.google.crypto.tink.subtle.l.j` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1eec38.  v2:= v5.`com.google.crypto.tink.subtle.l.h` @type ^`byte`[] @kind object;
  #L1eec3c.  call `init`(v1, v0, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L1eec42.  v0:= 1I;
  #L1eec44.  v5.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` := v0 @kind boolean;
  #L1eec48.  return @kind void;
  #L1eec4a.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1eec4c.  v1:= new `java.io.IOException`;
  #L1eec50.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1eec56.  throw v1;
  #L1eec58.  call `c`(v5) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @kind direct;
  #L1eec5e.  v0:= new `java.io.IOException`;
  #L1eec62.  v1:= "Decryption failed." @kind object;
  #L1eec66.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eec6c.  throw v0;
  catch `java.security.GeneralSecurityException` @[L1eec34..L1eec42] goto L1eec4a;
}
procedure `void` `c`(`com.google.crypto.tink.subtle.l` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1eec90.  v0:= 1I;
  #L1eec92.  v2.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` := v0 @kind boolean;
  #L1eec96.  v0:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1eec9a.  v1:= 0I;
  #L1eec9c.  call temp:= `limit`(v0, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1eeca2.  return @kind void;
}
procedure `int` `available`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ee5c8.  @monitorenter v1
  #L1ee5ca.  v0:= v1.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee5ce.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee5d4.  v0:= temp;
  #L1ee5d6.  @monitorexit v1
  #L1ee5d8.  return v0;
  #L1ee5da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee5dc.  @monitorexit v1
  #L1ee5de.  throw v0;
  catch `java.lang.Throwable` @[L1ee5ca..L1ee5d6] goto L1ee5da;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ee998.  @monitorenter v1
  #L1ee99a.  call `close`(v1) @signature `Ljava/io/FilterInputStream;.close:()V` @kind super;
  #L1ee9a0.  @monitorexit v1
  #L1ee9a2.  return @kind void;
  #L1ee9a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee9a6.  @monitorexit v1
  #L1ee9a8.  throw v0;
  catch `java.lang.Throwable` @[L1ee99a..L1ee9a0] goto L1ee9a4;
}
procedure `void` `mark`(`com.google.crypto.tink.subtle.l` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/l;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1eeb90.  @monitorenter v0
  #L1eeb92.  @monitorexit v0
  #L1eeb94.  return @kind void;
}
procedure `boolean` `markSupported`(`com.google.crypto.tink.subtle.l` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ee5b4.  v0:= 0I;
  #L1ee5b6.  return v0;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v4 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ee5fc.  v0:= 1I;
  #L1ee5fe.  v1:= new `byte`[v0];
  #L1ee602.  v2:= 0I;
  #L1ee604.  call temp:= `read`(v4, v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L1ee60a.  v3:= temp;
  #L1ee60c.  if v3 != v0 then goto L1ee61a;
  #L1ee610.  v0:= v1[v2] @kind byte;
  #L1ee614.  v0:= v0 ^& 255;
  #L1ee618.  return v0;
  #L1ee61a.  v0:= -1I;
  #L1ee61c.  if v3 != v0 then goto L1ee622;
  #L1ee620.  return v3;
  #L1ee622.  v0:= new `java.io.IOException`;
  #L1ee626.  v1:= "Reading failed" @kind object;
  #L1ee62a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ee630.  throw v0;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/l;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ee644.  v0:= length @variable v3;
  #L1ee646.  v1:= 0I;
  #L1ee648.  call temp:= `read`(v2, v3, v1, v0) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L1ee64e.  v3:= temp;
  #L1ee650.  return v3;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.l` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ee664.  @monitorenter v6
  #L1ee666.  v0:= v6.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` @kind boolean;
  #L1ee66a.  if v0 != 0 then goto L1ee70e;
  #L1ee66e.  v0:= v6.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L1ee672.  v1:= 1I;
  #L1ee674.  if v0 != 0 then goto L1ee698;
  #L1ee678.  call `b`(v6) @signature `Lcom/google/crypto/tink/subtle/l;.b:()V` @kind direct;
  #L1ee67e.  v0:= v6.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee682.  call temp:= `clear`(v0) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ee688.  v0:= v6.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee68c.  v2:= v6.`com.google.crypto.tink.subtle.l.l` @type ^`int`;
  #L1ee690.  v2:= v2 + v1 @kind int;
  #L1ee692.  call temp:= `limit`(v0, v2) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ee698.  v0:= v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L1ee69c.  v2:= -1I;
  #L1ee69e.  if v0 == 0 then goto L1ee6a6;
  #L1ee6a2.  @monitorexit v6
  #L1ee6a4.  return v2;
  #L1ee6a6.  v0:= 0I;
  #L1ee6a8.  if v0 >= v9 then goto L1ee6fa;
  #L1ee6ac.  v3:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee6b0.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee6b6.  v3:= temp;
  #L1ee6b8.  if v3 != 0 then goto L1ee6d0;
  #L1ee6bc.  v3:= v6.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1ee6c0.  if v3 == 0 then goto L1ee6ca;
  #L1ee6c4.  v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` := v1 @kind boolean;
  #L1ee6c8.  goto L1ee6fa;
  #L1ee6ca.  call `a`(v6) @signature `Lcom/google/crypto/tink/subtle/l;.a:()V` @kind direct;
  #L1ee6d0.  v3:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee6d4.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ee6da.  v3:= temp;
  #L1ee6dc.  v4:= v9 - v0 @kind int;
  #L1ee6e0.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1ee6e6.  v3:= temp;
  #L1ee6e8.  v4:= v6.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee6ec.  v5:= v0 + v8 @kind int;
  #L1ee6f0.  call temp:= `get`(v4, v7, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ee6f6.  v0:= v0 + v3 @kind int;
  #L1ee6f8.  goto L1ee6a8;
  #L1ee6fa.  if v0 != 0 then goto L1ee70a;
  #L1ee6fe.  v7:= v6.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L1ee702.  if v7 == 0 then goto L1ee70a;
  #L1ee706.  @monitorexit v6
  #L1ee708.  return v2;
  #L1ee70a.  @monitorexit v6
  #L1ee70c.  return v0;
  #L1ee70e.  v7:= new `java.io.IOException`;
  #L1ee712.  v8:= "Decryption failed." @kind object;
  #L1ee716.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ee71c.  throw v7;
  #L1ee71e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee720.  @monitorexit v6
  #L1ee722.  throw v7;
  catch `java.lang.Throwable` @[L1ee666..L1ee69c] goto L1ee71e;
  catch `java.lang.Throwable` @[L1ee6ac..L1ee702] goto L1ee71e;
  catch `java.lang.Throwable` @[L1ee70e..L1ee71e] goto L1ee71e;
}
procedure `long` `skip`(`com.google.crypto.tink.subtle.l` v9 @kind this, `long` v10 ) @signature `Lcom/google/crypto/tink/subtle/l;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ee890.  v0:= v9.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L1ee894.  v0:= (`long`) v0 @kind i2l;
  #L1ee896.  v2:= 0L;
  #L1ee89a.  v4:= lcmp(v10, v2);
  #L1ee89e.  if v4 > 0 then goto L1ee8a4;
  #L1ee8a2.  return v2 @kind wide;
  #L1ee8a4.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ee8aa.  v0:= temp @kind wide;
  #L1ee8ac.  v1:= (`int`) v0 @kind l2i;
  #L1ee8ae.  v0:= new `byte`[v1];
  #L1ee8b2.  v4:= v10 @kind wide;
  #L1ee8b4.  v6:= lcmp(v4, v2);
  #L1ee8b8.  if v6 <= 0 then goto L1ee8de;
  #L1ee8bc.  v6:= 0I;
  #L1ee8be.  v7:= (`long`) v1 @kind i2l;
  #L1ee8c0.  call temp:= `min`(v7, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ee8c6.  v7:= temp @kind wide;
  #L1ee8c8.  v8:= (`int`) v7 @kind l2i;
  #L1ee8ca.  call temp:= `read`(v9, v0, v6, v8) @signature `Lcom/google/crypto/tink/subtle/l;.read:([BII)I` @kind virtual;
  #L1ee8d0.  v6:= temp;
  #L1ee8d2.  if v6 > 0 then goto L1ee8d8;
  #L1ee8d6.  goto L1ee8de;
  #L1ee8d8.  v6:= (`long`) v6 @kind i2l;
  #L1ee8da.  v4:= v4 - v6 @kind long;
  #L1ee8dc.  goto L1ee8b4;
  #L1ee8de.  v10:= v10 - v4 @kind long;
  #L1ee8e0.  return v10 @kind wide;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.l` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ee750.  @monitorenter v2
  #L1ee752.  v0:= new `java.lang.StringBuilder`;
  #L1ee756.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ee75c.  v1:= "StreamingAeadDecryptingStream" @kind object;
  #L1ee760.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee766.  v1:= "\nsegmentNr:" @kind object;
  #L1ee76a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee770.  v1:= v2.`com.google.crypto.tink.subtle.l.i` @type ^`int`;
  #L1ee774.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee77a.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L1ee77e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee784.  v1:= v2.`com.google.crypto.tink.subtle.l.k` @type ^`int`;
  #L1ee788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee78e.  v1:= "\nheaderRead:" @kind object;
  #L1ee792.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee798.  v1:= v2.`com.google.crypto.tink.subtle.l.d` @type ^`boolean` @kind boolean;
  #L1ee79c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7a2.  v1:= "\nendOfCiphertext:" @kind object;
  #L1ee7a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7ac.  v1:= v2.`com.google.crypto.tink.subtle.l.e` @type ^`boolean` @kind boolean;
  #L1ee7b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7b6.  v1:= "\nendOfPlaintext:" @kind object;
  #L1ee7ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7c0.  v1:= v2.`com.google.crypto.tink.subtle.l.f` @type ^`boolean` @kind boolean;
  #L1ee7c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7ca.  v1:= "\ndecryptionErrorOccured:" @kind object;
  #L1ee7ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7d4.  v1:= v2.`com.google.crypto.tink.subtle.l.g` @type ^`boolean` @kind boolean;
  #L1ee7d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7de.  v1:= "\nciphertextSgement" @kind object;
  #L1ee7e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7e8.  v1:= " position:" @kind object;
  #L1ee7ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee7f2.  v1:= v2.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee7f6.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee7fc.  v1:= temp;
  #L1ee7fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee804.  v1:= " limit:" @kind object;
  #L1ee808.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee80e.  v1:= v2.`com.google.crypto.tink.subtle.l.a` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee812.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ee818.  v1:= temp;
  #L1ee81a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee820.  v1:= "\nplaintextSegment" @kind object;
  #L1ee824.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee82a.  v1:= " position:" @kind object;
  #L1ee82e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee834.  v1:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee838.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ee83e.  v1:= temp;
  #L1ee840.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee846.  v1:= " limit:" @kind object;
  #L1ee84a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee850.  v1:= v2.`com.google.crypto.tink.subtle.l.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ee854.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ee85a.  v1:= temp;
  #L1ee85c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee862.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ee868.  v0:= temp @kind object;
  #L1ee86a.  @monitorexit v2
  #L1ee86c.  return v0 @kind object;
  #L1ee86e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee870.  @monitorexit v2
  #L1ee872.  throw v0;
  catch `java.lang.Throwable` @[L1ee752..L1ee86a] goto L1ee86e;
}
