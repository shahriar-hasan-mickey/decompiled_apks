record `com.google.crypto.tink.subtle.RewindableReadableByteChannel` @kind class @AccessFlag PUBLIC_FINAL extends `java.nio.channels.ReadableByteChannel` @kind interface {
  `java.nio.channels.ReadableByteChannel` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @AccessFlag FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @AccessFlag ;
  `boolean` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @AccessFlag ;
  `boolean` `com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.<init>:(Ljava/nio/channels/ReadableByteChannel;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ed460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ed466.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` := v1 @kind object;
  #L1ed46a.  v1:= 0I;
  #L1ed46c.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L1ed470.  v1:= 1I;
  #L1ed472.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v1 @kind boolean;
  #L1ed476.  v1:= 0I;
  #L1ed478.  v0.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v1 @kind boolean;
  #L1ed47c.  return @kind void;
}
procedure `void` `a`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v3 @kind this, `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ed558.  @monitorenter v3
  #L1ed55a.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed55e.  call temp:= `capacity`(v0) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L1ed564.  v0:= temp;
  #L1ed566.  if v0 >= v4 then goto L1ed5b4;
  #L1ed56a.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed56e.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ed574.  v0:= temp;
  #L1ed576.  v1:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed57a.  call temp:= `capacity`(v1) @signature `Ljava/nio/ByteBuffer;.capacity:()I` @kind virtual;
  #L1ed580.  v1:= temp;
  #L1ed582.  v1:= v1 * 2;
  #L1ed586.  call temp:= `max`(v1, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1ed58c.  v1:= temp;
  #L1ed58e.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ed594.  v1:= temp @kind object;
  #L1ed596.  v2:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed59a.  call temp:= `rewind`(v2) @signature `Ljava/nio/ByteBuffer;.rewind:()Ljava/nio/Buffer;` @kind virtual;
  #L1ed5a0.  v2:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed5a4.  call temp:= `put`(v1, v2) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ed5aa.  call temp:= `position`(v1, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed5b0.  v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L1ed5b4.  v0:= v3.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed5b8.  call temp:= `limit`(v0, v4) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed5be.  @monitorexit v3
  #L1ed5c0.  return @kind void;
  #L1ed5c2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed5c4.  @monitorexit v3
  #L1ed5c6.  throw v4;
  catch `java.lang.Throwable` @[L1ed55a..L1ed5be] goto L1ed5c2;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ed490.  @monitorenter v1
  #L1ed492.  v0:= 0I;
  #L1ed494.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v0 @kind boolean;
  #L1ed498.  v0:= 1I;
  #L1ed49a.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v0 @kind boolean;
  #L1ed49e.  v0:= v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed4a2.  call `close`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.close:()V` @kind interface;
  #L1ed4a8.  @monitorexit v1
  #L1ed4aa.  return @kind void;
  #L1ed4ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed4ae.  @monitorexit v1
  #L1ed4b0.  throw v0;
  catch `java.lang.Throwable` @[L1ed494..L1ed4a8] goto L1ed4ac;
}
procedure `void` `disableRewinding`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.disableRewinding:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ed4d0.  @monitorenter v1
  #L1ed4d2.  v0:= 0I;
  #L1ed4d4.  v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` := v0 @kind boolean;
  #L1ed4d8.  @monitorexit v1
  #L1ed4da.  return @kind void;
  #L1ed4dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed4de.  @monitorexit v1
  #L1ed4e0.  throw v0;
  catch `java.lang.Throwable` @[L1ed4d4..L1ed4d8] goto L1ed4dc;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ed248.  @monitorenter v1
  #L1ed24a.  v0:= v1.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed24e.  call temp:= `isOpen`(v0) @signature `Ljava/nio/channels/ReadableByteChannel;.isOpen:()Z` @kind interface;
  #L1ed254.  v0:= temp;
  #L1ed256.  @monitorexit v1
  #L1ed258.  return v0;
  #L1ed25a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed25c.  @monitorexit v1
  #L1ed25e.  throw v0;
  catch `java.lang.Throwable` @[L1ed24a..L1ed256] goto L1ed25a;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ed27c.  @monitorenter v6
  #L1ed27e.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` @kind boolean;
  #L1ed282.  if v0 == 0 then goto L1ed296;
  #L1ed286.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed28a.  call temp:= `read`(v0, v7) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ed290.  v7:= temp;
  #L1ed292.  @monitorexit v6
  #L1ed294.  return v7;
  #L1ed296.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ed29c.  v0:= temp;
  #L1ed29e.  if v0 != 0 then goto L1ed2a8;
  #L1ed2a2.  v7:= 0I;
  #L1ed2a4.  @monitorexit v6
  #L1ed2a6.  return v7;
  #L1ed2a8.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed2ac.  v2:= 1I;
  #L1ed2ae.  if v1 != 0 then goto L1ed302;
  #L1ed2b2.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L1ed2b6.  if v1 != 0 then goto L1ed2ce;
  #L1ed2ba.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L1ed2be.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed2c2.  call temp:= `read`(v0, v7) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ed2c8.  v7:= temp;
  #L1ed2ca.  @monitorexit v6
  #L1ed2cc.  return v7;
  #L1ed2ce.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ed2d4.  v0:= temp @kind object;
  #L1ed2d6.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L1ed2da.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed2de.  call temp:= `read`(v1, v0) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ed2e4.  v0:= temp;
  #L1ed2e6.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed2ea.  call temp:= `flip`(v1) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ed2f0.  if v0 <= 0 then goto L1ed2fe;
  #L1ed2f4.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed2f8.  call temp:= `put`(v7, v1) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ed2fe.  @monitorexit v6
  #L1ed300.  return v0;
  #L1ed302.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ed308.  v1:= temp;
  #L1ed30a.  v3:= 0I;
  #L1ed30c.  if v1 < v0 then goto L1ed368;
  #L1ed310.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed314.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ed31a.  v1:= temp;
  #L1ed31c.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed320.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ed326.  v5:= temp;
  #L1ed328.  v5:= v5 + v0 @kind int;
  #L1ed32a.  call temp:= `limit`(v4, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed330.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed334.  call temp:= `put`(v7, v4) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ed33a.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed33e.  call temp:= `limit`(v7, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed344.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L1ed348.  if v7 != 0 then goto L1ed364;
  #L1ed34c.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed350.  call temp:= `hasRemaining`(v7) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L1ed356.  v7:= temp;
  #L1ed358.  if v7 != 0 then goto L1ed364;
  #L1ed35c.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L1ed360.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L1ed364.  @monitorexit v6
  #L1ed366.  return v0;
  #L1ed368.  v1:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed36c.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ed372.  v1:= temp;
  #L1ed374.  v0:= v0 - v1 @kind int;
  #L1ed376.  v4:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed37a.  call temp:= `position`(v4) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ed380.  v4:= temp;
  #L1ed382.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed386.  call temp:= `limit`(v5) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ed38c.  v5:= temp;
  #L1ed38e.  v0:= v0 + v5 @kind int;
  #L1ed390.  call `a`(v6, v0) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.a:(I)V` @kind direct;
  #L1ed396.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed39a.  call temp:= `position`(v0, v5) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed3a0.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.a` @type ^`java.nio.channels.ReadableByteChannel` @kind object;
  #L1ed3a4.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3a8.  call temp:= `read`(v0, v5) @signature `Ljava/nio/channels/ReadableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ed3ae.  v0:= temp;
  #L1ed3b0.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3b4.  call temp:= `flip`(v5) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ed3ba.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3be.  call temp:= `position`(v5, v4) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed3c4.  v5:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3c8.  call temp:= `put`(v7, v5) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ed3ce.  if v1 != 0 then goto L1ed3dc;
  #L1ed3d2.  if v0 >= 0 then goto L1ed3dc;
  #L1ed3d6.  v7:= -1I;
  #L1ed3d8.  @monitorexit v6
  #L1ed3da.  return v7;
  #L1ed3dc.  v7:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3e0.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ed3e6.  v7:= temp;
  #L1ed3e8.  v7:= v7 - v4 @kind int;
  #L1ed3ea.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L1ed3ee.  if v0 != 0 then goto L1ed40a;
  #L1ed3f2.  v0:= v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed3f6.  call temp:= `hasRemaining`(v0) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L1ed3fc.  v0:= temp;
  #L1ed3fe.  if v0 != 0 then goto L1ed40a;
  #L1ed402.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` := v3 @kind object;
  #L1ed406.  v6.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.d` @type ^`boolean` := v2 @kind boolean;
  #L1ed40a.  @monitorexit v6
  #L1ed40c.  return v7;
  #L1ed40e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed410.  @monitorexit v6
  #L1ed412.  throw v7;
  catch `java.lang.Throwable` @[L1ed27e..L1ed292] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed296..L1ed29e] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed2a8..L1ed2ca] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed2ce..L1ed2fe] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed302..L1ed364] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed368..L1ed3ce] goto L1ed40e;
  catch `java.lang.Throwable` @[L1ed3dc..L1ed40a] goto L1ed40e;
}
procedure `void` `rewind`(`com.google.crypto.tink.subtle.RewindableReadableByteChannel` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/RewindableReadableByteChannel;.rewind:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ed500.  @monitorenter v2
  #L1ed502.  v0:= v2.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.c` @type ^`boolean` @kind boolean;
  #L1ed506.  if v0 == 0 then goto L1ed51e;
  #L1ed50a.  v0:= v2.`com.google.crypto.tink.subtle.RewindableReadableByteChannel.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ed50e.  if v0 == 0 then goto L1ed51a;
  #L1ed512.  v1:= 0I;
  #L1ed514.  call temp:= `position`(v0, v1) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ed51a.  @monitorexit v2
  #L1ed51c.  return @kind void;
  #L1ed51e.  v0:= new `java.io.IOException`;
  #L1ed522.  v1:= "Cannot rewind anymore." @kind object;
  #L1ed526.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed52c.  throw v0;
  #L1ed52e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ed530.  @monitorexit v2
  #L1ed532.  throw v0;
  catch `java.lang.Throwable` @[L1ed502..L1ed51a] goto L1ed52e;
  catch `java.lang.Throwable` @[L1ed51e..L1ed52e] goto L1ed52e;
}
