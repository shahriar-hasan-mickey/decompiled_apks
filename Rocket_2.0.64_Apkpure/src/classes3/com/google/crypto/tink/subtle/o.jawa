record `com.google.crypto.tink.subtle.o` @kind class @AccessFlag  extends `java.nio.channels.SeekableByteChannel` @kind interface {
  `java.nio.channels.SeekableByteChannel` `com.google.crypto.tink.subtle.o.a` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.b` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.c` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.o.d` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.crypto.tink.subtle.o.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.o.h` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `com.google.crypto.tink.subtle.o.i` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.crypto.tink.subtle.o.j` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.subtle.o.k` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.l` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.m` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.o.n` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.subtle.o.o` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.subtle.o.p` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.q` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.r` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.o.s` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.o` v8 @kind this, `com.google.crypto.tink.subtle.i` v9 @kind object, `java.nio.channels.SeekableByteChannel` v10 @kind object, `byte`[] v11 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.<init>:(Lcom/google/crypto/tink/subtle/i;Ljava/nio/channels/SeekableByteChannel;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ef970.  call `<init>`(v8) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ef976.  call temp:= `newStreamSegmentDecrypter`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @kind virtual;
  #L1ef97c.  v0:= temp @kind object;
  #L1ef97e.  v8.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` := v0 @kind object;
  #L1ef982.  v8.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` := v10 @kind object;
  #L1ef986.  call temp:= `getHeaderLength`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L1ef98c.  v0:= temp;
  #L1ef98e.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ef994.  v0:= temp @kind object;
  #L1ef996.  v8.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L1ef99a.  call temp:= `getCiphertextSegmentSize`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextSegmentSize:()I` @kind virtual;
  #L1ef9a0.  v0:= temp;
  #L1ef9a2.  v8.`com.google.crypto.tink.subtle.o.q` @type ^`int` := v0;
  #L1ef9a6.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ef9ac.  v1:= temp @kind object;
  #L1ef9ae.  v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L1ef9b2.  call temp:= `getPlaintextSegmentSize`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getPlaintextSegmentSize:()I` @kind virtual;
  #L1ef9b8.  v1:= temp;
  #L1ef9ba.  v8.`com.google.crypto.tink.subtle.o.p` @type ^`int` := v1;
  #L1ef9be.  v1:= v1 + 16;
  #L1ef9c2.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1ef9c8.  v1:= temp @kind object;
  #L1ef9ca.  v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` := v1 @kind object;
  #L1ef9ce.  v1:= 0L;
  #L1ef9d2.  v8.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v1 @kind wide;
  #L1ef9d6.  v1:= 0I;
  #L1ef9d8.  v8.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` := v1 @kind boolean;
  #L1ef9dc.  v2:= -1I;
  #L1ef9de.  v8.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v2;
  #L1ef9e2.  v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v1 @kind boolean;
  #L1ef9e6.  call temp:= `size`(v10) @signature `Ljava/nio/channels/SeekableByteChannel;.size:()J` @kind interface;
  #L1ef9ec.  v1:= temp @kind wide;
  #L1ef9ee.  v8.`com.google.crypto.tink.subtle.o.e` @type ^`long` := v1 @kind wide;
  #L1ef9f2.  v3:= length @variable v11;
  #L1ef9f4.  call temp:= `copyOf`(v11, v3) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1ef9fa.  v11:= temp @kind object;
  #L1ef9fc.  v8.`com.google.crypto.tink.subtle.o.h` @type ^`byte`[] := v11 @kind object;
  #L1efa00.  call temp:= `isOpen`(v10) @signature `Ljava/nio/channels/SeekableByteChannel;.isOpen:()Z` @kind interface;
  #L1efa06.  v10:= temp;
  #L1efa08.  v8.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` := v10 @kind boolean;
  #L1efa0c.  v10:= (`long`) v0 @kind i2l;
  #L1efa0e.  v10:= v1 / v10 @kind long;
  #L1efa12.  v11:= (`int`) v10 @kind l2i;
  #L1efa14.  v3:= (`long`) v0 @kind i2l;
  #L1efa16.  v3:= v1 %% v3 @kind long;
  #L1efa1a.  v10:= (`int`) v3 @kind l2i;
  #L1efa1c.  call temp:= `getCiphertextOverhead`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOverhead:()I` @kind virtual;
  #L1efa22.  v3:= temp;
  #L1efa24.  if v10 <= 0 then goto L1efa4a;
  #L1efa28.  v11:= v11 + 1;
  #L1efa2c.  v8.`com.google.crypto.tink.subtle.o.f` @type ^`int` := v11;
  #L1efa30.  if v10 < v3 then goto L1efa3a;
  #L1efa34.  v8.`com.google.crypto.tink.subtle.o.g` @type ^`int` := v10;
  #L1efa38.  goto L1efa52;
  #L1efa3a.  v9:= new `java.io.IOException`;
  #L1efa3e.  v10:= "Invalid ciphertext size" @kind object;
  #L1efa42.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efa48.  throw v9;
  #L1efa4a.  v8.`com.google.crypto.tink.subtle.o.f` @type ^`int` := v11;
  #L1efa4e.  v8.`com.google.crypto.tink.subtle.o.g` @type ^`int` := v0;
  #L1efa52.  call temp:= `getCiphertextOffset`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getCiphertextOffset:()I` @kind virtual;
  #L1efa58.  v10:= temp;
  #L1efa5a.  v8.`com.google.crypto.tink.subtle.o.r` @type ^`int` := v10;
  #L1efa5e.  call temp:= `getHeaderLength`(v9) @signature `Lcom/google/crypto/tink/subtle/i;.getHeaderLength:()I` @kind virtual;
  #L1efa64.  v9:= temp;
  #L1efa66.  v9:= v10 - v9 @kind int;
  #L1efa6a.  v8.`com.google.crypto.tink.subtle.o.s` @type ^`int` := v9;
  #L1efa6e.  if v9 < 0 then goto L1efaa2;
  #L1efa72.  v9:= v8.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L1efa76.  v4:= (`long`) v9 @kind i2l;
  #L1efa78.  v6:= (`long`) v3 @kind i2l;
  #L1efa7a.  v4:= v4 * v6 @kind long;
  #L1efa7e.  v9:= (`long`) v10 @kind i2l;
  #L1efa80.  v4:= v4 + v9 @kind long;
  #L1efa82.  v9:= lcmp(v4, v1);
  #L1efa86.  if v9 > 0 then goto L1efa92;
  #L1efa8a.  v1:= v1 - v4 @kind long;
  #L1efa8c.  v8.`com.google.crypto.tink.subtle.o.k` @type ^`long` := v1 @kind wide;
  #L1efa90.  return @kind void;
  #L1efa92.  v9:= new `java.io.IOException`;
  #L1efa96.  v10:= "Ciphertext is too short" @kind object;
  #L1efa9a.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efaa0.  throw v9;
  #L1efaa2.  v9:= new `java.io.IOException`;
  #L1efaa6.  v10:= "Invalid ciphertext offset or header length" @kind object;
  #L1efaaa.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efab0.  throw v9;
}
procedure `int` `a`(`com.google.crypto.tink.subtle.o` v2 @kind this, `long` v3 ) @signature `Lcom/google/crypto/tink/subtle/o;.a:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ef528.  v0:= v2.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L1ef52c.  v0:= (`long`) v0 @kind i2l;
  #L1ef52e.  v3:= v3 + v0 @kind long;
  #L1ef530.  v0:= v2.`com.google.crypto.tink.subtle.o.p` @type ^`int`;
  #L1ef534.  v0:= (`long`) v0 @kind i2l;
  #L1ef536.  v3:= v3 / v0 @kind long;
  #L1ef538.  v4:= (`int`) v3 @kind l2i;
  #L1ef53a.  return v4;
}
procedure `boolean` `b`(`com.google.crypto.tink.subtle.o` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.b:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ef330.  v0:= v3.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L1ef334.  v1:= 1I;
  #L1ef336.  if v0 == 0 then goto L1ef35a;
  #L1ef33a.  v0:= v3.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L1ef33e.  v2:= v3.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L1ef342.  v2:= v2 - v1 @kind int;
  #L1ef344.  if v0 != v2 then goto L1ef35a;
  #L1ef348.  v0:= v3.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef34c.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef352.  v0:= temp;
  #L1ef354.  if v0 != 0 then goto L1ef35a;
  #L1ef358.  goto L1ef35c;
  #L1ef35a.  v1:= 0I;
  #L1ef35c.  return v1;
}
procedure `boolean` `c`(`com.google.crypto.tink.subtle.o` v8 @kind this, `int` v9 ) @signature `Lcom/google/crypto/tink/subtle/o;.c:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ef370.  if v9 < 0 then goto L1ef462;
  #L1ef374.  v0:= v8.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L1ef378.  if v9 >= v0 then goto L1ef462;
  #L1ef37c.  v1:= 1I;
  #L1ef37e.  v0:= v0 - v1 @kind int;
  #L1ef380.  v2:= 0I;
  #L1ef382.  if v9 != v0 then goto L1ef38a;
  #L1ef386.  v0:= 1I;
  #L1ef388.  goto L1ef38c;
  #L1ef38a.  v0:= 0I;
  #L1ef38c.  v3:= v8.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L1ef390.  if v9 != v3 then goto L1ef39e;
  #L1ef394.  v3:= v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L1ef398.  if v3 == 0 then goto L1ef3e4;
  #L1ef39c.  return v1;
  #L1ef39e.  v3:= (`long`) v9 @kind i2l;
  #L1ef3a0.  v5:= v8.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L1ef3a4.  v6:= (`long`) v5 @kind i2l;
  #L1ef3a6.  v3:= v3 * v6 @kind long;
  #L1ef3aa.  if v0 == 0 then goto L1ef3b2;
  #L1ef3ae.  v5:= v8.`com.google.crypto.tink.subtle.o.g` @type ^`int`;
  #L1ef3b2.  if v9 != 0 then goto L1ef3be;
  #L1ef3b6.  v3:= v8.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L1ef3ba.  v5:= v5 - v3 @kind int;
  #L1ef3bc.  v3:= (`long`) v3 @kind i2l;
  #L1ef3be.  v6:= v8.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1ef3c2.  call temp:= `position`(v6, v3) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1ef3c8.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef3cc.  call temp:= `clear`(v3) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ef3d2.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef3d6.  call temp:= `limit`(v3, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ef3dc.  v8.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v9;
  #L1ef3e0.  v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v2 @kind boolean;
  #L1ef3e4.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef3e8.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef3ee.  v3:= temp;
  #L1ef3f0.  if v3 <= 0 then goto L1ef402;
  #L1ef3f4.  v3:= v8.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1ef3f8.  v4:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef3fc.  call temp:= `read`(v3, v4) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ef402.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef406.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef40c.  v3:= temp;
  #L1ef40e.  if v3 <= 0 then goto L1ef414;
  #L1ef412.  return v2;
  #L1ef414.  v2:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef418.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ef41e.  v2:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef422.  call temp:= `clear`(v2) @signature `Ljava/nio/ByteBuffer;.clear:()Ljava/nio/Buffer;` @kind virtual;
  #L1ef428.  v2:= v8.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1ef42c.  v3:= v8.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef430.  v4:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef434.  call `decryptSegment`(v2, v3, v9, v0, v4) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.decryptSegment:(Ljava/nio/ByteBuffer;IZLjava/nio/ByteBuffer;)V` @kind interface;
  #L1ef43a.  v9:= v8.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef43e.  call temp:= `flip`(v9) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ef444.  v8.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` := v1 @kind boolean;
  #L1ef448.  return v1;
  #L1ef44a.  v9:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1ef44c.  v0:= -1I;
  #L1ef44e.  v8.`com.google.crypto.tink.subtle.o.n` @type ^`int` := v0;
  #L1ef452.  v0:= new `java.io.IOException`;
  #L1ef456.  v1:= "Failed to decrypt" @kind object;
  #L1ef45a.  call `<init>`(v0, v1, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1ef460.  throw v0;
  #L1ef462.  v9:= new `java.io.IOException`;
  #L1ef466.  v0:= "Invalid position" @kind object;
  #L1ef46a.  call `<init>`(v9, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ef470.  throw v9;
  catch `java.security.GeneralSecurityException` @[L1ef428..L1ef43a] goto L1ef44a;
}
procedure `boolean` `d`(`com.google.crypto.tink.subtle.o` v3 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.d:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1ef494.  v0:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1ef498.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef49c.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef4a2.  v1:= temp;
  #L1ef4a4.  v2:= v3.`com.google.crypto.tink.subtle.o.s` @type ^`int`;
  #L1ef4a8.  v1:= v1 + v2 @kind int;
  #L1ef4aa.  v1:= (`long`) v1 @kind i2l;
  #L1ef4ac.  call temp:= `position`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @kind interface;
  #L1ef4b2.  v0:= v3.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1ef4b6.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef4ba.  call temp:= `read`(v0, v1) @signature `Ljava/nio/channels/SeekableByteChannel;.read:(Ljava/nio/ByteBuffer;)I` @kind interface;
  #L1ef4c0.  v0:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef4c4.  call temp:= `remaining`(v0) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef4ca.  v0:= temp;
  #L1ef4cc.  if v0 <= 0 then goto L1ef4d4;
  #L1ef4d0.  v0:= 0I;
  #L1ef4d2.  return v0;
  #L1ef4d4.  v0:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef4d8.  call temp:= `flip`(v0) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1ef4de.  v0:= v3.`com.google.crypto.tink.subtle.o.i` @type ^`com.google.crypto.tink.subtle.StreamSegmentDecrypter` @kind object;
  #L1ef4e2.  v1:= v3.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef4e6.  v2:= v3.`com.google.crypto.tink.subtle.o.h` @type ^`byte`[] @kind object;
  #L1ef4ea.  call `init`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;.init:(Ljava/nio/ByteBuffer;[B)V` @kind interface;
  #L1ef4f0.  v0:= 1I;
  #L1ef4f2.  v3.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` := v0 @kind boolean;
  #L1ef4f6.  return v0;
  #L1ef4f8.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L1ef4fa.  v1:= new `java.io.IOException`;
  #L1ef4fe.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1ef504.  throw v1;
  catch `java.security.GeneralSecurityException` @[L1ef4de..L1ef4f6] goto L1ef4f8;
}
procedure `void` `close`(`com.google.crypto.tink.subtle.o` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1efac4.  @monitorenter v1
  #L1efac6.  v0:= v1.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1efaca.  call `close`(v0) @signature `Ljava/nio/channels/SeekableByteChannel;.close:()V` @kind interface;
  #L1efad0.  v0:= 0I;
  #L1efad2.  v1.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` := v0 @kind boolean;
  #L1efad6.  @monitorexit v1
  #L1efad8.  return @kind void;
  #L1efada.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1efadc.  @monitorexit v1
  #L1efade.  throw v0;
  catch `java.lang.Throwable` @[L1efac6..L1efad6] goto L1efada;
}
procedure `boolean` `isOpen`(`com.google.crypto.tink.subtle.o` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ef304.  @monitorenter v1
  #L1ef306.  v0:= v1.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` @kind boolean;
  #L1ef30a.  @monitorexit v1
  #L1ef30c.  return v0;
  #L1ef30e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef310.  @monitorexit v1
  #L1ef312.  throw v0;
  catch `java.lang.Throwable` @[L1ef306..L1ef30a] goto L1ef30e;
}
procedure `long` `position`(`com.google.crypto.tink.subtle.o` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.position:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ef92c.  @monitorenter v2
  #L1ef92e.  v0:= v2.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef932.  @monitorexit v2
  #L1ef934.  return v0 @kind wide;
  #L1ef936.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef938.  @monitorexit v2
  #L1ef93a.  throw v0;
  catch `java.lang.Throwable` @[L1ef92e..L1ef932] goto L1ef936;
}
procedure `java.nio.channels.SeekableByteChannel` `position`(`com.google.crypto.tink.subtle.o` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/subtle/o;.position:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L1ef8e4.  @monitorenter v0
  #L1ef8e6.  v0.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v1 @kind wide;
  #L1ef8ea.  @monitorexit v0
  #L1ef8ec.  return v0 @kind object;
  #L1ef8ee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef8f0.  @monitorexit v0
  #L1ef8f2.  throw v1;
  catch `java.lang.Throwable` @[L1ef8e6..L1ef8ea] goto L1ef8ee;
}
procedure `int` `read`(`com.google.crypto.tink.subtle.o` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ef54c.  @monitorenter v6
  #L1ef54e.  v0:= v6.`com.google.crypto.tink.subtle.o.o` @type ^`boolean` @kind boolean;
  #L1ef552.  if v0 == 0 then goto L1ef680;
  #L1ef556.  v0:= v6.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` @kind boolean;
  #L1ef55a.  if v0 != 0 then goto L1ef570;
  #L1ef55e.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/subtle/o;.d:()Z` @kind direct;
  #L1ef564.  v0:= temp;
  #L1ef566.  if v0 != 0 then goto L1ef570;
  #L1ef56a.  v7:= 0I;
  #L1ef56c.  @monitorexit v6
  #L1ef56e.  return v7;
  #L1ef570.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef576.  v0:= temp;
  #L1ef578.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef57e.  v1:= temp;
  #L1ef580.  if v1 <= 0 then goto L1ef65c;
  #L1ef584.  v1:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef588.  v3:= v6.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L1ef58c.  v5:= lcmp(v1, v3);
  #L1ef590.  if v5 >= 0 then goto L1ef65c;
  #L1ef594.  call temp:= `a`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/o;.a:(J)I` @kind direct;
  #L1ef59a.  v1:= temp;
  #L1ef59c.  if v1 != 0 then goto L1ef5a8;
  #L1ef5a0.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef5a4.  v3:= (`int`) v2 @kind l2i;
  #L1ef5a6.  goto L1ef5be;
  #L1ef5a8.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef5ac.  v4:= v6.`com.google.crypto.tink.subtle.o.r` @type ^`int`;
  #L1ef5b0.  v4:= (`long`) v4 @kind i2l;
  #L1ef5b2.  v2:= v2 + v4 @kind long;
  #L1ef5b4.  v4:= v6.`com.google.crypto.tink.subtle.o.p` @type ^`int`;
  #L1ef5b8.  v4:= (`long`) v4 @kind i2l;
  #L1ef5ba.  v2:= v2 %% v4 @kind long;
  #L1ef5bc.  goto L1ef5a4;
  #L1ef5be.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/o;.c:(I)Z` @kind direct;
  #L1ef5c4.  v1:= temp;
  #L1ef5c6.  if v1 == 0 then goto L1ef65c;
  #L1ef5ca.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef5ce.  call temp:= `position`(v1, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ef5d4.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef5d8.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef5de.  v1:= temp;
  #L1ef5e0.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef5e6.  v2:= temp;
  #L1ef5e8.  if v1 > v2 then goto L1ef610;
  #L1ef5ec.  v1:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef5f0.  v3:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef5f4.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef5fa.  v3:= temp;
  #L1ef5fc.  v3:= (`long`) v3 @kind i2l;
  #L1ef5fe.  v1:= v1 + v3 @kind long;
  #L1ef600.  v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v1 @kind wide;
  #L1ef604.  v1:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef608.  call temp:= `put`(v7, v1) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ef60e.  goto L1ef578;
  #L1ef610.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1ef616.  v1:= temp;
  #L1ef618.  v2:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef61c.  call temp:= `duplicate`(v2) @signature `Ljava/nio/ByteBuffer;.duplicate:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ef622.  v2:= temp @kind object;
  #L1ef624.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef62a.  v3:= temp;
  #L1ef62c.  v3:= v3 + v1 @kind int;
  #L1ef62e.  call temp:= `limit`(v2, v3) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ef634.  call temp:= `put`(v7, v2) @signature `Ljava/nio/ByteBuffer;.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1ef63a.  v2:= v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef63e.  v4:= (`long`) v1 @kind i2l;
  #L1ef640.  v2:= v2 + v4 @kind long;
  #L1ef642.  v6.`com.google.crypto.tink.subtle.o.j` @type ^`long` := v2 @kind wide;
  #L1ef646.  v2:= v6.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef64a.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef650.  v3:= temp;
  #L1ef652.  v3:= v3 + v1 @kind int;
  #L1ef654.  call temp:= `position`(v2, v3) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1ef65a.  goto L1ef578;
  #L1ef65c.  call temp:= `position`(v7) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef662.  v7:= temp;
  #L1ef664.  v7:= v7 - v0 @kind int;
  #L1ef666.  if v7 != 0 then goto L1ef67c;
  #L1ef66a.  call temp:= `b`(v6) @signature `Lcom/google/crypto/tink/subtle/o;.b:()Z` @kind direct;
  #L1ef670.  v0:= temp;
  #L1ef672.  if v0 == 0 then goto L1ef67c;
  #L1ef676.  v7:= -1I;
  #L1ef678.  @monitorexit v6
  #L1ef67a.  return v7;
  #L1ef67c.  @monitorexit v6
  #L1ef67e.  return v7;
  #L1ef680.  v7:= new `java.nio.channels.ClosedChannelException`;
  #L1ef684.  call `<init>`(v7) @signature `Ljava/nio/channels/ClosedChannelException;.<init>:()V` @kind direct;
  #L1ef68a.  throw v7;
  #L1ef68c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef68e.  @monitorexit v6
  #L1ef690.  throw v7;
  catch `java.lang.Throwable` @[L1ef54e..L1ef566] goto L1ef68c;
  catch `java.lang.Throwable` @[L1ef570..L1ef672] goto L1ef68c;
  catch `java.lang.Throwable` @[L1ef680..L1ef68c] goto L1ef68c;
}
procedure `long` `size`(`com.google.crypto.tink.subtle.o` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ef958.  v0:= v2.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L1ef95c.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`com.google.crypto.tink.subtle.o` v4 @kind this) @signature `Lcom/google/crypto/tink/subtle/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ef6dc.  @monitorenter v4
  #L1ef6de.  v0:= new `java.lang.StringBuilder`;
  #L1ef6e2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ef6e8.  v1:= new `java.lang.StringBuilder`;
  #L1ef6ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ef6f2.  v2:= "position:" @kind object;
  #L1ef6f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef6fc.  v2:= v4.`com.google.crypto.tink.subtle.o.a` @type ^`java.nio.channels.SeekableByteChannel` @kind object;
  #L1ef700.  call temp:= `position`(v2) @signature `Ljava/nio/channels/SeekableByteChannel;.position:()J` @kind interface;
  #L1ef706.  v2:= temp @kind wide;
  #L1ef708.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef70e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ef714.  v1:= temp @kind object;
  #L1ef716.  goto L1ef71c;
  #L1ef718.  v1:= "position: n/a" @kind object;
  #L1ef71c.  v2:= "StreamingAeadSeekableDecryptingChannel" @kind object;
  #L1ef720.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef726.  v2:= "\nciphertextChannel" @kind object;
  #L1ef72a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef730.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef736.  v1:= "\nciphertextChannelSize:" @kind object;
  #L1ef73a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef740.  v1:= v4.`com.google.crypto.tink.subtle.o.e` @type ^`long` @kind wide;
  #L1ef744.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef74a.  v1:= "\nplaintextSize:" @kind object;
  #L1ef74e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef754.  v1:= v4.`com.google.crypto.tink.subtle.o.k` @type ^`long` @kind wide;
  #L1ef758.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef75e.  v1:= "\nciphertextSegmentSize:" @kind object;
  #L1ef762.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef768.  v1:= v4.`com.google.crypto.tink.subtle.o.q` @type ^`int`;
  #L1ef76c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef772.  v1:= "\nnumberOfSegments:" @kind object;
  #L1ef776.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef77c.  v1:= v4.`com.google.crypto.tink.subtle.o.f` @type ^`int`;
  #L1ef780.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef786.  v1:= "\nheaderRead:" @kind object;
  #L1ef78a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef790.  v1:= v4.`com.google.crypto.tink.subtle.o.l` @type ^`boolean` @kind boolean;
  #L1ef794.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef79a.  v1:= "\nplaintextPosition:" @kind object;
  #L1ef79e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7a4.  v1:= v4.`com.google.crypto.tink.subtle.o.j` @type ^`long` @kind wide;
  #L1ef7a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7ae.  v1:= "\nHeader" @kind object;
  #L1ef7b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7b8.  v1:= " position:" @kind object;
  #L1ef7bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7c2.  v1:= v4.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef7c6.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef7cc.  v1:= temp;
  #L1ef7ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7d4.  v1:= " limit:" @kind object;
  #L1ef7d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7de.  v1:= v4.`com.google.crypto.tink.subtle.o.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef7e2.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef7e8.  v1:= temp;
  #L1ef7ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7f0.  v1:= "\ncurrentSegmentNr:" @kind object;
  #L1ef7f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef7fa.  v1:= v4.`com.google.crypto.tink.subtle.o.n` @type ^`int`;
  #L1ef7fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef804.  v1:= "\nciphertextSgement" @kind object;
  #L1ef808.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef80e.  v1:= " position:" @kind object;
  #L1ef812.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef818.  v1:= v4.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef81c.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef822.  v1:= temp;
  #L1ef824.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef82a.  v1:= " limit:" @kind object;
  #L1ef82e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef834.  v1:= v4.`com.google.crypto.tink.subtle.o.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef838.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ef83e.  v1:= temp;
  #L1ef840.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef846.  v1:= "\nisCurrentSegmentDecrypted:" @kind object;
  #L1ef84a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef850.  v1:= v4.`com.google.crypto.tink.subtle.o.m` @type ^`boolean` @kind boolean;
  #L1ef854.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef85a.  v1:= "\nplaintextSegment" @kind object;
  #L1ef85e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef864.  v1:= " position:" @kind object;
  #L1ef868.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef86e.  v1:= v4.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef872.  call temp:= `position`(v1) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1ef878.  v1:= temp;
  #L1ef87a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef880.  v1:= " limit:" @kind object;
  #L1ef884.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef88a.  v1:= v4.`com.google.crypto.tink.subtle.o.c` @type ^`java.nio.ByteBuffer` @kind object;
  #L1ef88e.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1ef894.  v1:= temp;
  #L1ef896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ef89c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ef8a2.  v0:= temp @kind object;
  #L1ef8a4.  @monitorexit v4
  #L1ef8a6.  return v0 @kind object;
  #L1ef8a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ef8aa.  @monitorexit v4
  #L1ef8ac.  throw v0;
  catch `java.lang.Throwable` @[L1ef6de..L1ef6e8] goto L1ef8a8;
  catch `java.io.IOException` @[L1ef6e8..L1ef716] goto L1ef718;
  catch `java.lang.Throwable` @[L1ef6e8..L1ef716] goto L1ef8a8;
  catch `java.lang.Throwable` @[L1ef718..L1ef8a4] goto L1ef8a8;
}
procedure `java.nio.channels.SeekableByteChannel` `truncate`(`com.google.crypto.tink.subtle.o` v0 @kind this, `long` v1 ) @signature `Lcom/google/crypto/tink/subtle/o;.truncate:(J)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC {
    temp;

  #L1ef910.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L1ef914.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L1ef91a.  throw v1;
}
procedure `int` `write`(`com.google.crypto.tink.subtle.o` v0 @kind this, `java.nio.ByteBuffer` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/o;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;

  #L1ef6c0.  v1:= new `java.nio.channels.NonWritableChannelException`;
  #L1ef6c4.  call `<init>`(v1) @signature `Ljava/nio/channels/NonWritableChannelException;.<init>:()V` @kind direct;
  #L1ef6ca.  throw v1;
}
