record `com.google.crypto.tink.subtle.h` @kind class @AccessFlag FINAL {
}
global `int`[] `@@com.google.crypto.tink.subtle.h.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.crypto.tink.subtle.h.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.crypto.tink.subtle.h.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@com.google.crypto.tink.subtle.h.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ea96c.  v0:= 10I;
  #L1ea970.  v1:= new `int`[v0];
  #L1ea974.  goto L1ea9ac;
  #L1ea97a.  `@@com.google.crypto.tink.subtle.h.a` @type ^`int`[] := v1 @kind object;
  #L1ea97e.  v0:= new `int`[v0];
  #L1ea982.  goto L1ea9dc;
  #L1ea988.  `@@com.google.crypto.tink.subtle.h.b` @type ^`int`[] := v0 @kind object;
  #L1ea98c.  v0:= 2I;
  #L1ea98e.  v1:= new `int`[v0];
  #L1ea992.  goto L1eaa0c;
  #L1ea998.  `@@com.google.crypto.tink.subtle.h.c` @type ^`int`[] := v1 @kind object;
  #L1ea99c.  v0:= new `int`[v0];
  #L1ea9a0.  goto L1eaa1c;
  #L1ea9a6.  `@@com.google.crypto.tink.subtle.h.d` @type ^`int`[] := v0 @kind object;
  #L1ea9aa.  return @kind void;
  #L1ea9ac.  v1:= (0I, 3I, 6I, 9I, 12I, 16I, 19I, 22I, 25I, 28I) @kind object;
  #L1ea9db.  goto L1ea97a;
  #L1ea9dc.  v0:= (0I, 2I, 3I, 5I, 6I, 0I, 1I, 3I, 4I, 6I) @kind object;
  #L1eaa0b.  goto L1ea988;
  #L1eaa0c.  v1:= (67108863I, 33554431I) @kind object;
  #L1eaa1b.  goto L1ea998;
  #L1eaa1c.  v0:= (26I, 25I) @kind object;
  #L1eaa2b.  goto L1ea9a6;
}
procedure `byte`[] `a`(`long`[] v14 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.a:([J)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1ea5c4.  v0:= 10I;
  #L1ea5c8.  call temp:= `copyOf`(v14, v0) @signature `Ljava/util/Arrays;.copyOf:([JI)[J` @kind static;
  #L1ea5ce.  v14:= temp @kind object;
  #L1ea5d0.  v1:= 0I;
  #L1ea5d2.  v2:= 0I;
  #L1ea5d4.  v3:= 25I;
  #L1ea5d8.  v4:= 31I;
  #L1ea5dc.  v5:= 2I;
  #L1ea5de.  v6:= 9I;
  #L1ea5e2.  if v2 >= v5 then goto L1ea66c;
  #L1ea5e6.  v5:= 0I;
  #L1ea5e8.  if v5 >= v6 then goto L1ea630;
  #L1ea5ec.  v7:= v14[v5] @kind wide;
  #L1ea5f0.  v9:= v14[v5] @kind wide;
  #L1ea5f4.  v9:= v9 ^> v4 @kind long;
  #L1ea5f6.  v7:= v7 ^& v9 @kind long;
  #L1ea5f8.  v9:= `@@com.google.crypto.tink.subtle.h.d` @type ^`int`[] @kind object;
  #L1ea5fc.  v10:= v5 ^& 1;
  #L1ea600.  v11:= v9[v10];
  #L1ea604.  v7:= v7 ^> v11 @kind long;
  #L1ea606.  v8:= (`int`) v7 @kind l2i;
  #L1ea608.  v7:= -v8 @kind int;
  #L1ea60a.  v11:= v14[v5] @kind wide;
  #L1ea60e.  v8:= v9[v10];
  #L1ea612.  v8:= v7 ^< v8 @kind int;
  #L1ea616.  v8:= (`long`) v8 @kind i2l;
  #L1ea618.  v11:= v11 + v8 @kind long;
  #L1ea61a.  v14[v5]:= v11 @kind wide;
  #L1ea61e.  v5:= v5 + 1;
  #L1ea622.  v8:= v14[v5] @kind wide;
  #L1ea626.  v10:= (`long`) v7 @kind i2l;
  #L1ea628.  v8:= v8 - v10 @kind long;
  #L1ea62a.  v14[v5]:= v8 @kind wide;
  #L1ea62e.  goto L1ea5e8;
  #L1ea630.  v7:= v14[v6] @kind wide;
  #L1ea634.  v9:= v14[v6] @kind wide;
  #L1ea638.  v4:= v9 ^> v4 @kind long;
  #L1ea63c.  v4:= v4 ^& v7 @kind long;
  #L1ea63e.  v3:= v4 ^> v3 @kind long;
  #L1ea642.  v4:= (`int`) v3 @kind l2i;
  #L1ea644.  v3:= -v4 @kind int;
  #L1ea646.  v4:= v14[v6] @kind wide;
  #L1ea64a.  v7:= v3 ^< 25;
  #L1ea64e.  v7:= (`long`) v7 @kind i2l;
  #L1ea650.  v4:= v4 + v7 @kind long;
  #L1ea652.  v14[v6]:= v4 @kind wide;
  #L1ea656.  v4:= v14[v1] @kind wide;
  #L1ea65a.  v3:= v3 * 19;
  #L1ea65e.  v6:= (`long`) v3 @kind i2l;
  #L1ea660.  v4:= v4 - v6 @kind long;
  #L1ea662.  v14[v1]:= v4 @kind wide;
  #L1ea666.  v2:= v2 + 1;
  #L1ea66a.  goto L1ea5d4;
  #L1ea66c.  v7:= v14[v1] @kind wide;
  #L1ea670.  v9:= v14[v1] @kind wide;
  #L1ea674.  v9:= v9 ^> v4 @kind long;
  #L1ea676.  v7:= v7 ^& v9 @kind long;
  #L1ea678.  v2:= 26I;
  #L1ea67c.  v7:= v7 ^> v2 @kind long;
  #L1ea67e.  v2:= (`int`) v7 @kind l2i;
  #L1ea680.  v2:= -v2 @kind int;
  #L1ea682.  v7:= v14[v1] @kind wide;
  #L1ea686.  v4:= v2 ^< 26;
  #L1ea68a.  v9:= (`long`) v4 @kind i2l;
  #L1ea68c.  v7:= v7 + v9 @kind long;
  #L1ea68e.  v14[v1]:= v7 @kind wide;
  #L1ea692.  v4:= 1I;
  #L1ea694.  v7:= v14[v4] @kind wide;
  #L1ea698.  v9:= (`long`) v2 @kind i2l;
  #L1ea69a.  v7:= v7 - v9 @kind long;
  #L1ea69c.  v14[v4]:= v7 @kind wide;
  #L1ea6a0.  v2:= 0I;
  #L1ea6a2.  if v2 >= v5 then goto L1ea6ec;
  #L1ea6a6.  v7:= 0I;
  #L1ea6a8.  if v7 >= v6 then goto L1ea6e6;
  #L1ea6ac.  v8:= v14[v7] @kind wide;
  #L1ea6b0.  v10:= `@@com.google.crypto.tink.subtle.h.d` @type ^`int`[] @kind object;
  #L1ea6b4.  v11:= v7 ^& 1;
  #L1ea6b8.  v10:= v10[v11];
  #L1ea6bc.  v8:= v8 ^> v10 @kind long;
  #L1ea6be.  v9:= (`int`) v8 @kind l2i;
  #L1ea6c0.  v12:= v14[v7] @kind wide;
  #L1ea6c4.  v8:= `@@com.google.crypto.tink.subtle.h.c` @type ^`int`[] @kind object;
  #L1ea6c8.  v8:= v8[v11];
  #L1ea6cc.  v10:= (`long`) v8 @kind i2l;
  #L1ea6ce.  v10:= v10 ^& v12 @kind long;
  #L1ea6d0.  v14[v7]:= v10 @kind wide;
  #L1ea6d4.  v7:= v7 + 1;
  #L1ea6d8.  v10:= v14[v7] @kind wide;
  #L1ea6dc.  v8:= (`long`) v9 @kind i2l;
  #L1ea6de.  v10:= v10 + v8 @kind long;
  #L1ea6e0.  v14[v7]:= v10 @kind wide;
  #L1ea6e4.  goto L1ea6a8;
  #L1ea6e6.  v2:= v2 + 1;
  #L1ea6ea.  goto L1ea6a2;
  #L1ea6ec.  v7:= v14[v6] @kind wide;
  #L1ea6f0.  v2:= v7 ^> v3 @kind long;
  #L1ea6f4.  v3:= (`int`) v2 @kind l2i;
  #L1ea6f6.  v7:= v14[v6] @kind wide;
  #L1ea6fa.  v9:= 33554431L;
  #L1ea700.  v7:= v7 ^& v9 @kind long;
  #L1ea702.  v14[v6]:= v7 @kind wide;
  #L1ea706.  v6:= v14[v1] @kind wide;
  #L1ea70a.  v3:= v3 * 19;
  #L1ea70e.  v2:= (`long`) v3 @kind i2l;
  #L1ea710.  v6:= v6 + v2 @kind long;
  #L1ea712.  v14[v1]:= v6 @kind wide;
  #L1ea716.  v2:= v14[v1] @kind wide;
  #L1ea71a.  v3:= (`int`) v2 @kind l2i;
  #L1ea71c.  v2:= 67108845I;
  #L1ea722.  call temp:= `d`(v3, v2) @signature `Lcom/google/crypto/tink/subtle/h;.d:(II)I` @kind static;
  #L1ea728.  v3:= temp;
  #L1ea72a.  v6:= 1I;
  #L1ea72c.  if v6 >= v0 then goto L1ea752;
  #L1ea730.  v7:= v14[v6] @kind wide;
  #L1ea734.  v8:= (`int`) v7 @kind l2i;
  #L1ea736.  v7:= `@@com.google.crypto.tink.subtle.h.c` @type ^`int`[] @kind object;
  #L1ea73a.  v9:= v6 ^& 1;
  #L1ea73e.  v7:= v7[v9];
  #L1ea742.  call temp:= `b`(v8, v7) @signature `Lcom/google/crypto/tink/subtle/h;.b:(II)I` @kind static;
  #L1ea748.  v7:= temp;
  #L1ea74a.  v3:= v3 ^& v7 @kind int;
  #L1ea74c.  v6:= v6 + 1;
  #L1ea750.  goto L1ea72c;
  #L1ea752.  v6:= v14[v1] @kind wide;
  #L1ea756.  v2:= v2 ^& v3 @kind int;
  #L1ea758.  v8:= (`long`) v2 @kind i2l;
  #L1ea75a.  v6:= v6 - v8 @kind long;
  #L1ea75c.  v14[v1]:= v6 @kind wide;
  #L1ea760.  v6:= v14[v4] @kind wide;
  #L1ea764.  v2:= 33554431I;
  #L1ea76a.  v2:= v2 ^& v3 @kind int;
  #L1ea76c.  v8:= (`long`) v2 @kind i2l;
  #L1ea76e.  v6:= v6 - v8 @kind long;
  #L1ea770.  v14[v4]:= v6 @kind wide;
  #L1ea774.  v2:= 2I;
  #L1ea776.  if v2 >= v0 then goto L1ea7a2;
  #L1ea77a.  v6:= v14[v2] @kind wide;
  #L1ea77e.  v10:= 67108863I;
  #L1ea784.  v10:= v10 ^& v3 @kind int;
  #L1ea786.  v10:= (`long`) v10 @kind i2l;
  #L1ea788.  v6:= v6 - v10 @kind long;
  #L1ea78a.  v14[v2]:= v6 @kind wide;
  #L1ea78e.  v6:= v2 + 1;
  #L1ea792.  v10:= v14[v6] @kind wide;
  #L1ea796.  v10:= v10 - v8 @kind long;
  #L1ea798.  v14[v6]:= v10 @kind wide;
  #L1ea79c.  v2:= v2 + 2;
  #L1ea7a0.  goto L1ea776;
  #L1ea7a2.  v2:= 0I;
  #L1ea7a4.  if v2 >= v0 then goto L1ea7c0;
  #L1ea7a8.  v6:= v14[v2] @kind wide;
  #L1ea7ac.  v3:= `@@com.google.crypto.tink.subtle.h.b` @type ^`int`[] @kind object;
  #L1ea7b0.  v3:= v3[v2];
  #L1ea7b4.  v6:= v6 ^< v3 @kind long;
  #L1ea7b6.  v14[v2]:= v6 @kind wide;
  #L1ea7ba.  v2:= v2 + 1;
  #L1ea7be.  goto L1ea7a4;
  #L1ea7c0.  v2:= 32I;
  #L1ea7c4.  v2:= new `byte`[v2];
  #L1ea7c8.  if v1 >= v0 then goto L1ea85c;
  #L1ea7cc.  v3:= `@@com.google.crypto.tink.subtle.h.a` @type ^`int`[] @kind object;
  #L1ea7d0.  v6:= v3[v1];
  #L1ea7d4.  v7:= v2[v6] @kind byte;
  #L1ea7d8.  v7:= (`long`) v7 @kind i2l;
  #L1ea7da.  v9:= v14[v1] @kind wide;
  #L1ea7de.  v11:= 255L;
  #L1ea7e2.  v9:= v9 ^& v11 @kind long;
  #L1ea7e4.  v7:= v7 ^| v9 @kind long;
  #L1ea7e6.  v8:= (`int`) v7 @kind l2i;
  #L1ea7e8.  v7:= (`byte`) v8 @kind i2b;
  #L1ea7ea.  v2[v6]:= v7 @kind byte;
  #L1ea7ee.  v6:= v3[v1];
  #L1ea7f2.  v6:= v6 + v4 @kind int;
  #L1ea7f4.  v7:= v2[v6] @kind byte;
  #L1ea7f8.  v7:= (`long`) v7 @kind i2l;
  #L1ea7fa.  v9:= v14[v1] @kind wide;
  #L1ea7fe.  v13:= 8I;
  #L1ea802.  v9:= v9 ^> v13 @kind long;
  #L1ea804.  v9:= v9 ^& v11 @kind long;
  #L1ea806.  v7:= v7 ^| v9 @kind long;
  #L1ea808.  v8:= (`int`) v7 @kind l2i;
  #L1ea80a.  v7:= (`byte`) v8 @kind i2b;
  #L1ea80c.  v2[v6]:= v7 @kind byte;
  #L1ea810.  v6:= v3[v1];
  #L1ea814.  v6:= v6 + v5 @kind int;
  #L1ea816.  v7:= v2[v6] @kind byte;
  #L1ea81a.  v7:= (`long`) v7 @kind i2l;
  #L1ea81c.  v9:= v14[v1] @kind wide;
  #L1ea820.  v13:= 16I;
  #L1ea824.  v9:= v9 ^> v13 @kind long;
  #L1ea826.  v9:= v9 ^& v11 @kind long;
  #L1ea828.  v7:= v7 ^| v9 @kind long;
  #L1ea82a.  v8:= (`int`) v7 @kind l2i;
  #L1ea82c.  v7:= (`byte`) v8 @kind i2b;
  #L1ea82e.  v2[v6]:= v7 @kind byte;
  #L1ea832.  v3:= v3[v1];
  #L1ea836.  v3:= v3 + 3;
  #L1ea83a.  v6:= v2[v3] @kind byte;
  #L1ea83e.  v6:= (`long`) v6 @kind i2l;
  #L1ea840.  v8:= v14[v1] @kind wide;
  #L1ea844.  v10:= 24I;
  #L1ea848.  v8:= v8 ^> v10 @kind long;
  #L1ea84a.  v8:= v8 ^& v11 @kind long;
  #L1ea84c.  v6:= v6 ^| v8 @kind long;
  #L1ea84e.  v7:= (`int`) v6 @kind l2i;
  #L1ea850.  v6:= (`byte`) v7 @kind i2b;
  #L1ea852.  v2[v3]:= v6 @kind byte;
  #L1ea856.  v1:= v1 + 1;
  #L1ea85a.  goto L1ea7c8;
  #L1ea85c.  return v2 @kind object;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/h;.b:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1ea870.  v0:= v0 ^~ v1 @kind int;
  #L1ea872.  v0:= ~v0 @kind int;
  #L1ea874.  v1:= v0 ^< 16;
  #L1ea878.  v0:= v0 ^& v1 @kind int;
  #L1ea87a.  v1:= v0 ^< 8;
  #L1ea87e.  v0:= v0 ^& v1 @kind int;
  #L1ea880.  v1:= v0 ^< 4;
  #L1ea884.  v0:= v0 ^& v1 @kind int;
  #L1ea886.  v1:= v0 ^< 2;
  #L1ea88a.  v0:= v0 ^& v1 @kind int;
  #L1ea88c.  v1:= v0 ^< 1;
  #L1ea890.  v0:= v0 ^& v1 @kind int;
  #L1ea892.  v0:= v0 ^> 31;
  #L1ea896.  return v0;
}
procedure `long`[] `c`(`byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.c:([B)[J` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ea8c4.  v0:= 10I;
  #L1ea8c8.  v1:= new `long`[v0];
  #L1ea8cc.  v2:= 0I;
  #L1ea8ce.  if v2 >= v0 then goto L1ea958;
  #L1ea8d2.  v3:= `@@com.google.crypto.tink.subtle.h.a` @type ^`int`[] @kind object;
  #L1ea8d6.  v4:= v3[v2];
  #L1ea8da.  v4:= v9[v4] @kind byte;
  #L1ea8de.  v4:= v4 ^& 255;
  #L1ea8e2.  v4:= (`long`) v4 @kind i2l;
  #L1ea8e4.  v6:= v3[v2];
  #L1ea8e8.  v6:= v6 + 1;
  #L1ea8ec.  v6:= v9[v6] @kind byte;
  #L1ea8f0.  v6:= v6 ^& 255;
  #L1ea8f4.  v6:= (`long`) v6 @kind i2l;
  #L1ea8f6.  v8:= 8I;
  #L1ea8fa.  v6:= v6 ^< v8 @kind long;
  #L1ea8fc.  v4:= v4 ^| v6 @kind long;
  #L1ea8fe.  v6:= v3[v2];
  #L1ea902.  v6:= v6 + 2;
  #L1ea906.  v6:= v9[v6] @kind byte;
  #L1ea90a.  v6:= v6 ^& 255;
  #L1ea90e.  v6:= (`long`) v6 @kind i2l;
  #L1ea910.  v8:= 16I;
  #L1ea914.  v6:= v6 ^< v8 @kind long;
  #L1ea916.  v4:= v4 ^| v6 @kind long;
  #L1ea918.  v3:= v3[v2];
  #L1ea91c.  v3:= v3 + 3;
  #L1ea920.  v3:= v9[v3] @kind byte;
  #L1ea924.  v3:= v3 ^& 255;
  #L1ea928.  v6:= (`long`) v3 @kind i2l;
  #L1ea92a.  v3:= 24I;
  #L1ea92e.  v6:= v6 ^< v3 @kind long;
  #L1ea930.  v3:= v4 ^| v6 @kind long;
  #L1ea934.  v5:= `@@com.google.crypto.tink.subtle.h.b` @type ^`int`[] @kind object;
  #L1ea938.  v5:= v5[v2];
  #L1ea93c.  v3:= v3 ^> v5 @kind long;
  #L1ea93e.  v5:= `@@com.google.crypto.tink.subtle.h.c` @type ^`int`[] @kind object;
  #L1ea942.  v6:= v2 ^& 1;
  #L1ea946.  v5:= v5[v6];
  #L1ea94a.  v5:= (`long`) v5 @kind i2l;
  #L1ea94c.  v3:= v3 ^& v5 @kind long;
  #L1ea94e.  v1[v2]:= v3 @kind wide;
  #L1ea952.  v2:= v2 + 1;
  #L1ea956.  goto L1ea8ce;
  #L1ea958.  return v1 @kind object;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lcom/google/crypto/tink/subtle/h;.d:(II)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1ea8a8.  v0:= v0 - v1 @kind int;
  #L1ea8aa.  v0:= v0 ^> 31;
  #L1ea8ae.  v0:= ~v0 @kind int;
  #L1ea8b0.  return v0;
}
procedure `void` `e`(`long`[] v11 @kind object, `long`[] v12 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.e:([J[J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1eaa3c.  v0:= 10I;
  #L1eaa40.  v1:= new `long`[v0];
  #L1eaa44.  v2:= new `long`[v0];
  #L1eaa48.  v3:= new `long`[v0];
  #L1eaa4c.  v4:= new `long`[v0];
  #L1eaa50.  v5:= new `long`[v0];
  #L1eaa54.  v6:= new `long`[v0];
  #L1eaa58.  v7:= new `long`[v0];
  #L1eaa5c.  v8:= new `long`[v0];
  #L1eaa60.  v9:= new `long`[v0];
  #L1eaa64.  v10:= new `long`[v0];
  #L1eaa68.  call `l`(v1, v12) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa6e.  call `l`(v10, v1) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa74.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa7a.  call `f`(v2, v9, v12) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eaa80.  call `f`(v3, v2, v1) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eaa86.  call `l`(v9, v3) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa8c.  call `f`(v4, v9, v2) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eaa92.  call `l`(v9, v4) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa98.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaa9e.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaaa4.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaaaa.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaab0.  call `f`(v5, v9, v4) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eaab6.  call `l`(v9, v5) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaabc.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaac2.  v12:= 2I;
  #L1eaac4.  v1:= 2I;
  #L1eaac6.  if v1 >= v0 then goto L1eaadc;
  #L1eaaca.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaad0.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaad6.  v1:= v1 + 2;
  #L1eaada.  goto L1eaac6;
  #L1eaadc.  call `f`(v6, v10, v5) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eaae2.  call `l`(v9, v6) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaae8.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaaee.  v1:= 2I;
  #L1eaaf0.  v2:= 20I;
  #L1eaaf4.  if v1 >= v2 then goto L1eab0a;
  #L1eaaf8.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaafe.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab04.  v1:= v1 + 2;
  #L1eab08.  goto L1eaaf0;
  #L1eab0a.  call `f`(v9, v10, v6) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eab10.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab16.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab1c.  v1:= 2I;
  #L1eab1e.  if v1 >= v0 then goto L1eab34;
  #L1eab22.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab28.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab2e.  v1:= v1 + 2;
  #L1eab32.  goto L1eab1e;
  #L1eab34.  call `f`(v7, v9, v5) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eab3a.  call `l`(v9, v7) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab40.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab46.  v0:= 2I;
  #L1eab48.  v1:= 50I;
  #L1eab4c.  if v0 >= v1 then goto L1eab62;
  #L1eab50.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab56.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab5c.  v0:= v0 + 2;
  #L1eab60.  goto L1eab48;
  #L1eab62.  call `f`(v8, v10, v7) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eab68.  call `l`(v10, v8) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab6e.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab74.  v0:= 2I;
  #L1eab76.  v2:= 100I;
  #L1eab7a.  if v0 >= v2 then goto L1eab90;
  #L1eab7e.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab84.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab8a.  v0:= v0 + 2;
  #L1eab8e.  goto L1eab76;
  #L1eab90.  call `f`(v10, v9, v8) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eab96.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eab9c.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eaba2.  if v12 >= v1 then goto L1eabb8;
  #L1eaba6.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabac.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabb2.  v12:= v12 + 2;
  #L1eabb6.  goto L1eaba2;
  #L1eabb8.  call `f`(v9, v10, v7) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eabbe.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabc4.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabca.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabd0.  call `l`(v9, v10) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabd6.  call `l`(v10, v9) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @kind static;
  #L1eabdc.  call `f`(v11, v10, v3) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @kind static;
  #L1eabe2.  return @kind void;
}
procedure `void` `f`(`long`[] v1 @kind object, `long`[] v2 @kind object, `long`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.f:([J[J[J)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1eabf4.  v0:= 19I;
  #L1eabf8.  v0:= new `long`[v0];
  #L1eabfc.  call `g`(v0, v2, v3) @signature `Lcom/google/crypto/tink/subtle/h;.g:([J[J[J)V` @kind static;
  #L1eac02.  call `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/h;.h:([J[J)V` @kind static;
  #L1eac08.  return @kind void;
}
procedure `void` `g`(`long`[] v18 @kind object, `long`[] v19 @kind object, `long`[] v20 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.g:([J[J[J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1eac1c.  v0:= 0I;
  #L1eac1e.  v1:= v19[v0] @kind wide;
  #L1eac22.  v3:= v20[v0] @kind wide;
  #L1eac26.  v1:= v1 * v3 @kind long;
  #L1eac2a.  v18[v0]:= v1 @kind wide;
  #L1eac2e.  v1:= v19[v0] @kind wide;
  #L1eac32.  v3:= 1I;
  #L1eac34.  v4:= v20[v3] @kind wide;
  #L1eac38.  v1:= v1 * v4 @kind long;
  #L1eac3c.  v4:= v19[v3] @kind wide;
  #L1eac40.  v6:= v20[v0] @kind wide;
  #L1eac44.  v4:= v4 * v6 @kind long;
  #L1eac48.  v1:= v1 + v4 @kind long;
  #L1eac4a.  v18[v3]:= v1 @kind wide;
  #L1eac4e.  v1:= v19[v3] @kind wide;
  #L1eac52.  v4:= 2L;
  #L1eac56.  v1:= v1 * v4 @kind long;
  #L1eac5a.  v6:= v20[v3] @kind wide;
  #L1eac5e.  v1:= v1 * v6 @kind long;
  #L1eac62.  v6:= v19[v0] @kind wide;
  #L1eac66.  v8:= 2I;
  #L1eac68.  v9:= v20[v8] @kind wide;
  #L1eac6c.  v6:= v6 * v9 @kind long;
  #L1eac70.  v1:= v1 + v6 @kind long;
  #L1eac72.  v6:= v19[v8] @kind wide;
  #L1eac76.  v9:= v20[v0] @kind wide;
  #L1eac7a.  v6:= v6 * v9 @kind long;
  #L1eac7e.  v1:= v1 + v6 @kind long;
  #L1eac80.  v18[v8]:= v1 @kind wide;
  #L1eac84.  v1:= v19[v3] @kind wide;
  #L1eac88.  v6:= v20[v8] @kind wide;
  #L1eac8c.  v1:= v1 * v6 @kind long;
  #L1eac90.  v6:= v19[v8] @kind wide;
  #L1eac94.  v9:= v20[v3] @kind wide;
  #L1eac98.  v6:= v6 * v9 @kind long;
  #L1eac9c.  v1:= v1 + v6 @kind long;
  #L1eac9e.  v6:= v19[v0] @kind wide;
  #L1eaca2.  v9:= 3I;
  #L1eaca4.  v10:= v20[v9] @kind wide;
  #L1eaca8.  v6:= v6 * v10 @kind long;
  #L1eacac.  v1:= v1 + v6 @kind long;
  #L1eacae.  v6:= v19[v9] @kind wide;
  #L1eacb2.  v10:= v20[v0] @kind wide;
  #L1eacb6.  v6:= v6 * v10 @kind long;
  #L1eacba.  v1:= v1 + v6 @kind long;
  #L1eacbc.  v18[v9]:= v1 @kind wide;
  #L1eacc0.  v1:= v19[v8] @kind wide;
  #L1eacc4.  v6:= v20[v8] @kind wide;
  #L1eacc8.  v1:= v1 * v6 @kind long;
  #L1eaccc.  v6:= v19[v3] @kind wide;
  #L1eacd0.  v10:= v20[v9] @kind wide;
  #L1eacd4.  v6:= v6 * v10 @kind long;
  #L1eacd8.  v10:= v19[v9] @kind wide;
  #L1eacdc.  v12:= v20[v3] @kind wide;
  #L1eace0.  v10:= v10 * v12 @kind long;
  #L1eace4.  v6:= v6 + v10 @kind long;
  #L1eace6.  v6:= v6 * v4 @kind long;
  #L1eacea.  v1:= v1 + v6 @kind long;
  #L1eacec.  v6:= v19[v0] @kind wide;
  #L1eacf0.  v10:= 4I;
  #L1eacf2.  v11:= v20[v10] @kind wide;
  #L1eacf6.  v6:= v6 * v11 @kind long;
  #L1eacfa.  v1:= v1 + v6 @kind long;
  #L1eacfc.  v6:= v19[v10] @kind wide;
  #L1ead00.  v11:= v20[v0] @kind wide;
  #L1ead04.  v6:= v6 * v11 @kind long;
  #L1ead08.  v1:= v1 + v6 @kind long;
  #L1ead0a.  v18[v10]:= v1 @kind wide;
  #L1ead0e.  v1:= v19[v8] @kind wide;
  #L1ead12.  v6:= v20[v9] @kind wide;
  #L1ead16.  v1:= v1 * v6 @kind long;
  #L1ead1a.  v6:= v19[v9] @kind wide;
  #L1ead1e.  v11:= v20[v8] @kind wide;
  #L1ead22.  v6:= v6 * v11 @kind long;
  #L1ead26.  v1:= v1 + v6 @kind long;
  #L1ead28.  v6:= v19[v3] @kind wide;
  #L1ead2c.  v11:= v20[v10] @kind wide;
  #L1ead30.  v6:= v6 * v11 @kind long;
  #L1ead34.  v1:= v1 + v6 @kind long;
  #L1ead36.  v6:= v19[v10] @kind wide;
  #L1ead3a.  v11:= v20[v3] @kind wide;
  #L1ead3e.  v6:= v6 * v11 @kind long;
  #L1ead42.  v1:= v1 + v6 @kind long;
  #L1ead44.  v6:= v19[v0] @kind wide;
  #L1ead48.  v11:= 5I;
  #L1ead4a.  v12:= v20[v11] @kind wide;
  #L1ead4e.  v6:= v6 * v12 @kind long;
  #L1ead52.  v1:= v1 + v6 @kind long;
  #L1ead54.  v6:= v19[v11] @kind wide;
  #L1ead58.  v12:= v20[v0] @kind wide;
  #L1ead5c.  v6:= v6 * v12 @kind long;
  #L1ead60.  v1:= v1 + v6 @kind long;
  #L1ead62.  v18[v11]:= v1 @kind wide;
  #L1ead66.  v1:= v19[v9] @kind wide;
  #L1ead6a.  v6:= v20[v9] @kind wide;
  #L1ead6e.  v1:= v1 * v6 @kind long;
  #L1ead72.  v6:= v19[v3] @kind wide;
  #L1ead76.  v12:= v20[v11] @kind wide;
  #L1ead7a.  v6:= v6 * v12 @kind long;
  #L1ead7e.  v1:= v1 + v6 @kind long;
  #L1ead80.  v6:= v19[v11] @kind wide;
  #L1ead84.  v12:= v20[v3] @kind wide;
  #L1ead88.  v6:= v6 * v12 @kind long;
  #L1ead8c.  v1:= v1 + v6 @kind long;
  #L1ead8e.  v1:= v1 * v4 @kind long;
  #L1ead92.  v6:= v19[v8] @kind wide;
  #L1ead96.  v12:= v20[v10] @kind wide;
  #L1ead9a.  v6:= v6 * v12 @kind long;
  #L1ead9e.  v1:= v1 + v6 @kind long;
  #L1eada0.  v6:= v19[v10] @kind wide;
  #L1eada4.  v12:= v20[v8] @kind wide;
  #L1eada8.  v6:= v6 * v12 @kind long;
  #L1eadac.  v1:= v1 + v6 @kind long;
  #L1eadae.  v6:= v19[v0] @kind wide;
  #L1eadb2.  v12:= 6I;
  #L1eadb4.  v13:= v20[v12] @kind wide;
  #L1eadb8.  v6:= v6 * v13 @kind long;
  #L1eadbc.  v1:= v1 + v6 @kind long;
  #L1eadbe.  v6:= v19[v12] @kind wide;
  #L1eadc2.  v13:= v20[v0] @kind wide;
  #L1eadc6.  v6:= v6 * v13 @kind long;
  #L1eadca.  v1:= v1 + v6 @kind long;
  #L1eadcc.  v18[v12]:= v1 @kind wide;
  #L1eadd0.  v1:= v19[v9] @kind wide;
  #L1eadd4.  v6:= v20[v10] @kind wide;
  #L1eadd8.  v1:= v1 * v6 @kind long;
  #L1eaddc.  v6:= v19[v10] @kind wide;
  #L1eade0.  v13:= v20[v9] @kind wide;
  #L1eade4.  v6:= v6 * v13 @kind long;
  #L1eade8.  v1:= v1 + v6 @kind long;
  #L1eadea.  v6:= v19[v8] @kind wide;
  #L1eadee.  v13:= v20[v11] @kind wide;
  #L1eadf2.  v6:= v6 * v13 @kind long;
  #L1eadf6.  v1:= v1 + v6 @kind long;
  #L1eadf8.  v6:= v19[v11] @kind wide;
  #L1eadfc.  v13:= v20[v8] @kind wide;
  #L1eae00.  v6:= v6 * v13 @kind long;
  #L1eae04.  v1:= v1 + v6 @kind long;
  #L1eae06.  v6:= v19[v3] @kind wide;
  #L1eae0a.  v13:= v20[v12] @kind wide;
  #L1eae0e.  v6:= v6 * v13 @kind long;
  #L1eae12.  v1:= v1 + v6 @kind long;
  #L1eae14.  v6:= v19[v12] @kind wide;
  #L1eae18.  v13:= v20[v3] @kind wide;
  #L1eae1c.  v6:= v6 * v13 @kind long;
  #L1eae20.  v1:= v1 + v6 @kind long;
  #L1eae22.  v6:= v19[v0] @kind wide;
  #L1eae26.  v13:= 7I;
  #L1eae28.  v14:= v20[v13] @kind wide;
  #L1eae2c.  v6:= v6 * v14 @kind long;
  #L1eae30.  v1:= v1 + v6 @kind long;
  #L1eae32.  v6:= v19[v13] @kind wide;
  #L1eae36.  v14:= v20[v0] @kind wide;
  #L1eae3a.  v6:= v6 * v14 @kind long;
  #L1eae3e.  v1:= v1 + v6 @kind long;
  #L1eae40.  v18[v13]:= v1 @kind wide;
  #L1eae44.  v1:= v19[v10] @kind wide;
  #L1eae48.  v6:= v20[v10] @kind wide;
  #L1eae4c.  v1:= v1 * v6 @kind long;
  #L1eae50.  v6:= v19[v9] @kind wide;
  #L1eae54.  v14:= v20[v11] @kind wide;
  #L1eae58.  v6:= v6 * v14 @kind long;
  #L1eae5c.  v14:= v19[v11] @kind wide;
  #L1eae60.  v16:= v20[v9] @kind wide;
  #L1eae64.  v14:= v14 * v16 @kind long;
  #L1eae68.  v6:= v6 + v14 @kind long;
  #L1eae6a.  v14:= v19[v3] @kind wide;
  #L1eae6e.  v16:= v20[v13] @kind wide;
  #L1eae72.  v14:= v14 * v16 @kind long;
  #L1eae76.  v6:= v6 + v14 @kind long;
  #L1eae78.  v14:= v19[v13] @kind wide;
  #L1eae7c.  v16:= v20[v3] @kind wide;
  #L1eae80.  v14:= v14 * v16 @kind long;
  #L1eae84.  v6:= v6 + v14 @kind long;
  #L1eae86.  v6:= v6 * v4 @kind long;
  #L1eae8a.  v1:= v1 + v6 @kind long;
  #L1eae8c.  v6:= v19[v8] @kind wide;
  #L1eae90.  v14:= v20[v12] @kind wide;
  #L1eae94.  v6:= v6 * v14 @kind long;
  #L1eae98.  v1:= v1 + v6 @kind long;
  #L1eae9a.  v6:= v19[v12] @kind wide;
  #L1eae9e.  v14:= v20[v8] @kind wide;
  #L1eaea2.  v6:= v6 * v14 @kind long;
  #L1eaea6.  v1:= v1 + v6 @kind long;
  #L1eaea8.  v6:= v19[v0] @kind wide;
  #L1eaeac.  v14:= 8I;
  #L1eaeb0.  v15:= v20[v14] @kind wide;
  #L1eaeb4.  v6:= v6 * v15 @kind long;
  #L1eaeb8.  v1:= v1 + v6 @kind long;
  #L1eaeba.  v6:= v19[v14] @kind wide;
  #L1eaebe.  v15:= v20[v0] @kind wide;
  #L1eaec2.  v6:= v6 * v15 @kind long;
  #L1eaec6.  v1:= v1 + v6 @kind long;
  #L1eaec8.  v18[v14]:= v1 @kind wide;
  #L1eaecc.  v1:= v19[v10] @kind wide;
  #L1eaed0.  v6:= v20[v11] @kind wide;
  #L1eaed4.  v1:= v1 * v6 @kind long;
  #L1eaed8.  v6:= v19[v11] @kind wide;
  #L1eaedc.  v15:= v20[v10] @kind wide;
  #L1eaee0.  v6:= v6 * v15 @kind long;
  #L1eaee4.  v1:= v1 + v6 @kind long;
  #L1eaee6.  v6:= v19[v9] @kind wide;
  #L1eaeea.  v15:= v20[v12] @kind wide;
  #L1eaeee.  v6:= v6 * v15 @kind long;
  #L1eaef2.  v1:= v1 + v6 @kind long;
  #L1eaef4.  v6:= v19[v12] @kind wide;
  #L1eaef8.  v15:= v20[v9] @kind wide;
  #L1eaefc.  v6:= v6 * v15 @kind long;
  #L1eaf00.  v1:= v1 + v6 @kind long;
  #L1eaf02.  v6:= v19[v8] @kind wide;
  #L1eaf06.  v15:= v20[v13] @kind wide;
  #L1eaf0a.  v6:= v6 * v15 @kind long;
  #L1eaf0e.  v1:= v1 + v6 @kind long;
  #L1eaf10.  v6:= v19[v13] @kind wide;
  #L1eaf14.  v15:= v20[v8] @kind wide;
  #L1eaf18.  v6:= v6 * v15 @kind long;
  #L1eaf1c.  v1:= v1 + v6 @kind long;
  #L1eaf1e.  v6:= v19[v3] @kind wide;
  #L1eaf22.  v15:= v20[v14] @kind wide;
  #L1eaf26.  v6:= v6 * v15 @kind long;
  #L1eaf2a.  v1:= v1 + v6 @kind long;
  #L1eaf2c.  v6:= v19[v14] @kind wide;
  #L1eaf30.  v15:= v20[v3] @kind wide;
  #L1eaf34.  v6:= v6 * v15 @kind long;
  #L1eaf38.  v1:= v1 + v6 @kind long;
  #L1eaf3a.  v6:= v19[v0] @kind wide;
  #L1eaf3e.  v15:= 9I;
  #L1eaf42.  v16:= v20[v15] @kind wide;
  #L1eaf46.  v6:= v6 * v16 @kind long;
  #L1eaf4a.  v1:= v1 + v6 @kind long;
  #L1eaf4c.  v6:= v19[v15] @kind wide;
  #L1eaf50.  v16:= v20[v0] @kind wide;
  #L1eaf54.  v6:= v6 * v16 @kind long;
  #L1eaf58.  v1:= v1 + v6 @kind long;
  #L1eaf5a.  v18[v15]:= v1 @kind wide;
  #L1eaf5e.  v0:= v19[v11] @kind wide;
  #L1eaf62.  v6:= v20[v11] @kind wide;
  #L1eaf66.  v0:= v0 * v6 @kind long;
  #L1eaf6a.  v6:= v19[v9] @kind wide;
  #L1eaf6e.  v16:= v20[v13] @kind wide;
  #L1eaf72.  v6:= v6 * v16 @kind long;
  #L1eaf76.  v0:= v0 + v6 @kind long;
  #L1eaf78.  v6:= v19[v13] @kind wide;
  #L1eaf7c.  v16:= v20[v9] @kind wide;
  #L1eaf80.  v6:= v6 * v16 @kind long;
  #L1eaf84.  v0:= v0 + v6 @kind long;
  #L1eaf86.  v6:= v19[v3] @kind wide;
  #L1eaf8a.  v16:= v20[v15] @kind wide;
  #L1eaf8e.  v6:= v6 * v16 @kind long;
  #L1eaf92.  v0:= v0 + v6 @kind long;
  #L1eaf94.  v6:= v19[v15] @kind wide;
  #L1eaf98.  v2:= v20[v3] @kind wide;
  #L1eaf9c.  v6:= v6 * v2 @kind long;
  #L1eafa0.  v0:= v0 + v6 @kind long;
  #L1eafa2.  v0:= v0 * v4 @kind long;
  #L1eafa6.  v2:= v19[v10] @kind wide;
  #L1eafaa.  v6:= v20[v12] @kind wide;
  #L1eafae.  v2:= v2 * v6 @kind long;
  #L1eafb2.  v0:= v0 + v2 @kind long;
  #L1eafb4.  v2:= v19[v12] @kind wide;
  #L1eafb8.  v6:= v20[v10] @kind wide;
  #L1eafbc.  v2:= v2 * v6 @kind long;
  #L1eafc0.  v0:= v0 + v2 @kind long;
  #L1eafc2.  v2:= v19[v8] @kind wide;
  #L1eafc6.  v6:= v20[v14] @kind wide;
  #L1eafca.  v2:= v2 * v6 @kind long;
  #L1eafce.  v0:= v0 + v2 @kind long;
  #L1eafd0.  v2:= v19[v14] @kind wide;
  #L1eafd4.  v6:= v20[v8] @kind wide;
  #L1eafd8.  v2:= v2 * v6 @kind long;
  #L1eafdc.  v0:= v0 + v2 @kind long;
  #L1eafde.  v2:= 10I;
  #L1eafe2.  v18[v2]:= v0 @kind wide;
  #L1eafe6.  v0:= v19[v11] @kind wide;
  #L1eafea.  v2:= v20[v12] @kind wide;
  #L1eafee.  v0:= v0 * v2 @kind long;
  #L1eaff2.  v2:= v19[v12] @kind wide;
  #L1eaff6.  v6:= v20[v11] @kind wide;
  #L1eaffa.  v2:= v2 * v6 @kind long;
  #L1eaffe.  v0:= v0 + v2 @kind long;
  #L1eb000.  v2:= v19[v10] @kind wide;
  #L1eb004.  v6:= v20[v13] @kind wide;
  #L1eb008.  v2:= v2 * v6 @kind long;
  #L1eb00c.  v0:= v0 + v2 @kind long;
  #L1eb00e.  v2:= v19[v13] @kind wide;
  #L1eb012.  v6:= v20[v10] @kind wide;
  #L1eb016.  v2:= v2 * v6 @kind long;
  #L1eb01a.  v0:= v0 + v2 @kind long;
  #L1eb01c.  v2:= v19[v9] @kind wide;
  #L1eb020.  v6:= v20[v14] @kind wide;
  #L1eb024.  v2:= v2 * v6 @kind long;
  #L1eb028.  v0:= v0 + v2 @kind long;
  #L1eb02a.  v2:= v19[v14] @kind wide;
  #L1eb02e.  v6:= v20[v9] @kind wide;
  #L1eb032.  v2:= v2 * v6 @kind long;
  #L1eb036.  v0:= v0 + v2 @kind long;
  #L1eb038.  v2:= v19[v8] @kind wide;
  #L1eb03c.  v6:= v20[v15] @kind wide;
  #L1eb040.  v2:= v2 * v6 @kind long;
  #L1eb044.  v0:= v0 + v2 @kind long;
  #L1eb046.  v2:= v19[v15] @kind wide;
  #L1eb04a.  v6:= v20[v8] @kind wide;
  #L1eb04e.  v2:= v2 * v6 @kind long;
  #L1eb052.  v0:= v0 + v2 @kind long;
  #L1eb054.  v2:= 11I;
  #L1eb058.  v18[v2]:= v0 @kind wide;
  #L1eb05c.  v0:= v19[v12] @kind wide;
  #L1eb060.  v2:= v20[v12] @kind wide;
  #L1eb064.  v0:= v0 * v2 @kind long;
  #L1eb068.  v2:= v19[v11] @kind wide;
  #L1eb06c.  v6:= v20[v13] @kind wide;
  #L1eb070.  v2:= v2 * v6 @kind long;
  #L1eb074.  v6:= v19[v13] @kind wide;
  #L1eb078.  v16:= v20[v11] @kind wide;
  #L1eb07c.  v6:= v6 * v16 @kind long;
  #L1eb080.  v2:= v2 + v6 @kind long;
  #L1eb082.  v6:= v19[v9] @kind wide;
  #L1eb086.  v16:= v20[v15] @kind wide;
  #L1eb08a.  v6:= v6 * v16 @kind long;
  #L1eb08e.  v2:= v2 + v6 @kind long;
  #L1eb090.  v6:= v19[v15] @kind wide;
  #L1eb094.  v8:= v20[v9] @kind wide;
  #L1eb098.  v6:= v6 * v8 @kind long;
  #L1eb09c.  v2:= v2 + v6 @kind long;
  #L1eb09e.  v2:= v2 * v4 @kind long;
  #L1eb0a2.  v0:= v0 + v2 @kind long;
  #L1eb0a4.  v2:= v19[v10] @kind wide;
  #L1eb0a8.  v6:= v20[v14] @kind wide;
  #L1eb0ac.  v2:= v2 * v6 @kind long;
  #L1eb0b0.  v0:= v0 + v2 @kind long;
  #L1eb0b2.  v2:= v19[v14] @kind wide;
  #L1eb0b6.  v6:= v20[v10] @kind wide;
  #L1eb0ba.  v2:= v2 * v6 @kind long;
  #L1eb0be.  v0:= v0 + v2 @kind long;
  #L1eb0c0.  v2:= 12I;
  #L1eb0c4.  v18[v2]:= v0 @kind wide;
  #L1eb0c8.  v0:= v19[v12] @kind wide;
  #L1eb0cc.  v2:= v20[v13] @kind wide;
  #L1eb0d0.  v0:= v0 * v2 @kind long;
  #L1eb0d4.  v2:= v19[v13] @kind wide;
  #L1eb0d8.  v6:= v20[v12] @kind wide;
  #L1eb0dc.  v2:= v2 * v6 @kind long;
  #L1eb0e0.  v0:= v0 + v2 @kind long;
  #L1eb0e2.  v2:= v19[v11] @kind wide;
  #L1eb0e6.  v6:= v20[v14] @kind wide;
  #L1eb0ea.  v2:= v2 * v6 @kind long;
  #L1eb0ee.  v0:= v0 + v2 @kind long;
  #L1eb0f0.  v2:= v19[v14] @kind wide;
  #L1eb0f4.  v6:= v20[v11] @kind wide;
  #L1eb0f8.  v2:= v2 * v6 @kind long;
  #L1eb0fc.  v0:= v0 + v2 @kind long;
  #L1eb0fe.  v2:= v19[v10] @kind wide;
  #L1eb102.  v6:= v20[v15] @kind wide;
  #L1eb106.  v2:= v2 * v6 @kind long;
  #L1eb10a.  v0:= v0 + v2 @kind long;
  #L1eb10c.  v2:= v19[v15] @kind wide;
  #L1eb110.  v6:= v20[v10] @kind wide;
  #L1eb114.  v2:= v2 * v6 @kind long;
  #L1eb118.  v0:= v0 + v2 @kind long;
  #L1eb11a.  v2:= 13I;
  #L1eb11e.  v18[v2]:= v0 @kind wide;
  #L1eb122.  v0:= v19[v13] @kind wide;
  #L1eb126.  v2:= v20[v13] @kind wide;
  #L1eb12a.  v0:= v0 * v2 @kind long;
  #L1eb12e.  v2:= v19[v11] @kind wide;
  #L1eb132.  v6:= v20[v15] @kind wide;
  #L1eb136.  v2:= v2 * v6 @kind long;
  #L1eb13a.  v0:= v0 + v2 @kind long;
  #L1eb13c.  v2:= v19[v15] @kind wide;
  #L1eb140.  v6:= v20[v11] @kind wide;
  #L1eb144.  v2:= v2 * v6 @kind long;
  #L1eb148.  v0:= v0 + v2 @kind long;
  #L1eb14a.  v0:= v0 * v4 @kind long;
  #L1eb14e.  v2:= v19[v12] @kind wide;
  #L1eb152.  v6:= v20[v14] @kind wide;
  #L1eb156.  v2:= v2 * v6 @kind long;
  #L1eb15a.  v0:= v0 + v2 @kind long;
  #L1eb15c.  v2:= v19[v14] @kind wide;
  #L1eb160.  v6:= v20[v12] @kind wide;
  #L1eb164.  v2:= v2 * v6 @kind long;
  #L1eb168.  v0:= v0 + v2 @kind long;
  #L1eb16a.  v2:= 14I;
  #L1eb16e.  v18[v2]:= v0 @kind wide;
  #L1eb172.  v0:= v19[v13] @kind wide;
  #L1eb176.  v2:= v20[v14] @kind wide;
  #L1eb17a.  v0:= v0 * v2 @kind long;
  #L1eb17e.  v2:= v19[v14] @kind wide;
  #L1eb182.  v6:= v20[v13] @kind wide;
  #L1eb186.  v2:= v2 * v6 @kind long;
  #L1eb18a.  v0:= v0 + v2 @kind long;
  #L1eb18c.  v2:= v19[v12] @kind wide;
  #L1eb190.  v6:= v20[v15] @kind wide;
  #L1eb194.  v2:= v2 * v6 @kind long;
  #L1eb198.  v0:= v0 + v2 @kind long;
  #L1eb19a.  v2:= v19[v15] @kind wide;
  #L1eb19e.  v6:= v20[v12] @kind wide;
  #L1eb1a2.  v2:= v2 * v6 @kind long;
  #L1eb1a6.  v0:= v0 + v2 @kind long;
  #L1eb1a8.  v2:= 15I;
  #L1eb1ac.  v18[v2]:= v0 @kind wide;
  #L1eb1b0.  v0:= v19[v14] @kind wide;
  #L1eb1b4.  v2:= v20[v14] @kind wide;
  #L1eb1b8.  v0:= v0 * v2 @kind long;
  #L1eb1bc.  v2:= v19[v13] @kind wide;
  #L1eb1c0.  v6:= v20[v15] @kind wide;
  #L1eb1c4.  v2:= v2 * v6 @kind long;
  #L1eb1c8.  v6:= v19[v15] @kind wide;
  #L1eb1cc.  v8:= v20[v13] @kind wide;
  #L1eb1d0.  v6:= v6 * v8 @kind long;
  #L1eb1d4.  v2:= v2 + v6 @kind long;
  #L1eb1d6.  v2:= v2 * v4 @kind long;
  #L1eb1da.  v0:= v0 + v2 @kind long;
  #L1eb1dc.  v2:= 16I;
  #L1eb1e0.  v18[v2]:= v0 @kind wide;
  #L1eb1e4.  v0:= v19[v14] @kind wide;
  #L1eb1e8.  v2:= v20[v15] @kind wide;
  #L1eb1ec.  v0:= v0 * v2 @kind long;
  #L1eb1f0.  v2:= v19[v15] @kind wide;
  #L1eb1f4.  v6:= v20[v14] @kind wide;
  #L1eb1f8.  v2:= v2 * v6 @kind long;
  #L1eb1fc.  v0:= v0 + v2 @kind long;
  #L1eb1fe.  v2:= 17I;
  #L1eb202.  v18[v2]:= v0 @kind wide;
  #L1eb206.  v0:= v19[v15] @kind wide;
  #L1eb20a.  v0:= v0 * v4 @kind long;
  #L1eb20e.  v2:= v20[v15] @kind wide;
  #L1eb212.  v0:= v0 * v2 @kind long;
  #L1eb216.  v2:= 18I;
  #L1eb21a.  v18[v2]:= v0 @kind wide;
  #L1eb21e.  return @kind void;
}
procedure `void` `h`(`long`[] v3 @kind object, `long`[] v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.h:([J[J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1eb230.  v0:= length @variable v3;
  #L1eb232.  v1:= 19I;
  #L1eb236.  v2:= 0I;
  #L1eb238.  if v0 != v1 then goto L1eb23e;
  #L1eb23c.  goto L1eb24c;
  #L1eb23e.  v0:= new `long`[v1];
  #L1eb242.  v1:= length @variable v3;
  #L1eb244.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1eb24a.  v3:= v0 @kind object;
  #L1eb24c.  call `j`(v3) @signature `Lcom/google/crypto/tink/subtle/h;.j:([J)V` @kind static;
  #L1eb252.  call `i`(v3) @signature `Lcom/google/crypto/tink/subtle/h;.i:([J)V` @kind static;
  #L1eb258.  v0:= 10I;
  #L1eb25c.  call `arraycopy`(v3, v2, v4, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1eb262.  return @kind void;
}
procedure `void` `i`(`long`[] v12 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.i:([J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1eb274.  v0:= 10I;
  #L1eb278.  v1:= 0L;
  #L1eb27c.  v12[v0]:= v1 @kind wide;
  #L1eb280.  v3:= 0I;
  #L1eb282.  v4:= 0I;
  #L1eb284.  v5:= 26I;
  #L1eb288.  v6:= 67108864L;
  #L1eb28e.  if v4 >= v0 then goto L1eb2e2;
  #L1eb292.  v8:= v12[v4] @kind wide;
  #L1eb296.  v8:= v8 / v6 @kind long;
  #L1eb298.  v6:= v12[v4] @kind wide;
  #L1eb29c.  v10:= v8 ^< v5 @kind long;
  #L1eb2a0.  v6:= v6 - v10 @kind long;
  #L1eb2a2.  v12[v4]:= v6 @kind wide;
  #L1eb2a6.  v5:= v4 + 1;
  #L1eb2aa.  v6:= v12[v5] @kind wide;
  #L1eb2ae.  v6:= v6 + v8 @kind long;
  #L1eb2b0.  v12[v5]:= v6 @kind wide;
  #L1eb2b4.  v6:= v12[v5] @kind wide;
  #L1eb2b8.  v8:= 33554432L;
  #L1eb2be.  v6:= v6 / v8 @kind long;
  #L1eb2c0.  v8:= v12[v5] @kind wide;
  #L1eb2c4.  v10:= 25I;
  #L1eb2c8.  v10:= v6 ^< v10 @kind long;
  #L1eb2cc.  v8:= v8 - v10 @kind long;
  #L1eb2ce.  v12[v5]:= v8 @kind wide;
  #L1eb2d2.  v4:= v4 + 2;
  #L1eb2d6.  v8:= v12[v4] @kind wide;
  #L1eb2da.  v8:= v8 + v6 @kind long;
  #L1eb2dc.  v12[v4]:= v8 @kind wide;
  #L1eb2e0.  goto L1eb284;
  #L1eb2e2.  v8:= v12[v3] @kind wide;
  #L1eb2e6.  v10:= v12[v0] @kind wide;
  #L1eb2ea.  v4:= 4I;
  #L1eb2ec.  v10:= v10 ^< v4 @kind long;
  #L1eb2ee.  v8:= v8 + v10 @kind long;
  #L1eb2f0.  v12[v3]:= v8 @kind wide;
  #L1eb2f4.  v8:= v12[v3] @kind wide;
  #L1eb2f8.  v10:= v12[v0] @kind wide;
  #L1eb2fc.  v4:= 1I;
  #L1eb2fe.  v10:= v10 ^< v4 @kind long;
  #L1eb300.  v8:= v8 + v10 @kind long;
  #L1eb302.  v12[v3]:= v8 @kind wide;
  #L1eb306.  v8:= v12[v3] @kind wide;
  #L1eb30a.  v10:= v12[v0] @kind wide;
  #L1eb30e.  v8:= v8 + v10 @kind long;
  #L1eb310.  v12[v3]:= v8 @kind wide;
  #L1eb314.  v12[v0]:= v1 @kind wide;
  #L1eb318.  v0:= v12[v3] @kind wide;
  #L1eb31c.  v0:= v0 / v6 @kind long;
  #L1eb31e.  v6:= v12[v3] @kind wide;
  #L1eb322.  v8:= v0 ^< v5 @kind long;
  #L1eb326.  v6:= v6 - v8 @kind long;
  #L1eb328.  v12[v3]:= v6 @kind wide;
  #L1eb32c.  v2:= v12[v4] @kind wide;
  #L1eb330.  v2:= v2 + v0 @kind long;
  #L1eb332.  v12[v4]:= v2 @kind wide;
  #L1eb336.  return @kind void;
}
procedure `void` `j`(`long`[] v8 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.j:([J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1eb348.  v0:= 8I;
  #L1eb34c.  v1:= v8[v0] @kind wide;
  #L1eb350.  v3:= 18I;
  #L1eb354.  v4:= v8[v3] @kind wide;
  #L1eb358.  v6:= 4I;
  #L1eb35a.  v4:= v4 ^< v6 @kind long;
  #L1eb35c.  v1:= v1 + v4 @kind long;
  #L1eb35e.  v8[v0]:= v1 @kind wide;
  #L1eb362.  v1:= v8[v0] @kind wide;
  #L1eb366.  v4:= v8[v3] @kind wide;
  #L1eb36a.  v7:= 1I;
  #L1eb36c.  v4:= v4 ^< v7 @kind long;
  #L1eb36e.  v1:= v1 + v4 @kind long;
  #L1eb370.  v8[v0]:= v1 @kind wide;
  #L1eb374.  v1:= v8[v0] @kind wide;
  #L1eb378.  v3:= v8[v3] @kind wide;
  #L1eb37c.  v1:= v1 + v3 @kind long;
  #L1eb37e.  v8[v0]:= v1 @kind wide;
  #L1eb382.  v0:= 7I;
  #L1eb384.  v1:= v8[v0] @kind wide;
  #L1eb388.  v3:= 17I;
  #L1eb38c.  v4:= v8[v3] @kind wide;
  #L1eb390.  v4:= v4 ^< v6 @kind long;
  #L1eb392.  v1:= v1 + v4 @kind long;
  #L1eb394.  v8[v0]:= v1 @kind wide;
  #L1eb398.  v1:= v8[v0] @kind wide;
  #L1eb39c.  v4:= v8[v3] @kind wide;
  #L1eb3a0.  v4:= v4 ^< v7 @kind long;
  #L1eb3a2.  v1:= v1 + v4 @kind long;
  #L1eb3a4.  v8[v0]:= v1 @kind wide;
  #L1eb3a8.  v1:= v8[v0] @kind wide;
  #L1eb3ac.  v3:= v8[v3] @kind wide;
  #L1eb3b0.  v1:= v1 + v3 @kind long;
  #L1eb3b2.  v8[v0]:= v1 @kind wide;
  #L1eb3b6.  v0:= 6I;
  #L1eb3b8.  v1:= v8[v0] @kind wide;
  #L1eb3bc.  v3:= 16I;
  #L1eb3c0.  v4:= v8[v3] @kind wide;
  #L1eb3c4.  v4:= v4 ^< v6 @kind long;
  #L1eb3c6.  v1:= v1 + v4 @kind long;
  #L1eb3c8.  v8[v0]:= v1 @kind wide;
  #L1eb3cc.  v1:= v8[v0] @kind wide;
  #L1eb3d0.  v4:= v8[v3] @kind wide;
  #L1eb3d4.  v4:= v4 ^< v7 @kind long;
  #L1eb3d6.  v1:= v1 + v4 @kind long;
  #L1eb3d8.  v8[v0]:= v1 @kind wide;
  #L1eb3dc.  v1:= v8[v0] @kind wide;
  #L1eb3e0.  v3:= v8[v3] @kind wide;
  #L1eb3e4.  v1:= v1 + v3 @kind long;
  #L1eb3e6.  v8[v0]:= v1 @kind wide;
  #L1eb3ea.  v0:= 5I;
  #L1eb3ec.  v1:= v8[v0] @kind wide;
  #L1eb3f0.  v3:= 15I;
  #L1eb3f4.  v4:= v8[v3] @kind wide;
  #L1eb3f8.  v4:= v4 ^< v6 @kind long;
  #L1eb3fa.  v1:= v1 + v4 @kind long;
  #L1eb3fc.  v8[v0]:= v1 @kind wide;
  #L1eb400.  v1:= v8[v0] @kind wide;
  #L1eb404.  v4:= v8[v3] @kind wide;
  #L1eb408.  v4:= v4 ^< v7 @kind long;
  #L1eb40a.  v1:= v1 + v4 @kind long;
  #L1eb40c.  v8[v0]:= v1 @kind wide;
  #L1eb410.  v1:= v8[v0] @kind wide;
  #L1eb414.  v3:= v8[v3] @kind wide;
  #L1eb418.  v1:= v1 + v3 @kind long;
  #L1eb41a.  v8[v0]:= v1 @kind wide;
  #L1eb41e.  v0:= v8[v6] @kind wide;
  #L1eb422.  v2:= 14I;
  #L1eb426.  v3:= v8[v2] @kind wide;
  #L1eb42a.  v3:= v3 ^< v6 @kind long;
  #L1eb42c.  v0:= v0 + v3 @kind long;
  #L1eb42e.  v8[v6]:= v0 @kind wide;
  #L1eb432.  v0:= v8[v6] @kind wide;
  #L1eb436.  v3:= v8[v2] @kind wide;
  #L1eb43a.  v3:= v3 ^< v7 @kind long;
  #L1eb43c.  v0:= v0 + v3 @kind long;
  #L1eb43e.  v8[v6]:= v0 @kind wide;
  #L1eb442.  v0:= v8[v6] @kind wide;
  #L1eb446.  v2:= v8[v2] @kind wide;
  #L1eb44a.  v0:= v0 + v2 @kind long;
  #L1eb44c.  v8[v6]:= v0 @kind wide;
  #L1eb450.  v0:= 3I;
  #L1eb452.  v1:= v8[v0] @kind wide;
  #L1eb456.  v3:= 13I;
  #L1eb45a.  v4:= v8[v3] @kind wide;
  #L1eb45e.  v4:= v4 ^< v6 @kind long;
  #L1eb460.  v1:= v1 + v4 @kind long;
  #L1eb462.  v8[v0]:= v1 @kind wide;
  #L1eb466.  v1:= v8[v0] @kind wide;
  #L1eb46a.  v4:= v8[v3] @kind wide;
  #L1eb46e.  v4:= v4 ^< v7 @kind long;
  #L1eb470.  v1:= v1 + v4 @kind long;
  #L1eb472.  v8[v0]:= v1 @kind wide;
  #L1eb476.  v1:= v8[v0] @kind wide;
  #L1eb47a.  v3:= v8[v3] @kind wide;
  #L1eb47e.  v1:= v1 + v3 @kind long;
  #L1eb480.  v8[v0]:= v1 @kind wide;
  #L1eb484.  v0:= 2I;
  #L1eb486.  v1:= v8[v0] @kind wide;
  #L1eb48a.  v3:= 12I;
  #L1eb48e.  v4:= v8[v3] @kind wide;
  #L1eb492.  v4:= v4 ^< v6 @kind long;
  #L1eb494.  v1:= v1 + v4 @kind long;
  #L1eb496.  v8[v0]:= v1 @kind wide;
  #L1eb49a.  v1:= v8[v0] @kind wide;
  #L1eb49e.  v4:= v8[v3] @kind wide;
  #L1eb4a2.  v4:= v4 ^< v7 @kind long;
  #L1eb4a4.  v1:= v1 + v4 @kind long;
  #L1eb4a6.  v8[v0]:= v1 @kind wide;
  #L1eb4aa.  v1:= v8[v0] @kind wide;
  #L1eb4ae.  v3:= v8[v3] @kind wide;
  #L1eb4b2.  v1:= v1 + v3 @kind long;
  #L1eb4b4.  v8[v0]:= v1 @kind wide;
  #L1eb4b8.  v0:= v8[v7] @kind wide;
  #L1eb4bc.  v2:= 11I;
  #L1eb4c0.  v3:= v8[v2] @kind wide;
  #L1eb4c4.  v3:= v3 ^< v6 @kind long;
  #L1eb4c6.  v0:= v0 + v3 @kind long;
  #L1eb4c8.  v8[v7]:= v0 @kind wide;
  #L1eb4cc.  v0:= v8[v7] @kind wide;
  #L1eb4d0.  v3:= v8[v2] @kind wide;
  #L1eb4d4.  v3:= v3 ^< v7 @kind long;
  #L1eb4d6.  v0:= v0 + v3 @kind long;
  #L1eb4d8.  v8[v7]:= v0 @kind wide;
  #L1eb4dc.  v0:= v8[v7] @kind wide;
  #L1eb4e0.  v2:= v8[v2] @kind wide;
  #L1eb4e4.  v0:= v0 + v2 @kind long;
  #L1eb4e6.  v8[v7]:= v0 @kind wide;
  #L1eb4ea.  v0:= 0I;
  #L1eb4ec.  v1:= v8[v0] @kind wide;
  #L1eb4f0.  v3:= 10I;
  #L1eb4f4.  v4:= v8[v3] @kind wide;
  #L1eb4f8.  v4:= v4 ^< v6 @kind long;
  #L1eb4fa.  v1:= v1 + v4 @kind long;
  #L1eb4fc.  v8[v0]:= v1 @kind wide;
  #L1eb500.  v1:= v8[v0] @kind wide;
  #L1eb504.  v4:= v8[v3] @kind wide;
  #L1eb508.  v4:= v4 ^< v7 @kind long;
  #L1eb50a.  v1:= v1 + v4 @kind long;
  #L1eb50c.  v8[v0]:= v1 @kind wide;
  #L1eb510.  v1:= v8[v0] @kind wide;
  #L1eb514.  v3:= v8[v3] @kind wide;
  #L1eb518.  v1:= v1 + v3 @kind long;
  #L1eb51a.  v8[v0]:= v1 @kind wide;
  #L1eb51e.  return @kind void;
}
procedure `void` `k`(`long`[] v3 @kind object, `long`[] v4 @kind object, `long` v5 ) @signature `Lcom/google/crypto/tink/subtle/h;.k:([J[JJ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1eb530.  v0:= 0I;
  #L1eb532.  v1:= 10I;
  #L1eb536.  if v0 >= v1 then goto L1eb54c;
  #L1eb53a.  v1:= v4[v0] @kind wide;
  #L1eb53e.  v1:= v1 * v5 @kind long;
  #L1eb542.  v3[v0]:= v1 @kind wide;
  #L1eb546.  v0:= v0 + 1;
  #L1eb54a.  goto L1eb532;
  #L1eb54c.  return @kind void;
}
procedure `void` `l`(`long`[] v1 @kind object, `long`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.l:([J[J)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1eb560.  v0:= 19I;
  #L1eb564.  v0:= new `long`[v0];
  #L1eb568.  call `m`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/h;.m:([J[J)V` @kind static;
  #L1eb56e.  call `h`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/h;.h:([J[J)V` @kind static;
  #L1eb574.  return @kind void;
}
procedure `void` `m`(`long`[] v23 @kind object, `long`[] v24 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.m:([J[J)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L1eb588.  v0:= 0I;
  #L1eb58a.  v1:= v24[v0] @kind wide;
  #L1eb58e.  v3:= v24[v0] @kind wide;
  #L1eb592.  v1:= v1 * v3 @kind long;
  #L1eb596.  v23[v0]:= v1 @kind wide;
  #L1eb59a.  v1:= v24[v0] @kind wide;
  #L1eb59e.  v3:= 2L;
  #L1eb5a2.  v1:= v1 * v3 @kind long;
  #L1eb5a6.  v5:= 1I;
  #L1eb5a8.  v6:= v24[v5] @kind wide;
  #L1eb5ac.  v1:= v1 * v6 @kind long;
  #L1eb5b0.  v23[v5]:= v1 @kind wide;
  #L1eb5b4.  v1:= v24[v5] @kind wide;
  #L1eb5b8.  v6:= v24[v5] @kind wide;
  #L1eb5bc.  v1:= v1 * v6 @kind long;
  #L1eb5c0.  v6:= v24[v0] @kind wide;
  #L1eb5c4.  v8:= 2I;
  #L1eb5c6.  v9:= v24[v8] @kind wide;
  #L1eb5ca.  v6:= v6 * v9 @kind long;
  #L1eb5ce.  v1:= v1 + v6 @kind long;
  #L1eb5d0.  v1:= v1 * v3 @kind long;
  #L1eb5d4.  v23[v8]:= v1 @kind wide;
  #L1eb5d8.  v1:= v24[v5] @kind wide;
  #L1eb5dc.  v6:= v24[v8] @kind wide;
  #L1eb5e0.  v1:= v1 * v6 @kind long;
  #L1eb5e4.  v6:= v24[v0] @kind wide;
  #L1eb5e8.  v9:= 3I;
  #L1eb5ea.  v10:= v24[v9] @kind wide;
  #L1eb5ee.  v6:= v6 * v10 @kind long;
  #L1eb5f2.  v1:= v1 + v6 @kind long;
  #L1eb5f4.  v1:= v1 * v3 @kind long;
  #L1eb5f8.  v23[v9]:= v1 @kind wide;
  #L1eb5fc.  v1:= v24[v8] @kind wide;
  #L1eb600.  v6:= v24[v8] @kind wide;
  #L1eb604.  v1:= v1 * v6 @kind long;
  #L1eb608.  v6:= v24[v5] @kind wide;
  #L1eb60c.  v10:= 4L;
  #L1eb610.  v6:= v6 * v10 @kind long;
  #L1eb614.  v12:= v24[v9] @kind wide;
  #L1eb618.  v6:= v6 * v12 @kind long;
  #L1eb61c.  v1:= v1 + v6 @kind long;
  #L1eb61e.  v6:= v24[v0] @kind wide;
  #L1eb622.  v6:= v6 * v3 @kind long;
  #L1eb626.  v12:= 4I;
  #L1eb628.  v13:= v24[v12] @kind wide;
  #L1eb62c.  v6:= v6 * v13 @kind long;
  #L1eb630.  v1:= v1 + v6 @kind long;
  #L1eb632.  v23[v12]:= v1 @kind wide;
  #L1eb636.  v1:= v24[v8] @kind wide;
  #L1eb63a.  v6:= v24[v9] @kind wide;
  #L1eb63e.  v1:= v1 * v6 @kind long;
  #L1eb642.  v6:= v24[v5] @kind wide;
  #L1eb646.  v13:= v24[v12] @kind wide;
  #L1eb64a.  v6:= v6 * v13 @kind long;
  #L1eb64e.  v1:= v1 + v6 @kind long;
  #L1eb650.  v6:= v24[v0] @kind wide;
  #L1eb654.  v13:= 5I;
  #L1eb656.  v14:= v24[v13] @kind wide;
  #L1eb65a.  v6:= v6 * v14 @kind long;
  #L1eb65e.  v1:= v1 + v6 @kind long;
  #L1eb660.  v1:= v1 * v3 @kind long;
  #L1eb664.  v23[v13]:= v1 @kind wide;
  #L1eb668.  v1:= v24[v9] @kind wide;
  #L1eb66c.  v6:= v24[v9] @kind wide;
  #L1eb670.  v1:= v1 * v6 @kind long;
  #L1eb674.  v6:= v24[v8] @kind wide;
  #L1eb678.  v14:= v24[v12] @kind wide;
  #L1eb67c.  v6:= v6 * v14 @kind long;
  #L1eb680.  v1:= v1 + v6 @kind long;
  #L1eb682.  v6:= v24[v0] @kind wide;
  #L1eb686.  v14:= 6I;
  #L1eb688.  v15:= v24[v14] @kind wide;
  #L1eb68c.  v6:= v6 * v15 @kind long;
  #L1eb690.  v1:= v1 + v6 @kind long;
  #L1eb692.  v6:= v24[v5] @kind wide;
  #L1eb696.  v6:= v6 * v3 @kind long;
  #L1eb69a.  v15:= v24[v13] @kind wide;
  #L1eb69e.  v6:= v6 * v15 @kind long;
  #L1eb6a2.  v1:= v1 + v6 @kind long;
  #L1eb6a4.  v1:= v1 * v3 @kind long;
  #L1eb6a8.  v23[v14]:= v1 @kind wide;
  #L1eb6ac.  v1:= v24[v9] @kind wide;
  #L1eb6b0.  v6:= v24[v12] @kind wide;
  #L1eb6b4.  v1:= v1 * v6 @kind long;
  #L1eb6b8.  v6:= v24[v8] @kind wide;
  #L1eb6bc.  v15:= v24[v13] @kind wide;
  #L1eb6c0.  v6:= v6 * v15 @kind long;
  #L1eb6c4.  v1:= v1 + v6 @kind long;
  #L1eb6c6.  v6:= v24[v5] @kind wide;
  #L1eb6ca.  v15:= v24[v14] @kind wide;
  #L1eb6ce.  v6:= v6 * v15 @kind long;
  #L1eb6d2.  v1:= v1 + v6 @kind long;
  #L1eb6d4.  v6:= v24[v0] @kind wide;
  #L1eb6d8.  v15:= 7I;
  #L1eb6da.  v16:= v24[v15] @kind wide;
  #L1eb6de.  v6:= v6 * v16 @kind long;
  #L1eb6e2.  v1:= v1 + v6 @kind long;
  #L1eb6e4.  v1:= v1 * v3 @kind long;
  #L1eb6e8.  v23[v15]:= v1 @kind wide;
  #L1eb6ec.  v1:= v24[v12] @kind wide;
  #L1eb6f0.  v6:= v24[v12] @kind wide;
  #L1eb6f4.  v1:= v1 * v6 @kind long;
  #L1eb6f8.  v6:= v24[v8] @kind wide;
  #L1eb6fc.  v16:= v24[v14] @kind wide;
  #L1eb700.  v6:= v6 * v16 @kind long;
  #L1eb704.  v16:= v24[v0] @kind wide;
  #L1eb708.  v18:= 8I;
  #L1eb70c.  v19:= v24[v18] @kind wide;
  #L1eb710.  v16:= v16 * v19 @kind long;
  #L1eb714.  v6:= v6 + v16 @kind long;
  #L1eb718.  v16:= v24[v5] @kind wide;
  #L1eb71c.  v19:= v24[v15] @kind wide;
  #L1eb720.  v16:= v16 * v19 @kind long;
  #L1eb724.  v19:= v24[v9] @kind wide;
  #L1eb728.  v21:= v24[v13] @kind wide;
  #L1eb72c.  v19:= v19 * v21 @kind long;
  #L1eb730.  v16:= v16 + v19 @kind long;
  #L1eb734.  v16:= v16 * v3 @kind long;
  #L1eb738.  v6:= v6 + v16 @kind long;
  #L1eb73c.  v6:= v6 * v3 @kind long;
  #L1eb740.  v1:= v1 + v6 @kind long;
  #L1eb742.  v23[v18]:= v1 @kind wide;
  #L1eb746.  v1:= v24[v12] @kind wide;
  #L1eb74a.  v6:= v24[v13] @kind wide;
  #L1eb74e.  v1:= v1 * v6 @kind long;
  #L1eb752.  v6:= v24[v9] @kind wide;
  #L1eb756.  v16:= v24[v14] @kind wide;
  #L1eb75a.  v6:= v6 * v16 @kind long;
  #L1eb75e.  v1:= v1 + v6 @kind long;
  #L1eb760.  v6:= v24[v8] @kind wide;
  #L1eb764.  v16:= v24[v15] @kind wide;
  #L1eb768.  v6:= v6 * v16 @kind long;
  #L1eb76c.  v1:= v1 + v6 @kind long;
  #L1eb76e.  v6:= v24[v5] @kind wide;
  #L1eb772.  v16:= v24[v18] @kind wide;
  #L1eb776.  v6:= v6 * v16 @kind long;
  #L1eb77a.  v1:= v1 + v6 @kind long;
  #L1eb77c.  v6:= v24[v0] @kind wide;
  #L1eb780.  v0:= 9I;
  #L1eb784.  v16:= v24[v0] @kind wide;
  #L1eb788.  v6:= v6 * v16 @kind long;
  #L1eb78c.  v1:= v1 + v6 @kind long;
  #L1eb78e.  v1:= v1 * v3 @kind long;
  #L1eb792.  v23[v0]:= v1 @kind wide;
  #L1eb796.  v1:= v24[v13] @kind wide;
  #L1eb79a.  v6:= v24[v13] @kind wide;
  #L1eb79e.  v1:= v1 * v6 @kind long;
  #L1eb7a2.  v6:= v24[v12] @kind wide;
  #L1eb7a6.  v16:= v24[v14] @kind wide;
  #L1eb7aa.  v6:= v6 * v16 @kind long;
  #L1eb7ae.  v1:= v1 + v6 @kind long;
  #L1eb7b0.  v6:= v24[v8] @kind wide;
  #L1eb7b4.  v16:= v24[v18] @kind wide;
  #L1eb7b8.  v6:= v6 * v16 @kind long;
  #L1eb7bc.  v1:= v1 + v6 @kind long;
  #L1eb7be.  v6:= v24[v9] @kind wide;
  #L1eb7c2.  v16:= v24[v15] @kind wide;
  #L1eb7c6.  v6:= v6 * v16 @kind long;
  #L1eb7ca.  v16:= v24[v5] @kind wide;
  #L1eb7ce.  v19:= v24[v0] @kind wide;
  #L1eb7d2.  v16:= v16 * v19 @kind long;
  #L1eb7d6.  v6:= v6 + v16 @kind long;
  #L1eb7da.  v6:= v6 * v3 @kind long;
  #L1eb7de.  v1:= v1 + v6 @kind long;
  #L1eb7e0.  v1:= v1 * v3 @kind long;
  #L1eb7e4.  v5:= 10I;
  #L1eb7e8.  v23[v5]:= v1 @kind wide;
  #L1eb7ec.  v1:= v24[v13] @kind wide;
  #L1eb7f0.  v5:= v24[v14] @kind wide;
  #L1eb7f4.  v1:= v1 * v5 @kind long;
  #L1eb7f8.  v5:= v24[v12] @kind wide;
  #L1eb7fc.  v16:= v24[v15] @kind wide;
  #L1eb800.  v5:= v5 * v16 @kind long;
  #L1eb804.  v1:= v1 + v5 @kind long;
  #L1eb806.  v5:= v24[v9] @kind wide;
  #L1eb80a.  v16:= v24[v18] @kind wide;
  #L1eb80e.  v5:= v5 * v16 @kind long;
  #L1eb812.  v1:= v1 + v5 @kind long;
  #L1eb814.  v5:= v24[v8] @kind wide;
  #L1eb818.  v7:= v24[v0] @kind wide;
  #L1eb81c.  v5:= v5 * v7 @kind long;
  #L1eb820.  v1:= v1 + v5 @kind long;
  #L1eb822.  v1:= v1 * v3 @kind long;
  #L1eb826.  v5:= 11I;
  #L1eb82a.  v23[v5]:= v1 @kind wide;
  #L1eb82e.  v1:= v24[v14] @kind wide;
  #L1eb832.  v5:= v24[v14] @kind wide;
  #L1eb836.  v1:= v1 * v5 @kind long;
  #L1eb83a.  v5:= v24[v12] @kind wide;
  #L1eb83e.  v7:= v24[v18] @kind wide;
  #L1eb842.  v5:= v5 * v7 @kind long;
  #L1eb846.  v7:= v24[v13] @kind wide;
  #L1eb84a.  v16:= v24[v15] @kind wide;
  #L1eb84e.  v7:= v7 * v16 @kind long;
  #L1eb852.  v16:= v24[v9] @kind wide;
  #L1eb856.  v19:= v24[v0] @kind wide;
  #L1eb85a.  v16:= v16 * v19 @kind long;
  #L1eb85e.  v7:= v7 + v16 @kind long;
  #L1eb862.  v7:= v7 * v3 @kind long;
  #L1eb866.  v5:= v5 + v7 @kind long;
  #L1eb868.  v5:= v5 * v3 @kind long;
  #L1eb86c.  v1:= v1 + v5 @kind long;
  #L1eb86e.  v5:= 12I;
  #L1eb872.  v23[v5]:= v1 @kind wide;
  #L1eb876.  v1:= v24[v14] @kind wide;
  #L1eb87a.  v5:= v24[v15] @kind wide;
  #L1eb87e.  v1:= v1 * v5 @kind long;
  #L1eb882.  v5:= v24[v13] @kind wide;
  #L1eb886.  v7:= v24[v18] @kind wide;
  #L1eb88a.  v5:= v5 * v7 @kind long;
  #L1eb88e.  v1:= v1 + v5 @kind long;
  #L1eb890.  v5:= v24[v12] @kind wide;
  #L1eb894.  v7:= v24[v0] @kind wide;
  #L1eb898.  v5:= v5 * v7 @kind long;
  #L1eb89c.  v1:= v1 + v5 @kind long;
  #L1eb89e.  v1:= v1 * v3 @kind long;
  #L1eb8a2.  v5:= 13I;
  #L1eb8a6.  v23[v5]:= v1 @kind wide;
  #L1eb8aa.  v1:= v24[v15] @kind wide;
  #L1eb8ae.  v5:= v24[v15] @kind wide;
  #L1eb8b2.  v1:= v1 * v5 @kind long;
  #L1eb8b6.  v5:= v24[v14] @kind wide;
  #L1eb8ba.  v7:= v24[v18] @kind wide;
  #L1eb8be.  v5:= v5 * v7 @kind long;
  #L1eb8c2.  v1:= v1 + v5 @kind long;
  #L1eb8c4.  v5:= v24[v13] @kind wide;
  #L1eb8c8.  v5:= v5 * v3 @kind long;
  #L1eb8cc.  v7:= v24[v0] @kind wide;
  #L1eb8d0.  v5:= v5 * v7 @kind long;
  #L1eb8d4.  v1:= v1 + v5 @kind long;
  #L1eb8d6.  v1:= v1 * v3 @kind long;
  #L1eb8da.  v5:= 14I;
  #L1eb8de.  v23[v5]:= v1 @kind wide;
  #L1eb8e2.  v1:= v24[v15] @kind wide;
  #L1eb8e6.  v5:= v24[v18] @kind wide;
  #L1eb8ea.  v1:= v1 * v5 @kind long;
  #L1eb8ee.  v5:= v24[v14] @kind wide;
  #L1eb8f2.  v7:= v24[v0] @kind wide;
  #L1eb8f6.  v5:= v5 * v7 @kind long;
  #L1eb8fa.  v1:= v1 + v5 @kind long;
  #L1eb8fc.  v1:= v1 * v3 @kind long;
  #L1eb900.  v5:= 15I;
  #L1eb904.  v23[v5]:= v1 @kind wide;
  #L1eb908.  v1:= v24[v18] @kind wide;
  #L1eb90c.  v5:= v24[v18] @kind wide;
  #L1eb910.  v1:= v1 * v5 @kind long;
  #L1eb914.  v5:= v24[v15] @kind wide;
  #L1eb918.  v5:= v5 * v10 @kind long;
  #L1eb91c.  v7:= v24[v0] @kind wide;
  #L1eb920.  v5:= v5 * v7 @kind long;
  #L1eb924.  v1:= v1 + v5 @kind long;
  #L1eb926.  v5:= 16I;
  #L1eb92a.  v23[v5]:= v1 @kind wide;
  #L1eb92e.  v1:= v24[v18] @kind wide;
  #L1eb932.  v1:= v1 * v3 @kind long;
  #L1eb936.  v5:= v24[v0] @kind wide;
  #L1eb93a.  v1:= v1 * v5 @kind long;
  #L1eb93e.  v5:= 17I;
  #L1eb942.  v23[v5]:= v1 @kind wide;
  #L1eb946.  v1:= v24[v0] @kind wide;
  #L1eb94a.  v1:= v1 * v3 @kind long;
  #L1eb94e.  v3:= v24[v0] @kind wide;
  #L1eb952.  v1:= v1 * v3 @kind long;
  #L1eb956.  v0:= 18I;
  #L1eb95a.  v23[v0]:= v1 @kind wide;
  #L1eb95e.  return @kind void;
}
procedure `void` `n`(`long`[] v0 @kind object, `long`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.n:([J[J)V` @AccessFlag STATIC {
    temp;

  #L1eb970.  call `o`(v0, v1, v0) @signature `Lcom/google/crypto/tink/subtle/h;.o:([J[J[J)V` @kind static;
  #L1eb976.  return @kind void;
}
procedure `void` `o`(`long`[] v5 @kind object, `long`[] v6 @kind object, `long`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.o:([J[J[J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1eb988.  v0:= 0I;
  #L1eb98a.  v1:= 10I;
  #L1eb98e.  if v0 >= v1 then goto L1eb9a6;
  #L1eb992.  v1:= v6[v0] @kind wide;
  #L1eb996.  v3:= v7[v0] @kind wide;
  #L1eb99a.  v1:= v1 - v3 @kind long;
  #L1eb99c.  v5[v0]:= v1 @kind wide;
  #L1eb9a0.  v0:= v0 + 1;
  #L1eb9a4.  goto L1eb98a;
  #L1eb9a6.  return @kind void;
}
procedure `void` `p`(`long`[] v0 @kind object, `long`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.p:([J[J)V` @AccessFlag STATIC {
    temp;

  #L1eb9b8.  call `q`(v0, v0, v1) @signature `Lcom/google/crypto/tink/subtle/h;.q:([J[J[J)V` @kind static;
  #L1eb9be.  return @kind void;
}
procedure `void` `q`(`long`[] v5 @kind object, `long`[] v6 @kind object, `long`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/h;.q:([J[J[J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1eb9d0.  v0:= 0I;
  #L1eb9d2.  v1:= 10I;
  #L1eb9d6.  if v0 >= v1 then goto L1eb9ee;
  #L1eb9da.  v1:= v6[v0] @kind wide;
  #L1eb9de.  v3:= v7[v0] @kind wide;
  #L1eb9e2.  v1:= v1 + v3 @kind long;
  #L1eb9e4.  v5[v0]:= v1 @kind wide;
  #L1eb9e8.  v0:= v0 + 1;
  #L1eb9ec.  goto L1eb9d2;
  #L1eb9ee.  return @kind void;
}
