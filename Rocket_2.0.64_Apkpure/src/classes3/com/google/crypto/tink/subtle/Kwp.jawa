record `com.google.crypto.tink.subtle.Kwp` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.KeyWrap` @kind interface {
  `javax.crypto.SecretKey` `com.google.crypto.tink.subtle.Kwp.a` @AccessFlag PRIVATE_FINAL;
}
global `byte`[] `@@com.google.crypto.tink.subtle.Kwp.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Kwp;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ec098.  v0:= 4I;
  #L1ec09a.  v0:= new `byte`[v0];
  #L1ec09e.  goto L1ec0ac;
  #L1ec0a4.  `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] := v0 @kind object;
  #L1ec0a8.  return @kind void;
  #L1ec0aa.  
  #L1ec0ac.  v0:= (-90I, 89I, 89I, -90I) @kind object;
  #L1ec0b7.  goto L1ec0a4;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Kwp` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ec0c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ec0ce.  v0:= length @variable v3;
  #L1ec0d0.  v1:= 16I;
  #L1ec0d4.  if v0 == v1 then goto L1ec0f4;
  #L1ec0d8.  v0:= length @variable v3;
  #L1ec0da.  v1:= 32I;
  #L1ec0de.  if v0 != v1 then goto L1ec0e4;
  #L1ec0e2.  goto L1ec0f4;
  #L1ec0e4.  v3:= new `java.security.GeneralSecurityException`;
  #L1ec0e8.  v0:= "Unsupported key length" @kind object;
  #L1ec0ec.  call `<init>`(v3, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ec0f2.  throw v3;
  #L1ec0f4.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L1ec0f8.  v1:= "AES" @kind object;
  #L1ec0fc.  call `<init>`(v0, v3, v1) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1ec102.  v2.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` := v0 @kind object;
  #L1ec106.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.Kwp` v16 @kind this, `byte`[] v17 @kind object, `byte`[] v18 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.a:([B[B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1ebcf8.  v0:= v16 @kind object;
  #L1ebcfc.  v1:= v17 @kind object;
  #L1ebd00.  v2:= v18 @kind object;
  #L1ebd04.  v3:= length @variable v2;
  #L1ebd06.  v4:= 8I;
  #L1ebd0a.  if v3 <= v4 then goto L1ebde0;
  #L1ebd0e.  v3:= length @variable v2;
  #L1ebd10.  v5:= 2147483631I;
  #L1ebd16.  if v3 > v5 then goto L1ebde0;
  #L1ebd1a.  v3:= length @variable v1;
  #L1ebd1c.  if v3 != v4 then goto L1ebde0;
  #L1ebd20.  v3:= length @variable v2;
  #L1ebd22.  call temp:= `c`(v0, v3) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L1ebd28.  v3:= temp;
  #L1ebd2a.  v5:= new `byte`[v3];
  #L1ebd2e.  v6:= length @variable v1;
  #L1ebd30.  v7:= 0I;
  #L1ebd32.  call `arraycopy`(v1, v7, v5, v7, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebd38.  v1:= length @variable v2;
  #L1ebd3a.  call `arraycopy`(v2, v7, v5, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebd40.  v3:= v3 / v4 @kind int;
  #L1ebd42.  v1:= 1I;
  #L1ebd44.  v3:= v3 - v1 @kind int;
  #L1ebd46.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ebd4a.  v6:= "AES/ECB/NoPadding" @kind object;
  #L1ebd4e.  call temp:= `getInstance`(v2, v6) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ebd54.  v2:= temp @kind object;
  #L1ebd56.  v2:= (`javax.crypto.Cipher`) v2 @kind object;
  #L1ebd5a.  v6:= v0.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L1ebd5e.  call `init`(v2, v1, v6) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1ebd64.  v6:= 16I;
  #L1ebd68.  v8:= new `byte`[v6];
  #L1ebd6c.  call `arraycopy`(v5, v7, v8, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebd72.  v9:= 0I;
  #L1ebd74.  v10:= 6I;
  #L1ebd76.  if v9 >= v10 then goto L1ebdd8;
  #L1ebd7a.  v10:= 0I;
  #L1ebd7c.  if v10 >= v3 then goto L1ebdd0;
  #L1ebd80.  v11:= v10 + 1;
  #L1ebd84.  v12:= v11 * 8;
  #L1ebd88.  call `arraycopy`(v5, v12, v8, v4, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebd8e.  call temp:= `doFinal`(v2, v8, v7, v6, v8) @signature `Ljavax/crypto/Cipher;.doFinal:([BII[B)I` @kind virtual;
  #L1ebd94.  v13:= v9 * v3 @kind int;
  #L1ebd98.  v13:= v13 + v10 @kind int;
  #L1ebd9a.  v13:= v13 + v1 @kind int;
  #L1ebd9c.  v10:= 0I;
  #L1ebd9e.  v14:= 4I;
  #L1ebda0.  if v10 >= v14 then goto L1ebdc4;
  #L1ebda4.  v14:= v10 - 7;
  #L1ebda8.  v15:= v8[v14] @kind byte;
  #L1ebdac.  v1:= v13 ^& 255;
  #L1ebdb0.  v1:= (`byte`) v1 @kind i2b;
  #L1ebdb2.  v1:= v1 ^~ v15 @kind int;
  #L1ebdb4.  v1:= (`byte`) v1 @kind i2b;
  #L1ebdb6.  v8[v14]:= v1 @kind byte;
  #L1ebdba.  v13:= v13 ^>> v4 @kind int;
  #L1ebdbc.  v10:= v10 + 1;
  #L1ebdc0.  v1:= 1I;
  #L1ebdc2.  goto L1ebd9e;
  #L1ebdc4.  call `arraycopy`(v8, v4, v5, v12, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebdca.  v10:= v11;
  #L1ebdcc.  v1:= 1I;
  #L1ebdce.  goto L1ebd7c;
  #L1ebdd0.  v9:= v9 + 1;
  #L1ebdd4.  v1:= 1I;
  #L1ebdd6.  goto L1ebd74;
  #L1ebdd8.  call `arraycopy`(v8, v7, v5, v7, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebdde.  return v5 @kind object;
  #L1ebde0.  v1:= new `java.security.GeneralSecurityException`;
  #L1ebde4.  v2:= "computeW called with invalid parameters" @kind object;
  #L1ebde8.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebdee.  throw v1;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.Kwp` v14 @kind this, `byte`[] v15 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.b:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1ebe00.  v0:= length @variable v15;
  #L1ebe02.  v1:= 24I;
  #L1ebe06.  if v0 < v1 then goto L1ebec4;
  #L1ebe0a.  v0:= length @variable v15;
  #L1ebe0c.  v1:= 8I;
  #L1ebe10.  v0:= v0 %% v1 @kind int;
  #L1ebe12.  if v0 != 0 then goto L1ebec4;
  #L1ebe16.  v0:= length @variable v15;
  #L1ebe18.  call temp:= `copyOf`(v15, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1ebe1e.  v15:= temp @kind object;
  #L1ebe20.  v0:= length @variable v15;
  #L1ebe22.  v0:= v0 / v1 @kind int;
  #L1ebe24.  v0:= v0 + -1;
  #L1ebe28.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ebe2c.  v3:= "AES/ECB/NoPadding" @kind object;
  #L1ebe30.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ebe36.  v2:= temp @kind object;
  #L1ebe38.  v2:= (`javax.crypto.Cipher`) v2 @kind object;
  #L1ebe3c.  v3:= 2I;
  #L1ebe3e.  v4:= v14.`com.google.crypto.tink.subtle.Kwp.a` @type ^`javax.crypto.SecretKey` @kind object;
  #L1ebe42.  call `init`(v2, v3, v4) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1ebe48.  v3:= 16I;
  #L1ebe4c.  v4:= new `byte`[v3];
  #L1ebe50.  v5:= 0I;
  #L1ebe52.  call `arraycopy`(v15, v5, v4, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebe58.  v6:= 5I;
  #L1ebe5a.  if v6 < 0 then goto L1ebebc;
  #L1ebe5e.  v7:= v0 + -1;
  #L1ebe62.  if v7 < 0 then goto L1ebeb6;
  #L1ebe66.  v8:= v7 + 1;
  #L1ebe6a.  v8:= v8 * 8;
  #L1ebe6e.  call `arraycopy`(v15, v8, v4, v1, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebe74.  v9:= v6 * v0 @kind int;
  #L1ebe78.  v9:= v9 + v7 @kind int;
  #L1ebe7a.  v9:= v9 + 1;
  #L1ebe7e.  v10:= 0I;
  #L1ebe80.  v11:= 4I;
  #L1ebe82.  if v10 >= v11 then goto L1ebea4;
  #L1ebe86.  v11:= v10 - 7;
  #L1ebe8a.  v12:= v4[v11] @kind byte;
  #L1ebe8e.  v13:= v9 ^& 255;
  #L1ebe92.  v13:= (`byte`) v13 @kind i2b;
  #L1ebe94.  v12:= v12 ^~ v13 @kind int;
  #L1ebe96.  v12:= (`byte`) v12 @kind i2b;
  #L1ebe98.  v4[v11]:= v12 @kind byte;
  #L1ebe9c.  v9:= v9 ^>> v1 @kind int;
  #L1ebe9e.  v10:= v10 + 1;
  #L1ebea2.  goto L1ebe80;
  #L1ebea4.  call temp:= `doFinal`(v2, v4, v5, v3, v4) @signature `Ljavax/crypto/Cipher;.doFinal:([BII[B)I` @kind virtual;
  #L1ebeaa.  call `arraycopy`(v4, v1, v15, v8, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebeb0.  v7:= v7 + -1;
  #L1ebeb4.  goto L1ebe62;
  #L1ebeb6.  v6:= v6 + -1;
  #L1ebeba.  goto L1ebe5a;
  #L1ebebc.  call `arraycopy`(v4, v5, v15, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ebec2.  return v15 @kind object;
  #L1ebec4.  v15:= new `java.security.GeneralSecurityException`;
  #L1ebec8.  v0:= "Incorrect data size" @kind object;
  #L1ebecc.  call `<init>`(v15, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebed2.  throw v15;
}
procedure `int` `c`(`com.google.crypto.tink.subtle.Kwp` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ec074.  v0:= v2 + 7;
  #L1ec078.  v0:= v0 %% 8;
  #L1ec07c.  v0:= v0 - 7;
  #L1ec080.  v2:= v2 + v0 @kind int;
  #L1ec082.  v2:= v2 + 8;
  #L1ec086.  return v2;
}
procedure `byte`[] `unwrap`(`com.google.crypto.tink.subtle.Kwp` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.unwrap:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ebee4.  v0:= length @variable v7;
  #L1ebee6.  v1:= 16I;
  #L1ebeea.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L1ebef0.  v1:= temp;
  #L1ebef2.  if v0 < v1 then goto L1ebfc6;
  #L1ebef6.  v0:= length @variable v7;
  #L1ebef8.  v1:= 4096I;
  #L1ebefc.  call temp:= `c`(v6, v1) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L1ebf02.  v1:= temp;
  #L1ebf04.  if v0 > v1 then goto L1ebfb6;
  #L1ebf08.  v0:= length @variable v7;
  #L1ebf0a.  v1:= 8I;
  #L1ebf0e.  v0:= v0 %% v1 @kind int;
  #L1ebf10.  if v0 != 0 then goto L1ebfa6;
  #L1ebf14.  call temp:= `b`(v6, v7) @signature `Lcom/google/crypto/tink/subtle/Kwp;.b:([B)[B` @kind direct;
  #L1ebf1a.  v7:= temp @kind object;
  #L1ebf1c.  v0:= 1I;
  #L1ebf1e.  v2:= 0I;
  #L1ebf20.  v3:= 0I;
  #L1ebf22.  v4:= 4I;
  #L1ebf24.  if v3 >= v4 then goto L1ebf40;
  #L1ebf28.  v4:= `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] @kind object;
  #L1ebf2c.  v4:= v4[v3] @kind byte;
  #L1ebf30.  v5:= v7[v3] @kind byte;
  #L1ebf34.  if v4 == v5 then goto L1ebf3a;
  #L1ebf38.  v0:= 0I;
  #L1ebf3a.  v3:= v3 + 1;
  #L1ebf3e.  goto L1ebf22;
  #L1ebf40.  v3:= 0I;
  #L1ebf42.  if v4 >= v1 then goto L1ebf5a;
  #L1ebf46.  v3:= v3 ^< 8;
  #L1ebf4a.  v5:= v7[v4] @kind byte;
  #L1ebf4e.  v5:= v5 ^& 255;
  #L1ebf52.  v3:= v3 + v5 @kind int;
  #L1ebf54.  v4:= v4 + 1;
  #L1ebf58.  goto L1ebf42;
  #L1ebf5a.  call temp:= `c`(v6, v3) @signature `Lcom/google/crypto/tink/subtle/Kwp;.c:(I)I` @kind direct;
  #L1ebf60.  v4:= temp;
  #L1ebf62.  v5:= length @variable v7;
  #L1ebf64.  if v4 == v5 then goto L1ebf6a;
  #L1ebf68.  goto L1ebf86;
  #L1ebf6a.  v4:= v3 + 8;
  #L1ebf6e.  v5:= length @variable v7;
  #L1ebf70.  if v4 >= v5 then goto L1ebf84;
  #L1ebf74.  v5:= v7[v4] @kind byte;
  #L1ebf78.  if v5 == 0 then goto L1ebf7e;
  #L1ebf7c.  v0:= 0I;
  #L1ebf7e.  v4:= v4 + 1;
  #L1ebf82.  goto L1ebf6e;
  #L1ebf84.  v2:= v0;
  #L1ebf86.  if v2 == 0 then goto L1ebf96;
  #L1ebf8a.  v3:= v3 + v1 @kind int;
  #L1ebf8c.  call temp:= `copyOfRange`(v7, v1, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1ebf92.  v7:= temp @kind object;
  #L1ebf94.  return v7 @kind object;
  #L1ebf96.  v7:= new `javax.crypto.BadPaddingException`;
  #L1ebf9a.  v0:= "Invalid padding" @kind object;
  #L1ebf9e.  call `<init>`(v7, v0) @signature `Ljavax/crypto/BadPaddingException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebfa4.  throw v7;
  #L1ebfa6.  v7:= new `java.security.GeneralSecurityException`;
  #L1ebfaa.  v0:= "Wrapped key size must be a multiple of 8 bytes" @kind object;
  #L1ebfae.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebfb4.  throw v7;
  #L1ebfb6.  v7:= new `java.security.GeneralSecurityException`;
  #L1ebfba.  v0:= "Wrapped key size is too large" @kind object;
  #L1ebfbe.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebfc4.  throw v7;
  #L1ebfc6.  v7:= new `java.security.GeneralSecurityException`;
  #L1ebfca.  v0:= "Wrapped key size is too small" @kind object;
  #L1ebfce.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ebfd4.  throw v7;
}
procedure `byte`[] `wrap`(`com.google.crypto.tink.subtle.Kwp` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Kwp;.wrap:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ebfe8.  v0:= length @variable v7;
  #L1ebfea.  v1:= 16I;
  #L1ebfee.  if v0 < v1 then goto L1ec052;
  #L1ebff2.  v0:= length @variable v7;
  #L1ebff4.  v1:= 4096I;
  #L1ebff8.  if v0 > v1 then goto L1ec042;
  #L1ebffc.  v0:= 8I;
  #L1ec000.  v1:= new `byte`[v0];
  #L1ec004.  v2:= `@@com.google.crypto.tink.subtle.Kwp.b` @type ^`byte`[] @kind object;
  #L1ec008.  v3:= length @variable v2;
  #L1ec00a.  v4:= 0I;
  #L1ec00c.  call `arraycopy`(v2, v4, v1, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ec012.  v2:= 4I;
  #L1ec014.  if v4 >= v2 then goto L1ec038;
  #L1ec018.  v2:= v4 + 4;
  #L1ec01c.  v3:= length @variable v7;
  #L1ec01e.  v5:= v4 - 3;
  #L1ec022.  v5:= v5 * 8;
  #L1ec026.  v3:= v3 ^> v5 @kind int;
  #L1ec028.  v3:= v3 ^& 255;
  #L1ec02c.  v3:= (`byte`) v3 @kind i2b;
  #L1ec02e.  v1[v2]:= v3 @kind byte;
  #L1ec032.  v4:= v4 + 1;
  #L1ec036.  goto L1ec012;
  #L1ec038.  call temp:= `a`(v6, v1, v7) @signature `Lcom/google/crypto/tink/subtle/Kwp;.a:([B[B)[B` @kind direct;
  #L1ec03e.  v7:= temp @kind object;
  #L1ec040.  return v7 @kind object;
  #L1ec042.  v7:= new `java.security.GeneralSecurityException`;
  #L1ec046.  v0:= "Key size of key to wrap too large" @kind object;
  #L1ec04a.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ec050.  throw v7;
  #L1ec052.  v7:= new `java.security.GeneralSecurityException`;
  #L1ec056.  v0:= "Key size of key to wrap too small" @kind object;
  #L1ec05a.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ec060.  throw v7;
}
