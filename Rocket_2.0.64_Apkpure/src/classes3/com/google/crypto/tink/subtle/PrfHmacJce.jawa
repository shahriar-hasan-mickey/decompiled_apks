record `com.google.crypto.tink.subtle.PrfHmacJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.prf.Prf` @kind interface {
  `java.lang.ThreadLocal` `com.google.crypto.tink.subtle.PrfHmacJce.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.PrfHmacJce.b` @AccessFlag PRIVATE_FINAL;
  `java.security.Key` `com.google.crypto.tink.subtle.PrfHmacJce.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.PrfHmacJce.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.PrfHmacJce` v2 @kind this, `java.lang.String` v3 @kind object, `java.security.Key` v4 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.<init>:(Ljava/lang/String;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ecf00.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ecf06.  v0:= new `com.google.crypto.tink.subtle.PrfHmacJce$a`;
  #L1ecf0a.  call `<init>`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce$a;.<init>:(Lcom/google/crypto/tink/subtle/PrfHmacJce;)V` @kind direct;
  #L1ecf10.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.a` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L1ecf14.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.b` @type ^`java.lang.String` := v3 @kind object;
  #L1ecf18.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.c` @type ^`java.security.Key` := v4 @kind object;
  #L1ecf1c.  call temp:= `getEncoded`(v4) @signature `Ljava/security/Key;.getEncoded:()[B` @kind interface;
  #L1ecf22.  v4:= temp @kind object;
  #L1ecf24.  v4:= length @variable v4;
  #L1ecf26.  v1:= 16I;
  #L1ecf2a.  if v4 < v1 then goto L1ecffe;
  #L1ecf2e.  call temp:= `hashCode`(v3) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1ecf34.  v4:= -1I;
  #L1ecf36.  call temp:= `hashCode`(v3) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L1ecf3c.  v1:= temp;
  #L1ecf3e.  goto L1ed010;
  #L1ecf44.  goto L1ecf9c;
  #L1ecf46.  v1:= "HMACSHA512" @kind object;
  #L1ecf4a.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ecf50.  v1:= temp;
  #L1ecf52.  if v1 != 0 then goto L1ecf58;
  #L1ecf56.  goto L1ecf9c;
  #L1ecf58.  v4:= 3I;
  #L1ecf5a.  goto L1ecf9c;
  #L1ecf5c.  v1:= "HMACSHA384" @kind object;
  #L1ecf60.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ecf66.  v1:= temp;
  #L1ecf68.  if v1 != 0 then goto L1ecf6e;
  #L1ecf6c.  goto L1ecf9c;
  #L1ecf6e.  v4:= 2I;
  #L1ecf70.  goto L1ecf9c;
  #L1ecf72.  v1:= "HMACSHA256" @kind object;
  #L1ecf76.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ecf7c.  v1:= temp;
  #L1ecf7e.  if v1 != 0 then goto L1ecf84;
  #L1ecf82.  goto L1ecf9c;
  #L1ecf84.  v4:= 1I;
  #L1ecf86.  goto L1ecf9c;
  #L1ecf88.  v1:= "HMACSHA1" @kind object;
  #L1ecf8c.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ecf92.  v1:= temp;
  #L1ecf94.  if v1 != 0 then goto L1ecf9a;
  #L1ecf98.  goto L1ecf9c;
  #L1ecf9a.  v4:= 0I;
  #L1ecf9c.  goto L1ed034;
  #L1ecfa2.  v4:= new `java.security.NoSuchAlgorithmException`;
  #L1ecfa6.  v0:= new `java.lang.StringBuilder`;
  #L1ecfaa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ecfb0.  v1:= "unknown Hmac algorithm: " @kind object;
  #L1ecfb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ecfba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ecfc0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ecfc6.  v3:= temp @kind object;
  #L1ecfc8.  call `<init>`(v4, v3) @signature `Ljava/security/NoSuchAlgorithmException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ecfce.  throw v4;
  #L1ecfd0.  v3:= 64I;
  #L1ecfd4.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int` := v3;
  #L1ecfd8.  goto L1ecff6;
  #L1ecfda.  v3:= 48I;
  #L1ecfde.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int` := v3;
  #L1ecfe2.  goto L1ecff6;
  #L1ecfe4.  v3:= 32I;
  #L1ecfe8.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int` := v3;
  #L1ecfec.  goto L1ecff6;
  #L1ecfee.  v3:= 20I;
  #L1ecff2.  v2.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int` := v3;
  #L1ecff6.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ecffc.  return @kind void;
  #L1ecffe.  v3:= new `java.security.InvalidAlgorithmParameterException`;
  #L1ed002.  v4:= "key size too small, need at least 16 bytes" @kind object;
  #L1ed006.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed00c.  throw v3;
  #L1ed00e.  
  #L1ed010.  switch v1
                  | -1823053428 => goto L1ecf88
                  | 392315118 => goto L1ecf72
                  | 392316170 => goto L1ecf5c
                  | 392317873 => goto L1ecf46
                  | else => goto L1ecf44;
  #L1ed034.  switch v4
                  | 0 => goto L1ecfee
                  | 1 => goto L1ecfe4
                  | 2 => goto L1ecfda
                  | 3 => goto L1ecfd0
                  | else => goto L1ecfa2;
}
procedure `java.lang.String` `a`(`com.google.crypto.tink.subtle.PrfHmacJce` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.a:(Lcom/google/crypto/tink/subtle/PrfHmacJce;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1eced0.  v0:= v0.`com.google.crypto.tink.subtle.PrfHmacJce.b` @type ^`java.lang.String` @kind object;
  #L1eced4.  return v0 @kind object;
}
procedure `java.security.Key` `b`(`com.google.crypto.tink.subtle.PrfHmacJce` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.b:(Lcom/google/crypto/tink/subtle/PrfHmacJce;)Ljava/security/Key;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1ecee8.  v0:= v0.`com.google.crypto.tink.subtle.PrfHmacJce.c` @type ^`java.security.Key` @kind object;
  #L1eceec.  return v0 @kind object;
}
procedure `byte`[] `compute`(`com.google.crypto.tink.subtle.PrfHmacJce` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.compute:([BI)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ece58.  v0:= v1.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int`;
  #L1ece5c.  if v3 > v0 then goto L1ece98;
  #L1ece60.  v0:= v1.`com.google.crypto.tink.subtle.PrfHmacJce.a` @type ^`java.lang.ThreadLocal` @kind object;
  #L1ece64.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ece6a.  v0:= temp @kind object;
  #L1ece6c.  v0:= (`javax.crypto.Mac`) v0 @kind object;
  #L1ece70.  call `update`(v0, v2) @signature `Ljavax/crypto/Mac;.update:([B)V` @kind virtual;
  #L1ece76.  v2:= v1.`com.google.crypto.tink.subtle.PrfHmacJce.a` @type ^`java.lang.ThreadLocal` @kind object;
  #L1ece7a.  call temp:= `get`(v2) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1ece80.  v2:= temp @kind object;
  #L1ece82.  v2:= (`javax.crypto.Mac`) v2 @kind object;
  #L1ece86.  call temp:= `doFinal`(v2) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L1ece8c.  v2:= temp @kind object;
  #L1ece8e.  call temp:= `copyOf`(v2, v3) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1ece94.  v2:= temp @kind object;
  #L1ece96.  return v2 @kind object;
  #L1ece98.  v2:= new `java.security.InvalidAlgorithmParameterException`;
  #L1ece9c.  v3:= "tag size too big" @kind object;
  #L1ecea0.  call `<init>`(v2, v3) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ecea6.  throw v2;
}
procedure `int` `getMaxOutputLength`(`com.google.crypto.tink.subtle.PrfHmacJce` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.getMaxOutputLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1eceb8.  v0:= v1.`com.google.crypto.tink.subtle.PrfHmacJce.d` @type ^`int`;
  #L1ecebc.  return v0;
}
