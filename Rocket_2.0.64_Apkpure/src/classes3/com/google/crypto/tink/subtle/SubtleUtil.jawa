record `com.google.crypto.tink.subtle.SubtleUtil` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.SubtleUtil` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1efe4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1efe52.  return @kind void;
}
procedure `int` `androidApiLevel`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.androidApiLevel:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1efce8.  v0:= "android.os.Build$VERSION" @kind object;
  #L1efcec.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L1efcf2.  v0:= temp @kind object;
  #L1efcf4.  v1:= "SDK_INT" @kind object;
  #L1efcf8.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L1efcfe.  v0:= temp @kind object;
  #L1efd00.  v1:= 0I;
  #L1efd02.  call temp:= `getInt`(v0, v1) @signature `Ljava/lang/reflect/Field;.getInt:(Ljava/lang/Object;)I` @kind virtual;
  #L1efd08.  v0:= temp;
  #L1efd0a.  return v0;
  #L1efd0c.  v0:= -1I;
  #L1efd0e.  return v0;
  catch `java.lang.ClassNotFoundException` @[L1efce8..L1efd0a] goto L1efd0c;
  catch `java.lang.NoSuchFieldException` @[L1efce8..L1efd0a] goto L1efd0c;
  catch `java.lang.IllegalAccessException` @[L1efce8..L1efd0a] goto L1efd0c;
}
procedure `java.math.BigInteger` `bytes2Integer`(`byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.bytes2Integer:([B)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1efe2c.  v0:= new `java.math.BigInteger`;
  #L1efe30.  v1:= 1I;
  #L1efe32.  call `<init>`(v0, v1, v2) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1efe38.  return v0 @kind object;
}
procedure `byte`[] `integer2Bytes`(`java.math.BigInteger` v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1efbdc.  call temp:= `toByteArray`(v4) @signature `Ljava/math/BigInteger;.toByteArray:()[B` @kind virtual;
  #L1efbe2.  v4:= temp @kind object;
  #L1efbe4.  v0:= length @variable v4;
  #L1efbe6.  if v0 != v5 then goto L1efbec;
  #L1efbea.  return v4 @kind object;
  #L1efbec.  v0:= length @variable v4;
  #L1efbee.  v1:= v5 + 1;
  #L1efbf2.  v2:= "integer too large" @kind object;
  #L1efbf6.  if v0 > v1 then goto L1efc36;
  #L1efbfa.  v0:= length @variable v4;
  #L1efbfc.  v3:= 0I;
  #L1efbfe.  if v0 != v1 then goto L1efc24;
  #L1efc02.  v5:= v4[v3] @kind byte;
  #L1efc06.  if v5 != 0 then goto L1efc18;
  #L1efc0a.  v5:= length @variable v4;
  #L1efc0c.  v0:= 1I;
  #L1efc0e.  call temp:= `copyOfRange`(v4, v0, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1efc14.  v4:= temp @kind object;
  #L1efc16.  return v4 @kind object;
  #L1efc18.  v4:= new `java.security.GeneralSecurityException`;
  #L1efc1c.  call `<init>`(v4, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efc22.  throw v4;
  #L1efc24.  v0:= new `byte`[v5];
  #L1efc28.  v1:= length @variable v4;
  #L1efc2a.  v5:= v5 - v1 @kind int;
  #L1efc2c.  v1:= length @variable v4;
  #L1efc2e.  call `arraycopy`(v4, v3, v0, v5, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1efc34.  return v0 @kind object;
  #L1efc36.  v4:= new `java.security.GeneralSecurityException`;
  #L1efc3a.  call `<init>`(v4, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efc40.  throw v4;
}
procedure `boolean` `isAndroid`() @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.isAndroid:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1efba8.  v0:= 0I;
  #L1efbaa.  v1:= "android.app.Application" @kind object;
  #L1efbae.  v2:= 0I;
  #L1efbb0.  call temp:= `forName`(v1, v0, v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L1efbb6.  v0:= 1I;
  #L1efbb8.  return v0;
  catch `java.lang.Exception` @[L1efbaa..L1efbb6] goto L1efbb8;
}
procedure `byte`[] `mgf1`(`byte`[] v8 @kind object, `int` v9 , `com.google.crypto.tink.subtle.Enums$HashType` v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1efc54.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1efc58.  call temp:= `toDigestAlgo`(v10) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L1efc5e.  v10:= temp @kind object;
  #L1efc60.  call temp:= `getInstance`(v0, v10) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1efc66.  v10:= temp @kind object;
  #L1efc68.  v10:= (`java.security.MessageDigest`) v10 @kind object;
  #L1efc6c.  call temp:= `getDigestLength`(v10) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L1efc72.  v0:= temp;
  #L1efc74.  v1:= new `byte`[v9];
  #L1efc78.  v2:= 0I;
  #L1efc7a.  v3:= 0I;
  #L1efc7c.  v4:= 0I;
  #L1efc7e.  v5:= v9 + -1;
  #L1efc82.  v5:= v5 / v0 @kind int;
  #L1efc84.  if v3 > v5 then goto L1efcd4;
  #L1efc88.  call `reset`(v10) @signature `Ljava/security/MessageDigest;.reset:()V` @kind virtual;
  #L1efc8e.  call `update`(v10, v8) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L1efc94.  v5:= (`long`) v3 @kind i2l;
  #L1efc96.  call temp:= `valueOf`(v5) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L1efc9c.  v5:= temp @kind object;
  #L1efc9e.  v6:= 4I;
  #L1efca0.  call temp:= `integer2Bytes`(v5, v6) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.integer2Bytes:(Ljava/math/BigInteger;I)[B` @kind static;
  #L1efca6.  v5:= temp @kind object;
  #L1efca8.  call `update`(v10, v5) @signature `Ljava/security/MessageDigest;.update:([B)V` @kind virtual;
  #L1efcae.  call temp:= `digest`(v10) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L1efcb4.  v5:= temp @kind object;
  #L1efcb6.  v6:= length @variable v5;
  #L1efcb8.  v7:= v9 - v4 @kind int;
  #L1efcbc.  call temp:= `min`(v6, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1efcc2.  v6:= temp;
  #L1efcc4.  call `arraycopy`(v5, v2, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1efcca.  v5:= length @variable v5;
  #L1efccc.  v4:= v4 + v5 @kind int;
  #L1efcce.  v3:= v3 + 1;
  #L1efcd2.  goto L1efc7e;
  #L1efcd4.  return v1 @kind object;
}
procedure `void` `putAsUnsigedInt`(`java.nio.ByteBuffer` v3 @kind object, `long` v4 ) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1efe64.  v0:= 0L;
  #L1efe68.  v2:= lcmp(v0, v4);
  #L1efe6c.  if v2 > 0 then goto L1efe8c;
  #L1efe70.  v0:= 4294967296L;
  #L1efe7a.  v2:= lcmp(v4, v0);
  #L1efe7e.  if v2 >= 0 then goto L1efe8c;
  #L1efe82.  v5:= (`int`) v4 @kind l2i;
  #L1efe84.  call temp:= `putInt`(v3, v5) @signature `Ljava/nio/ByteBuffer;.putInt:(I)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1efe8a.  return @kind void;
  #L1efe8c.  v3:= new `java.security.GeneralSecurityException`;
  #L1efe90.  v4:= "Index out of range" @kind object;
  #L1efe94.  call `<init>`(v3, v4) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efe9a.  throw v3;
}
procedure `java.lang.String` `toDigestAlgo`(`com.google.crypto.tink.subtle.Enums$HashType` v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1efd34.  v0:= `@@com.google.crypto.tink.subtle.SubtleUtil$a.a` @type ^`int`[] @kind object;
  #L1efd38.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1efd3e.  v1:= temp;
  #L1efd40.  v0:= v0[v1];
  #L1efd44.  v1:= 1I;
  #L1efd46.  if v0 == v1 then goto L1efd9c;
  #L1efd4a.  v1:= 2I;
  #L1efd4c.  if v0 == v1 then goto L1efd96;
  #L1efd50.  v1:= 3I;
  #L1efd52.  if v0 == v1 then goto L1efd90;
  #L1efd56.  v1:= 4I;
  #L1efd58.  if v0 != v1 then goto L1efd62;
  #L1efd5c.  v3:= "SHA-512" @kind object;
  #L1efd60.  return v3 @kind object;
  #L1efd62.  v0:= new `java.security.GeneralSecurityException`;
  #L1efd66.  v1:= new `java.lang.StringBuilder`;
  #L1efd6a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1efd70.  v2:= "Unsupported hash " @kind object;
  #L1efd74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efd7a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efd80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1efd86.  v3:= temp @kind object;
  #L1efd88.  call `<init>`(v0, v3) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1efd8e.  throw v0;
  #L1efd90.  v3:= "SHA-384" @kind object;
  #L1efd94.  return v3 @kind object;
  #L1efd96.  v3:= "SHA-256" @kind object;
  #L1efd9a.  return v3 @kind object;
  #L1efd9c.  v3:= "SHA-1" @kind object;
  #L1efda0.  return v3 @kind object;
}
procedure `java.lang.String` `toEcdsaAlgo`(`com.google.crypto.tink.subtle.Enums$HashType` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toEcdsaAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1efdb4.  call `validateSignatureHash`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1efdba.  v0:= new `java.lang.StringBuilder`;
  #L1efdbe.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1efdc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efdca.  v1:= "withECDSA" @kind object;
  #L1efdce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efdd4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1efdda.  v1:= temp @kind object;
  #L1efddc.  return v1 @kind object;
}
procedure `java.lang.String` `toRsaSsaPkcs1Algo`(`com.google.crypto.tink.subtle.Enums$HashType` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toRsaSsaPkcs1Algo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1efdf0.  call `validateSignatureHash`(v1) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1efdf6.  v0:= new `java.lang.StringBuilder`;
  #L1efdfa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1efe00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efe06.  v1:= "withRSA" @kind object;
  #L1efe0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1efe10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1efe16.  v1:= temp @kind object;
  #L1efe18.  return v1 @kind object;
}
