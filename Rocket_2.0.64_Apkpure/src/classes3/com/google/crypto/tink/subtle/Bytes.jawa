record `com.google.crypto.tink.subtle.Bytes` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Bytes` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Bytes;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e39ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e39b2.  return @kind void;
}
procedure `int` `byteArrayToInt`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3940.  v0:= length @variable v1;
  #L1e3942.  call temp:= `byteArrayToInt`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BI)I` @kind static;
  #L1e3948.  v1:= temp;
  #L1e394a.  return v1;
}
procedure `int` `byteArrayToInt`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e395c.  v0:= 0I;
  #L1e395e.  call temp:= `byteArrayToInt`(v1, v0, v2) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BII)I` @kind static;
  #L1e3964.  v1:= temp;
  #L1e3966.  return v1;
}
procedure `int` `byteArrayToInt`(`byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.byteArrayToInt:([BII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3978.  v0:= 0I;
  #L1e397a.  v1:= 0I;
  #L1e397c.  if v0 >= v6 then goto L1e399a;
  #L1e3980.  v2:= v0 + v5 @kind int;
  #L1e3984.  v2:= v4[v2] @kind byte;
  #L1e3988.  v2:= v2 ^& 255;
  #L1e398c.  v3:= v0 * 8;
  #L1e3990.  v2:= v2 ^< v3 @kind int;
  #L1e3992.  v1:= v1 + v2 @kind int;
  #L1e3994.  v0:= v0 + 1;
  #L1e3998.  goto L1e397c;
  #L1e399a.  return v1;
}
procedure `byte`[] `concat`(`byte`[][] v7 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e37a8.  v0:= length @variable v7;
  #L1e37aa.  v1:= 0I;
  #L1e37ac.  v2:= 0I;
  #L1e37ae.  v3:= 0I;
  #L1e37b0.  if v2 >= v0 then goto L1e37e0;
  #L1e37b4.  v4:= v7[v2] @kind object;
  #L1e37b8.  v5:= 2147483647I;
  #L1e37be.  v6:= length @variable v4;
  #L1e37c0.  v5:= v5 - v6 @kind int;
  #L1e37c2.  if v3 > v5 then goto L1e37d0;
  #L1e37c6.  v4:= length @variable v4;
  #L1e37c8.  v3:= v3 + v4 @kind int;
  #L1e37ca.  v2:= v2 + 1;
  #L1e37ce.  goto L1e37b0;
  #L1e37d0.  v7:= new `java.security.GeneralSecurityException`;
  #L1e37d4.  v0:= "exceeded size limit" @kind object;
  #L1e37d8.  call `<init>`(v7, v0) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e37de.  throw v7;
  #L1e37e0.  v0:= new `byte`[v3];
  #L1e37e4.  v2:= length @variable v7;
  #L1e37e6.  v3:= 0I;
  #L1e37e8.  v4:= 0I;
  #L1e37ea.  if v3 >= v2 then goto L1e3804;
  #L1e37ee.  v5:= v7[v3] @kind object;
  #L1e37f2.  v6:= length @variable v5;
  #L1e37f4.  call `arraycopy`(v5, v1, v0, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e37fa.  v5:= length @variable v5;
  #L1e37fc.  v4:= v4 + v5 @kind int;
  #L1e37fe.  v3:= v3 + 1;
  #L1e3802.  goto L1e37ea;
  #L1e3804.  return v0 @kind object;
}
procedure `boolean` `equal`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e375c.  v0:= 0I;
  #L1e375e.  if v5 == 0 then goto L1e3794;
  #L1e3762.  if v6 != 0 then goto L1e3768;
  #L1e3766.  goto L1e3794;
  #L1e3768.  v1:= length @variable v5;
  #L1e376a.  v2:= length @variable v6;
  #L1e376c.  if v1 == v2 then goto L1e3772;
  #L1e3770.  return v0;
  #L1e3772.  v1:= 0I;
  #L1e3774.  v2:= 0I;
  #L1e3776.  v3:= length @variable v5;
  #L1e3778.  if v1 >= v3 then goto L1e378e;
  #L1e377c.  v3:= v5[v1] @kind byte;
  #L1e3780.  v4:= v6[v1] @kind byte;
  #L1e3784.  v3:= v3 ^~ v4 @kind int;
  #L1e3786.  v2:= v2 ^| v3 @kind int;
  #L1e3788.  v1:= v1 + 1;
  #L1e378c.  goto L1e3776;
  #L1e378e.  if v2 != 0 then goto L1e3794;
  #L1e3792.  v0:= 1I;
  #L1e3794.  return v0;
}
procedure `byte`[] `intToByteArray`(`int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.intToByteArray:(II)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1e3818.  v0:= new `byte`[v3];
  #L1e381c.  v1:= 0I;
  #L1e381e.  if v1 >= v3 then goto L1e383a;
  #L1e3822.  v2:= v1 * 8;
  #L1e3826.  v2:= v4 ^> v2 @kind int;
  #L1e382a.  v2:= v2 ^& 255;
  #L1e382e.  v2:= (`byte`) v2 @kind i2b;
  #L1e3830.  v0[v1]:= v2 @kind byte;
  #L1e3834.  v1:= v1 + 1;
  #L1e3838.  goto L1e381e;
  #L1e383a.  return v0 @kind object;
}
procedure `void` `xor`(`java.nio.ByteBuffer` v3 @kind object, `java.nio.ByteBuffer` v4 @kind object, `java.nio.ByteBuffer` v5 @kind object, `int` v6 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1e39c4.  if v6 < 0 then goto L1e3a14;
  #L1e39c8.  call temp:= `remaining`(v4) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e39ce.  v0:= temp;
  #L1e39d0.  if v0 < v6 then goto L1e3a14;
  #L1e39d4.  call temp:= `remaining`(v5) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e39da.  v0:= temp;
  #L1e39dc.  if v0 < v6 then goto L1e3a14;
  #L1e39e0.  call temp:= `remaining`(v3) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1e39e6.  v0:= temp;
  #L1e39e8.  if v0 < v6 then goto L1e3a14;
  #L1e39ec.  v0:= 0I;
  #L1e39ee.  if v0 >= v6 then goto L1e3a12;
  #L1e39f2.  call temp:= `get`(v4) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L1e39f8.  v1:= temp;
  #L1e39fa.  call temp:= `get`(v5) @signature `Ljava/nio/ByteBuffer;.get:()B` @kind virtual;
  #L1e3a00.  v2:= temp;
  #L1e3a02.  v1:= v1 ^~ v2 @kind int;
  #L1e3a04.  v1:= (`byte`) v1 @kind i2b;
  #L1e3a06.  call temp:= `put`(v3, v1) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e3a0c.  v0:= v0 + 1;
  #L1e3a10.  goto L1e39ee;
  #L1e3a12.  return @kind void;
  #L1e3a14.  v3:= new `java.lang.IllegalArgumentException`;
  #L1e3a18.  v4:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L1e3a1c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3a22.  throw v3;
}
procedure `byte`[] `xor`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e3884.  if v8 < 0 then goto L1e38c2;
  #L1e3888.  v0:= length @variable v4;
  #L1e388a.  v0:= v0 - v8 @kind int;
  #L1e388c.  if v0 < v5 then goto L1e38c2;
  #L1e3890.  v0:= length @variable v6;
  #L1e3892.  v0:= v0 - v8 @kind int;
  #L1e3894.  if v0 < v7 then goto L1e38c2;
  #L1e3898.  v0:= new `byte`[v8];
  #L1e389c.  v1:= 0I;
  #L1e389e.  if v1 >= v8 then goto L1e38c0;
  #L1e38a2.  v2:= v1 + v5 @kind int;
  #L1e38a6.  v2:= v4[v2] @kind byte;
  #L1e38aa.  v3:= v1 + v7 @kind int;
  #L1e38ae.  v3:= v6[v3] @kind byte;
  #L1e38b2.  v2:= v2 ^~ v3 @kind int;
  #L1e38b4.  v2:= (`byte`) v2 @kind i2b;
  #L1e38b6.  v0[v1]:= v2 @kind byte;
  #L1e38ba.  v1:= v1 + 1;
  #L1e38be.  goto L1e389e;
  #L1e38c0.  return v0 @kind object;
  #L1e38c2.  v4:= new `java.lang.IllegalArgumentException`;
  #L1e38c6.  v5:= "That combination of buffers, offsets and length to xor result in out-of-bond accesses." @kind object;
  #L1e38ca.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e38d0.  throw v4;
}
procedure `byte`[] `xor`(`byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1e384c.  v0:= length @variable v2;
  #L1e384e.  v1:= length @variable v3;
  #L1e3850.  if v0 != v1 then goto L1e3862;
  #L1e3854.  v0:= length @variable v2;
  #L1e3856.  v1:= 0I;
  #L1e3858.  call temp:= `xor`(v2, v1, v3, v1, v0) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xor:([BI[BII)[B` @kind static;
  #L1e385e.  v2:= temp @kind object;
  #L1e3860.  return v2 @kind object;
  #L1e3862.  v2:= new `java.lang.IllegalArgumentException`;
  #L1e3866.  v3:= "The lengths of x and y should match." @kind object;
  #L1e386a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3870.  throw v2;
}
procedure `byte`[] `xorEnd`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Bytes;.xorEnd:([B[B)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e38e4.  v0:= length @variable v5;
  #L1e38e6.  v1:= length @variable v6;
  #L1e38e8.  if v0 < v1 then goto L1e3920;
  #L1e38ec.  v0:= length @variable v5;
  #L1e38ee.  v1:= length @variable v6;
  #L1e38f0.  v0:= v0 - v1 @kind int;
  #L1e38f2.  v1:= length @variable v5;
  #L1e38f4.  call temp:= `copyOf`(v5, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e38fa.  v5:= temp @kind object;
  #L1e38fc.  v1:= 0I;
  #L1e38fe.  v2:= length @variable v6;
  #L1e3900.  if v1 >= v2 then goto L1e391e;
  #L1e3904.  v2:= v0 + v1 @kind int;
  #L1e3908.  v3:= v5[v2] @kind byte;
  #L1e390c.  v4:= v6[v1] @kind byte;
  #L1e3910.  v3:= v3 ^~ v4 @kind int;
  #L1e3912.  v3:= (`byte`) v3 @kind i2b;
  #L1e3914.  v5[v2]:= v3 @kind byte;
  #L1e3918.  v1:= v1 + 1;
  #L1e391c.  goto L1e38fe;
  #L1e391e.  return v5 @kind object;
  #L1e3920.  v5:= new `java.lang.IllegalArgumentException`;
  #L1e3924.  v6:= "xorEnd requires a.length >= b.length" @kind object;
  #L1e3928.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e392e.  throw v5;
}
