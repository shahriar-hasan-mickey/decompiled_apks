record `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` @kind class @AccessFlag  extends `com.google.crypto.tink.subtle.StreamSegmentEncrypter` @kind interface {
  `javax.crypto.spec.SecretKeySpec` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.a` @AccessFlag PRIVATE_FINAL;
  `javax.crypto.Cipher` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.c` @AccessFlag PRIVATE_FINAL;
  `java.nio.ByteBuffer` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.d` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @AccessFlag PRIVATE;
  `com.google.crypto.tink.subtle.AesGcmHkdfStreaming` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` v4 @kind this, `com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.<init>:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1e1808.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.f` @type ^`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` := v5 @kind object;
  #L1e180c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e1812.  v0:= 0L;
  #L1e1816.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` := v0 @kind wide;
  #L1e181a.  call temp:= `a`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.a:()Ljavax/crypto/Cipher;` @kind static;
  #L1e1820.  v2:= temp @kind object;
  #L1e1822.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` := v2 @kind object;
  #L1e1826.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` := v0 @kind wide;
  #L1e182a.  call temp:= `b`(v5) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.b:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)[B` @kind static;
  #L1e1830.  v0:= temp @kind object;
  #L1e1832.  call temp:= `c`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.c:()[B` @kind static;
  #L1e1838.  v1:= temp @kind object;
  #L1e183a.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.c` @type ^`byte`[] := v1 @kind object;
  #L1e183e.  call temp:= `getHeaderLength`(v5) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L1e1844.  v2:= temp;
  #L1e1846.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e184c.  v2:= temp @kind object;
  #L1e184e.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.d` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L1e1852.  call temp:= `getHeaderLength`(v5) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L1e1858.  v3:= temp;
  #L1e185a.  v3:= (`byte`) v3 @kind i2b;
  #L1e185c.  call temp:= `put`(v2, v3) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e1862.  call temp:= `put`(v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e1868.  call temp:= `put`(v2, v1) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e186e.  call temp:= `flip`(v2) @signature `Ljava/nio/ByteBuffer;.flip:()Ljava/nio/Buffer;` @kind virtual;
  #L1e1874.  call temp:= `d`(v5, v0, v6) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.d:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B[B)Ljavax/crypto/spec/SecretKeySpec;` @kind static;
  #L1e187a.  v5:= temp @kind object;
  #L1e187c.  v4.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.a` @type ^`javax.crypto.spec.SecretKeySpec` := v5 @kind object;
  #L1e1880.  return @kind void;
}
procedure `void` `encryptSegment`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object, `java.nio.ByteBuffer` v8 @kind object, `boolean` v9 , `java.nio.ByteBuffer` v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.encryptSegment:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;ZLjava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e18f4.  @monitorenter v6
  #L1e18f6.  v0:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e18fa.  v1:= 1I;
  #L1e18fc.  v2:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.a` @type ^`javax.crypto.spec.SecretKeySpec` @kind object;
  #L1e1900.  v3:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.c` @type ^`byte`[] @kind object;
  #L1e1904.  v4:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` @kind wide;
  #L1e1908.  call temp:= `e`(v3, v4, v9) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.e:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @kind static;
  #L1e190e.  v9:= temp @kind object;
  #L1e1910.  call `init`(v0, v1, v2, v9) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L1e1916.  v0:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` @kind wide;
  #L1e191a.  v2:= 1L;
  #L1e191e.  v0:= v0 + v2 @kind long;
  #L1e1920.  v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` := v0 @kind wide;
  #L1e1924.  call temp:= `hasRemaining`(v8) @signature `Ljava/nio/ByteBuffer;.hasRemaining:()Z` @kind virtual;
  #L1e192a.  v9:= temp;
  #L1e192c.  if v9 == 0 then goto L1e1946;
  #L1e1930.  v9:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e1934.  call temp:= `update`(v9, v7, v10) @signature `Ljavax/crypto/Cipher;.update:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L1e193a.  v7:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e193e.  call temp:= `doFinal`(v7, v8, v10) @signature `Ljavax/crypto/Cipher;.doFinal:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L1e1944.  goto L1e1950;
  #L1e1946.  v8:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e194a.  call temp:= `doFinal`(v8, v7, v10) @signature `Ljavax/crypto/Cipher;.doFinal:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L1e1950.  @monitorexit v6
  #L1e1952.  return @kind void;
  #L1e1954.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e1956.  @monitorexit v6
  #L1e1958.  throw v7;
  catch `java.lang.Throwable` @[L1e18f6..L1e1950] goto L1e1954;
}
procedure `void` `encryptSegment`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object, `boolean` v8 , `java.nio.ByteBuffer` v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.encryptSegment:(Ljava/nio/ByteBuffer;ZLjava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1e1894.  @monitorenter v6
  #L1e1896.  v0:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e189a.  v1:= 1I;
  #L1e189c.  v2:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.a` @type ^`javax.crypto.spec.SecretKeySpec` @kind object;
  #L1e18a0.  v3:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.c` @type ^`byte`[] @kind object;
  #L1e18a4.  v4:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` @kind wide;
  #L1e18a8.  call temp:= `e`(v3, v4, v8) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.e:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @kind static;
  #L1e18ae.  v8:= temp @kind object;
  #L1e18b0.  call `init`(v0, v1, v2, v8) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V` @kind virtual;
  #L1e18b6.  v0:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` @kind wide;
  #L1e18ba.  v2:= 1L;
  #L1e18be.  v0:= v0 + v2 @kind long;
  #L1e18c0.  v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.e` @type ^`long` := v0 @kind wide;
  #L1e18c4.  v8:= v6.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.b` @type ^`javax.crypto.Cipher` @kind object;
  #L1e18c8.  call temp:= `doFinal`(v8, v7, v9) @signature `Ljavax/crypto/Cipher;.doFinal:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L1e18ce.  @monitorexit v6
  #L1e18d0.  return @kind void;
  #L1e18d2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1e18d4.  @monitorexit v6
  #L1e18d6.  throw v7;
  catch `java.lang.Throwable` @[L1e1896..L1e18ce] goto L1e18d2;
}
procedure `java.nio.ByteBuffer` `getHeader`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.getHeader:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e17e8.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b.d` @type ^`java.nio.ByteBuffer` @kind object;
  #L1e17ec.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e17f2.  v0:= temp @kind object;
  #L1e17f4.  return v0 @kind object;
}
