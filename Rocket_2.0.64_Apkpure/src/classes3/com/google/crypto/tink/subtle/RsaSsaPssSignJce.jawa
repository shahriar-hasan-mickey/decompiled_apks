record `com.google.crypto.tink.subtle.RsaSsaPssSignJce` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.PublicKeySign` @kind interface {
  `java.security.interfaces.RSAPrivateCrtKey` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @AccessFlag PRIVATE_FINAL;
  `java.security.interfaces.RSAPublicKey` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.subtle.Enums$HashType` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v3 @kind this, `java.security.interfaces.RSAPrivateCrtKey` v4 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v5 @kind object, `com.google.crypto.tink.subtle.Enums$HashType` v6 @kind object, `int` v7 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.<init>:(Ljava/security/interfaces/RSAPrivateCrtKey;Lcom/google/crypto/tink/subtle/Enums$HashType;Lcom/google/crypto/tink/subtle/Enums$HashType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1edbb4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1edbba.  call `validateSignatureHash`(v5) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1edbc0.  call temp:= `getModulus`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1edbc6.  v0:= temp @kind object;
  #L1edbc8.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1edbce.  v0:= temp;
  #L1edbd0.  call `validateRsaModulusSize`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaModulusSize:(I)V` @kind static;
  #L1edbd6.  call temp:= `getPublicExponent`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1edbdc.  v0:= temp @kind object;
  #L1edbde.  call `validateRsaPublicExponent`(v0) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateRsaPublicExponent:(Ljava/math/BigInteger;)V` @kind static;
  #L1edbe4.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @type ^`java.security.interfaces.RSAPrivateCrtKey` := v4 @kind object;
  #L1edbe8.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.KEY_FACTORY` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1edbec.  v1:= "RSA" @kind object;
  #L1edbf0.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1edbf6.  v0:= temp @kind object;
  #L1edbf8.  v0:= (`java.security.KeyFactory`) v0 @kind object;
  #L1edbfc.  v1:= new `java.security.spec.RSAPublicKeySpec`;
  #L1edc00.  call temp:= `getModulus`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1edc06.  v2:= temp @kind object;
  #L1edc08.  call temp:= `getPublicExponent`(v4) @signature `Ljava/security/interfaces/RSAPrivateCrtKey;.getPublicExponent:()Ljava/math/BigInteger;` @kind interface;
  #L1edc0e.  v4:= temp @kind object;
  #L1edc10.  call `<init>`(v1, v2, v4) @signature `Ljava/security/spec/RSAPublicKeySpec;.<init>:(Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @kind direct;
  #L1edc16.  call temp:= `generatePublic`(v0, v1) @signature `Ljava/security/KeyFactory;.generatePublic:(Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;` @kind virtual;
  #L1edc1c.  v4:= temp @kind object;
  #L1edc1e.  v4:= (`java.security.interfaces.RSAPublicKey`) v4 @kind object;
  #L1edc22.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` := v4 @kind object;
  #L1edc26.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v5 @kind object;
  #L1edc2a.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @type ^`com.google.crypto.tink.subtle.Enums$HashType` := v6 @kind object;
  #L1edc2e.  v3.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int` := v7;
  #L1edc32.  return @kind void;
}
procedure `byte`[] `a`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v18 @kind this, `byte`[] v19 @kind object, `int` v20 ) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.a:([BI)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1ed980.  v0:= v18 @kind object;
  #L1ed984.  v1:= v20;
  #L1ed988.  v2:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1ed98c.  call `validateSignatureHash`(v2) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateSignatureHash:(Lcom/google/crypto/tink/subtle/Enums$HashType;)V` @kind static;
  #L1ed992.  v2:= `@@com.google.crypto.tink.subtle.EngineFactory.MESSAGE_DIGEST` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1ed996.  v3:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.c` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1ed99a.  call temp:= `toDigestAlgo`(v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.toDigestAlgo:(Lcom/google/crypto/tink/subtle/Enums$HashType;)Ljava/lang/String;` @kind static;
  #L1ed9a0.  v3:= temp @kind object;
  #L1ed9a2.  call temp:= `getInstance`(v2, v3) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1ed9a8.  v2:= temp @kind object;
  #L1ed9aa.  v2:= (`java.security.MessageDigest`) v2 @kind object;
  #L1ed9ae.  v3:= v19 @kind object;
  #L1ed9b2.  call temp:= `digest`(v2, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L1ed9b8.  v3:= temp @kind object;
  #L1ed9ba.  call temp:= `getDigestLength`(v2) @signature `Ljava/security/MessageDigest;.getDigestLength:()I` @kind virtual;
  #L1ed9c0.  v4:= temp;
  #L1ed9c2.  v5:= v1 + -1;
  #L1ed9c6.  v6:= 8I;
  #L1ed9ca.  v5:= v5 / v6 @kind int;
  #L1ed9cc.  v7:= 1I;
  #L1ed9ce.  v5:= v5 + v7 @kind int;
  #L1ed9d0.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L1ed9d4.  v9:= v4 + v8 @kind int;
  #L1ed9d8.  v9:= v9 + 2;
  #L1ed9dc.  if v5 < v9 then goto L1edaca;
  #L1ed9e0.  call temp:= `randBytes`(v8) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1ed9e6.  v8:= temp @kind object;
  #L1ed9e8.  v9:= v4 + 8;
  #L1ed9ec.  v10:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L1ed9f0.  v10:= v10 + v9 @kind int;
  #L1ed9f2.  v10:= new `byte`[v10];
  #L1ed9f6.  v11:= 0I;
  #L1ed9f8.  call `arraycopy`(v3, v11, v10, v6, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ed9fe.  v3:= length @variable v8;
  #L1eda00.  call `arraycopy`(v8, v11, v10, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1eda06.  call temp:= `digest`(v2, v10) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L1eda0c.  v2:= temp @kind object;
  #L1eda0e.  v3:= v5 - v4 @kind int;
  #L1eda12.  v3:= v3 - v7 @kind int;
  #L1eda14.  v6:= new `byte`[v3];
  #L1eda18.  v9:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.e` @type ^`int`;
  #L1eda1c.  v10:= v5 - v9 @kind int;
  #L1eda20.  v10:= v10 - v4 @kind int;
  #L1eda22.  v10:= v10 + -2;
  #L1eda26.  v6[v10]:= v7 @kind byte;
  #L1eda2a.  v9:= v5 - v9 @kind int;
  #L1eda2e.  v9:= v9 - v4 @kind int;
  #L1eda30.  v9:= v9 - v7 @kind int;
  #L1eda32.  v10:= length @variable v8;
  #L1eda34.  call `arraycopy`(v8, v11, v6, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1eda3a.  v8:= v0.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.d` @type ^`com.google.crypto.tink.subtle.Enums$HashType` @kind object;
  #L1eda3e.  call temp:= `mgf1`(v2, v3, v8) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.mgf1:([BILcom/google/crypto/tink/subtle/Enums$HashType;)[B` @kind static;
  #L1eda44.  v8:= temp @kind object;
  #L1eda46.  v9:= new `byte`[v3];
  #L1eda4a.  v10:= 0I;
  #L1eda4c.  if v10 >= v3 then goto L1eda66;
  #L1eda50.  v12:= v6[v10] @kind byte;
  #L1eda54.  v13:= v8[v10] @kind byte;
  #L1eda58.  v12:= v12 ^~ v13 @kind int;
  #L1eda5a.  v12:= (`byte`) v12 @kind i2b;
  #L1eda5c.  v9[v10]:= v12 @kind byte;
  #L1eda60.  v10:= v10 + 1;
  #L1eda64.  goto L1eda4c;
  #L1eda66.  v6:= 0I;
  #L1eda68.  v12:= (`long`) v6 @kind i2l;
  #L1eda6a.  v14:= (`long`) v5 @kind i2l;
  #L1eda6c.  v16:= 8L;
  #L1eda70.  v14:= v14 * v16 @kind long;
  #L1eda74.  v7:= (`long`) v1 @kind i2l;
  #L1eda76.  v14:= v14 - v7 @kind long;
  #L1eda78.  v7:= lcmp(v12, v14);
  #L1eda7c.  if v7 >= 0 then goto L1edaa8;
  #L1eda80.  v7:= v6 / 8;
  #L1eda84.  v8:= v6 %% 8;
  #L1eda88.  v8:= v8 - 7;
  #L1eda8c.  v10:= v9[v7] @kind byte;
  #L1eda90.  v12:= 1I;
  #L1eda92.  v8:= v12 ^< v8 @kind int;
  #L1eda96.  v8:= ~v8 @kind int;
  #L1eda98.  v8:= v8 ^& v10 @kind int;
  #L1eda9a.  v8:= (`byte`) v8 @kind i2b;
  #L1eda9c.  v9[v7]:= v8 @kind byte;
  #L1edaa0.  v6:= v6 + 1;
  #L1edaa4.  v7:= 1I;
  #L1edaa6.  goto L1eda68;
  #L1edaa8.  v4:= v4 + v3 @kind int;
  #L1edaaa.  v1:= v4 + 1;
  #L1edaae.  v1:= new `byte`[v1];
  #L1edab2.  call `arraycopy`(v9, v11, v1, v11, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1edab8.  v5:= length @variable v2;
  #L1edaba.  call `arraycopy`(v2, v11, v1, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1edac0.  v2:= -68I;
  #L1edac4.  v1[v4]:= v2 @kind byte;
  #L1edac8.  return v1 @kind object;
  #L1edaca.  v1:= new `java.security.GeneralSecurityException`;
  #L1edace.  v2:= "encoding error" @kind object;
  #L1edad2.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1edad8.  throw v1;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v5 @kind this, `byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.b:([B)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1edaec.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1edaf0.  v1:= "RSA/ECB/NOPADDING" @kind object;
  #L1edaf4.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1edafa.  v2:= temp @kind object;
  #L1edafc.  v2:= (`javax.crypto.Cipher`) v2 @kind object;
  #L1edb00.  v3:= v5.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.a` @type ^`java.security.interfaces.RSAPrivateCrtKey` @kind object;
  #L1edb04.  v4:= 2I;
  #L1edb06.  call `init`(v2, v4, v3) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1edb0c.  call temp:= `doFinal`(v2, v6) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1edb12.  v2:= temp @kind object;
  #L1edb14.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1edb1a.  v0:= temp @kind object;
  #L1edb1c.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1edb20.  v1:= v5.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1edb24.  v3:= 1I;
  #L1edb26.  call `init`(v0, v3, v1) @signature `Ljavax/crypto/Cipher;.init:(ILjava/security/Key;)V` @kind virtual;
  #L1edb2c.  call temp:= `doFinal`(v0, v2) @signature `Ljavax/crypto/Cipher;.doFinal:([B)[B` @kind virtual;
  #L1edb32.  v0:= temp @kind object;
  #L1edb34.  v1:= new `java.math.BigInteger`;
  #L1edb38.  call `<init>`(v1, v3, v6) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1edb3e.  v6:= new `java.math.BigInteger`;
  #L1edb42.  call `<init>`(v6, v3, v0) @signature `Ljava/math/BigInteger;.<init>:(I[B)V` @kind direct;
  #L1edb48.  call temp:= `equals`(v1, v6) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1edb4e.  v6:= temp;
  #L1edb50.  if v6 == 0 then goto L1edb56;
  #L1edb54.  return v2 @kind object;
  #L1edb56.  v6:= new `java.lang.RuntimeException`;
  #L1edb5a.  v0:= "Security bug: RSA signature computation error" @kind object;
  #L1edb5e.  call `<init>`(v6, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1edb64.  throw v6;
}
procedure `byte`[] `sign`(`com.google.crypto.tink.subtle.RsaSsaPssSignJce` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1edb78.  v0:= v1.`com.google.crypto.tink.subtle.RsaSsaPssSignJce.b` @type ^`java.security.interfaces.RSAPublicKey` @kind object;
  #L1edb7c.  call temp:= `getModulus`(v0) @signature `Ljava/security/interfaces/RSAPublicKey;.getModulus:()Ljava/math/BigInteger;` @kind interface;
  #L1edb82.  v0:= temp @kind object;
  #L1edb84.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L1edb8a.  v0:= temp;
  #L1edb8c.  v0:= v0 + -1;
  #L1edb90.  call temp:= `a`(v1, v2, v0) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.a:([BI)[B` @kind direct;
  #L1edb96.  v2:= temp @kind object;
  #L1edb98.  call temp:= `b`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/RsaSsaPssSignJce;.b:([B)[B` @kind direct;
  #L1edb9e.  v2:= temp @kind object;
  #L1edba0.  return v2 @kind object;
}
