record `com.google.crypto.tink.subtle.EncryptThenAuthenticate` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.Aead` @kind interface {
  `com.google.crypto.tink.subtle.IndCpaCipher` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @AccessFlag PRIVATE_FINAL;
  `com.google.crypto.tink.Mac` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v0 @kind this, `com.google.crypto.tink.subtle.IndCpaCipher` v1 @kind object, `com.google.crypto.tink.Mac` v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.<init>:(Lcom/google/crypto/tink/subtle/IndCpaCipher;Lcom/google/crypto/tink/Mac;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1e9e68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e9e6e.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` := v1 @kind object;
  #L1e9e72.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` := v2 @kind object;
  #L1e9e76.  v0.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int` := v3;
  #L1e9e7a.  return @kind void;
}
procedure `com.google.crypto.tink.Aead` `newAesCtrHmac`(`byte`[] v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.newAesCtrHmac:([BILjava/lang/String;[BI)Lcom/google/crypto/tink/Aead;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e9e20.  v0:= new `com.google.crypto.tink.subtle.AesCtrJceCipher`;
  #L1e9e24.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesCtrJceCipher;.<init>:([BI)V` @kind direct;
  #L1e9e2a.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e9e2e.  v2:= "HMAC" @kind object;
  #L1e9e32.  call `<init>`(v1, v4, v2) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e9e38.  v2:= new `com.google.crypto.tink.subtle.PrfMac`;
  #L1e9e3c.  v4:= new `com.google.crypto.tink.subtle.PrfHmacJce`;
  #L1e9e40.  call `<init>`(v4, v3, v1) @signature `Lcom/google/crypto/tink/subtle/PrfHmacJce;.<init>:(Ljava/lang/String;Ljava/security/Key;)V` @kind direct;
  #L1e9e46.  call `<init>`(v2, v4, v5) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.<init>:(Lcom/google/crypto/tink/prf/Prf;I)V` @kind direct;
  #L1e9e4c.  v1:= new `com.google.crypto.tink.subtle.EncryptThenAuthenticate`;
  #L1e9e50.  call `<init>`(v1, v0, v2, v5) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.<init>:(Lcom/google/crypto/tink/subtle/IndCpaCipher;Lcom/google/crypto/tink/Mac;I)V` @kind direct;
  #L1e9e56.  return v1 @kind object;
}
procedure `byte`[] `decrypt`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.decrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1e9cd0.  v0:= length @variable v9;
  #L1e9cd2.  v1:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int`;
  #L1e9cd6.  if v0 < v1 then goto L1e9d68;
  #L1e9cda.  v0:= length @variable v9;
  #L1e9cdc.  v0:= v0 - v1 @kind int;
  #L1e9cde.  v1:= 0I;
  #L1e9ce0.  call temp:= `copyOfRange`(v9, v1, v0) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9ce6.  v0:= temp @kind object;
  #L1e9ce8.  v2:= length @variable v9;
  #L1e9cea.  v3:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.c` @type ^`int`;
  #L1e9cee.  v2:= v2 - v3 @kind int;
  #L1e9cf0.  v3:= length @variable v9;
  #L1e9cf2.  call temp:= `copyOfRange`(v9, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1e9cf8.  v9:= temp @kind object;
  #L1e9cfa.  if v10 != 0 then goto L1e9d02;
  #L1e9cfe.  v10:= new `byte`[v1];
  #L1e9d02.  v2:= 8I;
  #L1e9d06.  call temp:= `allocate`(v2) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e9d0c.  v3:= temp @kind object;
  #L1e9d0e.  v4:= 8L;
  #L1e9d12.  v6:= length @variable v10;
  #L1e9d14.  v6:= (`long`) v6 @kind i2l;
  #L1e9d16.  v6:= v6 * v4 @kind long;
  #L1e9d1a.  call temp:= `putLong`(v3, v6) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e9d20.  v3:= temp @kind object;
  #L1e9d22.  call temp:= `array`(v3) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e9d28.  v3:= temp @kind object;
  #L1e9d2a.  call temp:= `copyOf`(v3, v2) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e9d30.  v2:= temp @kind object;
  #L1e9d32.  v3:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` @kind object;
  #L1e9d36.  v4:= 3I;
  #L1e9d38.  v4:= new `byte`[][v4];
  #L1e9d3c.  v4[v1]:= v10 @kind object;
  #L1e9d40.  v10:= 1I;
  #L1e9d42.  v4[v10]:= v0 @kind object;
  #L1e9d46.  v10:= 2I;
  #L1e9d48.  v4[v10]:= v2 @kind object;
  #L1e9d4c.  call temp:= `concat`(v4) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1e9d52.  v10:= temp @kind object;
  #L1e9d54.  call `verifyMac`(v3, v9, v10) @signature `Lcom/google/crypto/tink/Mac;.verifyMac:([B[B)V` @kind interface;
  #L1e9d5a.  v9:= v8.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` @kind object;
  #L1e9d5e.  call temp:= `decrypt`(v9, v0) @signature `Lcom/google/crypto/tink/subtle/IndCpaCipher;.decrypt:([B)[B` @kind interface;
  #L1e9d64.  v9:= temp @kind object;
  #L1e9d66.  return v9 @kind object;
  #L1e9d68.  v9:= new `java.security.GeneralSecurityException`;
  #L1e9d6c.  v10:= "ciphertext too short" @kind object;
  #L1e9d70.  call `<init>`(v9, v10) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e9d76.  throw v9;
}
procedure `byte`[] `encrypt`(`com.google.crypto.tink.subtle.EncryptThenAuthenticate` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lcom/google/crypto/tink/subtle/EncryptThenAuthenticate;.encrypt:([B[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e9d88.  v0:= v7.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.a` @type ^`com.google.crypto.tink.subtle.IndCpaCipher` @kind object;
  #L1e9d8c.  call temp:= `encrypt`(v0, v8) @signature `Lcom/google/crypto/tink/subtle/IndCpaCipher;.encrypt:([B)[B` @kind interface;
  #L1e9d92.  v8:= temp @kind object;
  #L1e9d94.  v0:= 0I;
  #L1e9d96.  if v9 != 0 then goto L1e9d9e;
  #L1e9d9a.  v9:= new `byte`[v0];
  #L1e9d9e.  v1:= 8I;
  #L1e9da2.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e9da8.  v2:= temp @kind object;
  #L1e9daa.  v3:= 8L;
  #L1e9dae.  v5:= length @variable v9;
  #L1e9db0.  v5:= (`long`) v5 @kind i2l;
  #L1e9db2.  v5:= v5 * v3 @kind long;
  #L1e9db6.  call temp:= `putLong`(v2, v5) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e9dbc.  v2:= temp @kind object;
  #L1e9dbe.  call temp:= `array`(v2) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e9dc4.  v2:= temp @kind object;
  #L1e9dc6.  call temp:= `copyOf`(v2, v1) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e9dcc.  v1:= temp @kind object;
  #L1e9dce.  v2:= v7.`com.google.crypto.tink.subtle.EncryptThenAuthenticate.b` @type ^`com.google.crypto.tink.Mac` @kind object;
  #L1e9dd2.  v3:= 3I;
  #L1e9dd4.  v3:= new `byte`[][v3];
  #L1e9dd8.  v3[v0]:= v9 @kind object;
  #L1e9ddc.  v9:= 1I;
  #L1e9dde.  v3[v9]:= v8 @kind object;
  #L1e9de2.  v4:= 2I;
  #L1e9de4.  v3[v4]:= v1 @kind object;
  #L1e9de8.  call temp:= `concat`(v3) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1e9dee.  v1:= temp @kind object;
  #L1e9df0.  call temp:= `computeMac`(v2, v1) @signature `Lcom/google/crypto/tink/Mac;.computeMac:([B)[B` @kind interface;
  #L1e9df6.  v1:= temp @kind object;
  #L1e9df8.  v2:= new `byte`[][v4];
  #L1e9dfc.  v2[v0]:= v8 @kind object;
  #L1e9e00.  v2[v9]:= v1 @kind object;
  #L1e9e04.  call temp:= `concat`(v2) @signature `Lcom/google/crypto/tink/subtle/Bytes;.concat:([[B)[B` @kind static;
  #L1e9e0a.  v8:= temp @kind object;
  #L1e9e0c.  return v8 @kind object;
}
