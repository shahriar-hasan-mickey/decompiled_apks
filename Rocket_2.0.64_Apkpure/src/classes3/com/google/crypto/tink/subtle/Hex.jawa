record `com.google.crypto.tink.subtle.Hex` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Hex` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Hex;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ebb08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ebb0e.  return @kind void;
}
procedure `byte`[] `decode`(`java.lang.String` v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Hex;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1eba00.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1eba06.  v0:= temp;
  #L1eba08.  v0:= v0 %% 2;
  #L1eba0c.  if v0 != 0 then goto L1eba80;
  #L1eba10.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1eba16.  v0:= temp;
  #L1eba18.  v0:= v0 / 2;
  #L1eba1c.  v1:= new `byte`[v0];
  #L1eba20.  v2:= 0I;
  #L1eba22.  if v2 >= v0 then goto L1eba7e;
  #L1eba26.  v3:= v2 * 2;
  #L1eba2a.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1eba30.  v4:= temp;
  #L1eba32.  v5:= 16I;
  #L1eba36.  call temp:= `digit`(v4, v5) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L1eba3c.  v4:= temp;
  #L1eba3e.  v3:= v3 + 1;
  #L1eba42.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1eba48.  v3:= temp;
  #L1eba4a.  call temp:= `digit`(v3, v5) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L1eba50.  v3:= temp;
  #L1eba52.  v5:= -1I;
  #L1eba54.  if v4 == v5 then goto L1eba6e;
  #L1eba58.  if v3 == v5 then goto L1eba6e;
  #L1eba5c.  v4:= v4 * 16;
  #L1eba60.  v4:= v4 + v3 @kind int;
  #L1eba62.  v3:= (`byte`) v4 @kind i2b;
  #L1eba64.  v1[v2]:= v3 @kind byte;
  #L1eba68.  v2:= v2 + 1;
  #L1eba6c.  goto L1eba22;
  #L1eba6e.  v6:= new `java.lang.IllegalArgumentException`;
  #L1eba72.  v0:= "input is not hexadecimal" @kind object;
  #L1eba76.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eba7c.  throw v6;
  #L1eba7e.  return v1 @kind object;
  #L1eba80.  v6:= new `java.lang.IllegalArgumentException`;
  #L1eba84.  v0:= "Expected a string of even length" @kind object;
  #L1eba88.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1eba8e.  throw v6;
}
procedure `java.lang.String` `encode`(`byte`[] v6 @kind object) @signature `Lcom/google/crypto/tink/subtle/Hex;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ebaa0.  v0:= new `java.lang.StringBuilder`;
  #L1ebaa4.  v1:= length @variable v6;
  #L1ebaa6.  v1:= v1 * 2;
  #L1ebaaa.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1ebab0.  v1:= length @variable v6;
  #L1ebab2.  v2:= 0I;
  #L1ebab4.  if v2 >= v1 then goto L1ebaee;
  #L1ebab8.  v3:= v6[v2] @kind byte;
  #L1ebabc.  v3:= v3 ^& 255;
  #L1ebac0.  v4:= v3 / 16;
  #L1ebac4.  v5:= "0123456789abcdef" @kind object;
  #L1ebac8.  call temp:= `charAt`(v5, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1ebace.  v4:= temp;
  #L1ebad0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebad6.  v3:= v3 %% 16;
  #L1ebada.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1ebae0.  v3:= temp;
  #L1ebae2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ebae8.  v2:= v2 + 1;
  #L1ebaec.  goto L1ebab4;
  #L1ebaee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ebaf4.  v6:= temp @kind object;
  #L1ebaf6.  return v6 @kind object;
}
