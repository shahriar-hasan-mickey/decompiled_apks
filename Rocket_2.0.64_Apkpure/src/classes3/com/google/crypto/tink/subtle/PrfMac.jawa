record `com.google.crypto.tink.subtle.PrfMac` @kind class @AccessFlag PUBLIC extends `com.google.crypto.tink.Mac` @kind interface {
  `com.google.crypto.tink.prf.Prf` `com.google.crypto.tink.subtle.PrfMac.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.PrfMac.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.PrfMac` v1 @kind this, `com.google.crypto.tink.prf.Prf` v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.<init>:(Lcom/google/crypto/tink/prf/Prf;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ed080.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ed086.  v1.`com.google.crypto.tink.subtle.PrfMac.a` @type ^`com.google.crypto.tink.prf.Prf` := v2 @kind object;
  #L1ed08a.  v1.`com.google.crypto.tink.subtle.PrfMac.b` @type ^`int` := v3;
  #L1ed08e.  v0:= 10I;
  #L1ed092.  if v3 < v0 then goto L1ed0a4;
  #L1ed096.  v0:= 0I;
  #L1ed098.  v0:= new `byte`[v0];
  #L1ed09c.  call temp:= `compute`(v2, v0, v3) @signature `Lcom/google/crypto/tink/prf/Prf;.compute:([BI)[B` @kind interface;
  #L1ed0a2.  return @kind void;
  #L1ed0a4.  v2:= new `java.security.InvalidAlgorithmParameterException`;
  #L1ed0a8.  v3:= "tag size too small, need at least 10 bytes" @kind object;
  #L1ed0ac.  call `<init>`(v2, v3) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed0b2.  throw v2;
}
procedure `byte`[] `computeMac`(`com.google.crypto.tink.subtle.PrfMac` v2 @kind this, `byte`[] v3 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.computeMac:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ed05c.  v0:= v2.`com.google.crypto.tink.subtle.PrfMac.a` @type ^`com.google.crypto.tink.prf.Prf` @kind object;
  #L1ed060.  v1:= v2.`com.google.crypto.tink.subtle.PrfMac.b` @type ^`int`;
  #L1ed064.  call temp:= `compute`(v0, v3, v1) @signature `Lcom/google/crypto/tink/prf/Prf;.compute:([BI)[B` @kind interface;
  #L1ed06a.  v3:= temp @kind object;
  #L1ed06c.  return v3 @kind object;
}
procedure `void` `verifyMac`(`com.google.crypto.tink.subtle.PrfMac` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.verifyMac:([B[B)V` @AccessFlag PUBLIC {
    temp;

  #L1ed0c4.  call temp:= `computeMac`(v0, v2) @signature `Lcom/google/crypto/tink/subtle/PrfMac;.computeMac:([B)[B` @kind virtual;
  #L1ed0ca.  v2:= temp @kind object;
  #L1ed0cc.  call temp:= `equal`(v2, v1) @signature `Lcom/google/crypto/tink/subtle/Bytes;.equal:([B[B)Z` @kind static;
  #L1ed0d2.  v1:= temp;
  #L1ed0d4.  if v1 == 0 then goto L1ed0da;
  #L1ed0d8.  return @kind void;
  #L1ed0da.  v1:= new `java.security.GeneralSecurityException`;
  #L1ed0de.  v2:= "invalid MAC" @kind object;
  #L1ed0e2.  call `<init>`(v1, v2) @signature `Ljava/security/GeneralSecurityException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ed0e8.  throw v1;
}
