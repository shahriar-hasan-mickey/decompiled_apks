record `com.google.crypto.tink.subtle.AesGcmHkdfStreaming` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.crypto.tink.subtle.i` @kind class {
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v2 @kind this, `byte`[] v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 , `int` v7 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.<init>:([BLjava/lang/String;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1e1cf0.  call `<init>`(v2) @signature `Lcom/google/crypto/tink/subtle/i;.<init>:()V` @kind direct;
  #L1e1cf6.  v0:= length @variable v3;
  #L1e1cf8.  v1:= 16I;
  #L1e1cfc.  if v0 < v1 then goto L1e1d52;
  #L1e1d00.  v0:= length @variable v3;
  #L1e1d02.  if v0 < v5 then goto L1e1d52;
  #L1e1d06.  call `validateAesKeySize`(v5) @signature `Lcom/google/crypto/tink/subtle/Validators;.validateAesKeySize:(I)V` @kind static;
  #L1e1d0c.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L1e1d12.  v0:= temp;
  #L1e1d14.  v0:= v0 + v7 @kind int;
  #L1e1d16.  v0:= v0 + v1 @kind int;
  #L1e1d18.  if v6 <= v0 then goto L1e1d42;
  #L1e1d1c.  v0:= length @variable v3;
  #L1e1d1e.  call temp:= `copyOf`(v3, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L1e1d24.  v3:= temp @kind object;
  #L1e1d26.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @type ^`byte`[] := v3 @kind object;
  #L1e1d2a.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @type ^`java.lang.String` := v4 @kind object;
  #L1e1d2e.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int` := v5;
  #L1e1d32.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int` := v6;
  #L1e1d36.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int` := v7;
  #L1e1d3a.  v6:= v6 - v1 @kind int;
  #L1e1d3c.  v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int` := v6;
  #L1e1d40.  return @kind void;
  #L1e1d42.  v3:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e1d46.  v4:= "ciphertextSegmentSize too small" @kind object;
  #L1e1d4a.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e1d50.  throw v3;
  #L1e1d52.  v3:= new `java.security.InvalidAlgorithmParameterException`;
  #L1e1d56.  v4:= new `java.lang.StringBuilder`;
  #L1e1d5a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1e1d60.  v6:= "ikm too short, must be >= " @kind object;
  #L1e1d64.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e1d6a.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1e1d70.  v5:= temp;
  #L1e1d72.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1e1d78.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1e1d7e.  v4:= temp @kind object;
  #L1e1d80.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidAlgorithmParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e1d86.  throw v3;
}
procedure `javax.crypto.Cipher` `a`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.a:()Ljavax/crypto/Cipher;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1e1ba0.  call temp:= `g`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.g:()Ljavax/crypto/Cipher;` @kind static;
  #L1e1ba6.  v0:= temp @kind object;
  #L1e1ba8.  return v0 @kind object;
}
procedure `byte`[] `b`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.b:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e1978.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.k:()[B` @kind direct;
  #L1e197e.  v0:= temp @kind object;
  #L1e1980.  return v0 @kind object;
}
procedure `byte`[] `c`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.c:()[B` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1e1994.  call temp:= `j`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.j:()[B` @kind static;
  #L1e199a.  v0:= temp @kind object;
  #L1e199c.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `d`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.d:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e1c54.  call temp:= `h`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.h:([B[B)Ljavax/crypto/spec/SecretKeySpec;` @kind direct;
  #L1e1c5a.  v0:= temp @kind object;
  #L1e1c5c.  return v0 @kind object;
}
procedure `javax.crypto.spec.GCMParameterSpec` `e`(`byte`[] v0 @kind object, `long` v1 , `boolean` v3 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.e:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e1be4.  call temp:= `i`(v0, v1, v3) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.i:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @kind static;
  #L1e1bea.  v0:= temp @kind object;
  #L1e1bec.  return v0 @kind object;
}
procedure `int` `f`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.f:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1e1a5c.  v0:= v0.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L1e1a60.  return v0;
}
procedure `javax.crypto.Cipher` `g`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.g:()Ljavax/crypto/Cipher;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1e1bbc.  v0:= `@@com.google.crypto.tink.subtle.EngineFactory.CIPHER` @type ^`com.google.crypto.tink.subtle.EngineFactory` @kind object;
  #L1e1bc0.  v1:= "AES/GCM/NoPadding" @kind object;
  #L1e1bc4.  call temp:= `getInstance`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/EngineFactory;.getInstance:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L1e1bca.  v0:= temp @kind object;
  #L1e1bcc.  v0:= (`javax.crypto.Cipher`) v0 @kind object;
  #L1e1bd0.  return v0 @kind object;
}
procedure `javax.crypto.spec.SecretKeySpec` `h`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.h:([B[B)Ljavax/crypto/spec/SecretKeySpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1e1c70.  v0:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.e` @type ^`java.lang.String` @kind object;
  #L1e1c74.  v1:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.f` @type ^`byte`[] @kind object;
  #L1e1c78.  v2:= v3.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L1e1c7c.  call temp:= `computeHkdf`(v0, v1, v4, v5, v2) @signature `Lcom/google/crypto/tink/subtle/Hkdf;.computeHkdf:(Ljava/lang/String;[B[B[BI)[B` @kind static;
  #L1e1c82.  v4:= temp @kind object;
  #L1e1c84.  v5:= new `javax.crypto.spec.SecretKeySpec`;
  #L1e1c88.  v0:= "AES" @kind object;
  #L1e1c8c.  call `<init>`(v5, v4, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e1c92.  return v5 @kind object;
}
procedure `javax.crypto.spec.GCMParameterSpec` `i`(`byte`[] v2 @kind object, `long` v3 , `boolean` v5 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.i:([BJZ)Ljavax/crypto/spec/GCMParameterSpec;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1e1c00.  v0:= 12I;
  #L1e1c04.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L1e1c0a.  v0:= temp @kind object;
  #L1e1c0c.  v1:= `@@java.nio.ByteOrder.BIG_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L1e1c10.  call temp:= `order`(v0, v1) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e1c16.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e1c1c.  call `putAsUnsigedInt`(v0, v3) @signature `Lcom/google/crypto/tink/subtle/SubtleUtil;.putAsUnsigedInt:(Ljava/nio/ByteBuffer;J)V` @kind static;
  #L1e1c22.  v2:= (`byte`) v5 @kind i2b;
  #L1e1c24.  call temp:= `put`(v0, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1e1c2a.  v2:= new `javax.crypto.spec.GCMParameterSpec`;
  #L1e1c2e.  v3:= 128I;
  #L1e1c32.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1e1c38.  v4:= temp @kind object;
  #L1e1c3a.  call `<init>`(v2, v3, v4) @signature `Ljavax/crypto/spec/GCMParameterSpec;.<init>:(I[B)V` @kind direct;
  #L1e1c40.  return v2 @kind object;
}
procedure `byte`[] `j`() @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.j:()[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1e19b0.  v0:= 7I;
  #L1e19b2.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1e19b8.  v0:= temp @kind object;
  #L1e19ba.  return v0 @kind object;
}
procedure `byte`[] `k`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.k:()[B` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1e19cc.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L1e19d0.  call temp:= `randBytes`(v0) @signature `Lcom/google/crypto/tink/subtle/Random;.randBytes:(I)[B` @kind static;
  #L1e19d6.  v0:= temp @kind object;
  #L1e19d8.  return v0 @kind object;
}
procedure `long` `expectedCiphertextSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v5 @kind this, `long` v6 ) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.expectedCiphertextSize:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e1ca4.  call temp:= `getCiphertextOffset`(v5) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOffset:()I` @kind virtual;
  #L1e1caa.  v0:= temp;
  #L1e1cac.  v0:= (`long`) v0 @kind i2l;
  #L1e1cae.  v6:= v6 + v0 @kind long;
  #L1e1cb0.  v0:= v5.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int`;
  #L1e1cb4.  v1:= (`long`) v0 @kind i2l;
  #L1e1cb6.  v1:= v6 / v1 @kind long;
  #L1e1cba.  v3:= v5.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int`;
  #L1e1cbe.  v3:= (`long`) v3 @kind i2l;
  #L1e1cc0.  v1:= v1 * v3 @kind long;
  #L1e1cc4.  v3:= (`long`) v0 @kind i2l;
  #L1e1cc6.  v6:= v6 %% v3 @kind long;
  #L1e1cc8.  v3:= 0L;
  #L1e1ccc.  v0:= lcmp(v6, v3);
  #L1e1cd0.  if v0 <= 0 then goto L1e1cdc;
  #L1e1cd4.  v3:= 16L;
  #L1e1cd8.  v6:= v6 + v3 @kind long;
  #L1e1cda.  v1:= v1 + v6 @kind long;
  #L1e1cdc.  return v1 @kind wide;
}
procedure `int` `getCiphertextOffset`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v2 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1e1a74.  call temp:= `getHeaderLength`(v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @kind virtual;
  #L1e1a7a.  v0:= temp;
  #L1e1a7c.  v1:= v2.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int`;
  #L1e1a80.  v0:= v0 + v1 @kind int;
  #L1e1a82.  return v0;
}
procedure `int` `getCiphertextOverhead`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextOverhead:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1a94.  v0:= 16I;
  #L1e1a98.  return v0;
}
procedure `int` `getCiphertextSegmentSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getCiphertextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1aac.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.b` @type ^`int`;
  #L1e1ab0.  return v0;
}
procedure `int` `getFirstSegmentOffset`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getFirstSegmentOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1ac4.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.d` @type ^`int`;
  #L1e1ac8.  return v0;
}
procedure `int` `getHeaderLength`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getHeaderLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1adc.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.a` @type ^`int`;
  #L1e1ae0.  v0:= v0 + 1;
  #L1e1ae4.  v0:= v0 + 7;
  #L1e1ae8.  return v0;
}
procedure `int` `getPlaintextSegmentSize`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.getPlaintextSegmentSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1afc.  v0:= v1.`com.google.crypto.tink.subtle.AesGcmHkdfStreaming.c` @type ^`int`;
  #L1e1b00.  return v0;
}
procedure `java.nio.channels.ReadableByteChannel` `newDecryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.ReadableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1b4c.  call temp:= `newDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingChannel:(Ljava/nio/channels/ReadableByteChannel;[B)Ljava/nio/channels/ReadableByteChannel;` @kind super;
  #L1e1b52.  v1:= temp @kind object;
  #L1e1b54.  return v1 @kind object;
}
procedure `java.io.InputStream` `newDecryptingStream`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1b14.  call temp:= `newDecryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newDecryptingStream:(Ljava/io/InputStream;[B)Ljava/io/InputStream;` @kind super;
  #L1e1b1a.  v1:= temp @kind object;
  #L1e1b1c.  return v1 @kind object;
}
procedure `java.nio.channels.WritableByteChannel` `newEncryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.WritableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1b84.  call temp:= `newEncryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingChannel:(Ljava/nio/channels/WritableByteChannel;[B)Ljava/nio/channels/WritableByteChannel;` @kind super;
  #L1e1b8a.  v1:= temp @kind object;
  #L1e1b8c.  return v1 @kind object;
}
procedure `java.io.OutputStream` `newEncryptingStream`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.io.OutputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1b30.  call temp:= `newEncryptingStream`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newEncryptingStream:(Ljava/io/OutputStream;[B)Ljava/io/OutputStream;` @kind super;
  #L1e1b36.  v1:= temp @kind object;
  #L1e1b38.  return v1 @kind object;
}
procedure `java.nio.channels.SeekableByteChannel` `newSeekableDecryptingChannel`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `java.nio.channels.SeekableByteChannel` v1 @kind object, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1b68.  call temp:= `newSeekableDecryptingChannel`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/i;.newSeekableDecryptingChannel:(Ljava/nio/channels/SeekableByteChannel;[B)Ljava/nio/channels/SeekableByteChannel;` @kind super;
  #L1e1b6e.  v1:= temp @kind object;
  #L1e1b70.  return v1 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$a` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e19ec.  v0:= new `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$a`;
  #L1e19f0.  call `<init>`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;.<init>:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;)V` @kind direct;
  #L1e19f6.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentDecrypter` `newStreamSegmentDecrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/StreamSegmentDecrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1e1a24.  call temp:= `newStreamSegmentDecrypter`(v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentDecrypter:()Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$a;` @kind virtual;
  #L1e1a2a.  v0:= temp @kind object;
  #L1e1a2c.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1e1a08.  v0:= new `com.google.crypto.tink.subtle.AesGcmHkdfStreaming$b`;
  #L1e1a0c.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;.<init>:(Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;[B)V` @kind direct;
  #L1e1a12.  return v0 @kind object;
}
procedure `com.google.crypto.tink.subtle.StreamSegmentEncrypter` `newStreamSegmentEncrypter`(`com.google.crypto.tink.subtle.AesGcmHkdfStreaming` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/StreamSegmentEncrypter;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1e1a40.  call temp:= `newStreamSegmentEncrypter`(v0, v1) @signature `Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming;.newStreamSegmentEncrypter:([B)Lcom/google/crypto/tink/subtle/AesGcmHkdfStreaming$b;` @kind virtual;
  #L1e1a46.  v1:= temp @kind object;
  #L1e1a48.  return v1 @kind object;
}
