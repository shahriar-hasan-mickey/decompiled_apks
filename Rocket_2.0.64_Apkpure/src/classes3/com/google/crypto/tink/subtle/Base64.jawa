record `com.google.crypto.tink.subtle.Base64` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@com.google.crypto.tink.subtle.Base64.CRLF` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_CLOSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_PADDING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.NO_WRAP` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@com.google.crypto.tink.subtle.Base64.URL_SAFE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@com.google.crypto.tink.subtle.Base64.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/subtle/Base64;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1e3720.  v0:= "UTF-8" @kind object;
  #L1e3724.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1e372a.  v0:= temp @kind object;
  #L1e372c.  `@@com.google.crypto.tink.subtle.Base64.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L1e3730.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.subtle.Base64` v0 @kind this) @signature `Lcom/google/crypto/tink/subtle/Base64;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1e3744.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e374a.  return @kind void;
}
procedure `byte`[] `decode`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e353c.  v0:= 2I;
  #L1e353e.  call temp:= `decode`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L1e3544.  v1:= temp @kind object;
  #L1e3546.  return v1 @kind object;
}
procedure `byte`[] `decode`(`java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3558.  v0:= `@@com.google.crypto.tink.subtle.Base64.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1e355c.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L1e3562.  v1:= temp @kind object;
  #L1e3564.  call temp:= `decode`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BI)[B` @kind static;
  #L1e356a.  v1:= temp @kind object;
  #L1e356c.  return v1 @kind object;
}
procedure `byte`[] `decode`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e34b8.  v0:= length @variable v2;
  #L1e34ba.  v1:= 0I;
  #L1e34bc.  call temp:= `decode`(v2, v1, v0, v3) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BIII)[B` @kind static;
  #L1e34c2.  v2:= temp @kind object;
  #L1e34c4.  return v2 @kind object;
}
procedure `byte`[] `decode`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e34d8.  v0:= new `com.google.crypto.tink.subtle.Base64$b`;
  #L1e34dc.  v1:= v4 * 3;
  #L1e34e0.  v1:= v1 / 4;
  #L1e34e4.  v1:= new `byte`[v1];
  #L1e34e8.  call `<init>`(v0, v5, v1) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.<init>:(I[B)V` @kind direct;
  #L1e34ee.  v5:= 1I;
  #L1e34f0.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lcom/google/crypto/tink/subtle/Base64$b;.a:([BIIZ)Z` @kind virtual;
  #L1e34f6.  v2:= temp;
  #L1e34f8.  if v2 == 0 then goto L1e351a;
  #L1e34fc.  v2:= v0.`com.google.crypto.tink.subtle.Base64$a.b` @type ^`int`;
  #L1e3500.  v3:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L1e3504.  v4:= length @variable v3;
  #L1e3506.  if v2 != v4 then goto L1e350c;
  #L1e350a.  return v3 @kind object;
  #L1e350c.  v4:= new `byte`[v2];
  #L1e3510.  v5:= 0I;
  #L1e3512.  call `arraycopy`(v3, v5, v4, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1e3518.  return v4 @kind object;
  #L1e351a.  v2:= new `java.lang.IllegalArgumentException`;
  #L1e351e.  v3:= "bad base-64" @kind object;
  #L1e3522.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1e3528.  throw v2;
}
procedure `java.lang.String` `encode`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3654.  v0:= 2I;
  #L1e3656.  call temp:= `encodeToString`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L1e365c.  v1:= temp @kind object;
  #L1e365e.  return v1 @kind object;
}
procedure `byte`[] `encode`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1e3580.  v0:= length @variable v2;
  #L1e3582.  v1:= 0I;
  #L1e3584.  call temp:= `encode`(v2, v1, v0, v3) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @kind static;
  #L1e358a.  v2:= temp @kind object;
  #L1e358c.  return v2 @kind object;
}
procedure `byte`[] `encode`(`byte`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e35a0.  v0:= new `com.google.crypto.tink.subtle.Base64$c`;
  #L1e35a4.  v1:= 0I;
  #L1e35a6.  call `<init>`(v0, v8, v1) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.<init>:(I[B)V` @kind direct;
  #L1e35ac.  v8:= v7 / 3;
  #L1e35b0.  v8:= v8 * 4;
  #L1e35b4.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.f` @type ^`boolean` @kind boolean;
  #L1e35b8.  v2:= 2I;
  #L1e35ba.  v3:= 1I;
  #L1e35bc.  if v1 == 0 then goto L1e35ce;
  #L1e35c0.  v1:= v7 %% 3;
  #L1e35c4.  if v1 <= 0 then goto L1e35e6;
  #L1e35c8.  v8:= v8 + 4;
  #L1e35cc.  goto L1e35e6;
  #L1e35ce.  v1:= v7 %% 3;
  #L1e35d2.  if v1 == v3 then goto L1e35e2;
  #L1e35d6.  if v1 == v2 then goto L1e35dc;
  #L1e35da.  goto L1e35e6;
  #L1e35dc.  v8:= v8 + 3;
  #L1e35e0.  goto L1e35e6;
  #L1e35e2.  v8:= v8 + 2;
  #L1e35e6.  v1:= v0.`com.google.crypto.tink.subtle.Base64$c.g` @type ^`boolean` @kind boolean;
  #L1e35ea.  if v1 == 0 then goto L1e360e;
  #L1e35ee.  if v7 <= 0 then goto L1e360e;
  #L1e35f2.  v1:= v7 + -1;
  #L1e35f6.  v1:= v1 / 57;
  #L1e35fa.  v1:= v1 + v3 @kind int;
  #L1e35fc.  v4:= v0.`com.google.crypto.tink.subtle.Base64$c.h` @type ^`boolean` @kind boolean;
  #L1e3600.  if v4 == 0 then goto L1e3606;
  #L1e3604.  goto L1e3608;
  #L1e3606.  v2:= 1I;
  #L1e3608.  v1:= v1 * v2 @kind int;
  #L1e360c.  v8:= v8 + v1 @kind int;
  #L1e360e.  v8:= new `byte`[v8];
  #L1e3612.  v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] := v8 @kind object;
  #L1e3616.  call temp:= `a`(v0, v5, v6, v7, v3) @signature `Lcom/google/crypto/tink/subtle/Base64$c;.a:([BIIZ)Z` @kind virtual;
  #L1e361c.  v5:= v0.`com.google.crypto.tink.subtle.Base64$a.a` @type ^`byte`[] @kind object;
  #L1e3620.  return v5 @kind object;
}
procedure `java.lang.String` `encodeToString`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3670.  v0:= new `java.lang.String`;
  #L1e3674.  call temp:= `encode`(v1, v2) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BI)[B` @kind static;
  #L1e367a.  v1:= temp @kind object;
  #L1e367c.  v2:= "US-ASCII" @kind object;
  #L1e3680.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e3686.  return v0 @kind object;
  #L1e3688.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L1e368a.  v2:= new `java.lang.AssertionError`;
  #L1e368e.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1e3694.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L1e3670..L1e3686] goto L1e3688;
}
procedure `java.lang.String` `encodeToString`(`byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BIII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e36b8.  v0:= new `java.lang.String`;
  #L1e36bc.  call temp:= `encode`(v1, v2, v3, v4) @signature `Lcom/google/crypto/tink/subtle/Base64;.encode:([BIII)[B` @kind static;
  #L1e36c2.  v1:= temp @kind object;
  #L1e36c4.  v2:= "US-ASCII" @kind object;
  #L1e36c8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1e36ce.  return v0 @kind object;
  #L1e36d0.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L1e36d2.  v2:= new `java.lang.AssertionError`;
  #L1e36d6.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1e36dc.  throw v2;
  catch `java.io.UnsupportedEncodingException` @[L1e36b8..L1e36ce] goto L1e36d0;
}
procedure `byte`[] `urlSafeDecode`(`java.lang.String` v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.urlSafeDecode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3634.  v0:= 11I;
  #L1e3638.  call temp:= `decode`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L1e363e.  v1:= temp @kind object;
  #L1e3640.  return v1 @kind object;
}
procedure `java.lang.String` `urlSafeEncode`(`byte`[] v1 @kind object) @signature `Lcom/google/crypto/tink/subtle/Base64;.urlSafeEncode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1e3700.  v0:= 11I;
  #L1e3704.  call temp:= `encodeToString`(v1, v0) @signature `Lcom/google/crypto/tink/subtle/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L1e370a.  v1:= temp @kind object;
  #L1e370c.  return v1 @kind object;
}
