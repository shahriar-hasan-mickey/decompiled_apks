record `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.CodedInputStream` @kind class {
  `java.io.InputStream` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @AccessFlag PRIVATE_FINAL;
  `byte`[] `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @AccessFlag PRIVATE;
  `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.n` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b2e58.  v0:= 0I;
  #L1b2e5a.  call `<init>`(v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @kind direct;
  #L1b2e60.  v1:= 2147483647I;
  #L1b2e66.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int` := v1;
  #L1b2e6a.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.n` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` := v0 @kind object;
  #L1b2e6e.  v0:= "input" @kind object;
  #L1b2e72.  call temp:= `b`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.b:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b2e78.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` := v3 @kind object;
  #L1b2e7c.  v3:= new `byte`[v4];
  #L1b2e80.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] := v3 @kind object;
  #L1b2e84.  v3:= 0I;
  #L1b2e86.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v3;
  #L1b2e8a.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b2e8e.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v3;
  #L1b2e92.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `java.io.InputStream` v1 @kind object, `int` v2 , `com.google.crypto.tink.shaded.protobuf.CodedInputStream$a` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;ILcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b2ea4.  call `<init>`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.<init>:(Ljava/io/InputStream;I)V` @kind direct;
  #L1b2eaa.  return @kind void;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `d`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.d:(I)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2470.  call temp:= `f`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @kind direct;
  #L1b2476.  v0:= temp @kind object;
  #L1b2478.  if v0 == 0 then goto L1b2486;
  #L1b247c.  call temp:= `copyFrom`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b2482.  v6:= temp @kind object;
  #L1b2484.  return v6 @kind object;
  #L1b2486.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b248a.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b248e.  v2:= v1 - v0 @kind int;
  #L1b2492.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2496.  v3:= v3 + v1 @kind int;
  #L1b2498.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v3;
  #L1b249c.  v1:= 0I;
  #L1b249e.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v1;
  #L1b24a2.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v1;
  #L1b24a6.  v3:= v6 - v2 @kind int;
  #L1b24aa.  call temp:= `g`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @kind direct;
  #L1b24b0.  v3:= temp @kind object;
  #L1b24b2.  v6:= new `byte`[v6];
  #L1b24b6.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b24ba.  call `arraycopy`(v4, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b24c0.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b24c6.  v0:= temp @kind object;
  #L1b24c8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b24ce.  v3:= temp;
  #L1b24d0.  if v3 == 0 then goto L1b24ee;
  #L1b24d4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b24da.  v3:= temp @kind object;
  #L1b24dc.  v3:= (`byte`[]) v3 @kind object;
  #L1b24e0.  v4:= length @variable v3;
  #L1b24e2.  call `arraycopy`(v3, v1, v6, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b24e8.  v3:= length @variable v3;
  #L1b24ea.  v2:= v2 + v3 @kind int;
  #L1b24ec.  goto L1b24c8;
  #L1b24ee.  call temp:= `k`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b24f4.  v6:= temp @kind object;
  #L1b24f6.  return v6 @kind object;
}
procedure `byte`[] `e`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b228c.  call temp:= `f`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @kind direct;
  #L1b2292.  v0:= temp @kind object;
  #L1b2294.  if v0 == 0 then goto L1b22ac;
  #L1b2298.  if v6 == 0 then goto L1b22aa;
  #L1b229c.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b22a2.  v5:= temp @kind object;
  #L1b22a4.  v0:= v5 @kind object;
  #L1b22a6.  v0:= (`byte`[]) v0 @kind object;
  #L1b22aa.  return v0 @kind object;
  #L1b22ac.  v6:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b22b0.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b22b4.  v1:= v0 - v6 @kind int;
  #L1b22b8.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b22bc.  v2:= v2 + v0 @kind int;
  #L1b22be.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v2;
  #L1b22c2.  v0:= 0I;
  #L1b22c4.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v0;
  #L1b22c8.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v0;
  #L1b22cc.  v2:= v5 - v1 @kind int;
  #L1b22d0.  call temp:= `g`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @kind direct;
  #L1b22d6.  v2:= temp @kind object;
  #L1b22d8.  v5:= new `byte`[v5];
  #L1b22dc.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b22e0.  call `arraycopy`(v3, v6, v5, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b22e6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b22ec.  v6:= temp @kind object;
  #L1b22ee.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b22f4.  v2:= temp;
  #L1b22f6.  if v2 == 0 then goto L1b2314;
  #L1b22fa.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b2300.  v2:= temp @kind object;
  #L1b2302.  v2:= (`byte`[]) v2 @kind object;
  #L1b2306.  v3:= length @variable v2;
  #L1b2308.  call `arraycopy`(v2, v0, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b230e.  v2:= length @variable v2;
  #L1b2310.  v1:= v1 + v2 @kind int;
  #L1b2312.  goto L1b22ee;
  #L1b2314.  return v5 @kind object;
}
procedure `byte`[] `f`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.f:(I)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2328.  if v6 != 0 then goto L1b2332;
  #L1b232c.  v6:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L1b2330.  return v6 @kind object;
  #L1b2332.  if v6 < 0 then goto L1b23fc;
  #L1b2336.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b233a.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b233e.  v2:= v0 + v1 @kind int;
  #L1b2342.  v2:= v2 + v6 @kind int;
  #L1b2344.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L1b2348.  v3:= v2 - v3 @kind int;
  #L1b234c.  if v3 > 0 then goto L1b23f2;
  #L1b2350.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b2354.  if v2 > v3 then goto L1b23de;
  #L1b2358.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b235c.  v0:= v0 - v1 @kind int;
  #L1b235e.  v1:= v6 - v0 @kind int;
  #L1b2362.  v2:= 4096I;
  #L1b2366.  if v1 < v2 then goto L1b2380;
  #L1b236a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b236e.  call temp:= `available`(v2) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L1b2374.  v2:= temp;
  #L1b2376.  if v1 > v2 then goto L1b237c;
  #L1b237a.  goto L1b2380;
  #L1b237c.  v6:= 0I;
  #L1b237e.  return v6 @kind object;
  #L1b2380.  v1:= new `byte`[v6];
  #L1b2384.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2388.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b238c.  v4:= 0I;
  #L1b238e.  call `arraycopy`(v2, v3, v1, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b2394.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2398.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b239c.  v2:= v2 + v3 @kind int;
  #L1b239e.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v2;
  #L1b23a2.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v4;
  #L1b23a6.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v4;
  #L1b23aa.  if v0 >= v6 then goto L1b23dc;
  #L1b23ae.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b23b2.  v3:= v6 - v0 @kind int;
  #L1b23b6.  call temp:= `read`(v2, v1, v0, v3) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1b23bc.  v2:= temp;
  #L1b23be.  v3:= -1I;
  #L1b23c0.  if v2 == v3 then goto L1b23d2;
  #L1b23c4.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b23c8.  v3:= v3 + v2 @kind int;
  #L1b23ca.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v3;
  #L1b23ce.  v0:= v0 + v2 @kind int;
  #L1b23d0.  goto L1b23aa;
  #L1b23d2.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b23d8.  v6:= temp @kind object;
  #L1b23da.  throw v6;
  #L1b23dc.  return v1 @kind object;
  #L1b23de.  v3:= v3 - v0 @kind int;
  #L1b23e0.  v3:= v3 - v1 @kind int;
  #L1b23e2.  call `skipRawBytes`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L1b23e8.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b23ee.  v6:= temp @kind object;
  #L1b23f0.  throw v6;
  #L1b23f2.  call temp:= `i`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.i:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b23f8.  v6:= temp @kind object;
  #L1b23fa.  throw v6;
  #L1b23fc.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2402.  v6:= temp @kind object;
  #L1b2404.  throw v6;
}
procedure `java.util.List` `g`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v6 @kind this, `int` v7 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.g:(I)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b2aa8.  v0:= new `java.util.ArrayList`;
  #L1b2aac.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b2ab2.  if v7 <= 0 then goto L1b2b04;
  #L1b2ab6.  v1:= 4096I;
  #L1b2aba.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b2ac0.  v1:= temp;
  #L1b2ac2.  v2:= new `byte`[v1];
  #L1b2ac6.  v3:= 0I;
  #L1b2ac8.  if v3 >= v1 then goto L1b2afa;
  #L1b2acc.  v4:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b2ad0.  v5:= v1 - v3 @kind int;
  #L1b2ad4.  call temp:= `read`(v4, v2, v3, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1b2ada.  v4:= temp;
  #L1b2adc.  v5:= -1I;
  #L1b2ade.  if v4 == v5 then goto L1b2af0;
  #L1b2ae2.  v5:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2ae6.  v5:= v5 + v4 @kind int;
  #L1b2ae8.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v5;
  #L1b2aec.  v3:= v3 + v4 @kind int;
  #L1b2aee.  goto L1b2ac8;
  #L1b2af0.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2af6.  v7:= temp @kind object;
  #L1b2af8.  throw v7;
  #L1b2afa.  v7:= v7 - v1 @kind int;
  #L1b2afc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b2b02.  goto L1b2ab2;
  #L1b2b04.  return v0 @kind object;
}
procedure `void` `i`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b2fe8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2fec.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int`;
  #L1b2ff0.  v0:= v0 + v1 @kind int;
  #L1b2ff2.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v0;
  #L1b2ff6.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2ffa.  v1:= v1 + v0 @kind int;
  #L1b2ffc.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b3000.  if v1 <= v2 then goto L1b3012;
  #L1b3004.  v1:= v1 - v2 @kind int;
  #L1b3006.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v1;
  #L1b300a.  v0:= v0 - v1 @kind int;
  #L1b300c.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v0;
  #L1b3010.  goto L1b3018;
  #L1b3012.  v0:= 0I;
  #L1b3014.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.i` @type ^`int` := v0;
  #L1b3018.  return @kind void;
}
procedure `void` `j`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b302c.  call temp:= `o`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L1b3032.  v0:= temp;
  #L1b3034.  if v0 != 0 then goto L1b3060;
  #L1b3038.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L1b303c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b3040.  v0:= v0 - v1 @kind int;
  #L1b3042.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b3046.  v0:= v0 - v1 @kind int;
  #L1b3048.  if v3 <= v0 then goto L1b3056;
  #L1b304c.  call temp:= `i`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.i:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b3052.  v3:= temp @kind object;
  #L1b3054.  throw v3;
  #L1b3056.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b305c.  v3:= temp @kind object;
  #L1b305e.  throw v3;
  #L1b3060.  return @kind void;
}
procedure `void` `k`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v8 @kind this, `int` v9 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.k:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1b311c.  if v9 < 0 then goto L1b324a;
  #L1b3120.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b3124.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b3128.  v2:= v0 + v1 @kind int;
  #L1b312c.  v2:= v2 + v9 @kind int;
  #L1b312e.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b3132.  if v2 > v3 then goto L1b3236;
  #L1b3136.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.n` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` @kind object;
  #L1b313a.  v3:= 0I;
  #L1b313c.  if v2 != 0 then goto L1b31fa;
  #L1b3140.  v0:= v0 + v1 @kind int;
  #L1b3142.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v0;
  #L1b3146.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b314a.  v0:= v0 - v1 @kind int;
  #L1b314c.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v3;
  #L1b3150.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b3154.  v3:= v0;
  #L1b3156.  if v3 >= v9 then goto L1b31ea;
  #L1b315a.  v0:= v9 - v3 @kind int;
  #L1b315e.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b3162.  v4:= (`long`) v0 @kind i2l;
  #L1b3164.  call temp:= `skip`(v1, v4) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L1b316a.  v0:= temp @kind wide;
  #L1b316c.  v6:= 0L;
  #L1b3170.  v2:= lcmp(v0, v6);
  #L1b3174.  if v2 < 0 then goto L1b318c;
  #L1b3178.  v6:= lcmp(v0, v4);
  #L1b317c.  if v6 > 0 then goto L1b318c;
  #L1b3180.  if v2 != 0 then goto L1b3186;
  #L1b3184.  goto L1b31ea;
  #L1b3186.  v1:= (`int`) v0 @kind l2i;
  #L1b3188.  v3:= v3 + v1 @kind int;
  #L1b318a.  goto L1b3156;
  #L1b318c.  v9:= new `java.lang.IllegalStateException`;
  #L1b3190.  v2:= new `java.lang.StringBuilder`;
  #L1b3194.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b319a.  v4:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b319e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b31a4.  v4:= temp @kind object;
  #L1b31a6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b31ac.  v4:= "#skip returned invalid result: " @kind object;
  #L1b31b0.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b31b6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b31bc.  v0:= "\nThe InputStream implementation is buggy." @kind object;
  #L1b31c0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b31c6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b31cc.  v0:= temp @kind object;
  #L1b31ce.  call `<init>`(v9, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b31d4.  throw v9;
  #L1b31d6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b31d8.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b31dc.  v0:= v0 + v3 @kind int;
  #L1b31de.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v0;
  #L1b31e2.  call `i`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L1b31e8.  throw v9;
  #L1b31ea.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b31ee.  v0:= v0 + v3 @kind int;
  #L1b31f0.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v0;
  #L1b31f4.  call `i`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L1b31fa.  if v3 >= v9 then goto L1b3234;
  #L1b31fe.  v0:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b3202.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b3206.  v1:= v0 - v1 @kind int;
  #L1b320a.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v0;
  #L1b320e.  v0:= 1I;
  #L1b3210.  call `j`(v8, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b3216.  v2:= v9 - v1 @kind int;
  #L1b321a.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b321e.  if v2 <= v3 then goto L1b3230;
  #L1b3222.  v1:= v1 + v3 @kind int;
  #L1b3224.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b3228.  call `j`(v8, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b322e.  goto L1b3216;
  #L1b3230.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b3234.  return @kind void;
  #L1b3236.  v3:= v3 - v0 @kind int;
  #L1b3238.  v3:= v3 - v1 @kind int;
  #L1b323a.  call `skipRawBytes`(v8, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L1b3240.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b3246.  v9:= temp @kind object;
  #L1b3248.  throw v9;
  #L1b324a.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b3250.  v9:= temp @kind object;
  #L1b3252.  throw v9;
  catch `java.lang.Throwable` @[L1b315e..L1b31d6] goto L1b31d6;
}
procedure `void` `l`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b3270.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b3274.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b3278.  v0:= v0 - v1 @kind int;
  #L1b327a.  v1:= 10I;
  #L1b327e.  if v0 < v1 then goto L1b328a;
  #L1b3282.  call `m`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.m:()V` @kind direct;
  #L1b3288.  goto L1b3290;
  #L1b328a.  call `n`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.n:()V` @kind direct;
  #L1b3290.  return @kind void;
}
procedure `void` `m`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.m:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b32a4.  v0:= 0I;
  #L1b32a6.  v1:= 10I;
  #L1b32aa.  if v0 >= v1 then goto L1b32ce;
  #L1b32ae.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b32b2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b32b6.  v3:= v2 + 1;
  #L1b32ba.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b32be.  v1:= v1[v2] @kind byte;
  #L1b32c2.  if v1 < 0 then goto L1b32c8;
  #L1b32c6.  return @kind void;
  #L1b32c8.  v0:= v0 + 1;
  #L1b32cc.  goto L1b32a6;
  #L1b32ce.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b32d4.  v0:= temp @kind object;
  #L1b32d6.  throw v0;
}
procedure `void` `n`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b32e8.  v0:= 0I;
  #L1b32ea.  v1:= 10I;
  #L1b32ee.  if v0 >= v1 then goto L1b3306;
  #L1b32f2.  call temp:= `readRawByte`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @kind virtual;
  #L1b32f8.  v1:= temp;
  #L1b32fa.  if v1 < 0 then goto L1b3300;
  #L1b32fe.  return @kind void;
  #L1b3300.  v0:= v0 + 1;
  #L1b3304.  goto L1b32ea;
  #L1b3306.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b330c.  v0:= temp @kind object;
  #L1b330e.  throw v0;
}
procedure `boolean` `o`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v7 @kind this, `int` v8 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1b2044.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2048.  v1:= v0 + v8 @kind int;
  #L1b204c.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2050.  if v1 <= v2 then goto L1b216e;
  #L1b2054.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L1b2058.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b205c.  v1:= v1 - v2 @kind int;
  #L1b205e.  v1:= v1 - v0 @kind int;
  #L1b2060.  v3:= 0I;
  #L1b2062.  if v8 <= v1 then goto L1b2068;
  #L1b2066.  return v3;
  #L1b2068.  v2:= v2 + v0 @kind int;
  #L1b206a.  v2:= v2 + v8 @kind int;
  #L1b206c.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b2070.  if v2 <= v0 then goto L1b2076;
  #L1b2074.  return v3;
  #L1b2076.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.n` @type ^`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d$a` @kind object;
  #L1b207a.  if v0 == 0 then goto L1b2084;
  #L1b207e.  call `a`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d$a;.a:()V` @kind interface;
  #L1b2084.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2088.  if v0 <= 0 then goto L1b20b8;
  #L1b208c.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2090.  if v1 <= v0 then goto L1b20a0;
  #L1b2094.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2098.  v1:= v1 - v0 @kind int;
  #L1b209a.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1b20a0.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b20a4.  v1:= v1 + v0 @kind int;
  #L1b20a6.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v1;
  #L1b20aa.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b20ae.  v1:= v1 - v0 @kind int;
  #L1b20b0.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v1;
  #L1b20b4.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b20b8.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b20bc.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b20c0.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b20c4.  v4:= length @variable v1;
  #L1b20c6.  v4:= v4 - v2 @kind int;
  #L1b20c8.  v5:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.c` @type ^`int`;
  #L1b20cc.  v6:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b20d0.  v5:= v5 - v6 @kind int;
  #L1b20d2.  v5:= v5 - v2 @kind int;
  #L1b20d4.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b20da.  v4:= temp;
  #L1b20dc.  call temp:= `read`(v0, v1, v2, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1b20e2.  v0:= temp;
  #L1b20e4.  if v0 == 0 then goto L1b2124;
  #L1b20e8.  v1:= -1I;
  #L1b20ea.  if v0 < v1 then goto L1b2124;
  #L1b20ee.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b20f2.  v1:= length @variable v1;
  #L1b20f4.  if v0 > v1 then goto L1b2124;
  #L1b20f8.  if v0 <= 0 then goto L1b2122;
  #L1b20fc.  v1:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2100.  v1:= v1 + v0 @kind int;
  #L1b2102.  v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int` := v1;
  #L1b2106.  call `i`(v7) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L1b210c.  v0:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2110.  if v0 < v8 then goto L1b2118;
  #L1b2114.  v8:= 1I;
  #L1b2116.  goto L1b2120;
  #L1b2118.  call temp:= `o`(v7, v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L1b211e.  v8:= temp;
  #L1b2120.  return v8;
  #L1b2122.  return v3;
  #L1b2124.  v8:= new `java.lang.IllegalStateException`;
  #L1b2128.  v1:= new `java.lang.StringBuilder`;
  #L1b212c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2132.  v2:= v7.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.f` @type ^`java.io.InputStream` @kind object;
  #L1b2136.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b213c.  v2:= temp @kind object;
  #L1b213e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2144.  v2:= "#read(byte[]) returned invalid result: " @kind object;
  #L1b2148.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b214e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2154.  v0:= "\nThe InputStream implementation is buggy." @kind object;
  #L1b2158.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b215e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2164.  v0:= temp @kind object;
  #L1b2166.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b216c.  throw v8;
  #L1b216e.  v0:= new `java.lang.IllegalStateException`;
  #L1b2172.  v1:= new `java.lang.StringBuilder`;
  #L1b2176.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b217c.  v2:= "refillBuffer() called when " @kind object;
  #L1b2180.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2186.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b218c.  v8:= " bytes were already available in buffer" @kind object;
  #L1b2190.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2196.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b219c.  v8:= temp @kind object;
  #L1b219e.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b21a4.  throw v0;
}
procedure `void` `checkLastTagWas`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2ebc.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L1b2ec0.  if v0 != v2 then goto L1b2ec6;
  #L1b2ec4.  return @kind void;
  #L1b2ec6.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.a:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2ecc.  v2:= temp @kind object;
  #L1b2ece.  throw v2;
}
procedure `void` `enableAliasing`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.enableAliasing:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L1b2ee0.  return @kind void;
}
procedure `int` `getBytesUntilLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getBytesUntilLimit:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2614.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b2618.  v1:= 2147483647I;
  #L1b261e.  if v0 != v1 then goto L1b2626;
  #L1b2622.  v0:= -1I;
  #L1b2624.  return v0;
  #L1b2626.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b262a.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b262e.  v1:= v1 + v2 @kind int;
  #L1b2630.  v0:= v0 - v1 @kind int;
  #L1b2632.  return v0;
}
procedure `int` `getLastTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getLastTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2644.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L1b2648.  return v0;
}
procedure `int` `getTotalBytesRead`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.getTotalBytesRead:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b265c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2660.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2664.  v0:= v0 + v1 @kind int;
  #L1b2666.  return v0;
}
procedure `long` `h`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b2db0.  v0:= 0L;
  #L1b2db4.  v2:= 0I;
  #L1b2db6.  v3:= 64I;
  #L1b2dba.  if v2 >= v3 then goto L1b2de0;
  #L1b2dbe.  call temp:= `readRawByte`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @kind virtual;
  #L1b2dc4.  v3:= temp;
  #L1b2dc6.  v4:= v3 ^& 127;
  #L1b2dca.  v4:= (`long`) v4 @kind i2l;
  #L1b2dcc.  v4:= v4 ^< v2 @kind long;
  #L1b2dce.  v0:= v0 ^| v4 @kind long;
  #L1b2dd0.  v3:= v3 ^& 128;
  #L1b2dd4.  if v3 != 0 then goto L1b2dda;
  #L1b2dd8.  return v0 @kind wide;
  #L1b2dda.  v2:= v2 + 7;
  #L1b2dde.  goto L1b2db6;
  #L1b2de0.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2de6.  v0:= temp @kind object;
  #L1b2de8.  throw v0;
}
procedure `boolean` `isAtEnd`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.isAtEnd:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b1e88.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b1e8c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b1e90.  v2:= 1I;
  #L1b1e92.  if v0 != v1 then goto L1b1ea4;
  #L1b1e96.  call temp:= `o`(v3, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.o:(I)Z` @kind direct;
  #L1b1e9c.  v0:= temp;
  #L1b1e9e.  if v0 != 0 then goto L1b1ea4;
  #L1b1ea2.  goto L1b1ea6;
  #L1b1ea4.  v2:= 0I;
  #L1b1ea6.  return v2;
}
procedure `void` `popLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1b2ef4.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int` := v1;
  #L1b2ef8.  call `i`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L1b2efe.  return @kind void;
}
procedure `int` `pushLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2678.  if v3 < 0 then goto L1b26a6;
  #L1b267c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int`;
  #L1b2680.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2684.  v0:= v0 + v1 @kind int;
  #L1b2686.  v3:= v3 + v0 @kind int;
  #L1b2688.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int`;
  #L1b268c.  if v3 > v0 then goto L1b269c;
  #L1b2690.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.m` @type ^`int` := v3;
  #L1b2694.  call `i`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.i:()V` @kind direct;
  #L1b269a.  return v0;
  #L1b269c.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b26a2.  v3:= temp @kind object;
  #L1b26a4.  throw v3;
  #L1b26a6.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b26ac.  v3:= temp @kind object;
  #L1b26ae.  throw v3;
}
procedure `boolean` `readBool`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBool:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b1eb8.  call temp:= `readRawVarint64`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L1b1ebe.  v0:= temp @kind wide;
  #L1b1ec0.  v2:= 0L;
  #L1b1ec4.  v4:= lcmp(v0, v2);
  #L1b1ec8.  if v4 == 0 then goto L1b1ed0;
  #L1b1ecc.  v0:= 1I;
  #L1b1ece.  goto L1b1ed2;
  #L1b1ed0.  v0:= 0I;
  #L1b1ed2.  return v0;
}
procedure `byte`[] `readByteArray`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b21f4.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b21fa.  v0:= temp;
  #L1b21fc.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2200.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2204.  v1:= v1 - v2 @kind int;
  #L1b2206.  if v0 > v1 then goto L1b222a;
  #L1b220a.  if v0 <= 0 then goto L1b222a;
  #L1b220e.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2212.  v3:= v2 + v0 @kind int;
  #L1b2216.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1b221c.  v1:= temp @kind object;
  #L1b221e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2222.  v2:= v2 + v0 @kind int;
  #L1b2224.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b2228.  return v1 @kind object;
  #L1b222a.  v1:= 0I;
  #L1b222c.  call temp:= `e`(v4, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L1b2232.  v0:= temp @kind object;
  #L1b2234.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `readByteBuffer`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b2a3c.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b2a42.  v0:= temp;
  #L1b2a44.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2a48.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2a4c.  v1:= v1 - v2 @kind int;
  #L1b2a4e.  if v0 > v1 then goto L1b2a7a;
  #L1b2a52.  if v0 <= 0 then goto L1b2a7a;
  #L1b2a56.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2a5a.  v3:= v2 + v0 @kind int;
  #L1b2a5e.  call temp:= `copyOfRange`(v1, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1b2a64.  v1:= temp @kind object;
  #L1b2a66.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1b2a6c.  v1:= temp @kind object;
  #L1b2a6e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2a72.  v2:= v2 + v0 @kind int;
  #L1b2a74.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b2a78.  return v1 @kind object;
  #L1b2a7a.  if v0 != 0 then goto L1b2a84;
  #L1b2a7e.  v0:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b2a82.  return v0 @kind object;
  #L1b2a84.  v1:= 1I;
  #L1b2a86.  call temp:= `e`(v4, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L1b2a8c.  v0:= temp @kind object;
  #L1b2a8e.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1b2a94.  v0:= temp @kind object;
  #L1b2a96.  return v0 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `readBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2418.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b241e.  v0:= temp;
  #L1b2420.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2424.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2428.  v1:= v1 - v2 @kind int;
  #L1b242a.  if v0 > v1 then goto L1b244a;
  #L1b242e.  if v0 <= 0 then goto L1b244a;
  #L1b2432.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2436.  call temp:= `copyFrom`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.copyFrom:([BII)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b243c.  v1:= temp @kind object;
  #L1b243e.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2442.  v2:= v2 + v0 @kind int;
  #L1b2444.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b2448.  return v1 @kind object;
  #L1b244a.  if v0 != 0 then goto L1b2454;
  #L1b244e.  v0:= `@@com.google.crypto.tink.shaded.protobuf.ByteString.EMPTY` @type ^`com.google.crypto.tink.shaded.protobuf.ByteString` @kind object;
  #L1b2452.  return v0 @kind object;
  #L1b2454.  call temp:= `d`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.d:(I)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind direct;
  #L1b245a.  v0:= temp @kind object;
  #L1b245c.  return v0 @kind object;
}
procedure `double` `readDouble`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b25cc.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L1b25d2.  v0:= temp @kind wide;
  #L1b25d4.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L1b25da.  v0:= temp @kind wide;
  #L1b25dc.  return v0 @kind wide;
}
procedure `int` `readEnum`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readEnum:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b26c0.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b26c6.  v0:= temp;
  #L1b26c8.  return v0;
}
procedure `int` `readFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b26dc.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L1b26e2.  v0:= temp;
  #L1b26e4.  return v0;
}
procedure `long` `readFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2b18.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L1b2b1e.  v0:= temp @kind wide;
  #L1b2b20.  return v0 @kind wide;
}
procedure `float` `readFloat`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b25f0.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L1b25f6.  v0:= temp;
  #L1b25f8.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L1b25fe.  v0:= temp;
  #L1b2600.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2508.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b250c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b2510.  if v0 >= v1 then goto L1b2546;
  #L1b2514.  v0:= v0 + 1;
  #L1b2518.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1b251c.  call temp:= `parsePartialFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1b2522.  v4:= temp @kind object;
  #L1b2524.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1b2528.  v5:= 4I;
  #L1b252a.  call temp:= `a`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b2530.  v3:= temp;
  #L1b2532.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b2538.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b253c.  v3:= v3 + -1;
  #L1b2540.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1b2544.  return v4 @kind object;
  #L1b2546.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b254c.  v3:= temp @kind object;
  #L1b254e.  throw v3;
}
procedure `void` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2f10.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2f14.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b2f18.  if v0 >= v1 then goto L1b2f48;
  #L1b2f1c.  v0:= v0 + 1;
  #L1b2f20.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1b2f24.  call temp:= `mergeFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b2f2a.  v4:= 4I;
  #L1b2f2c.  call temp:= `a`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b2f32.  v3:= temp;
  #L1b2f34.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b2f3a.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2f3e.  v3:= v3 + -1;
  #L1b2f42.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1b2f46.  return @kind void;
  #L1b2f48.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2f4e.  v3:= temp @kind object;
  #L1b2f50.  throw v3;
}
procedure `int` `readInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b26f8.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b26fe.  v0:= temp;
  #L1b2700.  return v0;
}
procedure `long` `readInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2b34.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L1b2b3a.  v0:= temp @kind wide;
  #L1b2b3c.  return v0 @kind wide;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2560.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b2566.  v0:= temp;
  #L1b2568.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b256c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b2570.  if v1 >= v2 then goto L1b25b0;
  #L1b2574.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @kind virtual;
  #L1b257a.  v0:= temp;
  #L1b257c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2580.  v1:= v1 + 1;
  #L1b2584.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1b2588.  call temp:= `parsePartialFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1b258e.  v4:= temp @kind object;
  #L1b2590.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1b2594.  v5:= 0I;
  #L1b2596.  call `checkLastTagWas`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b259c.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b25a0.  v5:= v5 + -1;
  #L1b25a4.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v5;
  #L1b25a8.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @kind virtual;
  #L1b25ae.  return v4 @kind object;
  #L1b25b0.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b25b6.  v4:= temp @kind object;
  #L1b25b8.  throw v4;
}
procedure `void` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2f64.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b2f6a.  v0:= temp;
  #L1b2f6c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2f70.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b2f74.  if v1 >= v2 then goto L1b2fae;
  #L1b2f78.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.pushLimit:(I)I` @kind virtual;
  #L1b2f7e.  v0:= temp;
  #L1b2f80.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2f84.  v1:= v1 + 1;
  #L1b2f88.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1b2f8c.  call temp:= `mergeFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b2f92.  v4:= 0I;
  #L1b2f94.  call `checkLastTagWas`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b2f9a.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b2f9e.  v4:= v4 + -1;
  #L1b2fa2.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v4;
  #L1b2fa6.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.popLimit:(I)V` @kind virtual;
  #L1b2fac.  return @kind void;
  #L1b2fae.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b2fb4.  v4:= temp @kind object;
  #L1b2fb6.  throw v4;
}
procedure `byte` `readRawByte`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b21b8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b21bc.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b21c0.  if v0 != v1 then goto L1b21cc;
  #L1b21c4.  v0:= 1I;
  #L1b21c6.  call `j`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b21cc.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b21d0.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b21d4.  v2:= v1 + 1;
  #L1b21d8.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b21dc.  v0:= v0[v1] @kind byte;
  #L1b21e0.  return v0;
}
procedure `byte`[] `readRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2248.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b224c.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2250.  v1:= v1 - v0 @kind int;
  #L1b2252.  if v3 > v1 then goto L1b226e;
  #L1b2256.  if v3 <= 0 then goto L1b226e;
  #L1b225a.  v3:= v3 + v0 @kind int;
  #L1b225c.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b2260.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2264.  call temp:= `copyOfRange`(v1, v0, v3) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L1b226a.  v3:= temp @kind object;
  #L1b226c.  return v3 @kind object;
  #L1b226e.  v0:= 0I;
  #L1b2270.  call temp:= `e`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L1b2276.  v3:= temp @kind object;
  #L1b2278.  return v3 @kind object;
}
procedure `int` `readRawLittleEndian32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b2714.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2718.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b271c.  v1:= v1 - v0 @kind int;
  #L1b271e.  v2:= 4I;
  #L1b2720.  if v1 >= v2 then goto L1b272e;
  #L1b2724.  call `j`(v4, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b272a.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b272e.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2732.  v2:= v0 + 4;
  #L1b2736.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b273a.  v2:= v1[v0] @kind byte;
  #L1b273e.  v2:= v2 ^& 255;
  #L1b2742.  v3:= v0 + 1;
  #L1b2746.  v3:= v1[v3] @kind byte;
  #L1b274a.  v3:= v3 ^& 255;
  #L1b274e.  v3:= v3 ^< 8;
  #L1b2752.  v2:= v2 ^| v3 @kind int;
  #L1b2754.  v3:= v0 + 2;
  #L1b2758.  v3:= v1[v3] @kind byte;
  #L1b275c.  v3:= v3 ^& 255;
  #L1b2760.  v3:= v3 ^< 16;
  #L1b2764.  v2:= v2 ^| v3 @kind int;
  #L1b2766.  v0:= v0 + 3;
  #L1b276a.  v0:= v1[v0] @kind byte;
  #L1b276e.  v0:= v0 ^& 255;
  #L1b2772.  v0:= v0 ^< 24;
  #L1b2776.  v0:= v0 ^| v2 @kind int;
  #L1b2778.  return v0;
}
procedure `long` `readRawLittleEndian64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v9 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b2b50.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2b54.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2b58.  v1:= v1 - v0 @kind int;
  #L1b2b5a.  v2:= 8I;
  #L1b2b5e.  if v1 >= v2 then goto L1b2b6c;
  #L1b2b62.  call `j`(v9, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b2b68.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2b6c.  v1:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2b70.  v3:= v0 + 8;
  #L1b2b74.  v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b2b78.  v3:= v1[v0] @kind byte;
  #L1b2b7c.  v3:= (`long`) v3 @kind i2l;
  #L1b2b7e.  v5:= 255L;
  #L1b2b82.  v3:= v3 ^& v5 @kind long;
  #L1b2b84.  v7:= v0 + 1;
  #L1b2b88.  v7:= v1[v7] @kind byte;
  #L1b2b8c.  v7:= (`long`) v7 @kind i2l;
  #L1b2b8e.  v7:= v7 ^& v5 @kind long;
  #L1b2b90.  v7:= v7 ^< v2 @kind long;
  #L1b2b92.  v2:= v3 ^| v7 @kind long;
  #L1b2b96.  v4:= v0 + 2;
  #L1b2b9a.  v4:= v1[v4] @kind byte;
  #L1b2b9e.  v7:= (`long`) v4 @kind i2l;
  #L1b2ba0.  v7:= v7 ^& v5 @kind long;
  #L1b2ba2.  v4:= 16I;
  #L1b2ba6.  v7:= v7 ^< v4 @kind long;
  #L1b2ba8.  v2:= v2 ^| v7 @kind long;
  #L1b2baa.  v4:= v0 + 3;
  #L1b2bae.  v4:= v1[v4] @kind byte;
  #L1b2bb2.  v7:= (`long`) v4 @kind i2l;
  #L1b2bb4.  v7:= v7 ^& v5 @kind long;
  #L1b2bb6.  v4:= 24I;
  #L1b2bba.  v7:= v7 ^< v4 @kind long;
  #L1b2bbc.  v2:= v2 ^| v7 @kind long;
  #L1b2bbe.  v4:= v0 + 4;
  #L1b2bc2.  v4:= v1[v4] @kind byte;
  #L1b2bc6.  v7:= (`long`) v4 @kind i2l;
  #L1b2bc8.  v7:= v7 ^& v5 @kind long;
  #L1b2bca.  v4:= 32I;
  #L1b2bce.  v7:= v7 ^< v4 @kind long;
  #L1b2bd0.  v2:= v2 ^| v7 @kind long;
  #L1b2bd2.  v4:= v0 + 5;
  #L1b2bd6.  v4:= v1[v4] @kind byte;
  #L1b2bda.  v7:= (`long`) v4 @kind i2l;
  #L1b2bdc.  v7:= v7 ^& v5 @kind long;
  #L1b2bde.  v4:= 40I;
  #L1b2be2.  v7:= v7 ^< v4 @kind long;
  #L1b2be4.  v2:= v2 ^| v7 @kind long;
  #L1b2be6.  v4:= v0 + 6;
  #L1b2bea.  v4:= v1[v4] @kind byte;
  #L1b2bee.  v7:= (`long`) v4 @kind i2l;
  #L1b2bf0.  v7:= v7 ^& v5 @kind long;
  #L1b2bf2.  v4:= 48I;
  #L1b2bf6.  v7:= v7 ^< v4 @kind long;
  #L1b2bf8.  v2:= v2 ^| v7 @kind long;
  #L1b2bfa.  v0:= v0 + 7;
  #L1b2bfe.  v0:= v1[v0] @kind byte;
  #L1b2c02.  v0:= (`long`) v0 @kind i2l;
  #L1b2c04.  v0:= v0 ^& v5 @kind long;
  #L1b2c06.  v4:= 56I;
  #L1b2c0a.  v0:= v0 ^< v4 @kind long;
  #L1b2c0c.  v0:= v0 ^| v2 @kind long;
  #L1b2c0e.  return v0 @kind wide;
}
procedure `int` `readRawVarint32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b278c.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2790.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2794.  if v1 != v0 then goto L1b279a;
  #L1b2798.  goto L1b2860;
  #L1b279a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b279e.  v3:= v0 + 1;
  #L1b27a2.  v0:= v2[v0] @kind byte;
  #L1b27a6.  if v0 < 0 then goto L1b27b0;
  #L1b27aa.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b27ae.  return v0;
  #L1b27b0.  v1:= v1 - v3 @kind int;
  #L1b27b2.  v4:= 9I;
  #L1b27b6.  if v1 >= v4 then goto L1b27bc;
  #L1b27ba.  goto L1b2860;
  #L1b27bc.  v1:= v3 + 1;
  #L1b27c0.  v3:= v2[v3] @kind byte;
  #L1b27c4.  v3:= v3 ^< 7;
  #L1b27c8.  v0:= v0 ^~ v3 @kind int;
  #L1b27ca.  if v0 >= 0 then goto L1b27d4;
  #L1b27ce.  v0:= v0 ^~ -128;
  #L1b27d2.  goto L1b286c;
  #L1b27d4.  v3:= v1 + 1;
  #L1b27d8.  v1:= v2[v1] @kind byte;
  #L1b27dc.  v1:= v1 ^< 14;
  #L1b27e0.  v0:= v0 ^~ v1 @kind int;
  #L1b27e2.  if v0 < 0 then goto L1b27ee;
  #L1b27e6.  v0:= v0 ^~ 16256;
  #L1b27ea.  v1:= v3;
  #L1b27ec.  goto L1b286c;
  #L1b27ee.  v1:= v3 + 1;
  #L1b27f2.  v3:= v2[v3] @kind byte;
  #L1b27f6.  v3:= v3 ^< 21;
  #L1b27fa.  v0:= v0 ^~ v3 @kind int;
  #L1b27fc.  if v0 >= 0 then goto L1b280a;
  #L1b2800.  v2:= -2080896I;
  #L1b2806.  v0:= v0 ^~ v2 @kind int;
  #L1b2808.  goto L1b286c;
  #L1b280a.  v3:= v1 + 1;
  #L1b280e.  v1:= v2[v1] @kind byte;
  #L1b2812.  v4:= v1 ^< 28;
  #L1b2816.  v0:= v0 ^~ v4 @kind int;
  #L1b2818.  v4:= 266354560I;
  #L1b281e.  v0:= v0 ^~ v4 @kind int;
  #L1b2820.  if v1 >= 0 then goto L1b27ea;
  #L1b2824.  v1:= v3 + 1;
  #L1b2828.  v3:= v2[v3] @kind byte;
  #L1b282c.  if v3 >= 0 then goto L1b286c;
  #L1b2830.  v3:= v1 + 1;
  #L1b2834.  v1:= v2[v1] @kind byte;
  #L1b2838.  if v1 >= 0 then goto L1b27ea;
  #L1b283c.  v1:= v3 + 1;
  #L1b2840.  v3:= v2[v3] @kind byte;
  #L1b2844.  if v3 >= 0 then goto L1b286c;
  #L1b2848.  v3:= v1 + 1;
  #L1b284c.  v1:= v2[v1] @kind byte;
  #L1b2850.  if v1 >= 0 then goto L1b27ea;
  #L1b2854.  v1:= v3 + 1;
  #L1b2858.  v2:= v2[v3] @kind byte;
  #L1b285c.  if v2 >= 0 then goto L1b286c;
  #L1b2860.  call temp:= `h`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @kind virtual;
  #L1b2866.  v0:= temp @kind wide;
  #L1b2868.  v1:= (`int`) v0 @kind l2i;
  #L1b286a.  return v1;
  #L1b286c.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v1;
  #L1b2870.  return v0;
}
procedure `long` `readRawVarint64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1b2c20.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2c24.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2c28.  if v1 != v0 then goto L1b2c30;
  #L1b2c2c.  goto L1b2d8c;
  #L1b2c30.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2c34.  v3:= v0 + 1;
  #L1b2c38.  v0:= v2[v0] @kind byte;
  #L1b2c3c.  if v0 < 0 then goto L1b2c48;
  #L1b2c40.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b2c44.  v0:= (`long`) v0 @kind i2l;
  #L1b2c46.  return v0 @kind wide;
  #L1b2c48.  v1:= v1 - v3 @kind int;
  #L1b2c4a.  v4:= 9I;
  #L1b2c4e.  if v1 >= v4 then goto L1b2c56;
  #L1b2c52.  goto L1b2d8c;
  #L1b2c56.  v1:= v3 + 1;
  #L1b2c5a.  v3:= v2[v3] @kind byte;
  #L1b2c5e.  v3:= v3 ^< 7;
  #L1b2c62.  v0:= v0 ^~ v3 @kind int;
  #L1b2c64.  if v0 >= 0 then goto L1b2c72;
  #L1b2c68.  v0:= v0 ^~ -128;
  #L1b2c6c.  v2:= (`long`) v0 @kind i2l;
  #L1b2c6e.  goto L1b2d9a;
  #L1b2c72.  v3:= v1 + 1;
  #L1b2c76.  v1:= v2[v1] @kind byte;
  #L1b2c7a.  v1:= v1 ^< 14;
  #L1b2c7e.  v0:= v0 ^~ v1 @kind int;
  #L1b2c80.  if v0 < 0 then goto L1b2c94;
  #L1b2c84.  v0:= v0 ^~ 16256;
  #L1b2c88.  v0:= (`long`) v0 @kind i2l;
  #L1b2c8a.  v9:= v0 @kind wide;
  #L1b2c8c.  v1:= v3;
  #L1b2c8e.  v2:= v9 @kind wide;
  #L1b2c90.  goto L1b2d9a;
  #L1b2c94.  v1:= v3 + 1;
  #L1b2c98.  v3:= v2[v3] @kind byte;
  #L1b2c9c.  v3:= v3 ^< 21;
  #L1b2ca0.  v0:= v0 ^~ v3 @kind int;
  #L1b2ca2.  if v0 >= 0 then goto L1b2cb0;
  #L1b2ca6.  v2:= -2080896I;
  #L1b2cac.  v0:= v0 ^~ v2 @kind int;
  #L1b2cae.  goto L1b2c6c;
  #L1b2cb0.  v3:= (`long`) v0 @kind i2l;
  #L1b2cb2.  v0:= v1 + 1;
  #L1b2cb6.  v1:= v2[v1] @kind byte;
  #L1b2cba.  v5:= (`long`) v1 @kind i2l;
  #L1b2cbc.  v1:= 28I;
  #L1b2cc0.  v5:= v5 ^< v1 @kind long;
  #L1b2cc2.  v3:= v3 ^~ v5 @kind long;
  #L1b2cc4.  v5:= 0L;
  #L1b2cc8.  v1:= lcmp(v3, v5);
  #L1b2ccc.  if v1 < 0 then goto L1b2cde;
  #L1b2cd0.  v1:= 266354560L;
  #L1b2cd6.  v2:= v3 ^~ v1 @kind long;
  #L1b2cda.  v1:= v0;
  #L1b2cdc.  goto L1b2d9a;
  #L1b2cde.  v1:= v0 + 1;
  #L1b2ce2.  v0:= v2[v0] @kind byte;
  #L1b2ce6.  v7:= (`long`) v0 @kind i2l;
  #L1b2ce8.  v0:= 35I;
  #L1b2cec.  v7:= v7 ^< v0 @kind long;
  #L1b2cee.  v3:= v3 ^~ v7 @kind long;
  #L1b2cf0.  v0:= lcmp(v3, v5);
  #L1b2cf4.  if v0 >= 0 then goto L1b2d08;
  #L1b2cf8.  v5:= -34093383808L;
  #L1b2d02.  v2:= v3 ^~ v5 @kind long;
  #L1b2d06.  goto L1b2d9a;
  #L1b2d08.  v0:= v1 + 1;
  #L1b2d0c.  v1:= v2[v1] @kind byte;
  #L1b2d10.  v7:= (`long`) v1 @kind i2l;
  #L1b2d12.  v1:= 42I;
  #L1b2d16.  v7:= v7 ^< v1 @kind long;
  #L1b2d18.  v3:= v3 ^~ v7 @kind long;
  #L1b2d1a.  v1:= lcmp(v3, v5);
  #L1b2d1e.  if v1 < 0 then goto L1b2d2e;
  #L1b2d22.  v1:= 4363953127296L;
  #L1b2d2c.  goto L1b2cd6;
  #L1b2d2e.  v1:= v0 + 1;
  #L1b2d32.  v0:= v2[v0] @kind byte;
  #L1b2d36.  v7:= (`long`) v0 @kind i2l;
  #L1b2d38.  v0:= 49I;
  #L1b2d3c.  v7:= v7 ^< v0 @kind long;
  #L1b2d3e.  v3:= v3 ^~ v7 @kind long;
  #L1b2d40.  v0:= lcmp(v3, v5);
  #L1b2d44.  if v0 >= 0 then goto L1b2d54;
  #L1b2d48.  v5:= -558586000294016L;
  #L1b2d52.  goto L1b2d02;
  #L1b2d54.  v0:= v1 + 1;
  #L1b2d58.  v1:= v2[v1] @kind byte;
  #L1b2d5c.  v7:= (`long`) v1 @kind i2l;
  #L1b2d5e.  v1:= 56I;
  #L1b2d62.  v7:= v7 ^< v1 @kind long;
  #L1b2d64.  v3:= v3 ^~ v7 @kind long;
  #L1b2d66.  v7:= 71499008037633920L;
  #L1b2d70.  v3:= v3 ^~ v7 @kind long;
  #L1b2d72.  v1:= lcmp(v3, v5);
  #L1b2d76.  if v1 >= 0 then goto L1b2d96;
  #L1b2d7a.  v1:= v0 + 1;
  #L1b2d7e.  v0:= v2[v0] @kind byte;
  #L1b2d82.  v7:= (`long`) v0 @kind i2l;
  #L1b2d84.  v0:= lcmp(v7, v5);
  #L1b2d88.  if v0 >= 0 then goto L1b2d98;
  #L1b2d8c.  call temp:= `h`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.h:()J` @kind virtual;
  #L1b2d92.  v0:= temp @kind wide;
  #L1b2d94.  return v0 @kind wide;
  #L1b2d96.  v1:= v0;
  #L1b2d98.  v2:= v3 @kind wide;
  #L1b2d9a.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v1;
  #L1b2d9e.  return v2 @kind wide;
}
procedure `int` `readSFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2884.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L1b288a.  v0:= temp;
  #L1b288c.  return v0;
}
procedure `long` `readSFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2dfc.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L1b2e02.  v0:= temp @kind wide;
  #L1b2e04.  return v0 @kind wide;
}
procedure `int` `readSInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b28a0.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b28a6.  v0:= temp;
  #L1b28a8.  call temp:= `decodeZigZag32`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag32:(I)I` @kind static;
  #L1b28ae.  v0:= temp;
  #L1b28b0.  return v0;
}
procedure `long` `readSInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readSInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2e18.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L1b2e1e.  v0:= temp @kind wide;
  #L1b2e20.  call temp:= `decodeZigZag64`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag64:(J)J` @kind static;
  #L1b2e26.  v0:= temp @kind wide;
  #L1b2e28.  return v0 @kind wide;
}
procedure `java.lang.String` `readString`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b292c.  call temp:= `readRawVarint32`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b2932.  v0:= temp;
  #L1b2934.  if v0 <= 0 then goto L1b2964;
  #L1b2938.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b293c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2940.  v1:= v1 - v2 @kind int;
  #L1b2942.  if v0 > v1 then goto L1b2964;
  #L1b2946.  v1:= new `java.lang.String`;
  #L1b294a.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b294e.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b2952.  call `<init>`(v1, v3, v2, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L1b2958.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b295c.  v2:= v2 + v0 @kind int;
  #L1b295e.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b2962.  return v1 @kind object;
  #L1b2964.  if v0 != 0 then goto L1b296e;
  #L1b2968.  v0:= "" @kind object;
  #L1b296c.  return v0 @kind object;
  #L1b296e.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b2972.  if v0 > v1 then goto L1b299e;
  #L1b2976.  call `j`(v5, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b297c.  v1:= new `java.lang.String`;
  #L1b2980.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2984.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2988.  v4:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b298c.  call `<init>`(v1, v2, v3, v0, v4) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L1b2992.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b2996.  v2:= v2 + v0 @kind int;
  #L1b2998.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v2;
  #L1b299c.  return v1 @kind object;
  #L1b299e.  v1:= new `java.lang.String`;
  #L1b29a2.  v2:= 0I;
  #L1b29a4.  call temp:= `e`(v5, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L1b29aa.  v0:= temp @kind object;
  #L1b29ac.  v2:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b29b0.  call `<init>`(v1, v0, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L1b29b6.  return v1 @kind object;
}
procedure `java.lang.String` `readStringRequireUtf8`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readStringRequireUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b29c8.  call temp:= `readRawVarint32`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b29ce.  v0:= temp;
  #L1b29d0.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b29d4.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b29d8.  v3:= v2 - v1 @kind int;
  #L1b29dc.  v4:= 0I;
  #L1b29de.  if v0 > v3 then goto L1b29f4;
  #L1b29e2.  if v0 <= 0 then goto L1b29f4;
  #L1b29e6.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b29ea.  v3:= v1 + v0 @kind int;
  #L1b29ee.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v3;
  #L1b29f2.  goto L1b2a20;
  #L1b29f4.  if v0 != 0 then goto L1b29fe;
  #L1b29f8.  v0:= "" @kind object;
  #L1b29fc.  return v0 @kind object;
  #L1b29fe.  if v0 > v2 then goto L1b2a16;
  #L1b2a02.  call `j`(v5, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.j:(I)V` @kind direct;
  #L1b2a08.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.g` @type ^`byte`[] @kind object;
  #L1b2a0c.  v1:= v0 + 0;
  #L1b2a10.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v1;
  #L1b2a14.  goto L1b2a1e;
  #L1b2a16.  call temp:= `e`(v5, v0, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.e:(IZ)[B` @kind direct;
  #L1b2a1c.  v2:= temp @kind object;
  #L1b2a1e.  v1:= 0I;
  #L1b2a20.  call temp:= `h`(v2, v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.h:([BII)Ljava/lang/String;` @kind static;
  #L1b2a26.  v0:= temp @kind object;
  #L1b2a28.  return v0 @kind object;
}
procedure `int` `readTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b28c4.  call temp:= `isAtEnd`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.isAtEnd:()Z` @kind virtual;
  #L1b28ca.  v0:= temp;
  #L1b28cc.  if v0 == 0 then goto L1b28d8;
  #L1b28d0.  v0:= 0I;
  #L1b28d2.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L1b28d6.  return v0;
  #L1b28d8.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b28de.  v0:= temp;
  #L1b28e0.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int` := v0;
  #L1b28e4.  call temp:= `getTagFieldNumber`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b28ea.  v0:= temp;
  #L1b28ec.  if v0 == 0 then goto L1b28f6;
  #L1b28f0.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.k` @type ^`int`;
  #L1b28f4.  return v0;
  #L1b28f6.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.b:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b28fc.  v0:= temp @kind object;
  #L1b28fe.  throw v0;
}
procedure `int` `readUInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2910.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b2916.  v0:= temp;
  #L1b2918.  return v0;
}
procedure `long` `readUInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2e3c.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint64:()J` @kind virtual;
  #L1b2e42.  v0:= temp @kind wide;
  #L1b2e44.  return v0 @kind wide;
}
procedure `void` `readUnknownGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `int` v2 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readUnknownGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2fc8.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1b2fce.  v0:= temp @kind object;
  #L1b2fd0.  call `readGroup`(v1, v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @kind virtual;
  #L1b2fd6.  return @kind void;
}
procedure `void` `resetSizeCounter`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.resetSizeCounter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3074.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b3078.  v0:= -v0 @kind int;
  #L1b307a.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.l` @type ^`int` := v0;
  #L1b307e.  return @kind void;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b1ee4.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1b1eea.  v0:= temp;
  #L1b1eec.  v1:= 1I;
  #L1b1eee.  if v0 == 0 then goto L1b1f5e;
  #L1b1ef2.  if v0 == v1 then goto L1b1f52;
  #L1b1ef6.  v2:= 2I;
  #L1b1ef8.  if v0 == v2 then goto L1b1f42;
  #L1b1efc.  v2:= 3I;
  #L1b1efe.  v3:= 4I;
  #L1b1f00.  if v0 == v2 then goto L1b1f24;
  #L1b1f04.  if v0 == v3 then goto L1b1f20;
  #L1b1f08.  v5:= 5I;
  #L1b1f0a.  if v0 != v5 then goto L1b1f16;
  #L1b1f0e.  call `skipRawBytes`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L1b1f14.  return v1;
  #L1b1f16.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1b1f1c.  v5:= temp @kind object;
  #L1b1f1e.  throw v5;
  #L1b1f20.  v5:= 0I;
  #L1b1f22.  return v5;
  #L1b1f24.  call `skipMessage`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:()V` @kind virtual;
  #L1b1f2a.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b1f30.  v5:= temp;
  #L1b1f32.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b1f38.  v5:= temp;
  #L1b1f3a.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b1f40.  return v1;
  #L1b1f42.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawVarint32:()I` @kind virtual;
  #L1b1f48.  v5:= temp;
  #L1b1f4a.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L1b1f50.  return v1;
  #L1b1f52.  v5:= 8I;
  #L1b1f56.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @kind virtual;
  #L1b1f5c.  return v1;
  #L1b1f5e.  call `l`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.l:()V` @kind direct;
  #L1b1f64.  return v1;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v4 @kind this, `int` v5 , `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b1f78.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1b1f7e.  v0:= temp;
  #L1b1f80.  v1:= 1I;
  #L1b1f82.  if v0 == 0 then goto L1b201c;
  #L1b1f86.  if v0 == v1 then goto L1b2006;
  #L1b1f8a.  v2:= 2I;
  #L1b1f8c.  if v0 == v2 then goto L1b1ff0;
  #L1b1f90.  v2:= 3I;
  #L1b1f92.  v3:= 4I;
  #L1b1f94.  if v0 == v2 then goto L1b1fc6;
  #L1b1f98.  if v0 == v3 then goto L1b1fc2;
  #L1b1f9c.  v2:= 5I;
  #L1b1f9e.  if v0 != v2 then goto L1b1fb8;
  #L1b1fa2.  call temp:= `readRawLittleEndian32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian32:()I` @kind virtual;
  #L1b1fa8.  v0:= temp;
  #L1b1faa.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b1fb0.  call `writeFixed32NoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed32NoTag:(I)V` @kind virtual;
  #L1b1fb6.  return v1;
  #L1b1fb8.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1b1fbe.  v5:= temp @kind object;
  #L1b1fc0.  throw v5;
  #L1b1fc2.  v5:= 0I;
  #L1b1fc4.  return v5;
  #L1b1fc6.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b1fcc.  call `skipMessage`(v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @kind virtual;
  #L1b1fd2.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b1fd8.  v5:= temp;
  #L1b1fda.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b1fe0.  v5:= temp;
  #L1b1fe2.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.checkLastTagWas:(I)V` @kind virtual;
  #L1b1fe8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b1fee.  return v1;
  #L1b1ff0.  call temp:= `readBytes`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1b1ff6.  v0:= temp @kind object;
  #L1b1ff8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b1ffe.  call `writeBytesNoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeBytesNoTag:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)V` @kind virtual;
  #L1b2004.  return v1;
  #L1b2006.  call temp:= `readRawLittleEndian64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readRawLittleEndian64:()J` @kind virtual;
  #L1b200c.  v2:= temp @kind wide;
  #L1b200e.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b2014.  call `writeFixed64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed64NoTag:(J)V` @kind virtual;
  #L1b201a.  return v1;
  #L1b201c.  call temp:= `readInt64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readInt64:()J` @kind virtual;
  #L1b2022.  v2:= temp @kind wide;
  #L1b2024.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b202a.  call `writeUInt64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeUInt64NoTag:(J)V` @kind virtual;
  #L1b2030.  return v1;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3090.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @kind virtual;
  #L1b3096.  v0:= temp;
  #L1b3098.  if v0 == 0 then goto L1b30a8;
  #L1b309c.  call temp:= `skipField`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(I)Z` @kind virtual;
  #L1b30a2.  v0:= temp;
  #L1b30a4.  if v0 != 0 then goto L1b3090;
  #L1b30a8.  return @kind void;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b30bc.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.readTag:()I` @kind virtual;
  #L1b30c2.  v0:= temp;
  #L1b30c4.  if v0 == 0 then goto L1b30d4;
  #L1b30c8.  call temp:= `skipField`(v1, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @kind virtual;
  #L1b30ce.  v0:= temp;
  #L1b30d0.  if v0 != 0 then goto L1b30bc;
  #L1b30d4.  return @kind void;
}
procedure `void` `skipRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.skipRawBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b30e8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.h` @type ^`int`;
  #L1b30ec.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int`;
  #L1b30f0.  v0:= v0 - v1 @kind int;
  #L1b30f2.  if v3 > v0 then goto L1b3102;
  #L1b30f6.  if v3 < 0 then goto L1b3102;
  #L1b30fa.  v1:= v1 + v3 @kind int;
  #L1b30fc.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$d.j` @type ^`int` := v1;
  #L1b3100.  goto L1b3108;
  #L1b3102.  call `k`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$d;.k:(I)V` @kind direct;
  #L1b3108.  return @kind void;
}
