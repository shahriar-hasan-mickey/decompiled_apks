record `com.google.crypto.tink.shaded.protobuf.h` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.a` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$DoubleList` @kind interface, `java.util.RandomAccess` @kind interface, `com.google.crypto.tink.shaded.protobuf.g0` @kind interface {
  `double`[] `com.google.crypto.tink.shaded.protobuf.h.b` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.h.c` @AccessFlag PRIVATE;
}
global `com.google.crypto.tink.shaded.protobuf.h` `@@com.google.crypto.tink.shaded.protobuf.h.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1bbaec.  v0:= new `com.google.crypto.tink.shaded.protobuf.h`;
  #L1bbaf0.  v1:= 0I;
  #L1bbaf2.  v2:= new `double`[v1];
  #L1bbaf6.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L1bbafc.  `@@com.google.crypto.tink.shaded.protobuf.h.d` @type ^`com.google.crypto.tink.shaded.protobuf.h` := v0 @kind object;
  #L1bbb00.  call `makeImmutable`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.makeImmutable:()V` @kind virtual;
  #L1bbb06.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1bbb18.  v0:= 10I;
  #L1bbb1c.  v0:= new `double`[v0];
  #L1bbb20.  v1:= 0I;
  #L1bbb22.  call `<init>`(v2, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L1bbb28.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `double`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1bbb3c.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.<init>:()V` @kind direct;
  #L1bbb42.  v0.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v1 @kind object;
  #L1bbb46.  v0.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v2;
  #L1bbb4a.  return @kind void;
}
procedure `void` `c`(`com.google.crypto.tink.shaded.protobuf.h` v4 @kind this, `int` v5 , `double` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.c:(ID)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1bbbf0.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bbbf6.  if v5 < 0 then goto L1bbc6c;
  #L1bbbfa.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbbfe.  if v5 > v0 then goto L1bbc6c;
  #L1bbc02.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbc06.  v2:= length @variable v1;
  #L1bbc08.  if v0 >= v2 then goto L1bbc1a;
  #L1bbc0c.  v2:= v5 + 1;
  #L1bbc10.  v0:= v0 - v5 @kind int;
  #L1bbc12.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bbc18.  goto L1bbc4a;
  #L1bbc1a.  v0:= v0 * 3;
  #L1bbc1e.  v0:= v0 / 2;
  #L1bbc22.  v0:= v0 + 1;
  #L1bbc26.  v0:= new `double`[v0];
  #L1bbc2a.  v2:= 0I;
  #L1bbc2c.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bbc32.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbc36.  v2:= v5 + 1;
  #L1bbc3a.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbc3e.  v3:= v3 - v5 @kind int;
  #L1bbc40.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bbc46.  v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v0 @kind object;
  #L1bbc4a.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbc4e.  v0[v5]:= v6 @kind wide;
  #L1bbc52.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbc56.  v5:= v5 + 1;
  #L1bbc5a.  v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v5;
  #L1bbc5e.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1bbc62.  v5:= v5 + 1;
  #L1bbc66.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1bbc6a.  return @kind void;
  #L1bbc6c.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L1bbc70.  call temp:= `g`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @kind direct;
  #L1bbc76.  v5:= temp @kind object;
  #L1bbc78.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bbc7e.  throw v6;
}
procedure `com.google.crypto.tink.shaded.protobuf.h` `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.d:()Lcom/google/crypto/tink/shaded/protobuf/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1bb87c.  v0:= `@@com.google.crypto.tink.shaded.protobuf.h.d` @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind object;
  #L1bb880.  return v0 @kind object;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.h` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1bbc90.  if v2 < 0 then goto L1bbc9e;
  #L1bbc94.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbc98.  if v2 >= v0 then goto L1bbc9e;
  #L1bbc9c.  return @kind void;
  #L1bbc9e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1bbca2.  call temp:= `g`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @kind direct;
  #L1bbca8.  v2:= temp @kind object;
  #L1bbcaa.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bbcb0.  throw v0;
}
procedure `java.lang.String` `g`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.g:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1bbaa4.  v0:= new `java.lang.StringBuilder`;
  #L1bbaa8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1bbaae.  v1:= "Index:" @kind object;
  #L1bbab2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbab8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbabe.  v3:= ", Size:" @kind object;
  #L1bbac2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbac8.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbacc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1bbad2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1bbad8.  v3:= temp @kind object;
  #L1bbada.  return v3 @kind object;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `java.lang.Double` v4 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.a:(ILjava/lang/Double;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bbb5c.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L1bbb62.  v0:= temp @kind wide;
  #L1bbb64.  call `c`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.c:(ID)V` @kind direct;
  #L1bbb6a.  return @kind void;
}
procedure `void` `add`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bbb7c.  v2:= (`java.lang.Double`) v2 @kind object;
  #L1bbb80.  call `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.a:(ILjava/lang/Double;)V` @kind virtual;
  #L1bbb86.  return @kind void;
}
procedure `boolean` `add`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bb6d0.  v1:= (`java.lang.Double`) v1 @kind object;
  #L1bb6d4.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.b:(Ljava/lang/Double;)Z` @kind virtual;
  #L1bb6da.  v1:= temp;
  #L1bb6dc.  return v1;
}
procedure `boolean` `addAll`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bb6f0.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bb6f6.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1bb6fc.  v0:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind boolean;
  #L1bb700.  if v0 != 0 then goto L1bb70e;
  #L1bb704.  call temp:= `addAll`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1bb70a.  v6:= temp;
  #L1bb70c.  return v6;
  #L1bb70e.  v6:= (`com.google.crypto.tink.shaded.protobuf.h`) v6 @kind object;
  #L1bb712.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb716.  v1:= 0I;
  #L1bb718.  if v0 != 0 then goto L1bb71e;
  #L1bb71c.  return v1;
  #L1bb71e.  v2:= 2147483647I;
  #L1bb724.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb728.  v2:= v2 - v3 @kind int;
  #L1bb72a.  if v2 < v0 then goto L1bb76e;
  #L1bb72e.  v3:= v3 + v0 @kind int;
  #L1bb730.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb734.  v2:= length @variable v0;
  #L1bb736.  if v3 <= v2 then goto L1bb746;
  #L1bb73a.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L1bb740.  v0:= temp @kind object;
  #L1bb742.  v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v0 @kind object;
  #L1bb746.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb74a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb74e.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb752.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb756.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bb75c.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v3;
  #L1bb760.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1bb764.  v0:= 1I;
  #L1bb766.  v6:= v6 + v0 @kind int;
  #L1bb768.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1bb76c.  return v0;
  #L1bb76e.  v6:= new `java.lang.OutOfMemoryError`;
  #L1bb772.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1bb778.  throw v6;
}
procedure `void` `addDouble`(`com.google.crypto.tink.shaded.protobuf.h` v4 @kind this, `double` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addDouble:(D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1bbb98.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bbb9e.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbba2.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbba6.  v2:= length @variable v1;
  #L1bbba8.  if v0 != v2 then goto L1bbbc8;
  #L1bbbac.  v2:= v0 * 3;
  #L1bbbb0.  v2:= v2 / 2;
  #L1bbbb4.  v2:= v2 + 1;
  #L1bbbb8.  v2:= new `double`[v2];
  #L1bbbbc.  v3:= 0I;
  #L1bbbbe.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bbbc4.  v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] := v2 @kind object;
  #L1bbbc8.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbbcc.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbbd0.  v2:= v1 + 1;
  #L1bbbd4.  v4.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v2;
  #L1bbbd8.  v0[v1]:= v5 @kind wide;
  #L1bbbdc.  return @kind void;
}
procedure `boolean` `b`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `java.lang.Double` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.b:(Ljava/lang/Double;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bb6ac.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L1bb6b2.  v0:= temp @kind wide;
  #L1bb6b4.  call `addDouble`(v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.addDouble:(D)V` @kind virtual;
  #L1bb6ba.  v3:= 1I;
  #L1bb6bc.  return v3;
}
procedure `boolean` `equals`(`com.google.crypto.tink.shaded.protobuf.h` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1bb78c.  v0:= 1I;
  #L1bb78e.  if v8 != v9 then goto L1bb794;
  #L1bb792.  return v0;
  #L1bb794.  v1:= instanceof @variable v9 @type ^`com.google.crypto.tink.shaded.protobuf.h` @kind boolean;
  #L1bb798.  if v1 != 0 then goto L1bb7a6;
  #L1bb79c.  call temp:= `equals`(v8, v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1bb7a2.  v9:= temp;
  #L1bb7a4.  return v9;
  #L1bb7a6.  v9:= (`com.google.crypto.tink.shaded.protobuf.h`) v9 @kind object;
  #L1bb7aa.  v1:= v8.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb7ae.  v2:= v9.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb7b2.  v3:= 0I;
  #L1bb7b4.  if v1 == v2 then goto L1bb7ba;
  #L1bb7b8.  return v3;
  #L1bb7ba.  v9:= v9.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb7be.  v1:= 0I;
  #L1bb7c0.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb7c4.  if v1 >= v2 then goto L1bb7f4;
  #L1bb7c8.  v2:= v8.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb7cc.  v4:= v2[v1] @kind wide;
  #L1bb7d0.  call temp:= `doubleToLongBits`(v4) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L1bb7d6.  v4:= temp @kind wide;
  #L1bb7d8.  v6:= v9[v1] @kind wide;
  #L1bb7dc.  call temp:= `doubleToLongBits`(v6) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L1bb7e2.  v6:= temp @kind wide;
  #L1bb7e4.  v2:= lcmp(v4, v6);
  #L1bb7e8.  if v2 == 0 then goto L1bb7ee;
  #L1bb7ec.  return v3;
  #L1bb7ee.  v1:= v1 + 1;
  #L1bb7f2.  goto L1bb7c0;
  #L1bb7f4.  return v0;
}
procedure `java.lang.Double` `f`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.f:(I)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bb998.  call temp:= `getDouble`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.getDouble:(I)D` @kind virtual;
  #L1bb99e.  v0:= temp @kind wide;
  #L1bb9a0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1bb9a6.  v3:= temp @kind object;
  #L1bb9a8.  return v3 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bba4c.  call temp:= `f`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.f:(I)Ljava/lang/Double;` @kind virtual;
  #L1bba52.  v1:= temp @kind object;
  #L1bba54.  return v1 @kind object;
}
procedure `double` `getDouble`(`com.google.crypto.tink.shaded.protobuf.h` v3 @kind this, `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.getDouble:(I)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1bb8f0.  call `e`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L1bb8f6.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb8fa.  v1:= v0[v4] @kind wide;
  #L1bb8fe.  return v1 @kind wide;
}
procedure `java.lang.Double` `h`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `int` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.h:(I)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bb9bc.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bb9c2.  call `e`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L1bb9c8.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb9cc.  v1:= v0[v6] @kind wide;
  #L1bb9d0.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb9d4.  v4:= v3 + -1;
  #L1bb9d8.  if v6 >= v4 then goto L1bb9ec;
  #L1bb9dc.  v4:= v6 + 1;
  #L1bb9e0.  v3:= v3 - v6 @kind int;
  #L1bb9e2.  v3:= v3 + -1;
  #L1bb9e6.  call `arraycopy`(v0, v4, v0, v6, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bb9ec.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb9f0.  v6:= v6 + -1;
  #L1bb9f4.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v6;
  #L1bb9f8.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1bb9fc.  v6:= v6 + 1;
  #L1bba00.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1bba04.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1bba0a.  v6:= temp @kind object;
  #L1bba0c.  return v6 @kind object;
}
procedure `int` `hashCode`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bb93c.  v0:= 1I;
  #L1bb93e.  v1:= 0I;
  #L1bb940.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb944.  if v1 >= v2 then goto L1bb96c;
  #L1bb948.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb94c.  v3:= v2[v1] @kind wide;
  #L1bb950.  call temp:= `doubleToLongBits`(v3) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L1bb956.  v2:= temp @kind wide;
  #L1bb958.  v0:= v0 * 31;
  #L1bb95c.  call temp:= `hashLong`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.hashLong:(J)I` @kind static;
  #L1bb962.  v2:= temp;
  #L1bb964.  v0:= v0 + v2 @kind int;
  #L1bb966.  v1:= v1 + 1;
  #L1bb96a.  goto L1bb940;
  #L1bb96c.  return v0;
}
procedure `java.lang.Double` `i`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `java.lang.Double` v4 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.i:(ILjava/lang/Double;)Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bba20.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L1bba26.  v0:= temp @kind wide;
  #L1bba28.  call temp:= `setDouble`(v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.setDouble:(ID)D` @kind virtual;
  #L1bba2e.  v3:= temp @kind wide;
  #L1bba30.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1bba36.  v3:= temp @kind object;
  #L1bba38.  return v3 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$DoubleList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$DoubleList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1bb894.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb898.  if v3 < v0 then goto L1bb8b8;
  #L1bb89c.  v0:= new `com.google.crypto.tink.shaded.protobuf.h`;
  #L1bb8a0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb8a4.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L1bb8aa.  v3:= temp @kind object;
  #L1bb8ac.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb8b0.  call `<init>`(v0, v3, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.<init>:([DI)V` @kind direct;
  #L1bb8b6.  return v0 @kind object;
  #L1bb8b8.  v3:= new `java.lang.IllegalArgumentException`;
  #L1bb8bc.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1bb8c2.  throw v3;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$ProtobufList;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bb8d4.  call temp:= `mutableCopyWithCapacity`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$DoubleList;` @kind virtual;
  #L1bb8da.  v1:= temp @kind object;
  #L1bb8dc.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bba68.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.h:(I)Ljava/lang/Double;` @kind virtual;
  #L1bba6e.  v1:= temp @kind object;
  #L1bba70.  return v1 @kind object;
}
procedure `boolean` `remove`(`com.google.crypto.tink.shaded.protobuf.h` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bb808.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bb80e.  v0:= 0I;
  #L1bb810.  v1:= 0I;
  #L1bb812.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb816.  if v1 >= v2 then goto L1bb86a;
  #L1bb81a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb81e.  v3:= v2[v1] @kind wide;
  #L1bb822.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1bb828.  v2:= temp @kind object;
  #L1bb82a.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1bb830.  v2:= temp;
  #L1bb832.  if v2 == 0 then goto L1bb864;
  #L1bb836.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb83a.  v0:= v1 + 1;
  #L1bb83e.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb842.  v2:= v2 - v1 @kind int;
  #L1bb844.  v3:= 1I;
  #L1bb846.  v2:= v2 - v3 @kind int;
  #L1bb848.  call `arraycopy`(v6, v0, v6, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bb84e.  v6:= v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb852.  v6:= v6 - v3 @kind int;
  #L1bb854.  v5.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v6;
  #L1bb858.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1bb85c.  v6:= v6 + v3 @kind int;
  #L1bb85e.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1bb862.  return v3;
  #L1bb864.  v1:= v1 + 1;
  #L1bb868.  goto L1bb812;
  #L1bb86a.  return v0;
}
procedure `void` `removeRange`(`com.google.crypto.tink.shaded.protobuf.h` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.removeRange:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1bbcc4.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bbcca.  if v4 < v3 then goto L1bbcf8;
  #L1bbcce.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bbcd2.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbcd6.  v1:= v1 - v4 @kind int;
  #L1bbcd8.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1bbcde.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bbce2.  v4:= v4 - v3 @kind int;
  #L1bbce4.  v0:= v0 - v4 @kind int;
  #L1bbce6.  v2.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int` := v0;
  #L1bbcea.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L1bbcee.  v3:= v3 + 1;
  #L1bbcf2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L1bbcf6.  return @kind void;
  #L1bbcf8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1bbcfc.  v4:= "toIndex < fromIndex" @kind object;
  #L1bbd00.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1bbd06.  throw v3;
}
procedure `java.lang.Object` `set`(`com.google.crypto.tink.shaded.protobuf.h` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bba84.  v2:= (`java.lang.Double`) v2 @kind object;
  #L1bba88.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.i:(ILjava/lang/Double;)Ljava/lang/Double;` @kind virtual;
  #L1bba8e.  v1:= temp @kind object;
  #L1bba90.  return v1 @kind object;
}
procedure `double` `setDouble`(`com.google.crypto.tink.shaded.protobuf.h` v3 @kind this, `int` v4 , `double` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.setDouble:(ID)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1bb910.  call `ensureIsMutable`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bb916.  call `e`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.e:(I)V` @kind direct;
  #L1bb91c.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.h.b` @type ^`double`[] @kind object;
  #L1bb920.  v1:= v0[v4] @kind wide;
  #L1bb924.  v0[v4]:= v5 @kind wide;
  #L1bb928.  return v1 @kind wide;
}
procedure `int` `size`(`com.google.crypto.tink.shaded.protobuf.h` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/h;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1bb980.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.h.c` @type ^`int`;
  #L1bb984.  return v0;
}
