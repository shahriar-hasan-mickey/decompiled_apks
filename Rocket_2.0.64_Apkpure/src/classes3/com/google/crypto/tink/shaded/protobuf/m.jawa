record `com.google.crypto.tink.shaded.protobuf.m` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.a` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$FloatList` @kind interface, `java.util.RandomAccess` @kind interface, `com.google.crypto.tink.shaded.protobuf.g0` @kind interface {
  `float`[] `com.google.crypto.tink.shaded.protobuf.m.b` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.m.c` @AccessFlag PRIVATE;
}
global `com.google.crypto.tink.shaded.protobuf.m` `@@com.google.crypto.tink.shaded.protobuf.m.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1c039c.  v0:= new `com.google.crypto.tink.shaded.protobuf.m`;
  #L1c03a0.  v1:= 0I;
  #L1c03a2.  v2:= new `float`[v1];
  #L1c03a6.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<init>:([FI)V` @kind direct;
  #L1c03ac.  `@@com.google.crypto.tink.shaded.protobuf.m.d` @type ^`com.google.crypto.tink.shaded.protobuf.m` := v0 @kind object;
  #L1c03b0.  call `makeImmutable`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.makeImmutable:()V` @kind virtual;
  #L1c03b6.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.m` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c03c8.  v0:= 10I;
  #L1c03cc.  v0:= new `float`[v0];
  #L1c03d0.  v1:= 0I;
  #L1c03d2.  call `<init>`(v2, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<init>:([FI)V` @kind direct;
  #L1c03d8.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `float`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<init>:([FI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1c03ec.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.<init>:()V` @kind direct;
  #L1c03f2.  v0.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] := v1 @kind object;
  #L1c03f6.  v0.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v2;
  #L1c03fa.  return @kind void;
}
procedure `void` `c`(`com.google.crypto.tink.shaded.protobuf.m` v4 @kind this, `int` v5 , `float` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.c:(IF)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c04a0.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c04a6.  if v5 < 0 then goto L1c051c;
  #L1c04aa.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c04ae.  if v5 > v0 then goto L1c051c;
  #L1c04b2.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c04b6.  v2:= length @variable v1;
  #L1c04b8.  if v0 >= v2 then goto L1c04ca;
  #L1c04bc.  v2:= v5 + 1;
  #L1c04c0.  v0:= v0 - v5 @kind int;
  #L1c04c2.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c04c8.  goto L1c04fa;
  #L1c04ca.  v0:= v0 * 3;
  #L1c04ce.  v0:= v0 / 2;
  #L1c04d2.  v0:= v0 + 1;
  #L1c04d6.  v0:= new `float`[v0];
  #L1c04da.  v2:= 0I;
  #L1c04dc.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c04e2.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c04e6.  v2:= v5 + 1;
  #L1c04ea.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c04ee.  v3:= v3 - v5 @kind int;
  #L1c04f0.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c04f6.  v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] := v0 @kind object;
  #L1c04fa.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c04fe.  v0[v5]:= v6;
  #L1c0502.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0506.  v5:= v5 + 1;
  #L1c050a.  v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v5;
  #L1c050e.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1c0512.  v5:= v5 + 1;
  #L1c0516.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1c051a.  return @kind void;
  #L1c051c.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L1c0520.  call temp:= `g`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.g:(I)Ljava/lang/String;` @kind direct;
  #L1c0526.  v5:= temp @kind object;
  #L1c0528.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c052e.  throw v6;
}
procedure `com.google.crypto.tink.shaded.protobuf.m` `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.d:()Lcom/google/crypto/tink/shaded/protobuf/m;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c0134.  v0:= `@@com.google.crypto.tink.shaded.protobuf.m.d` @type ^`com.google.crypto.tink.shaded.protobuf.m` @kind object;
  #L1c0138.  return v0 @kind object;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.m` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1c0540.  if v2 < 0 then goto L1c054e;
  #L1c0544.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0548.  if v2 >= v0 then goto L1c054e;
  #L1c054c.  return @kind void;
  #L1c054e.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1c0552.  call temp:= `g`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.g:(I)Ljava/lang/String;` @kind direct;
  #L1c0558.  v2:= temp @kind object;
  #L1c055a.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c0560.  throw v0;
}
procedure `java.lang.String` `g`(`com.google.crypto.tink.shaded.protobuf.m` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.g:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1c0354.  v0:= new `java.lang.StringBuilder`;
  #L1c0358.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1c035e.  v1:= "Index:" @kind object;
  #L1c0362.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0368.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c036e.  v3:= ", Size:" @kind object;
  #L1c0372.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0378.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c037c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1c0382.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1c0388.  v3:= temp @kind object;
  #L1c038a.  return v3 @kind object;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 , `java.lang.Float` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.a:(ILjava/lang/Float;)V` @AccessFlag PUBLIC {
    temp;

  #L1c040c.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L1c0412.  v2:= temp;
  #L1c0414.  call `c`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.c:(IF)V` @kind direct;
  #L1c041a.  return @kind void;
}
procedure `void` `add`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c042c.  v2:= (`java.lang.Float`) v2 @kind object;
  #L1c0430.  call `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.a:(ILjava/lang/Float;)V` @kind virtual;
  #L1c0436.  return @kind void;
}
procedure `boolean` `add`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1bff8c.  v1:= (`java.lang.Float`) v1 @kind object;
  #L1bff90.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.b:(Ljava/lang/Float;)Z` @kind virtual;
  #L1bff96.  v1:= temp;
  #L1bff98.  return v1;
}
procedure `boolean` `addAll`(`com.google.crypto.tink.shaded.protobuf.m` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1bffac.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1bffb2.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1bffb8.  v0:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.m` @kind boolean;
  #L1bffbc.  if v0 != 0 then goto L1bffca;
  #L1bffc0.  call temp:= `addAll`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1bffc6.  v6:= temp;
  #L1bffc8.  return v6;
  #L1bffca.  v6:= (`com.google.crypto.tink.shaded.protobuf.m`) v6 @kind object;
  #L1bffce.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1bffd2.  v1:= 0I;
  #L1bffd4.  if v0 != 0 then goto L1bffda;
  #L1bffd8.  return v1;
  #L1bffda.  v2:= 2147483647I;
  #L1bffe0.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1bffe4.  v2:= v2 - v3 @kind int;
  #L1bffe6.  if v2 < v0 then goto L1c002a;
  #L1bffea.  v3:= v3 + v0 @kind int;
  #L1bffec.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1bfff0.  v2:= length @variable v0;
  #L1bfff2.  if v3 <= v2 then goto L1c0002;
  #L1bfff6.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L1bfffc.  v0:= temp @kind object;
  #L1bfffe.  v5.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] := v0 @kind object;
  #L1c0002.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c0006.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c000a.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c000e.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0012.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c0018.  v5.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v3;
  #L1c001c.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1c0020.  v0:= 1I;
  #L1c0022.  v6:= v6 + v0 @kind int;
  #L1c0024.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1c0028.  return v0;
  #L1c002a.  v6:= new `java.lang.OutOfMemoryError`;
  #L1c002e.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1c0034.  throw v6;
}
procedure `void` `addFloat`(`com.google.crypto.tink.shaded.protobuf.m` v4 @kind this, `float` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.addFloat:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c0448.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c044e.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0452.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c0456.  v2:= length @variable v1;
  #L1c0458.  if v0 != v2 then goto L1c0478;
  #L1c045c.  v2:= v0 * 3;
  #L1c0460.  v2:= v2 / 2;
  #L1c0464.  v2:= v2 + 1;
  #L1c0468.  v2:= new `float`[v2];
  #L1c046c.  v3:= 0I;
  #L1c046e.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c0474.  v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] := v2 @kind object;
  #L1c0478.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c047c.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0480.  v2:= v1 + 1;
  #L1c0484.  v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v2;
  #L1c0488.  v0[v1]:= v5;
  #L1c048c.  return @kind void;
}
procedure `boolean` `b`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `java.lang.Float` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.b:(Ljava/lang/Float;)Z` @AccessFlag PUBLIC {
    temp;

  #L1bff68.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L1bff6e.  v1:= temp;
  #L1bff70.  call `addFloat`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.addFloat:(F)V` @kind virtual;
  #L1bff76.  v1:= 1I;
  #L1bff78.  return v1;
}
procedure `boolean` `equals`(`com.google.crypto.tink.shaded.protobuf.m` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1c0048.  v0:= 1I;
  #L1c004a.  if v5 != v6 then goto L1c0050;
  #L1c004e.  return v0;
  #L1c0050.  v1:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.m` @kind boolean;
  #L1c0054.  if v1 != 0 then goto L1c0062;
  #L1c0058.  call temp:= `equals`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1c005e.  v6:= temp;
  #L1c0060.  return v6;
  #L1c0062.  v6:= (`com.google.crypto.tink.shaded.protobuf.m`) v6 @kind object;
  #L1c0066.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c006a.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c006e.  v3:= 0I;
  #L1c0070.  if v1 == v2 then goto L1c0076;
  #L1c0074.  return v3;
  #L1c0076.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c007a.  v1:= 0I;
  #L1c007c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0080.  if v1 >= v2 then goto L1c00ac;
  #L1c0084.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c0088.  v2:= v2[v1];
  #L1c008c.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L1c0092.  v2:= temp;
  #L1c0094.  v4:= v6[v1];
  #L1c0098.  call temp:= `floatToIntBits`(v4) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L1c009e.  v4:= temp;
  #L1c00a0.  if v2 == v4 then goto L1c00a6;
  #L1c00a4.  return v3;
  #L1c00a6.  v1:= v1 + 1;
  #L1c00aa.  goto L1c007c;
  #L1c00ac.  return v0;
}
procedure `java.lang.Float` `f`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.f:(I)Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;

  #L1c0248.  call temp:= `getFloat`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.getFloat:(I)F` @kind virtual;
  #L1c024e.  v1:= temp;
  #L1c0250.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1c0256.  v1:= temp @kind object;
  #L1c0258.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c02fc.  call temp:= `f`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.f:(I)Ljava/lang/Float;` @kind virtual;
  #L1c0302.  v1:= temp @kind object;
  #L1c0304.  return v1 @kind object;
}
procedure `float` `getFloat`(`com.google.crypto.tink.shaded.protobuf.m` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.getFloat:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c01a8.  call `e`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.e:(I)V` @kind direct;
  #L1c01ae.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c01b2.  v2:= v0[v2];
  #L1c01b6.  return v2;
}
procedure `java.lang.Float` `h`(`com.google.crypto.tink.shaded.protobuf.m` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.h:(I)Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c026c.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c0272.  call `e`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.e:(I)V` @kind direct;
  #L1c0278.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c027c.  v1:= v0[v5];
  #L1c0280.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0284.  v3:= v2 + -1;
  #L1c0288.  if v5 >= v3 then goto L1c029c;
  #L1c028c.  v3:= v5 + 1;
  #L1c0290.  v2:= v2 - v5 @kind int;
  #L1c0292.  v2:= v2 + -1;
  #L1c0296.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c029c.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c02a0.  v5:= v5 + -1;
  #L1c02a4.  v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v5;
  #L1c02a8.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1c02ac.  v5:= v5 + 1;
  #L1c02b0.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1c02b4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1c02ba.  v5:= temp @kind object;
  #L1c02bc.  return v5 @kind object;
}
procedure `int` `hashCode`(`com.google.crypto.tink.shaded.protobuf.m` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1c01f4.  v0:= 1I;
  #L1c01f6.  v1:= 0I;
  #L1c01f8.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c01fc.  if v1 >= v2 then goto L1c021c;
  #L1c0200.  v0:= v0 * 31;
  #L1c0204.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c0208.  v2:= v2[v1];
  #L1c020c.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L1c0212.  v2:= temp;
  #L1c0214.  v0:= v0 + v2 @kind int;
  #L1c0216.  v1:= v1 + 1;
  #L1c021a.  goto L1c01f8;
  #L1c021c.  return v0;
}
procedure `java.lang.Float` `i`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 , `java.lang.Float` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.i:(ILjava/lang/Float;)Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;

  #L1c02d0.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L1c02d6.  v2:= temp;
  #L1c02d8.  call temp:= `setFloat`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.setFloat:(IF)F` @kind virtual;
  #L1c02de.  v1:= temp;
  #L1c02e0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1c02e6.  v1:= temp @kind object;
  #L1c02e8.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$FloatList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.m` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$FloatList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c014c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0150.  if v3 < v0 then goto L1c0170;
  #L1c0154.  v0:= new `com.google.crypto.tink.shaded.protobuf.m`;
  #L1c0158.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c015c.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L1c0162.  v3:= temp @kind object;
  #L1c0164.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0168.  call `<init>`(v0, v3, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.<init>:([FI)V` @kind direct;
  #L1c016e.  return v0 @kind object;
  #L1c0170.  v3:= new `java.lang.IllegalArgumentException`;
  #L1c0174.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1c017a.  throw v3;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$ProtobufList;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c018c.  call temp:= `mutableCopyWithCapacity`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$FloatList;` @kind virtual;
  #L1c0192.  v1:= temp @kind object;
  #L1c0194.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c0318.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.h:(I)Ljava/lang/Float;` @kind virtual;
  #L1c031e.  v1:= temp @kind object;
  #L1c0320.  return v1 @kind object;
}
procedure `boolean` `remove`(`com.google.crypto.tink.shaded.protobuf.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c00c0.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c00c6.  v0:= 0I;
  #L1c00c8.  v1:= 0I;
  #L1c00ca.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c00ce.  if v1 >= v2 then goto L1c0122;
  #L1c00d2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c00d6.  v2:= v2[v1];
  #L1c00da.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1c00e0.  v2:= temp @kind object;
  #L1c00e2.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1c00e8.  v2:= temp;
  #L1c00ea.  if v2 == 0 then goto L1c011c;
  #L1c00ee.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c00f2.  v0:= v1 + 1;
  #L1c00f6.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c00fa.  v2:= v2 - v1 @kind int;
  #L1c00fc.  v3:= 1I;
  #L1c00fe.  v2:= v2 - v3 @kind int;
  #L1c0100.  call `arraycopy`(v5, v0, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c0106.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c010a.  v5:= v5 - v3 @kind int;
  #L1c010c.  v4.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v5;
  #L1c0110.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1c0114.  v5:= v5 + v3 @kind int;
  #L1c0116.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1c011a.  return v3;
  #L1c011c.  v1:= v1 + 1;
  #L1c0120.  goto L1c00ca;
  #L1c0122.  return v0;
}
procedure `void` `removeRange`(`com.google.crypto.tink.shaded.protobuf.m` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.removeRange:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1c0574.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c057a.  if v4 < v3 then goto L1c05a8;
  #L1c057e.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c0582.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0586.  v1:= v1 - v4 @kind int;
  #L1c0588.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1c058e.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0592.  v4:= v4 - v3 @kind int;
  #L1c0594.  v0:= v0 - v4 @kind int;
  #L1c0596.  v2.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int` := v0;
  #L1c059a.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L1c059e.  v3:= v3 + 1;
  #L1c05a2.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L1c05a6.  return @kind void;
  #L1c05a8.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1c05ac.  v4:= "toIndex < fromIndex" @kind object;
  #L1c05b0.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c05b6.  throw v3;
}
procedure `java.lang.Object` `set`(`com.google.crypto.tink.shaded.protobuf.m` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1c0334.  v2:= (`java.lang.Float`) v2 @kind object;
  #L1c0338.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.i:(ILjava/lang/Float;)Ljava/lang/Float;` @kind virtual;
  #L1c033e.  v1:= temp @kind object;
  #L1c0340.  return v1 @kind object;
}
procedure `float` `setFloat`(`com.google.crypto.tink.shaded.protobuf.m` v2 @kind this, `int` v3 , `float` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.setFloat:(IF)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1c01c8.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1c01ce.  call `e`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.e:(I)V` @kind direct;
  #L1c01d4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.m.b` @type ^`float`[] @kind object;
  #L1c01d8.  v1:= v0[v3];
  #L1c01dc.  v0[v3]:= v4;
  #L1c01e0.  return v1;
}
procedure `int` `size`(`com.google.crypto.tink.shaded.protobuf.m` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/m;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1c0230.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.m.c` @type ^`int`;
  #L1c0234.  return v0;
}
