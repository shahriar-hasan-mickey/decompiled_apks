record `com.google.crypto.tink.shaded.protobuf.e` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.a` @kind class, `com.google.crypto.tink.shaded.protobuf.Internal$BooleanList` @kind interface, `java.util.RandomAccess` @kind interface, `com.google.crypto.tink.shaded.protobuf.g0` @kind interface {
  `boolean`[] `com.google.crypto.tink.shaded.protobuf.e.b` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.e.c` @AccessFlag PRIVATE;
}
global `com.google.crypto.tink.shaded.protobuf.e` `@@com.google.crypto.tink.shaded.protobuf.e.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1ae310.  v0:= new `com.google.crypto.tink.shaded.protobuf.e`;
  #L1ae314.  v1:= 0I;
  #L1ae316.  v2:= new `boolean`[v1];
  #L1ae31a.  call `<init>`(v0, v2, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L1ae320.  `@@com.google.crypto.tink.shaded.protobuf.e.d` @type ^`com.google.crypto.tink.shaded.protobuf.e` := v0 @kind object;
  #L1ae324.  call `makeImmutable`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.makeImmutable:()V` @kind virtual;
  #L1ae32a.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1ae33c.  v0:= 10I;
  #L1ae340.  v0:= new `boolean`[v0];
  #L1ae344.  v1:= 0I;
  #L1ae346.  call `<init>`(v2, v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L1ae34c.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `boolean`[] v1 @kind object, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1ae360.  call `<init>`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.<init>:()V` @kind direct;
  #L1ae366.  v0.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v1 @kind object;
  #L1ae36a.  v0.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v2;
  #L1ae36e.  return @kind void;
}
procedure `void` `c`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.c:(IZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae414.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae41a.  if v5 < 0 then goto L1ae490;
  #L1ae41e.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae422.  if v5 > v0 then goto L1ae490;
  #L1ae426.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae42a.  v2:= length @variable v1;
  #L1ae42c.  if v0 >= v2 then goto L1ae43e;
  #L1ae430.  v2:= v5 + 1;
  #L1ae434.  v0:= v0 - v5 @kind int;
  #L1ae436.  call `arraycopy`(v1, v5, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae43c.  goto L1ae46e;
  #L1ae43e.  v0:= v0 * 3;
  #L1ae442.  v0:= v0 / 2;
  #L1ae446.  v0:= v0 + 1;
  #L1ae44a.  v0:= new `boolean`[v0];
  #L1ae44e.  v2:= 0I;
  #L1ae450.  call `arraycopy`(v1, v2, v0, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae456.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae45a.  v2:= v5 + 1;
  #L1ae45e.  v3:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae462.  v3:= v3 - v5 @kind int;
  #L1ae464.  call `arraycopy`(v1, v5, v0, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae46a.  v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v0 @kind object;
  #L1ae46e.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae472.  v0[v5]:= v6 @kind boolean;
  #L1ae476.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae47a.  v5:= v5 + 1;
  #L1ae47e.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L1ae482.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1ae486.  v5:= v5 + 1;
  #L1ae48a.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1ae48e.  return @kind void;
  #L1ae490.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L1ae494.  call temp:= `g`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @kind direct;
  #L1ae49a.  v5:= temp @kind object;
  #L1ae49c.  call `<init>`(v6, v5) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae4a2.  throw v6;
}
procedure `com.google.crypto.tink.shaded.protobuf.e` `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.d:()Lcom/google/crypto/tink/shaded/protobuf/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ae0f4.  v0:= `@@com.google.crypto.tink.shaded.protobuf.e.d` @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind object;
  #L1ae0f8.  return v0 @kind object;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1ae4b4.  if v2 < 0 then goto L1ae4c2;
  #L1ae4b8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae4bc.  if v2 >= v0 then goto L1ae4c2;
  #L1ae4c0.  return @kind void;
  #L1ae4c2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1ae4c6.  call temp:= `g`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @kind direct;
  #L1ae4cc.  v2:= temp @kind object;
  #L1ae4ce.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae4d4.  throw v0;
}
procedure `java.lang.String` `g`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.g:(I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1ae2c8.  v0:= new `java.lang.StringBuilder`;
  #L1ae2cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ae2d2.  v1:= "Index:" @kind object;
  #L1ae2d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae2dc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae2e2.  v3:= ", Size:" @kind object;
  #L1ae2e6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae2ec.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae2f0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ae2f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ae2fc.  v3:= temp @kind object;
  #L1ae2fe.  return v3 @kind object;
}
procedure `void` `a`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Boolean` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.a:(ILjava/lang/Boolean;)V` @AccessFlag PUBLIC {
    temp;

  #L1ae380.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1ae386.  v2:= temp;
  #L1ae388.  call `c`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.c:(IZ)V` @kind direct;
  #L1ae38e.  return @kind void;
}
procedure `void` `add`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ae3a0.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L1ae3a4.  call `a`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.a:(ILjava/lang/Boolean;)V` @kind virtual;
  #L1ae3aa.  return @kind void;
}
procedure `boolean` `add`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1adf10.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L1adf14.  call temp:= `b`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.b:(Ljava/lang/Boolean;)Z` @kind virtual;
  #L1adf1a.  v1:= temp;
  #L1adf1c.  return v1;
}
procedure `boolean` `addAll`(`com.google.crypto.tink.shaded.protobuf.e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1adf30.  call `ensureIsMutable`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1adf36.  call temp:= `a`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1adf3c.  v0:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind boolean;
  #L1adf40.  if v0 != 0 then goto L1adf4e;
  #L1adf44.  call temp:= `addAll`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.addAll:(Ljava/util/Collection;)Z` @kind super;
  #L1adf4a.  v6:= temp;
  #L1adf4c.  return v6;
  #L1adf4e.  v6:= (`com.google.crypto.tink.shaded.protobuf.e`) v6 @kind object;
  #L1adf52.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adf56.  v1:= 0I;
  #L1adf58.  if v0 != 0 then goto L1adf5e;
  #L1adf5c.  return v1;
  #L1adf5e.  v2:= 2147483647I;
  #L1adf64.  v3:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adf68.  v2:= v2 - v3 @kind int;
  #L1adf6a.  if v2 < v0 then goto L1adfae;
  #L1adf6e.  v3:= v3 + v0 @kind int;
  #L1adf70.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1adf74.  v2:= length @variable v0;
  #L1adf76.  if v3 <= v2 then goto L1adf86;
  #L1adf7a.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L1adf80.  v0:= temp @kind object;
  #L1adf82.  v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v0 @kind object;
  #L1adf86.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1adf8a.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1adf8e.  v4:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adf92.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adf96.  call `arraycopy`(v0, v1, v2, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1adf9c.  v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v3;
  #L1adfa0.  v6:= v5.`java.util.AbstractList.modCount` @type ^`int`;
  #L1adfa4.  v0:= 1I;
  #L1adfa6.  v6:= v6 + v0 @kind int;
  #L1adfa8.  v5.`java.util.AbstractList.modCount` @type ^`int` := v6;
  #L1adfac.  return v0;
  #L1adfae.  v6:= new `java.lang.OutOfMemoryError`;
  #L1adfb2.  call `<init>`(v6) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L1adfb8.  throw v6;
}
procedure `void` `addBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `boolean` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addBoolean:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae3bc.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae3c2.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae3c6.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae3ca.  v2:= length @variable v1;
  #L1ae3cc.  if v0 != v2 then goto L1ae3ec;
  #L1ae3d0.  v2:= v0 * 3;
  #L1ae3d4.  v2:= v2 / 2;
  #L1ae3d8.  v2:= v2 + 1;
  #L1ae3dc.  v2:= new `boolean`[v2];
  #L1ae3e0.  v3:= 0I;
  #L1ae3e2.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae3e8.  v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] := v2 @kind object;
  #L1ae3ec.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae3f0.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae3f4.  v2:= v1 + 1;
  #L1ae3f8.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v2;
  #L1ae3fc.  v0[v1]:= v5 @kind boolean;
  #L1ae400.  return @kind void;
}
procedure `boolean` `b`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `java.lang.Boolean` v1 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.b:(Ljava/lang/Boolean;)Z` @AccessFlag PUBLIC {
    temp;

  #L1adeec.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1adef2.  v1:= temp;
  #L1adef4.  call `addBoolean`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.addBoolean:(Z)V` @kind virtual;
  #L1adefa.  v1:= 1I;
  #L1adefc.  return v1;
}
procedure `boolean` `equals`(`com.google.crypto.tink.shaded.protobuf.e` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1adfcc.  v0:= 1I;
  #L1adfce.  if v5 != v6 then goto L1adfd4;
  #L1adfd2.  return v0;
  #L1adfd4.  v1:= instanceof @variable v6 @type ^`com.google.crypto.tink.shaded.protobuf.e` @kind boolean;
  #L1adfd8.  if v1 != 0 then goto L1adfe6;
  #L1adfdc.  call temp:= `equals`(v5, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1adfe2.  v6:= temp;
  #L1adfe4.  return v6;
  #L1adfe6.  v6:= (`com.google.crypto.tink.shaded.protobuf.e`) v6 @kind object;
  #L1adfea.  v1:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adfee.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1adff2.  v3:= 0I;
  #L1adff4.  if v1 == v2 then goto L1adffa;
  #L1adff8.  return v3;
  #L1adffa.  v6:= v6.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1adffe.  v1:= 0I;
  #L1ae000.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae004.  if v1 >= v2 then goto L1ae020;
  #L1ae008.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae00c.  v2:= v2[v1] @kind boolean;
  #L1ae010.  v4:= v6[v1] @kind boolean;
  #L1ae014.  if v2 == v4 then goto L1ae01a;
  #L1ae018.  return v3;
  #L1ae01a.  v1:= v1 + 1;
  #L1ae01e.  goto L1ae000;
  #L1ae020.  return v0;
}
procedure `java.lang.Boolean` `f`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.f:(I)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;

  #L1ae1bc.  call temp:= `getBoolean`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.getBoolean:(I)Z` @kind virtual;
  #L1ae1c2.  v1:= temp;
  #L1ae1c4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1ae1ca.  v1:= temp @kind object;
  #L1ae1cc.  return v1 @kind object;
}
procedure `java.lang.Object` `get`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ae270.  call temp:= `f`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.f:(I)Ljava/lang/Boolean;` @kind virtual;
  #L1ae276.  v1:= temp @kind object;
  #L1ae278.  return v1 @kind object;
}
procedure `boolean` `getBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.getBoolean:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ae034.  call `e`(v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L1ae03a.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae03e.  v2:= v0[v2] @kind boolean;
  #L1ae042.  return v2;
}
procedure `java.lang.Boolean` `h`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.h:(I)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae1e0.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae1e6.  call `e`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L1ae1ec.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae1f0.  v1:= v0[v5] @kind boolean;
  #L1ae1f4.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae1f8.  v3:= v2 + -1;
  #L1ae1fc.  if v5 >= v3 then goto L1ae210;
  #L1ae200.  v3:= v5 + 1;
  #L1ae204.  v2:= v2 - v5 @kind int;
  #L1ae206.  v2:= v2 + -1;
  #L1ae20a.  call `arraycopy`(v0, v3, v0, v5, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae210.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae214.  v5:= v5 + -1;
  #L1ae218.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L1ae21c.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1ae220.  v5:= v5 + 1;
  #L1ae224.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1ae228.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1ae22e.  v5:= temp @kind object;
  #L1ae230.  return v5 @kind object;
}
procedure `int` `hashCode`(`com.google.crypto.tink.shaded.protobuf.e` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ae168.  v0:= 1I;
  #L1ae16a.  v1:= 0I;
  #L1ae16c.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae170.  if v1 >= v2 then goto L1ae190;
  #L1ae174.  v0:= v0 * 31;
  #L1ae178.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae17c.  v2:= v2[v1] @kind boolean;
  #L1ae180.  call temp:= `hashBoolean`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/Internal;.hashBoolean:(Z)I` @kind static;
  #L1ae186.  v2:= temp;
  #L1ae188.  v0:= v0 + v2 @kind int;
  #L1ae18a.  v1:= v1 + 1;
  #L1ae18e.  goto L1ae16c;
  #L1ae190.  return v0;
}
procedure `java.lang.Boolean` `i`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Boolean` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.i:(ILjava/lang/Boolean;)Ljava/lang/Boolean;` @AccessFlag PUBLIC {
    temp;

  #L1ae244.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1ae24a.  v2:= temp;
  #L1ae24c.  call temp:= `setBoolean`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.setBoolean:(IZ)Z` @kind virtual;
  #L1ae252.  v1:= temp;
  #L1ae254.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1ae25a.  v1:= temp @kind object;
  #L1ae25c.  return v1 @kind object;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$BooleanList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$BooleanList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ae10c.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae110.  if v3 < v0 then goto L1ae130;
  #L1ae114.  v0:= new `com.google.crypto.tink.shaded.protobuf.e`;
  #L1ae118.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae11c.  call temp:= `copyOf`(v1, v3) @signature `Ljava/util/Arrays;.copyOf:([ZI)[Z` @kind static;
  #L1ae122.  v3:= temp @kind object;
  #L1ae124.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae128.  call `<init>`(v0, v3, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.<init>:([ZI)V` @kind direct;
  #L1ae12e.  return v0 @kind object;
  #L1ae130.  v3:= new `java.lang.IllegalArgumentException`;
  #L1ae134.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1ae13a.  throw v3;
}
procedure `com.google.crypto.tink.shaded.protobuf.Internal$ProtobufList` `mutableCopyWithCapacity`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$ProtobufList;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ae14c.  call temp:= `mutableCopyWithCapacity`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.mutableCopyWithCapacity:(I)Lcom/google/crypto/tink/shaded/protobuf/Internal$BooleanList;` @kind virtual;
  #L1ae152.  v1:= temp @kind object;
  #L1ae154.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ae28c.  call temp:= `h`(v0, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.h:(I)Ljava/lang/Boolean;` @kind virtual;
  #L1ae292.  v1:= temp @kind object;
  #L1ae294.  return v1 @kind object;
}
procedure `boolean` `remove`(`com.google.crypto.tink.shaded.protobuf.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae054.  call `ensureIsMutable`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae05a.  v0:= 0I;
  #L1ae05c.  v1:= 0I;
  #L1ae05e.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae062.  if v1 >= v2 then goto L1ae0b6;
  #L1ae066.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae06a.  v2:= v2[v1] @kind boolean;
  #L1ae06e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1ae074.  v2:= temp @kind object;
  #L1ae076.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1ae07c.  v2:= temp;
  #L1ae07e.  if v2 == 0 then goto L1ae0b0;
  #L1ae082.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae086.  v0:= v1 + 1;
  #L1ae08a.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae08e.  v2:= v2 - v1 @kind int;
  #L1ae090.  v3:= 1I;
  #L1ae092.  v2:= v2 - v3 @kind int;
  #L1ae094.  call `arraycopy`(v5, v0, v5, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae09a.  v5:= v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae09e.  v5:= v5 - v3 @kind int;
  #L1ae0a0.  v4.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v5;
  #L1ae0a4.  v5:= v4.`java.util.AbstractList.modCount` @type ^`int`;
  #L1ae0a8.  v5:= v5 + v3 @kind int;
  #L1ae0aa.  v4.`java.util.AbstractList.modCount` @type ^`int` := v5;
  #L1ae0ae.  return v3;
  #L1ae0b0.  v1:= v1 + 1;
  #L1ae0b4.  goto L1ae05e;
  #L1ae0b6.  return v0;
}
procedure `void` `removeRange`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.removeRange:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1ae4e8.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae4ee.  if v4 < v3 then goto L1ae51c;
  #L1ae4f2.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae4f6.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae4fa.  v1:= v1 - v4 @kind int;
  #L1ae4fc.  call `arraycopy`(v0, v4, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae502.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae506.  v4:= v4 - v3 @kind int;
  #L1ae508.  v0:= v0 - v4 @kind int;
  #L1ae50a.  v2.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int` := v0;
  #L1ae50e.  v3:= v2.`java.util.AbstractList.modCount` @type ^`int`;
  #L1ae512.  v3:= v3 + 1;
  #L1ae516.  v2.`java.util.AbstractList.modCount` @type ^`int` := v3;
  #L1ae51a.  return @kind void;
  #L1ae51c.  v3:= new `java.lang.IndexOutOfBoundsException`;
  #L1ae520.  v4:= "toIndex < fromIndex" @kind object;
  #L1ae524.  call `<init>`(v3, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae52a.  throw v3;
}
procedure `java.lang.Object` `set`(`com.google.crypto.tink.shaded.protobuf.e` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1ae2a8.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L1ae2ac.  call temp:= `i`(v0, v1, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.i:(ILjava/lang/Boolean;)Ljava/lang/Boolean;` @kind virtual;
  #L1ae2b2.  v1:= temp @kind object;
  #L1ae2b4.  return v1 @kind object;
}
procedure `boolean` `setBoolean`(`com.google.crypto.tink.shaded.protobuf.e` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.setBoolean:(IZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ae0c8.  call `ensureIsMutable`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/a;.ensureIsMutable:()V` @kind virtual;
  #L1ae0ce.  call `e`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.e:(I)V` @kind direct;
  #L1ae0d4.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.e.b` @type ^`boolean`[] @kind object;
  #L1ae0d8.  v1:= v0[v3] @kind boolean;
  #L1ae0dc.  v0[v3]:= v4 @kind boolean;
  #L1ae0e0.  return v1;
}
procedure `int` `size`(`com.google.crypto.tink.shaded.protobuf.e` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ae1a4.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.e.c` @type ^`int`;
  #L1ae1a8.  return v0;
}
