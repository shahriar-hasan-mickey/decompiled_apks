record `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` @kind class @AccessFlag FINAL extends `com.google.crypto.tink.shaded.protobuf.CodedInputStream` @kind class {
  `java.lang.Iterable` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.f` @AccessFlag PRIVATE;
  `java.util.Iterator` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.g` @AccessFlag PRIVATE;
  `java.nio.ByteBuffer` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.i` @AccessFlag PRIVATE;
  `boolean` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.j` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.l` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @AccessFlag PRIVATE;
  `int` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.p` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.s` @AccessFlag PRIVATE;
  `long` `com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this, `java.lang.Iterable` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.<init>:(Ljava/lang/Iterable;IZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1b19e4.  v0:= 0I;
  #L1b19e6.  call `<init>`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.<init>:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @kind direct;
  #L1b19ec.  v0:= 2147483647I;
  #L1b19f2.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int` := v0;
  #L1b19f6.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int` := v3;
  #L1b19fa.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.f` @type ^`java.lang.Iterable` := v2 @kind object;
  #L1b19fe.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1b1a04.  v2:= temp @kind object;
  #L1b1a06.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.g` @type ^`java.util.Iterator` := v2 @kind object;
  #L1b1a0a.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.i` @type ^`boolean` := v4 @kind boolean;
  #L1b1a0e.  v2:= 0I;
  #L1b1a10.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int` := v2;
  #L1b1a14.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.p` @type ^`int` := v2;
  #L1b1a18.  if v3 != 0 then goto L1b1a3a;
  #L1b1a1c.  v2:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1a20.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L1b1a24.  v2:= 0L;
  #L1b1a28.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v2 @kind wide;
  #L1b1a2c.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` := v2 @kind wide;
  #L1b1a30.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` := v2 @kind wide;
  #L1b1a34.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.s` @type ^`long` := v2 @kind wide;
  #L1b1a38.  goto L1b1a40;
  #L1b1a3a.  call `l`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.l:()V` @kind direct;
  #L1b1a40.  return @kind void;
}
procedure `void` `<init>`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v0 @kind this, `java.lang.Iterable` v1 @kind object, `int` v2 , `boolean` v3 , `com.google.crypto.tink.shaded.protobuf.CodedInputStream$a` v4 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.<init>:(Ljava/lang/Iterable;IZLcom/google/crypto/tink/shaded/protobuf/CodedInputStream$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L1b1a54.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.<init>:(Ljava/lang/Iterable;IZ)V` @kind direct;
  #L1b1a5a.  return @kind void;
}
procedure `long` `d`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b1594.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b1598.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b159c.  v0:= v0 - v2 @kind long;
  #L1b159e.  return v0 @kind wide;
}
procedure `void` `e`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1b1aa8.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.g` @type ^`java.util.Iterator` @kind object;
  #L1b1aac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1b1ab2.  v0:= temp;
  #L1b1ab4.  if v0 == 0 then goto L1b1ac0;
  #L1b1ab8.  call `l`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.l:()V` @kind direct;
  #L1b1abe.  return @kind void;
  #L1b1ac0.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1ac6.  v0:= temp @kind object;
  #L1b1ac8.  throw v0;
}
procedure `void` `f`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v11 @kind this, `byte`[] v12 @kind object, `int` v13 , `int` v14 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1b1bb0.  if v14 < 0 then goto L1b1c1a;
  #L1b1bb4.  call temp:= `i`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b1bba.  v0:= temp;
  #L1b1bbc.  if v14 > v0 then goto L1b1c1a;
  #L1b1bc0.  v0:= v14;
  #L1b1bc2.  if v0 <= 0 then goto L1b1c18;
  #L1b1bc6.  call temp:= `d`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b1bcc.  v1:= temp @kind wide;
  #L1b1bce.  v3:= 0L;
  #L1b1bd2.  v5:= lcmp(v1, v3);
  #L1b1bd6.  if v5 != 0 then goto L1b1be0;
  #L1b1bda.  call `e`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.e:()V` @kind direct;
  #L1b1be0.  call temp:= `d`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b1be6.  v1:= temp @kind wide;
  #L1b1be8.  v2:= (`int`) v1 @kind l2i;
  #L1b1bea.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b1bf0.  v1:= temp;
  #L1b1bf2.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1bf6.  v4:= v14 - v0 @kind int;
  #L1b1bfa.  v4:= v4 + v13 @kind int;
  #L1b1bfc.  v5:= (`long`) v4 @kind i2l;
  #L1b1bfe.  v9:= (`long`) v1 @kind i2l;
  #L1b1c00.  v4:= v12 @kind object;
  #L1b1c02.  v7:= v9 @kind wide;
  #L1b1c04.  call `n`(v2, v4, v5, v7) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.n:(J[BJJ)V` @kind static;
  #L1b1c0a.  v0:= v0 - v1 @kind int;
  #L1b1c0c.  v1:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1c10.  v1:= v1 + v9 @kind long;
  #L1b1c12.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v1 @kind wide;
  #L1b1c16.  goto L1b1bc2;
  #L1b1c18.  return @kind void;
  #L1b1c1a.  if v14 > 0 then goto L1b1c2e;
  #L1b1c1e.  if v14 != 0 then goto L1b1c24;
  #L1b1c22.  return @kind void;
  #L1b1c24.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1c2a.  v12:= temp @kind object;
  #L1b1c2c.  throw v12;
  #L1b1c2e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1c34.  v12:= temp @kind object;
  #L1b1c36.  throw v12;
}
procedure `void` `h`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v3 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.h:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b1c68.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int`;
  #L1b1c6c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.l` @type ^`int`;
  #L1b1c70.  v0:= v0 + v1 @kind int;
  #L1b1c72.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int` := v0;
  #L1b1c76.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.p` @type ^`int`;
  #L1b1c7a.  v1:= v0 - v1 @kind int;
  #L1b1c7e.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int`;
  #L1b1c82.  if v1 <= v2 then goto L1b1c94;
  #L1b1c86.  v1:= v1 - v2 @kind int;
  #L1b1c88.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.l` @type ^`int` := v1;
  #L1b1c8c.  v0:= v0 - v1 @kind int;
  #L1b1c8e.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int` := v0;
  #L1b1c92.  goto L1b1c9a;
  #L1b1c94.  v0:= 0I;
  #L1b1c96.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.l` @type ^`int` := v0;
  #L1b1c9a.  return @kind void;
}
procedure `int` `i`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b12b0.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int`;
  #L1b12b4.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b12b8.  v0:= v0 - v1 @kind int;
  #L1b12ba.  v0:= (`long`) v0 @kind i2l;
  #L1b12bc.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b12c0.  v0:= v0 - v2 @kind long;
  #L1b12c2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b12c6.  v0:= v0 + v2 @kind long;
  #L1b12c8.  v1:= (`int`) v0 @kind l2i;
  #L1b12ca.  return v1;
}
procedure `void` `j`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1b1dc0.  v0:= 0I;
  #L1b1dc2.  v1:= 10I;
  #L1b1dc6.  if v0 >= v1 then goto L1b1dde;
  #L1b1dca.  call temp:= `readRawByte`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1dd0.  v1:= temp;
  #L1b1dd2.  if v1 < 0 then goto L1b1dd8;
  #L1b1dd6.  return @kind void;
  #L1b1dd8.  v0:= v0 + 1;
  #L1b1ddc.  goto L1b1dc2;
  #L1b1dde.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1de4.  v0:= temp @kind object;
  #L1b1de6.  throw v0;
}
procedure `java.nio.ByteBuffer` `k`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.k:(II)Ljava/nio/ByteBuffer;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1b14f8.  v0:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b14fc.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1b1502.  v0:= temp;
  #L1b1504.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1508.  call temp:= `limit`(v1) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1b150e.  v1:= temp;
  #L1b1510.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1514.  call temp:= `position`(v2, v4) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b151a.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b151e.  call temp:= `limit`(v4, v5) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b1524.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1528.  call temp:= `slice`(v4) @signature `Ljava/nio/ByteBuffer;.slice:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1b152e.  v4:= temp @kind object;
  #L1b1530.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1534.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b153a.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b153e.  call temp:= `limit`(v5, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b1544.  return v4 @kind object;
  #L1b1546.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1b1548.  goto L1b1554;
  #L1b154a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1550.  v4:= temp @kind object;
  #L1b1552.  throw v4;
  #L1b1554.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1558.  call temp:= `position`(v5, v0) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b155e.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1562.  call temp:= `limit`(v5, v1) @signature `Ljava/nio/ByteBuffer;.limit:(I)Ljava/nio/Buffer;` @kind virtual;
  #L1b1568.  throw v4;
  catch `java.lang.IllegalArgumentException` @[L1b1510..L1b1530] goto L1b154a;
  catch `java.lang.Throwable` @[L1b1510..L1b1530] goto L1b1546;
  catch `java.lang.Throwable` @[L1b154a..L1b1554] goto L1b1546;
}
procedure `void` `l`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b1df8.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.g` @type ^`java.util.Iterator` @kind object;
  #L1b1dfc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1b1e02.  v0:= temp @kind object;
  #L1b1e04.  v0:= (`java.nio.ByteBuffer`) v0 @kind object;
  #L1b1e08.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` := v0 @kind object;
  #L1b1e0c.  v1:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b1e10.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1e14.  v4:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b1e18.  v2:= v2 - v4 @kind long;
  #L1b1e1a.  v3:= (`int`) v2 @kind l2i;
  #L1b1e1c.  v1:= v1 + v3 @kind int;
  #L1b1e1e.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int` := v1;
  #L1b1e22.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1b1e28.  v0:= temp;
  #L1b1e2a.  v0:= (`long`) v0 @kind i2l;
  #L1b1e2c.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v0 @kind wide;
  #L1b1e30.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` := v0 @kind wide;
  #L1b1e34.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1e38.  call temp:= `limit`(v0) @signature `Ljava/nio/ByteBuffer;.limit:()I` @kind virtual;
  #L1b1e3e.  v0:= temp;
  #L1b1e40.  v0:= (`long`) v0 @kind i2l;
  #L1b1e42.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` := v0 @kind wide;
  #L1b1e46.  v0:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b1e4a.  call temp:= `i`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.i:(Ljava/nio/ByteBuffer;)J` @kind static;
  #L1b1e50.  v0:= temp @kind wide;
  #L1b1e52.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.s` @type ^`long` := v0 @kind wide;
  #L1b1e56.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1e5a.  v2:= v2 + v0 @kind long;
  #L1b1e5c.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v2 @kind wide;
  #L1b1e60.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b1e64.  v2:= v2 + v0 @kind long;
  #L1b1e66.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` := v2 @kind wide;
  #L1b1e6a.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b1e6e.  v2:= v2 + v0 @kind long;
  #L1b1e70.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` := v2 @kind wide;
  #L1b1e74.  return @kind void;
}
procedure `void` `checkLastTagWas`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1a6c.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @type ^`int`;
  #L1b1a70.  if v0 != v2 then goto L1b1a76;
  #L1b1a74.  return @kind void;
  #L1b1a76.  call temp:= `a`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.a:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1a7c.  v2:= temp @kind object;
  #L1b1a7e.  throw v2;
}
procedure `void` `enableAliasing`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.enableAliasing:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L1b1a90.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.j` @type ^`boolean` := v1 @kind boolean;
  #L1b1a94.  return @kind void;
}
procedure `long` `g`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v6 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.g:()J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b193c.  v0:= 0L;
  #L1b1940.  v2:= 0I;
  #L1b1942.  v3:= 64I;
  #L1b1946.  if v2 >= v3 then goto L1b196c;
  #L1b194a.  call temp:= `readRawByte`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1950.  v3:= temp;
  #L1b1952.  v4:= v3 ^& 127;
  #L1b1956.  v4:= (`long`) v4 @kind i2l;
  #L1b1958.  v4:= v4 ^< v2 @kind long;
  #L1b195a.  v0:= v0 ^| v4 @kind long;
  #L1b195c.  v3:= v3 ^& 128;
  #L1b1960.  if v3 != 0 then goto L1b1966;
  #L1b1964.  return v0 @kind wide;
  #L1b1966.  v2:= v2 + 7;
  #L1b196a.  goto L1b1942;
  #L1b196c.  call temp:= `e`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.e:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1972.  v0:= temp @kind object;
  #L1b1974.  throw v0;
}
procedure `int` `getBytesUntilLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.getBytesUntilLimit:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0ef8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int`;
  #L1b0efc.  v1:= 2147483647I;
  #L1b0f02.  if v0 != v1 then goto L1b0f0a;
  #L1b0f06.  v0:= -1I;
  #L1b0f08.  return v0;
  #L1b0f0a.  call temp:= `getTotalBytesRead`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.getTotalBytesRead:()I` @kind virtual;
  #L1b0f10.  v1:= temp;
  #L1b0f12.  v0:= v0 - v1 @kind int;
  #L1b0f14.  return v0;
}
procedure `int` `getLastTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.getLastTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f28.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @type ^`int`;
  #L1b0f2c.  return v0;
}
procedure `int` `getTotalBytesRead`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.getTotalBytesRead:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0f40.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b0f44.  v1:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.p` @type ^`int`;
  #L1b0f48.  v0:= v0 - v1 @kind int;
  #L1b0f4a.  v0:= (`long`) v0 @kind i2l;
  #L1b0f4c.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0f50.  v0:= v0 + v2 @kind long;
  #L1b0f52.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b0f56.  v0:= v0 - v2 @kind long;
  #L1b0f58.  v1:= (`int`) v0 @kind l2i;
  #L1b0f5a.  return v1;
}
procedure `boolean` `isAtEnd`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.isAtEnd:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b0a60.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b0a64.  v0:= (`long`) v0 @kind i2l;
  #L1b0a66.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0a6a.  v0:= v0 + v2 @kind long;
  #L1b0a6c.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b0a70.  v0:= v0 - v2 @kind long;
  #L1b0a72.  v2:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int`;
  #L1b0a76.  v2:= (`long`) v2 @kind i2l;
  #L1b0a78.  v4:= lcmp(v0, v2);
  #L1b0a7c.  if v4 != 0 then goto L1b0a84;
  #L1b0a80.  v0:= 1I;
  #L1b0a82.  goto L1b0a86;
  #L1b0a84.  v0:= 0I;
  #L1b0a86.  return v0;
}
procedure `void` `popLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v0 @kind this, `int` v1 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.popLimit:(I)V` @AccessFlag PUBLIC {
    temp;

  #L1b1adc.  v0.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int` := v1;
  #L1b1ae0.  call `h`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.h:()V` @kind direct;
  #L1b1ae6.  return @kind void;
}
procedure `int` `pushLimit`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this, `int` v2 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.pushLimit:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f6c.  if v2 < 0 then goto L1b0f98;
  #L1b0f70.  call temp:= `getTotalBytesRead`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.getTotalBytesRead:()I` @kind virtual;
  #L1b0f76.  v0:= temp;
  #L1b0f78.  v2:= v2 + v0 @kind int;
  #L1b0f7a.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int`;
  #L1b0f7e.  if v2 > v0 then goto L1b0f8e;
  #L1b0f82.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.m` @type ^`int` := v2;
  #L1b0f86.  call `h`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.h:()V` @kind direct;
  #L1b0f8c.  return v0;
  #L1b0f8e.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0f94.  v2:= temp @kind object;
  #L1b0f96.  throw v2;
  #L1b0f98.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0f9e.  v2:= temp @kind object;
  #L1b0fa0.  throw v2;
}
procedure `boolean` `readBool`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readBool:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b0a98.  call temp:= `readRawVarint64`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint64:()J` @kind virtual;
  #L1b0a9e.  v0:= temp @kind wide;
  #L1b0aa0.  v2:= 0L;
  #L1b0aa4.  v4:= lcmp(v0, v2);
  #L1b0aa8.  if v4 == 0 then goto L1b0ab0;
  #L1b0aac.  v0:= 1I;
  #L1b0aae.  goto L1b0ab2;
  #L1b0ab0.  v0:= 0I;
  #L1b0ab2.  return v0;
}
procedure `byte`[] `readByteArray`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0c68.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0c6e.  v0:= temp;
  #L1b0c70.  call temp:= `readRawBytes`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawBytes:(I)[B` @kind virtual;
  #L1b0c76.  v0:= temp @kind object;
  #L1b0c78.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `readByteBuffer`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v10 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1b1424.  call temp:= `readRawVarint32`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b142a.  v0:= temp;
  #L1b142c.  if v0 <= 0 then goto L1b14a0;
  #L1b1430.  v8:= (`long`) v0 @kind i2l;
  #L1b1432.  call temp:= `d`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b1438.  v1:= temp @kind wide;
  #L1b143a.  v3:= lcmp(v8, v1);
  #L1b143e.  if v3 > 0 then goto L1b14a0;
  #L1b1442.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.i` @type ^`boolean` @kind boolean;
  #L1b1446.  if v1 != 0 then goto L1b1476;
  #L1b144a.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.j` @type ^`boolean` @kind boolean;
  #L1b144e.  if v1 == 0 then goto L1b1476;
  #L1b1452.  v0:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1456.  v0:= v0 + v8 @kind long;
  #L1b1458.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v0 @kind wide;
  #L1b145c.  v2:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.s` @type ^`long` @kind wide;
  #L1b1460.  v4:= v0 - v2 @kind long;
  #L1b1464.  v4:= v4 - v8 @kind long;
  #L1b1466.  v5:= (`int`) v4 @kind l2i;
  #L1b1468.  v0:= v0 - v2 @kind long;
  #L1b146a.  v1:= (`int`) v0 @kind l2i;
  #L1b146c.  call temp:= `k`(v10, v5, v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.k:(II)Ljava/nio/ByteBuffer;` @kind direct;
  #L1b1472.  v0:= temp @kind object;
  #L1b1474.  return v0 @kind object;
  #L1b1476.  v0:= new `byte`[v0];
  #L1b147a.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b147e.  v4:= 0L;
  #L1b1482.  v3:= v0 @kind object;
  #L1b1484.  v6:= v8 @kind wide;
  #L1b1486.  call `n`(v1, v3, v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.n:(J[BJJ)V` @kind static;
  #L1b148c.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1490.  v1:= v1 + v8 @kind long;
  #L1b1492.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v1 @kind wide;
  #L1b1496.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1b149c.  v0:= temp @kind object;
  #L1b149e.  return v0 @kind object;
  #L1b14a0.  if v0 <= 0 then goto L1b14c6;
  #L1b14a4.  call temp:= `i`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b14aa.  v1:= temp;
  #L1b14ac.  if v0 > v1 then goto L1b14c6;
  #L1b14b0.  v1:= new `byte`[v0];
  #L1b14b4.  v2:= 0I;
  #L1b14b6.  call `f`(v10, v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @kind direct;
  #L1b14bc.  call temp:= `wrap`(v1) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1b14c2.  v0:= temp @kind object;
  #L1b14c4.  return v0 @kind object;
  #L1b14c6.  if v0 != 0 then goto L1b14d0;
  #L1b14ca.  v0:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_BUFFER` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b14ce.  return v0 @kind object;
  #L1b14d0.  if v0 >= 0 then goto L1b14de;
  #L1b14d4.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b14da.  v0:= temp @kind object;
  #L1b14dc.  throw v0;
  #L1b14de.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b14e4.  v0:= temp @kind object;
  #L1b14e6.  throw v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.ByteString` `readBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v10 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1b0d14.  call temp:= `readRawVarint32`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0d1a.  v0:= temp;
  #L1b0d1c.  if v0 <= 0 then goto L1b0d94;
  #L1b0d20.  v8:= (`long`) v0 @kind i2l;
  #L1b0d22.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b0d26.  v3:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0d2a.  v1:= v1 - v3 @kind long;
  #L1b0d2c.  v5:= lcmp(v8, v1);
  #L1b0d30.  if v5 > 0 then goto L1b0d94;
  #L1b0d34.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.i` @type ^`boolean` @kind boolean;
  #L1b0d38.  if v1 == 0 then goto L1b0d6a;
  #L1b0d3c.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.j` @type ^`boolean` @kind boolean;
  #L1b0d40.  if v1 == 0 then goto L1b0d6a;
  #L1b0d44.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.s` @type ^`long` @kind wide;
  #L1b0d48.  v3:= v3 - v1 @kind long;
  #L1b0d4a.  v1:= (`int`) v3 @kind l2i;
  #L1b0d4c.  v0:= v0 + v1 @kind int;
  #L1b0d4e.  call temp:= `k`(v10, v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.k:(II)Ljava/nio/ByteBuffer;` @kind direct;
  #L1b0d54.  v0:= temp @kind object;
  #L1b0d56.  call temp:= `j`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.j:(Ljava/nio/ByteBuffer;)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b0d5c.  v0:= temp @kind object;
  #L1b0d5e.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0d62.  v1:= v1 + v8 @kind long;
  #L1b0d64.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v1 @kind wide;
  #L1b0d68.  return v0 @kind object;
  #L1b0d6a.  v0:= new `byte`[v0];
  #L1b0d6e.  v5:= 0L;
  #L1b0d72.  v1:= v3 @kind wide;
  #L1b0d74.  v3:= v0 @kind object;
  #L1b0d76.  v4:= v5 @kind wide;
  #L1b0d78.  v6:= v8 @kind wide;
  #L1b0d7a.  call `n`(v1, v3, v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.n:(J[BJJ)V` @kind static;
  #L1b0d80.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0d84.  v1:= v1 + v8 @kind long;
  #L1b0d86.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v1 @kind wide;
  #L1b0d8a.  call temp:= `k`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b0d90.  v0:= temp @kind object;
  #L1b0d92.  return v0 @kind object;
  #L1b0d94.  if v0 <= 0 then goto L1b0dba;
  #L1b0d98.  call temp:= `i`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b0d9e.  v1:= temp;
  #L1b0da0.  if v0 > v1 then goto L1b0dba;
  #L1b0da4.  v1:= new `byte`[v0];
  #L1b0da8.  v2:= 0I;
  #L1b0daa.  call `f`(v10, v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @kind direct;
  #L1b0db0.  call temp:= `k`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/ByteString;.k:([B)Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind static;
  #L1b0db6.  v0:= temp @kind object;
  #L1b0db8.  return v0 @kind object;
  #L1b0dba.  if v0 != 0 then goto L1b0dc4;
  #L1b0dbe.  v0:= `@@com.google.crypto.tink.shaded.protobuf.ByteString.EMPTY` @type ^`com.google.crypto.tink.shaded.protobuf.ByteString` @kind object;
  #L1b0dc2.  return v0 @kind object;
  #L1b0dc4.  if v0 >= 0 then goto L1b0dd2;
  #L1b0dc8.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0dce.  v0:= temp @kind object;
  #L1b0dd0.  throw v0;
  #L1b0dd2.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0dd8.  v0:= temp @kind object;
  #L1b0dda.  throw v0;
}
procedure `double` `readDouble`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0eb0.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian64:()J` @kind virtual;
  #L1b0eb6.  v0:= temp @kind wide;
  #L1b0eb8.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L1b0ebe.  v0:= temp @kind wide;
  #L1b0ec0.  return v0 @kind wide;
}
procedure `int` `readEnum`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readEnum:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0fb4.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0fba.  v0:= temp;
  #L1b0fbc.  return v0;
}
procedure `int` `readFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0fd0.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian32:()I` @kind virtual;
  #L1b0fd6.  v0:= temp;
  #L1b0fd8.  return v0;
}
procedure `long` `readFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b15b0.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian64:()J` @kind virtual;
  #L1b15b6.  v0:= temp @kind wide;
  #L1b15b8.  return v0 @kind wide;
}
procedure `float` `readFloat`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0ed4.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian32:()I` @kind virtual;
  #L1b0eda.  v0:= temp;
  #L1b0edc.  call temp:= `intBitsToFloat`(v0) @signature `Ljava/lang/Float;.intBitsToFloat:(I)F` @kind static;
  #L1b0ee2.  v0:= temp;
  #L1b0ee4.  return v0;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0dec.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0df0.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b0df4.  if v0 >= v1 then goto L1b0e2a;
  #L1b0df8.  v0:= v0 + 1;
  #L1b0dfc.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1b0e00.  call temp:= `parsePartialFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1b0e06.  v4:= temp @kind object;
  #L1b0e08.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1b0e0c.  v5:= 4I;
  #L1b0e0e.  call temp:= `a`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b0e14.  v3:= temp;
  #L1b0e16.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0e1c.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0e20.  v3:= v3 + -1;
  #L1b0e24.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1b0e28.  return v4 @kind object;
  #L1b0e2a.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0e30.  v3:= temp @kind object;
  #L1b0e32.  throw v3;
}
procedure `void` `readGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this, `int` v3 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b1af8.  v0:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b1afc.  v1:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b1b00.  if v0 >= v1 then goto L1b1b30;
  #L1b1b04.  v0:= v0 + 1;
  #L1b1b08.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v0;
  #L1b1b0c.  call temp:= `mergeFrom`(v4, v2, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b1b12.  v4:= 4I;
  #L1b1b14.  call temp:= `a`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b1b1a.  v3:= temp;
  #L1b1b1c.  call `checkLastTagWas`(v2, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b1b22.  v3:= v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b1b26.  v3:= v3 + -1;
  #L1b1b2a.  v2.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v3;
  #L1b1b2e.  return @kind void;
  #L1b1b30.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1b36.  v3:= temp @kind object;
  #L1b1b38.  throw v3;
}
procedure `int` `readInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0fec.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0ff2.  v0:= temp;
  #L1b0ff4.  return v0;
}
procedure `long` `readInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b15cc.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint64:()J` @kind virtual;
  #L1b15d2.  v0:= temp @kind wide;
  #L1b15d4.  return v0 @kind wide;
}
procedure `com.google.crypto.tink.shaded.protobuf.MessageLite` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.Parser` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/Parser;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b0e44.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0e4a.  v0:= temp;
  #L1b0e4c.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0e50.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b0e54.  if v1 >= v2 then goto L1b0e94;
  #L1b0e58.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.pushLimit:(I)I` @kind virtual;
  #L1b0e5e.  v0:= temp;
  #L1b0e60.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0e64.  v1:= v1 + 1;
  #L1b0e68.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1b0e6c.  call temp:= `parsePartialFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/Parser;.parsePartialFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Ljava/lang/Object;` @kind interface;
  #L1b0e72.  v4:= temp @kind object;
  #L1b0e74.  v4:= (`com.google.crypto.tink.shaded.protobuf.MessageLite`) v4 @kind object;
  #L1b0e78.  v5:= 0I;
  #L1b0e7a.  call `checkLastTagWas`(v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0e80.  v5:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b0e84.  v5:= v5 + -1;
  #L1b0e88.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v5;
  #L1b0e8c.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.popLimit:(I)V` @kind virtual;
  #L1b0e92.  return v4 @kind object;
  #L1b0e94.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0e9a.  v4:= temp @kind object;
  #L1b0e9c.  throw v4;
}
procedure `void` `readMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v3 @kind this, `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v4 @kind object, `com.google.crypto.tink.shaded.protobuf.ExtensionRegistryLite` v5 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readMessage:(Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b1b4c.  call temp:= `readRawVarint32`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b1b52.  v0:= temp;
  #L1b1b54.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b1b58.  v2:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.b` @type ^`int`;
  #L1b1b5c.  if v1 >= v2 then goto L1b1b96;
  #L1b1b60.  call temp:= `pushLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.pushLimit:(I)I` @kind virtual;
  #L1b1b66.  v0:= temp;
  #L1b1b68.  v1:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b1b6c.  v1:= v1 + 1;
  #L1b1b70.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v1;
  #L1b1b74.  call temp:= `mergeFrom`(v4, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;.mergeFrom:(Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)Lcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;` @kind interface;
  #L1b1b7a.  v4:= 0I;
  #L1b1b7c.  call `checkLastTagWas`(v3, v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b1b82.  v4:= v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int`;
  #L1b1b86.  v4:= v4 + -1;
  #L1b1b8a.  v3.`com.google.crypto.tink.shaded.protobuf.CodedInputStream.a` @type ^`int` := v4;
  #L1b1b8e.  call `popLimit`(v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.popLimit:(I)V` @kind virtual;
  #L1b1b94.  return @kind void;
  #L1b1b96.  call temp:= `h`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.h:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1b9c.  v4:= temp @kind object;
  #L1b1b9e.  throw v4;
}
procedure `byte` `readRawByte`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b0c24.  call temp:= `d`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b0c2a.  v0:= temp @kind wide;
  #L1b0c2c.  v2:= 0L;
  #L1b0c30.  v4:= lcmp(v0, v2);
  #L1b0c34.  if v4 != 0 then goto L1b0c3e;
  #L1b0c38.  call `e`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.e:()V` @kind direct;
  #L1b0c3e.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0c42.  v2:= 1L;
  #L1b0c46.  v2:= v2 + v0 @kind long;
  #L1b0c48.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v2 @kind wide;
  #L1b0c4c.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b0c52.  v0:= temp;
  #L1b0c54.  return v0;
}
procedure `byte`[] `readRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v9 @kind this, `int` v10 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b0c8c.  if v10 < 0 then goto L1b0cc4;
  #L1b0c90.  v7:= (`long`) v10 @kind i2l;
  #L1b0c92.  call temp:= `d`(v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b0c98.  v0:= temp @kind wide;
  #L1b0c9a.  v2:= lcmp(v7, v0);
  #L1b0c9e.  if v2 > 0 then goto L1b0cc4;
  #L1b0ca2.  v10:= new `byte`[v10];
  #L1b0ca6.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0caa.  v3:= 0L;
  #L1b0cae.  v2:= v10 @kind object;
  #L1b0cb0.  v5:= v7 @kind wide;
  #L1b0cb2.  call `n`(v0, v2, v3, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.n:(J[BJJ)V` @kind static;
  #L1b0cb8.  v0:= v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b0cbc.  v0:= v0 + v7 @kind long;
  #L1b0cbe.  v9.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v0 @kind wide;
  #L1b0cc2.  return v10 @kind object;
  #L1b0cc4.  if v10 < 0 then goto L1b0ce2;
  #L1b0cc8.  call temp:= `i`(v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b0cce.  v0:= temp;
  #L1b0cd0.  if v10 > v0 then goto L1b0ce2;
  #L1b0cd4.  v0:= new `byte`[v10];
  #L1b0cd8.  v1:= 0I;
  #L1b0cda.  call `f`(v9, v0, v1, v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @kind direct;
  #L1b0ce0.  return v0 @kind object;
  #L1b0ce2.  if v10 > 0 then goto L1b0cfa;
  #L1b0ce6.  if v10 != 0 then goto L1b0cf0;
  #L1b0cea.  v10:= `@@com.google.crypto.tink.shaded.protobuf.Internal.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L1b0cee.  return v10 @kind object;
  #L1b0cf0.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0cf6.  v10:= temp @kind object;
  #L1b0cf8.  throw v10;
  #L1b0cfa.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b0d00.  v10:= temp @kind object;
  #L1b0d02.  throw v10;
}
procedure `int` `readRawLittleEndian32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v5 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b1008.  call temp:= `d`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b100e.  v0:= temp @kind wide;
  #L1b1010.  v2:= 4L;
  #L1b1014.  v4:= lcmp(v0, v2);
  #L1b1018.  if v4 < 0 then goto L1b107c;
  #L1b101c.  v0:= v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1020.  v2:= v2 + v0 @kind long;
  #L1b1022.  v5.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v2 @kind wide;
  #L1b1026.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b102c.  v2:= temp;
  #L1b102e.  v2:= v2 ^& 255;
  #L1b1032.  v3:= 1L;
  #L1b1036.  v3:= v3 + v0 @kind long;
  #L1b1038.  call temp:= `v`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b103e.  v3:= temp;
  #L1b1040.  v3:= v3 ^& 255;
  #L1b1044.  v3:= v3 ^< 8;
  #L1b1048.  v2:= v2 ^| v3 @kind int;
  #L1b104a.  v3:= 2L;
  #L1b104e.  v3:= v3 + v0 @kind long;
  #L1b1050.  call temp:= `v`(v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1056.  v3:= temp;
  #L1b1058.  v3:= v3 ^& 255;
  #L1b105c.  v3:= v3 ^< 16;
  #L1b1060.  v2:= v2 ^| v3 @kind int;
  #L1b1062.  v3:= 3L;
  #L1b1066.  v0:= v0 + v3 @kind long;
  #L1b1068.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b106e.  v0:= temp;
  #L1b1070.  v0:= v0 ^& 255;
  #L1b1074.  v0:= v0 ^< 24;
  #L1b1078.  v0:= v0 ^| v2 @kind int;
  #L1b107a.  return v0;
  #L1b107c.  call temp:= `readRawByte`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1082.  v0:= temp;
  #L1b1084.  v0:= v0 ^& 255;
  #L1b1088.  call temp:= `readRawByte`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b108e.  v1:= temp;
  #L1b1090.  v1:= v1 ^& 255;
  #L1b1094.  v1:= v1 ^< 8;
  #L1b1098.  v0:= v0 ^| v1 @kind int;
  #L1b109a.  call temp:= `readRawByte`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b10a0.  v1:= temp;
  #L1b10a2.  v1:= v1 ^& 255;
  #L1b10a6.  v1:= v1 ^< 16;
  #L1b10aa.  v0:= v0 ^| v1 @kind int;
  #L1b10ac.  call temp:= `readRawByte`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b10b2.  v1:= temp;
  #L1b10b4.  v1:= v1 ^& 255;
  #L1b10b8.  v1:= v1 ^< 24;
  #L1b10bc.  v0:= v0 ^| v1 @kind int;
  #L1b10be.  return v0;
}
procedure `long` `readRawLittleEndian64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v15 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1b15e8.  call temp:= `d`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b15ee.  v0:= temp @kind wide;
  #L1b15f0.  v2:= 56I;
  #L1b15f4.  v3:= 48I;
  #L1b15f8.  v4:= 40I;
  #L1b15fc.  v5:= 32I;
  #L1b1600.  v6:= 24I;
  #L1b1604.  v7:= 16I;
  #L1b1608.  v8:= 8I;
  #L1b160c.  v9:= 8L;
  #L1b1610.  v11:= 255L;
  #L1b1614.  v13:= lcmp(v0, v9);
  #L1b1618.  if v13 < 0 then goto L1b16da;
  #L1b161c.  v0:= v15.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1620.  v9:= v9 + v0 @kind long;
  #L1b1622.  v15.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v9 @kind wide;
  #L1b1626.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b162c.  v9:= temp;
  #L1b162e.  v9:= (`long`) v9 @kind i2l;
  #L1b1630.  v9:= v9 ^& v11 @kind long;
  #L1b1632.  v13:= 1L;
  #L1b1636.  v13:= v13 + v0 @kind long;
  #L1b1638.  call temp:= `v`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b163e.  v13:= temp;
  #L1b1640.  v13:= (`long`) v13 @kind i2l;
  #L1b1642.  v13:= v13 ^& v11 @kind long;
  #L1b1644.  v13:= v13 ^< v8 @kind long;
  #L1b1646.  v8:= v9 ^| v13 @kind long;
  #L1b164a.  v13:= 2L;
  #L1b164e.  v13:= v13 + v0 @kind long;
  #L1b1650.  call temp:= `v`(v13) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1656.  v10:= temp;
  #L1b1658.  v13:= (`long`) v10 @kind i2l;
  #L1b165a.  v13:= v13 ^& v11 @kind long;
  #L1b165c.  v13:= v13 ^< v7 @kind long;
  #L1b165e.  v7:= v8 ^| v13 @kind long;
  #L1b1662.  v9:= 3L;
  #L1b1666.  v9:= v9 + v0 @kind long;
  #L1b1668.  call temp:= `v`(v9) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b166e.  v9:= temp;
  #L1b1670.  v9:= (`long`) v9 @kind i2l;
  #L1b1672.  v9:= v9 ^& v11 @kind long;
  #L1b1674.  v9:= v9 ^< v6 @kind long;
  #L1b1676.  v6:= v7 ^| v9 @kind long;
  #L1b167a.  v8:= 4L;
  #L1b167e.  v8:= v8 + v0 @kind long;
  #L1b1680.  call temp:= `v`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1686.  v8:= temp;
  #L1b1688.  v8:= (`long`) v8 @kind i2l;
  #L1b168a.  v8:= v8 ^& v11 @kind long;
  #L1b168c.  v8:= v8 ^< v5 @kind long;
  #L1b168e.  v5:= v6 ^| v8 @kind long;
  #L1b1692.  v7:= 5L;
  #L1b1696.  v7:= v7 + v0 @kind long;
  #L1b1698.  call temp:= `v`(v7) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b169e.  v7:= temp;
  #L1b16a0.  v7:= (`long`) v7 @kind i2l;
  #L1b16a2.  v7:= v7 ^& v11 @kind long;
  #L1b16a4.  v7:= v7 ^< v4 @kind long;
  #L1b16a6.  v4:= v5 ^| v7 @kind long;
  #L1b16aa.  v6:= 6L;
  #L1b16ae.  v6:= v6 + v0 @kind long;
  #L1b16b0.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b16b6.  v6:= temp;
  #L1b16b8.  v6:= (`long`) v6 @kind i2l;
  #L1b16ba.  v6:= v6 ^& v11 @kind long;
  #L1b16bc.  v6:= v6 ^< v3 @kind long;
  #L1b16be.  v3:= v4 ^| v6 @kind long;
  #L1b16c2.  v5:= 7L;
  #L1b16c6.  v0:= v0 + v5 @kind long;
  #L1b16c8.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b16ce.  v0:= temp;
  #L1b16d0.  v0:= (`long`) v0 @kind i2l;
  #L1b16d2.  v0:= v0 ^& v11 @kind long;
  #L1b16d4.  v0:= v0 ^< v2 @kind long;
  #L1b16d6.  v0:= v0 ^| v3 @kind long;
  #L1b16d8.  return v0 @kind wide;
  #L1b16da.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b16e0.  v0:= temp;
  #L1b16e2.  v0:= (`long`) v0 @kind i2l;
  #L1b16e4.  v0:= v0 ^& v11 @kind long;
  #L1b16e6.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b16ec.  v9:= temp;
  #L1b16ee.  v9:= (`long`) v9 @kind i2l;
  #L1b16f0.  v9:= v9 ^& v11 @kind long;
  #L1b16f2.  v8:= v9 ^< v8 @kind long;
  #L1b16f6.  v0:= v0 ^| v8 @kind long;
  #L1b16f8.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b16fe.  v8:= temp;
  #L1b1700.  v8:= (`long`) v8 @kind i2l;
  #L1b1702.  v8:= v8 ^& v11 @kind long;
  #L1b1704.  v7:= v8 ^< v7 @kind long;
  #L1b1708.  v0:= v0 ^| v7 @kind long;
  #L1b170a.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1710.  v7:= temp;
  #L1b1712.  v7:= (`long`) v7 @kind i2l;
  #L1b1714.  v7:= v7 ^& v11 @kind long;
  #L1b1716.  v6:= v7 ^< v6 @kind long;
  #L1b171a.  v0:= v0 ^| v6 @kind long;
  #L1b171c.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1722.  v6:= temp;
  #L1b1724.  v6:= (`long`) v6 @kind i2l;
  #L1b1726.  v6:= v6 ^& v11 @kind long;
  #L1b1728.  v5:= v6 ^< v5 @kind long;
  #L1b172c.  v0:= v0 ^| v5 @kind long;
  #L1b172e.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1734.  v5:= temp;
  #L1b1736.  v5:= (`long`) v5 @kind i2l;
  #L1b1738.  v5:= v5 ^& v11 @kind long;
  #L1b173a.  v4:= v5 ^< v4 @kind long;
  #L1b173e.  v0:= v0 ^| v4 @kind long;
  #L1b1740.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1746.  v4:= temp;
  #L1b1748.  v4:= (`long`) v4 @kind i2l;
  #L1b174a.  v4:= v4 ^& v11 @kind long;
  #L1b174c.  v3:= v4 ^< v3 @kind long;
  #L1b1750.  v0:= v0 ^| v3 @kind long;
  #L1b1752.  call temp:= `readRawByte`(v15) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawByte:()B` @kind virtual;
  #L1b1758.  v3:= temp;
  #L1b175a.  v3:= (`long`) v3 @kind i2l;
  #L1b175c.  v3:= v3 ^& v11 @kind long;
  #L1b175e.  v2:= v3 ^< v2 @kind long;
  #L1b1762.  v0:= v0 ^| v2 @kind long;
  #L1b1764.  return v0 @kind wide;
}
procedure `int` `readRawVarint32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v10 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1b10d0.  v0:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b10d4.  v2:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b10d8.  v4:= lcmp(v2, v0);
  #L1b10dc.  if v4 != 0 then goto L1b10e4;
  #L1b10e0.  goto L1b11e4;
  #L1b10e4.  v2:= 1L;
  #L1b10e8.  v4:= v0 + v2 @kind long;
  #L1b10ec.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b10f2.  v0:= temp;
  #L1b10f4.  if v0 < 0 then goto L1b1104;
  #L1b10f8.  v4:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b10fc.  v4:= v4 + v2 @kind long;
  #L1b10fe.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v4 @kind wide;
  #L1b1102.  return v0;
  #L1b1104.  v6:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b1108.  v8:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b110c.  v6:= v6 - v8 @kind long;
  #L1b110e.  v8:= 10L;
  #L1b1112.  v1:= lcmp(v6, v8);
  #L1b1116.  if v1 >= 0 then goto L1b111c;
  #L1b111a.  goto L1b11e4;
  #L1b111c.  v6:= v4 + v2 @kind long;
  #L1b1120.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1126.  v1:= temp;
  #L1b1128.  v1:= v1 ^< 7;
  #L1b112c.  v0:= v0 ^~ v1 @kind int;
  #L1b112e.  if v0 >= 0 then goto L1b1138;
  #L1b1132.  v0:= v0 ^~ -128;
  #L1b1136.  goto L1b11f0;
  #L1b1138.  v4:= v6 + v2 @kind long;
  #L1b113c.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1142.  v1:= temp;
  #L1b1144.  v1:= v1 ^< 14;
  #L1b1148.  v0:= v0 ^~ v1 @kind int;
  #L1b114a.  if v0 < 0 then goto L1b1156;
  #L1b114e.  v0:= v0 ^~ 16256;
  #L1b1152.  v6:= v4 @kind wide;
  #L1b1154.  goto L1b11f0;
  #L1b1156.  v6:= v4 + v2 @kind long;
  #L1b115a.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1160.  v1:= temp;
  #L1b1162.  v1:= v1 ^< 21;
  #L1b1166.  v0:= v0 ^~ v1 @kind int;
  #L1b1168.  if v0 >= 0 then goto L1b1176;
  #L1b116c.  v1:= -2080896I;
  #L1b1172.  v0:= v0 ^~ v1 @kind int;
  #L1b1174.  goto L1b11f0;
  #L1b1176.  v4:= v6 + v2 @kind long;
  #L1b117a.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1180.  v1:= temp;
  #L1b1182.  v6:= v1 ^< 28;
  #L1b1186.  v0:= v0 ^~ v6 @kind int;
  #L1b1188.  v6:= 266354560I;
  #L1b118e.  v0:= v0 ^~ v6 @kind int;
  #L1b1190.  if v1 >= 0 then goto L1b1152;
  #L1b1194.  v6:= v4 + v2 @kind long;
  #L1b1198.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b119e.  v1:= temp;
  #L1b11a0.  if v1 >= 0 then goto L1b11f0;
  #L1b11a4.  v4:= v6 + v2 @kind long;
  #L1b11a8.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b11ae.  v1:= temp;
  #L1b11b0.  if v1 >= 0 then goto L1b1152;
  #L1b11b4.  v6:= v4 + v2 @kind long;
  #L1b11b8.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b11be.  v1:= temp;
  #L1b11c0.  if v1 >= 0 then goto L1b11f0;
  #L1b11c4.  v4:= v6 + v2 @kind long;
  #L1b11c8.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b11ce.  v1:= temp;
  #L1b11d0.  if v1 >= 0 then goto L1b1152;
  #L1b11d4.  v6:= v4 + v2 @kind long;
  #L1b11d8.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b11de.  v1:= temp;
  #L1b11e0.  if v1 >= 0 then goto L1b11f0;
  #L1b11e4.  call temp:= `g`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.g:()J` @kind virtual;
  #L1b11ea.  v0:= temp @kind wide;
  #L1b11ec.  v1:= (`int`) v0 @kind l2i;
  #L1b11ee.  return v1;
  #L1b11f0.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v6 @kind wide;
  #L1b11f4.  return v0;
}
procedure `long` `readRawVarint64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v11 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1b1778.  v0:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b177c.  v2:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b1780.  v4:= lcmp(v2, v0);
  #L1b1784.  if v4 != 0 then goto L1b178c;
  #L1b1788.  goto L1b1918;
  #L1b178c.  v2:= 1L;
  #L1b1790.  v4:= v0 + v2 @kind long;
  #L1b1794.  call temp:= `v`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b179a.  v0:= temp;
  #L1b179c.  if v0 < 0 then goto L1b17ae;
  #L1b17a0.  v4:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b17a4.  v4:= v4 + v2 @kind long;
  #L1b17a6.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v4 @kind wide;
  #L1b17aa.  v0:= (`long`) v0 @kind i2l;
  #L1b17ac.  return v0 @kind wide;
  #L1b17ae.  v6:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b17b2.  v8:= v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b17b6.  v6:= v6 - v8 @kind long;
  #L1b17b8.  v8:= 10L;
  #L1b17bc.  v1:= lcmp(v6, v8);
  #L1b17c0.  if v1 >= 0 then goto L1b17c8;
  #L1b17c4.  goto L1b1918;
  #L1b17c8.  v6:= v4 + v2 @kind long;
  #L1b17cc.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b17d2.  v1:= temp;
  #L1b17d4.  v1:= v1 ^< 7;
  #L1b17d8.  v0:= v0 ^~ v1 @kind int;
  #L1b17da.  if v0 >= 0 then goto L1b17e8;
  #L1b17de.  v0:= v0 ^~ -128;
  #L1b17e2.  v0:= (`long`) v0 @kind i2l;
  #L1b17e4.  goto L1b1924;
  #L1b17e8.  v4:= v6 + v2 @kind long;
  #L1b17ec.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b17f2.  v1:= temp;
  #L1b17f4.  v1:= v1 ^< 14;
  #L1b17f8.  v0:= v0 ^~ v1 @kind int;
  #L1b17fa.  if v0 < 0 then goto L1b180a;
  #L1b17fe.  v0:= v0 ^~ 16256;
  #L1b1802.  v0:= (`long`) v0 @kind i2l;
  #L1b1804.  v6:= v4 @kind wide;
  #L1b1806.  goto L1b1924;
  #L1b180a.  v6:= v4 + v2 @kind long;
  #L1b180e.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1814.  v1:= temp;
  #L1b1816.  v1:= v1 ^< 21;
  #L1b181a.  v0:= v0 ^~ v1 @kind int;
  #L1b181c.  if v0 >= 0 then goto L1b182a;
  #L1b1820.  v1:= -2080896I;
  #L1b1826.  v0:= v0 ^~ v1 @kind int;
  #L1b1828.  goto L1b17e2;
  #L1b182a.  v0:= (`long`) v0 @kind i2l;
  #L1b182c.  v4:= v6 + v2 @kind long;
  #L1b1830.  call temp:= `v`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1836.  v6:= temp;
  #L1b1838.  v6:= (`long`) v6 @kind i2l;
  #L1b183a.  v8:= 28I;
  #L1b183e.  v6:= v6 ^< v8 @kind long;
  #L1b1840.  v0:= v0 ^~ v6 @kind long;
  #L1b1842.  v6:= 0L;
  #L1b1846.  v8:= lcmp(v0, v6);
  #L1b184a.  if v8 < 0 then goto L1b1858;
  #L1b184e.  v2:= 266354560L;
  #L1b1854.  v0:= v0 ^~ v2 @kind long;
  #L1b1856.  goto L1b1804;
  #L1b1858.  v8:= v4 + v2 @kind long;
  #L1b185c.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1862.  v4:= temp;
  #L1b1864.  v4:= (`long`) v4 @kind i2l;
  #L1b1866.  v10:= 35I;
  #L1b186a.  v4:= v4 ^< v10 @kind long;
  #L1b186c.  v0:= v0 ^~ v4 @kind long;
  #L1b186e.  v4:= lcmp(v0, v6);
  #L1b1872.  if v4 >= 0 then goto L1b1886;
  #L1b1876.  v2:= -34093383808L;
  #L1b1880.  v0:= v0 ^~ v2 @kind long;
  #L1b1882.  v6:= v8 @kind wide;
  #L1b1884.  goto L1b1924;
  #L1b1886.  v4:= v8 + v2 @kind long;
  #L1b188a.  call temp:= `v`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b1890.  v8:= temp;
  #L1b1892.  v8:= (`long`) v8 @kind i2l;
  #L1b1894.  v10:= 42I;
  #L1b1898.  v8:= v8 ^< v10 @kind long;
  #L1b189a.  v0:= v0 ^~ v8 @kind long;
  #L1b189c.  v8:= lcmp(v0, v6);
  #L1b18a0.  if v8 < 0 then goto L1b18b0;
  #L1b18a4.  v2:= 4363953127296L;
  #L1b18ae.  goto L1b1854;
  #L1b18b0.  v8:= v4 + v2 @kind long;
  #L1b18b4.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b18ba.  v4:= temp;
  #L1b18bc.  v4:= (`long`) v4 @kind i2l;
  #L1b18be.  v10:= 49I;
  #L1b18c2.  v4:= v4 ^< v10 @kind long;
  #L1b18c4.  v0:= v0 ^~ v4 @kind long;
  #L1b18c6.  v4:= lcmp(v0, v6);
  #L1b18ca.  if v4 >= 0 then goto L1b18da;
  #L1b18ce.  v2:= -558586000294016L;
  #L1b18d8.  goto L1b1880;
  #L1b18da.  v4:= v8 + v2 @kind long;
  #L1b18de.  call temp:= `v`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b18e4.  v8:= temp;
  #L1b18e6.  v8:= (`long`) v8 @kind i2l;
  #L1b18e8.  v10:= 56I;
  #L1b18ec.  v8:= v8 ^< v10 @kind long;
  #L1b18ee.  v0:= v0 ^~ v8 @kind long;
  #L1b18f0.  v8:= 71499008037633920L;
  #L1b18fa.  v0:= v0 ^~ v8 @kind long;
  #L1b18fc.  v8:= lcmp(v0, v6);
  #L1b1900.  if v8 >= 0 then goto L1b1804;
  #L1b1904.  v2:= v2 + v4 @kind long;
  #L1b1906.  call temp:= `v`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.v:(J)B` @kind static;
  #L1b190c.  v4:= temp;
  #L1b190e.  v4:= (`long`) v4 @kind i2l;
  #L1b1910.  v8:= lcmp(v4, v6);
  #L1b1914.  if v8 >= 0 then goto L1b1922;
  #L1b1918.  call temp:= `g`(v11) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.g:()J` @kind virtual;
  #L1b191e.  v0:= temp @kind wide;
  #L1b1920.  return v0 @kind wide;
  #L1b1922.  v6:= v2 @kind wide;
  #L1b1924.  v11.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v6 @kind wide;
  #L1b1928.  return v0 @kind wide;
}
procedure `int` `readSFixed32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readSFixed32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1208.  call temp:= `readRawLittleEndian32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian32:()I` @kind virtual;
  #L1b120e.  v0:= temp;
  #L1b1210.  return v0;
}
procedure `long` `readSFixed64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readSFixed64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b1988.  call temp:= `readRawLittleEndian64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian64:()J` @kind virtual;
  #L1b198e.  v0:= temp @kind wide;
  #L1b1990.  return v0 @kind wide;
}
procedure `int` `readSInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readSInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1224.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b122a.  v0:= temp;
  #L1b122c.  call temp:= `decodeZigZag32`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag32:(I)I` @kind static;
  #L1b1232.  v0:= temp;
  #L1b1234.  return v0;
}
procedure `long` `readSInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readSInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b19a4.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint64:()J` @kind virtual;
  #L1b19aa.  v0:= temp @kind wide;
  #L1b19ac.  call temp:= `decodeZigZag64`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream;.decodeZigZag64:(J)J` @kind static;
  #L1b19b2.  v0:= temp @kind wide;
  #L1b19b4.  return v0 @kind wide;
}
procedure `java.lang.String` `readString`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v10 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1b12dc.  call temp:= `readRawVarint32`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b12e2.  v0:= temp;
  #L1b12e4.  if v0 <= 0 then goto L1b132c;
  #L1b12e8.  v8:= (`long`) v0 @kind i2l;
  #L1b12ea.  v1:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b12ee.  v3:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b12f2.  v1:= v1 - v3 @kind long;
  #L1b12f4.  v5:= lcmp(v8, v1);
  #L1b12f8.  if v5 > 0 then goto L1b132c;
  #L1b12fc.  v0:= new `byte`[v0];
  #L1b1300.  v5:= 0L;
  #L1b1304.  v1:= v3 @kind wide;
  #L1b1306.  v3:= v0 @kind object;
  #L1b1308.  v4:= v5 @kind wide;
  #L1b130a.  v6:= v8 @kind wide;
  #L1b130c.  call `n`(v1, v3, v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/t0;.n:(J[BJJ)V` @kind static;
  #L1b1312.  v1:= new `java.lang.String`;
  #L1b1316.  v2:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b131a.  call `<init>`(v1, v0, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L1b1320.  v2:= v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1324.  v2:= v2 + v8 @kind long;
  #L1b1326.  v10.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v2 @kind wide;
  #L1b132a.  return v1 @kind object;
  #L1b132c.  if v0 <= 0 then goto L1b1358;
  #L1b1330.  call temp:= `i`(v10) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b1336.  v1:= temp;
  #L1b1338.  if v0 > v1 then goto L1b1358;
  #L1b133c.  v1:= new `byte`[v0];
  #L1b1340.  v2:= 0I;
  #L1b1342.  call `f`(v10, v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @kind direct;
  #L1b1348.  v0:= new `java.lang.String`;
  #L1b134c.  v2:= `@@com.google.crypto.tink.shaded.protobuf.Internal.a` @type ^`java.nio.charset.Charset` @kind object;
  #L1b1350.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L1b1356.  return v0 @kind object;
  #L1b1358.  if v0 != 0 then goto L1b1362;
  #L1b135c.  v0:= "" @kind object;
  #L1b1360.  return v0 @kind object;
  #L1b1362.  if v0 >= 0 then goto L1b1370;
  #L1b1366.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b136c.  v0:= temp @kind object;
  #L1b136e.  throw v0;
  #L1b1370.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1376.  v0:= temp @kind object;
  #L1b1378.  throw v0;
}
procedure `java.lang.String` `readStringRequireUtf8`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v8 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readStringRequireUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1b138c.  call temp:= `readRawVarint32`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b1392.  v0:= temp;
  #L1b1394.  if v0 <= 0 then goto L1b13cc;
  #L1b1398.  v1:= (`long`) v0 @kind i2l;
  #L1b139a.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.t` @type ^`long` @kind wide;
  #L1b139e.  v5:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b13a2.  v3:= v3 - v5 @kind long;
  #L1b13a4.  v7:= lcmp(v1, v3);
  #L1b13a8.  if v7 > 0 then goto L1b13cc;
  #L1b13ac.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b13b0.  v5:= v5 - v3 @kind long;
  #L1b13b2.  v3:= (`int`) v5 @kind l2i;
  #L1b13b4.  v4:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.h` @type ^`java.nio.ByteBuffer` @kind object;
  #L1b13b8.  call temp:= `g`(v4, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.g:(Ljava/nio/ByteBuffer;II)Ljava/lang/String;` @kind static;
  #L1b13be.  v0:= temp @kind object;
  #L1b13c0.  v3:= v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b13c4.  v3:= v3 + v1 @kind long;
  #L1b13c6.  v8.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v3 @kind wide;
  #L1b13ca.  return v0 @kind object;
  #L1b13cc.  if v0 < 0 then goto L1b13f2;
  #L1b13d0.  call temp:= `i`(v8) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.i:()I` @kind direct;
  #L1b13d6.  v1:= temp;
  #L1b13d8.  if v0 > v1 then goto L1b13f2;
  #L1b13dc.  v1:= new `byte`[v0];
  #L1b13e0.  v2:= 0I;
  #L1b13e2.  call `f`(v8, v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.f:([BII)V` @kind direct;
  #L1b13e8.  call temp:= `h`(v1, v2, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/u0;.h:([BII)Ljava/lang/String;` @kind static;
  #L1b13ee.  v0:= temp @kind object;
  #L1b13f0.  return v0 @kind object;
  #L1b13f2.  if v0 != 0 then goto L1b13fc;
  #L1b13f6.  v0:= "" @kind object;
  #L1b13fa.  return v0 @kind object;
  #L1b13fc.  if v0 > 0 then goto L1b140a;
  #L1b1400.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1406.  v0:= temp @kind object;
  #L1b1408.  throw v0;
  #L1b140a.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1410.  v0:= temp @kind object;
  #L1b1412.  throw v0;
}
procedure `int` `readTag`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readTag:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1248.  call temp:= `isAtEnd`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.isAtEnd:()Z` @kind virtual;
  #L1b124e.  v0:= temp;
  #L1b1250.  if v0 == 0 then goto L1b125c;
  #L1b1254.  v0:= 0I;
  #L1b1256.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @type ^`int` := v0;
  #L1b125a.  return v0;
  #L1b125c.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b1262.  v0:= temp;
  #L1b1264.  v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @type ^`int` := v0;
  #L1b1268.  call temp:= `getTagFieldNumber`(v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b126e.  v0:= temp;
  #L1b1270.  if v0 == 0 then goto L1b127a;
  #L1b1274.  v0:= v1.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.n` @type ^`int`;
  #L1b1278.  return v0;
  #L1b127a.  call temp:= `b`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.b:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1280.  v0:= temp @kind object;
  #L1b1282.  throw v0;
}
procedure `int` `readUInt32`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readUInt32:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1294.  call temp:= `readRawVarint32`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b129a.  v0:= temp;
  #L1b129c.  return v0;
}
procedure `long` `readUInt64`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v2 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readUInt64:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b19c8.  call temp:= `readRawVarint64`(v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint64:()J` @kind virtual;
  #L1b19ce.  v0:= temp @kind wide;
  #L1b19d0.  return v0 @kind wide;
}
procedure `void` `readUnknownGroup`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this, `int` v2 , `com.google.crypto.tink.shaded.protobuf.MessageLite$Builder` v3 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readUnknownGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1c48.  call temp:= `getEmptyRegistry`() @signature `Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;.getEmptyRegistry:()Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;` @kind static;
  #L1b1c4e.  v0:= temp @kind object;
  #L1b1c50.  call `readGroup`(v1, v2, v3, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readGroup:(ILcom/google/crypto/tink/shaded/protobuf/MessageLite$Builder;Lcom/google/crypto/tink/shaded/protobuf/ExtensionRegistryLite;)V` @kind virtual;
  #L1b1c56.  return @kind void;
}
procedure `void` `resetSizeCounter`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.resetSizeCounter:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b1cac.  v0:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b1cb0.  v0:= (`long`) v0 @kind i2l;
  #L1b1cb2.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1cb6.  v0:= v0 + v2 @kind long;
  #L1b1cb8.  v2:= v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b1cbc.  v0:= v0 - v2 @kind long;
  #L1b1cbe.  v1:= (`int`) v0 @kind l2i;
  #L1b1cc0.  v4.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.p` @type ^`int` := v1;
  #L1b1cc4.  return @kind void;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this, `int` v5 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipField:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0ac4.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1b0aca.  v0:= temp;
  #L1b0acc.  v1:= 1I;
  #L1b0ace.  if v0 == 0 then goto L1b0b3e;
  #L1b0ad2.  if v0 == v1 then goto L1b0b32;
  #L1b0ad6.  v2:= 2I;
  #L1b0ad8.  if v0 == v2 then goto L1b0b22;
  #L1b0adc.  v2:= 3I;
  #L1b0ade.  v3:= 4I;
  #L1b0ae0.  if v0 == v2 then goto L1b0b04;
  #L1b0ae4.  if v0 == v3 then goto L1b0b00;
  #L1b0ae8.  v5:= 5I;
  #L1b0aea.  if v0 != v5 then goto L1b0af6;
  #L1b0aee.  call `skipRawBytes`(v4, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipRawBytes:(I)V` @kind virtual;
  #L1b0af4.  return v1;
  #L1b0af6.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1b0afc.  v5:= temp @kind object;
  #L1b0afe.  throw v5;
  #L1b0b00.  v5:= 0I;
  #L1b0b02.  return v5;
  #L1b0b04.  call `skipMessage`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipMessage:()V` @kind virtual;
  #L1b0b0a.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b0b10.  v5:= temp;
  #L1b0b12.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b0b18.  v5:= temp;
  #L1b0b1a.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0b20.  return v1;
  #L1b0b22.  call temp:= `readRawVarint32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawVarint32:()I` @kind virtual;
  #L1b0b28.  v5:= temp;
  #L1b0b2a.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipRawBytes:(I)V` @kind virtual;
  #L1b0b30.  return v1;
  #L1b0b32.  v5:= 8I;
  #L1b0b36.  call `skipRawBytes`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipRawBytes:(I)V` @kind virtual;
  #L1b0b3c.  return v1;
  #L1b0b3e.  call `j`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.j:()V` @kind direct;
  #L1b0b44.  return v1;
}
procedure `boolean` `skipField`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v4 @kind this, `int` v5 , `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v6 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0b58.  call temp:= `getTagWireType`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagWireType:(I)I` @kind static;
  #L1b0b5e.  v0:= temp;
  #L1b0b60.  v1:= 1I;
  #L1b0b62.  if v0 == 0 then goto L1b0bfc;
  #L1b0b66.  if v0 == v1 then goto L1b0be6;
  #L1b0b6a.  v2:= 2I;
  #L1b0b6c.  if v0 == v2 then goto L1b0bd0;
  #L1b0b70.  v2:= 3I;
  #L1b0b72.  v3:= 4I;
  #L1b0b74.  if v0 == v2 then goto L1b0ba6;
  #L1b0b78.  if v0 == v3 then goto L1b0ba2;
  #L1b0b7c.  v2:= 5I;
  #L1b0b7e.  if v0 != v2 then goto L1b0b98;
  #L1b0b82.  call temp:= `readRawLittleEndian32`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian32:()I` @kind virtual;
  #L1b0b88.  v0:= temp;
  #L1b0b8a.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0b90.  call `writeFixed32NoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed32NoTag:(I)V` @kind virtual;
  #L1b0b96.  return v1;
  #L1b0b98.  call temp:= `d`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.d:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException$InvalidWireTypeException;` @kind static;
  #L1b0b9e.  v5:= temp @kind object;
  #L1b0ba0.  throw v5;
  #L1b0ba2.  v5:= 0I;
  #L1b0ba4.  return v5;
  #L1b0ba6.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0bac.  call `skipMessage`(v4, v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @kind virtual;
  #L1b0bb2.  call temp:= `getTagFieldNumber`(v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.getTagFieldNumber:(I)I` @kind static;
  #L1b0bb8.  v5:= temp;
  #L1b0bba.  call temp:= `a`(v5, v3) @signature `Lcom/google/crypto/tink/shaded/protobuf/WireFormat;.a:(II)I` @kind static;
  #L1b0bc0.  v5:= temp;
  #L1b0bc2.  call `checkLastTagWas`(v4, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.checkLastTagWas:(I)V` @kind virtual;
  #L1b0bc8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0bce.  return v1;
  #L1b0bd0.  call temp:= `readBytes`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readBytes:()Lcom/google/crypto/tink/shaded/protobuf/ByteString;` @kind virtual;
  #L1b0bd6.  v0:= temp @kind object;
  #L1b0bd8.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0bde.  call `writeBytesNoTag`(v6, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeBytesNoTag:(Lcom/google/crypto/tink/shaded/protobuf/ByteString;)V` @kind virtual;
  #L1b0be4.  return v1;
  #L1b0be6.  call temp:= `readRawLittleEndian64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readRawLittleEndian64:()J` @kind virtual;
  #L1b0bec.  v2:= temp @kind wide;
  #L1b0bee.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0bf4.  call `writeFixed64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeFixed64NoTag:(J)V` @kind virtual;
  #L1b0bfa.  return v1;
  #L1b0bfc.  call temp:= `readInt64`(v4) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readInt64:()J` @kind virtual;
  #L1b0c02.  v2:= temp @kind wide;
  #L1b0c04.  call `writeRawVarint32`(v6, v5) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeRawVarint32:(I)V` @kind virtual;
  #L1b0c0a.  call `writeUInt64NoTag`(v6, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;.writeUInt64NoTag:(J)V` @kind virtual;
  #L1b0c10.  return v1;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipMessage:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1cd8.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readTag:()I` @kind virtual;
  #L1b1cde.  v0:= temp;
  #L1b1ce0.  if v0 == 0 then goto L1b1cf0;
  #L1b1ce4.  call temp:= `skipField`(v1, v0) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipField:(I)Z` @kind virtual;
  #L1b1cea.  v0:= temp;
  #L1b1cec.  if v0 != 0 then goto L1b1cd8;
  #L1b1cf0.  return @kind void;
}
procedure `void` `skipMessage`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v1 @kind this, `com.google.crypto.tink.shaded.protobuf.CodedOutputStream` v2 @kind object) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipMessage:(Lcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b1d04.  call temp:= `readTag`(v1) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.readTag:()I` @kind virtual;
  #L1b1d0a.  v0:= temp;
  #L1b1d0c.  if v0 == 0 then goto L1b1d1c;
  #L1b1d10.  call temp:= `skipField`(v1, v0, v2) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipField:(ILcom/google/crypto/tink/shaded/protobuf/CodedOutputStream;)Z` @kind virtual;
  #L1b1d16.  v0:= temp;
  #L1b1d18.  if v0 != 0 then goto L1b1d04;
  #L1b1d1c.  return @kind void;
}
procedure `void` `skipRawBytes`(`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c` v6 @kind this, `int` v7 ) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.skipRawBytes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b1d30.  if v7 < 0 then goto L1b1d98;
  #L1b1d34.  v0:= (`long`) v7 @kind i2l;
  #L1b1d36.  v2:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.k` @type ^`int`;
  #L1b1d3a.  v3:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.o` @type ^`int`;
  #L1b1d3e.  v2:= v2 - v3 @kind int;
  #L1b1d40.  v2:= (`long`) v2 @kind i2l;
  #L1b1d42.  v4:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1d46.  v2:= v2 - v4 @kind long;
  #L1b1d48.  v4:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.r` @type ^`long` @kind wide;
  #L1b1d4c.  v2:= v2 + v4 @kind long;
  #L1b1d4e.  v4:= lcmp(v0, v2);
  #L1b1d52.  if v4 > 0 then goto L1b1d98;
  #L1b1d56.  if v7 <= 0 then goto L1b1d96;
  #L1b1d5a.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b1d60.  v0:= temp @kind wide;
  #L1b1d62.  v2:= 0L;
  #L1b1d66.  v4:= lcmp(v0, v2);
  #L1b1d6a.  if v4 != 0 then goto L1b1d74;
  #L1b1d6e.  call `e`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.e:()V` @kind direct;
  #L1b1d74.  call temp:= `d`(v6) @signature `Lcom/google/crypto/tink/shaded/protobuf/CodedInputStream$c;.d:()J` @kind direct;
  #L1b1d7a.  v0:= temp @kind wide;
  #L1b1d7c.  v1:= (`int`) v0 @kind l2i;
  #L1b1d7e.  call temp:= `min`(v7, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1b1d84.  v0:= temp;
  #L1b1d86.  v7:= v7 - v0 @kind int;
  #L1b1d88.  v1:= v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` @kind wide;
  #L1b1d8c.  v3:= (`long`) v0 @kind i2l;
  #L1b1d8e.  v1:= v1 + v3 @kind long;
  #L1b1d90.  v6.`com.google.crypto.tink.shaded.protobuf.CodedInputStream$c.q` @type ^`long` := v1 @kind wide;
  #L1b1d94.  goto L1b1d56;
  #L1b1d96.  return @kind void;
  #L1b1d98.  if v7 >= 0 then goto L1b1da6;
  #L1b1d9c.  call temp:= `f`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.f:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1da2.  v7:= temp @kind object;
  #L1b1da4.  throw v7;
  #L1b1da6.  call temp:= `j`() @signature `Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;.j:()Lcom/google/crypto/tink/shaded/protobuf/InvalidProtocolBufferException;` @kind static;
  #L1b1dac.  v7:= temp @kind object;
  #L1b1dae.  throw v7;
}
